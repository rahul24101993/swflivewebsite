{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[42],{628:function(e,t,a){\"use strict\";var n=a(28),r=a(33),o=a(116),s=a(38),i=a(19),l=a(46),c=a(15),d=a(12),u=a(107),p=a(54),f=a.n(p),g=a(1),v=a.n(g),h=a(7),b=a(26),y=a(13),m=a(32),O=a(6);let E=d.default&&d.default.ctx&&!v.a.isUndefined(d.default.ctx.tcSessionData);const D=e=>{let t=[],a=[];return e.length>0&&n.a&&e.forEach((e=>{let r=n.a.getObject(e);r?a.push(r):t.push(e)})),{missingSourceUIDs:t,objsCorrespondingToUids:a}};var T,L,j,w,x={getObjects:e=>{let t=[];return e&&e.forEach((e=>{if(r.a.isInstanceOf(\"Awp0XRTObjectSetRow\",e.modelType)){var a=u.a.getAdaptedObjectsSync([e]);t.push(a[0])}else t.push(e)})),t},loadVMOsIfNotAlreadyLoaded:e=>{let t=D(e);t.missingSourceUIDs.length>0&&E&&o.a.loadObjects(t.missingSourceUIDs)},getObjectByUidAsync:e=>{let t=D(e);return t.missingSourceUIDs.length>0&&E?o.a.loadObjects(t.missingSourceUIDs).then((()=>[...t.objsCorrespondingToUids,...D(t.missingSourceUIDs).objsCorrespondingToUids])):Promise.resolve(t.objsCorrespondingToUids)}},A=a(139),F=a(43),C=a(11),I=a(85),S=a(66),H=a(25),N=a(64),P=a(145),R=a(55),_=a(0),V=a(185);let M;var U=function(e,t,a,n){var r=e,o=(r=r[N.a.$ALL]||r)[N.a.$AND]||r[N.a.$ALL],s=r[N.a.$OR],i=o||s||[r];v.a.forEach(i,(function(e){var r=N.a.resolve(N.a.$SOURCE,e),o=N.a.resolve(N.a.$QUERY,e)||e;\"pasteContext.sourceObject\"===r?a=o.$typeOf:\"pasteContext.targetObject\"===r&&(n=o.$typeOf),a&&n&&r&&(j.has(n)||j.set(n,{sourceTypes:{}}),j.get(n).sourceTypes[a]||(j.get(n).sourceTypes[a]=[]),j.get(n).sourceTypes[a].push(t)),o&&(o[N.a.$ALL]||o[N.a.$AND]||o[N.a.$OR]||o[N.a.$SOURCE])&&U(o,t,a,n)}))};function W(e){if(\"mselected\"===e.name&&e.value&&1===e.value.length){var t=M.getObjectValidSourceTypes(e.value[0]);t=t||{},d.default.registerCtx(\"selectedModelTypeRelations\",Object.keys(t))}}function G(e,t){!function(e,t){var a={messageText:\"\",messageTextParams:[]};e.length>1?c.default.getLocalizedTextFromKey(\"ZeroCompileCommandMessages.pasteMultipleSuccessMessage\").then((function(n){a.messageText=n,a.messageTextParams=[e.length,t.props.object_string.uiValues[0]];var r=l.a.applyMessageParamsWithoutContext(a.messageText,a.messageTextParams);l.a.showInfo(r)})):c.default.getLocalizedTextFromKey(\"ZeroCompileCommandMessages.pasteSuccessMessage\").then((function(n){a.messageText=n;const r=e&&e[0].props&&e[0].props.object_string?e[0].props.object_string.uiValues[0]:e[0].name;a.messageTextParams=[r,t.props.object_string.uiValues[0]];var o=l.a.applyMessageParamsWithoutContext(a.messageText,a.messageTextParams);l.a.showInfo(o)}))}(u.a.getAdaptedObjectsSync(e),t)}let k=function(){return L||{}},B=function(){T=i.default.getCfgCached(\"paste\")||{},j=new Map,v.a.forEach(T.pasteHandlers,(function(e,t){if(e.activeWhen){var a=e.activeWhen.condition,n=null;(n=v.a.startsWith(a,\"conditions.\")?v.a.get(T,a):a)&&n.expression&&U(n.expression,t,void 0,void 0)}})),L=j,h.a.subscribe(\"appCtx.register\",W),h.a.subscribe(\"dragDrop.success\",(function(e){G(e.sourceObjects,e.targetObject)})),h.a.subscribe(\"dragDrop.failure\",(function(e){var t;t=e.reason,c.default.getLocalizedTextFromKey(\"ZeroCompileCommandMessages.pasteFailureMessage\").then((e=>{var a=e+\":\";v.a.forEach(t.message.split(/\\n/g),(function(e){a=a+\"<br>\"+e})),l.a.showInfo(a)}))})),h.a.subscribePostal({channel:\"paste\",topic:\"drop\",callback:function(e){e&&e.pasteInput&&v.a.forEach(e.pasteInput,(function(e){var t=e.targetObject,a=e.relationType,n=e.sourceObjects;M.execute(t,n,a,{...e.props,isDragDropIntent:!0}).then((function(){var e={relatedModified:[t],refreshLocationFlag:!1,createdObjects:n};h.a.publish(\"cdm.relatedModified\",e)}))}))}})};M={execute:function(e,t,a,n){var r={},o=n;o&&!o.hasOwnProperty(\"isDragDropIntent\")?o.isDragDropIntent=!1:o||(o={isDragDropIntent:!1});var s=R.a.get(\"solutionDef.defaultPasteHandlerConfiguration\"),i=function(n,i){v.a.forEach(t,(function(t){var l={targetObject:e,sourceObject:t,relationType:a,...o},c=null;c=\"object\"===typeof s?n[s.bestTargetFitFinder](e):function(e){var t=k(),a=y.a.getTypeHierarchy(e)||[e.type];if(a[0])for(var n=0;n<a.length;n++){var r=a[n];if(t.has(r))return t.get(r)}return null}(e);var u=null,p=null;if(c){var f=null;f=\"object\"===typeof s?n[s.bestSourceFitFinder](c.sourceTypes,t):function(e,t){var a=y.a.getTypeHierarchy(t)||[t.type];if(a[0])for(var n=0;n<a.length;n++){var r=a[n];if(e[r])return e[r]}return null}(c.sourceTypes,t);var g,h=0;f&&v.a.forEach(f,(function(e){var t=T.pasteHandlers[e],a=!1,n=t.activeWhen.condition;v.a.startsWith(t.activeWhen.condition,\"conditions.\")&&(n=v.a.get(T,t.activeWhen.condition)),null!==n&&(g=P.a.getExpressionLength(n.expression,i),a=H.a.evaluateCondition({ctx:d.default.ctx,pasteContext:l},n.expression)),a&&g>h&&(h=g,u=T.actions[t.action],p=t.action)}))}if(!p&&\"object\"===typeof s){var b=s.pasteHandler;p=T.pasteHandlers[b].action,u=T.actions[p],O.a.warn(\"No configured paste handler found for source object: '\"+t+\"' when target object: '\"+e+\"'\\nRelationType: '\"+a+\"'\\n...Assuming default handler\")}p&&(r.hasOwnProperty(p)||(r[p]={}),r[p].hasOwnProperty(\"sourceObjs\")||(r[p].sourceObjs=[]),r[p].sourceObjs.push(t),u&&(r[p].handlerAction=u))}));var l=[];return v.a.forEach(r,(function(t){var n=t.handlerAction.deps,r=null,s={data:i,ctx:d.default.ctx,pasteContext:{targetObject:e,sourceObject:t.sourceObjs,relationType:a,...o}};n?r?l.push(S.a.executeAction(i,t.handlerAction,s,r,!1)):l.push(_.b.loadDependentModule(t.handlerAction.deps).then((function(e){return r=e,S.a.executeAction(i,t.handlerAction,s,r,!1)}))):l.push(S.a.executeAction(i,t.handlerAction,s,r,!1))})),C.a.instance.all(l)},l=function(e){return s.deps?_.b.loadDependentModule(s.deps).then((function(t){return i(t,e)})):i(null,e)};return w?l(w):async function(e){var t=C.a.instance.defer();e._viewModelId=\"pasteViewModel_\"+Math.random,e.skipClone=!0;let a=I.default.populateViewModelPropertiesFromJson(e,null,null,!0);return a.i18n=await V.a.populateI18nMap(e.i18n,null),t.resolve(a),t.promise}(T).then((function(e){return l(w=e)}))},executeWithMultipleRelations:function(e,t){var a=[];return v.a.forOwn(t,(function(t,n){a.push(M.execute(e,t,n))})),C.a.instance.all(a)},getTargetTypes:k,getObjectValidSourceTypes:function(e){if(e&&e.modelType&&e.modelType.typeHierarchyArray||e&&e.typeHierarchy)for(var t=y.a.getTypeHierarchy(e),a=M.getTargetTypes(),n=0;n<t.length;n++){var r=t[n];if(a.has(r))return a.get(r).sourceTypes}return null},adaptedInput:function(e){if(e){var t=v.a.isArray(e)?e:[e];return u.a.getAdaptedObjectsSync(t)}return[]},loadConfiguration:B,determineActiveHandler:(e,t)=>{var a=!1;return v.a.forOwn(T.pasteHandlers,(n=>{var r=n.activeWhen?n.activeWhen.condition:null;r&&(v.a.startsWith(n.activeWhen.condition,\"conditions.\")&&(r=v.a.get(T,n.activeWhen.condition)),null!==r&&(a=a||H.a.evaluateCondition({ctx:d.default.ctx,pasteContext:{targetObject:t,sourceObject:e,relationType:\"\"}},r.expression)))})),a}};var J=M;B();var $=a(35);class K extends A.a{static reset(){A.a.reset(),delete this._defaultPasteHandler,delete this._pasteFileHandler}constructor(){super(),X||this.constructor._defaultPasteHandler||this.constructor._pasteFileHandler||(X=i.default.getCfg(\"paste\").then((e=>e.defaultPasteHandler?y.a.loadDependentModule(e.defaultPasteHandler.dep).then((t=>(this.constructor._defaultPasteHandler=t,e))):e)).then((e=>{if(e.defaultPasteFileHandler)return y.a.loadDependentModule(e.defaultPasteFileHandler.dep).then((t=>(this.constructor._pasteFileHandler=t,e)))})).then((function(){X=null})))}get pasteHandler(){return this.constructor._defaultPasteHandler}get pasteFileHandler(){return this.constructor._pasteFileHandler}}var Z,z,X,Y=[\"text/html\",\"aw_interop_type\"],q=\"Dataset\",Q=!0,ee=!1,te=0;const ae=\"hosting.DragDropEvent\",ne=\".ui-grid-row\",re=\".aw-widgets-droppable\",oe=\"dragDropEvent.highlight\";var se=b.default.getUrlAttributes();void 0!==se.logDnDEventActivity&&(te=1,se.logDnDEventActivity>0&&(te=se.logDnDEventActivity));var ie={},le={},ce={};let de=!1;var ue=function(){m.default.publish(\"awDragData\")},pe=function(e,t){var a={},n=f()(t).data(\"validSourceTypes\");if(n)for(var r=0;r<e.length;r++){var o=e[r],s=n[o],i=[];s.relation?i.push(s.relation):i.push(\"\"),a[o]=i}return a},fe=function(e,t){t.clearSelectionFn(e)};var ge=function(e,t,a,n){a&&a.length>0&&(fe(t,n),we(e,t,a,n))},ve=function(e,t,a,n){a&&a.length>0&&(fe(t,n),xe(e,t,a,n))},he=function(e,t,a,r){var s=[],i=[];if(t)for(var l=0;l<t.length;l++){var c=n.a.getObject(t[l]);c?s.push(c):i.push(t[l])}i&&0!==i.length?o.a.loadObjects(i,(function(){for(var t=0;t<i.length;t++){var o=n.a.getObject(i[t]);o&&s.push(o)}s&&s.length>0&&ve(e,r[0],s,a),ue()})):(ve(e,r[0],s,a),ue())},be=function(e){var t=!1,a=f()(e.target),n=a.closest(ne);return n&&n.length<=0&&(n=a.closest(\".aw-widgets-cellListItem\")).length<=0&&(n=a.closest(re)).length<=0&&a&&a[0]&&a[0].children&&a[0].children.length>0&&a[0].children[0].classList&&a[0].children[0].classList.contains(\"aw-widgets-cellListContainer\")&&(n=a[0].children),n&&n.length>0&&Ce.isValidObjectToDrop(e,n[0])&&(t=!0),t},ye=function(e){var t=null;if(e&&e.target&&e.target.classList&&e.target.classList.contains(\"aw-widgets-chooseordropfile\"))t=e.target;else{var a=$.a.closestElement(e.target,\".aw-widgets-chooseordropfile\");a&&(t=a)}return t};var me=function(e){var t,a=[],n=f()(e.target),r=n.closest(ne);return void 0!==r&&r.length<=0&&(r=n.closest(\".aw-widgets-cellListItem\")).length<=0&&(r=n.closest(re)),t=r&&r.length>0?r.get(0):n.get(0),a.push(t),a&&v.a.forEach(a,(function(e){var t=null})),a},Oe=function(e,t){if(e){var a=f()(e),n=a.data(\"validSourceTypes\");let o=K.instance.pasteHandler;if(!n&&o){n=o.getObjectValidSourceTypes(t),a.data(\"validSourceTypes\",n),a.data(\"dropuid\",t.uid);var r=function(e){for(var t=e;t;){var a=f()(t).data(\"containerId\");if(a)return a.toString();t=t.parentElement}return null}(e);r&&a.data(\"containerId\",r)}}};function Ee(e){var t=e.lastIndexOf(\"/\");return t>=0?e.substring(t+1):\"\"}var De=function(e,t){var a;if(e&&e.target&&e.target.classList)if(e.target.classList.contains(\"aw-widgets-cellListItemContainer\"))a=e.target.parentElement;else if(e.target.classList.contains(\"ui-grid-cell\")){var n=f()(e.target),r=n.closest(ne);a=r&&r.length>0&&1===t?n.closest(ne).get(0):e.target}return a},Te=function(e){var t=f()(e).data(\"validSourceTypes\");return t?Object.keys(t):[]},Le=function(e){return e.props.object_string?e.props.object_string.displayValues[0]:e.props.items_tag?e.props.items_tag.displayValues[0]:e.props.object_name?e.props.object_name.displayValues[0]:e.props.object_desc&&e.props.object_desc.length>0?e.props.object_desc.displayValues[0]:e.props.job_name?e.props.job_name.displayValues[0]:e.props.awp0CellProperties?e.props.awp0CellProperties.displayValues[0]:e.uid},je=function(e,t){if(e&&e.length>0&&t&&t.length>0){for(var a=0;a<t.length;a++){for(var n=t[a],o=null,s=0;s<e.length;s++){var i=e[s];if(n===i){o=i;break}var l=r.a.getType(n);if(l){var c=l.typeHierarchyArray;if(c)for(var d=1;d<c.length;d++)if(c[d]===i){o=i;break}}else O.a.warn(\"Unable to locate 'source' type (not loaded yet?): \"+n)}if(!o)return!1}return!0}return!1},we=function(e,t,a,n){var o=Te(e);if(!o||0===o.length){o=[];var s=K.instance.pasteHandler.getObjectValidSourceTypes(t);if(s&&\"object\"===typeof s){var i=Object.keys(s);if(i)for(var d=0;d<i.length;d++){var u=i[d];r.a.containsType(u)&&o.push(u)}}}var p=pe(o,e),f={};if(a)for(var g=0;g<a.length;g++){var b=a[g],y=r.a.getType(q);if(y)for(var m=y.typeHierarchyArray,E=0;E<m.length;E++){var D=p[m[E]];if(D){var T=f[D];T||(T=[],f[D]=T),T.push(b);break}}else O.a.warn(\"Unable to locate 'source' type' (not loaded yet?): Dataset\")}Fe(e,t,n);var L=[];v.a.forEach(f,(function(e,a){var n={};n.targetObject=t,n.relationType=a,n.sourceObjects=e,L.push(n)}));var j=Date.now();(function(e){return K.instance.pasteFileHandler.pasteFilesWithHandler(e).then((function(e){if(e&&e.isOsFiles){const{pasteFilesInput:a}=e;var t=C.a.instance.defer();return v.a.forEach(a,(function(e){const{targetObject:a,relationType:n,sourceObjects:r}=e;J.execute(a,r,n,{isDragDropIntent:!0}).then((function(e){var n={relatedModified:[a],refreshLocationFlag:!1,createdObjects:r};h.a.publish(\"cdm.relatedModified\",n),t.resolve(e[0])}),(function(e){t.reject(e)}))})),t.promise}return e}))})(L).then((function(e){var t=Date.now(),a=L,n=e.sourceObjects;if(te>1){var r=(t-j)/1e3;O.a.info(\"Time to process (\"+n.length+\") files: \"+r+\"sec\")}var o={};o.dropCompletedDocument=c.default.getLoadedTextFromKey(\"dragAndDropMessages.dropCompletedDocument\"),o.dropCompleted=c.default.getLoadedTextFromKey(\"dragAndDropMessages.dropCompleted\");var s=a[0].targetObject.cellHeader1;if(s||(s=a[0].targetObject.props.object_string.uiValues[0]),s||(s=\"???\"),e.docCreated){var i=o.dropCompletedDocument;i=(i=(i=i.replace(\"{0}\",e.docName)).replace(\"{1}\",s)).replace(\"{2}\",n.length),l.a.showInfo(i)}else{var d=o.dropCompleted;d=(d=d.replace(\"{0}\",n.length)).replace(\"{1}\",s),l.a.showInfo(d)}}),(function(e){O.a.error(\"uploadFailures\"+e)}))},xe=function(e,t,a,n){var o=Te(e);if(!o||0===o.length){o=[];var s=K.instance.pasteHandler.getObjectValidSourceTypes(t),i=Object.keys(s);if(i)for(var l=0;l<i.length;l++){var c=i[l];r.a.containsType(c)&&o.push(c)}}var d=pe(o,e),u={};if(a)for(var p=0;p<a.length;p++){var f=a[p],g=f.type,h=r.a.getType(g);if(h)for(var b=h.typeHierarchyArray,y=0;y<b.length;y++){var m=d[b[y]];if(m){var E=u[m];E||(E=[],u[m]=E),E.push(f);break}}else O.a.warn(\"Unable to locate 'source' type' (not loaded yet?): \"+g)}Fe(e,t,n);var D=Object.keys(u);if(D&&D.length>0){var T=[];v.a.forEach(u,(function(e,a){var n={};n.targetObject=t,n.relationType=a,n.sourceObjects=e,T.push(n)})),Ce.publishDropEvent(T)}},Ae=function(e,t){e.dataTransfer.dropEffect=t},Fe=function(e,t,a){a.selectResultFn(e,t)},Ce={};let Ie=function(e,t){if(Q)try{v.a.forEach(t,(function(t,a){e.dataTransfer.setData(a,t)}))}catch(a){v.a.forEach(t,(function(t,a){\"aw_interop_type\"===a&&e.dataTransfer.setData(\"text\",t)}))}},Se=function(e){v.a.isUndefined(Z)&&(Z=document.body);var t=Z.querySelectorAll(\".aw-theme-dropframe.aw-widgets-dropframe\");t&&(de=!1,v.a.forEach(t,(function(t){h.a.publish(oe,{event:e,isGlobalArea:!0,isHighlightFlag:!1,targetElement:t})})))};var He=function(e,t){if(Ce.processDragLeaveGlobal(e),t)if(Ce.dataTransferContainsURLs(e))Ae(e,\"copy\");else{Ae(e,\"none\"),e.stopPropagation(),e.preventDefault();var a=function(e){var t=[],a=document.body.querySelectorAll(re);return a&&v.a.forEach(a,(function(a){Ce.isValidObjectToDrop(e,a)&&t.push(a)})),0===t.length?te>=1&&O.a.info(\"No valid containers found on the entire page\"):te>=1&&O.a.info(t.length+\" valid containers found , highlight in progress\"),t}(e);a&&v.a.forEach(a,(function(t){h.a.publish(oe,{event:e,isGlobalArea:!0,isHighlightFlag:!0,targetElement:t})}))}else Ce.isValidObjectToDrop(e)?(h.a.publish(oe,{event:e,isGlobalArea:!1,isHighlightFlag:!0,targetElement:me(e)[0]}),Ae(e,\"copy\"),e.stopPropagation(),e.preventDefault()):(Ae(e,\"none\"),e.dataTransfer.effectAllowed=\"none\",e.stopPropagation(),e.preventDefault())};const Ne=e=>{Ce.processDragOver(e,!0)};Ce={disableDragAndDrop:e=>{const t=e=>{e.stopPropagation()};e.addEventListener(\"dragover\",(e=>{t(e),e.dataTransfer.dropEffect=\"none\"})),e.addEventListener(\"dragenter\",t),e.addEventListener(\"dragleave\",t),e.addEventListener(\"drop\",t)},addDragDataToDragEvent:Ie,getCachedSourceUids:function(){var e=m.default.get(\"awDragData\");if(e&&\"undefined\"!==e){var t=JSON.parse(e);if(t.uidList)return t.uidList}return null},isValidObjectToDrop:function(e,t){if(v.a.isUndefined(t)&&(t=me(e)[0]),!t)return!1;if(t.classList&&t.classList.contains(\"aw-widgets-chooseordropfile\")&&Ce.dataTransferContainsFiles(e))return!0;var a=f()(t).data(\"dropuid\");if(!a||0===a.length)return!1;var n=null,o=null,i=function(){var e=m.default.get(\"awDragData\");return e&&\"undefined\"!==e?JSON.parse(e):null}();if(i&&(n=i.uidList,o=i.typeList),n&&n.length>0&&-1!==v.a.indexOf(n,a))return!1;var l=Te(t);if(l&&l.length>0){if((!o||0===o.length)&&Ce.dataTransferContainsFiles(e)){var c=Ce.getDataTransferFileTypes(e);c&&0===c.length&&c.push(q);for(var d=a,u=0;u<l.length;u++)d+=\",\",d+=l[u];if(c)for(var p=0;p<c.length;p++)d+=\",\",d+=c[p];var g=d,h=le[g];return h?h.value:(ie[g]||(ie[g]=Ce.getDataTransferSourceTypes(a,c).then((function(e){delete ie[g],le[g]={value:e&&e.length>0&&je(l,e)}}),(function(){delete ie[g],le[g]={value:!1}}))),!1)}for(var b=null,y=null,E=0;E<l.length;E++){var D=l[E];r.a.containsType(D)?(y||(y=[]),y.push(D)):(b||(b=[]),b.push(D))}if(!y&&b){for(var T=a,L=0;L<b.length;L++)L>0&&(T+=\",\"),T+=b[L];var j=T;return ce[j]||(ce[j]=j,s.a.ensureModelTypesLoaded(b).then((function(){delete ce[j]}),(function(e){O.a.error(\"Unable to get model types: \"+e)}))),!1}return je(y,o)}return!1},processAWInteropAndHosting:function(e,t){var a=[],n={},o=[],s=\"\",i=!0;!1,e.forEach((e=>{var t;(e.type&&!0,r.a.isInstanceOf(\"Awp0XRTObjectSetRow\",e.modelType))&&(e=u.a.getAdaptedObjectsSync([e])[0]);if(i&&(i=!1,t=e.uid,s=window.decodeURIComponent(document.location.origin+document.location.pathname+F.a.instance.href(\"com_siemens_splm_clientfx_tcui_xrt_showObject\",{uid:t}))),e.uid&&a.push(e.uid),n[e.type]=e.type,z){var l=z(e);v.a.forEach(l,(function(e){o.push(e)}))}else te&&O.a.warn(\"Unable to determine InteropObjectRef information due to missing callback function\")}));var l={\"text/uri-list\":s,\"text/plain\":s};if(o&&o.length>0&&Q)for(var c={DragTargets:o},d=JSON.stringify(c),p=0;p<Y.length;p++)l[Y[p]]=d;l[\"text/uri-list\"]=s,l[\"text/plain\"]=s;var f={};f.containerId=t,f.uidList=a,f.firstObjectUrl=s,f.typeList=[],v.a.forEach(n,(function(e){f.typeList.push(e)})),m.default.publish(\"awDragData\",JSON.stringify(f)),Ie(event,l)},processDragEnd:function(e){ue()},processDragLeave:function(e){e.preventDefault()},processDragLeaveGlobal:Se,processDrop:function(e,t){e.stopPropagation(),e.preventDefault();var a=me(e)[0];if(a){h.a.publish(oe,{event:e,isGlobalArea:!1,isHighlightFlag:!1,targetElement:a});var n=Ce.getCachedSourceUids();if(n&&n.length>0)!function(e,t,a){var n=a.getElementViewModelObjectFn(e);if(!n||0===n.length){var o=f()(e).data(\"dropuid\");o&&(n=[]).push(Ce.getTargetObjectByUid(o))}n&&0!==n.length&&(r.a.isInstanceOf(\"Awp0XRTObjectSetRow\",n[0].modelType)?u.a.getAdaptedObjects(n).then((function(n){he(e,t,a,n)})):he(e,t,a,n))}(a,n,t);else{var o=function(e){return e.dataTransfer.files}(e);if(o&&o.length>0&&o.item(0).size>0)!function(e,t,a){var n=a.getElementViewModelObjectFn(e);if(!n||0===n.length){var o=f()(e).data(\"dropuid\");o&&(n=[]).push(Ce.getTargetObjectByUid(o))}n&&0!==n.length&&(r.a.isInstanceOf(\"Awp0XRTObjectSetRow\",n[0].modelType)?u.a.getAdaptedObjects(n).then((function(n){ge(e,n[0],t,a)})):ge(e,n[0],t,a)),ue()}(a,o,t);else{var s=c.default.getLoadedTextFromKey(\"dragAndDropMessages.dropFolderFailureDocument\");s=s.replace(\"{0}\",o.item(0).name),l.a.showError(s),ue()}}}else ue()},setEffectAllowed:function(e,t){try{e.dataTransfer.effectAllowed=t}catch(a){}},setupDragAndDrop:function(e,t,a){var n=f()(e),r=n.attr(\"show-drop-area\"),o=n.hasClass(\"aw-widgets-droppable\")&&!r?n:n.find(re);if(o);t.dragStartFn=function(a){if(a)if(Q=\"ADOBE\"!==d.default.ctx.aw_host_type,ee=d.default.ctx.aw_hosting_enabled,\"#text\"===a.target.nodeName)n.data(\"dragging\",!1),a.preventDefault();else{te>=2&&O.a.info(\"dragstart: \\n\"+JSON.stringify(a,null,2)),ee&&h.a.publish(ae,{type:\"dragstart\",event:a});var r=function(e){return e.srcElement?e.srcElement:e.target}(a),o=t.getElementViewModelObjectFn(r,!1);if(o&&o.length>0){te>=1&&O.a.info(\"Source Item UID: \"+Le(o[0])),f()(e).data(\"dragging\",!0);var s=n.data(\"containerId\");s||(s=Date.now(),n.data(\"containerId\",s)),Ce.processAWInteropAndHosting(o,s.toString()),Ce.updateDragImage(a,o.length),Q||a.dataTransfer.clearData()}else n.data(\"dragging\",!1),a.preventDefault()}},t.dragEndFn=function(e){if(e){te>=2&&O.a.info(\"dragend: \\n\"+JSON.stringify(e,null,2));var t=De(e);if(t){var a=t.getElementsByClassName(\"aw-widgets-multidragimage\")[0];a&&(t.style.position=\"\",a.parentNode.removeChild(a))}ee&&h.a.publish(ae,{type:\"dragend\",event:e}),n.data(\"dragging\",!1)}},t.dragOverFn=function(e){e&&(te>=3&&O.a.info(\"dragover: \\n\"+JSON.stringify(e,null,2)),ee&&h.a.publish(ae,{type:\"dragover\",event:e}),e.stopPropagation(),Ce.processDragOver(e,!1))},t.dragEnterFn=function(e){if(e){te>=2&&O.a.info(\"dragenter: \\n\"+JSON.stringify(e,null,2)),ee&&h.a.publish(ae,{type:\"dragenter\",event:e}),e.preventDefault(),e.stopPropagation();var a=me(e)[0];if(!a)return;if(Ce.isValidObjectToDrop(e)){var n=t.getElementViewModelObjectFn(a,!0);if(n&&n.length>0)te>=1&&O.a.info(\"Target Item Name: \"+Le(n[0])),v.a.debounce(Ce.processDragEnter,100)(e,n[0])}}},t.dragLeaveFn=function(e){e&&(te>=2&&O.a.info(\"dragleave: \\n\"+JSON.stringify(e,null,2)),ee&&h.a.publish(ae,{type:\"dragleave\",event:e}),v.a.debounce(Ce.processDragLeave,100)(e))},t.dropFn=function(e){e&&(te>=2&&O.a.info(\"drop: \\n\"+JSON.stringify(e,null,2)),ee&&h.a.publish(ae,{type:\"drop\",event:e}),n.data(\"dragging\",!1),Ce.processDrop(e,t))},e.addEventListener(\"dragstart\",t.dragStartFn),e.addEventListener(\"dragend\",t.dragEndFn),e.addEventListener(\"dragover\",t.dragOverFn),e.addEventListener(\"dragenter\",t.dragEnterFn),e.addEventListener(\"dragleave\",t.dragLeaveFn),e.addEventListener(\"drop\",t.dropFn)},dragLeaveEventOnGlobalWindow:function(e){Se(e),Ce.dataTransferContainsFiles(e)&&ue()},dragEndEventOnGlobalWindow:function(e){Se(e)},tearDownDragAndDrop:function(e,t){t.dragStartFn&&(e.removeEventListener(\"dragstart\",t.dragStartFn),e.removeEventListener(\"dragend\",t.dragEndFn),e.removeEventListener(\"dragover\",t.dragOverFn),e.removeEventListener(\"dragenter\",t.dragEnterFn),e.removeEventListener(\"dragleave\",t.dragLeaveFn),e.removeEventListener(\"drop\",t.dropFn),t.dragStartFn=null,t.dragEndFn=null,t.dragOverFn=null,t.dragEnterFn=null,t.dragLeaveFn=null,t.dropFn=null)},updateDragImage:function(e,t){var a,n;!b.default.isIE&&Q&&(navigator.userAgent.indexOf(\"ugraf\")>=0?(n=e.target,a=f()(n).find(\"img:first\")[0]||n):a=t>1?function(e,t){var a,n,r=De(e,t),o=null;if(r){if(o=r.cloneNode(!0),r.classList&&r.classList.contains(\"aw-widgets-cellListItem\")){r.style.position=\"relative\",a=r.offsetWidth-50+\"px\",n=r.offsetHeight-10+\"px\",o.children[0].removeChild(o.children[0].children[1]);var s=o.getElementsByClassName(\"aw-widgets-cellListCellTitleBlock\")[0].parentNode;if(s)for(var i=1;i<s.children.length;i++)s.removeChild(s.children[i]),i--}else a=\"150px\",n=\"100%\";o.id=\"dragCount\",o.style.maxWidth=a,o.style.minWidth=a,o.style.maxHeight=n,o.style.minHeight=n,o.style.position=\"absolute\",o.style.left=\"0px\",o.style.top=\"0px\",o.style.zIndex=\"99\",o.classList.add(\"aw-theme-multidragimage\"),o.classList.add(\"aw-widgets-multidragimage\"),r.children[0].appendChild(o);var l=o.cloneNode(!0);l.style.left=\"5px\",l.style.top=\"5px\";var c=o.cloneNode(!0);o.appendChild(l),t>2&&(c.style.left=\"10px\",c.style.top=\"10px\",o.appendChild(c))}return o}(e,t):De(e,1),a&&e.dataTransfer.setDragImage(a,0,0))},getTargetObjectByUid:function(e){return n.a.getObject(e)},getSourceObjects:function(e,t){var a=[];if(!e)return a;var n=e.getSelectedObjects(),r=!1;return n&&n.length>0&&v.a.forEach(n,(function(e){if(e.uid===t)return r=!0,!1})),r&&(a=v.a.clone(n)),a},dataTransferContainsFiles:function(e){if(e.dataTransfer){var t=e.dataTransfer.types;if(t)for(var a=0;a<t.length;++a)if(\"Files\"===t[a])return!0}return!1},dataTransferContainsURLs:function(e){if(e.dataTransfer){var t=e.dataTransfer.types;if(t)for(var a=0;a<t.length;++a)if(\"text/html\"===t[a])return!0}return!1},getDataTransferFileTypes:function(e){var t=[];if(e.dataTransfer.items){var a=e.dataTransfer.items;if(a)for(var n=0;n<a.length;n++){var r=Ee(a[n].type);r&&-1===t.indexOf(r)&&t.push(r)}}return t},getDataTransferSourceTypes:function(e,t){var a={parent:n.a.getObject(e),fileExtensions:t};return s.a.postUnchecked(\"Internal-AWS2-2015-10-DataManagement\",\"getDatasetTypesWithDefaultRelation\",a).then((function(e){if(e.partialErrors||e.PartialErrors||e.ServiceData&&e.ServiceData.partialErrors)return[];var t=[],a=e.output;if(a)for(var r=0;r<a.length;r++){var o=a[r].datasetTypesWithDefaultRelInfo;if(o){var i=o[0].datasetType.uid,l=n.a.getObject(i).props.object_string.dbValues[0];t.push(l)}}return s.a.ensureModelTypesLoaded(t).then((function(){return t}))}),(function(e){return O.a.trace(e),[]}))},setCreateInteropObjectRef:function(e){z=e},publishDropEvent:function(e){h.a.publishOnChannel({channel:\"paste\",topic:\"drop\",data:{pasteInput:e}})},registerEvents:function(){document.body.addEventListener(\"dragenter\",(function(e){e.stopPropagation(),e.preventDefault(),be(e)&&!ye(e)||(function(e){var t=!1,a=$.a.closestElement(e.target,ne);return v.a.isUndefined(a)||null===a?e&&e.target&&e.target.classList&&e.target.classList.contains(\"ui-grid-row\")&&(t=!0):t=!0,t}(e)||function(e){var t=$.a.closestElement(e.target,\".aw-widgets-cellListContainer\");return!v.a.isUndefined(t)&&null!==t}(e)?(te>=1&&O.a.info(\"GLOBAL DRAG ENTER EVENT, DRAG WITHIN A TABLE, COPY cursor should be shown => tag name :\"+e.target.tagName),Ae(e,\"copy\")):(te>=1&&O.a.info(\"GLOBAL DRAG ENTER EVENT, DRAG NOT WITHIN A TABLE, NOT ALLOWED cursor should be shown => tag name :\"+e.target.tagName),Ae(e,\"none\"),Ne(e)))})),document.body.addEventListener(\"dragover\",(function(e){be(e)&&!ye(e)||(te>=1&&O.a.info(\"GLOBAL DRAG OVER EVENT \"),Ne(e))})),document.body.addEventListener(\"dragleave\",(function(e){e.stopPropagation(),e.preventDefault(),te>=1&&O.a.info(\"GLOBAL DRAG LEAVE EVENT, Object either dragged outside the global window OR over an applicable valid container on the page OR over an applicable invalid container on the page\"),function(e){return e.x<=0||e.y<=0||e.screenX<=0||e.screenY<=0}(e)&&(de=!1,Ce.dragLeaveEventOnGlobalWindow(e))})),document.body.addEventListener(\"dragend\",(function(e){te>=1&&O.a.info(\"GLOBAL DRAG END EVENT \"),de=!1,Ce.dragEndEventOnGlobalWindow(e)}))},processDragOver:function(e,t){var a=ye(e);a&&(a.addEventListener(\"dragover\",(function(e){te>=1&&O.a.info(\"----------FILE IS OVER CHOOSE/DROP FILE ZONE----------\"),Ce.processDragLeaveGlobal(e),Ce.dataTransferContainsFiles(e)?(h.a.publish(oe,{event:e,isGlobalArea:!1,isHighlightFlag:!0,targetElement:a}),Ae(e,\"copy\"),e.stopPropagation(),e.preventDefault()):(Ae(e,\"none\"),e.stopPropagation())})),a.addEventListener(\"dragleave\",(function(e){te>=1&&O.a.info(\"----------FILE IS LEAVING CHOOSE/DROP FILE ZONE----------\"),Ae(e,\"none\"),Ce.processDragLeaveGlobal(e),e.stopPropagation(),e.preventDefault()})),a.addEventListener(\"drop\",(function(e){te>=1&&O.a.info(\"----------FILE IS DROPPED IN CHOOSE/DROP FILE ZONE----------\"),Ae(e,\"none\"),Ce.processDragLeaveGlobal(e),e.stopPropagation(),e.preventDefault()})));var n=Ce.getCachedSourceUids();n&&x.loadVMOsIfNotAlreadyLoaded(n),He(e,t)},processDragEnter:function(e,t){var a=me(e)[0];Oe(a,t),e.preventDefault()}};t.a=Ce;d.default.ctx&&d.default.ctx.tcSessionData}}]);","name":"static/js/42.bb028d42.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[42],{\n\n/***/ 628:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// UNUSED EXPORTS: processDragOver, addDragDataToDragEvent, getCachedSourceUids, isValidObjectToDrop, processAWInteropAndHosting, processDragEnd, processDragLeave, processDragLeaveGlobal, processDrop, setEffectAllowed, setupDragAndDrop, dragLeaveEventOnGlobalWindow, processDragEnter, dragEndEventOnGlobalWindow, tearDownDragAndDrop, updateDragImage, getTargetObjectByUid, getSourceObjects, dataTransferContainsFiles, dataTransferContainsURLs, getDataTransferFileTypes, getDataTransferSourceTypes, setCreateInteropObjectRef, publishDropEvent, registerEvents, disableDragAndDrop\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/soa/kernel/clientDataModel.js\nvar clientDataModel = __webpack_require__(28);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/soa/kernel/clientMetaModel.js\nvar clientMetaModel = __webpack_require__(33);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/soa/dataManagementService.js\nvar dataManagementService = __webpack_require__(116);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/soa/kernel/soaService.js + 1 modules\nvar soaService = __webpack_require__(38);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/configurationService.js\nvar configurationService = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/messagingService.js + 1 modules\nvar messagingService = __webpack_require__(46);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/localeService.js + 1 modules\nvar localeService = __webpack_require__(15);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/appCtxService.js\nvar appCtxService = __webpack_require__(12);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/adapterService.js\nvar adapterService = __webpack_require__(107);\n\n// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js\nvar jquery = __webpack_require__(54);\nvar jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);\n\n// EXTERNAL MODULE: ./node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(1);\nvar lodash_default = /*#__PURE__*/__webpack_require__.n(lodash);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/eventBus.js\nvar eventBus = __webpack_require__(7);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/browserUtils.js\nvar browserUtils = __webpack_require__(26);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/declUtils.js\nvar declUtils = __webpack_require__(13);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/localStorage.js\nvar localStorage = __webpack_require__(32);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/logger.js\nvar logger = __webpack_require__(6);\n\n// CONCATENATED MODULE: ./node_modules/@swf/core/src/uiwidget/src/js/dragAndDropUtils.js\n// Copyright (c) 2020 Siemens\n/**\n * This is a utility service for drag-n-drop operations.\n *\n * @module js/dragAndDropUtils\n */var dragAndDropUtils_exports={};let hasTCSessionData=appCtxService[\"default\"]&&appCtxService[\"default\"].ctx&&!lodash_default.a.isUndefined(appCtxService[\"default\"].ctx.tcSessionData);const fetchObjects=uids=>{let missingSourceUIDs=[];let objsCorrespondingToUids=[];if(uids.length>0&&clientDataModel[\"a\" /* default */]){uids.forEach(uid=>{/**\n             * Attempt to locate the 'source' objects in this browser's CDM cache.\n             * <P>\n             * Note: When 'source' objects are being dragged from another browser they may not have been loaded into\n             * the 'target' browser.\n             */let object=clientDataModel[\"a\" /* default */].getObject(uid);if(!object){missingSourceUIDs.push(uid);}else{objsCorrespondingToUids.push(object);}});}return{missingSourceUIDs,objsCorrespondingToUids};};const getObjects=sourceVMOs=>{let modelObjects=[];if(sourceVMOs){sourceVMOs.forEach(modelObject=>{if(clientMetaModel[\"a\" /* default */].isInstanceOf('Awp0XRTObjectSetRow',modelObject.modelType)){var adaptedObjs=adapterService[\"a\" /* default */].getAdaptedObjectsSync([modelObject]);modelObjects.push(adaptedObjs[0]);}else{modelObjects.push(modelObject);}});}return modelObjects;};const loadVMOsIfNotAlreadyLoaded=uids=>{let objects=fetchObjects(uids);if(objects.missingSourceUIDs.length>0&&hasTCSessionData){dataManagementService[\"a\" /* default */].loadObjects(objects.missingSourceUIDs);}};const getObjectByUidAsync=uids=>{let objects=fetchObjects(uids);if(objects.missingSourceUIDs.length>0&&hasTCSessionData){return dataManagementService[\"a\" /* default */].loadObjects(objects.missingSourceUIDs).then(()=>{return[...objects.objsCorrespondingToUids,...fetchObjects(objects.missingSourceUIDs).objsCorrespondingToUids];});}return Promise.resolve(objects.objsCorrespondingToUids);};dragAndDropUtils_exports={getObjects,loadVMOsIfNotAlreadyLoaded,getObjectByUidAsync};/* harmony default export */ var dragAndDropUtils = (dragAndDropUtils_exports);\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/services/src/js/awBaseService.js\nvar awBaseService = __webpack_require__(139);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/services/src/js/awStateService.js\nvar awStateService = __webpack_require__(43);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/services/src/js/awPromiseService.js\nvar awPromiseService = __webpack_require__(11);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/viewModelService.js\nvar viewModelService = __webpack_require__(85);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/actionService.js + 2 modules\nvar actionService = __webpack_require__(66);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/conditionService.js\nvar conditionService = __webpack_require__(25);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/expressionParserUtils.js + 1 modules\nvar expressionParserUtils = __webpack_require__(64);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/command/src/js/commandConfigUtils.service.js\nvar commandConfigUtils_service = __webpack_require__(145);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/awConfiguration.js\nvar awConfiguration = __webpack_require__(55);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/services/src/js/moduleLoader.js\nvar moduleLoader = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/declarativeui/src/js/awDuiLocalizationService.js\nvar awDuiLocalizationService = __webpack_require__(185);\n\n// CONCATENATED MODULE: ./node_modules/@swf/core/src/kernel/src/js/pasteService.js\n/* eslint-disable class-methods-use-this */ // Copyright (c) 2020 Siemens\n/**\n * This service is used to manage the configuration of the paste operation.\n *\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-paste-handling|Solution configuration for paste handling}\n *\n * @module js/pasteService\n *\n * @publishedApolloService\n *\n *//**\n * This object represents the union of all module level 'paste.json' configurations for the current AW\n * application.\n *\n * Content & Structure of the 'paste.json' file located:<BR>\n * WAR: <war_root>\\assets\\config\\paste.json <BR>\n * Kit: <dev_root>\\out\\kit\\tcawframework_aws2stage.zip\\stage\\repo\\gwt\\tc-aw-framework\\module.json\n *\n * The 'paste.json' module is used during Drag-and-Drop operations to specify which types of objects\n * being dragged (i.e. the 'source' types) are valid to drop onto a specific type object (i.e. the 'target'\n * type). If no source/target match is found, the drop will not be allowed and the user will see the 'drop not\n * allowed' symbol for their cursor.\n * <P>\n * The most specific type in an object's type hierarchy is used. <BR>\n * There is no inheritance between properties in this file.\n * <P>\n *\n * For Each (sourceType) and (targetType) section must be specify with action\n * <P>\n * All 'source' object types must be valid for a specific 'target' before the drop will be allowed.\n *\n * Note 1: This mapping only applies for dropping 'source' objects onto a single 'target' object. When dropping\n * into an 'objectSet' of an XRT stylesheet, the relation information in the 'source' attribute of the\n * 'objectSet' is used.\n *\n *\n * The JSON object generically is structured as:\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"handlerName\": {\n            \"action\": \"HandlerAction\",\n            \"activeWhen\": {\n                \"condition\": \"conditionToActiveTheHandler\"\n            }\n        }\n    },\n    \"actions\": {\n        \"HandlerAction\": {\n          // declartive action that we follow in commandsViewModel / ViewModel.json\n        }\n    },\n    \"conditions\": {\n        \"conditionToActiveTheHandler\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfTargetObject\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfSourceObject\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n * </pre>\n *\n * Example: The following specifies that:<BR>\n * a) any 'target' of type 'Folder' should use the 'customPasteHandler' defined in the JS file\n * 'js/pasteHandlers.js' when items of type 'ItemRevision' are pasted on them\n * <P>\n * Similary we can create following combination\n * b) any 'target' of type 'WorkspaceObject' should use the 'tcDefaultPasteHandler' with default relations when\n * items of type 'ItemRevision' or 'DocumentRevision' are pasted on them.\n * <P>\n * c) any 'target' of type 'DocumentRevision' should use the 'defaultFilePasteHandler' specifying the\n * 'TC_Attaches' relations (and other datasetInfo properties) when objects of type 'Dataset' are pasted on them.\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"action\": \"defaultPasteHandlerForImpactAnalysis\",\n            \"activeWhen\": {\n                \"condition\": \"conditions.isPasteHandlerActiveForImpactAnalysisNew\"\n            }\n        }\n    },\n    \"actions\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"actionType\": \"JSFunction\",\n            \"method\": \"customPasteHandler\",\n            \"deps\": \"js/pasteHandlers\",\n            \"inputData\": {\n                \"targetObject\": \"{{pasteContext.targetObject}}\",\n                \"sourceObject\": \"{{pasteContext.sourceObject}}\"\n            },\n            \"events\": {\n                \"success\": [ {\n                    \"name\": \"dragDrop.success\",\n                    \"condition\": \"pasteContext.isDragDropIntent\",\n                    \"eventData\": {\n                        \"sourceObjects\": \"{{pasteContext.sourceObject}}\",\n                        \"targetObject\": \"{{pasteContext.targetObject}}\"\n                    }\n                } ]\n            }\n        }\n    },\n    \"conditions\": {\n        \"isPasteHandlerActiveForImpactAnalysisNew\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"Folder\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"ItemRevision\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n* </pre>\n*/var _pasteConfig;var _pasteConfigMap;var targetSourceMap;var _declViewModel;/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n * @ignore\n */let pasteService_exports;/**\n * Create the declartive viewModel from all combined paste.json\n *\n * @param {Object} viewModel - event data information with name and value of changes\n * @returns {Promise} promise with decl view model json\n */const createViewModel=async function(viewModel){var deferred=awPromiseService[\"a\" /* default */].instance.defer();viewModel._viewModelId='pasteViewModel_'+Math.random;viewModel.skipClone=true;let populatedViewModelJson=viewModelService[\"default\"].populateViewModelPropertiesFromJson(viewModel,null,null,true);populatedViewModelJson.i18n=await awDuiLocalizationService[\"a\" /* default */].populateI18nMap(viewModel.i18n,null);deferred.resolve(populatedViewModelJson);return deferred.promise;};var udpateMap=function(query,key,sourceObject,targetObject){var queryToUse=query;var matchAll=queryToUse[expressionParserUtils[\"a\" /* default */].$ALL];queryToUse=matchAll||queryToUse;var performAND=queryToUse[expressionParserUtils[\"a\" /* default */].$AND]||queryToUse[expressionParserUtils[\"a\" /* default */].$ALL];var performOR=queryToUse[expressionParserUtils[\"a\" /* default */].$OR];var evalChecks=performAND||performOR||[queryToUse];lodash_default.a.forEach(evalChecks,function(evalCheck){var path=expressionParserUtils[\"a\" /* default */].resolve(expressionParserUtils[\"a\" /* default */].$SOURCE,evalCheck);var condition=expressionParserUtils[\"a\" /* default */].resolve(expressionParserUtils[\"a\" /* default */].$QUERY,evalCheck)||evalCheck;if(path==='pasteContext.sourceObject'){sourceObject=condition.$typeOf;}else if(path==='pasteContext.targetObject'){targetObject=condition.$typeOf;}if(sourceObject&&targetObject&&path){if(!targetSourceMap.has(targetObject)){targetSourceMap.set(targetObject,{sourceTypes:{}});}if(!targetSourceMap.get(targetObject).sourceTypes[sourceObject]){targetSourceMap.get(targetObject).sourceTypes[sourceObject]=[];}targetSourceMap.get(targetObject).sourceTypes[sourceObject].push(key);}var recurseExpressionEvaluation=condition&&(condition[expressionParserUtils[\"a\" /* default */].$ALL]||condition[expressionParserUtils[\"a\" /* default */].$AND]||condition[expressionParserUtils[\"a\" /* default */].$OR]||condition[expressionParserUtils[\"a\" /* default */].$SOURCE]);if(recurseExpressionEvaluation){udpateMap(condition,key,sourceObject,targetObject);}});};/**\n * Update the '_pasteConfigMap' on with all combine paste.json\n *\n */function updateThePasteConfig(){targetSourceMap=new Map();lodash_default.a.forEach(_pasteConfig.pasteHandlers,function(value,key){if(value.activeWhen){var condition=value.activeWhen.condition;var conditionExpression=null;var sourceObject;var targetObject;if(lodash_default.a.startsWith(condition,'conditions.')){conditionExpression=lodash_default.a.get(_pasteConfig,condition);}else{conditionExpression=condition;}if(conditionExpression&&conditionExpression.expression){udpateMap(conditionExpression.expression,key,sourceObject,targetObject);}}});_pasteConfigMap=targetSourceMap;}/**\n * Update the 'selectedModelTypeRelations' on the appCtx for the one step Paste command.\n *\n * @param {Object} eventData - event data information with name and value of changes\n */function changeValidSourceTypesForSelected(eventData){if(eventData.name==='mselected'&&eventData.value&&eventData.value.length===1){var objectValidSourceTypes=pasteService_exports.getObjectValidSourceTypes(eventData.value[0]);objectValidSourceTypes=objectValidSourceTypes||{};appCtxService[\"default\"].registerCtx('selectedModelTypeRelations',Object.keys(objectValidSourceTypes));}}/**\n * create Success Message For DND\n *\n * @param {sourceObjects} sourceObjects -Service to use.\n * @param {targetObject} targetObject -Service to use.\n *\n * invoke success message\n */function createSuccessMessageForDND(sourceObjects,targetObject){var pasteSuccessMessage={messageText:'',messageTextParams:[]};if(sourceObjects.length>1){localeService[\"default\"].getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteMultipleSuccessMessage').then(function(response){pasteSuccessMessage.messageText=response;pasteSuccessMessage.messageTextParams=[sourceObjects.length,targetObject.props.object_string.uiValues[0]];var messageText=messagingService[\"a\" /* default */].applyMessageParamsWithoutContext(pasteSuccessMessage.messageText,pasteSuccessMessage.messageTextParams);messagingService[\"a\" /* default */].showInfo(messageText);});}else{localeService[\"default\"].getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteSuccessMessage').then(function(response){pasteSuccessMessage.messageText=response;const sourceObjectName=sourceObjects&&sourceObjects[0].props&&sourceObjects[0].props.object_string?sourceObjects[0].props.object_string.uiValues[0]:sourceObjects[0].name;pasteSuccessMessage.messageTextParams=[sourceObjectName,targetObject.props.object_string.uiValues[0]];var messageText=messagingService[\"a\" /* default */].applyMessageParamsWithoutContext(pasteSuccessMessage.messageText,pasteSuccessMessage.messageTextParams);messagingService[\"a\" /* default */].showInfo(messageText);});}}/**\n * create Failure Message For DND\n *\n * @param {errorReason} errorReason -Service to use.\n *\n *  invokes  failure message\n */function createFailureMessageForDND(errorReason){localeService[\"default\"].getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteFailureMessage').then(result=>{var pasteFailureMessage=result;var errorText=pasteFailureMessage+':';lodash_default.a.forEach(errorReason.message.split(/\\n/g),function(messageLine){errorText=errorText+'<br>'+messageLine;});messagingService[\"a\" /* default */].showInfo(errorText);});}/**\n * handler for dragDrop event\n * @param {Array} sourceObjects source objects drag frim\n * @param {Object} targetObject target object drop to\n */function handleSuccess(sourceObjects,targetObject){var adaptedSourceObjects=adapterService[\"a\" /* default */].getAdaptedObjectsSync(sourceObjects);createSuccessMessageForDND(adaptedSourceObjects,targetObject);}const getTargetType=function(targetObject){var targetTypes=getTargetTypes();var typeHier=declUtils[\"a\" /* default */].getTypeHierarchy(targetObject)||[targetObject.type];if(typeHier[0]){for(var ii=0;ii<typeHier.length;ii++){var typeName=typeHier[ii];if(targetTypes.has(typeName)){return targetTypes.get(typeName);}}}return null;};const getSourceType=function(sourceTypes,sourceObject){var typeHier=declUtils[\"a\" /* default */].getTypeHierarchy(sourceObject)||[sourceObject.type];if(typeHier[0]){for(var ii=0;ii<typeHier.length;ii++){var typeName=typeHier[ii];if(sourceTypes[typeName]){return sourceTypes[typeName];}}}return null;};/**\n * To Paste objects with single relationType\n *\n * This would\n * 1. use bestTargetFitFinder function to find the best possible Target Fit for the given target object by reading the paste configuration.\n * 2. use bestSourceFitFinder function to find the best possible Source Fit for the given source object by reading the paste configuration.\n * 3. Invoke the configured pasteHandler for the target + source type combination.\n * 4. If no suitable target + source type combination for paste handler is found then (configured) default paste handler is invoked.\n *\n * @param {Object} targetObject - The 'target' Object for the paste.\n * @param {Array} sourceObjects - Array of 'source' Objects to paste onto the 'target' Object.\n * @param {String} relationType - Relation type name\n * @param {object} customPasteContext - custom paste context\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */let execute=function(targetObject,sourceObjects,relationType,customPasteContext){var queue={};var custObj=customPasteContext;if(custObj&&!custObj.hasOwnProperty('isDragDropIntent')){custObj.isDragDropIntent=false;}else if(!custObj){custObj={isDragDropIntent:false};}var defaultPasteHandlerConfiguration=awConfiguration[\"a\" /* default */].get('solutionDef.defaultPasteHandlerConfiguration');var doAction=function(defaultPasteHandler,declViewModel){lodash_default.a.forEach(sourceObjects,function(sourceObject){var pasteContext={targetObject:targetObject,sourceObject:sourceObject,relationType:relationType,...custObj};var targetTypeConfig=null;if(typeof defaultPasteHandlerConfiguration==='object'){targetTypeConfig=defaultPasteHandler[defaultPasteHandlerConfiguration.bestTargetFitFinder](targetObject);}else{targetTypeConfig=getTargetType(targetObject);}var action=null;var actionName=null;if(targetTypeConfig){var sourceTypeConfig=null;if(typeof defaultPasteHandlerConfiguration==='object'){sourceTypeConfig=defaultPasteHandler[defaultPasteHandlerConfiguration.bestSourceFitFinder](targetTypeConfig.sourceTypes,sourceObject);}else{sourceTypeConfig=getSourceType(targetTypeConfig.sourceTypes,sourceObject);}var length=0;var currentLength;if(sourceTypeConfig){lodash_default.a.forEach(sourceTypeConfig,function(pasteHandlers){var pasteHandlerObject=_pasteConfig.pasteHandlers[pasteHandlers];var conditionResult=false;var conditionExpression=pasteHandlerObject.activeWhen.condition;if(lodash_default.a.startsWith(pasteHandlerObject.activeWhen.condition,'conditions.')){conditionExpression=lodash_default.a.get(_pasteConfig,pasteHandlerObject.activeWhen.condition);}if(conditionExpression!==null){currentLength=commandConfigUtils_service[\"a\" /* default */].getExpressionLength(conditionExpression.expression,declViewModel);conditionResult=conditionService[\"a\" /* default */].evaluateCondition({ctx:appCtxService[\"default\"].ctx,pasteContext:pasteContext},conditionExpression.expression);}if(conditionResult&&currentLength>length){length=currentLength;action=_pasteConfig.actions[pasteHandlerObject.action];actionName=pasteHandlerObject.action;}});}}if(!actionName&&typeof defaultPasteHandlerConfiguration==='object'){var handlerFunctionName=defaultPasteHandlerConfiguration.pasteHandler;actionName=_pasteConfig.pasteHandlers[handlerFunctionName].action;action=_pasteConfig.actions[actionName];logger[\"a\" /* default */].warn('No configured paste handler found for source object: \\''+sourceObject+'\\' when target object: \\''+targetObject+'\\''+'\\n'+'RelationType: \\''+relationType+'\\''+'\\n'+'...Assuming default handler');}if(actionName){if(!queue.hasOwnProperty(actionName)){queue[actionName]={};}if(!queue[actionName].hasOwnProperty('sourceObjs')){queue[actionName].sourceObjs=[];}queue[actionName].sourceObjs.push(sourceObject);if(action){queue[actionName].handlerAction=action;}}});/**\n         * Loop for each unique 'handler' and build up a promise chain.\n         */var promiseArray=[];lodash_default.a.forEach(queue,function(queuedSrcObjInfo){var depFileToLoad=queuedSrcObjInfo.handlerAction.deps;var depModuleObj=null;var dataCtxNode={data:declViewModel,ctx:appCtxService[\"default\"].ctx,pasteContext:{targetObject:targetObject,sourceObject:queuedSrcObjInfo.sourceObjs,relationType:relationType,...custObj}};if(depFileToLoad){//Revisit: getDependentModule is yet to be supported\n//depModuleObj = moduleLoader.getDependentModule( queuedSrcObjInfo.handlerAction.deps );\nif(!depModuleObj){promiseArray.push(moduleLoader[\"b\" /* default */].loadDependentModule(queuedSrcObjInfo.handlerAction.deps).then(function(pasteHandler){depModuleObj=pasteHandler;return actionService[\"a\" /* default */].executeAction(declViewModel,queuedSrcObjInfo.handlerAction,dataCtxNode,depModuleObj,false);}));}else{promiseArray.push(actionService[\"a\" /* default */].executeAction(declViewModel,queuedSrcObjInfo.handlerAction,dataCtxNode,depModuleObj,false));}}else{promiseArray.push(actionService[\"a\" /* default */].executeAction(declViewModel,queuedSrcObjInfo.handlerAction,dataCtxNode,depModuleObj,false));}});return awPromiseService[\"a\" /* default */].instance.all(promiseArray);};var performAction=function(declViewModel){if(defaultPasteHandlerConfiguration.deps){//Revisit: getDependentModule is yet to be supported\n//var defaultPasteHandler = moduleLoader.getDependentModule( defaultPasteHandlerConfiguration.deps );\n//if( !defaultPasteHandler ) {\n// return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n//     return doAction( pasteHandler, declViewModel );\n// } );\n//}\n//return doAction( defaultPasteHandler, declViewModel );\nreturn moduleLoader[\"b\" /* default */].loadDependentModule(defaultPasteHandlerConfiguration.deps).then(function(pasteHandler){return doAction(pasteHandler,declViewModel);});}return doAction(null,declViewModel);};if(!_declViewModel){return createViewModel(_pasteConfig).then(function(declViewModel){_declViewModel=declViewModel;return performAction(_declViewModel);});}return performAction(_declViewModel);};/**\n * To Paste objects with different relationTypes\n * Same as {@link module:js/pasteService.execute|execute} except that this executes with multiple source object + relation types for a single target object.\n *\n * @param {Object} targetObject - the target object to paste the source objects to\n * @param {Object} relationTypeToSources - an object of key/value: relationType/array-of-sourceObjects\n *\n * @returns {Promise} Resolved when all processing is complete.\n */let executeWithMultipleRelations=function(targetObject,relationTypeToSources){var allPromises=[];lodash_default.a.forOwn(relationTypeToSources,function(sourceObjects,relationType){allPromises.push(pasteService_exports.execute(targetObject,sourceObjects,relationType));});return awPromiseService[\"a\" /* default */].instance.all(allPromises);};const determineActiveHandler=(sourceObjects,targetObject)=>{var conditionResult=false;lodash_default.a.forOwn(_pasteConfig.pasteHandlers,pasteHandlerObject=>{var conditionExpression=pasteHandlerObject.activeWhen?pasteHandlerObject.activeWhen.condition:null;if(conditionExpression){if(lodash_default.a.startsWith(pasteHandlerObject.activeWhen.condition,'conditions.')){conditionExpression=lodash_default.a.get(_pasteConfig,pasteHandlerObject.activeWhen.condition);}if(conditionExpression!==null){conditionResult=conditionResult||conditionService[\"a\" /* default */].evaluateCondition({ctx:appCtxService[\"default\"].ctx,pasteContext:{targetObject:targetObject,sourceObject:sourceObjects,relationType:''}},conditionExpression.expression);}}});return conditionResult;};/**\n * Gets all of the available targetTypes configured in paste.json files from different modules.\n *\n * @return {Object} The 'targetTypes' from the 'pasteConfig'\n */let getTargetTypes=function(){return _pasteConfigMap?_pasteConfigMap:{};};/**\n * @param {Object} targetObject - The 'target' IModelObject to use when determining which 'source' types are\n *            potentially valid to be dropped upon it.\n * @return {Object|null} The 'sourceTypes' property from the 'pasteConfig' for the given 'target' object type or its\n *         ancestor types up the hierarchy (or NULL if no match was found).\n */let getObjectValidSourceTypes=function(targetObject){if(targetObject&&targetObject.modelType&&targetObject.modelType.typeHierarchyArray||targetObject&&targetObject.typeHierarchy){var typeHier=declUtils[\"a\" /* default */].getTypeHierarchy(targetObject);/**\n         * Starting at the 'target' object's actual type, try to find a matching 'targetType' property in the\n         * 'pasteConfig'. If an exact match is not found, try the super type of the 'target' up its hierarchy tree. Stop\n         * looking when the 1st one (i.e. the 'closest' one) is found.\n         */var targetTypes=pasteService_exports.getTargetTypes();for(var ii=0;ii<typeHier.length;ii++){var typeName=typeHier[ii];if(targetTypes.has(typeName)){return targetTypes.get(typeName).sourceTypes;}}}return null;};/**\n * Get underlying BO for view model objects\n *\n * @param {Array} viewModelObjects - view model objects to adapt\n * @return {input} adapted object\n */let adaptedInput=function(viewModelObjects){if(viewModelObjects){var objectsToAdapt=lodash_default.a.isArray(viewModelObjects)?viewModelObjects:[viewModelObjects];return adapterService[\"a\" /* default */].getAdaptedObjectsSync(objectsToAdapt);}return[];};let loadConfiguration=function(){_pasteConfig=configurationService[\"default\"].getCfgCached('paste')||{};updateThePasteConfig();eventBus[\"a\" /* default */].subscribe('appCtx.register',changeValidSourceTypesForSelected);eventBus[\"a\" /* default */].subscribe('dragDrop.success',function(event){handleSuccess(event.sourceObjects,event.targetObject);});eventBus[\"a\" /* default */].subscribe('dragDrop.failure',function(event){createFailureMessageForDND(event.reason);});eventBus[\"a\" /* default */].subscribePostal({channel:'paste',topic:'drop',callback:function(eventData){if(eventData&&eventData.pasteInput){lodash_default.a.forEach(eventData.pasteInput,function(pasteInput){var targetObject=pasteInput.targetObject;var relationType=pasteInput.relationType;var sourceObjects=pasteInput.sourceObjects;pasteService_exports.execute(targetObject,sourceObjects,relationType,{...pasteInput.props,isDragDropIntent:true}).then(function(){var eventData={relatedModified:[targetObject],refreshLocationFlag:false,createdObjects:sourceObjects};eventBus[\"a\" /* default */].publish('cdm.relatedModified',eventData);});});}}});};pasteService_exports={execute,executeWithMultipleRelations,getTargetTypes,getObjectValidSourceTypes,adaptedInput,loadConfiguration,determineActiveHandler};/* harmony default export */ var pasteService = (pasteService_exports);loadConfiguration();\n// EXTERNAL MODULE: ./node_modules/@swf/core/src/kernel/src/js/htmlUtils.js\nvar htmlUtils = __webpack_require__(35);\n\n// CONCATENATED MODULE: ./node_modules/@swf/core/src/uiwidget/src/js/dragAndDropService.js\n/* eslint-disable max-lines */ // Copyright (c) 2020 Siemens\n/**\n * This service manages the 'source' object information placed into 'localStorage' during drag-n-drop operations.\n *\n * @module js/dragAndDropService\n */// Service\n// Class for load handler\n// This file is too complex to convert it to a complete class\nclass dragAndDropService_DragAndDropService extends awBaseService[\"a\" /* default */]{static reset(){awBaseService[\"a\" /* default */].reset();delete this._defaultPasteHandler;delete this._pasteFileHandler;}constructor(){super();// The following check is to support Karma testing which invokes this multiple times.\nif(!_cfgLoadPromise&&!(this.constructor._defaultPasteHandler||this.constructor._pasteFileHandler)){_cfgLoadPromise=configurationService[\"default\"].getCfg('paste').then(pasteProvider=>{if(pasteProvider.defaultPasteHandler){return declUtils[\"a\" /* default */].loadDependentModule(pasteProvider.defaultPasteHandler.dep).then(dep=>{this.constructor._defaultPasteHandler=dep;return pasteProvider;});}return pasteProvider;}).then(pasteProvider=>{if(pasteProvider.defaultPasteFileHandler){return declUtils[\"a\" /* default */].loadDependentModule(pasteProvider.defaultPasteFileHandler.dep).then(dep=>{this.constructor._pasteFileHandler=dep;return pasteProvider;});}}).then(function(){_cfgLoadPromise=null;});}}get pasteHandler(){return this.constructor._defaultPasteHandler;}get pasteFileHandler(){return this.constructor._pasteFileHandler;}}/**\n * Data formats to put the data in. It would be better to only use aw_interop_type here, but that isn't working\n * with Chrome.\n */var DATA_FORMATS=['text/html','aw_interop_type'];/** Dataset type */var TYPE_NAME_DATASET='Dataset';/** This is set to true if any of the dragged objects have a type set.\n */var modelsHaveTypes;/**\n * {DOMElement} root container for the page.\n */var mainReference;/**\n * {Boolean} TRUE if the drag event should have it's 'dataTransfer' object set/maintained.\n */var _includeDataTransfer=true;/**\n * {Boolean} TRUE if various drag event activities should publish 'hosting' related events.\n */var _publishHostingEvents=false;/**\n * {Function} A callback used to create the 'InteropObjectRef' encodings necessary to communicate more complex\n * selection information via drag event data format properties.\n * <P>\n * Note: Until the hosting 'InteropObjectRefFactory' is converted from GWT to native JS we must rely on it for\n * conversion of IModelObjects to the special encoding used for communications of 'source' objects to the host.\n */var _createInteropObjectRefFn;/**\n * Temporary promise reference for loading of the configuration data. This is used to allow code to wait until\n * ready before doing work.\n *\n * @private\n */var _cfgLoadPromise;/**\n * <pre>\n * Greater Than 0 If some basic event activity should be logged.\n * Greater Than 1 If some more fine-grained event activity should be logged.\n * </pre>\n */var _debug_logEventActivity=0;const HOSTING_DRAG_DROP_EVENT='hosting.DragDropEvent';const UI_GRID_ROW_CLASS='.ui-grid-row';const DROP_CLASS='.aw-widgets-droppable';const DRAG_DROP_HIGHLIGHT_EVENT='dragDropEvent.highlight';var urlAttributes=browserUtils[\"default\"].getUrlAttributes();if(urlAttributes.logDnDEventActivity!==undefined){_debug_logEventActivity=1;if(urlAttributes.logDnDEventActivity>0){_debug_logEventActivity=urlAttributes.logDnDEventActivity;}}/**\n * TRUE if the type that was not valid for a target is logged. This is very handy when debugging issues.\n */var m_debug_LogRejectedSourceType=false;/**\n * Map used to hold an unresolved {Promise} for a given 'evaluation key' *while* the async server call is being\n * made.\n * <P>\n * Note: This map prevents repeatedly calling the server for the same 'evaluation key'.\n * <P>\n * Note: The 'evaluation key' is formed by TargetUID + ValidSourceTypes + FileExtensions.\n */var m_mapKey2Promise={};/**\n * Map used to hold the *result* of a previous async server call for a given 'evaluation key'.\n * <P>\n * Note: This map prevents repeatedly calling the server for the same 'evaluation key'.\n * <P>\n * Note: The 'evaluation key' is formed by TargetUID + ValidSourceTypes + FileExtensions.\n */var m_mapKey2Result={};/**\n * TRUE if dragging files from the OS file should be allowed.\n */var m_supportingFileDrop=true;/**\n * Set used to hold an 'unresolved source type lookup key' *while( the async server call is being made.\n * <P>\n * Note: This map prevents repeatedly calling the server for the same 'unresolved source type lookup key'.\n * <P>\n * Note: The 'unresolved source type lookup key' is formed by a union of MissingSourceTypes.\n */var m_typeLookupInProgress={};let isGlobalHighlightPublished=false;//* **********************************************************************\n/**\n * Clear out any 'dragData' that may have been created by the last Drag-n-Drop operation.\n */var _clearCachedData=function(){localStorage[\"default\"].publish('awDragData');};/**\n * @param {StringArray} validSourceTypes The 'sourceTypes' {@link JavaScriptObject} property from the\n *            pasteConfig for the given 'target' object type or its ancestor types up the hierarchy (or NULL if\n *            no match was found).\n *\n * @param {DOMElement} targetElement - The element the mouse is over when the event was fired.\n *\n * @returns {Object} A {@link Map} that relates 'source' types to the 1 or more possible relationship types that\n *         are valid for the 'owner' (i.e. 'target') {@link IModelObject}.\n */var _createSourceType2RelationsMap=function(validSourceTypes,targetElement){var sourceType2RelationsMap={};var validSourceObjects=jquery_default()(targetElement).data('validSourceTypes');if(validSourceObjects){for(var i=0;i<validSourceTypes.length;i++){var sourceType=validSourceTypes[i];var validSourceObj=validSourceObjects[sourceType];var relations=[];if(validSourceObj.relation){relations.push(validSourceObj.relation);}else{relations.push('');}sourceType2RelationsMap[sourceType]=relations;}}return sourceType2RelationsMap;};/**\n * Remove from selection any non-'target' object currently selected (like the ones we may have just pasted) so\n * that the 'target' can be cleanly selected later.\n *\n * @param {ViewModelObject} targetVMO - The 'target' ViewModelObject the 'source' ViewModelObject(s) are being\n *            dropped onto.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _deselectAll=function(targetVMO,callbackAPIs){callbackAPIs.clearSelectionFn(targetVMO);};/**\n * Get the adapted objects corresponding to the VMOs if any.\n *\n * @param {ObjectArray} vmos - Array of viewmodel objects.\n *\n * @return {Array} Returns array of adapadted objects if any or else returns the vmos\n */const getAdaptedObjects=vmos=>{return dragAndDropUtils.getObjects(vmos);};/**\n * Synchronously create Datasets, upload the given JS Files and attach the files to the Datasets using the\n * correct relation types and the tickets used to upload the files.\n *\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n *\n * @param {ViewModelObject} targetVMO - The 'target' ViewModelObject being dropped onto.\n *\n * @param {ObjectArray} sourceFiles - The 'source' JS File objects being dropped.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _deselectAllAndPasteSourceFiles=function(targetElement,targetVMO,sourceFiles,callbackAPIs){if(sourceFiles&&sourceFiles.length>0){_deselectAll(targetVMO,callbackAPIs);_pasteSourceFiles(targetElement,targetVMO,sourceFiles,callbackAPIs);}};/**\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n *\n * @param {ViewModelObject} targetVMO - The 'target' ViewModelObject being dropped onto.\n *\n * @param {IModelObjectArray} sourceObjects - The 'source' IModelObject(s) being dropped.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _deselectAllAndPasteSourceObjects=function(targetElement,targetVMO,sourceObjects,callbackAPIs){if(sourceObjects&&sourceObjects.length>0){_deselectAll(targetVMO,callbackAPIs);_pasteSourceObjects(targetElement,targetVMO,sourceObjects,callbackAPIs);}};/**\n * Perform the actual 'drop' (paste) of the 'source' objects onto the given 'target'.\n *\n * @param {Element} targetElement - The 'target' DOM Element.\n *\n * @param {ObjectArray} sourceFiles - The array 'source' JS File objects to drop onto the 'target'.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _dropFiles=function(targetElement,sourceFiles,callbackAPIs){var targetVMOs=callbackAPIs.getElementViewModelObjectFn(targetElement);if(!targetVMOs||targetVMOs.length===0){var targetUID=jquery_default()(targetElement).data('dropuid');if(targetUID){targetVMOs=[];targetVMOs.push(dragAndDropService_exports.getTargetObjectByUid(targetUID));}}if(targetVMOs&&targetVMOs.length!==0){if(clientMetaModel[\"a\" /* default */].isInstanceOf('Awp0XRTObjectSetRow',targetVMOs[0].modelType)){adapterService[\"a\" /* default */].getAdaptedObjects(targetVMOs).then(function(adaptedObjs){_deselectAllAndPasteSourceFiles(targetElement,adaptedObjs[0],sourceFiles,callbackAPIs);});}else{_deselectAllAndPasteSourceFiles(targetElement,targetVMOs[0],sourceFiles,callbackAPIs);}}_clearCachedData();};/**\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n *\n * @param {StringArray} sourceUIDs - The array of UIDs for the 'source' IModelObjects to drop onto the 'target'.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _dropModelObjects=function(targetElement,sourceUIDs,callbackAPIs){var targetVMOs=callbackAPIs.getElementViewModelObjectFn(targetElement);if(!targetVMOs||targetVMOs.length===0){var targetUID=jquery_default()(targetElement).data('dropuid');if(targetUID){targetVMOs=[];targetVMOs.push(dragAndDropService_exports.getTargetObjectByUid(targetUID));}}if(targetVMOs&&targetVMOs.length!==0){if(clientMetaModel[\"a\" /* default */].isInstanceOf('Awp0XRTObjectSetRow',targetVMOs[0].modelType)){adapterService[\"a\" /* default */].getAdaptedObjects(targetVMOs).then(function(adaptedObjs){_dropModelObjectsInternal(targetElement,sourceUIDs,callbackAPIs,adaptedObjs);});}else{_dropModelObjectsInternal(targetElement,sourceUIDs,callbackAPIs,targetVMOs);}}};/**\n * Perform the actual 'drop' (paste) of the 'source' objects onto the given 'target'.\n *\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n *\n * @param {StringArray} sourceUIDs - The array of UIDs for the 'source' IModelObjects to drop onto the 'target'.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n *\n * @param {Object} targetVMOs - View model object of target.\n */var _dropModelObjectsInternal=function(targetElement,sourceUIDs,callbackAPIs,targetVMOs){var sourceObjects=[];var missingSourceUIDs=[];/**\n     * Attempt to locate the 'source' objects in this browser's CDM cache.\n     * <P>\n     * Note: When 'source' objects are being dragged from another browser they may not have been loaded into the\n     * 'target' browser.\n     */if(sourceUIDs){for(var i=0;i<sourceUIDs.length;i++){var sourceObject=clientDataModel[\"a\" /* default */].getObject(sourceUIDs[i]);if(sourceObject){sourceObjects.push(sourceObject);}else{missingSourceUIDs.push(sourceUIDs[i]);}}}/**\n     * Check if NO 'source' objects are missing\n     * <P>\n     * If so: Process the past now\n     */if(!missingSourceUIDs||missingSourceUIDs.length===0){_deselectAllAndPasteSourceObjects(targetElement,targetVMOs[0],sourceObjects,callbackAPIs);_clearCachedData();}else{/**\n         * Attempt to locate the missing 'source' objects on the server.\n         */dataManagementService[\"a\" /* default */].loadObjects(missingSourceUIDs,function(){/**\n             * Attempt to locate the (formerly) missing 'targets' and add them to the list of 'source' objects\n             * to drop on the 'target'\n             */for(var j=0;j<missingSourceUIDs.length;j++){var sourceObject=clientDataModel[\"a\" /* default */].getObject(missingSourceUIDs[j]);if(sourceObject){sourceObjects.push(sourceObject);}else{// var sourceTypes = _getCachedSourceTypes();\n// logger.warn( 'Unable to locate \\'source\\' IModelObject\\' (not loaded yet): ' +\n//     missingSourceUIDs[ j ] + ' of type: ' + sourceTypes[ 0 ] );\n}}if(sourceObjects&&sourceObjects.length>0){_deselectAllAndPasteSourceObjects(targetElement,targetVMOs[0],sourceObjects,callbackAPIs);}_clearCachedData();});}};/**\n * Starting with the given DOM Element and walking up the DOM, look for the 1st DOM Element with the\n * 'containerId' property set.\n *\n * @param {Element} testElement - The element to start the search at.\n *\n * @return {Number} The ID of the 'parent' element that has the 'containerId' set on it (or NULL if no Element\n *         was found).\n */var _findContainerId=function(testElement){var currElement=testElement;while(currElement){var containerId=jquery_default()(currElement).data('containerId');if(containerId){return containerId.toString();}currElement=currElement.parentElement;}return null;};/**\n * When object drag is cancelled , this function returns true or else false\n *\n * @param {event} event - Drag event\n *\n * @return {bool}_isDragCancelFlag -  true or false\n */var _isDragCancelled=function(event){var _isDragCancelFlag=false;if(event.x<=0||event.y<=0){_isDragCancelFlag=true;}else if(event.screenX<=0||event.screenY<=0){_isDragCancelFlag=true;}else{_isDragCancelFlag=false;}return _isDragCancelFlag;};/**\n * When object is dragged over a cell list container , this function returns true or else false\n *\n * @param {event} event - Drag event\n *\n * @return {Object} isTableFlag - flag to suggest if drag is within table container\n */var _isDragWithinCellListContainer=function(event){var isCellListContainerFlag=false;var cellListContainer=htmlUtils[\"a\" /* default */].closestElement(event.target,'.aw-widgets-cellListContainer');if(lodash_default.a.isUndefined(cellListContainer)||cellListContainer===null){isCellListContainerFlag=false;}else{isCellListContainerFlag=true;}return isCellListContainerFlag;};/**\n * When object is dragged over a table row border, this check ensures the drag cursor does not go back to 'Not allowed' because of global\n * dragenter event since table row border is an invalid drop target\n *\n * @param {event} event - Drag event\n *\n * @return {Object} isTableFlag - flag to suggest if drag is within table container\n */var _isDragWithinTableContainer=function(event){var isTableFlag=false;var tableContainer=htmlUtils[\"a\" /* default */].closestElement(event.target,UI_GRID_ROW_CLASS);if(lodash_default.a.isUndefined(tableContainer)||tableContainer===null){if(event&&event.target&&event.target.classList&&event.target.classList.contains('ui-grid-row')){isTableFlag=true;}}else{isTableFlag=true;}return isTableFlag;};/**\n * When object is dragged over the white area, this check ensures  dragenter, dragleave , dragover events on document do not trigger any action in turn giving\n * a flickering of highlight effect on the container\n *\n * @param {event} event - Drag event\n * @return {Object} bool - flag to suggest if drag is within an applicable and valid container\n */var _isDragWithinApplicableValidContainer=function(event){var bool=false;var jqTarget=jquery_default()(event.target);var jqContainer=jqTarget.closest(UI_GRID_ROW_CLASS);if(jqContainer&&jqContainer.length<=0){jqContainer=jqTarget.closest('.aw-widgets-cellListItem');if(jqContainer.length<=0){jqContainer=jqTarget.closest(DROP_CLASS);if(jqContainer.length<=0){// this is when user just enters a cellListContainer from white area\nif(jqTarget&&jqTarget[0]&&jqTarget[0].children&&jqTarget[0].children.length>0&&jqTarget[0].children[0].classList&&jqTarget[0].children[0].classList.contains('aw-widgets-cellListContainer')){jqContainer=jqTarget[0].children;}}}}if(jqContainer&&jqContainer.length>0&&dragAndDropService_exports.isValidObjectToDrop(event,jqContainer[0])){bool=true;}return bool;};/**\n * @param {event} event - Dragover event\n *\n * @return {Object} targetElement - choose or drop file widget which do not require validation or\n *                                   'undefined' if not over Choose or Drop File widgets\n */var _isDragOverChooseOrDropFileContainer=function(event){var targetElement=null;if(event&&event.target&&event.target.classList&&event.target.classList.contains('aw-widgets-chooseordropfile')){targetElement=event.target;}else{var cfContainer=htmlUtils[\"a\" /* default */].closestElement(event.target,'.aw-widgets-chooseordropfile');if(cfContainer){targetElement=cfContainer;}}return targetElement;};/**\n * Determine if the DragEvent is over a white space on the page or on an applicable valid drop container\n * if so, change drag effect to indicate if it is OK to drop on that 'target'.\n *\n * @param {DragEvent} event -\n * @param {boolean} isCurrentTargetOverGlobalArea - is the object drag over an invalid/white area\n */let processDragOver=function(event,isCurrentTargetOverGlobalArea){// If drag is over Choose File or Drop File container , unhighlight other highlighted containers, highlight this\n// container and set drop effect to 'Copy' ; these containers have a special css(in addition) to identify : 'aw-widgets-chooseordropfile'\nvar chooseFileContainer=_isDragOverChooseOrDropFileContainer(event);if(chooseFileContainer){// Adding listeners to Choose/Drop File type widgets which mandatorily should have 'aw-widgets-chooseordropfile' associated\n// along with 'aw-widgets-droppable' css class  to participate in highlight\nchooseFileContainer.addEventListener('dragover',function(event){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('----------FILE IS OVER CHOOSE/DROP FILE ZONE----------');}dragAndDropService_exports.processDragLeaveGlobal(event);// clear all the highlights\nif(!dragAndDropService_exports.dataTransferContainsFiles(event)){_setDropEffect(event,'none');event.stopPropagation();}else{eventBus[\"a\" /* default */].publish(DRAG_DROP_HIGHLIGHT_EVENT,{event:event,isGlobalArea:false,isHighlightFlag:true,targetElement:chooseFileContainer});_setDropEffect(event,'copy');event.stopPropagation();// required or else it hangs the page if file dragged over container for longer period of time.\nevent.preventDefault();}});chooseFileContainer.addEventListener('dragleave',function(event){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('----------FILE IS LEAVING CHOOSE/DROP FILE ZONE----------');}_setDropEffect(event,'none');dragAndDropService_exports.processDragLeaveGlobal(event);event.stopPropagation();event.preventDefault();});chooseFileContainer.addEventListener('drop',function(event){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('----------FILE IS DROPPED IN CHOOSE/DROP FILE ZONE----------');}_setDropEffect(event,'none');dragAndDropService_exports.processDragLeaveGlobal(event);event.stopPropagation();event.preventDefault();});}var sourceUIDs=dragAndDropService_exports.getCachedSourceUids();if(sourceUIDs){dragAndDropUtils.loadVMOsIfNotAlreadyLoaded(sourceUIDs);}_processDragOverInternal(event,isCurrentTargetOverGlobalArea);};/**\n * Starting with the 'target' of the given DragEvent and walking up the DOM, look for the 1st DOM Element with the\n * 'validSourceTypes' property set.\n *\n * @param {DragEvent} event - The event to start the search at.\n * @param {Bool} isCurrentTargetOverGlobalArea - is the dragged file over white/invalid area\n * @return {Element} The Element that has the 'validSourceTypes' property set on it (or NULL if no Element was\n *         found).\n */var _findDropTargetElement=function(event){var targetElements=[];/**\n     * Get the JQuery element for the event 'target' and look for common 'container' elements 'up' the DOM Tree.\n     */var jqTarget=jquery_default()(event.target);var jqContainer=jqTarget.closest(UI_GRID_ROW_CLASS);if(jqContainer!==undefined&&jqContainer.length<=0){jqContainer=jqTarget.closest('.aw-widgets-cellListItem');if(jqContainer.length<=0){jqContainer=jqTarget.closest(DROP_CLASS);}}var targetElement;if(jqContainer&&jqContainer.length>0){targetElement=jqContainer.get(0);}else{targetElement=jqTarget.get(0);}targetElements.push(targetElement);/**\n     * Get the AngularJS element for the target 'container' element and try to find a {ViewModelObject} associated\n     * with it.\n     */if(targetElements){lodash_default.a.forEach(targetElements,function(targetElement){//revisitme: fix the code as per react framework\n// var ngTargetElement = ngModule.element( targetElement );\n// var $scope = ngTargetElement.scope();\nvar targetVMO=null;// $scope &&\n//     ( $scope.vmo || $scope.item ||\n//         $scope.row && $scope.row.entity ||\n//         $scope.data && $scope.data.vmo ) ||\n//     targetElement.vmo || ngTargetElement.get( 0 ).vmo;\nif(targetVMO){if(clientMetaModel[\"a\" /* default */].isInstanceOf('Awp0XRTObjectSetRow',targetVMO.modelType)){adapterService[\"a\" /* default */].getAdaptedObjects([targetVMO]).then(function(adaptedObjs){_setValidSourceTypesOnTarget(targetElement,adaptedObjs[0]);});}else{_setValidSourceTypesOnTarget(targetElement,targetVMO);}}});}return targetElements;};/**\n * Check if we have NOT already stored the collection of 'valid' 'source' types this 'target' will accept.\n * <P>\n * If so: Get that collection now.\n *\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n * @param {ViewModelObject} targetVMO - View model object of target.\n */var _setValidSourceTypesOnTarget=function(targetElement,targetVMO){if(targetElement){var jqElement=jquery_default()(targetElement);var validSourceTypes=jqElement.data('validSourceTypes');let pasteHandler=dragAndDropService_DragAndDropService.instance.pasteHandler;if(!validSourceTypes&&pasteHandler){validSourceTypes=pasteHandler.getObjectValidSourceTypes(targetVMO);jqElement.data('validSourceTypes',validSourceTypes);jqElement.data('dropuid',targetVMO.uid);var containerId=_findContainerId(targetElement);if(containerId){jqElement.data('containerId',containerId);}}}};/**\n * @return {Object} The Object that represents cached drag data set when the drag operation began.\n */var _getCachedDragData=function(){var dragDataJSON=localStorage[\"default\"].get('awDragData');if(dragDataJSON&&dragDataJSON!=='undefined'){return JSON.parse(dragDataJSON);}return null;};/**\n * @param {String} dataTransferItem - The 'dataTransfer' Item to extract from.\n * @return {String} The type code of the given\n */function _getDataTransferType(dataTransferItem){var extensionIndex=dataTransferItem.lastIndexOf('/');if(extensionIndex>=0){return dataTransferItem.substring(extensionIndex+1);}return'';}/**\n * @param {DragEvent} event - The DragEvent to extract the info from.\n *\n * @return {ObjectArray} Array of JS Files.\n */var _getDataTransferSourceFiles=function(event){return event.dataTransfer.files;};/**\n * Return the 'source' element from the given drag event. The name of the element in the event can vary\n * depending on the browser the client is running with.\n *\n * @param {DragEvent} event - The event to extract the 'source' element from.\n *\n * @return {Element} The DOM element considered the 'source' of the given drag event.\n */var _getEventSource=function(event){if(event.srcElement){return event.srcElement;}return event.target;};/**\n * Get the first child image element of the passed in element.\n *\n * @param {Element} sourceElement - element being dragged\n *\n * @return {Element} drag image element or returns passed in element if no image found.\n */var _getFirstChildImage=function(sourceElement){var image=jquery_default()(sourceElement).find('img:first')[0];return image?image:sourceElement;};/**\n * @param {String} uid - ID of the object to include in the URL.\n *\n * @return {String} The URL 'prefix' used to open an object in the 'show object' location of AW.\n */var _getShowObjectURL=function(uid){// Have to decode as ui-router returns encoded URL (which is then decoded again by browser)\nreturn window.decodeURIComponent(document.location.origin+document.location.pathname+awStateService[\"a\" /* default */].instance.href('com_siemens_splm_clientfx_tcui_xrt_showObject',{uid:uid}));};/**\n * Returns the correct element to be dragged\n *\n * @param {DragEvent} event - element being dragged\n * @param {int} count - number of objects being dragged\n *\n * @return {Element} The correct drag element\n */var _getDragElement=function(event,count){var element;if(event&&event.target&&event.target.classList){if(event.target.classList.contains('aw-widgets-cellListItemContainer')){element=event.target.parentElement;// Cell element\n}else if(event.target.classList.contains('ui-grid-cell')){var target=jquery_default()(event.target);var closest=target.closest(UI_GRID_ROW_CLASS);if(closest&&closest.length>0&&count===1){element=target.closest(UI_GRID_ROW_CLASS).get(0);// Table element\n}else{element=event.target;}}}return element;};/**\n * @param {DragEvent} event - element being dragged\n * @param {int} count - number of objects being dragged\n *\n * @return {Element} image element\n */var _getMultiDragImage=function(event,count){var targetImage=_getDragElement(event,count);var strWidth;var strHeight;var cloneImage=null;if(targetImage){cloneImage=targetImage.cloneNode(true);// If cell, remove command icon/text\nif(targetImage.classList&&targetImage.classList.contains('aw-widgets-cellListItem')){// Keep the image from being duplicated at the top of the page\ntargetImage.style.position='relative';strWidth=targetImage.offsetWidth-50+'px';strHeight=targetImage.offsetHeight-10+'px';// Remove commands from image\ncloneImage.children[0].removeChild(cloneImage.children[0].children[1]);// Remove text from image\nvar cloneImageText=cloneImage.getElementsByClassName('aw-widgets-cellListCellTitleBlock')[0].parentNode;if(cloneImageText){for(var i=1;i<cloneImageText.children.length;i++){cloneImageText.removeChild(cloneImageText.children[i]);i--;}}}else{// Else it is a row\nstrWidth='150px';strHeight='100%';}cloneImage.id='dragCount';cloneImage.style.maxWidth=strWidth;cloneImage.style.minWidth=strWidth;cloneImage.style.maxHeight=strHeight;cloneImage.style.minHeight=strHeight;cloneImage.style.position='absolute';cloneImage.style.left='0px';cloneImage.style.top='0px';cloneImage.style.zIndex='99';cloneImage.classList.add('aw-theme-multidragimage');cloneImage.classList.add('aw-widgets-multidragimage');// the image that is dragged needs to be visible, so it is added to the existing node\ntargetImage.children[0].appendChild(cloneImage);// create a second offset image\nvar cloneImage2=cloneImage.cloneNode(true);cloneImage2.style.left='5px';cloneImage2.style.top='5px';// create a third offset image & append if necessary\nvar cloneImage3=cloneImage.cloneNode(true);cloneImage.appendChild(cloneImage2);if(count>2){cloneImage3.style.left='10px';cloneImage3.style.top='10px';cloneImage.appendChild(cloneImage3);}}return cloneImage;};/**\n * Returns the 'validSourceTypes' property on the 'target' element being dropped onto.\n *\n * @param {Element} targetElement - The Element that will be dropped onto (i.e. the data 'target').\n *\n * @return {StringArray} Array of valid 'sourceTypes' (or an empty array if no 'sourceTypes' are valid).\n */var _getValidSourceTypes=function(targetElement){var validSourceTypes=jquery_default()(targetElement).data('validSourceTypes');if(validSourceTypes){return Object.keys(validSourceTypes);}return[];};/**\n * Use the given ViewModelObject to return a string description of it.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to query.\n *\n * @return {String} Description of given ViewModelObject (or it's UID if no other name is possible).\n */var _getViewModelObjectName=function(vmo){if(vmo.props.object_string){return vmo.props.object_string.displayValues[0];}else if(vmo.props.items_tag){return vmo.props.items_tag.displayValues[0];}else if(vmo.props.object_name){return vmo.props.object_name.displayValues[0];}else if(vmo.props.object_desc&&vmo.props.object_desc.length>0){return vmo.props.object_desc.displayValues[0];}else if(vmo.props.job_name){return vmo.props.job_name.displayValues[0];}else if(vmo.props.awp0CellProperties){return vmo.props.awp0CellProperties.displayValues[0];}return vmo.uid;};/**\n * Check the user agent string to see if the browser is the NX embedded browser, the NX QT browser puts \"ugraf\"\n * in the user agent string.\n *\n * @return {boolean} true if NX browser false otherwise\n */var _isNxWebBrowser=function(){return navigator.userAgent.indexOf('ugraf')>=0;};/**\n * @param {StringArray} validSourceTypes - Array of 'source' types this 'target' will accept.\n * @param {StringArray} sourceTypes - Arrays of 'source' types determined from the event's 'dataTransfer' being\n *            dragged.\n *\n * @return {Boolean} TRUE if ALL the given 'source' types are valid to drop onto the 'target' based on the given\n *         'validSourceTypes'.\n */var _isValidObjectToDropInternal=function(validSourceTypes,sourceTypes){/**\n     * Check if we have anything to work with.\n     */if(validSourceTypes&&validSourceTypes.length>0&&sourceTypes&&sourceTypes.length>0){/**\n         * Check if all the 'sources' matches at least one valid type for the 'target' Element.\n         * <P>\n         * If so: We will consider the drop of these 'sources' onto that 'target'.\n         */for(var i=0;i<sourceTypes.length;i++){var sourceType=sourceTypes[i];var sourceTypeFound=null;/**\n             * Consider each valid 'source' type the 'target' will accept.\n             */for(var j=0;j<validSourceTypes.length;j++){var validSourceType=validSourceTypes[j];/**\n                 * Check for an exact match\n                 */if(sourceType===validSourceType){sourceTypeFound=validSourceType;break;}/**\n                 * Get all the ancestor types for this 'source' type and see if one of them is valid for this\n                 * 'target'.\n                 */var sourceModelType=clientMetaModel[\"a\" /* default */].getType(sourceType);if(sourceModelType){var sourceTypeHeirarchy=sourceModelType.typeHierarchyArray;if(sourceTypeHeirarchy){for(var k=1;k<sourceTypeHeirarchy.length;k++){if(sourceTypeHeirarchy[k]===validSourceType){sourceTypeFound=validSourceType;break;}}}}else{logger[\"a\" /* default */].warn('Unable to locate \\'source\\' type (not loaded yet?): '+sourceType);}}/**\n             * Check if NONE of the valid 'source' types apply.\n             */if(!sourceTypeFound){if(m_debug_LogRejectedSourceType){logger[\"a\" /* default */].warn('This \\'source\\' type is not valid for the \\'target\\': '+sourceType);}return false;}}return true;}return false;};/**\n * @param {Object} pasteInput - An Object that maps a unique 'relationType' to the array of 'source'\n *            IModelObjects that should be pasted onto the 'target' with that 'relationType'.\n *\n * @return {Promise} A Promise that will be 'resolved' or 'rejected' when the service is invoked and its\n *         response data is available.\n */var _pasteFiles=function(pasteInput){let pasteFileHandler=dragAndDropService_DragAndDropService.instance.pasteFileHandler;return pasteFileHandler.pasteFilesWithHandler(pasteInput).then(function(response){if(response&&response.isOsFiles){const{pasteFilesInput}=response;var deferred=awPromiseService[\"a\" /* default */].instance.defer();lodash_default.a.forEach(pasteFilesInput,function(input){const{targetObject,relationType,sourceObjects}=input;pasteService.execute(targetObject,sourceObjects,relationType,{isDragDropIntent:true}).then(function(res){var eventData={relatedModified:[targetObject],refreshLocationFlag:false,createdObjects:sourceObjects};eventBus[\"a\" /* default */].publish('cdm.relatedModified',eventData);deferred.resolve(res[0]);},function(err){deferred.reject(err);});});return deferred.promise;}return response;});};/**\n * Use the 'paste' operation command to perform the actual 'drop' onto the 'target'.\n *\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n * @param {ViewModelObject} targetVMO - The 'target' ViewModelObject being dropped onto.\n * @param {Array} sourceFiles - The 'source' JS File objects being dropped.\n * @param {FunctionArray} callbackAPIs - Callback functions used for various interaction reasons.\n */var _pasteSourceFiles=function(targetElement,targetVMO,sourceFiles,callbackAPIs){/**\n     * Create a map of unique 'relation' type to a list of objects that will be pasted with that 'relation'\n     * type.\n     */var validSourceTypes=_getValidSourceTypes(targetElement);if(!validSourceTypes||validSourceTypes.length===0){validSourceTypes=[];let pasteHandler=dragAndDropService_DragAndDropService.instance.pasteHandler;var sourceTypesObject=pasteHandler.getObjectValidSourceTypes(targetVMO);if(sourceTypesObject&&typeof sourceTypesObject==='object'){var sourceTypes=Object.keys(sourceTypesObject);if(sourceTypes){for(var counter=0;counter<sourceTypes.length;counter++){var validSourceType=sourceTypes[counter];if(clientMetaModel[\"a\" /* default */].containsType(validSourceType)){validSourceTypes.push(validSourceType);}}}}}var sourceType2RelationMap=_createSourceType2RelationsMap(validSourceTypes,targetElement);var pasteRelation2SourceObjectsMap={};if(sourceFiles){for(var i=0;i<sourceFiles.length;i++){var sourceObject=sourceFiles[i];/**\n             * Get all the ancestor types for this 'source' type and see if one of them is valid.\n             * <P>\n             * Note: For dropping files we look to see if the 'target' accepts a 'Dataset' since that is what will\n             * ultimately be created.\n             */var sourceModelType=clientMetaModel[\"a\" /* default */].getType(TYPE_NAME_DATASET);if(sourceModelType){var sourceTypeHeirarchy=sourceModelType.typeHierarchyArray;for(var j=0;j<sourceTypeHeirarchy.length;j++){var currSourceType=sourceTypeHeirarchy[j];var relationType=sourceType2RelationMap[currSourceType];if(relationType){var sourceObjectsForType=pasteRelation2SourceObjectsMap[relationType];if(!sourceObjectsForType){sourceObjectsForType=[];pasteRelation2SourceObjectsMap[relationType]=sourceObjectsForType;}sourceObjectsForType.push(sourceObject);break;}}}else{logger[\"a\" /* default */].warn('Unable to locate \\'source\\' type\\' (not loaded yet?): '+TYPE_NAME_DATASET);}}}_scheduleSelectTarget(targetElement,targetVMO,callbackAPIs);/**\n     * Paste 'sources' to 'target' for each unique 'relation' type.\n     */var pasteInput=[];lodash_default.a.forEach(pasteRelation2SourceObjectsMap,function(value,key){var curr={};curr.targetObject=targetVMO;curr.relationType=key;curr.sourceObjects=value;pasteInput.push(curr);});var startTime=Date.now();_pasteFiles(pasteInput).then(function(result){var stopTime=Date.now();var pasteInputJS=pasteInput;var sourceObjectsJS=result.sourceObjects;if(_debug_logEventActivity>1){var durationMs=stopTime-startTime;var durationSec=durationMs/1000.0;var duration=durationSec;logger[\"a\" /* default */].info('Time to process ('+sourceObjectsJS.length+') files: '+duration+'sec');}var localTextBundle={};localTextBundle.dropCompletedDocument=localeService[\"default\"].getLoadedTextFromKey('dragAndDropMessages.dropCompletedDocument');localTextBundle.dropCompleted=localeService[\"default\"].getLoadedTextFromKey('dragAndDropMessages.dropCompleted');/**\n         * Based on passed parameters in return from create SOA post the correct success message to the user.\n         */var droppedOnObject=pasteInputJS[0].targetObject.cellHeader1;if(!droppedOnObject){droppedOnObject=pasteInputJS[0].targetObject.props.object_string.uiValues[0];}if(!droppedOnObject){droppedOnObject='???';}if(result.docCreated){var dropCompletedDocumentMsg=localTextBundle.dropCompletedDocument;dropCompletedDocumentMsg=dropCompletedDocumentMsg.replace('{0}',result.docName);dropCompletedDocumentMsg=dropCompletedDocumentMsg.replace('{1}',droppedOnObject);dropCompletedDocumentMsg=dropCompletedDocumentMsg.replace('{2}',sourceObjectsJS.length);messagingService[\"a\" /* default */].showInfo(dropCompletedDocumentMsg);}else{var dropCompletedMsg=localTextBundle.dropCompleted;dropCompletedMsg=dropCompletedMsg.replace('{0}',sourceObjectsJS.length);dropCompletedMsg=dropCompletedMsg.replace('{1}',droppedOnObject);messagingService[\"a\" /* default */].showInfo(dropCompletedMsg);}},function(ex){logger[\"a\" /* default */].error('uploadFailures'+ex);});};/**\n * Use the 'paste' operation command to perform the actual 'drop' onto the 'target'.\n *\n * @param {Element} targetElement - The 'target' DOM Element being dropped onto.\n *\n * @param {ViewModelObject} targetVMO - The 'target' ViewModelObject being dropped onto.\n *\n * @param {IModelObjectArray} sourceObjects - The 'source' IModelObjects being dropped.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _pasteSourceObjects=function(targetElement,targetVMO,sourceObjects,callbackAPIs){/**\n     * Create a map of unique 'relation' type to a list of objects that will be pasted with that 'relation'\n     * type.\n     */var validSourceTypes=_getValidSourceTypes(targetElement);if(!validSourceTypes||validSourceTypes.length===0){validSourceTypes=[];let pasteHandler=dragAndDropService_DragAndDropService.instance.pasteHandler;var sourceTypesObject=pasteHandler.getObjectValidSourceTypes(targetVMO);var sourceTypes=Object.keys(sourceTypesObject);if(sourceTypes){for(var counter=0;counter<sourceTypes.length;counter++){var validSourceType=sourceTypes[counter];if(clientMetaModel[\"a\" /* default */].containsType(validSourceType)){validSourceTypes.push(validSourceType);}}}}var sourceType2RelationMap=_createSourceType2RelationsMap(validSourceTypes,targetElement);var pasteRelation2SourceObjectsMap={};if(sourceObjects){for(var i=0;i<sourceObjects.length;i++){var sourceObject=sourceObjects[i];/**\n             * Get all the ancestor types for this 'source' type and see if one of them is valid.\n             */var sourceType=sourceObject.type;var sourceModelType=clientMetaModel[\"a\" /* default */].getType(sourceType);if(sourceModelType){var sourceTypeHeirarchy=sourceModelType.typeHierarchyArray;for(var j=0;j<sourceTypeHeirarchy.length;j++){var sourceParentType=sourceTypeHeirarchy[j];var relationType=sourceType2RelationMap[sourceParentType];if(relationType){var sourceObjectsForType=pasteRelation2SourceObjectsMap[relationType];if(!sourceObjectsForType){sourceObjectsForType=[];pasteRelation2SourceObjectsMap[relationType]=sourceObjectsForType;}sourceObjectsForType.push(sourceObject);break;}}}else{logger[\"a\" /* default */].warn('Unable to locate \\'source\\' type\\' (not loaded yet?): '+sourceType);}}}_scheduleSelectTarget(targetElement,targetVMO,callbackAPIs);/**\n     * Paste each unique 'relation' type.\n     */var keys=Object.keys(pasteRelation2SourceObjectsMap);if(keys&&keys.length>0){var pasteInput=[];lodash_default.a.forEach(pasteRelation2SourceObjectsMap,function(value,key){var jso={};jso.targetObject=targetVMO;jso.relationType=key;jso.sourceObjects=value;pasteInput.push(jso);});dragAndDropService_exports.publishDropEvent(pasteInput);}};/**\n * Determine all the valid containers on the page . Check if the 'target'  is compatible with the 'source' types being dragged and,\n * if so, change drag effect to indicate if it is OK to drop on that 'target'.\n *\n * @param {DragEvent} event - DragEnter or DragOver event from global area\n * @return {Object} validHighlightableContainers - All valid applicable containers for highlighing\n */var getApplicableContainersFromGlobalArea=function(event){var validHighlightableContainers=[];var isValid=false;var targetElements=document.body.querySelectorAll(DROP_CLASS);if(targetElements){lodash_default.a.forEach(targetElements,function(targetElement){isValid=dragAndDropService_exports.isValidObjectToDrop(event,targetElement);if(isValid){validHighlightableContainers.push(targetElement);}});}if(validHighlightableContainers.length===0){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('No valid containers found on the entire page');}}else{if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info(validHighlightableContainers.length+' valid containers found , highlight in progress');}}return validHighlightableContainers;};/**\n * Set the type of drag-and-drop operation currently selected or sets the operation to a new type. The value\n * must be 'none', 'copy', 'link' or 'move'.\n *\n * @param {DragEvent} event - The DragEvent that holds the 'dataTransfer' property to set.\n * @param {String} value - The 'dropEffect' value to set .\n */var _setDropEffect=function(event,value){event.dataTransfer.dropEffect=value;};/**\n * Once the last 'paste' is complete, select the 'target' object to show the results of the 'drop'. This should\n * cause the new 'sources' in that object.\n *\n * @param {DOMElement} targetElement - The element the mouse is over when the event was fired.\n * @param {ViewModelObject} targetVMO - The 'target' ViewModelObject being dropped onto.\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */var _scheduleSelectTarget=function(targetElement,targetVMO,callbackAPIs){callbackAPIs.selectResultFn(targetElement,targetVMO);};//* **************************************************************************\n//* **************************************************************************\n//* **************************************************************************\n//* **************************************************************************\nvar dragAndDropService_exports={};/**\n * Add the given map of 'dragData' name/value pairs to the 'dataTransfer' property of the given DragEvent.\n *\n * @param {DragEvent} event - The DragEvent to set the DragData on.\n * @param {Object} dragDataMap - Map of name/value pairs to add.\n */let addDragDataToDragEvent=function(event,dragDataMap){if(_includeDataTransfer){try{lodash_default.a.forEach(dragDataMap,function(value,name){event.dataTransfer.setData(name,value);});}catch(ex){// Current versions of Internet Explorer can only have types \"Text\" and \"URL\"\nlodash_default.a.forEach(dragDataMap,function(value,name){// Only deal with the interop error from IE, to address DnD issue D-24972\nif(name==='aw_interop_type'){event.dataTransfer.setData('text',value);}});}}};/**\n * @return {StringArray} An array of strings (placed into localStorage' at the start of a drag operation) that\n *         represent the UIDs of 'source' objects being dragged (or NULL if no types were found).\n */let getCachedSourceUids=function(){var dragDataJSON=localStorage[\"default\"].get('awDragData');if(dragDataJSON&&dragDataJSON!=='undefined'){var dragData=JSON.parse(dragDataJSON);if(dragData.uidList){return dragData.uidList;}}return null;};/**\n * Check if <b>everything</b> in the 'dataTransfer' is valid to drop on the 'target'.\n * <P>\n * Note: There will be multiple things being dragged over. We should look at the type (Files, ModelObject,\n * Text). Do we have three handlers, or a smarter handler?\n * <P>\n * For a smarter handler, if this is a folder, it can take objects. This should only cause the drop indicator to\n * be shown for objects.\n *\n * @param {DragEvent} event - The event containing the details of the 'dataTransfer' and 'target' element to\n *            test.\n * @param {Object} targetElement - targetElement when object is over an invalid area . When drag is over a valid area,  targetElement\n *            is evaluated from event\n * @returns {Boolean} TRUE if something in the 'dataTransfer' is valid to drop on the 'target'.\n */let isValidObjectToDrop=function(event,targetElement){// eslint-disable-line complexity\n/**\n     * Find the DOM Element (potentially above the 'target' event's origin) where all the DnD information is\n     * stored.\n     */if(lodash_default.a.isUndefined(targetElement)){targetElement=_findDropTargetElement(event)[0];}if(!targetElement){return false;}if(targetElement.classList&&targetElement.classList.contains('aw-widgets-chooseordropfile')&&dragAndDropService_exports.dataTransferContainsFiles(event)){return true;}/**\n     * Check if we do NOT want to allow files from the OS to be dropped and the 'dataTransfer' contains at least\n     * one file.\n     */if(!m_supportingFileDrop&&dragAndDropService_exports.dataTransferContainsFiles(event)){return false;}/**\n     * Check if the 'target' does not have information we need to process or that there are no 'source' objects\n     * being dragged.\n     * <P>\n     * If so: No need to consider it as a valid drop (onto itself).\n     */var targetUID=jquery_default()(targetElement).data('dropuid');if(!targetUID||targetUID.length===0){return false;}/**\n     * Make sure we have cached 'source' information to work with.\n     */ //            var sourceContainerId = null;\nvar sourceUids=null;var sourceTypes=null;var sourceDragData=_getCachedDragData();if(sourceDragData){//                sourceContainerId = sourceDragData.containerId;\nsourceUids=sourceDragData.uidList;sourceTypes=sourceDragData.typeList;}/**\n     * Check if the 'target' is actually in the list of 'source' objects being dragged.\n     * <P>\n     * If so: No need to consider it as a valid drop (onto itself).\n     */if(sourceUids&&sourceUids.length>0&&lodash_default.a.indexOf(sourceUids,targetUID)!==-1){return false;}/**\n     * Get the types that are valid to drop on this 'target' and check if the current drag operation 'source'\n     * contains at least one of that type.\n     */var validSourceTypes=_getValidSourceTypes(targetElement);if(validSourceTypes&&validSourceTypes.length>0){/**\n         * Check if the only 'sources' are JS Files on the event.\n         * <P>\n         * If so: Build a list of 'source' types based on the file extensions.\n         * <P>\n         * If not: Use the IModelObject 'sources'\n         */if((!sourceTypes||sourceTypes.length===0)&&dragAndDropService_exports.dataTransferContainsFiles(event)){/**\n             * Get any file type information carried in the 'dataTransfer' property.\n             * <P>\n             * Check if there are NONE\n             * <P>\n             * If so: Then just assume the source is just one or more 'DataSet'.\n             */var fileTypes=dragAndDropService_exports.getDataTransferFileTypes(event);if(fileTypes&&fileTypes.length===0){fileTypes.push(TYPE_NAME_DATASET);}/**\n             * Create key used to track status and remember the result of the validity test.\n             */var sb=targetUID;for(var i=0;i<validSourceTypes.length;i++){sb+=',';sb+=validSourceTypes[i];}if(fileTypes){for(var j=0;j<fileTypes.length;j++){sb+=',';sb+=fileTypes[j];}}var mapKey=sb;/**\n             * Check if we already know the result from the last time we asked this question for the same\n             * 'source' types and 'target'.\n             */var result=m_mapKey2Result[mapKey];if(result){return result.value;}var promise=m_mapKey2Promise[mapKey];if(!promise){m_mapKey2Promise[mapKey]=dragAndDropService_exports.getDataTransferSourceTypes(targetUID,fileTypes).then(function(result2){delete m_mapKey2Promise[mapKey];m_mapKey2Result[mapKey]={value:result2&&result2.length>0&&_isValidObjectToDropInternal(validSourceTypes,result2)};},function(){delete m_mapKey2Promise[mapKey];m_mapKey2Result[mapKey]={value:false};});}return false;}/**\n         * Check if any of the valid 'source' types are NOT currently loaded.\n         * <P>\n         * Note: We need them loaded so we can walk their type hierarchy while looking for a match.\n         */var missingSourceTypes=null;var availableSourceTypes=null;for(var ii=0;ii<validSourceTypes.length;ii++){var validSourceType=validSourceTypes[ii];if(!clientMetaModel[\"a\" /* default */].containsType(validSourceType)){if(!missingSourceTypes){missingSourceTypes=[];}missingSourceTypes.push(validSourceType);}else{if(!availableSourceTypes){availableSourceTypes=[];}availableSourceTypes.push(validSourceType);}}/**\n         * Check if any 'source' types are missing (not loaded yet).\n         * <P>\n         * If available 'source' types is null and missing 'source' types is not null, Then: Return 'false' for\n         * this drop but queue up a server request to get the type so that during further (future) dragging will\n         * see the type as loaded.\n         */if(!availableSourceTypes&&missingSourceTypes){var sb2=targetUID;for(var jj=0;jj<missingSourceTypes.length;jj++){if(jj>0){sb2+=',';}sb2+=missingSourceTypes[jj];}var key=sb2;if(!m_typeLookupInProgress[key]){m_typeLookupInProgress[key]=key;soaService[\"a\" /* default */].ensureModelTypesLoaded(missingSourceTypes).then(function(){/**\n                     * Nothing to do now other than removing the lookup placeholder. We just wanted to make sure\n                     * the type is loaded for the NEXT time we look for it.\n                     */delete m_typeLookupInProgress[key];},function(err){logger[\"a\" /* default */].error('Unable to get model types: '+err);});}return false;}return _isValidObjectToDropInternal(availableSourceTypes,sourceTypes);}return false;};/**\n * Get map of data format to drag data based on the given 'source' IModelObjects.\n *\n * @param {ViewModelObjectArray} sourceVMOs - The 'source' ViewModelObjects being dragged.\n * @param {String} containerId - The ID of the UI 'container' of the 'source' objects.\n *\n */let processAWInteropAndHosting=function(sourceVMOs,containerId){/**\n     * Create collections of data associated with the 'source' objects.\n     */var uidList=[];var typeSet={};var interopObjectRefs=[];var firstObjectUrl='';var first=true;modelsHaveTypes=false;sourceVMOs.forEach(modelObject=>{if(modelObject.type){modelsHaveTypes=true;}if(clientMetaModel[\"a\" /* default */].isInstanceOf('Awp0XRTObjectSetRow',modelObject.modelType)){var adaptedObjs=adapterService[\"a\" /* default */].getAdaptedObjectsSync([modelObject]);modelObject=adaptedObjs[0];}/**\n         * Grab the first uid from the list for the url and the type\n         */if(first){first=false;firstObjectUrl=_getShowObjectURL(modelObject.uid);}/**\n         * Add the UID and type of this object into the collections\n         */if(modelObject.uid){uidList.push(modelObject.uid);}typeSet[modelObject.type]=modelObject.type;if(_createInteropObjectRefFn){/**\n             * Generate a hosting InteropObjectRef to be used by host applications (i.e. NX) for\n             * interpreting this 'source' object.\n             */var objRefArrayList=_createInteropObjectRefFn(modelObject);lodash_default.a.forEach(objRefArrayList,function(objRef){interopObjectRefs.push(objRef);});}else{if(_debug_logEventActivity){logger[\"a\" /* default */].warn('Unable to determine InteropObjectRef information due to missing callback function');}}});var dragData={'text/uri-list':firstObjectUrl,'text/plain':firstObjectUrl};/**\n     * Include application interop references (if necessary)\n     */if(interopObjectRefs&&interopObjectRefs.length>0&&_includeDataTransfer){/**\n         * Create the JSON message for interop with host applications.\n         */var dragDataInterop={DragTargets:interopObjectRefs};var jsonString=JSON.stringify(dragDataInterop);/**\n         * Add data for each data format\n         * <P>\n         * Note: Need multiple data formats right now to handle compatibility with different browsers.\n         */for(var j=0;j<DATA_FORMATS.length;j++){dragData[DATA_FORMATS[j]]=jsonString;}}dragData['text/uri-list']=firstObjectUrl;dragData['text/plain']=firstObjectUrl;/**\n     * Put the other formats onto the dataTransport\n     * <P>\n     * Note: We need the UIDs and types in the 'keys' (for checking while dragging since the values are not\n     * available at that time) and the 'values' to be able to access the data without it being changed to lower\n     * case by the browser itself.\n     */var dragDataJSO={};dragDataJSO.containerId=containerId;dragDataJSO.uidList=uidList;dragDataJSO.firstObjectUrl=firstObjectUrl;dragDataJSO.typeList=[];lodash_default.a.forEach(typeSet,function(type){dragDataJSO.typeList.push(type);});localStorage[\"default\"].publish('awDragData',JSON.stringify(dragDataJSO));addDragDataToDragEvent(event,dragData);};/**\n * Handle caching of DnD mapping data on the 'target' element's 'drop container' the 1st time we encounter the\n * 'target'.\n *\n * @param {DragEvent} event - The drag event with the 'target' to process.\n */let processDragEnd=function(event){// eslint-disable-line no-unused-vars\n_clearCachedData();};/**\n * Remove Highlight from the drop area with CSS class(s) and prevent the 'default' behavior (which we assume to\n * be 'do not allow drop' for objects or 'load file into page' for files).\n *\n * @param {DragEvent} event -\n */let processDragLeave=function(event){event.preventDefault();};/**\n * Remove Highlight when object drag is skipped or object dragged outside white/invalid area\n *\n * @param {DragEvent} event -\n */let processDragLeaveGlobal=function(event){if(lodash_default.a.isUndefined(mainReference)){mainReference=document.body;}var allHighlightedTargets=mainReference.querySelectorAll('.aw-theme-dropframe.aw-widgets-dropframe');if(allHighlightedTargets){isGlobalHighlightPublished=false;lodash_default.a.forEach(allHighlightedTargets,function(target){eventBus[\"a\" /* default */].publish(DRAG_DROP_HIGHLIGHT_EVENT,{event:event,isGlobalArea:true,isHighlightFlag:false,targetElement:target});});}};/**\n * Determine if the DragEvent is over a 'target' that is compatible with the 'source' types being dragged and,\n * if so, change drag effect to indicate if it is OK to drop on that 'target'.\n *\n * @param {DragEvent} event -\n * @param {boolean} isCurrentTargetOverGlobalArea - is the object drag over an invalid/white area\n */var _processDragOverInternal=function(event,isCurrentTargetOverGlobalArea){dragAndDropService_exports.processDragLeaveGlobal(event);// clearing all other highlights triggered due to file drag in global area\nif(isCurrentTargetOverGlobalArea){if(dragAndDropService_exports.dataTransferContainsURLs(event)){_setDropEffect(event,'copy');}else{_setDropEffect(event,'none');event.stopPropagation();event.preventDefault();var allHighlightableTargets=getApplicableContainersFromGlobalArea(event);if(allHighlightableTargets){lodash_default.a.forEach(allHighlightableTargets,function(targetElement){eventBus[\"a\" /* default */].publish(DRAG_DROP_HIGHLIGHT_EVENT,{event:event,isGlobalArea:true,isHighlightFlag:true,targetElement:targetElement});});}}}else{if(dragAndDropService_exports.isValidObjectToDrop(event)){eventBus[\"a\" /* default */].publish(DRAG_DROP_HIGHLIGHT_EVENT,{event:event,isGlobalArea:false,isHighlightFlag:true,targetElement:_findDropTargetElement(event)[0]});_setDropEffect(event,'copy');// when dragged object is on a valid container, the dragged effect should be \\'Copy\\'\nevent.stopPropagation();event.preventDefault();}else{// this ensures if the drop target is an applicable one however not a valid one , all the highlights are gone and a no drop cursor is shown\n_setDropEffect(event,'none');event.dataTransfer.effectAllowed='none';event.stopPropagation();event.preventDefault();}}};/**\n * @param {DragEvent} event - The drag event with the 'target' to process.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */let processDrop=function(event,callbackAPIs){event.stopPropagation();event.preventDefault();var targetElement=_findDropTargetElement(event)[0];if(!targetElement){_clearCachedData();return;}eventBus[\"a\" /* default */].publish(DRAG_DROP_HIGHLIGHT_EVENT,{event:event,isGlobalArea:false,isHighlightFlag:false,targetElement:targetElement});var sourceUids=dragAndDropService_exports.getCachedSourceUids();if(sourceUids&&sourceUids.length>0){_dropModelObjects(targetElement,sourceUids,callbackAPIs);}else{var sourceFiles=_getDataTransferSourceFiles(event);if(sourceFiles&&sourceFiles.length>0&&sourceFiles.item(0).size>0){_dropFiles(targetElement,sourceFiles,callbackAPIs);}else{var dropFolderFailureDocument=localeService[\"default\"].getLoadedTextFromKey('dragAndDropMessages.dropFolderFailureDocument');dropFolderFailureDocument=dropFolderFailureDocument.replace('{0}',sourceFiles.item(0).name);messagingService[\"a\" /* default */].showError(dropFolderFailureDocument);_clearCachedData();}}};/**\n * Set the current types of operations that are possible. Must be one of 'none', 'copy', 'copyLink', 'copyMove',\n * 'link', 'linkMove', 'move', 'all' or 'uninitialized'.\n *\n * @param {DragEvent} event - The DragEvent that holds the 'dataTransfer' property to set.\n *\n * @param {String} value - The 'effectAllowed' allowed value to set.\n */let setEffectAllowed=function(event,value){try{event.dataTransfer.effectAllowed=value;}catch(ex){// Do nothing\n}};/**\n * @param {Element} panelElement - The DOM element that is the overall container/frame for a collection of\n *            'source' and 'target' objects.\n *\n * @param {Object} callbackAPIs - Callback functions used for various reasons of interaction with the\n *            container/frame:\n *\n * @param {Object} dataProvider - DataProvider for the panelElement\n * <P>\n * getElementViewModelObjectFn: Used to query the 'source' or 'target' ViewModelObject(s) under any given\n * DragEvent.\n * <P>\n * clearSelectionFn: Used to clear all currently selected 'source' objects just before the drop operation is\n * performed.\n * <P>\n * selectResultFn: Used to select the 'target' when the drop operation is complete.\n */let setupDragAndDrop=function(panelElement,callbackAPIs,dataProvider){// Init class here\ndragAndDropService_DragAndDropService.instance;var jqPanelElement=jquery_default()(panelElement);var showDropAreaAttr=jqPanelElement.attr('show-drop-area');/**\n     * Set valid source types to the target drop element by retrieving from objectSetSource in data provider\n     */var dropContainer=jqPanelElement.hasClass('aw-widgets-droppable')&&!showDropAreaAttr?jqPanelElement:jqPanelElement.find(DROP_CLASS);if(dropContainer){var dropContScope=null;//ngModule.element( dropContainer ).scope();\nif(dropContScope){var sourceType2RelationMap={};var declViewModel=declUtils[\"a\" /* default */].findViewModel(dropContScope,false,null);// ui-grid uses scope.dataprovider and plTable uses scope.dataProvider\nvar dropTableDataProvider=dataProvider||dropContScope.dataprovider||dropContScope.dataProvider;if(dropTableDataProvider&&dropTableDataProvider.validSourceTypes){var objectSetSources=dropTableDataProvider.validSourceTypes.split(',');lodash_default.a.forEach(objectSetSources,function(source){var relationSources=source.split('.');var sourceType=relationSources[1];if(!sourceType2RelationMap[sourceType]){sourceType2RelationMap[sourceType]=[];var relationObj={relation:relationSources[0]};sourceType2RelationMap[sourceType]=relationObj;}});}else if(declViewModel&&declViewModel.vmo){// fetch valid source types from paste service for vmo inside decl view model\nlet pasteHandler=dragAndDropService_DragAndDropService.instance.pasteHandler;if(pasteHandler){sourceType2RelationMap=pasteHandler.getObjectValidSourceTypes(declViewModel.vmo);}else if(_cfgLoadPromise){_cfgLoadPromise.then(function(){pasteHandler=dragAndDropService_DragAndDropService.instance.pasteHandler;sourceType2RelationMap=pasteHandler.getObjectValidSourceTypes(declViewModel.vmo);dropContainer.data('validSourceTypes',sourceType2RelationMap);});}}dropContainer.data('validSourceTypes',sourceType2RelationMap);if(declViewModel&&declViewModel.vmo){// add the decl view model VMO as drop uid on the container\ndropContainer.data('dropuid',declViewModel.vmo.uid);}}}callbackAPIs.dragStartFn=function(event){if(event){/**\n             * Determine some hosting related options at the start.\n             */_includeDataTransfer=appCtxService[\"default\"].ctx.aw_host_type!=='ADOBE';_publishHostingEvents=appCtxService[\"default\"].ctx.aw_hosting_enabled;// D-52947: Prevent issues when text is highlighted as drag starts. Event.target may be text.\nif(event.target.nodeName==='#text'){jqPanelElement.data('dragging',false);event.preventDefault();}else{if(_debug_logEventActivity>=2){logger[\"a\" /* default */].info('dragstart: '+'\\n'+JSON.stringify(event,null,2));}if(_publishHostingEvents){eventBus[\"a\" /* default */].publish(HOSTING_DRAG_DROP_EVENT,{type:'dragstart',event:event});}var srcElement=_getEventSource(event);var sourceVMOs=callbackAPIs.getElementViewModelObjectFn(srcElement,false);if(sourceVMOs&&sourceVMOs.length>0){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('Source Item UID: '+_getViewModelObjectName(sourceVMOs[0]));}jquery_default()(panelElement).data('dragging',true);var containerId=jqPanelElement.data('containerId');if(!containerId){containerId=Date.now();jqPanelElement.data('containerId',containerId);}dragAndDropService_exports.processAWInteropAndHosting(sourceVMOs,containerId.toString());dragAndDropService_exports.updateDragImage(event,sourceVMOs.length);if(!_includeDataTransfer){event.dataTransfer.clearData();}}else{// No data so there is no reason to let the object be dragged.\njqPanelElement.data('dragging',false);event.preventDefault();}}}};callbackAPIs.dragEndFn=function(event){if(event){if(_debug_logEventActivity>=2){logger[\"a\" /* default */].info('dragend: '+'\\n'+JSON.stringify(event,null,2));}var element=_getDragElement(event);if(element){var dragImage=element.getElementsByClassName('aw-widgets-multidragimage')[0];if(dragImage){element.style.position='';dragImage.parentNode.removeChild(dragImage);}}if(_publishHostingEvents){eventBus[\"a\" /* default */].publish(HOSTING_DRAG_DROP_EVENT,{type:'dragend',event:event});}jqPanelElement.data('dragging',false);}};callbackAPIs.dragOverFn=function(event){if(event){if(_debug_logEventActivity>=3){logger[\"a\" /* default */].info('dragover: '+'\\n'+JSON.stringify(event,null,2));}if(_publishHostingEvents){eventBus[\"a\" /* default */].publish(HOSTING_DRAG_DROP_EVENT,{type:'dragover',event:event});}event.stopPropagation();dragAndDropService_exports.processDragOver(event,false);}};callbackAPIs.dragEnterFn=function(event){if(event){if(_debug_logEventActivity>=2){logger[\"a\" /* default */].info('dragenter: '+'\\n'+JSON.stringify(event,null,2));}if(_publishHostingEvents){eventBus[\"a\" /* default */].publish(HOSTING_DRAG_DROP_EVENT,{type:'dragenter',event:event});}event.preventDefault();event.stopPropagation();var target=_findDropTargetElement(event)[0];if(!target){return;}if(dragAndDropService_exports.isValidObjectToDrop(event)){var targetVMOs=callbackAPIs.getElementViewModelObjectFn(target,true);if(targetVMOs&&targetVMOs.length>0){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('Target Item Name: '+_getViewModelObjectName(targetVMOs[0]));}var debounceProcessDragEnter=lodash_default.a.debounce(dragAndDropService_exports.processDragEnter,100);debounceProcessDragEnter(event,targetVMOs[0]);}}}};callbackAPIs.dragLeaveFn=function(event){if(event){if(_debug_logEventActivity>=2){logger[\"a\" /* default */].info('dragleave: '+'\\n'+JSON.stringify(event,null,2));}if(_publishHostingEvents){eventBus[\"a\" /* default */].publish(HOSTING_DRAG_DROP_EVENT,{type:'dragleave',event:event});}var debounceProcessDragLeave=lodash_default.a.debounce(dragAndDropService_exports.processDragLeave,100);debounceProcessDragLeave(event);}};callbackAPIs.dropFn=function(event){if(event){if(_debug_logEventActivity>=2){logger[\"a\" /* default */].info('drop: '+'\\n'+JSON.stringify(event,null,2));}if(_publishHostingEvents){eventBus[\"a\" /* default */].publish(HOSTING_DRAG_DROP_EVENT,{type:'drop',event:event});}jqPanelElement.data('dragging',false);dragAndDropService_exports.processDrop(event,callbackAPIs);}};panelElement.addEventListener('dragstart',callbackAPIs.dragStartFn);panelElement.addEventListener('dragend',callbackAPIs.dragEndFn);panelElement.addEventListener('dragover',callbackAPIs.dragOverFn);panelElement.addEventListener('dragenter',callbackAPIs.dragEnterFn);panelElement.addEventListener('dragleave',callbackAPIs.dragLeaveFn);panelElement.addEventListener('drop',callbackAPIs.dropFn);};let dragLeaveEventOnGlobalWindow=function(event){processDragLeaveGlobal(event);if(dragAndDropService_exports.dataTransferContainsFiles(event)){//\n_clearCachedData();}};/**\n * Handle caching of DnD mapping data on the 'target' element's 'drop container' the 1st time we encounter the\n * 'target'.\n *\n * @param {DragEvent} event - The drag event with the 'target' to process.\n *\n * @param {ViewModelObject} targetVMO - The ViewModelObject associated with the given event's 'target' DOM\n *            Element.\n */let processDragEnter=function(event,targetVMO){/**\n     * Look 'up' the DOM Element tree (starting at the given event's 'target') looking for the 1st 'droppable'\n     * element (i.e. the 'drop container').\n     */var currElement=_findDropTargetElement(event)[0];_setValidSourceTypesOnTarget(currElement,targetVMO);event.preventDefault();};let dragEndEventOnGlobalWindow=function(event){processDragLeaveGlobal(event);};/**\n * @param {Element} panelElement - The DOM element that is the overall container/frame for a collection of\n *            'source' and 'target' objects.\n *\n * @param {Object} callbackAPIs - Callback functions used for various interaction reasons.\n */let tearDownDragAndDrop=function(panelElement,callbackAPIs){if(callbackAPIs.dragStartFn){panelElement.removeEventListener('dragstart',callbackAPIs.dragStartFn);panelElement.removeEventListener('dragend',callbackAPIs.dragEndFn);panelElement.removeEventListener('dragover',callbackAPIs.dragOverFn);panelElement.removeEventListener('dragenter',callbackAPIs.dragEnterFn);panelElement.removeEventListener('dragleave',callbackAPIs.dragLeaveFn);panelElement.removeEventListener('drop',callbackAPIs.dropFn);callbackAPIs.dragStartFn=null;callbackAPIs.dragEndFn=null;callbackAPIs.dragOverFn=null;callbackAPIs.dragEnterFn=null;callbackAPIs.dragLeaveFn=null;callbackAPIs.dropFn=null;}};/**\n * Update the drag image for the DragEvent based on the number of objects being dragged.\n *\n * @param {DragEvent} event - The DragEvent to set the image on.\n *\n * @param {Number} count - The number of objects being dragged\n */let updateDragImage=function(event,count){/**\n     * Internet Explorer doesn't support setDragImage at all (and some 'hosts' do not want 'dataTransfer').\n     * <P>\n     * See: http://mereskin.github.io/dnd/\n     */if(!browserUtils[\"default\"].isIE&&_includeDataTransfer){/**\n         * The NX web browser (QT?) currently has a problem with child elements containing float elements. This\n         * should be resolved after moving the list view to a flex display.\n         */var dragImage;if(_isNxWebBrowser()){dragImage=_getFirstChildImage(event.target);}else if(count>1){dragImage=_getMultiDragImage(event,count);}else{dragImage=_getDragElement(event,1);}if(dragImage){event.dataTransfer.setDragImage(dragImage,0,0);}}};/**\n * Return the target model object for given UID\n *\n * @param {String} uid - UID of the modelObject on which source objects are dragged\n * @return {Object} Modelobject on which source objects are dragged\n */let getTargetObjectByUid=function(uid){return clientDataModel[\"a\" /* default */].getObject(uid);};/**\n * Return an array of viewModelObjects that contains all currently selected viewModelObjects if the given UID is\n * contained in the set of selected viewModelObjects.\n *\n * @param {Object} dataProvider - data provider\n * @param {String} dragUID - UID of the modelObject being dragged.\n * @return {Array} array of viewModelObjects that are being dragged.\n */let getSourceObjects=function(dataProvider,dragUID){var sourceObjs=[];if(!dataProvider){return sourceObjs;}var selectObjects=dataProvider.getSelectedObjects();/**\n     * Check if the given UID is in the current set of selected objects.\n     */var found=false;if(selectObjects&&selectObjects.length>0){// eslint-disable-next-line consistent-return\nlodash_default.a.forEach(selectObjects,function(selObj){if(selObj.uid===dragUID){found=true;return false;}});}if(found){sourceObjs=lodash_default.a.clone(selectObjects);}return sourceObjs;};/**\n * Look for support of the 'files' in the 'dataTranfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.\n */let dataTransferContainsFiles=function(event){if(event.dataTransfer){var types=event.dataTransfer.types;if(types){for(var i=0;i<types.length;++i){if(types[i]==='Files'){return true;}}}}return false;};/**\n * Look for support of the 'urls' in the 'dataTransfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'text/html' property is found in the 'dataTransfer' property of the event.\n */let dataTransferContainsURLs=function(event){if(event.dataTransfer){var types=event.dataTransfer.types;if(types){for(var i=0;i<types.length;++i){if(types[i]==='text/html'){return true;}}}}return false;};/**\n * @param {DragEvent} event - The event to extract the files types from the 'dataTransfer' property.\n *\n * @return {StringArray} The set of unique file types.\n */let getDataTransferFileTypes=function(event){var dtTypes=[];if(event.dataTransfer.items){var itemObjs=event.dataTransfer.items;if(itemObjs){for(var i=0;i<itemObjs.length;i++){var fileExt=_getDataTransferType(itemObjs[i].type);if(fileExt&&dtTypes.indexOf(fileExt)===-1){dtTypes.push(fileExt);}}}}return dtTypes;};/**\n * Returns underlying Object for the given 'source' type.\n *\n * @param {String} targetUID - The UID of the IModelObject that will be the dropped onto (i.e. the data\n *            'target').\n *\n * @param {StringArray} fileTypes - The array with the set of unique file types.\n *\n * @return {Promise} A Promise that will be 'resolved' or 'rejected' when the service is invoked and its\n *         response data is available.\n */let getDataTransferSourceTypes=function(targetUID,fileTypes){var targetObject=clientDataModel[\"a\" /* default */].getObject(targetUID);var request={parent:targetObject,fileExtensions:fileTypes};return soaService[\"a\" /* default */].postUnchecked('Internal-AWS2-2015-10-DataManagement','getDatasetTypesWithDefaultRelation',request).then(function(response){if(response.partialErrors||response.PartialErrors||response.ServiceData&&response.ServiceData.partialErrors){return[];}var dsTypes=[];var output=response.output;if(output){for(var i=0;i<output.length;i++){var dsInfos=output[i].datasetTypesWithDefaultRelInfo;if(dsInfos){const j=0;var dsInfo=dsInfos[j];var dsUid=dsInfo.datasetType.uid;var dsType=clientDataModel[\"a\" /* default */].getObject(dsUid);var type=dsType.props.object_string.dbValues[0];dsTypes.push(type);}}}return soaService[\"a\" /* default */].ensureModelTypesLoaded(dsTypes).then(function(){return dsTypes;});},function(e){logger[\"a\" /* default */].trace(e);return[];});};/**\n * Set a callback function to use to encode 'source' objects in support of hosting.\n *\n * @param {Function} callBackFn - Function used to create InteropObjectRefs that are added to the information\n *            carried for 'source' objects in dragEvents.\n */let setCreateInteropObjectRef=function(callBackFn){_createInteropObjectRefFn=callBackFn;};/**\n * Publish a 'drop' topic on the 'paste' channel of the Native JS 'eventBus' with the given data.\n *\n * @param {ObjectArray} pasteInput - An array of objects that maps a unique 'relationType' to the array of\n *            'sourceObjects' {@link IModelObject} s that should be pasted onto the 'targetObject' with that\n *            'relationType'.\n */let publishDropEvent=function(pasteInput){eventBus[\"a\" /* default */].publishOnChannel({channel:'paste',topic:'drop',data:{pasteInput:pasteInput}});};const _globalDragEnterAndOver=event=>{dragAndDropService_exports.processDragOver(event,true);};let registerEvents=function(){// LCS-148724 , Adding listeners to global area i.e the area outside panelElement of setupDragAndDrop() function\ndocument.body.addEventListener('dragenter',function(event){event.stopPropagation();event.preventDefault();if(!_isDragWithinApplicableValidContainer(event)||_isDragOverChooseOrDropFileContainer(event)){// below check is to avoid global dragenter events in turn flickering highlight when within a table or list\nif(!_isDragWithinTableContainer(event)&&!_isDragWithinCellListContainer(event)){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('GLOBAL DRAG ENTER EVENT, DRAG NOT WITHIN A TABLE, NOT ALLOWED cursor should be shown => tag name :'+event.target.tagName);}_setDropEffect(event,'none');// to avoid 'Copy' cursor feedback when file just enters the page\n_globalDragEnterAndOver(event);}else{if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('GLOBAL DRAG ENTER EVENT, DRAG WITHIN A TABLE, COPY cursor should be shown => tag name :'+event.target.tagName);}_setDropEffect(event,'copy');}}});document.body.addEventListener('dragover',function(event){if(!_isDragWithinApplicableValidContainer(event)||_isDragOverChooseOrDropFileContainer(event)){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('GLOBAL DRAG OVER EVENT ');}_globalDragEnterAndOver(event);}});document.body.addEventListener('dragleave',function(event){event.stopPropagation();event.preventDefault();if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('GLOBAL DRAG LEAVE EVENT, Object either dragged outside the global window OR over an applicable valid container on the page OR over an applicable invalid container on the page');}if(_isDragCancelled(event)){isGlobalHighlightPublished=false;dragAndDropService_exports.dragLeaveEventOnGlobalWindow(event);}});document.body.addEventListener('dragend',function(event){if(_debug_logEventActivity>=1){logger[\"a\" /* default */].info('GLOBAL DRAG END EVENT ');}isGlobalHighlightPublished=false;dragAndDropService_exports.dragEndEventOnGlobalWindow(event);});};const disableDragAndDrop=panelElement=>{const stopEventBubbling=event=>{event.stopPropagation();};const setDropEffectNone=event=>{stopEventBubbling(event);event.dataTransfer.dropEffect='none';};panelElement.addEventListener('dragover',setDropEffectNone);panelElement.addEventListener('dragenter',stopEventBubbling);panelElement.addEventListener('dragleave',stopEventBubbling);panelElement.addEventListener('drop',stopEventBubbling);};dragAndDropService_exports={disableDragAndDrop,addDragDataToDragEvent,getCachedSourceUids,isValidObjectToDrop,processAWInteropAndHosting,processDragEnd,processDragLeave,processDragLeaveGlobal,processDrop,setEffectAllowed,setupDragAndDrop,dragLeaveEventOnGlobalWindow,dragEndEventOnGlobalWindow,tearDownDragAndDrop,updateDragImage,getTargetObjectByUid,getSourceObjects,dataTransferContainsFiles,dataTransferContainsURLs,getDataTransferFileTypes,getDataTransferSourceTypes,setCreateInteropObjectRef,publishDropEvent,registerEvents,processDragOver,processDragEnter};/* harmony default export */ var dragAndDropService = __webpack_exports__[\"a\"] = (dragAndDropService_exports);/*\n * Register the global drag and drop events only for AW.\n */if(appCtxService[\"default\"].ctx&&appCtxService[\"default\"].ctx.tcSessionData){//registerEvents();\n}\n\n/***/ })\n\n}]);","inputSourceMap":null}
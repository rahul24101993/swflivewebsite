{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[1809],{2661:function(t,n,e){\"use strict\";function r(){var t={checkIfSessionAuthenticated:function(){return Promise.resolve()},authenticate:function(){return Promise.resolve()},postAuthInitialization:function(){return Promise.resolve()},signOut:function(){return Promise.resolve()}};return t}e.r(n),e.d(n,\"getAuthenticator\",(function(){return r}))}}]);","name":"static/js/1809.41a1e88d.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[1809],{\n\n/***/ 2661:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getAuthenticator\", function() { return getAuthenticator; });\n/**\n * @module js/helloAuthenticatorService\n */ /**\n * @return {Object} authenticator\n */function getAuthenticator(){var exports={};/**\n     * This function determines if authentication is required. If already authenticated, none is required.\n     *\n     * @return {Promise} if promise is resolved, then no authentication is required. if promise fails, then the authenticate function will be called.\n     */exports.checkIfSessionAuthenticated=function(){return Promise.resolve();};/**\n     * authenticator specific function to carry out authentication. In the interactive case, we just resolve\n     * directly to continue the pipeline.\n     *\n     * @return {Promise} promise\n     */exports.authenticate=function(){return Promise.resolve();};/**\n     * this is called during the authentication process. It gets invoked after the authentication is\n     * completed/ready. It is a spot to do any session level initialization.\n     *\n     * @return {Promise} promise to be resolved after the authenticator does self initialization\n     */exports.postAuthInitialization=function(){return Promise.resolve();};/**\n     * triggers the authenticator sign out logic. Returns a promise invoked upon completion\n     *\n     * @return {Promise} promise to be invoked upon completion of the signout tasks\n     */exports.signOut=function(){return Promise.resolve();};return exports;}\n\n/***/ })\n\n}]);","inputSourceMap":null}
{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[7],{341:function(e,n,t){\"use strict\";t.r(n),t.d(n,\"activateCommandPanel2\",(function(){return d})),t.d(n,\"activateCommandPanel\",(function(){return l}));var a=t(12),o=t(7),c=t(65);let i={},d=function(e){let{commandId:n,location:t,context:i,push:d,closeWhenCommandHidden:l,config:m,editContext:s}=e;m=m||{},s=s||\"INFO_PANEL_CONTEXT\",void 0!==d&&(m.slide=!0===d?\"PUSH\":\"FLOAT\");var r={id:t,commandId:n,includeView:n,command:{commandId:n,declarativeCommandId:n,closeWhenCommandHidden:!1!==l,getDeclarativeCommandId:function(){return n},setupDeclarativeView:function(e){i&&a.default.registerCtx(\"panelContext\",i),e.resolve()},callbackApi:{getPanelLifeCycleClose:function(e,n){return i&&a.default.unRegisterCtx(\"panelContext\"),s&&Object(c.b)(s)?Object(c.b)(s).leaveConfirmation((function(){n.resolve()})):n.resolve()}}},config:m};o.a.publish(\"awsidenav.openClose\",r)},l=function(e,n,t,a,o,c){d({commandId:e,location:n,context:t,push:a,closeWhenCommandHidden:o,config:c})};i={activateCommandPanel:l,activateCommandPanel2:d},n.default=i}}]);","name":"static/js/7.4f4a9403.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[7],{\n\n/***/ 341:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"activateCommandPanel2\", function() { return activateCommandPanel2; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"activateCommandPanel\", function() { return activateCommandPanel; });\n/* harmony import */ var js_appCtxService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);\n/* harmony import */ var js_eventBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var js_editHandlerService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(65);\n// Copyright (c) 2020 Siemens\n/**\n * Defines {@link NgServices.commandPanelService} which manages command panels.\n *\n * @module js/commandPanel.service\n *//**\n * Command service to manage commands.\n *\n * @param appCtxService {Object} - App context service\n */let exports={};/**\n * Activate a command. Closes any panel that is open in the opposite panel location. If the command is\n * same as the command active at that location it will be closed.\n * If any setup is required for the command just wrap this service.\n *\n * @param {inputObj} inputObj - Input object\n * The input object need to have following values\n * commandId\n * location\n * context\n * push\n * closeWhenCommandHidden\n * config = {}\n * editContext = String\n */let activateCommandPanel2=function(inputObj){//Create event data for awsidenav.openClose event\nlet{commandId,location,context,push,closeWhenCommandHidden,config,editContext}=inputObj;//Create config object for achieving slide push\nconfig=config||{};editContext=editContext||'INFO_PANEL_CONTEXT';if(push!==undefined){config.slide=push===true?'PUSH':'FLOAT';}var eventData={id:location,commandId:commandId,includeView:commandId,command:{commandId:commandId,declarativeCommandId:commandId,closeWhenCommandHidden:closeWhenCommandHidden!==false,getDeclarativeCommandId:function(){return commandId;},// Register panel context on activation of command\nsetupDeclarativeView:function(deferred){if(context){js_appCtxService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerCtx('panelContext',context);}deferred.resolve();},// Unregister panel context on close of command\ncallbackApi:{getPanelLifeCycleClose:function(_,deferred){if(context){js_appCtxService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unRegisterCtx('panelContext');}if(editContext&&Object(js_editHandlerService__WEBPACK_IMPORTED_MODULE_2__[/* getEditHandler */ \"b\"])(editContext)){return Object(js_editHandlerService__WEBPACK_IMPORTED_MODULE_2__[/* getEditHandler */ \"b\"])(editContext).leaveConfirmation(function(){deferred.resolve();});}return deferred.resolve();}}},config:config};js_eventBus__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].publish('awsidenav.openClose',eventData);};/**\n * Activate a command. Closes any panel that is open in the opposite panel location. If the command jas the\n * same is as the command active at that location it will be closed. If any setup is required for the\n * command just wrap this service.\n *\n * @param {String} commandId - ID of the command to open. Should map to the view model to activate.\n * @param {String} location - Which panel to open the command in. \"aw_navigation\" (left edge of screen) or \"aw_toolsAndInfo\" (right edge of screen)\n * @param {Object} context - The panel context.\n * @param {Boolean} push - Optional parameter to push workarea content when opening command panel\n * @param {Boolean} closeWhenCommandHidden - Optional parameter to disable the automatic closing of the panel when a command is hidden. Defaults to true.\n * @param {Object} config - Optional parameter to override the configuration attributes of sidenav, which includes width, height and slide.\n */let activateCommandPanel=function(commandId,location,context,push,closeWhenCommandHidden,config){activateCommandPanel2({commandId,location,context,push,closeWhenCommandHidden,config});};exports={activateCommandPanel,activateCommandPanel2};/* harmony default export */ __webpack_exports__[\"default\"] = (exports);\n\n/***/ })\n\n}]);","inputSourceMap":null}
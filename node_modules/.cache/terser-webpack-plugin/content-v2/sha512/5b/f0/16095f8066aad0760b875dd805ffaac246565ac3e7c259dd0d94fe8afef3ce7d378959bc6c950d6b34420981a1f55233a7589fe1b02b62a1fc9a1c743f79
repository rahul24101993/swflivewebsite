{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[51],{3059:function(e,t,o){\"use strict\";var n=o(12),i=o(1),a=o.n(i);let r={},s=\"ViewModeContext\";var u=function(){var e=n.default.getCtx(s);return e||{}};r={changeViewMode:function(e){var t=u();t.ViewModeContext=e,n.default.registerCtx(s,t)},getViewMode:function(){return u().ViewModeContext},setAvailableViewModes:function(e){var t=u();t.supportedViewModes={},a.a.isArray(e)&&a.a.forEach(e,(function(e){t.supportedViewModes[e]={}})),n.default.updateCtx(s,t)},getAvailableViewModes:function(){var e=u().supportedViewModes;return e?Object.keys(e):[]},_viewModeContext:s},t.a=r}}]);","name":"static/js/51.abb5df71.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[51],{\n\n/***/ 3059:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export _viewModeContext */\n/* unused harmony export changeViewMode */\n/* unused harmony export getViewMode */\n/* unused harmony export setAvailableViewModes */\n/* unused harmony export getAvailableViewModes */\n/* harmony import */ var js_appCtxService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);\n// Copyright (c) 2020 Siemens\n/**\n * @module js/viewMode.service\n */let exports={};let _viewModeContext='ViewModeContext';var _availableViewModeContext='supportedViewModes';var _getViewModeContext=function(){var ctx=js_appCtxService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCtx(_viewModeContext);return ctx?ctx:{};};/**\n * Change view mode\n *\n * @param {String} newViewMode - View mode key to change to.\n */let changeViewMode=function(viewMode){var currentCtx=_getViewModeContext();currentCtx[_viewModeContext]=viewMode;js_appCtxService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerCtx(_viewModeContext,currentCtx);};/**\n * Get the current view mode\n *\n * @return {String} The current view mode\n */let getViewMode=function(){return _getViewModeContext()[_viewModeContext];};/**\n * Update which view modes are supported\n *\n * @param {String[]} viewModes - View modes that are available. Converted to Object to make conditions easier.\n */let setAvailableViewModes=function(viewModes){var currentCtx=_getViewModeContext();// Convert array to object - makes declarative conditions simpler\ncurrentCtx[_availableViewModeContext]={};if(lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isArray(viewModes)){lodash__WEBPACK_IMPORTED_MODULE_1___default.a.forEach(viewModes,function(x){currentCtx[_availableViewModeContext][x]={};});}js_appCtxService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateCtx(_viewModeContext,currentCtx);};/**\n * Get the available view modes\n *\n * @return {String[]} The supported view modes\n */let getAvailableViewModes=function(){var viewModes=_getViewModeContext()[_availableViewModeContext];return viewModes?Object.keys(viewModes):[];};exports={changeViewMode,getViewMode,setAvailableViewModes,getAvailableViewModes,_viewModeContext};/* harmony default export */ __webpack_exports__[\"a\"] = (exports);\n\n/***/ })\n\n}]);","inputSourceMap":null}
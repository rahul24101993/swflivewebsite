{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[1819],{2658:function(e,t,n){\"use strict\";n.r(t),n.d(t,\"buildSelectionModel\",(function(){return a})),n.d(t,\"asTrackedList\",(function(){return d})),n.d(t,\"setSelection\",(function(){return u}));var o=n(1),c=n.n(o),l=n(7),i=n(6),s={},r=function(e,t){var n=this;e=e||\"single\",n.mode=e;var o=!1;n.multiSelectEnabled=o;var c=\"none\"!==e,r=\"none\",a=[],d={},u=function(){var e=n.getCanExecuteSelectLoaded(),t=n.getCanExecuteDeselect();d.CanExecuteSelectLoaded===e&&d.CanExecuteDeselect===t||(d.CanExecuteSelectLoaded=e,d.CanExecuteDeselect=t,l.a.publish(\"CanExecuteSelectLoaded\",{}),l.a.publish(\"CanExecuteDeselect\",{}))},S=function(){0!==a.length||o||(n.setMultiSelectionEnabled(!1),r=\"none\")};n.setMode=function(t){e=t,n.mode=e},n.isMultiSelectionEnabled=function(){return o},n.setMultiSelectionEnabled=function(t){\"none\"!==e&&o!==t&&(t&&\"multiple\"!==e?i.a.warn(\"Cannot enter multi select mode when selection model is single select\"):(o=t,n.multiSelectEnabled=o,u()))},n.isSelectionEnabled=function(){return c},n.setSelectionEnabled=function(t){\"none\"!==e&&(c=t)},n.getCanExecuteSelectLoaded=function(){return\"multiple\"===e&&\"all\"!==r},n.getCanExecuteDeselect=function(){return\"multiple\"===e&&\"all\"===r},n.evaluateSelectionStatusSummary=function(e){if(e){if(e.viewModelCollection){var t=e.viewModelCollection.getLoadedViewModelObjects(),o=t.filter((function(e){return!n.isSelected(e)}));r=t.length&&0===o.length?\"all\":a.length>0?\"some\":\"none\"}u()}else i.a.error(\"No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary\")},n.getSelection=function(){return a},n.setSelection=function(e){if(c){var o=s.asTrackedList(e,t);let c=a;a=o,S(),n.syncSelections&&n.syncSelections(c,o)}},n.addToSelection=function(e){if(c){var o=s.asTrackedList(e,t);let c=a;a=a.concat(o.filter((function(e){return-1===a.indexOf(e)}))),n.syncSelections&&n.syncSelections(c,o)}},n.removeFromSelection=function(e){if(c){var o=s.asTrackedList(e,t);let c=a;a=a.filter((function(e){return-1===o.indexOf(e)})),S(),n.syncSelections&&n.syncSelections(c,o)}},n.toggleSelection=function(e){if(c){var o=s.asTrackedList(e,t),l=o.filter((function(e){return-1===a.indexOf(e)})),i=o.filter((function(e){return-1!==a.indexOf(e)}));let c=a;a=a.filter((function(e){return-1===i.indexOf(e)})).concat(l),S(),n.syncSelections&&n.syncSelections(c,o)}},n.getCurrentSelectedCount=function(){return a.length},n.selectNone=function(){n.setSelection([])},n.isSelected=function(e){return-1!==n.getSelectedIndex(e)},n.getSelectedIndex=function(e){var n=t?t(e):e;return a.indexOf(n)},n.getSortedSelection=function(e){return e.filter((function(e){return n.isSelected(e)})).sort((function(e,n){var o=t?t(e):e,c=t?t(n):n;return a.indexOf(o)-a.indexOf(c)}))},n.addOrRemoveSelectedObjects=function(e,t){t?(i.a.warn(\"Please use selectionModel.addToSelection() instead of selectionModel.addOrRemoveSelectedObjects()\"),n.addToSelection(e)):(i.a.warn(\"Please use selectionModel.removeFromSelection() instead of selectionModel.addOrRemoveSelectedObjects()\"),n.removeFromSelection(e))},n.updateSelectedObjects=function(e){i.a.warn(\"Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()\"),n.setSelection(e)},n.selectAll=function(){i.a.error(\"Selection model no longer supports selectAll as it does not contain model object list. Use dataProvider.selectAll() instead\")},n.changeObjectsSelection=function(){i.a.error(\"Selection model no longer supports changeObjectsSelection as it does not contain model object list. Use dataProvider.changeObjectsSelection() instead\")},n.getSelectedObjects=function(){i.a.error(\"Selection model no longer supports getSelectedObjects as it does not contain model object list. Use dataProvider.getSelectedObjects() instead\")},n.updatePreSelectedObjects=function(){i.a.error(\"Selection model no longer supports pre selection\")},n.getPreSelectedObjects=function(){i.a.error(\"Selection model no longer supports pre selection\")}};let a=function(e,t){return new r(e,t)},d=function(e,t){return c.a.isArray(e)||(e=[e]),t?e.map(t):e},u=function(e,t){e.setSelection(t)};s={buildSelectionModel:a,asTrackedList:d,setSelection:u},t.default=s}}]);","name":"static/js/1819.59f2bef5.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[1819],{\n\n/***/ 2658:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buildSelectionModel\", function() { return buildSelectionModel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"asTrackedList\", function() { return asTrackedList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setSelection\", function() { return setSelection; });\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_eventBus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);\n/* harmony import */ var js_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);\n// Copyright (c) 2020 Siemens\n/**\n * Selection model factory\n *\n * @module js/selectionModelFactory\n */// Factory definition\nvar exports={};/**\n * The UwSelectionModel type definition. A selection model contains a list of UIDs that are selected and has other\n * internal state information such as multi select state, selection mode, and selection status\n *\n * @param {String} mode - The initial selection mode. Defaults to 'single' if not provided.\n * @param {Function} tracker - The function used to track selection\n *\n * @class UwSelectionModel\n */var UwSelectionModel=function(mode,tracker){var self=this;/**\n     * The selection mode. Single or multiple. Defaults to single.\n     *\n     * @member mode\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */mode=mode?mode:'single';/**\n     * Read only copy of internal selection mode. Modifications to this will not be reflected in the selection\n     * model.\n     *\n     * @member mode\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     */self.mode=mode;/**\n     * Whether selection model is currently in multi select mode. False initially.\n     *\n     * @member multiSelectEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */var multiSelectEnabled=false;/**\n     * Read only copy of internal multi select state. Modifications to this will not be reflected in the selection\n     * model.\n     *\n     * @member multiSelectEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     */self.multiSelectEnabled=multiSelectEnabled;/**\n     * Whether selection is currently enabled. When false any selection updates will be ignored. True initially.\n     *\n     * @member selectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */var selectionEnabled=mode!=='none';/**\n     * The current selection state. none / some / all\n     *\n     * @member selectionState\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */var selectionState='none';/**\n     * The UIDs that are currently selected.\n     *\n     * @member selected\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */var selected=[];/**\n     * The selection states last time selection state was updated.\n     *\n     * @member lastSelectionState\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */var lastSelectionState={};/**\n     * Utility to fire events that update select all / deselect all command visibility\n     */var notifySelectionState=function(){var canSelectLoaded=self.getCanExecuteSelectLoaded();var canDeselect=self.getCanExecuteDeselect();if(lastSelectionState.CanExecuteSelectLoaded!==canSelectLoaded||lastSelectionState.CanExecuteDeselect!==canDeselect){lastSelectionState.CanExecuteSelectLoaded=canSelectLoaded;lastSelectionState.CanExecuteDeselect=canDeselect;js_eventBus__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].publish('CanExecuteSelectLoaded',{});js_eventBus__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].publish('CanExecuteDeselect',{});}};/**\n     * Utility to exit multi select mode when selection is cleared\n     */var checkResetMultiSelect=function(){// Disable multi select when all selection is cleared\nif(selected.length===0&&!multiSelectEnabled){self.setMultiSelectionEnabled(false);selectionState='none';}};/**\n     * Change selection mode\n     *\n     * @function setMode\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {Boolean} newMode - The new mode\n     */self.setMode=function(newMode){// Toggle internal mode\nmode=newMode;// Update external (read only) mode\nself.mode=mode;};/**\n     * Check if multi select mode is active\n     *\n     * @function isMultiSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether multi select mode is active\n     */self.isMultiSelectionEnabled=function(){return multiSelectEnabled;};/**\n     * Enable / disable multi select mode\n     *\n     * @function setMultiSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {Boolean} newMultiSelectState - The new multi select state\n     */self.setMultiSelectionEnabled=function(newMultiSelectState){if(mode!=='none'&&multiSelectEnabled!==newMultiSelectState){if(newMultiSelectState&&mode!=='multiple'){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].warn('Cannot enter multi select mode when selection model is single select');}else{// Toggle internal multi select state\nmultiSelectEnabled=newMultiSelectState;// Update the external (read only) state\nself.multiSelectEnabled=multiSelectEnabled;// Update select / deselect command visibility\nnotifySelectionState();}}};/**\n     * Check if selection is enabled\n     *\n     * @function isSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether selection is enabled\n     */self.isSelectionEnabled=function(){return selectionEnabled;};/**\n     * Enable / disable selection\n     *\n     * @function setSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {Boolean} isSelectionEnabled - Enable / disable selection state\n     */self.setSelectionEnabled=function(isSelectionEnabled){if(mode!=='none'){selectionEnabled=isSelectionEnabled;}};/**\n     * Determine if select all loaded should be visible\n     *\n     * @function getCanExecuteSelectLoaded\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether select all loaded should be visible\n     */self.getCanExecuteSelectLoaded=function(){// Visible when in multi select mode and not all objects are selected\nreturn mode==='multiple'&&selectionState!=='all';};/**\n     * Determine if clear selection should be visible\n     *\n     * @function getCanExecuteDeselect\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether deselect all should be visible\n     */self.getCanExecuteDeselect=function(){// Visible when in multi select mode and everything is selected\nreturn mode==='multiple'&&selectionState==='all';};/**\n     * Determine the selection state (as it relates to data provider - none selected, some selected, all selected\n     *\n     * @function evaluateSelectionStatusSummary\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {UwDataProvider} dataProvider - The data provider to evaluate the selection state against.\n     */self.evaluateSelectionStatusSummary=function(dataProvider){if(dataProvider){if(dataProvider.viewModelCollection){// Check of there's any objects in the data provider that aren't selected\nvar loadedVmos=dataProvider.viewModelCollection.getLoadedViewModelObjects();var objectsNotSelected=loadedVmos.filter(function(x){return!self.isSelected(x);});// If everything is selected state is 'all'\nif(loadedVmos.length&&objectsNotSelected.length===0){selectionState='all';}else{// Otherwise it's some / none depending on what is selected\nselectionState=selected.length>0?'some':'none';}}// Update select / deselect command visibility\nnotifySelectionState();}else{js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].error('No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary');}};/**\n     * Get the current selection (as UIDs)\n     *\n     * @function getSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {String[]} List of uids that are selected\n     */self.getSelection=function(){return selected;};/**\n     * Set the current selection\n     *\n     * @function setSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to set as selection\n     */self.setSelection=function(newSelection){// If selection is not disabled\nif(selectionEnabled){// Convert input to list of uids\nvar uidList=exports.asTrackedList(newSelection,tracker);// Replace selection\nlet oldSelection=selected;selected=uidList;// Auto exit multi select\ncheckResetMultiSelect();if(self.syncSelections){self.syncSelections(oldSelection,uidList);}}};/**\n     * Add something to the current selection\n     *\n     * @function addToSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to add to selection. Can be single or multiple\n     *            view model objects or uids\n     */self.addToSelection=function(newSelection){// If selection is not disabled\nif(selectionEnabled){// Convert input to list of uids\nvar uidList=exports.asTrackedList(newSelection,tracker);// Add to selection if not already in there\nlet oldSelection=selected;selected=selected.concat(uidList.filter(function(uid){return selected.indexOf(uid)===-1;}));if(self.syncSelections){self.syncSelections(oldSelection,uidList);}}};/**\n     * Remove something from the current selection\n     *\n     * @function removeFromSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to remove from selection. Can be single or\n     *            multiple view model objects or uids\n     */self.removeFromSelection=function(newSelection){// If selection is not disabled\nif(selectionEnabled){// Convert input to list of uids\nvar uidList=exports.asTrackedList(newSelection,tracker);// Remove any uid that is in the list of uids from the selection\nlet oldSelection=selected;selected=selected.filter(function(uid){return uidList.indexOf(uid)===-1;});checkResetMultiSelect();if(self.syncSelections){self.syncSelections(oldSelection,uidList);}}};/**\n     * Toggle the selection of something\n     *\n     * @function toggleSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to toggle the selection for. Can be single or\n     *            multiple view model objects or uids\n     */self.toggleSelection=function(newSelection){// If selection is not disabled\nif(selectionEnabled){// Convert input to list of uids\nvar uidList=exports.asTrackedList(newSelection,tracker);// Get the list of uids that are selected / not selected\nvar uidsNotSelected=uidList.filter(function(uid){return selected.indexOf(uid)===-1;});var uidsSelected=uidList.filter(function(uid){return selected.indexOf(uid)!==-1;});// Remove any objects were selected\nlet oldSelection=selected;selected=selected.filter(function(uid){return uidsSelected.indexOf(uid)===-1;})// And add the objects that were not selected\n.concat(uidsNotSelected);checkResetMultiSelect();if(self.syncSelections){self.syncSelections(oldSelection,uidList);}}};/**\n     * Get the number of items that are selected.\n     *\n     * @function getCurrentSelectedCount\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Number} Number of selected objects\n     */self.getCurrentSelectedCount=function(){return selected.length;};/**\n     * Clear selection. Alias for setSelection([]). Does not fire the data provider event that tables expect.\n     *\n     * @function selectNone\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     */self.selectNone=function(){self.setSelection([]);};/**\n     * Check if the given object is selected\n     *\n     * @function isSelected\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|Object} obj - Obj to check selection state for\n     *\n     * @return {Boolean} Whether the object is selected\n     */self.isSelected=function(obj){return self.getSelectedIndex(obj)!==-1;};/**\n     * Get the index of an object in selected array, if selected\n     *\n     * @function getSelectedIndex\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|Object} obj - Obj to check selection state for\n     *\n     * @return {Number} The index of an object in the selected array, if exists\n     */self.getSelectedIndex=function(obj){var tracked=tracker?tracker(obj):obj;return selected.indexOf(tracked);};/**\n     * Get any objects in the list that are selected and sort them by their order in the selection model.\n     *\n     * @function getSortedSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String[]|Object[]} objList - List of objects to process to get selection\n     *\n     * @return {String[]|Object[]} Filtered and sorted list of objects\n     */self.getSortedSelection=function(objList){// Get the selected objects\nreturn objList.filter(function(x){return self.isSelected(x);})// And sort by the order in selection model\n.sort(function(a,b){var tracked=tracker?tracker(a):a;var tracked2=tracker?tracker(b):b;return selected.indexOf(tracked)-selected.indexOf(tracked2);});};// Old api functions that have moved or are no longer supported Including here in case some usage was missed /\n// added while CP was being promoted Will log an error/warning explaining how to fix\n// Still supported but split to make goal clearer\nself.addOrRemoveSelectedObjects=function(x,add){if(add){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].warn('Please use selectionModel.addToSelection() instead of selectionModel.addOrRemoveSelectedObjects()');self.addToSelection(x);}else{js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].warn('Please use selectionModel.removeFromSelection() instead of selectionModel.addOrRemoveSelectedObjects()');self.removeFromSelection(x);}};// Still supported but renamed to make result clearer\nself.updateSelectedObjects=function(x){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].warn('Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()');self.setSelection(x);};// Not supported, moved to data provider\nself.selectAll=function(){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].error('Selection model no longer supports selectAll as it does not contain model object list. Use dataProvider.selectAll() instead');};self.changeObjectsSelection=function(){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].error('Selection model no longer supports changeObjectsSelection as it does not contain model object list. Use dataProvider.changeObjectsSelection() instead');};self.getSelectedObjects=function(){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].error('Selection model no longer supports getSelectedObjects as it does not contain model object list. Use dataProvider.getSelectedObjects() instead');};// Not supported (intentionally)\nself.updatePreSelectedObjects=function(){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].error('Selection model no longer supports pre selection');};self.getPreSelectedObjects=function(){js_logger__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].error('Selection model no longer supports pre selection');};};/**\n * Create a new selection model to manage selection within a data provider.\n *\n * @param {String} selectionMode - The selection mode to use initially. Defaults to 'single' if not provided.\n * @param {Function} tracker - The function used to track selection.\n *\n * @return {UwSelectionModel} The newly created DeclDataProvider object.\n *\n * @memberof module:js/selectionModelFactory\n */let buildSelectionModel=function(selectionMode,tracker){return new UwSelectionModel(selectionMode,tracker);};/**\n * Utility to ensure input is a list of tracked objects.\n *\n * @param {String|String[]|Object|Object[]} newSelection - The input to convert to a list of tracked objects\n * @param {Object} tracker - (Optional) The 'tracker' for the collection.\n *\n * @return {String|String[]|Object|Object[]} Resulting selection.\n */let asTrackedList=function(newSelection,tracker){// Ensure it is array of some sort\nif(!lodash__WEBPACK_IMPORTED_MODULE_0___default.a.isArray(newSelection)){newSelection=[newSelection];}// Ensure everything in array is tracked\nreturn tracker?newSelection.map(tracker):newSelection;};/**\n * Synchronously execute the 'setSelection' API on the given {UwSelectionModel} object.\n *\n * @param {UwSelectionModel} selectionModel - The {UwSelectionModel} object to set the selection on.\n * @param {String|String[]|Object|Object[]} newSelection - What to set as selection\n */let setSelection=function(selectionModel,newSelection){selectionModel.setSelection(newSelection);};exports={buildSelectionModel,asTrackedList,setSelection};/* harmony default export */ __webpack_exports__[\"default\"] = (exports);\n\n/***/ })\n\n}]);","inputSourceMap":null}
{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[17],{596:function(e,t,i){\"use strict\";i.r(t),i.d(t,\"getCurrentServerVisibility\",(function(){return S})),i.d(t,\"getServerVisibilityLoader\",(function(){return L})),i.d(t,\"getDerivedVisibilityLoader\",(function(){return O})),i.d(t,\"getForcedLoaderCounter\",(function(){return M})),i.d(t,\"checkForRefresh\",(function(){return _})),i.d(t,\"addServerVisibility\",(function(){return A})),i.d(t,\"AwServerVisibilityPopupCommandBar\",(function(){return F})),i.d(t,\"AwServerVisibilityCommandBar\",(function(){return P})),i.d(t,\"AwServerVisibilityToolbar\",(function(){return B})),i.d(t,\"renderCommandBar\",(function(){return D})),i.d(t,\"renderToolbar\",(function(){return k})),i.d(t,\"renderPopupCommandBar\",(function(){return R}));var n=i(60),o=i(952),r=i(43),a=i(957),c=i(3041),d=i.n(c),s=i(39),l=i.n(s),u=i(12),m=i(28),p=i(116),v=i(80),b=i(5),f=i(1),h=i(0),y=i(2);Object(h.h)(\"js/AwServerVisibilityCommandBarService\",(()=>Promise.resolve().then(i.bind(null,596))));const g=new l.a(\"command:tcCommandVisibilityService2\"),w=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];t&&t.uid===m.a.NULL_UID&&(t=null);var n=[],o=i;Object(f.forEach)(e,(function(e){var t=m.a.getObject(e.uid);t?n.push(t):o&&n.push(e)}));var r=[];if(n.length){var a={contextName:\"\",parentSelectionIndex:t?1:-1,selectedObjects:n};r.push(a)}if(t){var c=m.a.getObject(t.uid);c&&r.push({contextName:\"\",parentSelectionIndex:-1,selectedObjects:[t]})}return r},V=function(e){return Object(f.uniq)(e).sort().map((function(e){return{commandCollectionId:\"\",commandId:e}}))},C=\"ActiveXrtPageId\",j=\"UrlParameter_\",x=function(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};var o=[{contextName:\"IsHosted\",contextValue:e?\"true\":\"false\"},{contextName:\"HostType\",contextValue:t}],r=i.concat([\"uid\"]).map((function(e){return Object(f.includes)(e,C)?{contextName:C,contextValue:Object(f.replace)(e,C+\":\",\"\")}:{contextName:j+e,contextValue:n[e]||\"\"}}));return o.concat(r)},I=()=>{const e={};return{get:t=>e[t],set:(t,i)=>e[t]=i,delete:t=>delete e[t],clear:()=>{for(const t in e)delete e[t]}}},S=async(e,t)=>{const{sublocation:{clientScopeURI:i=\"\"},mselected:n,pselected:o,istcgql:a=!1,ViewModeContext:{ViewModeContext:c},aw_hosting_enabled:d,aw_host_type:s,commandContextParameters:l,services:{awCommandVisibilityLoader:m}}=t;if(a){const e=\"TableView\"===c||\"ListView\"===c||\"ImageView\"===c,t=n.map((e=>e.uid)).filter((e=>e)),i=n.length>1;t.length>0&&(e||i)&&p.a.loadObjects(t)}const v=r.a.instance.params;let b=u.default.getCtx(\"pselected\");const f={clientScopeURI:i,selectionInfo:w(n,b,a),commandContextInfo:x(d,s,l,v),commandInfo:V(e)};g(\"Loading visibility commands with given context information\",e,f);const h=(await m.load(f)).map((e=>e.commandId));return e.map((e=>h.includes(e)))},L=(e,t,i,n)=>{let{ctx:o}=e;return o.mselected=t||o.mselected,o.pselected=i||o.pselected,g(\"Previous visibility loader is stale, creating new loader\",o,n),new d.a((async e=>S(e,o)),{cacheMap:I()})},O=(e,t,i)=>new v.a({ctxParameters:[\"ViewModeContext.ViewModeContext\",\"services.awCommandVisibilityLoader\",\"aw_host_type\",\"aw_hosting_enabled\",\"commandContextParameters\",\"istcgql\",\"mselected\",\"pselected\",\"sublocation.clientScopeURI\"],additionalParameters:[t.mselected,t.pselected,i.visibilityLoaderIdCount||0],compute:L}),M=()=>(g(\"Initializing visibility loader counter\"),{count:0,counter:{increment:Object(f.debounce)((e=>e+1),100,{leading:!0,trailing:!1})}}),_=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=arguments.length>2?arguments[2]:void 0,n=arguments.length>3?arguments[3]:void 0;if(!n)return i;const o=t.map((e=>e.uid)),r=e.relatedModified||e.updatedObjects||[];e.relatedModified&&g(\"cdm.relatedModified\",e.relatedModified),e.updatedObjects&&g(\"cdm.updated\",e.updatedObjects);for(const a of r)if(o.includes(a.uid))return g(\"Incrementing counter to force reload of server visibility\",a.uid),{count:n.increment(i)};return{count:i}},A=(e,t)=>{const i={serverVisibilityLoader:O},n={schemaVersion:\"1.0.0\",actions:{checkForRefresh:{actionType:\"JSFunction\",method:\"checkForRefresh\",deps:\"js/AwServerVisibilityCommandBarService\",inputData:{0:\"{{data.eventData}}\",1:\"{{props.mselected}}\",2:\"{{data.visibilityLoaderIdCount}}\",3:\"{{data.visibilityLoaderIdCounter}}\"},outputData:{visibilityLoaderIdCount:\"count\"}},getForcedLoaderCounter:{actionType:\"JSFunction\",method:\"getForcedLoaderCounter\",deps:\"js/AwServerVisibilityCommandBarService\",inputData:{},outputData:{visibilityLoaderIdCount:\"count\",visibilityLoaderIdCounter:\"counter\"}}},ctx:{serverVisibilityLoader:{parser:{method:\"getDerivedVisibilityLoader\",deps:\"js/AwServerVisibilityCommandBarService\"}},mselected:null,pselected:null},onEvent:[{eventId:\"cdm.relatedModified\",action:\"checkForRefresh\",cacheEventData:!0},{eventId:\"cdm.updated\",action:\"checkForRefresh\",cacheEventData:!0}],props:{mselected:{type:\"object\"},pselected:{type:\"viewModelObject\"}},lifecycleHooks:{onMount:\"getForcedLoaderCounter\"},_viewModelId:t,_uniqueViewModelId:t};return Object(b.a)(n,(t=>{const{ctx:i}=t;return Object(y.jsx)(e,{...t,visibilityLoader:i.serverVisibilityLoader})}),void 0,i)},F=A(o.default,\"AwServerVisibilityPopupCommandBarImpl\"),P=A(n.default,\"AwServerVisibilityCommandBarImpl\"),B=A(a.default,\"AwServerVisibilityToolbarImpl\"),D=e=>Object(y.jsx)(P,{...e}),k=e=>Object(y.jsx)(B,{...e}),R=e=>Object(y.jsx)(F,{...e})}}]);","name":"static/js/17.87c5324d.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[17],{\n\n/***/ 596:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCurrentServerVisibility\", function() { return getCurrentServerVisibility; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getServerVisibilityLoader\", function() { return getServerVisibilityLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDerivedVisibilityLoader\", function() { return getDerivedVisibilityLoader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getForcedLoaderCounter\", function() { return getForcedLoaderCounter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"checkForRefresh\", function() { return checkForRefresh; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addServerVisibility\", function() { return addServerVisibility; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AwServerVisibilityPopupCommandBar\", function() { return AwServerVisibilityPopupCommandBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AwServerVisibilityCommandBar\", function() { return AwServerVisibilityCommandBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AwServerVisibilityToolbar\", function() { return AwServerVisibilityToolbar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderCommandBar\", function() { return renderCommandBar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderToolbar\", function() { return renderToolbar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderPopupCommandBar\", function() { return renderPopupCommandBar; });\n/* harmony import */ var viewmodel_AwCommandBarViewModel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60);\n/* harmony import */ var viewmodel_AwPopupCommandBarViewModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(952);\n/* harmony import */ var js_awStateService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43);\n/* harmony import */ var viewmodel_AwToolbarViewModel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(957);\n/* harmony import */ var dataloader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3041);\n/* harmony import */ var dataloader__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(dataloader__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(39);\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var js_appCtxService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12);\n/* harmony import */ var soa_kernel_clientDataModel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28);\n/* harmony import */ var soa_dataManagementService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(116);\n/* harmony import */ var js_derivedContextService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(80);\n/* harmony import */ var js_declViewModelService__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(1);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var js_moduleLoader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(0);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(2);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__);\n// Copyright (c) 2021 Siemens\n/* eslint-disable sonarjs/no-duplicate-string */ /**\n * @module js/AwServerVisibilityCommandBarService\n */Object(js_moduleLoader__WEBPACK_IMPORTED_MODULE_12__[/* registerDynImportEntry */ \"h\"])('js/AwServerVisibilityCommandBarService',()=>Promise.resolve(/* import() */).then(__webpack_require__.bind(null, 596)));const trace=new debug__WEBPACK_IMPORTED_MODULE_5___default.a('command:tcCommandVisibilityService2');/**\n * Get the selection information for SOA input\n *\n * @param {Object[]} selection Currently selected objects\n * @param {Object} parentSelection Parent selection\n * @param {Boolean} istcgql Whether currently in GraphQL sublocation\n * @return {Object[]} Current selection information\n */const getSelectionInfo=function(){let selection=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let parentSelection=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let istcgql=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(parentSelection&&parentSelection.uid===soa_kernel_clientDataModel__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"].NULL_UID){parentSelection=null;}var soaMOs=[];var isTCGQL=istcgql;Object(lodash__WEBPACK_IMPORTED_MODULE_11__[\"forEach\"])(selection,function(selectedObj){var mo=soa_kernel_clientDataModel__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"].getObject(selectedObj.uid);if(mo){soaMOs.push(mo);}else{if(isTCGQL){soaMOs.push(selectedObj);}}});var selInfo=[];if(soaMOs.length){var primarySelection={contextName:'',parentSelectionIndex:parentSelection?1:-1,selectedObjects:soaMOs};selInfo.push(primarySelection);}if(parentSelection){var pmo=soa_kernel_clientDataModel__WEBPACK_IMPORTED_MODULE_7__[/* default */ \"a\"].getObject(parentSelection.uid);if(pmo){selInfo.push({contextName:'',parentSelectionIndex:-1,selectedObjects:[parentSelection]});}}return selInfo;};/**\n * Get the command information for SOA input\n *\n * @param {List<String>} commandIds Specific IDs to include in the call instead of all commands\n * @return {Object[]} Command info\n */const getCommandInfo=function(commandIds){return Object(lodash__WEBPACK_IMPORTED_MODULE_11__[\"uniq\"])(commandIds).sort().map(function(commandId){return{commandCollectionId:'',commandId};});};/**\n * Command context parameter for the current XRT page\n */const XRT_PAGE_ID='ActiveXrtPageId';/**\n * Prefix use for any URL parameters included in command context\n */const URL_PARAMETER_PREFIX='UrlParameter_';/**\n * Get the selection information for SOA input\n *\n * @param {Boolean} aw_hosting_enabled Whether currently in hosted mode\n * @param {String} aw_host_type The current host type\n * @param {String[]} commandContextParameters List of URL parameters to include in command context\n * @param {Object} processedState The current state parameters\n * @return {Object[]} The current command context\n */const getCommandContext=function(){let aw_hosting_enabled=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;let aw_host_type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let commandContextParameters=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let processedState=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var hostingInfo=[{contextName:'IsHosted',contextValue:aw_hosting_enabled?'true':'false'},{contextName:'HostType',contextValue:aw_host_type}];//uid is always included since many teams have used to avoid writing conditions against what is selected vs the opened object\nvar urlInfo=commandContextParameters.concat(['uid']).map(function(param){if(Object(lodash__WEBPACK_IMPORTED_MODULE_11__[\"includes\"])(param,XRT_PAGE_ID)){return{contextName:XRT_PAGE_ID,contextValue:Object(lodash__WEBPACK_IMPORTED_MODULE_11__[\"replace\"])(param,XRT_PAGE_ID+':','')};}return{contextName:URL_PARAMETER_PREFIX+param,contextValue:processedState[param]||''};});return hostingInfo.concat(urlInfo);};/**\n * Create a cache map for the dataloader to use\n *\n * Something in the declarative framework breaks the native JS map, so reimplement with the same API\n *\n * @returns {Object} Plain object matching the API of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n */const getCacheMap=()=>{const cache={};return{get:k=>cache[k],set:(k,v)=>cache[k]=v,delete:k=>delete cache[k],clear:()=>{for(const k in cache){delete cache[k];}}};};/**\n * Get the current server visibility for the list of commands\n *\n * @param {[String]} commandIds Command IDs to load server visibility for\n * @param {Object} ctx The current context for loading\n * @returns {[Boolean]} True/false for each command ID\n */const getCurrentServerVisibility=async(commandIds,ctx)=>{const{sublocation:{clientScopeURI=''},mselected,pselected,istcgql=false,ViewModeContext:{ViewModeContext},aw_hosting_enabled,aw_host_type,commandContextParameters,services:{awCommandVisibilityLoader}}=ctx;//Support for GraphQL based sublocations\nif(istcgql){const isSummaryHidden=ViewModeContext==='TableView'||ViewModeContext==='ListView'||ViewModeContext==='ImageView';const selectObjUids=mselected.map(x=>x.uid).filter(x=>x);const isMultiSelected=mselected.length>1;if(selectObjUids.length>0&&(isSummaryHidden||isMultiSelected)){soa_dataManagementService__WEBPACK_IMPORTED_MODULE_8__[/* default */ \"a\"].loadObjects(selectObjUids);}}const stateParameters=js_awStateService__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"].instance.params;let pselectedIn=js_appCtxService__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getCtx('pselected');const getVisibleCommandsInfo={clientScopeURI,selectionInfo:getSelectionInfo(mselected,pselectedIn,istcgql),commandContextInfo:getCommandContext(aw_hosting_enabled,aw_host_type,commandContextParameters,stateParameters),commandInfo:getCommandInfo(commandIds)};trace('Loading visibility commands with given context information',commandIds,getVisibleCommandsInfo);const visibleCommandsInfo=await awCommandVisibilityLoader.load(getVisibleCommandsInfo);const visibleCommandIds=visibleCommandsInfo.map(x=>x.commandId);return commandIds.map(id=>visibleCommandIds.includes(id));};/**\n * Get a dataloader for command visibility based on the current selection\n *\n * @param {Object} param0 Render context\n * @param {[ViewModelObject]} mselected Selected objects from props\n * @param {ViewModelObject} pselected Parent selection from props\n * @param {Number} visibilityLoaderIdCounter Counter used to force refresh\n * @returns {DataLoader} Loader for command visibility\n */const getServerVisibilityLoader=(_ref,mselected,pselected,visibilityLoaderIdCounter)=>{let{ctx}=_ref;//note: we could simply do { ...ctx, mselected, pselected } but other cosumers of this loader not refactored yet to use props\nctx.mselected=mselected?mselected:ctx.mselected;ctx.pselected=pselected?pselected:ctx.pselected;trace('Previous visibility loader is stale, creating new loader',ctx,visibilityLoaderIdCounter);return new dataloader__WEBPACK_IMPORTED_MODULE_4___default.a(async commandIds=>getCurrentServerVisibility(commandIds,ctx),{cacheMap:getCacheMap()});};/**\n * Get the derived state configuration for visibility loader\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */const getDerivedVisibilityLoader=(vmDef,prop,data)=>{return new js_derivedContextService__WEBPACK_IMPORTED_MODULE_9__[/* DerivedStateResult */ \"a\"]({ctxParameters:['ViewModeContext.ViewModeContext','services.awCommandVisibilityLoader','aw_host_type','aw_hosting_enabled','commandContextParameters','istcgql','mselected','pselected','sublocation.clientScopeURI'],additionalParameters:[prop.mselected,prop.pselected,data.visibilityLoaderIdCount||0],compute:getServerVisibilityLoader});};/**\n * Counter used to force server visibilty reload. Increment method is debounced to avoid\n * multiple calls when a \"cdm.relatedModified\" is happening at the same time as \"cdm.updated\"\n *\n * @returns {Object} Counter object\n */const getForcedLoaderCounter=()=>{trace('Initializing visibility loader counter');return{count:0,counter:{increment:Object(lodash__WEBPACK_IMPORTED_MODULE_11__[\"debounce\"])(x=>{return x+1;},100,{leading:true,trailing:false})}};};/**\n * Check the event data to determine if a server visibility reload is necessary.\n * Will increment counter only if update is required\n *\n * @param {Object} eventData cdm.relatedModified or cdm.updated event data\n * @param {*} mselected The current selected objects\n * @param {*} count The current count\n * @param {*} counter The current counter\n * @returns {Object} Updated counter\n */const checkForRefresh=function(eventData){let mselected=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let count=arguments.length>2?arguments[2]:undefined;let counter=arguments.length>3?arguments[3]:undefined;if(!counter){return count;}const mselectedUids=mselected.map(x=>x.uid);const modifiedObjects=eventData.relatedModified||eventData.updatedObjects||[];if(eventData.relatedModified){trace('cdm.relatedModified',eventData.relatedModified);}if(eventData.updatedObjects){trace('cdm.updated',eventData.updatedObjects);}for(const mo of modifiedObjects){if(mselectedUids.includes(mo.uid)){trace('Incrementing counter to force reload of server visibility',mo.uid);return{count:counter.increment(count)};}}return{count};};/**\n * Wrap the given component with Active Workspace specific server visibility logic\n *\n * addServerVisibility :: ( [DataLoader,...props] => JSX ) => ( [Object,Object,...props] => JSX )\n *\n * @param {Component} ChildComponent The component to wrap\n * @param {String} componentId ID of the component (will appear in dev tools)\n * @returns {Component} The wrapper component\n */const addServerVisibility=(ChildComponent,componentId)=>{const ctxImportObj={serverVisibilityLoader:getDerivedVisibilityLoader};//Generated view model JSON for wrapper component\nconst declViewModelJson={schemaVersion:'1.0.0',actions:{//Refresh action used to force visibility reload without selection change\ncheckForRefresh:{actionType:'JSFunction',method:'checkForRefresh',deps:'js/AwServerVisibilityCommandBarService',inputData:{0:'{{data.eventData}}',1:'{{props.mselected}}',2:'{{data.visibilityLoaderIdCount}}',3:'{{data.visibilityLoaderIdCounter}}'},outputData:{//Increment counter to force recreation of dataloader, causing server visibility reload\nvisibilityLoaderIdCount:'count'}},//Initializes the counter used to \"force\" server visibility reloads\ngetForcedLoaderCounter:{actionType:'JSFunction',method:'getForcedLoaderCounter',deps:'js/AwServerVisibilityCommandBarService',inputData:{},outputData:{visibilityLoaderIdCount:'count',visibilityLoaderIdCounter:'counter'}}},ctx:{//Use derived state to recreate a data loader whenever the relevant data (selection, etc) changes\n//Creation of new data loader triggers reload of server visibility\nserverVisibilityLoader:{parser:{method:'getDerivedVisibilityLoader',deps:'js/AwServerVisibilityCommandBarService'}},mselected:null,pselected:null},onEvent:[{eventId:'cdm.relatedModified',action:'checkForRefresh',cacheEventData:true},{eventId:'cdm.updated',action:'checkForRefresh',cacheEventData:true}],props:{mselected:{type:'object'},pselected:{type:'viewModelObject'}},lifecycleHooks:{onMount:'getForcedLoaderCounter'},_viewModelId:componentId,_uniqueViewModelId:componentId};const render=props=>{const{ctx}=props;return/*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(ChildComponent,{...props,visibilityLoader:ctx.serverVisibilityLoader});};return Object(js_declViewModelService__WEBPACK_IMPORTED_MODULE_10__[/* createComponent */ \"a\"])(declViewModelJson,render,undefined,ctxImportObj);};/**\n * AW specific wrappers of the standard AwCommandBar, AwToolbar, AwPopupCommandBar\n *\n * Instead of a server visibility loader these components will have \"mselected\" and \"pselected\" props. They\n * will use those props to manage server visiiblity. If either one of those props is not provided the values\n * from ctx.mselected and ctx.pselected will be used instead\n */const AwServerVisibilityPopupCommandBar=addServerVisibility(viewmodel_AwPopupCommandBarViewModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"],'AwServerVisibilityPopupCommandBarImpl');const AwServerVisibilityCommandBar=addServerVisibility(viewmodel_AwCommandBarViewModel__WEBPACK_IMPORTED_MODULE_0__[\"default\"],'AwServerVisibilityCommandBarImpl');const AwServerVisibilityToolbar=addServerVisibility(viewmodel_AwToolbarViewModel__WEBPACK_IMPORTED_MODULE_3__[\"default\"],'AwServerVisibilityToolbarImpl');/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */const renderCommandBar=props=>{return/*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(AwServerVisibilityCommandBar,{...props});};/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */const renderToolbar=props=>{return/*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(AwServerVisibilityToolbar,{...props});};/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */const renderPopupCommandBar=props=>{return/*#__PURE__*/Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(AwServerVisibilityPopupCommandBar,{...props});};\n\n/***/ })\n\n}]);","inputSourceMap":null}
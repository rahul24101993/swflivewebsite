{"code":"(this.webpackJsonpcreatingjsxcomponent=this.webpackJsonpcreatingjsxcomponent||[]).push([[61],{343:function(e,t,a){\"use strict\";var r=a(1),n=a.n(r),i=a(6);let l={};l={constants:{gridSystemSize:12,standardWidthFactor:1,standardHeightFactor:1},initRowOrColumn:function(e){var t=e[0].parentElement,a=e[0].className,r=l.getAreaList(t);if(null!==r){t.style.display=\"flex\",r[0].wrapStyle&&(t.style.flexWrap=r[0].wrapStyle),t.style.webkitFlexDirection=r[0].stackDirection,t.style.flexDirection=r[0].stackDirection;var i=-1,s=-1,o=!0,u=l.getFillData(r),c=u.fillSize,f=u.fillAreaCount,d=\"\";f>0&&(d=(c/f).toString(),c=0),n.a.forEach(r,(function(e,t){l.setAreaStyle(e.areaElement,e.sizeType,e.sizeValue,e.color,d,e.alignContent,e.when,e.areaType);var r=e.justify;\"center\"===r&&i<0&&(i=t),(\"right\"===r||\"bottom\"===r)&&s<0&&(s=t,o=!1);var n=e.offsetSizeValue;n>0&&l.addNewElement(a,e.offsetSizeType,n,\"transparent\",\"\",o,e.areaElement,e.areaType)})),c>0&&(d=c.toString(),i>=0?(d=(c/2).toString(),l.addNewElement(a,\"P\",0,\"transparent\",d,!0,r[i].areaElement,r[0].areaType),s>0?l.addNewElement(a,\"P\",0,\"transparent\",d,!0,r[s].areaElement,r[0].areaType):l.addNewElement(a,\"P\",0,\"transparent\",d,!1,e[0],r[0].areaType)):s>=0&&l.addNewElement(a,\"P\",0,\"transparent\",d,!0,r[s].areaElement,r[0].areaType))}},addNewElement:function(e,t,a,r,i,s,o,u){var c=document.createElement(\"div\");n.a.forEach(e.split(\" \"),(function(e){c.classList.add(e)})),l.setAreaStyle(c,t,a,r,i,null,null,u),o.parentNode.insertBefore(c,o),s||c.parentNode.insertBefore(o,c)},setAreaStyle:function(e,t,a,r,n,i,l,s){var o,u=a.toString(),c=\"\";if(\"P\"===t?a>0?(o=u+\" \"+u+\" auto\",u>1&&(c=100*u/12+\"%\")):(o=n+\" \"+n+\" auto\",n>1&&(c=100*n/12+\"%\")):o=\"A\"===t?\"0 0 auto\":\"0 0 \"+a.toString()+\"em\",l&&\"P\"===t){var f=l.split(\",\");f&&f.length&&f.forEach((function(t){var r=t.split(\":\")[0].trim(),n=parseInt(t.split(\":\")[1]);e.className+=\"xlarge\"===r?\" aw-xlarge-\"+n+\" \":\"large\"===r?\" aw-large-\"+n+\" \":\"medium\"===r?\" aw-medium-\"+n+\" \":\"small\"===r?\" aw-small-\"+n+\" \":\"xsmall\"===r?\" aw-xsmall-\"+n+\" \":\" aw-default-\"+a+\" \"}))}else e.style.flex=o,c&&(\"column\"===s?e.style.width=c:e.style.height=c);e.style.backgroundColor=r;var d=\"\";switch(i){case\"start\":d=\"flex-start\";break;case\"center\":d=\"center\";break;case\"end\":d=\"flex-end\"}e.style.alignItems=d},isLastChild:function(e,t){if(!e)return!1;var a=e.children;if(!a)return!1;var r=a.length;return!(r<1)&&a[r-1]===t},getFillData:function(e){var t=e[0].areaType,a=!1,r=l.constants.gridSystemSize,i=0;return n.a.forEach(e,(function(e){\"P\"===e.sizeType&&(r-=e.sizeValue,0===e.sizeValue&&++i),\"P\"===e.offsetSizeType&&(r-=e.offsetSizeValue),e.areaType!==t&&(a=!0)})),a&&l.reportError(\"area found that is defined with mixed rows and columns\"),r<0&&(r=0,l.reportError(\"row or column found defined with proportional areas that exceed grid system size: \"+l.constants.gridSystemSize)),{fillSize:r,fillAreaCount:i}},getAreaList:function(e){if(!e)return null;var t=e.children;if(!t)return null;if(t.length<1)return null;var a=[];return n.a.forEach(t,(function(e){var t=l.getAreaData(e);t&&a.push(t)})),a.length<1?null:a},getAreaData:function(e){var t,a,r=e.classList,n=\"unknown\";if(r.contains(\"aw-layout-row\"))n=\"row\",a=\"column\",t=l.constants.standardHeightFactor;else{if(!r.contains(\"aw-layout-column\"))return null;n=\"column\",a=\"row\",t=l.constants.standardWidthFactor}var i=l.getAreaUserAttributes(e),s=l.getSizeDataFromAttribute(i.size,t);return{areaElement:e,areaType:n,stackDirection:a,sizeType:s.sizeType,sizeValue:s.sizeValue,offsetSizeType:(s=l.getSizeDataFromAttribute(i.offset,t)).sizeType,offsetSizeValue:s.sizeValue,justify:i.justify,color:i.color,alignContent:i.alignContent,when:i.when,wrapStyle:i.wrapStyle}},getAreaUserAttributes:function(e){var t=\"width\",a=\"left\";e.classList.contains(\"aw-layout-row\")&&(t=\"height\",a=\"top\");var r=e.getAttribute(t),n=e.getAttribute(\"offset\"),i=e.getAttribute(\"justify\"),l=e.getAttribute(\"color\"),s=e.getAttribute(\"offset\"),o=e.getAttribute(\"align-content\"),u=e.getAttribute(\"when\"),c=e.getAttribute(\"wrap-style\");return{size:r=r||\"1\",offset:n=n||\"0\",justify:i=i||a,color:l=l||\"\",id:s=s||\"\",alignContent:o=o||\"\",when:u=u||\"\",wrapStyle:c=c||\"\"}},getSizeDataFromAttribute:function(e,t){var a=\"1\",r=\"P\",i=\"0\";e&&(a=e,n.a.endsWith(a,\"%\")&&(a=(12*n.a.trimEnd(a,\"%\")/100).toString()));return a.length<1?a=\"1\":\"fill\"===a?a=\"0\":\"auto\"===a&&(a=\"0\",r=\"A\"),i=parseFloat(a,10),isNaN(i)?(l.reportError(\"invalid row, column or offset size value (\"+e+\") - using default of 1\"),i=1):\"f\"===a[a.length-1]&&(r=\"F\",i*=t),{sizeType:r,sizeValue:i}},reportError:function(e){i.a.warn(\"awRowColumnService:\"+e)}},t.a=l}}]);","name":"static/js/61.a1a63fd1.chunk.js","input":"(this[\"webpackJsonpcreatingjsxcomponent\"] = this[\"webpackJsonpcreatingjsxcomponent\"] || []).push([[61],{\n\n/***/ 343:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export constants */\n/* unused harmony export initRowOrColumn */\n/* unused harmony export addNewElement */\n/* unused harmony export setAreaStyle */\n/* unused harmony export isLastChild */\n/* unused harmony export getFillData */\n/* unused harmony export getAreaList */\n/* unused harmony export getAreaData */\n/* unused harmony export getAreaUserAttributes */\n/* unused harmony export getSizeDataFromAttribute */\n/* unused harmony export reportError */\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);\n// Copyright (c) 2020 Siemens\n/**\n * This service is used by <aw-row> and <aw-column> to initialize the flexbox sizing attributes for all rows and\n * columns within the grid system. And to establish elements to implement offsets, align-contents (start, center, end) and justification options.\n *\n * @module js/awRowColumnService\n */let exports={};// eslint-disable-line no-invalid-this\nlet constants={gridSystemSize:12,standardWidthFactor:1,standardHeightFactor:1};/**\n * Initialize Row or Column - every row or column element calls this method at link time to\n * initialized the flexbox attributes for all siblings. And to add elements to implement offsets\n * align-contents (start, center, end) and justification options.\n *\n * @param {object} scopeElements - The angularJS scope elements used to define the row or\n *            column.\n */let initRowOrColumn=function(scopeElements){// Get the container element used for the given row or column element\nvar containerElement=scopeElements[0].parentElement;var containerClassName=scopeElements[0].className;// Get all sub-area in this row or column\nvar areaList=exports.getAreaList(containerElement);if(areaList===null){return;}// Set parent container element to use flexbox\ncontainerElement.style.display='flex';if(areaList[0].wrapStyle){containerElement.style.flexWrap=areaList[0].wrapStyle;}containerElement.style.webkitFlexDirection=areaList[0].stackDirection;containerElement.style.flexDirection=areaList[0].stackDirection;// Variables used to captured the index for the first center justify\n// and (right or bottom) justify elements\n// Elements to implement the justification will be inserted before these elements\nvar centerJustifyIndex=-1;var farJustifyIndex=-1;// Flag to control relative positions of offset elements\nvar insertBefore=true;// Get the number of fill areas and the amount of space that is\n// NOT defined by proportional values needed to fill the grid system\nvar fillData=exports.getFillData(areaList);var fillValue=fillData.fillSize;var fillAreaCount=fillData.fillAreaCount;var fillAreaString='';// If there are fill areas then all open area will be consumed by them\n// Any justification options will be ignored\nif(fillAreaCount>0){// For multiple fill areas the area is split between them\nfillAreaString=(fillValue/fillAreaCount).toString();fillValue=0;}// Process all items in the current row or column:\n// Set the flexbox size attributes\n// Capture key justification positions\n// Add elements needed to implement offsets\nlodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(areaList,function(area,index){// Set flexbox size attributes for this element\nexports.setAreaStyle(area.areaElement,area.sizeType,area.sizeValue,area.color,fillAreaString,area.alignContent,area.when,area.areaType);// Capture the index of the first center and (right or bottom) elements\nvar justifyOption=area.justify;if(justifyOption==='center'&&centerJustifyIndex<0){centerJustifyIndex=index;}if((justifyOption==='right'||justifyOption==='bottom')&&farJustifyIndex<0){farJustifyIndex=index;insertBefore=false;}// If this element has an offset then create the offset element\nvar offsetValue=area.offsetSizeValue;if(offsetValue>0){exports.addNewElement(containerClassName,area.offsetSizeType,offsetValue,'transparent','',insertBefore,area.areaElement,area.areaType);}});// End process all items\n// Add filler elements to handle justification or to fill in undefined space at the end\nif(fillValue>0){fillAreaString=fillValue.toString();if(centerJustifyIndex>=0){// Two Element are needed to center - so split the remaining space\n// Note that this also handles the case of a center AND a (right or bottom) justification\nfillAreaString=(fillValue/2).toString();// Insert an element before the center justify element\nexports.addNewElement(containerClassName,'P',0,'transparent',fillAreaString,true,areaList[centerJustifyIndex].areaElement,areaList[0].areaType);if(farJustifyIndex>0){// Also insert a new element before the far justify element\nexports.addNewElement(containerClassName,'P',0,'transparent',fillAreaString,true,areaList[farJustifyIndex].areaElement,areaList[0].areaType);}else{// There is no right or bottom justify option - so insert at the end to center\nexports.addNewElement(containerClassName,'P',0,'transparent',fillAreaString,false,scopeElements[0],areaList[0].areaType);}}else if(farJustifyIndex>=0){// Insert one new element before the far justify element\nexports.addNewElement(containerClassName,'P',0,'transparent',fillAreaString,true,areaList[farJustifyIndex].areaElement,areaList[0].areaType);}}};/**\n * Add New Element\n *\n * Add a new element of a given size before or after a given sibling element.\n *\n * @param {string} className - The class name used for all siblings.\n * @param {string} sizeType - \"P\" or \"F\" for proportional or fixed.\n * @param {number} sizeValue - The fixed or proportional size.\n * @param {string} color - Any CSS color value.\n * @param {string} fillAreaString - when sizeValue is zero then this string is used for fill\n *            areas\n * @param {boolean} before - when true insert the new element before the sibling, otherwise\n *            insert after\n * @param {object} sibling - existing sibling element to insert before or after Note: pass in\n *            the DOM element not the JQuery/Angular scoping element\n */let addNewElement=function(className,sizeType,sizeValue,color,fillAreaString,before,sibling,areaType){// Example to get rid of ngModule.element\n/*\n        ngModule.element - it is a $.element, which should be replaced by vallinaJS ( major usage )\n        ngModule.isUndefined - can be vanillaJS\n        ngModule.copy - simple deep copy\n        ngModule.bind - similar like function.bind, not sure why we need this. But should be able to replace.\n        ngModule.noop - similar like null? Anyway we can do equivalent\n        ngModule.forEach - _.forEachngModule.isFunction - _.isFunction\n     */var newElement=document.createElement('div');lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(className.split(' '),function(cName){newElement.classList.add(cName);});exports.setAreaStyle(newElement,sizeType,sizeValue,color,fillAreaString,null,null,areaType);sibling.parentNode.insertBefore(newElement,sibling);if(!before){newElement.parentNode.insertBefore(sibling,newElement);}};/**\n * Set Area Style\n *\n * Set the flexbox size attributes for Fixed and Proportional areas and set the given color.\n *\n * @param {object} areaElement - The row or column to size.\n * @param {string} sizeType - \"P\" or \"F\" for proportional or fixed.\n * @param {number} sizeValue - The fixed or proportional size.\n * @param {string} color - Any CSS color value.\n * @param {string} fillAreaString - when sizeValue is zero then this string is used for fill\n * @param {string} alignContent - \"start\", \"center\" or \"end\" to flex align Items/ Content\n *            areas\n * @param {string} when - \"xlarge: <value>, large: <value>, medium: <value>, small: <value>, xsmall: <value>\"\n *            12 column responsive grid layout\n */let setAreaStyle=function(areaElement,sizeType,sizeValue,color,fillAreaString,alignContent,when,areaType){var valueString=sizeValue.toString();var flexString;var areaPercent='';if(sizeType==='P'){if(sizeValue>0){// This is a normal proportional area\n// note that for IE performance, numeric values should not be used for the flex-basis (3rd value in flexString)\nflexString=valueString+' '+valueString+' auto';if(valueString>1){areaPercent=100*valueString/12+'%';}}else{// This is a fill area - which will also be proportional\nflexString=fillAreaString+' '+fillAreaString+' auto';if(fillAreaString>1){areaPercent=100*fillAreaString/12+'%';}}}else if(sizeType==='A'){flexString='0 0 auto';}else{// sizeType = \"F\"\n// These are areas defined with fixed values\nflexString='0 0 '+sizeValue.toString()+'em';}if(when&&sizeType==='P'){var deviceModeList=when.split(',');if(deviceModeList&&deviceModeList.length){deviceModeList.forEach(function(mode){var deviceMode=mode.split(':')[0].trim();var size=parseInt(mode.split(':')[1]);if(deviceMode==='xlarge'){areaElement.className+=' aw-xlarge-'+size+' ';}else if(deviceMode==='large'){areaElement.className+=' aw-large-'+size+' ';}else if(deviceMode==='medium'){areaElement.className+=' aw-medium-'+size+' ';}else if(deviceMode==='small'){areaElement.className+=' aw-small-'+size+' ';}else if(deviceMode==='xsmall'){areaElement.className+=' aw-xsmall-'+size+' ';}else{areaElement.className+=' aw-default-'+sizeValue+' ';}});}}else{// apply the flex value inline\n// Numeric flex-basis should be avoided.\n// Any change their needs to be carefully tested in IE for performance validation.\nareaElement.style.flex=flexString;if(areaPercent){areaType==='column'?areaElement.style.width=areaPercent:areaElement.style.height=areaPercent;}}// Add the flexbox sizing string and user given color to the current element\nareaElement.style.backgroundColor=color;var alignContentValue='';switch(alignContent){case'start':alignContentValue='flex-start';break;case'center':alignContentValue='center';break;case'end':alignContentValue='flex-end';break;}areaElement.style.alignItems=alignContentValue;};/**\n * Is Last Child\n *\n * Return true if the given child element is the last child element of the given parent element.\n *\n * @param {object} parent - container element\n * @param {object} child - a child of the container element\n *\n * @return {boolean} - true if child is the last child in parent\n */let isLastChild=function(parent,child){if(!parent){return false;}var children=parent.children;if(!children){return false;}var length=children.length;if(length<1){return false;}if(children[length-1]!==child){return false;}return true;};/**\n * Get Fill Data\n *\n * For the given row or column, return the number of areas defined with a size of \"fill\" and the\n * amount of space in the grid system that is not defined by proportional width or height or\n * offset values. This is the space to be filled by the \"fill\" areas or by justification\n * options.\n *\n * Note this method also verifies that all items are rows or columns and if not reports a usage\n * error.\n *\n * @param {array} areaList - Array of structures for all areas in a row or column (see\n *            getAreaData)\n *\n * @return {structure} - { fillSize:fillSize, fillAreaCount:fillAreaCount }\n */let getFillData=function(areaList){// Used to verify that areas are not defined with a mixture of row and column elements\nvar testAreaType=areaList[0].areaType;var typeError=false;var fillSize=exports.constants.gridSystemSize;var fillAreaCount=0;lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(areaList,function(area){// Subtract proportional widths or heights\nif(area.sizeType==='P'){fillSize-=area.sizeValue;// Count Fill Area\n// Fill areas are identified by having a size of zero\nif(area.sizeValue===0){++fillAreaCount;}}// Subtract proportional offsets\nif(area.offsetSizeType==='P'){fillSize-=area.offsetSizeValue;}// Verify all items are rows or columns (not a mixture)\nif(area.areaType!==testAreaType){typeError=true;}});if(typeError){exports.reportError('area found that is defined with mixed rows and columns');}if(fillSize<0){fillSize=0;exports.reportError('row or column found defined with proportional areas that exceed grid system size: '+exports.constants.gridSystemSize);}return{fillSize:fillSize,fillAreaCount:fillAreaCount};};/**\n * Get Area List\n *\n * For the given container element, return the list of sub-areas (rows or columns) that define\n * the layout for the container.\n *\n * If there are sub-elements then return an array of structures (see getAreaData) If there are\n * no sub-elements then return null.\n *\n * @param {object} containerElement - Element containing the list of row or column elements\n *\n * @return {structure} - see getAreaData\n */let getAreaList=function(containerElement){if(!containerElement){return null;}var childList=containerElement.children;if(!childList){return null;}if(childList.length<1){return null;}var areaList=[];lodash__WEBPACK_IMPORTED_MODULE_0___default.a.forEach(childList,function(subArea){var subAreaData=exports.getAreaData(subArea);if(subAreaData){areaList.push(subAreaData);}});if(areaList.length<1){return null;}return areaList;};/**\n * Get Area Data\n *\n * For a given row or column, create and return the data defining the size and options\n *\n * @param {object} areaElement - Row or Column element\n *\n * @return {structure} - { areaElement, areaType, stackDirection, sizeType, sizeValue,\n *         offsetSizeType, offsetSizeValue, justify, color, align-content }\n */let getAreaData=function(areaElement){// Set the area type based on the elements class name\nvar classList=areaElement.classList;var areaType='unknown';var standardSizeFactor;var stackDirection;if(classList.contains('aw-layout-row')){areaType='row';stackDirection='column';// flexbox direction\nstandardSizeFactor=exports.constants.standardHeightFactor;}else if(classList.contains('aw-layout-column')){areaType='column';stackDirection='row';// flexbox direction\nstandardSizeFactor=exports.constants.standardWidthFactor;}else{// Ignore all other elements\nreturn null;}var userAttributes=exports.getAreaUserAttributes(areaElement);var sizeData=exports.getSizeDataFromAttribute(userAttributes.size,standardSizeFactor);var sizeType=sizeData.sizeType;var sizeValue=sizeData.sizeValue;sizeData=exports.getSizeDataFromAttribute(userAttributes.offset,standardSizeFactor);var offsetSizeType=sizeData.sizeType;var offsetSizeValue=sizeData.sizeValue;return{areaElement:areaElement,// row or column element\nareaType:areaType,// \"row\", \"column\"\nstackDirection:stackDirection,// \"row\" means stack horizontally, \"column\" vertically\nsizeType:sizeType,// \"F\" fixed, \"P\" proportional, \"A\" auto\nsizeValue:sizeValue,// value for width or height\noffsetSizeType:offsetSizeType,// \"F\" or \"P\" type of values used for offset\noffsetSizeValue:offsetSizeValue,// width or height of the desired offset\njustify:userAttributes.justify,// \"left\", \"right\", \"top\", \"bottom\", \"center\"\ncolor:userAttributes.color,alignContent:userAttributes.alignContent,// \"start\", \"center\", \"end\"\nwhen:userAttributes.when,// large, medium, small\nwrapStyle:userAttributes.wrapStyle// nowrap, wrap, wrap-reverse\n};// Any CSS color string\n};/**\n * Get Area User Attributes\n *\n * For the given row or column, return a structure containing either the attribute value as\n * defined by the user or the default attribute value for all possible attributes.\n *\n * @param {object} areaElement - Row or Column element\n *\n * @return {structure} - { size, offset, justify, color, id, alignContent }\n */let getAreaUserAttributes=function(areaElement){var sizeAttributeName='width';var defaultJustifyString='left';if(areaElement.classList.contains('aw-layout-row')){sizeAttributeName='height';defaultJustifyString='top';}// Get original attributes as defined in the element by the user\nvar sizeString=areaElement.getAttribute(sizeAttributeName);var offsetString=areaElement.getAttribute('offset');var justifyString=areaElement.getAttribute('justify');var colorString=areaElement.getAttribute('color');var idString=areaElement.getAttribute('offset');var alignContent=areaElement.getAttribute('align-content');var when=areaElement.getAttribute('when');var wrapStyle=areaElement.getAttribute('wrap-style');// Set defaults for attributes that were not defined by the user\nsizeString=sizeString?sizeString:'1';offsetString=offsetString?offsetString:'0';justifyString=justifyString?justifyString:defaultJustifyString;colorString=colorString?colorString:'';idString=idString?idString:'';alignContent=alignContent?alignContent:'';when=when?when:'';wrapStyle=wrapStyle?wrapStyle:'';return{size:sizeString,offset:offsetString,justify:justifyString,color:colorString,id:idString,alignContent:alignContent,when:when,wrapStyle:wrapStyle};};/**\n * Get Size Data From Attribute\n *\n * Given a size attribute string as defined for an <aw-row> or <aw-column> element and used by\n * the width, height, or offset attribute, return the size type and value. Return a structure of\n * the form { sizeType, sizeValue } where: sizeType = \"P\" for proportional values OR \"F\" for\n * fixed values. sizeValue = the integer values times the given standard width or height for\n * fixed values OR the integer value for proportional values\n *\n * @param {string} sizeAttr - The size attribute string as defined by the user\n * @param {number} fixedSizeFactor - Number applied to fixed sized values\n *\n * @return {structure} - { sizeType, sizeValue }\n */let getSizeDataFromAttribute=function(sizeAttr,fixedSizeFactor){var sizeString='1';// Default value\nvar sizeType='P';var sizeValue='0';if(sizeAttr){sizeString=sizeAttr;/**\n         * When size attribute is given as percentage, converting it in such a way to calculate\n         * the number based off proportion of 12\n         */if(lodash__WEBPACK_IMPORTED_MODULE_0___default.a.endsWith(sizeString,'%')){var percentNum=lodash__WEBPACK_IMPORTED_MODULE_0___default.a.trimEnd(sizeString,'%');sizeString=(percentNum*12/100).toString();}}if(sizeString.length<1){sizeString='1';}else if(sizeString==='fill'){sizeString='0';}else if(sizeString==='auto'){sizeString='0';sizeType='A';}sizeValue=parseFloat(sizeString,10);if(isNaN(sizeValue)){exports.reportError('invalid row, column or offset size value ('+sizeAttr+') - using default of 1');sizeValue=1;}else if(sizeString[sizeString.length-1]==='f'){// Fixed Value\nsizeType='F';sizeValue*=fixedSizeFactor;}return{sizeType:sizeType,sizeValue:sizeValue};};/**\n * Report a usage error.\n *\n * @param {string} errorMessage - error to report.\n */let reportError=function(errorMessage){js_logger__WEBPACK_IMPORTED_MODULE_1__[/* default */ \"a\"].warn('awRowColumnService:'+errorMessage);};exports={constants,initRowOrColumn,addNewElement,setAreaStyle,isLastChild,getFillData,getAreaList,getAreaData,getAreaUserAttributes,getSizeDataFromAttribute,reportError};/* harmony default export */ __webpack_exports__[\"a\"] = (exports);\n\n/***/ })\n\n}]);","inputSourceMap":null}
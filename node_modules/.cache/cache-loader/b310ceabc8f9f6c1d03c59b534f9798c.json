{"remainingRequest":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\declLoader.js!C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\commonframe\\src\\viewmodel\\CommonUserSettingsBarViewModel.json","dependencies":[{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\commonframe\\src\\viewmodel\\CommonUserSettingsBarViewModel.json","mtime":1655724739853},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\commonframe\\src\\html\\CommonUserSettingsBarView.html","mtime":1655724707944},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\babel-loader\\lib\\index.js","mtime":1655724676058},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655724666708},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\declLoader.js","mtime":1655724716819}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gQ29tcGlsZXIgcmVzdWx0IHRvIEpTT04gZmlsZQppbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICdqcy9kZWNsVmlld01vZGVsU2VydmljZSc7CmltcG9ydCB7IHJlZ2lzdGVyRHluSW1wb3J0RW50cnkgfSBmcm9tICdqcy9tb2R1bGVMb2FkZXInOwppbXBvcnQgQXdQYXJzZVNlcnZpY2UgZnJvbSAnanMvYXdQYXJzZVNlcnZpY2UnOwppbXBvcnQgQXdGaWx0ZXJTZXJ2aWNlIGZyb20gJ2pzL2F3RmlsdGVyU2VydmljZSc7CmltcG9ydCB7IGdldEZpZWxkIH0gZnJvbSAnanMvdXRpbHMnOwppbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JzsKbGV0IGZpbHRlclNlciA9IEF3RmlsdGVyU2VydmljZS5pbnN0YW5jZTsKaW1wb3J0IEF3QWR2YW5jZWRCYXIgZnJvbSAndmlld21vZGVsL0F3QWR2YW5jZWRCYXJWaWV3TW9kZWwnOwppbXBvcnQgQXdGbGV4Um93IGZyb20gJ3ZpZXdtb2RlbC9Bd0ZsZXhSb3dWaWV3TW9kZWwnOwppbXBvcnQgQXdIZWFkZXJDb250ZXh0IGZyb20gJ3ZpZXdtb2RlbC9Bd0hlYWRlckNvbnRleHRWaWV3TW9kZWwnOwppbXBvcnQgQXdJY29uQnV0dG9uIGZyb20gJ3ZpZXdtb2RlbC9Bd0ljb25CdXR0b25WaWV3TW9kZWwnOwppbXBvcnQgeyBFeGlzdFdoZW4sQXdDbGFzcyxWaXNpYmxlV2hlbiB9IGZyb20gJ2pzL2hvY0NvbGxlY3Rpb24nOwpjb25zdCBEaXZFeGlzdFdoZW5Bd0NsYXNzID0gQXdDbGFzcyhFeGlzdFdoZW4oJ2RpdicpKTsKY29uc3QgQXdIZWFkZXJDb250ZXh0VmlzaWJsZVdoZW4gPSBWaXNpYmxlV2hlbihBd0hlYWRlckNvbnRleHQpOwoKLyoKcmVuZGVyIGZ1bmN0aW9uCiovCmltcG9ydCB7IGNvbW1vblVzZXJTZXR0aW5nc1JlbmRlckZ1bmN0aW9uIH0gZnJvbSAnanMvQ29tbW9uVXNlclNldHRpbmdzQmFyU2VydmljZSc7CgoKLyoKY3R4IGltcG9ydHMKKi8KCmNvbnN0IGN0eEltcG9ydE9iaiA9IHsgIH07CgoKLyoKZHluYW1pYyBpbXBvcnQKICovCnJlZ2lzdGVyRHluSW1wb3J0RW50cnkoJ2pzL0NvbW1vblVzZXJTZXR0aW5nc0JhclNlcnZpY2UnLCAoKSA9PiBpbXBvcnQoJ2pzL0NvbW1vblVzZXJTZXR0aW5nc0JhclNlcnZpY2UnKSk7OwoKLyoKdmlldyBtb2RlbAogKi8KY29uc3QgZGVjbFZpZXdNb2RlbEpzb24gPSB7CiAgICAic2NoZW1hVmVyc2lvbiI6ICIxLjAuMCIsCiAgICAiZGF0YSI6IHsKICAgICAgICAiY2xvc2UiOiB7CiAgICAgICAgICAgICJhY3Rpb24iOiAidG9nZ2xlU2hvd1VzZXJTZXR0aW5nc0JhclZhbHVlIiwKICAgICAgICAgICAgImljb25OYW1lIjogIkNsb3NlIiwKICAgICAgICAgICAgInRvb2x0aXAiOiAie3tpMThuLkNPTU1PTl9VU0VSX1NFVFRJTkdfQkFSX0NMT1NFfX0iCiAgICAgICAgfQogICAgfSwKICAgICJhY3Rpb25zIjogewogICAgICAgICJyZW5kZXIiOiB7CiAgICAgICAgICAgICJtZXRob2QiOiAiY29tbW9uVXNlclNldHRpbmdzUmVuZGVyRnVuY3Rpb24iLAogICAgICAgICAgICAiZGVwcyI6ICJqcy9Db21tb25Vc2VyU2V0dGluZ3NCYXJTZXJ2aWNlIgogICAgICAgIH0sCiAgICAgICAgInRvZ2dsZVNob3dVc2VyU2V0dGluZ3NCYXJWYWx1ZSI6IHsKICAgICAgICAgICAgImFjdGlvblR5cGUiOiAibW9kaWZ5Q3R4IiwKICAgICAgICAgICAgImlucHV0RGF0YSI6IHsKICAgICAgICAgICAgICAgICJtZXRob2RUeXBlIjogInVwZGF0ZSIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICJzaG93VXNlclNldHRpbmdzQmFyIiwKICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICJ7eyEoY3R4LnNob3dVc2VyU2V0dGluZ3NCYXI9PSd0cnVlJyl9fSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAiY29uZGl0aW9ucyI6IHsKICAgICAgICAiaXNVc2VyU2V0dGluZ3NCYXJWaXNpYmxlIjogewogICAgICAgICAgICAiZXhwcmVzc2lvbiI6ICJjdHguc2hvd1VzZXJTZXR0aW5nc0JhciA9PSAndHJ1ZSciCiAgICAgICAgfQogICAgfSwKICAgICJpMThuIjogewogICAgICAgICJDT01NT05fVVNFUl9TRVRUSU5HX0JBUl9DTE9TRSI6IFsKICAgICAgICAgICAgImNvbW1vbkZyYW1lTWVzc2FnZXMiCiAgICAgICAgXQogICAgfSwKICAgICJjdHgiOiB7CiAgICAgICAgInNob3dVc2VyU2V0dGluZ3NCYXIiOiBudWxsCiAgICB9LAogICAgImxpZmVjeWNsZUhvb2tzIjogewogICAgICAgICJyZW5kZXIiOiAicmVuZGVyIgogICAgfSwKICAgICJfdmlld01vZGVsSWQiOiAiQ29tbW9uVXNlclNldHRpbmdzQmFyIiwKICAgICJfdW5pcXVlVmlld01vZGVsSWQiOiAiQ29tbW9uVXNlclNldHRpbmdzQmFyIgp9OwoKLyoKPGZvb3Rlcj4KICAgIDxkaXYKICAgIGV4aXN0LXdoZW49ImNvbmRpdGlvbnMuaXNVc2VyU2V0dGluZ3NCYXJWaXNpYmxlIgogICAgICAgIGF3LWNsYXNzPSJbeyAnYXctcm9sbC1vdXQnOiBjb25kaXRpb25zLmlzVXNlclNldHRpbmdzQmFyVmlzaWJsZSB9LCB7ICdhdy1yb2xsLWluJzogIWNvbmRpdGlvbnMuaXNVc2VyU2V0dGluZ3NCYXJWaXNpYmxlIH1dIgogICAgICAgIGNsYXNzPSJhdy11c2VyLXNldHRpbmdzLWJhciIKICAgID4KICAgICAgICA8YXctYWR2YW5jZWQtYmFyIHR5cGU9IkZPT1RFUiI+CiAgICAgICAgICAgIDxhdy1mbGV4LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduLWNvbnRlbnQ9ImNlbnRlciI+CiAgICAgICAgICAgICAgICA8YXctaGVhZGVyLWNvbnRleHQKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlLXdoZW49ImN0eC5zaG93VXNlclNldHRpbmdzQmFyIgogICAgICAgICAgICAgICAgICAgIGFsaWdubWVudD0iSE9SSVpPTlRBTCIKICAgICAgICAgICAgICAgID48L2F3LWhlYWRlci1jb250ZXh0PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3ctdXNlclNldHRpbmdzLWNsb3NlQnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICA8YXctaWNvbi1idXR0b24gY29tbWFuZD0iZmllbGRzLmNsb3NlIj48L2F3LWljb24tYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvYXctZmxleC1yb3c+CiAgICAgICAgPC9hdy1hZHZhbmNlZC1iYXI+CiAgICA8L2Rpdj4KPC9mb290ZXI+CgoqLwpjb25zdCByZW5kZXJGbiA9KHByb3BzKT0+IHsKICAgIGxldCBzdWJQYW5lbENvbnRleHQgPSBwcm9wcy5zdWJQYW5lbENvbnRleHQgOwogICAgbGV0IHsgdmlld01vZGVsOiB7IGRhdGEsIGRhdGFQcm92aWRlcnMsIGRpc3BhdGNoLCBjb25kaXRpb25zLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzICB9LCBncmlkcywgY3R4LCBhY3Rpb25zLCBmaWVsZHMsIG1lc3NhZ2VzLCBpMThuLCBmb3JtUHJvcCwgdmlld1BhdGggIH0gPSBwcm9wczsKICAgIGRhdGEgPSB7Li4uZGF0YSwgZGF0YVByb3ZpZGVyc307CiAgICBpZiggc3ViUGFuZWxDb250ZXh0ICYmIHN1YlBhbmVsQ29udGV4dC5maWVsZHMgKXsKICAgICAgICBmaWVsZHMgPSB7IC4uLmZpZWxkcywgLi4uc3ViUGFuZWxDb250ZXh0LmZpZWxkcyB9OwogICAgfQogICAgbGV0ICRpbmRleCA9IG51bGw7CiAgICByZXR1cm4gKAogICAgICAgICAgICA8Zm9vdGVyPgogICAgICAgIDxEaXZFeGlzdFdoZW5Bd0NsYXNzIGNsYXNzTmFtZT0iYXctdXNlci1zZXR0aW5ncy1iYXIiIGV4aXN0V2hlbj17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICJjb25kaXRpb25zLmlzVXNlclNldHRpbmdzQmFyVmlzaWJsZSIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9IGF3Q2xhc3M9e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAiW3sgJ2F3LXJvbGwtb3V0JzogY29uZGl0aW9ucy5pc1VzZXJTZXR0aW5nc0JhclZpc2libGUgfSwgeyAnYXctcm9sbC1pbic6ICFjb25kaXRpb25zLmlzVXNlclNldHRpbmdzQmFyVmlzaWJsZSB9XSIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9PgogICAgICAgICAgICA8QXdBZHZhbmNlZEJhciB0eXBlPSJGT09URVIiPgogICAgICAgICAgICAgICAgPEF3RmxleFJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduQ29udGVudD0iY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8QXdIZWFkZXJDb250ZXh0VmlzaWJsZVdoZW4gYWxpZ25tZW50PSJIT1JJWk9OVEFMIiB2aXNpYmxlV2hlbj17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICJjdHguc2hvd1VzZXJTZXR0aW5nc0JhciIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9PgogICAgICAgICAgICAgICAgICAgIDwvQXdIZWFkZXJDb250ZXh0VmlzaWJsZVdoZW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9InN3LXVzZXJTZXR0aW5ncy1jbG9zZUJ1dHRvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxBd0ljb25CdXR0b24gey4uLmdldEZpZWxkKCJmaWVsZHMuY2xvc2UiLCBmaWVsZHMsICRpbmRleCwgbnVsbCwgbnVsbCApfT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9Bd0ljb25CdXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L0F3RmxleFJvdz4KICAgICAgICAgICAgPC9Bd0FkdmFuY2VkQmFyPgogICAgICAgIDwvRGl2RXhpc3RXaGVuQXdDbGFzcz4KICAgIDwvZm9vdGVyPgogICAgKQp9OwoKCi8qCmRlZmluZSBjb21wb25lbnQKKi8KY29uc3QgQ29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50KCBkZWNsVmlld01vZGVsSnNvbiwgY29tbW9uVXNlclNldHRpbmdzUmVuZGVyRnVuY3Rpb24sIHVuZGVmaW5lZCwgY3R4SW1wb3J0T2JqICk7CgpleHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7"}]}
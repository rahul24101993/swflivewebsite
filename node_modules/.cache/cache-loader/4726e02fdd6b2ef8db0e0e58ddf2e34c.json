{"remainingRequest":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\soaServiceLoader.js!C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\kernel\\src\\js\\soa\\kernel\\soaService.js","dependencies":[{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\kernel\\src\\js\\soa\\kernel\\soaService.js","mtime":1655724734704},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\babel-loader\\lib\\index.js","mtime":1655724676058},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\babel-loader\\lib\\index.js","mtime":1655724676058},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\babel-loader\\lib\\index.js","mtime":1655724676058},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655724666708},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\soaServiceLoader.js","mtime":1655724719795}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\declLoader.js!C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\pagelevelcomponents\\src\\viewmodel\\AwDefaultLocationViewModel.json","dependencies":[{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\pagelevelcomponents\\src\\viewmodel\\AwDefaultLocationViewModel.json","mtime":1655724737395},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\pagelevelcomponents\\src\\html\\AwDefaultLocationView.html","mtime":1655724692074},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\babel-loader\\lib\\index.js","mtime":1655724676058},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655724666708},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\declLoader.js","mtime":1655724716819}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\declLoader.js!C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\pagelevelcomponents\\src\\viewmodel\\AwStandardSublocationInternalViewModel.json","dependencies":[{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\pagelevelcomponents\\src\\viewmodel\\AwStandardSublocationInternalViewModel.json","mtime":1655724738968},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\core\\src\\pagelevelcomponents\\src\\html\\AwStandardSublocationInternalView.html","mtime":1655724705113},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\babel-loader\\lib\\index.js","mtime":1655724676058},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655724666708},{"path":"C:\\Users\\rahukl57\\Desktop\\SWF\\CreatingOwnComponentUsingJsx\\node_modules\\@swf\\tooling\\rewired\\declLoader.js","mtime":1655724716819}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gQ29tcGlsZXIgcmVzdWx0IHRvIEpTT04gZmlsZQppbXBvcnQgeyBjcmVhdGVDb21wb25lbnQgfSBmcm9tICdqcy9kZWNsVmlld01vZGVsU2VydmljZSc7CmltcG9ydCB7IHJlZ2lzdGVyRHluSW1wb3J0RW50cnkgfSBmcm9tICdqcy9tb2R1bGVMb2FkZXInOwppbXBvcnQgQXdQYXJzZVNlcnZpY2UgZnJvbSAnanMvYXdQYXJzZVNlcnZpY2UnOwppbXBvcnQgQXdGaWx0ZXJTZXJ2aWNlIGZyb20gJ2pzL2F3RmlsdGVyU2VydmljZSc7CmltcG9ydCB7IGdldEZpZWxkIH0gZnJvbSAnanMvdXRpbHMnOwppbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JzsKbGV0IGZpbHRlclNlciA9IEF3RmlsdGVyU2VydmljZS5pbnN0YW5jZTsKaW1wb3J0IEF3QmFzZVN1YmxvY2F0aW9uMiBmcm9tICd2aWV3bW9kZWwvQXdCYXNlU3VibG9jYXRpb24yVmlld01vZGVsJzsKaW1wb3J0IEF3U2lkZW5hdiBmcm9tICd2aWV3bW9kZWwvQXdTaWRlbmF2Vmlld01vZGVsJzsKaW1wb3J0IEF3U3RhbmRhcmRXb3JrYXJlYSBmcm9tICd2aWV3bW9kZWwvQXdTdGFuZGFyZFdvcmthcmVhVmlld01vZGVsJzsKaW1wb3J0IEF3U2VydmVyVmlzaWJpbGl0eUNvbW1hbmRCYXIgZnJvbSAndmlld21vZGVsL0F3U2VydmVyVmlzaWJpbGl0eUNvbW1hbmRCYXJWaWV3TW9kZWwnOwppbXBvcnQgQXdGb290ZXIgZnJvbSAndmlld21vZGVsL0F3Rm9vdGVyVmlld01vZGVsJzsKaW1wb3J0IHsgRXhpc3RXaGVuLEF3Q2xhc3MgfSBmcm9tICdqcy9ob2NDb2xsZWN0aW9uJzsKY29uc3QgQXdCYXNlU3VibG9jYXRpb24yRXhpc3RXaGVuID0gRXhpc3RXaGVuKEF3QmFzZVN1YmxvY2F0aW9uMik7CmNvbnN0IEF3U2lkZW5hdkV4aXN0V2hlbiA9IEV4aXN0V2hlbihBd1NpZGVuYXYpOwpjb25zdCBNYWluQXdDbGFzcyA9IEF3Q2xhc3MoJ21haW4nKTsKY29uc3QgTmF2RXhpc3RXaGVuID0gRXhpc3RXaGVuKCduYXYnKTsKY29uc3QgQXdGb290ZXJFeGlzdFdoZW4gPSBFeGlzdFdoZW4oQXdGb290ZXIpOwoKCgovKgpjdHggaW1wb3J0cwoqLwppbXBvcnQgeyBnZXRTdGRDb250ZXh0IGFzIGNvbnRleHQgfSBmcm9tICdqcy9hd0RlZmF1bHRTdWJsb2NhdGlvblNlcnZpY2UnOwpjb25zdCBjdHhJbXBvcnRPYmogPSB7IGNvbnRleHQgfTsKCgovKgpkeW5hbWljIGltcG9ydAogKi8KcmVnaXN0ZXJEeW5JbXBvcnRFbnRyeSgnanMvQXdTdGFuZGFyZFN1YmxvY2F0aW9uU2VydmljZScsICgpID0+IGltcG9ydCgnanMvQXdTdGFuZGFyZFN1YmxvY2F0aW9uU2VydmljZScpKTsKcmVnaXN0ZXJEeW5JbXBvcnRFbnRyeSgnanMvYXdEZWZhdWx0U3VibG9jYXRpb25TZXJ2aWNlJywgKCkgPT4gaW1wb3J0KCdqcy9hd0RlZmF1bHRTdWJsb2NhdGlvblNlcnZpY2UnKSk7OwoKLyoKdmlldyBtb2RlbAogKi8KY29uc3QgZGVjbFZpZXdNb2RlbEpzb24gPSB7CiAgICAic2NoZW1hVmVyc2lvbiI6ICIxLjAuMCIsCiAgICAiZGF0YSI6IHsKICAgICAgICAic2lkZU5hdkxlZnREYXRhIjogewogICAgICAgICAgICAic2xpZGUiOiAiRkxPQVQiLAogICAgICAgICAgICAiZGlyZWN0aW9uIjogIlJJR0hUX1RPX0xFRlQiLAogICAgICAgICAgICAiYW5pbWF0aW9uIjogZmFsc2UsCiAgICAgICAgICAgICJ3aWR0aCI6ICJTVEFOREFSRCIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiRlVMTCIKICAgICAgICB9LAogICAgICAgICJzaWRlTmF2UmlnaHREYXRhIjogewogICAgICAgICAgICAic2xpZGUiOiAiUFVTSCIsCiAgICAgICAgICAgICJkaXJlY3Rpb24iOiAiTEVGVF9UT19SSUdIVCIsCiAgICAgICAgICAgICJhbmltYXRpb24iOiBmYWxzZSwKICAgICAgICAgICAgIndpZHRoIjogIlNUQU5EQVJEIiwKICAgICAgICAgICAgImhlaWdodCI6ICJGVUxMIgogICAgICAgIH0KICAgIH0sCiAgICAicHJvcHMiOiB7CiAgICAgICAgInByb3ZpZGVyIjogewogICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAiYmFzZS1zZWxlY3Rpb24iOiB7CiAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIKICAgICAgICB9LAogICAgICAgICJzZWFyY2gtc3RhdGUiOiB7CiAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIKICAgICAgICB9LAogICAgICAgICJzdWItcGFuZWwtY29udGV4dCI6IHsKICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IgogICAgICAgIH0sCiAgICAgICAgInNlbGVjdGlvbi1tb2RlbCI6IHsKICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IgogICAgICAgIH0sCiAgICAgICAgInNlbGVjdGlvbi1kYXRhIjogewogICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiCiAgICAgICAgfSwKICAgICAgICAic3VibG9jYXRpb24tc3RhdGUiOiB7CiAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIKICAgICAgICB9CiAgICB9LAogICAgImFjdGlvbnMiOiB7CiAgICAgICAgImluaXRpYWxpemVTdGFuZGFyZFN1YmxvY2F0aW9uIjogewogICAgICAgICAgICAiYWN0aW9uVHlwZSI6ICJKU0Z1bmN0aW9uIiwKICAgICAgICAgICAgIm1ldGhvZCI6ICJpbml0aWFsaXplU3RhbmRhcmRTdWJsb2NhdGlvbiIsCiAgICAgICAgICAgICJpbnB1dERhdGEiOiB7CiAgICAgICAgICAgICAgICAicHJvdmlkZXIiOiAie3twcm9wcy5wcm92aWRlcn19IgogICAgICAgICAgICB9LAogICAgICAgICAgICAib3V0cHV0RGF0YSI6IHsKICAgICAgICAgICAgICAgICJzdWJsb2NhdGlvblN0eWxlcyI6ICIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXBzIjogImpzL0F3U3RhbmRhcmRTdWJsb2NhdGlvblNlcnZpY2UiCiAgICAgICAgfSwKICAgICAgICAiY2xlYW5VcCI6IHsKICAgICAgICAgICAgImFjdGlvblR5cGUiOiAiSlNGdW5jdGlvbiIsCiAgICAgICAgICAgICJtZXRob2QiOiAiY2xlYW5VcCIsCiAgICAgICAgICAgICJkZXBzIjogImpzL2F3RGVmYXVsdFN1YmxvY2F0aW9uU2VydmljZSIKICAgICAgICB9CiAgICB9LAogICAgImN0eCI6IHsKICAgICAgICAibXNlbGVjdGVkIjogbnVsbCwKICAgICAgICAicHNlbGVjdGVkIjogbnVsbCwKICAgICAgICAiY29udGV4dCI6IHsKICAgICAgICAgICAgInBhcnNlciI6IHsKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0U3RkQ29udGV4dCIsCiAgICAgICAgICAgICAgICAiZGVwcyI6ICJqcy9hd0RlZmF1bHRTdWJsb2NhdGlvblNlcnZpY2UiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgImxpZmVjeWNsZUhvb2tzIjogewogICAgICAgICJvbk1vdW50IjogImluaXRpYWxpemVTdGFuZGFyZFN1YmxvY2F0aW9uIiwKICAgICAgICAib25Vbm1vdW50IjogImNsZWFuVXAiCiAgICB9LAogICAgImkxOG4iOiB7CiAgICAgICAgInJpZ2h0SGFuZFRvb2xCYXIiOiBbCiAgICAgICAgICAgICJVSUVsZW1lbnRzTWVzc2FnZXMiCiAgICAgICAgXQogICAgfSwKICAgICJfdmlld01vZGVsSWQiOiAiQXdTdGFuZGFyZFN1YmxvY2F0aW9uSW50ZXJuYWwiLAogICAgIl91bmlxdWVWaWV3TW9kZWxJZCI6ICJBd1N0YW5kYXJkU3VibG9jYXRpb25JbnRlcm5hbCIKfTsKCi8qCjxhdy1iYXNlLXN1YmxvY2F0aW9uMiBleGlzdC13aGVuPSJwcm9wcy5wcm92aWRlciIgcHJvdmlkZXI9InByb3BzLnByb3ZpZGVyIiBiYXNlLXNlbGVjdGlvbj0icHJvcHMuYmFzZVNlbGVjdGlvbiIKICAgIHNlbGVjdGlvbi1kYXRhPSJwcm9wcy5zZWxlY3Rpb25EYXRhIj4KICAgIDxkaXYgY2xhc3M9J2F3LWxheW91dC1kZWZhdWx0U3VibG9jYXRpb24gYXctbGF5b3V0LWZsZXhDb2x1bW4nPgogICAgICAgIDxkaXYgY2xhc3M9J2F3LWxheW91dC1zdWJsb2NhdGlvbkNvbnRhaW5lcic+CiAgICAgICAgICAgIDwhLS0gcGFzcyBzdGF0ZSBhcyBhIHN1YnBhbmVsY29udGV4dCB0byBhdy1zaWRlbmF2LiAiLi4ucHJvcHMuc2VhcmNoU3RhdGUiIGlzIGtlcHQgdGVtcCBhbmQgdG8gYXZvaWQgYnJlYWtpbmcgY2hhbmdlLiAtLT4KICAgICAgICAgICAgPCEtLSBPbmNlIEFXQyBjaGFuZ2VzIGFyZSBkb25lLCB0aGlzIHdvdWxkIGJlIHJlbW92ZWQtLT4KICAgICAgICAgICAgPGF3LXNpZGVuYXYgaWQ9J2F3X25hdmlnYXRpb24nIGNvbmZpZz0iZGF0YS5zaWRlTmF2UmlnaHREYXRhIgogICAgICAgICAgICAgICAgc3ViLXBhbmVsLWNvbnRleHQ9J3suLi5wcm9wcy5zdWJQYW5lbENvbnRleHQsIHNlbGVjdGlvbkRhdGE6cHJvcHMuc2VsZWN0aW9uRGF0YSwgYmFzZVNlbGVjdGlvbjogcHJvcHMuYmFzZVNlbGVjdGlvbiwgc2VhcmNoU3RhdGU6IHByb3BzLnNlYXJjaFN0YXRlLCBwYWdlQ29udGV4dDogey4uLnByb3BzLnN1YlBhbmVsQ29udGV4dC5wYWdlQ29udGV4dCwgc2Vjb25kYXJ5QWN0aXZlVGFiSWQ6IHByb3BzLnN1YmxvY2F0aW9uU3RhdGUuc2Vjb25kYXJ5QWN0aXZlVGFiSWQgIT09ICIiID8gcHJvcHMuc3VibG9jYXRpb25TdGF0ZS5zZWNvbmRhcnlBY3RpdmVUYWJJZCA6IHVuZGVmaW5lZCwgc3VibG9jYXRpb25TdGF0ZTogcHJvcHMuc3VibG9jYXRpb25TdGF0ZX19JwogICAgICAgICAgICAgICAgZXhpc3Qtd2hlbj0nIXByb3BzLnByb3ZpZGVyLmF3U3ViTG9jYXRpb25QcmVmLmhpZGVOYXZpZ2F0aW9uQXJlYSc+CiAgICAgICAgICAgIDwvYXctc2lkZW5hdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXctbGF5b3V0LXdvcmthcmVhJz4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2F3LWxheW91dC1mbGV4Ym94Jz4KICAgICAgICAgICAgICAgICAgICA8bWFpbgogICAgICAgICAgICAgICAgICAgICAgICBhdy1jbGFzcz0iWydhdy1sYXlvdXQtd29ya2FyZWFNYWluJyx7J3ZlcnRpY2FsJzogZGF0YS5zdWJsb2NhdGlvblN0eWxlcy52ZXJ0aWNhbH0seyd2ZXJ0aWNhbC1yZXZlcnNlJzogZGF0YS5zdWJsb2NhdGlvblN0eWxlcy52ZXJ0aWNhbFJldmVyc2V9LHsnaG9yaXpvbnRhbC1yZXZlcnNlJzogZGF0YS5zdWJsb2NhdGlvblN0eWxlcy5ob3Jpem9udGFsUmV2ZXJzZX1dIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGF3LXN0YW5kYXJkLXdvcmthcmVhIGJhc2Utc2VsZWN0aW9uPSJwcm9wcy5iYXNlU2VsZWN0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLW1vZGVsPSJwcm9wcy5zZWxlY3Rpb25Nb2RlbCIgc2VsZWN0aW9uLWRhdGE9InByb3BzLnNlbGVjdGlvbkRhdGEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWItcGFuZWwtY29udGV4dD0ncHJvcHMuY3R4LmNvbnRleHRbMF0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2gtc3RhdGU9InByb3BzLnNlYXJjaFN0YXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMtaG9yaXpvbnRhbC1vcmllbnRhdGlvbj0icHJvcHMucHJvdmlkZXIuYXdTdWJMb2NhdGlvblByZWYub3JpZW50YXRpb249PT0nSE9SSVpPTlRBTCciPgogICAgICAgICAgICAgICAgICAgICAgICA8L2F3LXN0YW5kYXJkLXdvcmthcmVhPgogICAgICAgICAgICAgICAgICAgIDwvbWFpbj4KICAgICAgICAgICAgICAgICAgICA8YXctc2lkZW5hdiBpZD0nYXdfdG9vbHNBbmRJbmZvJyBjb25maWc9ImRhdGEuc2lkZU5hdkxlZnREYXRhIgogICAgICAgICAgICAgICAgICAgICAgICBzdWItcGFuZWwtY29udGV4dD0ney4uLnByb3BzLnN1YlBhbmVsQ29udGV4dCxzZWxlY3Rpb25EYXRhOiBwcm9wcy5zZWxlY3Rpb25EYXRhLCBiYXNlU2VsZWN0aW9uOiBwcm9wcy5iYXNlU2VsZWN0aW9uLCBzZWFyY2hTdGF0ZTogcHJvcHMuc2VhcmNoU3RhdGUsIHBhZ2VDb250ZXh0OnsuLi5wcm9wcy5zdWJQYW5lbENvbnRleHQucGFnZUNvbnRleHQsIHNlY29uZGFyeUFjdGl2ZVRhYklkOiBwcm9wcy5zdWJsb2NhdGlvblN0YXRlLnNlY29uZGFyeUFjdGl2ZVRhYklkICE9PSAiIiA/IHByb3BzLnN1YmxvY2F0aW9uU3RhdGUuc2Vjb25kYXJ5QWN0aXZlVGFiSWQgOiB1bmRlZmluZWQsIHN1YmxvY2F0aW9uU3RhdGU6IHByb3BzLnN1YmxvY2F0aW9uU3RhdGV9fScKICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3Qtd2hlbj0nIXByb3BzLnByb3ZpZGVyLmF3U3ViTG9jYXRpb25QcmVmIHx8ICFwcm9wcy5wcm92aWRlci5hd1N1YkxvY2F0aW9uUHJlZi5oaWRlVG9vbHNBbmRJbmZvQXJlYSc+CiAgICAgICAgICAgICAgICAgICAgPC9hdy1zaWRlbmF2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8bmF2IGV4aXN0LXdoZW49JyFwcm9wcy5wcm92aWRlci5hd1N1YkxvY2F0aW9uUHJlZi5oaWRlUmlnaHRXYWxsJyBhcmlhLWxhYmVsPSdpMThuLnJpZ2h0SGFuZFRvb2xCYXInCiAgICAgICAgICAgICAgICBjbGFzcz0nYXctbGF5b3V0LWZsZXhDb21tYW5kYmFyIGF3LWxheW91dC1pbmZvQ29tbWFuZGJhcic+CiAgICAgICAgICAgICAgICA8YXctc2VydmVyLXZpc2liaWxpdHktY29tbWFuZC1iYXIKICAgICAgICAgICAgICAgICAgICBjb250ZXh0PSd7Li4ucHJvcHMuc3ViUGFuZWxDb250ZXh0LCBzZWFyY2hTdGF0ZTogcHJvcHMuc2VhcmNoU3RhdGUsIHNlbGVjdGlvbkRhdGE6IHByb3BzLnNlbGVjdGlvbkRhdGEsIHByb3ZpZGVyOiBwcm9wcy5wcm92aWRlciwgYmFzZVNlbGVjdGlvbjogcHJvcHMuYmFzZVNlbGVjdGlvbiwgcGFnZUNvbnRleHQ6ey4uLnByb3BzLnN1YlBhbmVsQ29udGV4dC5wYWdlQ29udGV4dCwgc2Vjb25kYXJ5QWN0aXZlVGFiSWQ6IHByb3BzLnN1YmxvY2F0aW9uU3RhdGUuc2Vjb25kYXJ5QWN0aXZlVGFiSWQgIT09ICIiID8gcHJvcHMuc3VibG9jYXRpb25TdGF0ZS5zZWNvbmRhcnlBY3RpdmVUYWJJZCA6IHVuZGVmaW5lZCwgc3VibG9jYXRpb25TdGF0ZTogcHJvcHMuc3VibG9jYXRpb25TdGF0ZX19JwogICAgICAgICAgICAgICAgICAgIGFuY2hvcj0nYXdfcmlnaHRXYWxsJyBhbGlnbm1lbnQ9J1ZFUlRJQ0FMJyBtc2VsZWN0ZWQ9J2N0eC5tc2VsZWN0ZWQnIHBzZWxlY3RlZD0nY3R4LnBzZWxlY3RlZCcKICAgICAgICAgICAgICAgICAgICBjbGFzcz0nYXctY29tbWFuZHMtbmF0aXZlQ29tbWFuZEJhciBhdy1jb21tYW5kcy1jb21tYW5kQmFyQ29udGFpbmVyIGF3LWNvbW1hbmRzLWNvbW1hbmRCYXJWZXJ0aWNhbCc+CiAgICAgICAgICAgICAgICA8L2F3LXNlcnZlci12aXNpYmlsaXR5LWNvbW1hbmQtYmFyPgogICAgICAgICAgICA8L25hdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8YXctZm9vdGVyIGNsYXNzPSJhZngtYWNjZW50LWJhY2tncm91bmQgYXctZm9vdGVyLWNvbnRhaW5lciIgZXhpc3Qtd2hlbj0nIXByb3BzLnN1YkxvY2F0aW9uUHJlZmVyZW5jZS5oaWRlRm9vdGVyJyBhbmNob3I9ImF3X2Zvb3RlciIgaW5jbHVkZS1nbG9iYWw9ImluY2x1ZGVHbG9iYWxDb21tYW5kcyI+PC9hdy1mb290ZXI+CiAgICA8L2Rpdj4KPC9hdy1iYXNlLXN1YmxvY2F0aW9uMj4KCiovCmNvbnN0IHJlbmRlckZuID0ocHJvcHMpPT4gewogICAgbGV0IHN1YlBhbmVsQ29udGV4dCA9IHByb3BzLnN1YlBhbmVsQ29udGV4dCA7CiAgICBsZXQgeyB2aWV3TW9kZWw6IHsgZGF0YSwgZGF0YVByb3ZpZGVycywgZGlzcGF0Y2gsIGNvbmRpdGlvbnMsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgIH0sIGdyaWRzLCBjdHgsIGFjdGlvbnMsIGZpZWxkcywgbWVzc2FnZXMsIGkxOG4sIGZvcm1Qcm9wLCB2aWV3UGF0aCAgfSA9IHByb3BzOwogICAgZGF0YSA9IHsuLi5kYXRhLCBkYXRhUHJvdmlkZXJzfTsKICAgIGlmKCBzdWJQYW5lbENvbnRleHQgJiYgc3ViUGFuZWxDb250ZXh0LmZpZWxkcyApewogICAgICAgIGZpZWxkcyA9IHsgLi4uZmllbGRzLCAuLi5zdWJQYW5lbENvbnRleHQuZmllbGRzIH07CiAgICB9CiAgICBsZXQgJGluZGV4ID0gbnVsbDsKICAgIHJldHVybiAoCiAgICAgICAgICAgIDxBd0Jhc2VTdWJsb2NhdGlvbjJFeGlzdFdoZW4gcHJvdmlkZXI9e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAicHJvcHMucHJvdmlkZXIiICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfSBiYXNlU2VsZWN0aW9uPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggInByb3BzLmJhc2VTZWxlY3Rpb24iICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfSBzZWxlY3Rpb25EYXRhPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggInByb3BzLnNlbGVjdGlvbkRhdGEiICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfSBleGlzdFdoZW49e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAicHJvcHMucHJvdmlkZXIiICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfT4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iYXctbGF5b3V0LWRlZmF1bHRTdWJsb2NhdGlvbiBhdy1sYXlvdXQtZmxleENvbHVtbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJhdy1sYXlvdXQtc3VibG9jYXRpb25Db250YWluZXIiPgogICAgICAgICAgICAgICAgPEF3U2lkZW5hdkV4aXN0V2hlbiBpZD0iYXdfbmF2aWdhdGlvbiIgY29uZmlnPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggImRhdGEuc2lkZU5hdlJpZ2h0RGF0YSIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9IHN1YlBhbmVsQ29udGV4dD17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICJ7Li4ucHJvcHMuc3ViUGFuZWxDb250ZXh0LCBzZWxlY3Rpb25EYXRhOnByb3BzLnNlbGVjdGlvbkRhdGEsIGJhc2VTZWxlY3Rpb246IHByb3BzLmJhc2VTZWxlY3Rpb24sIHNlYXJjaFN0YXRlOiBwcm9wcy5zZWFyY2hTdGF0ZSwgcGFnZUNvbnRleHQ6IHsuLi5wcm9wcy5zdWJQYW5lbENvbnRleHQucGFnZUNvbnRleHQsIHNlY29uZGFyeUFjdGl2ZVRhYklkOiBwcm9wcy5zdWJsb2NhdGlvblN0YXRlLnNlY29uZGFyeUFjdGl2ZVRhYklkICE9PSBcIlwiID8gcHJvcHMuc3VibG9jYXRpb25TdGF0ZS5zZWNvbmRhcnlBY3RpdmVUYWJJZCA6IHVuZGVmaW5lZCwgc3VibG9jYXRpb25TdGF0ZTogcHJvcHMuc3VibG9jYXRpb25TdGF0ZX19IiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0gZXhpc3RXaGVuPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggIiFwcm9wcy5wcm92aWRlci5hd1N1YkxvY2F0aW9uUHJlZi5oaWRlTmF2aWdhdGlvbkFyZWEiICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfT4KICAgICAgICAgICAgICAgIDwvQXdTaWRlbmF2RXhpc3RXaGVuPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImF3LWxheW91dC13b3JrYXJlYSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9ImF3LWxheW91dC1mbGV4Ym94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPE1haW5Bd0NsYXNzIGF3Q2xhc3M9e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAiWydhdy1sYXlvdXQtd29ya2FyZWFNYWluJyx7J3ZlcnRpY2FsJzogZGF0YS5zdWJsb2NhdGlvblN0eWxlcy52ZXJ0aWNhbH0seyd2ZXJ0aWNhbC1yZXZlcnNlJzogZGF0YS5zdWJsb2NhdGlvblN0eWxlcy52ZXJ0aWNhbFJldmVyc2V9LHsnaG9yaXpvbnRhbC1yZXZlcnNlJzogZGF0YS5zdWJsb2NhdGlvblN0eWxlcy5ob3Jpem9udGFsUmV2ZXJzZX1dIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QXdTdGFuZGFyZFdvcmthcmVhIGJhc2VTZWxlY3Rpb249e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAicHJvcHMuYmFzZVNlbGVjdGlvbiIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9IHNlbGVjdGlvbk1vZGVsPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggInByb3BzLnNlbGVjdGlvbk1vZGVsIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0gc2VsZWN0aW9uRGF0YT17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICJwcm9wcy5zZWxlY3Rpb25EYXRhIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0gc3ViUGFuZWxDb250ZXh0PXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggInByb3BzLmN0eC5jb250ZXh0WzBdIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0gc2VhcmNoU3RhdGU9e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAicHJvcHMuc2VhcmNoU3RhdGUiICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfSBpc0hvcml6b250YWxPcmllbnRhdGlvbj17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICJwcm9wcy5wcm92aWRlci5hd1N1YkxvY2F0aW9uUHJlZi5vcmllbnRhdGlvbj09PSdIT1JJWk9OVEFMJyIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Bd1N0YW5kYXJkV29ya2FyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvTWFpbkF3Q2xhc3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDxBd1NpZGVuYXZFeGlzdFdoZW4gaWQ9ImF3X3Rvb2xzQW5kSW5mbyIgY29uZmlnPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggImRhdGEuc2lkZU5hdkxlZnREYXRhIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0gc3ViUGFuZWxDb250ZXh0PXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggInsuLi5wcm9wcy5zdWJQYW5lbENvbnRleHQsc2VsZWN0aW9uRGF0YTogcHJvcHMuc2VsZWN0aW9uRGF0YSwgYmFzZVNlbGVjdGlvbjogcHJvcHMuYmFzZVNlbGVjdGlvbiwgc2VhcmNoU3RhdGU6IHByb3BzLnNlYXJjaFN0YXRlLCBwYWdlQ29udGV4dDp7Li4ucHJvcHMuc3ViUGFuZWxDb250ZXh0LnBhZ2VDb250ZXh0LCBzZWNvbmRhcnlBY3RpdmVUYWJJZDogcHJvcHMuc3VibG9jYXRpb25TdGF0ZS5zZWNvbmRhcnlBY3RpdmVUYWJJZCAhPT0gXCJcIiA/IHByb3BzLnN1YmxvY2F0aW9uU3RhdGUuc2Vjb25kYXJ5QWN0aXZlVGFiSWQgOiB1bmRlZmluZWQsIHN1YmxvY2F0aW9uU3RhdGU6IHByb3BzLnN1YmxvY2F0aW9uU3RhdGV9fSIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9IGV4aXN0V2hlbj17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICIhcHJvcHMucHJvdmlkZXIuYXdTdWJMb2NhdGlvblByZWYgfHwgIXByb3BzLnByb3ZpZGVyLmF3U3ViTG9jYXRpb25QcmVmLmhpZGVUb29sc0FuZEluZm9BcmVhIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvQXdTaWRlbmF2RXhpc3RXaGVuPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8TmF2RXhpc3RXaGVuIGFyaWEtbGFiZWw9e2kxOG4ucmlnaHRIYW5kVG9vbEJhcn0gY2xhc3NOYW1lPSJhdy1sYXlvdXQtZmxleENvbW1hbmRiYXIgYXctbGF5b3V0LWluZm9Db21tYW5kYmFyIiBleGlzdFdoZW49e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAiIXByb3BzLnByb3ZpZGVyLmF3U3ViTG9jYXRpb25QcmVmLmhpZGVSaWdodFdhbGwiICkoIHsgcHJvcHMsIGRhdGEsIGZpZWxkcywgZGF0YVByb3ZpZGVycywgY3R4LCBpMThuLCBhY3Rpb25zLCBzdWJQYW5lbENvbnRleHQsIHZpZXdQYXRoLCBjb25kaXRpb25zLCBmb3JtUHJvcCwgZGlzcGF0Y2gsIHNlbGVjdGlvbk1vZGVscywgZWRpdEhhbmRsZXJzLCBjaGFydFByb3ZpZGVycywgcG9ydHMgfSApfT4KICAgICAgICAgICAgICAgICAgICA8QXdTZXJ2ZXJWaXNpYmlsaXR5Q29tbWFuZEJhciBjb250ZXh0PXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggInsuLi5wcm9wcy5zdWJQYW5lbENvbnRleHQsIHNlYXJjaFN0YXRlOiBwcm9wcy5zZWFyY2hTdGF0ZSwgc2VsZWN0aW9uRGF0YTogcHJvcHMuc2VsZWN0aW9uRGF0YSwgcHJvdmlkZXI6IHByb3BzLnByb3ZpZGVyLCBiYXNlU2VsZWN0aW9uOiBwcm9wcy5iYXNlU2VsZWN0aW9uLCBwYWdlQ29udGV4dDp7Li4ucHJvcHMuc3ViUGFuZWxDb250ZXh0LnBhZ2VDb250ZXh0LCBzZWNvbmRhcnlBY3RpdmVUYWJJZDogcHJvcHMuc3VibG9jYXRpb25TdGF0ZS5zZWNvbmRhcnlBY3RpdmVUYWJJZCAhPT0gXCJcIiA/IHByb3BzLnN1YmxvY2F0aW9uU3RhdGUuc2Vjb25kYXJ5QWN0aXZlVGFiSWQgOiB1bmRlZmluZWQsIHN1YmxvY2F0aW9uU3RhdGU6IHByb3BzLnN1YmxvY2F0aW9uU3RhdGV9fSIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9IGFuY2hvcj0iYXdfcmlnaHRXYWxsIiBhbGlnbm1lbnQ9IlZFUlRJQ0FMIiBtc2VsZWN0ZWQ9e0F3UGFyc2VTZXJ2aWNlLmluc3RhbmNlKCAiY3R4Lm1zZWxlY3RlZCIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9IHBzZWxlY3RlZD17QXdQYXJzZVNlcnZpY2UuaW5zdGFuY2UoICJjdHgucHNlbGVjdGVkIiApKCB7IHByb3BzLCBkYXRhLCBmaWVsZHMsIGRhdGFQcm92aWRlcnMsIGN0eCwgaTE4biwgYWN0aW9ucywgc3ViUGFuZWxDb250ZXh0LCB2aWV3UGF0aCwgY29uZGl0aW9ucywgZm9ybVByb3AsIGRpc3BhdGNoLCBzZWxlY3Rpb25Nb2RlbHMsIGVkaXRIYW5kbGVycywgY2hhcnRQcm92aWRlcnMsIHBvcnRzIH0gKX0gY2xhc3NOYW1lPSJhdy1jb21tYW5kcy1uYXRpdmVDb21tYW5kQmFyIGF3LWNvbW1hbmRzLWNvbW1hbmRCYXJDb250YWluZXIgYXctY29tbWFuZHMtY29tbWFuZEJhclZlcnRpY2FsIj4KICAgICAgICAgICAgICAgICAgICA8L0F3U2VydmVyVmlzaWJpbGl0eUNvbW1hbmRCYXI+CiAgICAgICAgICAgICAgICA8L05hdkV4aXN0V2hlbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxBd0Zvb3RlckV4aXN0V2hlbiBjbGFzc05hbWU9ImFmeC1hY2NlbnQtYmFja2dyb3VuZCBhdy1mb290ZXItY29udGFpbmVyIiBhbmNob3I9ImF3X2Zvb3RlciIgaW5jbHVkZS1nbG9iYWw9ImluY2x1ZGVHbG9iYWxDb21tYW5kcyIgZXhpc3RXaGVuPXtBd1BhcnNlU2VydmljZS5pbnN0YW5jZSggIiFwcm9wcy5zdWJMb2NhdGlvblByZWZlcmVuY2UuaGlkZUZvb3RlciIgKSggeyBwcm9wcywgZGF0YSwgZmllbGRzLCBkYXRhUHJvdmlkZXJzLCBjdHgsIGkxOG4sIGFjdGlvbnMsIHN1YlBhbmVsQ29udGV4dCwgdmlld1BhdGgsIGNvbmRpdGlvbnMsIGZvcm1Qcm9wLCBkaXNwYXRjaCwgc2VsZWN0aW9uTW9kZWxzLCBlZGl0SGFuZGxlcnMsIGNoYXJ0UHJvdmlkZXJzLCBwb3J0cyB9ICl9PgogICAgICAgICAgICA8L0F3Rm9vdGVyRXhpc3RXaGVuPgogICAgICAgIDwvZGl2PgogICAgPC9Bd0Jhc2VTdWJsb2NhdGlvbjJFeGlzdFdoZW4+CiAgICApCn07CgoKLyoKZGVmaW5lIGNvbXBvbmVudAoqLwpjb25zdCBDb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnQoIGRlY2xWaWV3TW9kZWxKc29uLCByZW5kZXJGbiwgdW5kZWZpbmVkLCBjdHhJbXBvcnRPYmogKTsKCmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDs="}]}
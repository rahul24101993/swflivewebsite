{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwCommandService.js\";\n// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwCommandService\n */\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst publishAnalytics = command => {\n  let commandLogData = {\n    sanAnalyticsType: 'Commands',\n    sanCommandId: command.id,\n    sanCommandTitle: command.title\n  };\n  analyticsSvc.logCommands(commandLogData);\n};\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\n\nexport const awCommandRenderFunction = _ref => {\n  let {\n    visibilityLoader,\n    viewModel: {\n      dispatch,\n      data: {\n        isCommandExecuting\n      }\n    },\n    command,\n    commandContext,\n    ctx,\n    ctxMin: {\n      commandClass\n    },\n    runActionWithViewModel,\n    actions: {\n      openCommandPopup\n    },\n    alignment,\n    overflow = false\n  } = _ref;\n\n  /**\n   * Click handler for the command button\n   *\n   * @param {Event} e Click event\n   */\n  const executeCommand = async e => {\n    e.stopPropagation();\n    eventBus.publish('removeMessages', {});\n    dispatch({\n      path: 'data.isCommandExecuting',\n      value: true\n    });\n    const result = await command.execute(runActionWithViewModel, { ...commandContext,\n      popupAction: openCommandPopup,\n      event: e\n    });\n    dispatch({\n      path: 'data.isCommandExecuting',\n      value: false\n    });\n    logUserGesture();\n    publishAnalytics(command);\n\n    if (command.hasPopup) {\n      const overrideOptions = result.inputData.options;\n      openCommandPopup.show({ ...overrideOptions,\n        placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start',\n        context: getPopupContext(overrideOptions)\n      });\n    }\n  };\n\n  const getParentGroupId = function () {\n    let parentGroupId = '';\n\n    if (commandContext && commandContext.command) {\n      parentGroupId = commandContext.command.id;\n    }\n\n    return parentGroupId;\n  };\n\n  const getSubject = function () {\n    let subject = {};\n\n    if (commandContext && commandContext.selectionData) {\n      let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n      let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n      subject = {\n        pselected: pselected,\n        selected: selected\n      };\n    }\n\n    return subject;\n  };\n\n  const logUserGesture = function () {\n    let widgetInfo = {\n      commandId: command.id,\n      parentGroupId: getParentGroupId(),\n      commandContext: commandContext\n    };\n    cas.notify({\n      widgetInfo: widgetInfo,\n      userGesture: 'commandClick',\n      subject: getSubject()\n    });\n  };\n\n  const getTooltipPlacement = function () {\n    var placement = 'top';\n\n    if (alignment === 'VERTICAL') {\n      placement = 'left';\n    }\n\n    return placement;\n  };\n\n  const getPopupContext = options => {\n    const scope = {\n      commandContext\n    };\n    let subPanelContext = assignWith({}, options.subPanelContext, (objValue, srcValue) => {\n      const path = getStringBetweenDoubleMustaches(objValue || srcValue);\n      return get(scope, path);\n    });\n    return {\n      anchor: command.id,\n      //TODO: Command context will need to be included in this also\n      context: {\n        command,\n        ...commandContext\n      },\n      visibilityLoader,\n      subPanelContext,\n      childCommandClickCallback: hasPopup => {\n        if (hasPopup) {\n          return;\n        }\n\n        openCommandPopup.hide();\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'aw-command',\n    ref: openCommandPopup.reference,\n    title: command.extendedTooltip || command.description ? null : command.title,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\" //TODO: button-id vs command-id vs data-command-id - not clear why changed to commandId\n      ,\n      \"button-id\": command.id,\n      \"command-id\": command.id,\n      \"data-command-id\": command.id,\n      className: commandClass + (openCommandPopup.open ? ' aw-state-selected' : ''),\n      disabled: isCommandExecuting || !command.enabled,\n      \"aria-disabled\": isCommandExecuting || !command.enabled,\n      title: command.extendedTooltip || command.description ? null : command.title,\n      \"aria-label\": command.title,\n      \"aria-haspopup\": command.hasPopup,\n      onClick: executeCommand,\n      tabIndex: overflow ? -1 : 0,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: getCommandIconClass(command.hasPopup),\n        children: [/*#__PURE__*/_jsxDEV(AwPic, {\n          className: \"aw-commands-svg\",\n          iconId: command.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), command.hasPopup ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-widgets-groupCommandStack\",\n          children: /*#__PURE__*/_jsxDEV(AwIcon, {\n            iconId: \"miscDownArrow_uxRefresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this) : null, command.decorator && command.decorator.text && command.decorator.text !== '{0}' && command.decorator.visibleWhen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commands-cellDecorator\",\n          children: command.decorator.className ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: command.decorator.className,\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-commands-showIconLabel aw-commands-commandIconButtonText\",\n        children: command.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...openCommandPopup.options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: openCommandPopup.reference,\n      extendedTooltipOptions: {\n        isCommand: true,\n        placement: getTooltipPlacement()\n      },\n      extendedTooltipContext: command,\n      extendedTooltip: command.extendedTooltip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {String} commandId Command ID\n * @param {String} alignment Command bar alignment\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\n\nconst getCommandClass = (renderContext, commandId, alignment, selected, enabled, isCommandExecuting) => {\n  const classNames = ['aw-commands-commandIconButton', 'aw-commands-command', `aw-commandId-${commandId}`, alignment === 'VERTICAL' ? 'aw-commands-commandWrapperVertical' : null, alignment === 'HORIZONTAL' ? 'aw-commands-commandWrapperHorizontal' : null, selected ? 'aw-state-selected' : null, enabled && !isCommandExecuting ? null : 'disabled'].filter(x => x);\n  return classNames.join(' ');\n};\n/**\n * Get the class to use on the command icon\n *\n * @param {Boolean} hasPopup Whether the command is a group\n * @returns {String} Class to use for command icon\n */\n\n\nconst getCommandIconClass = hasPopup => `aw-commandIcon${hasPopup ? ' aw-widgets-groupCommand' : ''}`;\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\n\nexport const getCommandClassMemo = (vmDef, prop, data) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [prop.command.id, prop.alignment, prop.command.selected, prop.command.enabled, data.isCommandExecuting],\n    compute: getCommandClass\n  })];\n};","map":{"version":3,"names":["AwExtendedTooltip","AwIcon","AwPic","AwPopup","eventBus","DerivedStateResult","assignWith","get","getStringBetweenDoubleMustaches","analyticsSvc","cas","publishAnalytics","command","commandLogData","sanAnalyticsType","sanCommandId","id","sanCommandTitle","title","logCommands","awCommandRenderFunction","visibilityLoader","viewModel","dispatch","data","isCommandExecuting","commandContext","ctx","ctxMin","commandClass","runActionWithViewModel","actions","openCommandPopup","alignment","overflow","executeCommand","e","stopPropagation","publish","path","value","result","execute","popupAction","event","logUserGesture","hasPopup","overrideOptions","inputData","options","show","placement","context","getPopupContext","getParentGroupId","parentGroupId","getSubject","subject","selectionData","pselected","selected","widgetInfo","commandId","notify","userGesture","getTooltipPlacement","scope","subPanelContext","objValue","srcValue","anchor","childCommandClickCallback","hide","reference","extendedTooltip","description","open","enabled","getCommandIconClass","icon","decorator","text","visibleWhen","className","isCommand","getCommandClass","renderContext","classNames","filter","x","join","getCommandClassMemo","vmDef","prop","ctxParameters","additionalParameters","compute"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwCommandService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwCommandService\n */\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n */\n const publishAnalytics = ( command ) => {\n    let commandLogData = {\n        sanAnalyticsType: 'Commands',\n        sanCommandId: command.id,\n        sanCommandTitle: command.title\n    };\n    analyticsSvc.logCommands( commandLogData );\n};\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awCommandRenderFunction = ( {\n    visibilityLoader,\n    viewModel: { dispatch, data: { isCommandExecuting } },\n    command,\n    commandContext,\n    ctx,\n    ctxMin: { commandClass },\n    runActionWithViewModel,\n    actions: { openCommandPopup },\n    alignment,\n    overflow = false\n} ) => {\n    /**\n     * Click handler for the command button\n     *\n     * @param {Event} e Click event\n     */\n    const executeCommand = async( e ) => {\n        e.stopPropagation();\n        eventBus.publish( 'removeMessages', {} );\n        dispatch( { path: 'data.isCommandExecuting', value: true } );\n        const result = await command.execute( runActionWithViewModel, { ...commandContext, popupAction: openCommandPopup, event: e } );\n        dispatch( { path: 'data.isCommandExecuting', value: false } );\n        logUserGesture();\n        publishAnalytics( command );\n\n        if( command.hasPopup ) {\n            const overrideOptions = result.inputData.options;\n            openCommandPopup.show( {\n                ...overrideOptions,\n                placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start',\n                context: getPopupContext( overrideOptions )\n            } );\n        }\n    };\n\n    const getParentGroupId = function() {\n        let parentGroupId = '';\n        if( commandContext && commandContext.command ) {\n            parentGroupId = commandContext.command.id;\n        }\n        return parentGroupId;\n    };\n\n    const getSubject = function() {\n        let subject = {};\n        if( commandContext && commandContext.selectionData ) {\n            let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n            let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n            subject = { pselected: pselected, selected: selected };\n        }\n        return subject;\n    };\n\n    const logUserGesture = function() {\n        let widgetInfo = {\n            commandId: command.id,\n            parentGroupId: getParentGroupId(),\n            commandContext: commandContext\n        };\n        cas.notify( {\n            widgetInfo: widgetInfo,\n            userGesture: 'commandClick',\n            subject: getSubject()\n        } );\n    };\n\n    const getTooltipPlacement = function() {\n        var placement = 'top';\n        if( alignment === 'VERTICAL' ) {\n            placement = 'left';\n        }\n        return placement;\n    };\n\n    const getPopupContext = ( options ) => {\n        const scope = { commandContext };\n        let subPanelContext = assignWith( {}, options.subPanelContext, ( objValue, srcValue ) => {\n            const path = getStringBetweenDoubleMustaches( objValue || srcValue );\n            return get( scope, path );\n        } );\n\n        return {\n            anchor: command.id,\n            //TODO: Command context will need to be included in this also\n            context: {\n                command,\n                ...commandContext\n            },\n            visibilityLoader,\n            subPanelContext,\n            childCommandClickCallback: ( hasPopup ) => {\n                if( hasPopup ) {\n                    return;\n                }\n                openCommandPopup.hide();\n            }\n        };\n    };\n\n    return (\n        <div className={'aw-command'} ref={openCommandPopup.reference} title={command.extendedTooltip || command.description ? null : command.title}>\n            <button type='button'\n                //TODO: button-id vs command-id vs data-command-id - not clear why changed to commandId\n                button-id={command.id}\n                command-id={command.id}\n                data-command-id={command.id}\n                className={commandClass + ( openCommandPopup.open ? ' aw-state-selected' : '' )}\n                disabled={isCommandExecuting || !command.enabled}\n                aria-disabled={isCommandExecuting || !command.enabled}\n                title={command.extendedTooltip || command.description ? null : command.title}\n                aria-label={command.title}\n                aria-haspopup={command.hasPopup}\n                onClick={executeCommand}\n                tabIndex={overflow ? -1 : 0}\n            >\n                <div className={getCommandIconClass( command.hasPopup )}>\n                    <AwPic className='aw-commands-svg' iconId={command.icon}></AwPic>\n                    { command.hasPopup ?\n                        <div className='aw-widgets-groupCommandStack'>\n                            <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon>\n                        </div>\n                        : null }\n                    { command.decorator && command.decorator.text && command.decorator.text !== '{0}' && command.decorator.visibleWhen ?\n                        <div className='aw-commands-cellDecorator'>\n                            { command.decorator.className ?\n                                <div className={command.decorator.className}>{command.decorator.text}</div>\n                                : <div>{command.decorator.text}</div> }\n                        </div>\n                        : null }\n\n                </div>\n                <div className='aw-commands-showIconLabel aw-commands-commandIconButtonText'>{command.title}</div>\n            </button>\n\n            <AwPopup {...openCommandPopup.options}/>\n            <AwExtendedTooltip\n                reference={openCommandPopup.reference}\n                extendedTooltipOptions={{ isCommand: true, placement : getTooltipPlacement() }}\n                extendedTooltipContext={command}\n                extendedTooltip={command.extendedTooltip}>\n            </AwExtendedTooltip>\n        </div>\n    );\n};\n\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {String} commandId Command ID\n * @param {String} alignment Command bar alignment\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\nconst getCommandClass = ( renderContext, commandId, alignment, selected, enabled, isCommandExecuting ) => {\n    const classNames = [\n        'aw-commands-commandIconButton',\n        'aw-commands-command',\n        `aw-commandId-${commandId}`,\n        alignment === 'VERTICAL' ? 'aw-commands-commandWrapperVertical' : null,\n        alignment === 'HORIZONTAL' ? 'aw-commands-commandWrapperHorizontal' : null,\n        selected ? 'aw-state-selected' : null,\n        enabled && !isCommandExecuting ? null : 'disabled'\n    ].filter( x => x );\n    return classNames.join( ' ' );\n};\n\n/**\n * Get the class to use on the command icon\n *\n * @param {Boolean} hasPopup Whether the command is a group\n * @returns {String} Class to use for command icon\n */\nconst getCommandIconClass = ( hasPopup ) => `aw-commandIcon${hasPopup ? ' aw-widgets-groupCommand' : ''}`;\n\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getCommandClassMemo = ( vmDef, prop, data ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ prop.command.id, prop.alignment, prop.command.selected, prop.command.enabled, data.isCommandExecuting ],\n        compute: getCommandClass\n    } ) ];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\pltable\\\\src\\\\js\\\\AwSplmTableService.js\"; // Copyright (c) 2021 Siemens\n\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport { AwServerVisibilityPopupCommandBar } from 'js/AwServerVisibilityCommandBarService';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport SplmTableCellEditor from 'viewmodel/SplmTableCellEditorViewModel';\nimport awSPLMTableNativeService from 'js/awSPLMTableNativeService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getColumnMenuName = gridContextPlaceholder => {\n  let columnMenuName = 'splmTableTextColumnMenu';\n\n  if (gridContextPlaceholder.columnDef && gridContextPlaceholder.columnDef.filter && gridContextPlaceholder.columnDef.filter.view) {\n    columnMenuName = gridContextPlaceholder.columnDef.filter.view;\n  }\n\n  return columnMenuName;\n};\n\nexport const initializeTable = (elemRefList, props) => {\n  if (props.reusable === 'true') {\n    var dataCtxNode = props.dataCtxNode; //updating dataCtxNode with props\n\n    if (props.propsCallback) {\n      dataCtxNode.props = props.propsCallback();\n      dataCtxNode.getProps = props.propsCallback;\n    }\n\n    return awSPLMTableNativeService.initializeTable(elemRefList.get('tableElem').current, props.dataProviderInstance.vmCollectionObj.vmCollection, dataCtxNode, props);\n  }\n};\nexport const updateTableData = (tableCallbacks, vmCollection, props) => {\n  if (tableCallbacks && props.reusable === 'true') {\n    tableCallbacks.updateVmCollection(vmCollection);\n  }\n};\nexport const updateSortDirection = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateSortDirection(props.gridContextPlaceholder.currentColumnIndex, props.gridContextPlaceholder.newColumnIndex, props.gridContextPlaceholder.sortDirection);\n  }\n};\nexport const updatePinColumn = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updatePinColumn(props.gridContextPlaceholder.pinColumnData.columnDef, props.gridContextPlaceholder.pinColumnData.isFreezeAction, props.gridContextPlaceholder.pinColumnData.defaultColumnPinIndex);\n  }\n};\nexport const updateDynamicRowHeightStatus = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateDynamicRowHeight(props.gridContextPlaceholder.dynamicRowHeightStatus);\n  }\n};\nexport const hideColumn = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.hideColumn(props.gridContextPlaceholder.hideColumnField);\n  }\n};\nexport const columnFilterApplied = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.columnFilterApplied(props.gridContextPlaceholder.columnFilterInfo);\n  }\n};\nexport const columnsArranged = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.columnsArranged(props.gridContextPlaceholder.columnArrangeData);\n  }\n};\nexport const updateColumnMenuData = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateColumnMenuData(props.gridContextPlaceholder.columnMenuData);\n  }\n};\nexport const updateEditState = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateEditState(props);\n  }\n};\nexport const updateTableColumns = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateTableColumns(props.dataProviderInstance.columnConfig.columns);\n  }\n};\nexport const editStateUpdated = tableCallbacks => {\n  if (tableCallbacks) {\n    tableCallbacks.editStateUpdated();\n  }\n};\nexport const destroyTable = (tableCallbacks, props) => {\n  if (tableCallbacks && props.reusable === 'true') {\n    tableCallbacks.destroy();\n  }\n};\nexport const setMultiSelectionEnabledInTable = props => {\n  if (props && props.dataProviderInstance) {\n    if (props.showCheckBox) {\n      props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(true);\n    } else {\n      props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(false);\n    }\n  }\n};\nexport const refreshTable = tableCallbacks => {\n  if (tableCallbacks) {\n    tableCallbacks.refreshTable();\n  }\n};\nexport const updateGridOptions = (tableCallbacks, props) => {\n  if (tableCallbacks && props) {\n    tableCallbacks.updateGridOptionsForTableInstance(props);\n  }\n};\nexport const handleSelectionChange = (tableCallbacks, props) => {\n  if (tableCallbacks && props && props.reusable === 'true' && props.selectionData) {\n    tableCallbacks.updateContentRowSelection();\n  }\n};\nexport const selectRows = (tableCallbacks, props) => {\n  if (tableCallbacks && props && props.reusable === 'true' && props.selectionData && props.dataProviderInstance && props.dataProviderInstance.selectionModel) {\n    let resetSelectRows = false;\n\n    if (props.tableContext && props.tableContext.selectRows && props.tableContext.selectRows.value === 'all') {\n      props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(true);\n      props.dataProviderInstance.selectAll();\n      resetSelectRows = true;\n      tableCallbacks.updateContentRowSelection();\n    } else if (props.tableContext && props.tableContext.selectRows && props.tableContext.selectRows.value === 'none') {\n      // When we do de-selectAll and also showCheckBoxes are still opened, we should not reset multiSelection to false.\n      // MultiSelection should be set to false when checkBoxes are not shown and when selections are cleared.\n      if (props.showCheckBox !== true) {\n        props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(false);\n      }\n\n      props.dataProviderInstance.selectNone();\n      resetSelectRows = true;\n      tableCallbacks.updateContentRowSelection();\n    } // Reset selectRows State. This is needed when the table goes for re-render for some state updates, we should not be doing all or none again.\n\n\n    if (resetSelectRows) {\n      let newSelectRows = { ...props.tableContext.selectRows.getValue()\n      };\n      newSelectRows.value = '';\n      props.tableContext.selectRows.update(newSelectRows);\n    }\n  }\n};\n/**\n * render function for AwSplmTable\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nexport const awSplmTableRenderFunction = props => {\n  const {\n    columnProviderInstance,\n    dataProviderInstance,\n    gridid,\n    gridOptions,\n    actions,\n    gridContextPlaceholder,\n    dataCtxNode,\n    ctx,\n    commandContext = {},\n    elementRefList,\n    gridContextDispatcher\n  } = props;\n  const element = props.reusable === 'true' ? elementRefList.get('tableElem') : dataProviderInstance.getRootReference();\n  const commandOverrides = dataProviderInstance.getCommandOverrides(); // Add popups to gridOptions so table can call popup.show()/popup.hide()\n\n  gridOptions.popupContext = {\n    columnMenuPopup: actions.columnMenuPopup,\n    gridMenuPopup: actions.gridMenuPopup,\n    contextMenuPopup: actions.contextMenuPopup,\n    editArrayPopup: actions.editArrayPopup\n  }; // add support for vmo\n\n  const isArrangeSupported = columnProviderInstance.isArrangeSupported();\n  const isNarrowMode = narrowModeService.isNarrowMode();\n  const gridMenuContext = {\n    anchor: commandOverrides.gridMenuCommandsAnchor ? commandOverrides.gridMenuCommandsAnchor : 'aw_gridMenu',\n    dataProvider: dataProviderInstance,\n    columnProvider: columnProviderInstance,\n    gridId: gridid,\n    gridOptions: gridOptions,\n    isArrangeSupported: isArrangeSupported,\n    isNarrowMode: isNarrowMode,\n    isColumnFilterApplied: dataProviderInstance.isColumnFilterApplied,\n    gridContextDispatcher: gridContextDispatcher,\n    gridContext: gridContextPlaceholder,\n    ...commandContext\n  }; //commandContext should have information about selected vmo. This is needed for application command condition use-case.\n  //Pass the currently selected object from table to the context menu command bar context instead of relying on ctx.mselected.\n\n  commandContext.selected = gridContextPlaceholder.contextVmo && gridContextPlaceholder.contextVmo.length ? gridContextPlaceholder.contextVmo : ctx.mselected;\n  const contextAnchor = commandOverrides.contextMenuCommandsAnchor ? commandOverrides.contextMenuCommandsAnchor : 'aw_contextMenu2';\n  const contextMenuContext = {\n    anchor: contextAnchor,\n    dataProvider: dataProviderInstance,\n    columnProvider: columnProviderInstance,\n    gridId: gridid,\n    gridOptions: gridOptions,\n    gridContext: gridContextPlaceholder,\n    ...commandContext\n  };\n  const isPinningEnabled = gridOptions.enablePinning !== false;\n\n  const getFilterFacetsAction = async filterFacetInput => {\n    return await dataProviderInstance.getFilterFacets(dataCtxNode.data, filterFacetInput);\n  }; //commandContext should have information about selected columnDef. This is needed for application command condition use-case.\n\n\n  commandContext.columnDef = gridContextPlaceholder.columnDef;\n  const columnMenuContext = {\n    anchor: commandOverrides.columnMenuCommandsAnchor ? commandOverrides.columnMenuCommandsAnchor : 'aw_splmTable_columnMenu',\n    dataProvider: dataProviderInstance,\n    columnProvider: columnProviderInstance,\n    gridId: gridid,\n    gridContext: gridContextPlaceholder,\n    gridContextDispatcher: gridContextDispatcher,\n    menuId: gridid + '_menu',\n    menuContainerId: gridid + '_menuContainer',\n    gridOptions: gridOptions,\n    isArrangeSupported: isArrangeSupported,\n    isPinningEnabled: isPinningEnabled,\n    sortCriteria: columnProviderInstance.getSortCriteria(),\n    hasFilterFacetAction: dataProviderInstance.getFilterFacets && dataProviderInstance.filterFacetAction,\n    getFilterFacetsAction: getFilterFacetsAction,\n    existingColumnFilters: columnProviderInstance.getColumnFilters(),\n    ...dataCtxNode.data.subPanelContext,\n    ...commandContext\n  };\n\n  const childCommandCLickCallback = function (hasPopup) {\n    if (hasPopup) {\n      return;\n    }\n\n    actions.contextMenuPopup.hide();\n  };\n\n  const columnMenuName = getColumnMenuName(gridContextPlaceholder);\n  return /*#__PURE__*/_jsxDEV(\"aw-splm-table\", {\n    ref: element,\n    children: [actions.columnMenuPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.columnMenuPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: columnMenuName,\n        subPanelContext: columnMenuContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 95\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 49\n    }, this), \" \", actions.gridMenuPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.gridMenuPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwPopupCommandBar, {\n        anchor: gridMenuContext.anchor,\n        context: gridMenuContext,\n        childCommandClickCallback: actions.gridMenuPopup.hide,\n        class: \"grid-menu-command\",\n        alignment: \"HORIZONTAL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 47\n    }, this), \" \", actions.contextMenuPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.contextMenuPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwServerVisibilityPopupCommandBar, {\n        anchor: contextAnchor,\n        context: contextMenuContext,\n        childCommandClickCallback: childCommandCLickCallback,\n        mselected: commandContext.selected,\n        pselected: ctx.pselected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 50\n    }, this), \" \", actions.editArrayPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.editArrayPopup.options,\n      children: /*#__PURE__*/_jsxDEV(SplmTableCellEditor, {\n        vmo: gridContextPlaceholder.editVmo,\n        name: gridContextPlaceholder.editPropertyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/AwSplmTableService.js"],"names":["getColumnMenuName","gridContextPlaceholder","columnMenuName","initializeTable","props","dataCtxNode","awSPLMTableNativeService","elemRefList","updateTableData","tableCallbacks","updateSortDirection","updatePinColumn","updateDynamicRowHeightStatus","hideColumn","columnFilterApplied","columnsArranged","updateColumnMenuData","updateEditState","updateTableColumns","editStateUpdated","destroyTable","setMultiSelectionEnabledInTable","refreshTable","updateGridOptions","handleSelectionChange","selectRows","resetSelectRows","newSelectRows","awSplmTableRenderFunction","commandContext","gridContextDispatcher","element","elementRefList","dataProviderInstance","commandOverrides","gridOptions","columnMenuPopup","actions","gridMenuPopup","contextMenuPopup","editArrayPopup","isArrangeSupported","columnProviderInstance","isNarrowMode","narrowModeService","gridMenuContext","anchor","dataProvider","columnProvider","gridId","isColumnFilterApplied","gridContext","ctx","contextAnchor","contextMenuContext","isPinningEnabled","getFilterFacetsAction","columnMenuContext","menuId","gridid","menuContainerId","sortCriteria","hasFilterFacetAction","existingColumnFilters","childCommandCLickCallback","pselected","editPropertyName"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport { AwServerVisibilityPopupCommandBar } from 'js/AwServerVisibilityCommandBarService';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport SplmTableCellEditor from 'viewmodel/SplmTableCellEditorViewModel';\nimport awSPLMTableNativeService from 'js/awSPLMTableNativeService';\n\nconst getColumnMenuName = ( gridContextPlaceholder ) => {\n    let columnMenuName = 'splmTableTextColumnMenu';\n    if( gridContextPlaceholder.columnDef && gridContextPlaceholder.columnDef.filter && gridContextPlaceholder.columnDef.filter.view ) {\n        columnMenuName = gridContextPlaceholder.columnDef.filter.view;\n    }\n    return columnMenuName;\n};\n\nexport const initializeTable = ( elemRefList, props ) => {\n    if( props.reusable === 'true' ) {\n        var dataCtxNode = props.dataCtxNode;\n        //updating dataCtxNode with props\n        if( props.propsCallback ) {\n            dataCtxNode.props = props.propsCallback();\n            dataCtxNode.getProps = props.propsCallback;\n        }\n        return awSPLMTableNativeService.initializeTable( elemRefList.get( 'tableElem' ).current,\n            props.dataProviderInstance.vmCollectionObj.vmCollection, dataCtxNode, props );\n    }\n};\n\nexport const updateTableData = ( tableCallbacks, vmCollection, props ) => {\n    if( tableCallbacks && props.reusable === 'true' ) {\n        tableCallbacks.updateVmCollection( vmCollection );\n    }\n};\n\nexport const updateSortDirection = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateSortDirection( props.gridContextPlaceholder.currentColumnIndex, props.gridContextPlaceholder.newColumnIndex, props.gridContextPlaceholder.sortDirection );\n    }\n};\n\nexport const updatePinColumn = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updatePinColumn( props.gridContextPlaceholder.pinColumnData.columnDef, props.gridContextPlaceholder.pinColumnData.isFreezeAction,\n            props.gridContextPlaceholder.pinColumnData.defaultColumnPinIndex );\n    }\n};\n\nexport const updateDynamicRowHeightStatus = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateDynamicRowHeight( props.gridContextPlaceholder.dynamicRowHeightStatus );\n    }\n};\n\nexport const hideColumn = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.hideColumn( props.gridContextPlaceholder.hideColumnField );\n    }\n};\n\nexport const columnFilterApplied = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.columnFilterApplied( props.gridContextPlaceholder.columnFilterInfo );\n    }\n};\n\nexport const columnsArranged = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.columnsArranged( props.gridContextPlaceholder.columnArrangeData );\n    }\n};\n\nexport const updateColumnMenuData = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateColumnMenuData( props.gridContextPlaceholder.columnMenuData );\n    }\n};\n\nexport const updateEditState = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateEditState( props );\n    }\n};\n\nexport const updateTableColumns = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateTableColumns( props.dataProviderInstance.columnConfig.columns );\n    }\n};\n\nexport const editStateUpdated = ( tableCallbacks ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.editStateUpdated();\n    }\n};\n\nexport const destroyTable = ( tableCallbacks, props ) => {\n    if( tableCallbacks && props.reusable === 'true' ) {\n        tableCallbacks.destroy();\n    }\n};\n\nexport const setMultiSelectionEnabledInTable = ( props ) => {\n    if( props && props.dataProviderInstance ) {\n        if( props.showCheckBox ) {\n            props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( true );\n        } else {\n            props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( false );\n        }\n    }\n};\n\nexport const refreshTable = ( tableCallbacks ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.refreshTable();\n    }\n};\n\nexport const updateGridOptions = ( tableCallbacks, props ) => {\n    if( tableCallbacks && props ) {\n        tableCallbacks.updateGridOptionsForTableInstance( props );\n    }\n};\n\nexport const handleSelectionChange = ( tableCallbacks, props ) => {\n    if( tableCallbacks && props && props.reusable === 'true' && props.selectionData ) {\n        tableCallbacks.updateContentRowSelection();\n    }\n};\n\nexport const selectRows = ( tableCallbacks, props ) => {\n    if ( tableCallbacks && props && props.reusable === 'true' && props.selectionData && props.dataProviderInstance &&\n             props.dataProviderInstance.selectionModel ) {\n        let resetSelectRows = false;\n        if ( props.tableContext && props.tableContext.selectRows &&  props.tableContext.selectRows.value === 'all'  ) {\n            props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( true );\n            props.dataProviderInstance.selectAll();\n            resetSelectRows = true;\n            tableCallbacks.updateContentRowSelection();\n        }else if( props.tableContext && props.tableContext.selectRows && props.tableContext.selectRows.value === 'none' ) {\n            // When we do de-selectAll and also showCheckBoxes are still opened, we should not reset multiSelection to false.\n            // MultiSelection should be set to false when checkBoxes are not shown and when selections are cleared.\n            if ( props.showCheckBox !== true ) {\n                props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( false );\n            }\n            props.dataProviderInstance.selectNone();\n            resetSelectRows = true;\n            tableCallbacks.updateContentRowSelection();\n        }\n        // Reset selectRows State. This is needed when the table goes for re-render for some state updates, we should not be doing all or none again.\n        if ( resetSelectRows ) {\n            let newSelectRows = { ...props.tableContext.selectRows.getValue() };\n            newSelectRows.value = '';\n            props.tableContext.selectRows.update( newSelectRows );\n        }\n    }\n};\n\n/**\n * render function for AwSplmTable\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awSplmTableRenderFunction = ( props ) => {\n    const { columnProviderInstance, dataProviderInstance, gridid, gridOptions, actions, gridContextPlaceholder, dataCtxNode, ctx, commandContext = {},\n        elementRefList, gridContextDispatcher } = props;\n    const element = props.reusable === 'true' ? elementRefList.get( 'tableElem' ) : dataProviderInstance.getRootReference();\n    const commandOverrides = dataProviderInstance.getCommandOverrides();\n\n    // Add popups to gridOptions so table can call popup.show()/popup.hide()\n    gridOptions.popupContext = {\n        columnMenuPopup: actions.columnMenuPopup,\n        gridMenuPopup: actions.gridMenuPopup,\n        contextMenuPopup: actions.contextMenuPopup,\n        editArrayPopup: actions.editArrayPopup\n    };\n    // add support for vmo\n    const isArrangeSupported = columnProviderInstance.isArrangeSupported();\n    const isNarrowMode = narrowModeService.isNarrowMode();\n    const gridMenuContext = {\n        anchor: commandOverrides.gridMenuCommandsAnchor ? commandOverrides.gridMenuCommandsAnchor : 'aw_gridMenu',\n        dataProvider: dataProviderInstance,\n        columnProvider: columnProviderInstance,\n        gridId: gridid,\n        gridOptions: gridOptions,\n        isArrangeSupported: isArrangeSupported,\n        isNarrowMode: isNarrowMode,\n        isColumnFilterApplied: dataProviderInstance.isColumnFilterApplied,\n        gridContextDispatcher: gridContextDispatcher,\n        gridContext: gridContextPlaceholder,\n        ...commandContext\n    };\n    //commandContext should have information about selected vmo. This is needed for application command condition use-case.\n    //Pass the currently selected object from table to the context menu command bar context instead of relying on ctx.mselected.\n    commandContext.selected = gridContextPlaceholder.contextVmo && gridContextPlaceholder.contextVmo.length ? gridContextPlaceholder.contextVmo : ctx.mselected;\n    const contextAnchor = commandOverrides.contextMenuCommandsAnchor ? commandOverrides.contextMenuCommandsAnchor : 'aw_contextMenu2';\n    const contextMenuContext = {\n        anchor: contextAnchor,\n        dataProvider: dataProviderInstance,\n        columnProvider: columnProviderInstance,\n        gridId: gridid,\n        gridOptions: gridOptions,\n        gridContext: gridContextPlaceholder,\n        ...commandContext\n    };\n\n\n    const isPinningEnabled = gridOptions.enablePinning !== false;\n    const getFilterFacetsAction = async( filterFacetInput ) => {\n        return await dataProviderInstance.getFilterFacets( dataCtxNode.data, filterFacetInput );\n    };\n    //commandContext should have information about selected columnDef. This is needed for application command condition use-case.\n    commandContext.columnDef = gridContextPlaceholder.columnDef;\n    const columnMenuContext = {\n        anchor: commandOverrides.columnMenuCommandsAnchor ? commandOverrides.columnMenuCommandsAnchor : 'aw_splmTable_columnMenu',\n        dataProvider: dataProviderInstance,\n        columnProvider: columnProviderInstance,\n        gridId: gridid,\n        gridContext: gridContextPlaceholder,\n        gridContextDispatcher: gridContextDispatcher,\n        menuId: gridid + '_menu',\n        menuContainerId: gridid + '_menuContainer',\n        gridOptions: gridOptions,\n        isArrangeSupported: isArrangeSupported,\n        isPinningEnabled: isPinningEnabled,\n        sortCriteria: columnProviderInstance.getSortCriteria(),\n        hasFilterFacetAction: dataProviderInstance.getFilterFacets && dataProviderInstance.filterFacetAction,\n        getFilterFacetsAction: getFilterFacetsAction,\n        existingColumnFilters: columnProviderInstance.getColumnFilters(),\n        ...dataCtxNode.data.subPanelContext,\n        ...commandContext\n    };\n\n    const childCommandCLickCallback = function( hasPopup ) {\n        if( hasPopup ) {\n            return;\n        }\n        actions.contextMenuPopup.hide();\n    };\n\n    const columnMenuName = getColumnMenuName( gridContextPlaceholder );\n    return (\n        <aw-splm-table ref={element}>\n            {\n                actions.columnMenuPopup.open && <AwPopup {...actions.columnMenuPopup.options}><AwInclude name={ columnMenuName } subPanelContext={ columnMenuContext } /></AwPopup>\n            } {\n                actions.gridMenuPopup.open && <AwPopup {...actions.gridMenuPopup.options}>\n                    <AwPopupCommandBar\n                        anchor={ gridMenuContext.anchor }\n                        context={ gridMenuContext }\n                        childCommandClickCallback={actions.gridMenuPopup.hide}\n                        class='grid-menu-command'\n                        alignment='HORIZONTAL'\n                    ></AwPopupCommandBar>\n                </AwPopup>\n            } {\n                actions.contextMenuPopup.open && <AwPopup {...actions.contextMenuPopup.options}>\n                    <AwServerVisibilityPopupCommandBar\n                        anchor={ contextAnchor }\n                        context={ contextMenuContext }\n                        childCommandClickCallback={childCommandCLickCallback}\n                        mselected={ commandContext.selected }\n                        pselected={ctx.pselected}>\n                    </AwServerVisibilityPopupCommandBar>\n                </AwPopup>\n            } {\n                actions.editArrayPopup.open && <AwPopup {...actions.editArrayPopup.options}>\n                    <SplmTableCellEditor vmo={ gridContextPlaceholder.editVmo } name={ gridContextPlaceholder.editPropertyName }></SplmTableCellEditor>\n                </AwPopup>\n            }\n        </aw-splm-table>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
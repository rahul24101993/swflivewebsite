{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Defines provider for commands from the View model definition\n *\n * @module js/functionalUtility.service\n */ /**\n * Service to define some common functional utilities that are not available natively in Javascript\n *\n * The functions in this service support currying unless otherwise noted. See\n * https://www.sitepoint.com/currying-in-functional-javascript/ for more information.\n *\n * The unit tests provide example usages of these functions\n */let exports={};/**\n * Reducer function to convert a list of strings into a object based map\n *\n * toBooleanMap : (Map Boolean, String) -> Map Boolean\n */export let toBooleanMap=function toBooleanMap(acc,nxt){acc[nxt]=true;return acc;};/**\n * Get a property from an object.\n *\n * getProp : String -> Object -> a\n */export let getProp=function getProp(propName){return function getPropInner(obj){return obj[propName];};};/**\n * Retrieve a value from the given map\n *\n * fromMap : Map a -> String -> a\n */export let fromMap=function fromMap(map){return function fromMapInner(val){return map[val];};};/**\n * Identity function\n *\n * identity : a -> a\n */export let identity=function identity(x){return x;};/**\n * Combine two lists\n *\n * concat : (List a, List a) -> List a\n */export let concat=function concat(acc,nxt){return acc.concat(nxt);};/**\n * Use lazy compute and memoization for a property\n *\n * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()\n *\n * @param {Object} aObject Object with the property\n * @param {String} aName Name of the property\n * @param {Function} aLambda Function to get the property value\n */export const defineLazyGetter=(aObject,aName,aLambda)=>{Object.defineProperty(aObject,aName,{get:function(){// Redefine this accessor property as a data property.\n// Delete it first, to rule out \"too much recursion\" in case aObject is\n// a proxy whose defineProperty handler might unwittingly trigger this\n// getter again.\ndelete aObject[aName];let value=aLambda.apply(aObject);Object.defineProperty(aObject,aName,{value,writable:true,configurable:true,enumerable:true});return value;},configurable:true,enumerable:true});};exports={toBooleanMap,getProp,fromMap,identity,concat,defineLazyGetter};export default exports;","map":null,"metadata":{},"sourceType":"module"}
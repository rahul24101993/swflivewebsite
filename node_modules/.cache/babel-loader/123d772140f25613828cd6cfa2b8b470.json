{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwPopupCommandCellService.js\";\n/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n// Copyright (c) 2020 Siemens\n\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet popupRef = null;\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n * @param {String} parentId - command id of parent of the child command\n */\n\nconst publishAnalytics = (command, parentId) => {\n  var sanPopupCmdLogData = {\n    sanAnalyticsType: 'Popup Commands',\n    sanCommandId: command.id,\n    sanCommandTitle: command.title\n  };\n  analyticsSvc.logCommands(sanPopupCmdLogData);\n};\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\n\nexport const awCommandRenderFunction = _ref => {\n  let {\n    viewModel: {\n      dispatch,\n      data: {\n        isCommandExecuting\n      }\n    },\n    command,\n    ctxMin: {\n      commandClass\n    },\n    runActionWithViewModel,\n    actions: {\n      openCommandPopup\n    },\n    childCommandClickCallback,\n    commandContext,\n    visibilityLoader\n  } = _ref;\n  /**\n   * Click handler for the command button\n   *\n   * @param {Event} e Click event\n   */\n\n  const executeCommand = async e => {\n    e.stopPropagation();\n\n    if (command.enabled) {\n      eventBus.publish('removeMessages', {});\n      dispatch({\n        path: 'data.isCommandExecuting',\n        value: true\n      });\n      const result = await command.execute(runActionWithViewModel, commandContext);\n      dispatch({\n        path: 'data.isCommandExecuting',\n        value: false\n      });\n      logUserGesture();\n\n      if (command.hasPopup) {\n        const overrideOptions = result.inputData.options;\n        openCommandPopup.show({ ...overrideOptions,\n          context: getPopupContext(overrideOptions)\n        }).then(popup => {\n          popupRef = popup;\n        });\n      }\n\n      if (childCommandClickCallback) {\n        childCommandClickCallback(command.hasPopup);\n      }\n    }\n\n    if (childCommandClickCallback) {\n      childCommandClickCallback(command.hasPopup);\n    }\n\n    publishAnalytics(command, getParentGroupId());\n  };\n\n  const getParentGroupId = function () {\n    let parentGroupId = '';\n\n    if (commandContext && commandContext.command) {\n      parentGroupId = commandContext.command.id;\n    }\n\n    return parentGroupId;\n  };\n\n  const getSubject = function () {\n    let subject = {};\n\n    if (commandContext && commandContext.selectionData) {\n      let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n      let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n      subject = {\n        pselected: pselected,\n        selected: selected\n      };\n    }\n\n    return subject;\n  };\n\n  const logUserGesture = function () {\n    let widgetInfo = {\n      commandId: command.id,\n      parentGroupId: getParentGroupId(),\n      commandContext: commandContext\n    };\n    cas.notify({\n      widgetInfo: widgetInfo,\n      userGesture: 'commandClick',\n      subject: getSubject()\n    });\n  };\n\n  const getPopupContext = options => {\n    const scope = {\n      commandContext\n    };\n    let subPanelContext = assignWith({}, options.subPanelContext, (objValue, srcValue) => {\n      const path = getStringBetweenDoubleMustaches(objValue || srcValue);\n      return get(scope, path);\n    });\n    return {\n      anchor: command.id,\n      //TODO: Command context will need to be included in this also\n      context: {\n        command,\n        ...commandContext\n      },\n      visibilityLoader,\n      subPanelContext,\n      childCommandClickCallback: hasPopup => {\n        if (hasPopup) {\n          return;\n        }\n\n        openCommandPopup.hide();\n        closeAncestorMenus();\n      }\n    };\n  };\n\n  const closeAncestorMenus = () => {\n    if (!popupRef) {\n      return;\n    }\n\n    let menu = popupRef.parentPopup; // if it's a nested menu\n\n    while (menu && dom.get('.aw-popup-command-bar', menu.panelEl)) {\n      menu.hide();\n      menu = menu.parentPopup;\n    }\n\n    popupRef = null;\n  };\n\n  const onKeyDownHandler = event => {\n    if (wcagService.isValidKeyPress(event)) {\n      event.preventDefault();\n      executeCommand(event);\n    } else {\n      wcagService.handleMoveUpOrDown(event, event.currentTarget.parentElement.parentElement);\n    }\n  }; // move to memo function?\n\n\n  if (!command.icon) {\n    if (command.selected) {\n      command.icon = 'cmdCheckmark';\n    } else {\n      command.icon = 'cmdBlankIcon';\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      ref: openCommandPopup.reference,\n      onKeyDown: onKeyDownHandler,\n      onClick: executeCommand,\n      \"button-id\": command.id,\n      \"command-id\": command.id,\n      \"data-command-id\": command.id,\n      className: commandClass,\n      tabIndex: -1 //Programatically focusable but not naturally\n      ,\n      \"aria-label\": command.title,\n      title: command.extendedTooltip || command.description ? null : command.title,\n      \"aria-disabled\": isCommandExecuting || !command.enabled,\n      role: \"button\",\n      \"aria-haspopup\": command.hasPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-popup-cellContentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(AwPic, {\n          className: \"aw-widget-thumbnail\",\n          iconId: command.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), command.decorator && command.decorator.text && command.decorator.visibleWhen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commands-cellDecorator\",\n          children: command.decorator.className ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: command.decorator.className,\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this) : null, command.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this), command.hasPopup ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-widgets-groupCommandStack\",\n        children: /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: \"miscDownArrow_uxRefresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...openCommandPopup.options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: openCommandPopup.reference,\n      extendedTooltipOptions: {\n        isCommand: true,\n        alignment: 'VERTICAL'\n      },\n      extendedTooltipContext: command,\n      extendedTooltip: command.extendedTooltip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} hasPopup Command popup state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\n\nconst getCommandClass = (renderContext, selected, enabled, hasPopup, isCommandExecuting, icon) => {\n  const classNames = ['sw-aria-border', 'aw-widgets-cellListItem', 'aw-widgets-cellTop', selected ? 'aw-state-selected' : null, enabled && !isCommandExecuting ? null : 'disabled', hasPopup ? 'aw-hierarchical-popup' : null].filter(x => x);\n  return classNames.join(' ');\n};\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\n\nexport const getCommandClassMemo = (vmDef, prop, data) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [prop.command.selected, prop.command.enabled, prop.command.hasPopup, data.isCommandExecuting, prop.command.icon],\n    compute: getCommandClass\n  })];\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwPopupCommandCellService.js"],"names":["DOMAPIs","popupRef","publishAnalytics","sanPopupCmdLogData","sanAnalyticsType","sanCommandId","command","sanCommandTitle","title","analyticsSvc","awCommandRenderFunction","viewModel","data","isCommandExecuting","ctxMin","commandClass","actions","openCommandPopup","visibilityLoader","executeCommand","e","eventBus","dispatch","path","value","result","logUserGesture","overrideOptions","context","getPopupContext","popup","childCommandClickCallback","getParentGroupId","parentGroupId","commandContext","getSubject","subject","pselected","selected","widgetInfo","commandId","cas","userGesture","options","scope","subPanelContext","assignWith","getStringBetweenDoubleMustaches","objValue","get","anchor","hasPopup","closeAncestorMenus","menu","dom","onKeyDownHandler","event","wcagService","icon","text","isCommand","alignment","extendedTooltip","getCommandClass","classNames","enabled","x","getCommandClassMemo","ctxParameters","additionalParameters","prop","compute"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n// Copyright (c) 2020 Siemens\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\nlet popupRef = null;\n\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n * @param {String} parentId - command id of parent of the child command\n */\nconst publishAnalytics = ( command, parentId ) => {\n     var sanPopupCmdLogData = {\n        sanAnalyticsType: 'Popup Commands',\n        sanCommandId: command.id,\n        sanCommandTitle: command.title\n    };\n    analyticsSvc.logCommands( sanPopupCmdLogData );\n};\n\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awCommandRenderFunction = ( {\n    viewModel: { dispatch, data: { isCommandExecuting } },\n    command,\n    ctxMin: { commandClass },\n    runActionWithViewModel,\n    actions: { openCommandPopup },\n    childCommandClickCallback,\n    commandContext,\n    visibilityLoader\n} ) => {\n    /**\n     * Click handler for the command button\n     *\n     * @param {Event} e Click event\n     */\n    const executeCommand = async( e ) => {\n        e.stopPropagation();\n        if( command.enabled ) {\n            eventBus.publish( 'removeMessages', {} );\n            dispatch( { path: 'data.isCommandExecuting', value: true } );\n            const result = await command.execute( runActionWithViewModel, commandContext );\n            dispatch( { path: 'data.isCommandExecuting', value: false } );\n            logUserGesture();\n            if( command.hasPopup ) {\n                const overrideOptions = result.inputData.options;\n                openCommandPopup.show( {\n                    ...overrideOptions,\n                    context: getPopupContext( overrideOptions )\n                } ).then( ( popup )=>{\n                    popupRef = popup;\n                } );\n            }\n            if( childCommandClickCallback ) {\n                childCommandClickCallback( command.hasPopup );\n            }\n        }\n\n        if( childCommandClickCallback ) {\n            childCommandClickCallback( command.hasPopup );\n        }\n        publishAnalytics( command, getParentGroupId() );\n    };\n\n    const getParentGroupId = function() {\n        let parentGroupId = '';\n        if( commandContext && commandContext.command ) {\n            parentGroupId = commandContext.command.id;\n        }\n        return parentGroupId;\n    };\n\n    const getSubject = function() {\n        let subject = {};\n        if( commandContext && commandContext.selectionData ) {\n            let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n            let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n            subject = { pselected: pselected, selected: selected };\n        }\n        return subject;\n    };\n\n    const logUserGesture = function() {\n        let widgetInfo = {\n            commandId: command.id,\n            parentGroupId: getParentGroupId(),\n            commandContext: commandContext\n        };\n        cas.notify( {\n            widgetInfo: widgetInfo,\n            userGesture: 'commandClick',\n            subject: getSubject()\n        } );\n    };\n\n    const getPopupContext = ( options )=>{\n        const scope = { commandContext };\n        let subPanelContext = assignWith( {}, options.subPanelContext, ( objValue, srcValue ) => {\n            const path = getStringBetweenDoubleMustaches( objValue || srcValue );\n            return get( scope, path );\n        } );\n\n        return {\n            anchor: command.id,\n            //TODO: Command context will need to be included in this also\n            context: {\n                command,\n                ...commandContext\n            },\n            visibilityLoader,\n            subPanelContext,\n            childCommandClickCallback: ( hasPopup ) => {\n                if( hasPopup ) {\n                    return;\n                }\n                openCommandPopup.hide();\n                closeAncestorMenus();\n            }\n        };\n    };\n\n    const closeAncestorMenus = ()=>{\n        if( !popupRef ) { return; }\n        let menu = popupRef.parentPopup;\n        // if it's a nested menu\n        while( menu && dom.get( '.aw-popup-command-bar', menu.panelEl ) ) {\n            menu.hide();\n            menu = menu.parentPopup;\n        }\n        popupRef = null;\n    };\n\n    const onKeyDownHandler = ( event ) => {\n        if( wcagService.isValidKeyPress( event ) ) {\n            event.preventDefault();\n            executeCommand( event );\n        } else {\n            wcagService.handleMoveUpOrDown( event, event.currentTarget.parentElement.parentElement );\n        }\n    };\n\n    // move to memo function?\n    if( !command.icon ) {\n        if( command.selected ) {\n            command.icon = 'cmdCheckmark';\n        } else {\n            command.icon = 'cmdBlankIcon';\n        }\n    }\n\n    return <>\n        <li ref={openCommandPopup.reference}\n            onKeyDown={onKeyDownHandler}\n            onClick={executeCommand}\n            button-id={command.id}\n            command-id={command.id}\n            data-command-id={command.id}\n            className={commandClass}\n            tabIndex={-1} //Programatically focusable but not naturally\n            aria-label={command.title}\n            title={command.extendedTooltip || command.description ? null : command.title}\n            aria-disabled={isCommandExecuting || !command.enabled}\n            role='button'\n            aria-haspopup={command.hasPopup}>\n            <div className='aw-popup-cellContentContainer'>\n                <AwPic className='aw-widget-thumbnail' iconId={command.icon}></AwPic>\n                { command.decorator && command.decorator.text && command.decorator.visibleWhen ?\n                    <div className='aw-commands-cellDecorator'>\n                        { command.decorator.className ?\n                            <div className={command.decorator.className}>{command.decorator.text}</div>\n                            : <div>{command.decorator.text}</div> }\n                    </div>\n                    : null }\n                {command.title}\n            </div>\n            { command.hasPopup ?\n                <div className='aw-widgets-groupCommandStack'>\n                    <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon>\n                </div>\n                : null }\n        </li>\n\n        <AwPopup {...openCommandPopup.options} />\n        <AwExtendedTooltip\n            reference = { openCommandPopup.reference }\n            extendedTooltipOptions = { { isCommand: true, alignment: 'VERTICAL' } }\n            extendedTooltipContext = { command }\n            extendedTooltip = { command.extendedTooltip } >\n        </AwExtendedTooltip>\n    </>;\n};\n\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} hasPopup Command popup state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\nconst getCommandClass = ( renderContext, selected, enabled, hasPopup, isCommandExecuting, icon ) => {\n    const classNames = [\n        'sw-aria-border',\n        'aw-widgets-cellListItem',\n        'aw-widgets-cellTop',\n        selected ? 'aw-state-selected' : null,\n        enabled && !isCommandExecuting ? null : 'disabled',\n        hasPopup ? 'aw-hierarchical-popup' : null\n    ].filter( x => x );\n    return classNames.join( ' ' );\n};\n\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getCommandClassMemo = ( vmDef, prop, data ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ prop.command.selected, prop.command.enabled, prop.command.hasPopup, data.isCommandExecuting, prop.command.icon ],\n        compute: getCommandClass\n    } ) ];\n};\n"]},"metadata":{},"sourceType":"module"}
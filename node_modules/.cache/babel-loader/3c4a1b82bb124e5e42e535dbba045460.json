{"ast":null,"code":"/* eslint-disable max-lines */ // Copyright (c) 2020 Siemens\n/**\n * This service provides useful APIs for the date and Time formatting. It allows to se the default date and time format for the session.\n *\n * @module js/dateTimeService\n *\n * @publishedApolloService\n */import _ from'lodash';import eventBus from'js/eventBus';import localeSvc from'js/localeService';import cfgSvc from'js/configurationService';import AwFilterService from'js/awFilterService';import{isMatch}from'date-fns';import logger from'js/logger';/**revisitme\n * Hint: config path is mocked one. we need to tune build and alias for config from assets folder\n * so we can use like, import 'config/localeDateTime'\n */import'config/localeDateTime';// Beyond angular: for some untility service which is:\n// - heavily used\n// - init function is not rich\n// put them to bootstrap for now for better code design\nexport const FLATPICKR_ID='div.flatpickr-calendar';/**\n * Default locale specific date/time values used until login is complete.\n */var _dateTimeLocaleInfo={is12HrFormat:false,sessionDateTimeFormat:'d-M-Y HH:mm',sessionDateFormat:'d-M-Y',sessionTimeFormat:'HH:mm'};/** Regular expression that matches a number between 0 and 59 */var _regMinSec=/([0-5]?\\d)/;/**\n * @private\n */var _englishDateTimeFormat={dateFilterFormat:'d-M-Y HH:mm',datePickerFormat:'d-M-Y',datePlaceholder:'DD-MMM-YYYY',timePlaceholder:'HH:MM',monthAfterYear:false,dayOfWeekAfterDay:false};/**\n * @private\n */var _englishDateFormat={dateFilterFormat:'d-M-Y',datePickerFormat:'d-M-Y',datePlaceholder:'DD-MMM-YYYY',timePlaceholder:'',monthAfterYear:false,dayOfWeekAfterDay:false};/**\n * @private\n */var _englishTimeFormat={dateFilterFormat:'HH:mm',datePickerFormat:'',datePlaceholder:'',timePlaceholder:'HH:MM',monthAfterYear:false,dayOfWeekAfterDay:false};/**\n * @private\n */var _i18n_anteMeridiem='AM';/**\n * @private\n */var _i18n_postMeridiem='PM';/**\n * Regular expression value to extract segments of a 12 hour time entry\n *\n * @private\n */var _regPattern12=null;/**\n * Regular expression value to extract segments of a 24 hour time entry\n *\n * @private\n */var _regPattern24=null;/**\n * @private\n */var _localePlaceholders={};/**\n * @private\n */var _datePickerFormat=_englishDateTimeFormat.datePickerFormat;/**\n * @private\n */var _datePlaceholder=_englishDateTimeFormat.datePlaceholder;/**\n * TRUE if the i18N requires the month to be shown after the year in the JQuery datePicker.\n *\n * @private\n */var _showMonthAfterYear=_englishDateTimeFormat.showMonthAfterYear;/**\n * @private\n */var _timePlaceholder=_englishDateTimeFormat.timePlaceholder;/**\n * List of 24 hour time selections (in current 12/24 hour format).\n *\n * @private\n */var _timeLovEntries=null;/**\n * @private\n */var _dateFilterFormat=_englishDateFormat.dateFilterFormat;/**\n * Function to build the list of time values in the drop down list of (aw-property-time-val) UI.\n *\n * @private\n *\n * @returns {LovEntry[]} An array of 'lovEntry' populated with the internal an display values.\n */var _buildTimeLovEntries=function(){var lovEntries=[];var _pad=function(number){if(number<10){return'0'+number;}return number;};var msHr=1000*60*60;var msLimit=msHr*24;var msInc=1000*60*30;for(var msTime=0;msTime<msLimit;msTime+=msInc){var date=new Date(msTime);var utcHours=date.getUTCHours();var utcMinutes=date.getUTCMinutes();var mer;var disp;if(_dateTimeLocaleInfo.is12HrFormat){if(utcHours<12){if(utcHours===0){utcHours+=12;}mer=_i18n_anteMeridiem;}else{if(utcHours>12){utcHours-=12;}mer=_i18n_postMeridiem;}disp=_pad(utcHours)+':'+_pad(utcMinutes)+' '+mer;}else{disp=_pad(utcHours)+':'+_pad(utcMinutes);}var lovEntry={propInternalValue:msTime,propDisplayValue:disp};lovEntries.push(lovEntry);}return lovEntries;};/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 12 hours, optional\n *         minutes, optional seconds and optional meridiem.\n */var _getTimePattern12Hr=function(){if(!_regPattern12){var _regHr12=/(1[012]|0\\d|\\d)/;var _regGap=/\\s*/;var _regMeridiem=new RegExp('('+_i18n_anteMeridiem+//\n'|'+_i18n_postMeridiem+'|a|p|am|pm'+')?');/** hh:mm:ss a */var _reg12HrMnSec=new RegExp('(^'+_regHr12.source+//\n':'+_regMinSec.source+':'+_regMinSec.source+//\n_regGap.source+_regMeridiem.source+'$)');/** hh:mm a */var _reg12HrMin=new RegExp('(^'+_regHr12.source+//\n':'+_regMinSec.source+_regGap.source+//\n_regMeridiem.source+'$)');/** hh a */var _reg12Hr=new RegExp('(^'+_regHr12.source+//\n_regGap.source+_regMeridiem.source+'$)');// aggregate of all sub expressions\n_regPattern12=new RegExp(_reg12HrMnSec.source+//\n'|'+_reg12HrMin.source+'|'+_reg12Hr.source);}return _regPattern12;};/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 24 hours, optional minutes\n *         and optional seconds.\n */var _getTimePattern24Hr=function(){if(!_regPattern24){var _regHr24=/([0-1]?\\d|2[0-3])/;/** HH:mm:ss : https://regex101.com/ */var _reg24HrMnSec=new RegExp('(^'+_regHr24.source+//\n':'+_regMinSec.source+':'+_regMinSec.source+'$)');/** HH:mms */var _reg24HrMin=new RegExp('(^'+_regHr24.source+//\n':'+_regMinSec.source+'$)');/** HH */var _reg24Hr=new RegExp('(^'+_regHr24.source+'$)');// aggregate of all sub expressions\n_regPattern24=new RegExp(_reg24HrMnSec.source+//\n'|'+_reg24HrMin.source+'|'+_reg24Hr.source);}return _regPattern24;};/**\n * Function to validate normalized time\n *\n * @private\n *\n * @param {String} normalizedTimeString - normalized time string\n *\n * @return {Boolean}\n */var isNormalizedTimeValid=function(normalizedTimeString){let timeString=normalizedTimeString;if(!timeString.includes(':')||!isMatch(timeString,getTimeFilterFormat())){return false;}return true;};/**\n * Function to tokenize the time input.\n *\n * @private\n *\n * @param {String} timeString - Time string to tokenize in 'hh:mmm:ss a' format.\n *\n * @return {Number[]} Array of integers representing extracted hours, minutes and seconds.\n */var _tokenizeTime=function(timeString){if(!isNormalizedTimeValid(timeString)){return null;}var time_AmPm=timeString.split(' ');var hour_minuteArray=time_AmPm[0].split(/[:aApP\\s]+/);var hour=0;if(hour_minuteArray.length>0){hour=parseInt(hour_minuteArray[0],10);if(_dateTimeLocaleInfo.is12HrFormat){if(time_AmPm[1]===_i18n_postMeridiem){hour+=12;if(hour>=24){hour=0;}}}if(hour>23){hour=23;}}var minute=0;if(hour_minuteArray.length>1){minute=parseInt(hour_minuteArray[1],10);if(minute>59){minute=59;}}var second=0;if(hour_minuteArray.length>2){second=parseInt(hour_minuteArray[2],10);if(isNaN(second)){second=0;}if(second>59){second=59;}}var splitTimeData=[];splitTimeData[0]=hour;splitTimeData[1]=minute;splitTimeData[2]=second;return splitTimeData;};/**\n * @param {String} dateFormat - The string from the TextServer used to construct the return date and/or time Format.\n *\n * @param {Boolea} includeDate - TRUE if date should be included in the format\n *\n * @param {Boolean} includeTime - TRUE if time should be included in the format\n *\n * @return {Object} An object with properties:<br>\n *         'dateFilterFormat' set with the converted pattern compatible with AngularJS \"$filter('date')\"\n *         <p>\n *         'datePickerFormat' set with the converted pattern compatible with the 'dateFormat' property (in the\n *         'options' object) and 'formatDate' and 'parseDate' functions of JQueryUI's 'datePicker'.\n *         <p>\n *         'datePlaceholder' set with i18N text to display in an empty date input field.\n *         <p>\n *         'timePlaceholder' set with i18N text to display in an empty time input field.\n *         <p>\n *         'monthAfterYear' set with TRUE if the i18N requires the month to be shown after the year in the JQuery\n *         datePicker.\n */var _getDateFormatByServerString=function(dateFormat,includeDate,includeTime){// eslint-disable-line complexity\nvar dateFilterFormat='';var datePickerFormat='';var datePlaceholder='';var timePlaceholder='';var localePlaceHolder=_localePlaceholders[localeSvc.getLocale()]||_localePlaceholders.en_US;var monthAfterYear=localePlaceHolder.monthAfterYear;_dateTimeLocaleInfo.is12HrFormat=false;if(dateFormat&&dateFormat.length>0){var containsSeconds=dateFormat.indexOf('%S')!==-1;var format=dateFormat.trim();var formatLength=format.length;for(var i=0;i<formatLength;i++){var c=format.charAt(i);switch(c){case'%':// ignore printf-specific char\nbreak;case'd':if(includeDate){// d: day of the month(0-31) -> dd: day in month (two digits)\ndateFilterFormat=dateFilterFormat.concat('dd');datePickerFormat=datePickerFormat.concat('d');datePlaceholder=datePlaceholder.concat(localePlaceHolder.day);}break;case'b':if(includeDate){// b: abbreviated month name -> MMM: month in year (full month name) not supported by Java.\ndateFilterFormat=dateFilterFormat.concat('MMM');datePickerFormat=datePickerFormat.concat('M');datePlaceholder=datePlaceholder.concat(localePlaceHolder.month_3);}break;case'B':if(includeDate){// B: full month name -> MMMMM: month in year (full month name)\ndateFilterFormat=dateFilterFormat.concat('MMMM');datePickerFormat=datePickerFormat.concat('M');datePlaceholder=datePlaceholder.concat(localePlaceHolder.month_4);}break;case'm':if(includeDate){// m: month(01-12) -> MM: month in year (two digits)\ndateFilterFormat=dateFilterFormat.concat('MM');datePickerFormat=datePickerFormat.concat('m');datePlaceholder=datePlaceholder.concat(localePlaceHolder.month_2);}break;case'y':if(includeDate){// y: year without century(00-99) -> yy: year (two digits).\ndateFilterFormat=dateFilterFormat.concat('yy');datePickerFormat=datePickerFormat.concat('y');datePlaceholder=datePlaceholder.concat(localePlaceHolder.year_2);}break;case'Y':if(includeDate){// Y: year with century(1970-2069) ->yyyy: year (four digits)\ndateFilterFormat=dateFilterFormat.concat('yyyy');datePickerFormat=datePickerFormat.concat('yy');datePlaceholder=datePlaceholder.concat(localePlaceHolder.year_4);}break;case'H':if(includeTime){// H: hour(24-hour clock)(00-23) ->HH: hour in day (0~23) (two digits)\ndateFilterFormat=dateFilterFormat.concat('HH');timePlaceholder=timePlaceholder.concat(localePlaceHolder.hours);}break;case'I':if(includeTime){_dateTimeLocaleInfo.is12HrFormat=true;// I: hour(12-hour clock)(01-12) ->hh: hour in am/pm (1~12) (two digits)\ndateFilterFormat=dateFilterFormat.concat('hh');timePlaceholder=timePlaceholder.concat(localePlaceHolder.hours);}break;case'M':if(includeTime){// M: minute(00-59) -> mm: minute in hour (two digits)\ndateFilterFormat=dateFilterFormat.concat('mm');timePlaceholder=timePlaceholder.concat(localePlaceHolder.minutes);/**\n                         * Note: This is a little 'odd' but the placeholder has to have 'seconds' in it even if the\n                         * general display for time does not.\n                         */if(!containsSeconds){timePlaceholder=timePlaceholder.concat(':'+localePlaceHolder.seconds);}}break;case'S':if(includeTime){// S: second(00-59) -> ss: second in minute (two digits)\ndateFilterFormat=dateFilterFormat.concat('ss');timePlaceholder=timePlaceholder.concat(localePlaceHolder.seconds);}break;default:// If \":\" exists in the format, assume it must be a separator for time.\nif(!includeTime&&c===':'){break;}// If \"-\" exists in the format, assume it must be a separator for date.\nif(!includeDate&&c==='-'){break;}// If \".\" exists in the format, assume it must be a separator for date.\nif(!includeDate&&c==='.'){break;}// If \"/\" exists in the format, assume it must be a separator for date.\nif(!includeDate&&c==='/'){break;}// If \",\" exists in the format, assume it must be a separator for date.\nif(!includeDate&&c===','){break;}// If \" \" exists in the format, assume it must be a separator for date.\nif(!includeDate&&c===' '){break;}// If \"年\" (year) \"月\" (month) or \"日\" (day) exists in the format, assume it must be a separator for date.\nif(!includeDate&&(c==='年'||c==='月'||c==='日')){break;}dateFilterFormat+=c;if(c===':'){timePlaceholder+=c;}if(c==='-'||c==='.'||c==='/'||c===','||c===' '){datePickerFormat+=c;datePlaceholder+=c;}break;}}}else{if(includeDate){if(includeTime){dateFilterFormat=_englishDateTimeFormat.dateFilterFormat;datePickerFormat=_englishDateTimeFormat.datePickerFormat;datePlaceholder=_englishDateTimeFormat.datePlaceholder;timePlaceholder=_englishDateTimeFormat.timePlaceholder;monthAfterYear=_englishDateTimeFormat.monthAfterYear;}else{dateFilterFormat=_englishDateFormat.dateFilterFormat;datePickerFormat=_englishDateFormat.datePickerFormat;datePlaceholder=_englishDateFormat.datePlaceholder;timePlaceholder=_englishDateFormat.timePlaceholder;monthAfterYear=_englishDateFormat.monthAfterYear;}}else if(includeTime){dateFilterFormat=_englishTimeFormat.dateFilterFormat;datePickerFormat=_englishTimeFormat.datePickerFormat;datePlaceholder=_englishTimeFormat.datePlaceholder;timePlaceholder=_englishTimeFormat.timePlaceholder;monthAfterYear=_englishTimeFormat.monthAfterYear;}}/**\n     * Insert AM/PM indicator (if necessary)<BR>\n     * If so: Insert it after either seconds, minutes or hours.\n     */if(_dateTimeLocaleInfo.is12HrFormat&&includeTime){var ndx=dateFilterFormat.lastIndexOf('ss');if(ndx!==-1){dateFilterFormat=dateFilterFormat.substring(0,ndx+2)+' a'+dateFilterFormat.substring(ndx+2);}else{ndx=dateFilterFormat.lastIndexOf('mm');if(ndx!==-1){dateFilterFormat=dateFilterFormat.substring(0,ndx+2)+' a'+dateFilterFormat.substring(ndx+2);}else{ndx=dateFilterFormat.lastIndexOf('hh');if(ndx!==-1){dateFilterFormat=dateFilterFormat.substring(0,ndx+2)+' a'+dateFilterFormat.substring(ndx+2);}}}}return{dateFilterFormat:dateFilterFormat.trim(),datePickerFormat:datePickerFormat.trim(),datePlaceholder:datePlaceholder.trim(),timePlaceholder:timePlaceholder.trim(),monthAfterYear:monthAfterYear};};let exports;var _setupDateTimeLocaleInfo=function(){let filter=AwFilterService.instance;if(!_nullLocalDateString){_nullLocalDateString=filter('date')(_nullLocalDate,'yyyy-MM-dd\\'T\\'HH:mm:ssZ');}localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages').then(textBundle=>{if(!textBundle){logger.info('Unable to load dateTimeServiceMessages textBundle');return;}_i18n_anteMeridiem=textBundle.anteMeridiem;_i18n_postMeridiem=textBundle.postMeridiem;//revisitme: AwLocaleService is not available\n// let locale = AwLocaleService.instance;\nlet locale;if(locale){locale.id=localeSvc.getLocale();locale.DATETIME_FORMATS.AMPMS=[textBundle.anteMeridiem,textBundle.postMeridiem];locale.DATETIME_FORMATS.DAY=[textBundle.dayName_01,textBundle.dayName_02,textBundle.dayName_03,textBundle.dayName_04,textBundle.dayName_05,textBundle.dayName_06,textBundle.dayName_07];locale.DATETIME_FORMATS.MONTH=[textBundle.monthName_01,textBundle.monthName_02,textBundle.monthName_03,textBundle.monthName_04,textBundle.monthName_05,textBundle.monthName_06,textBundle.monthName_07,textBundle.monthName_08,textBundle.monthName_09,textBundle.monthName_10,textBundle.monthName_11,textBundle.monthName_12];locale.DATETIME_FORMATS.SHORTDAY=[textBundle.dayNameShort_01,textBundle.dayNameShort_02,textBundle.dayNameShort_03,textBundle.dayNameShort_04,textBundle.dayNameShort_05,textBundle.dayNameShort_06,textBundle.dayNameShort_07];locale.DATETIME_FORMATS.SHORTMONTH=[textBundle.monthNameShort_01,textBundle.monthNameShort_02,textBundle.monthNameShort_03,textBundle.monthNameShort_04,textBundle.monthNameShort_05,textBundle.monthNameShort_06,textBundle.monthNameShort_07,textBundle.monthNameShort_08,textBundle.monthNameShort_09,textBundle.monthNameShort_10,textBundle.monthNameShort_11,textBundle.monthNameShort_12];}eventBus.publish('dateTime.changed',_dateTimeLocaleInfo);}).catch(err=>{logger.error(err);});localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.anteMeridiem').then(result=>{_i18n_anteMeridiem=result;eventBus.publish('dateTime.changed',_dateTimeLocaleInfo);});localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.postMeridiem').then(result=>{_i18n_postMeridiem=result;eventBus.publish('dateTime.changed',_dateTimeLocaleInfo);});};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {Number} The numeric value corresponding to the time for the given date according to universal time.\n */var _getDateTime=function(dateToFormat){var dateTime;if(!dateToFormat){return dateTime;}if(_.isString(dateToFormat)||_.isNumber(dateToFormat)){dateTime=dateToFormat;}else{dateTime=dateToFormat.getTime();}return dateTime;};/**\n * {String} Null date/time string for 1 Jan, 0001 at midnight GMT.\n * @ignore\n */export let NULLDATE='0001-01-01T00:00:00+00:00';/**\n * Definition of 'null' or 'not yet set' date time.\n * <P>\n * Same value as AW's IDateService.getNullLocalDate().\n *\n * @private\n */var _nullGmtDate=new Date(NULLDATE);/**\n * @private\n */var offset=_nullGmtDate.getTimezoneOffset();/**\n * @private\n */var _nullGmtTime=_getDateTime(_nullGmtDate);/**\n * @private\n */var _nullLocalDateString;/**\n   * @private\n   */var _nullLocalDate=new Date(_nullGmtTime+offset*60*1000);/**\n   */ /**\n * @private\n */var _epochDate=new Date(0);/**\n * ************************************<BR>\n * ***** Define service API <BR>\n * ************************************<BR>\n */ /**\n * @return {Promise} TODO\n *\n *@ignore\n */export let getJQueryDatePickerTextBundle=async function(){await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.');return{closeText:await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.closeText'),prevText:await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.prevText'),nextText:await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.nextText'),currentText:await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.currentText'),monthNames:[await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_01'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_02'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_03'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_04'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_05'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_06'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_07'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_08'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_09'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_10'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_11'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_12')],monthNamesShort:[await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_01'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_02'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_03'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_04'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_05'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_06'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_07'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_08'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_09'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_10'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_11'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_12')],dayNames:[await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_01'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_02'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_03'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_04'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_05'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_06'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_07')],dayNamesShort:[await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_01'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_02'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_03'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_04'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_05'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_06'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_07')],dayNamesMin:[await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_01'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_02'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_03'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_04'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_05'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_06'),await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_07')],weekHeader:await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.weekHeader'),dateFormat:_datePickerFormat,firstDay:1,isRTL:false,showMonthAfterYear:_showMonthAfterYear,yearSuffix:await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.yearSuffix')};};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date of the given Date object formatted according to current user session format.\n */export let formatDate=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,exports.getDateFilterFormat());}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to current user session\n *          format.\n */export let formatDateTime=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,exports.getDateTimeFilterFormat());}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format.\n */export let formatTime=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,exports.getTimeFilterFormat());}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format\n *          and meant for display in an lovEntry (i.e. without 'seconds').\n * @ignore\n */export let formatTimeLovEntry=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,exports.getTimeLovEntryFilterFormat());}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */export let formatSessionDateTime=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var formattedDate='';var dateValue=_getDateTime(dateToFormat);if(_.isNumber(dateValue)||_.isString(dateValue)){formattedDate=filter('date')(dateValue,exports.getSessionDateTimeFormat());}else if(_.isDate(dateValue)){formattedDate=filter('date')(_getDateTime(dateValue),exports.getSessionDateTimeFormat());}return formattedDate.toString().trim();}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */export let formatSessionDate=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);var format=exports.getSessionDateFormat();if(format.length>0){return filter('date')(dateValue,exports.getSessionDateFormat());}return'';}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The time portion of the given Date object formatted according to current user session format.\n */export let formatSessionTime=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);var format=exports.getSessionTimeFormat();if(format.length>0){return filter('date')(dateValue,exports.getSessionTimeFormat());}return'';}return dateToFormat.toString();};/**\n * Example: Tuesday-Sep 27\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date of the given Date object formatted according to current user session format.\n */export let formatWeekdayMonthAndDayOfMonth=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);var dayOfWeek=filter('date')(dateValue,'EEEE');var month=exports.formatAbbreviatedMonth(dateValue);var dayOfMonth=exports.formatFullDayOfMonth(dateValue);var locale=localeSvc.getLocale();if(_localePlaceholders[locale].dayOfWeekAfterDay){return month+_localePlaceholders[locale].monthDaySeparator+dayOfMonth+_localePlaceholders[locale].dayOfWeekSeparator+dayOfWeek;}return dayOfWeek+_localePlaceholders[locale].dayOfWeekSeparator+month+_localePlaceholders[locale].monthDaySeparator+dayOfMonth;}return dateToFormat.toString();};/**\n * Example: 27\n * <P>\n * Note: In some locales (i.e. ja_JP) there are extra symbols added to this number. This function will handle this\n * case.\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */export let formatFullDayOfMonth=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);var dayOfMonth=filter('date')(dateValue,'dd');var locale=localeSvc.getLocale();if(_localePlaceholders[locale].fullDayOfMonth){dayOfMonth+=_localePlaceholders[locale].day;}return dayOfMonth;}return dateToFormat.toString();};/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */export let formatAbbreviatedMonth=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,'MMM');}return dateToFormat.toString();};/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */export let formatFullMonth=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,'MMMM');}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to UTC format.\n */export let formatUTC=function(dateToFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,'yyyy-MM-dd\\'T\\'HH:mm:ssZ');}return dateToFormat.toString();};/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @param {String} dateFormat - format. This is a EWI data collection object time stamp format.\n *\n * @returns {String} The date & time of the given Date object formatted according to the input dateFormat.\n */export let formatNonStandardDate=function(dateToFormat,dateFormat){if(exports.isNullDate(dateToFormat)){return'';}let filter=AwFilterService.instance;if(filter){var dateValue=_getDateTime(dateToFormat);return filter('date')(dateValue,dateFormat);}return dateToFormat.toString();};/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */export let getDateFilterFormat=function(){return _dateFilterFormat;};/**\n * Format compatible with the 'dateFormat' property (in the 'options' object) and 'formatDate' and 'parseDate'\n * functions of JQueryUI's 'datePicker'.\n * <P>\n * Examples: <BR>\n * Format 'd-M-yy' would return \"01-Apr-2016\"<BR>\n * Format 'mm.dd.yy' would return \"04.01.2016\"<BR>\n *\n * @return {String} Date entry format for use in JQueryUI's datepicker API.\n */export let getDateFormat=function(){return _datePickerFormat;};/**\n * @return {String} User oriented text used to indicate the required format of the date entry (i.e. \"yy.mm.dd\",\n *         \"day-month-year\", etc.).\n */export let getDateFormatPlaceholder=function(){return _datePlaceholder;};/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */export let getDateTimeFilterFormat=function(){return exports.getDateFilterFormat()+_localePlaceholders[localeSvc.getLocale()].dateTimeSeparator+exports.getTimeFilterFormat();};/**\n * @param {DateTimeApi} dateApi - Object containing the current date/time context.\n *\n * @return {Date} Date object set to either 'today' or to 'minDate' or 'maxDate' if 'today' is outside those ranges.\n *         The 'minDate' or 'maxDate' will be chosen based on which of those values 'today' is closer to.\n * @ignore\n */export let getDefaultDate=function(dateApi){var defaultDate;var limitDate;if(dateApi.isTimeEnabled){if(dateApi.isDateEnabled){/**\n             * Deal with date & time\n             *\n             * @private\n             */defaultDate=new Date();defaultDate.setHours(0);defaultDate.setMinutes(0);defaultDate.setSeconds(0);if(dateApi.minDate&&defaultDate<dateApi.minDate){return dateApi.minDate;}if(dateApi.maxDate&&defaultDate>dateApi.maxDate){return dateApi.maxDate;}}else{/**\n             * Deal with time only. Set to 'epoch' and then set hours/mins/secs\n             * @private\n             */defaultDate=new Date(0);defaultDate.setHours(0);defaultDate.setMinutes(0);defaultDate.setSeconds(0);if(dateApi.minDate){limitDate=new Date(0);var jsMinDate=exports.getJSDate(dateApi.minDate);limitDate.setHours(jsMinDate.getHours());limitDate.setMinutes(jsMinDate.getMinutes());limitDate.setSeconds(jsMinDate.getSeconds());if(defaultDate<limitDate){return limitDate;}}if(dateApi.maxDate){limitDate=new Date(0);var jsMaxDate=exports.getJSDate(dateApi.maxDate);limitDate.setHours(jsMaxDate.getHours());limitDate.setMinutes(jsMaxDate.getMinutes());limitDate.setSeconds(jsMaxDate.getSeconds());if(defaultDate>limitDate){return limitDate;}}}}else{if(dateApi.isDateEnabled){/**\n             * Deal with date only. Set to hours/mins/secs to midnight local time.\n             *\n             * @private\n             */defaultDate=new Date();defaultDate.setHours(0);defaultDate.setMinutes(0);defaultDate.setSeconds(0);if(dateApi.minDate){limitDate=exports.getJSDate(dateApi.minDate);limitDate.setHours(0);limitDate.setMinutes(0);limitDate.setSeconds(0);if(defaultDate<limitDate){return limitDate;}}if(dateApi.maxDate){limitDate=exports.getJSDate(dateApi.maxDate);limitDate.setHours(0);limitDate.setMinutes(0);limitDate.setSeconds(0);if(defaultDate>limitDate){return limitDate;}}}else{defaultDate=exports.getNullDate();}}return defaultDate;};/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n * @ignore\n */export let getEnglishDateTimeFormat=function(){return _englishDateTimeFormat.dateFilterFormat;};/**\n * @return {String} AngularJS $filter format to display a date entry in.\n * @ignore\n */export let getEnglishDateFormat=function(){return _englishDateFormat.dateFilterFormat;};/**\n * @return {String} AngularJS $filter format to display a time entry in.\n * @ignore\n */export let getEnglishTimeFormat=function(){return _englishTimeFormat.dateFilterFormat;};/**\n * @return {Date} The cached Date object set with the same date/time as the special 'epoch' or '1-Jan-1970 00:00:00\n *         GMT' value.\n * @ignore\n */export let getEpochDate=function(){return _epochDate;};/**\n * @param {Number} timeValue - Milliseconds since unix 'epoch'.\n *\n * @returns {Date} The given string value converted into a time on 'January 1, 0001' (or NULL if the string contains\n *          an invalid time format).\n */export let getDateFromTimeValue=function(timeValue){if(!timeValue){return exports.getNullDate();}var trim=timeValue.trim();/**\n     * Remove any trailing ':' before trying to match the pattern\n     */if(trim.length>0&&trim.charAt(trim.length-1)===':'){trim=trim.substring(0,trim.length-1);}var pattern=_dateTimeLocaleInfo.is12HrFormat?_getTimePattern12Hr():_getTimePattern24Hr();var matches=trim.match(pattern);if(matches){var fields={};if(_dateTimeLocaleInfo.is12HrFormat){if(matches[1]){fields.disp=matches[1];fields.hr=matches[2];fields.min=matches[3];fields.sec=matches[4];fields.mer=matches[5];}else if(matches[6]){fields.disp=matches[6];fields.hr=matches[7];fields.min=matches[8];fields.mer=matches[9];fields.sec='0';}else if(matches[10]){fields.disp=matches[10];fields.hr=matches[11];fields.min='0';fields.sec='0';fields.mer=matches[12];}/**\n             * If no meridiem, assume PM\n             */if(!fields.mer){fields.mer=_i18n_postMeridiem;}fields.mer=fields.mer.toLowerCase();if(fields.mer===_i18n_postMeridiem.toLowerCase()||fields.mer==='p'||fields.mer==='pm'){fields.hr=parseInt(fields.hr,10)+12;if(fields.hr>=24){fields.hr='0';}else{fields.hr=fields.hr.toString();}}}else{if(matches[1]){fields.disp=matches[1];fields.hr=matches[2];fields.min=matches[3];fields.sec=matches[4];}else if(matches[5]){fields.disp=matches[5];fields.hr=matches[6];fields.min=matches[7];fields.sec='0';}else if(matches[8]){fields.disp=matches[0];fields.hr=matches[8];fields.min='0';fields.sec='0';}}if(fields.hr){return new Date('0001',0,1,fields.hr,fields.min,fields.sec);}}return null;};/**\n * @param {String} timeValue - in HH:MM:SS format\n * @returns coverted time from a HH:MM:SS format to ms\n */let getTimeInMs=function(timeValue){if(timeValue===null){return null;}let hourInMSec=timeValue[0]*60*60*1000;let minInMSec=timeValue[1]*60*1000;let mSec=timeValue[2]*1000;return hourInMSec+minInMSec+mSec;};/**\n * @param {*} timeValue - 'x' or 'x:y' or 'x:y:z' format\n * @returns coverted time from a string to ms\n */export let getTimeInMilliSec=timeValue=>{if(!_.isString(timeValue)||timeValue===''){return timeValue;}let normalizedTime=normalizeTimeString(timeValue);return getTimeInMs(_tokenizeTime(normalizedTime));};/**\n * Returns a new Date object based on the given Date object or value.\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser. The 'null date' used in AW\n * did not always create a valid Date object.\n *\n * @param {Object} dateToTest - Object that MAY be a JS Date or MAY be the number of milliseconds since 'epoch'.\n *\n * @return {Date} A new JS Date object based on the given object (or 'null' date if no other JS date possible).\n * @ignore\n */export let getJSDate=function(dateToTest){/**\n     * D-24274: Date Array LOV fails to clear field<BR>\n     * On Firefox, When the 'dateToTest' has the 'null' date value, the 'new Date()' constructor creates an invalid\n     * Date object. This causes 'NaN' problems later when we try to get a formatted string from this invalid Date.\n     * <P>\n     * We check here for that case and create a date based on the 'null' date time value.\n     */if(exports.isNullDate(dateToTest)){return new Date(_getDateTime(_nullLocalDate));}var jsDate=null;try{jsDate=new Date(dateToTest);}finally{if(!jsDate){jsDate=new Date(_getDateTime(_nullLocalDate));}}return jsDate;};/**\n * @param {String} timeValue - String value to test.\n *\n * @returns {String} The given string value now cleaned of any invalid characters.\n * @ignore\n */export let getNormalizedTimeValue=function(timeValue){if(isMatch(timeValue,'dd-MMM-yyyy HH:mm')){return'';}var nDate=exports.getDateFromTimeValue(timeValue);if(nDate){return exports.formatTime(nDate);}return timeValue;};/**\n * @return {Date} The cached Date object set with the same date/time as the special 'null' or 'not yet set' value.\n */export let getNullDate=function(){return _nullLocalDate;};/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */export let getSessionDateTimeFormat=function(){return _dateTimeLocaleInfo.sessionDateTimeFormat;};/**\n * @return {String} AngularJS $filter format to display a date entry in.\n */export let getSessionDateFormat=function(){return _dateTimeLocaleInfo.sessionDateFormat;};/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */export let getSessionTimeFormat=function(){return _dateTimeLocaleInfo.sessionTimeFormat;};/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */export let getTimeFilterFormat=function(){if(_dateTimeLocaleInfo.is12HrFormat){return'hh:mm:ss a';}return'HH:mm:ss';};/**\n * @return {String} AngularJS $filter format to display a time lovEntry in.\n * @ignore\n */export let getTimeLovEntryFilterFormat=function(){if(_dateTimeLocaleInfo.is12HrFormat){return'hh:mm a';}return'HH:mm';};/**\n * @return {String} User oriented text used to indicate the required format of the time entry (i.e. \"12:00 AM\",\n *         \"Hours:Minutes\", etc.).\n */export let getTimeFormatPlaceholder=function(){var timePlaceholder=_timePlaceholder;if(_dateTimeLocaleInfo.is12HrFormat){timePlaceholder=timePlaceholder.concat(' '+_i18n_anteMeridiem+'/'+_i18n_postMeridiem);}return timePlaceholder;};/**\n * @returns {LovEntry[]} current list of time slots.\n * @ignore\n */export let getTimeLovEntries=function(){if(!_timeLovEntries){_timeLovEntries=_buildTimeLovEntries();}let objectValue={};objectValue.timeList=_timeLovEntries;return objectValue;};/**\n * @param {Object} dateToTest - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @return {Boolean} TRUE if the given test object represents the same date/time as the special 'null' or 'not yet\n *         set' value.\n */export let isNullDate=function(dateToTest){if(!dateToTest){return true;}var dateTime;if(_.isString(dateToTest)){dateTime=dateToTest;return dateTime===_nullLocalDateString||dateTime===exports.NULLDATE;}if(_.isNumber(dateToTest)){dateTime=dateToTest;}else{dateTime=_getDateTime(dateToTest);}return dateTime===_getDateTime(_nullLocalDate)||dateTime===_nullGmtTime;};/**\n * @param {Date} date1 - 1st date to compare.\n *\n * @param {Date} date2 - 2nd date to compare.\n *\n * @return {Number} The value <code>0</code> if the 'date2' is equal to 'date1'; a value less than <code>0</code>\n *         if 'date1' is less than 'date2'; and a value greater than <code>0</code> if 'date1' is greater than\n *         'date2'.\n */export let compare=function(date1,date2){var date1Final=date1;// Note: Current dbValue could be a JavaUtil class from GWT\nif(date1Final&&date1Final.constructor!==Date){date1Final=new Date(date1);}if(exports.isNullDate(date1Final)){if(date2&&!exports.isNullDate(date2)){return-1;}return 0;}if(exports.isNullDate(date2)){return 1;}var diff=_getDateTime(date1Final)-_getDateTime(date2);if(diff===0){return 0;}if(diff>0){return 1;}return-1;};/**\n * @param {String} timeString -\n *\n * @return {String} The input string normalized for display.\n */export let normalizeTimeString=function(timeString){if(timeString&&timeString!==''){return exports.getNormalizedTimeValue(timeString);}return'';};/**\n * @param {Date} dateInput - Date Object to modify\n *\n * @param {String} timeString - Time string that has been 'normalized' in 'HH:mm:ss' (24hr) or 'hh:mm:ss a' (12hr)\n *            format.\n *\n * @return {Date} The input Date object modified and set with the given timeString input.\n */export let setTimeIntoDateModel=function(dateInput,timeString){if(timeString!==''&&!isMatch(timeString,getTimeFilterFormat())){return dateInput;}if(timeString&&timeString!==''){var time=_tokenizeTime(timeString);dateInput.setHours(time[0]);dateInput.setMinutes(time[1]);dateInput.setSeconds(time[2]);}else{dateInput.setHours(0);dateInput.setMinutes(0);dateInput.setSeconds(0);}return dateInput;};/**\n * Set the user session specific locale and date/time format.\n *\n * @param {String} pattern - String returned as the \"DefaultDateFormat\" parameter supplied by the server during\n *            login (e.g. \"%d-%b-%Y %H:%M\").\n *            <P>\n *            Note: This pattern is not directly compatible with the {@link DateTimeFormat} class and must be\n *            converted into a compatible string before it is used with that class.\n */export let setSessionDateTimeFormat=function(pattern){// Test pattern for simulating a server with a 4-digit year, 2-digit month & 12hr time format and slightly different date pattern\n// Uncomment this line to use....Very handy *** do not delete ***\n// pattern = \"%Y-%b-%d %I:%M:%S\";\n//\n// Test pattern for simulating a server with a 2-digit month & year (in German placement order) and 24hr time format w/o/ seconds\n// Uncomment this line to use....Very handy *** do not delete ***\n// pattern = \"%d.%m.%y %H:%M\";\n//\n// Test pattern for simulating a server with a full month, day & 4-digit year and no time format\n// Uncomment this line to use....Very handy *** do not delete ***\n// pattern = \"%B %d, %Y\";\n//\n// Test pattern for simulating a server with a 2-digit month & year (in English placement order) and 24hr time format w/o/ seconds\n// Uncomment this line to use....Very handy *** do not delete ***\n// pattern = \"%m-%d-%Y %H:%M\";\nvar patternDateTime=_getDateFormatByServerString(pattern,true,true);var patternDate=_getDateFormatByServerString(pattern,true,false);var patternTime=_getDateFormatByServerString(pattern,false,true);_dateTimeLocaleInfo.sessionDateTimeFormat=patternDateTime.dateFilterFormat;_dateTimeLocaleInfo.sessionDateFormat=patternDate.dateFilterFormat;_dateTimeLocaleInfo.sessionTimeFormat=patternTime.dateFilterFormat;_dateFilterFormat=patternDate.dateFilterFormat;_datePickerFormat=patternDate.datePickerFormat;_datePlaceholder=patternDate.datePlaceholder;_timePlaceholder=patternTime.timePlaceholder;_showMonthAfterYear=patternDate.monthAfterYear;eventBus.publish('dateTime.sessionChanged',_dateTimeLocaleInfo);};/**\n * Initialize the dateTimeService\n */export let init=function(){/**\n     * Set locale and a default format now that the 'localeService' is valid.\n     */_localePlaceholders=cfgSvc.getCfgCached('localeDateTime');exports.setSessionDateTimeFormat('%d-%b-%Y %H:%M');/**\n     * Now that we have the localService, use its current value to init dateTime stuff.\n     */_setupDateTimeLocaleInfo();/**\n     * Setup to listen to changes in locale.\n     *\n     * @param {String} locale - String with the updated locale value.\n     */eventBus.subscribe('locale.changed',function(){_setupDateTimeLocaleInfo();},'dateTimeService');};exports={NULLDATE,getTimeInMilliSec,getJQueryDatePickerTextBundle,formatDate,formatDateTime,formatTime,formatTimeLovEntry,formatSessionDateTime,formatSessionDate,formatSessionTime,formatWeekdayMonthAndDayOfMonth,formatFullDayOfMonth,formatAbbreviatedMonth,formatFullMonth,formatUTC,formatNonStandardDate,getDateFilterFormat,getDateFormat,getDateFormatPlaceholder,getDateTimeFilterFormat,getDefaultDate,getEnglishDateTimeFormat,getEnglishDateFormat,getEnglishTimeFormat,getEpochDate,getDateFromTimeValue,getJSDate,getNormalizedTimeValue,getNullDate,getSessionDateTimeFormat,getSessionDateFormat,getSessionTimeFormat,getTimeFilterFormat,getTimeLovEntryFilterFormat,getTimeFormatPlaceholder,getTimeLovEntries,isNullDate,compare,normalizeTimeString,setTimeIntoDateModel,setSessionDateTimeFormat,init};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is the primary service used to create, test and manage the internal properties of CommandHandler Objects used in\n * AW.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/commandHandlerService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\n\nlet exports;\n/**\n * Hide the command panel if the handler is active\n *\n * @param {CommandHandler} commandHdlr - The command handler\n */\n\nvar hideIfActive = function (commandHdlr) {\n  var activeCommandContexts = ['activeNavigationCommand', 'activeToolsAndInfoCommand', 'sidenavCommandId'];\n  var commandIdArray = [];\n  activeCommandContexts.forEach(function (ctx) {\n    // Zero compile commands share visibility which means the \"open\" command will only have same commandId\n    var isCommandOpen = appCtxService.getCtx(ctx + '.commandId') && appCtxService.getCtx(ctx + '.commandId') === commandHdlr.commandId || appCtxService.getCtx(ctx) && appCtxService.getCtx(ctx) === commandHdlr.commandId;\n\n    if (isCommandOpen) {\n      var commandId = appCtxService.getCtx(ctx + '.commandId') === commandHdlr.commandId ? appCtxService.getCtx(ctx + '.commandId') : appCtxService.getCtx(ctx);\n\n      if (!commandIdArray.includes(commandId)) {\n        var id = null;\n\n        if (ctx === 'activeNavigationCommand') {\n          id = 'aw_navigation';\n        } else if (ctx === 'activeToolsAndInfoCommand') {\n          id = 'aw_toolsAndInfo';\n        }\n\n        eventBus.publish('awsidenav.openClose', {\n          id: id,\n          commandId: commandId\n        });\n        commandIdArray.push(commandId);\n      }\n    }\n  });\n};\n/**\n * Change the icon of a command handler\n *\n * @param {CommandHandler} commandHdlr Handler to update\n * @param {String} iconId Icon id\n */\n\n\nexport let setIcon = function (commandHdlr, iconId) {\n  commandHdlr.iconId = iconId;\n};\n/**\n * Set 'isVisible' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isVisible - is visible flag\n */\n\nexport let setIsVisible = function (commandHdlr, isVisible) {\n  if (commandHdlr.visible !== isVisible) {\n    commandHdlr.visible = isVisible;\n\n    if (!commandHdlr.visible) {\n      hideIfActive(commandHdlr);\n    }\n  }\n};\n/**\n * Set 'isEnabled' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isEnabled - is enabled flag\n */\n\nexport let setIsEnabled = function (commandHdlr, isEnabled) {\n  if (commandHdlr.enabled !== isEnabled) {\n    commandHdlr.enabled = isEnabled;\n\n    if (!commandHdlr.enabled) {\n      hideIfActive(commandHdlr);\n    }\n  }\n};\n/**\n * Set 'isSelected' state of the command\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {boolean} isSelected - is selected flag\n */\n\nexport let setSelected = function (commandHdlr, isSelected) {\n  commandHdlr.isSelected = isSelected;\n};\n/**\n * Set 'isGroupCommand' of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} nameToken - is group command flag\n * @returns {Promise} Promise resolved when done\n */\n\nexport let getPanelLifeCycleClose = function (commandHdlr, nameToken) {\n  var deferred = AwPromiseService.instance.defer();\n  commandHdlr.callbackApi.getPanelLifeCycleClose(nameToken, deferred);\n  return deferred.promise;\n};\n/**\n * Do any setup the command handler requires before creating the view\n *\n * @param {CommandHandler} commandHdlr - The command handler\n *\n * @return {Promise} A promise resolved when done\n */\n\nexport let setupDeclarativeView = function (commandHdlr) {\n  var deferred = AwPromiseService.instance.defer();\n  commandHdlr.setupDeclarativeView(deferred);\n  return deferred.promise;\n};\n/* eslint-disable-next-line valid-jsdoc*/\n\nexports = {\n  setIcon,\n  setIsVisible,\n  setIsEnabled,\n  setSelected,\n  getPanelLifeCycleClose,\n  setupDeclarativeView\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/commandHandlerService.js"],"names":["hideIfActive","activeCommandContexts","commandIdArray","isCommandOpen","appCtxService","ctx","commandHdlr","commandId","id","eventBus","setIcon","setIsVisible","setIsEnabled","setSelected","getPanelLifeCycleClose","deferred","AwPromiseService","setupDeclarativeView","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is the primary service used to create, test and manage the internal properties of CommandHandler Objects used in\n * AW.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/commandHandlerService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\nlet exports;\n\n/**\n * Hide the command panel if the handler is active\n *\n * @param {CommandHandler} commandHdlr - The command handler\n */\nvar hideIfActive = function( commandHdlr ) {\n    var activeCommandContexts = [ 'activeNavigationCommand', 'activeToolsAndInfoCommand', 'sidenavCommandId' ];\n    var commandIdArray = [];\n    activeCommandContexts\n        .forEach( function( ctx ) {\n            // Zero compile commands share visibility which means the \"open\" command will only have same commandId\n            var isCommandOpen = appCtxService.getCtx( ctx + '.commandId' ) &&\n                appCtxService.getCtx( ctx + '.commandId' ) === commandHdlr.commandId ||\n                appCtxService.getCtx( ctx ) &&\n                appCtxService.getCtx( ctx ) === commandHdlr.commandId;\n            if( isCommandOpen ) {\n                var commandId = appCtxService.getCtx( ctx + '.commandId' ) === commandHdlr.commandId ? appCtxService.getCtx( ctx + '.commandId' ) : appCtxService.getCtx( ctx );\n                if( !commandIdArray.includes( commandId ) ) {\n                    var id = null;\n                    if( ctx === 'activeNavigationCommand' ) {\n                        id = 'aw_navigation';\n                    } else if( ctx === 'activeToolsAndInfoCommand' ) {\n                        id = 'aw_toolsAndInfo';\n                    }\n                    eventBus.publish( 'awsidenav.openClose', {\n                        id: id,\n                        commandId: commandId\n                    } );\n                    commandIdArray.push( commandId );\n                }\n            }\n        } );\n};\n\n/**\n * Change the icon of a command handler\n *\n * @param {CommandHandler} commandHdlr Handler to update\n * @param {String} iconId Icon id\n */\nexport let setIcon = function( commandHdlr, iconId ) {\n    commandHdlr.iconId = iconId;\n};\n\n/**\n * Set 'isVisible' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isVisible - is visible flag\n */\nexport let setIsVisible = function( commandHdlr, isVisible ) {\n    if( commandHdlr.visible !== isVisible ) {\n        commandHdlr.visible = isVisible;\n        if( !commandHdlr.visible ) {\n            hideIfActive( commandHdlr );\n        }\n    }\n};\n\n/**\n * Set 'isEnabled' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isEnabled - is enabled flag\n */\nexport let setIsEnabled = function( commandHdlr, isEnabled ) {\n    if( commandHdlr.enabled !== isEnabled ) {\n        commandHdlr.enabled = isEnabled;\n        if( !commandHdlr.enabled ) {\n            hideIfActive( commandHdlr );\n        }\n    }\n};\n\n/**\n * Set 'isSelected' state of the command\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {boolean} isSelected - is selected flag\n */\nexport let setSelected = function( commandHdlr, isSelected ) {\n    commandHdlr.isSelected = isSelected;\n};\n\n/**\n * Set 'isGroupCommand' of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} nameToken - is group command flag\n * @returns {Promise} Promise resolved when done\n */\nexport let getPanelLifeCycleClose = function( commandHdlr, nameToken ) {\n    var deferred = AwPromiseService.instance.defer();\n    commandHdlr.callbackApi.getPanelLifeCycleClose( nameToken, deferred );\n    return deferred.promise;\n};\n\n/**\n * Do any setup the command handler requires before creating the view\n *\n * @param {CommandHandler} commandHdlr - The command handler\n *\n * @return {Promise} A promise resolved when done\n */\nexport let setupDeclarativeView = function( commandHdlr ) {\n    var deferred = AwPromiseService.instance.defer();\n    commandHdlr.setupDeclarativeView( deferred );\n    return deferred.promise;\n};\n\n/* eslint-disable-next-line valid-jsdoc*/\n\nexports = {\n    setIcon,\n    setIsVisible,\n    setIsEnabled,\n    setSelected,\n    getPanelLifeCycleClose,\n    setupDeclarativeView\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
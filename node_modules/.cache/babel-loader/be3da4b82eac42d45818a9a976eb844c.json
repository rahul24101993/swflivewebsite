{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwIconButtonService.js\";\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport eventBus from 'js/eventBus';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getNavigatePanelAction = prop => {\n  const {\n    destPanelId,\n    title,\n    recreatePanel,\n    mainPanelCaption,\n    isolateMode,\n    supportGoBack\n  } = prop.command.fielddata;\n\n  if (destPanelId) {\n    return function NavAction() {\n      const context = {\n        destPanelId,\n        title,\n        recreatePanel,\n        mainPanelCaption,\n        isolateMode,\n        supportGoBack,\n        backNavigation: true,\n\n        /*\n         * In afx, aw-icon-button directive used to figure out the closest command panel container using jquery\n         * and set the id attribute here. Now the containerId will need to be passed fromt the command panel component\n         */\n        id: prop.containerid\n      };\n      eventBus.publish('awPanel.navigate', context);\n    };\n  }\n};\n\nexport const AwIconButtonRenderFunction = props => {\n  let action;\n  let ariaLabel = '';\n  let icon = null;\n  let commandDef = null;\n\n  if (props.fielddata) {\n    commandDef = props.fielddata;\n  } else if (props.command) {\n    commandDef = props.command.fielddata || props.command;\n  } //const commandDef = props.fielddata ? props.fielddata : props.command.fielddata || props.command;\n\n\n  if (commandDef) {\n    if (commandDef.destPanelId && !commandDef.action) {\n      action = getNavigatePanelAction(props);\n    } else if (commandDef.action) {\n      action = commandDef.action;\n    }\n\n    ariaLabel = commandDef.propertyDisplayName || commandDef.tooltip || '';\n    icon = commandDef.iconName;\n  }\n\n  return /*#__PURE__*/_jsxDEV(AwButton, {\n    \"aria-label\": ariaLabel,\n    \"aria-disabled\": commandDef && commandDef.disabled,\n    className: props.size === 'large' ? 'large' : '',\n    iconId: icon,\n    action: action,\n    tooltip: commandDef && commandDef.tooltip\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_c2 = AwIconButtonRenderFunction;\n_c = AwIconButtonRenderFunction;\n\nvar _c;\n\n$RefreshReg$(_c, \"AwIconButtonRenderFunction\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"AwIconButtonRenderFunction\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwIconButtonService.js"],"names":["getNavigatePanelAction","prop","supportGoBack","context","backNavigation","id","containerid","eventBus","AwIconButtonRenderFunction","props","ariaLabel","icon","commandDef","action","tooltip"],"mappings":";AAAA,OAAA,QAAA,MAAA,6BAAA;AACA,OAAA,QAAA,MAAA,aAAA;;;AAEA,MAAMA,sBAAsB,GAAKC,IAAF,IAAY;EACvC,MAAM;IAAA,WAAA;IAAA,KAAA;IAAA,aAAA;IAAA,gBAAA;IAAA,WAAA;IAAoEC;EAApE,IAAsFD,IAAI,CAAJA,OAAAA,CAA5F,SAAA;;EACA,IAAA,WAAA,EAAkB;IACd,OAAO,SAAA,SAAA,GAAqB;MACxB,MAAME,OAAO,GAAG;QAAA,WAAA;QAAA,KAAA;QAAA,aAAA;QAAA,gBAAA;QAAA,WAAA;QAAA,aAAA;QAOZC,cAAc,EAPF,IAAA;;QAQZ;AAChB;AACA;AACA;QACgBC,EAAE,EAAEJ,IAAI,CAACK;MAZG,CAAhB;MAcAC,QAAQ,CAARA,OAAAA,CAAAA,kBAAAA,EAAAA,OAAAA;IAfJ,CAAA;EAiBH;AApBL,CAAA;;AAuBA,OAAO,MAAMC,0BAA0B,GAAKC,KAAF,IAAa;EACnD,IAAA,MAAA;EACA,IAAIC,SAAS,GAAb,EAAA;EACA,IAAIC,IAAI,GAAR,IAAA;EACA,IAAIC,UAAU,GAAd,IAAA;;EACA,IAAIH,KAAK,CAAT,SAAA,EAAsB;IAClBG,UAAU,GAAGH,KAAK,CAAlBG,SAAAA;EADJ,CAAA,MAEM,IAAIH,KAAK,CAAT,OAAA,EAAoB;IACtBG,UAAU,GAAGH,KAAK,CAALA,OAAAA,CAAAA,SAAAA,IAA2BA,KAAK,CAA7CG,OAAAA;EAR+C,CAAA,CAUnD;;;EACA,IAAA,UAAA,EAAiB;IACb,IAAIA,UAAU,CAAVA,WAAAA,IAA0B,CAACA,UAAU,CAAzC,MAAA,EAAoD;MAChDC,MAAM,GAAGb,sBAAsB,CAA/Ba,KAA+B,CAA/BA;IADJ,CAAA,MAEO,IAAID,UAAU,CAAd,MAAA,EAAwB;MAC3BC,MAAM,GAAGD,UAAU,CAAnBC,MAAAA;IACH;;IAEDH,SAAS,GAAGE,UAAU,CAAVA,mBAAAA,IAAkCA,UAAU,CAA5CA,OAAAA,IAAZF,EAAAA;IACAC,IAAI,GAAGC,UAAU,CAAjBD,QAAAA;EACH;;EAED,OAAA,aACI,OAAA,CAAA,QAAA,EAAA;IACI,cADJ,SAAA;IAEI,iBAAeC,UAAU,IAAIA,UAAU,CAF3C,QAAA;IAGI,SAAS,EAAGH,KAAK,CAALA,IAAAA,KAAAA,OAAAA,GAAAA,OAAAA,GAHhB,EAAA;IAII,MAAM,EAJV,IAAA;IAKI,MAAM,EALV,MAAA;IAMI,OAAO,EAAEG,UAAU,IAAIA,UAAU,CAACE;EANtC,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADJ,IACI,CADJ;AAtBG,CAAA;MAAMN,0B;KAAAA,0B","sourcesContent":["import AwButton from 'viewmodel/AwButtonViewModel';\nimport eventBus from 'js/eventBus';\n\nconst getNavigatePanelAction = ( prop ) => {\n    const { destPanelId, title, recreatePanel, mainPanelCaption, isolateMode, supportGoBack } = prop.command.fielddata;\n    if( destPanelId ) {\n        return function NavAction() {\n            const context = {\n                destPanelId,\n                title,\n                recreatePanel,\n                mainPanelCaption,\n                isolateMode,\n                supportGoBack,\n                backNavigation: true,\n                /*\n                 * In afx, aw-icon-button directive used to figure out the closest command panel container using jquery\n                 * and set the id attribute here. Now the containerId will need to be passed fromt the command panel component\n                 */\n                id: prop.containerid\n            };\n            eventBus.publish( 'awPanel.navigate', context );\n        };\n    }\n};\n\nexport const AwIconButtonRenderFunction = ( props ) => {\n    let action;\n    let ariaLabel = '';\n    let icon = null;\n    let commandDef = null;\n    if( props.fielddata ) {\n        commandDef = props.fielddata;\n    }else if( props.command ) {\n        commandDef = props.command.fielddata || props.command;\n    }\n    //const commandDef = props.fielddata ? props.fielddata : props.command.fielddata || props.command;\n    if( commandDef ) {\n        if( commandDef.destPanelId && !commandDef.action  ) {\n            action = getNavigatePanelAction( props );\n        } else if( commandDef.action ) {\n            action = commandDef.action;\n        }\n\n        ariaLabel = commandDef.propertyDisplayName || commandDef.tooltip || '';\n        icon = commandDef.iconName;\n    }\n\n    return (\n        <AwButton\n            aria-label={ariaLabel}\n            aria-disabled={commandDef && commandDef.disabled}\n            className={ props.size === 'large' ? 'large' : '' }\n            iconId={icon}\n            action={action}\n            tooltip={commandDef && commandDef.tooltip}>\n        </AwButton>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/* eslint-disable class-methods-use-this */\n\n/**\n * This service provides core angularJS $q/promise service abstraction.\n * https://github.com/angular/angular.js/blob/master/src/ng/q.js\n *\n * @module js/awPromiseService\n */\nimport _ from 'lodash';\n/**\n * static resolve function\n * @param {*} resolveFunc resolver\n * @param {*} val value\n * @returns {Promise} promise with resolved result\n */\n\nfunction resolveInternal(resolveFunc, val) {\n  return resolveFunc ? resolveFunc(val) : Promise.resolve(val);\n}\n/**\n * static reject function\n * @param {*} rejectFunc rejecter\n * @param {*} val value\n * @returns {Promise} promise with resolved result\n */\n\n\nfunction rejectInternal(rejectFunc, val) {\n  return rejectFunc ? rejectFunc(val) : Promise.reject(val);\n}\n/**\n * instance function for AwPromiseService\n * @param {fn} callback as function( resolve, reject )\n * @returns {Promise} promise object\n */\n\n\nfunction createPromise(callback) {\n  return new Promise((resolve, reject) => {\n    const resolveWrapper = value => {\n      return resolveInternal(resolve, value);\n    };\n\n    const rejectWrapper = value => {\n      return rejectInternal(reject, value);\n    };\n\n    callback ? callback(resolveWrapper, rejectWrapper) : resolve();\n  });\n} // Decorate instance\n\n\ncreatePromise.resolve = resolveInternal.bind(null, undefined);\ncreatePromise.reject = rejectInternal.bind(null, undefined);\n\ncreatePromise.defer = () => {\n  let deferred = {};\n  deferred.promise = new Promise((resolve, reject) => {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n};\n\ncreatePromise.all = promises => {\n  let isPromisesArray = Array.isArray(promises);\n  let result = isPromisesArray ? promises : []; //Angular use cases support- promises could be object\n\n  if (!isPromisesArray) {\n    _.forEach(promises, (promise, key) => {\n      result.push(promise.then(data => {\n        return {\n          [key]: data\n        };\n      }));\n    }); //resolve promise as a object, bydefault promise.all resolves promise as a array\n\n\n    return Promise.all(result).then(arrayData => {\n      let responseObj = {};\n\n      _.forEach(arrayData, obj => {\n        _.forEach(obj, (val, key) => {\n          responseObj[key] = val;\n        });\n      });\n\n      return responseObj;\n    });\n  }\n\n  return Promise.all(result);\n};\n\ncreatePromise.when = value => {\n  return Promise.resolve(value);\n};\n\ncreatePromise.race = promises => {\n  return Promise.race(promises);\n};\n\nconst getNativeInstance = () => createPromise;\n\nexport default {\n  getNativeInstance,\n\n  get instance() {\n    return createPromise;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awPromiseService.js"],"names":["resolveFunc","Promise","rejectFunc","resolveWrapper","value","resolveInternal","rejectWrapper","rejectInternal","callback","resolve","createPromise","deferred","promises","isPromisesArray","Array","result","_","data","arrayData","responseObj","obj","getNativeInstance"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n/* eslint-disable class-methods-use-this */\n\n/**\n * This service provides core angularJS $q/promise service abstraction.\n * https://github.com/angular/angular.js/blob/master/src/ng/q.js\n *\n * @module js/awPromiseService\n */\nimport _ from 'lodash';\n\n/**\n * static resolve function\n * @param {*} resolveFunc resolver\n * @param {*} val value\n * @returns {Promise} promise with resolved result\n */\nfunction resolveInternal( resolveFunc, val ) {\n    return resolveFunc ? resolveFunc( val ) : Promise.resolve( val );\n}\n/**\n * static reject function\n * @param {*} rejectFunc rejecter\n * @param {*} val value\n * @returns {Promise} promise with resolved result\n */\nfunction rejectInternal( rejectFunc, val ) {\n    return rejectFunc ? rejectFunc( val ) : Promise.reject( val );\n}\n\n/**\n * instance function for AwPromiseService\n * @param {fn} callback as function( resolve, reject )\n * @returns {Promise} promise object\n */\nfunction createPromise( callback ) {\n    return new Promise( ( resolve, reject ) => {\n        const resolveWrapper = ( value ) => {\n            return resolveInternal( resolve, value );\n        };\n        const rejectWrapper = ( value ) => {\n            return rejectInternal( reject, value );\n        };\n        callback ? callback( resolveWrapper, rejectWrapper ) : resolve();\n    } );\n}\n\n// Decorate instance\ncreatePromise.resolve = resolveInternal.bind( null, undefined );\n\ncreatePromise.reject = rejectInternal.bind( null, undefined );\n\ncreatePromise.defer = () => {\n    let deferred = {};\n    deferred.promise = new Promise( ( resolve, reject ) => {\n        deferred.resolve = resolve;\n        deferred.reject = reject;\n    } );\n    return deferred;\n};\n\ncreatePromise.all = ( promises ) => {\n    let isPromisesArray = Array.isArray( promises );\n    let result = isPromisesArray ? promises : [];\n    //Angular use cases support- promises could be object\n    if( !isPromisesArray ) {\n        _.forEach( promises, ( promise, key ) => {\n            result.push( promise.then( ( data ) => {\n                return {\n                    [ key ]: data\n                };\n            } ) );\n        } );\n        //resolve promise as a object, bydefault promise.all resolves promise as a array\n        return Promise.all( result ).then( ( arrayData ) => {\n            let responseObj = {};\n            _.forEach( arrayData, ( obj ) => {\n                _.forEach( obj, ( val, key ) => {\n                    responseObj[ key ] = val;\n                } );\n            } );\n            return responseObj;\n        } );\n    }\n    return Promise.all( result );\n};\n\ncreatePromise.when = ( value ) => {\n    return Promise.resolve( value );\n};\n\ncreatePromise.race = ( promises ) => {\n    return Promise.race( promises );\n};\n\nconst getNativeInstance = () => createPromise;\n\nexport default {\n    getNativeInstance,\n    get instance() {\n        return createPromise;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
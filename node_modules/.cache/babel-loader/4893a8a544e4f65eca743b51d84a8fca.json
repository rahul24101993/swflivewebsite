{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwTileGroupService.js\";\nimport _ from 'lodash';\nimport AwTile from 'viewmodel/AwTileViewModel';\nimport domUtils from 'js/domUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst eleRef = domUtils.DOMAPIs;\nexport const awTileGroupRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    handleDragAndDrop,\n    ...prop\n  } = props;\n  const {\n    tileGroup\n  } = prop;\n\n  const handleDrag = (event, tile) => {\n    let targetVMO = [];\n    let target = eleRef.closest(event.target, '.aw-tile-group') || eleRef.closest(event.target, '.aw-widgets-droppable');\n\n    if (!targetVMO.length && tile && tileGroup) {\n      targetVMO.push({\n        tile: tile,\n        tileGroup: tileGroup\n      });\n    }\n\n    handleDragAndDrop.drag(event, target, targetVMO);\n  };\n\n  const handleDrop = (event, tile) => {\n    let targetVMODrop = [];\n    let targetDrop = eleRef.closest(event.target, '.aw-tile-group') || eleRef.closest(event.target, '.aw-widgets-droppable');\n\n    if (targetDrop && tile && tileGroup) {\n      targetVMODrop = [{\n        tile: tile,\n        tileGroup: tileGroup\n      }];\n    }\n\n    handleDragAndDrop.drop(event, targetDrop, targetVMODrop);\n  };\n\n  const handleTileGroupDragAndDrop = {\n    drag: handleDrag,\n    drop: handleDrop,\n    draggable: true\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aw-tile-group\",\n    onDragEnter: handleDrop,\n    onDragOver: handleDrop,\n    onDrop: handleDrop,\n    onDragLeave: handleDrop,\n    children: prop.tileGroup.tiles.map((tile, index) => getTiles(tile, index, prop, handleTileGroupDragAndDrop))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\nconst getTileGroupClasses = tile => {\n  let className = ['aw-tile-tileMain aw-layout-flexColumn aw-theme-tileText aw-tile-draggable'];\n  className.push(tile.editing ? 'aw-tile-tileEdit' : '');\n  return className.join(' ');\n};\n\nconst getTiles = (tile, index, prop, handleTileGroupDragAndDrop) => {\n  let classes = getTileGroupClasses(tile);\n  let orderObj = {\n    order: index\n  };\n  tile.editTileCallback = prop.tileGroup.editTileCallback;\n  tile.isGatewayInEditMode = prop.tileGroup.isGatewayInEditMode; // tile.updateToParent( tileIdx, value ) as dispatch\n  // do we need a createTile just like createField?\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-locator\": \"tile-main\",\n    className: classes,\n    draggable: tile.editing ? tile.editing : false,\n    style: orderObj,\n    children: /*#__PURE__*/_jsxDEV(AwTile, {\n      tile: tile,\n      handleTileGroupDragAndDrop: handleTileGroupDragAndDrop,\n      unPinTileCallback: prop.unPinTileCallback,\n      tileClickCallback: prop.tileClickCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, index + tile.displayName, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwTileGroupService.js"],"names":["eleRef","domUtils","awTileGroupRenderFunction","props","prop","tileGroup","handleDrag","targetVMO","target","event","tile","handleDragAndDrop","handleDrop","targetVMODrop","targetDrop","handleTileGroupDragAndDrop","drag","drop","draggable","getTiles","getTileGroupClasses","className","classes","orderObj","order","index","tileClickCallback"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport AwTile from 'viewmodel/AwTileViewModel';\nimport domUtils from 'js/domUtils';\nconst eleRef = domUtils.DOMAPIs;\nexport const awTileGroupRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        handleDragAndDrop,\n        ...prop\n    } = props;\n    const { tileGroup } = prop;\n    const handleDrag = (  event, tile  ) => {\n        let targetVMO = [];\n        let target = eleRef.closest( event.target, '.aw-tile-group' ) || eleRef.closest( event.target, '.aw-widgets-droppable' );\n        if( !targetVMO.length && tile && tileGroup ) {\n            targetVMO.push( { tile: tile, tileGroup: tileGroup } );\n        }\n        handleDragAndDrop.drag( event, target, targetVMO );\n    };\n\n    const handleDrop = (  event, tile  ) => {\n        let targetVMODrop = [];\n        let targetDrop = eleRef.closest( event.target, '.aw-tile-group' ) || eleRef.closest( event.target, '.aw-widgets-droppable' );\n        if( targetDrop && tile && tileGroup ) {\n            targetVMODrop = [ { tile: tile, tileGroup: tileGroup } ];\n        }\n        handleDragAndDrop.drop( event, targetDrop, targetVMODrop );\n    };\n    const handleTileGroupDragAndDrop = { drag: handleDrag, drop: handleDrop, draggable: true };\n    return (\n        <div className='aw-tile-group'onDragEnter={handleDrop} onDragOver={handleDrop}\n            onDrop={handleDrop} onDragLeave={handleDrop}>\n            {\n                prop.tileGroup.tiles.map( ( tile, index ) =>\n                    getTiles( tile, index, prop, handleTileGroupDragAndDrop )\n                )\n            }\n        </div>\n    );\n};\n\nconst getTileGroupClasses = ( tile ) => {\n    let className = [ 'aw-tile-tileMain aw-layout-flexColumn aw-theme-tileText aw-tile-draggable' ];\n    className.push( tile.editing ? 'aw-tile-tileEdit' : '' );\n    return className.join( ' ' );\n};\n\n\nconst getTiles = ( tile, index, prop, handleTileGroupDragAndDrop ) => {\n    let classes = getTileGroupClasses( tile );\n    let orderObj = {\n        order: index\n    };\n\n    tile.editTileCallback = prop.tileGroup.editTileCallback;\n    tile.isGatewayInEditMode = prop.tileGroup.isGatewayInEditMode;\n    // tile.updateToParent( tileIdx, value ) as dispatch\n    // do we need a createTile just like createField?\n    return (\n        <div key={index + tile.displayName} data-locator='tile-main' className={classes} draggable={tile.editing ? tile.editing : false} style={orderObj}>\n            <AwTile tile={tile} handleTileGroupDragAndDrop={handleTileGroupDragAndDrop} unPinTileCallback={prop.unPinTileCallback} tileClickCallback={prop.tileClickCallback}></AwTile>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
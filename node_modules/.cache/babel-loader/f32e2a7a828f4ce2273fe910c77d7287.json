{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cfgSvc from 'js/configurationService';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxSvc from 'js/appCtxService';\nimport awIconService from 'js/awIconService';\nimport _ from 'lodash';\nimport 'js/workspaceInitService';\n/**\n * Cached reference to the various AngularJS and AW services.\n */\n\nvar exports = {};\n/**\n * Get all workspaces\n *\n * @return {Promise} Resolved with workspace list\n */\n\nexport let getAllWorkspaces = function () {\n  var emptyFilterList = {};\n  emptyFilterList.workspacesViewModel = '[]';\n  return exports.getWorkspaces(emptyFilterList, true);\n};\n/**\n * Get filtered workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @return {Promise} Resolved with workspace list\n */\n\nexport let getFilteredWorkspaces = function (response) {\n  return exports.getWorkspaces(response, false);\n};\n/**\n * Get available commands for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} command list\n */\n\nexport let getWorkspaceCommands = function (activeWorkSpaceId) {\n  var inKey = 'includedCommands';\n  var exKey = 'excludedCommands';\n  return cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    var workspaceCommands = [];\n    var activeWorkspace = {};\n\n    if (workspaceCfg) {\n      activeWorkspace = _.get(workspaceCfg, activeWorkSpaceId);\n    }\n\n    workspaceCommands[inKey] = activeWorkspace.includedCommands;\n    workspaceCommands[exKey] = activeWorkspace.excludedCommands;\n    return workspaceCommands;\n  });\n};\n/**\n * Get available commands for the given workspace\n *\n * @param {String} commands - commands on page\n * @return {Array} filter command list\n */\n\nexport let getActiveWorkspaceCommands = function (commands) {\n  var workspaceDefinition = appCtxSvc.getCtx('workspace');\n\n  if (!workspaceValidationService.isExclusiveWorkspace(workspaceDefinition)) {\n    return commands;\n  }\n\n  var inclusiveCmds = appCtxSvc.getCtx('workspace.includedCommands');\n\n  if (inclusiveCmds && inclusiveCmds.length === 0) {\n    return null;\n  }\n\n  if (inclusiveCmds !== undefined) {\n    var inclusiveCmdsOverlay = _.filter(commands, function (cmdOverlay) {\n      return inclusiveCmds.includes(cmdOverlay.commandId);\n    });\n  }\n\n  var includedcmds = inclusiveCmds === undefined ? commands : inclusiveCmdsOverlay;\n  var exclusiveCmds = appCtxSvc.getCtx('workspace.excludedCommands');\n\n  if (exclusiveCmds !== undefined) {\n    var cmdDiffArray = [];\n    cmdDiffArray = inclusiveCmdsOverlay && inclusiveCmdsOverlay.length > 0 ? inclusiveCmdsOverlay : includedcmds;\n    return cmdDiffArray.filter(cmdOverlay => !exclusiveCmds.includes(cmdOverlay.commandId));\n  }\n\n  return includedcmds;\n};\n/**\n * Get available context configuration for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} page list\n */\n\nexport let getAvailableContexts = function (activeWorkSpaceId) {\n  return cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    var activeWorkspace = {};\n\n    if (workspaceCfg) {\n      activeWorkspace = _.get(workspaceCfg, activeWorkSpaceId);\n    }\n\n    return activeWorkspace.availableContextConfigurations;\n  });\n};\n/**\n * Get available navigation configuration for the given workspace\n * @param {Object} activeWorkSpaceId - active workspace ID based on wworkspace\n * @return {Array} availableNavigations -navigation list\n */\n\nexport let getAvailableNavigations = function (activeWorkSpaceId) {\n  var navigationConfigs;\n  var availableNavigations = [];\n  return AwPromiseService.instance.all([cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    navigationConfigs = _.cloneDeep(workspaceCfg);\n    return true;\n  })]).then(function () {\n    if (navigationConfigs) {\n      _.forEach(navigationConfigs, function (workspaceDefn) {\n        if (activeWorkSpaceId === workspaceDefn.workspaceId && workspaceDefn.availableNavigations) {\n          availableNavigations = workspaceDefn.availableNavigations;\n        }\n\n        if (availableNavigations.length > 0) {\n          availableNavigations.sort();\n        }\n      });\n    }\n\n    return availableNavigations;\n  });\n};\n/**\n * Get available workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @param {Boolean} returnAll - true for getting all workspaces, false to filter workspaces\n * @return {Promise} Resolved with workspace list\n */\n\nexport let getWorkspaces = function (response, returnAll) {\n  var workspace = {};\n  var responseWorkspaceList = JSON.parse(response.workspacesViewModel);\n  workspace.workspaceList = [];\n  workspace.workspaceCount = 0;\n  var viewModel;\n  return cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n    return cfgSvc.getCfg('workspace');\n  }).then(function (workspaceCfg) {\n    viewModel = _.cloneDeep(workspaceCfg);\n    var workspaceNames = [];\n\n    _.forEach(viewModel, function (workspaceDefn) {\n      // Check whether it is a valid workspace definition. If so, lookup the workspace name\n      if (workspaceDefn.workspaceName) {\n        workspaceNames.push(workspaceDefn.workspaceName);\n      }\n    });\n\n    return exports.getMultipleLocalizedText(workspaceNames);\n  }).then(function (workspaceNameMap) {\n    _.forEach(viewModel, function (workspaceDefn) {\n      // Proceed only if this is a valid workspace\n      if (workspaceDefn.workspaceId) {\n        if (returnAll || _.includes(responseWorkspaceList, workspaceDefn.workspaceId)) {\n          var workspaceObj = {};\n          workspaceObj.uid = workspaceDefn.workspaceId;\n          workspaceObj.props = {};\n          var workspaceName;\n\n          if (workspaceDefn.workspaceName.key) {\n            workspaceName = workspaceNameMap[workspaceDefn.workspaceName.key];\n          } else {\n            workspaceName = workspaceDefn.workspaceName;\n          }\n\n          var viewProp = uwPropertySvc.createViewModelProperty('object_string', 'object_string', 'string', workspaceDefn.workspaceId, [workspaceName]);\n          workspaceObj.props[viewProp.propertyName] = viewProp;\n          workspaceObj.cellHeader1 = workspaceName;\n          workspaceObj.cellHeader2 = workspaceDefn.workspaceId;\n          workspaceObj.modelType = 'Awp0Workspace';\n          workspaceObj.typeIconURL = awIconService.getTypeIconFileUrl(workspaceObj); // Fake clear editable states for this mock vmo\n\n          workspaceObj.clearEditiableStates = function () {\n            return undefined;\n          };\n\n          workspace.workspaceList.push(workspaceObj);\n        }\n      }\n    });\n\n    workspace.workspaceCount = workspace.workspaceList.length;\n    workspace.workspaceList = _.sortBy(workspace.workspaceList, ['cellHeader1']);\n    return workspace;\n  });\n};\n/**\n * Reload page\n */\n\nexport let reloadPage = function () {\n  location.reload(false);\n};\n/**\n * Get available page\n *\n * @return {Array} page list\n */\n\nexport let getAvailablePages = function () {\n  var generatedRoutes;\n  var viewModel;\n  return AwPromiseService.instance.all([cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    viewModel = _.cloneDeep(workspaceCfg);\n    return true;\n  }), cfgSvc.getCfg('states').then(function (states) {\n    generatedRoutes = states;\n    return true;\n  })]).then(function () {\n    var workspace = {};\n    workspace.pageList = [];\n    workspace.pageCount = 0;\n\n    if (viewModel) {\n      _.forEach(viewModel, function (workspaceDefn) {\n        var availablePages = [];\n\n        if (workspaceDefn.availablePages && workspaceValidationService.isExclusiveWorkspace(workspaceDefn)) {\n          availablePages = workspaceDefn.availablePages;\n        } else if (!workspaceValidationService.isExclusiveWorkspace(workspaceDefn)) {\n          availablePages = Object.keys(generatedRoutes);\n        }\n\n        availablePages.sort();\n\n        _.forEach(availablePages, function (availablePage) {\n          var pageObj = {};\n          pageObj.props = {};\n          pageObj.uid = availablePage;\n          var viewProp = uwPropertySvc.createViewModelProperty('object_string', 'object_string', 'string', availablePage, [availablePage]);\n          pageObj.props[viewProp.propertyName] = viewProp; // Fake clearEditable States\n\n          pageObj.clearEditiableStates = function () {\n            return undefined;\n          };\n\n          if (_.has(generatedRoutes, availablePage)) {\n            var routePageObject = generatedRoutes[availablePage];\n            pageObj.cellHeader1 = availablePage;\n\n            if (routePageObject.data) {\n              if (routePageObject.data.label) {\n                workspaceValidationService.getLocalizedText(routePageObject.data.label).then(function (result) {\n                  pageObj.cellHeader1 = result;\n                });\n              }\n            }\n\n            pageObj.cellHeader2 = availablePage;\n            pageObj.modelType = 'pages';\n            pageObj.typeIconURL = awIconService.getTypeIconFileUrl(pageObj);\n\n            if (!routePageObject.abstract && _.find(workspace.pageList, pageObj) === undefined) {\n              workspace.pageList.push(pageObj);\n            }\n          }\n        });\n      });\n    }\n\n    workspace.pageCount = workspace.pageList.length;\n    return workspace;\n  });\n};\n/**\n * Get localized text for multiple labels.\n *\n * @param {Array} labels - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {Promise} Which will resolve with map containing key to label mapping\n */\n\nexport let getMultipleLocalizedText = function (labels) {\n  return AwPromiseService.instance(function (resolve) {\n    _.defer(function () {\n      var promises = {};\n\n      _.forEach(labels, function (label) {\n        if (typeof label === 'string') {\n          // If the label is a string just return it\n          promises[label] = AwPromiseService.instance.when(label);\n        } else {\n          // Otherwise get the label from the localized file\n          promises[label.key] = localeSvc.getLocalizedText(label.source, label.key);\n        }\n      });\n\n      resolve(AwPromiseService.instance.all(promises));\n    });\n  });\n};\n/**\n * Load the column configuration\n *\n * @param {Object} dataprovider - the data provider\n */\n\nexport let loadColumns = function (dataprovider) {\n  dataprovider.columnConfig = {\n    columns: [{\n      name: 'object_string',\n      displayName: 'object_string',\n      typeName: 'WorkspaceObject',\n      width: 150,\n      pinnedLeft: true,\n      enableColumnMenu: false,\n      enableSorting: false,\n      enableFiltering: false\n    }]\n  };\n};\nexports = {\n  getAllWorkspaces,\n  getFilteredWorkspaces,\n  getWorkspaceCommands,\n  getActiveWorkspaceCommands,\n  getAvailableContexts,\n  getAvailableNavigations,\n  getWorkspaces,\n  reloadPage,\n  getAvailablePages,\n  getMultipleLocalizedText,\n  loadColumns\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","localeSvc","uwPropertySvc","cfgSvc","workspaceValidationService","appCtxSvc","awIconService","_","exports","getAllWorkspaces","emptyFilterList","workspacesViewModel","getWorkspaces","getFilteredWorkspaces","response","getWorkspaceCommands","activeWorkSpaceId","inKey","exKey","getCfg","then","workspaceCfg","workspaceCommands","activeWorkspace","get","includedCommands","excludedCommands","getActiveWorkspaceCommands","commands","workspaceDefinition","getCtx","isExclusiveWorkspace","inclusiveCmds","length","undefined","inclusiveCmdsOverlay","filter","cmdOverlay","includes","commandId","includedcmds","exclusiveCmds","cmdDiffArray","getAvailableContexts","availableContextConfigurations","getAvailableNavigations","navigationConfigs","availableNavigations","instance","all","cloneDeep","forEach","workspaceDefn","workspaceId","sort","returnAll","workspace","responseWorkspaceList","JSON","parse","workspaceList","workspaceCount","viewModel","solutionDef","workspaceNames","workspaceName","push","getMultipleLocalizedText","workspaceNameMap","workspaceObj","uid","props","key","viewProp","createViewModelProperty","propertyName","cellHeader1","cellHeader2","modelType","typeIconURL","getTypeIconFileUrl","clearEditiableStates","sortBy","reloadPage","location","reload","getAvailablePages","generatedRoutes","states","pageList","pageCount","availablePages","Object","keys","availablePage","pageObj","has","routePageObject","data","label","getLocalizedText","result","abstract","find","labels","resolve","defer","promises","when","source","loadColumns","dataprovider","columnConfig","columns","name","displayName","typeName","width","pinnedLeft","enableColumnMenu","enableSorting","enableFiltering"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/workspaceService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cfgSvc from 'js/configurationService';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxSvc from 'js/appCtxService';\nimport awIconService from 'js/awIconService';\nimport _ from 'lodash';\n\nimport 'js/workspaceInitService';\n\n/**\n * Cached reference to the various AngularJS and AW services.\n */\n\nvar exports = {};\n\n/**\n * Get all workspaces\n *\n * @return {Promise} Resolved with workspace list\n */\nexport let getAllWorkspaces = function() {\n    var emptyFilterList = {};\n    emptyFilterList.workspacesViewModel = '[]';\n    return exports.getWorkspaces( emptyFilterList, true );\n};\n\n/**\n * Get filtered workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @return {Promise} Resolved with workspace list\n */\nexport let getFilteredWorkspaces = function( response ) {\n    return exports.getWorkspaces( response, false );\n};\n\n/**\n * Get available commands for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} command list\n */\nexport let getWorkspaceCommands = function( activeWorkSpaceId ) {\n    var inKey = 'includedCommands';\n    var exKey = 'excludedCommands';\n    return cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        var workspaceCommands = [];\n        var activeWorkspace = {};\n        if( workspaceCfg ) {\n            activeWorkspace = _.get( workspaceCfg, activeWorkSpaceId );\n        }\n        workspaceCommands[ inKey ] = activeWorkspace.includedCommands;\n        workspaceCommands[ exKey ] = activeWorkspace.excludedCommands;\n        return workspaceCommands;\n    } );\n};\n\n/**\n * Get available commands for the given workspace\n *\n * @param {String} commands - commands on page\n * @return {Array} filter command list\n */\nexport let getActiveWorkspaceCommands = function( commands ) {\n    var workspaceDefinition = appCtxSvc.getCtx( 'workspace' );\n\n    if( !workspaceValidationService.isExclusiveWorkspace( workspaceDefinition ) ) {\n        return commands;\n    }\n    var inclusiveCmds = appCtxSvc.getCtx( 'workspace.includedCommands' );\n\n    if( inclusiveCmds && inclusiveCmds.length === 0 ) {\n        return null;\n    }\n    if( inclusiveCmds !== undefined ) {\n        var inclusiveCmdsOverlay = _.filter( commands, function( cmdOverlay ) {\n            return inclusiveCmds.includes( cmdOverlay.commandId );\n        } );\n    }\n    var includedcmds = inclusiveCmds === undefined ? commands : inclusiveCmdsOverlay;\n    var exclusiveCmds = appCtxSvc.getCtx( 'workspace.excludedCommands' );\n\n    if( exclusiveCmds !== undefined ) {\n        var cmdDiffArray = [];\n        cmdDiffArray = inclusiveCmdsOverlay && inclusiveCmdsOverlay.length > 0 ? inclusiveCmdsOverlay : includedcmds;\n        return cmdDiffArray.filter( cmdOverlay => !exclusiveCmds.includes( cmdOverlay.commandId ) );\n    }\n    return includedcmds;\n};\n\n/**\n * Get available context configuration for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} page list\n */\nexport let getAvailableContexts = function( activeWorkSpaceId ) {\n    return cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        var activeWorkspace = {};\n        if( workspaceCfg ) {\n            activeWorkspace = _.get( workspaceCfg, activeWorkSpaceId );\n        }\n        return activeWorkspace.availableContextConfigurations;\n    } );\n};\n\n/**\n * Get available navigation configuration for the given workspace\n * @param {Object} activeWorkSpaceId - active workspace ID based on wworkspace\n * @return {Array} availableNavigations -navigation list\n */\nexport let getAvailableNavigations = function( activeWorkSpaceId ) {\n    var navigationConfigs;\n    var availableNavigations = [];\n    return AwPromiseService.instance.all( [ cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        navigationConfigs = _.cloneDeep( workspaceCfg );\n        return true;\n    } ) ] ).then( function() {\n        if( navigationConfigs ) {\n            _.forEach( navigationConfigs, function( workspaceDefn ) {\n                if( activeWorkSpaceId === workspaceDefn.workspaceId && workspaceDefn.availableNavigations ) {\n                    availableNavigations = workspaceDefn.availableNavigations;\n                }\n                if( availableNavigations.length > 0 ) {\n                    availableNavigations.sort();\n                }\n            } );\n        }\n\n        return availableNavigations;\n    } );\n};\n\n/**\n * Get available workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @param {Boolean} returnAll - true for getting all workspaces, false to filter workspaces\n * @return {Promise} Resolved with workspace list\n */\nexport let getWorkspaces = function( response, returnAll ) {\n    var workspace = {};\n    var responseWorkspaceList = JSON.parse( response.workspacesViewModel );\n    workspace.workspaceList = [];\n    workspace.workspaceCount = 0;\n\n    var viewModel;\n    return cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n        return cfgSvc.getCfg( 'workspace' );\n    } ).then( function( workspaceCfg ) {\n        viewModel = _.cloneDeep( workspaceCfg );\n        var workspaceNames = [];\n        _.forEach( viewModel, function( workspaceDefn ) {\n            // Check whether it is a valid workspace definition. If so, lookup the workspace name\n            if( workspaceDefn.workspaceName ) {\n                workspaceNames.push( workspaceDefn.workspaceName );\n            }\n        } );\n        return exports.getMultipleLocalizedText( workspaceNames );\n    } ).then( function( workspaceNameMap ) {\n        _.forEach( viewModel, function( workspaceDefn ) {\n            // Proceed only if this is a valid workspace\n            if( workspaceDefn.workspaceId ) {\n                if( returnAll ||\n                    _.includes( responseWorkspaceList, workspaceDefn.workspaceId ) ) {\n                    var workspaceObj = {};\n                    workspaceObj.uid = workspaceDefn.workspaceId;\n                    workspaceObj.props = {};\n\n                    var workspaceName;\n                    if( workspaceDefn.workspaceName.key ) {\n                        workspaceName = workspaceNameMap[ workspaceDefn.workspaceName.key ];\n                    } else {\n                        workspaceName = workspaceDefn.workspaceName;\n                    }\n                    var viewProp = uwPropertySvc.createViewModelProperty( 'object_string', 'object_string', 'string',\n                        workspaceDefn.workspaceId, [ workspaceName ] );\n                    workspaceObj.props[ viewProp.propertyName ] = viewProp;\n                    workspaceObj.cellHeader1 = workspaceName;\n                    workspaceObj.cellHeader2 = workspaceDefn.workspaceId;\n                    workspaceObj.modelType = 'Awp0Workspace';\n                    workspaceObj.typeIconURL = awIconService.getTypeIconFileUrl( workspaceObj );\n                    // Fake clear editable states for this mock vmo\n                    workspaceObj.clearEditiableStates = function() {\n                        return undefined;\n                    };\n                    workspace.workspaceList.push( workspaceObj );\n                }\n            }\n        } );\n        workspace.workspaceCount = workspace.workspaceList.length;\n        workspace.workspaceList = _.sortBy( workspace.workspaceList, [ 'cellHeader1' ] );\n        return workspace;\n    } );\n};\n\n/**\n * Reload page\n */\nexport let reloadPage = function() {\n    location.reload( false );\n};\n\n/**\n * Get available page\n *\n * @return {Array} page list\n */\nexport let getAvailablePages = function() {\n    var generatedRoutes;\n    var viewModel;\n    return AwPromiseService.instance.all( [ cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        viewModel = _.cloneDeep( workspaceCfg );\n        return true;\n    } ), cfgSvc.getCfg( 'states' ).then( function( states ) {\n        generatedRoutes = states;\n        return true;\n    } ) ] ).then( function() {\n        var workspace = {};\n        workspace.pageList = [];\n        workspace.pageCount = 0;\n\n        if( viewModel ) {\n            _.forEach( viewModel, function( workspaceDefn ) {\n                var availablePages = [];\n                if( workspaceDefn.availablePages && workspaceValidationService.isExclusiveWorkspace( workspaceDefn ) ) {\n                    availablePages = workspaceDefn.availablePages;\n                } else if( !workspaceValidationService.isExclusiveWorkspace( workspaceDefn ) ) {\n                    availablePages = Object.keys( generatedRoutes );\n                }\n\n                availablePages.sort();\n\n                _.forEach( availablePages, function( availablePage ) {\n                    var pageObj = {};\n                    pageObj.props = {};\n                    pageObj.uid = availablePage;\n                    var viewProp = uwPropertySvc.createViewModelProperty( 'object_string', 'object_string',\n                        'string', availablePage, [ availablePage ] );\n                    pageObj.props[ viewProp.propertyName ] = viewProp;\n                    // Fake clearEditable States\n                    pageObj.clearEditiableStates = function() {\n                        return undefined;\n                    };\n                    if( _.has( generatedRoutes, availablePage ) ) {\n                        var routePageObject = generatedRoutes[ availablePage ];\n                        pageObj.cellHeader1 = availablePage;\n                        if( routePageObject.data ) {\n                            if( routePageObject.data.label ) {\n                                workspaceValidationService.getLocalizedText( routePageObject.data.label ).then(\n                                    function( result ) {\n                                        pageObj.cellHeader1 = result;\n                                    } );\n                            }\n                        }\n                        pageObj.cellHeader2 = availablePage;\n                        pageObj.modelType = 'pages';\n                        pageObj.typeIconURL = awIconService.getTypeIconFileUrl( pageObj );\n                        if( !routePageObject.abstract &&\n                            _.find( workspace.pageList, pageObj ) === undefined ) {\n                            workspace.pageList.push( pageObj );\n                        }\n                    }\n                } );\n            } );\n        }\n\n        workspace.pageCount = workspace.pageList.length;\n        return workspace;\n    } );\n};\n\n/**\n * Get localized text for multiple labels.\n *\n * @param {Array} labels - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {Promise} Which will resolve with map containing key to label mapping\n */\nexport let getMultipleLocalizedText = function( labels ) {\n    return AwPromiseService.instance( function( resolve ) {\n        _.defer( function() {\n            var promises = {};\n            _.forEach( labels, function( label ) {\n                if( typeof label === 'string' ) {\n                    // If the label is a string just return it\n                    promises[ label ] = AwPromiseService.instance.when( label );\n                } else {\n                    // Otherwise get the label from the localized file\n                    promises[ label.key ] = localeSvc.getLocalizedText( label.source,\n                        label.key );\n                }\n            } );\n\n            resolve( AwPromiseService.instance.all( promises ) );\n        } );\n    } );\n};\n\n/**\n * Load the column configuration\n *\n * @param {Object} dataprovider - the data provider\n */\nexport let loadColumns = function( dataprovider ) {\n    dataprovider.columnConfig = {\n        columns: [ {\n            name: 'object_string',\n            displayName: 'object_string',\n            typeName: 'WorkspaceObject',\n            width: 150,\n            pinnedLeft: true,\n            enableColumnMenu: false,\n            enableSorting: false,\n            enableFiltering: false\n        } ]\n    };\n};\n\nexports = {\n    getAllWorkspaces,\n    getFilteredWorkspaces,\n    getWorkspaceCommands,\n    getActiveWorkspaceCommands,\n    getAvailableContexts,\n    getAvailableNavigations,\n    getWorkspaces,\n    reloadPage,\n    getAvailablePages,\n    getMultipleLocalizedText,\n    loadColumns\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Thue module defines helpful shared APIs and constants used throughout the DeclarativeUI code base.\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/declModelRegistryService\n */import _ from'lodash';import browserUtils from'js/browserUtils';import logger from'js/logger';/**\n * {ObjectMap} The current 'active' instances of a certain class.\n */var _modelRegistry={};/**\n * {Boolean} TRUE if create/destroy events for UwDataProviders should be logged.\n */var _debug_logModelLifeCycle=false;/**\n */function _caseInsensitive(a,b){var nameA=a.toUpperCase();// ignore upper and lowercase\nvar nameB=b.toUpperCase();// ignore upper and lowercase\nif(nameA<nameB){return-1;}if(nameA>nameB){return 1;}// names must be equal\nreturn 0;}/**\n * @param {String} operationName -\n *\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n *\n * @return {String}\n */function _buildStatusString(operationName,modelTypeIn,modelObj){var msg='\\n';msg+=operationName;msg+=' ';msg+=modelTypeIn;msg+=': ';msg+=modelObj.toString();msg+='\\n';msg+='Status:';msg+='\\n';_.forEach(_modelRegistry,function(modelTypeGroup,modelType){var keys=Object.keys(_modelRegistry[modelType]);keys.sort(_caseInsensitive);var first=true;var totalActive=0;_.forEach(keys,function(key){if(key==='nextId'){return;}var modelStatus=modelTypeGroup[key];var modelIds=Object.keys(modelStatus.members);if(modelIds.length){if(first){msg+=modelType;msg+='\\n';first=false;}var currLen=msg.length;msg+='    ';msg+=key;if((msg.length-currLen)%2===0){msg+=' ';}for(var ndx=msg.length;ndx<currLen+44;ndx+=2){msg+='. ';}msg+=': ';msg+=modelIds.length;msg+=' ';msg+=JSON.stringify(modelIds);msg+='\\n';totalActive+=modelIds.length;}});if(totalActive){msg+='Total: ';msg+=totalActive;msg+='\\n';}});return msg;}// _buildStatusString\n/**\n * ---------------------------------------------------------------------------<BR>\n * Define the public API for the Service<BR>\n * ---------------------------------------------------------------------------<BR>\n */var exports={};/**\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n */export let registerModel=function(modelType,modelObj,modelNamePath,modelIdPath){var modelTypeGroup=_modelRegistry[modelType];if(!modelTypeGroup){modelTypeGroup={nextId:0};_modelRegistry[modelType]=modelTypeGroup;}var modelName=_.get(modelObj,modelNamePath);var modelStatus=modelTypeGroup[modelName];if(!modelStatus){modelStatus={members:{}};modelTypeGroup[modelName]=modelStatus;}var modelId=_.get(modelObj,modelIdPath);if(modelId>=0){logger.info('registerModel: Attempt to double register: '+modelObj);}else{var nextId=modelTypeGroup.nextId;modelTypeGroup.nextId++;modelStatus.members[nextId]=true;_.set(modelObj,modelIdPath,nextId);}if(_debug_logModelLifeCycle){logger.info(_buildStatusString('Created',modelType,modelObj));}};/**\n * @param {String} modelType - The type of model being unregistered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to unregister.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n */export let unregisterModel=function(modelType,modelObj,modelNamePath,modelIdPath){var modelTypeGroup=_modelRegistry[modelType];if(!modelTypeGroup){modelTypeGroup={nextId:0};_modelRegistry[modelType]=modelTypeGroup;}var modelName=_.get(modelObj,modelNamePath);var modelId=_.get(modelObj,modelIdPath);var modelStatus=modelTypeGroup[modelName];if(modelStatus){if(modelStatus.members[modelId]){delete modelStatus.members[modelId];}else{logger.info('unregisterModel: Model not found in the registry: '+modelObj);}}if(_debug_logModelLifeCycle){logger.info(_buildStatusString('Destroyed',modelType,modelObj));}};/**\n * ---------------------------------------------------------------------------<BR>\n * Property & Function definition complete....Finish initialization. <BR>\n * ---------------------------------------------------------------------------<BR>\n */var urlAttrs=browserUtils.getUrlAttributes();_debug_logModelLifeCycle=urlAttrs.logModelLifeCycle!==undefined;exports={registerModel,unregisterModel};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport { DerivedStateResult } from 'js/derivedContextService';\nconst trace = new Debug('selection');\n\nconst defaultPWASelectionChangeHandler = (_ref, selModel) => {\n  let {\n    selected,\n    dataProvider\n  } = _ref;\n  // Revisit me: Story LCS-524878 - Reduce dependency on ctx - follow uni-directional data flow\n  appCtxService.registerCtx('pwaSelectionInfo', {\n    currentSelectedCount: selModel.getCurrentSelectedCount()\n  }); //Named event is an anti-pattern. Keeping it here to maintain backward compatibility.\n  // data.source = 'primaryWorkArea'; This event used to send the scope\n\n  eventBus.publish('primaryWorkArea.selectionChangeEvent', {\n    selectionModel: selModel,\n    // dataCtxNode: $scope,\n    dataProvider: dataProvider,\n    selectedObjects: _.cloneDeep(selected)\n  });\n};\n\nexport const handleSelectionChange = (localSelectionData, parentSelectionData, selModel) => {\n  if (!_.isEmpty(localSelectionData)) {\n    if (parentSelectionData) {\n      parentSelectionData.update({ ...localSelectionData,\n        source: 'primary'\n      });\n    }\n\n    defaultPWASelectionChangeHandler(localSelectionData, selModel);\n    trace('AwPrimaryWorkarea selectionData: ', localSelectionData);\n  }\n};\nexport const reset = selectionModel => {\n  const dp = selectionModel.getDpListener();\n\n  if (dp) {\n    dp.resetDataProvider();\n  }\n};\nexport const handleSelectEvent = (eventData, selectionModel) => {\n  const dp = selectionModel.getDpListener();\n\n  if (dp) {\n    if (eventData.selectAll) {\n      dp.selectAll();\n    } else {\n      dp.selectNone();\n    }\n  }\n};\nexport const handleMultiSelectEvent = (eventData, selectionModel) => {\n  const dp = selectionModel.getDpListener();\n\n  if (dp) {\n    dp.selectionModel.setMultiSelectionEnabled(eventData.multiSelect);\n\n    if (!eventData.multiSelect) {\n      dp.selectNone();\n    }\n\n    return eventData.multiSelect;\n  }\n\n  return false;\n};\nexport const getContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.searchState],\n    compute: () => {\n      return {\n        provider: props.subPanelContext,\n        searchState: props.searchState\n      };\n    }\n  })];\n};","map":{"version":3,"names":["eventBus","appCtxService","_","Debug","DerivedStateResult","trace","defaultPWASelectionChangeHandler","selModel","selected","dataProvider","registerCtx","currentSelectedCount","getCurrentSelectedCount","publish","selectionModel","selectedObjects","cloneDeep","handleSelectionChange","localSelectionData","parentSelectionData","isEmpty","update","source","reset","dp","getDpListener","resetDataProvider","handleSelectEvent","eventData","selectAll","selectNone","handleMultiSelectEvent","setMultiSelectionEnabled","multiSelect","getContext","vmDef","props","ctxParameters","additionalParameters","subPanelContext","searchState","compute","provider"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/AwPrimaryWorkareaService.js"],"sourcesContent":["import eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport { DerivedStateResult } from 'js/derivedContextService';\n\nconst trace = new Debug( 'selection' );\n\nconst defaultPWASelectionChangeHandler = ( { selected, dataProvider }, selModel ) => {\n    // Revisit me: Story LCS-524878 - Reduce dependency on ctx - follow uni-directional data flow\n    appCtxService.registerCtx( 'pwaSelectionInfo', {\n        currentSelectedCount: selModel.getCurrentSelectedCount()\n    } );\n\n    //Named event is an anti-pattern. Keeping it here to maintain backward compatibility.\n    // data.source = 'primaryWorkArea'; This event used to send the scope\n    eventBus.publish( 'primaryWorkArea.selectionChangeEvent', {\n        selectionModel: selModel,\n        // dataCtxNode: $scope,\n        dataProvider: dataProvider,\n        selectedObjects: _.cloneDeep( selected )\n    } );\n};\n\nexport const handleSelectionChange = ( localSelectionData, parentSelectionData, selModel ) => {\n    if( !_.isEmpty( localSelectionData ) ) {\n        if( parentSelectionData ) {\n            parentSelectionData.update( { ...localSelectionData, source: 'primary' } );\n        }\n        defaultPWASelectionChangeHandler( localSelectionData, selModel );\n        trace( 'AwPrimaryWorkarea selectionData: ', localSelectionData );\n    }\n};\n\nexport const reset = ( selectionModel ) => {\n    const dp = selectionModel.getDpListener();\n    if( dp ) {\n        dp.resetDataProvider();\n    }\n};\n\nexport const handleSelectEvent = ( eventData, selectionModel ) => {\n    const dp = selectionModel.getDpListener();\n    if( dp ) {\n        if( eventData.selectAll ) {\n            dp.selectAll();\n        } else {\n            dp.selectNone();\n        }\n    }\n};\n\nexport const handleMultiSelectEvent = ( eventData, selectionModel ) => {\n    const dp = selectionModel.getDpListener();\n    if( dp ) {\n        dp.selectionModel.setMultiSelectionEnabled( eventData.multiSelect );\n        if( !eventData.multiSelect ) {\n            dp.selectNone();\n        }\n        return eventData.multiSelect;\n    }\n    return false;\n};\n\nexport const getContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.searchState ],\n        compute: () => {\n            return {\n                provider: props.subPanelContext,\n                searchState: props.searchState\n            };\n        }\n    } ) ];\n};\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AAEA,MAAMC,KAAK,GAAG,IAAIF,KAAJ,CAAW,WAAX,CAAd;;AAEA,MAAMG,gCAAgC,GAAG,OAA8BC,QAA9B,KAA4C;EAAA,IAA1C;IAAEC,QAAF;IAAYC;EAAZ,CAA0C;EACjF;EACAR,aAAa,CAACS,WAAd,CAA2B,kBAA3B,EAA+C;IAC3CC,oBAAoB,EAAEJ,QAAQ,CAACK,uBAAT;EADqB,CAA/C,EAFiF,CAMjF;EACA;;EACAZ,QAAQ,CAACa,OAAT,CAAkB,sCAAlB,EAA0D;IACtDC,cAAc,EAAEP,QADsC;IAEtD;IACAE,YAAY,EAAEA,YAHwC;IAItDM,eAAe,EAAEb,CAAC,CAACc,SAAF,CAAaR,QAAb;EAJqC,CAA1D;AAMH,CAdD;;AAgBA,OAAO,MAAMS,qBAAqB,GAAG,CAAEC,kBAAF,EAAsBC,mBAAtB,EAA2CZ,QAA3C,KAAyD;EAC1F,IAAI,CAACL,CAAC,CAACkB,OAAF,CAAWF,kBAAX,CAAL,EAAuC;IACnC,IAAIC,mBAAJ,EAA0B;MACtBA,mBAAmB,CAACE,MAApB,CAA4B,EAAE,GAAGH,kBAAL;QAAyBI,MAAM,EAAE;MAAjC,CAA5B;IACH;;IACDhB,gCAAgC,CAAEY,kBAAF,EAAsBX,QAAtB,CAAhC;IACAF,KAAK,CAAE,mCAAF,EAAuCa,kBAAvC,CAAL;EACH;AACJ,CARM;AAUP,OAAO,MAAMK,KAAK,GAAKT,cAAF,IAAsB;EACvC,MAAMU,EAAE,GAAGV,cAAc,CAACW,aAAf,EAAX;;EACA,IAAID,EAAJ,EAAS;IACLA,EAAE,CAACE,iBAAH;EACH;AACJ,CALM;AAOP,OAAO,MAAMC,iBAAiB,GAAG,CAAEC,SAAF,EAAad,cAAb,KAAiC;EAC9D,MAAMU,EAAE,GAAGV,cAAc,CAACW,aAAf,EAAX;;EACA,IAAID,EAAJ,EAAS;IACL,IAAII,SAAS,CAACC,SAAd,EAA0B;MACtBL,EAAE,CAACK,SAAH;IACH,CAFD,MAEO;MACHL,EAAE,CAACM,UAAH;IACH;EACJ;AACJ,CATM;AAWP,OAAO,MAAMC,sBAAsB,GAAG,CAAEH,SAAF,EAAad,cAAb,KAAiC;EACnE,MAAMU,EAAE,GAAGV,cAAc,CAACW,aAAf,EAAX;;EACA,IAAID,EAAJ,EAAS;IACLA,EAAE,CAACV,cAAH,CAAkBkB,wBAAlB,CAA4CJ,SAAS,CAACK,WAAtD;;IACA,IAAI,CAACL,SAAS,CAACK,WAAf,EAA6B;MACzBT,EAAE,CAACM,UAAH;IACH;;IACD,OAAOF,SAAS,CAACK,WAAjB;EACH;;EACD,OAAO,KAAP;AACH,CAVM;AAYP,OAAO,MAAMC,UAAU,GAAG,CAAEC,KAAF,EAASC,KAAT,KAAoB;EAC1C,OAAO,CAAE,IAAIhC,kBAAJ,CAAwB;IAC7BiC,aAAa,EAAE,EADc;IAE7BC,oBAAoB,EAAE,CAAEF,KAAK,CAACG,eAAR,EAAyBH,KAAK,CAACI,WAA/B,CAFO;IAG7BC,OAAO,EAAE,MAAM;MACX,OAAO;QACHC,QAAQ,EAAEN,KAAK,CAACG,eADb;QAEHC,WAAW,EAAEJ,KAAK,CAACI;MAFhB,CAAP;IAIH;EAR4B,CAAxB,CAAF,CAAP;AAUH,CAXM"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\commonframe\\\\src\\\\js\\\\autoSaveContextService.js\"; // Copyright (c) 2020 Siemens\n\n/**\n * @module js/autoSaveContextService\n */\n\nimport appCtxService from 'js/appCtxService';\nimport editHandlerService from 'js/editHandlerService';\nimport localStorage from 'js/localStorage';\nimport modelPropertyService from 'js/modelPropertyService';\nimport localeService from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\nimport AwColumn from 'viewmodel/AwColumnViewModel';\nimport AwToggleButton from 'viewmodel/AwTogglebuttonViewModel';\nimport { ExtendedTooltip } from 'js/hocCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTO_SAVE_CTX_PATH = 'autoSave.dbValue';\nlet autoSaveWorkspaceValue;\nconst AwToggleButtonHOC = ExtendedTooltip(AwToggleButton);\n/**\n * API to update the autoSave mode\n *\n * @param {Boolean} enable - true if autoSave should be enabled\n */\n\n_c2 = AwToggleButtonHOC;\n_c = AwToggleButtonHOC;\nexport const setAutoSaveToggle = function (enable) {\n  // Do not update value if workspace override is being used\n  if (autoSaveWorkspaceValue !== undefined) {\n    return;\n  }\n\n  appCtxService.updatePartialCtx(AUTO_SAVE_CTX_PATH, enable);\n};\n/**\n * API to trigger leaveConfirmation, update local storage, and announce changes when the toggle changes\n * @param {Object} prop - the property field\n */\n\nexport const onChangeCallback = function (prop) {\n  return function (event) {\n    if (prop.onChange) {\n      prop.onChange(event);\n    } // Revert toggle value until leave confirmation is finished\n\n\n    const currentToggleValue = appCtxService.getCtx(AUTO_SAVE_CTX_PATH);\n    prop.update(!currentToggleValue);\n    editHandlerService.leaveConfirmation().then(() => {\n      // Apply new toggle value\n      prop.update(currentToggleValue); // setAutoSaveToggle( currentToggleValue );\n      // Update local storage so user value can be persisted\n\n      localStorage.publish('autosave', currentToggleValue); // Publish event announcing the new value\n\n      eventBus.publish('autoSaveToggleChanged', currentToggleValue);\n    });\n  };\n};\n/**\n * API to handler workpace updates in ctx. When workspace is updated this api\n * will check for an autosave override. If the override is given the auto save mode will\n * be updated and the auto save toggle will be hidden in the UI.\n */\n\nconst handleWorkspaceAutoSaveSetting = function () {\n  // Overwrite overwrite and hide toggle if workspace override exists\n  eventBus.subscribe('appCtx.update', function (event) {\n    if (event.name === 'workspace') {\n      autoSaveWorkspaceValue = _.get(event.value, 'settings.autoSave');\n\n      if (autoSaveWorkspaceValue !== undefined) {\n        setAutoSaveToggle(autoSaveWorkspaceValue); // Hide autosave toggle if workspace override is in use\n\n        appCtxService.updateCtx('showAutoSaveToggle', false);\n      }\n    }\n  });\n};\n/**\n * Sets up autosave in appCtx. Priority is workspace override followed by local storage.\n */\n\n\nexport const initializeAutoSaveContext = async function () {\n  // The autoSave context initial value will be true unless local storage or workspace override exists\n  let initialAutoSaveValue = true;\n  appCtxService.registerCtx('showAutoSaveToggle', true); // Apply value from local storage if it exists\n\n  const autoSaveLocalStorageValue = localStorage.get('autosave');\n\n  if (autoSaveLocalStorageValue === 'true' || autoSaveLocalStorageValue === 'false') {\n    initialAutoSaveValue = autoSaveLocalStorageValue === 'true';\n  } // Aply workspace override if it exists\n\n\n  handleWorkspaceAutoSaveSetting(); // Apply initial value to ctx\n\n  const displayName = await localeService.getLocalizedTextFromKey('BaseMessages.AUTO_SAVE_TITLE', true);\n  appCtxService.registerCtx('autoSave', modelPropertyService.createViewModelProperty({\n    displayName: displayName,\n    type: 'BOOLEAN',\n    dbValue: initialAutoSaveValue\n  }));\n};\nexport const autoSaveContextRenderFunction = _ref => {\n  let {\n    actions,\n    viewModel,\n    fields\n  } = _ref;\n  const {\n    data\n  } = viewModel;\n\n  if (fields.autoSave && fields.autoSave.fielddata) {\n    fields.autoSave.fielddata.labelPlacement = 'start';\n  }\n\n  return /*#__PURE__*/_jsxDEV(AwColumn, {\n    children: /*#__PURE__*/_jsxDEV(AwToggleButtonHOC, { ...fields.autoSave,\n      onChange: onChangeCallback(fields.autoSave),\n      extendedTooltipOptions: \"{alignment : 'top'}\",\n      extendedTooltipContext: data.tooltip,\n      extendedTooltip: \"ExtendedTooltipDefault\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\nexport default {\n  initializeAutoSaveContext,\n  setAutoSaveToggle,\n  onChangeCallback,\n  autoSaveContextRenderFunction\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AwToggleButtonHOC\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"AwToggleButtonHOC\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/commonframe/src/js/autoSaveContextService.js"],"names":["AUTO_SAVE_CTX_PATH","AwToggleButtonHOC","ExtendedTooltip","setAutoSaveToggle","autoSaveWorkspaceValue","appCtxService","onChangeCallback","prop","currentToggleValue","editHandlerService","localStorage","eventBus","handleWorkspaceAutoSaveSetting","event","_","initializeAutoSaveContext","initialAutoSaveValue","autoSaveLocalStorageValue","displayName","localeService","type","dbValue","autoSaveContextRenderFunction","fields","data"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/autoSaveContextService\n */\nimport appCtxService from 'js/appCtxService';\nimport editHandlerService from 'js/editHandlerService';\nimport localStorage from 'js/localStorage';\nimport modelPropertyService from 'js/modelPropertyService';\nimport localeService from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\n\nimport AwColumn from 'viewmodel/AwColumnViewModel';\nimport AwToggleButton from 'viewmodel/AwTogglebuttonViewModel';\nimport { ExtendedTooltip } from 'js/hocCollection';\nconst AUTO_SAVE_CTX_PATH = 'autoSave.dbValue';\nlet autoSaveWorkspaceValue;\n\nconst AwToggleButtonHOC = ExtendedTooltip( AwToggleButton );\n/**\n * API to update the autoSave mode\n *\n * @param {Boolean} enable - true if autoSave should be enabled\n */\nexport const setAutoSaveToggle = function( enable ) {\n    // Do not update value if workspace override is being used\n    if( autoSaveWorkspaceValue !== undefined ) {\n        return;\n    }\n    appCtxService.updatePartialCtx( AUTO_SAVE_CTX_PATH, enable );\n};\n\n/**\n * API to trigger leaveConfirmation, update local storage, and announce changes when the toggle changes\n * @param {Object} prop - the property field\n */\nexport const onChangeCallback = function( prop ) {\n    return function( event ) {\n        if( prop.onChange ) {\n            prop.onChange( event );\n        }\n\n        // Revert toggle value until leave confirmation is finished\n        const currentToggleValue = appCtxService.getCtx( AUTO_SAVE_CTX_PATH );\n        prop.update( !currentToggleValue );\n        editHandlerService.leaveConfirmation().then( () => {\n            // Apply new toggle value\n            prop.update( currentToggleValue );\n            // setAutoSaveToggle( currentToggleValue );\n            // Update local storage so user value can be persisted\n            localStorage.publish( 'autosave', currentToggleValue );\n            // Publish event announcing the new value\n            eventBus.publish( 'autoSaveToggleChanged', currentToggleValue );\n        } );\n    };\n};\n\n/**\n * API to handler workpace updates in ctx. When workspace is updated this api\n * will check for an autosave override. If the override is given the auto save mode will\n * be updated and the auto save toggle will be hidden in the UI.\n */\nconst handleWorkspaceAutoSaveSetting = function() {\n    // Overwrite overwrite and hide toggle if workspace override exists\n    eventBus.subscribe( 'appCtx.update', function( event ) {\n        if( event.name === 'workspace' ) {\n            autoSaveWorkspaceValue = _.get( event.value, 'settings.autoSave' );\n            if( autoSaveWorkspaceValue !== undefined ) {\n                setAutoSaveToggle( autoSaveWorkspaceValue );\n                // Hide autosave toggle if workspace override is in use\n                appCtxService.updateCtx( 'showAutoSaveToggle', false );\n            }\n        }\n    } );\n};\n\n/**\n * Sets up autosave in appCtx. Priority is workspace override followed by local storage.\n */\nexport const initializeAutoSaveContext = async function() {\n    // The autoSave context initial value will be true unless local storage or workspace override exists\n    let initialAutoSaveValue = true;\n    appCtxService.registerCtx( 'showAutoSaveToggle', true );\n\n    // Apply value from local storage if it exists\n    const autoSaveLocalStorageValue = localStorage.get( 'autosave' );\n    if( autoSaveLocalStorageValue === 'true' || autoSaveLocalStorageValue === 'false' ) {\n        initialAutoSaveValue = autoSaveLocalStorageValue === 'true';\n    }\n\n    // Aply workspace override if it exists\n    handleWorkspaceAutoSaveSetting();\n\n    // Apply initial value to ctx\n    const displayName = await localeService.getLocalizedTextFromKey( 'BaseMessages.AUTO_SAVE_TITLE', true );\n    appCtxService.registerCtx( 'autoSave', modelPropertyService.createViewModelProperty( {\n        displayName: displayName,\n        type: 'BOOLEAN',\n        dbValue: initialAutoSaveValue\n    } ) );\n};\n\nexport const autoSaveContextRenderFunction = ( { actions, viewModel, fields } ) => {\n    const { data } = viewModel;\n\n    if( fields.autoSave && fields.autoSave.fielddata ) {\n        fields.autoSave.fielddata.labelPlacement = 'start';\n    }\n\n    return (\n        <AwColumn>\n            <AwToggleButtonHOC {...fields.autoSave} onChange={onChangeCallback( fields.autoSave )}\n                extendedTooltipOptions=\"{alignment : 'top'}\"\n                extendedTooltipContext={data.tooltip}\n                extendedTooltip='ExtendedTooltipDefault'>\n            </AwToggleButtonHOC>\n        </AwColumn>\n    );\n};\n\nexport default {\n    initializeAutoSaveContext,\n    setAutoSaveToggle,\n    onChangeCallback,\n    autoSaveContextRenderFunction\n};\n"]},"metadata":{},"sourceType":"module"}
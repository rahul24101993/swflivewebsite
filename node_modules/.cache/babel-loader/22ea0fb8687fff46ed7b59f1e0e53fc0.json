{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service provides helpful APIs to register key down event and handles ctrl+c, ctrl+v and ctrl+x keyboard\n * shortcuts.\n *\n * @module js/keyboardService\n */\nimport $ from 'jquery';\nimport domUtils from 'js/domUtils';\n/**\n * Define public API\n */\n\nvar exports = {};\nlet dom = domUtils.DOMAPIs;\nlet bodyElement = document.querySelector('body');\nexport let keyCmdIdMap = {\n  67: ['Awp0Copy'],\n  86: ['Awp0Paste', 'Awp0PasteGroup'],\n  88: ['Awp0Cut', 'Awb0RemoveElement']\n};\n/**\n * register keydown event\n */\n\nexport let registerKeyDownEvent = function () {\n  // unregister key down event before registering it.\n  exports.unRegisterKeyDownEvent();\n  dom.on(bodyElement, 'keydown', () => {\n    exports.checkForPressedKey(event);\n  });\n};\n/**\n * unRegister keydown event\n */\n\nexport let unRegisterKeyDownEvent = function () {\n  dom.off(bodyElement, 'keydown');\n};\n/**\n * Get text selected in browser\n *\n * @return selectedText\n */\n\nexport let getSelectionText = function () {\n  var selectedText = '';\n\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  }\n\n  return selectedText;\n};\n/**\n * Check if selection/range is valid to process hotkey\n */\n\nexport let isSelectionValid = function (event) {\n  var selectedText = exports.getSelectionText();\n\n  if (selectedText === '') {\n    var targetCss = event.target.getAttribute('class');\n\n    if (!targetCss || targetCss.indexOf('sw-property-val') === -1 && targetCss.indexOf('aw-uiwidgets-searchBox') === -1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * check for pressed key and do necessary actions\n */\n\nexport let checkForPressedKey = function (event) {\n  var keyId = event.which || event.keyCode;\n  var ctrl = event.ctrlKey;\n\n  if (ctrl && keyId !== 17) {\n    var proceed = exports.isSelectionValid(event);\n\n    if (proceed && exports.keyCmdIdMap[keyId]) {\n      var cmdIds = exports.keyCmdIdMap[keyId];\n\n      for (var i = 0; i < cmdIds.length; i++) {\n        var commands = document.querySelectorAll('[command-id=' + cmdIds[i] + ']'); // click on first active command\n\n        if (commands[0] && !$(commands[0]).hasClass('disabled')) {\n          commands[0].click();\n          break;\n        }\n      }\n    }\n  }\n};\nexports = {\n  keyCmdIdMap,\n  registerKeyDownEvent,\n  unRegisterKeyDownEvent,\n  getSelectionText,\n  isSelectionValid,\n  checkForPressedKey\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/keyboardService.js"],"names":["exports","dom","domUtils","bodyElement","document","keyCmdIdMap","registerKeyDownEvent","unRegisterKeyDownEvent","getSelectionText","selectedText","window","isSelectionValid","targetCss","event","checkForPressedKey","keyId","ctrl","proceed","cmdIds","i","commands","$"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service provides helpful APIs to register key down event and handles ctrl+c, ctrl+v and ctrl+x keyboard\n * shortcuts.\n *\n * @module js/keyboardService\n */\n\nimport $ from 'jquery';\nimport domUtils from 'js/domUtils';\n\n/**\n * Define public API\n */\nvar exports = {};\nlet dom = domUtils.DOMAPIs;\nlet bodyElement = document.querySelector( 'body' );\n\nexport let keyCmdIdMap = {\n    67: [ 'Awp0Copy' ],\n    86: [ 'Awp0Paste', 'Awp0PasteGroup' ],\n    88: [ 'Awp0Cut', 'Awb0RemoveElement' ]\n};\n\n/**\n * register keydown event\n */\nexport let registerKeyDownEvent = function() {\n    // unregister key down event before registering it.\n    exports.unRegisterKeyDownEvent();\n\n    dom.on( bodyElement, 'keydown', () => {\n        exports.checkForPressedKey( event );\n    } );\n};\n\n/**\n * unRegister keydown event\n */\nexport let unRegisterKeyDownEvent = function() {\n    dom.off( bodyElement, 'keydown' );\n};\n\n/**\n * Get text selected in browser\n *\n * @return selectedText\n */\nexport let getSelectionText = function() {\n    var selectedText = '';\n    if( window.getSelection ) {\n        selectedText = window.getSelection().toString();\n    }\n    return selectedText;\n};\n\n/**\n * Check if selection/range is valid to process hotkey\n */\nexport let isSelectionValid = function( event ) {\n    var selectedText = exports.getSelectionText();\n    if( selectedText === '' ) {\n        var targetCss = event.target.getAttribute( 'class' );\n        if( !targetCss ||\n            targetCss.indexOf( 'sw-property-val' ) === -1 && targetCss\n            .indexOf( 'aw-uiwidgets-searchBox' ) === -1 ) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n * check for pressed key and do necessary actions\n */\nexport let checkForPressedKey = function( event ) {\n    var keyId = event.which || event.keyCode;\n    var ctrl = event.ctrlKey;\n    if( ctrl && keyId !== 17 ) {\n        var proceed = exports.isSelectionValid( event );\n        if( proceed && exports.keyCmdIdMap[ keyId ] ) {\n            var cmdIds = exports.keyCmdIdMap[ keyId ];\n            for( var i = 0; i < cmdIds.length; i++ ) {\n                var commands = document.querySelectorAll( '[command-id=' + cmdIds[ i ] + ']' );\n                // click on first active command\n                if( commands[ 0 ] && !$( commands[ 0 ] ).hasClass( 'disabled' ) ) {\n                    commands[ 0 ].click();\n                    break;\n                }\n            }\n        }\n    }\n};\n\nexports = {\n    keyCmdIdMap,\n    registerKeyDownEvent,\n    unRegisterKeyDownEvent,\n    getSelectionText,\n    isSelectionValid,\n    checkForPressedKey\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
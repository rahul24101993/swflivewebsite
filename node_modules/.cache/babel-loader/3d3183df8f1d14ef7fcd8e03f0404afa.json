{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * Defines {@link themeService} which manages themes.\n *\n * @module js/theme.service\n */\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport configurationService from 'js/configurationService';\nimport localStorage from 'js/localStorage';\n/**\n * The theme link element\n */\n\nlet themeLink = null;\n/**\n * Theme context\n */\n\nlet themeContext = 'theme';\n/**\n * Initialize the theme service\n */\n\nexport function init() {\n  exports.setInitialTheme();\n}\n/**\n * Get the current theme\n *\n * @return {String} The current theme\n */\n\nexport function getTheme() {\n  return appCtxService.getCtx(themeContext);\n}\n/**\n * Set the theme to the theme in local storage or the default theme\n */\n\nexport function setInitialTheme() {\n  var localTheme = exports.getLocalStorageTheme();\n\n  if (localTheme) {\n    exports.setTheme(localTheme);\n  } else {\n    exports.getDefaultTheme().then(exports.setTheme);\n  }\n}\n/**\n * Get the current theme from local storage\n *\n * @return {String} The theme in local storage\n */\n\nexport function getLocalStorageTheme() {\n  return localStorage.get(themeContext);\n}\n/**\n * Get the default theme defined by the workspace\n *\n * @return {String} The default workspace theme\n */\n\nexport function getDefaultTheme() {\n  return configurationService.getCfg('solutionDef').then(function (solutionDef) {\n    return solutionDef.defaultTheme ? solutionDef.defaultTheme : 'ui-lightTheme';\n  });\n}\n/**\n * Set the current theme\n *\n * @example themeService.setTheme( 'ui-lightTheme' )\n *\n * @param {String} newTheme - The new theme\n */\n\nexport function setTheme(newTheme) {\n  appCtxService.registerCtx(themeContext, newTheme);\n}\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nconst exports = {\n  init,\n  getTheme,\n  setInitialTheme,\n  getLocalStorageTheme,\n  getDefaultTheme,\n  setTheme\n};\nexport default exports;","map":{"version":3,"names":["eventBus","appCtxService","configurationService","localStorage","themeLink","themeContext","init","exports","setInitialTheme","getTheme","getCtx","localTheme","getLocalStorageTheme","setTheme","getDefaultTheme","then","get","getCfg","solutionDef","defaultTheme","newTheme","registerCtx"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/theme.service.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * Defines {@link themeService} which manages themes.\n *\n * @module js/theme.service\n */\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport configurationService from 'js/configurationService';\nimport localStorage from 'js/localStorage';\n\n/**\n * The theme link element\n */\nlet themeLink = null;\n\n/**\n * Theme context\n */\nlet themeContext = 'theme';\n\n/**\n * Initialize the theme service\n */\nexport function init() {\n    exports.setInitialTheme();\n}\n\n/**\n * Get the current theme\n *\n * @return {String} The current theme\n */\nexport function getTheme() {\n    return appCtxService.getCtx( themeContext );\n}\n\n/**\n * Set the theme to the theme in local storage or the default theme\n */\nexport function setInitialTheme() {\n    var localTheme = exports.getLocalStorageTheme();\n    if( localTheme ) {\n        exports.setTheme( localTheme );\n    } else {\n        exports.getDefaultTheme().then( exports.setTheme );\n    }\n}\n\n/**\n * Get the current theme from local storage\n *\n * @return {String} The theme in local storage\n */\nexport function getLocalStorageTheme() {\n    return localStorage.get( themeContext );\n}\n\n/**\n * Get the default theme defined by the workspace\n *\n * @return {String} The default workspace theme\n */\nexport function getDefaultTheme() {\n    return configurationService.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n        return solutionDef.defaultTheme ? solutionDef.defaultTheme : 'ui-lightTheme';\n    } );\n}\n\n/**\n * Set the current theme\n *\n * @example themeService.setTheme( 'ui-lightTheme' )\n *\n * @param {String} newTheme - The new theme\n */\nexport function setTheme( newTheme ) {\n    appCtxService.registerCtx( themeContext, newTheme );\n}\n\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nconst exports = {\n    init,\n    getTheme,\n    setInitialTheme,\n    getLocalStorageTheme,\n    getDefaultTheme,\n    setTheme\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,IAAhB;AAEA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,OAAnB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,GAAgB;EACnBC,OAAO,CAACC,eAAR;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,GAAoB;EACvB,OAAOR,aAAa,CAACS,MAAd,CAAsBL,YAAtB,CAAP;AACH;AAED;AACA;AACA;;AACA,OAAO,SAASG,eAAT,GAA2B;EAC9B,IAAIG,UAAU,GAAGJ,OAAO,CAACK,oBAAR,EAAjB;;EACA,IAAID,UAAJ,EAAiB;IACbJ,OAAO,CAACM,QAAR,CAAkBF,UAAlB;EACH,CAFD,MAEO;IACHJ,OAAO,CAACO,eAAR,GAA0BC,IAA1B,CAAgCR,OAAO,CAACM,QAAxC;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASD,oBAAT,GAAgC;EACnC,OAAOT,YAAY,CAACa,GAAb,CAAkBX,YAAlB,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,eAAT,GAA2B;EAC9B,OAAOZ,oBAAoB,CAACe,MAArB,CAA6B,aAA7B,EAA6CF,IAA7C,CAAmD,UAAUG,WAAV,EAAwB;IAC9E,OAAOA,WAAW,CAACC,YAAZ,GAA2BD,WAAW,CAACC,YAAvC,GAAsD,eAA7D;EACH,CAFM,CAAP;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASN,QAAT,CAAmBO,QAAnB,EAA8B;EACjCnB,aAAa,CAACoB,WAAd,CAA2BhB,YAA3B,EAAyCe,QAAzC;AACH;AAED;AACA;AACA;AACA;;AAEA,MAAMb,OAAO,GAAG;EACZD,IADY;EAEZG,QAFY;EAGZD,eAHY;EAIZI,oBAJY;EAKZE,eALY;EAMZD;AANY,CAAhB;AAQA,eAAeN,OAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is the primary service used to create, test and manage the internal properties of CommandHandler Objects used in\n * AW.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/commandHandlerService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\n\nlet exports;\n/**\n * Hide the command panel if the handler is active\n *\n * @param {CommandHandler} commandHdlr - The command handler\n */\n\nvar hideIfActive = function (commandHdlr) {\n  var activeCommandContexts = ['activeNavigationCommand', 'activeToolsAndInfoCommand', 'sidenavCommandId'];\n  var commandIdArray = [];\n  activeCommandContexts.forEach(function (ctx) {\n    // Zero compile commands share visibility which means the \"open\" command will only have same commandId\n    var isCommandOpen = appCtxService.getCtx(ctx + '.commandId') && appCtxService.getCtx(ctx + '.commandId') === commandHdlr.commandId || appCtxService.getCtx(ctx) && appCtxService.getCtx(ctx) === commandHdlr.commandId;\n\n    if (isCommandOpen) {\n      var commandId = appCtxService.getCtx(ctx + '.commandId') === commandHdlr.commandId ? appCtxService.getCtx(ctx + '.commandId') : appCtxService.getCtx(ctx);\n\n      if (!commandIdArray.includes(commandId)) {\n        var id = null;\n\n        if (ctx === 'activeNavigationCommand') {\n          id = 'aw_navigation';\n        } else if (ctx === 'activeToolsAndInfoCommand') {\n          id = 'aw_toolsAndInfo';\n        }\n\n        eventBus.publish('awsidenav.openClose', {\n          id: id,\n          commandId: commandId\n        });\n        commandIdArray.push(commandId);\n      }\n    }\n  });\n};\n/**\n * Change the icon of a command handler\n *\n * @param {CommandHandler} commandHdlr Handler to update\n * @param {String} iconId Icon id\n */\n\n\nexport let setIcon = function (commandHdlr, iconId) {\n  commandHdlr.iconId = iconId;\n};\n/**\n * Set 'isVisible' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isVisible - is visible flag\n */\n\nexport let setIsVisible = function (commandHdlr, isVisible) {\n  if (commandHdlr.visible !== isVisible) {\n    commandHdlr.visible = isVisible;\n\n    if (!commandHdlr.visible) {\n      hideIfActive(commandHdlr);\n    }\n  }\n};\n/**\n * Set 'isEnabled' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isEnabled - is enabled flag\n */\n\nexport let setIsEnabled = function (commandHdlr, isEnabled) {\n  if (commandHdlr.enabled !== isEnabled) {\n    commandHdlr.enabled = isEnabled;\n\n    if (!commandHdlr.enabled) {\n      hideIfActive(commandHdlr);\n    }\n  }\n};\n/**\n * Set 'isSelected' state of the command\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {boolean} isSelected - is selected flag\n */\n\nexport let setSelected = function (commandHdlr, isSelected) {\n  commandHdlr.isSelected = isSelected;\n};\n/**\n * Set 'isGroupCommand' of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} nameToken - is group command flag\n * @returns {Promise} Promise resolved when done\n */\n\nexport let getPanelLifeCycleClose = function (commandHdlr, nameToken) {\n  var deferred = AwPromiseService.instance.defer();\n  commandHdlr.callbackApi.getPanelLifeCycleClose(nameToken, deferred);\n  return deferred.promise;\n};\n/**\n * Do any setup the command handler requires before creating the view\n *\n * @param {CommandHandler} commandHdlr - The command handler\n *\n * @return {Promise} A promise resolved when done\n */\n\nexport let setupDeclarativeView = function (commandHdlr) {\n  var deferred = AwPromiseService.instance.defer();\n  commandHdlr.setupDeclarativeView(deferred);\n  return deferred.promise;\n};\n/* eslint-disable-next-line valid-jsdoc*/\n\nexports = {\n  setIcon,\n  setIsVisible,\n  setIsEnabled,\n  setSelected,\n  getPanelLifeCycleClose,\n  setupDeclarativeView\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","appCtxService","_","eventBus","exports","hideIfActive","commandHdlr","activeCommandContexts","commandIdArray","forEach","ctx","isCommandOpen","getCtx","commandId","includes","id","publish","push","setIcon","iconId","setIsVisible","isVisible","visible","setIsEnabled","isEnabled","enabled","setSelected","isSelected","getPanelLifeCycleClose","nameToken","deferred","instance","defer","callbackApi","promise","setupDeclarativeView"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/commandHandlerService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is the primary service used to create, test and manage the internal properties of CommandHandler Objects used in\n * AW.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/commandHandlerService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\nlet exports;\n\n/**\n * Hide the command panel if the handler is active\n *\n * @param {CommandHandler} commandHdlr - The command handler\n */\nvar hideIfActive = function( commandHdlr ) {\n    var activeCommandContexts = [ 'activeNavigationCommand', 'activeToolsAndInfoCommand', 'sidenavCommandId' ];\n    var commandIdArray = [];\n    activeCommandContexts\n        .forEach( function( ctx ) {\n            // Zero compile commands share visibility which means the \"open\" command will only have same commandId\n            var isCommandOpen = appCtxService.getCtx( ctx + '.commandId' ) &&\n                appCtxService.getCtx( ctx + '.commandId' ) === commandHdlr.commandId ||\n                appCtxService.getCtx( ctx ) &&\n                appCtxService.getCtx( ctx ) === commandHdlr.commandId;\n            if( isCommandOpen ) {\n                var commandId = appCtxService.getCtx( ctx + '.commandId' ) === commandHdlr.commandId ? appCtxService.getCtx( ctx + '.commandId' ) : appCtxService.getCtx( ctx );\n                if( !commandIdArray.includes( commandId ) ) {\n                    var id = null;\n                    if( ctx === 'activeNavigationCommand' ) {\n                        id = 'aw_navigation';\n                    } else if( ctx === 'activeToolsAndInfoCommand' ) {\n                        id = 'aw_toolsAndInfo';\n                    }\n                    eventBus.publish( 'awsidenav.openClose', {\n                        id: id,\n                        commandId: commandId\n                    } );\n                    commandIdArray.push( commandId );\n                }\n            }\n        } );\n};\n\n/**\n * Change the icon of a command handler\n *\n * @param {CommandHandler} commandHdlr Handler to update\n * @param {String} iconId Icon id\n */\nexport let setIcon = function( commandHdlr, iconId ) {\n    commandHdlr.iconId = iconId;\n};\n\n/**\n * Set 'isVisible' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isVisible - is visible flag\n */\nexport let setIsVisible = function( commandHdlr, isVisible ) {\n    if( commandHdlr.visible !== isVisible ) {\n        commandHdlr.visible = isVisible;\n        if( !commandHdlr.visible ) {\n            hideIfActive( commandHdlr );\n        }\n    }\n};\n\n/**\n * Set 'isEnabled' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isEnabled - is enabled flag\n */\nexport let setIsEnabled = function( commandHdlr, isEnabled ) {\n    if( commandHdlr.enabled !== isEnabled ) {\n        commandHdlr.enabled = isEnabled;\n        if( !commandHdlr.enabled ) {\n            hideIfActive( commandHdlr );\n        }\n    }\n};\n\n/**\n * Set 'isSelected' state of the command\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {boolean} isSelected - is selected flag\n */\nexport let setSelected = function( commandHdlr, isSelected ) {\n    commandHdlr.isSelected = isSelected;\n};\n\n/**\n * Set 'isGroupCommand' of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} nameToken - is group command flag\n * @returns {Promise} Promise resolved when done\n */\nexport let getPanelLifeCycleClose = function( commandHdlr, nameToken ) {\n    var deferred = AwPromiseService.instance.defer();\n    commandHdlr.callbackApi.getPanelLifeCycleClose( nameToken, deferred );\n    return deferred.promise;\n};\n\n/**\n * Do any setup the command handler requires before creating the view\n *\n * @param {CommandHandler} commandHdlr - The command handler\n *\n * @return {Promise} A promise resolved when done\n */\nexport let setupDeclarativeView = function( commandHdlr ) {\n    var deferred = AwPromiseService.instance.defer();\n    commandHdlr.setupDeclarativeView( deferred );\n    return deferred.promise;\n};\n\n/* eslint-disable-next-line valid-jsdoc*/\n\nexports = {\n    setIcon,\n    setIsVisible,\n    setIsEnabled,\n    setSelected,\n    getPanelLifeCycleClose,\n    setupDeclarativeView\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwDefaultGroupCellService.js\";\nimport { includeComponent } from 'js/moduleLoader';\nimport { mapChildren } from 'js/reactHelper';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEqual = (previousValue, currentValue, props) => {\n  var isObjectEqual = true;\n\n  if (!previousValue) {\n    return false;\n  }\n\n  _.forEach(props, function (key) {\n    if (_.get(previousValue, key) !== _.get(currentValue, key)) {\n      isObjectEqual = false;\n      return false;\n    }\n  });\n\n  return isObjectEqual;\n};\n\nexport const awDefaultGroupCellRenderFunction = props => {\n  const {\n    item,\n    groupBy,\n    // used to judge group or cell\n    previousItem,\n    // used as slot\n    // parent used to mount the headerView\n    // headerView,\n    // cellView,\n    children,\n    parent\n  } = props;\n  const groupByProps = groupBy.split(',');\n  let cellHasHeader = true;\n\n  if (isEqual(previousItem, item, groupByProps)) {\n    cellHasHeader = false;\n  }\n\n  const getHeader = props => mapChildren(children[0], props);\n\n  const getCell = props => mapChildren(children[1], props);\n\n  const childProps = {\n    item,\n    parent\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-row flex-auto\",\n    children: [cellHasHeader && getHeader(childProps), getCell(childProps)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwDefaultGroupCellService.js"],"names":["isEqual","isObjectEqual","_","awDefaultGroupCellRenderFunction","props","parent","groupByProps","groupBy","cellHasHeader","getHeader","mapChildren","children","getCell","childProps"],"mappings":";AAAA,SAAA,gBAAA,QAAA,iBAAA;AACA,SAAA,WAAA,QAAA,gBAAA;AACA,OAAA,CAAA,MAAA,QAAA;;;AAEA,MAAMA,OAAO,GAAG,CAAA,aAAA,EAAA,YAAA,EAAA,KAAA,KAA0C;EACtD,IAAIC,aAAa,GAAjB,IAAA;;EACA,IAAI,CAAJ,aAAA,EAAqB;IACjB,OAAA,KAAA;EACH;;EACDC,CAAC,CAADA,OAAAA,CAAAA,KAAAA,EAAkB,UAAA,GAAA,EAAgB;IAC9B,IAAIA,CAAC,CAADA,GAAAA,CAAAA,aAAAA,EAAAA,GAAAA,MAAgCA,CAAC,CAADA,GAAAA,CAAAA,YAAAA,EAApC,GAAoCA,CAApC,EAAiE;MAC7DD,aAAa,GAAbA,KAAAA;MACA,OAAA,KAAA;IACH;EAJLC,CAAAA;;EAMA,OAAA,aAAA;AAXJ,CAAA;;AAcA,OAAO,MAAMC,gCAAgC,GAAKC,KAAF,IAAa;EACzD,MAAM;IAAA,IAAA;IAAA,OAAA;IAGF;IAHE,YAAA;IAKF;IACA;IACA;IACA;IARE,QAAA;IAUFC;EAVE,IAAN,KAAA;EAaA,MAAMC,YAAY,GAAGC,OAAO,CAAPA,KAAAA,CAArB,GAAqBA,CAArB;EACA,IAAIC,aAAa,GAAjB,IAAA;;EACA,IAAIR,OAAO,CAAA,YAAA,EAAA,IAAA,EAAX,YAAW,CAAX,EAAkD;IAAEQ,aAAa,GAAbA,KAAAA;EAAwB;;EAE5E,MAAMC,SAAS,GAAKL,KAAF,IAAWM,WAAW,CAAEC,QAAQ,CAAV,CAAU,CAAV,EAAxC,KAAwC,CAAxC;;EACA,MAAMC,OAAO,GAAKR,KAAF,IAAWM,WAAW,CAAEC,QAAQ,CAAV,CAAU,CAAV,EAAtC,KAAsC,CAAtC;;EAEA,MAAME,UAAU,GAAG;IAAA,IAAA;IAAQR;EAAR,CAAnB;EACA,OAAA,aACI,OAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAd,kBAAA;IAAA,QAAA,EAAA,CACKG,aAAa,IAAIC,SAAS,CAD/B,UAC+B,CAD/B,EAEMG,OAAO,CAFb,UAEa,CAFb;EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADJ,IACI,CADJ;AAtBG,CAAA","sourcesContent":["import { includeComponent } from 'js/moduleLoader';\nimport { mapChildren } from 'js/reactHelper';\nimport _ from 'lodash';\n\nconst isEqual = ( previousValue, currentValue, props ) => {\n    var isObjectEqual = true;\n    if( !previousValue ) {\n        return false;\n    }\n    _.forEach( props, function( key ) {\n        if( _.get( previousValue, key ) !== _.get( currentValue, key ) ) {\n            isObjectEqual = false;\n            return false;\n        }\n    } );\n    return isObjectEqual;\n};\n\nexport const awDefaultGroupCellRenderFunction = ( props ) => {\n    const {\n        item,\n        groupBy,\n        // used to judge group or cell\n        previousItem,\n        // used as slot\n        // parent used to mount the headerView\n        // headerView,\n        // cellView,\n        children,\n        parent\n    } = props;\n\n    const groupByProps = groupBy.split( ',' );\n    let cellHasHeader = true;\n    if( isEqual( previousItem, item, groupByProps ) ) { cellHasHeader = false; }\n\n    const getHeader = ( props )=>mapChildren( children[0], props );\n    const getCell = ( props )=>mapChildren( children[1], props );\n\n    const childProps = { item, parent };\n    return (\n        <div className='sw-row flex-auto'>\n            {cellHasHeader && getHeader( childProps ) }\n            { getCell( childProps )}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
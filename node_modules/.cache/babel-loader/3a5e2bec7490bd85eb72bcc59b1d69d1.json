{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/modelPropertyService\n */\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\n/**\n * Cached reference to the View Model Property Object service\n */\n\nvar exports = {};\n/**\n * Update the property in the 'target' object with the same value as the 'source' object based on the given\n * 'path' to that property.\n *\n * @param {String} parentPath - Property path to the holder of the value in the 'source' & 'target' Objects.\n *\n * @param {String} attrHolderPropName - Name of the property in the 'propAttrHolder' class to apply.\n *\n * @param {ViewModelObject} sourceObject - The 'source' of the value to apply.\n *\n * @param {ViewModelObject} targetObject - The 'target' the value will be applies to.\n */\n\nexport let updateProperty = function (parentPath, attrHolderPropName, sourceObject, targetObject) {\n  var paths = [];\n  var prefix = parentPath + '.';\n\n  switch (attrHolderPropName) {\n    case 'dbValue':\n      paths.push(prefix + 'dbValues');\n      paths.push(prefix + 'dbValue');\n      paths.push(prefix + 'value');\n      break;\n\n    case 'displayName':\n      paths.push(prefix + 'propertyName');\n      paths.push(prefix + 'propertyDisplayName');\n      break;\n\n    case 'dispValue':\n      paths.push(prefix + 'displayValues');\n      paths.push(prefix + 'uiValue');\n      paths.push(prefix + 'uiValues');\n      break;\n\n    case 'isArray':\n      paths.push(prefix + 'isArray');\n      break;\n\n    case 'isEditable':\n      paths.push(prefix + 'isEditable');\n      break;\n\n    case 'isRequired':\n      paths.push(prefix + 'isRequired');\n      break;\n\n    case 'labelPosition':\n      paths.push(prefix + 'propertyLabelDisplay');\n      break;\n\n    case 'requiredText':\n      paths.push(prefix + 'requiredText');\n      break;\n\n    case 'type':\n      paths.push(prefix + 'type');\n      break;\n  }\n\n  _.forEach(paths, function (path) {\n    var newValue = _.get(sourceObject, path);\n\n    _.set(targetObject, path, newValue);\n  });\n};\n/**\n * @param {Object} propAttrHolder - An object that holds the following attributes:\n *\n * <pre>\n *           - {String} displayName - Display name of the property.\n *           - {String} type - {'STRING', 'INTEGER', 'BOOLEAN', 'DATE', 'FLOAT', 'CHAR'}\n *           - {Boolean} isRequired - If the property is required or not\n *           - {Boolean} isEditable - If the Property is editable or not\n *           - {Object} dbValue - Default value\n *           - {String} dispValue - Display Value\n *           - {Object} labelPosition - Position on panel.\n *           - {Boolean} isArray - If the Property is an array or not\n *           - {String} requiredText - The text to display in the required field     *\n * </pre>\n *\n * @return {ViewModelProperty} returns newly created ViewModelProperty\n */\n\nexport let createViewModelProperty = function (propAttrHolder) {\n  // eslint-disable-line\n\n  /**\n   * Use the given 'propName' if 'propAttrHolder' has one, else, use the 'displayName' as the 'propName'.\n   */\n  var prop = _.cloneDeep(propAttrHolder);\n\n  prop.displayName = _.isUndefined(propAttrHolder.displayName) ? '' : propAttrHolder.displayName;\n  var propName = _.isUndefined(propAttrHolder.propName) ? prop.displayName : propAttrHolder.propName;\n  var type = propAttrHolder.type;\n  var hasLOV = false;\n  prop.isSelectOnly = _.isUndefined(propAttrHolder.isSelectOnly) ? true : propAttrHolder.isSelectOnly;\n  prop.isRichText = _.isBoolean(propAttrHolder.isRichText) ? propAttrHolder.isRichText : propAttrHolder.isRichText === 'true';\n  prop.isArray = _.isBoolean(propAttrHolder.isArray) ? propAttrHolder.isArray : propAttrHolder.isArray === 'true';\n  prop.isEditable = _.isBoolean(propAttrHolder.isEditable) ? propAttrHolder.isEditable : propAttrHolder.isEditable !== 'false';\n  prop.isRequired = _.isBoolean(propAttrHolder.isRequired) ? propAttrHolder.isRequired : propAttrHolder.isRequired === 'true';\n\n  if (propAttrHolder.isEnabled) {\n    prop.isEnabled = _.isBoolean(propAttrHolder.isEnabled) ? propAttrHolder.isEnabled : propAttrHolder.isEnabled !== 'false';\n  } else {\n    prop.isEnabled = prop.isEditable;\n  }\n\n  var displayValues = [];\n  var uw_dbValue = propAttrHolder.dbValue;\n\n  if (propAttrHolder.value) {\n    uw_dbValue = propAttrHolder.value;\n  }\n\n  var tempDisplayValues = propAttrHolder.dispValue;\n\n  if (propAttrHolder.displayValue) {\n    tempDisplayValues = propAttrHolder.displayValue;\n  }\n\n  if (!uw_dbValue && type === 'DATE' || propAttrHolder.type === 'DATETIME') {\n    if (uw_dbValue !== '' && !isNaN(Date.parse(uw_dbValue))) {\n      var date = new Date(uw_dbValue);\n      uw_dbValue = date.getTime();\n    }\n\n    type = 'DATE';\n  }\n\n  if (!_.isUndefined(tempDisplayValues)) {\n    if (_.isArray(tempDisplayValues)) {\n      displayValues = tempDisplayValues;\n    } else {\n      displayValues.push(tempDisplayValues);\n    }\n  }\n  /**\n   * If this is an array property, and the type does not contain the 'ARRAY' postfix, add it automatically.\n   */\n\n\n  if (prop.isArray && type && type.search('ARRAY') === -1) {\n    type += 'ARRAY';\n  }\n\n  if (propAttrHolder.hasLov) {\n    hasLOV = true;\n  }\n\n  prop.propType = type;\n  prop.hasLOV = hasLOV;\n  prop.value = uw_dbValue;\n  prop.displayValue = displayValues;\n  prop.dbValues = propAttrHolder.dbValue ? propAttrHolder.dbValue : [];\n  var viewProp = viewModelObjectService.constructViewModelProperty(prop, propName, null, true);\n\n  if (type === 'DATE') {\n    viewProp.dateApi = viewProp.dateApi || {};\n    viewProp.dateApi.isDateEnabled = true;\n    viewProp.dateApi.isTimeEnabled = false;\n\n    if (propAttrHolder.type === 'DATETIME') {\n      viewProp.dateApi.isTimeEnabled = true;\n    }\n  }\n\n  if (type === 'DATETIME') {\n    viewProp.dateApi = viewProp.dateApi || {};\n    viewProp.dateApi.isDateEnabled = true;\n    viewProp.dateApi.isTimeEnabled = true;\n  }\n\n  return viewProp;\n};\nexports = {\n  updateProperty,\n  createViewModelProperty\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/modelPropertyService.js"],"names":["exports","updateProperty","paths","prefix","parentPath","_","newValue","createViewModelProperty","prop","propAttrHolder","propName","type","hasLOV","displayValues","uw_dbValue","tempDisplayValues","isNaN","Date","date","viewProp","viewModelObjectService"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/modelPropertyService\n */\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\n\n/**\n * Cached reference to the View Model Property Object service\n */\n\nvar exports = {};\n\n/**\n * Update the property in the 'target' object with the same value as the 'source' object based on the given\n * 'path' to that property.\n *\n * @param {String} parentPath - Property path to the holder of the value in the 'source' & 'target' Objects.\n *\n * @param {String} attrHolderPropName - Name of the property in the 'propAttrHolder' class to apply.\n *\n * @param {ViewModelObject} sourceObject - The 'source' of the value to apply.\n *\n * @param {ViewModelObject} targetObject - The 'target' the value will be applies to.\n */\nexport let updateProperty = function( parentPath, attrHolderPropName, sourceObject, targetObject ) {\n    var paths = [];\n\n    var prefix = parentPath + '.';\n\n    switch ( attrHolderPropName ) {\n        case 'dbValue':\n            paths.push( prefix + 'dbValues' );\n            paths.push( prefix + 'dbValue' );\n            paths.push( prefix + 'value' );\n            break;\n\n        case 'displayName':\n            paths.push( prefix + 'propertyName' );\n            paths.push( prefix + 'propertyDisplayName' );\n            break;\n\n        case 'dispValue':\n            paths.push( prefix + 'displayValues' );\n            paths.push( prefix + 'uiValue' );\n            paths.push( prefix + 'uiValues' );\n            break;\n\n        case 'isArray':\n            paths.push( prefix + 'isArray' );\n            break;\n\n        case 'isEditable':\n            paths.push( prefix + 'isEditable' );\n            break;\n\n        case 'isRequired':\n            paths.push( prefix + 'isRequired' );\n            break;\n\n        case 'labelPosition':\n            paths.push( prefix + 'propertyLabelDisplay' );\n            break;\n\n        case 'requiredText':\n            paths.push( prefix + 'requiredText' );\n            break;\n\n        case 'type':\n            paths.push( prefix + 'type' );\n            break;\n    }\n\n    _.forEach( paths, function( path ) {\n        var newValue = _.get( sourceObject, path );\n\n        _.set( targetObject, path, newValue );\n    } );\n};\n\n/**\n * @param {Object} propAttrHolder - An object that holds the following attributes:\n *\n * <pre>\n *           - {String} displayName - Display name of the property.\n *           - {String} type - {'STRING', 'INTEGER', 'BOOLEAN', 'DATE', 'FLOAT', 'CHAR'}\n *           - {Boolean} isRequired - If the property is required or not\n *           - {Boolean} isEditable - If the Property is editable or not\n *           - {Object} dbValue - Default value\n *           - {String} dispValue - Display Value\n *           - {Object} labelPosition - Position on panel.\n *           - {Boolean} isArray - If the Property is an array or not\n *           - {String} requiredText - The text to display in the required field     *\n * </pre>\n *\n * @return {ViewModelProperty} returns newly created ViewModelProperty\n */\nexport let createViewModelProperty = function( propAttrHolder ) { // eslint-disable-line\n    /**\n     * Use the given 'propName' if 'propAttrHolder' has one, else, use the 'displayName' as the 'propName'.\n     */\n    var prop = _.cloneDeep( propAttrHolder );\n    prop.displayName = _.isUndefined( propAttrHolder.displayName ) ? '' : propAttrHolder.displayName;\n    var propName = _.isUndefined( propAttrHolder.propName ) ? prop.displayName : propAttrHolder.propName;\n\n    var type = propAttrHolder.type;\n    var hasLOV = false;\n\n    prop.isSelectOnly = _.isUndefined( propAttrHolder.isSelectOnly ) ? true : propAttrHolder.isSelectOnly;\n\n    prop.isRichText = _.isBoolean( propAttrHolder.isRichText ) ? propAttrHolder.isRichText :\n        propAttrHolder.isRichText === 'true';\n\n    prop.isArray = _.isBoolean( propAttrHolder.isArray ) ? propAttrHolder.isArray :\n        propAttrHolder.isArray === 'true';\n\n    prop.isEditable = _.isBoolean( propAttrHolder.isEditable ) ? propAttrHolder.isEditable :\n        propAttrHolder.isEditable !== 'false';\n\n    prop.isRequired = _.isBoolean( propAttrHolder.isRequired ) ? propAttrHolder.isRequired :\n        propAttrHolder.isRequired === 'true';\n\n    if( propAttrHolder.isEnabled ) {\n        prop.isEnabled = _.isBoolean( propAttrHolder.isEnabled ) ? propAttrHolder.isEnabled :\n            propAttrHolder.isEnabled !== 'false';\n    } else {\n        prop.isEnabled = prop.isEditable;\n    }\n\n    var displayValues = [];\n    var uw_dbValue = propAttrHolder.dbValue;\n    if( propAttrHolder.value ) {\n        uw_dbValue = propAttrHolder.value;\n    }\n    var tempDisplayValues = propAttrHolder.dispValue;\n    if( propAttrHolder.displayValue ) {\n        tempDisplayValues = propAttrHolder.displayValue;\n    }\n\n    if( !uw_dbValue && type === 'DATE' || propAttrHolder.type === 'DATETIME' ) {\n        if( uw_dbValue !== '' && !isNaN( Date.parse( uw_dbValue ) ) ) {\n            var date = new Date( uw_dbValue );\n            uw_dbValue = date.getTime();\n        }\n        type = 'DATE';\n    }\n\n    if( !_.isUndefined( tempDisplayValues ) ) {\n        if( _.isArray( tempDisplayValues ) ) {\n            displayValues = tempDisplayValues;\n        } else {\n            displayValues.push( tempDisplayValues );\n        }\n    }\n\n    /**\n     * If this is an array property, and the type does not contain the 'ARRAY' postfix, add it automatically.\n     */\n    if( prop.isArray && type && type.search( 'ARRAY' ) === -1 ) {\n        type += 'ARRAY';\n    }\n\n    if( propAttrHolder.hasLov ) {\n        hasLOV = true;\n    }\n    prop.propType = type;\n    prop.hasLOV = hasLOV;\n    prop.value = uw_dbValue;\n    prop.displayValue = displayValues;\n    prop.dbValues = propAttrHolder.dbValue ? propAttrHolder.dbValue : [];\n\n    var viewProp = viewModelObjectService.constructViewModelProperty( prop, propName, null, true );\n\n    if( type === 'DATE' ) {\n        viewProp.dateApi = viewProp.dateApi || {};\n        viewProp.dateApi.isDateEnabled = true;\n        viewProp.dateApi.isTimeEnabled = false;\n        if( propAttrHolder.type === 'DATETIME' ) {\n            viewProp.dateApi.isTimeEnabled = true;\n        }\n    }\n\n    if( type === 'DATETIME' ) {\n        viewProp.dateApi = viewProp.dateApi || {};\n        viewProp.dateApi.isDateEnabled = true;\n        viewProp.dateApi.isTimeEnabled = true;\n    }\n\n    return viewProp;\n};\n\nexports = {\n    updateProperty,\n    createViewModelProperty\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
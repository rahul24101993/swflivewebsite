{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * processor to profile XML HTTP Request\n *\n * @module js/splmStatsXhrProcessor\n */\nimport { logger } from 'js/splmStatsUtils';\nimport xhrService from 'js/splmStatsXhrService';\n/**\n * Instances of this class represent a profiler for HTTP Request/Response\n *\n * @class SPLMStatsXhrProcessor\n */\n\nfunction SPLMStatsXhrProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _XMLHttpRequests = {};\n  let _XMLFinishedHttpRequests = [];\n  let _internalXMLHttpRequests = [];\n  let _maxHTTPPayload = {\n    requestUrl: '',\n    payloadSize: 0\n  };\n  let _totalHttpRequests = 0;\n  let _transferSize = 0;\n  let _requestSize = 0;\n  let _responseSize = 0;\n  let _XMLNetworkTimes = [];\n  let _errorInfo = {\n    requestsAborted: [],\n    requestsErrored: [],\n    requestsTimeout: []\n  };\n  let _sortedXMLNetworkTimes = [];\n  let _eventListeners = {\n    abort: function (xhr) {\n      _errorInfo.requestsAborted.push(xhr);\n    },\n    error: function (xhr) {\n      _errorInfo.requestsErrored.push(xhr);\n    },\n    timeout: function (xhr) {\n      _errorInfo.requestsTimeout.push(xhr);\n    }\n  };\n\n  const max = function (a, b) {\n    return a > b ? a : b;\n  };\n\n  const _processRequestsTime = function () {\n    _startProcessorTime = window.performance.now();\n\n    for (let reqUrl in _XMLHttpRequests) {\n      let reqTimings = window.performance.getEntriesByName(reqUrl);\n      let i = 0;\n      reqTimings.forEach(req => {\n        let xmlHttpReq = _XMLHttpRequests[reqUrl][i];\n        let xhr = xmlHttpReq.XHR;\n        _transferSize += req.transferSize;\n        _responseSize += xhr.response.length;\n        xmlHttpReq.timeResponse = req.responseEnd;\n        let url = xhr.responseURL;\n\n        if (!url || url.length === 0) {\n          url = xhr.requestURL || '';\n        } // / Access to response data here ///\n\n\n        xmlHttpReq.timeStart = req.requestStart;\n        xmlHttpReq.totalTime = xmlHttpReq.timeResponse - xmlHttpReq.timeStart;\n        xmlHttpReq.responseUrl = url; // response url not available in IE, would have to customize looking in service data for url but not AW specific\n\n        _XMLFinishedHttpRequests.push({\n          timeTaken: xmlHttpReq.totalTime,\n          status: xhr.statusText,\n          responseUrl: url,\n          responseSize: xhr.response.length || xhr.response.byteLength,\n          logCorrelationID: xmlHttpReq.logCorrelationID,\n          startedDateTime: xmlHttpReq.startedDateTime,\n          requestSize: xmlHttpReq.requestSize\n        });\n\n        _internalXMLHttpRequests.push({\n          timeTaken: xmlHttpReq.totalTime\n        });\n\n        if (_maxHTTPPayload.payloadSize < xhr.response.length) {\n          _maxHTTPPayload.payloadSize = xhr.response.length;\n          _maxHTTPPayload.requestUrl = url;\n        }\n\n        _XMLNetworkTimes.push({\n          timeStart: xmlHttpReq.timeStart,\n          timeStop: xmlHttpReq.timeResponse\n        });\n\n        i++;\n      });\n      delete _XMLHttpRequests[reqUrl];\n    }\n\n    _totalHttpRequests += window.performance.getEntriesByType('resource').length;\n\n    if (window.performance.clearResourceTimings) {\n      window.performance.clearResourceTimings();\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  const _processNetworkGaps = function () {\n    _startProcessorTime = window.performance.now();\n    let firstStart = 0;\n    let firstStop = 0;\n    let tStart = 0;\n    let tStop = 0;\n    let totalTime = 0;\n\n    if (_XMLNetworkTimes.length > 0) {\n      _sortedXMLNetworkTimes = _XMLNetworkTimes.sort(function (a, b) {\n        return a.timeStart > b.timeStart ? 1 : -1;\n      });\n      firstStart = _sortedXMLNetworkTimes[0].timeStart;\n      firstStop = _sortedXMLNetworkTimes[0].timeStop;\n      totalTime = firstStop - firstStart;\n\n      for (let i = 1; i < _sortedXMLNetworkTimes.length; i++) {\n        tStart = _sortedXMLNetworkTimes[i].timeStart;\n        tStop = _sortedXMLNetworkTimes[i].timeStop;\n\n        if (tStart < firstStop && firstStop < tStop) {\n          totalTime += tStop - firstStop;\n        } else if (tStart < firstStop && tStop < firstStop) {//Do nothing, time already accounted for...\n        } else if (firstStop < tStart) {\n          totalTime += tStop - tStart;\n        }\n\n        firstStop = max(tStop, firstStop);\n      }\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return totalTime;\n  };\n\n  const _processErrorInfo = function () {\n    _startProcessorTime = window.performance.now();\n\n    let errorXhrs = _errorInfo.requestsAborted.concat(_errorInfo.requestsErrored).concat(_errorInfo.requestsTimeout);\n\n    let _newErrorInfo = {\n      requestsAborted: [],\n      requestsErrored: [],\n      requestsTimeout: []\n    };\n\n    _internalXMLHttpRequests.forEach(obj => {\n      let idx = errorXhrs.indexOf(obj.XHR);\n\n      if (idx !== -1) {\n        if (_errorInfo.requestsTimeout.includes(obj.XHR)) {\n          _newErrorInfo.requestsTimeout.push(obj);\n        } else if (_errorInfo.requestsErrored.includes(obj.XHR)) {\n          _newErrorInfo.requestsErrored.push(obj);\n        } else {\n          _newErrorInfo.requestsAborted.push(obj);\n        }\n      }\n    });\n\n    _XMLFinishedHttpRequests.forEach(req => {\n      if (req.status && req.status.toLowerCase() !== 'ok') {\n        _newErrorInfo.requestsErrored = _newErrorInfo.requestsErrored.concat([req]);\n      }\n    });\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return _newErrorInfo;\n  }; // -------------------------------------------------------------\n  // HTTP Request/Response Info\n  // -------------------------------------------------------------\n\n\n  const _xhrProc = function (xhr, data) {\n    _startProcessorTime = window.performance.now();\n    _transferSize += data && data.length ? data.length : 0;\n    _requestSize += data && data.length ? data.length : 0;\n    let JSONData;\n\n    try {\n      JSONData = typeof data === 'string' ? JSON.parse(data) : {};\n    } catch (error) {\n      if (!xhr.requestURL.includes('socket.io')) {\n        logger.warn('XHR Data not in JSON format');\n      }\n\n      JSONData = {};\n    }\n\n    let dataObj = {\n      timeStart: 0,\n      XHR: xhr,\n      timeResponse: 0,\n      requestSize: data && data.length ? data.length : 0,\n      logCorrelationID: JSONData.header && JSONData.header.state && JSONData.header.state.logCorrelationID ? JSONData.header.state.logCorrelationID : 0,\n      startedDateTime: new Date().toISOString()\n    };\n\n    if (_XMLHttpRequests.hasOwnProperty(xhr.requestURL)) {\n      _XMLHttpRequests[xhr.requestURL].push(dataObj);\n    } else {\n      _XMLHttpRequests[xhr.requestURL] = [dataObj];\n    }\n\n    for (let key in _eventListeners) {\n      const listenerFn = _eventListeners[key];\n      xhr.addEventListener(key, function () {\n        listenerFn(xhr);\n      });\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  xhrService.setMainProc(_xhrProc);\n\n  const _reset = function () {\n    _XMLHttpRequests = {};\n    _XMLFinishedHttpRequests = [];\n    _internalXMLHttpRequests = [];\n    _totalHttpRequests = 0;\n    _maxHTTPPayload = {\n      requestUrl: '',\n      payloadSize: 0\n    };\n    _transferSize = 0;\n    _requestSize = 0;\n    _responseSize = 0;\n    _XMLNetworkTimes = [];\n    _sortedXMLNetworkTimes = [];\n    _errorInfo = {\n      requestsAborted: [],\n      requestsErrored: [],\n      requestsTimeout: []\n    };\n\n    if (window.performance.clearResourceTimings) {\n      window.performance.clearResourceTimings();\n    }\n  };\n\n  self.start = function () {\n    _reset();\n\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      XHRProcessorOverhead: _time\n    };\n  };\n\n  self.getMetrics = function () {\n    _processRequestsTime();\n\n    return {\n      totalNetworkTime: _processNetworkGaps(),\n      Network: {\n        requestSize: _requestSize,\n        responseSize: _responseSize,\n        totalSize: _transferSize,\n        maxRequest: {\n          url: _maxHTTPPayload.requestUrl,\n          size: _maxHTTPPayload.payloadSize\n        },\n        totalHttpRequests: _totalHttpRequests,\n        SoaDetails: _XMLFinishedHttpRequests,\n        errorInfo: _processErrorInfo()\n      },\n      totalNetworkCost: _transferSize\n    };\n  };\n\n  return self;\n}\n\n_c = SPLMStatsXhrProcessor;\nexport default SPLMStatsXhrProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsXhrProcessor\");","map":{"version":3,"names":["logger","xhrService","SPLMStatsXhrProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_XMLHttpRequests","_XMLFinishedHttpRequests","_internalXMLHttpRequests","_maxHTTPPayload","requestUrl","payloadSize","_totalHttpRequests","_transferSize","_requestSize","_responseSize","_XMLNetworkTimes","_errorInfo","requestsAborted","requestsErrored","requestsTimeout","_sortedXMLNetworkTimes","_eventListeners","abort","xhr","push","error","timeout","max","a","b","_processRequestsTime","window","performance","now","reqUrl","reqTimings","getEntriesByName","i","forEach","req","xmlHttpReq","XHR","transferSize","response","length","timeResponse","responseEnd","url","responseURL","requestURL","timeStart","requestStart","totalTime","responseUrl","timeTaken","status","statusText","responseSize","byteLength","logCorrelationID","startedDateTime","requestSize","timeStop","getEntriesByType","clearResourceTimings","_processNetworkGaps","firstStart","firstStop","tStart","tStop","sort","_processErrorInfo","errorXhrs","concat","_newErrorInfo","obj","idx","indexOf","includes","toLowerCase","_xhrProc","data","JSONData","JSON","parse","warn","dataObj","header","state","Date","toISOString","hasOwnProperty","key","listenerFn","addEventListener","setMainProc","_reset","start","stop","getProcessingTime","_time","XHRProcessorOverhead","getMetrics","totalNetworkTime","Network","totalSize","maxRequest","size","totalHttpRequests","SoaDetails","errorInfo","totalNetworkCost"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsXhrProcessor.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * processor to profile XML HTTP Request\n *\n * @module js/splmStatsXhrProcessor\n */\nimport { logger } from 'js/splmStatsUtils';\nimport xhrService from 'js/splmStatsXhrService';\n\n/**\n * Instances of this class represent a profiler for HTTP Request/Response\n *\n * @class SPLMStatsXhrProcessor\n */\nfunction SPLMStatsXhrProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n    let _startProcessorTime = 0;\n    let _endProcessorTime = 0;\n\n    let _XMLHttpRequests = {};\n    let _XMLFinishedHttpRequests = [];\n    let _internalXMLHttpRequests = [];\n    let _maxHTTPPayload = {\n        requestUrl: '',\n        payloadSize: 0\n    };\n    let _totalHttpRequests = 0;\n    let _transferSize = 0;\n    let _requestSize = 0;\n    let _responseSize = 0;\n    let _XMLNetworkTimes = [];\n    let _errorInfo = {\n        requestsAborted: [],\n        requestsErrored: [],\n        requestsTimeout: []\n    };\n    let _sortedXMLNetworkTimes = [];\n    let _eventListeners = {\n        abort: function( xhr ) {\n            _errorInfo.requestsAborted.push( xhr );\n        },\n        error: function( xhr ) {\n            _errorInfo.requestsErrored.push( xhr );\n        },\n        timeout: function( xhr ) {\n            _errorInfo.requestsTimeout.push( xhr );\n        }\n    };\n\n    const max = function( a, b ) {\n        return a > b ? a : b;\n    };\n\n    const _processRequestsTime = function() {\n        _startProcessorTime = window.performance.now();\n        for ( let reqUrl in _XMLHttpRequests ) {\n            let reqTimings = window.performance.getEntriesByName( reqUrl );\n            let i = 0;\n            reqTimings.forEach( req => {\n                let xmlHttpReq = _XMLHttpRequests[ reqUrl ][ i ];\n                let xhr = xmlHttpReq.XHR;\n                _transferSize += req.transferSize;\n                _responseSize += xhr.response.length;\n                xmlHttpReq.timeResponse = req.responseEnd;\n\n                let url = xhr.responseURL;\n                if( !url || url.length === 0 ) {\n                    url = xhr.requestURL || '';\n                }\n                // / Access to response data here ///\n                xmlHttpReq.timeStart = req.requestStart;\n                xmlHttpReq.totalTime = xmlHttpReq.timeResponse - xmlHttpReq.timeStart;\n                xmlHttpReq.responseUrl = url; // response url not available in IE, would have to customize looking in service data for url but not AW specific\n\n                _XMLFinishedHttpRequests.push( {\n                    timeTaken: xmlHttpReq.totalTime,\n                    status: xhr.statusText,\n                    responseUrl: url,\n                    responseSize: xhr.response.length || xhr.response.byteLength,\n                    logCorrelationID: xmlHttpReq.logCorrelationID,\n                    startedDateTime: xmlHttpReq.startedDateTime,\n                    requestSize: xmlHttpReq.requestSize\n                } );\n                _internalXMLHttpRequests.push( {\n                    timeTaken: xmlHttpReq.totalTime\n                } );\n                if( _maxHTTPPayload.payloadSize < xhr.response.length ) {\n                    _maxHTTPPayload.payloadSize = xhr.response.length;\n                    _maxHTTPPayload.requestUrl = url;\n                }\n\n                _XMLNetworkTimes.push( {\n                    timeStart: xmlHttpReq.timeStart,\n                    timeStop: xmlHttpReq.timeResponse\n                } );\n\n                i++;\n            } );\n            delete _XMLHttpRequests[ reqUrl ];\n        }\n        _totalHttpRequests += window.performance.getEntriesByType( 'resource' ).length;\n        if ( window.performance.clearResourceTimings ) {\n            window.performance.clearResourceTimings();\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    const _processNetworkGaps = function() {\n        _startProcessorTime = window.performance.now();\n        let firstStart = 0;\n        let firstStop = 0;\n        let tStart = 0;\n        let tStop = 0;\n        let totalTime = 0;\n        if( _XMLNetworkTimes.length > 0 ) {\n            _sortedXMLNetworkTimes = _XMLNetworkTimes.sort( function( a, b ) {\n                return a.timeStart > b.timeStart ? 1 : -1;\n            } );\n\n            firstStart = _sortedXMLNetworkTimes[ 0 ].timeStart;\n            firstStop = _sortedXMLNetworkTimes[ 0 ].timeStop;\n            totalTime = firstStop - firstStart;\n\n            for( let i = 1; i < _sortedXMLNetworkTimes.length; i++ ) {\n                tStart = _sortedXMLNetworkTimes[ i ].timeStart;\n                tStop = _sortedXMLNetworkTimes[ i ].timeStop;\n\n                if( tStart < firstStop && firstStop < tStop ) {\n                    totalTime += tStop - firstStop;\n                } else if( tStart < firstStop && tStop < firstStop ) {\n                    //Do nothing, time already accounted for...\n                } else if( firstStop < tStart ) {\n                    totalTime += tStop - tStart;\n                }\n\n                firstStop = max( tStop, firstStop );\n            }\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return totalTime;\n    };\n\n    const _processErrorInfo = function() {\n        _startProcessorTime = window.performance.now();\n        let errorXhrs = _errorInfo.requestsAborted.concat( _errorInfo.requestsErrored ).concat( _errorInfo.requestsTimeout );\n        let _newErrorInfo = {\n            requestsAborted: [],\n            requestsErrored: [],\n            requestsTimeout: []\n        };\n        _internalXMLHttpRequests.forEach( obj => {\n            let idx = errorXhrs.indexOf( obj.XHR );\n            if( idx !== -1 ) {\n                if( _errorInfo.requestsTimeout.includes( obj.XHR ) ) {\n                    _newErrorInfo.requestsTimeout.push( obj );\n                } else if( _errorInfo.requestsErrored.includes( obj.XHR ) ) {\n                    _newErrorInfo.requestsErrored.push( obj );\n                } else {\n                    _newErrorInfo.requestsAborted.push( obj );\n                }\n            }\n        } );\n\n        _XMLFinishedHttpRequests.forEach(  req => {\n            if( req.status && req.status.toLowerCase() !== 'ok' ) {\n                _newErrorInfo.requestsErrored = _newErrorInfo.requestsErrored.concat( [ req ] );\n            }\n        } );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return _newErrorInfo;\n    };\n\n    // -------------------------------------------------------------\n    // HTTP Request/Response Info\n    // -------------------------------------------------------------\n\n    const _xhrProc = function( xhr, data ) {\n        _startProcessorTime = window.performance.now();\n        _transferSize += data && data.length ? data.length : 0;\n        _requestSize += data && data.length ? data.length : 0;\n        let JSONData;\n        try {\n            JSONData = typeof data === 'string' ? JSON.parse( data ) : {};\n        } catch ( error ) {\n            if( !xhr.requestURL.includes( 'socket.io' ) ) {\n                logger.warn( 'XHR Data not in JSON format' );\n            }\n            JSONData = {};\n        }\n        let dataObj = {\n            timeStart: 0,\n            XHR: xhr,\n            timeResponse: 0,\n            requestSize: data && data.length ? data.length : 0,\n            logCorrelationID: JSONData.header && JSONData.header.state && JSONData.header.state.logCorrelationID ? JSONData.header.state.logCorrelationID : 0,\n            startedDateTime: new Date().toISOString()\n        };\n        if ( _XMLHttpRequests.hasOwnProperty( xhr.requestURL ) ) {\n            _XMLHttpRequests[ xhr.requestURL ].push( dataObj );\n        } else {\n            _XMLHttpRequests[ xhr.requestURL ] = [ dataObj ];\n        }\n\n        for( let key in _eventListeners ) {\n            const listenerFn = _eventListeners[ key ];\n            xhr.addEventListener( key, function() {\n                listenerFn( xhr );\n            } );\n        }\n\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    xhrService.setMainProc( _xhrProc );\n\n    const _reset = function() {\n        _XMLHttpRequests = {};\n        _XMLFinishedHttpRequests = [];\n        _internalXMLHttpRequests = [];\n        _totalHttpRequests = 0;\n        _maxHTTPPayload = {\n            requestUrl: '',\n            payloadSize: 0\n        };\n        _transferSize = 0;\n        _requestSize = 0;\n        _responseSize = 0;\n        _XMLNetworkTimes = [];\n        _sortedXMLNetworkTimes = [];\n        _errorInfo = {\n            requestsAborted: [],\n            requestsErrored: [],\n            requestsTimeout: []\n        };\n        if ( window.performance.clearResourceTimings ) {\n            window.performance.clearResourceTimings();\n        }\n    };\n\n    self.start = function() {\n        _reset();\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { XHRProcessorOverhead: _time };\n    };\n\n    self.getMetrics = function() {\n        _processRequestsTime();\n        return {\n            totalNetworkTime: _processNetworkGaps(),\n            Network: {\n                requestSize: _requestSize,\n                responseSize: _responseSize,\n                totalSize: _transferSize,\n                maxRequest: {\n                    url: _maxHTTPPayload.requestUrl,\n                    size: _maxHTTPPayload.payloadSize\n                },\n                totalHttpRequests: _totalHttpRequests,\n                SoaDetails: _XMLFinishedHttpRequests,\n                errorInfo: _processErrorInfo()\n            },\n            totalNetworkCost: _transferSize\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsXhrProcessor;\n"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,GAAiC;EAC7B,IAAIC,IAAI,GAAG,IAAX;EAEA,IAAIC,eAAe,GAAG,CAAtB;EACA,IAAIC,mBAAmB,GAAG,CAA1B;EACA,IAAIC,iBAAiB,GAAG,CAAxB;EAEA,IAAIC,gBAAgB,GAAG,EAAvB;EACA,IAAIC,wBAAwB,GAAG,EAA/B;EACA,IAAIC,wBAAwB,GAAG,EAA/B;EACA,IAAIC,eAAe,GAAG;IAClBC,UAAU,EAAE,EADM;IAElBC,WAAW,EAAE;EAFK,CAAtB;EAIA,IAAIC,kBAAkB,GAAG,CAAzB;EACA,IAAIC,aAAa,GAAG,CAApB;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,aAAa,GAAG,CAApB;EACA,IAAIC,gBAAgB,GAAG,EAAvB;EACA,IAAIC,UAAU,GAAG;IACbC,eAAe,EAAE,EADJ;IAEbC,eAAe,EAAE,EAFJ;IAGbC,eAAe,EAAE;EAHJ,CAAjB;EAKA,IAAIC,sBAAsB,GAAG,EAA7B;EACA,IAAIC,eAAe,GAAG;IAClBC,KAAK,EAAE,UAAUC,GAAV,EAAgB;MACnBP,UAAU,CAACC,eAAX,CAA2BO,IAA3B,CAAiCD,GAAjC;IACH,CAHiB;IAIlBE,KAAK,EAAE,UAAUF,GAAV,EAAgB;MACnBP,UAAU,CAACE,eAAX,CAA2BM,IAA3B,CAAiCD,GAAjC;IACH,CANiB;IAOlBG,OAAO,EAAE,UAAUH,GAAV,EAAgB;MACrBP,UAAU,CAACG,eAAX,CAA2BK,IAA3B,CAAiCD,GAAjC;IACH;EATiB,CAAtB;;EAYA,MAAMI,GAAG,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAiB;IACzB,OAAOD,CAAC,GAAGC,CAAJ,GAAQD,CAAR,GAAYC,CAAnB;EACH,CAFD;;EAIA,MAAMC,oBAAoB,GAAG,YAAW;IACpC3B,mBAAmB,GAAG4B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;;IACA,KAAM,IAAIC,MAAV,IAAoB7B,gBAApB,EAAuC;MACnC,IAAI8B,UAAU,GAAGJ,MAAM,CAACC,WAAP,CAAmBI,gBAAnB,CAAqCF,MAArC,CAAjB;MACA,IAAIG,CAAC,GAAG,CAAR;MACAF,UAAU,CAACG,OAAX,CAAoBC,GAAG,IAAI;QACvB,IAAIC,UAAU,GAAGnC,gBAAgB,CAAE6B,MAAF,CAAhB,CAA4BG,CAA5B,CAAjB;QACA,IAAId,GAAG,GAAGiB,UAAU,CAACC,GAArB;QACA7B,aAAa,IAAI2B,GAAG,CAACG,YAArB;QACA5B,aAAa,IAAIS,GAAG,CAACoB,QAAJ,CAAaC,MAA9B;QACAJ,UAAU,CAACK,YAAX,GAA0BN,GAAG,CAACO,WAA9B;QAEA,IAAIC,GAAG,GAAGxB,GAAG,CAACyB,WAAd;;QACA,IAAI,CAACD,GAAD,IAAQA,GAAG,CAACH,MAAJ,KAAe,CAA3B,EAA+B;UAC3BG,GAAG,GAAGxB,GAAG,CAAC0B,UAAJ,IAAkB,EAAxB;QACH,CAVsB,CAWvB;;;QACAT,UAAU,CAACU,SAAX,GAAuBX,GAAG,CAACY,YAA3B;QACAX,UAAU,CAACY,SAAX,GAAuBZ,UAAU,CAACK,YAAX,GAA0BL,UAAU,CAACU,SAA5D;QACAV,UAAU,CAACa,WAAX,GAAyBN,GAAzB,CAduB,CAcO;;QAE9BzC,wBAAwB,CAACkB,IAAzB,CAA+B;UAC3B8B,SAAS,EAAEd,UAAU,CAACY,SADK;UAE3BG,MAAM,EAAEhC,GAAG,CAACiC,UAFe;UAG3BH,WAAW,EAAEN,GAHc;UAI3BU,YAAY,EAAElC,GAAG,CAACoB,QAAJ,CAAaC,MAAb,IAAuBrB,GAAG,CAACoB,QAAJ,CAAae,UAJvB;UAK3BC,gBAAgB,EAAEnB,UAAU,CAACmB,gBALF;UAM3BC,eAAe,EAAEpB,UAAU,CAACoB,eAND;UAO3BC,WAAW,EAAErB,UAAU,CAACqB;QAPG,CAA/B;;QASAtD,wBAAwB,CAACiB,IAAzB,CAA+B;UAC3B8B,SAAS,EAAEd,UAAU,CAACY;QADK,CAA/B;;QAGA,IAAI5C,eAAe,CAACE,WAAhB,GAA8Ba,GAAG,CAACoB,QAAJ,CAAaC,MAA/C,EAAwD;UACpDpC,eAAe,CAACE,WAAhB,GAA8Ba,GAAG,CAACoB,QAAJ,CAAaC,MAA3C;UACApC,eAAe,CAACC,UAAhB,GAA6BsC,GAA7B;QACH;;QAEDhC,gBAAgB,CAACS,IAAjB,CAAuB;UACnB0B,SAAS,EAAEV,UAAU,CAACU,SADH;UAEnBY,QAAQ,EAAEtB,UAAU,CAACK;QAFF,CAAvB;;QAKAR,CAAC;MACJ,CAvCD;MAwCA,OAAOhC,gBAAgB,CAAE6B,MAAF,CAAvB;IACH;;IACDvB,kBAAkB,IAAIoB,MAAM,CAACC,WAAP,CAAmB+B,gBAAnB,CAAqC,UAArC,EAAkDnB,MAAxE;;IACA,IAAKb,MAAM,CAACC,WAAP,CAAmBgC,oBAAxB,EAA+C;MAC3CjC,MAAM,CAACC,WAAP,CAAmBgC,oBAAnB;IACH;;IACD5D,iBAAiB,GAAG2B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACA/B,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH,CArDD;;EAuDA,MAAM8D,mBAAmB,GAAG,YAAW;IACnC9D,mBAAmB,GAAG4B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IACA,IAAIiC,UAAU,GAAG,CAAjB;IACA,IAAIC,SAAS,GAAG,CAAhB;IACA,IAAIC,MAAM,GAAG,CAAb;IACA,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIjB,SAAS,GAAG,CAAhB;;IACA,IAAIrC,gBAAgB,CAAC6B,MAAjB,GAA0B,CAA9B,EAAkC;MAC9BxB,sBAAsB,GAAGL,gBAAgB,CAACuD,IAAjB,CAAuB,UAAU1C,CAAV,EAAaC,CAAb,EAAiB;QAC7D,OAAOD,CAAC,CAACsB,SAAF,GAAcrB,CAAC,CAACqB,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;MACH,CAFwB,CAAzB;MAIAgB,UAAU,GAAG9C,sBAAsB,CAAE,CAAF,CAAtB,CAA4B8B,SAAzC;MACAiB,SAAS,GAAG/C,sBAAsB,CAAE,CAAF,CAAtB,CAA4B0C,QAAxC;MACAV,SAAS,GAAGe,SAAS,GAAGD,UAAxB;;MAEA,KAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,sBAAsB,CAACwB,MAA3C,EAAmDP,CAAC,EAApD,EAAyD;QACrD+B,MAAM,GAAGhD,sBAAsB,CAAEiB,CAAF,CAAtB,CAA4Ba,SAArC;QACAmB,KAAK,GAAGjD,sBAAsB,CAAEiB,CAAF,CAAtB,CAA4ByB,QAApC;;QAEA,IAAIM,MAAM,GAAGD,SAAT,IAAsBA,SAAS,GAAGE,KAAtC,EAA8C;UAC1CjB,SAAS,IAAIiB,KAAK,GAAGF,SAArB;QACH,CAFD,MAEO,IAAIC,MAAM,GAAGD,SAAT,IAAsBE,KAAK,GAAGF,SAAlC,EAA8C,CACjD;QACH,CAFM,MAEA,IAAIA,SAAS,GAAGC,MAAhB,EAAyB;UAC5BhB,SAAS,IAAIiB,KAAK,GAAGD,MAArB;QACH;;QAEDD,SAAS,GAAGxC,GAAG,CAAE0C,KAAF,EAASF,SAAT,CAAf;MACH;IACJ;;IACD/D,iBAAiB,GAAG2B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACA/B,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;IACA,OAAOiD,SAAP;EACH,CAlCD;;EAoCA,MAAMmB,iBAAiB,GAAG,YAAW;IACjCpE,mBAAmB,GAAG4B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;;IACA,IAAIuC,SAAS,GAAGxD,UAAU,CAACC,eAAX,CAA2BwD,MAA3B,CAAmCzD,UAAU,CAACE,eAA9C,EAAgEuD,MAAhE,CAAwEzD,UAAU,CAACG,eAAnF,CAAhB;;IACA,IAAIuD,aAAa,GAAG;MAChBzD,eAAe,EAAE,EADD;MAEhBC,eAAe,EAAE,EAFD;MAGhBC,eAAe,EAAE;IAHD,CAApB;;IAKAZ,wBAAwB,CAAC+B,OAAzB,CAAkCqC,GAAG,IAAI;MACrC,IAAIC,GAAG,GAAGJ,SAAS,CAACK,OAAV,CAAmBF,GAAG,CAAClC,GAAvB,CAAV;;MACA,IAAImC,GAAG,KAAK,CAAC,CAAb,EAAiB;QACb,IAAI5D,UAAU,CAACG,eAAX,CAA2B2D,QAA3B,CAAqCH,GAAG,CAAClC,GAAzC,CAAJ,EAAqD;UACjDiC,aAAa,CAACvD,eAAd,CAA8BK,IAA9B,CAAoCmD,GAApC;QACH,CAFD,MAEO,IAAI3D,UAAU,CAACE,eAAX,CAA2B4D,QAA3B,CAAqCH,GAAG,CAAClC,GAAzC,CAAJ,EAAqD;UACxDiC,aAAa,CAACxD,eAAd,CAA8BM,IAA9B,CAAoCmD,GAApC;QACH,CAFM,MAEA;UACHD,aAAa,CAACzD,eAAd,CAA8BO,IAA9B,CAAoCmD,GAApC;QACH;MACJ;IACJ,CAXD;;IAaArE,wBAAwB,CAACgC,OAAzB,CAAmCC,GAAG,IAAI;MACtC,IAAIA,GAAG,CAACgB,MAAJ,IAAchB,GAAG,CAACgB,MAAJ,CAAWwB,WAAX,OAA6B,IAA/C,EAAsD;QAClDL,aAAa,CAACxD,eAAd,GAAgCwD,aAAa,CAACxD,eAAd,CAA8BuD,MAA9B,CAAsC,CAAElC,GAAF,CAAtC,CAAhC;MACH;IACJ,CAJD;;IAKAnC,iBAAiB,GAAG2B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACA/B,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;IACA,OAAOuE,aAAP;EACH,CA7BD,CApI6B,CAmK7B;EACA;EACA;;;EAEA,MAAMM,QAAQ,GAAG,UAAUzD,GAAV,EAAe0D,IAAf,EAAsB;IACnC9E,mBAAmB,GAAG4B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IACArB,aAAa,IAAIqE,IAAI,IAAIA,IAAI,CAACrC,MAAb,GAAsBqC,IAAI,CAACrC,MAA3B,GAAoC,CAArD;IACA/B,YAAY,IAAIoE,IAAI,IAAIA,IAAI,CAACrC,MAAb,GAAsBqC,IAAI,CAACrC,MAA3B,GAAoC,CAApD;IACA,IAAIsC,QAAJ;;IACA,IAAI;MACAA,QAAQ,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2BE,IAAI,CAACC,KAAL,CAAYH,IAAZ,CAA3B,GAAgD,EAA3D;IACH,CAFD,CAEE,OAAQxD,KAAR,EAAgB;MACd,IAAI,CAACF,GAAG,CAAC0B,UAAJ,CAAe6B,QAAf,CAAyB,WAAzB,CAAL,EAA8C;QAC1ChF,MAAM,CAACuF,IAAP,CAAa,6BAAb;MACH;;MACDH,QAAQ,GAAG,EAAX;IACH;;IACD,IAAII,OAAO,GAAG;MACVpC,SAAS,EAAE,CADD;MAEVT,GAAG,EAAElB,GAFK;MAGVsB,YAAY,EAAE,CAHJ;MAIVgB,WAAW,EAAEoB,IAAI,IAAIA,IAAI,CAACrC,MAAb,GAAsBqC,IAAI,CAACrC,MAA3B,GAAoC,CAJvC;MAKVe,gBAAgB,EAAEuB,QAAQ,CAACK,MAAT,IAAmBL,QAAQ,CAACK,MAAT,CAAgBC,KAAnC,IAA4CN,QAAQ,CAACK,MAAT,CAAgBC,KAAhB,CAAsB7B,gBAAlE,GAAqFuB,QAAQ,CAACK,MAAT,CAAgBC,KAAhB,CAAsB7B,gBAA3G,GAA8H,CALtI;MAMVC,eAAe,EAAE,IAAI6B,IAAJ,GAAWC,WAAX;IANP,CAAd;;IAQA,IAAKrF,gBAAgB,CAACsF,cAAjB,CAAiCpE,GAAG,CAAC0B,UAArC,CAAL,EAAyD;MACrD5C,gBAAgB,CAAEkB,GAAG,CAAC0B,UAAN,CAAhB,CAAmCzB,IAAnC,CAAyC8D,OAAzC;IACH,CAFD,MAEO;MACHjF,gBAAgB,CAAEkB,GAAG,CAAC0B,UAAN,CAAhB,GAAqC,CAAEqC,OAAF,CAArC;IACH;;IAED,KAAK,IAAIM,GAAT,IAAgBvE,eAAhB,EAAkC;MAC9B,MAAMwE,UAAU,GAAGxE,eAAe,CAAEuE,GAAF,CAAlC;MACArE,GAAG,CAACuE,gBAAJ,CAAsBF,GAAtB,EAA2B,YAAW;QAClCC,UAAU,CAAEtE,GAAF,CAAV;MACH,CAFD;IAGH;;IAEDnB,iBAAiB,GAAG2B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACA/B,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH,CApCD;;EAsCAJ,UAAU,CAACgG,WAAX,CAAwBf,QAAxB;;EAEA,MAAMgB,MAAM,GAAG,YAAW;IACtB3F,gBAAgB,GAAG,EAAnB;IACAC,wBAAwB,GAAG,EAA3B;IACAC,wBAAwB,GAAG,EAA3B;IACAI,kBAAkB,GAAG,CAArB;IACAH,eAAe,GAAG;MACdC,UAAU,EAAE,EADE;MAEdC,WAAW,EAAE;IAFC,CAAlB;IAIAE,aAAa,GAAG,CAAhB;IACAC,YAAY,GAAG,CAAf;IACAC,aAAa,GAAG,CAAhB;IACAC,gBAAgB,GAAG,EAAnB;IACAK,sBAAsB,GAAG,EAAzB;IACAJ,UAAU,GAAG;MACTC,eAAe,EAAE,EADR;MAETC,eAAe,EAAE,EAFR;MAGTC,eAAe,EAAE;IAHR,CAAb;;IAKA,IAAKY,MAAM,CAACC,WAAP,CAAmBgC,oBAAxB,EAA+C;MAC3CjC,MAAM,CAACC,WAAP,CAAmBgC,oBAAnB;IACH;EACJ,CAtBD;;EAwBA/D,IAAI,CAACgG,KAAL,GAAa,YAAW;IACpBD,MAAM;;IACN7F,mBAAmB,GAAG4B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IACA7B,iBAAiB,GAAG2B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACA/B,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH,CALD;;EAOAF,IAAI,CAACiG,IAAL,GAAY,YAAW;IACnB/F,mBAAmB,GAAG4B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IACA7B,iBAAiB,GAAG2B,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACA/B,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH,CAJD;;EAMAF,IAAI,CAACkG,iBAAL,GAAyB,YAAW;IAChC,MAAMC,KAAK,GAAGlG,eAAd;IACAA,eAAe,GAAG,CAAlB;IACA,OAAO;MAAEmG,oBAAoB,EAAED;IAAxB,CAAP;EACH,CAJD;;EAMAnG,IAAI,CAACqG,UAAL,GAAkB,YAAW;IACzBxE,oBAAoB;;IACpB,OAAO;MACHyE,gBAAgB,EAAEtC,mBAAmB,EADlC;MAEHuC,OAAO,EAAE;QACL3C,WAAW,EAAEhD,YADR;QAEL4C,YAAY,EAAE3C,aAFT;QAGL2F,SAAS,EAAE7F,aAHN;QAIL8F,UAAU,EAAE;UACR3D,GAAG,EAAEvC,eAAe,CAACC,UADb;UAERkG,IAAI,EAAEnG,eAAe,CAACE;QAFd,CAJP;QAQLkG,iBAAiB,EAAEjG,kBARd;QASLkG,UAAU,EAAEvG,wBATP;QAULwG,SAAS,EAAEvC,iBAAiB;MAVvB,CAFN;MAcHwC,gBAAgB,EAAEnG;IAdf,CAAP;EAgBH,CAlBD;;EAoBA,OAAOX,IAAP;AACH;;KA/QQD,qB;AAiRT,eAAeA,qBAAf"},"metadata":{},"sourceType":"module"}
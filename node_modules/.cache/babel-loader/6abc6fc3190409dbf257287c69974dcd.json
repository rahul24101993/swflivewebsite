{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service handles resolution to HTML text of special cases of icon names seen with data binding.\n *\n * @module js/awIconService\n */import iconSvc from'js/iconService';import typeIconSvc from'js/typeIconsRegistryService';import cmm from'soa/kernel/clientMetaModel';import iconMapSvc from'js/iconMapService';import fmsUtils from'js/fmsUtils';import browserUtils from'js/browserUtils';import awConfiguration from'js/awConfiguration';/**\n * Regular expression to extract the type from a type's file name (without number suffix).\n */var _REGEX_TYPE_FILE_NAME=/(^type)([a-z0-9\\s]+)/i;/**\n * Regular expression to extract the type from a type's file name (w/number suffix).\n */var _REGEX_TYPE_FILE_NAME_SUFFIX=/(^type)([a-z0-9\\s]+)([0-9][0-9]$)/i;/**\n * Regular expression detect a full type file name.\n */var _REGEX_TYPE_FILE_EXT=/.svg$/i;/**\n * {String} Cached base URL path.\n */var _iconBase='';/**\n * @private\n *\n * @return {String} The path from the root of the war file to the directory where icon image files can be found.\n */function _getIconBaseUrlPath(){if(!_iconBase){_iconBase=awConfiguration.get('baseUrl')+'/image/';}return _iconBase;}let exports;// eslint-disable-line no-invalid-this\n/**\n * Get the icon to use when one is not found\n *\n * @returns {String} The missing icon\n */export let getMissingIcon=function(){return iconSvc.getTypeIcon('MissingImage')||'<svg></svg>';};/**\n * Get the HTML tag for the given icon name.\n *\n * @param {String} iconID - ID of the icon to return. The ID is assumed to match one of the SVG definitions\n *            or have a valid alias to an SVG. Do not include any 'size' number on the end of the ID (e.g.\n *            the SVG's file name). All model types must be prefixed with 'type'.\n *\n * @return {String} HTML tag text (&lt;IMG&gt; or &lt;SVG&gt;) for the given 'iconID' (or 'missing image'\n *         definition if the icon name has not been registered as an alias in a module.json or the SVG file\n *         was not found during war the build)..\n */export let getIconDef=function(iconID){var iconDef=null;if(iconID){if(_REGEX_TYPE_FILE_EXT.test(iconID)){iconDef='<img class=\"aw-base-icon\" src=\"'+_getIconBaseUrlPath()+iconID+'\" alt=\"'+iconID+'\" />';}if(!iconDef){var parts=iconID.match(_REGEX_TYPE_FILE_NAME_SUFFIX);if(parts&&parts.length===4){iconDef=iconSvc.getTypeIcon(parts[2]);}else{parts=iconID.match(_REGEX_TYPE_FILE_NAME);if(parts&&parts.length===3){iconDef=iconSvc.getTypeIcon(parts[2]);}}}}return iconDef||exports.getMissingIcon();};/**\n * Build thumbnail file url from the ticket input provided\n *\n * @param {String} ticket - thumbnail image ticket\n * @return {String} the URL to the thumbnail file that represents the given ticket or '' if a) the\n *         'ticket' is not valid b) there is no thumbnail.\n */export let buildThumbnailFileUrlFromTicket=function(ticket){var thumbnailUrl='';if(ticket&&ticket.length>28){thumbnailUrl=browserUtils.getBaseURL()+'fms/fmsdownload/'+fmsUtils.getFilenameFromTicket(ticket)+'?ticket='+ticket;}return thumbnailUrl;};/**\n * Get the URL to the thumbnail file that represents the given ViewModelObject, if it exists.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the thumbnail URL for.\n * @return {String} the URL to the thumbnail file that represents the given ViewModelObject (or '' if a) the\n *         'vmo' is not valid b) there is no thumbnail.\n */export let getThumbnailFileUrl=function(vmo){var url='';if(vmo){var customVmo=null;if(vmo.modelType){customVmo=typeIconSvc.getCustomVmoForThumbnail(vmo);}if(customVmo===null){customVmo=vmo;}if(customVmo.props&&customVmo.props.awp0ThumbnailImageTicket){var prop=customVmo.props.awp0ThumbnailImageTicket;if(prop.dbValues.length>0){var ticket=prop.dbValues[0];url=exports.buildThumbnailFileUrlFromTicket(ticket);}}else if(customVmo.thumbnailURL){url=customVmo.thumbnailURL;}}return url;};export let getTypeIconURLFromHierarchy=function(vmo){if(vmo&&vmo.typeHierarchy){var typeFileName;for(let index=0;index<vmo.typeHierarchy.length;index++){var typeName=vmo.typeHierarchy[index];typeFileName=iconMapSvc.getTypeFileName(typeName);if(typeFileName){return iconSvc.getTypeIconFileUrl(typeFileName);}}if(!typeFileName){return exports.getTypeIconURL('MissingImage');}}return 0;};/**\n * Get the URL to the icon file that represents the 'type' of the given ViewModelObject.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the icon definition for.\n * @return {String} the URL to the icon file that represents the 'type' of the given ViewModelObject (or ''\n *         if a) the 'vmo' is not valid b) the type icon has not been registered as an alias in a\n *         module.json or c) the SVG file was not found during war the build).\n */export let getTypeIconFileUrl=function(vmo){var url='';if(vmo&&vmo.modelType){var customTypeIcon=typeIconSvc.getCustomIcon(vmo);if(customTypeIcon&&customTypeIcon.length>0){url=iconSvc.getTypeIconFileUrl(customTypeIcon);}else{if(vmo.modelType.constantsMap&&vmo.modelType.constantsMap.IconFileName){url=_getIconBaseUrlPath()+vmo.modelType.constantsMap.IconFileName;}else{if(vmo.modelType.typeHierarchyArray){var typeIconFileName=cmm.getTypeIconFileName(vmo.modelType);url=iconSvc.getTypeIconFileUrl(typeIconFileName);}else if(vmo.typeHierarchy){url=exports.getTypeIconURLFromHierarchy(vmo);}}}}else if(vmo&&vmo.typeHierarchy){url=exports.getTypeIconURLFromHierarchy(vmo);}return url;};/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon\n *            for.\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been\n *         registered as an alias in a module.json or the SVG file was not found during war the build).\n */export let getTypeIconURL=function(typeName){return iconSvc.getTypeIconURL(typeName);};/**\n * Given a type hierarchy, get the URL to the icon file for the type or its closest superior.\n *\n * @param {StringArray} typeHierarchy - The type hierarchy.\n *\n * @return {String} The URL to the icon file.\n */export let getTypeIconFileUrlForTypeHierarchy=function(typeHierarchy){for(var j in typeHierarchy){var iconUrl=iconSvc.getTypeIconURL(typeHierarchy[j]);if(iconUrl!==null){return iconUrl;}}return'';};exports={getMissingIcon,getIconDef,buildThumbnailFileUrlFromTicket,getThumbnailFileUrl,getTypeIconURLFromHierarchy,getTypeIconFileUrl,getTypeIconURL,getTypeIconFileUrlForTypeHierarchy};export default exports;","map":null,"metadata":{},"sourceType":"module"}
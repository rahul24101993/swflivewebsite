{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * This service provides helpful APIs to register/unregister/update context variables used to hold application state.\n *\n * @module js/appCtxService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport debugService from 'js/debugService';\n/**\n * delegate object with 2 API: fetch and dispatch\n * Still put a 'default value' for testability\n */\n\nlet _ctxObj = {\n  _ctx: {},\n  fetch: path => path ? _.get(_ctxObj._ctx, path) : _ctxObj._ctx,\n  dispatch: _ref => {\n    let {\n      path,\n      value\n    } = _ref;\n    return value === undefined ? _.unset(_ctxObj._ctx, path) : _.set(_ctxObj._ctx, path, value);\n  }\n};\n/**\n * Init appCtxService\n * @param {object} state state object which has getValue and setValue API\n */\n\nexport function init(state) {\n  _ctxObj = state;\n}\n/**\n * Register application context variable\n *\n * @param {String} name - The name of context variable\n * @param {Object} value - The value of context variable\n */\n\nexport let registerCtx = function (path, value) {\n  debugService.debug('ctx', path, 'register');\n\n  _ctxObj.dispatch({\n    path,\n    value\n  }); // Announce app context registration\n\n\n  eventBus.publish('appCtx.register', {\n    name: path,\n    value: value\n  });\n};\n/**\n * Register part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\n\nexport let registerPartialCtx = function (path, value) {\n  debugService.debug('ctx', path, 'register');\n\n  _ctxObj.dispatch({\n    path,\n    value\n  }); // Announce app context registration\n\n\n  var splitPath = path.split('.');\n  var context = splitPath.shift();\n  eventBus.publish('appCtx.register', {\n    name: context,\n    target: splitPath.join('.'),\n    value: value\n  });\n};\n/**\n * Unregister application context variable\n *\n * @param {String} path - The name of context variable\n */\n\nexport let unRegisterCtx = function (path) {\n  debugService.debug('ctx', path, 'unregister');\n\n  _ctxObj.dispatch({\n    path,\n    value: undefined\n  }); // Announce app context un-registration\n\n\n  eventBus.publish('appCtx.register', {\n    name: path\n  });\n};\n/**\n * Update application context and Announce app context update by publishing an {@link module:js/eventBus|event}\n * 'appCtx.update' with eventData as {\"name\": ctxVariableName, \"value\": ctxVariableValue}\n *\n * @param {String} path - The name of context variable\n * @param {Object} value - The value of context variable\n */\n\nexport let updateCtx = function (path, value) {\n  debugService.debug('ctx', path, 'modify');\n\n  _ctxObj.dispatch({\n    path,\n    value\n  }); // Announce app context update\n\n\n  eventBus.publish('appCtx.update', {\n    name: path,\n    value: value\n  });\n};\n/**\n * Get application context variable value\n *\n * @param {String} path - Path to the context\n * @returns {Object} Value (if any) at the indicated context path location.\n */\n\nexport let getCtx = function (path) {\n  return _ctxObj.fetch(path);\n};\n/**\n * Update part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\n\nexport let updatePartialCtx = function (path, value) {\n  debugService.debug('ctx', path, 'modify');\n\n  var currValue = _ctxObj.fetch(path); // This will typically be done using angular binding, so we don't want an event potentially every $digest\n\n\n  if (value !== currValue) {\n    _ctxObj.dispatch({\n      path,\n      value\n    }); // Announce update\n\n\n    var splitPath = path.split('.');\n    var context = splitPath.shift();\n    eventBus.publish('appCtx.update', {\n      name: context,\n      value: _ctxObj.fetch(),\n      target: splitPath.join('.')\n    });\n  }\n};\n/**\n * Update app context from object\n *\n * @param {Object} ctxObject - The source context objeect containing properties that need to be update on global ctx\n */\n\nexport let updateCtxFromObject = function (ctxObject) {\n  if (ctxObject) {\n    _.forEach(ctxObject, function (value, name) {\n      exports.updateCtx(name, value);\n    });\n  }\n};\nconst exports = {\n  get ctx() {\n    return _ctxObj.fetch();\n  },\n\n  registerCtx,\n  registerPartialCtx,\n  updateCtx,\n  updatePartialCtx,\n  unRegisterCtx,\n  getCtx,\n  updateCtxFromObject\n};\nexport default exports;","map":{"version":3,"names":["_","eventBus","debugService","_ctxObj","_ctx","fetch","path","get","dispatch","value","undefined","unset","set","init","state","registerCtx","debug","publish","name","registerPartialCtx","splitPath","split","context","shift","target","join","unRegisterCtx","updateCtx","getCtx","updatePartialCtx","currValue","updateCtxFromObject","ctxObject","forEach","exports","ctx"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/appCtxService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * This service provides helpful APIs to register/unregister/update context variables used to hold application state.\n *\n * @module js/appCtxService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport debugService from 'js/debugService';\n\n/**\n * delegate object with 2 API: fetch and dispatch\n * Still put a 'default value' for testability\n */\nlet _ctxObj = {\n    _ctx: {},\n    fetch: path => path ? _.get( _ctxObj._ctx, path ) : _ctxObj._ctx,\n    dispatch: ( { path, value } ) => value === undefined ? _.unset( _ctxObj._ctx, path ) : _.set( _ctxObj._ctx, path, value )\n};\n\n/**\n * Init appCtxService\n * @param {object} state state object which has getValue and setValue API\n */\nexport function init( state ) {\n    _ctxObj = state;\n}\n\n/**\n * Register application context variable\n *\n * @param {String} name - The name of context variable\n * @param {Object} value - The value of context variable\n */\nexport let registerCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'register' );\n    _ctxObj.dispatch( { path, value } );\n\n    // Announce app context registration\n    eventBus.publish( 'appCtx.register', {\n        name: path,\n        value: value\n    } );\n};\n\n/**\n * Register part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\nexport let registerPartialCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'register' );\n\n    _ctxObj.dispatch( { path, value } );\n\n    // Announce app context registration\n    var splitPath = path.split( '.' );\n    var context = splitPath.shift();\n    eventBus.publish( 'appCtx.register', {\n        name: context,\n        target: splitPath.join( '.' ),\n        value: value\n    } );\n};\n\n/**\n * Unregister application context variable\n *\n * @param {String} path - The name of context variable\n */\nexport let unRegisterCtx = function( path ) {\n    debugService.debug( 'ctx', path, 'unregister' );\n    _ctxObj.dispatch( { path, value: undefined } );\n\n    // Announce app context un-registration\n    eventBus.publish( 'appCtx.register', {\n        name: path\n    } );\n};\n\n/**\n * Update application context and Announce app context update by publishing an {@link module:js/eventBus|event}\n * 'appCtx.update' with eventData as {\"name\": ctxVariableName, \"value\": ctxVariableValue}\n *\n * @param {String} path - The name of context variable\n * @param {Object} value - The value of context variable\n */\nexport let updateCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'modify' );\n    _ctxObj.dispatch( { path, value } );\n\n    // Announce app context update\n    eventBus.publish( 'appCtx.update', {\n        name: path,\n        value: value\n    } );\n};\n\n/**\n * Get application context variable value\n *\n * @param {String} path - Path to the context\n * @returns {Object} Value (if any) at the indicated context path location.\n */\nexport let getCtx = function( path ) {\n    return _ctxObj.fetch( path );\n};\n\n/**\n * Update part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\nexport let updatePartialCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'modify' );\n\n    var currValue = _ctxObj.fetch( path );\n\n    // This will typically be done using angular binding, so we don't want an event potentially every $digest\n    if( value !== currValue ) {\n        _ctxObj.dispatch( { path, value } );\n\n        // Announce update\n        var splitPath = path.split( '.' );\n        var context = splitPath.shift();\n        eventBus.publish( 'appCtx.update', {\n            name: context,\n            value: _ctxObj.fetch(),\n            target: splitPath.join( '.' )\n        } );\n    }\n};\n\n/**\n * Update app context from object\n *\n * @param {Object} ctxObject - The source context objeect containing properties that need to be update on global ctx\n */\nexport let updateCtxFromObject = function( ctxObject ) {\n    if( ctxObject ) {\n        _.forEach( ctxObject, function( value, name ) {\n            exports.updateCtx( name, value );\n        } );\n    }\n};\n\nconst exports = {\n    get ctx() {\n        return _ctxObj.fetch();\n    },\n    registerCtx,\n    registerPartialCtx,\n    updateCtx,\n    updatePartialCtx,\n    unRegisterCtx,\n    getCtx,\n    updateCtxFromObject\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
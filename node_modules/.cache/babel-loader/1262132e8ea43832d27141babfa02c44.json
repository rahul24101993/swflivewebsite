{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * Defines {@link themeService} which manages themes.\n *\n * @module js/theme.service\n */\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport configurationService from 'js/configurationService';\nimport localStorage from 'js/localStorage';\n/**\n * The theme link element\n */\n\nlet themeLink = null;\n/**\n * Theme context\n */\n\nlet themeContext = 'theme';\n/**\n * Initialize the theme service\n */\n\nexport function init() {\n  exports.setInitialTheme();\n}\n/**\n * Get the current theme\n *\n * @return {String} The current theme\n */\n\nexport function getTheme() {\n  return appCtxService.getCtx(themeContext);\n}\n/**\n * Set the theme to the theme in local storage or the default theme\n */\n\nexport function setInitialTheme() {\n  var localTheme = exports.getLocalStorageTheme();\n\n  if (localTheme) {\n    exports.setTheme(localTheme);\n  } else {\n    exports.getDefaultTheme().then(exports.setTheme);\n  }\n}\n/**\n * Get the current theme from local storage\n *\n * @return {String} The theme in local storage\n */\n\nexport function getLocalStorageTheme() {\n  return localStorage.get(themeContext);\n}\n/**\n * Get the default theme defined by the workspace\n *\n * @return {String} The default workspace theme\n */\n\nexport function getDefaultTheme() {\n  return configurationService.getCfg('solutionDef').then(function (solutionDef) {\n    return solutionDef.defaultTheme ? solutionDef.defaultTheme : 'ui-lightTheme';\n  });\n}\n/**\n * Set the current theme\n *\n * @example themeService.setTheme( 'ui-lightTheme' )\n *\n * @param {String} newTheme - The new theme\n */\n\nexport function setTheme(newTheme) {\n  appCtxService.registerCtx(themeContext, newTheme);\n}\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nconst exports = {\n  init,\n  getTheme,\n  setInitialTheme,\n  getLocalStorageTheme,\n  getDefaultTheme,\n  setTheme\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/theme.service.js"],"names":["themeLink","themeContext","exports","appCtxService","localTheme","localStorage","solutionDef","setTheme"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,oBAAA,MAAA,yBAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AAEA;AACA;AACA;;AACA,IAAIA,SAAS,GAAb,IAAA;AAEA;AACA;AACA;;AACA,IAAIC,YAAY,GAAhB,OAAA;AAEA;AACA;AACA;;AACA,OAAO,SAAA,IAAA,GAAgB;EACnBC,OAAO,CAAPA,eAAAA;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,QAAA,GAAoB;EACvB,OAAOC,aAAa,CAAbA,MAAAA,CAAP,YAAOA,CAAP;AACH;AAED;AACA;AACA;;AACA,OAAO,SAAA,eAAA,GAA2B;EAC9B,IAAIC,UAAU,GAAGF,OAAO,CAAxB,oBAAiBA,EAAjB;;EACA,IAAA,UAAA,EAAiB;IACbA,OAAO,CAAPA,QAAAA,CAAAA,UAAAA;EADJ,CAAA,MAEO;IACHA,OAAO,CAAPA,eAAAA,GAAAA,IAAAA,CAAgCA,OAAO,CAAvCA,QAAAA;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,oBAAA,GAAgC;EACnC,OAAOG,YAAY,CAAZA,GAAAA,CAAP,YAAOA,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,eAAA,GAA2B;EAC9B,OAAO,oBAAoB,CAApB,MAAA,CAAA,aAAA,EAAA,IAAA,CAAmD,UAAA,WAAA,EAAwB;IAC9E,OAAOC,WAAW,CAAXA,YAAAA,GAA2BA,WAAW,CAAtCA,YAAAA,GAAP,eAAA;EADJ,CAAO,CAAP;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,QAAA,CAAA,QAAA,EAA8B;EACjCH,aAAa,CAAbA,WAAAA,CAAAA,YAAAA,EAAAA,QAAAA;AACH;AAED;AACA;AACA;AACA;;AAEA,MAAMD,OAAO,GAAG;EAAA,IAAA;EAAA,QAAA;EAAA,eAAA;EAAA,oBAAA;EAAA,eAAA;EAMZK;AANY,CAAhB;AAQA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * Defines {@link themeService} which manages themes.\n *\n * @module js/theme.service\n */\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport configurationService from 'js/configurationService';\nimport localStorage from 'js/localStorage';\n\n/**\n * The theme link element\n */\nlet themeLink = null;\n\n/**\n * Theme context\n */\nlet themeContext = 'theme';\n\n/**\n * Initialize the theme service\n */\nexport function init() {\n    exports.setInitialTheme();\n}\n\n/**\n * Get the current theme\n *\n * @return {String} The current theme\n */\nexport function getTheme() {\n    return appCtxService.getCtx( themeContext );\n}\n\n/**\n * Set the theme to the theme in local storage or the default theme\n */\nexport function setInitialTheme() {\n    var localTheme = exports.getLocalStorageTheme();\n    if( localTheme ) {\n        exports.setTheme( localTheme );\n    } else {\n        exports.getDefaultTheme().then( exports.setTheme );\n    }\n}\n\n/**\n * Get the current theme from local storage\n *\n * @return {String} The theme in local storage\n */\nexport function getLocalStorageTheme() {\n    return localStorage.get( themeContext );\n}\n\n/**\n * Get the default theme defined by the workspace\n *\n * @return {String} The default workspace theme\n */\nexport function getDefaultTheme() {\n    return configurationService.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n        return solutionDef.defaultTheme ? solutionDef.defaultTheme : 'ui-lightTheme';\n    } );\n}\n\n/**\n * Set the current theme\n *\n * @example themeService.setTheme( 'ui-lightTheme' )\n *\n * @param {String} newTheme - The new theme\n */\nexport function setTheme( newTheme ) {\n    appCtxService.registerCtx( themeContext, newTheme );\n}\n\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nconst exports = {\n    init,\n    getTheme,\n    setInitialTheme,\n    getLocalStorageTheme,\n    getDefaultTheme,\n    setTheme\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable complexity */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides lov service in native.\n *\n * @module js/lovService\n */\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport soaSvc from 'soa/kernel/soaService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport clientMetaModel from 'soa/kernel/clientMetaModel';\nimport appCtxService from 'js/appCtxService';\nimport uwPropertyService from 'js/uwPropertyService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\nconst LOV_TYPES = {\n  EXHAUSTIVE_LOV: 1,\n  SUGGESTIVE_LOV: 2,\n  RANGE_LOV: 3\n}; // Services\n\nimport AwPromiseService from 'js/awPromiseService';\nimport { debugUpdateHandlerOnCommand } from 'js/debugService';\n/**\n * LOVEntry object\n *\n * @class LOVEntry\n *\n * @param {Array} lovRowValue - LOV Values.\n * @param {String} lovType - The type of the LOV. e.g. String, Integer etc. This has to be same as the property\n *            type.\n * @param {String} lovValueProp - LOV Value Property.\n * @param {String} lovDescProp - LOV Description Property.\n */\n\nvar LOVEntry = function (lovRowValue, lovType, lovValueProp, lovDescProp) {\n  var self = this;\n  self.lovRowValue = lovRowValue;\n  self.lovType = lovType;\n  self.lovDescProp = lovDescProp;\n  self.lovValueProp = lovValueProp;\n  self.propHasValidValues = true;\n\n  if (lovRowValue.propInternalValues) {\n    self.propInternalValue = lovRowValue.propInternalValues[lovValueProp][0];\n  } else {\n    self.propInternalValue = {};\n  }\n  /** property display description */\n\n  /**\n   * set flag 'propHasValidValues'\n   *\n   * @param {propHasValidValues} propHasValidValues - flag\n   */\n\n\n  self.setPropHasValidValues = function (propHasValidValues) {\n    self.propHasValidValues = propHasValidValues;\n  };\n  /**\n   * Concatenate property values array and returns property string\n   *\n   * @param {propValues} propValues - property values array\n   * @return {propVal} concatenated property value string\n   */\n\n\n  self.getPropertyString = function (propValues) {\n    var propVal = '';\n\n    if (propValues !== null && propValues.length > 0) {\n      propVal = propValues[0];\n\n      for (var i = 1; i < propValues.length; i++) {\n        if (propValues[i] !== null) {\n          propVal += propVal + ';' + propValues[i];\n        }\n      }\n    }\n\n    return propVal;\n  };\n  /**\n   * Concatenate property display values\n   *\n   * @return {propDisplayValue} concatenated property display values\n   */\n\n\n  self.getPropDisplayValues = function () {\n    var propDisplayValue;\n\n    if (self.lovRowValue && self.lovRowValue.propDisplayValues && self.lovRowValue.propDisplayValues[self.lovValueProp]) {\n      propDisplayValue = self.getPropertyString(self.lovRowValue.propDisplayValues[self.lovValueProp]);\n    }\n\n    return propDisplayValue;\n  };\n  /**\n   * Concatenate property display description values\n   *\n   * @return {propDisplayDescription} concatenated property display description values\n   */\n\n\n  self.getPropDisplayDescriptions = function () {\n    var propDisplayDescription;\n\n    if (self.lovRowValue && self.lovRowValue.propDisplayValues && self.lovRowValue.propDisplayValues[lovDescProp]) {\n      propDisplayDescription = self.getPropertyString(self.lovRowValue.propDisplayValues[lovDescProp]);\n    }\n\n    return propDisplayDescription;\n  };\n  /** property display value and decription */\n\n\n  if (self.lovRowValue.propDisplayValues) {\n    self.propDisplayValue = self.getPropDisplayValues();\n    self.propDisplayDescription = self.getPropDisplayDescriptions();\n  } else {\n    self.propDisplayValue = {};\n    self.propDisplayDescription = {};\n  }\n  /**\n   * Returns true/false whether the lovRowValue has children.\n   *\n   * @return {hasChildren} true/false\n   */\n\n\n  self.checkHasChildren = function () {\n    return self.lovRowValue.childRows && self.lovRowValue.childRows.length > 0;\n  };\n  /** checks whether lov has children */\n\n\n  self.hasChildren = self.checkHasChildren();\n  /**\n   * Get children lov, used for hierarical lovs\n   *\n   * @return {list} list array which contains child rows\n   */\n\n  self.getChildren = function () {\n    var lovEntries = [];\n\n    if (self.checkHasChildren()) {\n      for (var lovValue in self.lovRowValue.childRows) {\n        if (self.lovRowValue.childRows.hasOwnProperty(lovValue)) {\n          lovEntries.push(new LOVEntry(self.lovRowValue.childRows[lovValue], self.lovType, self.lovValueProp, self.lovDescProp));\n        }\n      }\n    }\n\n    return lovEntries;\n  };\n}; // LOVEntry\n\n/**\n * LOVDataValidationResult object\n *\n * @constructor\n */\n\n\n_c3 = LOVEntry;\n_c = LOVEntry;\n\nvar LOVDataValidationResult = function () {\n  var self = this;\n  self.updatedPropValueMap = {};\n  self.updatedPropDisplayValueMap = {};\n  /**\n   * The parent view model object\n   */\n\n  self.setViewModelObject = function (vmObj) {\n    self.viewModelObj = vmObj;\n  };\n  /**\n   * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n   */\n\n\n  self.addUpdatedPropertyValue = function (propName, propValues, propDisplayValues) {\n    self.updatedPropValueMap[propName] = propValues;\n    self.updatedPropDisplayValueMap[propName] = propDisplayValues;\n  };\n  /**\n   * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n   */\n\n\n  self.setValid = function (valid) {\n    self.valid = valid;\n  };\n  /**\n   * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n   */\n\n\n  self.setError = function (error) {\n    self.error = error;\n  };\n}; // LOVDataValidationResult\n\n/**\n * @param {ViewModelProperty} viewProp -view model Property\n * @param {filterString} filterString - filter string for lov's\n * @param {String} opName - operation Name\n * @param {ViewModelObject} viewModelObj -view model object\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\n\n\n_c4 = LOVDataValidationResult;\n_c2 = LOVDataValidationResult;\n\nvar createInitialData = function (viewProp, filterString, assert, operationName, viewModelObj, appCtxService, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid) {\n  var viewObject = viewModelObj;\n  var contextObject = appCtxService.getCtx('InitialLovDataAdditionalProps');\n  var tablePropObject = appCtxService.getCtx('InitialSaveDataAdditionalProps');\n  assert(viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name);\n  var initialData = {};\n  initialData.propertyName = uwPropertyService.getBasePropertyName(viewProp.propertyName);\n  initialData.filterData = {\n    filterString: filterString ? filterString : '',\n    maxResults: maxResults ? maxResults : 2000,\n    numberToReturn: lovPageSize ? lovPageSize : 25,\n    order: sortOrder ? sortOrder : 1,\n    sortPropertyName: sortPropertyName ? sortPropertyName : ''\n  };\n  initialData.lov = {\n    uid: '',\n    type: ''\n  };\n  let viewPropOwningType;\n\n  if (viewProp.srcObjectTypeName) {\n    let viewPropType = clientMetaModel.getType(viewProp.srcObjectTypeName);\n    viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n  } // For Dcp properties, use intermediate object's type, else use the type of the parent object.\n\n\n  var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n  operationName = exports.formatOperationName(operationName);\n  var sourceObjectUid = uwPropertyService.getSourceObjectUid(viewProp);\n  var owningObjectUid = owningObjUid || sourceObjectUid;\n  var modelObject = clientDataModel.getObject(owningObjectUid);\n\n  if (!modelObject) {\n    owningObjectUid = clientDataModel.NULL_UID;\n  }\n\n  initialData.lovInput = {\n    owningObject: {\n      uid: owningObjectUid,\n      type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n    },\n    operationName: operationName,\n    boName: objName,\n    propertyValues: {}\n  };\n\n  var modifiedProps = _.union(viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps());\n\n  if (modifiedProps && modifiedProps.length > 0) {\n    for (var prop in modifiedProps) {\n      if (modifiedProps.hasOwnProperty(prop)) {\n        var modifiedPropName = uwPropertyService.getBasePropertyName(modifiedProps[prop].name);\n        initialData.lovInput.propertyValues[modifiedPropName] = modifiedProps[prop].values;\n      }\n    }\n  }\n\n  if (tablePropObject) {\n    tablePropObject = _.isArray(tablePropObject) ? tablePropObject : [tablePropObject];\n\n    _.forEach(tablePropObject, function (value, key) {\n      _.forEach(value, function (nestedValue, nestedKey) {\n        delete initialData.lovInput.propertyValues[nestedKey];\n      });\n    });\n  }\n\n  if (contextObject) {\n    for (var addProp in contextObject) {\n      initialData.lovInput.propertyValues[addProp] = [contextObject[addProp]];\n    }\n  }\n\n  return initialData;\n};\n/**\n * Implementation of LOV Service (these api's are only compatible with Teamcenter 9)\n *\n * @param {module:scripts/services/notifyService} notifySvc -\n *\n * @param {module:js/dateTimeService} dateTimeSvc - SOA's LOV Access service\n *\n * @param {module:soa/kernel/clientDataModel} clientDataModel - SOA's clientDataModel service\n */\n\n\nlet exports;\n/**\n * Add the 'lovApi' function set object to the given ViewModelProperty\n *\n * @param {ViewModelProperty} viewProp -view model property\n *\n * @param {module:angular~Scope} scope - angular scope for the element\n *\n * @param {ViewModelObject} viewModelObj -view model Object\n *\n * @param {String} owningObjUid - The UID of owning object\n *\n */\n\nexport let initNativeCellLovApi = function (viewProp, scope, operationName, viewModelObj, owningObjUid) {\n  viewProp.lovApi = {}; //viewProp.isRequired = true;\n\n  viewProp.lovApi.operationName = operationName;\n\n  viewProp.lovApi.getInitialValues = function (filterStr, deferred, name, maxResults, lovPageSize, sortPropertyName, sortOrder) {\n    exports.getInitialValues(filterStr, deferred, viewProp, viewProp.lovApi.operationName, viewModelObj, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid);\n  };\n\n  viewProp.lovApi.getNextValues = function (deferred) {\n    exports.getNextValues(deferred, viewProp);\n  };\n\n  viewProp.lovApi.validateLOVValueSelections = function (lovEntries) {\n    return exports.validateLOVValueSelections(lovEntries, viewProp, viewProp.lovApi.operationName, viewModelObj, owningObjUid);\n  };\n\n  viewProp.owningObjUid = owningObjUid;\n};\n/**\n * This operation is invoked to query the data for a property having an LOV attachment. The results returned\n * from the server also take into consideration any filter string that is in the input. This method calls\n * 'getInitialLOVValues' and returns initial set of lov values. This is only compatible with 'Teamcenter 10'\n *\n * @param {filterString} filterString - The filter text for lov's\n * @param {deferred} deferred - $q object to resolve the 'promise' with a an array of LOVEntry objects.\n * @param {ViewModelProperty} viewProp - Property to aceess LOV values for.\n * @param {String} operationName - The operation being performed e.g. Edit, Create, Revise, Save As etc.\n * @param {ViewModelObject} viewModelObj - The view model object which LOV property is defined on.\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\n\nexport let getInitialValues = function (filterString, deferred, viewProp, operationName, viewModelObj, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid) {\n  var initialData = createInitialData(viewProp, filterString, assert, operationName, viewModelObj, appCtxService, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid);\n  var serviceInput = {\n    initialData: initialData\n  };\n  soaSvc.postUnchecked('Core-2013-05-LOV', 'getInitialLOVValues', serviceInput).then(function (responseData) {\n    //Object.assign( viewProp.searchResults, responseData );\n    //viewProp.searchResults = responseData; // using for LOV getNextLOVValues SOA call\n    //viewProp.lovApi.result = responseData; // using for validateLOVValuesSelections()\n    if (_.isArray(responseData.ServiceData.partialErrors)) {\n      //getInitialLOV  returns error when message/error has to be displayed\n      // if errorlevel >1 its legitimate error else it is message\n      for (const partialError of responseData.ServiceData.partialErrors) {\n        if (_.isArray(partialError.errorValues)) {\n          for (const errorValue of partialError.errorValues) {\n            if (errorValue.level > 1) {\n              deferred.reject(responseData.ServiceData.partialErrors);\n            }\n          }\n        }\n      }\n    }\n\n    let lovValues = exports.createLOVEntries(responseData, viewProp.type);\n    deferred.resolve({\n      responseData,\n      lovValues\n    });\n  }, function (reason) {\n    deferred.reject(reason);\n  });\n};\nexport let getListLOVValues = function (list) {\n  let lovEntries = list;\n  return {\n    lovEntries\n  };\n};\n/**\n *\n * @param {*} output\n * @param {*} declViewModel\n */\n\nexport let processLOVEntries = function (_ref) {\n  let {\n    responseData,\n    lovValues = {}\n  } = _ref;\n\n  if (lovValues && lovValues.hasOwnProperty('moreValuesExist')) {\n    let moreValuesExist = lovValues.moreValuesExist;\n    let newop = [...lovValues];\n    delete newop.moreValuesExist;\n    return {\n      lovEntries: newop,\n      moreValuesExist,\n      partialErrors: '',\n      level: '',\n      responseData,\n      lovUsage: lovValues.lovUsage\n    };\n  }\n\n  return {\n    lovEntries: [],\n    partialErrors: lovValues.cause,\n    level: lovValues.level,\n    moreValuesExist: false,\n    responseData,\n    lovUsage: lovValues.lovUsage\n  };\n};\nexport let getInitialLOVValues = function (viewModel, dataProviderName) {\n  let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[dataProviderName] : null;\n  const lovInfo = appCtxSvc.getCtx('aw.lovInfo');\n  let vmo;\n  let viewProp;\n  let filterString;\n  let owningObjUid;\n  let operationName;\n\n  if (dataProvider && dataProvider.resolvedLovConfig) {\n    const lovConfiguration = dataProvider.resolvedLovConfig;\n    vmo = lovConfiguration.viewModelObj;\n    viewProp = lovConfiguration.viewProp;\n    filterString = lovConfiguration.filterString;\n    owningObjUid = viewProp.owningObjUid;\n    operationName = lovConfiguration.operationName;\n  } else if (lovInfo) {\n    vmo = lovInfo.ctxLovPropVMO;\n    viewProp = vmo.props[lovInfo.ctxLovPropName];\n    filterString = viewProp.filterString;\n    owningObjUid = viewProp.owningObjUid;\n    operationName = vmo.operationName;\n  }\n\n  let deferred = AwPromiseService.instance.defer();\n  getInitialValues(filterString, deferred, viewProp, operationName, vmo, null, null, '', '', owningObjUid);\n  return deferred.promise.then(response => {\n    const responseBehaviorData = response.responseData && response.responseData.behaviorData;\n    viewProp.lovApi.behaviorData = {\n      dependendProps: responseBehaviorData && responseBehaviorData.dependendProps,\n      style: responseBehaviorData && responseBehaviorData.style\n    };\n    return response;\n  }).catch(error => error);\n};\n/**\n * This operation is invoked after a call to getInitialLOVValues if the moreValuesExist flag is true in the\n * LOVSearchResults output returned from a call to the getInitialLOVValues operation. The operation will\n * retrieve the next set of LOV values.\n *\n * @param {deferred} deferred - promise object\n * @param {ViewModelProperty} viewProp - Lov object value\n * @return {deferred.promise} promise object\n */\n\nexport let getNextValues = function (viewModel, dataProviderName) {\n  let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[dataProviderName] : null;\n  const lovInfo = appCtxSvc.getCtx('aw.lovInfo');\n  let lovDataInfo = viewModel.lovDataInfo;\n  let vmo;\n  let viewProp;\n\n  if (dataProvider && dataProvider.resolvedLovConfig) {\n    const lovConfiguration = dataProvider.resolvedLovConfig;\n    vmo = lovConfiguration.viewModelObj;\n    viewProp = lovConfiguration.viewProp;\n  } else if (lovDataInfo) {\n    vmo = lovInfo.ctxLovPropVMO;\n    viewProp = vmo.props[lovInfo.ctxLovPropName];\n  }\n\n  let lovEntries = [];\n\n  if (lovDataInfo && lovDataInfo.responseData) {\n    var serviceInput = {};\n    serviceInput.lovData = lovDataInfo.responseData.lovData;\n    return soaSvc.post('Core-2013-05-LOV', 'getNextLOVValues', serviceInput).then(responseData => {\n      const lovValues = exports.createLOVEntries(responseData, viewProp.type);\n      return {\n        lovValues,\n        responseData\n      };\n    });\n  }\n\n  return Promise.resolve(lovEntries);\n};\n/**\n * This is a reusable function to create LOV entries from SOA response\n *\n * @param {responseData} SOA response structure from LOV\n * @param {propertyType} Type of Property\n * @return {lovEntries} Array of LOV entry objects\n */\n\nexport let createLOVEntries = function (responseData, propertyType) {\n  var lovEntries = [];\n  var lovValueProp = responseData.behaviorData.columnNames.lovValueProp;\n  var lovDescProp = responseData.behaviorData.columnNames.lovDescrProp;\n  var lovUsage = responseData.behaviorData.lovUsage;\n\n  for (var lovValue in responseData.lovValues) {\n    if (responseData.lovValues.hasOwnProperty(lovValue)) {\n      lovEntries.push(new LOVEntry(responseData.lovValues[lovValue], propertyType, lovValueProp, lovDescProp));\n    }\n  } // push the moreValuesExist to the lovEntries. if it is true, then call getNextValues ; else not call getNextValues\n\n\n  if (responseData.moreValuesExist) {\n    lovEntries.moreValuesExist = responseData.moreValuesExist;\n  } else {\n    lovEntries.moreValuesExist = false;\n  }\n\n  lovEntries.lovUsage = 'EXHAUSTIVE_LOV';\n\n  if (lovUsage === LOV_TYPES.SUGGESTIVE_LOV) {\n    lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n  } // This is Workaround hack which will be removed when Fnd0NameValueDynLOV wil be converted to suggestive\n  //LCS-681145 - Change Fnd0DynLOVNameValuePairs LOV to suggestive\n\n\n  if (responseData.lovData && _.isArray(responseData.lovData.lovs) && responseData.lovData.lovs.length > 0 && responseData.lovData.lovs[0].type === 'Fnd0NameValueDynLOV') {\n    lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n  }\n\n  return lovEntries;\n};\n/**\n * This operation can be invoked after selecting a value from the LOV. Use this operation to do additional\n * validation to be done on server such as validating Range value, getting the dependent properties values in\n * case of interdependent LOV (resetting the dependendent property values), Coordinated LOVs ( populating\n * dependent property values ).\n *\n * @param {LovEntry[]} lovEntries - Array of LOV values selected\n *\n * @param {viewProp} viewProp - The property being modified\n *\n * @return {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc\n *\n * @return {ViewModelObject} viewModelObj The object for which property is being modified\n *\n * @param {String} owningObjUid - The UID of owning object\n */\n\nexport let validateLOVValueSelections = function (lovEntries, viewProp, operationName, viewModelObj, owningObjUid) {\n  var viewObject = viewModelObj;\n  var contextObject = appCtxService.getCtx('InitialLovDataAdditionalProps');\n  var tablePropObject = appCtxService.getCtx('InitialSaveDataAdditionalProps');\n  assert(viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name);\n  var lovValueProp = null;\n\n  if (viewProp.lovApi && viewProp.lovApi.result) {\n    lovValueProp = viewProp.lovApi.result.behaviorData.columnNames.lovValueProp;\n  }\n\n  var propName = uwPropertyService.getBasePropertyName(viewProp.propertyName);\n  let viewPropOwningType;\n\n  if (viewProp.srcObjectTypeName) {\n    let viewPropType = clientMetaModel.getType(viewProp.srcObjectTypeName);\n    viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n  }\n\n  var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n  var serviceInput = {};\n  var sourceObjectUid = uwPropertyService.getSourceObjectUid(viewProp);\n  var owningObjectUid = owningObjUid || sourceObjectUid;\n  var modelObject = clientDataModel.getObject(owningObjectUid);\n\n  if (!modelObject) {\n    owningObjectUid = clientDataModel.NULL_UID;\n  }\n\n  serviceInput.lovInput = {\n    owningObject: {\n      uid: owningObjectUid,\n      type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n    },\n    operationName: operationName,\n    boName: objName,\n    propertyValues: {}\n  };\n  serviceInput.propName = propName;\n  serviceInput.uidOfSelectedRows = [];\n  serviceInput.lovInput.propertyValues[propName] = []; // First add all the selected LOV entries\n\n  for (var ii = 0; ii < lovEntries.length; ii++) {\n    // account for simplified lov format\n    if ('propInternalValue' in lovEntries[ii]) {\n      serviceInput.lovInput.propertyValues[propName].push(String(lovEntries[ii].propInternalValue !== null ? lovEntries[ii].propInternalValue : ''));\n    } else if (lovValueProp && lovEntries[ii].lovRowValue) {\n      serviceInput.lovInput.propertyValues[propName].push(String(lovEntries[ii].lovRowValue.propInternalValues[lovValueProp][0]));\n    } //append selected row uid to fix dynamic LOV defect LCS-351651\n\n\n    if (lovEntries[ii].lovRowValue && !_.isEmpty(lovEntries[ii].lovRowValue.uid)) {\n      serviceInput.uidOfSelectedRows.push(String(lovEntries[ii].lovRowValue.uid));\n    }\n  } // Now populate all the other modified properties.\n\n\n  var modifiedProps = _.union(viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps());\n\n  if (modifiedProps && modifiedProps.length > 0) {\n    for (var prop in modifiedProps) {\n      if (modifiedProps.hasOwnProperty(prop)) {\n        var modifiedPropName = uwPropertyService.getBasePropertyName(modifiedProps[prop].name);\n\n        if (modifiedPropName !== propName) {\n          serviceInput.lovInput.propertyValues[modifiedPropName] = modifiedProps[prop].values;\n        }\n      }\n    }\n  }\n\n  if (tablePropObject) {\n    _.forEach(tablePropObject, function (value, key) {\n      delete serviceInput.lovInput.propertyValues[key];\n    });\n  }\n\n  if (contextObject) {\n    for (var addProp in contextObject) {\n      serviceInput.lovInput.propertyValues[addProp] = [contextObject[addProp]];\n    }\n  }\n\n  return soaSvc.post('Core-2013-05-LOV', 'validateLOVValueSelections', serviceInput).then(function (responseData) {\n    var validationResult = new LOVDataValidationResult();\n    validationResult.setValid(responseData.propHasValidValues);\n    validationResult.setViewModelObject(viewModelObj);\n    var updatedValues = responseData.updatedPropValues;\n\n    for (var propName in responseData.dependentPropNames) {\n      if (responseData.dependentPropNames.hasOwnProperty(propName)) {\n        var prop = responseData.dependentPropNames[propName];\n\n        if (updatedValues.propInternalValues.hasOwnProperty(prop)) {\n          validationResult.addUpdatedPropertyValue(prop, updatedValues.propInternalValues[prop], updatedValues.propDisplayValues[prop]);\n        }\n      }\n    }\n\n    return validationResult;\n  }, function (error) {\n    return error;\n  });\n};\n/**\n * Converts operation names to camel case.\n *\n * @param {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc.\n *\n * @return {String} operationName The operation formatted into camelCase.\n *\n */\n\nexport let formatOperationName = function (operationName) {\n  if (operationName.toUpperCase() === 'EDIT') {\n    operationName = 'Edit';\n  } else if (operationName.toUpperCase() === 'CREATE') {\n    operationName = 'Create';\n  } else if (operationName.toUpperCase() === 'REVISE') {\n    operationName = 'Revise';\n  } else if (operationName.toUpperCase() === 'SAVEAS') {\n    operationName = 'SaveAs';\n  }\n\n  return operationName;\n};\nexports = {\n  getListLOVValues,\n  initNativeCellLovApi,\n  getInitialValues,\n  getNextValues,\n  createLOVEntries,\n  validateLOVValueSelections,\n  formatOperationName,\n  getInitialLOVValues,\n  processLOVEntries\n};\nexport default exports;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LOVEntry\");\n$RefreshReg$(_c2, \"LOVDataValidationResult\");\n\nvar _c3, _c4;\n\n$RefreshReg$(_c3, \"LOVEntry\");\n$RefreshReg$(_c4, \"LOVDataValidationResult\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/lovService.js"],"names":["LOV_TYPES","EXHAUSTIVE_LOV","SUGGESTIVE_LOV","RANGE_LOV","LOVEntry","self","lovRowValue","propVal","propValues","i","propDisplayValue","propDisplayDescription","lovEntries","LOVDataValidationResult","createInitialData","viewObject","contextObject","appCtxService","tablePropObject","assert","viewProp","initialData","uwPropertyService","filterString","maxResults","numberToReturn","lovPageSize","order","sortOrder","sortPropertyName","uid","type","viewPropType","clientMetaModel","viewPropOwningType","objName","operationName","exports","sourceObjectUid","owningObjectUid","owningObjUid","modelObject","clientDataModel","owningObject","boName","propertyValues","modifiedProps","_","modifiedPropName","initNativeCellLovApi","getInitialValues","serviceInput","soaSvc","responseData","partialError","errorValue","deferred","lovValues","getListLOVValues","processLOVEntries","moreValuesExist","newop","partialErrors","level","lovUsage","getInitialLOVValues","dataProvider","viewModel","lovInfo","appCtxSvc","lovConfiguration","vmo","AwPromiseService","response","responseBehaviorData","dependendProps","style","error","getNextValues","lovDataInfo","Promise","createLOVEntries","lovValueProp","lovDescProp","validateLOVValueSelections","propName","ii","String","validationResult","updatedValues","prop","formatOperationName"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides lov service in native.\n *\n * @module js/lovService\n */\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport soaSvc from 'soa/kernel/soaService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport clientMetaModel from 'soa/kernel/clientMetaModel';\nimport appCtxService from 'js/appCtxService';\nimport uwPropertyService from 'js/uwPropertyService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\n\nconst LOV_TYPES = { EXHAUSTIVE_LOV: 1, SUGGESTIVE_LOV: 2, RANGE_LOV: 3 };\n\n// Services\nimport AwPromiseService from 'js/awPromiseService';\nimport { debugUpdateHandlerOnCommand } from 'js/debugService';\n\n/**\n * LOVEntry object\n *\n * @class LOVEntry\n *\n * @param {Array} lovRowValue - LOV Values.\n * @param {String} lovType - The type of the LOV. e.g. String, Integer etc. This has to be same as the property\n *            type.\n * @param {String} lovValueProp - LOV Value Property.\n * @param {String} lovDescProp - LOV Description Property.\n */\nvar LOVEntry = function( lovRowValue, lovType, lovValueProp, lovDescProp ) {\n    var self = this;\n\n    self.lovRowValue = lovRowValue;\n    self.lovType = lovType;\n    self.lovDescProp = lovDescProp;\n    self.lovValueProp = lovValueProp;\n    self.propHasValidValues = true;\n    if( lovRowValue.propInternalValues ) {\n        self.propInternalValue = lovRowValue.propInternalValues[ lovValueProp ][ 0 ];\n    } else {\n        self.propInternalValue = {};\n    }\n\n    /** property display description */\n\n    /**\n     * set flag 'propHasValidValues'\n     *\n     * @param {propHasValidValues} propHasValidValues - flag\n     */\n    self.setPropHasValidValues = function( propHasValidValues ) {\n        self.propHasValidValues = propHasValidValues;\n    };\n\n    /**\n     * Concatenate property values array and returns property string\n     *\n     * @param {propValues} propValues - property values array\n     * @return {propVal} concatenated property value string\n     */\n    self.getPropertyString = function( propValues ) {\n        var propVal = '';\n        if( propValues !== null && propValues.length > 0 ) {\n            propVal = propValues[ 0 ];\n            for( var i = 1; i < propValues.length; i++ ) {\n                if( propValues[ i ] !== null ) {\n                    propVal += propVal + ';' + propValues[ i ];\n                }\n            }\n        }\n\n        return propVal;\n    };\n\n    /**\n     * Concatenate property display values\n     *\n     * @return {propDisplayValue} concatenated property display values\n     */\n    self.getPropDisplayValues = function() {\n        var propDisplayValue;\n        if( self.lovRowValue && self.lovRowValue.propDisplayValues &&\n            self.lovRowValue.propDisplayValues[ self.lovValueProp ] ) {\n            propDisplayValue = self.getPropertyString( self.lovRowValue.propDisplayValues[ self.lovValueProp ] );\n        }\n\n        return propDisplayValue;\n    };\n\n    /**\n     * Concatenate property display description values\n     *\n     * @return {propDisplayDescription} concatenated property display description values\n     */\n    self.getPropDisplayDescriptions = function() {\n        var propDisplayDescription;\n        if( self.lovRowValue && self.lovRowValue.propDisplayValues &&\n            self.lovRowValue.propDisplayValues[ lovDescProp ] ) {\n            propDisplayDescription = self.getPropertyString( self.lovRowValue.propDisplayValues[ lovDescProp ] );\n        }\n\n        return propDisplayDescription;\n    };\n\n    /** property display value and decription */\n    if( self.lovRowValue.propDisplayValues ) {\n        self.propDisplayValue = self.getPropDisplayValues();\n        self.propDisplayDescription = self.getPropDisplayDescriptions();\n    } else {\n        self.propDisplayValue = {};\n        self.propDisplayDescription = {};\n    }\n    /**\n     * Returns true/false whether the lovRowValue has children.\n     *\n     * @return {hasChildren} true/false\n     */\n    self.checkHasChildren = function() {\n        return self.lovRowValue.childRows && self.lovRowValue.childRows.length > 0;\n    };\n\n    /** checks whether lov has children */\n    self.hasChildren = self.checkHasChildren();\n\n    /**\n     * Get children lov, used for hierarical lovs\n     *\n     * @return {list} list array which contains child rows\n     */\n    self.getChildren = function() {\n        var lovEntries = [];\n        if( self.checkHasChildren() ) {\n            for( var lovValue in self.lovRowValue.childRows ) {\n                if( self.lovRowValue.childRows.hasOwnProperty( lovValue ) ) {\n                    lovEntries.push( new LOVEntry( self.lovRowValue.childRows[ lovValue ], self.lovType,\n                        self.lovValueProp, self.lovDescProp ) );\n                }\n            }\n        }\n\n        return lovEntries;\n    };\n}; // LOVEntry\n\n/**\n * LOVDataValidationResult object\n *\n * @constructor\n */\nvar LOVDataValidationResult = function() {\n    var self = this;\n\n    self.updatedPropValueMap = {};\n    self.updatedPropDisplayValueMap = {};\n\n    /**\n     * The parent view model object\n     */\n    self.setViewModelObject = function( vmObj ) {\n        self.viewModelObj = vmObj;\n    };\n\n    /**\n     * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n     */\n    self.addUpdatedPropertyValue = function( propName, propValues, propDisplayValues ) {\n        self.updatedPropValueMap[ propName ] = propValues;\n        self.updatedPropDisplayValueMap[ propName ] = propDisplayValues;\n    };\n\n    /**\n     * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n     */\n    self.setValid = function( valid ) {\n        self.valid = valid;\n    };\n\n    /**\n     * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n     */\n    self.setError = function( error ) {\n        self.error = error;\n    };\n}; // LOVDataValidationResult\n\n/**\n * @param {ViewModelProperty} viewProp -view model Property\n * @param {filterString} filterString - filter string for lov's\n * @param {String} opName - operation Name\n * @param {ViewModelObject} viewModelObj -view model object\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\nvar createInitialData = function( viewProp, filterString, assert, operationName, viewModelObj, appCtxService,\n    maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid ) {\n    var viewObject = viewModelObj;\n\n    var contextObject = appCtxService.getCtx( 'InitialLovDataAdditionalProps' );\n    var tablePropObject = appCtxService.getCtx( 'InitialSaveDataAdditionalProps' );\n\n    assert( viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name );\n\n    var initialData = {};\n\n    initialData.propertyName = uwPropertyService.getBasePropertyName( viewProp.propertyName );\n    initialData.filterData = {\n        filterString: filterString ? filterString : '',\n        maxResults: maxResults ? maxResults : 2000,\n        numberToReturn: lovPageSize ? lovPageSize : 25,\n        order: sortOrder ? sortOrder : 1,\n        sortPropertyName: sortPropertyName ? sortPropertyName : ''\n    };\n\n    initialData.lov = {\n        uid: '',\n        type: ''\n    };\n\n    let viewPropOwningType;\n    if( viewProp.srcObjectTypeName ) {\n        let viewPropType = clientMetaModel.getType( viewProp.srcObjectTypeName );\n        viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n    }\n    // For Dcp properties, use intermediate object's type, else use the type of the parent object.\n    var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n\n    operationName = exports.formatOperationName( operationName );\n\n    var sourceObjectUid = uwPropertyService.getSourceObjectUid( viewProp );\n\n    var owningObjectUid = owningObjUid || sourceObjectUid;\n    var modelObject = clientDataModel.getObject( owningObjectUid );\n    if( !modelObject ) {\n        owningObjectUid = clientDataModel.NULL_UID;\n    }\n\n    initialData.lovInput = {\n        owningObject: {\n            uid: owningObjectUid,\n            type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n        },\n        operationName: operationName,\n        boName: objName,\n        propertyValues: {}\n    };\n\n    var modifiedProps = _.union( viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps() );\n\n    if( modifiedProps && modifiedProps.length > 0 ) {\n        for( var prop in modifiedProps ) {\n            if( modifiedProps.hasOwnProperty( prop ) ) {\n                var modifiedPropName = uwPropertyService.getBasePropertyName( modifiedProps[ prop ].name );\n                initialData.lovInput.propertyValues[ modifiedPropName ] = modifiedProps[ prop ].values;\n            }\n        }\n    }\n\n    if( tablePropObject ) {\n        tablePropObject = _.isArray( tablePropObject ) ? tablePropObject : [ tablePropObject ];\n        _.forEach( tablePropObject, function( value, key ) {\n            _.forEach( value, function( nestedValue, nestedKey ) {\n                delete initialData.lovInput.propertyValues[ nestedKey ];\n            } );\n        } );\n    }\n\n    if( contextObject ) {\n        for( var addProp in contextObject ) {\n            initialData.lovInput.propertyValues[ addProp ] = [ contextObject[ addProp ] ];\n        }\n    }\n\n    return initialData;\n};\n\n/**\n * Implementation of LOV Service (these api's are only compatible with Teamcenter 9)\n *\n * @param {module:scripts/services/notifyService} notifySvc -\n *\n * @param {module:js/dateTimeService} dateTimeSvc - SOA's LOV Access service\n *\n * @param {module:soa/kernel/clientDataModel} clientDataModel - SOA's clientDataModel service\n */\nlet exports;\n\n/**\n * Add the 'lovApi' function set object to the given ViewModelProperty\n *\n * @param {ViewModelProperty} viewProp -view model property\n *\n * @param {module:angular~Scope} scope - angular scope for the element\n *\n * @param {ViewModelObject} viewModelObj -view model Object\n *\n * @param {String} owningObjUid - The UID of owning object\n *\n */\nexport let initNativeCellLovApi = function( viewProp, scope, operationName, viewModelObj, owningObjUid ) {\n    viewProp.lovApi = {};\n    //viewProp.isRequired = true;\n    viewProp.lovApi.operationName = operationName;\n    viewProp.lovApi.getInitialValues = function( filterStr, deferred, name, maxResults, lovPageSize,\n        sortPropertyName, sortOrder ) {\n        exports.getInitialValues( filterStr, deferred, viewProp, viewProp.lovApi.operationName, viewModelObj,\n            maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid );\n    };\n\n    viewProp.lovApi.getNextValues = function( deferred ) {\n        exports.getNextValues( deferred, viewProp );\n    };\n\n    viewProp.lovApi.validateLOVValueSelections = function( lovEntries ) {\n        return exports.validateLOVValueSelections( lovEntries, viewProp, viewProp.lovApi.operationName,\n            viewModelObj, owningObjUid );\n    };\n\n    viewProp.owningObjUid = owningObjUid;\n};\n\n/**\n * This operation is invoked to query the data for a property having an LOV attachment. The results returned\n * from the server also take into consideration any filter string that is in the input. This method calls\n * 'getInitialLOVValues' and returns initial set of lov values. This is only compatible with 'Teamcenter 10'\n *\n * @param {filterString} filterString - The filter text for lov's\n * @param {deferred} deferred - $q object to resolve the 'promise' with a an array of LOVEntry objects.\n * @param {ViewModelProperty} viewProp - Property to aceess LOV values for.\n * @param {String} operationName - The operation being performed e.g. Edit, Create, Revise, Save As etc.\n * @param {ViewModelObject} viewModelObj - The view model object which LOV property is defined on.\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\nexport let getInitialValues = function( filterString, deferred, viewProp, operationName, viewModelObj, maxResults,\n    lovPageSize, sortPropertyName, sortOrder, owningObjUid ) {\n    var initialData = createInitialData( viewProp, filterString, assert, operationName, viewModelObj,\n        appCtxService, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid );\n\n    var serviceInput = {\n        initialData: initialData\n    };\n\n    soaSvc.postUnchecked( 'Core-2013-05-LOV', 'getInitialLOVValues', serviceInput ).then( function( responseData ) {\n        //Object.assign( viewProp.searchResults, responseData );\n        //viewProp.searchResults = responseData; // using for LOV getNextLOVValues SOA call\n        //viewProp.lovApi.result = responseData; // using for validateLOVValuesSelections()\n        if( _.isArray( responseData.ServiceData.partialErrors ) ) {\n            //getInitialLOV  returns error when message/error has to be displayed\n            // if errorlevel >1 its legitimate error else it is message\n            for ( const partialError of responseData.ServiceData.partialErrors ) {\n                if(  _.isArray( partialError.errorValues ) ) {\n                    for ( const errorValue of partialError.errorValues ) {\n                        if( errorValue.level > 1 ) {\n                            deferred.reject( responseData.ServiceData.partialErrors );\n                        }\n                    }\n                }\n            }\n        }\n        let lovValues = exports.createLOVEntries( responseData, viewProp.type );\n        deferred.resolve( { responseData, lovValues } );\n    }, function( reason ) {\n        deferred.reject( reason );\n    } );\n};\n\nexport let getListLOVValues = function( list ) {\n    let lovEntries = list;\n    return { lovEntries };\n};\n\n/**\n *\n * @param {*} output\n * @param {*} declViewModel\n */\nexport let processLOVEntries = function( { responseData, lovValues = {} } ) {\n    if( lovValues && lovValues.hasOwnProperty( 'moreValuesExist' ) ) {\n        let moreValuesExist = lovValues.moreValuesExist;\n        let newop = [ ...lovValues ];\n        delete newop.moreValuesExist;\n        return {\n            lovEntries: newop,\n            moreValuesExist,\n            partialErrors: '',\n            level: '',\n            responseData,\n            lovUsage: lovValues.lovUsage\n        };\n    }\n    return {\n        lovEntries: [],\n        partialErrors: lovValues.cause,\n        level: lovValues.level,\n        moreValuesExist: false,\n        responseData,\n        lovUsage: lovValues.lovUsage\n    };\n};\n\nexport let getInitialLOVValues = function( viewModel, dataProviderName ) {\n    let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[ dataProviderName ] : null;\n    const lovInfo = appCtxSvc.getCtx( 'aw.lovInfo' );\n    let vmo;\n    let viewProp;\n    let filterString;\n    let owningObjUid;\n    let operationName;\n    if( dataProvider && dataProvider.resolvedLovConfig ) {\n        const lovConfiguration = dataProvider.resolvedLovConfig;\n        vmo = lovConfiguration.viewModelObj;\n        viewProp = lovConfiguration.viewProp;\n        filterString = lovConfiguration.filterString;\n        owningObjUid = viewProp.owningObjUid;\n        operationName = lovConfiguration.operationName;\n    } else if( lovInfo ) {\n        vmo = lovInfo.ctxLovPropVMO;\n        viewProp = vmo.props[ lovInfo.ctxLovPropName ];\n        filterString = viewProp.filterString;\n        owningObjUid = viewProp.owningObjUid;\n        operationName = vmo.operationName;\n    }\n\n    let deferred = AwPromiseService.instance.defer();\n    getInitialValues( filterString, deferred, viewProp, operationName, vmo, null, null, '', '', owningObjUid );\n    return deferred.promise.then( ( response ) => {\n        const responseBehaviorData = response.responseData && response.responseData.behaviorData;\n        viewProp.lovApi.behaviorData = {\n            dependendProps: responseBehaviorData && responseBehaviorData.dependendProps,\n            style: responseBehaviorData && responseBehaviorData.style\n        };\n        return response;\n    } ).catch( error => error );\n};\n\n/**\n * This operation is invoked after a call to getInitialLOVValues if the moreValuesExist flag is true in the\n * LOVSearchResults output returned from a call to the getInitialLOVValues operation. The operation will\n * retrieve the next set of LOV values.\n *\n * @param {deferred} deferred - promise object\n * @param {ViewModelProperty} viewProp - Lov object value\n * @return {deferred.promise} promise object\n */\nexport let getNextValues = function( viewModel, dataProviderName ) {\n    let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[ dataProviderName ] : null;\n    const lovInfo = appCtxSvc.getCtx( 'aw.lovInfo' );\n    let lovDataInfo = viewModel.lovDataInfo;\n    let vmo;\n    let viewProp;\n    if( dataProvider && dataProvider.resolvedLovConfig ) {\n        const lovConfiguration = dataProvider.resolvedLovConfig;\n        vmo = lovConfiguration.viewModelObj;\n        viewProp = lovConfiguration.viewProp;\n    } else if( lovDataInfo ) {\n        vmo = lovInfo.ctxLovPropVMO;\n        viewProp = vmo.props[ lovInfo.ctxLovPropName ];\n    }\n    let lovEntries = [];\n    if( lovDataInfo && lovDataInfo.responseData ) {\n        var serviceInput = {};\n        serviceInput.lovData = lovDataInfo.responseData.lovData;\n        return soaSvc.post( 'Core-2013-05-LOV', 'getNextLOVValues', serviceInput ).then( responseData => {\n            const lovValues = exports.createLOVEntries( responseData, viewProp.type );\n            return { lovValues, responseData };\n        } );\n    }\n    return Promise.resolve( lovEntries );\n};\n\n/**\n * This is a reusable function to create LOV entries from SOA response\n *\n * @param {responseData} SOA response structure from LOV\n * @param {propertyType} Type of Property\n * @return {lovEntries} Array of LOV entry objects\n */\nexport let createLOVEntries = function( responseData, propertyType ) {\n    var lovEntries = [];\n    var lovValueProp = responseData.behaviorData.columnNames.lovValueProp;\n    var lovDescProp = responseData.behaviorData.columnNames.lovDescrProp;\n    var lovUsage = responseData.behaviorData.lovUsage;\n\n    for( var lovValue in responseData.lovValues ) {\n        if( responseData.lovValues.hasOwnProperty( lovValue ) ) {\n            lovEntries.push( new LOVEntry( responseData.lovValues[ lovValue ], propertyType, lovValueProp,\n                lovDescProp ) );\n        }\n    }\n    // push the moreValuesExist to the lovEntries. if it is true, then call getNextValues ; else not call getNextValues\n    if( responseData.moreValuesExist ) {\n        lovEntries.moreValuesExist = responseData.moreValuesExist;\n    } else {\n        lovEntries.moreValuesExist = false;\n    }\n    lovEntries.lovUsage = 'EXHAUSTIVE_LOV';\n    if( lovUsage === LOV_TYPES.SUGGESTIVE_LOV ) {\n        lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n    }\n\n    // This is Workaround hack which will be removed when Fnd0NameValueDynLOV wil be converted to suggestive\n    //LCS-681145 - Change Fnd0DynLOVNameValuePairs LOV to suggestive\n    if( responseData.lovData && _.isArray( responseData.lovData.lovs ) && responseData.lovData.lovs.length > 0 &&\n    responseData.lovData.lovs[0].type === 'Fnd0NameValueDynLOV' ) {\n        lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n    }\n\n    return lovEntries;\n};\n\n/**\n * This operation can be invoked after selecting a value from the LOV. Use this operation to do additional\n * validation to be done on server such as validating Range value, getting the dependent properties values in\n * case of interdependent LOV (resetting the dependendent property values), Coordinated LOVs ( populating\n * dependent property values ).\n *\n * @param {LovEntry[]} lovEntries - Array of LOV values selected\n *\n * @param {viewProp} viewProp - The property being modified\n *\n * @return {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc\n *\n * @return {ViewModelObject} viewModelObj The object for which property is being modified\n *\n * @param {String} owningObjUid - The UID of owning object\n */\nexport let validateLOVValueSelections = function( lovEntries, viewProp, operationName, viewModelObj, owningObjUid ) {\n    var viewObject = viewModelObj;\n    var contextObject = appCtxService.getCtx( 'InitialLovDataAdditionalProps' );\n    var tablePropObject = appCtxService.getCtx( 'InitialSaveDataAdditionalProps' );\n\n    assert( viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name );\n\n    var lovValueProp = null;\n    if( viewProp.lovApi && viewProp.lovApi.result ) {\n        lovValueProp = viewProp.lovApi.result.behaviorData.columnNames.lovValueProp;\n    }\n    var propName = uwPropertyService.getBasePropertyName( viewProp.propertyName );\n\n    let viewPropOwningType;\n    if( viewProp.srcObjectTypeName ) {\n        let viewPropType = clientMetaModel.getType( viewProp.srcObjectTypeName );\n        viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n    }\n    var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n\n    var serviceInput = {};\n\n    var sourceObjectUid = uwPropertyService.getSourceObjectUid( viewProp );\n\n    var owningObjectUid = owningObjUid || sourceObjectUid;\n    var modelObject = clientDataModel.getObject( owningObjectUid );\n    if( !modelObject ) {\n        owningObjectUid = clientDataModel.NULL_UID;\n    }\n\n    serviceInput.lovInput = {\n        owningObject: {\n            uid: owningObjectUid,\n            type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n        },\n        operationName: operationName,\n        boName: objName,\n        propertyValues: {}\n    };\n\n    serviceInput.propName = propName;\n    serviceInput.uidOfSelectedRows = [];\n    serviceInput.lovInput.propertyValues[ propName ] = [];\n\n    // First add all the selected LOV entries\n    for( var ii = 0; ii < lovEntries.length; ii++ ) {\n        // account for simplified lov format\n        if( 'propInternalValue' in lovEntries[ ii ] ) {\n            serviceInput.lovInput.propertyValues[ propName ]\n                .push( String( lovEntries[ ii ].propInternalValue !== null ? lovEntries[ ii ].propInternalValue :\n                    '' ) );\n        } else if( lovValueProp && lovEntries[ ii ].lovRowValue ) {\n            serviceInput.lovInput.propertyValues[ propName ]\n                .push( String( lovEntries[ ii ].lovRowValue.propInternalValues[ lovValueProp ][ 0 ] ) );\n        }\n        //append selected row uid to fix dynamic LOV defect LCS-351651\n        if( lovEntries[ ii ].lovRowValue && !_.isEmpty( lovEntries[ ii ].lovRowValue.uid ) ) {\n            serviceInput.uidOfSelectedRows.push( String( lovEntries[ ii ].lovRowValue.uid ) );\n        }\n    }\n\n    // Now populate all the other modified properties.\n    var modifiedProps = _.union( viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps() );\n    if( modifiedProps && modifiedProps.length > 0 ) {\n        for( var prop in modifiedProps ) {\n            if( modifiedProps.hasOwnProperty( prop ) ) {\n                var modifiedPropName = uwPropertyService.getBasePropertyName( modifiedProps[ prop ].name );\n                if( modifiedPropName !== propName ) {\n                    serviceInput.lovInput.propertyValues[ modifiedPropName ] = modifiedProps[ prop ].values;\n                }\n            }\n        }\n    }\n\n    if( tablePropObject ) {\n        _.forEach( tablePropObject, function( value, key ) {\n            delete serviceInput.lovInput.propertyValues[ key ];\n        } );\n    }\n\n    if( contextObject ) {\n        for( var addProp in contextObject ) {\n            serviceInput.lovInput.propertyValues[ addProp ] = [ contextObject[ addProp ] ];\n        }\n    }\n    return soaSvc.post( 'Core-2013-05-LOV', 'validateLOVValueSelections', serviceInput ).then(\n        function( responseData ) {\n            var validationResult = new LOVDataValidationResult();\n            validationResult.setValid( responseData.propHasValidValues );\n            validationResult.setViewModelObject( viewModelObj );\n            var updatedValues = responseData.updatedPropValues;\n            for( var propName in responseData.dependentPropNames ) {\n                if( responseData.dependentPropNames.hasOwnProperty( propName ) ) {\n                    var prop = responseData.dependentPropNames[ propName ];\n                    if( updatedValues.propInternalValues.hasOwnProperty( prop ) ) {\n                        validationResult.addUpdatedPropertyValue( prop, updatedValues.propInternalValues[ prop ],\n                            updatedValues.propDisplayValues[ prop ] );\n                    }\n                }\n            }\n            return validationResult;\n        },\n        function( error ) {\n            return error;\n        } );\n};\n\n/**\n * Converts operation names to camel case.\n *\n * @param {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc.\n *\n * @return {String} operationName The operation formatted into camelCase.\n *\n */\nexport let formatOperationName = function( operationName ) {\n    if( operationName.toUpperCase() === 'EDIT' ) {\n        operationName = 'Edit';\n    } else if( operationName.toUpperCase() === 'CREATE' ) {\n        operationName = 'Create';\n    } else if( operationName.toUpperCase() === 'REVISE' ) {\n        operationName = 'Revise';\n    } else if( operationName.toUpperCase() === 'SAVEAS' ) {\n        operationName = 'SaveAs';\n    }\n    return operationName;\n};\n\nexports = {\n    getListLOVValues,\n    initNativeCellLovApi,\n    getInitialValues,\n    getNextValues,\n    createLOVEntries,\n    validateLOVValueSelections,\n    formatOperationName,\n    getInitialLOVValues,\n    processLOVEntries\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
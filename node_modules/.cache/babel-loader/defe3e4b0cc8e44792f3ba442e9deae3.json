{"ast":null,"code":"var _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useLayoutEffect } from 'react';\n/*\n* Function to calulate the overflown commands in the commandbar/toolbar\n*/\n\nconst calculateOverflow = _ref => {\n  let {\n    getData,\n    dispatch\n  } = _ref;\n  return entries => {\n    let overflownCommands = { ...getData()._overflownCommands\n    };\n    let overCmdsUpdated = null;\n    entries.forEach(entry => {\n      if (entry && entry.target.childNodes && entry.target.childNodes.length) {\n        const id = entry.target.childNodes[0].attributes['command-id'].nodeValue;\n\n        if (entry.isIntersecting === false && !overflownCommands[id]) {\n          overflownCommands[id] = true;\n          overCmdsUpdated = true;\n        } else if (entry.isIntersecting && overflownCommands[id]) {\n          delete overflownCommands[id];\n          overCmdsUpdated = true;\n        }\n      }\n    });\n\n    if (overCmdsUpdated) {\n      dispatch({\n        path: 'data._overflownCommands',\n        value: overflownCommands\n      });\n    }\n  };\n};\n/*\n* Attach observers to command bars and command elements\n*/\n\n\nconst useCommandOverflow = (_ref2, _ref3, _ref4) => {\n  _s3();\n\n  _s();\n\n  let {\n    data,\n    getData,\n    actions,\n    dispatch\n  } = _ref2;\n  let {\n    commandObserver,\n    overflow,\n    alignment\n  } = _ref3;\n  let {\n    elementRefList\n  } = _ref4;\n  let overflowEnabledForCmdbar = data._swfCommandBarComponent; //Overflow for horizontal commandBar is disabled by default\n  //Do NOT attach observer for Horizontal cmdBar if not explicitly enabled\n\n  if (overflowEnabledForCmdbar && (alignment === 'HORIZONTAL' || !alignment) && overflow !== true) {\n    overflowEnabledForCmdbar = false;\n  }\n\n  if (overflowEnabledForCmdbar || data._swfToolBarComponent && overflow && overflow !== 'false') {\n    //eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(() => {\n      const element = elementRefList.get('commandBarMain').current;\n      const observer = new IntersectionObserver(calculateOverflow({\n        getData,\n        dispatch\n      }), {\n        root: element,\n        threshold: 0.1\n      });\n      dispatch({\n        path: 'data._observer',\n        value: observer\n      });\n      return () => {\n        const {\n          _observer\n        } = getData() || {};\n        _observer && _observer.disconnect();\n      };\n    }, []);\n  }\n\n  if (data._swfCommandComponent && commandObserver) {\n    //eslint-disable-next-line react-hooks/rules-of-hooks\n    useLayoutEffect(() => {\n      commandObserver.observe(actions.openCommandPopup.reference.current);\n      return () => {\n        commandObserver.unobserve(actions.openCommandPopup.reference.current);\n      };\n    }, []);\n  }\n};\n\n_s3(useCommandOverflow, \"MfQzVb+S69pSHKMDKIsojbuzFrw=\");\n\n_s(useCommandOverflow, \"MfQzVb+S69pSHKMDKIsojbuzFrw=\");\n\nexport const useCommands = function (viewModel) {\n  _s4();\n\n  _s2();\n\n  if (viewModel.data._swfToolBarComponent || viewModel.data._swfCommandBarComponent || viewModel.data._swfCommandComponent) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    } // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n    useCommandOverflow(viewModel, ...args);\n  }\n};\n\n_s4(useCommands, \"sh0Dbu9TtaqXjXbcEYITmXJo1+4=\", false, function () {\n  return [useCommandOverflow];\n});\n\n_s2(useCommands, \"sh0Dbu9TtaqXjXbcEYITmXJo1+4=\", false, function () {\n  return [useCommandOverflow];\n});\n\nexport default {\n  useCommands\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/commandBarUtils.js"],"names":["calculateOverflow","dispatch","entries","overflownCommands","getData","_overflownCommands","overCmdsUpdated","entry","id","path","value","useCommandOverflow","alignment","elementRefList","overflowEnabledForCmdbar","data","overflow","useEffect","element","observer","root","threshold","_observer","useLayoutEffect","commandObserver","actions","useCommands","args","viewModel"],"mappings":"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","sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\n\n/*\n* Function to calulate the overflown commands in the commandbar/toolbar\n*/\nconst calculateOverflow = ( { getData, dispatch } ) => {\n    return ( entries ) => {\n        let overflownCommands = { ...getData()._overflownCommands };\n        let overCmdsUpdated = null;\n        entries.forEach( entry => {\n            if( entry && entry.target.childNodes && entry.target.childNodes.length ) {\n                const id = entry.target.childNodes[ 0 ].attributes[ 'command-id' ].nodeValue;\n\n                if( entry.isIntersecting === false && !overflownCommands[ id ] ) {\n                    overflownCommands[ id ] = true;\n                    overCmdsUpdated = true;\n                } else if( entry.isIntersecting && overflownCommands[ id ] ) {\n                    delete overflownCommands[ id ];\n                    overCmdsUpdated = true;\n                }\n            }\n        } );\n        if( overCmdsUpdated ) {\n            dispatch( { path: 'data._overflownCommands', value: overflownCommands } );\n        }\n    };\n};\n\n/*\n* Attach observers to command bars and command elements\n*/\nconst useCommandOverflow = ( { data, getData, actions, dispatch }, { commandObserver, overflow, alignment }, { elementRefList } ) => {\n    let overflowEnabledForCmdbar = data._swfCommandBarComponent;\n    //Overflow for horizontal commandBar is disabled by default\n    //Do NOT attach observer for Horizontal cmdBar if not explicitly enabled\n    if( overflowEnabledForCmdbar && ( alignment === 'HORIZONTAL' || !alignment ) && overflow !== true ) {\n        overflowEnabledForCmdbar = false;\n    }\n\n    if( overflowEnabledForCmdbar || data._swfToolBarComponent && overflow && overflow !== 'false' ) {\n        //eslint-disable-next-line react-hooks/rules-of-hooks\n        useEffect( () => {\n            const element = elementRefList.get( 'commandBarMain' ).current;\n            const observer = new IntersectionObserver(\n                calculateOverflow( { getData, dispatch } ),\n                {\n                    root: element,\n                    threshold: 0.1\n                }\n            );\n            dispatch( { path: 'data._observer', value: observer } );\n            return () => {\n                const { _observer } = getData() || {};\n                _observer && _observer.disconnect();\n            };\n        }, [] );\n    }\n\n    if( data._swfCommandComponent && commandObserver ) {\n        //eslint-disable-next-line react-hooks/rules-of-hooks\n        useLayoutEffect( () => {\n            commandObserver.observe( actions.openCommandPopup.reference.current );\n            return () => {\n                commandObserver.unobserve( actions.openCommandPopup.reference.current );\n            };\n        }, [] );\n    }\n};\n\nexport const useCommands = ( viewModel, ...args ) => {\n    if( viewModel.data._swfToolBarComponent || viewModel.data._swfCommandBarComponent || viewModel.data._swfCommandComponent ) {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useCommandOverflow( viewModel, ...args );\n    }\n};\n\nexport default {\n    useCommands\n};\n"]},"metadata":{},"sourceType":"module"}
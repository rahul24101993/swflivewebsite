{"ast":null,"code":"/* eslint-disable no-eval */\n// Copyright (c) 2020 Siemens\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected.\n *\n * @module js/notyErrorService\n */\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport cdm from 'soa/kernel/clientDataModel';\nimport { evalExpression } from 'js/serviceUtils';\nvar exports = {};\nexport let getLocalizedMessage = function (messageDefn, messageData, declViewModel) {\n  var errorMessages = [];\n  let localizedMessage;\n  errorMessages.push('<div class=\"aw-jswidgets-notyContainer\">');\n  const messageParamMessage = getMessageParamMessage(messageData.context, messageData.params, declViewModel.i18n[messageDefn.message.messageParam.name]);\n\n  if (messageParamMessage) {\n    errorMessages.push(messageParamMessage);\n  }\n\n  _.forEach(messageData.partialErrors, function (partialError) {\n    if (messageDefn.message.errorValues) {\n      _.forEach(partialError.errorValues, function (errorValue) {\n        if (messageDefn.message.errorValues.condition) {\n          if (evalExpression(messageDefn.message.errorValues.condition, [], [], true)) {\n            errorMessages = populateErrorMessage(partialError, errorValue.message, errorMessages);\n          }\n        } else {\n          errorMessages = populateErrorMessage(partialError, errorValue.message, errorMessages);\n        }\n\n        if (messageDefn.message.partialError) {\n          if (messageDefn.message.partialError.condition) {\n            if (evalExpression(messageDefn.message.errorValues.condition, [], [], true)) {\n              errorMessages = populateErrorMessage(partialError, declViewModel.i18n[messageDefn.message.partialError.name], errorMessages);\n            }\n          } else {\n            errorMessages = populateErrorMessage(partialError, declViewModel.i18n[messageDefn.message.partialError.name], errorMessages);\n          }\n        }\n      });\n    } else {\n      errorMessages = populateErrorMessage(partialError, declViewModel.i18n[messageDefn.message.partialError.name], errorMessages);\n    }\n  });\n\n  errorMessages.push('</div>');\n\n  if (!_.isEmpty(errorMessages)) {\n    localizedMessage = errorMessages.join('');\n  }\n\n  return localizedMessage;\n};\n\nconst populateErrorMessage = function (partialError, message, errorMessages) {\n  const partialErrorLocalizedMessage = getPartialErrorMessage(partialError, message);\n\n  if (partialErrorLocalizedMessage) {\n    errorMessages.push(partialErrorLocalizedMessage);\n  }\n\n  return errorMessages;\n};\n\nconst getMessageParamMessage = function (context, params, message) {\n  let localizedMessage = declUtils.applyMessageParams(message ? message : '', params, context);\n  return '<div>' + localizedMessage + '</div>';\n};\n\nconst getPartialErrorMessage = function (partialError, message) {\n  if (partialError && partialError.uid) {\n    var modelObject = cdm.getObject(partialError.uid);\n\n    if (modelObject.props) {\n      var objectName = modelObject.props.object_string.uiValues[0];\n      var errorMsgs = [];\n      var reason = '';\n\n      _.forEach(partialError.errorValues, function (errorValue) {\n        if (errorValue) {\n          errorMsgs.push(errorValue.message);\n        }\n      });\n\n      if (!_.isEmpty(errorMsgs)) {\n        reason = errorMsgs.join('');\n      }\n\n      let localizedMessage = declUtils.applyMessageParams(message, ['{{objectName}}', '{{reason}}'], {\n        objectName: objectName,\n        reason: reason\n      });\n      return '<div>' + localizedMessage + '</div>';\n    }\n  }\n\n  return undefined;\n};\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\n\nexports = {\n  getLocalizedMessage\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/notyErrorService.js"],"names":["exports","getLocalizedMessage","errorMessages","messageParamMessage","getMessageParamMessage","messageData","declViewModel","messageDefn","_","partialError","evalExpression","populateErrorMessage","errorValue","localizedMessage","partialErrorLocalizedMessage","getPartialErrorMessage","declUtils","message","modelObject","cdm","objectName","errorMsgs","reason"],"mappings":"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","sourcesContent":["/* eslint-disable no-eval */\n// Copyright (c) 2020 Siemens\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected.\n *\n * @module js/notyErrorService\n */\n\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport cdm from 'soa/kernel/clientDataModel';\nimport { evalExpression } from 'js/serviceUtils';\n\nvar exports = {};\n\nexport let getLocalizedMessage = function( messageDefn, messageData, declViewModel ) {\n    var errorMessages = [];\n    let localizedMessage;\n\n    errorMessages.push( '<div class=\"aw-jswidgets-notyContainer\">' );\n\n    const messageParamMessage = getMessageParamMessage( messageData.context, messageData.params, declViewModel.i18n[ messageDefn.message.messageParam.name ] );\n    if( messageParamMessage ) {\n        errorMessages.push( messageParamMessage );\n    }\n\n    _.forEach( messageData.partialErrors, function( partialError ) {\n        if( messageDefn.message.errorValues ) {\n            _.forEach( partialError.errorValues, function( errorValue ) {\n                if( messageDefn.message.errorValues.condition ) {\n                    if( evalExpression( messageDefn.message.errorValues.condition, [], [], true ) ) {\n                        errorMessages = populateErrorMessage( partialError, errorValue.message, errorMessages );\n                    }\n                } else {\n                    errorMessages = populateErrorMessage( partialError, errorValue.message, errorMessages );\n                }\n\n                if( messageDefn.message.partialError ) {\n                    if( messageDefn.message.partialError.condition ) {\n                        if( evalExpression( messageDefn.message.errorValues.condition, [], [], true ) ) {\n                            errorMessages = populateErrorMessage( partialError, declViewModel.i18n[ messageDefn.message.partialError.name ], errorMessages );\n                        }\n                    } else {\n                        errorMessages = populateErrorMessage( partialError, declViewModel.i18n[ messageDefn.message.partialError.name ], errorMessages );\n                    }\n                }\n            } );\n        } else {\n            errorMessages = populateErrorMessage( partialError, declViewModel.i18n[ messageDefn.message.partialError.name ], errorMessages );\n        }\n    } );\n\n    errorMessages.push( '</div>' );\n\n    if( !_.isEmpty( errorMessages ) ) {\n        localizedMessage = errorMessages.join( '' );\n    }\n\n    return localizedMessage;\n};\n\nconst populateErrorMessage = function( partialError, message, errorMessages ) {\n    const partialErrorLocalizedMessage = getPartialErrorMessage( partialError, message );\n    if( partialErrorLocalizedMessage ) {\n        errorMessages.push( partialErrorLocalizedMessage );\n    }\n    return errorMessages;\n};\n\nconst getMessageParamMessage = function( context, params, message ) {\n    let localizedMessage = declUtils.applyMessageParams( message ? message : '', params, context );\n    return '<div>' + localizedMessage + '</div>';\n};\n\nconst getPartialErrorMessage = function( partialError, message ) {\n    if( partialError && partialError.uid ) {\n        var modelObject = cdm.getObject( partialError.uid );\n        if( modelObject.props ) {\n            var objectName = modelObject.props.object_string.uiValues[ 0 ];\n            var errorMsgs = [];\n            var reason = '';\n            _.forEach( partialError.errorValues, function( errorValue ) {\n                if( errorValue ) {\n                    errorMsgs.push( errorValue.message );\n                }\n            } );\n\n            if( !_.isEmpty( errorMsgs ) ) {\n                reason = errorMsgs.join( '' );\n            }\n\n            let localizedMessage = declUtils.applyMessageParams( message, [\n                '{{objectName}}', '{{reason}}'\n            ], {\n                objectName: objectName,\n                reason: reason\n            } );\n\n            return '<div>' + localizedMessage + '</div>';\n        }\n    }\n    return undefined;\n};\n\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nexports = {\n    getLocalizedMessage\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
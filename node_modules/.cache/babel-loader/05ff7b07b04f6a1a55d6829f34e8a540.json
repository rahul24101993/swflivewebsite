{"ast":null,"code":"/* eslint-disable max-lines */ // Copyright (c) 2021 Siemens\n/* eslint-disable require-jsdoc */ /* eslint-disable complexity */ /**\n * This is the primary service used to create, test and manage the internal properties of ViewModelProperty Objects used\n * throughout the UniversalWidget (et al.) areas of AW. Views can create custom view models by creating a\n * ViewModelObject and adding ViewModelProperty Objects created by this service to it.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/uwPropertyService\n */import AwPromiseService from'js/awPromiseService';import dateTimeSvc from'js/dateTimeService';import localeSvc from'js/localeService';import clientDataModel from'soa/kernel/clientDataModel';import dmSvc from'soa/dataManagementService';import _ from'lodash';import declUtils from'js/declUtils';import uwDirectiveDateTimeSvc from'js/uwDirectiveDateTimeService';import eventBus from'js/eventBus';import{propTypeDate,updateDateApi,setDateTimeValues,getDBValueForDate,getUIValueForDate,clearDateTimeValues}from'js/dateTimeProcessingService';/**\n * Editable State of the property object\n *\n * @private\n */var PROP_EDITABLE='editable';/**\n * Value of the property object\n *\n * @private\n */var PROP_VALUE='value';/**\n * Validation error of property object\n *\n * @private\n */var PROP_ERROR='error';/**\n * Required state of property object\n *\n * @private\n */var PROP_REQUIRED='required';/**\n * Overlay type 'viewModelPropertyOverlay', which defines that the overlay has real data(i.e\n * IViewModelProperty).\n *\n * @private\n */var VIEW_MODEL_PROPERTY='viewModelPropertyOverlay';/**\n * Overlay type 'widgetOverlay', which defines that the overlay has widget data.\n *\n * @private\n */var WIDGET='widgetOverlay';/**\n * Integer minimum value, which is equal to Java Integer's minimum value\n */var _integerMinValue=-2147483648;/**\n * Integer maximum value, which is equal to Java Integer's maximum value\n */var _integerMaxValue=2147483647;/**\n * Cache document ng element to retrieve the scope and trigger digest cycle.\n *\n * @private\n */ /** revisitme yogesh\n   * Hint: we may not be required this\n var _docNgElement = ngModule.element( document.body );\n  */ /**\n * Cache $q promise service.\n *\n * @private\n */ /**\n * {dateTimeService} Cached reference to injected AngularJS service.\n *\n * @private\n */ /**\n * {localeService} Cached reference to injected AngularJS service.\n *\n * @private\n */ /**\n * {clientDataModel} Cached reference to injected AngularJS service.\n *\n * @private\n */ /**\n * {dataManagementService} Cached reference to injected AngularJS service.\n *\n * @private\n */ /**\n * {$rootScope} Cached reference to the 'root' scope associated with the top level (i.e. document) DOM Element.\n */var _documentScope=null;/**\n * {StringMap} Cached 'basic' locale text bundle.\n */var _localTextBundle;/**\n * {Array} Promise that need to be resolved when debounced function executes eventually\n */var _pingDeferred=null;/**\n * @param {String} stringValue -\n *\n * @return {boolean} TRUE if given value is not NULL and equals 'true', 'TRUE' or '1'.\n */var _isPropertyValueTrue=function(stringValue){return stringValue&&stringValue!=='0'&&(String(stringValue).toUpperCase()==='TRUE'||stringValue==='1');};/**\n * Set locale specific string used for array UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */function _setArrayText(vmProp,localTextBundle){if(!vmProp.isRequired&&(_.isUndefined(vmProp.propertyRequiredText)||vmProp.propertyRequiredText.length===0)){vmProp.propertyRequiredText=localTextBundle.ARRAY_PLACEHOLDER_TEXT;}// Set array button's tool tips\nvmProp.moveUpButtonTitle=localTextBundle.MOVE_UP_BUTTON_TITLE;vmProp.moveDownButtonTitle=localTextBundle.MOVE_DOWN_BUTTON_TITLE;vmProp.removeButtonTitle=localTextBundle.REMOVE_BUTTON_TITLE;}// _setArrayText\n/**\n * Set locale specific string used for radio button UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */function _setRadioText(vmProp,localTextBundle){if(!vmProp.propertyRadioTrueText){vmProp.propertyRadioTrueText=localTextBundle.RADIO_TRUE;}if(!vmProp.propertyRadioFalseText){vmProp.propertyRadioFalseText=localTextBundle.RADIO_FALSE;}/**\n     * Handles setting of custom labels and vertical alignment attributes when directives are used natively\n     */if(vmProp.radioBtnApi){if(vmProp.radioBtnApi.customTrueLabel){vmProp.propertyRadioTrueText=vmProp.radioBtnApi.customTrueLabel;}if(vmProp.radioBtnApi.customFalseLabel){vmProp.propertyRadioFalseText=vmProp.radioBtnApi.customFalseLabel;}if(vmProp.radioBtnApi.vertical){vmProp.vertical=vmProp.radioBtnApi.vertical;}}}/**\n * Helper function to avoid multiple calls to load objects by using lodash debounce\n */var _pingLoadObjects=_.debounce(function(uidsArray,vmProp){dmSvc.loadObjects(uidsArray).then(function(){exports.setValue(vmProp,vmProp.dbValue);if(vmProp.propApi&&vmProp.propApi.fireValueChangeEvent){vmProp.propApi.fireValueChangeEvent();}if(_pingDeferred){_pingDeferred.resolve();_pingDeferred=null;}},function(error){if(vmProp.propApi&&vmProp.propApi.fireUIValidationErrorEvent){vmProp.uiValue='';vmProp.error=error.message;vmProp.clientValidationError=error.message;vmProp.hasServerValidationError=true;vmProp.propApi.fireUIValidationErrorEvent(error.message);}if(_pingDeferred){_pingDeferred.reject(error);_pingDeferred=null;}});},250);/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n * <P>\n * Note: The properties shown below in the 'members' section are defined, understood and created by this class\n * constructor.\n * <P>\n * Note: The properties shown below in the 'properties' section are marked as '(Optional)' and are defined and\n * understood, but not created by this class constructor. The are defined as needed by the various APIs of the\n * uwPropertyService.\n *\n * @class ViewModelProperty\n *\n * @memberof module:js/uwPropertyService\n *\n * @param {String} propertyName - The name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - User displayable name of the property\n * @param {String} dataType - Data type of the property\n * @param {Array} dbValue - Real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValuesIn - Display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n *\n * @property {String} inputType - (Optional) input type\n *\n * @property {Object} sourceObjectLastSavedDate - (Optional) source object last saved date\n *\n * @property {String} propertyRadioTrueText - (Optional) Used for boolean Radio button 'true' label\n *\n * @property {String} propertyRadioFalseText - (Optional) Used for boolean Radio button 'false' label\n *\n * @property {boolean} vertical - (Optional) Used for boolean radio button. TRUE to show the layout of the radio\n *           button vertically. FALSE for horizontal layout.\n *\n * @property {ObjectArray} displayValsModel - (Optional) This is only used for arrays so that we can maintain\n *           the selection of the rows in array widget.\n *\n * @property {String} parentUid - (Optional) This is the UID of the original IModelObject (in the client data\n *           model cache) that was used to originate this ViewModelProperty.\n *\n * @property {Object} newValue - (Optional) new value\n *\n * @property {Object} propApi - (Optional) property API\n *\n * @property {Object} oldValue - (Optional) old value\n *\n * @property {ObjectArray} oldValues - (Optional) old values\n *\n * @property {String} propertyRequiredText - (Optional) Localized text seen as the placeholder text in a field\n *           when the property is 'Required'.\n *\n * @property {Number} maxLength - (Optional) If not equal to '-1' or '0', this parameter specifies the maximum\n *           number of characters allowed in a string type property.\n *\n * @property {Number} numberOfCharacters - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of characters in a string type property.\n *\n * @property {Number} numberOfLines - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of lines allowed in a property.\n *\n * @property {String} moveUpButtonTitle - (Optional) Localized title for 'move-up' button in array widget.\n *\n * @property {String} moveDownButtonTitle - (Optional) Localized title for 'move-down' button in array widget.\n *\n * @property {String} removeButtonTitle - (Optional) Localized title for 'remove' button used only for array\n *           widget.\n *\n * @property {String} referenceTypeName - (Optional) reference type name\n *\n * @property {String} clientValidationError - (Optional) client validation error\n *\n * @property {String} hasServerValidationError - (Optional) has server validation error?\n *\n * @property {boolean} hasLov - (Optional) TRUE if the property has a specific list of values associated with\n *           it.\n *\n * @property {String} renderingHint - (Optional) Depending on the type, this string indicates some variation in\n *           how the property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include\n *           'radiobutton', 'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label',\n *           'textbox', 'textfield', 'textarea', 'longtext').\n *\n * @property {boolean} autofocus - (Optional) auto focus?\n *\n * @property {boolean} dirty - (Optional) TRUE if the value of the property has changed (been edited) since it\n *           was initially displayed.\n *\n * @property {Number} maxRowCount - (Optional) Used only for array widget. If != -1, then the array widget will\n *           only show the scroll bar after max row count is reached.\n *\n * @property {StringArray} newDisplayValues - (Optional) new display values\n *\n * @property {Object} propertyDescriptor - (Optional) property descriptor\n *\n * @property {boolean} initialize - (Optional) initialize?\n */var ViewModelProperty=function(propertyName,propertyDisplayName,dataType,dbValue,displayValuesIn){// eslint-disable-line complexity\nvar vmProp=this;var displayValuesFinal=displayValuesIn||[];/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyName\n     *\n     * {String} Internal name of the property.\n     */vmProp.propertyName=propertyName;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyDisplayName\n     *\n     * {String} User displayable name of the property (a.k.a. the property's 'label').\n     */vmProp.propertyDisplayName=propertyDisplayName;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property type\n     *\n     * {String} Data type of the property. Valid values are: 'CHAR', 'DATE', 'DOUBLE', 'FLOAT', 'INTEGER',\n     * 'BOOLEAN', 'SHORT', 'STRING' & 'OBJECT'.\n     */vmProp.type=dataType;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property dbValue\n     *\n     * {Object} The internal (database) representation of the property's value.\n     * <P>\n     * Note: For 'DATE' type properties, the 'dbValueIn' is assumed to be of type 'double' and represents the\n     * number of milliseconds since UNIX 'epoch' (January 1, 1970 00:00:00 GMT).\n     */vmProp.dbValue=dbValue;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property displayValues\n     *\n     * {StringArray} Array of strings representing the current user displayable value(s) of the property.\n     */vmProp.displayValues=displayValuesFinal;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isNull\n     *\n     * {boolean} TRUE if the current property value is 'no value'. FALSE if the value is valid as is.\n     * <P>\n     * Note: This option is used in cases when the property's value has not been set yet but that there is no\n     * way to represent this state in a simple string (e.g. Is the string 'empty' or not yet set? Is the 'empty'\n     * string an indication of an integer value of '0'?).\n     */vmProp.isNull=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */vmProp.editable=true;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isEnabled\n     *\n     * {boolean} TRUE if the property's value should be shown normally and (if also editable) react to user\n     * input. FALSE if the property's value should be shown 'greyed out' and not react to user input (even if\n     * editable).\n     */vmProp.isEnabled=true;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isRichText\n     *\n     * {boolean} TRUE if the string value of the property is in HTML format and should be displayed using HTML\n     * formatting rules and edited with the 'rich text' editor.\n     */vmProp.isRichText=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isRequired\n     *\n     * {boolean} TRUE if the property's value is required to successfully complete some operation that uses it.\n     * FALSE if the property's value is optional.\n     */vmProp.isRequired=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isLocalizable\n     *\n     * {boolean} TRUE if the property value's UI should include the option to allow any user entered value to be\n     * converted from local language (as entered) into some other system language. Note: The UI necessary for\n     * translating the value is not currently supported in Active Workspace 2.4.\n     */vmProp.isLocalizable=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isDisplayable\n     *\n     * {boolean} is displayable?\n     */vmProp.isDisplayable=true;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isAutoAssignable\n     *\n     * {boolean} TRUE if the property's value can/should be assigned automatically by Teamcenter. FALSE if the\n     * property's value is not normally assigned/controlled by Teamcenter.\n     * <P>\n     * Note: The UI necessary for assigning this value is not currently supported in Active Workspace 2.4.\n     */vmProp.isAutoAssignable=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property hasInitialValue\n     *\n     * {boolean} has initial value?\n     */vmProp.hasInitialValue=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isArray\n     *\n     * {boolean} TRUE if the property can have more than one value in an ordered list. FALSE if the property can\n     * have only a single value.\n     * <P>\n     * Note: The UI necessary for displaying/editing the multiple value is not currently supported in Active\n     * Workspace 2.4.\n     */vmProp.isArray=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property valueUpdated\n     *\n     * {boolean} value updated?\n     */vmProp.valueUpdated=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property displayValueUpdated\n     *\n     * {boolean} display value updated?\n     */vmProp.displayValueUpdated=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editableInViewModel\n     *\n     * {boolean} editable in view model?\n     */vmProp.editableInViewModel=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isPropertyModifiable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */vmProp.isPropertyModifiable=true;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isEditable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */vmProp.isEditable=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property arrayLength\n     *\n     * {Number} array length\n     */vmProp.arrayLength=-1;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property error\n     *\n     * {String} The message that should be displayed when some aspect of the property's value is not correct.\n     * This value must be 'null' or an empty string to not have the error be displayed.\n     */vmProp.error=null;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyLabelDisplay\n     *\n     * {String} property label display\n     * empty by default\n     * see declReact/viewModelService.js for precedence\n     */vmProp.propertyLabelDisplay='';/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editLayoutSide\n     *\n     * {boolean} edit layout side\n     */vmProp.editLayoutSide=false;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property uiValue\n     *\n     * {String} (Derived) A 'non-null' string containing comma separated values as specified in the\n     * 'displayValuesIn' parameter given in the constructor.\n     */vmProp.uiValue=exports.getUiValue(displayValuesFinal);/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property overlayType\n     *\n     * {String} overlay type\n     */vmProp.overlayType=VIEW_MODEL_PROPERTY;/**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property value\n     *\n     * {Object} database value\n     */vmProp.value=_.cloneDeep(dbValue);// for the purposes of lovs with initial values, we are expecting prevDisplayValue\n// to be same as uiOriginalValue. This dependency is a bit of a historical accident\n// that needs to be addressed as part of a vmProp re-organization.\n// for now, re-introducing the intialization of this param.\nvmProp.prevDisplayValues=displayValuesFinal;/**\n     * @private\n     *\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property dateApi\n     *\n     * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n     * is created by a Universal Widget and of type \"DATE\".\n     *\n     * @property dateApi.isDateEnabled\n     *\n     * {boolean} TRUE if the \"DATE\" type Universal Widget should display a date field.\n     *\n     * @property dateApi.isTimeEnabled\n     *\n     * {boolean} TRUE if the \"DATE\" type Universal Widget should display a time field.\n     */vmProp.dateApi={isDateEnabled:true,isTimeEnabled:true};/**\n     * @private\n     *\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property radioBtnApi\n     *\n     * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n     * is created by a Universal Widget and of a type displayed as a groupd of 'radio buttons'.\n     */vmProp.radioBtnApi={};/**\n     * -----------------------------------------------------------------------<BR>\n     * -----------------------------------------------------------------------<BR>\n     * Finish initialization of class properties <BR>\n     * -----------------------------------------------------------------------<BR>\n     * -----------------------------------------------------------------------<BR>\n     */ /**\n     */var vmPropType=vmProp.type;if(vmPropType==='STRING'||vmPropType==='STRINGARRAY'||vmPropType==='CHAR'){vmProp.inputType='text';}else if(vmPropType==='OBJECT'){vmProp.dbValues=[vmProp.dbValue];}else if(vmPropType==='INTEGER'||vmPropType==='INTEGERARRAY'){if(dbValue){if(_.isString(dbValue)){vmProp.dbValue=Number(dbValue);vmProp.value=vmProp.dbValue;}else if(_.isArray(dbValue)){var doubleDbValues=[];for(var l=0;l<dbValue.length;l++){if(isFinite(dbValue[l])){doubleDbValues.push(Number(dbValue[l]));}else if(dbValue[l]===''){doubleDbValues.push(dbValue[l]);}}vmProp.dbValue=doubleDbValues;vmProp.value=_.cloneDeep(doubleDbValues);}else{vmProp.dbValue=dbValue;vmProp.value=vmProp.dbValue;}}}else if(vmPropType==='BOOLEAN'||vmPropType==='BOOLEANARRAY'){if(declUtils.isNil(dbValue)){vmProp.dbValue=null;vmProp.value=null;// Note: If the server had no opinion on this boolean, neither does the 'value' property.\n}else if(_.isString(dbValue)){vmProp.dbValue=_isPropertyValueTrue(vmProp.dbValue);vmProp.value=vmProp.dbValue;}else if(_.isArray(dbValue)){var booleanDbValues=[];for(var k=0;k<dbValue.length;k++){booleanDbValues[k]=_isPropertyValueTrue(dbValue[k]);}vmProp.dbValue=booleanDbValues;vmProp.value=_.cloneDeep(booleanDbValues);}if(_localTextBundle){_setRadioText(vmProp,_localTextBundle);}else{localeSvc.getTextPromise().then(function(localTextBundle){_localTextBundle=localTextBundle;_setRadioText(vmProp,_localTextBundle);});}}else if(vmPropType==='DATE'||vmPropType==='DATEARRAY'){if(_.isString(dbValue)){vmProp.dbValue=new Date(dbValue).getTime();vmProp.value=vmProp.dbValue;}else if(_.isNumber(dbValue)){if(dbValue!==0){vmProp.dbValue=new Date(dbValue).getTime();vmProp.value=vmProp.dbValue;}}else if(_.isArray(dbValue)){var dateDbValues=[];for(var j=0;j<dbValue.length;j++){dateDbValues[j]=new Date(dbValue[j]).getTime();}vmProp.dbValue=dateDbValues;vmProp.value=_.cloneDeep(dateDbValues);}}else if(vmPropType==='DOUBLE'||vmPropType==='DOUBLEARRAY'){if(dbValue){if(_.isString(dbValue)){vmProp.dbValue=Number(dbValue);vmProp.value=vmProp.dbValue;}else if(_.isArray(dbValue)){var doubleDbValues1=[];for(var i=0;i<dbValue.length;i++){if(dbValue[i]){doubleDbValues1.push(Number(dbValue[i]));}else if(dbValue[i]===''){doubleDbValues1.push(dbValue[i]);}}vmProp.dbValue=doubleDbValues1;vmProp.value=_.cloneDeep(doubleDbValues1);}else if(dbValue){vmProp.dbValue=dbValue;vmProp.value=vmProp.dbValue;}}}};/**\n * @param {StringArray} uiValues - UI/display value array\n * @returns {String} UI value\n */export let getUiValue=function(uiValues){if(!uiValues||uiValues.length===0){return'';}if(uiValues.length>1){var uiValue=uiValues[0];for(var ndx=1;ndx<uiValues.length&&ndx<4;ndx++){uiValue+=', '+uiValues[ndx];}if(ndx<uiValues.length){uiValue+=', ...';}return uiValue;}return uiValues[0];};/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n *\n * @param {String} propertyName - the name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - user displayable name of the property\n * @param {String} dataType - data type of the property\n * @param {Object} dbValue - real value of the property. The internal (database) representation of the\n *            property's value.\n * @param {StringArray} displayValuesIn - display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n */export let createViewModelProperty=function(propertyName,propertyDisplayName,dataType,dbValue,displayValuesIn){return new ViewModelProperty(propertyName,propertyDisplayName,dataType,dbValue,displayValuesIn);};/**\n * Update the model data. The view model should use this method to update property data\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n * @param {Boolean} isNull - is the property value null\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n * @param {Boolean} isModifiable - TRUE if the property is modifiable\n * @param {Object} sourceObjectLastSavedDate - last saved date of source object\n */export let updateModelData=function(vmProp,value,displayValues,isNull,isEditable,isModifiable,sourceObjectLastSavedDate){var displayValuesFinal=displayValues===null?[]:displayValues;vmProp.displayValues=displayValuesFinal;vmProp.isNull=isNull;vmProp.editable=isEditable;vmProp.isPropertyModifiable=isModifiable;vmProp.uiValue=exports.getUiValue(displayValuesFinal);vmProp.sourceObjectLastSavedDate=sourceObjectLastSavedDate||vmProp.sourceObjectLastSavedDate;if(_.isArray(value)&&!vmProp.isArray){vmProp.value=value.slice(0);}else{vmProp.value=value;}if(vmProp.prevDisplayValues){vmProp.prevDisplayValues=_.clone(vmProp.displayValues);}if(vmProp.uiValues){vmProp.uiValues=_.clone(vmProp.displayValues);}if(vmProp.isArray){vmProp.displayValsModel=[];for(var i=0;i<vmProp.displayValues.length;i++){vmProp.displayValsModel.push({displayValue:vmProp.displayValues[i],selected:false,isInEditMode:false});}}if(!exports.isModified(vmProp)){vmProp.dbValue=_.cloneDeep(value);}};/**\n * Copy the model data. The view model should use this method to copy model data\n *\n * @param {ViewModelProperty} targetProperty - ViewModelProperty object that will be updated.\n * @param {ViewModelProperty} updatedProperty - ViewModelProperty that has the updated information.\n */export let copyModelData=function(targetProperty,updatedProperty){exports.updateModelData(targetProperty,updatedProperty.value,updatedProperty.displayValues,updatedProperty.isNull,updatedProperty.editable,updatedProperty.isPropertyModifiable,updatedProperty.sourceObjectLastSavedDate);if(updatedProperty.dbValues&&updatedProperty.dbValues.length>0){targetProperty.dbValues=updatedProperty.dbValues.slice(0);}else{targetProperty.dbValues=[];}};/**\n * Set's the parent object uid in view model property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty\n * @param {String} sourceObjectUid - source object UID\n */export let setSourceObjectUid=function(vmProp,sourceObjectUid){vmProp.parentUid=sourceObjectUid;};/**\n * Retrieve the source object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */export let getSourceObjectUid=function(vmProp){var sourceObjectUid=vmProp.parentUid;if(!_.isEmpty(vmProp.intermediateObjectUids)){sourceObjectUid=vmProp.intermediateObjectUids[vmProp.intermediateObjectUids.length-1];}return sourceObjectUid;};/**\n * Retrieve the relation object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */export let getRelationObjectUid=function(vmProp){var sourceObjectUid=vmProp.parentUid;if(vmProp.intermediateObjectUids&&vmProp.intermediateObjectUids.length>0){sourceObjectUid=vmProp.intermediateObjectUids[0];}return sourceObjectUid;};/**\n * Returns the property name as defined in the source object for this view model property .\n *\n * For e.g. this method would return \"object_name\" for a view Model property with name\n * REF(items_tag,Item).object_name\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String} - Source property name\n */export let getPropertyNameInSourceObject=function(vmProp){var sourcePropertyName=vmProp.propertyName;if(vmProp.isDCP||!_.isEmpty(vmProp.intermediateObjectUids)){if(sourcePropertyName.includes('.')){sourcePropertyName=sourcePropertyName.split('.').slice(-1).pop();}}return sourcePropertyName;};/**\n * Trigger digest cycle of root scope so that widgets get reflected to the overlay object updates.\n */ /** revisitme yogesh\n  * Hint: we don't need this\n export let triggerDigestCycle = function() {\n     // trigger angular digest cycle on root scope so that value updates get reflected\n     if( _documentScope ) {\n         _documentScope.$evalAsync();\n     } else if( _docNgElement && _docNgElement.scope() ) {\n         _documentScope = _docNgElement.scope();\n         _documentScope.$evalAsync();\n     }\n };\n */ /**\n * Initialize dateApi with initial value if provided from dbValue\n *\n *  @param {ViewModelProperty} props - ViewModelProperty object that will be updated.\n *\n */export const initializeDateApiValues=props=>{let dateApi=props.dateApi;let jsDate=new Date(props.dbValue);jsDate=dateTimeSvc.getJSDate(jsDate);var isDateNull=true;if(!isNaN(jsDate)){if(!dateTimeSvc.isNullDate(jsDate)){isDateNull=false;if(dateApi.isDateEnabled){props.dateApi.dateObject=jsDate;props.dateApi.dateValue=uwDirectiveDateTimeSvc.formatDate(jsDate);}if(dateApi.isTimeEnabled){props.dateApi.timeValue=dateTimeSvc.formatTime(jsDate);}}}if(isDateNull){if(dateApi.isDateEnabled){props.dateApi.dateObject=dateTimeSvc.getNullDate();props.dateApi.dateValue='';}if(dateApi.isTimeEnabled&&props.type!=='DATEARRAY'){props.dateApi.timeValue='';}}};/**\n * Set the internal value of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n */export let setValue=function(vmProp,value){var sameAsOriginal=_.isEqual(value,vmProp.value);if(!sameAsOriginal||vmProp.valueUpdated&&!_.isEqual(value,vmProp.newValue)){vmProp.valueUpdated=true;/**\n         * This happens in case of CasCade Suggestive LOV, When user changes value in first LOV, for dependent\n         * LOV value comes as [\"\"] ( array of empty string) and it causes JSON parsing error for soa call.\n         */if(!vmProp.isArray&&_.isArray(value)&&value.length>0){vmProp.dbValue=value[0];}else{vmProp.dbValue=value;}if(vmProp.isArray){vmProp.dbValues=value;}if(_.isArray(value)&&!vmProp.isArray){vmProp.newValue=_.cloneDeep(value[0]);}else{vmProp.newValue=_.cloneDeep(value);}vmProp.error=null;// Always update display values\n// Do this first in case property change listeners want to change to something else\nexports.updateDisplayValues(vmProp,exports.getDisplayValues(vmProp));updateDateApi(vmProp);if(vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_VALUE);}}};/**\n * Set the old value of the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} oldValues - Old Value of property.\n */export let setOldValues=function(vmProp,oldValues){var oldValuesFinal=oldValues===null?[]:oldValues;vmProp.oldValues=oldValuesFinal;vmProp.oldValue=exports.getUiValue(oldValuesFinal);};/**\n * Set display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */export let setDisplayValue=function(vmProp,displayValues){var sameAsOriginal=!vmProp.prevDisplayValues||_.isEqual(displayValues,vmProp.prevDisplayValues);if(!vmProp.displayValueUpdated&&!sameAsOriginal||vmProp.displayValueUpdated&&!_.isEqual(displayValues,vmProp.newDisplayValues)){vmProp.displayValueUpdated=!sameAsOriginal;vmProp.error=null;exports.updateDisplayValues(vmProp,displayValues);if(vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_VALUE);}}};/**\n * Set widget display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */export let setWidgetDisplayValue=function(vmProp,displayValues){var sameAsOriginal=_.isEqual(displayValues,vmProp.displayValues);if(!sameAsOriginal){exports.updateDisplayValues(vmProp,displayValues);}};/**\n * Set 'isEnabled' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEnabled - TRUE if the property's value should be shown normally and (if also editable)\n *            react to user input. FALSE if the property's value should be shown 'greyed out' and not react to\n *            user input (even if editable).\n */export let setIsEnabled=function(vmProp,isEnabled){vmProp.isEnabled=isEnabled;};/**\n * Set 'isRichText' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRichText - TRUE if the string value of the property is in HTML format and should be\n *            displayed using HTML formatting rules and edited with the 'rich text' editor.\n */export let setIsRichText=function(vmProp,isRichText){vmProp.isRichText=isRichText;};/**\n * Set 'isNull' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isNull - TRUE if the current property value is 'no value'. FALSE if the value is valid as\n *            is.\n */export let setIsNull=function(vmProp,isNull){vmProp.isNull=isNull;};/**\n * Set 'isRequired' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRequired - TRUE if the property's value is required to sucessfully complete some operation\n *            that uses it. FALSE if the property's value is optional.\n */export let setIsRequired=function(vmProp,isRequired){if(vmProp.isRequired!==isRequired){vmProp.isRequired=isRequired;if(vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_REQUIRED);}// Set required place holder text if 'isRequired' flag is true\nif(vmProp.isRequired&&!vmProp.propertyRequiredText){if(_localTextBundle){vmProp.propertyRequiredText=_localTextBundle.REQUIRED_TEXT;}else{localeSvc.getTextPromise().then(function(localTextBundle){_localTextBundle=localTextBundle;vmProp.propertyRequiredText=_localTextBundle.REQUIRED_TEXT;});}}}};/**\n * Set the place holder text on the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} placeHolderText - The place holder text\n */export let setPlaceHolderText=function(vmProp,placeHolderText){vmProp.propertyRequiredText=placeHolderText;};/**\n * Set 'isLocalizable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isLocalizable - TRUE if the property value's UI should include the option to alow any user\n *            entered value to be converted from local language (as entered) into some other system language.\n */export let setIsLocalizable=function(vmProp,isLocalizable){vmProp.isLocalizable=isLocalizable;vmProp.uwAnchor='';if(isLocalizable&&(vmProp.type==='STRING'||vmProp.type==='STRINGARRAY')){vmProp.uwAnchor='aw_multiLanguageProperty';}};/**\n * Set 'isDisplayable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isDisplayable - isDisplayable state of ViewModelProperty.\n */export let setIsDisplayable=function(vmProp,isDisplayable){vmProp.isDisplayable=isDisplayable;};/**\n * Set 'isAutoAssign' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssign - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */export let setIsAutoAssign=function(vmProp,isAutoAssign){vmProp.isAutoAssign=isAutoAssign;};/**\n * Set 'isAutoAssignable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssignable - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */export let setIsAutoAssignable=function(vmProp,isAutoAssignable){vmProp.isAutoAssignable=isAutoAssignable;};/**\n * Set 'hasInitialValue' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} hasInitialValue - TRUE if the property has initial value. FALSE if the property does not\n *            have initial value.\n */export let setHasInitialValue=function(vmProp,hasInitialValue){vmProp.hasInitialValue=hasInitialValue;};/**\n * Set 'maxLength' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Number} maxLength - If not equal to '-1' or '0', this parameter specifies the maximum number of\n *            characters allowed in a string type property.\n */export let setLength=function(vmProp,maxLength){if(maxLength!==-1&&maxLength!==0){vmProp.maxLength=maxLength;}};/**\n * Set 'numberOfCharacters' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfCharacters - If not equal to '-1' or '0', this parameter specifies the number of\n *            characters in a string type property.\n */export let setNumberOfCharacters=function(vmProp,numberOfCharacters){if(numberOfCharacters!==-1&&numberOfCharacters!==0){vmProp.numberOfCharacters=numberOfCharacters;}};/**\n * Set 'numberOfLines' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfLines - If not equal to '-1' or '0', this parameter specifies the number of lines\n *            allowed in a property.\n */export let setNumberOfLines=function(vmProp,numberOfLines){if(numberOfLines!==-1&&numberOfLines!==0){vmProp.numberOfLines=numberOfLines;}};/**\n * Set 'isArray' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isArray - TRUE if the property can have more than one value in an ordered list. FALSE if the\n *            property can have only a single value.\n */export let setIsArray=function(vmProp,isArray){if(vmProp.isArray!==isArray){vmProp.isArray=isArray;// Set array place holder text if 'isArray' flag is true and the property is not required.\nif(vmProp.isArray){if(!_.isArray(vmProp.dbValue)){vmProp.dbValue=[];vmProp.value=[];}if(_localTextBundle){_setArrayText(vmProp,_localTextBundle);}else{localeSvc.getTextPromise().then(function(localTextBundle){_localTextBundle=localTextBundle;_setArrayText(vmProp,_localTextBundle);});}}vmProp.displayValsModel=[];var nVal=vmProp.displayValues.length;for(var i=0;i<nVal;i++){vmProp.displayValsModel.push({displayValue:vmProp.displayValues[i],selected:false,isInEditMode:false});}}};/**\n * Set 'arrayLength' state of ViewModelProperty. Applies only if the property is an array\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} arrayLength - set the array length. Set \"-1\" if unlimited array.\n */export let setArrayLength=function(vmProp,arrayLength){vmProp.arrayLength=arrayLength;};/**\n * Set 'referenceTypeName' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} typeName - set reference type name of ViewModelProperty.\n */export let setReferenceType=function(vmProp,typeName){vmProp.referenceTypeName=typeName;};/**\n * Set data type of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} dataType - data type of ViewModelProperty.\n */export let setDataType=function(vmProp,dataType){vmProp.type=dataType;};/**\n * Set 'error' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} error - The message that should be displayed when some aspect of the property's value is not\n *            correct. This value must be 'null' or an empty string to not have the error be displayed.\n */export let setError=function(vmProp,error){if(vmProp.error!==error){vmProp.error=error;if(vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_ERROR);}}};/**\n * Set client validation error of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} clientValidationError - set client validation error of ViewModelProperty.\n */export let setClientValidationError=function(vmProp,clientValidationError){vmProp.clientValidationError=clientValidationError;};/**\n * Set server validation error flag of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} hasServerValidationError - set server validation error flag of ViewModelProperty.\n */export let setServerValidationError=function(vmProp,hasServerValidationError){vmProp.hasServerValidationError=hasServerValidationError;};/**\n * Set property display name of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} propertyDisplayName - user displayable name of ViewModelProperty.\n */export let setPropertyDisplayName=function(vmProp,propertyDisplayName){vmProp.propertyDisplayName=propertyDisplayName;};/**\n * Set property label display of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} propertyLabelDisplay - String value of property label display.\n */export let setPropertyLabelDisplay=function(vmProp,propertyLabelDisplay){vmProp.propertyLabelDisplay=propertyLabelDisplay;// point-fix for xrt labeldisplay=titled issue...\n// factor with declViewModelService.getLabelPlacement()?\nif(vmProp.fielddata&&propertyLabelDisplay==='PROPERTY_LABEL_AT_TOP'){vmProp.fielddata.labelPlacement='top';}};/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} resetValues - True is values needs to be updated\n */function _resetPropertyAndResetUpdates(vmProp,resetValues){var fireEvent=false;if(vmProp.valueUpdated){vmProp.valueUpdated=false;fireEvent=true;}if(vmProp.displayValueUpdated){vmProp.displayValueUpdated=false;fireEvent=true;}if(vmProp.error){vmProp.error=null;if(!fireEvent&&vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_ERROR);}}if(fireEvent){if(vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_VALUE);}if(resetValues){exports.resetValues(vmProp);}}}/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */export let resetUpdates=function(vmProp){_resetPropertyAndResetUpdates(vmProp,true);};/**\n * Sets the value and displayValues with the updated 'new' values.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */export let replaceValuesWithNewValues=function(vmProp){if(vmProp.valueUpdated){vmProp.value=_.cloneDeep(vmProp.newValue);}if(vmProp.displayValueUpdated){if(vmProp.prevDisplayValues){vmProp.prevDisplayValues=_.clone(vmProp.displayValues);}vmProp.displayValues=_.clone(vmProp.newDisplayValues);}};/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */export let resetProperty=function(vmProp){_resetPropertyAndResetUpdates(vmProp,false);};/**\n * Reset db values and display values back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */export let resetValues=function(vmProp){if(_.isArray(vmProp.value)){vmProp.dbValue=vmProp.value.slice(0);if(!_.isUndefined(vmProp.dbOriginalValue)){vmProp.dbOriginalValue=vmProp.value.slice(0);}}else{vmProp.dbValue=_.cloneDeep(vmProp.value);if(!_.isUndefined(vmProp.dbOriginalValue)){vmProp.dbOriginalValue=_.cloneDeep(vmProp.value);}}if(vmProp.prevDisplayValues){vmProp.displayValues=_.clone(vmProp.prevDisplayValues);}vmProp.uiValue=exports.getUiValue(vmProp.displayValues);if(vmProp.isArray){vmProp.displayValsModel=[];for(var i=0;i<vmProp.displayValues.length;i++){vmProp.displayValsModel.push({displayValue:vmProp.displayValues[i],selected:false,isInEditMode:false});}}};/**\n * Set edit state of ViewModelProperty. If the property is editable and editable in view model then the\n * 'isEditable' flag is set to true which shows the properties as editable.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set edit state of ViewModelProperty.\n *\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n */export let setEditState=function(vmProp,editable,override){if(vmProp.editableInViewModel!==editable||override){vmProp.editableInViewModel=editable;vmProp.error=null;vmProp.isEditable=vmProp.editable&&vmProp.editableInViewModel&&vmProp.isPropertyModifiable;exports.setEditLayoutSide(vmProp);if(vmProp.propApi){if(vmProp.propApi.setLOVValueProvider){vmProp.propApi.setLOVValueProvider();}if(vmProp.propApi.setAutoAssignHandler){vmProp.propApi.setAutoAssignHandler();}if(vmProp.propApi.setObjectLinkPropertyHandler){vmProp.propApi.setObjectLinkPropertyHandler();}if(vmProp.propApi&&vmProp.propApi.notifyPropChange){vmProp.propApi.notifyPropChange(PROP_EDITABLE);}}if(vmProp.isEditable&&(!vmProp.prevDisplayValues||vmProp.prevDisplayValues!==vmProp.displayValues)){vmProp.prevDisplayValues=_.clone(vmProp.displayValues);}}};/**\n * Set 'editable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set editable state of ViewModelProperty.\n */export let setEditable=function(vmProp,editable){vmProp.editable=editable;};/**\n * Set 'isEditable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n */export let setIsEditable=function(vmProp,isEditable){if(vmProp.isEditable!==isEditable){vmProp.isEditable=isEditable;exports.setEditLayoutSide(vmProp);}};/**\n * Set 'isPropertyModifiable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isPropertyModifiable - TRUE if the user should have the ability to change the property's\n *            value. FALSE if the value is read-only.\n */export let setIsPropertyModifiable=function(vmProp,isPropertyModifiable){if(vmProp.isPropertyModifiable!==isPropertyModifiable){vmProp.isPropertyModifiable=isPropertyModifiable;// set is editable flag whenever property modifiable state is changed\nvmProp.isEditable=vmProp.editable&&vmProp.editableInViewModel&&vmProp.isPropertyModifiable;exports.setEditLayoutSide(vmProp);}};/**\n * Set edit layout side state of ViewModelProperty. For 'Boolean' and 'Object' based properties which doesn't\n * have LOV's this flag is set to true.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */export let setEditLayoutSide=function(vmProp){if(vmProp.type==='BOOLEAN'||vmProp.type==='OBJECT'){vmProp.editLayoutSide=!vmProp.hasLov;}};/**\n * Set 'hasLov' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} hasLov - TRUE if the property has a specific list of values associated with it.\n */export let setHasLov=function(vmProp,hasLov){if(vmProp.hasLov!==hasLov){vmProp.hasLov=hasLov;exports.setEditLayoutSide(vmProp);}};/**\n * Set 'isSelectOnly' state of ViewModelProperty.\n * This property allows the selected lov entry to be select only, i.e, user cannot type in the widget after selecting the lov entry.\n * This change is to support isSelectOnly in aw-widget used as a list box.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isSelectOnly - TRUE/FALSE. Default is false, allows user to edit value in input box.\n */export let setIsSelectOnly=function(vmProp,isSelectOnly){if(vmProp.isSelectOnly!==isSelectOnly){vmProp.isSelectOnly=isSelectOnly;}};/**\n * Set 'renderingHint' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} renderingHint - Depending on the type, this string indicates some variation in how the\n *            property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include 'radiobutton',\n *            'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label', 'textbox',\n *            'textfield', 'textarea', 'longtext').\n */export let setRenderingHint=function(vmProp,renderingHint){vmProp.renderingHint=renderingHint;};/**\n * Set 'overlayType' of ViewModelProperty. 'viewModelPropertyOverlay' - which defines that the overlay has real\n * data(i.e IViewModelProperty). 'widgetOverlay' - which defines that the overlay has widget data.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} overlayType - set overlay type of ViewModelProperty.\n */export let setOverlayType=function(vmProp,overlayType){vmProp.overlayType=overlayType;};/**\n * Set 'autofocus' state of ViewModelProperty. Which defines whether the widget needs to be autofocused or NOT\n * bound to this property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} autofocus - set autofocus state of ViewModelProperty.\n */export let setAutoFocus=function(vmProp,autofocus){vmProp.autofocus=autofocus;};/**\n * Set 'dirty' state of ViewModelProperty. Which defines whether the widget needs to be dirty or NOT.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} dirty - set dirty state of ViewModelProperty.\n */export let setDirty=function(vmProp,dirty){vmProp.dirty=dirty;};/**\n * Set array max row count of ViewModelProperty. Number of visible rows for array widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} maxRowCount - set array max row count of ViewModelProperty.\n */export let setMaxRowCount=function(vmProp,maxRowCount){if(maxRowCount!==-1&&maxRowCount!==0&&vmProp.maxRowCount!==maxRowCount){vmProp.maxRowCount=maxRowCount;}};/**\n * Set minimum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the earliest date/time this widget should allow.\n */export let setMinimumDate=function(vmProp,dateToSet){if(vmProp&&vmProp.dateApi){vmProp.dateApi.minDate=dateToSet;}};/**\n * Set maximum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the latest date/time this widget should allow.\n */export let setMaximumDate=function(vmProp,dateToSet){if(vmProp&&vmProp.dateApi){vmProp.dateApi.maxDate=dateToSet;}};/**\n * Set date Enabled state of ViewModelProperty. Which defines whether the date should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if date is enabled\n */export let setDateEnabled=function(vmProp,enabled){if(vmProp&&vmProp.dateApi){vmProp.dateApi.isDateEnabled=enabled;}};/**\n * Set time Enabled state of ViewModelProperty. Which defines whether the time should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if time is enabled.\n */export let setTimeEnabled=function(vmProp,enabled){if(vmProp&&vmProp.dateApi){vmProp.dateApi.isTimeEnabled=enabled;}};export const setDateApi=(vmProp,dateApi)=>{if(vmProp&&vmProp.dateApi){vmProp.dateApi=dateApi;}};/**\n * Set vertical state of ViewModelProperty. Which defines whether the radio button should show vertical or not.\n * Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} vertical TRUE if radio button need to be shown vertically.\n */export let setRadioButtonVertical=function(vmProp,vertical){if(vmProp&&vmProp.radioBtnApi){vmProp.radioBtnApi.vertical=vertical;}};/**\n * Set radio button's custom true label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customTrueLabel custom true label for radio button.\n */export let setRadioButtonCustomTrueLabel=function(vmProp,customTrueLabel){if(vmProp&&vmProp.radioBtnApi){vmProp.radioBtnApi.customTrueLabel=customTrueLabel;}};/**\n * Set radio button's custom false label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customFalseLabel custom false label for radio button.\n */export let setRadioButtonCustomFalseLabel=function(vmProp,customFalseLabel){if(vmProp&&vmProp.radioBtnApi){vmProp.radioBtnApi.customFalseLabel=customFalseLabel;}};/**\n * Has this property been modified in the view model\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the property is modified in the view model.\n */export let isModified=function(vmProp){return vmProp.valueUpdated||vmProp.displayValueUpdated;};/**\n * return the display value with local configured for boolean dbValue\n *\n * @param {Boolean } value - The boolean dbValue need turn to display value.\n * @param {StringMap} localTextBundle - Text bundles to use.\n * @return {String } the display value after local.\n */export const getLocalBooleanDisplayValue=function(value){let localTextBundle=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_localTextBundle;if(!localTextBundle||!localTextBundle.RADIO_TRUE){return value.toString();}return value?localTextBundle.RADIO_TRUE:localTextBundle.RADIO_FALSE;};/**\n * Get the Display Value for Property from array type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */function _getDisplayValuesFromArrayType(vmProp){var indx;var displayValues=[];if(vmProp.type==='DATEARRAY'&&!vmProp.hasLov){for(indx=0;indx<vmProp.newValue.length;indx++){if(!vmProp.dateApi||vmProp.dateApi.isTimeEnabled!==false&&vmProp.dateApi.isDateEnabled){displayValues.push(dateTimeSvc.formatSessionDateTime(vmProp.newValue[indx]));}else{displayValues.push(dateTimeSvc.formatSessionDate(vmProp.newValue[indx]));}}}else if(vmProp.type==='OBJECTARRAY'){for(indx=0;indx<vmProp.newValue.length;indx++){displayValues.push(exports.getDisplayName(vmProp.newValue[indx]));}}else{/**\n         * For LOVs use property display values which are already set by LOV widget.\n         */if(vmProp.hasLov){for(indx=0;indx<vmProp.displayValues.length;indx++){vmProp.displayValues[indx]&&displayValues.push(vmProp.displayValues[indx].toString());}}else{for(indx=0;indx<vmProp.newValue.length;indx++){if(_.isBoolean(vmProp.newValue[indx])||vmProp.newValue[indx]==='true'||vmProp.newValue[indx]==='false'){//changing vmProp.newValue string value into boolean\nconst newValue=typeof vmProp.newValue[indx]==='string'?vmProp.newValue[indx]==='true'?true:false:vmProp.newValue[indx];// eslint-disable-line\ndisplayValues.push(getLocalBooleanDisplayValue(newValue));}else{vmProp.newValue[indx]&&displayValues.push(vmProp.newValue[indx].toString());}}}}return displayValues;}/**\n * Get the Display Value from DATE, OBJECT,... type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */function _getDisplayValuesFromOtherTypes(vmProp){var displayValues=[];if(vmProp.type==='DATE'){if(!vmProp.dateApi.isTimeEnabled&&vmProp.dateApi.isDateEnabled){displayValues.push(dateTimeSvc.formatSessionDate(vmProp.newValue));}else if(vmProp.dateApi.isTimeEnabled&&!vmProp.dateApi.isDateEnabled){displayValues.push(dateTimeSvc.formatSessionTime(vmProp.newValue));}else{displayValues.push(dateTimeSvc.formatSessionDateTime(vmProp.newValue));}}else if(vmProp.type==='OBJECT'){/**\n         * This is for the case where view model property is created in GWT. Once we have all all GWT\n         * code converted to native, this condition will go away\n         */if(vmProp.propApi){displayValues.push(exports.getDisplayName(vmProp.newValue));}else{// If view model property is created in native code. e.g. declarative\nif(!declUtils.isNil(vmProp.uiValue)){displayValues.push(vmProp.uiValue);}}}else if(vmProp.type==='BOOLEAN'){displayValues.push(getLocalBooleanDisplayValue(vmProp.newValue));}else if(vmProp.hasLov){/**\n         * For LOVs use property uiValue which is already set by LOV widget.\n         */if(!declUtils.isNil(vmProp.uiValue)){displayValues.push(vmProp.uiValue.toString());}}else{/**\n         * when the type is integer or string, if value is 0 or empty string, framework is not allowing\n         * the display value to be updated with those values previously.\n         */if(!declUtils.isNil(vmProp.newValue)&&typeof vmProp.newValue!=='object'){displayValues.push(vmProp.newValue.toString());}}return displayValues;}/**\n * Get the Display Value for Property. View uses Display Value for rendering if the property is not in edit\n * state. <br>\n * View uses Display Value for rendering if the property is not in edit state. If it is edit state, it has to\n * use the value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */export let getDisplayValues=function(vmProp){/**\n     * Return new display values when ViewModelProperty display values are updated.\n     */if(vmProp.displayValueUpdated){return vmProp.newDisplayValues;}/**\n     * Return the display value as per the real value when they are out of sync. If valueUpdated is true but\n     * displayValueUpdated is false, then it means they are out of sync.\n     */if(vmProp.valueUpdated&&vmProp.newValue!==null&&vmProp.newValue!==undefined){var displayValues=[];if(vmProp.isArray){displayValues=_getDisplayValuesFromArrayType(vmProp);}else{displayValues=_getDisplayValuesFromOtherTypes(vmProp);}return displayValues;}return vmProp.prevDisplayValues;};/**\n * Returns the object type name for which this property is defined.\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String } object type name for which this property is defined.\n */export let getOwningTypeName=function(vmProp){if(vmProp.propertyDescriptor&&vmProp.propertyDescriptor.srcObjectTypeName){// use the source object type name for dcp properties\nreturn vmProp.propertyDescriptor.srcObjectTypeName;}else if(vmProp.parentUid&&clientDataModel.getObject(vmProp.parentUid)){return clientDataModel.getObject(vmProp.parentUid).type;}// return null if no information of the owning object is found\nreturn null;};/**\n * Get the display name of the selected type reference object\n *\n * @param {String} uid - The UID of the selected object\n * @return {String} Display name of the object\n */export let getDisplayName=function(uid){var displayName=null;var modelObject=clientDataModel.getObject(uid);if(modelObject&&modelObject.props.object_string){displayName=modelObject.props.object_string.uiValues[0];}return displayName;};/**\n * Get string of the Property value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */export let getValueStrings=function(vmProp){var values=[];if(vmProp.isArray){if(vmProp.type==='DATEARRAY'){for(var indx=0;indx<vmProp.dbValue.length;indx++){values.push(dateTimeSvc.formatUTC(vmProp.dbValue[indx]));}}else{for(var indx2=0;indx2<vmProp.dbValue.length;indx2++){values.push(String(vmProp.dbValue[indx2]!==null?vmProp.dbValue[indx2]:''));}}}else{if(vmProp.type==='DATE'){values.push(dateTimeSvc.formatUTC(vmProp.dbValue));}else{values.push(String(vmProp.dbValue!==null?vmProp.dbValue:''));}}return values;};/**\n * Returns TRUE if the internal value of the property is a number.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a number.\n */export let isDbValueNumber=function(vmProp){if(vmProp.valueUpdated){return isNumeric(vmProp.newValue);}return isNumeric(vmProp.value);};function isNumeric(n){return!isNaN(parseFloat(n))&&isFinite(n);}/**\n * Returns TRUE if the internal value of the property is a boolean.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a boolean.\n */export let isDbValueBoolean=function(vmProp){if(vmProp.valueUpdated){return _.isBoolean(vmProp.newValue);}return _.isBoolean(vmProp.value);};/**\n * Returns TRUE if the overlayType is widgetOverlay.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the overlay type is widgetOverlay.\n */export let isOverlayTypeWidget=function(vmProp){return vmProp.overlayType&&vmProp.overlayType===WIDGET;};/**\n * Set 'initialize' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */export let initialize=function(vmProp){vmProp.initialize=true;};/**\n * Updates property display values\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */export let updateDisplayValues=function(vmProp,displayValues){var displayValuesFinal=displayValues?displayValues:[];if(displayValuesFinal&&displayValuesFinal.length===0){vmProp.isNull=true;}else{vmProp.isNull=false;}vmProp.displayValues=displayValuesFinal;vmProp.newDisplayValues=displayValuesFinal;vmProp.uiValue=exports.getUiValue(vmProp.displayValues);if(vmProp.isArray){vmProp.uiValues=vmProp.displayValues;var oldDisplayValsModel=vmProp.displayValsModel;vmProp.displayValsModel=[];for(var i=0;i<vmProp.displayValues.length;i++){if(oldDisplayValsModel.length>0&&oldDisplayValsModel[i]&&oldDisplayValsModel[i].displayValue===vmProp.displayValues[i]){vmProp.displayValsModel.push({displayValue:vmProp.displayValues[i],selected:oldDisplayValsModel[i].selected,isInEditMode:oldDisplayValsModel[i].isInEditMode});}else{vmProp.displayValsModel.push({displayValue:vmProp.displayValues[i],selected:false,isInEditMode:false});}}}};/**\n * Returns the base property name of the dynamic compound property.\n *\n * @param {String} propertyName - property name to be evaluated.\n * @return {String} Base property name.\n */export let getBasePropertyName=function(propertyName){var baseProperty=propertyName;var lastPeriod=baseProperty.lastIndexOf('.');baseProperty=baseProperty.substr(lastPeriod+1);return baseProperty;};/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Boolean} True if the given vmProp is valid.\n */function _isValidVmProp(vmProp){var isValid=false;var vmPropType=vmProp.type;if(vmPropType==='INTEGER'){if(isFinite(vmProp.dbValue)){if(vmProp.dbValue!==null&&vmProp.dbValue!==''){vmProp.dbValue=Number(vmProp.dbValue);if(vmProp.dbValue>=_integerMinValue&&vmProp.dbValue<=_integerMaxValue){isValid=true;}}else{isValid=true;}}}else if(vmPropType==='DOUBLE'||vmPropType==='DATE'){if(isFinite(vmProp.dbValue)){if(vmProp.dbValue!==null&&vmProp.dbValue!==''){vmProp.dbValue=Number(vmProp.dbValue);}isValid=true;}}else{isValid=true;}return isValid;}/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available.\n */function _updateVMPValue(vmProp){var uidsArray=vmProp.dbValue;if(!vmProp.isArray){uidsArray=[];if(vmProp.dbValue!==null&&vmProp.dbValue!==undefined&&vmProp.dbValue!==''){uidsArray.push(vmProp.dbValue);}else if(vmProp.uiValue){uidsArray.push(vmProp.uiValue);}}if(!_pingDeferred){_pingDeferred=AwPromiseService.instance.defer();}_pingLoadObjects(uidsArray,vmProp);return _pingDeferred.promise;}/**\n * updates isNull and valueUpdated props on ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n */function _updateIsNullAndValueUpdatedFlags(vmProp){/**\n     * Change isNull flag to false, if dbValue & uiValue exists and even though its NOT valid.\n     */if(vmProp.isNull&&vmProp.dbValue&&vmProp.uiValue){vmProp.isNull=false;}/**\n     * Change valueUpdated flag to true, if dbValue & uiValue exists and even though its NOT valid.\n     */if(vmProp.dbValue&&vmProp.uiValue){vmProp.valueUpdated=true;}}/**\n * Updates ViewModelProperty with updated values. Added a return of promise in case of async call to load\n * objects which is required for OBJECT or OBJECTARRAY property types. The promise is resolved or rejected based\n * on execution of the load objects api.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available. In case the input vmProp.type is not OBJECT or\n *         OBJECTARRAY, then promise returned is null. Caller should explicitly do a null check on the promise\n *         before invoking any functions on it.\n */export let updateViewModelProperty=function(vmProp){var isValid=false;var vmPropType=vmProp.type;isValid=_isValidVmProp(vmProp);if(isValid){if(vmPropType!=='OBJECT'&&vmPropType!=='OBJECTARRAY'){exports.setValue(vmProp,vmProp.dbValue);if(vmProp.propApi&&vmProp.propApi.fireValueChangeEvent){vmProp.propApi.fireValueChangeEvent();}}else{exports.setValue(vmProp,vmProp.dbValue);return _updateVMPValue(vmProp);}}else{_updateIsNullAndValueUpdatedFlags(vmProp);}return null;};/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */export let isViewModelProperty=function(objectToTest){return objectToTest instanceof ViewModelProperty||objectToTest.hasOwnProperty('dbValues');};/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} listOfobjectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */export let isArrayOfViewModelProperty=function(listOfobjectToTest){let flag=true;_.forEach(listOfobjectToTest,function(obj){if(obj&&!(exports.isViewModelProperty(obj)||obj.hasOwnProperty('dbValues'))){flag=false;return false;}});return flag;};/**\n * Retrieve the cdm's modelObject from a property's source object uid.\n *\n * @param {ViewModelProperty} vmProp - Property to retrieve source object\n * @return {ModelObject} The ModelObject; null if not cached\n */export let getSourceModelObject=function(vmProp){var sourceObjectUid=exports.getSourceObjectUid(vmProp);return clientDataModel.getObject(sourceObjectUid);};/**\n * This methods attaches validation criteria in view model property.\n *\n * @param {ViewModelProperty} vmProp - Property in whcih validation criteria needs to be attched\n *\n * @param {String} conditionName - The name of the condition in validation criteria\n *\n * @param {String} msgString - The message which will be shown if the validation criteria doesn't match\n *\n */export let createValidationCriteria=function(vmProp,conditionName,msgString){var validationObj={condition:'conditions.'+conditionName,value:msgString};if(!vmProp.validationCriteria){vmProp.validationCriteria=[];}vmProp.validationCriteria.push(validationObj);};export let updateValidationResult=(lovEntry,validationResult,uiProp)=>{if(validationResult.valid&&uiProp.isEditable!==false){if(!uiProp.isArray){if(uiProp.type!=='DATE'){uiProp.dbValue=lovEntry.propInternalValue;uiProp.uiValue=lovEntry.propDisplayValue;}uiProp.dbValues=[uiProp.dbValue];uiProp.uiValues=[uiProp.uiValue];}// update orig vals on validation\nuiProp.dbOriginalValue=uiProp.dbValue;uiProp.uiOriginalValue=uiProp.uiValue;// Update dependent properties\n_.forEach(validationResult.updatedPropValueMap,function(values,propertyName){var sourceObjectUid=getSourceObjectUid(uiProp);var toBeModifiedProp=validationResult.viewModelObj.retrievePropertyWithBasePropertyName(propertyName,sourceObjectUid);if(toBeModifiedProp){var eventData={removeValues:toBeModifiedProp.dbValue};setValue(toBeModifiedProp,values);setWidgetDisplayValue(toBeModifiedProp,validationResult.updatedPropDisplayValueMap[propertyName]);}});setServerValidationError(uiProp,false);uiProp.error=null;// revisitme: zarq9k Need to import uwValidationSvc\n//setErrorMessage( $scope, null );\n// var eventData = {\n//     lovValue: lovEntry\n// };\neventBus.publish(uiProp.propertyName+'.lovValueChanged',{lovValue:lovEntry});}else{if(validationResult.error){setServerValidationError(uiProp,true);uiProp.error=validationResult.error;// revisitme: zarq9k Need to import uwValidationSvc\n//setErrorMessage( $scope, validationResult.error );\n}}};/**\n * zarq9k: Moved the updateDbValue from aw.property.lov.controller.\n * @param {*} uiProperty\n * @param {*} lovEntry\n */export let updateLov=(uiProperty,lovEntry,createUpdateValue,operation,checkLovEntries)=>{// special handling for checkbox array lov\nlet promise;if(uiProperty.renderingHint==='checkboxoptionlov'){if(operation==='unchecked'){// remove the item based on the propInternalValue\nlet index=uiProperty.dbValue.findIndex(val=>val===lovEntry.propInternalValue);if(_.isObject(lovEntry.propInternalValue)){index=uiProperty.displayValues.findIndex(val=>val===lovEntry.propDisplayValue);}uiProperty.dbValue.splice(index,1);uiProperty.displayValues.splice(index,1);}else{uiProperty.dbValue.push(lovEntry.propInternalValue);uiProperty.displayValues.push(lovEntry.propDisplayValue);}updateDisplayValues(uiProperty,[...uiProperty.displayValues]);// Below weird behaviour is due to function \"updateViewModelProperty\" which returns promise is few cases and null in other cases.\npromise=updateViewModelProperty(uiProperty);if(promise){return promise.then(resolve=>resolve(uiProperty));}return new Promise(resolve=>resolve(uiProperty));}uiProperty.displayValues.push(lovEntry.propDisplayValue);var changed=uiProperty.dbOriginalValue!==lovEntry.propInternalValue;// update the dbValue based on the uiValue\n//zarq9k: Multiple if checks for uiProperty.type === 'DATE' - Need cleanup\nlet newDbValue='';let newUiValue='';/**\n     * For integer and double we have to actually see if it is valid number and then convert it into number\n     * type accordingly or else throw an error\n     */if(uiProperty.type==='INTEGER'||uiProperty.type==='DOUBLE'||uiProperty.type==='INTEGERARRAY'||uiProperty.type==='DOUBLEARRAY'){if(uiProperty.type==='INTEGER'||uiProperty.type==='INTEGERARRAY'){// zarq9k: revisit - Need to import uwValidationSvc in the new repo.\n//newDbValue = uwValidationSvc.checkInteger( $scope, null, lovEntry.propInternalValue );\n// Below is a temp fix until unless uwValidationSvc comes again\nlet number=parseInt(lovEntry.propInternalValue,10);newDbValue=isNaN(number)?'':number;newUiValue=lovEntry.propDisplayValue;}else{//newDbValue = uwValidationSvc.checkDouble( $scope, null, lovEntry.propInternalValue );\n// Below is a temp fix until unless uwValidationSvc comes again\nlet number=parseFloat(lovEntry.propInternalValue,10);newDbValue=isNaN(number)?'':number;newUiValue=lovEntry.propDisplayValue;}// set the converted number to the dbValue\n//lovEntry.propInternalValue = newDbValue;\n//uiProperty.dbValue = newDbValue;\n}else if(propTypeDate(uiProperty)&&uiProperty.dateApi.isNotLov){// zarq9k: revisit - Need to import uwValidationSvc in the new repo.lsdlksl;\n//dateObject = uwValidationSvc.checkDateTime( $scope, dateObject );\nsetDateTimeValues({dateVal:'',timeVal:lovEntry.propDisplayValue});let dateApi=uiProperty.dateApi;uiProperty.dbValue=getDBValueForDate(uiProperty);uiProperty.uiValue=getUIValueForDate(dateApi);newUiValue=uiProperty.uiValue;newDbValue=uiProperty.dbValue;}else{newDbValue=lovEntry.propInternalValue;newUiValue=lovEntry.propDisplayValue;}newDbValue=uiProperty.type==='BOOLEAN'&&(_.isNil(newDbValue)||newDbValue.length===0)?null:newDbValue;uiProperty.dbValue=!uiProperty.isArray?newDbValue:uiProperty.dbValue;uiProperty.filterString=lovEntry.filterString?lovEntry.filterString:null;uiProperty.valueUpdated=true;// update optional icon\nuiProperty.iconSource=lovEntry.iconSource;uiProperty.iconName=lovEntry.iconName;if(uiProperty.type!=='DATE'){lovEntry.propInternalValue=newDbValue;lovEntry.propDisplayValue=newUiValue;}if(!uiProperty.isArray){promise=updateViewModelProperty(uiProperty);clearDateTimeValues(uiProperty);if(promise){return promise.then(()=>{//In dirty check, If newValue and value are same then we dont show dirty backgrnd\n//uiProperty.value = newDbValue;\n// for array & array lov\nuiProperty.uiValue=!uiProperty.isArray?newUiValue:'';uiProperty.valueUpdated=true;return uiProperty;});}return new Promise((resolve,reject)=>{// for array & array lov\nuiProperty.uiValue=!uiProperty.isArray?newUiValue:'';uiProperty.valueUpdated=true;resolve(uiProperty);});}return new Promise(resolve=>{let event={target:{value:lovEntry.propInternalValue}};let dateEvent=[lovEntry.propInternalValue];if(uiProperty.type==='OBJECTARRAY'){dmSvc.loadObjects(dateEvent).then(function(){uiProperty=createUpdateValue(uiProperty,event);resolve(uiProperty);},function(error){return AwPromiseService.instance.reject(error);});}else{uiProperty=createUpdateValue(uiProperty,event);resolve(uiProperty);}});};/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function isDCPProperty\n * @param {String} propertyName - name of the property\n * @returns {Boolean} - returns whether the property is a dynamic compound property or not.\n */export let isDCPProperty=function(propertyName){if(propertyName.indexOf('.')!==-1&&propertyName.indexOf('(')!==-1&&(propertyName.indexOf('GRM')!==-1||propertyName.indexOf('GRMS2P')!==-1||propertyName.indexOf('REF')!==-1||propertyName.indexOf('REFBY')!==-1||propertyName.indexOf('GRMREL')!==-1||propertyName.indexOf('GRMS2PREL')!==-1)){return true;}return false;};/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function updateViewModelProp\n * @param {*} viewProp -\n * @param {*} newVal -\n * @param {*} additionalProp - \n * @param {*} nonatomicUpdate -\n */export let updateViewModelProp=function(viewProp,newVal,additionalProp,nonatomicUpdate){if(additionalProp){if(additionalProp.hasOwnProperty('displayName')){viewProp.propertyDisplayName=additionalProp.displayName;}if(additionalProp.hasOwnProperty('isEditable')){let val=_.isBoolean(additionalProp.isEditable)?additionalProp.isEditable:additionalProp.isEditable!=='false';exports.setIsEditable(viewProp,val);}if(additionalProp.hasOwnProperty('isRequired')){let isRequired=_.isBoolean(additionalProp.isRequired)?additionalProp.isRequired:additionalProp.isRequired!=='false';exports.setIsRequired(viewProp,isRequired);}if(additionalProp.hasOwnProperty('isEnabled')){let isEnabled=_.isBoolean(additionalProp.isEnabled)?additionalProp.isEnabled:additionalProp.isEnabled!=='false';exports.setIsEnabled(viewProp,isEnabled);}if(additionalProp.hasOwnProperty('labelPosition')){exports.setPropertyLabelDisplay(viewProp,additionalProp.labelPosition,true);if(viewProp.labelPosition==='PROPERTY_LABEL_AT_SIDE'){viewProp.editLayoutSide=true;}}if(additionalProp.hasOwnProperty('propName')){viewProp.propertyName=additionalProp.propName;}if(additionalProp.hasOwnProperty('displayValue')){viewProp.uiValues=additionalProp.displayValue;viewProp.uiValue=exports.getUiValue(viewProp.uiValues);}if(additionalProp.hasOwnProperty('isModifiable')){exports.setIsPropertyModifiable(viewProp,additionalProp.isModifiable);}if(additionalProp.hasOwnProperty('isAutoAssignable')){exports.setIsAutoAssignable(viewProp,additionalProp.isAutoAssignable);}if(additionalProp.hasOwnProperty('maxLength')){exports.setLength(viewProp,additionalProp.maxLength);}if(additionalProp.hasOwnProperty('renderingHint')){exports.setRenderingHint(viewProp,additionalProp.renderingHint);}if(additionalProp.hasOwnProperty('requiredText')){exports.setPlaceHolderText(viewProp,additionalProp.requiredText);}if(additionalProp.hasOwnProperty('vertical')){viewProp.vertical=additionalProp.vertical;}if(additionalProp.hasOwnProperty('numberOfLines')){exports.setNumberOfLines(viewProp,additionalProp.numberOfLines);}if(additionalProp.hasOwnProperty('isArray')){let isArray=_.isBoolean(additionalProp.isArray)?additionalProp.isArray:additionalProp.isArray==='true';exports.setIsArray(viewProp,isArray);}additionalProp.iconName&&(viewProp.iconName=additionalProp.iconName);}if(nonatomicUpdate){exports.setValue(viewProp,newVal);}};/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */const exports={getUiValue,createViewModelProperty,updateModelData,copyModelData,setSourceObjectUid,getSourceObjectUid,getRelationObjectUid,getPropertyNameInSourceObject,/** revisitme yogesh\n              * Hint: we may not be required this\n             triggerDigestCycle,\n              */initializeDateApiValues,setValue,setOldValues,setDisplayValue,setWidgetDisplayValue,setIsEnabled,setIsRichText,setIsNull,setIsRequired,setPlaceHolderText,setIsLocalizable,setIsDisplayable,setIsAutoAssign,setIsAutoAssignable,setHasInitialValue,setLength,setNumberOfCharacters,setNumberOfLines,setIsArray,setArrayLength,setReferenceType,setDataType,setError,setClientValidationError,setServerValidationError,setPropertyDisplayName,setPropertyLabelDisplay,resetUpdates,replaceValuesWithNewValues,resetProperty,resetValues,setEditState,setEditable,setIsEditable,setIsPropertyModifiable,setEditLayoutSide,setHasLov,setIsSelectOnly,setRenderingHint,setOverlayType,setAutoFocus,setDirty,setMaxRowCount,setMinimumDate,setMaximumDate,setDateEnabled,setTimeEnabled,setDateApi,setRadioButtonVertical,setRadioButtonCustomTrueLabel,setRadioButtonCustomFalseLabel,isModified,getDisplayValues,getOwningTypeName,getDisplayName,getValueStrings,isDbValueNumber,isDbValueBoolean,isOverlayTypeWidget,initialize,updateDisplayValues,getBasePropertyName,updateViewModelProperty,isViewModelProperty,isArrayOfViewModelProperty,getSourceModelObject,createValidationCriteria,updateValidationResult,updateLov,isDCPProperty,updateViewModelProp};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable no-unused-vars */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do debugging.\n *\n * @module js/debugService\n *\n * @namespace debugService\n */\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport breakpointSvc from 'js/breakpointService';\nexport let debugActionStart = function (action, declViewModel, inputData) {\n  if (!logger.isDeclarativeLogEnabled() || action.actionType === 'Event') {\n    return;\n  } // action, declViewModel, $scope, inputData\n\n\n  var declTraceObject = {\n    type: 'action',\n    operation: 'start',\n    name: action.actionId,\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: action,\n      resolvedInput: inputData\n    }\n  };\n  logger.declarativeLog('DECLARATIVE TRACE - Action start : %O ', declTraceObject);\n};\n/** revisitme yogesh\n * No usage of context aka scope, refactor callers and get rid\n */\n\nexport let debugEventPub = function (action, event, declViewModel, context, eventDataToPublish) {\n  // action, event, declViewModel, $scope, eventDataToPublish\n  if (logger.isDeclarativeLogEnabled()) {\n    var viewModelName = declViewModel._internal ? declViewModel._internal.panelId : declViewModel.panelId;\n    var declTraceObject = {\n      type: 'event',\n      operation: 'publish',\n      name: event.name,\n      payload: {\n        viewModel: viewModelName,\n        def: action,\n        resolvedInput: eventDataToPublish && eventDataToPublish.scope ? {} : eventDataToPublish\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Event publish : %O ', declTraceObject);\n  }\n};\nexport let debugEventSub = function (eventDef, declViewModel, context, condition) {\n  // eventObj, declViewModel, context, isEventExecutable\n  var declTraceObject = {\n    type: 'event',\n    operation: 'subscribe',\n    name: eventDef.eventId,\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: eventDef,\n      condition: condition\n      /** revisitme\n       input: {\n          context: context && context.scope ? {} : context\n      }\n       */\n\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Event subscribe : %O ', declTraceObject);\n  }\n};\nexport let debugActionEnd = function (action, declViewModel, resolvedAssignments) {\n  if (!logger.isDeclarativeLogEnabled()) {\n    return;\n  } // action, declViewModel, dataCtxNode, actionResponseObj\n\n\n  var declTraceObject = {\n    type: 'action',\n    operation: 'complete',\n    name: action.actionId,\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: action,\n      resolvedOutput: resolvedAssignments\n    }\n  };\n  logger.declarativeLog('DECLARATIVE TRACE - Action end: %O ', declTraceObject);\n};\nexport let debugMessages = function (message, declViewModel, context) {\n  //\n  var declTraceObject = {\n    type: 'message',\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: message.messageDefn,\n      resolvedOutput: {\n        localizedMessage: message.localizedMessage,\n        messageData: message.messageData\n      }\n      /*input: {\n         context: context //LCS-585902 - Exceptions occurring when trying to pop a message via declaratively defined actionMessage Logging context gives infinite loop as context has complex structure\n       } */\n\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Messages: %O ', declTraceObject);\n  }\n};\nexport let debugLifecyleHooks = function (hookname, viewModel) {\n  let observerObjs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var declTraceObject = {\n    type: 'lifecycleHook',\n    operation: hookname,\n    payload: {\n      viewModel: viewModel._internal.panelId\n    }\n  };\n\n  if (hookname === 'onUpdate') {\n    let lifecycleHooks = { ...viewModel.declViewModelJson.lifecycleHooks.onUpdate\n    };\n\n    if (lifecycleHooks.observers) {\n      let observerMap = {};\n      lifecycleHooks.observers.forEach((observer, indx) => {\n        observerMap[observer] = observerObjs && observerObjs.length ? observerObjs[indx] : null;\n      });\n      declTraceObject.payload.observers = observerMap;\n    }\n  }\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Lifecycle Hook: %O ', declTraceObject);\n  }\n};\nexport let debugViewAndViewModel = function (operation, viewName, declViewModel, subpanelContext) {\n  /*\n   * type is 'contentUnloaded' // when view and VM destroy\n   * type is 'contentLoaded' // when view and VM rendered\n   */\n  var declTraceObject = {\n    type: 'viewAndViewModel',\n    operation: operation,\n    payload: {\n      viewModel: viewName,\n      input: {\n        subPanelContext: subpanelContext\n      }\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - View and ViewModel ' + operation + ': %O ', declTraceObject);\n  }\n};\nexport let debugGetCommandsForAnchor = function (uiAnchor, commands) {\n  if (uiAnchor && logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'command',\n      operation: 'contributedCommands',\n      payload: {\n        viewModel: 'commandsViewModel',\n        anchorName: uiAnchor,\n        commandsOnAchor: commands\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - All commands against anchor : %O ', declTraceObject);\n  }\n};\nexport let debugUpdateHandlerOnCommand = function (commandId, handler) {\n  if (logger.isDeclarativeLogEnabled() && commandId && handler && !_.isEmpty(handler)) {\n    var declTraceObject = {\n      type: 'command',\n      operation: 'activeHandler',\n      payload: {\n        viewModel: 'commandsViewModel',\n        commandId: commandId,\n        handler: handler\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Update Handler : %O ', declTraceObject);\n  }\n};\nexport let debugCommandRender = function (command, result) {\n  if (logger.isDeclarativeLogEnabled() && command && result && !_.isEmpty(command) && !_.isEmpty(result)) {\n    var declTraceObject = {\n      type: 'command',\n      operation: 'commandRender',\n      payload: {\n        viewModel: 'commandsViewModel',\n        commandId: command.id,\n        command: command,\n        renderResult: result\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Command Render : %O ', declTraceObject);\n  }\n};\nexport let debugPreProcessingDataParser = function (sourceObj, declViewModel, dataParserDef, dataCtxNode) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataParser',\n      operation: 'preProcessing',\n      payload: {\n        viewModel: declViewModel._internal.panelId,\n        def: dataParserDef\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Pre processing of DataParser: %O ', declTraceObject);\n  }\n};\nexport let debugPostProcessingDataParser = function (processedSourceObj, declViewModel, dataParserDef, dataCtxNode) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataParser',\n      operation: 'postProcessing',\n      payload: {\n        viewModel: declViewModel._internal.panelId,\n        def: dataParserDef,\n        resolvedIput: processedSourceObj\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - post processing of DataParser: %O ', declTraceObject);\n  }\n};\nexport let debugDataProviderInitialize = function (dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction, resolvedInput) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataProvider',\n      operation: 'Initialize',\n      name: dataProvider.name,\n      payload: {\n        /** revisitme\n        viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n        */\n        def: dataProviderDef,\n        action: dataProvierAction,\n        resolvedIput: resolvedInput\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Initialize of Dataprovider: %O ', declTraceObject);\n  }\n};\nexport let debugDataProviderNextPage = function (dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataProvider',\n      operation: 'NextPage',\n      name: dataProvider.name,\n      payload: {\n        /** revisitme\n        viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n        */\n        def: dataProviderDef,\n        action: dataProvierAction\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - NextPage of Dataprovider: %O ', declTraceObject);\n  }\n};\nexport let debugConditions = function (conditionName, conditionState, conditionExp, declViewModel) {\n  var declTraceObject = {\n    type: 'conditions',\n    payload: {\n      viewModel: declViewModel,\n      conditionName: conditionName,\n      expression: conditionExp,\n      conditionState: conditionState\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Conditions: %O ', declTraceObject);\n  }\n};\n/**\n *\n * @param {*} arguments[0] type of the breakpoint\n *\n */\n\nexport let debug = function () {\n  try {\n    if (!logger.isDeclarativeLogEnabled()) {\n      return;\n    }\n\n    let brkPointType = arguments[0];\n\n    if (breakpointSvc.hasConditionSatisfied(brkPointType, arguments[1], arguments[2], arguments[3])) {\n      // eslint-disable-next-line no-debugger\n      debugger;\n    }\n\n    if (brkPointType === 'actions') {\n      switch (arguments[3]) {\n        case 'pre':\n          debugActionStart(arguments[4], arguments[5], arguments[6]);\n          break;\n\n        case 'post':\n          debugActionEnd(arguments[4], arguments[5], arguments[6]);\n          break;\n\n        case 'default':\n          //do nothing\n          break;\n      }\n    } // eslint-disable-next-line no-empty\n\n  } catch (e) {}\n};\n\nlet printData = result => {\n  result.map(entry => {\n    entry.children.map(child => {\n      child.handlers.map(handler => {\n        logger.declarativeLog(' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + child.id + '~' + handler.id + '~' + handler.activeWhen + '~' + handler.visibleWhen);\n      });\n    });\n\n    if (entry.children.length === 0) {\n      entry.handlers.map(handler => {\n        logger.declarativeLog(' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + undefined + '~' + handler.id + '~' + handler.activeWhen + '~' + handler.visibleWhen);\n      });\n    }\n  });\n};\n\nconst procesHandler = handler => {\n  let singleHandler = {};\n  singleHandler.id = handler.id;\n\n  if (handler.activeWhen) {\n    if (_.isObject(handler.activeWhen.expression)) {\n      singleHandler.activeWhen = JSON.stringify(handler.activeWhen.expression);\n    } else {\n      singleHandler.activeWhen = handler.activeWhen.expression;\n    }\n  }\n\n  if (handler.visibleWhen) {\n    if (_.isObject(handler.visibleWhen.expression)) {\n      singleHandler.visibleWhen = JSON.stringify(handler.visibleWhen.expression);\n    } else {\n      singleHandler.visibleWhen = handler.visibleWhen.expression;\n    }\n  }\n\n  return singleHandler;\n};\n\nexport const reduceData = (anchor, data) => {\n  if (logger.isDeclarativeLogEnabled()) {\n    let result = [];\n    data.map(obj => {\n      let singleResult = {\n        anchor,\n        id: '',\n        type: '',\n        children: [],\n        handlers: []\n      };\n\n      for (let key in obj) {\n        if (key === 'id') {\n          singleResult.id = obj.id;\n        }\n\n        if (key === 'type') {\n          singleResult.type = obj.type;\n        }\n\n        if (key === 'children') {\n          obj.children.map(child => {\n            let singleChild = {\n              id: '',\n              handlers: []\n            };\n            singleChild.id = child.id;\n            child.handlers.map(handler => {\n              singleChild.handlers.push(procesHandler(handler));\n            });\n            singleResult.children.push(singleChild);\n          });\n        }\n\n        if (key === 'handlers') {\n          obj.handlers.map(handler => {\n            singleResult.handlers.push(procesHandler(handler));\n          });\n        }\n      }\n\n      result.push(singleResult);\n    });\n    printData(result);\n  }\n};\nexport default {\n  debugActionStart,\n  debugEventPub,\n  debugEventSub,\n  debugActionEnd,\n  debugMessages,\n  debugLifecyleHooks,\n  debugViewAndViewModel,\n  debugGetCommandsForAnchor,\n  debugCommandRender,\n  debugUpdateHandlerOnCommand,\n  debugPreProcessingDataParser,\n  debugPostProcessingDataParser,\n  debugDataProviderNextPage,\n  debugDataProviderInitialize,\n  debugConditions,\n  debug,\n  reduceData\n};","map":{"version":3,"names":["logger","_","breakpointSvc","debugActionStart","action","declViewModel","inputData","isDeclarativeLogEnabled","actionType","declTraceObject","type","operation","name","actionId","payload","viewModel","_internal","panelId","def","resolvedInput","declarativeLog","debugEventPub","event","context","eventDataToPublish","viewModelName","scope","debugEventSub","eventDef","condition","eventId","debugActionEnd","resolvedAssignments","resolvedOutput","debugMessages","message","messageDefn","localizedMessage","messageData","debugLifecyleHooks","hookname","observerObjs","lifecycleHooks","declViewModelJson","onUpdate","observers","observerMap","forEach","observer","indx","length","debugViewAndViewModel","viewName","subpanelContext","input","subPanelContext","debugGetCommandsForAnchor","uiAnchor","commands","anchorName","commandsOnAchor","debugUpdateHandlerOnCommand","commandId","handler","isEmpty","debugCommandRender","command","result","id","renderResult","debugPreProcessingDataParser","sourceObj","dataParserDef","dataCtxNode","debugPostProcessingDataParser","processedSourceObj","resolvedIput","debugDataProviderInitialize","dataProvider","dataProvierAction","dataProviderDef","requestObjectForAction","debugDataProviderNextPage","debugConditions","conditionName","conditionState","conditionExp","expression","debug","brkPointType","arguments","hasConditionSatisfied","e","printData","map","entry","children","child","handlers","anchor","activeWhen","visibleWhen","undefined","procesHandler","singleHandler","isObject","JSON","stringify","reduceData","data","obj","singleResult","key","singleChild","push"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/debugService.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do debugging.\n *\n * @module js/debugService\n *\n * @namespace debugService\n */\n\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport breakpointSvc from 'js/breakpointService';\n\nexport let debugActionStart = function( action, declViewModel, inputData ) {\n    if( !logger.isDeclarativeLogEnabled() || action.actionType === 'Event' ) {\n        return;\n    }\n    // action, declViewModel, $scope, inputData\n    var declTraceObject = {\n        type: 'action',\n        operation: 'start',\n        name: action.actionId,\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: action,\n            resolvedInput: inputData\n        }\n    };\n    logger.declarativeLog( 'DECLARATIVE TRACE - Action start : %O ', declTraceObject );\n};\n/** revisitme yogesh\n * No usage of context aka scope, refactor callers and get rid\n */\nexport let debugEventPub = function( action, event, declViewModel, context, eventDataToPublish ) {\n    // action, event, declViewModel, $scope, eventDataToPublish\n    if( logger.isDeclarativeLogEnabled() ) {\n        var viewModelName = declViewModel._internal ? declViewModel._internal.panelId : declViewModel.panelId;\n        var declTraceObject = {\n            type: 'event',\n            operation: 'publish',\n            name: event.name,\n            payload: {\n                viewModel: viewModelName,\n                def: action,\n                resolvedInput: eventDataToPublish && eventDataToPublish.scope ? {} : eventDataToPublish\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Event publish : %O ', declTraceObject );\n    }\n};\n\nexport let debugEventSub = function( eventDef, declViewModel, context, condition ) {\n    // eventObj, declViewModel, context, isEventExecutable\n    var declTraceObject = {\n        type: 'event',\n        operation: 'subscribe',\n        name: eventDef.eventId,\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: eventDef,\n            condition: condition\n            /** revisitme\n             input: {\n                context: context && context.scope ? {} : context\n            }\n             */\n\n        }\n    };\n\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Event subscribe : %O ', declTraceObject );\n    }\n};\n\nexport let debugActionEnd = function( action, declViewModel, resolvedAssignments ) {\n    if( !logger.isDeclarativeLogEnabled() ) {\n        return;\n    }\n    // action, declViewModel, dataCtxNode, actionResponseObj\n    var declTraceObject = {\n        type: 'action',\n        operation: 'complete',\n        name: action.actionId,\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: action,\n            resolvedOutput: resolvedAssignments\n        }\n    };\n    logger.declarativeLog( 'DECLARATIVE TRACE - Action end: %O ', declTraceObject );\n};\n\nexport let debugMessages = function( message, declViewModel, context ) {\n    //\n    var declTraceObject = {\n        type: 'message',\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: message.messageDefn,\n            resolvedOutput: { localizedMessage: message.localizedMessage, messageData: message.messageData }\n            /*input: {\n               context: context //LCS-585902 - Exceptions occurring when trying to pop a message via declaratively defined actionMessage Logging context gives infinite loop as context has complex structure\n             } */\n        }\n    };\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Messages: %O ', declTraceObject );\n    }\n};\n\nexport let debugLifecyleHooks = function( hookname, viewModel, observerObjs = null ) {\n    var declTraceObject = {\n        type: 'lifecycleHook',\n        operation: hookname,\n        payload: {\n            viewModel: viewModel._internal.panelId\n        }\n    };\n    if( hookname === 'onUpdate' ) {\n        let lifecycleHooks = { ...viewModel.declViewModelJson.lifecycleHooks.onUpdate };\n        if( lifecycleHooks.observers ) {\n            let observerMap = {};\n            lifecycleHooks.observers.forEach( ( observer, indx ) => {\n                observerMap[ observer ] = observerObjs && observerObjs.length ? observerObjs[ indx ] : null;\n            } );\n            declTraceObject.payload.observers = observerMap;\n        }\n    }\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Lifecycle Hook: %O ', declTraceObject );\n    }\n};\n\nexport let debugViewAndViewModel = function( operation, viewName, declViewModel, subpanelContext ) {\n    /*\n     * type is 'contentUnloaded' // when view and VM destroy\n     * type is 'contentLoaded' // when view and VM rendered\n     */\n    var declTraceObject = {\n        type: 'viewAndViewModel',\n        operation: operation,\n        payload: {\n            viewModel: viewName,\n            input: {\n                subPanelContext: subpanelContext\n            }\n        }\n    };\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - View and ViewModel ' + operation + ': %O ', declTraceObject );\n    }\n};\n\nexport let debugGetCommandsForAnchor = function( uiAnchor, commands ) {\n    if( uiAnchor && logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'command',\n            operation: 'contributedCommands',\n            payload: {\n                viewModel: 'commandsViewModel',\n                anchorName: uiAnchor,\n                commandsOnAchor: commands\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - All commands against anchor : %O ', declTraceObject );\n    }\n};\n\nexport let debugUpdateHandlerOnCommand = function( commandId, handler ) {\n    if( logger.isDeclarativeLogEnabled() && commandId && handler && !_.isEmpty( handler ) ) {\n        var declTraceObject = {\n            type: 'command',\n            operation: 'activeHandler',\n            payload: {\n                viewModel: 'commandsViewModel',\n                commandId: commandId,\n                handler: handler\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Update Handler : %O ', declTraceObject );\n    }\n};\n\nexport let debugCommandRender = function( command, result ) {\n    if( logger.isDeclarativeLogEnabled() && command && result && !_.isEmpty( command ) && !_.isEmpty( result ) ) {\n        var declTraceObject = {\n            type: 'command',\n            operation: 'commandRender',\n            payload: {\n                viewModel: 'commandsViewModel',\n                commandId: command.id,\n                command: command,\n                renderResult: result\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Command Render : %O ', declTraceObject );\n    }\n};\n\nexport let debugPreProcessingDataParser = function( sourceObj, declViewModel, dataParserDef, dataCtxNode ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataParser',\n            operation: 'preProcessing',\n            payload: {\n                viewModel: declViewModel._internal.panelId,\n                def: dataParserDef\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Pre processing of DataParser: %O ', declTraceObject );\n    }\n};\n\nexport let debugPostProcessingDataParser = function( processedSourceObj, declViewModel, dataParserDef, dataCtxNode ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataParser',\n            operation: 'postProcessing',\n            payload: {\n                viewModel: declViewModel._internal.panelId,\n                def: dataParserDef,\n                resolvedIput: processedSourceObj\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - post processing of DataParser: %O ', declTraceObject );\n    }\n};\n\nexport let debugDataProviderInitialize = function( dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction, resolvedInput ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataProvider',\n            operation: 'Initialize',\n            name: dataProvider.name,\n            payload: {\n                /** revisitme\n                viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n                */\n                def: dataProviderDef,\n                action: dataProvierAction,\n                resolvedIput: resolvedInput\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Initialize of Dataprovider: %O ', declTraceObject );\n    }\n};\n\nexport let debugDataProviderNextPage = function( dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataProvider',\n            operation: 'NextPage',\n            name: dataProvider.name,\n            payload: {\n                /** revisitme\n                viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n                */\n                def: dataProviderDef,\n                action: dataProvierAction\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - NextPage of Dataprovider: %O ', declTraceObject );\n    }\n};\n\nexport let debugConditions = function( conditionName, conditionState, conditionExp, declViewModel ) {\n    var declTraceObject = {\n        type: 'conditions',\n        payload: {\n            viewModel: declViewModel,\n            conditionName: conditionName,\n            expression: conditionExp,\n            conditionState: conditionState\n        }\n    };\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Conditions: %O ', declTraceObject );\n    }\n};\n\n/**\n *\n * @param {*} arguments[0] type of the breakpoint\n *\n */\nexport let debug = function() {\n    try {\n        if( !logger.isDeclarativeLogEnabled() ) {\n            return;\n        }\n\n        let brkPointType = arguments[ 0 ];\n\n        if( breakpointSvc.hasConditionSatisfied( brkPointType, arguments[ 1 ], arguments[ 2 ], arguments[ 3 ] ) ) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n\n        if( brkPointType === 'actions' ) {\n            switch ( arguments[ 3 ] ) {\n                case 'pre':\n                    debugActionStart( arguments[ 4 ], arguments[ 5 ], arguments[ 6 ] );\n                    break;\n                case 'post':\n                    debugActionEnd( arguments[ 4 ], arguments[ 5 ], arguments[ 6 ] );\n                    break;\n                case 'default': //do nothing\n                    break;\n            }\n        }\n        // eslint-disable-next-line no-empty\n    } catch ( e ) {}\n};\n\nlet printData = result => {\n    result.map( ( entry ) => {\n        entry.children.map( ( child ) => {\n            child.handlers.map( ( handler ) => {\n                logger.declarativeLog( ' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + child.id + '~' + handler.id + '~' + handler.activeWhen + '~' + handler\n                    .visibleWhen );\n            } );\n        } );\n\n        if( entry.children.length === 0 ) {\n            entry.handlers.map( ( handler ) => {\n                logger.declarativeLog( ' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + undefined + '~' + handler.id + '~' + handler.activeWhen + '~' + handler.visibleWhen );\n            } );\n        }\n    } );\n};\n\nconst procesHandler = handler => {\n    let singleHandler = {};\n    singleHandler.id = handler.id;\n    if( handler.activeWhen ) {\n        if( _.isObject( handler.activeWhen.expression ) ) {\n            singleHandler.activeWhen = JSON.stringify( handler.activeWhen.expression );\n        } else {\n            singleHandler.activeWhen = handler.activeWhen.expression;\n        }\n    }\n    if( handler.visibleWhen ) {\n        if( _.isObject( handler.visibleWhen.expression ) ) {\n            singleHandler.visibleWhen = JSON.stringify( handler.visibleWhen.expression );\n        } else {\n            singleHandler.visibleWhen = handler.visibleWhen.expression;\n        }\n    }\n    return singleHandler;\n};\n\nexport const reduceData = ( anchor, data ) => {\n    if( logger.isDeclarativeLogEnabled() ) {\n        let result = [];\n        data.map( ( obj ) => {\n            let singleResult = {\n                anchor,\n                id: '',\n                type: '',\n                children: [],\n                handlers: []\n            };\n            for( let key in obj ) {\n                if( key === 'id' ) {\n                    singleResult.id = obj.id;\n                }\n                if( key === 'type' ) {\n                    singleResult.type = obj.type;\n                }\n                if( key === 'children' ) {\n                    obj.children.map( ( child ) => {\n                        let singleChild = {\n                            id: '',\n                            handlers: []\n                        };\n                        singleChild.id = child.id;\n                        child.handlers.map( ( handler ) => {\n                            singleChild.handlers.push( procesHandler( handler ) );\n                        } );\n                        singleResult.children.push( singleChild );\n                    } );\n                }\n                if( key === 'handlers' ) {\n                    obj.handlers.map( ( handler ) => {\n                        singleResult.handlers.push( procesHandler( handler ) );\n                    } );\n                }\n            }\n            result.push( singleResult );\n        } );\n        printData( result );\n    }\n};\n\nexport default {\n    debugActionStart,\n    debugEventPub,\n    debugEventSub,\n    debugActionEnd,\n    debugMessages,\n    debugLifecyleHooks,\n    debugViewAndViewModel,\n    debugGetCommandsForAnchor,\n    debugCommandRender,\n    debugUpdateHandlerOnCommand,\n    debugPreProcessingDataParser,\n    debugPostProcessingDataParser,\n    debugDataProviderNextPage,\n    debugDataProviderInitialize,\n    debugConditions,\n    debug,\n    reduceData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
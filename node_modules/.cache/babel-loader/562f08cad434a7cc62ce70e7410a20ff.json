{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwLayoutSlotService.js\";\nimport cfgSvc from 'js/configurationService';\nimport { updateShortConditions } from 'js/commandConfigUtils.service';\nimport AwLayoutSlotInclude from 'viewmodel/AwLayoutSlotIncludeViewModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awLayoutSlotRenderFunction = props => {\n  const {\n    viewModel,\n    name,\n    context\n  } = props;\n  const {\n    data\n  } = viewModel;\n  const {\n    allSlotsJson\n  } = data;\n  return allSlotsJson ? /*#__PURE__*/_jsxDEV(AwLayoutSlotInclude, {\n    name: name,\n    context: context,\n    allSlotsJson: allSlotsJson\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 27\n  }, this) : '';\n};\n\nconst loadLayoutSlots = async () => {\n  return await cfgSvc.getCfg('layoutSlots').then(allSlotsJson => {\n    if (allSlotsJson.slots) {\n      updateShortConditions(allSlotsJson, allSlotsJson.slots);\n      return allSlotsJson;\n    }\n  });\n};\n\nexport const initialize = () => {\n  return loadLayoutSlots().then(allSlotsJson => {\n    return allSlotsJson;\n  });\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwLayoutSlotService.js"],"names":["awLayoutSlotRenderFunction","props","context","data","allSlotsJson","loadLayoutSlots","updateShortConditions","initialize"],"mappings":";AAAA,OAAA,MAAA,MAAA,yBAAA;AACA,SAAA,qBAAA,QAAA,+BAAA;AACA,OAAA,mBAAA,MAAA,wCAAA;;AAEA,OAAO,MAAMA,0BAA0B,GAAKC,KAAF,IAAa;EACnD,MAAM;IAAA,SAAA;IAAA,IAAA;IAAmBC;EAAnB,IAAN,KAAA;EACA,MAAM;IAAEC;EAAF,IAAN,SAAA;EACA,MAAM;IAAEC;EAAF,IAAN,IAAA;EACA,OAAOA,YAAY,GAAA,aAAG,OAAA,CAAA,mBAAA,EAAA;IAAqB,IAAI,EAAzB,IAAA;IAAiC,OAAO,EAAxC,OAAA;IAAmD,YAAY,EAAEA;EAAjE,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,CAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EAAH,IAAG,CAAH,GAAnB,EAAA;AAJG,CAAA;;AAOP,MAAMC,eAAe,GAAG,YAAY;EAChC,OAAO,MAAM,MAAM,CAAN,MAAA,CAAA,aAAA,EAAA,IAAA,CAAqCD,YAAY,IAAI;IAC9D,IAAIA,YAAY,CAAhB,KAAA,EAAyB;MACrBE,qBAAqB,CAAA,YAAA,EAAgBF,YAAY,CAAjDE,KAAqB,CAArBA;MACA,OAAA,YAAA;IACH;EAJL,CAAa,CAAb;AADJ,CAAA;;AASA,OAAO,MAAMC,UAAU,GAAG,MAAM;EAC5B,OAAO,eAAe,GAAf,IAAA,CAAwBH,YAAY,IAAI;IAC3C,OAAA,YAAA;EADJ,CAAO,CAAP;AADG,CAAA","sourcesContent":["import cfgSvc from 'js/configurationService';\nimport { updateShortConditions } from 'js/commandConfigUtils.service';\nimport AwLayoutSlotInclude from 'viewmodel/AwLayoutSlotIncludeViewModel';\n\nexport const awLayoutSlotRenderFunction = ( props ) => {\n    const { viewModel, name, context } = props;\n    const { data } = viewModel;\n    const { allSlotsJson } = data;\n    return allSlotsJson ? <AwLayoutSlotInclude name={name} context={context} allSlotsJson={allSlotsJson}></AwLayoutSlotInclude> : '';\n};\n\nconst loadLayoutSlots = async () => {\n    return await cfgSvc.getCfg( 'layoutSlots' ).then( allSlotsJson => {\n        if( allSlotsJson.slots ) {\n            updateShortConditions( allSlotsJson, allSlotsJson.slots );\n            return allSlotsJson;\n        }\n    } );\n};\n\nexport const initialize = () => {\n    return loadLayoutSlots().then( allSlotsJson => {\n        return allSlotsJson;\n    } );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @module js/splmStatsClientReporter\n */\nimport eventBus from 'js/eventBus';\n/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @class SPLMStatsClientReporter\n */\n\nfunction SPLMStatsClientReporter() {\n  let self = this;\n  var _plStatsData = {};\n  /**\n   *\n   * @returns {Object} _plStatsData - Object holding plStatsData to display on performance monitor panel\n   */\n\n  self.getPLStatsData = function () {\n    return _plStatsData;\n  };\n  /**\n   * @param {Object} performanceObject - Performance object to be extracted and global app context to be updated\n   */\n\n\n  self.report = function (performanceObject) {\n    let browserType = performanceObject.BrowserType;\n    let tti = (performanceObject.TTI / 1000).toFixed(2) + ' s'; // let scriptingTime = ( performanceObject.scriptTime / 1000 ).toFixed( 2 ) + ' s';\n\n    let totalNetworkTime = (performanceObject.totalNetworkTime / 1000).toFixed(2) + ' s';\n    let soaCount = performanceObject.Network.SoaDetails.filter(function (networkCall) {\n      return networkCall.logCorrelationID !== 0;\n    }).length;\n    let totalHttpRequests = performanceObject.Network.totalHttpRequests;\n    let memoryStart = performanceObject.MemoryStart;\n    let memoryEnd = performanceObject.MemoryEnd;\n    let memoryUsed = performanceObject.MemoryUsed;\n    let memoryConsumed = performanceObject.MemoryConsumption;\n\n    if (memoryUsed === 0 || memoryConsumed === 0) {\n      memoryStart = 'Not Supported';\n      memoryEnd = 'Not Supported';\n    } else {\n      memoryStart = (memoryStart / 1024000).toFixed(0) + ' MB';\n      memoryEnd = (memoryEnd / 1024000).toFixed(0) + ' MB';\n    }\n\n    let domNodeCount = performanceObject.DOM.elemCount;\n    let domTreeDepth = performanceObject.DOM.DOMTreeDepth;\n    let uniqueComponents = performanceObject.Component.uniqueComponents;\n    let componentRenders = performanceObject.Component.componentRenders;\n    _plStatsData = {\n      browserType,\n      tti,\n      totalNetworkTime,\n      soaCount,\n      totalHttpRequests,\n      memoryStart,\n      memoryEnd,\n      domNodeCount,\n      domTreeDepth,\n      uniqueComponents,\n      componentRenders\n    };\n    eventBus.publish('plStats.update');\n  };\n}\n\n_c2 = SPLMStatsClientReporter;\n_c = SPLMStatsClientReporter;\nexport default SPLMStatsClientReporter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsClientReporter\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsClientReporter\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsClientReporter.js"],"names":["SPLMStatsClientReporter","self","_plStatsData","browserType","performanceObject","tti","totalNetworkTime","soaCount","networkCall","totalHttpRequests","memoryStart","memoryEnd","memoryUsed","memoryConsumed","domNodeCount","domTreeDepth","uniqueComponents","componentRenders","eventBus"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAA,QAAA,MAAA,aAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,uBAAA,GAAmC;EAC/B,IAAIC,IAAI,GAAR,IAAA;EACA,IAAIC,YAAY,GAAhB,EAAA;EAEA;AACJ;AACA;AACA;;EACID,IAAI,CAAJA,cAAAA,GAAsB,YAAW;IAC7B,OAAA,YAAA;EADJA,CAAAA;EAIA;AACJ;AACA;;;EACIA,IAAI,CAAJA,MAAAA,GAAc,UAAA,iBAAA,EAA8B;IACxC,IAAIE,WAAW,GAAGC,iBAAiB,CAAnC,WAAA;IACA,IAAIC,GAAG,GAAG,CAAED,iBAAiB,CAAjBA,GAAAA,GAAF,IAAA,EAAA,OAAA,CAAA,CAAA,IAF8B,IAExC,CAFwC,CAGxC;;IACA,IAAIE,gBAAgB,GAAG,CAAEF,iBAAiB,CAAjBA,gBAAAA,GAAF,IAAA,EAAA,OAAA,CAAA,CAAA,IAAvB,IAAA;IACA,IAAIG,QAAQ,GAAG,iBAAiB,CAAjB,OAAA,CAAA,UAAA,CAAA,MAAA,CAA6C,UAAA,WAAA,EAAwB;MAChF,OAAOC,WAAW,CAAXA,gBAAAA,KAAP,CAAA;IADW,CAAA,EAAf,MAAA;IAGA,IAAIC,iBAAiB,GAAGL,iBAAiB,CAAjBA,OAAAA,CAAxB,iBAAA;IACA,IAAIM,WAAW,GAAGN,iBAAiB,CAAnC,WAAA;IACA,IAAIO,SAAS,GAAGP,iBAAiB,CAAjC,SAAA;IACA,IAAIQ,UAAU,GAAGR,iBAAiB,CAAlC,UAAA;IACA,IAAIS,cAAc,GAAGT,iBAAiB,CAAtC,iBAAA;;IACA,IAAIQ,UAAU,KAAVA,CAAAA,IAAoBC,cAAc,KAAtC,CAAA,EAA+C;MAC3CH,WAAW,GAAXA,eAAAA;MACAC,SAAS,GAATA,eAAAA;IAFJ,CAAA,MAGO;MACHD,WAAW,GAAG,CAAEA,WAAW,GAAb,OAAA,EAAA,OAAA,CAAA,CAAA,IAAdA,KAAAA;MACAC,SAAS,GAAG,CAAEA,SAAS,GAAX,OAAA,EAAA,OAAA,CAAA,CAAA,IAAZA,KAAAA;IACH;;IACD,IAAIG,YAAY,GAAGV,iBAAiB,CAAjBA,GAAAA,CAAnB,SAAA;IACA,IAAIW,YAAY,GAAGX,iBAAiB,CAAjBA,GAAAA,CAAnB,YAAA;IACA,IAAIY,gBAAgB,GAAGZ,iBAAiB,CAAjBA,SAAAA,CAAvB,gBAAA;IACA,IAAIa,gBAAgB,GAAGb,iBAAiB,CAAjBA,SAAAA,CAAvB,gBAAA;IAEAF,YAAY,GAAG;MAAA,WAAA;MAAA,GAAA;MAAA,gBAAA;MAAA,QAAA;MAAA,iBAAA;MAAA,WAAA;MAAA,SAAA;MAAA,YAAA;MAAA,YAAA;MAAA,gBAAA;MAWXe;IAXW,CAAff;IAaAgB,QAAQ,CAARA,OAAAA,CAAAA,gBAAAA;EAtCJjB,CAAAA;AAwCH;;MAvDD,uB;KAASD,uB;AAyDT,eAAA,uBAAA","sourcesContent":["/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @module js/splmStatsClientReporter\n */\n\nimport eventBus from 'js/eventBus';\n\n/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @class SPLMStatsClientReporter\n */\nfunction SPLMStatsClientReporter() {\n    let self = this;\n    var _plStatsData = {};\n\n    /**\n     *\n     * @returns {Object} _plStatsData - Object holding plStatsData to display on performance monitor panel\n     */\n    self.getPLStatsData = function() {\n        return _plStatsData;\n    };\n\n    /**\n     * @param {Object} performanceObject - Performance object to be extracted and global app context to be updated\n     */\n    self.report = function( performanceObject ) {\n        let browserType = performanceObject.BrowserType;\n        let tti = ( performanceObject.TTI / 1000 ).toFixed( 2 ) + ' s';\n        // let scriptingTime = ( performanceObject.scriptTime / 1000 ).toFixed( 2 ) + ' s';\n        let totalNetworkTime = ( performanceObject.totalNetworkTime / 1000 ).toFixed( 2 ) + ' s';\n        let soaCount = performanceObject.Network.SoaDetails.filter( function( networkCall ) {\n            return networkCall.logCorrelationID !== 0;\n        } ).length;\n        let totalHttpRequests = performanceObject.Network.totalHttpRequests;\n        let memoryStart = performanceObject.MemoryStart;\n        let memoryEnd = performanceObject.MemoryEnd;\n        let memoryUsed = performanceObject.MemoryUsed;\n        let memoryConsumed = performanceObject.MemoryConsumption;\n        if( memoryUsed === 0 || memoryConsumed === 0 ) {\n            memoryStart = 'Not Supported';\n            memoryEnd = 'Not Supported';\n        } else {\n            memoryStart = ( memoryStart / 1024000 ).toFixed( 0 ) + ' MB';\n            memoryEnd = ( memoryEnd / 1024000 ).toFixed( 0 ) + ' MB';\n        }\n        let domNodeCount = performanceObject.DOM.elemCount;\n        let domTreeDepth = performanceObject.DOM.DOMTreeDepth;\n        let uniqueComponents = performanceObject.Component.uniqueComponents;\n        let componentRenders = performanceObject.Component.componentRenders;\n\n        _plStatsData = {\n            browserType,\n            tti,\n            totalNetworkTime,\n            soaCount,\n            totalHttpRequests,\n            memoryStart,\n            memoryEnd,\n            domNodeCount,\n            domTreeDepth,\n            uniqueComponents,\n            componentRenders\n        };\n        eventBus.publish( 'plStats.update' );\n    };\n}\n\nexport default SPLMStatsClientReporter;\n"]},"metadata":{},"sourceType":"module"}
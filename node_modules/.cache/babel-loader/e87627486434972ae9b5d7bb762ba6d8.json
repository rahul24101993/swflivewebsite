{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This utility module provides helpful functions intended to efficiently manipulate array contents.\n *\n * @module js/arrayUtils\n */import _ from'lodash';var exports={};/**\n * Insert a 'source' array into a 'target' array starting at a given location.\n *\n * @param {ObjectArray} targetArray - Array elements where the 'source' element will be inserted into.\n *\n * @param {Number} index - The index in the 'target' array *at which* the 1st 'source' element should be placed\n *            (e.g. '0' indicates the 1st 'source' element will be the 1st element in the 'target' when done).\n *\n * @param {ObjectArray} sourceArray - Array elements to be inserted into the 'target' array.\n */export let insert=function(targetArray,index,sourceArray){/**\n     * Check for simple case of appending into an empty array.\n     */if(targetArray.length===0&&index===0){_.forEach(sourceArray,function(value){targetArray.push(value);});}else{index=Math.min(index,targetArray.length);var destNdx=index+1;_.forEach(sourceArray,function(sourceObj){targetArray.splice(destNdx,0,sourceObj);destNdx++;});}};/**\n * Insert a 'source' array into a 'target' array starting at just before a given location.\n *\n * @param {ObjectArray} targetArray - Array elements where the 'source' elements will be inserted into.\n *\n * @param {Number} index - The index in the 'target' array *at which* the last 'source' element should be placed\n *            (i.e. 'source' elements are inserted such that the last element of the 'source' would be placed before\n *            the element currently at this index).\n *\n * @param {ObjectArray} sourceArray - Array elements to be inserted into the 'target' array.\n */export let insertBefore=function(targetArray,index,sourceArray){/**\n     * Check for simple case of appending into an empty array.\n     */if(targetArray.length===0&&index===0){_.forEach(sourceArray,function(value){targetArray.push(value);});}else{index=Math.min(index,targetArray.length);var destNdx=index;_.forEach(sourceArray,function(sourceObj){targetArray.splice(destNdx,0,sourceObj);destNdx++;});}};exports={insert,insertBefore};export default exports;","map":null,"metadata":{},"sourceType":"module"}
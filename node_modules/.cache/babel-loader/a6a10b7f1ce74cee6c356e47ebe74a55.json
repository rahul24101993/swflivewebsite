{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwNavigateBreadcrumbItemService.js\"; // Copyright (c) 2021 Siemens\n\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\n/**\n * Method to publish analytics to server\n * @param {Object} crumb - crumb object for the selected/clicked crumb\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst publishAnalytics = crumb => {\n  let sanEvent = {\n    sanAnalyticsType: 'Breadcrumb',\n    sanCommandId: 'navigateBreadcrumb',\n    sanCommandTitle: crumb.displayName\n  };\n  analyticsSvc.logCommands(sanEvent);\n};\n\nexport const awNavigateBreadcrumbItemRenderFn = props => {\n  let {\n    crumb,\n    popuplist,\n    actions,\n    chevronClick,\n    iconId,\n    overflowedCrumbs\n  } = props;\n  let {\n    chevronPopup\n  } = actions;\n\n  const setScopedCrumb = (crumb, e) => {\n    e.preventDefault();\n\n    if (crumb.onCrumbClick) {\n      crumb.onCrumbClick(crumb, e);\n    }\n\n    publishAnalytics(crumb);\n  };\n\n  const getClassNames = () => {\n    const classNames = ['aw-widgets-breadCrumbOverflow'];\n\n    if (!crumb.selectedCrumb && !crumb.willOverflow) {\n      classNames.push('sw-aria-border aw-widgets-crumbLink');\n    } else if (crumb.selectedCrumb && !crumb.willOverflow) {\n      classNames.push('aw-widgets-selectedCrumb');\n    }\n\n    if (crumb.primaryCrumb) {\n      classNames.push('aw-widgets-primaryCrumb');\n    }\n\n    return classNames.join(' ');\n  };\n\n  const hooks = {\n    whenClosed: () => {\n      chevronClick(-1);\n    }\n  };\n\n  const handleChevronPopup = e => {\n    e.preventDefault();\n\n    if (popuplist) {\n      chevronPopup.show({ ...chevronPopup.options,\n        hooks\n      });\n      chevronClick(crumb.index);\n    }\n  };\n\n  const getButtonClassNames = () => {\n    const className = ['aw-jswidget-controlArrow'];\n\n    if (crumb.rotate) {\n      className.push('aw-jswidget-controlArrowRotateRight');\n    }\n\n    return className.join(' ');\n  };\n\n  const createPopupContent = () => {\n    if (overflowedCrumbs && overflowedCrumbs.length) {\n      return /*#__PURE__*/_jsxDEV(AwPopup, { ...chevronPopup.options,\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"aw-widgets-cellListWidget\",\n          children: overflowedCrumbs.map(crumb => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"aw-widgets-cellListItem aw-widgets-cellTop\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: e => setScopedCrumb(crumb, e),\n              className: \"sw-aria-border aw-widgets-crumbLink aw-widgets-breadCrumbOverflow\",\n              children: crumb.displayName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, crumb.displayName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 58\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(AwPopup, { ...chevronPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwInclude, {\n        selectedCrumb: crumb,\n        chevronPopup: chevronPopup,\n        name: popuplist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-row justify-space-around\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      \"data-locator\": \"aw-breadcrumb\",\n      className: getClassNames(),\n      title: crumb.displayName,\n      onClick: e => setScopedCrumb(crumb, e),\n      children: [crumb.displayName, crumb.objectsCountDisplay]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), iconId && /*#__PURE__*/_jsxDEV(AwButton, {\n      domRef: chevronPopup.reference,\n      \"data-locator\": \"aw-controlArrow\",\n      className: getButtonClassNames(),\n      \"aria-label\": \"Breadcrumb\",\n      iconId: iconId,\n      action: handleChevronPopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), chevronPopup.open && createPopupContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwNavigateBreadcrumbItemService.js"],"names":["publishAnalytics","crumb","sanEvent","sanAnalyticsType","sanCommandId","sanCommandTitle","displayName","analyticsSvc","awNavigateBreadcrumbItemRenderFn","props","overflowedCrumbs","chevronPopup","setScopedCrumb","e","getClassNames","classNames","hooks","whenClosed","chevronClick","handleChevronPopup","getButtonClassNames","className","createPopupContent","popuplist","iconId"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\n\n/**\n * Method to publish analytics to server\n * @param {Object} crumb - crumb object for the selected/clicked crumb\n */\nconst publishAnalytics = ( crumb ) => {\n    let sanEvent = {\n        sanAnalyticsType: 'Breadcrumb',\n        sanCommandId: 'navigateBreadcrumb',\n        sanCommandTitle: crumb.displayName\n    };\n    analyticsSvc.logCommands( sanEvent );\n};\n\nexport const awNavigateBreadcrumbItemRenderFn = ( props ) => {\n    let { crumb, popuplist, actions, chevronClick, iconId, overflowedCrumbs } = props;\n    let { chevronPopup } = actions;\n    const setScopedCrumb = ( crumb, e ) => {\n        e.preventDefault();\n        if( crumb.onCrumbClick ) {\n            crumb.onCrumbClick( crumb, e );\n        }\n        publishAnalytics( crumb );\n    };\n\n    const getClassNames = () => {\n        const classNames = [ 'aw-widgets-breadCrumbOverflow' ];\n        if( !crumb.selectedCrumb && !crumb.willOverflow ) {\n            classNames.push( 'sw-aria-border aw-widgets-crumbLink' );\n        } else if( crumb.selectedCrumb && !crumb.willOverflow ) {\n            classNames.push( 'aw-widgets-selectedCrumb' );\n        }\n        if( crumb.primaryCrumb ) {\n            classNames.push( 'aw-widgets-primaryCrumb' );\n        }\n        return classNames.join( ' ' );\n    };\n\n    const hooks = {\n        whenClosed: () => {\n            chevronClick( -1 );\n        }\n    };\n\n    const handleChevronPopup = ( e ) => {\n        e.preventDefault();\n        if( popuplist ) {\n            chevronPopup.show( { ...chevronPopup.options, hooks } );\n            chevronClick( crumb.index );\n        }\n    };\n\n    const getButtonClassNames = () => {\n        const className = [ 'aw-jswidget-controlArrow' ];\n        if( crumb.rotate ) {\n            className.push( 'aw-jswidget-controlArrowRotateRight' );\n        }\n        return className.join( ' ' );\n    };\n\n    const createPopupContent = () => {\n        if( overflowedCrumbs && overflowedCrumbs.length ) {\n            return (\n                <AwPopup {...chevronPopup.options}>\n                    <ul className='aw-widgets-cellListWidget'>\n                        { overflowedCrumbs.map( crumb => <li className='aw-widgets-cellListItem aw-widgets-cellTop' key={ crumb.displayName }>\n                            <button type='button' onClick={ ( e )=>setScopedCrumb( crumb, e ) } className='sw-aria-border aw-widgets-crumbLink aw-widgets-breadCrumbOverflow'>{ crumb.displayName }</button>\n                        </li> ) }\n                    </ul>\n                </AwPopup>\n            );\n        }\n        return (\n            <AwPopup {...chevronPopup.options}>\n                <AwInclude\n                    selectedCrumb= {crumb}\n                    chevronPopup= {chevronPopup}\n                    name={popuplist}\n                ></AwInclude>\n            </AwPopup>\n        );\n    };\n\n    return (\n        <div className='sw-row justify-space-around'>\n            <button\n                data-locator='aw-breadcrumb'\n                className={getClassNames()}\n                title={crumb.displayName}\n                onClick={ ( e )=>setScopedCrumb( crumb, e ) }>\n                {crumb.displayName}{crumb.objectsCountDisplay}\n            </button>\n            { iconId &&\n                <AwButton\n                    domRef={chevronPopup.reference}\n                    data-locator='aw-controlArrow'\n                    className={getButtonClassNames()}\n                    aria-label='Breadcrumb'\n                    iconId={iconId}\n                    action={handleChevronPopup}>\n                </AwButton>\n            }\n            {\n                chevronPopup.open &&\n                createPopupContent()\n            }\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
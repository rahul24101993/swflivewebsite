{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used by <aw-flex-row> and <aw-flex-column> to get the justification and align-content values\n * @module js/awFlexService\n */\nimport _ from 'lodash';\nimport 'js/logger';\nlet exports = {}; // eslint-disable-line no-invalid-this\n\nexport let getJustifyValue = function (justify) {\n  var justifyValue = '';\n\n  if (justify) {\n    switch (justify) {\n      case 'left':\n      case 'top':\n        justifyValue = 'flex-start';\n        break;\n\n      case 'center':\n        justifyValue = 'center';\n        break;\n\n      case 'right':\n      case 'bottom':\n        justifyValue = 'flex-end';\n        break;\n\n      case 'space-between':\n        justifyValue = 'space-between';\n        break;\n\n      case 'space-around':\n        justifyValue = 'space-around';\n        break;\n\n      case 'space-evenly':\n        justifyValue = 'space-evenly';\n        break;\n    }\n  }\n\n  return justifyValue;\n};\nexport let getAlignContentValue = function (alignContent) {\n  var alignContentValue = '';\n\n  if (alignContent) {\n    switch (alignContent) {\n      case 'start':\n        alignContentValue = 'flex-start';\n        break;\n\n      case 'center':\n        alignContentValue = 'center';\n        break;\n\n      case 'end':\n        alignContentValue = 'flex-end';\n        break;\n\n      case 'stretch':\n        alignContentValue = 'stretch';\n        break;\n    }\n  }\n\n  return alignContentValue;\n};\nexport let getDimensionClass = function (attrs, elements, dimension) {\n  var dimensionClass = 'flex-auto';\n  var styleDimension = '';\n\n  if (attrs[dimension]) {\n    if (_.endsWith(attrs[dimension], 'f')) {\n      styleDimension = attrs[dimension].substring(0, attrs[dimension].length - 1) + 'em';\n      dimensionClass = 'afx-static-size';\n    } else if (attrs[dimension] === 'auto') {\n      dimensionClass = 'afx-static-size';\n    } else if (attrs[dimension] !== 'fill') {\n      dimensionClass = dimension + '-' + attrs[dimension];\n    }\n  }\n\n  return {\n    dimensionClass: dimensionClass,\n    styleDimension: styleDimension\n  };\n};\nexport let getClasses = function (config) {\n  var offsetFixed;\n  var classArray = [];\n\n  _.forEach(config, function (value, key) {\n    if (value) {\n      if (_.includes(key, 'offset') && _.endsWith(value, 'f')) {\n        offsetFixed = value.substring(0, value.length - 1);\n        classArray.push(key + 'Fixed-' + offsetFixed);\n      } else if (_.includes(key, 'wrap')) {\n        classArray.push('aw-layout-' + value);\n      } else {\n        classArray.push(key + '-' + value);\n      }\n    }\n  });\n\n  return classArray;\n};\nexport let setResponsiveClasses = function (responsiveValues, elements) {\n  var values = responsiveValues.split(',');\n  values.forEach(function (mode) {\n    var deviceMode = mode.split(':')[0].trim();\n    var size = parseInt(mode.split(':')[1]);\n    elements.addClass('aw-' + deviceMode + '-' + size);\n    elements.removeClass('flex-auto');\n  });\n};\nexport let getStyles = function (config, attrs, elements, dimension) {\n  config.justify = exports.getJustifyValue(attrs.justify);\n  config.align = exports.getAlignContentValue(attrs.alignContent);\n  var dimensionClassObj = exports.getDimensionClass(attrs, elements, dimension);\n  var dimensionClass = dimensionClassObj.dimensionClass;\n\n  if (attrs.wrapStyle) {\n    config.wrap = attrs.wrapStyle;\n  }\n\n  var classes = exports.getClasses(config);\n  classes.push(dimensionClass);\n\n  if (attrs.className) {\n    classes.push(attrs.className);\n  }\n\n  const styles = {};\n\n  if (attrs.color) {\n    styles.backgroundColor = attrs.color;\n  }\n\n  if (dimensionClassObj.styleDimension) {\n    styles[dimension] = dimensionClassObj.styleDimension;\n  }\n\n  return {\n    classes: classes.join(' '),\n    styles: styles\n  };\n};\nexports = {\n  getJustifyValue,\n  getAlignContentValue,\n  getDimensionClass,\n  getClasses,\n  setResponsiveClasses,\n  getStyles\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/awFlexService.js"],"names":["exports","getJustifyValue","justifyValue","getAlignContentValue","alignContentValue","getDimensionClass","dimensionClass","styleDimension","attrs","_","dimension","getClasses","classArray","offsetFixed","value","key","setResponsiveClasses","values","responsiveValues","deviceMode","mode","size","parseInt","elements","getStyles","config","dimensionClassObj","classes","styles"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used by <aw-flex-row> and <aw-flex-column> to get the justification and align-content values\n * @module js/awFlexService\n */\nimport _ from 'lodash';\nimport 'js/logger';\n\nlet exports = {}; // eslint-disable-line no-invalid-this\n\nexport let getJustifyValue = function( justify ) {\n    var justifyValue = '';\n    if( justify ) {\n        switch ( justify ) {\n            case 'left':\n            case 'top':\n                justifyValue = 'flex-start';\n                break;\n            case 'center':\n                justifyValue = 'center';\n                break;\n            case 'right':\n            case 'bottom':\n                justifyValue = 'flex-end';\n                break;\n            case 'space-between':\n                justifyValue = 'space-between';\n                break;\n            case 'space-around':\n                justifyValue = 'space-around';\n                break;\n            case 'space-evenly':\n                justifyValue = 'space-evenly';\n                break;\n        }\n    }\n\n    return justifyValue;\n};\n\nexport let getAlignContentValue = function( alignContent ) {\n    var alignContentValue = '';\n    if( alignContent ) {\n        switch ( alignContent ) {\n            case 'start':\n                alignContentValue = 'flex-start';\n                break;\n            case 'center':\n                alignContentValue = 'center';\n                break;\n            case 'end':\n                alignContentValue = 'flex-end';\n                break;\n            case 'stretch':\n                alignContentValue = 'stretch';\n                break;\n        }\n    }\n\n    return alignContentValue;\n};\n\nexport let getDimensionClass = function( attrs, elements, dimension ) {\n    var dimensionClass = 'flex-auto';\n    var styleDimension = '';\n\n    if( attrs[ dimension ] ) {\n        if( _.endsWith( attrs[ dimension ], 'f' ) ) {\n            styleDimension = attrs[ dimension ].substring( 0, attrs[ dimension ].length - 1 ) + 'em';\n            dimensionClass = 'afx-static-size';\n        } else if( attrs[ dimension ] === 'auto' ) {\n            dimensionClass = 'afx-static-size';\n        } else if( attrs[ dimension ] !== 'fill' ) {\n            dimensionClass = dimension + '-' + attrs[ dimension ];\n        }\n    }\n    return {\n        dimensionClass: dimensionClass,\n        styleDimension: styleDimension\n    };\n};\n\nexport let getClasses = function( config ) {\n    var offsetFixed;\n    var classArray = [];\n    _.forEach( config, function( value, key ) {\n        if( value ) {\n            if( _.includes( key, 'offset' ) && _.endsWith( value, 'f' ) ) {\n                offsetFixed = value.substring( 0, value.length - 1 );\n                classArray.push( key + 'Fixed-' + offsetFixed );\n            } else if( _.includes( key, 'wrap' ) ) {\n                classArray.push( 'aw-layout-' + value );\n            } else {\n                classArray.push( key + '-' + value );\n            }\n        }\n    } );\n\n    return classArray;\n};\n\nexport let setResponsiveClasses = function( responsiveValues, elements ) {\n    var values = responsiveValues.split( ',' );\n    values.forEach( function( mode ) {\n        var deviceMode = mode.split( ':' )[ 0 ].trim();\n        var size = parseInt( mode.split( ':' )[ 1 ] );\n        elements.addClass( 'aw-' + deviceMode + '-' + size );\n        elements.removeClass( 'flex-auto' );\n    } );\n};\n\nexport let getStyles = function( config, attrs, elements, dimension ) {\n    config.justify = exports.getJustifyValue( attrs.justify );\n    config.align = exports.getAlignContentValue( attrs.alignContent );\n    var dimensionClassObj = exports.getDimensionClass( attrs, elements, dimension );\n    var dimensionClass = dimensionClassObj.dimensionClass;\n\n    if( attrs.wrapStyle ) {\n        config.wrap = attrs.wrapStyle;\n    }\n\n    var classes = exports.getClasses( config );\n    classes.push( dimensionClass );\n\n    if( attrs.className ) {\n        classes.push( attrs.className );\n    }\n\n    const styles = {};\n    if( attrs.color ) {\n        styles.backgroundColor = attrs.color;\n    }\n    if( dimensionClassObj.styleDimension ) {\n        styles[ dimension ] = dimensionClassObj.styleDimension;\n    }\n\n    return {\n        classes: classes.join( ' ' ),\n        styles: styles\n    };\n};\n\nexports = {\n    getJustifyValue,\n    getAlignContentValue,\n    getDimensionClass,\n    getClasses,\n    setResponsiveClasses,\n    getStyles\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
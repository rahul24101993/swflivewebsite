{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This module provides a way for declarative framework to do outgoing calls in batch\n *\n * @module js/batchActionService\n *\n * @namespace batchActionService\n */import AwPromiseService from'js/awPromiseService';import conditionSvc from'js/conditionService';import declarativeDataCtxService from'js/declarativeDataCtxService';import _ from'lodash';import declUtils from'js/declUtils';import moduleLoader from'js/moduleLoader';import logger from'js/logger';/**\n * Define public API\n */var exports={};/**\n * Execute the given 'all actions in Steps' using the given related parameters\n *\n * @param {DeclViewModel} declViewModel - The DeclViewModel the DeclAction is a member of.\n * @param {DeclAction} batchActions - The DeclAction to execute.\n * @param {Object} dataCtxNode - The data context to use during execution.\n *\n */export let executeBatchActions=function(declViewModel,batchActions,dataCtxNode,actionService){var tasks=[];if(!declUtils.isValidModelAndDataCtxNode(declViewModel,dataCtxNode)){return undefined;}if(batchActions.steps){for(var step=0;step<batchActions.steps.length;step++){tasks.push(exports._executeActionWrapper(batchActions.steps[step],declViewModel,dataCtxNode,actionService));}}return tasks.reduce(function(promiseChain,task){return promiseChain.then(function(respData){return task(respData);});},AwPromiseService.instance.resolve());};/**\n * Execute the given 'action' using the given related parameters\n *\n * @param {DeclViewModel} declViewModel - The DeclViewModel the DeclAction is a member of.\n * @param {DeclAction} step - The DeclAction to execute.\n * @param {Object} dataCtxNode - The data context to use during execution.\n * @param {Object} index - The current index of action in Steps\n * @param {Object[]} steps - The steps under 'batch' action type\n * @param {Object} actionService - The referance to action service\n * @param {Object} actionResp - the action Response\n *\n */const parseConditonExp=(expression,evaluationEnv)=>{//This is not acomplete fix, needs to be revisited - LCS-565498\nconst exp=conditionSvc.getRealExpression(expression,evaluationEnv);if(_.isString(exp)){return exp;}//If the condition is object based, return the original expression\nreturn expression;};export let _executeActionWrapper=function(stepDef,declViewModel,dataCtxNode,actionService){return function(actionResp){var action=null;var outputFlag=false;var inputArgs=null;if(declViewModel._internal.actions){action=declViewModel._internal.actions[stepDef.action];}var conditionResult=false;if(stepDef.outputArg&&action){outputFlag=true;action.outputArg=_.cloneDeep(stepDef.outputArg);}let localContext=declUtils.getLatestContext(dataCtxNode,declViewModel);localContext.response=actionResp;localContext={...localContext,...declViewModel.atomicData};if(stepDef.condition){var conditionExpression=parseConditonExp(stepDef.condition,declViewModel._internal);if(conditionExpression!==null){conditionResult=conditionSvc.evaluateCondition(localContext,conditionExpression);}// if conditionResult is undefined or null we should consider result as false.\nif(!conditionResult){conditionResult=false;}}var isEventExecutable=stepDef.condition&&conditionResult||!stepDef.condition;if(isEventExecutable){if(stepDef.inputArg){inputArgs=_.cloneDeep(stepDef.inputArg);try{declarativeDataCtxService.applyScope(localContext.data,inputArgs,null,actionResp,null);}catch(error){throw new Error(error);}if(localContext&&localContext.scope){localContext.scope.parameters=inputArgs?inputArgs:null;}else{localContext={...localContext,parameters:inputArgs?inputArgs:null};}}if(action.deps){/** action ID will be used for better logging */action.actionId=stepDef.action;var doAction=function(depModuleObj){if(declViewModel.isDestroyed()){logger.warn('Attempt to execute a command after its DeclViewModel was destroyed...'+'\\n'+'Action was therefore not executed...continuing.'+'\\n'+//\n'DeclViewModel: '+declViewModel+'\\n'+//\n'Action       : '+stepDef.action);}else{/**\n                         * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action\n                         * event processing was started.\n                         */var localDataCtx=declUtils.resolveLocalDataCtx(localContext.data,localContext);// _deps will be undefined when try to load viewModelService inside itself\nvar _depModuleObj=depModuleObj;return actionService.executeAction(localContext.data,action,localDataCtx,_depModuleObj,outputFlag);}return undefined;};return moduleLoader.loadDependentModule(action.deps).then(doAction);}return actionService.executeAction(localContext.data,action,localContext,null,outputFlag);}return AwPromiseService.instance.resolve(actionResp);};};exports={executeBatchActions,_executeActionWrapper};export default exports;","map":null,"metadata":{},"sourceType":"module"}
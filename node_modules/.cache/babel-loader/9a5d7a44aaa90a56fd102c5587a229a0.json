{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Service to set color decorators on a vmo.\n *\n * @module js/colorDecoratorService\n */import appCtxSvc from'js/appCtxService';import cfgSvc from'js/configurationService';import commandsMapSvc from'js/commandsMapService';import awDuiLocalizationSvc from'js/awDuiLocalizationService';import _ from'lodash';import moduleLoader from'js/moduleLoader';import parsingUtil from'js/parsingUtils';import eventBus from'js/eventBus';import conditionSvc from'js/conditionService';/**\n * {Object} Map of decorator name versus the decorator definition as configured in the application.\n */var _decoratorProviders;/**\n * {StringMap} Map of cached dependent module names to the async loaded module objects.\n */var _mapModuleNameToModuleObject={};/**\n * {StringMap} Map of cached dependent module names to its proper (camelCase) associated service name.\n */var _mapModuleNameToServiceName={};/**\n * {StringMap} Map of cached decorator name i18n key to its localized values\n */var _mapDecoratorI18nKeyToLocalizedTitle={};/**\n * @param {JSONObject} decoratorJson -\n * @return {ModuleObject}\n */function _getModuleObject(decoratorJson){var serviceName=_mapModuleNameToServiceName[decoratorJson.deps];if(!serviceName){serviceName=_.camelCase([decoratorJson.deps.replace('js/','')]);_mapModuleNameToServiceName[decoratorJson.deps]=serviceName;}return _mapModuleNameToModuleObject[decoratorJson.deps];}/**\n * Processes the decorators\n *\n * @param {Object} decoratatorProviders\n * @param {ViewModelObject} vmo -\n * @param {Object|null} depsMap - optional deps map\n */function _processDecorators(decoratatorProviders,vmo){var sublocationName=appCtxSvc.ctx.sublocation?appCtxSvc.ctx.sublocation.nameToken:null;_.forEach(decoratatorProviders,function(decoratorJson,decoratorName){if(!decoratorJson.subLocationName||sublocationName===decoratorJson.subLocationName){var modelTypes=decoratorJson.modelTypes;var isValid=false;if(_.isArray(modelTypes)){_.forEach(modelTypes,function(modelType){if(modelType){isValid=commandsMapSvc.isInstanceOf(modelType,vmo.modelType);if(isValid){return false;// break\n}}});}else{// No supplied modelType to limit to.\nisValid=true;}if(isValid){if(decoratorJson.conditions){var declViewModel={localContext:{vmo:vmo}};var context={ctx:appCtxSvc.ctx};var verdict=true;for(var condition in decoratorJson.conditions){var expression=decoratorJson.conditions[condition].expression;verdict=verdict&&conditionSvc.evaluateCondition(declViewModel,expression,context);}if(verdict){if(decoratorJson.title&&decoratorJson.i18n){vmo.colorTitle=_mapDecoratorI18nKeyToLocalizedTitle[decoratorName+'.'+parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title)];}if(decoratorJson.cellClassName){vmo.cellDecoratorStyle=decoratorJson.cellClassName;}if(decoratorJson.gridClassName){vmo.gridDecoratorStyle=decoratorJson.gridClassName;}}}else if(decoratorJson.method&&decoratorJson.deps){var _depModuleObj=_getModuleObject(decoratorJson);if(_depModuleObj[decoratorJson.method].apply(_depModuleObj,[vmo])){vmo.cellDecoratorStyle=decoratorJson.cellClassName;vmo.gridDecoratorStyle=decoratorJson.gridClassName;if(decoratorJson.title&&decoratorJson.i18n){vmo.colorTitle=_mapDecoratorI18nKeyToLocalizedTitle[decoratorName+'.'+parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title)];}}}}}});}var exports={};/**\n * Sets cell list decorators.\n *\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - ViewModelObject(s) to set style on.\n * @param {Boolean} skipEvent - if true will skip event.\n */export let setDecoratorStyles=function(vmoIn,skipEvent){var unloadedDepModules={};var sublocationName=appCtxSvc.ctx.sublocation?appCtxSvc.ctx.sublocation.nameToken:null;_.forEach(_decoratorProviders,function(decoratorJson){if((!sublocationName||sublocationName===decoratorJson.subLocationName)&&!_.isEmpty(decoratorJson.deps)&&!_mapModuleNameToModuleObject[decoratorJson.deps]){unloadedDepModules[decoratorJson.deps]=true;}});// See if loading modules is necessary\nif(!_.isEmpty(unloadedDepModules)){var depsArray=Object.keys(unloadedDepModules);moduleLoader.loadDependentModules(depsArray).then(function(depsMap){_.forEach(depsMap,function(moduleObj,moduleName){_mapModuleNameToModuleObject['js/'+moduleName]=moduleObj;});if(_.isArray(vmoIn)){for(var ndx=0;ndx<vmoIn.length;ndx++){_processDecorators(_decoratorProviders,vmoIn[ndx]);}}else{_processDecorators(_decoratorProviders,vmoIn);}if(!skipEvent){eventBus.publish('decoratorsUpdated',vmoIn);}});}else{if(_.isArray(vmoIn)){for(var ndx=0;ndx<vmoIn.length;ndx++){_processDecorators(_decoratorProviders,vmoIn[ndx]);}}else{_processDecorators(_decoratorProviders,vmoIn);}if(!skipEvent){eventBus.publish('decoratorsUpdated',vmoIn);}}};/**\n * API to override generated decorators (used for testing only).\n *\n * @param {Object} decoratorsOverride\n */export let setDecorators=function(decoratorsOverride){_decoratorProviders=decoratorsOverride;_mapModuleNameToModuleObject={};_mapModuleNameToServiceName={};};export let loadConfiguration=async function(){await cfgSvc.getCfg('decorators',false,true).then(function(decorators){_decoratorProviders=decorators;// Loop through decorators and load localized titles if any\nvar decoratorNames=[];var promises=[];_.forEach(_decoratorProviders,function(decoratorJson,decoratorName){if(decoratorJson.title&&_.startsWith(decoratorJson.title,'{{')&&decoratorJson.i18n){promises.push(awDuiLocalizationSvc.populateI18nMap(decoratorJson.i18n,false,true));decoratorNames.push(decoratorName);}});// update the decorator i18n title map once all localized values are available\nPromise.all(promises).then(function(results){_.forEach(results,function(result){_.forEach(decoratorNames,function(decoratorName){var decoratorJson=_decoratorProviders[decoratorName];if(decoratorJson.title&&_.startsWith(decoratorJson.title,'{{')&&decoratorJson.i18n){// decoratorJson title value will be {{i18n.xxyyzz}}\nvar i18Key=parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title);var titleKey=i18Key.split('.');titleKey=titleKey&&titleKey.length>1?titleKey[1]:titleKey[0];if(result[titleKey]){_mapDecoratorI18nKeyToLocalizedTitle[decoratorName+'.'+i18Key]=result[titleKey];}}});});});});};exports={setDecoratorStyles,setDecorators,loadConfiguration};export default exports;loadConfiguration();","map":null,"metadata":{},"sourceType":"module"}
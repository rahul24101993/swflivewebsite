{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceValidationService\n */import appCtxSvc from'js/appCtxService';import workspaceInitService from'js/workspaceInitService';import cfgSvc from'js/configurationService';import localeSvc from'js/localeService';import _ from'lodash';import awConfiguration from'js/awConfiguration';// Service\nimport AwPromiseService from'js/awPromiseService';/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} Page ID\n */export let isValidPageAsync=function(pageId){var workspaceDefinition=appCtxSvc.getCtx('workspace');var isWorkspaceChange=workspaceInitService.getisWorkspaceChange();if(workspaceDefinition&&!isWorkspaceChange){let awPromiseVariable=AwPromiseService.instance;return awPromiseVariable.resolve(exports.isValidPage(pageId));}return exports.setWorkspaceId().then(function(){return exports.isValidPage(pageId);});};/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} pageId - Page ID\n * @return {Boolean} is valid page?\n */export let isValidPage=function(pageId){var validPage=true;var workspaceDefinition=appCtxSvc.getCtx('workspace');if(workspaceDefinition&&workspaceDefinition.availablePages){// Check the validity of the page only if it is exclusive workspace. For inclusive\n// workspace, all pages are valid pages\nif(exports.isExclusiveWorkspace(workspaceDefinition)){validPage=_.includes(workspaceDefinition.availablePages,pageId);}}return validPage;};/**\n * Check whether the passed workspace is an exclusive workspace\n *\n * @param {Object} workspaceDefinition - Workspace definition\n * @return {Boolean} true for exclusive workspace, false otherwise\n */export let isExclusiveWorkspace=function(workspaceDefinition){return workspaceDefinition?workspaceDefinition.workspaceType==='Exclusive':false;};/**\n * Set the workspace ID\n *\n * @return {Promise} promise\n */export let setWorkspaceId=function(){var totalWorkspaceCount=workspaceInitService.getTotalWorkspaceCount();var solution;var workspaceId;return cfgSvc.getCfg('solutionDef').then(function(solutionDef){solution=solutionDef;workspaceId=workspaceInitService.getWorkspaceId();// If server has no workspace entry, set the default workspace and increment the workspace count\n// by 1 so that visibility of the WS link can be controlled correctly.\nif(!workspaceId&&solution.defaultWorkspace){workspaceId=solution.defaultWorkspace;totalWorkspaceCount++;}return cfgSvc.getCfg('workspace');}).then(function(workspaceCfg){var allWorkspaceDefn=_.cloneDeep(workspaceCfg);var workspaceDefn=allWorkspaceDefn[workspaceId];// If the workspace ID returned by server is not a valid one, revert the workspace increment. (This is a\n// very corner usecase and should never happen but adding a preventive check.)\nif(!workspaceDefn){workspaceDefn=allWorkspaceDefn[solution.defaultWorkspace];totalWorkspaceCount--;}appCtxSvc.registerCtx('totalWorkspaceCount',totalWorkspaceCount);appCtxSvc.registerCtx('workspace',workspaceDefn);exports.getLocalizedText(workspaceDefn.workspaceName).then(function(result){workspaceDefn.workspaceName=result;appCtxSvc.updateCtx('workspace',workspaceDefn);});var defaultRoutePath=awConfiguration.get('defaultRoutePath');if(defaultRoutePath!==workspaceDefn.defaultPage){// set the value\nawConfiguration.set('defaultRoutePath',workspaceDefn.defaultPage);appCtxSvc.registerCtx('defaultRoutePath',workspaceDefn.defaultPage);}return workspaceDefn;});};/**\n * Get localized text.\n *\n * @param {Object} label - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {String} localized text\n */export let getLocalizedText=function(label){if(_.isString(label)){// If the label is a string just return it\nreturn AwPromiseService.instance.resolve(label);}// Otherwise get the label from the localized file\nreturn localeSvc.getLocalizedText(label.source,label.key);};const exports={isValidPageAsync,isValidPage,isExclusiveWorkspace,setWorkspaceId,getLocalizedText};export default exports;","map":null,"metadata":{},"sourceType":"module"}
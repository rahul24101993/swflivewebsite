{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsComponentProcessor\n */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsComponentProcessor\n */\nfunction SPLMStatsComponentProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _startComponentRenderTime = 0;\n  let _endComponentRenderTime = 0;\n  let componentMap = {};\n\n  const _reset = function () {\n    componentMap = {};\n  };\n\n  self.startComponentRenderTime = function () {\n    _startProcessorTime = window.performance.now();\n    _startComponentRenderTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.endComponentRenderTime = function () {\n    _startProcessorTime = window.performance.now();\n    _endComponentRenderTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.addComponent = function (componentName) {\n    _startProcessorTime = window.performance.now();\n\n    if (typeof componentMap[componentName] === 'undefined') {\n      componentMap[componentName] = {};\n      componentMap[componentName].renders = 1;\n    } else {\n      ++componentMap[componentName].renders;\n    }\n\n    if (typeof componentMap[componentName].time === 'undefined') {\n      componentMap[componentName].time = _endComponentRenderTime - _startComponentRenderTime;\n    } else {\n      componentMap[componentName].time += _endComponentRenderTime - _startComponentRenderTime;\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.start = function () {\n    _reset();\n\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      ComponentOverhead: _time\n    };\n  };\n\n  self.getMetrics = function () {\n    _startProcessorTime = window.performance.now();\n    let componentDetails = [];\n    let uniqueComponents = 0;\n    let componentRenders = 0;\n    let componentsRenderTime = 0;\n    Object.keys(componentMap).forEach(key => {\n      componentsRenderTime += componentMap[key].time;\n      componentDetails.push({\n        name: key,\n        renders: componentMap[key].renders,\n        estimatedRenderTime: componentMap[key].time.toFixed(3) + 'ms'\n      });\n      uniqueComponents++;\n      componentRenders += componentMap[key].renders;\n    });\n    componentDetails.sort((a, b) => {\n      return b.renders - a.renders;\n    });\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return {\n      Component: {\n        uniqueComponents,\n        componentRenders,\n        componentDetails,\n        componentsRenderTime\n      }\n    };\n  };\n\n  return self;\n}\n\n_c = SPLMStatsComponentProcessor;\nexport default SPLMStatsComponentProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsComponentProcessor\");","map":{"version":3,"names":["SPLMStatsComponentProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_startComponentRenderTime","_endComponentRenderTime","componentMap","_reset","startComponentRenderTime","window","performance","now","endComponentRenderTime","addComponent","componentName","renders","time","start","stop","getProcessingTime","_time","ComponentOverhead","getMetrics","componentDetails","uniqueComponents","componentRenders","componentsRenderTime","Object","keys","forEach","key","push","name","estimatedRenderTime","toFixed","sort","a","b","Component"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsComponentProcessor.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsComponentProcessor\n */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsComponentProcessor\n */\nfunction SPLMStatsComponentProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n    let _startProcessorTime = 0;\n    let _endProcessorTime = 0;\n    let _startComponentRenderTime = 0;\n    let _endComponentRenderTime = 0;\n    let componentMap = {};\n\n    const _reset = function() {\n        componentMap = {};\n    };\n\n    self.startComponentRenderTime = function() {\n        _startProcessorTime = window.performance.now();\n        _startComponentRenderTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.endComponentRenderTime = function() {\n        _startProcessorTime = window.performance.now();\n        _endComponentRenderTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.addComponent = function( componentName ) {\n        _startProcessorTime = window.performance.now();\n        if ( typeof componentMap[componentName] === 'undefined' ) {\n            componentMap[componentName] = {};\n            componentMap[componentName].renders = 1;\n        } else {\n            ++componentMap[componentName].renders;\n        }\n\n        if ( typeof componentMap[componentName].time === 'undefined' ) {\n            componentMap[componentName].time = _endComponentRenderTime - _startComponentRenderTime;\n        } else  {\n            componentMap[componentName].time += _endComponentRenderTime - _startComponentRenderTime;\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.start = function() {\n        _reset();\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { ComponentOverhead: _time };\n    };\n\n    self.getMetrics = function() {\n        _startProcessorTime = window.performance.now();\n        let componentDetails = [];\n        let uniqueComponents = 0;\n        let componentRenders = 0;\n        let componentsRenderTime = 0;\n        Object.keys( componentMap ).forEach( key => {\n            componentsRenderTime += componentMap[key].time;\n            componentDetails.push( {\n                name: key,\n                renders: componentMap[key].renders,\n                estimatedRenderTime: componentMap[key].time.toFixed( 3 ) + 'ms'\n            } );\n            uniqueComponents++;\n            componentRenders += componentMap[key].renders;\n        } );\n        componentDetails.sort( ( a, b ) => {\n            return b.renders - a.renders;\n        } );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return {\n            Component: {\n                uniqueComponents,\n                componentRenders,\n                componentDetails,\n                componentsRenderTime\n            }\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsComponentProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/viewMode.service\n */import appCtxService from'js/appCtxService';import _ from'lodash';let exports={};export let _viewModeContext='ViewModeContext';var _availableViewModeContext='supportedViewModes';var _getViewModeContext=function(){var ctx=appCtxService.getCtx(_viewModeContext);return ctx?ctx:{};};/**\n * Change view mode\n *\n * @param {String} newViewMode - View mode key to change to.\n */export let changeViewMode=function(viewMode){var currentCtx=_getViewModeContext();currentCtx[_viewModeContext]=viewMode;appCtxService.registerCtx(_viewModeContext,currentCtx);};/**\n * Get the current view mode\n *\n * @return {String} The current view mode\n */export let getViewMode=function(){return _getViewModeContext()[_viewModeContext];};/**\n * Update which view modes are supported\n *\n * @param {String[]} viewModes - View modes that are available. Converted to Object to make conditions easier.\n */export let setAvailableViewModes=function(viewModes){var currentCtx=_getViewModeContext();// Convert array to object - makes declarative conditions simpler\ncurrentCtx[_availableViewModeContext]={};if(_.isArray(viewModes)){_.forEach(viewModes,function(x){currentCtx[_availableViewModeContext][x]={};});}appCtxService.updateCtx(_viewModeContext,currentCtx);};/**\n * Get the available view modes\n *\n * @return {String[]} The supported view modes\n */export let getAvailableViewModes=function(){var viewModes=_getViewModeContext()[_availableViewModeContext];return viewModes?Object.keys(viewModes):[];};exports={changeViewMode,getViewMode,setAvailableViewModes,getAvailableViewModes,_viewModeContext};export default exports;","map":null,"metadata":{},"sourceType":"module"}
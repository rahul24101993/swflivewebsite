{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\pltable\\\\src\\\\js\\\\splmTableDirectEditUtils.js\"; // Copyright (c) 2020 Siemens\n\n/**\n * This module defines the utils for direct edit in PL Table.\n *\n * @module js/splmTableDirectEditUtils\n */\n\nimport localeService from 'js/localeService';\nimport { includeComponent } from 'js/moduleLoader';\nimport { renderComponent } from 'js/declReactUtils';\nimport { AppCtxComponent } from 'js/reactAppCtx';\n/**\n * Gets the editContext for the table\n *\n * @param {Object} tableInstance - the table's tableInstance object\n *\n * @return {string} the name of the editContext for this table\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const getEditContext = tableInstance => {\n  if (tableInstance.dataProvider.json && tableInstance.dataProvider.json.editContext) {\n    // Edit context of edit handler for this dataProvider\n    return tableInstance.dataProvider.json.editContext;\n  } else if (tableInstance.dataProvider.json && tableInstance.dataProvider.json.customPanelEditContext) {\n    // Edit context of parent summary view model ( html panel table using edit via nativeDataLoadEvent usecase )\n    return tableInstance.dataProvider.json.customPanelEditContext;\n  } else if (tableInstance.declViewModel._internal.editContext) {\n    // Edit context of edit handler for this view model\n    return tableInstance.declViewModel._internal.editContext;\n  }\n\n  return null;\n};\n\nconst _displayGuidanceMessage = (message, tableElem) => {\n  const prop = {\n    message: {\n      messageType: 'INFO',\n      messageText: message\n    },\n    showType: 'false',\n    closable: true\n  };\n  const guidanceMessageElem = includeComponent('AwGuidanceMessage', prop);\n  let docFrag = document.createDocumentFragment();\n  renderComponent( /*#__PURE__*/_jsxDEV(AppCtxComponent, {\n    children: guidanceMessageElem\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 22\n  }, this), docFrag);\n  tableElem.parentElement.insertBefore(docFrag, tableElem);\n};\n/**\n * Displays guidance message above the table to let the user know that auto save is one despite global auto save being turned off\n *\n * @param {HTMLElement} tableElem - the table element\n */\n\n\nexport const displayAutoSaveOnGuidanceMessage = tableElem => {\n  localeService.getLocalizedTextFromKey('BaseMessages.AUTO_SAVE_ONLY_TABLE', true).then(message => {\n    _displayGuidanceMessage(message, tableElem);\n  });\n};\n/**\n * Displays guidance message above the table to let the user know that cell editing is disabled\n *\n * @param {HTMLElement} tableElem - the table element\n */\n\nexport const displayCellEditDisabledGuidanceMessage = tableElem => {\n  localeService.getLocalizedTextFromKey('BaseMessages.CELL_EDITING_DISABLED', true).then(message => {\n    _displayGuidanceMessage(message, tableElem);\n  });\n};\nexport default {\n  getEditContext,\n  displayAutoSaveOnGuidanceMessage,\n  displayCellEditDisabledGuidanceMessage\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableDirectEditUtils.js"],"names":["getEditContext","tableInstance","_displayGuidanceMessage","prop","message","messageType","messageText","showType","closable","guidanceMessageElem","includeComponent","docFrag","document","renderComponent","tableElem","displayAutoSaveOnGuidanceMessage","localeService","displayCellEditDisabledGuidanceMessage"],"mappings":"oKAAA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,SAAA,gBAAA,QAAA,iBAAA;AACA,SAAA,eAAA,QAAA,mBAAA;AACA,SAAA,eAAA,QAAA,gBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMA,cAAc,GAAKC,aAAF,IAAqB;EAC/C,IAAIA,aAAa,CAAbA,YAAAA,CAAAA,IAAAA,IAAmCA,aAAa,CAAbA,YAAAA,CAAAA,IAAAA,CAAvC,WAAA,EAAqF;IACjF;IACA,OAAOA,aAAa,CAAbA,YAAAA,CAAAA,IAAAA,CAAP,WAAA;EAFJ,CAAA,MAGO,IAAIA,aAAa,CAAbA,YAAAA,CAAAA,IAAAA,IAAmCA,aAAa,CAAbA,YAAAA,CAAAA,IAAAA,CAAvC,sBAAA,EAAgG;IACnG;IACA,OAAOA,aAAa,CAAbA,YAAAA,CAAAA,IAAAA,CAAP,sBAAA;EAFG,CAAA,MAGA,IAAIA,aAAa,CAAbA,aAAAA,CAAAA,SAAAA,CAAJ,WAAA,EAAwD;IAC3D;IACA,OAAOA,aAAa,CAAbA,aAAAA,CAAAA,SAAAA,CAAP,WAAA;EACH;;EACD,OAAA,IAAA;AAXG,CAAA;;AAcP,MAAMC,uBAAuB,GAAG,CAAA,OAAA,EAAA,SAAA,KAA0B;EACtD,MAAMC,IAAI,GAAG;IACTC,OAAO,EAAE;MACLC,WAAW,EADN,MAAA;MAELC,WAAW,EAAEF;IAFR,CADA;IAKTG,QAAQ,EALC,OAAA;IAMTC,QAAQ,EAAE;EAND,CAAb;EASA,MAAMC,mBAAmB,GAAGC,gBAAgB,CAAA,mBAAA,EAA5C,IAA4C,CAA5C;EACA,IAAIC,OAAO,GAAGC,QAAQ,CAAtB,sBAAcA,EAAd;EACAC,eAAe,EAAA,aAAE,OAAA,CAAA,eAAA,EAAA;IAAA,QAAA,EAAkBJ;EAAlB,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EAAF,IAAE,CAAF,EAAfI,OAAe,CAAfA;EACAC,SAAS,CAATA,aAAAA,CAAAA,YAAAA,CAAAA,OAAAA,EAAAA,SAAAA;AAbJ,CAAA;AAgBA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,gCAAgC,GAAKD,SAAF,IAAiB;EAC7DE,aAAa,CAAbA,uBAAAA,CAAAA,mCAAAA,EAAAA,IAAAA,EAAAA,IAAAA,CAA2FZ,OAAF,IAAe;IACpGF,uBAAuB,CAAA,OAAA,EAAvBA,SAAuB,CAAvBA;EADJc,CAAAA;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sCAAsC,GAAKH,SAAF,IAAiB;EACnEE,aAAa,CAAbA,uBAAAA,CAAAA,oCAAAA,EAAAA,IAAAA,EAAAA,IAAAA,CAA4FZ,OAAF,IAAe;IACrGF,uBAAuB,CAAA,OAAA,EAAvBA,SAAuB,CAAvBA;EADJc,CAAAA;AADG,CAAA;AAMP,eAAe;EAAA,cAAA;EAAA,gCAAA;EAGXC;AAHW,CAAf","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the utils for direct edit in PL Table.\n *\n * @module js/splmTableDirectEditUtils\n */\nimport localeService from 'js/localeService';\nimport { includeComponent } from 'js/moduleLoader';\nimport { renderComponent } from 'js/declReactUtils';\nimport { AppCtxComponent } from 'js/reactAppCtx';\n\n/**\n * Gets the editContext for the table\n *\n * @param {Object} tableInstance - the table's tableInstance object\n *\n * @return {string} the name of the editContext for this table\n */\nexport const getEditContext = ( tableInstance ) => {\n    if( tableInstance.dataProvider.json && tableInstance.dataProvider.json.editContext ) {\n        // Edit context of edit handler for this dataProvider\n        return tableInstance.dataProvider.json.editContext;\n    } else if( tableInstance.dataProvider.json && tableInstance.dataProvider.json.customPanelEditContext ) {\n        // Edit context of parent summary view model ( html panel table using edit via nativeDataLoadEvent usecase )\n        return tableInstance.dataProvider.json.customPanelEditContext;\n    } else if( tableInstance.declViewModel._internal.editContext ) {\n        // Edit context of edit handler for this view model\n        return tableInstance.declViewModel._internal.editContext;\n    }\n    return null;\n};\n\nconst _displayGuidanceMessage = ( message, tableElem ) => {\n    const prop = {\n        message: {\n            messageType: 'INFO',\n            messageText: message\n        },\n        showType: 'false',\n        closable: true\n    };\n\n    const guidanceMessageElem = includeComponent( 'AwGuidanceMessage', prop );\n    let docFrag = document.createDocumentFragment();\n    renderComponent( <AppCtxComponent>{guidanceMessageElem}</AppCtxComponent>, docFrag );\n    tableElem.parentElement.insertBefore( docFrag, tableElem );\n};\n\n/**\n * Displays guidance message above the table to let the user know that auto save is one despite global auto save being turned off\n *\n * @param {HTMLElement} tableElem - the table element\n */\nexport const displayAutoSaveOnGuidanceMessage = ( tableElem ) => {\n    localeService.getLocalizedTextFromKey( 'BaseMessages.AUTO_SAVE_ONLY_TABLE', true ).then( ( message ) => {\n        _displayGuidanceMessage( message, tableElem );\n    } );\n};\n\n/**\n * Displays guidance message above the table to let the user know that cell editing is disabled\n *\n * @param {HTMLElement} tableElem - the table element\n */\nexport const displayCellEditDisabledGuidanceMessage = ( tableElem ) => {\n    localeService.getLocalizedTextFromKey( 'BaseMessages.CELL_EDITING_DISABLED', true ).then( ( message ) => {\n        _displayGuidanceMessage( message, tableElem );\n    } );\n};\n\nexport default {\n    getEditContext,\n    displayAutoSaveOnGuidanceMessage,\n    displayCellEditDisabledGuidanceMessage\n};\n"]},"metadata":{},"sourceType":"module"}
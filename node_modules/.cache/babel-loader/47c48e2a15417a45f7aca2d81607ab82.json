{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Module for various FMS related utilities\n *\n * @module js/fmsUtils\n *\n * @namespace fmsUtils\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n/**\n * The FMS proxy servlet context. This must be the same as the FmsProxyServlet mapping in the web.xml\n */\n\nvar WEB_XML_FMS_PROXY_CONTEXT = 'fms';\n/**\n * Relative path to the FMS proxy download service.\n */\n\nvar CLIENT_FMS_DOWNLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsdownload/';\n/**\n * Relative path to the FMS proxy download service.\n */\n\nvar CLIENT_FMS_UPLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsupload/'; // -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n\nvar exports = {};\n/**\n * Build url from a file ticket.\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n *\n * @return {String} url\n */\n\nvar _buildUrlFromFileTicket = function (fileTicket, openFileName) {\n  var fileName;\n\n  if (!_.isEmpty(openFileName)) {\n    // Remove special characters because IIS does not allow special characters in file name\n    var validOpenFileName;\n    var extensionIndex = openFileName.lastIndexOf('.');\n\n    if (extensionIndex > 0) {\n      var extension = openFileName.substring(extensionIndex + 1);\n      var fileNameWithoutExtension = openFileName.substring(0, extensionIndex);\n      validOpenFileName = fileNameWithoutExtension.replace(/[<>*%:&]/, '') + '.' + extension;\n    } else {\n      validOpenFileName = openFileName.replace(/[<>*%:&]/, '');\n    }\n\n    fileName = encodeURIComponent(validOpenFileName);\n  } else {\n    fileName = exports.getFilenameFromTicket(fileTicket);\n  }\n\n  var downloadUri = CLIENT_FMS_DOWNLOAD_PATH + fileName + '?ticket=' + encodeURIComponent(fileTicket);\n  return browserUtils.getBaseURL() + downloadUri;\n};\n/**\n * Get the file name from FMS ticket\n *\n * @param {String} ticket - The file ticket\n * @return {String} File name\n */\n\n\nexport let getFilenameFromTicket = function (ticket) {\n  // Check for forward or backslash in the ticket string\n  var lastfslash = ticket.lastIndexOf('/');\n  var lastbslash = ticket.lastIndexOf('\\\\');\n  var fnamestart = Math.max(lastfslash, lastbslash) + 1;\n\n  if (fnamestart > 0 && fnamestart < ticket.length) {\n    return ticket.substring(fnamestart);\n  } // Check for a URL Encoded forward or backslash in the ticket string\n\n\n  var lastEncodedFS = ticket.lastIndexOf('%2f');\n  var lastEncodedBS = ticket.lastIndexOf('%5c');\n  var encodedfnamestart = Math.max(lastEncodedFS, lastEncodedBS) + 3;\n\n  if (encodedfnamestart > 0 && encodedfnamestart < ticket.length) {\n    return ticket.substring(encodedfnamestart);\n  } // Return empty string\n\n\n  return '';\n};\n/**\n * Get the FMS Url\n *\n * @return {String} The FMS Url\n */\n\nexport let getFMSUrl = function () {\n  return CLIENT_FMS_DOWNLOAD_PATH;\n};\n/**\n * Looks up and returns the <b>full</b> FMS upload URL.\n *\n * @return {String} The fms upload url.\n */\n\nexport let getFMSFullUploadUrl = function () {\n  return browserUtils.getBaseURL() + CLIENT_FMS_UPLOAD_PATH;\n};\n/**\n * Get the URI to load the file from FMS given a ticket and original filename.\n *\n * @param {String} ticket - FMS ticket\n * @param {String} originalFilename - (Optional) The original file name to include on the Uri and returned in\n *            content-disposition. The filename will be generated from the ticket it not included.\n *\n * @return {String} The Uri to access the file.\n */\n\nexport let getFileUri = function (ticket, originalFilename) {\n  var filename = !_.isEmpty(originalFilename) ? originalFilename : exports.getFilenameFromTicket(ticket); // Double encoding ticket here because it will be re-encoded by FmsProxyServlet.\n\n  return awConfiguration.get('baseUrl') + '/' + exports.getFMSUrl() + encodeURIComponent(filename) + '?ticket=' + encodeURIComponent(ticket);\n};\n/**\n * Get the FSC URI from given file ticket\n *\n * @param {String} fileTicket - The File ticket\n *\n * @return {String} The FSC URI\n */\n\nexport let getFscUri = function (fileTicket) {\n  var fscUri = '';\n  var httpLocation = fileTicket.indexOf('http');\n  var percentSign = fileTicket.lastIndexOf('%');\n\n  if (httpLocation !== -1 && percentSign !== -1) {\n    fscUri = fileTicket.substring(httpLocation, percentSign);\n    var decodedUri = decodeURIComponent(fscUri);\n\n    if (decodedUri) {\n      decodedUri = decodedUri.replace(';', '/');\n      fscUri = decodedUri;\n    }\n  }\n\n  return fscUri;\n};\n/**\n * Open a file given the file ticket\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n */\n\nexport let openFile = function (fileTicket, openFileName) {\n  if (_.isString(fileTicket) && fileTicket.length > 0) {\n    window.open(_buildUrlFromFileTicket(fileTicket, openFileName), '_self', 'enabled');\n  }\n};\n/**\n * Open one or more files given one or more file tickets\n *\n * @param {OBJECTARRAY} fileNameAndTicketsArr - The array of structure of file name and file ticket\n */\n\nexport let openFiles = function (fileNameAndTicketsArr) {\n  _.forEach(fileNameAndTicketsArr, function (fileNameAndTicket) {\n    if (_.isString(fileNameAndTicket.fileName) && _.isString(fileNameAndTicket.fileTicket) && fileNameAndTicket.fileName !== '' && fileNameAndTicket.fileTicket !== '') {\n      // window.open does NOT work in a for loop and fails after the first iteration with the below chrome error\n      // 'Resource interpreted as Document but transferred with MIME type application/octet-stream' , hence commenting\n      // and replacing the logic to behave like file downloads in polarion\n      //  window.open( _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName ), '_self', 'enabled' );\n      var link = document.createElement('a');\n      link.target = '_blank';\n      link.href = _buildUrlFromFileTicket(fileNameAndTicket.fileTicket, fileNameAndTicket.fileName);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    }\n  });\n};\n/**\n * Open the file in new window\n *\n * @param {String} fileTicket - The file ticket\n */\n\nexport let openFileInNewWindow = function (fileTicket) {\n  if (_.isString(fileTicket) && fileTicket.length > 0) {\n    window.open(_buildUrlFromFileTicket(fileTicket), '_blank', 'enabled');\n  }\n};\nexports = {\n  getFilenameFromTicket,\n  getFMSUrl,\n  getFMSFullUploadUrl,\n  getFileUri,\n  getFscUri,\n  openFile,\n  openFiles,\n  openFileInNewWindow\n};\nexport default exports;","map":{"version":3,"names":["_","browserUtils","awConfiguration","WEB_XML_FMS_PROXY_CONTEXT","CLIENT_FMS_DOWNLOAD_PATH","CLIENT_FMS_UPLOAD_PATH","exports","_buildUrlFromFileTicket","fileTicket","openFileName","fileName","isEmpty","validOpenFileName","extensionIndex","lastIndexOf","extension","substring","fileNameWithoutExtension","replace","encodeURIComponent","getFilenameFromTicket","downloadUri","getBaseURL","ticket","lastfslash","lastbslash","fnamestart","Math","max","length","lastEncodedFS","lastEncodedBS","encodedfnamestart","getFMSUrl","getFMSFullUploadUrl","getFileUri","originalFilename","filename","get","getFscUri","fscUri","httpLocation","indexOf","percentSign","decodedUri","decodeURIComponent","openFile","isString","window","open","openFiles","fileNameAndTicketsArr","forEach","fileNameAndTicket","link","document","createElement","target","href","body","appendChild","click","remove","openFileInNewWindow"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/fmsUtils.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Module for various FMS related utilities\n *\n * @module js/fmsUtils\n *\n * @namespace fmsUtils\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n\n/**\n * The FMS proxy servlet context. This must be the same as the FmsProxyServlet mapping in the web.xml\n */\nvar WEB_XML_FMS_PROXY_CONTEXT = 'fms';\n\n/**\n * Relative path to the FMS proxy download service.\n */\nvar CLIENT_FMS_DOWNLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsdownload/';\n\n/**\n * Relative path to the FMS proxy download service.\n */\nvar CLIENT_FMS_UPLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsupload/';\n\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n\nvar exports = {};\n\n\n/**\n * Build url from a file ticket.\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n *\n * @return {String} url\n */\nvar _buildUrlFromFileTicket = function( fileTicket, openFileName ) {\n    var fileName;\n\n    if( !_.isEmpty( openFileName ) ) {\n        // Remove special characters because IIS does not allow special characters in file name\n        var validOpenFileName;\n        var extensionIndex = openFileName.lastIndexOf( '.' );\n        if( extensionIndex > 0 ) {\n            var extension = openFileName.substring( extensionIndex + 1 );\n            var fileNameWithoutExtension = openFileName.substring( 0, extensionIndex );\n            validOpenFileName = fileNameWithoutExtension.replace( /[<>*%:&]/, '' ) + '.' + extension;\n        } else {\n            validOpenFileName = openFileName.replace( /[<>*%:&]/, '' );\n        }\n        fileName = encodeURIComponent( validOpenFileName );\n    } else {\n        fileName = exports.getFilenameFromTicket( fileTicket );\n    }\n\n    var downloadUri = CLIENT_FMS_DOWNLOAD_PATH + fileName + '?ticket=' + encodeURIComponent( fileTicket );\n\n    return browserUtils.getBaseURL() + downloadUri;\n};\n\n/**\n * Get the file name from FMS ticket\n *\n * @param {String} ticket - The file ticket\n * @return {String} File name\n */\nexport let getFilenameFromTicket = function( ticket ) {\n    // Check for forward or backslash in the ticket string\n    var lastfslash = ticket.lastIndexOf( '/' );\n    var lastbslash = ticket.lastIndexOf( '\\\\' );\n\n    var fnamestart = Math.max( lastfslash, lastbslash ) + 1;\n\n    if( fnamestart > 0 && fnamestart < ticket.length ) {\n        return ticket.substring( fnamestart );\n    }\n\n    // Check for a URL Encoded forward or backslash in the ticket string\n    var lastEncodedFS = ticket.lastIndexOf( '%2f' );\n    var lastEncodedBS = ticket.lastIndexOf( '%5c' );\n\n    var encodedfnamestart = Math.max( lastEncodedFS, lastEncodedBS ) + 3;\n\n    if( encodedfnamestart > 0 && encodedfnamestart < ticket.length ) {\n        return ticket.substring( encodedfnamestart );\n    }\n\n    // Return empty string\n    return '';\n};\n\n/**\n * Get the FMS Url\n *\n * @return {String} The FMS Url\n */\nexport let getFMSUrl = function() {\n    return CLIENT_FMS_DOWNLOAD_PATH;\n};\n\n/**\n * Looks up and returns the <b>full</b> FMS upload URL.\n *\n * @return {String} The fms upload url.\n */\nexport let getFMSFullUploadUrl = function() {\n    return browserUtils.getBaseURL() + CLIENT_FMS_UPLOAD_PATH;\n};\n\n/**\n * Get the URI to load the file from FMS given a ticket and original filename.\n *\n * @param {String} ticket - FMS ticket\n * @param {String} originalFilename - (Optional) The original file name to include on the Uri and returned in\n *            content-disposition. The filename will be generated from the ticket it not included.\n *\n * @return {String} The Uri to access the file.\n */\nexport let getFileUri = function( ticket, originalFilename ) {\n    var filename = !_.isEmpty( originalFilename ) ? originalFilename : exports.getFilenameFromTicket( ticket );\n\n    // Double encoding ticket here because it will be re-encoded by FmsProxyServlet.\n    return awConfiguration.get( 'baseUrl' ) + '/' + exports.getFMSUrl() + encodeURIComponent( filename ) +\n        '?ticket=' + encodeURIComponent( ticket );\n};\n\n/**\n * Get the FSC URI from given file ticket\n *\n * @param {String} fileTicket - The File ticket\n *\n * @return {String} The FSC URI\n */\nexport let getFscUri = function( fileTicket ) {\n    var fscUri = '';\n    var httpLocation = fileTicket.indexOf( 'http' );\n    var percentSign = fileTicket.lastIndexOf( '%' );\n\n    if( httpLocation !== -1 && percentSign !== -1 ) {\n        fscUri = fileTicket.substring( httpLocation, percentSign );\n\n        var decodedUri = decodeURIComponent( fscUri );\n\n        if( decodedUri ) {\n            decodedUri = decodedUri.replace( ';', '/' );\n            fscUri = decodedUri;\n        }\n    }\n\n    return fscUri;\n};\n\n/**\n * Open a file given the file ticket\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n */\nexport let openFile = function( fileTicket, openFileName ) {\n    if( _.isString( fileTicket ) && fileTicket.length > 0 ) {\n        window.open( _buildUrlFromFileTicket( fileTicket, openFileName ), '_self', 'enabled' );\n    }\n};\n\n/**\n * Open one or more files given one or more file tickets\n *\n * @param {OBJECTARRAY} fileNameAndTicketsArr - The array of structure of file name and file ticket\n */\nexport let openFiles = function( fileNameAndTicketsArr ) {\n    _.forEach( fileNameAndTicketsArr, function( fileNameAndTicket ) {\n        if( _.isString( fileNameAndTicket.fileName ) && _.isString( fileNameAndTicket.fileTicket ) && fileNameAndTicket.fileName !== '' && fileNameAndTicket.fileTicket !== '' ) {\n            // window.open does NOT work in a for loop and fails after the first iteration with the below chrome error\n            // 'Resource interpreted as Document but transferred with MIME type application/octet-stream' , hence commenting\n            // and replacing the logic to behave like file downloads in polarion\n            //  window.open( _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName ), '_self', 'enabled' );\n            var link = document.createElement( 'a' );\n            link.target = '_blank';\n            link.href = _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName );\n            document.body.appendChild( link );\n            link.click();\n            link.remove();\n        }\n    } );\n};\n\n/**\n * Open the file in new window\n *\n * @param {String} fileTicket - The file ticket\n */\nexport let openFileInNewWindow = function( fileTicket ) {\n    if( _.isString( fileTicket ) && fileTicket.length > 0 ) {\n        window.open( _buildUrlFromFileTicket( fileTicket ), '_blank', 'enabled' );\n    }\n};\n\nexports = {\n    getFilenameFromTicket,\n    getFMSUrl,\n    getFMSFullUploadUrl,\n    getFileUri,\n    getFscUri,\n    openFile,\n    openFiles,\n    openFileInNewWindow\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA;AACA;AACA;;AACA,IAAIC,yBAAyB,GAAG,KAAhC;AAEA;AACA;AACA;;AACA,IAAIC,wBAAwB,GAAGD,yBAAyB,GAAG,eAA3D;AAEA;AACA;AACA;;AACA,IAAIE,sBAAsB,GAAGF,yBAAyB,GAAG,aAAzD,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,IAAIG,OAAO,GAAG,EAAd;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB,GAAG,UAAUC,UAAV,EAAsBC,YAAtB,EAAqC;EAC/D,IAAIC,QAAJ;;EAEA,IAAI,CAACV,CAAC,CAACW,OAAF,CAAWF,YAAX,CAAL,EAAiC;IAC7B;IACA,IAAIG,iBAAJ;IACA,IAAIC,cAAc,GAAGJ,YAAY,CAACK,WAAb,CAA0B,GAA1B,CAArB;;IACA,IAAID,cAAc,GAAG,CAArB,EAAyB;MACrB,IAAIE,SAAS,GAAGN,YAAY,CAACO,SAAb,CAAwBH,cAAc,GAAG,CAAzC,CAAhB;MACA,IAAII,wBAAwB,GAAGR,YAAY,CAACO,SAAb,CAAwB,CAAxB,EAA2BH,cAA3B,CAA/B;MACAD,iBAAiB,GAAGK,wBAAwB,CAACC,OAAzB,CAAkC,UAAlC,EAA8C,EAA9C,IAAqD,GAArD,GAA2DH,SAA/E;IACH,CAJD,MAIO;MACHH,iBAAiB,GAAGH,YAAY,CAACS,OAAb,CAAsB,UAAtB,EAAkC,EAAlC,CAApB;IACH;;IACDR,QAAQ,GAAGS,kBAAkB,CAAEP,iBAAF,CAA7B;EACH,CAZD,MAYO;IACHF,QAAQ,GAAGJ,OAAO,CAACc,qBAAR,CAA+BZ,UAA/B,CAAX;EACH;;EAED,IAAIa,WAAW,GAAGjB,wBAAwB,GAAGM,QAA3B,GAAsC,UAAtC,GAAmDS,kBAAkB,CAAEX,UAAF,CAAvF;EAEA,OAAOP,YAAY,CAACqB,UAAb,KAA4BD,WAAnC;AACH,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAID,qBAAqB,GAAG,UAAUG,MAAV,EAAmB;EAClD;EACA,IAAIC,UAAU,GAAGD,MAAM,CAACT,WAAP,CAAoB,GAApB,CAAjB;EACA,IAAIW,UAAU,GAAGF,MAAM,CAACT,WAAP,CAAoB,IAApB,CAAjB;EAEA,IAAIY,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAUJ,UAAV,EAAsBC,UAAtB,IAAqC,CAAtD;;EAEA,IAAIC,UAAU,GAAG,CAAb,IAAkBA,UAAU,GAAGH,MAAM,CAACM,MAA1C,EAAmD;IAC/C,OAAON,MAAM,CAACP,SAAP,CAAkBU,UAAlB,CAAP;EACH,CATiD,CAWlD;;;EACA,IAAII,aAAa,GAAGP,MAAM,CAACT,WAAP,CAAoB,KAApB,CAApB;EACA,IAAIiB,aAAa,GAAGR,MAAM,CAACT,WAAP,CAAoB,KAApB,CAApB;EAEA,IAAIkB,iBAAiB,GAAGL,IAAI,CAACC,GAAL,CAAUE,aAAV,EAAyBC,aAAzB,IAA2C,CAAnE;;EAEA,IAAIC,iBAAiB,GAAG,CAApB,IAAyBA,iBAAiB,GAAGT,MAAM,CAACM,MAAxD,EAAiE;IAC7D,OAAON,MAAM,CAACP,SAAP,CAAkBgB,iBAAlB,CAAP;EACH,CAnBiD,CAqBlD;;;EACA,OAAO,EAAP;AACH,CAvBM;AAyBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,YAAW;EAC9B,OAAO7B,wBAAP;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI8B,mBAAmB,GAAG,YAAW;EACxC,OAAOjC,YAAY,CAACqB,UAAb,KAA4BjB,sBAAnC;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI8B,UAAU,GAAG,UAAUZ,MAAV,EAAkBa,gBAAlB,EAAqC;EACzD,IAAIC,QAAQ,GAAG,CAACrC,CAAC,CAACW,OAAF,CAAWyB,gBAAX,CAAD,GAAiCA,gBAAjC,GAAoD9B,OAAO,CAACc,qBAAR,CAA+BG,MAA/B,CAAnE,CADyD,CAGzD;;EACA,OAAOrB,eAAe,CAACoC,GAAhB,CAAqB,SAArB,IAAmC,GAAnC,GAAyChC,OAAO,CAAC2B,SAAR,EAAzC,GAA+Dd,kBAAkB,CAAEkB,QAAF,CAAjF,GACH,UADG,GACUlB,kBAAkB,CAAEI,MAAF,CADnC;AAEH,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgB,SAAS,GAAG,UAAU/B,UAAV,EAAuB;EAC1C,IAAIgC,MAAM,GAAG,EAAb;EACA,IAAIC,YAAY,GAAGjC,UAAU,CAACkC,OAAX,CAAoB,MAApB,CAAnB;EACA,IAAIC,WAAW,GAAGnC,UAAU,CAACM,WAAX,CAAwB,GAAxB,CAAlB;;EAEA,IAAI2B,YAAY,KAAK,CAAC,CAAlB,IAAuBE,WAAW,KAAK,CAAC,CAA5C,EAAgD;IAC5CH,MAAM,GAAGhC,UAAU,CAACQ,SAAX,CAAsByB,YAAtB,EAAoCE,WAApC,CAAT;IAEA,IAAIC,UAAU,GAAGC,kBAAkB,CAAEL,MAAF,CAAnC;;IAEA,IAAII,UAAJ,EAAiB;MACbA,UAAU,GAAGA,UAAU,CAAC1B,OAAX,CAAoB,GAApB,EAAyB,GAAzB,CAAb;MACAsB,MAAM,GAAGI,UAAT;IACH;EACJ;;EAED,OAAOJ,MAAP;AACH,CAjBM;AAmBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,QAAQ,GAAG,UAAUtC,UAAV,EAAsBC,YAAtB,EAAqC;EACvD,IAAIT,CAAC,CAAC+C,QAAF,CAAYvC,UAAZ,KAA4BA,UAAU,CAACqB,MAAX,GAAoB,CAApD,EAAwD;IACpDmB,MAAM,CAACC,IAAP,CAAa1C,uBAAuB,CAAEC,UAAF,EAAcC,YAAd,CAApC,EAAkE,OAAlE,EAA2E,SAA3E;EACH;AACJ,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIyC,SAAS,GAAG,UAAUC,qBAAV,EAAkC;EACrDnD,CAAC,CAACoD,OAAF,CAAWD,qBAAX,EAAkC,UAAUE,iBAAV,EAA8B;IAC5D,IAAIrD,CAAC,CAAC+C,QAAF,CAAYM,iBAAiB,CAAC3C,QAA9B,KAA4CV,CAAC,CAAC+C,QAAF,CAAYM,iBAAiB,CAAC7C,UAA9B,CAA5C,IAA0F6C,iBAAiB,CAAC3C,QAAlB,KAA+B,EAAzH,IAA+H2C,iBAAiB,CAAC7C,UAAlB,KAAiC,EAApK,EAAyK;MACrK;MACA;MACA;MACA;MACA,IAAI8C,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAwB,GAAxB,CAAX;MACAF,IAAI,CAACG,MAAL,GAAc,QAAd;MACAH,IAAI,CAACI,IAAL,GAAYnD,uBAAuB,CAAE8C,iBAAiB,CAAC7C,UAApB,EAAgC6C,iBAAiB,CAAC3C,QAAlD,CAAnC;MACA6C,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA2BN,IAA3B;MACAA,IAAI,CAACO,KAAL;MACAP,IAAI,CAACQ,MAAL;IACH;EACJ,CAbD;AAcH,CAfM;AAiBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAUvD,UAAV,EAAuB;EACpD,IAAIR,CAAC,CAAC+C,QAAF,CAAYvC,UAAZ,KAA4BA,UAAU,CAACqB,MAAX,GAAoB,CAApD,EAAwD;IACpDmB,MAAM,CAACC,IAAP,CAAa1C,uBAAuB,CAAEC,UAAF,CAApC,EAAoD,QAApD,EAA8D,SAA9D;EACH;AACJ,CAJM;AAMPF,OAAO,GAAG;EACNc,qBADM;EAENa,SAFM;EAGNC,mBAHM;EAINC,UAJM;EAKNI,SALM;EAMNO,QANM;EAONI,SAPM;EAQNa;AARM,CAAV;AAUA,eAAezD,OAAf"},"metadata":{},"sourceType":"module"}
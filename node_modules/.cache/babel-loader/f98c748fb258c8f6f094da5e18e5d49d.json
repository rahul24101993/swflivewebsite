{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service is used to manage command visibility.\n *\n * @module js/commandVisibilityService\n */import functional from'js/functionalUtility.service';/**\n * Get any usages of \"visibleServerCommands\" context from the condition string\n *\n * @param {String} s The string condition to check\n * @return {String[]} Values in visibleServerCommands that are checked\n */const getServerConditions=function(s){var re=/ctx\\.visibleServerCommands\\.([a-zA-Z]\\w*)(\\W*|$)/g;var result=[];var m=re.exec(s);while(m){result.push(m[1]);m=re.exec(s);}return result;};/**\n * Parse a condition expression for any usages of server visibility\n *\n * @param {String|Object} condition Condition expression\n * @returns {[String]} List of server visibility usages\n */export const getServerVisibilityUsage=condition=>{if(typeof condition==='string'){return getServerConditions(condition);}//If object based condition recursivly parse the object values\nreturn Object.values(condition).map(getServerVisibilityUsage).reduce(functional.concat,[]);};/**\n * Get the list of server conditions used by a command\n *\n * @param {CommandOverlay} command Command to check\n * @returns {[String]} List of server visibility usages\n */export const getServerConditionUsage=command=>{const directReferences=command.handlers.map(handler=>{return[...getServerVisibilityUsage(handler.activeWhen.expression),...(handler.enableWhen?getServerVisibilityUsage(handler.enableWhen.expression):[]),...(handler.selectWhen?getServerVisibilityUsage(handler.selectWhen.expression):[]),...(handler.visibleWhen?getServerVisibilityUsage(handler.visibleWhen.expression):[])];}).reduce((acc,nxt)=>acc.concat(nxt),[]);const childReferences=command.children.map(getServerConditionUsage).reduce((acc,nxt)=>acc.concat(nxt),[]);return[...directReferences,...childReferences];};export default{getServerVisibilityUsage,getServerConditionUsage};","map":null,"metadata":{},"sourceType":"module"}
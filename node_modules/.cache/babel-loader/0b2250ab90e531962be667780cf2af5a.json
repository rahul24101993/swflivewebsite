{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwCommandPanelService.js\";\nimport AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport eventBus from 'js/eventBus';\nimport AwNavigatePanel from 'viewmodel/AwNavigatePanelViewModel';\nimport { ShowWhen } from 'js/hocCollection';\nimport _ from 'lodash';\nimport appCtxSvc from 'js/appCtxService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AwShowWhenProvider = ShowWhen(AwNavigatePanel);\n_c3 = AwShowWhenProvider;\n_c = AwShowWhenProvider;\nexport const awCommandPanelRenderFunction = props => {\n  const {\n    attributes,\n    onSubmit,\n    submitAction,\n    subPanelContext = {},\n    updateActiveView = {},\n    viewModel\n  } = props;\n  const {\n    data\n  } = viewModel;\n  const {\n    activeView = null\n  } = updateActiveView;\n  let previousView = null;\n  let rootNode = data.panelNavTree || null;\n\n  if (rootNode && activeView) {\n    let currentPanelNode = findNode(activeView, rootNode);\n\n    if (currentPanelNode) {\n      previousView = currentPanelNode.getParentNode().getNodeName();\n    }\n  }\n\n  const loadSubPanels = () => {\n    let dynamicSubPanels = data.dynamicSubPanels || [];\n    let hierarchy = findHierarchy(activeView, rootNode);\n    return dynamicSubPanels.map(subPanel => {\n      let panelId = subPanel.destPanelId;\n      let reCreatePanel = subPanel.hasOwnProperty('recreatePanel') ? subPanel.recreatePanel === true : false;\n      let condition = reCreatePanel ? activeView === panelId : true;\n\n      if (!condition) {\n        //When move from panel in higher order, we dont destroy it immediately but destroy and recreate on revisit to panel based on recreatePanel flag\n        if (hierarchy.indexOf(activeView) > hierarchy.indexOf(panelId)) {\n          condition = true; // DO NOT DESTROY\n        }\n      }\n\n      return condition && /*#__PURE__*/_jsxDEV(AwShowWhenProvider, {\n        showWhen: activeView === panelId,\n        destPanelId: panelId,\n        prePanelId: previousView,\n        updateActiveView: updateActiveView,\n        subPanelContext: subPanel.subPanelContext,\n        title: subPanel.title\n      }, panelId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 30\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", { ...attributes,\n    onSubmit: event => {\n      onSubmit && onSubmit(event, submitAction);\n    },\n    className: \"sw-column flex-auto aw-panel sw-command-panel align-self-stretch afx-content-background\",\n    children: [!props.hideTitle ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-layout-panelTitle sw-row justify-justified\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: (props.caption ? '' : 'hidden ') + 'aw-panel-caption align-self-stretch',\n        children: props.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-row align-center justify-right flex-shrink sw-panel-bar\",\n        children: [/*#__PURE__*/_jsxDEV(AwCommandBar, {\n          className: \"aw-layout-workareaCommandbar\",\n          anchor: props.anchor,\n          alignment: \"HORIZONTAL\",\n          context: props.context\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AwCommandBar, {\n          context: props.context,\n          class: \"aw-layout-workareaCommandbar\",\n          anchor: \"aw_commandPanel\",\n          alignment: \"HORIZONTAL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 34\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-command-panelContent sw-column flex-auto\",\n      children: [props.children, loadSubPanels()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"aw-hide-form-button\",\n      disabled: true,\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\nexport const executeReveal = function (revealAction, subPanels) {\n  if (_.isFunction(revealAction)) {\n    revealAction();\n  } // preloadedPanels are the panels which are statically declared inside command -panel child as command-sub-panel.\n\n\n  let preLoadedCommandSubPanels = [];\n\n  if (subPanels) {\n    let children = _.isArray(subPanels) ? subPanels : [subPanels];\n    preLoadedCommandSubPanels = children.map(child => {\n      return child.props && child.props.panelId ? child.props.panelId : '';\n    }).filter(child => child !== '');\n  }\n\n  eventBus.publish('awPanel.reveal', {});\n  return preLoadedCommandSubPanels;\n};\n/**\n * @param {*} subPanelContext\n */\n\nexport const navigatePanel = (eventData, updateActiveView, panelNavTree, dynamicSubPanels, staticCommandSubPanels) => {\n  let activeView = updateActiveView.activeView;\n  const pDispatch = updateActiveView.dispatch;\n\n  if (pDispatch && activeView) {\n    appCtxSvc.updateCtx('panelContext', eventData); // If the incoming sub-panel is not yet registered with dynamicSubPanels state, It must be a getting loaded newly.\n\n    const isAlreadyLoadedDynPanel = dynamicSubPanels.findIndex(loadedPanel => loadedPanel.destPanelId === eventData.destPanelId) !== -1;\n    const isStaticCommandPanel = staticCommandSubPanels.findIndex(staticCommandSubPanel => staticCommandSubPanel === eventData.destPanelId) !== -1;\n    /**\n     *  isNewNavigationSystemEnabled\n     *  BA Specific case\n     * ----------------------------------------------------------------------------------------------------\n     *  In BA , user might use a component directly inside a command-panel and later do navigation from the\n     *  <aw-command-panel><aw-info show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n     *  In these cases, when navigating back, user need to specify \"backNavigation\" as true as part of \"aw.navigate\" eventdata.\n     *  isNewNavigationSystemEnabled will be enabled when \"backNavigation\" is set as true in the event data.\n     *\n     *  In other cases ( same as ng-afx)\n     * -----------------------------------------------------------------------------------------------------------\n     *  <aw-command-panel><aw-command-sub-panel panel-id='awInfo' show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n     *  User need not required to define backNavigation as true as part of eventdata amd should work as ng-afx worked.       *\n     *\n     *  If the incoming new panel is not part of dynamicSubPanels and staticCommandSubPanel, then only add it to dynamicSubPanels.\n     *  Otherwise it means the incoming panel( specified destPanelId in eventData) is already loaded and not a new one.\n     */\n\n    let isNewNavigationSystemEnabled = false;\n    let backNavigation = false;\n\n    if (eventData.hasOwnProperty('backNavigation')) {\n      isNewNavigationSystemEnabled = true;\n\n      if (eventData.backNavigation) {\n        backNavigation = true;\n      }\n    }\n\n    if (isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !backNavigation) {\n      dynamicSubPanels.push(eventData);\n    }\n\n    if (!isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !isStaticCommandPanel) {\n      dynamicSubPanels.push(eventData);\n    }\n\n    dynamicSubPanels = dynamicSubPanels.map(subPanel => subPanel.destPanelId === eventData.destPanelId ? eventData : subPanel); // The current view will be evetually becomes the previousView\n\n    let previousView = null; // The Panel name came from event will become the activeView eventually\n    //let activeView = null;\n\n    let rootNode = panelNavTree || new Node('root');\n\n    if (activeView !== eventData.destPanelId) {\n      previousView = activeView;\n      activeView = eventData.destPanelId;\n      let prevPanelNode = findNode(previousView, rootNode); // If the current panel is not found in tree, then this is the first\n\n      if (!prevPanelNode) {\n        let prevNode = new Node(previousView);\n        rootNode.addChildNodes(prevNode);\n        prevNode.addChildNodes(new Node(activeView));\n      } else {\n        // If the new Panel( suppose to load) is found in the Tree, then no need to add it.\n        // probably the navigation already happened.\n        if (!findNode(activeView, rootNode)) {\n          prevPanelNode.addChildNodes(new Node(activeView));\n        }\n      }\n    }\n\n    return {\n      panelNavTree: { ...rootNode\n      },\n      dynamicSubPanels: [...dynamicSubPanels],\n      currentView: activeView\n    };\n  }\n};\nexport const dispatchActiveView = (updateActiveView, currentView) => {\n  const pDispatch = updateActiveView.dispatch;\n\n  if (pDispatch && currentView) {\n    pDispatch({\n      value: {\n        'data.activeView': currentView\n      }\n    });\n  }\n};\n/**\n * Simple Data Structure to hold the Panel Navigation sequence.\n * @param {*} name\n * @param {*} pNode\n * @param {*} cNode\n */\n\nconst Node = function (name) {\n  let nodeName = name;\n  let parentNode = null;\n  const childNodes = [];\n\n  this.getNodeName = () => nodeName;\n\n  this.setNodeName = name => nodeName = name;\n\n  this.getParentNode = () => parentNode;\n\n  this.setParentNode = pNode => parentNode = pNode;\n\n  this.getChildNodes = () => childNodes;\n\n  this.addChildNodes = childNode => {\n    let _self = this;\n\n    let hasChildNode = childNodes.filter(cNode => cNode.getNodeName() === childNode.getNodeName());\n\n    if (hasChildNode.length === 0) {\n      childNodes.push(childNode);\n      childNode.setParentNode(_self);\n    }\n  };\n};\n\n_c4 = Node;\n_c2 = Node;\n\nconst findHierarchy = (name, rootNode) => {\n  let order = [];\n\n  if (rootNode === null || rootNode.getNodeName() === name) {\n    return ['root'];\n  }\n\n  let traverseHierarchy = function (rootNode) {\n    _.forEach(rootNode.getChildNodes(), Node => {\n      order.push(Node.getNodeName());\n      return traverseHierarchy(Node);\n    });\n  };\n\n  traverseHierarchy(rootNode);\n  return order;\n};\n\nconst findNode = (name, rootNode) => {\n  if (rootNode.getNodeName() === name) {\n    return rootNode;\n  }\n\n  let visitedNode = null;\n\n  let inOrderTraversal = function (rootNode) {\n    _.forEach(rootNode.getChildNodes(), Node => {\n      if (Node && Node.getNodeName() === name) {\n        visitedNode = Node;\n        return;\n      }\n\n      return inOrderTraversal(Node);\n    });\n  };\n\n  inOrderTraversal(rootNode);\n  return visitedNode;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AwShowWhenProvider\");\n$RefreshReg$(_c2, \"Node\");\n\nvar _c3, _c4;\n\n$RefreshReg$(_c3, \"AwShowWhenProvider\");\n$RefreshReg$(_c4, \"Node\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwCommandPanelService.js"],"names":["AwShowWhenProvider","ShowWhen","awCommandPanelRenderFunction","props","subPanelContext","updateActiveView","viewModel","data","activeView","previousView","rootNode","currentPanelNode","findNode","loadSubPanels","dynamicSubPanels","hierarchy","findHierarchy","subPanel","panelId","reCreatePanel","condition","title","event","onSubmit","caption","context","executeReveal","_","revealAction","preLoadedCommandSubPanels","children","child","eventBus","navigatePanel","pDispatch","appCtxSvc","isAlreadyLoadedDynPanel","loadedPanel","eventData","isStaticCommandPanel","staticCommandSubPanels","staticCommandSubPanel","isNewNavigationSystemEnabled","backNavigation","panelNavTree","prevPanelNode","prevNode","currentView","dispatchActiveView","value","Node","nodeName","parentNode","childNodes","name","pNode","childNode","_self","hasChildNode","cNode","order","traverseHierarchy","visitedNode","inOrderTraversal"],"mappings":"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","sourcesContent":["import AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport eventBus from 'js/eventBus';\nimport AwNavigatePanel from 'viewmodel/AwNavigatePanelViewModel';\nimport { ShowWhen } from 'js/hocCollection';\nimport _ from 'lodash';\nimport appCtxSvc from 'js/appCtxService';\n\nconst AwShowWhenProvider = ShowWhen( AwNavigatePanel );\nexport const awCommandPanelRenderFunction = ( props ) => {\n    const { attributes, onSubmit, submitAction, subPanelContext = {}, updateActiveView = {}, viewModel } = props;\n    const { data } = viewModel;\n    const { activeView = null } = updateActiveView;\n    let previousView = null;\n    let rootNode = data.panelNavTree || null;\n    if( rootNode && activeView ) {\n        let currentPanelNode = findNode( activeView, rootNode );\n        if( currentPanelNode ) {\n            previousView = currentPanelNode.getParentNode().getNodeName();\n        }\n    }\n\n    const loadSubPanels = () => {\n        let dynamicSubPanels = data.dynamicSubPanels || [];\n        let hierarchy = findHierarchy( activeView, rootNode );\n        return dynamicSubPanels.map( ( subPanel ) => {\n            let panelId = subPanel.destPanelId;\n            let reCreatePanel = subPanel.hasOwnProperty( 'recreatePanel' ) ? subPanel.recreatePanel === true : false;\n            let condition = reCreatePanel ? activeView === panelId : true;\n            if( !condition ) {\n                //When move from panel in higher order, we dont destroy it immediately but destroy and recreate on revisit to panel based on recreatePanel flag\n                if( hierarchy.indexOf( activeView ) > hierarchy.indexOf( panelId ) ) {\n                    condition = true; // DO NOT DESTROY\n                }\n            }\n\n            return (\n                condition && <AwShowWhenProvider\n                    showWhen={activeView === panelId}\n                    key={panelId}\n                    destPanelId = {panelId}\n                    prePanelId={previousView}\n                    updateActiveView={updateActiveView}\n                    subPanelContext={subPanel.subPanelContext}\n                    title={subPanel.title}>\n                </AwShowWhenProvider>\n            );\n        } );\n    };\n    return (\n        <form { ...attributes }\n            onSubmit = { event => { onSubmit && onSubmit( event, submitAction ); } }\n            className = 'sw-column flex-auto aw-panel sw-command-panel align-self-stretch afx-content-background'>\n            { !props.hideTitle ? <div className='aw-layout-panelTitle sw-row justify-justified'>\n                <div className={( props.caption ? '' : 'hidden ' ) + 'aw-panel-caption align-self-stretch'}>\n                    { props.caption }\n                </div>\n                <div className='sw-row align-center justify-right flex-shrink sw-panel-bar'>\n                    {/* revisitMe: Jignesh to add map for icon buttons */}\n                    {/* <aw-icon-button class='aw-layout-right' command='command' visible-when='{{command.condition}}' ng-repeat='command in commands'></aw-icon-button> */}\n                    <AwCommandBar\n                        className='aw-layout-workareaCommandbar'\n                        anchor={ props.anchor }\n                        alignment='HORIZONTAL'\n                        context={ props.context}>\n                    </AwCommandBar>\n                    <AwCommandBar\n                        context={ props.context }\n                        class='aw-layout-workareaCommandbar'\n                        anchor='aw_commandPanel'\n                        alignment='HORIZONTAL'>\n                    </AwCommandBar>\n                </div>\n            </div>\n                : '' }\n            <div className='sw-command-panelContent sw-column flex-auto'>\n                { props.children }\n                { loadSubPanels()}\n            </div>\n            <button type='submit' className='aw-hide-form-button' disabled={true} aria-hidden='true'></button>\n        </form>\n    );\n};\n\nexport const executeReveal = function( revealAction, subPanels ) {\n    if( _.isFunction( revealAction ) ) {\n        revealAction();\n    }\n    // preloadedPanels are the panels which are statically declared inside command -panel child as command-sub-panel.\n    let preLoadedCommandSubPanels = [];\n    if( subPanels ) {\n        let children = _.isArray( subPanels ) ? subPanels : [ subPanels ];\n        preLoadedCommandSubPanels = children.map( ( child ) => {\n            return child.props && child.props.panelId ? child.props.panelId : '';\n        } ).filter( ( child ) => child !== '' );\n    }\n    eventBus.publish( 'awPanel.reveal', {} );\n    return preLoadedCommandSubPanels;\n};\n\n/**\n * @param {*} subPanelContext\n */\nexport const navigatePanel = ( eventData, updateActiveView, panelNavTree, dynamicSubPanels, staticCommandSubPanels ) => {\n    let activeView = updateActiveView.activeView;\n    const pDispatch = updateActiveView.dispatch;\n    if( pDispatch && activeView ) {\n        appCtxSvc.updateCtx( 'panelContext', eventData );\n\n        // If the incoming sub-panel is not yet registered with dynamicSubPanels state, It must be a getting loaded newly.\n        const isAlreadyLoadedDynPanel = dynamicSubPanels.findIndex( ( loadedPanel ) => loadedPanel.destPanelId === eventData.destPanelId ) !== -1;\n        const isStaticCommandPanel = staticCommandSubPanels.findIndex( ( staticCommandSubPanel ) => staticCommandSubPanel === eventData.destPanelId ) !== -1;\n        /**\n         *  isNewNavigationSystemEnabled\n         *  BA Specific case\n         * ----------------------------------------------------------------------------------------------------\n         *  In BA , user might use a component directly inside a command-panel and later do navigation from the\n         *  <aw-command-panel><aw-info show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n         *  In these cases, when navigating back, user need to specify \"backNavigation\" as true as part of \"aw.navigate\" eventdata.\n         *  isNewNavigationSystemEnabled will be enabled when \"backNavigation\" is set as true in the event data.\n         *\n         *  In other cases ( same as ng-afx)\n         * -----------------------------------------------------------------------------------------------------------\n         *  <aw-command-panel><aw-command-sub-panel panel-id='awInfo' show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n         *  User need not required to define backNavigation as true as part of eventdata amd should work as ng-afx worked.       *\n         *\n         *  If the incoming new panel is not part of dynamicSubPanels and staticCommandSubPanel, then only add it to dynamicSubPanels.\n         *  Otherwise it means the incoming panel( specified destPanelId in eventData) is already loaded and not a new one.\n         */\n        let isNewNavigationSystemEnabled = false;\n        let backNavigation = false;\n        if( eventData.hasOwnProperty( 'backNavigation' ) ) {\n            isNewNavigationSystemEnabled = true;\n            if( eventData.backNavigation ) {\n                backNavigation = true;\n            }\n        }\n        if( isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !backNavigation ) {\n            dynamicSubPanels.push( eventData );\n        }\n        if( !isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !isStaticCommandPanel ) {\n            dynamicSubPanels.push( eventData );\n        }\n        dynamicSubPanels = dynamicSubPanels.map( ( subPanel ) => subPanel.destPanelId === eventData.destPanelId ? eventData : subPanel );\n        // The current view will be evetually becomes the previousView\n        let previousView = null;\n        // The Panel name came from event will become the activeView eventually\n        //let activeView = null;\n        let rootNode = panelNavTree || new Node( 'root' );\n        if( activeView !== eventData.destPanelId ) {\n            previousView = activeView;\n            activeView = eventData.destPanelId;\n            let prevPanelNode = findNode( previousView, rootNode );\n            // If the current panel is not found in tree, then this is the first\n            if( !prevPanelNode ) {\n                let prevNode = new Node( previousView );\n                rootNode.addChildNodes( prevNode );\n                prevNode.addChildNodes( new Node( activeView ) );\n            } else {\n                // If the new Panel( suppose to load) is found in the Tree, then no need to add it.\n                // probably the navigation already happened.\n                if( !findNode( activeView, rootNode ) ) {\n                    prevPanelNode.addChildNodes( new Node( activeView ) );\n                }\n            }\n        }\n        return {\n            panelNavTree: { ...rootNode },\n            dynamicSubPanels: [ ...dynamicSubPanels ],\n            currentView: activeView\n        };\n    }\n};\n\nexport const dispatchActiveView = ( updateActiveView, currentView ) => {\n    const pDispatch = updateActiveView.dispatch;\n    if( pDispatch && currentView ) {\n        pDispatch( { value: { 'data.activeView': currentView } } );\n    }\n};\n\n/**\n * Simple Data Structure to hold the Panel Navigation sequence.\n * @param {*} name\n * @param {*} pNode\n * @param {*} cNode\n */\nconst Node = function( name ) {\n    let nodeName = name;\n    let parentNode = null;\n    const childNodes = [];\n\n    this.getNodeName = () => nodeName;\n    this.setNodeName = ( name ) => nodeName = name;\n\n    this.getParentNode = () => parentNode;\n    this.setParentNode = ( pNode ) => parentNode = pNode;\n\n    this.getChildNodes = () => childNodes;\n    this.addChildNodes = ( childNode ) => {\n        let _self = this;\n        let hasChildNode = childNodes.filter( ( cNode ) => cNode.getNodeName() === childNode.getNodeName() );\n        if( hasChildNode.length === 0 ) {\n            childNodes.push( childNode );\n            childNode.setParentNode( _self );\n        }\n    };\n};\n\nconst findHierarchy = ( name, rootNode ) => {\n    let order = [];\n    if( rootNode === null || rootNode.getNodeName() === name ) {\n        return [ 'root' ];\n    }\n    let traverseHierarchy = function( rootNode ) {\n        _.forEach( rootNode.getChildNodes(), ( Node ) => {\n            order.push( Node.getNodeName() );\n            return traverseHierarchy( Node );\n        } );\n    };\n    traverseHierarchy( rootNode );\n    return order;\n};\n\nconst findNode = ( name, rootNode ) => {\n    if( rootNode.getNodeName() === name ) {\n        return rootNode;\n    }\n    let visitedNode = null;\n    let inOrderTraversal = function( rootNode ) {\n        _.forEach( rootNode.getChildNodes(), ( Node ) => {\n            if( Node && Node.getNodeName() === name ) {\n                visitedNode = Node;\n                return;\n            }\n            return inOrderTraversal( Node );\n        } );\n    };\n    inOrderTraversal( rootNode );\n    return visitedNode;\n};\n"]},"metadata":{},"sourceType":"module"}
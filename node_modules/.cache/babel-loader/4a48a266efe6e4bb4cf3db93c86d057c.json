{"ast":null,"code":"// Copyright (c) 2021 Siemens\nimport AwDateVal from'viewmodel/AwDateValViewModel';import AwTimeVal from'viewmodel/AwTimeValViewModel';import{getValClass}from'js/componentUtils';import AwPropertyNonEditVal from'viewmodel/AwPropertyNonEditValViewModel';import AwPropertyLovVal from'viewmodel/AwPropertyLovValViewModel';import dateTimeSvc from'js/dateTimeService';import uwPropSvc from'js/uwPropertyService';import uwSupportSvc from'js/uwSupportService';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const awDatetimeValRenderFunction=props=>{const{viewModel,ctxMin,actions,i18n,fields,grids,formProp,messages,...prop}=props;const isEnabled=prop.fielddata.isEnabled;const hasLov=prop.fielddata.hasLov;const isArray=prop.fielddata.isArray;const{data,dispatch}=viewModel;let fielddata={...prop.fielddata};let dateApi={...prop.fielddata.dateApi};dateApi.isNotLov=true;fielddata.dateApi=dateApi;let otherProps={...prop,fielddata};if(data._isRefreshNeeded){otherProps.parentSelected=true;data._isRefreshNeeded=false;}if(fielddata.dateApi.isDateEnabled&&fielddata.dateApi.isTimeEnabled){//If date and time enabled then time popup should be handled\notherProps.onChange=event=>{if(!isArray){prop.onChange(event);}else{data.selectedDate=event.target.value;dispatch({path:'data._isRefreshNeeded',value:true});}};otherProps.onTimeSelectedOrEntered=timeValue=>{let timeInMilliSec=dateTimeSvc.getTimeInMilliSec(timeValue);let dateAndTime;if(timeInMilliSec===null){dateAndTime=null;}else{dateAndTime=data.selectedDate?new Date(Number(data.selectedDate)+timeInMilliSec):new Date(Number(dateTimeSvc.getDefaultDate(fielddata.dateApi))+timeInMilliSec);}prop.onChange({target:{value:dateAndTime}});dispatch({path:'data._isRefreshNeeded',value:false});};}let labelDisplay;if(prop&&prop.labeldisplay){labelDisplay=uwSupportSvc.retrievePropertyLabelDisplay(prop.labeldisplay);uwPropSvc.setPropertyLabelDisplay(prop,labelDisplay);}const getApplicableClasses=()=>{return getValClass(otherProps);};const renderDateTime=()=>{if(!isEnabled){otherProps.fielddata.uiValue=otherProps.value;return/*#__PURE__*/_jsx(AwPropertyNonEditVal,{...otherProps});}if(hasLov){return/*#__PURE__*/_jsx(AwPropertyLovVal,{...otherProps});}if(!prop.fielddata.dateApi.isTimeEnabled){return/*#__PURE__*/_jsx(AwDateVal,{...otherProps,className:getApplicableClasses()});}else if(!prop.fielddata.dateApi.isDateEnabled){return/*#__PURE__*/_jsx(AwTimeVal,{...otherProps});}// renderFn for Date and Time\nreturn/*#__PURE__*/_jsxs(\"div\",{className:getApplicableClasses()+' sw-row sw-date-time-container propertyLabelTopContainer',children:[/*#__PURE__*/_jsx(AwDateVal,{...otherProps}),/*#__PURE__*/_jsx(AwTimeVal,{...otherProps})]});};if(isArray){return/*#__PURE__*/_jsxs(\"div\",{className:getApplicableClasses()+' sw-row sw-date-time-container propertyLabelTopContainer',children:[/*#__PURE__*/_jsx(AwDateVal,{...otherProps}),/*#__PURE__*/_jsx(AwTimeVal,{...otherProps})]});}if(labelDisplay==='NO_PROPERTY_LABEL'){return renderDateTime();}return renderDateTime();};","map":null,"metadata":{},"sourceType":"module"}
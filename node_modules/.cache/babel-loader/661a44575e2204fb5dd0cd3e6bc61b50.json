{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is the entry point for SPLM table. It initializes the table and renders it\n *\n * @module js/splmTableFactory\n */\nimport SPLMTableColumnRearrangement from 'js/splmTableColumnRearrangement';\nimport SPLMTableInfiniteScrollService from 'js/splmTableInfiniteScrollService';\nimport SPLMTableKeyboardService from 'js/splmTableKeyboardService';\nimport SPLMTableTranspose from 'js/splmTableTranspose';\nimport _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport awColumnFilterService from 'js/awColumnFilterService';\nimport awSPLMTableCellRendererFactory from 'js/awSPLMTableCellRendererFactory';\nimport declDragAndDropService from 'js/declDragAndDropService';\nimport domUtils from 'js/domUtils';\nimport dragAndDropService from 'js/dragAndDropService';\nimport eventBus from 'js/eventBus';\nimport localeService from 'js/localeService';\nimport selectionHelper from 'js/selectionHelper';\nimport splmTableDragHandler from 'js/splmTableDragHandler';\nimport uwUtilSvc from 'js/uwUtilService';\nimport messagingService from 'js/messagingService';\nimport { svgString as miscInProcessIndicator } from \"image/miscInProcessIndicator16.svg\";\nimport { svgString as miscExpandedTree } from \"image/miscExpandedTree12.svg\";\nimport { svgString as miscCollapsedTree } from \"image/miscCollapsedTree12.svg\";\nimport util from 'js/splmTableUtils';\nimport Trv from 'js/splmTableTraversal';\nimport Const from 'js/splmTableConstants';\nimport Editor from 'js/splmTableEditor';\nimport MenuService from 'js/splmTableMenuService';\nimport Ctrl from 'js/splmTableDomController';\nimport Cell from 'js/splmTableCellRenderer';\nimport SPLMTableSelectionHelper from 'js/splmTableSelectionHelper';\n/**\n * Cached reference to the various AngularJS and AW services.\n */\n\nvar exports = {};\nvar _splmTableMessages = {};\nvar _defaultContentFilter = {\n  isIdOfObject: function (vmo, uid) {\n    let matchedId = false;\n\n    if (vmo) {\n      if (vmo.alternateID) {\n        matchedId = vmo.alternateID === uid;\n      }\n\n      if (!matchedId && vmo.uid) {\n        matchedId = vmo.uid === uid || vmo.uid.indexOf(uid) !== -1;\n      }\n    }\n\n    return matchedId;\n  }\n};\nconst dom = domUtils.DOMAPIs;\n/**\n * Check if we are using a 'gridid' in the closest 'declViewModel' in the scope tree.<BR>\n * If so: Use it to display the aw-table data<BR>\n *\n */\n\nexport let createTableObject = function (directiveElement, gridid, dataProvider, viewModelCollection, columnProvider, declViewModel, contentFilter, gridOptions, containerHeight, gridContextDispatcher, runActionWithViewModel, tableInstanceCallbacks, tableContext, reusable, showCheckBox) {\n  // 20180920: put it to null so that it will error out when there is an code error\n  var _tableColumns = null;\n\n  var _contentFilter = contentFilter || _defaultContentFilter; // setup cell renderer\n\n\n  var cellRenderer = awSPLMTableCellRendererFactory.createCellRenderer();\n  var table = util.createElement('div');\n\n  var _trv = new Trv(table);\n\n  var tableCtrl = null;\n  var tableEditor = null;\n  var menuService = null;\n  var _nodeExpansionInProgress = false;\n  let tableScroll = null;\n  let columnRearrangementService = null;\n  let keyboardService = null;\n  let updateEditState = null;\n  let _showCheckBox = showCheckBox; // LCS-138303 - Performance tuning for 14 Objectset Table case - implementation\n  // Define header and row height here to save computed CSS reading\n\n  var _rowBorderWidth = 1;\n\n  var _rowHeight = appCtxService.ctx.layout === 'compact' ? Const.HEIGHT_COMPACT_ROW : Const.HEIGHT_ROW;\n\n  _rowHeight = util.getTableRowHeight(gridOptions, _rowHeight);\n  var _headerHeight = Const.HEIGHT_HEADER;\n  _headerHeight = util.getTableHeaderHeight(gridOptions, _headerHeight); // This updateColumnDefs function is called as part of the buildDynamicColumns.\n\n  let _updateColumnDefs = function () {\n    let columns = dataProvider.cols;\n\n    if (gridOptions.transpose === true) {\n      // Get and assign transposed columns\n      columns = SPLMTableTranspose.getTransposedColumns(_tableColumns, dataProvider.viewModelCollection.loadedVMObjects);\n    }\n\n    for (let i = 0; i < columns.length; i++) {\n      columns[i].visible = !columns[i].hasOwnProperty('visible') || columns[i].visible;\n    }\n\n    _tableColumns = _.filter(columns, function (column) {\n      if (column.visible) {\n        return column;\n      }\n\n      return false;\n    });\n\n    _.forEach(_tableColumns, function (column, index) {\n      column.index = index;\n\n      if (!column.cellRenderers) {\n        column.cellRenderers = [];\n      }\n\n      if (column.name === 'icon' && column.iconCellRenderer) {\n        column.cellRenderers = column.cellRenderers.concat(column.iconCellRenderer);\n      }\n\n      column.cellRenderers = column.cellRenderers.concat(cellRenderer.getAwCellRenderers());\n    });\n\n    _.forEach(_tableColumns, function (column, index) {\n      column.index = index;\n\n      if (!column.headerRenderers) {\n        column.headerRenderers = [];\n      }\n\n      column.headerRenderers = column.headerRenderers.concat(cellRenderer.getAwHeaderRenderers());\n    });\n\n    menuService.loadDefaultColumnMenus();\n  };\n\n  let getObjects = function () {\n    if (!dataProvider.viewModelCollection) {\n      return [];\n    }\n\n    if (gridOptions.transpose === true) {\n      return SPLMTableTranspose.getTransposedVmos(dataProvider.cols, dataProvider.viewModelCollection.loadedVMObjects);\n    }\n\n    return dataProvider.viewModelCollection.loadedVMObjects;\n  };\n\n  let resetColumns = function () {\n    _updateColumnDefs();\n\n    awColumnFilterService.removeStaleFilters(columnProvider, _tableColumns); // property loading has completed\n\n    tableCtrl.resetColumnDefs(_tableColumns); // Table headers recreated, need to initialize column rearrangement\n\n    columnRearrangementService.initialize(); // Trick for update scroll container position\n\n    if (tableScroll.isInitialized()) {\n      cellRenderer.resetHoverCommandElement();\n      tableScroll.setLoadedVMObjects(getObjects());\n      tableScroll.handleScroll();\n    }\n  };\n  /**\n   * Finds VMOs with undefined props within the specified range.\n   *\n   * @param {int} startIndex - starting VMO index\n   * @param {int} endIndex - edning VMO index\n   */\n\n\n  var findVMOsWithMissingProps = function (startIndex, endIndex) {\n    var emptyVMOs = [];\n\n    for (var i = startIndex; i <= endIndex; i++) {\n      var vmo = dataProvider.viewModelCollection.loadedVMObjects[i];\n\n      if (vmo.isPropLoading) {\n        continue;\n      } else if (!vmo.props) {\n        emptyVMOs.push(vmo);\n      } else {\n        var keys = Object.keys(vmo.props);\n\n        if (keys.length === 0) {\n          emptyVMOs.push(vmo);\n        }\n      }\n    }\n\n    return emptyVMOs;\n  };\n\n  let loadMissingProps = function () {\n    var firstRenderedItemIndex = tableScroll.getFirstRenderedItemIndex();\n    var lastRenderedItemIndex = tableScroll.getLastRenderedItemIndex();\n    var emptyVMOs = findVMOsWithMissingProps(firstRenderedItemIndex, lastRenderedItemIndex);\n\n    if (emptyVMOs.length > 0) {\n      eventBus.publish(gridid + '.plTable.loadProps', {\n        VMOs: emptyVMOs\n      });\n    }\n  };\n\n  if (gridid) {\n    var instanceEventSubcr = []; // Do essential table DOM Element initialization for further processing\n\n    table.id = gridid;\n    table.classList.add(Const.CLASS_TABLE);\n    table.classList.add(Const.CLASS_WIDGET_GRID);\n    table.classList.add(Const.CLASS_LAYOUT_COLUMN);\n    table.classList.add(Const.CLASS_WIDGET_TABLE_DROP);\n    table.classList.add(Const.CLASS_SELECTION_ENABLED);\n    util.setSortCriteriaOnColumns(columnProvider, dataProvider);\n\n    var getContainerHeight = function () {\n      if (containerHeight !== undefined) {\n        return containerHeight;\n      }\n\n      if (gridOptions.maxRowsToShow !== undefined) {\n        return (_rowHeight + _rowBorderWidth) * gridOptions.maxRowsToShow + Const.HEIGHT_HEADER;\n      }\n\n      return undefined;\n    };\n\n    tableScroll = new SPLMTableInfiniteScrollService(getContainerHeight());\n    table._tableInstance = {\n      ctx: appCtxService.ctx,\n      messages: _splmTableMessages,\n      declViewModel: declViewModel,\n      dataProvider: dataProvider,\n      viewModelCollection: viewModelCollection,\n      columnProvider: columnProvider,\n      gridId: gridid,\n      gridOptions: gridOptions,\n      isBulkEditing: false,\n      isCellEditing: false,\n      renderer: tableScroll,\n      dynamicRowHeightStatus: false,\n      cellRenderer: cellRenderer,\n      runActionWithViewModel: runActionWithViewModel,\n      tableInstanceCallbacks,\n      tableContext: tableContext ? tableContext : {},\n      showCheckBox: showCheckBox\n    };\n    tableEditor = new Editor(table, directiveElement, gridContextDispatcher);\n    table._tableInstance.editor = tableEditor;\n    keyboardService = new SPLMTableKeyboardService(table, tableEditor);\n    keyboardService.setupKeyListener();\n    table._tableInstance.keyboardService = keyboardService;\n    menuService = new MenuService(table, directiveElement, table._tableInstance, gridContextDispatcher);\n\n    if (gridOptions.enableGridMenu) {\n      menuService.addGridMenu();\n    }\n\n    if (gridOptions.showContextMenu === true) {\n      menuService.setContextSelectionHelper(selectionHelper);\n    }\n\n    if (gridOptions.enableDynamicRowHeight) {\n      table._tableInstance.dynamicRowHeightStatus = true;\n    }\n\n    _updateColumnDefs();\n\n    tableCtrl = new Ctrl(table, _tableColumns, tableEditor, gridContextDispatcher);\n    table._tableInstance.controller = tableCtrl;\n    table._tableInstance.editor = tableEditor; // LCS-13247 Pagination SOA performance issue for Objectset Table\n    // - Put a debounce here to avoid possible sending traffic jam, the number\n    //   is from _pingRedrawDebounce from aw.table.controller\n    // - With debounce IE performance improves a lot and no impact to chrome performance,\n    //   so leave the debounce for all\n\n    var _loadMorePageDebounce = _.debounce(function (firstRenderedItem, lastRenderedItem) {\n      eventBus.publish(gridid + '.plTable.loadMorePages', {\n        firstRenderedItem: firstRenderedItem,\n        lastRenderedItem: lastRenderedItem\n      });\n    }, 500);\n\n    var pendingUpdatedProps = {};\n\n    var updateRowContents = function (updatedPropsMaps) {\n      var rowElements = _trv.queryAllRowCellElementsFromTable();\n\n      _.forEach(updatedPropsMaps, function (updatedProps, vmoUid) {\n        _.forEach(rowElements, function (rowElem) {\n          _.forEach(rowElem.children, function (cellElem) {\n            // Check if the vmo has been updated, if not continue to next cell\n            let updatedVmo = null;\n\n            if (rowElem.vmo && rowElem.vmo.uid === vmoUid) {\n              updatedVmo = rowElem.vmo;\n            } else if (gridOptions.transpose === true && cellElem.columnDef.vmo && cellElem.columnDef.vmo.uid === vmoUid) {\n              updatedVmo = cellElem.columnDef.vmo;\n            } else {\n              return;\n            }\n\n            var needsUpdate = false;\n\n            if (cellElem.columnDef && cellElem.columnDef.name === 'icon' || gridOptions.transpose === true && rowElem.vmo.props.transposedColumnProperty.dbValue === 'icon') {\n              var imgElem = cellElem.getElementsByTagName('img')[0];\n\n              if (imgElem && imgElem.getAttribute('src') !== util.getImgURL(updatedVmo)) {\n                needsUpdate = true;\n              }\n            } else {\n              for (var i = 0; i < updatedProps.length; i++) {\n                if (cellElem.propName === updatedProps[i] || gridOptions.transpose === true && rowElem.vmo.props.transposedColumnProperty.dbValue === updatedProps[i]) {\n                  needsUpdate = true;\n                  break;\n                }\n              }\n            }\n\n            if (needsUpdate) {\n              Cell.updateCell(cellElem, rowElem, table, tableEditor);\n\n              if (rowElem.vmo.selected && (cellElem.columnDef.isTableCommand || cellElem.columnDef.isTreeNavigation)) {\n                let cellTop = cellElem.children[0];\n\n                if (cellElem.columnDef.isTreeNavigation) {\n                  cellTop = cellElem.getElementsByClassName('aw-jswidgets-tableNonEditContainer')[0];\n                }\n\n                if (cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length === 0) {\n                  if (dataProvider.selectionModel && !dataProvider.selectionModel.multiSelectEnabled && dataProvider.selectionModel.getCurrentSelectedCount() === 1) {\n                    let cellCommand = awSPLMTableCellRendererFactory.createCellCommandElement(cellElem.columnDef, rowElem.vmo, true);\n                    cellTop.appendChild(cellCommand);\n                  }\n                }\n              }\n            }\n          });\n        });\n      });\n    };\n\n    var updatePendingProps = _.debounce(function () {\n      // prevent from calling if table has been destroyed in meantime\n      if (!table._tableInstance.isDestroyed) {\n        updateRowContents(pendingUpdatedProps);\n        pendingUpdatedProps = {};\n      }\n    }, 250);\n\n    instanceEventSubcr.push(eventBus.subscribe('viewModelObject.propsUpdated', function (updatedProps) {\n      // Merge the updatedVmos into pendingUpdatedVmos\n      for (var vmoUid in updatedProps) {\n        if (pendingUpdatedProps[vmoUid] === undefined) {\n          pendingUpdatedProps[vmoUid] = updatedProps[vmoUid];\n        } else {\n          for (var i = 0; i < updatedProps[vmoUid].length; i++) {\n            var updatedPropName = updatedProps[vmoUid][i];\n\n            if (pendingUpdatedProps[vmoUid].indexOf(updatedPropName) === -1) {\n              pendingUpdatedProps[vmoUid].push(updatedPropName);\n            }\n          }\n        }\n      }\n\n      updatePendingProps();\n    }));\n\n    var loadProps = function (emptyVMOs) {\n      eventBus.publish(gridid + '.plTable.loadProps', {\n        VMOs: emptyVMOs\n      });\n    };\n\n    var editCellElement;\n    columnRearrangementService = new SPLMTableColumnRearrangement(table); // 20180927: This is not related to global isEdit anymore, feel free\n    // to refactor:)\n\n    var updateEditStatusForTableCanvas = function (isEditing) {\n      tableCtrl.setDraggable(!isEditing);\n      tableEditor.updateEditStatus(isEditing);\n    };\n\n    var _setupTreeForRestrictiveEditing = function (isEditing) {\n      tableScroll.setupTreeEditScroll(isEditing);\n    };\n\n    updateEditState = function (eventData) {\n      // We should not start edit for any non table cases.\n      // This should be started only for table cases and also based on the grid id you are on.\n      // PWA case the dataSource is the dataProvider, thus has no .dataProviders property (we check if it is the dataProvider in scope with .name)\n      // SWA case we have dataSource.dataProvider and can check with dataProviders[ dataProvider.name ]\n      if (tableCtrl && eventData.dataSource && (eventData.dataSource.getAtomicData && eventData.dataSource.getAtomicData().dpRef && eventData.dataSource.getAtomicData().dpRef.current || eventData.dataSource.name === dataProvider.name)) {\n        var isEditing = eventData.state === 'partialSave' || eventData.state === 'starting'; // If saving, set all column filters to be stale as data could have changed\n\n        if (eventData.state === 'saved') {\n          _.forEach(dataProvider.cols, function (column) {\n            awColumnFilterService.setColumnFilterStale(column);\n          });\n\n          if (!util.isAutoSaveEnabled(table)) {\n            tableEditor.clearPropIsEditableCache();\n          }\n\n          util.setIsCellEditing(table, false);\n        } else if (eventData.state === 'canceling') {\n          tableEditor.clearPropIsEditableCache();\n          util.setIsCellEditing(table, false);\n        } // Enable vmo caching on collapse in edit mode\n\n\n        dataProvider.cacheCollapse = true;\n        util.setIsBulkEditing(table, isEditing);\n        gridContextDispatcher({\n          type: 'UPDATE_VALUES',\n          isBulkEditing: table._tableInstance.isBulkEditing,\n          dynamicRowHeightStatus: table._tableInstance.dynamicRowHeightStatus\n        });\n        tableCtrl.setSelectable(!isEditing);\n\n        if (util.isCellEditing(table) === false || util.isCellEditing(table) && !util.isAutoSaveEnabled(table)) {\n          updateEditStatusForTableCanvas(isEditing);\n        }\n\n        if (gridOptions.useTree && !util.isExpandOrPaginationAllowedInEdit(table)) {\n          _setupTreeForRestrictiveEditing(isEditing);\n        }\n\n        if (!isEditing) {\n          // Restore original cache collapse state when leaving edit mode\n          dataProvider.restoreInitialCacheCollapseState();\n        }\n\n        if (table._tableInstance.dynamicRowHeightStatus === true) {\n          resetDynamicRowHeights();\n          clientRefresh();\n        }\n      }\n    };\n\n    instanceEventSubcr.push(eventBus.subscribe(dataProvider._eventTopicEditInProgress, function () {\n      if (reusable !== true) {\n        const eventData = {\n          dataSource: dataProvider,\n          state: dataProvider._editingState\n        };\n        updateEditState(eventData);\n      }\n    }));\n    instanceEventSubcr.push(eventBus.subscribe(declViewModel._internal.eventTopicEditInProgress, function () {\n      const eventData = {\n        dataSource: declViewModel,\n        state: declViewModel._editingState\n      };\n      updateEditState(eventData);\n    }));\n    instanceEventSubcr.push(eventBus.subscribe('plTable.editStateChange', function (eventData) {\n      updateEditState(eventData);\n    }));\n    instanceEventSubcr.push(eventBus.subscribe('editHandlerStateChange', function (eventData) {\n      updateEditState(eventData);\n    }));\n\n    var _updateAllRowsVisibilityDebounce = _.debounce(function () {\n      var rowElements = _trv.queryAllRowCellElementsFromTable();\n\n      _.forEach(rowElements, function (row) {\n        if (row.vmo) {\n          var cellTopElem = row.getElementsByClassName(Const.CLASS_SPLM_TABLE_ICON_CELL)[0];\n\n          if (!cellTopElem) {\n            cellTopElem = row.getElementsByClassName(Const.CLASS_AW_TREE_COMMAND_CELL)[0];\n          }\n\n          if (cellTopElem) {\n            var iconCellElem = cellTopElem.parentElement;\n            var columnDef = iconCellElem.columnDef;\n            var newCellTop = Cell.createElement(columnDef, row.vmo, table, row);\n            iconCellElem.replaceChild(newCellTop, cellTopElem);\n          }\n        }\n      });\n    }, 100);\n    /**\n     * Subscribe to resetScroll. Clear the tables rendered items cache and scroll to top of table.\n     */\n\n\n    instanceEventSubcr.push(eventBus.subscribe(dataProvider.name + '.resetScroll', function () {\n      resetInfiniteScroll();\n    }));\n    var verdict = util.validateRowHeightGridOption(table._tableInstance.gridOptions);\n    /**\n     * Subscribe to LayoutChangeEvent. Update row height to correct value\n     */\n\n    if (verdict === false) {\n      instanceEventSubcr.push(eventBus.subscribe('LayoutChangeEvent', function (data) {\n        var oldHeight = _rowHeight;\n        _rowHeight = data.rowHeight;\n\n        if (oldHeight === _rowHeight) {\n          return;\n        }\n\n        if (tableScroll.isInitialized()) {\n          tableScroll.setRowHeight(_rowHeight + _rowBorderWidth);\n          var newContainerHeight = getContainerHeight();\n\n          if (newContainerHeight !== undefined) {\n            tableScroll.setContainerHeight(newContainerHeight);\n          } // Reinitialize properties so that the rendering calculations are valid\n\n\n          tableScroll.initializeProperties(); // Reset dynamic row height if enabled\n\n          if (table._tableInstance.dynamicRowHeightStatus) {\n            resetDynamicRowHeights();\n          }\n\n          tableScroll.updateRowAlignment(); // Scroll to rows in that were in view before layout change\n\n          var scrollContainer = _trv.getScrollCanvasElementFromTable();\n\n          var oldScrollTop = scrollContainer.scrollTop;\n          scrollContainer.scrollTop = oldScrollTop / oldHeight * _rowHeight;\n          tableScroll.handleScroll();\n        }\n      }));\n    } // Reusable table does not need below named events for selection changes, it will now work with selectionData.\n\n\n    let isReusable = _.isString(reusable) ? reusable === 'true' : reusable;\n\n    if (isReusable !== true) {\n      instanceEventSubcr.push(eventBus.subscribe(dataProvider.name + '.selectionChangeEvent', function () {\n        SPLMTableSelectionHelper.updateContentRowSelection(dataProvider.selectionModel, dataProvider.cols, _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table);\n      }));\n      instanceEventSubcr.push(eventBus.subscribe(dataProvider.name + '.selectAll', function () {\n        SPLMTableSelectionHelper.updateContentRowSelection(dataProvider.selectionModel, dataProvider.cols, _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table);\n      }));\n      instanceEventSubcr.push(eventBus.subscribe(dataProvider.name + '.selectNone', function () {\n        SPLMTableSelectionHelper.updateContentRowSelection(dataProvider.selectionModel, dataProvider.cols, _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table);\n      }));\n    }\n\n    instanceEventSubcr.push(eventBus.subscribe(gridid + '.plTable.visibilityStateChanged', _updateAllRowsVisibilityDebounce));\n    instanceEventSubcr.push(eventBus.subscribe(gridid + '.plTable.resizeCheck', function () {\n      if (tableScroll.isInitialized()) {\n        tableScroll.checkForResize();\n      }\n    }));\n\n    var scrollToRow = function (gridId, rowUids) {\n      if (gridid === gridId) {\n        if (util.isBulkEditing(table)) {\n          return;\n        }\n\n        var rowIndexes = [];\n\n        for (var i = 0; i < rowUids.length; i++) {\n          var uid = rowUids[i].uid ? rowUids[i].uid : rowUids[i];\n          var rowIndex = dataProvider.viewModelCollection.findViewModelObjectById(uid);\n\n          if (rowIndex !== -1) {\n            rowIndexes.push(rowIndex);\n          }\n        }\n\n        if (rowIndexes.length > 0) {\n          tableScroll.scrollToRowIndex(rowIndexes);\n        }\n      }\n    };\n\n    instanceEventSubcr.push(eventBus.subscribe('plTable.scrollToRow', function (eventData) {\n      scrollToRow(eventData.gridId, eventData.rowUids);\n    }));\n\n    var updateDecoratorVisibility = function (isEnabled) {\n      if (isEnabled === true && gridOptions.showDecorators !== false) {\n        table.classList.add(Const.CLASS_AW_SHOW_DECORATORS);\n      } else {\n        table.classList.remove(Const.CLASS_AW_SHOW_DECORATORS);\n      }\n    };\n\n    var decoratorToggle = 'decoratorToggle';\n    var showDecorators = appCtxService.getCtx(decoratorToggle);\n    updateDecoratorVisibility(showDecorators);\n    instanceEventSubcr.push(eventBus.subscribe('appCtx.register', function (event) {\n      if (event.name === decoratorToggle) {\n        updateDecoratorVisibility(event.value);\n      }\n    }));\n    instanceEventSubcr.push(eventBus.subscribe('appCtx.update', function (event) {\n      if (event.name === decoratorToggle) {\n        updateDecoratorVisibility(event.value.decoratorToggle);\n      }\n    }));\n    instanceEventSubcr.push(eventBus.subscribe('decoratorsUpdated', function (updateVMOs) {\n      updateVMOs = updateVMOs.length === undefined ? [updateVMOs] : updateVMOs;\n      tableCtrl.updateColorIndicatorElements(updateVMOs);\n    }));\n    /**\n     * React to request for node expansions.\n     */\n\n    instanceEventSubcr.push(eventBus.subscribe(dataProvider.name + '.expandTreeNode', function (eventData) {\n      if (eventData.parentNode) {\n        var vmCollection = dataProvider.getViewModelCollection();\n        var rowNdx = vmCollection.findViewModelObjectById(eventData.parentNode.id);\n\n        if (rowNdx !== -1) {\n          var vmo = vmCollection.getViewModelObject(rowNdx);\n\n          if (vmo.isExpanded !== true) {\n            vmo.isExpanded = true;\n\n            if (tableInstanceCallbacks.toggleTreeNode) {\n              tableInstanceCallbacks.toggleTreeNode(vmo);\n            } else {\n              eventBus.publish(table.id + '.plTable.toggleTreeNode', vmo);\n            }\n          }\n        }\n      }\n    }));\n\n    const getTargetVmo = function (element, isTarget) {\n      /**\n       * Merge event 'target' with any other objects currently selected.\n       */\n      var targetObjects = [];\n      var elementRow = element.classList.contains(Const.CLASS_ROW) ? element : util.closestElement(element, '.' + Const.CLASS_ROW);\n\n      if (elementRow && elementRow.vmo) {\n        targetObjects.push(elementRow.vmo);\n        var targetUid = elementRow.vmo.uid;\n\n        if (!isTarget) {\n          var sourceObjects = dragAndDropService.getSourceObjects(dataProvider, targetUid).filter(function (obj) {\n            return targetObjects.indexOf(obj) === -1;\n          });\n          targetObjects = targetObjects.concat(sourceObjects);\n        }\n\n        return targetObjects;\n      }\n\n      return null;\n    };\n\n    const clearRowSelection = targetVMO => {\n      // eslint-disable-line\n      dataProvider.selectNone();\n    };\n\n    var listenToRelatedModifiedEvent = false;\n    var targetVMOScoped = null;\n\n    const selectTarget = (targetElement, targetVMO) => {\n      // eslint-disable-line\n\n      /**\n       * Setup to listen when the 'drop' is complete\n       */\n      if (!listenToRelatedModifiedEvent) {\n        listenToRelatedModifiedEvent = true;\n        targetVMOScoped = targetVMO;\n      }\n    };\n\n    const isTextNodeDragged = dataTranferObj => {\n      if (dataTranferObj && dataTranferObj.types) {\n        return event.type === 'dragstart' && [...dataTranferObj.types].some(type => type === 'text/plain' || type === 'Text');\n      }\n\n      return false;\n    };\n\n    let newCallbackApis = {\n      clearSelection: clearRowSelection,\n      setSelection: targetVMO => {\n        selectTarget(null, targetVMO);\n      },\n      getTargetElementAndVmo: (event, isSourceEle) => {\n        let targetVMO = null;\n        let target = null;\n\n        if (!isTextNodeDragged(event.dataTransfer)) {\n          target = dom.closest(event.target, '.ui-grid-row') || dom.closest(event.target, '.aw-widgets-droppable');\n        }\n\n        if (target) {\n          targetVMO = getTargetVmo(target, !isSourceEle);\n        }\n\n        return {\n          targetElement: target,\n          targetVMO: targetVMO\n        };\n      },\n      highlightTarget: eventData => {\n        splmTableDragHandler.handleDragDropHighlightPLTable(eventData);\n      }\n    };\n\n    const registerSplmTableDndListner = (element, callbackApis, declViewModel, tableProvider) => {\n      const getEventCallbackFn = event => {\n        let target = {};\n        let isSourceEle = event.type === 'dragstart';\n\n        if (callbackApis.getTargetElementAndVmo) {\n          target = callbackApis.getTargetElementAndVmo(event, isSourceEle);\n        }\n\n        let fun = declViewModel.dndHandler[event.type];\n        fun(event, target, callbackApis, tableProvider);\n      };\n\n      const setListener = eventType => {\n        let callBackFn = getEventCallbackFn.bind(null);\n        element.addEventListener(eventType, callBackFn);\n      };\n\n      const setEventListener = providers => {\n        Object.keys(providers).forEach(providerName => {\n          setListener(providerName.toLowerCase());\n        });\n      };\n\n      let dragProviders = declDragAndDropService.getDragHandler(declViewModel);\n\n      if (dragProviders) {\n        setEventListener(dragProviders);\n      }\n\n      let dropProviders = declDragAndDropService.getDropHandler(declViewModel);\n\n      if (dropProviders) {\n        setEventListener(dropProviders);\n      }\n    };\n\n    table._tableInstance.subDefs = instanceEventSubcr;\n    directiveElement.appendChild(table); // Drag and drop service needs to be setup after table has been attached to the directive element so\n    // that it can properly get the scope.\n\n    if (gridOptions.enableDragAndDrop !== false) {\n      /**\n       * LCS-315044: Setup the drag and drop with the new design pattern if drag and drop\n       * handlers are defined for table's container view.\n       *\n       * The branching is done to support AW, as AW is still consuming the old drag and drop pattern.\n       */\n      if (declDragAndDropService.areDnDHandelersDefined(declViewModel)) {\n        registerSplmTableDndListner(table, newCallbackApis, declViewModel, dataProvider);\n      }\n    } else {\n      dragAndDropService.disableDragAndDrop(table);\n    }\n  }\n\n  var getIconCellSVG = function (vmo) {\n    if (vmo.loadingStatus) {\n      return {\n        id: 'miscInProcessIndicator',\n        image: miscInProcessIndicator\n      };\n    } else if (vmo.isLeaf) {\n      // we made the decision to stop rendering 'typeBlankIcon' because (1) there is no visual difference, (2) we want\n      // to decrease the number of DOM elements and (3) we don't know the history of why it was there.\n      return {};\n    } else if (vmo.isExpanded) {\n      return {\n        id: 'miscExpandedTree',\n        image: miscExpandedTree\n      };\n    }\n\n    return {\n      id: 'miscCollapsedTree',\n      image: miscCollapsedTree\n    };\n  };\n\n  let updateContentRowSelection = () => {\n    SPLMTableSelectionHelper.updateContentRowSelection(dataProvider.selectionModel, dataProvider.cols, _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table);\n  };\n\n  let updateSortDirection = (currentColumnIndex, newColumnIndex, sortDirection) => {\n    tableCtrl.setHeaderCellSortDirection(currentColumnIndex, newColumnIndex, sortDirection);\n  };\n\n  let refresh = function () {\n    var columnAttrs = []; // attributesToInflate at server side cannot accept full name i.e typename.propertyname.\n    // we don't need to inflate the attributes or properties that are hidden.\n\n    _.forEach(dataProvider.cols, function (uwColumnInfo) {\n      if (uwColumnInfo.field && uwColumnInfo.hiddenFlag !== true) {\n        columnAttrs.push(uwColumnInfo.field);\n      }\n    });\n\n    if (dataProvider && dataProvider.action && dataProvider.action.inputData) {\n      dataProvider.action.inputData.searchInput = dataProvider.action.inputData.searchInput || {};\n      var searchInput = dataProvider.action.inputData.searchInput;\n\n      if (searchInput.attributesToInflate) {\n        searchInput.attributesToInflate = _.union(searchInput.attributesToInflate, columnAttrs);\n      } else {\n        searchInput.attributesToInflate = columnAttrs;\n      }\n    } // Since VMOs represent columns, we need to reset the columns also for transpose mode\n\n\n    if (gridOptions.transpose === true) {\n      resetColumns();\n    } // REFACTOR: infinite scroll code should be refactor to follow:\n    // 1. DOMElement should be the only interface for interaction between service and function\n    // 2. Lot of code below should be pull out from anonymous function, a initialize grid which\n    //    is taking 70 line of code is a bad smell.\n\n\n    if (!tableScroll.isInitialized()) {\n      // Set initial scroll index before table initializes\n      if (dataProvider.isFocusedLoad) {\n        var selection = dataProvider.getSelectedObjects();\n\n        if (selection.length === 1) {\n          scrollToRow(gridid, [selection[0].uid]);\n        }\n      }\n\n      tableScroll.initializeGrid({\n        tableElem: table,\n        directiveElem: directiveElement,\n        scrollViewportElem: _trv.getScrollCanvasElementFromTable(),\n        pinViewportElem: _trv.getPinCanvasElementFromTable(),\n        rowSelector: '.' + Const.CLASS_ROW,\n        rowHeight: _rowHeight + _rowBorderWidth,\n        headerHeight: _headerHeight,\n        dynamicRowHeightStatus: gridOptions.enableDynamicRowHeight,\n        loadedVMObjects: getObjects(),\n        updateVisibleCells: function (rowParentElem) {\n          tableCtrl.updateVisibleCells(rowParentElem);\n        },\n        updateScrollColumnsInView: function (scrollLeft, scrollContainerWidth) {\n          tableCtrl.updateScrollColumnsInView(scrollLeft, scrollContainerWidth);\n        },\n        onStartScroll: function () {\n          if (!util.isBulkEditing(table) || !editCellElement) {\n            return;\n          } // Close drop down if it is open on the edit cell\n\n\n          var cellListElement = editCellElement.getElementsByClassName('aw-jswidgets-popUpVisible')[0];\n\n          if (cellListElement) {\n            editCellElement.click();\n          }\n        },\n        syncHeader: function (isPin, scrollLeft) {\n          let traversalTable = new Trv(table);\n          util.syncHeader(traversalTable, isPin, scrollLeft);\n        },\n        renderRows: function (startIndex, endIndex) {\n          var subVMObjects = getObjects().slice(startIndex, endIndex + 1); // Return if there is nothing to render\n\n          if (subVMObjects.length === 0) {\n            return;\n          }\n\n          if (gridOptions.useTree === true) {\n            let messages = gridOptions.textBundle ? gridOptions.textBundle : _splmTableMessages;\n\n            _.forEach(subVMObjects, function (vmo) {\n              if (vmo.isLeaf) {\n                vmo._twistieTitle = '';\n              } else {\n                vmo._twistieTitle = vmo.isExpanded ? messages.TwistieTooltipExpanded : messages.TwistieTooltipCollapsed;\n              }\n\n              if (!util.isExpandAllowed(table)) {\n                vmo._twistieTitle = '';\n              }\n            });\n          }\n\n          var insertBefore = false;\n\n          var scrollContents = _trv.getScrollContentElementFromTable();\n\n          var pinContents = _trv.getPinContentElementFromTable();\n\n          var firstPinElement = pinContents.childElementCount > 0 ? pinContents.childNodes[0] : 0;\n          var firstScrollElement = scrollContents.childElementCount > 0 ? scrollContents.childNodes[0] : 0;\n\n          if (firstScrollElement && firstScrollElement.getAttribute('data-indexNumber')) {\n            var firstRowIdx = parseInt(firstScrollElement.getAttribute('data-indexNumber'));\n            insertBefore = firstRowIdx > startIndex;\n          }\n\n          var pinContentElement = tableCtrl.constructContentElement(subVMObjects, startIndex, _rowHeight, true);\n          var scrollContentElement = tableCtrl.constructContentElement(subVMObjects, startIndex, _rowHeight, false);\n          tableCtrl.setAriaLabelledAndDescribedBy(directiveElement, _trv.getTableContainerElementFromTable());\n          tableCtrl.setAriaRowCount(_trv.getTableContainerElementFromTable());\n\n          if (table._tableInstance.dynamicRowHeightStatus) {\n            tableCtrl.syncContentRowHeights(pinContentElement, scrollContentElement);\n          }\n\n          SPLMTableSelectionHelper.updateContentRowSelection(dataProvider.selectionModel, dataProvider.cols, pinContentElement.childNodes, scrollContentElement.childNodes, table);\n\n          if (insertBefore) {\n            _trv.getPinContentElementFromTable().insertBefore(pinContentElement, firstPinElement);\n\n            _trv.getScrollContentElementFromTable().insertBefore(scrollContentElement, firstScrollElement);\n          } else {\n            _trv.getPinContentElementFromTable().appendChild(pinContentElement);\n\n            _trv.getScrollContentElementFromTable().appendChild(scrollContentElement);\n          }\n\n          if (table._tableInstance.focusTreeNodeExpandAfterRender) {\n            let node = table._tableInstance.focusTreeNodeExpandAfterRender;\n\n            let rowContents = _trv.queryAllRowCellElementsFromTable();\n\n            let rowElem = _.filter(rowContents, {\n              vmo: node\n            })[0];\n\n            if (rowElem) {\n              let elementToFocus = rowElem.getElementsByClassName(Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD)[0];\n              elementToFocus && elementToFocus.focus();\n            }\n          }\n        },\n        removeRows: function (upperCount, lowerCounter) {\n          cellRenderer.resetHoverCommandElement();\n          tableCtrl.removeContentElement(upperCount, lowerCounter);\n          tableCtrl.setAriaRowCount(_trv.getTableContainerElementFromTable());\n        },\n        afterGridRenderCallback: function (firstRenderedItem, lastRenderedItem) {\n          let containerElement = _trv.getTableContainerElementFromTable();\n\n          if (containerElement && containerElement.hasAttribute('aria-activedescendant')) {\n            var activedescendantId = containerElement.getAttribute('aria-activedescendant');\n\n            if (!document.getElementById(activedescendantId)) {\n              containerElement.removeAttribute('aria-activedescendant');\n            }\n          }\n\n          var isEditing = util.isBulkEditing(table);\n          let loadingProps = false;\n\n          if (isEditing) {\n            updateEditStatusForTableCanvas(isEditing);\n          }\n\n          if (gridOptions.useTree === true) {\n            if (_nodeExpansionInProgress === true) {\n              return;\n            }\n\n            var nonPlaceholderFound = false;\n\n            for (var i = lastRenderedItem.index; i >= firstRenderedItem.index; i--) {\n              var vmo = dataProvider.viewModelCollection.loadedVMObjects[i];\n\n              if (dataProvider.focusAction) {\n                if (vmo._focusRequested) {\n                  return;\n                }\n\n                if (vmo.isPlaceholder) {\n                  // ...use .isPlaceholder or .isFocusParent instead\n                  if (nonPlaceholderFound) {\n                    delete vmo.isPlaceholder;\n                    vmo._focusRequested = true;\n                    tableInstanceCallbacks.doFocusPlaceHolder(vmo);\n                    return;\n                  }\n                } else {\n                  nonPlaceholderFound = true;\n                }\n              }\n            } // Find and expand the first of any nodes that need to be expanded\n\n\n            for (var j = firstRenderedItem.index; j <= lastRenderedItem.index; j++) {\n              var vmObject = dataProvider.viewModelCollection.loadedVMObjects[j];\n              var expandNode = false;\n\n              if (vmObject.isLeaf !== true && vmObject._expandRequested !== true && vmObject.isExpanded !== true) {\n                // Mark for expansion if the node was already expanded\n                if (util.performStateServiceAction('isNodeExpanded', declViewModel, gridid, vmObject)) {\n                  expandNode = true;\n                }\n              } // Expand the node\n\n\n              if (expandNode === true) {\n                vmObject.isExpanded = true;\n\n                if (tableInstanceCallbacks.toggleTreeNode) {\n                  tableInstanceCallbacks.toggleTreeNode(vmObject);\n                } else {\n                  eventBus.publish(table.id + '.plTable.toggleTreeNode', vmObject);\n                }\n\n                return;\n              }\n            } // If any VMOs need props to be loaded, we will call for the props to be loaded and not\n            // render the rows. The row rendering will then occur once they props have been loaded.\n\n\n            var emptyVMOs = findVMOsWithMissingProps(firstRenderedItem.index, lastRenderedItem.index);\n\n            if (emptyVMOs.length > 0) {\n              loadProps(emptyVMOs);\n              loadingProps = true;\n            }\n          }\n\n          if (util.isPaginationAllowed(table)) {\n            // _loadMorePageDebounce( firstRenderedItem, lastRenderedItem );\n            if (tableInstanceCallbacks) {\n              _loadMorePageDebounce(firstRenderedItem, lastRenderedItem, tableInstanceCallbacks);\n\n              tableInstanceCallbacks.loadMorePages({\n                firstRenderedItem: firstRenderedItem,\n                lastRenderedItem: lastRenderedItem\n              });\n            }\n          } // Set scrollToRow to false after row is scrolled to and all\n          // visible nodes around the scrolled to row are expanded\n\n\n          if (dataProvider.scrollToRow === true && tableScroll.isInitialRowIndexInView() === true) {\n            dataProvider.scrollToRow = false;\n          }\n        }\n      });\n      tableScroll.renderInitialRows();\n      var setContainerHeightEvent = eventBus.subscribe(gridid + '.plTable.containerHeightUpdated', function (heightVal) {\n        updateContainerHeight(heightVal);\n      });\n      instanceEventSubcr.push(setContainerHeightEvent);\n    } else {\n      // reset the row height cache\n      tableScroll.resetRowHeightCache(); // Set the loaded view model objects\n\n      tableScroll.setLoadedVMObjects(getObjects()); // Render initial rows if at top of table\n\n      if (_trv.getScrollCanvasElementFromTable().scrollTop === 0) {\n        tableScroll.renderInitialRows();\n      } else {\n        tableScroll.handleScroll();\n      }\n    }\n  };\n\n  let clientRefresh = function () {\n    if (table && table._tableInstance) {\n      table._tableInstance.showCheckBox = _showCheckBox;\n    }\n\n    util.cleanupComponents(table);\n    refresh();\n  };\n\n  let updateContainerHeight = function (heightVal) {\n    tableScroll.setContainerHeight(heightVal);\n    tableScroll.initializeProperties();\n    tableScroll.handleScrollDown();\n  };\n\n  let updateDynamicRowHeight = function (dynamicRowHeightStatus) {\n    table._tableInstance.dynamicRowHeightStatus = dynamicRowHeightStatus;\n    tableScroll.setDynamicRowHeight(table._tableInstance.dynamicRowHeightStatus);\n    clientRefresh();\n\n    if (!table._tableInstance.dynamicRowHeightStatus) {\n      resetDynamicRowHeights();\n    }\n  };\n\n  let updatePinColumn = (columnDef, isFreezeAction, defaultColumnPinIndex) => {\n    const pinColumnIndex = isFreezeAction ? columnDef.index : defaultColumnPinIndex;\n    tableCtrl.pinToColumn(pinColumnIndex);\n\n    if (!isFreezeAction) {\n      tableCtrl.resetFreezeScroll(columnDef.field);\n    }\n\n    tableScroll.handlePinViewportScrollbarPadding();\n  };\n\n  let hideColumn = columnFieldName => {\n    let columnDef;\n    var columns = dataProvider.cols;\n\n    _.forEach(columns, function (currentColumn) {\n      if (currentColumn.field === columnFieldName) {\n        columnDef = currentColumn;\n        return false;\n      }\n    });\n\n    if (columnDef) {\n      var columnIndex = columnDef.index;\n      let isOnlyVisibleColumn = true;\n\n      _.forEach(columns, function (currentColumn) {\n        if (currentColumn.name !== columnDef.name && currentColumn.visible === true && currentColumn.name !== 'icon') {\n          isOnlyVisibleColumn = false;\n          return false;\n        }\n      });\n\n      if (!isOnlyVisibleColumn) {\n        if (columnProvider.isArrangeSupported() && columnProvider.hideColumn) {\n          // account for hidden columns\n          if (dataProvider.cols[columnIndex].propertyName !== columnDef.propertyName) {\n            for (var i = 0; i < columns.length; i++) {\n              if (columns[i].propertyName === columnDef.propertyName) {\n                columnIndex = i;\n                break;\n              }\n            }\n          }\n\n          columnProvider.hideColumn(columnIndex);\n        }\n\n        tableCtrl.updateColumnVisibility(columnDef.field);\n\n        if (columnDef.filter && columnDef.filter.isFilterApplied) {\n          const eventData = {\n            gridId: gridid,\n            column: columnDef\n          };\n          eventBus.publish('pltable.columnFilterApplied', eventData);\n        }\n      } else {\n        localeService.getLocalizedText('UIMessages', 'hideColumnOnlyVisibleError').then(function (message) {\n          messagingService.showError(message);\n        });\n      }\n    }\n  };\n\n  let resetDynamicRowHeights = function () {\n    if (dataProvider.viewModelCollection) {\n      _.forEach(dataProvider.viewModelCollection.loadedVMObjects, function (vmo) {\n        delete vmo.rowHeight;\n      });\n    }\n  };\n\n  let resetInfiniteScroll = function () {\n    if (tableScroll && tableScroll.isInitialized()) {\n      tableScroll.resetInfiniteScroll();\n    }\n  };\n\n  let maintainScrollPosition = function () {\n    tableScroll.setScrollPositionToBeMaintained();\n  };\n\n  let unsetScrollToRowIndex = function () {\n    if (tableScroll && tableScroll.isInitialized()) {\n      tableScroll.resetInitialRowIndex();\n    }\n  };\n\n  let relatedModified = function () {\n    if (listenToRelatedModifiedEvent) {\n      listenToRelatedModifiedEvent = false;\n      var selectionModel = dataProvider.selectionModel;\n\n      if (selectionModel) {\n        selectionHelper.handleSelectionEvent([targetVMOScoped], selectionModel, null, dataProvider);\n        SPLMTableSelectionHelper.updateContentRowSelection(dataProvider.selectionModel, dataProvider.cols, _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table);\n      }\n    }\n  };\n\n  let columnsResized = function (eventData) {\n    // Prevent columnSizeChanged for transpose mode since the columns in transpose represent VMOs\n    // and not the columns in the columnProvider\n    if (gridOptions.transpose !== true) {\n      columnProvider.columnSizeChanged(eventData.name, eventData.delta);\n    }\n\n    if (table._tableInstance.dynamicRowHeightStatus) {\n      resetDynamicRowHeights();\n      clientRefresh();\n    }\n  };\n\n  let columnsRearranged = function (eventData) {\n    if (gridOptions.transpose === true) {\n      // Update the dom columns so they reflect correct data\n      // and return since the columns represent VMOs and not the columns in\n      // the columnProvider\n      resetColumns();\n      return;\n    } // Get column position in relation to all columns, not just visible columns\n\n\n    var originalPosition = eventData.originalPosition;\n    var newPosition = null; // Get new position index\n\n    _.forEach(dataProvider.cols, function (column) {\n      if (eventData.name === column.name) {\n        newPosition = column.index;\n      }\n    }); // Adjust for hidden columns\n\n\n    _.forEach(dataProvider.cols, function (column, index) {\n      if (column.hiddenFlag === true && index <= newPosition) {\n        newPosition += 1;\n      }\n\n      if (column.hiddenFlag === true && index <= originalPosition) {\n        originalPosition += 1;\n      }\n    }); // awColumnService adjusts the column positions when the icon column is not present.\n    // By incrementing the positions by 1, we are able to ensure awColumnService still uses\n    // the correct column positions. Once  UI-Grid is removed, we can remove this hack and update awColumnService\n    // to not adjust positions when icon column is not present.\n\n\n    if (dataProvider.cols && dataProvider.cols[0].name !== 'icon') {\n      originalPosition += 1;\n      newPosition += 1;\n    }\n\n    if (originalPosition !== null && newPosition !== null) {\n      columnProvider.columnOrderChanged(eventData.name, originalPosition, newPosition);\n    }\n  };\n\n  return {\n    getDynamicRowHeightStatus: function () {\n      return table._tableInstance.dynamicRowHeightStatus;\n    },\n    resetDynamicRowHeights: resetDynamicRowHeights,\n    updateDynamicRowHeight: updateDynamicRowHeight,\n    maintainScrollPosition: maintainScrollPosition,\n    unsetScrollToRowIndex: unsetScrollToRowIndex,\n    relatedModified: relatedModified,\n    columnsResized: columnsResized,\n    columnsRearranged: columnsRearranged,\n    resetInfiniteScroll: resetInfiniteScroll,\n    getTableElement: function () {\n      return table;\n    },\n    updateContentRowSelection: updateContentRowSelection,\n    updateContainerHeight: updateContainerHeight,\n    updateSortDirection: updateSortDirection,\n    updatePinColumn: updatePinColumn,\n    hideColumn: hideColumn,\n\n    /**\n     * Reset columns for PL Table\n     * this method out of exports.initializeTable, cannot do it now since it depends on dataProvider\n     * any other members whose scope is inside initializeTable.\n     */\n    resetColumns: function () {\n      resetColumns();\n    },\n    updateEditState: updateEditState,\n    removeStaleFilters: function (columns) {\n      awColumnFilterService.removeStaleFilters(columnProvider, columns || _tableColumns);\n    },\n    setNodeExpansionInProgress: function (isInProgress) {\n      _nodeExpansionInProgress = isInProgress;\n    },\n    updateFilterIcons: function (columnName) {\n      if (columnName) {\n        tableCtrl.updateFilterIcon(columnName);\n      } else {\n        tableCtrl.updateAllFilterIcons();\n      }\n    },\n    setFilterDisability: function (isDisabled) {\n      menuService.setFilterDisability(isDisabled);\n    },\n    loadMissingProps: function () {\n      loadMissingProps();\n    },\n    updateTreeCellIcon: function (vmo) {\n      const rowContents = _trv.queryAllRowCellElementsFromTable();\n\n      _.forEach(rowContents, function (rowElem) {\n        if (rowElem.vmo) {\n          const matchingId = _contentFilter.isIdOfObject(rowElem.vmo, uwUtilSvc.getEvaluatedId(vmo));\n\n          if (matchingId === true) {\n            // Only update if there is expand/collapse button available\n            let treeNodeCommandElement = rowElem.querySelector(`.${Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD}`);\n\n            if (treeNodeCommandElement) {\n              const iconCell = getIconCellSVG(vmo); // this if check is for the vmo.isLeaf use case where there is no need to render an icon\n\n              let iconContainerElement = treeNodeCommandElement.querySelector(`.${Const.CLASS_ICON_BASE}`);\n\n              if (iconContainerElement && iconCell && iconCell.image && iconCell.image.length > 0) {\n                // add both for consistency, same as AwIcon\n                iconContainerElement = util.addAttributeToDOMElement(iconContainerElement, 'iconId', iconCell.id);\n                iconContainerElement = util.addAttributeToDOMElement(iconContainerElement, 'icon-id', iconCell.id);\n                treeNodeCommandElement.title = vmo._twistieTitle;\n                iconContainerElement.innerHTML = iconCell.image;\n              }\n            }\n          }\n        }\n      });\n    },\n\n    /**\n     * Refreshes the content in the table with the data currently in the dataProvider\n     */\n    refresh: refresh,\n    updateInstanceState: function (newState) {\n      declViewModel = newState;\n      table._tableInstance.declViewModel = newState;\n    }\n  };\n};\n/**\n *  Release the resources occupied by SPLM table\n *\n * @param {String} gridId - Grid ID to be destroyed\n * @param {Element} tableElement - The table element\n * @param {Object} columnDefs - The column defs\n */\n\nexport let destroyTable = function (gridId, tableElement, columnDefs) {\n  var table = tableElement.querySelector(`.${Const.CLASS_TABLE}`);\n  var instance = table && table._tableInstance || {};\n  var instanceEventSubcr = instance.subDefs;\n\n  _.forEach(instanceEventSubcr, function (eventBusSub) {\n    if (eventBusSub !== null) {\n      eventBus.unsubscribe(eventBusSub);\n    }\n  });\n\n  for (var i = 0; i < columnDefs.length; i++) {\n    var cellRenderers = columnDefs[i].cellRenderers;\n\n    if (cellRenderers) {\n      for (var j = 0; j < cellRenderers.length; j++) {\n        if (_.isFunction(cellRenderers[j].destroy)) {\n          cellRenderers[j].destroy();\n        }\n      }\n    }\n  } // Cleanup any leftover components\n\n\n  util.cleanupComponents(tableElement); // Destroy the column/table menu\n\n  var menu = document.getElementById(gridId + '_menuContainer');\n\n  if (menu !== null) {\n    menu.parentElement.removeChild(menu);\n  } // Destroy table renderer\n\n\n  if (instance.renderer) {\n    instance.renderer.destroyGrid();\n  } // table editor eventBusSubs unsubscribe\n\n\n  if (instance.editor) {\n    instance.editor.destroy();\n  } // NOTE: This is not need for now since we force every\n  // angularJS Compile must based on table scope. But leave\n  // it here for now by commenting it out.\n  // var cellRenderer = _cellRendererDefs[gridId];\n  // cellRenderer.destroyHoverCommandElement();\n  // delete _cellRendererDefs[gridId];\n\n\n  instance.isDestroyed = true;\n  eventBus.publish('tableDestroyed');\n};\n_splmTableMessages.arrangeMenu = localeService.getLoadedTextFromKey('treeTableMessages.arrangeMenu');\n_splmTableMessages.removeAllFilters = localeService.getLoadedTextFromKey('treeTableMessages.removeAllFilters');\n_splmTableMessages.TwistieTooltipExpanded = localeService.getLoadedTextFromKey('treeTableMessages.TwistieTooltipExpanded');\n_splmTableMessages.TwistieTooltipCollapsed = localeService.getLoadedTextFromKey('treeTableMessages.TwistieTooltipCollapsed');\n_splmTableMessages.hideColumn = localeService.getLoadedTextFromKey('treeTableMessages.hideColumn');\n_splmTableMessages.sortAscending = localeService.getLoadedTextFromKey('treeTableMessages.sortAscending');\n_splmTableMessages.sortDescending = localeService.getLoadedTextFromKey('treeTableMessages.sortDescending');\n_splmTableMessages.removeSort = localeService.getLoadedTextFromKey('treeTableMessages.removeSort');\n_splmTableMessages.freezeMenu = localeService.getLoadedTextFromKey('treeTableMessages.freezeMenu');\n_splmTableMessages.unfreezeMenu = localeService.getLoadedTextFromKey('treeTableMessages.unfreezeMenu');\n_splmTableMessages.visibilityControlsTitle = localeService.getLoadedTextFromKey('treeTableMessages.visibilityControlsTitle');\n_splmTableMessages.gridMenu = localeService.getLoadedTextFromKey('treeTableMessages.gridMenu');\nexports = {\n  createTableObject,\n  destroyTable\n};\nexport default exports;","map":{"version":3,"names":["SPLMTableColumnRearrangement","SPLMTableInfiniteScrollService","SPLMTableKeyboardService","SPLMTableTranspose","_","appCtxService","awColumnFilterService","awSPLMTableCellRendererFactory","declDragAndDropService","domUtils","dragAndDropService","eventBus","localeService","selectionHelper","splmTableDragHandler","uwUtilSvc","messagingService","util","Trv","Const","Editor","MenuService","Ctrl","Cell","SPLMTableSelectionHelper","exports","_splmTableMessages","_defaultContentFilter","isIdOfObject","vmo","uid","matchedId","alternateID","indexOf","dom","DOMAPIs","createTableObject","directiveElement","gridid","dataProvider","viewModelCollection","columnProvider","declViewModel","contentFilter","gridOptions","containerHeight","gridContextDispatcher","runActionWithViewModel","tableInstanceCallbacks","tableContext","reusable","showCheckBox","_tableColumns","_contentFilter","cellRenderer","createCellRenderer","table","createElement","_trv","tableCtrl","tableEditor","menuService","_nodeExpansionInProgress","tableScroll","columnRearrangementService","keyboardService","updateEditState","_showCheckBox","_rowBorderWidth","_rowHeight","ctx","layout","HEIGHT_COMPACT_ROW","HEIGHT_ROW","getTableRowHeight","_headerHeight","HEIGHT_HEADER","getTableHeaderHeight","_updateColumnDefs","columns","cols","transpose","getTransposedColumns","loadedVMObjects","i","length","visible","hasOwnProperty","filter","column","forEach","index","cellRenderers","name","iconCellRenderer","concat","getAwCellRenderers","headerRenderers","getAwHeaderRenderers","loadDefaultColumnMenus","getObjects","getTransposedVmos","resetColumns","removeStaleFilters","resetColumnDefs","initialize","isInitialized","resetHoverCommandElement","setLoadedVMObjects","handleScroll","findVMOsWithMissingProps","startIndex","endIndex","emptyVMOs","isPropLoading","props","push","keys","Object","loadMissingProps","firstRenderedItemIndex","getFirstRenderedItemIndex","lastRenderedItemIndex","getLastRenderedItemIndex","publish","VMOs","instanceEventSubcr","id","classList","add","CLASS_TABLE","CLASS_WIDGET_GRID","CLASS_LAYOUT_COLUMN","CLASS_WIDGET_TABLE_DROP","CLASS_SELECTION_ENABLED","setSortCriteriaOnColumns","getContainerHeight","undefined","maxRowsToShow","_tableInstance","messages","gridId","isBulkEditing","isCellEditing","renderer","dynamicRowHeightStatus","editor","setupKeyListener","enableGridMenu","addGridMenu","showContextMenu","setContextSelectionHelper","enableDynamicRowHeight","controller","_loadMorePageDebounce","debounce","firstRenderedItem","lastRenderedItem","pendingUpdatedProps","updateRowContents","updatedPropsMaps","rowElements","queryAllRowCellElementsFromTable","updatedProps","vmoUid","rowElem","children","cellElem","updatedVmo","columnDef","needsUpdate","transposedColumnProperty","dbValue","imgElem","getElementsByTagName","getAttribute","getImgURL","propName","updateCell","selected","isTableCommand","isTreeNavigation","cellTop","getElementsByClassName","CLASS_AW_CELL_COMMANDS_CONTAINER","selectionModel","multiSelectEnabled","getCurrentSelectedCount","cellCommand","createCellCommandElement","appendChild","updatePendingProps","isDestroyed","subscribe","updatedPropName","loadProps","editCellElement","updateEditStatusForTableCanvas","isEditing","setDraggable","updateEditStatus","_setupTreeForRestrictiveEditing","setupTreeEditScroll","eventData","dataSource","getAtomicData","dpRef","current","state","setColumnFilterStale","isAutoSaveEnabled","clearPropIsEditableCache","setIsCellEditing","cacheCollapse","setIsBulkEditing","type","setSelectable","useTree","isExpandOrPaginationAllowedInEdit","restoreInitialCacheCollapseState","resetDynamicRowHeights","clientRefresh","_eventTopicEditInProgress","_editingState","_internal","eventTopicEditInProgress","_updateAllRowsVisibilityDebounce","row","cellTopElem","CLASS_SPLM_TABLE_ICON_CELL","CLASS_AW_TREE_COMMAND_CELL","iconCellElem","parentElement","newCellTop","replaceChild","resetInfiniteScroll","verdict","validateRowHeightGridOption","data","oldHeight","rowHeight","setRowHeight","newContainerHeight","setContainerHeight","initializeProperties","updateRowAlignment","scrollContainer","getScrollCanvasElementFromTable","oldScrollTop","scrollTop","isReusable","isString","updateContentRowSelection","getPinContentRowElementsFromTable","getScrollContentRowElementsFromTable","checkForResize","scrollToRow","rowUids","rowIndexes","rowIndex","findViewModelObjectById","scrollToRowIndex","updateDecoratorVisibility","isEnabled","showDecorators","CLASS_AW_SHOW_DECORATORS","remove","decoratorToggle","getCtx","event","value","updateVMOs","updateColorIndicatorElements","parentNode","vmCollection","getViewModelCollection","rowNdx","getViewModelObject","isExpanded","toggleTreeNode","getTargetVmo","element","isTarget","targetObjects","elementRow","contains","CLASS_ROW","closestElement","targetUid","sourceObjects","getSourceObjects","obj","clearRowSelection","targetVMO","selectNone","listenToRelatedModifiedEvent","targetVMOScoped","selectTarget","targetElement","isTextNodeDragged","dataTranferObj","types","some","newCallbackApis","clearSelection","setSelection","getTargetElementAndVmo","isSourceEle","target","dataTransfer","closest","highlightTarget","handleDragDropHighlightPLTable","registerSplmTableDndListner","callbackApis","tableProvider","getEventCallbackFn","fun","dndHandler","setListener","eventType","callBackFn","bind","addEventListener","setEventListener","providers","providerName","toLowerCase","dragProviders","getDragHandler","dropProviders","getDropHandler","subDefs","enableDragAndDrop","areDnDHandelersDefined","disableDragAndDrop","getIconCellSVG","loadingStatus","image","miscInProcessIndicator","isLeaf","miscExpandedTree","miscCollapsedTree","updateSortDirection","currentColumnIndex","newColumnIndex","sortDirection","setHeaderCellSortDirection","refresh","columnAttrs","uwColumnInfo","field","hiddenFlag","action","inputData","searchInput","attributesToInflate","union","isFocusedLoad","selection","getSelectedObjects","initializeGrid","tableElem","directiveElem","scrollViewportElem","pinViewportElem","getPinCanvasElementFromTable","rowSelector","headerHeight","updateVisibleCells","rowParentElem","updateScrollColumnsInView","scrollLeft","scrollContainerWidth","onStartScroll","cellListElement","click","syncHeader","isPin","traversalTable","renderRows","subVMObjects","slice","textBundle","_twistieTitle","TwistieTooltipExpanded","TwistieTooltipCollapsed","isExpandAllowed","insertBefore","scrollContents","getScrollContentElementFromTable","pinContents","getPinContentElementFromTable","firstPinElement","childElementCount","childNodes","firstScrollElement","firstRowIdx","parseInt","pinContentElement","constructContentElement","scrollContentElement","setAriaLabelledAndDescribedBy","getTableContainerElementFromTable","setAriaRowCount","syncContentRowHeights","focusTreeNodeExpandAfterRender","node","rowContents","elementToFocus","CLASS_WIDGET_TREE_NODE_TOGGLE_CMD","focus","removeRows","upperCount","lowerCounter","removeContentElement","afterGridRenderCallback","containerElement","hasAttribute","activedescendantId","document","getElementById","removeAttribute","loadingProps","nonPlaceholderFound","focusAction","_focusRequested","isPlaceholder","doFocusPlaceHolder","j","vmObject","expandNode","_expandRequested","performStateServiceAction","isPaginationAllowed","loadMorePages","isInitialRowIndexInView","renderInitialRows","setContainerHeightEvent","heightVal","updateContainerHeight","resetRowHeightCache","cleanupComponents","handleScrollDown","updateDynamicRowHeight","setDynamicRowHeight","updatePinColumn","isFreezeAction","defaultColumnPinIndex","pinColumnIndex","pinToColumn","resetFreezeScroll","handlePinViewportScrollbarPadding","hideColumn","columnFieldName","currentColumn","columnIndex","isOnlyVisibleColumn","isArrangeSupported","propertyName","updateColumnVisibility","isFilterApplied","getLocalizedText","then","message","showError","maintainScrollPosition","setScrollPositionToBeMaintained","unsetScrollToRowIndex","resetInitialRowIndex","relatedModified","handleSelectionEvent","columnsResized","columnSizeChanged","delta","columnsRearranged","originalPosition","newPosition","columnOrderChanged","getDynamicRowHeightStatus","getTableElement","setNodeExpansionInProgress","isInProgress","updateFilterIcons","columnName","updateFilterIcon","updateAllFilterIcons","setFilterDisability","isDisabled","updateTreeCellIcon","matchingId","getEvaluatedId","treeNodeCommandElement","querySelector","iconCell","iconContainerElement","CLASS_ICON_BASE","addAttributeToDOMElement","title","innerHTML","updateInstanceState","newState","destroyTable","tableElement","columnDefs","instance","eventBusSub","unsubscribe","isFunction","destroy","menu","removeChild","destroyGrid","arrangeMenu","getLoadedTextFromKey","removeAllFilters","sortAscending","sortDescending","removeSort","freezeMenu","unfreezeMenu","visibilityControlsTitle","gridMenu"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableFactory.js"],"sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is the entry point for SPLM table. It initializes the table and renders it\n *\n * @module js/splmTableFactory\n */\nimport SPLMTableColumnRearrangement from 'js/splmTableColumnRearrangement';\nimport SPLMTableInfiniteScrollService from 'js/splmTableInfiniteScrollService';\nimport SPLMTableKeyboardService from 'js/splmTableKeyboardService';\nimport SPLMTableTranspose from 'js/splmTableTranspose';\nimport _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport awColumnFilterService from 'js/awColumnFilterService';\nimport awSPLMTableCellRendererFactory from 'js/awSPLMTableCellRendererFactory';\nimport declDragAndDropService from 'js/declDragAndDropService';\nimport domUtils from 'js/domUtils';\nimport dragAndDropService from 'js/dragAndDropService';\nimport eventBus from 'js/eventBus';\nimport localeService from 'js/localeService';\nimport selectionHelper from 'js/selectionHelper';\nimport splmTableDragHandler from 'js/splmTableDragHandler';\nimport uwUtilSvc from 'js/uwUtilService';\nimport messagingService from 'js/messagingService';\nimport { svgString as miscInProcessIndicator } from 'image/miscInProcessIndicator16.svg';\nimport { svgString as miscExpandedTree } from 'image/miscExpandedTree12.svg';\nimport { svgString as miscCollapsedTree } from 'image/miscCollapsedTree12.svg';\nimport util from 'js/splmTableUtils';\nimport Trv from 'js/splmTableTraversal';\nimport Const from 'js/splmTableConstants';\nimport Editor from 'js/splmTableEditor';\nimport MenuService from 'js/splmTableMenuService';\nimport Ctrl from 'js/splmTableDomController';\nimport Cell from 'js/splmTableCellRenderer';\nimport SPLMTableSelectionHelper from 'js/splmTableSelectionHelper';\n\n/**\n * Cached reference to the various AngularJS and AW services.\n */\nvar exports = {};\n\nvar _splmTableMessages = {};\n\nvar _defaultContentFilter = {\n    isIdOfObject: function( vmo, uid ) {\n        let matchedId = false;\n        if( vmo ) {\n            if( vmo.alternateID ) {\n                matchedId = vmo.alternateID === uid;\n            }\n\n            if( !matchedId && vmo.uid ) {\n                matchedId = vmo.uid === uid || vmo.uid.indexOf( uid ) !== -1;\n            }\n        }\n        return matchedId;\n    }\n};\n\nconst dom = domUtils.DOMAPIs;\n/**\n * Check if we are using a 'gridid' in the closest 'declViewModel' in the scope tree.<BR>\n * If so: Use it to display the aw-table data<BR>\n *\n */\nexport let createTableObject = function( directiveElement, gridid, dataProvider, viewModelCollection, columnProvider, declViewModel, contentFilter, gridOptions, containerHeight,\n    gridContextDispatcher, runActionWithViewModel, tableInstanceCallbacks, tableContext, reusable, showCheckBox ) {\n    // 20180920: put it to null so that it will error out when there is an code error\n    var _tableColumns = null;\n    var _contentFilter = contentFilter || _defaultContentFilter;\n\n    // setup cell renderer\n    var cellRenderer = awSPLMTableCellRendererFactory.createCellRenderer();\n    var table = util.createElement( 'div' );\n    var _trv = new Trv( table );\n    var tableCtrl = null;\n    var tableEditor = null;\n    var menuService = null;\n    var _nodeExpansionInProgress = false;\n    let tableScroll = null;\n    let columnRearrangementService = null;\n    let keyboardService = null;\n    let updateEditState = null;\n    let _showCheckBox = showCheckBox;\n\n    // LCS-138303 - Performance tuning for 14 Objectset Table case - implementation\n    // Define header and row height here to save computed CSS reading\n    var _rowBorderWidth = 1;\n    var _rowHeight = appCtxService.ctx.layout === 'compact' ? Const.HEIGHT_COMPACT_ROW : Const.HEIGHT_ROW;\n    _rowHeight = util.getTableRowHeight( gridOptions, _rowHeight );\n\n    var _headerHeight = Const.HEIGHT_HEADER;\n    _headerHeight = util.getTableHeaderHeight( gridOptions, _headerHeight );\n\n    // This updateColumnDefs function is called as part of the buildDynamicColumns.\n    let _updateColumnDefs = function() {\n        let columns = dataProvider.cols;\n        if( gridOptions.transpose === true ) {\n            // Get and assign transposed columns\n            columns = SPLMTableTranspose.getTransposedColumns( _tableColumns, dataProvider.viewModelCollection.loadedVMObjects );\n        }\n        for( let i = 0; i < columns.length; i++ ) {\n            columns[ i ].visible = !columns[ i ].hasOwnProperty( 'visible' ) || columns[ i ].visible;\n        }\n\n        _tableColumns = _.filter( columns, function( column ) {\n            if( column.visible ) {\n                return column;\n            }\n            return false;\n        } );\n\n        _.forEach( _tableColumns, function( column, index ) {\n            column.index = index;\n\n            if( !column.cellRenderers ) {\n                column.cellRenderers = [];\n            }\n            if( column.name === 'icon' && column.iconCellRenderer ) {\n                column.cellRenderers = column.cellRenderers.concat( column.iconCellRenderer );\n            }\n            column.cellRenderers = column.cellRenderers.concat( cellRenderer.getAwCellRenderers() );\n        } );\n\n        _.forEach( _tableColumns, function( column, index ) {\n            column.index = index;\n\n            if( !column.headerRenderers ) {\n                column.headerRenderers = [];\n            }\n\n            column.headerRenderers = column.headerRenderers.concat( cellRenderer.getAwHeaderRenderers() );\n        } );\n\n        menuService.loadDefaultColumnMenus();\n    };\n\n    let getObjects = function() {\n        if( !dataProvider.viewModelCollection ) {\n            return [];\n        }\n        if( gridOptions.transpose === true ) {\n            return SPLMTableTranspose.getTransposedVmos( dataProvider.cols, dataProvider.viewModelCollection.loadedVMObjects );\n        }\n        return dataProvider.viewModelCollection.loadedVMObjects;\n    };\n\n    let resetColumns = function() {\n        _updateColumnDefs();\n\n        awColumnFilterService.removeStaleFilters( columnProvider, _tableColumns );\n\n        // property loading has completed\n        tableCtrl.resetColumnDefs( _tableColumns );\n        // Table headers recreated, need to initialize column rearrangement\n        columnRearrangementService.initialize();\n\n        // Trick for update scroll container position\n        if( tableScroll.isInitialized() ) {\n            cellRenderer.resetHoverCommandElement();\n            tableScroll.setLoadedVMObjects( getObjects() );\n            tableScroll.handleScroll();\n        }\n    };\n\n    /**\n     * Finds VMOs with undefined props within the specified range.\n     *\n     * @param {int} startIndex - starting VMO index\n     * @param {int} endIndex - edning VMO index\n     */\n    var findVMOsWithMissingProps = function( startIndex, endIndex ) {\n        var emptyVMOs = [];\n\n        for( var i = startIndex; i <= endIndex; i++ ) {\n            var vmo = dataProvider.viewModelCollection.loadedVMObjects[ i ];\n            if( vmo.isPropLoading ) {\n                continue;\n            } else if( !vmo.props ) {\n                emptyVMOs.push( vmo );\n            } else {\n                var keys = Object.keys( vmo.props );\n\n                if( keys.length === 0 ) {\n                    emptyVMOs.push( vmo );\n                }\n            }\n        }\n\n        return emptyVMOs;\n    };\n\n    let loadMissingProps = function() {\n        var firstRenderedItemIndex = tableScroll.getFirstRenderedItemIndex();\n        var lastRenderedItemIndex = tableScroll.getLastRenderedItemIndex();\n        var emptyVMOs = findVMOsWithMissingProps( firstRenderedItemIndex, lastRenderedItemIndex );\n        if( emptyVMOs.length > 0 ) {\n            eventBus.publish( gridid + '.plTable.loadProps', {\n                VMOs: emptyVMOs\n            } );\n        }\n    };\n\n    if( gridid ) {\n        var instanceEventSubcr = [];\n\n        // Do essential table DOM Element initialization for further processing\n        table.id = gridid;\n\n        table.classList.add( Const.CLASS_TABLE );\n        table.classList.add( Const.CLASS_WIDGET_GRID );\n        table.classList.add( Const.CLASS_LAYOUT_COLUMN );\n        table.classList.add( Const.CLASS_WIDGET_TABLE_DROP );\n        table.classList.add( Const.CLASS_SELECTION_ENABLED );\n\n        util.setSortCriteriaOnColumns( columnProvider, dataProvider );\n\n        var getContainerHeight = function() {\n            if( containerHeight !== undefined ) {\n                return containerHeight;\n            }\n\n            if( gridOptions.maxRowsToShow !== undefined ) {\n                return ( _rowHeight + _rowBorderWidth ) * gridOptions.maxRowsToShow + Const.HEIGHT_HEADER;\n            }\n\n            return undefined;\n        };\n\n        tableScroll = new SPLMTableInfiniteScrollService( getContainerHeight() );\n\n        table._tableInstance = {\n            ctx: appCtxService.ctx,\n            messages: _splmTableMessages,\n            declViewModel: declViewModel,\n            dataProvider: dataProvider,\n            viewModelCollection: viewModelCollection,\n            columnProvider: columnProvider,\n            gridId: gridid,\n            gridOptions: gridOptions,\n            isBulkEditing: false,\n            isCellEditing: false,\n            renderer: tableScroll,\n            dynamicRowHeightStatus: false,\n            cellRenderer: cellRenderer,\n            runActionWithViewModel: runActionWithViewModel,\n            tableInstanceCallbacks,\n            tableContext: tableContext ? tableContext : {},\n            showCheckBox: showCheckBox\n        };\n\n        tableEditor = new Editor( table, directiveElement, gridContextDispatcher );\n        table._tableInstance.editor = tableEditor;\n        keyboardService = new SPLMTableKeyboardService( table, tableEditor );\n        keyboardService.setupKeyListener();\n        table._tableInstance.keyboardService = keyboardService;\n\n        menuService = new MenuService( table, directiveElement, table._tableInstance, gridContextDispatcher );\n\n        if( gridOptions.enableGridMenu ) {\n            menuService.addGridMenu();\n        }\n\n        if( gridOptions.showContextMenu === true ) {\n            menuService.setContextSelectionHelper( selectionHelper );\n        }\n\n        if( gridOptions.enableDynamicRowHeight ) {\n            table._tableInstance.dynamicRowHeightStatus = true;\n        }\n\n        _updateColumnDefs();\n\n        tableCtrl = new Ctrl( table, _tableColumns, tableEditor, gridContextDispatcher );\n        table._tableInstance.controller = tableCtrl;\n        table._tableInstance.editor = tableEditor;\n\n        // LCS-13247 Pagination SOA performance issue for Objectset Table\n        // - Put a debounce here to avoid possible sending traffic jam, the number\n        //   is from _pingRedrawDebounce from aw.table.controller\n        // - With debounce IE performance improves a lot and no impact to chrome performance,\n        //   so leave the debounce for all\n        var _loadMorePageDebounce = _.debounce( function( firstRenderedItem, lastRenderedItem ) {\n            eventBus.publish( gridid + '.plTable.loadMorePages', {\n                firstRenderedItem: firstRenderedItem,\n                lastRenderedItem: lastRenderedItem\n            } );\n        }, 500 );\n\n        var pendingUpdatedProps = {};\n\n        var updateRowContents = function( updatedPropsMaps ) {\n            var rowElements = _trv.queryAllRowCellElementsFromTable();\n            _.forEach( updatedPropsMaps, function( updatedProps, vmoUid ) {\n                _.forEach( rowElements, function( rowElem ) {\n                    _.forEach( rowElem.children, function( cellElem ) {\n                        // Check if the vmo has been updated, if not continue to next cell\n                        let updatedVmo = null;\n                        if( rowElem.vmo && rowElem.vmo.uid === vmoUid ) {\n                            updatedVmo = rowElem.vmo;\n                        } else if( gridOptions.transpose === true && cellElem.columnDef.vmo && cellElem.columnDef.vmo.uid === vmoUid ) {\n                            updatedVmo = cellElem.columnDef.vmo;\n                        } else {\n                            return;\n                        }\n\n                        var needsUpdate = false;\n                        if( cellElem.columnDef && cellElem.columnDef.name === 'icon' ||\n                            gridOptions.transpose === true && rowElem.vmo.props.transposedColumnProperty.dbValue === 'icon' ) {\n                            var imgElem = cellElem.getElementsByTagName( 'img' )[ 0 ];\n                            if( imgElem && imgElem.getAttribute( 'src' ) !== util.getImgURL( updatedVmo ) ) {\n                                needsUpdate = true;\n                            }\n                        } else {\n                            for( var i = 0; i < updatedProps.length; i++ ) {\n                                if( cellElem.propName === updatedProps[ i ] ||\n                                    gridOptions.transpose === true && rowElem.vmo.props.transposedColumnProperty.dbValue === updatedProps[ i ] ) {\n                                    needsUpdate = true;\n                                    break;\n                                }\n                            }\n                        }\n\n                        if( needsUpdate ) {\n                            Cell.updateCell( cellElem, rowElem, table, tableEditor );\n                            if( rowElem.vmo.selected && ( cellElem.columnDef.isTableCommand || cellElem.columnDef.isTreeNavigation ) ) {\n                                let cellTop = cellElem.children[ 0 ];\n                                if( cellElem.columnDef.isTreeNavigation ) {\n                                    cellTop = cellElem.getElementsByClassName( 'aw-jswidgets-tableNonEditContainer' )[ 0 ];\n                                }\n                                if( cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER ).length === 0 ) {\n                                    if( dataProvider.selectionModel && !dataProvider.selectionModel.multiSelectEnabled && dataProvider.selectionModel\n                                        .getCurrentSelectedCount() === 1 ) {\n                                        let cellCommand = awSPLMTableCellRendererFactory.createCellCommandElement( cellElem.columnDef, rowElem.vmo, true );\n                                        cellTop.appendChild( cellCommand );\n                                    }\n                                }\n                            }\n                        }\n                    } );\n                } );\n            } );\n        };\n\n        var updatePendingProps = _.debounce( function() {\n            // prevent from calling if table has been destroyed in meantime\n            if( !table._tableInstance.isDestroyed ) {\n                updateRowContents( pendingUpdatedProps );\n                pendingUpdatedProps = {};\n            }\n        }, 250 );\n\n        instanceEventSubcr.push( eventBus.subscribe( 'viewModelObject.propsUpdated', function( updatedProps ) {\n            // Merge the updatedVmos into pendingUpdatedVmos\n            for( var vmoUid in updatedProps ) {\n                if( pendingUpdatedProps[ vmoUid ] === undefined ) {\n                    pendingUpdatedProps[ vmoUid ] = updatedProps[ vmoUid ];\n                } else {\n                    for( var i = 0; i < updatedProps[ vmoUid ].length; i++ ) {\n                        var updatedPropName = updatedProps[ vmoUid ][ i ];\n                        if( pendingUpdatedProps[ vmoUid ].indexOf( updatedPropName ) === -1 ) {\n                            pendingUpdatedProps[ vmoUid ].push( updatedPropName );\n                        }\n                    }\n                }\n            }\n            updatePendingProps();\n        } ) );\n\n        var loadProps = function( emptyVMOs ) {\n            eventBus.publish( gridid + '.plTable.loadProps', {\n                VMOs: emptyVMOs\n            } );\n        };\n\n        var editCellElement;\n\n        columnRearrangementService = new SPLMTableColumnRearrangement( table );\n\n        // 20180927: This is not related to global isEdit anymore, feel free\n        // to refactor:)\n        var updateEditStatusForTableCanvas = function( isEditing ) {\n            tableCtrl.setDraggable( !isEditing );\n            tableEditor.updateEditStatus( isEditing );\n        };\n\n        var _setupTreeForRestrictiveEditing = function( isEditing ) {\n            tableScroll.setupTreeEditScroll( isEditing );\n        };\n\n        updateEditState = function( eventData ) {\n            // We should not start edit for any non table cases.\n            // This should be started only for table cases and also based on the grid id you are on.\n            // PWA case the dataSource is the dataProvider, thus has no .dataProviders property (we check if it is the dataProvider in scope with .name)\n            // SWA case we have dataSource.dataProvider and can check with dataProviders[ dataProvider.name ]\n            if( tableCtrl && eventData.dataSource && ( eventData.dataSource.getAtomicData\n              && eventData.dataSource.getAtomicData().dpRef && eventData.dataSource.getAtomicData().dpRef.current\n              || eventData.dataSource.name === dataProvider.name ) ) {\n                var isEditing = eventData.state === 'partialSave' || eventData.state === 'starting';\n\n                // If saving, set all column filters to be stale as data could have changed\n                if( eventData.state === 'saved' ) {\n                    _.forEach( dataProvider.cols, function( column ) {\n                        awColumnFilterService.setColumnFilterStale( column );\n                    } );\n                    if( !util.isAutoSaveEnabled( table ) ) {\n                        tableEditor.clearPropIsEditableCache();\n                    }\n                    util.setIsCellEditing( table, false );\n                } else if( eventData.state === 'canceling' ) {\n                    tableEditor.clearPropIsEditableCache();\n                    util.setIsCellEditing( table, false );\n                }\n\n                // Enable vmo caching on collapse in edit mode\n                dataProvider.cacheCollapse = true;\n\n                util.setIsBulkEditing( table, isEditing );\n                gridContextDispatcher( {\n                    type: 'UPDATE_VALUES',\n                    isBulkEditing: table._tableInstance.isBulkEditing,\n                    dynamicRowHeightStatus: table._tableInstance.dynamicRowHeightStatus\n                } );\n\n                tableCtrl.setSelectable( !isEditing );\n\n                if( util.isCellEditing( table ) === false || util.isCellEditing( table ) && !util.isAutoSaveEnabled( table ) ) {\n                    updateEditStatusForTableCanvas( isEditing );\n                }\n\n                if( gridOptions.useTree && !util.isExpandOrPaginationAllowedInEdit( table ) ) {\n                    _setupTreeForRestrictiveEditing( isEditing );\n                }\n\n                if( !isEditing ) {\n                    // Restore original cache collapse state when leaving edit mode\n                    dataProvider.restoreInitialCacheCollapseState();\n                }\n                if( table._tableInstance.dynamicRowHeightStatus === true ) {\n                    resetDynamicRowHeights();\n                    clientRefresh();\n                }\n            }\n        };\n\n        instanceEventSubcr.push( eventBus.subscribe( dataProvider._eventTopicEditInProgress, function() {\n            if ( reusable !== true ) {\n                const eventData = {\n                    dataSource: dataProvider,\n                    state: dataProvider._editingState\n                };\n                updateEditState( eventData );\n            }\n        } ) );\n\n        instanceEventSubcr.push( eventBus.subscribe( declViewModel._internal.eventTopicEditInProgress, function() {\n            const eventData = {\n                dataSource: declViewModel,\n                state: declViewModel._editingState\n            };\n            updateEditState( eventData );\n        } ) );\n\n        instanceEventSubcr.push( eventBus.subscribe( 'plTable.editStateChange', function( eventData ) {\n            updateEditState( eventData );\n        } ) );\n\n        instanceEventSubcr.push( eventBus.subscribe( 'editHandlerStateChange', function( eventData ) {\n            updateEditState( eventData );\n        } ) );\n\n        var _updateAllRowsVisibilityDebounce = _.debounce( function() {\n            var rowElements = _trv.queryAllRowCellElementsFromTable();\n            _.forEach( rowElements, function( row ) {\n                if( row.vmo ) {\n                    var cellTopElem = row.getElementsByClassName( Const.CLASS_SPLM_TABLE_ICON_CELL )[ 0 ];\n                    if( !cellTopElem ) {\n                        cellTopElem = row.getElementsByClassName( Const.CLASS_AW_TREE_COMMAND_CELL )[ 0 ];\n                    }\n                    if( cellTopElem ) {\n                        var iconCellElem = cellTopElem.parentElement;\n                        var columnDef = iconCellElem.columnDef;\n                        var newCellTop = Cell.createElement( columnDef, row.vmo, table, row );\n                        iconCellElem.replaceChild( newCellTop, cellTopElem );\n                    }\n                }\n            } );\n        }, 100 );\n\n        /**\n         * Subscribe to resetScroll. Clear the tables rendered items cache and scroll to top of table.\n         */\n        instanceEventSubcr.push( eventBus.subscribe( dataProvider.name + '.resetScroll', function() {\n            resetInfiniteScroll();\n        } ) );\n\n        var verdict = util.validateRowHeightGridOption( table._tableInstance.gridOptions );\n        /**\n         * Subscribe to LayoutChangeEvent. Update row height to correct value\n         */\n        if( verdict === false ) {\n            instanceEventSubcr.push( eventBus.subscribe( 'LayoutChangeEvent', function( data ) {\n                var oldHeight = _rowHeight;\n                _rowHeight = data.rowHeight;\n                if( oldHeight === _rowHeight ) {\n                    return;\n                }\n                if( tableScroll.isInitialized() ) {\n                    tableScroll.setRowHeight( _rowHeight + _rowBorderWidth );\n\n                    var newContainerHeight = getContainerHeight();\n                    if( newContainerHeight !== undefined ) {\n                        tableScroll.setContainerHeight( newContainerHeight );\n                    }\n                    // Reinitialize properties so that the rendering calculations are valid\n                    tableScroll.initializeProperties();\n\n                    // Reset dynamic row height if enabled\n                    if( table._tableInstance.dynamicRowHeightStatus ) {\n                        resetDynamicRowHeights();\n                    }\n\n                    tableScroll.updateRowAlignment();\n\n                    // Scroll to rows in that were in view before layout change\n                    var scrollContainer = _trv.getScrollCanvasElementFromTable();\n                    var oldScrollTop = scrollContainer.scrollTop;\n                    scrollContainer.scrollTop = oldScrollTop / oldHeight * _rowHeight;\n                    tableScroll.handleScroll();\n                }\n            } ) );\n        }\n\n        // Reusable table does not need below named events for selection changes, it will now work with selectionData.\n        let isReusable = _.isString( reusable ) ?  reusable === 'true' : reusable;\n        if (  isReusable !== true ) {\n            instanceEventSubcr.push( eventBus.subscribe( dataProvider.name + '.selectionChangeEvent', function() {\n                SPLMTableSelectionHelper.updateContentRowSelection( dataProvider.selectionModel, dataProvider.cols,\n                    _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table );\n            } ) );\n\n            instanceEventSubcr.push( eventBus.subscribe( dataProvider.name + '.selectAll', function() {\n                SPLMTableSelectionHelper.updateContentRowSelection( dataProvider.selectionModel, dataProvider.cols,\n                    _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table );\n            } ) );\n\n            instanceEventSubcr.push( eventBus.subscribe( dataProvider.name + '.selectNone', function() {\n                SPLMTableSelectionHelper.updateContentRowSelection( dataProvider.selectionModel, dataProvider.cols,\n                    _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table );\n            } ) );\n        }\n\n        instanceEventSubcr.push( eventBus.subscribe( gridid + '.plTable.visibilityStateChanged', _updateAllRowsVisibilityDebounce ) );\n\n        instanceEventSubcr.push( eventBus.subscribe( gridid + '.plTable.resizeCheck', function() {\n            if( tableScroll.isInitialized() ) {\n                tableScroll.checkForResize();\n            }\n        } ) );\n\n        var scrollToRow = function( gridId, rowUids ) {\n            if( gridid === gridId ) {\n                if( util.isBulkEditing( table ) ) {\n                    return;\n                }\n                var rowIndexes = [];\n                for( var i = 0; i < rowUids.length; i++ ) {\n                    var uid = rowUids[ i ].uid ? rowUids[ i ].uid : rowUids[ i ];\n                    var rowIndex = dataProvider.viewModelCollection.findViewModelObjectById( uid );\n                    if( rowIndex !== -1 ) {\n                        rowIndexes.push( rowIndex );\n                    }\n                }\n                if( rowIndexes.length > 0 ) {\n                    tableScroll.scrollToRowIndex( rowIndexes );\n                }\n            }\n        };\n\n        instanceEventSubcr.push( eventBus.subscribe( 'plTable.scrollToRow', function( eventData ) {\n            scrollToRow( eventData.gridId, eventData.rowUids );\n        } ) );\n\n        var updateDecoratorVisibility = function( isEnabled ) {\n            if( isEnabled === true && gridOptions.showDecorators !== false ) {\n                table.classList.add( Const.CLASS_AW_SHOW_DECORATORS );\n            } else {\n                table.classList.remove( Const.CLASS_AW_SHOW_DECORATORS );\n            }\n        };\n\n        var decoratorToggle = 'decoratorToggle';\n\n        var showDecorators = appCtxService.getCtx( decoratorToggle );\n        updateDecoratorVisibility( showDecorators );\n\n        instanceEventSubcr.push( eventBus.subscribe( 'appCtx.register', function( event ) {\n            if( event.name === decoratorToggle ) {\n                updateDecoratorVisibility( event.value );\n            }\n        } ) );\n\n        instanceEventSubcr.push( eventBus.subscribe( 'appCtx.update', function( event ) {\n            if( event.name === decoratorToggle ) {\n                updateDecoratorVisibility( event.value.decoratorToggle );\n            }\n        } ) );\n\n        instanceEventSubcr.push( eventBus.subscribe( 'decoratorsUpdated', function( updateVMOs ) {\n            updateVMOs = updateVMOs.length === undefined ? [ updateVMOs ] : updateVMOs;\n            tableCtrl.updateColorIndicatorElements( updateVMOs );\n        } ) );\n\n        /**\n         * React to request for node expansions.\n         */\n        instanceEventSubcr.push( eventBus.subscribe( dataProvider.name + '.expandTreeNode', function( eventData ) {\n            if( eventData.parentNode ) {\n                var vmCollection = dataProvider.getViewModelCollection();\n\n                var rowNdx = vmCollection.findViewModelObjectById( eventData.parentNode.id );\n\n                if( rowNdx !== -1 ) {\n                    var vmo = vmCollection.getViewModelObject( rowNdx );\n                    if( vmo.isExpanded !== true ) {\n                        vmo.isExpanded = true;\n                        if( tableInstanceCallbacks.toggleTreeNode ) {\n                            tableInstanceCallbacks.toggleTreeNode( vmo );\n                        } else {\n                            eventBus.publish( table.id + '.plTable.toggleTreeNode', vmo );\n                        }\n                    }\n                }\n            }\n        } ) );\n\n        const getTargetVmo = function( element, isTarget ) {\n            /**\n             * Merge event 'target' with any other objects currently selected.\n             */\n            var targetObjects = [];\n\n            var elementRow = element.classList.contains( Const.CLASS_ROW ) ? element : util.closestElement( element, '.' + Const.CLASS_ROW );\n\n            if( elementRow && elementRow.vmo ) {\n                targetObjects.push( elementRow.vmo );\n                var targetUid = elementRow.vmo.uid;\n\n                if( !isTarget ) {\n                    var sourceObjects = dragAndDropService.getSourceObjects(\n                        dataProvider, targetUid ).filter( function( obj ) {\n                        return targetObjects.indexOf( obj ) === -1;\n                    } );\n                    targetObjects = targetObjects.concat( sourceObjects );\n                }\n\n                return targetObjects;\n            }\n\n            return null;\n        };\n\n        const clearRowSelection = ( targetVMO ) => { // eslint-disable-line\n            dataProvider.selectNone();\n        };\n\n        var listenToRelatedModifiedEvent = false;\n        var targetVMOScoped = null;\n        const selectTarget = ( targetElement, targetVMO ) => { // eslint-disable-line\n            /**\n             * Setup to listen when the 'drop' is complete\n             */\n            if ( !listenToRelatedModifiedEvent ) {\n                listenToRelatedModifiedEvent = true;\n                targetVMOScoped = targetVMO;\n            }\n        };\n\n        const isTextNodeDragged = ( dataTranferObj ) => {\n            if( dataTranferObj && dataTranferObj.types ) {\n                return event.type === 'dragstart' && [ ...dataTranferObj.types ].some( type => type === 'text/plain' || type === 'Text' );\n            }\n            return false;\n        };\n\n        let newCallbackApis = {\n            clearSelection: clearRowSelection,\n            setSelection: ( targetVMO ) => {\n                selectTarget( null, targetVMO );\n            },\n            getTargetElementAndVmo: ( event, isSourceEle ) => {\n                let targetVMO = null;\n                let target = null;\n                if( !isTextNodeDragged( event.dataTransfer ) ) {\n                    target = dom.closest( event.target, '.ui-grid-row' ) || dom.closest( event.target, '.aw-widgets-droppable' );\n                }\n                if( target ) {\n                    targetVMO = getTargetVmo( target, !isSourceEle );\n                }\n                return {\n                    targetElement: target,\n                    targetVMO: targetVMO\n                };\n            },\n            highlightTarget: ( eventData ) => {\n                splmTableDragHandler.handleDragDropHighlightPLTable( eventData );\n            }\n        };\n\n        const registerSplmTableDndListner = ( element, callbackApis, declViewModel, tableProvider ) => {\n            const getEventCallbackFn = ( event ) => {\n                let target = {};\n                let isSourceEle = event.type === 'dragstart';\n                if( callbackApis.getTargetElementAndVmo ) {\n                    target = callbackApis.getTargetElementAndVmo( event, isSourceEle );\n                }\n                let fun = declViewModel.dndHandler[ event.type ];\n                fun( event, target, callbackApis, tableProvider );\n            };\n            const setListener = ( eventType ) => {\n                let callBackFn = getEventCallbackFn.bind( null );\n                element.addEventListener( eventType, callBackFn );\n            };\n            const setEventListener = ( providers ) => {\n                Object.keys( providers ).forEach( ( providerName ) => {\n                    setListener( providerName.toLowerCase() );\n                } );\n            };\n            let dragProviders = declDragAndDropService.getDragHandler( declViewModel );\n            if( dragProviders ) {\n                setEventListener( dragProviders );\n            }\n            let dropProviders = declDragAndDropService.getDropHandler( declViewModel );\n            if( dropProviders ) {\n                setEventListener( dropProviders );\n            }\n        };\n        table._tableInstance.subDefs = instanceEventSubcr;\n\n        directiveElement.appendChild( table );\n\n        // Drag and drop service needs to be setup after table has been attached to the directive element so\n        // that it can properly get the scope.\n        if( gridOptions.enableDragAndDrop !== false ) {\n            /**\n             * LCS-315044: Setup the drag and drop with the new design pattern if drag and drop\n             * handlers are defined for table's container view.\n             *\n             * The branching is done to support AW, as AW is still consuming the old drag and drop pattern.\n             */\n            if( declDragAndDropService.areDnDHandelersDefined( declViewModel ) ) {\n                registerSplmTableDndListner( table, newCallbackApis, declViewModel, dataProvider );\n            }\n        } else {\n            dragAndDropService.disableDragAndDrop( table );\n        }\n    }\n\n    var getIconCellSVG = function( vmo ) {\n        if( vmo.loadingStatus ) {\n            return { id: 'miscInProcessIndicator', image: miscInProcessIndicator };\n        } else if( vmo.isLeaf ) {\n            // we made the decision to stop rendering 'typeBlankIcon' because (1) there is no visual difference, (2) we want\n            // to decrease the number of DOM elements and (3) we don't know the history of why it was there.\n            return {};\n        } else if( vmo.isExpanded ) {\n            return { id: 'miscExpandedTree', image: miscExpandedTree };\n        }\n        return { id: 'miscCollapsedTree', image: miscCollapsedTree };\n    };\n\n    let updateContentRowSelection = () => {\n        SPLMTableSelectionHelper.updateContentRowSelection( dataProvider.selectionModel, dataProvider.cols,\n            _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table );\n    };\n\n    let updateSortDirection = ( currentColumnIndex, newColumnIndex, sortDirection ) => {\n        tableCtrl.setHeaderCellSortDirection( currentColumnIndex, newColumnIndex, sortDirection );\n    };\n\n    let refresh = function() {\n        var columnAttrs = [];\n\n        // attributesToInflate at server side cannot accept full name i.e typename.propertyname.\n        // we don't need to inflate the attributes or properties that are hidden.\n        _.forEach( dataProvider.cols, function( uwColumnInfo ) {\n            if( uwColumnInfo.field && uwColumnInfo.hiddenFlag !== true ) {\n                columnAttrs.push( uwColumnInfo.field );\n            }\n        } );\n\n        if( dataProvider && dataProvider.action && dataProvider.action.inputData ) {\n            dataProvider.action.inputData.searchInput = dataProvider.action.inputData.searchInput || {};\n            var searchInput = dataProvider.action.inputData.searchInput;\n\n            if( searchInput.attributesToInflate ) {\n                searchInput.attributesToInflate = _.union( searchInput.attributesToInflate, columnAttrs );\n            } else {\n                searchInput.attributesToInflate = columnAttrs;\n            }\n        }\n\n        // Since VMOs represent columns, we need to reset the columns also for transpose mode\n        if( gridOptions.transpose === true ) {\n            resetColumns();\n        }\n\n        // REFACTOR: infinite scroll code should be refactor to follow:\n        // 1. DOMElement should be the only interface for interaction between service and function\n        // 2. Lot of code below should be pull out from anonymous function, a initialize grid which\n        //    is taking 70 line of code is a bad smell.\n        if( !tableScroll.isInitialized() ) {\n            // Set initial scroll index before table initializes\n            if( dataProvider.isFocusedLoad ) {\n                var selection = dataProvider.getSelectedObjects();\n                if( selection.length === 1 ) {\n                    scrollToRow( gridid, [ selection[ 0 ].uid ] );\n                }\n            }\n\n            tableScroll.initializeGrid( {\n                tableElem: table,\n                directiveElem: directiveElement,\n                scrollViewportElem: _trv.getScrollCanvasElementFromTable(),\n                pinViewportElem: _trv.getPinCanvasElementFromTable(),\n                rowSelector: '.' + Const.CLASS_ROW,\n                rowHeight: _rowHeight + _rowBorderWidth,\n                headerHeight: _headerHeight,\n                dynamicRowHeightStatus: gridOptions.enableDynamicRowHeight,\n                loadedVMObjects: getObjects(),\n                updateVisibleCells: function( rowParentElem ) {\n                    tableCtrl.updateVisibleCells( rowParentElem );\n                },\n                updateScrollColumnsInView: function( scrollLeft, scrollContainerWidth ) {\n                    tableCtrl.updateScrollColumnsInView( scrollLeft, scrollContainerWidth );\n                },\n                onStartScroll: function() {\n                    if( !util.isBulkEditing( table ) || !editCellElement ) {\n                        return;\n                    }\n\n                    // Close drop down if it is open on the edit cell\n                    var cellListElement = editCellElement.getElementsByClassName( 'aw-jswidgets-popUpVisible' )[ 0 ];\n                    if( cellListElement ) {\n                        editCellElement.click();\n                    }\n                },\n                syncHeader: function( isPin, scrollLeft ) {\n                    let traversalTable = new Trv( table );\n                    util.syncHeader( traversalTable, isPin, scrollLeft );\n                },\n                renderRows: function( startIndex, endIndex ) {\n                    var subVMObjects = getObjects().slice( startIndex, endIndex + 1 );\n                    // Return if there is nothing to render\n                    if( subVMObjects.length === 0 ) {\n                        return;\n                    }\n                    if( gridOptions.useTree === true ) {\n                        let messages = gridOptions.textBundle ? gridOptions.textBundle : _splmTableMessages;\n                        _.forEach( subVMObjects, function( vmo ) {\n                            if( vmo.isLeaf ) {\n                                vmo._twistieTitle = '';\n                            } else {\n                                vmo._twistieTitle = vmo.isExpanded ? messages.TwistieTooltipExpanded : messages.TwistieTooltipCollapsed;\n                            }\n\n                            if( !util.isExpandAllowed( table ) ) {\n                                vmo._twistieTitle = '';\n                            }\n                        } );\n                    }\n                    var insertBefore = false;\n                    var scrollContents = _trv.getScrollContentElementFromTable();\n                    var pinContents = _trv.getPinContentElementFromTable();\n                    var firstPinElement = pinContents.childElementCount > 0 ? pinContents.childNodes[ 0 ] : 0;\n                    var firstScrollElement = scrollContents.childElementCount > 0 ? scrollContents.childNodes[ 0 ] : 0;\n                    if( firstScrollElement && firstScrollElement.getAttribute( 'data-indexNumber' ) ) {\n                        var firstRowIdx = parseInt( firstScrollElement.getAttribute( 'data-indexNumber' ) );\n                        insertBefore = firstRowIdx > startIndex;\n                    }\n                    var pinContentElement = tableCtrl.constructContentElement( subVMObjects, startIndex, _rowHeight, true );\n                    var scrollContentElement = tableCtrl.constructContentElement( subVMObjects, startIndex, _rowHeight, false );\n                    tableCtrl.setAriaLabelledAndDescribedBy( directiveElement, _trv.getTableContainerElementFromTable() );\n                    tableCtrl.setAriaRowCount( _trv.getTableContainerElementFromTable() );\n                    if( table._tableInstance.dynamicRowHeightStatus ) {\n                        tableCtrl.syncContentRowHeights( pinContentElement, scrollContentElement );\n                    }\n\n                    SPLMTableSelectionHelper.updateContentRowSelection( dataProvider.selectionModel, dataProvider.cols,\n                        pinContentElement.childNodes, scrollContentElement.childNodes, table );\n\n                    if( insertBefore ) {\n                        _trv.getPinContentElementFromTable().insertBefore( pinContentElement, firstPinElement );\n                        _trv.getScrollContentElementFromTable().insertBefore( scrollContentElement, firstScrollElement );\n                    } else {\n                        _trv.getPinContentElementFromTable().appendChild( pinContentElement );\n                        _trv.getScrollContentElementFromTable().appendChild( scrollContentElement );\n                    }\n\n                    if( table._tableInstance.focusTreeNodeExpandAfterRender ) {\n                        let node = table._tableInstance.focusTreeNodeExpandAfterRender;\n                        let rowContents = _trv.queryAllRowCellElementsFromTable();\n                        let rowElem = _.filter( rowContents, { vmo: node } )[ 0 ];\n                        if( rowElem ) {\n                            let elementToFocus = rowElem.getElementsByClassName( Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD )[ 0 ];\n                            elementToFocus && elementToFocus.focus();\n                        }\n                    }\n                },\n                removeRows: function( upperCount, lowerCounter ) {\n                    cellRenderer.resetHoverCommandElement();\n                    tableCtrl.removeContentElement( upperCount, lowerCounter );\n                    tableCtrl.setAriaRowCount( _trv.getTableContainerElementFromTable() );\n                },\n                afterGridRenderCallback: function( firstRenderedItem, lastRenderedItem ) {\n                    let containerElement = _trv.getTableContainerElementFromTable();\n                    if( containerElement && containerElement.hasAttribute( 'aria-activedescendant' ) ) {\n                        var activedescendantId = containerElement.getAttribute( 'aria-activedescendant' );\n                        if( !document.getElementById( activedescendantId ) ) {\n                            containerElement.removeAttribute( 'aria-activedescendant' );\n                        }\n                    }\n                    var isEditing = util.isBulkEditing( table );\n                    let loadingProps = false;\n\n                    if( isEditing ) {\n                        updateEditStatusForTableCanvas( isEditing );\n                    }\n\n                    if( gridOptions.useTree === true ) {\n                        if( _nodeExpansionInProgress === true ) {\n                            return;\n                        }\n\n                        var nonPlaceholderFound = false;\n                        for( var i = lastRenderedItem.index; i >= firstRenderedItem.index; i-- ) {\n                            var vmo = dataProvider.viewModelCollection.loadedVMObjects[ i ];\n\n                            if( dataProvider.focusAction ) {\n                                if( vmo._focusRequested ) {\n                                    return;\n                                }\n\n                                if( vmo.isPlaceholder ) { // ...use .isPlaceholder or .isFocusParent instead\n                                    if( nonPlaceholderFound ) {\n                                        delete vmo.isPlaceholder;\n\n                                        vmo._focusRequested = true;\n\n                                        tableInstanceCallbacks.doFocusPlaceHolder( vmo );\n                                        return;\n                                    }\n                                } else {\n                                    nonPlaceholderFound = true;\n                                }\n                            }\n                        }\n\n                        // Find and expand the first of any nodes that need to be expanded\n                        for( var j = firstRenderedItem.index; j <= lastRenderedItem.index; j++ ) {\n                            var vmObject = dataProvider.viewModelCollection.loadedVMObjects[ j ];\n                            var expandNode = false;\n\n                            if( vmObject.isLeaf !== true && vmObject._expandRequested !== true && vmObject.isExpanded !== true ) {\n                                // Mark for expansion if the node was already expanded\n                                if( util.performStateServiceAction( 'isNodeExpanded', declViewModel, gridid, vmObject ) ) {\n                                    expandNode = true;\n                                }\n                            }\n\n                            // Expand the node\n                            if( expandNode === true ) {\n                                vmObject.isExpanded = true;\n                                if( tableInstanceCallbacks.toggleTreeNode ) {\n                                    tableInstanceCallbacks.toggleTreeNode( vmObject );\n                                } else {\n                                    eventBus.publish( table.id + '.plTable.toggleTreeNode', vmObject );\n                                }\n\n                                return;\n                            }\n                        }\n\n                        // If any VMOs need props to be loaded, we will call for the props to be loaded and not\n                        // render the rows. The row rendering will then occur once they props have been loaded.\n                        var emptyVMOs = findVMOsWithMissingProps( firstRenderedItem.index, lastRenderedItem.index );\n                        if( emptyVMOs.length > 0 ) {\n                            loadProps( emptyVMOs );\n                            loadingProps = true;\n                        }\n                    }\n\n                    if( util.isPaginationAllowed( table ) ) {\n                        // _loadMorePageDebounce( firstRenderedItem, lastRenderedItem );\n                        if( tableInstanceCallbacks ) {\n                            _loadMorePageDebounce( firstRenderedItem, lastRenderedItem, tableInstanceCallbacks );\n                            tableInstanceCallbacks.loadMorePages( {\n                                firstRenderedItem: firstRenderedItem,\n                                lastRenderedItem: lastRenderedItem\n                            } );\n                        }\n                    }\n\n                    // Set scrollToRow to false after row is scrolled to and all\n                    // visible nodes around the scrolled to row are expanded\n                    if( dataProvider.scrollToRow === true && tableScroll.isInitialRowIndexInView() === true ) {\n                        dataProvider.scrollToRow = false;\n                    }\n                }\n            } );\n            tableScroll.renderInitialRows();\n            var setContainerHeightEvent = eventBus.subscribe(\n                gridid + '.plTable.containerHeightUpdated',\n                function( heightVal ) {\n                    updateContainerHeight( heightVal );\n                } );\n            instanceEventSubcr.push( setContainerHeightEvent );\n        } else {\n            // reset the row height cache\n            tableScroll.resetRowHeightCache();\n            // Set the loaded view model objects\n            tableScroll.setLoadedVMObjects( getObjects() );\n\n            // Render initial rows if at top of table\n            if( _trv.getScrollCanvasElementFromTable().scrollTop === 0 ) {\n                tableScroll.renderInitialRows();\n            } else {\n                tableScroll.handleScroll();\n            }\n        }\n    };\n\n    let clientRefresh = function() {\n        if( table && table._tableInstance ) {\n            table._tableInstance.showCheckBox = _showCheckBox;\n        }\n        util.cleanupComponents( table );\n        refresh();\n    };\n\n    let updateContainerHeight = function( heightVal ) {\n        tableScroll.setContainerHeight( heightVal );\n        tableScroll.initializeProperties();\n        tableScroll.handleScrollDown();\n    };\n\n    let updateDynamicRowHeight = function( dynamicRowHeightStatus ) {\n        table._tableInstance.dynamicRowHeightStatus = dynamicRowHeightStatus;\n        tableScroll.setDynamicRowHeight( table._tableInstance.dynamicRowHeightStatus );\n\n        clientRefresh();\n        if( !table._tableInstance.dynamicRowHeightStatus ) {\n            resetDynamicRowHeights();\n        }\n    };\n\n    let updatePinColumn = ( columnDef, isFreezeAction, defaultColumnPinIndex ) => {\n        const pinColumnIndex = isFreezeAction ? columnDef.index : defaultColumnPinIndex;\n        tableCtrl.pinToColumn( pinColumnIndex );\n        if( !isFreezeAction ) {\n            tableCtrl.resetFreezeScroll( columnDef.field );\n        }\n        tableScroll.handlePinViewportScrollbarPadding();\n    };\n\n    let hideColumn = ( columnFieldName ) => {\n        let columnDef;\n        var columns = dataProvider.cols;\n\n        _.forEach( columns, function( currentColumn ) {\n            if ( currentColumn.field === columnFieldName ) {\n                columnDef = currentColumn;\n                return false;\n            }\n        } );\n\n        if ( columnDef ) {\n            var columnIndex = columnDef.index;\n\n            let isOnlyVisibleColumn = true;\n            _.forEach( columns, function( currentColumn ) {\n                if( currentColumn.name !== columnDef.name && currentColumn.visible === true && currentColumn.name !== 'icon' ) {\n                    isOnlyVisibleColumn = false;\n                    return false;\n                }\n            } );\n\n            if( !isOnlyVisibleColumn ) {\n                if( columnProvider.isArrangeSupported() && columnProvider.hideColumn ) {\n                    // account for hidden columns\n                    if( dataProvider.cols[ columnIndex ].propertyName !== columnDef.propertyName ) {\n                        for( var i = 0; i < columns.length; i++ ) {\n                            if( columns[ i ].propertyName === columnDef.propertyName ) {\n                                columnIndex = i;\n                                break;\n                            }\n                        }\n                    }\n                    columnProvider.hideColumn( columnIndex );\n                }\n                tableCtrl.updateColumnVisibility( columnDef.field );\n\n                if( columnDef.filter && columnDef.filter.isFilterApplied ) {\n                    const eventData = {\n                        gridId: gridid,\n                        column: columnDef\n                    };\n                    eventBus.publish( 'pltable.columnFilterApplied', eventData );\n                }\n            } else {\n                localeService.getLocalizedText( 'UIMessages', 'hideColumnOnlyVisibleError' ).then( function( message ) {\n                    messagingService.showError( message );\n                } );\n            }\n        }\n    };\n\n    let resetDynamicRowHeights = function() {\n        if( dataProvider.viewModelCollection ) {\n            _.forEach( dataProvider.viewModelCollection.loadedVMObjects, function( vmo ) {\n                delete vmo.rowHeight;\n            } );\n        }\n    };\n\n    let resetInfiniteScroll = function() {\n        if( tableScroll && tableScroll.isInitialized() ) {\n            tableScroll.resetInfiniteScroll();\n        }\n    };\n\n    let maintainScrollPosition = function() {\n        tableScroll.setScrollPositionToBeMaintained();\n    };\n\n    let unsetScrollToRowIndex = function() {\n        if( tableScroll && tableScroll.isInitialized() ) {\n            tableScroll.resetInitialRowIndex();\n        }\n    };\n\n    let relatedModified = function() {\n        if ( listenToRelatedModifiedEvent ) {\n            listenToRelatedModifiedEvent = false;\n            var selectionModel = dataProvider.selectionModel;\n\n            if( selectionModel ) {\n                selectionHelper.handleSelectionEvent( [ targetVMOScoped ], selectionModel, null, dataProvider );\n                SPLMTableSelectionHelper.updateContentRowSelection( dataProvider.selectionModel, dataProvider.cols,\n                    _trv.getPinContentRowElementsFromTable(), _trv.getScrollContentRowElementsFromTable(), table );\n            }\n        }\n    };\n\n    let columnsResized = function( eventData ) {\n        // Prevent columnSizeChanged for transpose mode since the columns in transpose represent VMOs\n        // and not the columns in the columnProvider\n        if( gridOptions.transpose !== true ) {\n            columnProvider.columnSizeChanged( eventData.name, eventData.delta );\n        }\n        if( table._tableInstance.dynamicRowHeightStatus ) {\n            resetDynamicRowHeights();\n            clientRefresh();\n        }\n    };\n    let columnsRearranged = function( eventData )  {\n        if( gridOptions.transpose === true ) {\n            // Update the dom columns so they reflect correct data\n            // and return since the columns represent VMOs and not the columns in\n            // the columnProvider\n            resetColumns();\n            return;\n        }\n        // Get column position in relation to all columns, not just visible columns\n        var originalPosition = eventData.originalPosition;\n        var newPosition = null;\n\n        // Get new position index\n        _.forEach( dataProvider.cols, function( column ) {\n            if( eventData.name === column.name ) {\n                newPosition = column.index;\n            }\n        } );\n\n        // Adjust for hidden columns\n        _.forEach( dataProvider.cols, function( column, index ) {\n            if( column.hiddenFlag === true && index <= newPosition ) {\n                newPosition += 1;\n            }\n\n            if( column.hiddenFlag === true && index <= originalPosition ) {\n                originalPosition += 1;\n            }\n        } );\n\n        // awColumnService adjusts the column positions when the icon column is not present.\n        // By incrementing the positions by 1, we are able to ensure awColumnService still uses\n        // the correct column positions. Once  UI-Grid is removed, we can remove this hack and update awColumnService\n        // to not adjust positions when icon column is not present.\n        if( dataProvider.cols && dataProvider.cols[ 0 ].name !== 'icon' ) {\n            originalPosition += 1;\n            newPosition += 1;\n        }\n\n        if( originalPosition !== null && newPosition !== null ) {\n            columnProvider.columnOrderChanged( eventData.name, originalPosition, newPosition );\n        }\n    };\n\n    return {\n        getDynamicRowHeightStatus: function() {\n            return table._tableInstance.dynamicRowHeightStatus;\n        },\n        resetDynamicRowHeights: resetDynamicRowHeights,\n        updateDynamicRowHeight: updateDynamicRowHeight,\n        maintainScrollPosition:maintainScrollPosition,\n        unsetScrollToRowIndex:unsetScrollToRowIndex,\n        relatedModified: relatedModified,\n        columnsResized: columnsResized,\n        columnsRearranged:columnsRearranged,\n        resetInfiniteScroll: resetInfiniteScroll,\n\n        getTableElement: function() {\n            return table;\n        },\n        updateContentRowSelection: updateContentRowSelection,\n        updateContainerHeight: updateContainerHeight,\n        updateSortDirection: updateSortDirection,\n        updatePinColumn: updatePinColumn,\n        hideColumn: hideColumn,\n        /**\n         * Reset columns for PL Table\n         * this method out of exports.initializeTable, cannot do it now since it depends on dataProvider\n         * any other members whose scope is inside initializeTable.\n         */\n        resetColumns: function() {\n            resetColumns();\n        },\n        updateEditState: updateEditState,\n        removeStaleFilters: function( columns ) {\n            awColumnFilterService.removeStaleFilters( columnProvider, columns || _tableColumns );\n        },\n        setNodeExpansionInProgress: function( isInProgress ) {\n            _nodeExpansionInProgress = isInProgress;\n        },\n        updateFilterIcons: function( columnName ) {\n            if( columnName ) {\n                tableCtrl.updateFilterIcon( columnName );\n            } else {\n                tableCtrl.updateAllFilterIcons();\n            }\n        },\n        setFilterDisability: function( isDisabled ) {\n            menuService.setFilterDisability( isDisabled );\n        },\n        loadMissingProps: function() {\n            loadMissingProps();\n        },\n        updateTreeCellIcon: function( vmo ) {\n            const rowContents = _trv.queryAllRowCellElementsFromTable();\n            _.forEach( rowContents, function( rowElem ) {\n                if( rowElem.vmo ) {\n                    const matchingId = _contentFilter.isIdOfObject( rowElem.vmo, uwUtilSvc.getEvaluatedId( vmo ) );\n                    if( matchingId === true ) {\n                        // Only update if there is expand/collapse button available\n                        let treeNodeCommandElement = rowElem.querySelector( `.${Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD}` );\n                        if( treeNodeCommandElement ) {\n                            const iconCell = getIconCellSVG( vmo );\n                            // this if check is for the vmo.isLeaf use case where there is no need to render an icon\n                            let iconContainerElement = treeNodeCommandElement.querySelector( `.${Const.CLASS_ICON_BASE}` );\n                            if( iconContainerElement && iconCell && iconCell.image && iconCell.image.length > 0 ) {\n                                // add both for consistency, same as AwIcon\n                                iconContainerElement = util.addAttributeToDOMElement( iconContainerElement, 'iconId', iconCell.id );\n                                iconContainerElement = util.addAttributeToDOMElement( iconContainerElement, 'icon-id', iconCell.id );\n\n                                treeNodeCommandElement.title = vmo._twistieTitle;\n                                iconContainerElement.innerHTML = iconCell.image;\n                            }\n                        }\n                    }\n                }\n            } );\n        },\n        /**\n         * Refreshes the content in the table with the data currently in the dataProvider\n         */\n        refresh: refresh,\n        updateInstanceState: function( newState ) {\n            declViewModel = newState;\n            table._tableInstance.declViewModel = newState;\n        }\n    };\n};\n\n/**\n *  Release the resources occupied by SPLM table\n *\n * @param {String} gridId - Grid ID to be destroyed\n * @param {Element} tableElement - The table element\n * @param {Object} columnDefs - The column defs\n */\nexport let destroyTable = function( gridId, tableElement, columnDefs ) {\n    var table = tableElement.querySelector( `.${Const.CLASS_TABLE}` );\n    var instance = table && table._tableInstance || {};\n    var instanceEventSubcr = instance.subDefs;\n    _.forEach( instanceEventSubcr, function( eventBusSub ) {\n        if( eventBusSub !== null ) {\n            eventBus.unsubscribe( eventBusSub );\n        }\n    } );\n\n    for( var i = 0; i < columnDefs.length; i++ ) {\n        var cellRenderers = columnDefs[ i ].cellRenderers;\n        if( cellRenderers ) {\n            for( var j = 0; j < cellRenderers.length; j++ ) {\n                if( _.isFunction( cellRenderers[ j ].destroy ) ) {\n                    cellRenderers[ j ].destroy();\n                }\n            }\n        }\n    }\n\n    // Cleanup any leftover components\n    util.cleanupComponents( tableElement );\n\n    // Destroy the column/table menu\n    var menu = document.getElementById( gridId + '_menuContainer' );\n    if( menu !== null ) {\n        menu.parentElement.removeChild( menu );\n    }\n\n    // Destroy table renderer\n    if( instance.renderer ) {\n        instance.renderer.destroyGrid();\n    }\n\n    // table editor eventBusSubs unsubscribe\n    if( instance.editor ) {\n        instance.editor.destroy();\n    }\n\n    // NOTE: This is not need for now since we force every\n    // angularJS Compile must based on table scope. But leave\n    // it here for now by commenting it out.\n    // var cellRenderer = _cellRendererDefs[gridId];\n    // cellRenderer.destroyHoverCommandElement();\n    // delete _cellRendererDefs[gridId];\n\n    instance.isDestroyed = true;\n\n    eventBus.publish( 'tableDestroyed' );\n};\n\n_splmTableMessages.arrangeMenu = localeService.getLoadedTextFromKey( 'treeTableMessages.arrangeMenu' );\n_splmTableMessages.removeAllFilters = localeService.getLoadedTextFromKey( 'treeTableMessages.removeAllFilters' );\n_splmTableMessages.TwistieTooltipExpanded = localeService.getLoadedTextFromKey( 'treeTableMessages.TwistieTooltipExpanded' );\n_splmTableMessages.TwistieTooltipCollapsed = localeService.getLoadedTextFromKey( 'treeTableMessages.TwistieTooltipCollapsed' );\n_splmTableMessages.hideColumn = localeService.getLoadedTextFromKey( 'treeTableMessages.hideColumn' );\n_splmTableMessages.sortAscending = localeService.getLoadedTextFromKey( 'treeTableMessages.sortAscending' );\n_splmTableMessages.sortDescending = localeService.getLoadedTextFromKey( 'treeTableMessages.sortDescending' );\n_splmTableMessages.removeSort = localeService.getLoadedTextFromKey( 'treeTableMessages.removeSort' );\n_splmTableMessages.freezeMenu = localeService.getLoadedTextFromKey( 'treeTableMessages.freezeMenu' );\n_splmTableMessages.unfreezeMenu = localeService.getLoadedTextFromKey( 'treeTableMessages.unfreezeMenu' );\n_splmTableMessages.visibilityControlsTitle = localeService.getLoadedTextFromKey( 'treeTableMessages.visibilityControlsTitle' );\n_splmTableMessages.gridMenu = localeService.getLoadedTextFromKey( 'treeTableMessages.gridMenu' );\n\nexports = {\n    createTableObject,\n    destroyTable\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
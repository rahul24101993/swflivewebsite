{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* global jQuery */ /**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/NotyModule\n */import sanitizer from'js/sanitizer';import iconSvc from'js/iconService';import themeSvc from'js/theme.service';import eventBus from'js/eventBus';// revisitme - pengw\n// HINT: quick wire up for jq and needs to remove later\nimport $ from'jquery';window.jQuery=$;window.$=$;var exports={};var timeout={information:6000,error:60000};var modalType={information:false,warning:true,error:false};/**\n * @param {String} notyMessage - noty message\n */function renderMessage(notyMessage){// don't load jquery.noty.customized until it's actually needed\n// revisitme - pengw\n// HINT: need to define the path correctly later\nimport('./jquery.noty.customized').then(function(notyRenderer){if(notyMessage&&notyMessage.type!=='warning'){var removeMessagesSubs=eventBus.subscribe('removeMessages',function(){notyRenderer.close();// unregister\neventBus.unsubscribe(removeMessagesSubs);});}notyRenderer.setIconService(iconSvc);notyRenderer.init(notyMessage);});}/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */function getNotyMessage(message,msgType,buttonsArr,messageData){var isModal=modalType[msgType];var isTimeout=timeout[msgType];var closeConfig=['X','stayOnClick'];var sanitizedMessage=sanitizer.sanitizeHtmlValue(message);var parsedHtml=parseMessage(sanitizedMessage);var currentTheme=themeSvc.getTheme()?themeSvc.getTheme():'lightTheme';if(buttonsArr&&buttonsArr.length>0){isModal=true;isTimeout=false;closeConfig=[];}var notyMessage={layout:'bottom',theme:currentTheme,type:msgType,// Do not pass in escaped or safe html string in case of custom message.\ntext:messageData?sanitizedMessage:parsedHtml,dismissQueue:true,maxVisible:3,modal:isModal,closeWith:closeConfig,animation:{open:{height:'toggle'},close:{height:'toggle'},easing:'swing',speed:500},timeout:isTimeout,messageData:messageData};if(buttonsArr&&buttonsArr.length>0){notyMessage.buttons=buttonsArr;}return notyMessage;}/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */function parseMessage(message){var escapedStr='';var parsedHtml=null;if(message){escapedStr=message.replace(/(<br|<\\/br)\\s*[/]?>/gi,'\\n');parsedHtml=sanitizer.htmlEscapeAllowEntities(escapedStr,true,true);return parsedHtml;}return message;}/**\n * Get the modal type for the message.\n * messageDefination will get the higest priority\n * user can set globally using the setModelType which get second higest priority\n * OOTB modal type for message type are INFO:false , WARNING:true, ERROR:false\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */export let getModalType=function(messageDefn,messageType){if(messageDefn&&messageDefn.hasOwnProperty('isModal')){return messageDefn.isModal;}return modalType[messageType];};/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {integer} timeoutValue - timeout Value in ms.\n */export let setTimeout=function(messageType,timeoutValue){switch(messageType){case'info':timeout.information=timeoutValue;timeout.error=timeoutValue*10;break;case'error':timeout.error=timeoutValue;break;}};/**\n * Report an 'informational' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */export let showInfo=function(message,messageData,messageDefn,buttonsArr){var notyMessage=getNotyMessage(message,'information',buttonsArr,messageData);renderMessage(notyMessage);};/**\n * Report an 'alert' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n */export let showAlert=function(message,messageData){var sanitizedMessage=sanitizer.sanitizeHtmlValue(message);var parsedHtml=parseMessage(sanitizedMessage);var currentTheme=themeSvc.getTheme()?themeSvc.getTheme():'lightTheme';var notyMessage={layout:'bottom',theme:currentTheme,type:'alert',// Do not pass in escaped or safe html string in case of custom message.\ntext:messageData?sanitizedMessage:parsedHtml,dismissQueue:true,maxVisible:3,closeWith:['X','stayOnClick'],animation:{open:{height:'toggle'},close:{height:'toggle'},easing:'swing',speed:500},timeout:timeout.info,messageData:messageData};renderMessage(notyMessage);};/**\n * Report an 'warning' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {Object} buttonsArr - Array of buttons as user options\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n */export let showWarning=function(message,buttonsArr,messageData,messageDefn){var notyMessage=getNotyMessage(message,'warning',buttonsArr,messageData);renderMessage(notyMessage);};/**\n * Report an 'error' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */export let showError=function(message,messageData,messageDefn,buttonsArr){var notyMessage=getNotyMessage(message,'error',buttonsArr,messageData);renderMessage(notyMessage);};exports={getModalType,setTimeout,showInfo,showAlert,showWarning,showError};export default exports;","map":null,"metadata":{},"sourceType":"module"}
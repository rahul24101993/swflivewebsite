{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwSidenavService.js\";\n// Copyright (c) 2021 Siemens\nimport { includeComponent } from 'js/moduleLoader';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport AwIconButton from 'viewmodel/AwIconButtonViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport sidenavService from './AwSidenavHelperService';\nimport appCtx from 'js/appCtxService';\nimport narrowModeSvc from 'js/aw.narrowMode.service';\nimport wcagSvc from 'js/wcagService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar hasConfigChanged = false;\nlet _ongoing = {};\nlet sidenavConfig = {};\nlet ctxPath = 'awSidenavConfig.globalSidenavContext.';\nconst MOBILE = 'mobile';\nconst DESKTOP = 'desktop';\nconst TABLET = 'tablet';\nvar configProperties = {\n  large: 'LARGE',\n  default: 'DEFAULT',\n  full: 'FULL',\n  standard: 'STANDARD',\n  wide: 'WIDE',\n  extraWide: 'EXTRAWIDE',\n  doubleWide: 'DOUBLEWIDE',\n  float: 'FLOAT',\n  push: 'PUSH',\n  right_to_left: 'RIGHT_TO_LEFT',\n  left_to_right: 'LEFT_TO_RIGHT',\n  isPinUnpinEnabled: false,\n  isFloatPanel: function (id) {\n    return sidenavConfig[id].slide === this.float;\n  },\n  isPushPanel: function (id) {\n    return sidenavConfig[id].slide === this.push;\n  },\n  isDefaultHeightPanel: function (id) {\n    return sidenavConfig[id].height === this.default;\n  },\n  isFullHeightPanel: function (id) {\n    return sidenavConfig[id].height === this.full;\n  },\n  isLargeHeightPanel: function (id) {\n    return sidenavConfig[id].height === this.large;\n  },\n  isWideWidthPanel: function (id) {\n    return sidenavConfig[id].width === this.wide;\n  },\n  isStandardWidthPanel: function (id) {\n    return sidenavConfig[id].width === this.standard;\n  },\n  isHeightWidthEqual: function (id) {\n    return sidenavConfig[id].width === sidenavConfig[id].height;\n  },\n  getSidenavMode: function (id) {\n    let mode = DESKTOP;\n\n    if (sidenavConfig[id].width === this.standard) {\n      mode = MOBILE;\n    } else if (sidenavConfig[id].width === this.wide || sidenavConfig[id].width === this.extraWide || sidenavConfig[id].width === this.doubleWide) {\n      mode = TABLET;\n    }\n\n    return mode;\n  }\n};\nexport const copyRef = params => {\n  return params.get('sideNavInfo');\n};\n\nconst patchVMData = (vm, updatedData) => {\n  vm.dispatch({\n    path: 'data.config',\n    value: updatedData\n  });\n};\n\nlet setSidenavInitialData = (vm, prop) => {\n  let dataToUpdate = { ...vm.data.config\n  };\n\n  if (vm.data.config.id !== prop.id) {\n    dataToUpdate.id = prop.id;\n    sidenavConfig[prop.id] = {};\n  }\n\n  if (vm.data.config.isPinnable === null || vm.data.config.isPinnable === undefined) {\n    dataToUpdate.isPinnable = prop.config.isPinnable || false;\n  }\n\n  if (vm.data.config.isPinUnpinEnabled === null || vm.data.config.isPinUnpinEnabled === undefined) {\n    dataToUpdate.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n  }\n\n  if (vm.data.config.panelPinned === null || vm.data.config.panelPinned === undefined) {\n    dataToUpdate.panelPinned = prop.config.panelPinned || false;\n  }\n\n  if (!vm.data.config.slide) {\n    dataToUpdate.slide = prop.config.slide;\n  }\n\n  if (!_.isEqual(vm.data.config, dataToUpdate)) {\n    patchVMData(vm, dataToUpdate);\n  }\n};\n\nlet resetConfigStatus = () => {\n  hasConfigChanged = false;\n}; // called on unMount\n\n\nexport let clearSidenav = data => {\n  var sidenavCmdId = appCtx.getCtx('sidenavCommandId');\n\n  if (sidenavCmdId && sidenavCmdId === data.currentCommandId) {\n    appCtx.unRegisterCtx('sidenavCommandId');\n  }\n\n  resetConfigStatus();\n  appCtx.updatePartialCtx(ctxPath + data.id, null); // Once the page level component hosting the sidenav is destroyed , it ought to be\n  // SideNav's responsibility to also deregister the attributes from ctx it registered when the sidenav mounted\n\n  appCtx.unRegisterCtx('activeToolsAndInfoCommand');\n  appCtx.unRegisterCtx('activeNavigationCommand');\n};\nexport let togglePinState = data => {\n  if (data.isPinnable) {\n    let config = { ...data\n    };\n    sidenavService.togglePinState(config);\n    return config;\n  }\n};\nexport let togglePinUnpinPanelState = data => {\n  let config = { ...data\n  };\n  sidenavService.togglePinUnpinPanelState(config);\n  return config;\n};\n\nvar setDefaultConfig = function (prop) {\n  const {\n    viewModel\n  } = prop;\n  setSidenavInitialData(viewModel, prop);\n\n  if (hasConfigChanged) {\n    return;\n  }\n\n  let updatedConfig = {}; // default placeholder height and width values\n\n  updatedConfig.width = prop.config.width || configProperties.standard;\n  updatedConfig.height = prop.config.height || configProperties.full;\n  updatedConfig.isPinnable = prop.config.isPinnable || false;\n  updatedConfig.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n  updatedConfig.panelPinned = prop.config.panelPinned || false;\n  updatedConfig.direction = prop.config.direction || configProperties.left_to_right;\n  updatedConfig.slide = prop.config.slide;\n  updatedConfig.animation = prop.config.animation !== false;\n\n  if (configProperties.isDefaultHeightPanel(prop.id)) {\n    updatedConfig.height = updatedConfig.width;\n  } // push panels will always be full height\n\n\n  if (configProperties.isPushPanel(prop.id)) {\n    updatedConfig.height = configProperties.full;\n  }\n\n  updatedConfig.isAnimationDisabled = !updatedConfig.animation;\n  updatedConfig.isLeftToRight = updatedConfig.direction === configProperties.left_to_right;\n\n  if (!_.isEqual(updatedConfig, sidenavConfig[prop.id])) {\n    sidenavConfig[prop.id] = updatedConfig;\n  }\n};\n\nexport let createSideNavInfo = sideNavInfo => {\n  if (sideNavInfo) {\n    sideNavInfo.current = {\n      sideNavFocused: false\n    };\n  }\n\n  return sideNavInfo;\n};\nexport let sideNavOpenCloseCallback = async function (eventData, id, data, sideNavInfo) {\n  let config = { ...data\n  }; //create object to store sidenav info (status)\n\n  if (!data.sideNavInfo) {\n    data.sideNavInfo = createSideNavInfo(sideNavInfo);\n  } // All consumers should be using id and eventData should be passed through\n\n\n  if (!id || !eventData) {\n    logger.error('id attribute and eventData are required');\n    return config;\n  }\n\n  if (!_ongoing[id]) {\n    if (id === eventData.id) {\n      if (eventData.config) {\n        sidenavConfig[id].width = eventData.config.width || sidenavConfig[id].width || configProperties.standard;\n        sidenavConfig[id].height = eventData.config.height || sidenavConfig[id].height || configProperties.full;\n        sidenavConfig[id].hasSlideChanged = Boolean(eventData.config.slide);\n\n        if (eventData.config.slide) {\n          if (eventData.config.slide !== sidenavConfig[id].slide) {\n            sidenavConfig[id].slide = eventData.config.slide;\n          }\n        } else {\n          sidenavConfig[id].slide = configProperties.float;\n        }\n\n        sidenavConfig[id].isPinnable = eventData.config.isPinnable || sidenavConfig[id].isPinnable || false;\n        sidenavConfig[id].isPinUnpinEnabled = eventData.config.isPinUnpinEnabled || sidenavConfig[id].isPinUnpinEnabled || false;\n        sidenavConfig[id].panelPinned = eventData.config.panelPinned || sidenavConfig[id].panelPinned || false;\n\n        if (configProperties.isDefaultHeightPanel(id)) {\n          sidenavConfig[id].height = sidenavConfig[id].width;\n        }\n\n        if (configProperties.isPushPanel(id)) {\n          sidenavConfig[id].height = configProperties.full;\n        }\n\n        hasConfigChanged = true;\n      } else if (hasConfigChanged) {\n        hasConfigChanged = false;\n      }\n\n      sidenavService.setLocationCtx(id); //revisitMe: Jignesh Put back the other code for autoclose of sidenav\n\n      _ongoing[eventData.id] = sidenavService.createSidenav(config, eventData).then(vmProps => {\n        //reCalcPanelPosition();\n        delete _ongoing[eventData.id];\n        return vmProps;\n      });\n      return _ongoing[eventData.id];\n    } // pass keepOthersOpen to keep the other sidenavs open when the current sidenav is opened\n    else if (!eventData.keepOthersOpen) {\n      // Need to close all the other open panels not having this id\n      return sidenavService.closeSidenav(config, eventData).then(() => {\n        return config;\n      });\n    }\n  } //revisitMe: Jignesh: Returna promise here for command panel service\n\n\n  return config;\n};\n/**\n * render function for AwSidenav\n * @param {*} param context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nexport const awSidenavRenderFunction = prop => {\n  setDefaultConfig(prop);\n  const {\n    config,\n    id\n  } = prop;\n\n  const getSidenavContainerClasses = () => {\n    let classes = 'sw-column aw-sidenav-layoutContainer';\n\n    if (sidenavConfig[id].width) {\n      classes += ' aw-sidenav-' + sidenavConfig[id].width.toLowerCase();\n    }\n\n    if (sidenavConfig[id].height) {\n      classes += ' aw-sidenav-vertical-' + sidenavConfig[id].height.toLowerCase();\n    }\n\n    const addSlideClasses = slide => {\n      let sidenavClasses = '';\n      sidenavClasses += slide ? ' aw-sidenav-' + slide.toLowerCase() : '';\n      sidenavClasses += slide === configProperties.float && !sidenavConfig[id].isLeftToRight ? ' aw-sidenav-float-right' : '';\n      sidenavClasses += slide === configProperties.float && sidenavConfig[id].isLeftToRight ? ' aw-sidenav-float-left' : '';\n      return sidenavClasses;\n    };\n\n    if (sidenavConfig[id].hasSlideChanged) {\n      classes += addSlideClasses(prop.viewModel.data.config.slide);\n    } else {\n      classes += addSlideClasses(prop.config.slide);\n    }\n\n    classes += prop.viewModel.data.config.sidenavOpened ? ' aw-sidenav-expand' : '';\n    classes += sidenavConfig[id].isAnimationDisabled ? ' aw-sidenav-transition' : '';\n    classes += config.direction === 'RIGHT_TO_LEFT' ? ' aw-sidenav-leftBackground' : ' aw-sidenav-rightBackground';\n    classes += sidenavConfig[id].isPinnable ? ' autoclose afx-accent-background' : '';\n    classes += !prop.viewModel.data.config.sidenavOpened ? ' invisible' : '';\n    return classes;\n  };\n\n  const getPinnedClass = () => {\n    let justifyClass = 'sw-row justify-right ';\n    return prop.viewModel.data.config.pinned ? justifyClass + 'pinned' : justifyClass + 'unpinned';\n  };\n\n  const getAriaLabel = (id, i18n) => {\n    let label = i18n.TASK_PANEL;\n\n    if (id === 'aw_navigation') {\n      label = i18n.COMMAND_PANEL;\n    } else if (id === 'globalNavigationSideNav') {\n      label = i18n.GLOBALNAV_PANEL;\n    }\n\n    return label;\n  };\n\n  const handleClick = e => {\n    setTimeout(() => {\n      let sidenavContainer = prop.elementRefList.get('sidenav').current;\n      var autoCloseRect = sidenavContainer.getBoundingClientRect(); //Handle the case where the click is triggered right after resize\n\n      var mouseXCord = e.pageX || e.touches && e.touches[0].pageX;\n\n      if (sidenavContainer.offsetWidth === mouseXCord - sidenavContainer.offsetLeft) {\n        return;\n      } // If the panel is already open and it is not pinned and user clicks outside of panel i.e. not on panel itself, then close the panel\n\n\n      if (mouseXCord < autoCloseRect.right && mouseXCord > autoCloseRect.left) {\n        // inside click\n        return;\n      } // outside click\n\n\n      if (!prop.viewModel.data.config.pinned) {\n        //revisitMe: Jignesh - Need to fix the same element click issue that opened the sidenav\n        //let shallRemainOpen = $scope.doesSideNavRemainOpen( eventData );\n        //if( !shallRemainOpen ) {\n        //appCtx.unRegisterCtx( 'sidenavCommandId' );\n        let dataToUpdate = { ...prop.viewModel.data.config\n        };\n        dataToUpdate.sidenavOpened = false;\n        dataToUpdate.view = null;\n        patchVMData(prop.viewModel, dataToUpdate);\n        emptyHandler();\n        appCtx.updatePartialCtx(ctxPath + prop.viewModel.data.config.id, {\n          open: false,\n          pinned: prop.viewModel.data.config.pinned,\n          slide: prop.viewModel.data.config.slide\n        });\n      }\n    }, 200);\n  };\n  /* Resizable drag handle starts here */\n\n\n  let handleMouseUp = mouseEvent => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('touchmove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n    document.removeEventListener('touchend', handleMouseUp);\n\n    if (mouseEvent) {\n      // Publish an event that the sidenav drag has ended\n      eventBus.publish('awsidenav.resizeEnded');\n      let dataToUpdate = { ...prop.viewModel.data.config\n      };\n      dataToUpdate.mode = TABLET;\n      let sidenavWidth = prop.elementRefList.get('sidenav').current.offsetWidth;\n\n      if (sidenavWidth < 400) {\n        dataToUpdate.mode = MOBILE;\n      } else if (sidenavWidth > 800) {\n        dataToUpdate.mode = DESKTOP;\n      }\n\n      patchVMData(prop.viewModel, dataToUpdate);\n    }\n  };\n\n  let handleMouseMove = e => {\n    let sidenavContainer = prop.elementRefList.get('sidenav').current;\n    var pageX = e.pageX || e.touches && e.touches[0].pageX; //Update the sidenav width\n\n    var newWidth = pageX - sidenavContainer.offsetLeft;\n\n    if (config.direction !== configProperties.left_to_right) {\n      newWidth = sidenavContainer.offsetWidth + (sidenavContainer.offsetLeft - pageX);\n    }\n\n    if (newWidth + sidenavContainer.offsetLeft > window.innerWidth) {\n      newWidth = window.innerWidth - sidenavContainer.offsetLeft;\n    }\n\n    if (newWidth > 0) {\n      sidenavContainer.style.width = newWidth + 'px';\n    }\n  };\n\n  let handleMousedown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('touchmove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    document.addEventListener('touchend', handleMouseUp);\n  };\n\n  const emptyHandler = () => {\n    let _removeHanlder = prop.elementRefList.get('eventListnerHandler').current || [];\n\n    if (_removeHanlder.length > 0) {\n      _removeHanlder.forEach(item => item());\n\n      prop.elementRefList.get('eventListnerHandler').current = null;\n    }\n  };\n\n  emptyHandler();\n  /* Resizable drag handle ends here */\n\n  if (config.isPinnable && prop.viewModel.data.config.sidenavOpened) {\n    //Lets check for the ctx objects again\n    //This is required because the sidenav is updating ctx objects in the middle of it work,\n    //which triggers this render cycle again\n    let ctxObj = appCtx.getCtx('awSidenavConfig.globalSidenavContext.' + id);\n\n    if (ctxObj && ctxObj.open && !ctxObj.pinned && appCtx.getCtx('sidenavCommandId')) {\n      let _removeHanlder = [];\n      document.addEventListener('click', handleClick, {\n        capture: true\n      });\n      document.addEventListener('touchstart', handleClick, {\n        capture: true\n      });\n\n      _removeHanlder.push(() => document.removeEventListener('click', handleClick, {\n        capture: true\n      }));\n\n      _removeHanlder.push(() => document.removeEventListener('touchstart', handleClick, {\n        capture: true\n      }));\n\n      prop.elementRefList.get('eventListnerHandler').current = _removeHanlder;\n    }\n  } // The isNarrowMode check is required for narrow mode devices, where the panel covers the whole screen\n  // We cannot check isMobileOS as it covers iPad devices also\n\n\n  if (!narrowModeSvc.isNarrowMode() && sidenavConfig[id].direction !== configProperties.left_to_right && prop.viewModel.data.config.sidenavOpened) {\n    let sidenavContainer = prop.elementRefList.get('sidenav').current;\n\n    if (sidenavConfig[id].slide === 'FLOAT') {\n      sidenavContainer.style.right = window.innerWidth - (sidenavContainer.parentElement.offsetWidth + sidenavContainer.parentElement.getClientRects()[0].x) + 'px';\n    } else {\n      sidenavContainer.style.right = '';\n    }\n  }\n\n  let reCalcPanelPosition = _.debounce(function () {\n    if (prop.viewModel.data && prop.viewModel.data.config && prop.viewModel.data.config.sidenavOpened && (sidenavConfig[id].slide === 'FLOAT' || prop.viewModel.data.config.isPinnable)) {\n      let sidenavContainer = prop.elementRefList.get('sidenav').current; // TODO: sidenav isn't always cleaned up?\n\n      if (sidenavContainer) {\n        if (configProperties.isFullHeightPanel(id)) {\n          sidenavContainer.style.height = sidenavContainer.parentElement.offsetHeight + 'px';\n        } else {\n          sidenavContainer.style.height = '';\n        } //use case when sidenav is streched to max width and browser window gets resized.\n\n\n        let currentSidenavWidth = parseInt(sidenavContainer.style.width.substring(0, sidenavContainer.style.width.length - 2));\n\n        if (currentSidenavWidth + sidenavContainer.offsetLeft > window.innerWidth) {\n          sidenavContainer.style.width = window.innerWidth - sidenavContainer.offsetLeft + 'px';\n        }\n      }\n    }\n  }, 500, {\n    maxWait: 10000,\n    trailing: true,\n    leading: false\n  });\n\n  reCalcPanelPosition(); // The full height panel needs to be resized on window resize\n\n  eventBus.subscribe('aw.windowResize', function () {\n    reCalcPanelPosition();\n  });\n  let context = {\n    subPanelContext: { ...prop.viewModel.subPanelContext,\n      ...{\n        sidenavMode: prop.viewModel.data.config.mode || configProperties.getSidenavMode(id)\n      },\n      ...{\n        isPinUnpinEnabled: prop.viewModel.data.config.isPinUnpinEnabled\n      },\n      ...{\n        panelPinned: prop.viewModel.data.config.panelPinned\n      }\n    }\n  };\n\n  let getSidenavFocusStatus = sideNavInfoRef => {\n    if (sideNavInfoRef && sideNavInfoRef.current) {\n      return sideNavInfoRef.current.sideNavFocused;\n    }\n\n    return undefined;\n  };\n\n  let refCallBack = el => {\n    let sideNavInfoRef = prop.viewModel.data.sideNavInfo;\n    let isSideNavFocused = getSidenavFocusStatus(sideNavInfoRef);\n\n    if (el && prop.viewModel.data.config.sidenavOpened && isSideNavFocused === false) {\n      sideNavInfoRef.current.sideNavFocused = true;\n      let sidenavContainer = prop.elementRefList.get('sidenav').current;\n      wcagSvc.focusFirstDescendantWithDelay(sidenavContainer);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    \"data-locator\": \"aw-sidenav\",\n    \"aria-live\": \"polite\",\n    \"aria-label\": getAriaLabel(id, prop.i18n),\n    id: id,\n    className: getSidenavContainerClasses(),\n    ref: prop.elementRefList.get('sidenav'),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: getPinnedClass(),\n      children: sidenavConfig[id].isPinnable && prop.viewModel.data.config.sidenavOpened ? /*#__PURE__*/_jsxDEV(AwIconButton, {\n        command: prop.fields.pinButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this), prop.viewModel.data.config.sidenavOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-layout-declarativePanelRoot aw-layout-panel\",\n      children: /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: prop.viewModel.data.config.view,\n        ...context,\n        domRef: el => refCallBack(el)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 58\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-sidenav-resizer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resize-handle sw-aria-border\",\n        role: \"button\",\n        \"aria-label\": prop.i18n.resizeCommandTitle,\n        tabIndex: \"0\",\n        onMouseDown: handleMousedown,\n        children: /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: \"uiPrimeNavGripper16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["includeComponent","_","logger","eventBus","AwIconButton","AwIcon","AwInclude","sidenavService","appCtx","narrowModeSvc","wcagSvc","hasConfigChanged","_ongoing","sidenavConfig","ctxPath","MOBILE","DESKTOP","TABLET","configProperties","large","default","full","standard","wide","extraWide","doubleWide","float","push","right_to_left","left_to_right","isPinUnpinEnabled","isFloatPanel","id","slide","isPushPanel","isDefaultHeightPanel","height","isFullHeightPanel","isLargeHeightPanel","isWideWidthPanel","width","isStandardWidthPanel","isHeightWidthEqual","getSidenavMode","mode","copyRef","params","get","patchVMData","vm","updatedData","dispatch","path","value","setSidenavInitialData","prop","dataToUpdate","data","config","isPinnable","undefined","panelPinned","isEqual","resetConfigStatus","clearSidenav","sidenavCmdId","getCtx","currentCommandId","unRegisterCtx","updatePartialCtx","togglePinState","togglePinUnpinPanelState","setDefaultConfig","viewModel","updatedConfig","direction","animation","isAnimationDisabled","isLeftToRight","createSideNavInfo","sideNavInfo","current","sideNavFocused","sideNavOpenCloseCallback","eventData","error","hasSlideChanged","Boolean","setLocationCtx","createSidenav","then","vmProps","keepOthersOpen","closeSidenav","awSidenavRenderFunction","getSidenavContainerClasses","classes","toLowerCase","addSlideClasses","sidenavClasses","sidenavOpened","getPinnedClass","justifyClass","pinned","getAriaLabel","i18n","label","TASK_PANEL","COMMAND_PANEL","GLOBALNAV_PANEL","handleClick","e","setTimeout","sidenavContainer","elementRefList","autoCloseRect","getBoundingClientRect","mouseXCord","pageX","touches","offsetWidth","offsetLeft","right","left","view","emptyHandler","open","handleMouseUp","mouseEvent","document","removeEventListener","handleMouseMove","publish","sidenavWidth","newWidth","window","innerWidth","style","handleMousedown","stopPropagation","preventDefault","addEventListener","_removeHanlder","length","forEach","item","ctxObj","capture","isNarrowMode","parentElement","getClientRects","x","reCalcPanelPosition","debounce","offsetHeight","currentSidenavWidth","parseInt","substring","maxWait","trailing","leading","subscribe","context","subPanelContext","sidenavMode","getSidenavFocusStatus","sideNavInfoRef","refCallBack","el","isSideNavFocused","focusFirstDescendantWithDelay","fields","pinButton","resizeCommandTitle"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwSidenavService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\nimport { includeComponent } from 'js/moduleLoader';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport AwIconButton from 'viewmodel/AwIconButtonViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport sidenavService from './AwSidenavHelperService';\nimport appCtx from 'js/appCtxService';\nimport narrowModeSvc from 'js/aw.narrowMode.service';\nimport wcagSvc from 'js/wcagService';\n\nvar hasConfigChanged = false;\nlet _ongoing = {};\nlet sidenavConfig = {};\nlet ctxPath = 'awSidenavConfig.globalSidenavContext.';\n\nconst MOBILE = 'mobile';\nconst DESKTOP = 'desktop';\nconst TABLET = 'tablet';\n\nvar configProperties = {\n    large: 'LARGE',\n    default: 'DEFAULT',\n    full: 'FULL',\n    standard: 'STANDARD',\n    wide: 'WIDE',\n    extraWide: 'EXTRAWIDE',\n    doubleWide: 'DOUBLEWIDE',\n    float: 'FLOAT',\n    push: 'PUSH',\n    right_to_left: 'RIGHT_TO_LEFT',\n    left_to_right: 'LEFT_TO_RIGHT',\n    isPinUnpinEnabled: false,\n    isFloatPanel: function( id ) {\n        return sidenavConfig[ id ].slide === this.float;\n    },\n    isPushPanel: function( id ) {\n        return sidenavConfig[ id ].slide === this.push;\n    },\n    isDefaultHeightPanel: function( id ) {\n        return sidenavConfig[ id ].height === this.default;\n    },\n    isFullHeightPanel: function( id ) {\n        return sidenavConfig[ id ].height === this.full;\n    },\n    isLargeHeightPanel: function( id ) {\n        return sidenavConfig[ id ].height === this.large;\n    },\n    isWideWidthPanel: function( id ) {\n        return sidenavConfig[ id ].width === this.wide;\n    },\n    isStandardWidthPanel: function( id ) {\n        return sidenavConfig[ id ].width === this.standard;\n    },\n    isHeightWidthEqual: function( id ) {\n        return sidenavConfig[ id ].width === sidenavConfig[ id ].height;\n    },\n    getSidenavMode: function( id ) {\n        let mode = DESKTOP;\n        if( sidenavConfig[ id ].width === this.standard ) {\n            mode = MOBILE;\n        } else if( sidenavConfig[ id ].width === this.wide || sidenavConfig[ id ].width === this.extraWide || sidenavConfig[ id ].width === this.doubleWide ) {\n            mode = TABLET;\n        }\n\n        return mode;\n    }\n};\nexport const copyRef = ( params ) => {\n    return params.get( 'sideNavInfo' );\n};\nconst patchVMData = ( vm, updatedData ) => {\n    vm.dispatch( {\n        path: 'data.config',\n        value: updatedData\n    } );\n};\n\nlet setSidenavInitialData = ( vm, prop ) => {\n    let dataToUpdate = { ...vm.data.config };\n\n    if( vm.data.config.id !== prop.id ) {\n        dataToUpdate.id = prop.id;\n        sidenavConfig[ prop.id ] = {};\n    }\n\n    if( vm.data.config.isPinnable === null || vm.data.config.isPinnable === undefined ) {\n        dataToUpdate.isPinnable = prop.config.isPinnable || false;\n    }\n\n    if( vm.data.config.isPinUnpinEnabled === null || vm.data.config.isPinUnpinEnabled === undefined ) {\n        dataToUpdate.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n    }\n\n    if( vm.data.config.panelPinned === null || vm.data.config.panelPinned === undefined ) {\n        dataToUpdate.panelPinned = prop.config.panelPinned || false;\n    }\n\n    if( !vm.data.config.slide ) {\n        dataToUpdate.slide = prop.config.slide;\n    }\n\n    if( !_.isEqual( vm.data.config, dataToUpdate ) ) {\n        patchVMData( vm, dataToUpdate );\n    }\n};\n\nlet resetConfigStatus = () => {\n    hasConfigChanged = false;\n};\n\n// called on unMount\nexport let clearSidenav = ( data ) => {\n    var sidenavCmdId = appCtx.getCtx( 'sidenavCommandId' );\n    if( sidenavCmdId && sidenavCmdId === data.currentCommandId ) {\n        appCtx.unRegisterCtx( 'sidenavCommandId' );\n    }\n    resetConfigStatus();\n    appCtx.updatePartialCtx( ctxPath + data.id, null );\n    // Once the page level component hosting the sidenav is destroyed , it ought to be\n    // SideNav's responsibility to also deregister the attributes from ctx it registered when the sidenav mounted\n    appCtx.unRegisterCtx( 'activeToolsAndInfoCommand' );\n    appCtx.unRegisterCtx( 'activeNavigationCommand' );\n};\n\nexport let togglePinState = ( data ) => {\n    if( data.isPinnable ) {\n        let config = { ...data };\n        sidenavService.togglePinState( config );\n        return config;\n    }\n};\n\nexport let togglePinUnpinPanelState = ( data ) => {\n    let config = { ...data };\n    sidenavService.togglePinUnpinPanelState( config );\n    return config;\n};\n\nvar setDefaultConfig = function( prop ) {\n    const { viewModel } = prop;\n    setSidenavInitialData( viewModel, prop );\n\n    if( hasConfigChanged ) {\n        return;\n    }\n\n    let updatedConfig = {};\n\n    // default placeholder height and width values\n    updatedConfig.width = prop.config.width || configProperties.standard;\n    updatedConfig.height = prop.config.height || configProperties.full;\n    updatedConfig.isPinnable = prop.config.isPinnable || false;\n    updatedConfig.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n    updatedConfig.panelPinned = prop.config.panelPinned || false;\n    updatedConfig.direction = prop.config.direction || configProperties.left_to_right;\n    updatedConfig.slide = prop.config.slide;\n    updatedConfig.animation = prop.config.animation !== false;\n\n    if( configProperties.isDefaultHeightPanel( prop.id ) ) {\n        updatedConfig.height = updatedConfig.width;\n    }\n    // push panels will always be full height\n    if( configProperties.isPushPanel( prop.id ) ) {\n        updatedConfig.height = configProperties.full;\n    }\n    updatedConfig.isAnimationDisabled = !updatedConfig.animation;\n    updatedConfig.isLeftToRight = updatedConfig.direction === configProperties.left_to_right;\n\n    if( !_.isEqual( updatedConfig, sidenavConfig[ prop.id ] ) ) {\n        sidenavConfig[ prop.id ] = updatedConfig;\n    }\n};\nexport let createSideNavInfo = ( sideNavInfo ) => {\n    if( sideNavInfo ) {\n        sideNavInfo.current = {\n            sideNavFocused: false\n        };\n    }\n    return sideNavInfo;\n};\nexport let sideNavOpenCloseCallback = async function( eventData, id, data, sideNavInfo ) {\n    let config = { ...data };\n    //create object to store sidenav info (status)\n    if( !data.sideNavInfo ) {\n        data.sideNavInfo = createSideNavInfo( sideNavInfo );\n    }\n    // All consumers should be using id and eventData should be passed through\n    if( !id || !eventData ) {\n        logger.error( 'id attribute and eventData are required' );\n        return config;\n    }\n    if( !_ongoing[ id ] ) {\n        if( id === eventData.id ) {\n            if( eventData.config ) {\n                sidenavConfig[ id ].width = eventData.config.width || sidenavConfig[ id ].width || configProperties.standard;\n                sidenavConfig[ id ].height = eventData.config.height || sidenavConfig[ id ].height || configProperties.full;\n                sidenavConfig[ id ].hasSlideChanged = Boolean( eventData.config.slide );\n                if( eventData.config.slide ) {\n                    if( eventData.config.slide !== sidenavConfig[ id ].slide ) {\n                        sidenavConfig[ id ].slide = eventData.config.slide;\n                    }\n                } else {\n                    sidenavConfig[ id ].slide = configProperties.float;\n                }\n                sidenavConfig[ id ].isPinnable = eventData.config.isPinnable || sidenavConfig[ id ].isPinnable || false;\n                sidenavConfig[ id ].isPinUnpinEnabled = eventData.config.isPinUnpinEnabled || sidenavConfig[ id ].isPinUnpinEnabled || false;\n                sidenavConfig[ id ].panelPinned = eventData.config.panelPinned || sidenavConfig[ id ].panelPinned || false;\n                if( configProperties.isDefaultHeightPanel( id ) ) {\n                    sidenavConfig[ id ].height = sidenavConfig[ id ].width;\n                }\n                if( configProperties.isPushPanel( id ) ) {\n                    sidenavConfig[ id ].height = configProperties.full;\n                }\n                hasConfigChanged = true;\n            } else if( hasConfigChanged ) {\n                hasConfigChanged = false;\n            }\n\n            sidenavService.setLocationCtx( id );\n            //revisitMe: Jignesh Put back the other code for autoclose of sidenav\n            _ongoing[ eventData.id ] = sidenavService.createSidenav( config, eventData ).then( ( vmProps ) => {\n                //reCalcPanelPosition();\n                delete _ongoing[ eventData.id ];\n                return vmProps;\n            } );\n\n            return _ongoing[ eventData.id ];\n        } // pass keepOthersOpen to keep the other sidenavs open when the current sidenav is opened\n        else if( !eventData.keepOthersOpen ) {\n            // Need to close all the other open panels not having this id\n            return sidenavService.closeSidenav( config, eventData ).then( () => {\n                return config;\n            } );\n        }\n    }\n\n    //revisitMe: Jignesh: Returna promise here for command panel service\n    return config;\n};\n\n/**\n * render function for AwSidenav\n * @param {*} param context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awSidenavRenderFunction = ( prop ) => {\n    setDefaultConfig( prop );\n    const { config, id } = prop;\n\n    const getSidenavContainerClasses = () => {\n        let classes = 'sw-column aw-sidenav-layoutContainer';\n\n        if( sidenavConfig[ id ].width ) {\n            classes += ' aw-sidenav-' + sidenavConfig[ id ].width.toLowerCase();\n        }\n\n        if( sidenavConfig[ id ].height ) {\n            classes += ' aw-sidenav-vertical-' + sidenavConfig[ id ].height.toLowerCase();\n        }\n\n        const addSlideClasses = ( slide ) => {\n            let sidenavClasses = '';\n            sidenavClasses += slide ? ' aw-sidenav-' + slide.toLowerCase() : '';\n            sidenavClasses += slide === configProperties.float && !sidenavConfig[ id ].isLeftToRight ? ' aw-sidenav-float-right' : '';\n            sidenavClasses += slide === configProperties.float && sidenavConfig[ id ].isLeftToRight ? ' aw-sidenav-float-left' : '';\n\n            return sidenavClasses;\n        };\n\n        if( sidenavConfig[ id ].hasSlideChanged ) {\n            classes += addSlideClasses( prop.viewModel.data.config.slide );\n        } else {\n            classes += addSlideClasses( prop.config.slide );\n        }\n\n        classes += prop.viewModel.data.config.sidenavOpened ? ' aw-sidenav-expand' : '';\n        classes += sidenavConfig[ id ].isAnimationDisabled ? ' aw-sidenav-transition' : '';\n        classes += config.direction === 'RIGHT_TO_LEFT' ? ' aw-sidenav-leftBackground' : ' aw-sidenav-rightBackground';\n        classes += sidenavConfig[ id ].isPinnable ? ' autoclose afx-accent-background' : '';\n        classes += !prop.viewModel.data.config.sidenavOpened ? ' invisible' : '';\n\n        return classes;\n    };\n\n    const getPinnedClass = () => {\n        let justifyClass = 'sw-row justify-right ';\n        return prop.viewModel.data.config.pinned ? justifyClass + 'pinned' : justifyClass + 'unpinned';\n    };\n    const getAriaLabel = ( id, i18n ) => {\n        let label = i18n.TASK_PANEL;\n        if( id === 'aw_navigation' ) {\n            label = i18n.COMMAND_PANEL;\n        } else if( id === 'globalNavigationSideNav' ) {\n            label = i18n.GLOBALNAV_PANEL;\n        }\n        return label;\n    };\n\n    const handleClick = e => {\n        setTimeout( () => {\n            let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n            var autoCloseRect = sidenavContainer.getBoundingClientRect();\n\n            //Handle the case where the click is triggered right after resize\n            var mouseXCord = e.pageX || e.touches && e.touches[ 0 ].pageX;\n            if( sidenavContainer.offsetWidth === mouseXCord - sidenavContainer.offsetLeft ) {\n                return;\n            }\n\n            // If the panel is already open and it is not pinned and user clicks outside of panel i.e. not on panel itself, then close the panel\n            if( mouseXCord < autoCloseRect.right && mouseXCord > autoCloseRect.left ) {\n                // inside click\n                return;\n            }\n            // outside click\n            if( !prop.viewModel.data.config.pinned ) {\n                //revisitMe: Jignesh - Need to fix the same element click issue that opened the sidenav\n                //let shallRemainOpen = $scope.doesSideNavRemainOpen( eventData );\n                //if( !shallRemainOpen ) {\n                //appCtx.unRegisterCtx( 'sidenavCommandId' );\n\n                let dataToUpdate = { ...prop.viewModel.data.config };\n                dataToUpdate.sidenavOpened = false;\n                dataToUpdate.view = null;\n                patchVMData( prop.viewModel, dataToUpdate );\n\n                emptyHandler();\n                appCtx.updatePartialCtx( ctxPath + prop.viewModel.data.config.id, {\n                    open: false,\n                    pinned: prop.viewModel.data.config.pinned,\n                    slide: prop.viewModel.data.config.slide\n                } );\n            }\n        }, 200 );\n    };\n\n    /* Resizable drag handle starts here */\n    let handleMouseUp = ( mouseEvent ) => {\n        document.removeEventListener( 'mousemove', handleMouseMove );\n        document.removeEventListener( 'touchmove', handleMouseMove );\n\n        document.removeEventListener( 'mouseup', handleMouseUp );\n        document.removeEventListener( 'touchend', handleMouseUp );\n        if( mouseEvent ) {\n            // Publish an event that the sidenav drag has ended\n            eventBus.publish( 'awsidenav.resizeEnded' );\n\n            let dataToUpdate = { ...prop.viewModel.data.config };\n            dataToUpdate.mode = TABLET;\n            let sidenavWidth = prop.elementRefList.get( 'sidenav' ).current.offsetWidth;\n\n            if( sidenavWidth < 400 ) {\n                dataToUpdate.mode = MOBILE;\n            } else if( sidenavWidth > 800 ) {\n                dataToUpdate.mode = DESKTOP;\n            }\n            patchVMData( prop.viewModel, dataToUpdate );\n        }\n    };\n\n    let handleMouseMove = ( e ) => {\n        let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n        var pageX = e.pageX || e.touches && e.touches[ 0 ].pageX;\n        //Update the sidenav width\n        var newWidth = pageX - sidenavContainer.offsetLeft;\n\n        if( config.direction !== configProperties.left_to_right ) {\n            newWidth = sidenavContainer.offsetWidth + ( sidenavContainer.offsetLeft - pageX );\n        }\n        if( newWidth + sidenavContainer.offsetLeft > window.innerWidth ) {\n            newWidth = window.innerWidth - sidenavContainer.offsetLeft;\n        }\n        if( newWidth > 0 ) {\n            sidenavContainer.style.width = newWidth + 'px';\n        }\n    };\n\n    let handleMousedown = ( e ) => {\n        e.stopPropagation();\n        e.preventDefault();\n        document.addEventListener( 'mousemove', handleMouseMove );\n        document.addEventListener( 'touchmove', handleMouseMove );\n        document.addEventListener( 'mouseup', handleMouseUp );\n        document.addEventListener( 'touchend', handleMouseUp );\n    };\n\n    const emptyHandler = () => {\n        let _removeHanlder = prop.elementRefList.get( 'eventListnerHandler' ).current || [];\n        if( _removeHanlder.length > 0 ) {\n            _removeHanlder.forEach( ( item ) => item() );\n            prop.elementRefList.get( 'eventListnerHandler' ).current = null;\n        }\n    };\n\n    emptyHandler();\n\n    /* Resizable drag handle ends here */\n    if( config.isPinnable && prop.viewModel.data.config.sidenavOpened ) {\n        //Lets check for the ctx objects again\n        //This is required because the sidenav is updating ctx objects in the middle of it work,\n        //which triggers this render cycle again\n        let ctxObj = appCtx.getCtx( 'awSidenavConfig.globalSidenavContext.' + id );\n        if( ctxObj && ctxObj.open && !ctxObj.pinned && appCtx.getCtx( 'sidenavCommandId' ) ) {\n            let _removeHanlder = [];\n            document.addEventListener( 'click', handleClick, { capture: true } );\n            document.addEventListener( 'touchstart', handleClick, { capture: true } );\n            _removeHanlder.push( () => document.removeEventListener( 'click', handleClick, { capture: true } ) );\n            _removeHanlder.push( () => document.removeEventListener( 'touchstart', handleClick, { capture: true } ) );\n            prop.elementRefList.get( 'eventListnerHandler' ).current = _removeHanlder;\n        }\n    }\n\n    // The isNarrowMode check is required for narrow mode devices, where the panel covers the whole screen\n    // We cannot check isMobileOS as it covers iPad devices also\n    if( !narrowModeSvc.isNarrowMode() && sidenavConfig[ id ].direction !== configProperties.left_to_right && prop.viewModel.data.config.sidenavOpened ) {\n        let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n        if( sidenavConfig[ id ].slide === 'FLOAT' ) {\n            sidenavContainer.style.right = window.innerWidth - ( sidenavContainer.parentElement.offsetWidth + sidenavContainer.parentElement.getClientRects()[ 0 ].x ) + 'px';\n        } else {\n            sidenavContainer.style.right = '';\n        }\n    }\n\n    let reCalcPanelPosition = _.debounce( function() {\n        if( prop.viewModel.data && prop.viewModel.data.config && prop.viewModel.data.config.sidenavOpened && ( sidenavConfig[ id ].slide === 'FLOAT' || prop.viewModel.data.config.isPinnable ) ) {\n            let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n\n            // TODO: sidenav isn't always cleaned up?\n            if( sidenavContainer ) {\n                if( configProperties.isFullHeightPanel( id ) ) {\n                    sidenavContainer.style.height = sidenavContainer.parentElement.offsetHeight + 'px';\n                } else {\n                    sidenavContainer.style.height = '';\n                }\n                //use case when sidenav is streched to max width and browser window gets resized.\n                let currentSidenavWidth = parseInt( sidenavContainer.style.width.substring( 0, sidenavContainer.style.width.length - 2 ) );\n                if( currentSidenavWidth + sidenavContainer.offsetLeft > window.innerWidth ) {\n                    sidenavContainer.style.width = window.innerWidth - sidenavContainer.offsetLeft + 'px';\n                }\n            }\n        }\n    }, 500, {\n        maxWait: 10000,\n        trailing: true,\n        leading: false\n    } );\n\n    reCalcPanelPosition();\n\n    // The full height panel needs to be resized on window resize\n    eventBus.subscribe( 'aw.windowResize', function() {\n        reCalcPanelPosition();\n    } );\n\n    let context = {\n        subPanelContext: {\n            ...prop.viewModel.subPanelContext,\n            ...{ sidenavMode: prop.viewModel.data.config.mode || configProperties.getSidenavMode( id ) },\n            ...{ isPinUnpinEnabled: prop.viewModel.data.config.isPinUnpinEnabled },\n            ...{ panelPinned: prop.viewModel.data.config.panelPinned }\n        }\n    };\n    let getSidenavFocusStatus = ( sideNavInfoRef ) => {\n        if ( sideNavInfoRef && sideNavInfoRef.current ) {\n            return sideNavInfoRef.current.sideNavFocused;\n        }\n        return undefined;\n    };\n    let refCallBack = ( el ) => {\n        let sideNavInfoRef = prop.viewModel.data.sideNavInfo;\n        let isSideNavFocused = getSidenavFocusStatus( sideNavInfoRef );\n        if( el && prop.viewModel.data.config.sidenavOpened && isSideNavFocused === false ) {\n            sideNavInfoRef.current.sideNavFocused = true;\n            let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n            wcagSvc.focusFirstDescendantWithDelay( sidenavContainer );\n        }\n    };\n    return (\n        <aside data-locator='aw-sidenav' aria-live ='polite' aria-label={ getAriaLabel(  id, prop.i18n ) } id={ id} className={ getSidenavContainerClasses() } ref={prop.elementRefList.get( 'sidenav' )}>\n            <div className={ getPinnedClass() } >\n                { sidenavConfig[  id ].isPinnable && prop.viewModel.data.config.sidenavOpened ?\n                    <AwIconButton command={prop.fields.pinButton}></AwIconButton> : '' }\n            </div>\n            {prop.viewModel.data.config.sidenavOpened && <div className='aw-layout-declarativePanelRoot aw-layout-panel'>\n                <AwInclude name={prop.viewModel.data.config.view} {...context} domRef={( el )=>refCallBack( el )}></AwInclude>\n            </div>}\n            <div className='aw-sidenav-resizer'>\n                <div className='resize-handle sw-aria-border' role='button' aria-label={ prop.i18n.resizeCommandTitle} tabIndex='0' onMouseDown={handleMousedown}>\n                    <AwIcon iconId='uiPrimeNavGripper16'></AwIcon>\n                </div>\n            </div>\n        </aside>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do outgoing calls like SOA or REST.\n *\n * @module js/graphQLService\n *\n * @namespace graphQLService\n */\nimport AwHttpService from 'js/awHttpService';\nimport AwPromiseService from 'js/awPromiseService';\nimport localeService from 'js/localeService';\nimport _ from 'lodash';\nimport assert from 'js/assert';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n/**\n * Makes GraphQL call with given inputData. return the promise object.\n *\n * @param {Object} inputData - The 'inputData' object.\n *\n * @return {Promise} A promise object resolved with the results of the SOA call (or rejected if there is a\n *         problem).\n */\n\nexport let callGraphQL = function (inputData) {\n  eventBus.publish('progress.start', {});\n  return AwHttpService.instance.post(browserUtils.getBaseURL() + inputData.endPoint, inputData.request, {\n    headers: {\n      'Accept-Language': localeService.getLocale()\n    }\n  }).then(function (response) {\n    var endPt = null;\n    assert(response, 'No response given for ' + endPt);\n    var body = response.data;\n\n    try {\n      if (body.errors) {\n        /** If no data, reject the promise. Otherwise report an error and return data */\n        if (_.isEmpty(body.data)) {\n          eventBus.publish('progress.end', {});\n          return AwPromiseService.instance.reject(body.errors[0].message);\n        }\n\n        logger.error(body.errors[0].message);\n      }\n    } catch (err) {// Do nothing.\n    }\n\n    eventBus.publish('progress.end', {});\n\n    if (typeof body !== 'string' || body.indexOf('<?xml version') === -1) {\n      return body;\n    }\n\n    return AwPromiseService.instance.reject('Unexpected response body for: ' + endPt);\n  }, function (err) {\n    eventBus.publish('progress.end', {});\n    throw err;\n  });\n};\nconst exports = {\n  callGraphQL\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/graphQLService.js"],"names":["callGraphQL","eventBus","browserUtils","inputData","headers","localeService","endPt","assert","body","response","_","AwPromiseService","logger","exports"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AACA,OAAA,MAAA,MAAA,WAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIA,WAAW,GAAG,UAAA,SAAA,EAAsB;EAC3CC,QAAQ,CAARA,OAAAA,CAAAA,gBAAAA,EAAAA,EAAAA;EAEA,OAAO,aAAa,CAAb,QAAA,CAAA,IAAA,CAA6BC,YAAY,CAAZA,UAAAA,KAA4BC,SAAS,CAAlE,QAAA,EAA6EA,SAAS,CAAtF,OAAA,EAAgG;IACnGC,OAAO,EAAE;MACL,mBAAmBC,aAAa,CAAbA,SAAAA;IADd;EAD0F,CAAhG,EAAA,IAAA,CAIG,UAAA,QAAA,EAAqB;IAC3B,IAAIC,KAAK,GAAT,IAAA;IACAC,MAAM,CAAA,QAAA,EAAY,2BAAlBA,KAAM,CAANA;IAEA,IAAIC,IAAI,GAAGC,QAAQ,CAAnB,IAAA;;IAEA,IAAI;MACA,IAAID,IAAI,CAAR,MAAA,EAAkB;QACd;QACA,IAAIE,CAAC,CAADA,OAAAA,CAAWF,IAAI,CAAnB,IAAIE,CAAJ,EAA6B;UACzBT,QAAQ,CAARA,OAAAA,CAAAA,cAAAA,EAAAA,EAAAA;UAEA,OAAOU,gBAAgB,CAAhBA,QAAAA,CAAAA,MAAAA,CAAkCH,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAzC,OAAOG,CAAP;QACH;;QAEDC,MAAM,CAANA,KAAAA,CAAcJ,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAdI,OAAAA;MACH;IAVL,CAAA,CAWE,OAAA,GAAA,EAAc,CACZ;IACH;;IAEDX,QAAQ,CAARA,OAAAA,CAAAA,cAAAA,EAAAA,EAAAA;;IAEA,IAAI,OAAA,IAAA,KAAA,QAAA,IAA4BO,IAAI,CAAJA,OAAAA,CAAAA,eAAAA,MAAoC,CAApE,CAAA,EAAyE;MACrE,OAAA,IAAA;IACH;;IAED,OAAOG,gBAAgB,CAAhBA,QAAAA,CAAAA,MAAAA,CAAkC,mCAAzC,KAAOA,CAAP;EA/BG,CAAA,EAgCJ,UAAA,GAAA,EAAgB;IACfV,QAAQ,CAARA,OAAAA,CAAAA,cAAAA,EAAAA,EAAAA;IACA,MAAA,GAAA;EAlCJ,CAAO,CAAP;AAHG,CAAA;AAyCP,MAAMY,OAAO,GAAG;EACZb;AADY,CAAhB;AAGA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do outgoing calls like SOA or REST.\n *\n * @module js/graphQLService\n *\n * @namespace graphQLService\n */\nimport AwHttpService from 'js/awHttpService';\nimport AwPromiseService from 'js/awPromiseService';\nimport localeService from 'js/localeService';\nimport _ from 'lodash';\nimport assert from 'js/assert';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n\n/**\n * Makes GraphQL call with given inputData. return the promise object.\n *\n * @param {Object} inputData - The 'inputData' object.\n *\n * @return {Promise} A promise object resolved with the results of the SOA call (or rejected if there is a\n *         problem).\n */\nexport let callGraphQL = function( inputData ) {\n    eventBus.publish( 'progress.start', {} );\n\n    return AwHttpService.instance.post( browserUtils.getBaseURL() + inputData.endPoint, inputData.request, {\n        headers: {\n            'Accept-Language': localeService.getLocale()\n        }\n    } ).then( function( response ) {\n        var endPt = null;\n        assert( response, 'No response given for ' + endPt );\n\n        var body = response.data;\n\n        try {\n            if( body.errors ) {\n                /** If no data, reject the promise. Otherwise report an error and return data */\n                if( _.isEmpty( body.data ) ) {\n                    eventBus.publish( 'progress.end', {} );\n\n                    return AwPromiseService.instance.reject( body.errors[ 0 ].message );\n                }\n\n                logger.error( body.errors[ 0 ].message );\n            }\n        } catch ( err ) {\n            // Do nothing.\n        }\n\n        eventBus.publish( 'progress.end', {} );\n\n        if( typeof body !== 'string' || body.indexOf( '<?xml version' ) === -1 ) {\n            return body;\n        }\n\n        return AwPromiseService.instance.reject( 'Unexpected response body for: ' + endPt );\n    }, function( err ) {\n        eventBus.publish( 'progress.end', {} );\n        throw err;\n    } );\n};\n\nconst exports = {\n    callGraphQL\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
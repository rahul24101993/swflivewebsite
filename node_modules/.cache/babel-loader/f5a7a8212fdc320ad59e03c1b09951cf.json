{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is purely a Require module. It will get called on the initial flow path and state is checked during route\n * transitions. It will do an on demand load of the session manager service.\n *\n * @module js/sessionState\n */\nimport logger from 'js/logger';\nimport AwStateService from 'js/awStateService';\nimport AwPromiseService from 'js/awPromiseService';\nvar exports = {};\nvar _isSessionAuthenticated = false;\nvar _authInProgress = false;\nexport let setAuthStatus = function (isAuth) {\n  _isSessionAuthenticated = isAuth;\n};\nexport let getIsAuthenticated = function () {\n  return _isSessionAuthenticated;\n};\nexport let isAuthenticationInProgress = function () {\n  return _authInProgress;\n};\nexport let setAuthenticationInProgress = function (val) {\n  _authInProgress = val;\n};\nexport let forceNavigation = function (toState, toParams) {\n  // try to put an async \"gap\" around the state.go - much like the sessionmgr interaction..\n  import('js/sessionManager.service').then(function () {\n    try {\n      AwStateService.instance.go(toState, toParams);\n    } catch (e) {// For aligning with former code flow, do nothing and not error out\n    }\n  });\n};\n/**\n * this is the wrapper around the checkSessionValid() api. this is the defer point at which we can async load.\n */\n\nexport let performValidSessionCheck = function (targetNavDetails) {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  import('js/sessionManager.service').then(function (sessionManagerService) {\n    sessionManagerService.checkSessionValid(targetNavDetails);\n  });\n};\nexport let runPostLoginStages = function () {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  import('js/sessionManager.service').then(function (sessionManagerService) {\n    sessionManagerService.runPostLoginBlocking().then(function () {\n      sessionManagerService.runNavToState();\n    }, function () {\n      if (logger.isTraceEnabled()) {\n        logger.trace('SM: end runPostLoginBlocking Stage - but ERROR');\n      }\n\n      sessionManagerService.runNavToState();\n    });\n  });\n};\n/**\n * wrapper around the session manager api. load upon request and invoke session manager.\n *\n * @param {Object} $q\n * @return {Promise} promise\n */\n\nexport let pickAuthenticator = function () {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  return AwPromiseService.instance(function (resolve) {\n    import('js/sessionManager.service').then(function (sessionManagerService) {\n      resolve(sessionManagerService.pickAuthenticator());\n    });\n  });\n};\n/**\n * Invoked when the state change was successful from UI router\n */\n\nexport let routeStateChangeSuccess = function (toState, toParams, fromState, fromParams) {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  import('js/locationNavigation.service').then(function (dep) {\n    let locationNavigationSvc = dep.default.instance;\n    locationNavigationSvc.routeStateChangeSuccess(toState, toParams, fromState, fromParams);\n  });\n};\nexports = {\n  setAuthStatus,\n  getIsAuthenticated,\n  isAuthenticationInProgress,\n  setAuthenticationInProgress,\n  forceNavigation,\n  performValidSessionCheck,\n  runPostLoginStages,\n  pickAuthenticator,\n  routeStateChangeSuccess\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/sessionState.js"],"names":["exports","_isSessionAuthenticated","_authInProgress","setAuthStatus","getIsAuthenticated","isAuthenticationInProgress","setAuthenticationInProgress","forceNavigation","AwStateService","performValidSessionCheck","sessionManagerService","runPostLoginStages","logger","pickAuthenticator","resolve","routeStateChangeSuccess","locationNavigationSvc","dep"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,cAAA,MAAA,mBAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AAEA,IAAIA,OAAO,GAAX,EAAA;AAEA,IAAIC,uBAAuB,GAA3B,KAAA;AACA,IAAIC,eAAe,GAAnB,KAAA;AAEA,OAAO,IAAIC,aAAa,GAAG,UAAA,MAAA,EAAmB;EAC1CF,uBAAuB,GAAvBA,MAAAA;AADG,CAAA;AAIP,OAAO,IAAIG,kBAAkB,GAAG,YAAW;EACvC,OAAA,uBAAA;AADG,CAAA;AAIP,OAAO,IAAIC,0BAA0B,GAAG,YAAW;EAC/C,OAAA,eAAA;AADG,CAAA;AAIP,OAAO,IAAIC,2BAA2B,GAAG,UAAA,GAAA,EAAgB;EACrDJ,eAAe,GAAfA,GAAAA;AADG,CAAA;AAIP,OAAO,IAAIK,eAAe,GAAG,UAAA,OAAA,EAAA,QAAA,EAA8B;EACvD;EACA,OAAA,2BAAA,EAAA,IAAA,CAA4C,YAAW;IACnD,IAAI;MACAC,cAAc,CAAdA,QAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAAAA,QAAAA;IADJ,CAAA,CAEE,OAAA,CAAA,EAAY,CACV;IACH;EALL,CAAA;AAFG,CAAA;AAUP;AACA;AACA;;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAA,gBAAA,EAA6B;EAC/D;EACA,OAAA,2BAAA,EAAA,IAAA,CAA4C,UAAA,qBAAA,EAAkC;IAC1EC,qBAAqB,CAArBA,iBAAAA,CAAAA,gBAAAA;EADJ,CAAA;AAFG,CAAA;AAOP,OAAO,IAAIC,kBAAkB,GAAG,YAAW;EACvC;EACA,OAAA,2BAAA,EAAA,IAAA,CAA4C,UAAA,qBAAA,EAAkC;IAC1ED,qBAAqB,CAArBA,oBAAAA,GAAAA,IAAAA,CAAmD,YAAW;MAC1DA,qBAAqB,CAArBA,aAAAA;IADJA,CAAAA,EAEG,YAAW;MACV,IAAIE,MAAM,CAAV,cAAIA,EAAJ,EAA8B;QAC1BA,MAAM,CAANA,KAAAA,CAAAA,gDAAAA;MACH;;MACDF,qBAAqB,CAArBA,aAAAA;IANJA,CAAAA;EADJ,CAAA;AAFG,CAAA;AAcP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,iBAAiB,GAAG,YAAW;EACtC;EACA,OAAO,gBAAgB,CAAhB,QAAA,CAA2B,UAAA,OAAA,EAAoB;IAClD,OAAA,2BAAA,EAAA,IAAA,CAA4C,UAAA,qBAAA,EAAkC;MAC1EC,OAAO,CAAEJ,qBAAqB,CAA9BI,iBAASJ,EAAF,CAAPI;IADJ,CAAA;EADJ,CAAO,CAAP;AAFG,CAAA;AASP;AACA;AACA;;AACA,OAAO,IAAIC,uBAAuB,GAAG,UAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAqD;EACtF;EACA,OAAA,+BAAA,EAAA,IAAA,CAAgD,UAAA,GAAA,EAAgB;IAC5D,IAAIC,qBAAqB,GAAGC,GAAG,CAAHA,OAAAA,CAA5B,QAAA;IACAD,qBAAqB,CAArBA,uBAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,UAAAA;EAFJ,CAAA;AAFG,CAAA;AAQPhB,OAAO,GAAG;EAAA,aAAA;EAAA,kBAAA;EAAA,0BAAA;EAAA,2BAAA;EAAA,eAAA;EAAA,wBAAA;EAAA,kBAAA;EAAA,iBAAA;EASNe;AATM,CAAVf;AAWA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is purely a Require module. It will get called on the initial flow path and state is checked during route\n * transitions. It will do an on demand load of the session manager service.\n *\n * @module js/sessionState\n */\nimport logger from 'js/logger';\nimport AwStateService from 'js/awStateService';\nimport AwPromiseService from 'js/awPromiseService';\n\nvar exports = {};\n\nvar _isSessionAuthenticated = false;\nvar _authInProgress = false;\n\nexport let setAuthStatus = function( isAuth ) {\n    _isSessionAuthenticated = isAuth;\n};\n\nexport let getIsAuthenticated = function() {\n    return _isSessionAuthenticated;\n};\n\nexport let isAuthenticationInProgress = function() {\n    return _authInProgress;\n};\n\nexport let setAuthenticationInProgress = function( val ) {\n    _authInProgress = val;\n};\n\nexport let forceNavigation = function( toState, toParams ) {\n    // try to put an async \"gap\" around the state.go - much like the sessionmgr interaction..\n    import( 'js/sessionManager.service' ).then( function() {\n        try {\n            AwStateService.instance.go( toState, toParams );\n        } catch ( e ) {\n            // For aligning with former code flow, do nothing and not error out\n        }\n    } );\n};\n/**\n * this is the wrapper around the checkSessionValid() api. this is the defer point at which we can async load.\n */\nexport let performValidSessionCheck = function( targetNavDetails ) {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    import( 'js/sessionManager.service' ).then( function( sessionManagerService ) {\n        sessionManagerService.checkSessionValid( targetNavDetails );\n    } );\n};\n\nexport let runPostLoginStages = function() {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    import( 'js/sessionManager.service' ).then( function( sessionManagerService ) {\n        sessionManagerService.runPostLoginBlocking().then( function() {\n            sessionManagerService.runNavToState();\n        }, function() {\n            if( logger.isTraceEnabled() ) {\n                logger.trace( 'SM: end runPostLoginBlocking Stage - but ERROR' );\n            }\n            sessionManagerService.runNavToState();\n        } );\n    } );\n};\n\n/**\n * wrapper around the session manager api. load upon request and invoke session manager.\n *\n * @param {Object} $q\n * @return {Promise} promise\n */\nexport let pickAuthenticator = function() {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    return AwPromiseService.instance( function( resolve ) {\n        import( 'js/sessionManager.service' ).then( function( sessionManagerService ) {\n            resolve( sessionManagerService.pickAuthenticator() );\n        } );\n    } );\n};\n\n/**\n * Invoked when the state change was successful from UI router\n */\nexport let routeStateChangeSuccess = function( toState, toParams, fromState, fromParams ) {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    import( 'js/locationNavigation.service' ).then( function( dep ) {\n        let locationNavigationSvc = dep.default.instance;\n        locationNavigationSvc.routeStateChangeSuccess( toState, toParams, fromState, fromParams );\n    } );\n};\n\nexports = {\n    setAuthStatus,\n    getIsAuthenticated,\n    isAuthenticationInProgress,\n    setAuthenticationInProgress,\n    forceNavigation,\n    performValidSessionCheck,\n    runPostLoginStages,\n    pickAuthenticator,\n    routeStateChangeSuccess\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import AwStateService from 'js/awStateService';\nimport keyboardService from 'js/keyboardService';\nimport appCtxService from 'js/appCtxService';\nimport localeService from 'js/localeService';\nimport AwPromiseService from 'js/awPromiseService';\nimport propertyPolicyService from 'soa/kernel/propertyPolicyService';\nimport preferenceService from 'soa/preferenceService';\nimport logger from 'js/logger';\nlet _locationContext = 'locationContext';\nlet _contextName = 'location.titles';\nlet _contextProperties = ['browserTitle', 'browserSubTitle', 'headerTitle', 'showsearchbox'];\n\nlet _context;\n\nlet exports;\n\nconst populateContextProperties = () => {\n  let contextProps = {};\n  var promises = [];\n\n  _contextProperties.forEach(function (key) {\n    var property = AwStateService.instance.current.data[key];\n\n    if (property) {\n      if (typeof property === 'string') {\n        contextProps[key] = property;\n        promises.push(AwPromiseService.instance.when(contextProps));\n      } else {\n        promises.push(localeService.getLocalizedText(property.source, property.key).then(function (result) {\n          contextProps[key] = result;\n          return contextProps;\n        }));\n      }\n    }\n  });\n\n  return AwPromiseService.instance.all(promises).then(function () {\n    appCtxService.updateCtx(_contextName, contextProps);\n    return contextProps;\n  });\n};\n/**\n * The policy is unregistered when the location is removed.\n */\n\n\nconst unregisterPropertyPolicy = propertyPolicyId => {\n  if (propertyPolicyId) {\n    propertyPolicyService.unregister(propertyPolicyId);\n  }\n};\n\nexport const initializePage = async (locationPanelStyle, overriddenHeaderTitle) => {\n  //let subLocationTabs = []; // revisitMe\n  _context = AwStateService.instance.current.parent.replace(/_/g, '.');\n  keyboardService.registerKeyDownEvent();\n  appCtxService.registerCtx(_locationContext, {\n    'ActiveWorkspace:Location': _context\n  });\n  let prefs = (await preferenceService.queryAll()) || [];\n  return populateContextProperties().then(contextProps => {\n    /**\n     * The property policy for this location. Extracted from the state data. The policy can be embedded\n     * directly as an object or it can be a string path to the json file. The policy is registered when the\n     * location is activated and unregistered when the location is removed.\n     */\n    var propertyPolicy = AwStateService.instance.current.data.propertyPolicy;\n\n    if (propertyPolicy) {\n      return propertyPolicyService.registerPolicyAsync(propertyPolicy).then(function (propertyPolicyId) {\n        return {\n          pageContext: Object.assign(contextProps, {\n            propertyPolicyId: propertyPolicyId,\n            prefs,\n            locationPanelStyle,\n            overriddenHeaderTitle\n          })\n        };\n      });\n    }\n\n    return Promise.resolve({\n      pageContext: { ...contextProps,\n        prefs,\n        locationPanelStyle,\n        overriddenHeaderTitle\n      }\n    });\n  });\n};\nexport const cleanupPage = propertyPolicyId => {\n  appCtxService.unRegisterCtx(_locationContext);\n  appCtxService.unRegisterCtx(_contextName);\n  keyboardService.unRegisterKeyDownEvent();\n  unregisterPropertyPolicy(propertyPolicyId);\n};\nexport const updateContextProperties = (data, eventData) => {\n  let updatedContextProps = {\n    browserTitle: data.browserTitle,\n    browserSubTitle: data.browserSubTitle,\n    headerTitle: data.headerTitle\n  };\n\n  _contextProperties.forEach(function (prop) {\n    if (eventData.value[prop]) {\n      updatedContextProps[prop] = eventData.value[prop];\n    }\n  });\n\n  return updatedContextProps;\n};\nexport const getSublocationTabsAndApi = sublocationTabs => {\n  return {\n    sublocationTabs: sublocationTabs.filter(tab => tab.displayTab === true),\n    tabCallbackApi: tabCallbackApi\n  };\n};\n\nconst tabCallbackApi = (pageId, tabTitle, sublocationTabs) => {\n  var tabToSelect;\n\n  if (tabTitle) {\n    tabToSelect = sublocationTabs.filter(function (tab) {\n      return tab.name === tabTitle;\n    })[0];\n  } else {\n    // Should only happen when api is called before tapTitle is loaded from i18n file\n    tabToSelect = sublocationTabs.filter(function (tab) {\n      return tab.pageId === pageId;\n    })[0];\n  }\n\n  if (tabToSelect) {\n    // When the tab widget is forced to update after the state has already changed it will still trigger callback\n    if (tabToSelect.state !== AwStateService.instance.current.name) {\n      // Switch to the new state\n      if (tabToSelect.params) {\n        AwStateService.instance.go(tabToSelect.state, tabToSelect.params);\n      } else {\n        AwStateService.instance.go(tabToSelect.state);\n      }\n    }\n  } else {\n    logger.error('Missing tab was selected: ' + tabTitle);\n  }\n};\n\nexport const handleStateChange = sublocationTabs => {\n  const activeTab = sublocationTabs.filter(tab => tab.selectedTab)[0];\n\n  if (activeTab && activeTab.state !== AwStateService.instance.current.name) {\n    return sublocationTabs.map(tab => {\n      if (tab.state === AwStateService.instance.current.name) {\n        tab.selectedTab = true;\n      } else {\n        tab.selectedTab = false;\n      }\n\n      return tab;\n    });\n  }\n\n  return sublocationTabs;\n};\nexports = {\n  initializePage,\n  cleanupPage,\n  updateContextProperties,\n  getSublocationTabsAndApi,\n  handleStateChange\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/AwDefaultLocationService.js"],"names":["_locationContext","_contextName","_contextProperties","populateContextProperties","contextProps","promises","property","AwStateService","AwPromiseService","appCtxService","unregisterPropertyPolicy","propertyPolicyId","propertyPolicyService","initializePage","_context","keyboardService","prefs","preferenceService","propertyPolicy","pageContext","overriddenHeaderTitle","cleanupPage","updateContextProperties","updatedContextProps","browserTitle","data","browserSubTitle","headerTitle","eventData","getSublocationTabsAndApi","sublocationTabs","tab","tabCallbackApi","tabToSelect","logger","handleStateChange","activeTab","exports"],"mappings":"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","sourcesContent":["import AwStateService from 'js/awStateService';\nimport keyboardService from 'js/keyboardService';\nimport appCtxService from 'js/appCtxService';\nimport localeService from 'js/localeService';\nimport AwPromiseService from 'js/awPromiseService';\nimport propertyPolicyService from 'soa/kernel/propertyPolicyService';\nimport preferenceService from 'soa/preferenceService';\nimport logger from 'js/logger';\n\nlet _locationContext = 'locationContext';\nlet _contextName = 'location.titles';\nlet _contextProperties = [ 'browserTitle', 'browserSubTitle', 'headerTitle', 'showsearchbox' ];\nlet _context;\nlet exports;\n\nconst populateContextProperties = () => {\n    let contextProps = {};\n    var promises = [];\n    _contextProperties.forEach( function( key ) {\n        var property = AwStateService.instance.current.data[ key ];\n        if( property ) {\n            if( typeof property === 'string' ) {\n                contextProps[ key ] = property;\n                promises.push( AwPromiseService.instance.when( contextProps ) );\n            } else {\n                promises.push( localeService.getLocalizedText( property.source, property.key )\n                    .then( function( result ) {\n                        contextProps[ key ] = result;\n                        return contextProps;\n                    } ) );\n            }\n        }\n    } );\n\n    return AwPromiseService.instance.all( promises ).then( function() {\n        appCtxService.updateCtx( _contextName, contextProps );\n        return contextProps;\n    } );\n};\n\n/**\n * The policy is unregistered when the location is removed.\n */\nconst unregisterPropertyPolicy = ( propertyPolicyId ) => {\n    if( propertyPolicyId ) {\n        propertyPolicyService.unregister( propertyPolicyId );\n    }\n};\nexport const initializePage = async( locationPanelStyle, overriddenHeaderTitle ) => {\n    //let subLocationTabs = []; // revisitMe\n    _context = AwStateService.instance.current.parent.replace( /_/g, '.' );\n    keyboardService.registerKeyDownEvent();\n    appCtxService.registerCtx( _locationContext, {\n        'ActiveWorkspace:Location': _context\n    } );\n    let prefs = await preferenceService.queryAll() || [];\n    return populateContextProperties().then( ( contextProps ) => {\n        /**\n         * The property policy for this location. Extracted from the state data. The policy can be embedded\n         * directly as an object or it can be a string path to the json file. The policy is registered when the\n         * location is activated and unregistered when the location is removed.\n         */\n        var propertyPolicy = AwStateService.instance.current.data.propertyPolicy;\n        if( propertyPolicy ) {\n            return propertyPolicyService.registerPolicyAsync( propertyPolicy ).then( function( propertyPolicyId ) {\n                return { pageContext: Object.assign( contextProps, { propertyPolicyId: propertyPolicyId, prefs, locationPanelStyle, overriddenHeaderTitle } ) };\n            } );\n        }\n        return Promise.resolve( { pageContext: { ...contextProps, prefs, locationPanelStyle, overriddenHeaderTitle } } );\n    } );\n};\n\nexport const cleanupPage = ( propertyPolicyId ) => {\n    appCtxService.unRegisterCtx( _locationContext );\n    appCtxService.unRegisterCtx( _contextName );\n    keyboardService.unRegisterKeyDownEvent();\n    unregisterPropertyPolicy( propertyPolicyId );\n};\n\nexport const updateContextProperties = ( data, eventData ) => {\n    let updatedContextProps = {\n        browserTitle: data.browserTitle,\n        browserSubTitle: data.browserSubTitle,\n        headerTitle: data.headerTitle\n    };\n    _contextProperties.forEach( function( prop ) {\n        if( eventData.value[ prop ] ) {\n            updatedContextProps[ prop ] = eventData.value[ prop ];\n        }\n    } );\n    return updatedContextProps;\n};\n\nexport const getSublocationTabsAndApi = ( sublocationTabs ) => {\n    return {\n        sublocationTabs: sublocationTabs.filter( tab => tab.displayTab === true ),\n        tabCallbackApi: tabCallbackApi\n    };\n};\n\nconst tabCallbackApi = ( pageId, tabTitle, sublocationTabs ) => {\n    var tabToSelect;\n    if( tabTitle ) {\n        tabToSelect = sublocationTabs.filter( function( tab ) {\n            return tab.name === tabTitle;\n        } )[ 0 ];\n    } else {\n        // Should only happen when api is called before tapTitle is loaded from i18n file\n        tabToSelect = sublocationTabs.filter( function( tab ) {\n            return tab.pageId === pageId;\n        } )[ 0 ];\n    }\n    if( tabToSelect ) {\n        // When the tab widget is forced to update after the state has already changed it will still trigger callback\n        if( tabToSelect.state !== AwStateService.instance.current.name ) {\n            // Switch to the new state\n            if( tabToSelect.params ) {\n                AwStateService.instance.go( tabToSelect.state, tabToSelect.params );\n            } else {\n                AwStateService.instance.go( tabToSelect.state );\n            }\n        }\n    } else {\n        logger.error( 'Missing tab was selected: ' + tabTitle );\n    }\n};\n\nexport const handleStateChange = ( sublocationTabs ) => {\n    const activeTab = sublocationTabs.filter( tab => tab.selectedTab )[ 0 ];\n    if( activeTab && activeTab.state !== AwStateService.instance.current.name ) {\n        return sublocationTabs.map( tab => {\n            if( tab.state === AwStateService.instance.current.name ) {\n                tab.selectedTab = true;\n            } else {\n                tab.selectedTab = false;\n            }\n            return tab;\n        } );\n    }\n    return sublocationTabs;\n};\n\n\nexports = {\n    initializePage,\n    cleanupPage,\n    updateContextProperties,\n    getSublocationTabsAndApi,\n    handleStateChange\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
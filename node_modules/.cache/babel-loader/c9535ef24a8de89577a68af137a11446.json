{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Reports performance metrics to Tcanalytics\n *\n * @module js/splmStatsAnalyticsReporter\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport { ANALYTICS_EVENT_NAME } from 'js/splmStatsConstants';\nimport splmAnalyticsService from 'js/splmAnalyticsService';\nimport splmStatsUtils from 'js/splmStatsUtils';\nimport appCtxService from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport eventBus from 'js/eventBus';\nimport { getReportAnalytics, setReportAnalytics, setLocationInformation } from 'js/splmStatsUtils';\n/**\n * Instances of this class represent reporter for sending performance metrics to Tcanalytics\n *\n * @class SPLMStatsAnalyticsReporter\n */\n\nfunction SPLMStatsAnalyticsReporter() {\n  let self = this;\n  let _analyticsContext = null;\n  /**\n   * Gets the key from the application context service and formats it as the context configuration ( enableCtxInfo object ) dictates\n   *\n   * @param {String} key - One of the objects in enableCtxInfo.appCtxKeys array\n   * @param {Object} ctx - Current application context queried from appCtxService\n   *\n   * @return {String} The result string after filtering/formatting the raw value form appCtxService\n   */\n\n  const _processCtxKey = function (key, ctx) {\n    let notFound = false;\n\n    for (let i = 0; i < key.searchPaths.length; i++) {\n      let currentPath = key.searchPaths[i];\n      let tempCtx = ctx;\n\n      for (let j = 0; j < currentPath.length; j++) {\n        if (tempCtx[currentPath[j]]) {\n          tempCtx = tempCtx[currentPath[j]];\n        } else {\n          notFound = true;\n          break;\n        }\n      }\n\n      if (notFound) {\n        break;\n      }\n\n      if (tempCtx !== ctx) {\n        return tempCtx;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Hook point to set the context object used for filtering/formatting context information.\n   *\n   * @param {Object} obj - Context configuration object to set\n   */\n\n\n  self.setAnalyticsContext = function (obj) {\n    _analyticsContext = obj;\n  };\n  /**\n   * Gets context data from appCtxService and formats it with _processCtxKey\n   *\n   * @return {Object} Processed context object to be sent to Tcanalytics\n   */\n\n\n  const _getContextData = function () {\n    let ctxObj = null;\n\n    if (!_analyticsContext) {\n      _analyticsContext = cfgSvc.getCfgCached('analytics.splmStatsConfiguration');\n    }\n\n    ctxObj = {};\n    let ctx = appCtxService.ctx;\n\n    if (_analyticsContext && _analyticsContext.appCtxKeys) {\n      for (let i = 0; i < _analyticsContext.appCtxKeys.length; i++) {\n        let k = _analyticsContext.appCtxKeys[i];\n\n        let value = _processCtxKey(k, ctx);\n\n        if (value) {\n          ctxObj[k.name] = value;\n        }\n      }\n    }\n\n    return ctxObj;\n  };\n  /**\n   * Formats a string on the context object to remove unecessary characters specific in the configuration object\n   *\n   * @param {String} ctxString - Unformatted context string\n   *\n   * @return {String} Processed context object to be sent to Tcanalytics\n   */\n\n\n  const _processCtxString = function (ctxString) {\n    ctxString = ctxString.replace(/[\\w\\.:]+[\\.:]+(\\w+)/, '$1');\n\n    if (_analyticsContext.appCtxValueFilters) {\n      for (let i = 0; i < _analyticsContext.appCtxValueFilters.length; i++) {\n        while (ctxString.indexOf(_analyticsContext.appCtxValueFilters[i]) !== -1) {\n          ctxString = ctxString.replace(_analyticsContext.appCtxValueFilters[i], '');\n        }\n      }\n    }\n\n    if (ctxString === 'SummaryView') {\n      ctxString = 'ListSummaryView';\n    }\n\n    return ctxString;\n  };\n  /**\n   * Checks to see if analytics are enabled, if so then log the performance object\n   *\n   * @param {Object} obj - Formatted performance object\n   */\n\n\n  const _logAnalyticsEvent = function (obj) {\n    if (getReportAnalytics() && !splmStatsUtils.isAnalyticsDisabled()) {\n      let eventName = _analyticsContext && _analyticsContext.name ? _analyticsContext.name : ANALYTICS_EVENT_NAME;\n      splmAnalyticsService.logEvent('Performance::' + eventName, obj);\n    }\n  };\n  /**\n   * Formats and sends our raw performance object data to the analytics logging function\n   *\n   * @param {Object} performanceObject - Raw/Unformatted performance object\n   */\n\n\n  self.report = function (performanceObject) {\n    let ctxResult = _getContextData();\n\n    let locationInformation = {};\n\n    if (_analyticsContext && _analyticsContext.appCtxKeys) {\n      _.forEach(_analyticsContext.appCtxKeys, function (key) {\n        if (key.name && ctxResult[key.name]) {\n          locationInformation['plstats' + key.name] = _processCtxString(ctxResult[key.name]);\n        }\n      });\n    }\n\n    setLocationInformation(locationInformation);\n\n    _logAnalyticsEvent(_.assign({\n      sanAnalyticsType: 'Performance',\n      plstatsTTI: parseFloat((performanceObject.TTI / 1000).toFixed(3)),\n      // Seconds\n      plstatsScriptingTime: parseFloat(parseFloat(performanceObject.scriptTime / 1000).toFixed(3)),\n      // Seconds\n      plstatsMemoryUsed: parseFloat((performanceObject.MemoryUsed / 1000000).toFixed(3)) || 0,\n      //MB\n      plstatsSoaRequestCount: performanceObject.Network.SoaDetails.filter(function (networkCall) {\n        return networkCall.logCorrelationID !== 0;\n      }).length,\n      plstatsTotalNetworkTime: parseFloat((performanceObject.totalNetworkTime / 1000).toFixed(3)),\n      // Seconds\n      plstatsNetworkRequestSize: performanceObject.Network.requestSize,\n      plstatsNetworkResponseSize: performanceObject.Network.responseSize,\n      plstatsElemCount: performanceObject.DOM.elemCount,\n      plstatsBrowserType: performanceObject.BrowserType,\n      plstatsHttpRequestCount: performanceObject.Network.totalHttpRequests,\n      plstatsComponentRenders: performanceObject.Component.componentRenders,\n      plstatsUniqueComponents: performanceObject.Component.uniqueComponents\n    }, locationInformation));\n\n    setReportAnalytics(false);\n  };\n\n  return self;\n}\n\n_c = SPLMStatsAnalyticsReporter;\nexport default SPLMStatsAnalyticsReporter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsAnalyticsReporter\");","map":{"version":3,"names":["_","ANALYTICS_EVENT_NAME","splmAnalyticsService","splmStatsUtils","appCtxService","cfgSvc","eventBus","getReportAnalytics","setReportAnalytics","setLocationInformation","SPLMStatsAnalyticsReporter","self","_analyticsContext","_processCtxKey","key","ctx","notFound","i","searchPaths","length","currentPath","tempCtx","j","setAnalyticsContext","obj","_getContextData","ctxObj","getCfgCached","appCtxKeys","k","value","name","_processCtxString","ctxString","replace","appCtxValueFilters","indexOf","_logAnalyticsEvent","isAnalyticsDisabled","eventName","logEvent","report","performanceObject","ctxResult","locationInformation","forEach","assign","sanAnalyticsType","plstatsTTI","parseFloat","TTI","toFixed","plstatsScriptingTime","scriptTime","plstatsMemoryUsed","MemoryUsed","plstatsSoaRequestCount","Network","SoaDetails","filter","networkCall","logCorrelationID","plstatsTotalNetworkTime","totalNetworkTime","plstatsNetworkRequestSize","requestSize","plstatsNetworkResponseSize","responseSize","plstatsElemCount","DOM","elemCount","plstatsBrowserType","BrowserType","plstatsHttpRequestCount","totalHttpRequests","plstatsComponentRenders","Component","componentRenders","plstatsUniqueComponents","uniqueComponents"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsAnalyticsReporter.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Reports performance metrics to Tcanalytics\n *\n * @module js/splmStatsAnalyticsReporter\n * @publishedApolloService\n */\nimport _ from 'lodash';\n\nimport { ANALYTICS_EVENT_NAME } from 'js/splmStatsConstants';\nimport splmAnalyticsService from 'js/splmAnalyticsService';\nimport splmStatsUtils from 'js/splmStatsUtils';\n\nimport appCtxService from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport eventBus from 'js/eventBus';\nimport { getReportAnalytics, setReportAnalytics, setLocationInformation } from 'js/splmStatsUtils';\n\n/**\n * Instances of this class represent reporter for sending performance metrics to Tcanalytics\n *\n * @class SPLMStatsAnalyticsReporter\n */\nfunction SPLMStatsAnalyticsReporter() {\n    let self = this;\n\n    let _analyticsContext = null;\n\n    /**\n     * Gets the key from the application context service and formats it as the context configuration ( enableCtxInfo object ) dictates\n     *\n     * @param {String} key - One of the objects in enableCtxInfo.appCtxKeys array\n     * @param {Object} ctx - Current application context queried from appCtxService\n     *\n     * @return {String} The result string after filtering/formatting the raw value form appCtxService\n     */\n    const _processCtxKey = function( key, ctx ) {\n        let notFound = false;\n        for( let i = 0; i < key.searchPaths.length; i++ ) {\n            let currentPath = key.searchPaths[ i ];\n            let tempCtx = ctx;\n            for( let j = 0; j < currentPath.length; j++ ) {\n                if( tempCtx[ currentPath[ j ] ] ) {\n                    tempCtx = tempCtx[ currentPath[ j ] ];\n                } else {\n                    notFound = true;\n                    break;\n                }\n            }\n            if( notFound ) {\n                break;\n            }\n            if( tempCtx !== ctx ) {\n                return tempCtx;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Hook point to set the context object used for filtering/formatting context information.\n     *\n     * @param {Object} obj - Context configuration object to set\n     */\n    self.setAnalyticsContext = function( obj ) {\n        _analyticsContext = obj;\n    };\n\n    /**\n     * Gets context data from appCtxService and formats it with _processCtxKey\n     *\n     * @return {Object} Processed context object to be sent to Tcanalytics\n     */\n    const _getContextData = function() {\n        let ctxObj = null;\n        if( !_analyticsContext ) {\n            _analyticsContext = cfgSvc.getCfgCached( 'analytics.splmStatsConfiguration' );\n        }\n        ctxObj = {};\n        let ctx = appCtxService.ctx;\n        if( _analyticsContext && _analyticsContext.appCtxKeys ) {\n            for( let i = 0; i < _analyticsContext.appCtxKeys.length; i++ ) {\n                let k = _analyticsContext.appCtxKeys[ i ];\n                let value = _processCtxKey( k, ctx );\n                if( value ) {\n                    ctxObj[ k.name ] = value;\n                }\n            }\n        }\n        return ctxObj;\n    };\n\n    /**\n     * Formats a string on the context object to remove unecessary characters specific in the configuration object\n     *\n     * @param {String} ctxString - Unformatted context string\n     *\n     * @return {String} Processed context object to be sent to Tcanalytics\n     */\n    const _processCtxString = function( ctxString ) {\n        ctxString = ctxString.replace( /[\\w\\.:]+[\\.:]+(\\w+)/, '$1' );\n        if( _analyticsContext.appCtxValueFilters ) {\n            for( let i = 0; i < _analyticsContext.appCtxValueFilters.length; i++ ) {\n                while( ctxString.indexOf( _analyticsContext.appCtxValueFilters[ i ] ) !== -1 ) {\n                    ctxString = ctxString.replace( _analyticsContext.appCtxValueFilters[ i ], '' );\n                }\n            }\n        }\n        if( ctxString === 'SummaryView' ) {\n            ctxString = 'ListSummaryView';\n        }\n        return ctxString;\n    };\n\n    /**\n     * Checks to see if analytics are enabled, if so then log the performance object\n     *\n     * @param {Object} obj - Formatted performance object\n     */\n    const _logAnalyticsEvent = function( obj ) {\n        if( getReportAnalytics() && !splmStatsUtils.isAnalyticsDisabled() ) {\n            let eventName = _analyticsContext && _analyticsContext.name ? _analyticsContext.name : ANALYTICS_EVENT_NAME;\n            splmAnalyticsService.logEvent( 'Performance::' + eventName, obj );\n        }\n    };\n\n    /**\n     * Formats and sends our raw performance object data to the analytics logging function\n     *\n     * @param {Object} performanceObject - Raw/Unformatted performance object\n     */\n    self.report = function( performanceObject ) {\n        let ctxResult = _getContextData();\n\n        let locationInformation = {};\n        if( _analyticsContext && _analyticsContext.appCtxKeys ) {\n            _.forEach( _analyticsContext.appCtxKeys, function( key ) {\n                if( key.name && ctxResult[ key.name ] ) {\n                    locationInformation[ 'plstats' + key.name ] = _processCtxString( ctxResult[ key.name ] );\n                }\n            } );\n        }\n        setLocationInformation( locationInformation );\n        _logAnalyticsEvent( _.assign( {\n            sanAnalyticsType: 'Performance',\n            plstatsTTI: parseFloat( ( performanceObject.TTI / 1000 ).toFixed( 3 ) ), // Seconds\n            plstatsScriptingTime: parseFloat( parseFloat( performanceObject.scriptTime / 1000 ).toFixed( 3 ) ), // Seconds\n            plstatsMemoryUsed: parseFloat( ( performanceObject.MemoryUsed / 1000000 ).toFixed( 3 ) ) || 0, //MB\n            plstatsSoaRequestCount: performanceObject.Network.SoaDetails.filter( function( networkCall ) {\n                return networkCall.logCorrelationID !== 0;\n            } ).length,\n            plstatsTotalNetworkTime: parseFloat( ( performanceObject.totalNetworkTime / 1000 ).toFixed( 3 ) ), // Seconds\n            plstatsNetworkRequestSize: performanceObject.Network.requestSize,\n            plstatsNetworkResponseSize: performanceObject.Network.responseSize,\n            plstatsElemCount: performanceObject.DOM.elemCount,\n            plstatsBrowserType: performanceObject.BrowserType,\n            plstatsHttpRequestCount: performanceObject.Network.totalHttpRequests,\n            plstatsComponentRenders: performanceObject.Component.componentRenders,\n            plstatsUniqueComponents: performanceObject.Component.uniqueComponents\n        }, locationInformation ) );\n\n        setReportAnalytics( false );\n    };\n\n    return self;\n}\n\nexport default SPLMStatsAnalyticsReporter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
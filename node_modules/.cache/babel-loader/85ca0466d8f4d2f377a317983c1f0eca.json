{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Module for date parser utilities\n *\n * @module js/dateParserUtils\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\nvar trace = new Debug('dateParserUtils');\nvar exports = {};\n/**\n *Parsing of Dates\n *\n * @param {String} sourceVal - property value to compare with\n * @param {String} queryVal - condition value\n *\n * @return {Object} date object of sourceVal and queryVal\n */\n\nexport let getParsedDates = function (sourceVal, queryVal) {\n  var dateParser = {};\n  dateParser.sourceDate = exports.convertDateToMsec(sourceVal);\n\n  if (_.isArray(queryVal)) {\n    dateParser.queryDate = [];\n\n    for (var key in queryVal) {\n      dateParser.queryDate[key] = exports.convertDateToMsec(queryVal[key]);\n    }\n  } else {\n    dateParser.queryDate = exports.convertDateToMsec(queryVal);\n  }\n\n  return dateParser;\n};\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {String} condition - condition value like \"Date(08-Feb-2019)\"\n *\n * @return {String}  conditionVal like \"08-Feb-2019\"\n */\n\nexport let getDateValue = function (condition) {\n  try {\n    var regExp = /\\(([^)]+)\\)/;\n    return regExp.exec(condition)[1];\n  } catch (e) {\n    trace('Error in condition', e, condition);\n  }\n\n  return undefined;\n};\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {object} value - date object\n * @param {String} expressionDataType - data type - Date\n * @return {object}  expression , date type along with date\n */\n\nexport let getExpressionDateValue = function (value, expressionDataType) {\n  var key;\n  var expression = {};\n\n  if (expressionDataType === 'Date' && exports.isDate(value)) {\n    if (_.isArray(value)) {\n      expression.value = [];\n\n      for (key in value) {\n        expression.value[key] = exports.getDateValue(value[key]);\n      }\n    } else {\n      expression.value = exports.getDateValue(value);\n    }\n  } else {\n    expression.value = value;\n  }\n\n  return expression;\n};\n/**\n *get expression type is dat eor not\n *\n * @param {object} value - date object\n *\n * @return {boolean}  value is date or not\n */\n\nexport let isDate = function (value) {\n  try {\n    var regExp = /^Date\\(\\{\\{/;\n    return value && value.toString().match(regExp) !== null;\n  } catch (e) {\n    trace('Error in expression', e, value);\n  }\n\n  return undefined;\n};\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\n\nexport let convertDateToMsec = function (queryVal) {\n  if (typeof queryVal !== 'number') {\n    try {\n      queryVal = new Date(queryVal).getTime();\n    } catch (e) {\n      trace('Invalid Date format', e);\n    }\n  }\n\n  return queryVal > 0 ? queryVal : Infinity;\n};\nexports = {\n  getParsedDates,\n  getDateValue,\n  getExpressionDateValue,\n  isDate,\n  convertDateToMsec\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dateParserUtils.js"],"names":["trace","exports","getParsedDates","dateParser","_","queryVal","getDateValue","regExp","getExpressionDateValue","expression","expressionDataType","value","isDate","convertDateToMsec"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Module for date parser utilities\n *\n * @module js/dateParserUtils\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\n\nvar trace = new Debug( 'dateParserUtils' );\nvar exports = {};\n\n/**\n *Parsing of Dates\n *\n * @param {String} sourceVal - property value to compare with\n * @param {String} queryVal - condition value\n *\n * @return {Object} date object of sourceVal and queryVal\n */\nexport let getParsedDates = function( sourceVal, queryVal ) {\n    var dateParser = {};\n\n    dateParser.sourceDate = exports.convertDateToMsec( sourceVal );\n\n    if( _.isArray( queryVal ) ) {\n        dateParser.queryDate = [];\n        for( var key in queryVal ) {\n            dateParser.queryDate[ key ] = exports.convertDateToMsec( queryVal[ key ] );\n        }\n    } else {\n        dateParser.queryDate = exports.convertDateToMsec( queryVal );\n    }\n\n    return dateParser;\n};\n\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {String} condition - condition value like \"Date(08-Feb-2019)\"\n *\n * @return {String}  conditionVal like \"08-Feb-2019\"\n */\nexport let getDateValue = function( condition ) {\n    try {\n        var regExp = /\\(([^)]+)\\)/;\n        return regExp.exec( condition )[ 1 ];\n    } catch ( e ) {\n        trace( 'Error in condition', e, condition );\n    }\n    return undefined;\n};\n\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {object} value - date object\n * @param {String} expressionDataType - data type - Date\n * @return {object}  expression , date type along with date\n */\nexport let getExpressionDateValue = function( value, expressionDataType ) {\n    var key;\n    var expression = {};\n    if( expressionDataType === 'Date' && exports.isDate( value ) ) {\n        if( _.isArray( value ) ) {\n            expression.value = [];\n            for( key in value ) {\n                expression.value[ key ] = exports.getDateValue( value[ key ] );\n            }\n        } else {\n            expression.value = exports.getDateValue( value );\n        }\n    } else {\n        expression.value = value;\n    }\n    return expression;\n};\n\n/**\n *get expression type is dat eor not\n *\n * @param {object} value - date object\n *\n * @return {boolean}  value is date or not\n */\nexport let isDate = function( value ) {\n    try {\n        var regExp = /^Date\\(\\{\\{/;\n        return value && value.toString().match( regExp ) !== null;\n    } catch ( e ) {\n        trace( 'Error in expression', e, value );\n    }\n    return undefined;\n};\n\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\nexport let convertDateToMsec = function( queryVal ) {\n    if( typeof queryVal !== 'number' ) {\n        try {\n            queryVal = new Date( queryVal ).getTime();\n        } catch ( e ) {\n            trace( 'Invalid Date format', e );\n        }\n    }\n    return queryVal > 0 ? queryVal : Infinity;\n};\n\nexports = {\n    getParsedDates,\n    getDateValue,\n    getExpressionDateValue,\n    isDate,\n    convertDateToMsec\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwPopupWrapperService.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awPopupWrapperRenderFunction = props => {\n  const {\n    popup,\n    content,\n    children\n  } = props;\n  const {\n    options,\n    reference,\n    open\n  } = popup;\n\n  const renderChildContent = () => {\n    if (children) {\n      return typeof children === 'function' ? children(reference) : /*#__PURE__*/React.cloneElement(children, {\n        ref: reference,\n        // Case HOC component\n        domRef: reference\n      });\n    }\n\n    return null;\n  };\n\n  const renderPopoverContent = () => {\n    let fill = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"empty\"\n    }, void 0, false);\n\n    if (options.view) {\n      fill = /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: options.view,\n        subPanelContext: options.subPanelContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 20\n      }, this);\n    } else if (content) {\n      fill = content;\n    }\n\n    return open && /*#__PURE__*/_jsxDEV(AwPopup, { ...options,\n      children: fill\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 24\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [renderChildContent(), renderPopoverContent()]\n  }, void 0, true);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwPopupWrapperService.js"],"names":["awPopupWrapperRenderFunction","props","children","open","renderChildContent","ref","domRef","reference","renderPopoverContent","fill","options","subPanelContext"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,OAAA,MAAA,4BAAA;AACA,OAAA,SAAA,MAAA,8BAAA;;;AAEA,OAAO,MAAMA,4BAA4B,GAAKC,KAAF,IAAa;EACrD,MAAM;IAAA,KAAA;IAAA,OAAA;IAAkBC;EAAlB,IAAN,KAAA;EACA,MAAM;IAAA,OAAA;IAAA,SAAA;IAAsBC;EAAtB,IAAN,KAAA;;EAEA,MAAMC,kBAAkB,GAAG,MAAM;IAC7B,IAAA,QAAA,EAAe;MACX,OAAO,OAAA,QAAA,KAAA,UAAA,GACHF,QAAQ,CADL,SACK,CADL,GAAA,aAEH,KAAK,CAAL,YAAA,CAAA,QAAA,EAA8B;QAC1BG,GAAG,EADuB,SAAA;QAE1B;QACAC,MAAM,EAAEC;MAHkB,CAA9B,CAFJ;IAOH;;IACD,OAAA,IAAA;EAVJ,CAAA;;EAaA,MAAMC,oBAAoB,GAAG,MAAM;IAC/B,IAAIC,IAAI,GAAA,aAAG,OAAA,CAAA,SAAA,EAAA;MAAA,QAAA,EAAA;IAAA,CAAA,EAAA,KAAA,CAAA,EAAX,KAAW,CAAX;;IACA,IAAIC,OAAO,CAAX,IAAA,EAAmB;MACfD,IAAI,GAAA,aAAG,OAAA,CAAA,SAAA,EAAA;QAAW,IAAI,EAAEC,OAAO,CAAxB,IAAA;QAA+B,eAAe,EAAEA,OAAO,CAACC;MAAxD,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;QAAA,QAAA,EAAA,YAAA;QAAA,UAAA,EAAA,EAAA;QAAA,YAAA,EAAA;MAAA,CAAA,EAAPF,IAAO,CAAPA;IADJ,CAAA,MAEO,IAAA,OAAA,EAAc;MACjBA,IAAI,GAAJA,OAAAA;IACH;;IACD,OAAON,IAAI,IAAA,aAAI,OAAA,CAAA,OAAA,EAAA,EAAA,GAAA,OAAA;MAAA,QAAA,EAAuBM;IAAvB,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EAAf,IAAe,CAAf;EAPJ,CAAA;;EAUA,OAAA,aAAO,OAAA,CAAA,SAAA,EAAA;IAAA,QAAA,EAAA,CACDL,kBADC,EAAA,EAEDI,oBAFC,EAAA;EAAA,CAAA,EAAA,KAAA,CAAA,EAAP,IAAO,CAAP;AA3BG,CAAA","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\n\nexport const awPopupWrapperRenderFunction = ( props ) => {\n    const { popup, content, children } = props;\n    const { options, reference, open } = popup;\n\n    const renderChildContent = () => {\n        if( children ) {\n            return typeof children === 'function' ?\n                children( reference ) :\n                React.cloneElement( children, {\n                    ref: reference,\n                    // Case HOC component\n                    domRef: reference\n                } );\n        }\n        return null;\n    };\n\n    const renderPopoverContent = () => {\n        let fill = <>empty</>;\n        if( options.view ) {\n            fill = <AwInclude name={options.view} subPanelContext={options.subPanelContext}/>;\n        } else if( content ) {\n            fill = content;\n        }\n        return open && <AwPopup {...options}>{fill}</AwPopup>;\n    };\n\n    return <>\n        { renderChildContent() }\n        { renderPopoverContent() }\n    </>;\n};\n"]},"metadata":{},"sourceType":"module"}
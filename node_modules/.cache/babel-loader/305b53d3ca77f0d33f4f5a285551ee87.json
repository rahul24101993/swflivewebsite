{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods of navigation utils. This is for GWT consumption of the navigation utils.\n *\n * @module js/navigationUtils\n */\nimport browserUtils from 'js/browserUtils';\nimport _ from 'lodash';\nimport conditionService from 'js/conditionService';\nimport AwStateService from 'js/awStateService';\nvar exports = {};\n/**\n * getting $state reference. $state is injected in this way so to do the unit testing. This function is stubbed with\n * desired output in unit testing.\n *\n * @return {$state} $state reference\n */\n\nexport let getState = function () {\n  return AwStateService.instance;\n};\n/**\n * creating url of selected object\n *\n * @param {IModelObject} obj - selected object in the clipboard\n * @return {string} url of selected object\n */\n\nexport let urlProcessing = function (obj) {\n  var url = '';\n  var stateSvc = exports.getState();\n\n  if (stateSvc) {\n    var uid = obj.uid; // s_uid is not required for creating unique url for Model Object\n\n    url = browserUtils.getBaseURL() + stateSvc.href('com_siemens_splm_clientfx_tcui_xrt_showObject', {\n      uid: uid,\n      s_uid: ''\n    }, {\n      inherit: false\n    });\n  }\n\n  return url;\n};\n/**\n * get url of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {array} url array of selected object\n */\n\nexport let getDisplayURLs = function (objList) {\n  var url = [];\n\n  if (objList.length > 0) {\n    for (var i = 0; i < objList.length; i++) {\n      url[i] = exports.urlProcessing(objList[i]);\n    }\n  }\n\n  return url;\n};\n/**\n * create hyperlink of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {string} hyperlink string of all the selected object\n */\n\nexport let creatingHyperlinkOfSelectedObjects = function (objList) {\n  var hyperlinkText;\n  var hyperlinkString = '';\n  var url = exports.getDisplayURLs(objList);\n\n  for (var i = 0; i < objList.length; i++) {\n    hyperlinkText = objList[i].props.object_string.uiValues[0];\n    hyperlinkString += '<a href=\"' + url[i] + '\" target=\"_parent\" class=\"aw-base-osClipboardHyperlink\">' + hyperlinkText + '</a><br/>';\n  }\n\n  return hyperlinkString;\n};\n/**\n * builds an encoded parameter string based on the state name and param map supplied\n *\n * @param {String} stateName - state name\n * @param {Object} paramMap - parameter map\n * @return {String} encoded parameter string\n */\n\nexport let buildEncodedParamString = function (stateName, paramMap) {\n  var stateSvc = exports.getState();\n  var stateIn = stateName;\n  var encodedParamStr = '';\n\n  if (stateIn !== '.') {\n    stateIn = stateIn.replace(/\\./g, '_');\n  }\n\n  var relativeUrl = stateSvc.href(stateIn, paramMap, {\n    inherit: false\n  });\n\n  if (relativeUrl) {\n    var splitArr = relativeUrl.split(stateName);\n\n    if (splitArr.length === 2) {\n      encodedParamStr = splitArr[1];\n    }\n  }\n\n  return encodedParamStr;\n};\n/**\n * Expand a string based expression to include nested conditions\n *\n * @param {String} expression - a string expression to evaluate\n * @param {Object} internalViewModel - the object containing other expressions\n * @returns {String} the new string expression\n */\n\nexport let getConditionExpression = function (expression, internalViewModel) {\n  var conditionIndex = expression.indexOf('conditions.');\n\n  if (conditionIndex > -1) {\n    var substring = expression.substring(conditionIndex);\n    var endConditionIndex = substring.search('[^a-zA-Z0-9._]');\n    endConditionIndex = endConditionIndex > -1 ? conditionIndex + endConditionIndex : expression.length;\n    var referenceCondition = expression.substring(conditionIndex, endConditionIndex);\n\n    var evaluatedCondition = _.get(internalViewModel, referenceCondition);\n\n    var returnExpression = expression.replace(referenceCondition, '(' + evaluatedCondition.expression + ')');\n    return exports.getConditionExpression(returnExpression, internalViewModel);\n  }\n\n  return expression;\n};\n/**\n * Find active naigations  for the given workspaces..\n *\n * @param {Object} allNavConfigs - all navigations for active woorkspace\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\n\nexport let findActiveWorkspaceNavigation = function (allNavConfigs, $scope) {\n  var mostAppropriateActionHandler = null;\n  var mostAppropriateConditionLength = -1;\n\n  _.forEach(allNavConfigs, function (navConfig) {\n    var conditions = _.get(navConfig, 'activeWhen.condition');\n\n    if (conditions) {\n      var conditionExpression = exports.getConditionExpression(conditions, navConfig);\n      var isValidCondition = conditionService.evaluateCondition($scope, conditionExpression);\n      var expressionLength = conditionExpression.length;\n\n      if (_.isObject(conditionExpression)) {\n        expressionLength = JSON.stringify(conditionExpression).length;\n      }\n\n      if (isValidCondition && expressionLength > mostAppropriateConditionLength) {\n        mostAppropriateConditionLength = expressionLength;\n        mostAppropriateActionHandler = navConfig;\n      }\n    } else {\n      mostAppropriateActionHandler = navConfig;\n    }\n  });\n\n  return mostAppropriateActionHandler;\n};\nexports = {\n  getState,\n  urlProcessing,\n  getDisplayURLs,\n  creatingHyperlinkOfSelectedObjects,\n  buildEncodedParamString,\n  getConditionExpression,\n  findActiveWorkspaceNavigation\n};\nexport default exports;","map":{"version":3,"names":["browserUtils","_","conditionService","AwStateService","exports","getState","instance","urlProcessing","obj","url","stateSvc","uid","getBaseURL","href","s_uid","inherit","getDisplayURLs","objList","length","i","creatingHyperlinkOfSelectedObjects","hyperlinkText","hyperlinkString","props","object_string","uiValues","buildEncodedParamString","stateName","paramMap","stateIn","encodedParamStr","replace","relativeUrl","splitArr","split","getConditionExpression","expression","internalViewModel","conditionIndex","indexOf","substring","endConditionIndex","search","referenceCondition","evaluatedCondition","get","returnExpression","findActiveWorkspaceNavigation","allNavConfigs","$scope","mostAppropriateActionHandler","mostAppropriateConditionLength","forEach","navConfig","conditions","conditionExpression","isValidCondition","evaluateCondition","expressionLength","isObject","JSON","stringify"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/navigationUtils.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods of navigation utils. This is for GWT consumption of the navigation utils.\n *\n * @module js/navigationUtils\n */\nimport browserUtils from 'js/browserUtils';\nimport _ from 'lodash';\nimport conditionService from 'js/conditionService';\nimport AwStateService from 'js/awStateService';\n\nvar exports = {};\n\n/**\n * getting $state reference. $state is injected in this way so to do the unit testing. This function is stubbed with\n * desired output in unit testing.\n *\n * @return {$state} $state reference\n */\nexport let getState = function() {\n    return AwStateService.instance;\n};\n\n/**\n * creating url of selected object\n *\n * @param {IModelObject} obj - selected object in the clipboard\n * @return {string} url of selected object\n */\nexport let urlProcessing = function( obj ) {\n    var url = '';\n    var stateSvc = exports.getState();\n    if( stateSvc ) {\n        var uid = obj.uid;\n        // s_uid is not required for creating unique url for Model Object\n        url = browserUtils.getBaseURL() + stateSvc.href( 'com_siemens_splm_clientfx_tcui_xrt_showObject', {\n            uid: uid,\n            s_uid: ''\n        }, {\n            inherit: false\n        } );\n    }\n    return url;\n};\n\n/**\n * get url of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {array} url array of selected object\n */\nexport let getDisplayURLs = function( objList ) {\n    var url = [];\n    if( objList.length > 0 ) {\n        for( var i = 0; i < objList.length; i++ ) {\n            url[ i ] = exports.urlProcessing( objList[ i ] );\n        }\n    }\n    return url;\n};\n\n/**\n * create hyperlink of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {string} hyperlink string of all the selected object\n */\nexport let creatingHyperlinkOfSelectedObjects = function( objList ) {\n    var hyperlinkText;\n    var hyperlinkString = '';\n    var url = exports.getDisplayURLs( objList );\n    for( var i = 0; i < objList.length; i++ ) {\n        hyperlinkText = objList[ i ].props.object_string.uiValues[ 0 ];\n        hyperlinkString += '<a href=\"' + url[ i ] + '\" target=\"_parent\" class=\"aw-base-osClipboardHyperlink\">' +\n            hyperlinkText + '</a><br/>';\n    }\n    return hyperlinkString;\n};\n\n/**\n * builds an encoded parameter string based on the state name and param map supplied\n *\n * @param {String} stateName - state name\n * @param {Object} paramMap - parameter map\n * @return {String} encoded parameter string\n */\nexport let buildEncodedParamString = function( stateName, paramMap ) {\n    var stateSvc = exports.getState();\n    var stateIn = stateName;\n    var encodedParamStr = '';\n\n    if( stateIn !== '.' ) {\n        stateIn = stateIn.replace( /\\./g, '_' );\n    }\n\n    var relativeUrl = stateSvc.href( stateIn, paramMap, {\n        inherit: false\n    } );\n\n    if( relativeUrl ) {\n        var splitArr = relativeUrl.split( stateName );\n        if( splitArr.length === 2 ) {\n            encodedParamStr = splitArr[ 1 ];\n        }\n    }\n\n    return encodedParamStr;\n};\n\n/**\n * Expand a string based expression to include nested conditions\n *\n * @param {String} expression - a string expression to evaluate\n * @param {Object} internalViewModel - the object containing other expressions\n * @returns {String} the new string expression\n */\nexport let getConditionExpression = function( expression, internalViewModel ) {\n    var conditionIndex = expression.indexOf( 'conditions.' );\n    if( conditionIndex > -1 ) {\n        var substring = expression.substring( conditionIndex );\n        var endConditionIndex = substring.search( '[^a-zA-Z0-9._]' );\n        endConditionIndex = endConditionIndex > -1 ? conditionIndex + endConditionIndex : expression.length;\n        var referenceCondition = expression.substring( conditionIndex, endConditionIndex );\n        var evaluatedCondition = _.get( internalViewModel, referenceCondition );\n        var returnExpression = expression.replace( referenceCondition, '(' + evaluatedCondition.expression + ')' );\n        return exports.getConditionExpression( returnExpression, internalViewModel );\n    }\n    return expression;\n};\n\n/**\n * Find active naigations  for the given workspaces..\n *\n * @param {Object} allNavConfigs - all navigations for active woorkspace\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\nexport let findActiveWorkspaceNavigation = function( allNavConfigs, $scope ) {\n    var mostAppropriateActionHandler = null;\n    var mostAppropriateConditionLength = -1;\n    _.forEach( allNavConfigs, function( navConfig ) {\n        var conditions = _.get( navConfig, 'activeWhen.condition' );\n        if( conditions ) {\n            var conditionExpression = exports.getConditionExpression( conditions, navConfig );\n            var isValidCondition = conditionService.evaluateCondition( $scope, conditionExpression );\n            var expressionLength = conditionExpression.length;\n            if( _.isObject( conditionExpression ) ) {\n                expressionLength = JSON.stringify( conditionExpression ).length;\n            }\n            if( isValidCondition &&\n                expressionLength > mostAppropriateConditionLength ) {\n                mostAppropriateConditionLength = expressionLength;\n                mostAppropriateActionHandler = navConfig;\n            }\n        } else {\n            mostAppropriateActionHandler = navConfig;\n        }\n    } );\n    return mostAppropriateActionHandler;\n};\n\nexports = {\n    getState,\n    urlProcessing,\n    getDisplayURLs,\n    creatingHyperlinkOfSelectedObjects,\n    buildEncodedParamString,\n    getConditionExpression,\n    findActiveWorkspaceNavigation\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
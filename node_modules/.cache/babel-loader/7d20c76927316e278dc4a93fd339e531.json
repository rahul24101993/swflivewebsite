{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwTextBoxValService.js\"; // Copyright (c) 2021 Siemens\n\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n/**\n * render function for AwTextBoxVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awTextBoxValRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    ...prop\n  } = props;\n  const {\n    onChange,\n    onSwChange\n  } = prop;\n  let filteredAttrs = sanitizer.sanitizeHTMLTagProps(prop, 'input');\n  delete filteredAttrs.maxLength;\n  const inputClass = getValClass(prop); // use simple non-edit val if not editing\n\n  if (!prop.fielddata.isEditable) {\n    return /*#__PURE__*/_jsxDEV(AwPropertyNonEditVal, { ...prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n  var keyPressed = (event, props) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      event.target.value = event.target.value.trim();\n      changeHandler(event, true);\n      event.target.value = '';\n      event.persist();\n      return props && props.action && props.action(event);\n    } //handle maxLength\n\n\n    const textLength = (event.target.value + event.key).trim().length;\n\n    if (textLength > prop.maxLength) {\n      event.preventDefault();\n    }\n  };\n\n  const changeHandler = function (event) {\n    let immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // provide callback handler which application can hook, with parameters: current value, old value\n\n    onSwChange && onSwChange(event.target.value, prop.value, immediate); // at last\n\n    onChange(event);\n  };\n\n  const handleBlur = (event, props) => {\n    event.target.value = event.target.value.trim(); // why call changeHandler onBlur? this breaks ACE's aw-list-filter in an aw-include in an aw-link-with-popup\n\n    if (prop.typex === 'STRINGARRAY') {\n      changeHandler(event, true); //clear value after update\n\n      event.target.value = '';\n      event.persist();\n    }\n\n    if (props && props.blurAction) {\n      event.persist();\n      return props.blurAction(event);\n    }\n  };\n\n  if (prop.typex === 'STRINGARRAY') {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      \"data-locator\": prop.label,\n      \"aria-required\": prop.isRequired,\n      placeholder: prop.placeholder,\n      className: inputClass,\n      onBlur: handleBlur,\n      onKeyPress: keyPressed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", { ...filteredAttrs,\n    type: prop.inputType ? prop.inputType : 'text',\n    \"aria-label\": prop.name,\n    className: inputClass,\n    onChange: changeHandler,\n    onKeyPress: e => keyPressed(e, props),\n    value: filteredAttrs.value || '',\n    onBlur: e => handleBlur(e, props),\n    autoComplete: \"off\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwTextBoxValService.js"],"names":["awTextBoxValRenderFunction","props","prop","onSwChange","filteredAttrs","sanitizer","inputClass","getValClass","keyPressed","event","changeHandler","textLength","immediate","onChange","handleBlur","e"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n\n/**\n * render function for AwTextBoxVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awTextBoxValRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        ...prop\n    } = props;\n    const { onChange, onSwChange } = prop;\n\n    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'input' );\n    delete filteredAttrs.maxLength;\n    const inputClass = getValClass( prop );\n\n    // use simple non-edit val if not editing\n    if( !prop.fielddata.isEditable ) {\n        return (\n            <AwPropertyNonEditVal {...prop}></AwPropertyNonEditVal>\n        );\n    }\n\n    var keyPressed = ( event, props ) => {\n        if( event.key === 'Enter' ) {\n            event.preventDefault();\n            event.target.value = event.target.value.trim();\n            changeHandler( event, true );\n            event.target.value = '';\n            event.persist();\n            return props && props.action && props.action( event );\n        }\n        //handle maxLength\n        const textLength = ( event.target.value + event.key ).trim().length;\n        if( textLength > prop.maxLength ) {\n            event.preventDefault();\n        }\n    };\n\n    const changeHandler = ( event, immediate = false ) => {\n        // provide callback handler which application can hook, with parameters: current value, old value\n        onSwChange && onSwChange( event.target.value, prop.value, immediate );\n\n        // at last\n        onChange( event );\n    };\n\n    const handleBlur = ( event, props ) => {\n        event.target.value = event.target.value.trim();\n        // why call changeHandler onBlur? this breaks ACE's aw-list-filter in an aw-include in an aw-link-with-popup\n        if( prop.typex === 'STRINGARRAY' ) {\n            changeHandler( event, true );\n            //clear value after update\n            event.target.value = '';\n            event.persist();\n        }\n\n        if( props && props.blurAction ) {\n            event.persist();\n            return props.blurAction( event );\n        }\n    };\n\n    if( prop.typex === 'STRINGARRAY' ) {\n        return (\n            <input type='text' data-locator={prop.label} aria-required={prop.isRequired} placeholder={prop.placeholder} className={inputClass} onBlur={handleBlur} onKeyPress={keyPressed}/>\n        );\n    }\n\n    return (\n        <input {...filteredAttrs}\n            type={prop.inputType ? prop.inputType : 'text'}\n            aria-label={prop.name}\n            className={inputClass}\n            onChange={changeHandler}\n            onKeyPress={( e )=>keyPressed( e, props )}\n            value={filteredAttrs.value || ''}\n            onBlur={( e )=>handleBlur( e, props )}\n            autoComplete='off'\n        />\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
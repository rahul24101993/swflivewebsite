{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2021 Siemens\n\n/* eslint-disable require-jsdoc */\n\n/* eslint-disable complexity */\n\n/**\n * This is the primary service used to create, test and manage the internal properties of ViewModelProperty Objects used\n * throughout the UniversalWidget (et al.) areas of AW. Views can create custom view models by creating a\n * ViewModelObject and adding ViewModelProperty Objects created by this service to it.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/uwPropertyService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport dmSvc from 'soa/dataManagementService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport uwDirectiveDateTimeSvc from 'js/uwDirectiveDateTimeService';\nimport eventBus from 'js/eventBus';\nimport { propTypeDate, updateDateApi, setDateTimeValues, getDBValueForDate, getUIValueForDate, clearDateTimeValues } from 'js/dateTimeProcessingService';\n/**\n * Editable State of the property object\n *\n * @private\n */\n\nvar PROP_EDITABLE = 'editable';\n/**\n * Value of the property object\n *\n * @private\n */\n\nvar PROP_VALUE = 'value';\n/**\n * Validation error of property object\n *\n * @private\n */\n\nvar PROP_ERROR = 'error';\n/**\n * Required state of property object\n *\n * @private\n */\n\nvar PROP_REQUIRED = 'required';\n/**\n * Overlay type 'viewModelPropertyOverlay', which defines that the overlay has real data(i.e\n * IViewModelProperty).\n *\n * @private\n */\n\nvar VIEW_MODEL_PROPERTY = 'viewModelPropertyOverlay';\n/**\n * Overlay type 'widgetOverlay', which defines that the overlay has widget data.\n *\n * @private\n */\n\nvar WIDGET = 'widgetOverlay';\n/**\n * Integer minimum value, which is equal to Java Integer's minimum value\n */\n\nvar _integerMinValue = -2147483648;\n/**\n * Integer maximum value, which is equal to Java Integer's maximum value\n */\n\n\nvar _integerMaxValue = 2147483647;\n/**\n * Cache document ng element to retrieve the scope and trigger digest cycle.\n *\n * @private\n */\n\n/** revisitme yogesh\n   * Hint: we may not be required this\n var _docNgElement = ngModule.element( document.body );\n  */\n\n/**\n * Cache $q promise service.\n *\n * @private\n */\n\n/**\n * {dateTimeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {localeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {clientDataModel} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {dataManagementService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {$rootScope} Cached reference to the 'root' scope associated with the top level (i.e. document) DOM Element.\n */\n\nvar _documentScope = null;\n/**\n * {StringMap} Cached 'basic' locale text bundle.\n */\n\nvar _localTextBundle;\n/**\n * {Array} Promise that need to be resolved when debounced function executes eventually\n */\n\n\nvar _pingDeferred = null;\n/**\n * @param {String} stringValue -\n *\n * @return {boolean} TRUE if given value is not NULL and equals 'true', 'TRUE' or '1'.\n */\n\nvar _isPropertyValueTrue = function (stringValue) {\n  return stringValue && stringValue !== '0' && (String(stringValue).toUpperCase() === 'TRUE' || stringValue === '1');\n};\n/**\n * Set locale specific string used for array UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\n\n\nfunction _setArrayText(vmProp, localTextBundle) {\n  if (!vmProp.isRequired && (_.isUndefined(vmProp.propertyRequiredText) || vmProp.propertyRequiredText.length === 0)) {\n    vmProp.propertyRequiredText = localTextBundle.ARRAY_PLACEHOLDER_TEXT;\n  } // Set array button's tool tips\n\n\n  vmProp.moveUpButtonTitle = localTextBundle.MOVE_UP_BUTTON_TITLE;\n  vmProp.moveDownButtonTitle = localTextBundle.MOVE_DOWN_BUTTON_TITLE;\n  vmProp.removeButtonTitle = localTextBundle.REMOVE_BUTTON_TITLE;\n} // _setArrayText\n\n/**\n * Set locale specific string used for radio button UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\n\n\nfunction _setRadioText(vmProp, localTextBundle) {\n  if (!vmProp.propertyRadioTrueText) {\n    vmProp.propertyRadioTrueText = localTextBundle.RADIO_TRUE;\n  }\n\n  if (!vmProp.propertyRadioFalseText) {\n    vmProp.propertyRadioFalseText = localTextBundle.RADIO_FALSE;\n  }\n  /**\n   * Handles setting of custom labels and vertical alignment attributes when directives are used natively\n   */\n\n\n  if (vmProp.radioBtnApi) {\n    if (vmProp.radioBtnApi.customTrueLabel) {\n      vmProp.propertyRadioTrueText = vmProp.radioBtnApi.customTrueLabel;\n    }\n\n    if (vmProp.radioBtnApi.customFalseLabel) {\n      vmProp.propertyRadioFalseText = vmProp.radioBtnApi.customFalseLabel;\n    }\n\n    if (vmProp.radioBtnApi.vertical) {\n      vmProp.vertical = vmProp.radioBtnApi.vertical;\n    }\n  }\n}\n/**\n * Helper function to avoid multiple calls to load objects by using lodash debounce\n */\n\n\nvar _pingLoadObjects = _.debounce(function (uidsArray, vmProp) {\n  dmSvc.loadObjects(uidsArray).then(function () {\n    exports.setValue(vmProp, vmProp.dbValue);\n\n    if (vmProp.propApi && vmProp.propApi.fireValueChangeEvent) {\n      vmProp.propApi.fireValueChangeEvent();\n    }\n\n    if (_pingDeferred) {\n      _pingDeferred.resolve();\n\n      _pingDeferred = null;\n    }\n  }, function (error) {\n    if (vmProp.propApi && vmProp.propApi.fireUIValidationErrorEvent) {\n      vmProp.uiValue = '';\n      vmProp.error = error.message;\n      vmProp.clientValidationError = error.message;\n      vmProp.hasServerValidationError = true;\n      vmProp.propApi.fireUIValidationErrorEvent(error.message);\n    }\n\n    if (_pingDeferred) {\n      _pingDeferred.reject(error);\n\n      _pingDeferred = null;\n    }\n  });\n}, 250);\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n * <P>\n * Note: The properties shown below in the 'members' section are defined, understood and created by this class\n * constructor.\n * <P>\n * Note: The properties shown below in the 'properties' section are marked as '(Optional)' and are defined and\n * understood, but not created by this class constructor. The are defined as needed by the various APIs of the\n * uwPropertyService.\n *\n * @class ViewModelProperty\n *\n * @memberof module:js/uwPropertyService\n *\n * @param {String} propertyName - The name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - User displayable name of the property\n * @param {String} dataType - Data type of the property\n * @param {Array} dbValue - Real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValuesIn - Display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n *\n * @property {String} inputType - (Optional) input type\n *\n * @property {Object} sourceObjectLastSavedDate - (Optional) source object last saved date\n *\n * @property {String} propertyRadioTrueText - (Optional) Used for boolean Radio button 'true' label\n *\n * @property {String} propertyRadioFalseText - (Optional) Used for boolean Radio button 'false' label\n *\n * @property {boolean} vertical - (Optional) Used for boolean radio button. TRUE to show the layout of the radio\n *           button vertically. FALSE for horizontal layout.\n *\n * @property {ObjectArray} displayValsModel - (Optional) This is only used for arrays so that we can maintain\n *           the selection of the rows in array widget.\n *\n * @property {String} parentUid - (Optional) This is the UID of the original IModelObject (in the client data\n *           model cache) that was used to originate this ViewModelProperty.\n *\n * @property {Object} newValue - (Optional) new value\n *\n * @property {Object} propApi - (Optional) property API\n *\n * @property {Object} oldValue - (Optional) old value\n *\n * @property {ObjectArray} oldValues - (Optional) old values\n *\n * @property {String} propertyRequiredText - (Optional) Localized text seen as the placeholder text in a field\n *           when the property is 'Required'.\n *\n * @property {Number} maxLength - (Optional) If not equal to '-1' or '0', this parameter specifies the maximum\n *           number of characters allowed in a string type property.\n *\n * @property {Number} numberOfCharacters - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of characters in a string type property.\n *\n * @property {Number} numberOfLines - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of lines allowed in a property.\n *\n * @property {String} moveUpButtonTitle - (Optional) Localized title for 'move-up' button in array widget.\n *\n * @property {String} moveDownButtonTitle - (Optional) Localized title for 'move-down' button in array widget.\n *\n * @property {String} removeButtonTitle - (Optional) Localized title for 'remove' button used only for array\n *           widget.\n *\n * @property {String} referenceTypeName - (Optional) reference type name\n *\n * @property {String} clientValidationError - (Optional) client validation error\n *\n * @property {String} hasServerValidationError - (Optional) has server validation error?\n *\n * @property {boolean} hasLov - (Optional) TRUE if the property has a specific list of values associated with\n *           it.\n *\n * @property {String} renderingHint - (Optional) Depending on the type, this string indicates some variation in\n *           how the property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include\n *           'radiobutton', 'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label',\n *           'textbox', 'textfield', 'textarea', 'longtext').\n *\n * @property {boolean} autofocus - (Optional) auto focus?\n *\n * @property {boolean} dirty - (Optional) TRUE if the value of the property has changed (been edited) since it\n *           was initially displayed.\n *\n * @property {Number} maxRowCount - (Optional) Used only for array widget. If != -1, then the array widget will\n *           only show the scroll bar after max row count is reached.\n *\n * @property {StringArray} newDisplayValues - (Optional) new display values\n *\n * @property {Object} propertyDescriptor - (Optional) property descriptor\n *\n * @property {boolean} initialize - (Optional) initialize?\n */\n\n\nvar ViewModelProperty = function (propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn) {\n  // eslint-disable-line complexity\n  var vmProp = this;\n  var displayValuesFinal = displayValuesIn || [];\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property propertyName\n   *\n   * {String} Internal name of the property.\n   */\n\n  vmProp.propertyName = propertyName;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property propertyDisplayName\n   *\n   * {String} User displayable name of the property (a.k.a. the property's 'label').\n   */\n\n  vmProp.propertyDisplayName = propertyDisplayName;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property type\n   *\n   * {String} Data type of the property. Valid values are: 'CHAR', 'DATE', 'DOUBLE', 'FLOAT', 'INTEGER',\n   * 'BOOLEAN', 'SHORT', 'STRING' & 'OBJECT'.\n   */\n\n  vmProp.type = dataType;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property dbValue\n   *\n   * {Object} The internal (database) representation of the property's value.\n   * <P>\n   * Note: For 'DATE' type properties, the 'dbValueIn' is assumed to be of type 'double' and represents the\n   * number of milliseconds since UNIX 'epoch' (January 1, 1970 00:00:00 GMT).\n   */\n\n  vmProp.dbValue = dbValue;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property displayValues\n   *\n   * {StringArray} Array of strings representing the current user displayable value(s) of the property.\n   */\n\n  vmProp.displayValues = displayValuesFinal;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isNull\n   *\n   * {boolean} TRUE if the current property value is 'no value'. FALSE if the value is valid as is.\n   * <P>\n   * Note: This option is used in cases when the property's value has not been set yet but that there is no\n   * way to represent this state in a simple string (e.g. Is the string 'empty' or not yet set? Is the 'empty'\n   * string an indication of an integer value of '0'?).\n   */\n\n  vmProp.isNull = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property editable\n   *\n   * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n   * read-only.\n   */\n\n  vmProp.editable = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isEnabled\n   *\n   * {boolean} TRUE if the property's value should be shown normally and (if also editable) react to user\n   * input. FALSE if the property's value should be shown 'greyed out' and not react to user input (even if\n   * editable).\n   */\n\n  vmProp.isEnabled = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isRichText\n   *\n   * {boolean} TRUE if the string value of the property is in HTML format and should be displayed using HTML\n   * formatting rules and edited with the 'rich text' editor.\n   */\n\n  vmProp.isRichText = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isRequired\n   *\n   * {boolean} TRUE if the property's value is required to successfully complete some operation that uses it.\n   * FALSE if the property's value is optional.\n   */\n\n  vmProp.isRequired = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isLocalizable\n   *\n   * {boolean} TRUE if the property value's UI should include the option to allow any user entered value to be\n   * converted from local language (as entered) into some other system language. Note: The UI necessary for\n   * translating the value is not currently supported in Active Workspace 2.4.\n   */\n\n  vmProp.isLocalizable = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isDisplayable\n   *\n   * {boolean} is displayable?\n   */\n\n  vmProp.isDisplayable = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isAutoAssignable\n   *\n   * {boolean} TRUE if the property's value can/should be assigned automatically by Teamcenter. FALSE if the\n   * property's value is not normally assigned/controlled by Teamcenter.\n   * <P>\n   * Note: The UI necessary for assigning this value is not currently supported in Active Workspace 2.4.\n   */\n\n  vmProp.isAutoAssignable = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property hasInitialValue\n   *\n   * {boolean} has initial value?\n   */\n\n  vmProp.hasInitialValue = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isArray\n   *\n   * {boolean} TRUE if the property can have more than one value in an ordered list. FALSE if the property can\n   * have only a single value.\n   * <P>\n   * Note: The UI necessary for displaying/editing the multiple value is not currently supported in Active\n   * Workspace 2.4.\n   */\n\n  vmProp.isArray = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property valueUpdated\n   *\n   * {boolean} value updated?\n   */\n\n  vmProp.valueUpdated = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property displayValueUpdated\n   *\n   * {boolean} display value updated?\n   */\n\n  vmProp.displayValueUpdated = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property editableInViewModel\n   *\n   * {boolean} editable in view model?\n   */\n\n  vmProp.editableInViewModel = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isPropertyModifiable\n   *\n   * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n   * read-only.\n   */\n\n  vmProp.isPropertyModifiable = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isEditable\n   *\n   * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n   * read-only.\n   */\n\n  vmProp.isEditable = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property arrayLength\n   *\n   * {Number} array length\n   */\n\n  vmProp.arrayLength = -1;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property error\n   *\n   * {String} The message that should be displayed when some aspect of the property's value is not correct.\n   * This value must be 'null' or an empty string to not have the error be displayed.\n   */\n\n  vmProp.error = null;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property propertyLabelDisplay\n   *\n   * {String} property label display\n   * empty by default\n   * see declReact/viewModelService.js for precedence\n   */\n\n  vmProp.propertyLabelDisplay = '';\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property editLayoutSide\n   *\n   * {boolean} edit layout side\n   */\n\n  vmProp.editLayoutSide = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property uiValue\n   *\n   * {String} (Derived) A 'non-null' string containing comma separated values as specified in the\n   * 'displayValuesIn' parameter given in the constructor.\n   */\n\n  vmProp.uiValue = exports.getUiValue(displayValuesFinal);\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property overlayType\n   *\n   * {String} overlay type\n   */\n\n  vmProp.overlayType = VIEW_MODEL_PROPERTY;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property value\n   *\n   * {Object} database value\n   */\n\n  vmProp.value = _.cloneDeep(dbValue); // for the purposes of lovs with initial values, we are expecting prevDisplayValue\n  // to be same as uiOriginalValue. This dependency is a bit of a historical accident\n  // that needs to be addressed as part of a vmProp re-organization.\n  // for now, re-introducing the intialization of this param.\n\n  vmProp.prevDisplayValues = displayValuesFinal;\n  /**\n   * @private\n   *\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property dateApi\n   *\n   * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n   * is created by a Universal Widget and of type \"DATE\".\n   *\n   * @property dateApi.isDateEnabled\n   *\n   * {boolean} TRUE if the \"DATE\" type Universal Widget should display a date field.\n   *\n   * @property dateApi.isTimeEnabled\n   *\n   * {boolean} TRUE if the \"DATE\" type Universal Widget should display a time field.\n   */\n\n  vmProp.dateApi = {\n    isDateEnabled: true,\n    isTimeEnabled: true\n  };\n  /**\n   * @private\n   *\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property radioBtnApi\n   *\n   * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n   * is created by a Universal Widget and of a type displayed as a groupd of 'radio buttons'.\n   */\n\n  vmProp.radioBtnApi = {};\n  /**\n   * -----------------------------------------------------------------------<BR>\n   * -----------------------------------------------------------------------<BR>\n   * Finish initialization of class properties <BR>\n   * -----------------------------------------------------------------------<BR>\n   * -----------------------------------------------------------------------<BR>\n   */\n\n  /**\n   */\n\n  var vmPropType = vmProp.type;\n\n  if (vmPropType === 'STRING' || vmPropType === 'STRINGARRAY' || vmPropType === 'CHAR') {\n    vmProp.inputType = 'text';\n  } else if (vmPropType === 'OBJECT') {\n    vmProp.dbValues = [vmProp.dbValue];\n  } else if (vmPropType === 'INTEGER' || vmPropType === 'INTEGERARRAY') {\n    if (dbValue) {\n      if (_.isString(dbValue)) {\n        vmProp.dbValue = Number(dbValue);\n        vmProp.value = vmProp.dbValue;\n      } else if (_.isArray(dbValue)) {\n        var doubleDbValues = [];\n\n        for (var l = 0; l < dbValue.length; l++) {\n          if (isFinite(dbValue[l])) {\n            doubleDbValues.push(Number(dbValue[l]));\n          } else if (dbValue[l] === '') {\n            doubleDbValues.push(dbValue[l]);\n          }\n        }\n\n        vmProp.dbValue = doubleDbValues;\n        vmProp.value = _.cloneDeep(doubleDbValues);\n      } else {\n        vmProp.dbValue = dbValue;\n        vmProp.value = vmProp.dbValue;\n      }\n    }\n  } else if (vmPropType === 'BOOLEAN' || vmPropType === 'BOOLEANARRAY') {\n    if (declUtils.isNil(dbValue)) {\n      vmProp.dbValue = null;\n      vmProp.value = null; // Note: If the server had no opinion on this boolean, neither does the 'value' property.\n    } else if (_.isString(dbValue)) {\n      vmProp.dbValue = _isPropertyValueTrue(vmProp.dbValue);\n      vmProp.value = vmProp.dbValue;\n    } else if (_.isArray(dbValue)) {\n      var booleanDbValues = [];\n\n      for (var k = 0; k < dbValue.length; k++) {\n        booleanDbValues[k] = _isPropertyValueTrue(dbValue[k]);\n      }\n\n      vmProp.dbValue = booleanDbValues;\n      vmProp.value = _.cloneDeep(booleanDbValues);\n    }\n\n    if (_localTextBundle) {\n      _setRadioText(vmProp, _localTextBundle);\n    } else {\n      localeSvc.getTextPromise().then(function (localTextBundle) {\n        _localTextBundle = localTextBundle;\n\n        _setRadioText(vmProp, _localTextBundle);\n      });\n    }\n  } else if (vmPropType === 'DATE' || vmPropType === 'DATEARRAY') {\n    if (_.isString(dbValue)) {\n      vmProp.dbValue = new Date(dbValue).getTime();\n      vmProp.value = vmProp.dbValue;\n    } else if (_.isNumber(dbValue)) {\n      if (dbValue !== 0) {\n        vmProp.dbValue = new Date(dbValue).getTime();\n        vmProp.value = vmProp.dbValue;\n      }\n    } else if (_.isArray(dbValue)) {\n      var dateDbValues = [];\n\n      for (var j = 0; j < dbValue.length; j++) {\n        dateDbValues[j] = new Date(dbValue[j]).getTime();\n      }\n\n      vmProp.dbValue = dateDbValues;\n      vmProp.value = _.cloneDeep(dateDbValues);\n    }\n  } else if (vmPropType === 'DOUBLE' || vmPropType === 'DOUBLEARRAY') {\n    if (dbValue) {\n      if (_.isString(dbValue)) {\n        vmProp.dbValue = Number(dbValue);\n        vmProp.value = vmProp.dbValue;\n      } else if (_.isArray(dbValue)) {\n        var doubleDbValues1 = [];\n\n        for (var i = 0; i < dbValue.length; i++) {\n          if (dbValue[i]) {\n            doubleDbValues1.push(Number(dbValue[i]));\n          } else if (dbValue[i] === '') {\n            doubleDbValues1.push(dbValue[i]);\n          }\n        }\n\n        vmProp.dbValue = doubleDbValues1;\n        vmProp.value = _.cloneDeep(doubleDbValues1);\n      } else if (dbValue) {\n        vmProp.dbValue = dbValue;\n        vmProp.value = vmProp.dbValue;\n      }\n    }\n  }\n};\n/**\n * @param {StringArray} uiValues - UI/display value array\n * @returns {String} UI value\n */\n\n\n_c2 = ViewModelProperty;\n_c = ViewModelProperty;\nexport let getUiValue = function (uiValues) {\n  if (!uiValues || uiValues.length === 0) {\n    return '';\n  }\n\n  if (uiValues.length > 1) {\n    var uiValue = uiValues[0];\n\n    for (var ndx = 1; ndx < uiValues.length && ndx < 4; ndx++) {\n      uiValue += ', ' + uiValues[ndx];\n    }\n\n    if (ndx < uiValues.length) {\n      uiValue += ', ...';\n    }\n\n    return uiValue;\n  }\n\n  return uiValues[0];\n};\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n *\n * @param {String} propertyName - the name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - user displayable name of the property\n * @param {String} dataType - data type of the property\n * @param {Object} dbValue - real value of the property. The internal (database) representation of the\n *            property's value.\n * @param {StringArray} displayValuesIn - display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n */\n\nexport let createViewModelProperty = function (propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn) {\n  return new ViewModelProperty(propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn);\n};\n/**\n * Update the model data. The view model should use this method to update property data\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n * @param {Boolean} isNull - is the property value null\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n * @param {Boolean} isModifiable - TRUE if the property is modifiable\n * @param {Object} sourceObjectLastSavedDate - last saved date of source object\n */\n\nexport let updateModelData = function (vmProp, value, displayValues, isNull, isEditable, isModifiable, sourceObjectLastSavedDate) {\n  var displayValuesFinal = displayValues === null ? [] : displayValues;\n  vmProp.displayValues = displayValuesFinal;\n  vmProp.isNull = isNull;\n  vmProp.editable = isEditable;\n  vmProp.isPropertyModifiable = isModifiable;\n  vmProp.uiValue = exports.getUiValue(displayValuesFinal);\n  vmProp.sourceObjectLastSavedDate = sourceObjectLastSavedDate || vmProp.sourceObjectLastSavedDate;\n\n  if (_.isArray(value) && !vmProp.isArray) {\n    vmProp.value = value.slice(0);\n  } else {\n    vmProp.value = value;\n  }\n\n  if (vmProp.prevDisplayValues) {\n    vmProp.prevDisplayValues = _.clone(vmProp.displayValues);\n  }\n\n  if (vmProp.uiValues) {\n    vmProp.uiValues = _.clone(vmProp.displayValues);\n  }\n\n  if (vmProp.isArray) {\n    vmProp.displayValsModel = [];\n\n    for (var i = 0; i < vmProp.displayValues.length; i++) {\n      vmProp.displayValsModel.push({\n        displayValue: vmProp.displayValues[i],\n        selected: false,\n        isInEditMode: false\n      });\n    }\n  }\n\n  if (!exports.isModified(vmProp)) {\n    vmProp.dbValue = _.cloneDeep(value);\n  }\n};\n/**\n * Copy the model data. The view model should use this method to copy model data\n *\n * @param {ViewModelProperty} targetProperty - ViewModelProperty object that will be updated.\n * @param {ViewModelProperty} updatedProperty - ViewModelProperty that has the updated information.\n */\n\nexport let copyModelData = function (targetProperty, updatedProperty) {\n  exports.updateModelData(targetProperty, updatedProperty.value, updatedProperty.displayValues, updatedProperty.isNull, updatedProperty.editable, updatedProperty.isPropertyModifiable, updatedProperty.sourceObjectLastSavedDate);\n\n  if (updatedProperty.dbValues && updatedProperty.dbValues.length > 0) {\n    targetProperty.dbValues = updatedProperty.dbValues.slice(0);\n  } else {\n    targetProperty.dbValues = [];\n  }\n};\n/**\n * Set's the parent object uid in view model property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty\n * @param {String} sourceObjectUid - source object UID\n */\n\nexport let setSourceObjectUid = function (vmProp, sourceObjectUid) {\n  vmProp.parentUid = sourceObjectUid;\n};\n/**\n * Retrieve the source object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\n\nexport let getSourceObjectUid = function (vmProp) {\n  var sourceObjectUid = vmProp.parentUid;\n\n  if (!_.isEmpty(vmProp.intermediateObjectUids)) {\n    sourceObjectUid = vmProp.intermediateObjectUids[vmProp.intermediateObjectUids.length - 1];\n  }\n\n  return sourceObjectUid;\n};\n/**\n * Retrieve the relation object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\n\nexport let getRelationObjectUid = function (vmProp) {\n  var sourceObjectUid = vmProp.parentUid;\n\n  if (vmProp.intermediateObjectUids && vmProp.intermediateObjectUids.length > 0) {\n    sourceObjectUid = vmProp.intermediateObjectUids[0];\n  }\n\n  return sourceObjectUid;\n};\n/**\n * Returns the property name as defined in the source object for this view model property .\n *\n * For e.g. this method would return \"object_name\" for a view Model property with name\n * REF(items_tag,Item).object_name\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String} - Source property name\n */\n\nexport let getPropertyNameInSourceObject = function (vmProp) {\n  var sourcePropertyName = vmProp.propertyName;\n\n  if (vmProp.isDCP || !_.isEmpty(vmProp.intermediateObjectUids)) {\n    if (sourcePropertyName.includes('.')) {\n      sourcePropertyName = sourcePropertyName.split('.').slice(-1).pop();\n    }\n  }\n\n  return sourcePropertyName;\n};\n/**\n * Trigger digest cycle of root scope so that widgets get reflected to the overlay object updates.\n */\n\n/** revisitme yogesh\n  * Hint: we don't need this\n export let triggerDigestCycle = function() {\n     // trigger angular digest cycle on root scope so that value updates get reflected\n     if( _documentScope ) {\n         _documentScope.$evalAsync();\n     } else if( _docNgElement && _docNgElement.scope() ) {\n         _documentScope = _docNgElement.scope();\n         _documentScope.$evalAsync();\n     }\n };\n */\n\n/**\n * Initialize dateApi with initial value if provided from dbValue\n *\n *  @param {ViewModelProperty} props - ViewModelProperty object that will be updated.\n *\n */\n\nexport const initializeDateApiValues = props => {\n  let dateApi = props.dateApi;\n  let jsDate = new Date(props.dbValue);\n  jsDate = dateTimeSvc.getJSDate(jsDate);\n  var isDateNull = true;\n\n  if (!isNaN(jsDate)) {\n    if (!dateTimeSvc.isNullDate(jsDate)) {\n      isDateNull = false;\n\n      if (dateApi.isDateEnabled) {\n        props.dateApi.dateObject = jsDate;\n        props.dateApi.dateValue = uwDirectiveDateTimeSvc.formatDate(jsDate);\n      }\n\n      if (dateApi.isTimeEnabled) {\n        props.dateApi.timeValue = dateTimeSvc.formatTime(jsDate);\n      }\n    }\n  }\n\n  if (isDateNull) {\n    if (dateApi.isDateEnabled) {\n      props.dateApi.dateObject = dateTimeSvc.getNullDate();\n      props.dateApi.dateValue = '';\n    }\n\n    if (dateApi.isTimeEnabled && props.type !== 'DATEARRAY') {\n      props.dateApi.timeValue = '';\n    }\n  }\n};\n/**\n * Set the internal value of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n */\n\nexport let setValue = function (vmProp, value) {\n  var sameAsOriginal = _.isEqual(value, vmProp.value);\n\n  if (!sameAsOriginal || vmProp.valueUpdated && !_.isEqual(value, vmProp.newValue)) {\n    vmProp.valueUpdated = true;\n    /**\n     * This happens in case of CasCade Suggestive LOV, When user changes value in first LOV, for dependent\n     * LOV value comes as [\"\"] ( array of empty string) and it causes JSON parsing error for soa call.\n     */\n\n    if (!vmProp.isArray && _.isArray(value) && value.length > 0) {\n      vmProp.dbValue = value[0];\n    } else {\n      vmProp.dbValue = value;\n    }\n\n    if (vmProp.isArray) {\n      vmProp.dbValues = value;\n    }\n\n    if (_.isArray(value) && !vmProp.isArray) {\n      vmProp.newValue = _.cloneDeep(value[0]);\n    } else {\n      vmProp.newValue = _.cloneDeep(value);\n    }\n\n    vmProp.error = null; // Always update display values\n    // Do this first in case property change listeners want to change to something else\n\n    exports.updateDisplayValues(vmProp, exports.getDisplayValues(vmProp));\n    updateDateApi(vmProp);\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_VALUE);\n    }\n  }\n};\n/**\n * Set the old value of the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} oldValues - Old Value of property.\n */\n\nexport let setOldValues = function (vmProp, oldValues) {\n  var oldValuesFinal = oldValues === null ? [] : oldValues;\n  vmProp.oldValues = oldValuesFinal;\n  vmProp.oldValue = exports.getUiValue(oldValuesFinal);\n};\n/**\n * Set display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\n\nexport let setDisplayValue = function (vmProp, displayValues) {\n  var sameAsOriginal = !vmProp.prevDisplayValues || _.isEqual(displayValues, vmProp.prevDisplayValues);\n\n  if (!vmProp.displayValueUpdated && !sameAsOriginal || vmProp.displayValueUpdated && !_.isEqual(displayValues, vmProp.newDisplayValues)) {\n    vmProp.displayValueUpdated = !sameAsOriginal;\n    vmProp.error = null;\n    exports.updateDisplayValues(vmProp, displayValues);\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_VALUE);\n    }\n  }\n};\n/**\n * Set widget display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\n\nexport let setWidgetDisplayValue = function (vmProp, displayValues) {\n  var sameAsOriginal = _.isEqual(displayValues, vmProp.displayValues);\n\n  if (!sameAsOriginal) {\n    exports.updateDisplayValues(vmProp, displayValues);\n  }\n};\n/**\n * Set 'isEnabled' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEnabled - TRUE if the property's value should be shown normally and (if also editable)\n *            react to user input. FALSE if the property's value should be shown 'greyed out' and not react to\n *            user input (even if editable).\n */\n\nexport let setIsEnabled = function (vmProp, isEnabled) {\n  vmProp.isEnabled = isEnabled;\n};\n/**\n * Set 'isRichText' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRichText - TRUE if the string value of the property is in HTML format and should be\n *            displayed using HTML formatting rules and edited with the 'rich text' editor.\n */\n\nexport let setIsRichText = function (vmProp, isRichText) {\n  vmProp.isRichText = isRichText;\n};\n/**\n * Set 'isNull' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isNull - TRUE if the current property value is 'no value'. FALSE if the value is valid as\n *            is.\n */\n\nexport let setIsNull = function (vmProp, isNull) {\n  vmProp.isNull = isNull;\n};\n/**\n * Set 'isRequired' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRequired - TRUE if the property's value is required to sucessfully complete some operation\n *            that uses it. FALSE if the property's value is optional.\n */\n\nexport let setIsRequired = function (vmProp, isRequired) {\n  if (vmProp.isRequired !== isRequired) {\n    vmProp.isRequired = isRequired;\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_REQUIRED);\n    } // Set required place holder text if 'isRequired' flag is true\n\n\n    if (vmProp.isRequired && !vmProp.propertyRequiredText) {\n      if (_localTextBundle) {\n        vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n      } else {\n        localeSvc.getTextPromise().then(function (localTextBundle) {\n          _localTextBundle = localTextBundle;\n          vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n        });\n      }\n    }\n  }\n};\n/**\n * Set the place holder text on the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} placeHolderText - The place holder text\n */\n\nexport let setPlaceHolderText = function (vmProp, placeHolderText) {\n  vmProp.propertyRequiredText = placeHolderText;\n};\n/**\n * Set 'isLocalizable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isLocalizable - TRUE if the property value's UI should include the option to alow any user\n *            entered value to be converted from local language (as entered) into some other system language.\n */\n\nexport let setIsLocalizable = function (vmProp, isLocalizable) {\n  vmProp.isLocalizable = isLocalizable;\n  vmProp.uwAnchor = '';\n\n  if (isLocalizable && (vmProp.type === 'STRING' || vmProp.type === 'STRINGARRAY')) {\n    vmProp.uwAnchor = 'aw_multiLanguageProperty';\n  }\n};\n/**\n * Set 'isDisplayable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isDisplayable - isDisplayable state of ViewModelProperty.\n */\n\nexport let setIsDisplayable = function (vmProp, isDisplayable) {\n  vmProp.isDisplayable = isDisplayable;\n};\n/**\n * Set 'isAutoAssign' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssign - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\n\nexport let setIsAutoAssign = function (vmProp, isAutoAssign) {\n  vmProp.isAutoAssign = isAutoAssign;\n};\n/**\n * Set 'isAutoAssignable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssignable - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\n\nexport let setIsAutoAssignable = function (vmProp, isAutoAssignable) {\n  vmProp.isAutoAssignable = isAutoAssignable;\n};\n/**\n * Set 'hasInitialValue' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} hasInitialValue - TRUE if the property has initial value. FALSE if the property does not\n *            have initial value.\n */\n\nexport let setHasInitialValue = function (vmProp, hasInitialValue) {\n  vmProp.hasInitialValue = hasInitialValue;\n};\n/**\n * Set 'maxLength' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Number} maxLength - If not equal to '-1' or '0', this parameter specifies the maximum number of\n *            characters allowed in a string type property.\n */\n\nexport let setLength = function (vmProp, maxLength) {\n  if (maxLength !== -1 && maxLength !== 0) {\n    vmProp.maxLength = maxLength;\n  }\n};\n/**\n * Set 'numberOfCharacters' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfCharacters - If not equal to '-1' or '0', this parameter specifies the number of\n *            characters in a string type property.\n */\n\nexport let setNumberOfCharacters = function (vmProp, numberOfCharacters) {\n  if (numberOfCharacters !== -1 && numberOfCharacters !== 0) {\n    vmProp.numberOfCharacters = numberOfCharacters;\n  }\n};\n/**\n * Set 'numberOfLines' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfLines - If not equal to '-1' or '0', this parameter specifies the number of lines\n *            allowed in a property.\n */\n\nexport let setNumberOfLines = function (vmProp, numberOfLines) {\n  if (numberOfLines !== -1 && numberOfLines !== 0) {\n    vmProp.numberOfLines = numberOfLines;\n  }\n};\n/**\n * Set 'isArray' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isArray - TRUE if the property can have more than one value in an ordered list. FALSE if the\n *            property can have only a single value.\n */\n\nexport let setIsArray = function (vmProp, isArray) {\n  if (vmProp.isArray !== isArray) {\n    vmProp.isArray = isArray; // Set array place holder text if 'isArray' flag is true and the property is not required.\n\n    if (vmProp.isArray) {\n      if (!_.isArray(vmProp.dbValue)) {\n        vmProp.dbValue = [];\n        vmProp.value = [];\n      }\n\n      if (_localTextBundle) {\n        _setArrayText(vmProp, _localTextBundle);\n      } else {\n        localeSvc.getTextPromise().then(function (localTextBundle) {\n          _localTextBundle = localTextBundle;\n\n          _setArrayText(vmProp, _localTextBundle);\n        });\n      }\n    }\n\n    vmProp.displayValsModel = [];\n    var nVal = vmProp.displayValues.length;\n\n    for (var i = 0; i < nVal; i++) {\n      vmProp.displayValsModel.push({\n        displayValue: vmProp.displayValues[i],\n        selected: false,\n        isInEditMode: false\n      });\n    }\n  }\n};\n/**\n * Set 'arrayLength' state of ViewModelProperty. Applies only if the property is an array\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} arrayLength - set the array length. Set \"-1\" if unlimited array.\n */\n\nexport let setArrayLength = function (vmProp, arrayLength) {\n  vmProp.arrayLength = arrayLength;\n};\n/**\n * Set 'referenceTypeName' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} typeName - set reference type name of ViewModelProperty.\n */\n\nexport let setReferenceType = function (vmProp, typeName) {\n  vmProp.referenceTypeName = typeName;\n};\n/**\n * Set data type of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} dataType - data type of ViewModelProperty.\n */\n\nexport let setDataType = function (vmProp, dataType) {\n  vmProp.type = dataType;\n};\n/**\n * Set 'error' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} error - The message that should be displayed when some aspect of the property's value is not\n *            correct. This value must be 'null' or an empty string to not have the error be displayed.\n */\n\nexport let setError = function (vmProp, error) {\n  if (vmProp.error !== error) {\n    vmProp.error = error;\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_ERROR);\n    }\n  }\n};\n/**\n * Set client validation error of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} clientValidationError - set client validation error of ViewModelProperty.\n */\n\nexport let setClientValidationError = function (vmProp, clientValidationError) {\n  vmProp.clientValidationError = clientValidationError;\n};\n/**\n * Set server validation error flag of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} hasServerValidationError - set server validation error flag of ViewModelProperty.\n */\n\nexport let setServerValidationError = function (vmProp, hasServerValidationError) {\n  vmProp.hasServerValidationError = hasServerValidationError;\n};\n/**\n * Set property display name of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} propertyDisplayName - user displayable name of ViewModelProperty.\n */\n\nexport let setPropertyDisplayName = function (vmProp, propertyDisplayName) {\n  vmProp.propertyDisplayName = propertyDisplayName;\n};\n/**\n * Set property label display of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} propertyLabelDisplay - String value of property label display.\n */\n\nexport let setPropertyLabelDisplay = function (vmProp, propertyLabelDisplay) {\n  vmProp.propertyLabelDisplay = propertyLabelDisplay; // point-fix for xrt labeldisplay=titled issue...\n  // factor with declViewModelService.getLabelPlacement()?\n\n  if (vmProp.fielddata && propertyLabelDisplay === 'PROPERTY_LABEL_AT_TOP') {\n    vmProp.fielddata.labelPlacement = 'top';\n  }\n};\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} resetValues - True is values needs to be updated\n */\n\nfunction _resetPropertyAndResetUpdates(vmProp, resetValues) {\n  var fireEvent = false;\n\n  if (vmProp.valueUpdated) {\n    vmProp.valueUpdated = false;\n    fireEvent = true;\n  }\n\n  if (vmProp.displayValueUpdated) {\n    vmProp.displayValueUpdated = false;\n    fireEvent = true;\n  }\n\n  if (vmProp.error) {\n    vmProp.error = null;\n\n    if (!fireEvent && vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_ERROR);\n    }\n  }\n\n  if (fireEvent) {\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_VALUE);\n    }\n\n    if (resetValues) {\n      exports.resetValues(vmProp);\n    }\n  }\n}\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\n\nexport let resetUpdates = function (vmProp) {\n  _resetPropertyAndResetUpdates(vmProp, true);\n};\n/**\n * Sets the value and displayValues with the updated 'new' values.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let replaceValuesWithNewValues = function (vmProp) {\n  if (vmProp.valueUpdated) {\n    vmProp.value = _.cloneDeep(vmProp.newValue);\n  }\n\n  if (vmProp.displayValueUpdated) {\n    if (vmProp.prevDisplayValues) {\n      vmProp.prevDisplayValues = _.clone(vmProp.displayValues);\n    }\n\n    vmProp.displayValues = _.clone(vmProp.newDisplayValues);\n  }\n};\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let resetProperty = function (vmProp) {\n  _resetPropertyAndResetUpdates(vmProp, false);\n};\n/**\n * Reset db values and display values back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let resetValues = function (vmProp) {\n  if (_.isArray(vmProp.value)) {\n    vmProp.dbValue = vmProp.value.slice(0);\n\n    if (!_.isUndefined(vmProp.dbOriginalValue)) {\n      vmProp.dbOriginalValue = vmProp.value.slice(0);\n    }\n  } else {\n    vmProp.dbValue = _.cloneDeep(vmProp.value);\n\n    if (!_.isUndefined(vmProp.dbOriginalValue)) {\n      vmProp.dbOriginalValue = _.cloneDeep(vmProp.value);\n    }\n  }\n\n  if (vmProp.prevDisplayValues) {\n    vmProp.displayValues = _.clone(vmProp.prevDisplayValues);\n  }\n\n  vmProp.uiValue = exports.getUiValue(vmProp.displayValues);\n\n  if (vmProp.isArray) {\n    vmProp.displayValsModel = [];\n\n    for (var i = 0; i < vmProp.displayValues.length; i++) {\n      vmProp.displayValsModel.push({\n        displayValue: vmProp.displayValues[i],\n        selected: false,\n        isInEditMode: false\n      });\n    }\n  }\n};\n/**\n * Set edit state of ViewModelProperty. If the property is editable and editable in view model then the\n * 'isEditable' flag is set to true which shows the properties as editable.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set edit state of ViewModelProperty.\n *\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n */\n\nexport let setEditState = function (vmProp, editable, override) {\n  if (vmProp.editableInViewModel !== editable || override) {\n    vmProp.editableInViewModel = editable;\n    vmProp.error = null;\n    vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n    exports.setEditLayoutSide(vmProp);\n\n    if (vmProp.propApi) {\n      if (vmProp.propApi.setLOVValueProvider) {\n        vmProp.propApi.setLOVValueProvider();\n      }\n\n      if (vmProp.propApi.setAutoAssignHandler) {\n        vmProp.propApi.setAutoAssignHandler();\n      }\n\n      if (vmProp.propApi.setObjectLinkPropertyHandler) {\n        vmProp.propApi.setObjectLinkPropertyHandler();\n      }\n\n      if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n        vmProp.propApi.notifyPropChange(PROP_EDITABLE);\n      }\n    }\n\n    if (vmProp.isEditable && (!vmProp.prevDisplayValues || vmProp.prevDisplayValues !== vmProp.displayValues)) {\n      vmProp.prevDisplayValues = _.clone(vmProp.displayValues);\n    }\n  }\n};\n/**\n * Set 'editable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set editable state of ViewModelProperty.\n */\n\nexport let setEditable = function (vmProp, editable) {\n  vmProp.editable = editable;\n};\n/**\n * Set 'isEditable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n */\n\nexport let setIsEditable = function (vmProp, isEditable) {\n  if (vmProp.isEditable !== isEditable) {\n    vmProp.isEditable = isEditable;\n    exports.setEditLayoutSide(vmProp);\n  }\n};\n/**\n * Set 'isPropertyModifiable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isPropertyModifiable - TRUE if the user should have the ability to change the property's\n *            value. FALSE if the value is read-only.\n */\n\nexport let setIsPropertyModifiable = function (vmProp, isPropertyModifiable) {\n  if (vmProp.isPropertyModifiable !== isPropertyModifiable) {\n    vmProp.isPropertyModifiable = isPropertyModifiable; // set is editable flag whenever property modifiable state is changed\n\n    vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n    exports.setEditLayoutSide(vmProp);\n  }\n};\n/**\n * Set edit layout side state of ViewModelProperty. For 'Boolean' and 'Object' based properties which doesn't\n * have LOV's this flag is set to true.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let setEditLayoutSide = function (vmProp) {\n  if (vmProp.type === 'BOOLEAN' || vmProp.type === 'OBJECT') {\n    vmProp.editLayoutSide = !vmProp.hasLov;\n  }\n};\n/**\n * Set 'hasLov' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} hasLov - TRUE if the property has a specific list of values associated with it.\n */\n\nexport let setHasLov = function (vmProp, hasLov) {\n  if (vmProp.hasLov !== hasLov) {\n    vmProp.hasLov = hasLov;\n    exports.setEditLayoutSide(vmProp);\n  }\n};\n/**\n * Set 'isSelectOnly' state of ViewModelProperty.\n * This property allows the selected lov entry to be select only, i.e, user cannot type in the widget after selecting the lov entry.\n * This change is to support isSelectOnly in aw-widget used as a list box.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isSelectOnly - TRUE/FALSE. Default is false, allows user to edit value in input box.\n */\n\nexport let setIsSelectOnly = function (vmProp, isSelectOnly) {\n  if (vmProp.isSelectOnly !== isSelectOnly) {\n    vmProp.isSelectOnly = isSelectOnly;\n  }\n};\n/**\n * Set 'renderingHint' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} renderingHint - Depending on the type, this string indicates some variation in how the\n *            property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include 'radiobutton',\n *            'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label', 'textbox',\n *            'textfield', 'textarea', 'longtext').\n */\n\nexport let setRenderingHint = function (vmProp, renderingHint) {\n  vmProp.renderingHint = renderingHint;\n};\n/**\n * Set 'overlayType' of ViewModelProperty. 'viewModelPropertyOverlay' - which defines that the overlay has real\n * data(i.e IViewModelProperty). 'widgetOverlay' - which defines that the overlay has widget data.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} overlayType - set overlay type of ViewModelProperty.\n */\n\nexport let setOverlayType = function (vmProp, overlayType) {\n  vmProp.overlayType = overlayType;\n};\n/**\n * Set 'autofocus' state of ViewModelProperty. Which defines whether the widget needs to be autofocused or NOT\n * bound to this property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} autofocus - set autofocus state of ViewModelProperty.\n */\n\nexport let setAutoFocus = function (vmProp, autofocus) {\n  vmProp.autofocus = autofocus;\n};\n/**\n * Set 'dirty' state of ViewModelProperty. Which defines whether the widget needs to be dirty or NOT.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} dirty - set dirty state of ViewModelProperty.\n */\n\nexport let setDirty = function (vmProp, dirty) {\n  vmProp.dirty = dirty;\n};\n/**\n * Set array max row count of ViewModelProperty. Number of visible rows for array widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} maxRowCount - set array max row count of ViewModelProperty.\n */\n\nexport let setMaxRowCount = function (vmProp, maxRowCount) {\n  if (maxRowCount !== -1 && maxRowCount !== 0 && vmProp.maxRowCount !== maxRowCount) {\n    vmProp.maxRowCount = maxRowCount;\n  }\n};\n/**\n * Set minimum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the earliest date/time this widget should allow.\n */\n\nexport let setMinimumDate = function (vmProp, dateToSet) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.minDate = dateToSet;\n  }\n};\n/**\n * Set maximum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the latest date/time this widget should allow.\n */\n\nexport let setMaximumDate = function (vmProp, dateToSet) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.maxDate = dateToSet;\n  }\n};\n/**\n * Set date Enabled state of ViewModelProperty. Which defines whether the date should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if date is enabled\n */\n\nexport let setDateEnabled = function (vmProp, enabled) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.isDateEnabled = enabled;\n  }\n};\n/**\n * Set time Enabled state of ViewModelProperty. Which defines whether the time should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if time is enabled.\n */\n\nexport let setTimeEnabled = function (vmProp, enabled) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.isTimeEnabled = enabled;\n  }\n};\nexport const setDateApi = (vmProp, dateApi) => {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi = dateApi;\n  }\n};\n/**\n * Set vertical state of ViewModelProperty. Which defines whether the radio button should show vertical or not.\n * Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} vertical TRUE if radio button need to be shown vertically.\n */\n\nexport let setRadioButtonVertical = function (vmProp, vertical) {\n  if (vmProp && vmProp.radioBtnApi) {\n    vmProp.radioBtnApi.vertical = vertical;\n  }\n};\n/**\n * Set radio button's custom true label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customTrueLabel custom true label for radio button.\n */\n\nexport let setRadioButtonCustomTrueLabel = function (vmProp, customTrueLabel) {\n  if (vmProp && vmProp.radioBtnApi) {\n    vmProp.radioBtnApi.customTrueLabel = customTrueLabel;\n  }\n};\n/**\n * Set radio button's custom false label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customFalseLabel custom false label for radio button.\n */\n\nexport let setRadioButtonCustomFalseLabel = function (vmProp, customFalseLabel) {\n  if (vmProp && vmProp.radioBtnApi) {\n    vmProp.radioBtnApi.customFalseLabel = customFalseLabel;\n  }\n};\n/**\n * Has this property been modified in the view model\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the property is modified in the view model.\n */\n\nexport let isModified = function (vmProp) {\n  return vmProp.valueUpdated || vmProp.displayValueUpdated;\n};\n/**\n * return the display value with local configured for boolean dbValue\n *\n * @param {Boolean } value - The boolean dbValue need turn to display value.\n * @param {StringMap} localTextBundle - Text bundles to use.\n * @return {String } the display value after local.\n */\n\nexport const getLocalBooleanDisplayValue = function (value) {\n  let localTextBundle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _localTextBundle;\n\n  if (!localTextBundle || !localTextBundle.RADIO_TRUE) {\n    return value.toString();\n  }\n\n  return value ? localTextBundle.RADIO_TRUE : localTextBundle.RADIO_FALSE;\n};\n/**\n * Get the Display Value for Property from array type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\n\nfunction _getDisplayValuesFromArrayType(vmProp) {\n  var indx;\n  var displayValues = [];\n\n  if (vmProp.type === 'DATEARRAY' && !vmProp.hasLov) {\n    for (indx = 0; indx < vmProp.newValue.length; indx++) {\n      if (!vmProp.dateApi || vmProp.dateApi.isTimeEnabled !== false && vmProp.dateApi.isDateEnabled) {\n        displayValues.push(dateTimeSvc.formatSessionDateTime(vmProp.newValue[indx]));\n      } else {\n        displayValues.push(dateTimeSvc.formatSessionDate(vmProp.newValue[indx]));\n      }\n    }\n  } else if (vmProp.type === 'OBJECTARRAY') {\n    for (indx = 0; indx < vmProp.newValue.length; indx++) {\n      displayValues.push(exports.getDisplayName(vmProp.newValue[indx]));\n    }\n  } else {\n    /**\n     * For LOVs use property display values which are already set by LOV widget.\n     */\n    if (vmProp.hasLov) {\n      for (indx = 0; indx < vmProp.displayValues.length; indx++) {\n        vmProp.displayValues[indx] && displayValues.push(vmProp.displayValues[indx].toString());\n      }\n    } else {\n      for (indx = 0; indx < vmProp.newValue.length; indx++) {\n        if (_.isBoolean(vmProp.newValue[indx]) || vmProp.newValue[indx] === 'true' || vmProp.newValue[indx] === 'false') {\n          //changing vmProp.newValue string value into boolean\n          const newValue = typeof vmProp.newValue[indx] === 'string' ? vmProp.newValue[indx] === 'true' ? true : false : vmProp.newValue[indx]; // eslint-disable-line\n\n          displayValues.push(getLocalBooleanDisplayValue(newValue));\n        } else {\n          vmProp.newValue[indx] && displayValues.push(vmProp.newValue[indx].toString());\n        }\n      }\n    }\n  }\n\n  return displayValues;\n}\n/**\n * Get the Display Value from DATE, OBJECT,... type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\n\n\nfunction _getDisplayValuesFromOtherTypes(vmProp) {\n  var displayValues = [];\n\n  if (vmProp.type === 'DATE') {\n    if (!vmProp.dateApi.isTimeEnabled && vmProp.dateApi.isDateEnabled) {\n      displayValues.push(dateTimeSvc.formatSessionDate(vmProp.newValue));\n    } else if (vmProp.dateApi.isTimeEnabled && !vmProp.dateApi.isDateEnabled) {\n      displayValues.push(dateTimeSvc.formatSessionTime(vmProp.newValue));\n    } else {\n      displayValues.push(dateTimeSvc.formatSessionDateTime(vmProp.newValue));\n    }\n  } else if (vmProp.type === 'OBJECT') {\n    /**\n     * This is for the case where view model property is created in GWT. Once we have all all GWT\n     * code converted to native, this condition will go away\n     */\n    if (vmProp.propApi) {\n      displayValues.push(exports.getDisplayName(vmProp.newValue));\n    } else {\n      // If view model property is created in native code. e.g. declarative\n      if (!declUtils.isNil(vmProp.uiValue)) {\n        displayValues.push(vmProp.uiValue);\n      }\n    }\n  } else if (vmProp.type === 'BOOLEAN') {\n    displayValues.push(getLocalBooleanDisplayValue(vmProp.newValue));\n  } else if (vmProp.hasLov) {\n    /**\n     * For LOVs use property uiValue which is already set by LOV widget.\n     */\n    if (!declUtils.isNil(vmProp.uiValue)) {\n      displayValues.push(vmProp.uiValue.toString());\n    }\n  } else {\n    /**\n     * when the type is integer or string, if value is 0 or empty string, framework is not allowing\n     * the display value to be updated with those values previously.\n     */\n    if (!declUtils.isNil(vmProp.newValue) && typeof vmProp.newValue !== 'object') {\n      displayValues.push(vmProp.newValue.toString());\n    }\n  }\n\n  return displayValues;\n}\n/**\n * Get the Display Value for Property. View uses Display Value for rendering if the property is not in edit\n * state. <br>\n * View uses Display Value for rendering if the property is not in edit state. If it is edit state, it has to\n * use the value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\n\n\nexport let getDisplayValues = function (vmProp) {\n  /**\n   * Return new display values when ViewModelProperty display values are updated.\n   */\n  if (vmProp.displayValueUpdated) {\n    return vmProp.newDisplayValues;\n  }\n  /**\n   * Return the display value as per the real value when they are out of sync. If valueUpdated is true but\n   * displayValueUpdated is false, then it means they are out of sync.\n   */\n\n\n  if (vmProp.valueUpdated && vmProp.newValue !== null && vmProp.newValue !== undefined) {\n    var displayValues = [];\n\n    if (vmProp.isArray) {\n      displayValues = _getDisplayValuesFromArrayType(vmProp);\n    } else {\n      displayValues = _getDisplayValuesFromOtherTypes(vmProp);\n    }\n\n    return displayValues;\n  }\n\n  return vmProp.prevDisplayValues;\n};\n/**\n * Returns the object type name for which this property is defined.\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String } object type name for which this property is defined.\n */\n\nexport let getOwningTypeName = function (vmProp) {\n  if (vmProp.propertyDescriptor && vmProp.propertyDescriptor.srcObjectTypeName) {\n    // use the source object type name for dcp properties\n    return vmProp.propertyDescriptor.srcObjectTypeName;\n  } else if (vmProp.parentUid && clientDataModel.getObject(vmProp.parentUid)) {\n    return clientDataModel.getObject(vmProp.parentUid).type;\n  } // return null if no information of the owning object is found\n\n\n  return null;\n};\n/**\n * Get the display name of the selected type reference object\n *\n * @param {String} uid - The UID of the selected object\n * @return {String} Display name of the object\n */\n\nexport let getDisplayName = function (uid) {\n  var displayName = null;\n  var modelObject = clientDataModel.getObject(uid);\n\n  if (modelObject && modelObject.props.object_string) {\n    displayName = modelObject.props.object_string.uiValues[0];\n  }\n\n  return displayName;\n};\n/**\n * Get string of the Property value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\n\nexport let getValueStrings = function (vmProp) {\n  var values = [];\n\n  if (vmProp.isArray) {\n    if (vmProp.type === 'DATEARRAY') {\n      for (var indx = 0; indx < vmProp.dbValue.length; indx++) {\n        values.push(dateTimeSvc.formatUTC(vmProp.dbValue[indx]));\n      }\n    } else {\n      for (var indx2 = 0; indx2 < vmProp.dbValue.length; indx2++) {\n        values.push(String(vmProp.dbValue[indx2] !== null ? vmProp.dbValue[indx2] : ''));\n      }\n    }\n  } else {\n    if (vmProp.type === 'DATE') {\n      values.push(dateTimeSvc.formatUTC(vmProp.dbValue));\n    } else {\n      values.push(String(vmProp.dbValue !== null ? vmProp.dbValue : ''));\n    }\n  }\n\n  return values;\n};\n/**\n * Returns TRUE if the internal value of the property is a number.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a number.\n */\n\nexport let isDbValueNumber = function (vmProp) {\n  if (vmProp.valueUpdated) {\n    return isNumeric(vmProp.newValue);\n  }\n\n  return isNumeric(vmProp.value);\n};\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * Returns TRUE if the internal value of the property is a boolean.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a boolean.\n */\n\n\nexport let isDbValueBoolean = function (vmProp) {\n  if (vmProp.valueUpdated) {\n    return _.isBoolean(vmProp.newValue);\n  }\n\n  return _.isBoolean(vmProp.value);\n};\n/**\n * Returns TRUE if the overlayType is widgetOverlay.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the overlay type is widgetOverlay.\n */\n\nexport let isOverlayTypeWidget = function (vmProp) {\n  return vmProp.overlayType && vmProp.overlayType === WIDGET;\n};\n/**\n * Set 'initialize' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let initialize = function (vmProp) {\n  vmProp.initialize = true;\n};\n/**\n * Updates property display values\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\n\nexport let updateDisplayValues = function (vmProp, displayValues) {\n  var displayValuesFinal = displayValues ? displayValues : [];\n\n  if (displayValuesFinal && displayValuesFinal.length === 0) {\n    vmProp.isNull = true;\n  } else {\n    vmProp.isNull = false;\n  }\n\n  vmProp.displayValues = displayValuesFinal;\n  vmProp.newDisplayValues = displayValuesFinal;\n  vmProp.uiValue = exports.getUiValue(vmProp.displayValues);\n\n  if (vmProp.isArray) {\n    vmProp.uiValues = vmProp.displayValues;\n    var oldDisplayValsModel = vmProp.displayValsModel;\n    vmProp.displayValsModel = [];\n\n    for (var i = 0; i < vmProp.displayValues.length; i++) {\n      if (oldDisplayValsModel.length > 0 && oldDisplayValsModel[i] && oldDisplayValsModel[i].displayValue === vmProp.displayValues[i]) {\n        vmProp.displayValsModel.push({\n          displayValue: vmProp.displayValues[i],\n          selected: oldDisplayValsModel[i].selected,\n          isInEditMode: oldDisplayValsModel[i].isInEditMode\n        });\n      } else {\n        vmProp.displayValsModel.push({\n          displayValue: vmProp.displayValues[i],\n          selected: false,\n          isInEditMode: false\n        });\n      }\n    }\n  }\n};\n/**\n * Returns the base property name of the dynamic compound property.\n *\n * @param {String} propertyName - property name to be evaluated.\n * @return {String} Base property name.\n */\n\nexport let getBasePropertyName = function (propertyName) {\n  var baseProperty = propertyName;\n  var lastPeriod = baseProperty.lastIndexOf('.');\n  baseProperty = baseProperty.substr(lastPeriod + 1);\n  return baseProperty;\n};\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Boolean} True if the given vmProp is valid.\n */\n\nfunction _isValidVmProp(vmProp) {\n  var isValid = false;\n  var vmPropType = vmProp.type;\n\n  if (vmPropType === 'INTEGER') {\n    if (isFinite(vmProp.dbValue)) {\n      if (vmProp.dbValue !== null && vmProp.dbValue !== '') {\n        vmProp.dbValue = Number(vmProp.dbValue);\n\n        if (vmProp.dbValue >= _integerMinValue && vmProp.dbValue <= _integerMaxValue) {\n          isValid = true;\n        }\n      } else {\n        isValid = true;\n      }\n    }\n  } else if (vmPropType === 'DOUBLE' || vmPropType === 'DATE') {\n    if (isFinite(vmProp.dbValue)) {\n      if (vmProp.dbValue !== null && vmProp.dbValue !== '') {\n        vmProp.dbValue = Number(vmProp.dbValue);\n      }\n\n      isValid = true;\n    }\n  } else {\n    isValid = true;\n  }\n\n  return isValid;\n}\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available.\n */\n\n\nfunction _updateVMPValue(vmProp) {\n  var uidsArray = vmProp.dbValue;\n\n  if (!vmProp.isArray) {\n    uidsArray = [];\n\n    if (vmProp.dbValue !== null && vmProp.dbValue !== undefined && vmProp.dbValue !== '') {\n      uidsArray.push(vmProp.dbValue);\n    } else if (vmProp.uiValue) {\n      uidsArray.push(vmProp.uiValue);\n    }\n  }\n\n  if (!_pingDeferred) {\n    _pingDeferred = AwPromiseService.instance.defer();\n  }\n\n  _pingLoadObjects(uidsArray, vmProp);\n\n  return _pingDeferred.promise;\n}\n/**\n * updates isNull and valueUpdated props on ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n */\n\n\nfunction _updateIsNullAndValueUpdatedFlags(vmProp) {\n  /**\n   * Change isNull flag to false, if dbValue & uiValue exists and even though its NOT valid.\n   */\n  if (vmProp.isNull && vmProp.dbValue && vmProp.uiValue) {\n    vmProp.isNull = false;\n  }\n  /**\n   * Change valueUpdated flag to true, if dbValue & uiValue exists and even though its NOT valid.\n   */\n\n\n  if (vmProp.dbValue && vmProp.uiValue) {\n    vmProp.valueUpdated = true;\n  }\n}\n/**\n * Updates ViewModelProperty with updated values. Added a return of promise in case of async call to load\n * objects which is required for OBJECT or OBJECTARRAY property types. The promise is resolved or rejected based\n * on execution of the load objects api.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available. In case the input vmProp.type is not OBJECT or\n *         OBJECTARRAY, then promise returned is null. Caller should explicitly do a null check on the promise\n *         before invoking any functions on it.\n */\n\n\nexport let updateViewModelProperty = function (vmProp) {\n  var isValid = false;\n  var vmPropType = vmProp.type;\n  isValid = _isValidVmProp(vmProp);\n\n  if (isValid) {\n    if (vmPropType !== 'OBJECT' && vmPropType !== 'OBJECTARRAY') {\n      exports.setValue(vmProp, vmProp.dbValue);\n\n      if (vmProp.propApi && vmProp.propApi.fireValueChangeEvent) {\n        vmProp.propApi.fireValueChangeEvent();\n      }\n    } else {\n      exports.setValue(vmProp, vmProp.dbValue);\n      return _updateVMPValue(vmProp);\n    }\n  } else {\n    _updateIsNullAndValueUpdatedFlags(vmProp);\n  }\n\n  return null;\n};\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\n\nexport let isViewModelProperty = function (objectToTest) {\n  return objectToTest instanceof ViewModelProperty || objectToTest.hasOwnProperty('dbValues');\n};\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} listOfobjectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\n\nexport let isArrayOfViewModelProperty = function (listOfobjectToTest) {\n  let flag = true;\n\n  _.forEach(listOfobjectToTest, function (obj) {\n    if (obj && !(exports.isViewModelProperty(obj) || obj.hasOwnProperty('dbValues'))) {\n      flag = false;\n      return false;\n    }\n  });\n\n  return flag;\n};\n/**\n * Retrieve the cdm's modelObject from a property's source object uid.\n *\n * @param {ViewModelProperty} vmProp - Property to retrieve source object\n * @return {ModelObject} The ModelObject; null if not cached\n */\n\nexport let getSourceModelObject = function (vmProp) {\n  var sourceObjectUid = exports.getSourceObjectUid(vmProp);\n  return clientDataModel.getObject(sourceObjectUid);\n};\n/**\n * This methods attaches validation criteria in view model property.\n *\n * @param {ViewModelProperty} vmProp - Property in whcih validation criteria needs to be attched\n *\n * @param {String} conditionName - The name of the condition in validation criteria\n *\n * @param {String} msgString - The message which will be shown if the validation criteria doesn't match\n *\n */\n\nexport let createValidationCriteria = function (vmProp, conditionName, msgString) {\n  var validationObj = {\n    condition: 'conditions.' + conditionName,\n    value: msgString\n  };\n\n  if (!vmProp.validationCriteria) {\n    vmProp.validationCriteria = [];\n  }\n\n  vmProp.validationCriteria.push(validationObj);\n};\nexport let updateValidationResult = (lovEntry, validationResult, uiProp) => {\n  if (validationResult.valid && uiProp.isEditable !== false) {\n    if (!uiProp.isArray) {\n      if (uiProp.type !== 'DATE') {\n        uiProp.dbValue = lovEntry.propInternalValue;\n        uiProp.uiValue = lovEntry.propDisplayValue;\n      }\n\n      uiProp.dbValues = [uiProp.dbValue];\n      uiProp.uiValues = [uiProp.uiValue];\n    } // update orig vals on validation\n\n\n    uiProp.dbOriginalValue = uiProp.dbValue;\n    uiProp.uiOriginalValue = uiProp.uiValue; // Update dependent properties\n\n    _.forEach(validationResult.updatedPropValueMap, function (values, propertyName) {\n      var sourceObjectUid = getSourceObjectUid(uiProp);\n      var toBeModifiedProp = validationResult.viewModelObj.retrievePropertyWithBasePropertyName(propertyName, sourceObjectUid);\n\n      if (toBeModifiedProp) {\n        var eventData = {\n          removeValues: toBeModifiedProp.dbValue\n        };\n        setValue(toBeModifiedProp, values);\n        setWidgetDisplayValue(toBeModifiedProp, validationResult.updatedPropDisplayValueMap[propertyName]);\n      }\n    });\n\n    setServerValidationError(uiProp, false);\n    uiProp.error = null; // revisitme: zarq9k Need to import uwValidationSvc\n    //setErrorMessage( $scope, null );\n    // var eventData = {\n    //     lovValue: lovEntry\n    // };\n\n    eventBus.publish(uiProp.propertyName + '.lovValueChanged', {\n      lovValue: lovEntry\n    });\n  } else {\n    if (validationResult.error) {\n      setServerValidationError(uiProp, true);\n      uiProp.error = validationResult.error; // revisitme: zarq9k Need to import uwValidationSvc\n      //setErrorMessage( $scope, validationResult.error );\n    }\n  }\n};\n/**\n * zarq9k: Moved the updateDbValue from aw.property.lov.controller.\n * @param {*} uiProperty\n * @param {*} lovEntry\n */\n\nexport let updateLov = (uiProperty, lovEntry, createUpdateValue, operation, checkLovEntries) => {\n  // special handling for checkbox array lov\n  let promise;\n\n  if (uiProperty.renderingHint === 'checkboxoptionlov') {\n    if (operation === 'unchecked') {\n      // remove the item based on the propInternalValue\n      let index = uiProperty.dbValue.findIndex(val => val === lovEntry.propInternalValue);\n\n      if (_.isObject(lovEntry.propInternalValue)) {\n        index = uiProperty.displayValues.findIndex(val => val === lovEntry.propDisplayValue);\n      }\n\n      uiProperty.dbValue.splice(index, 1);\n      uiProperty.displayValues.splice(index, 1);\n    } else {\n      uiProperty.dbValue.push(lovEntry.propInternalValue);\n      uiProperty.displayValues.push(lovEntry.propDisplayValue);\n    }\n\n    updateDisplayValues(uiProperty, [...uiProperty.displayValues]); // Below weird behaviour is due to function \"updateViewModelProperty\" which returns promise is few cases and null in other cases.\n\n    promise = updateViewModelProperty(uiProperty);\n\n    if (promise) {\n      return promise.then(resolve => resolve(uiProperty));\n    }\n\n    return new Promise(resolve => resolve(uiProperty));\n  }\n\n  uiProperty.displayValues.push(lovEntry.propDisplayValue);\n  var changed = uiProperty.dbOriginalValue !== lovEntry.propInternalValue; // update the dbValue based on the uiValue\n  //zarq9k: Multiple if checks for uiProperty.type === 'DATE' - Need cleanup\n\n  let newDbValue = '';\n  let newUiValue = '';\n  /**\n   * For integer and double we have to actually see if it is valid number and then convert it into number\n   * type accordingly or else throw an error\n   */\n\n  if (uiProperty.type === 'INTEGER' || uiProperty.type === 'DOUBLE' || uiProperty.type === 'INTEGERARRAY' || uiProperty.type === 'DOUBLEARRAY') {\n    if (uiProperty.type === 'INTEGER' || uiProperty.type === 'INTEGERARRAY') {\n      // zarq9k: revisit - Need to import uwValidationSvc in the new repo.\n      //newDbValue = uwValidationSvc.checkInteger( $scope, null, lovEntry.propInternalValue );\n      // Below is a temp fix until unless uwValidationSvc comes again\n      let number = parseInt(lovEntry.propInternalValue, 10);\n      newDbValue = isNaN(number) ? '' : number;\n      newUiValue = lovEntry.propDisplayValue;\n    } else {\n      //newDbValue = uwValidationSvc.checkDouble( $scope, null, lovEntry.propInternalValue );\n      // Below is a temp fix until unless uwValidationSvc comes again\n      let number = parseFloat(lovEntry.propInternalValue, 10);\n      newDbValue = isNaN(number) ? '' : number;\n      newUiValue = lovEntry.propDisplayValue;\n    } // set the converted number to the dbValue\n    //lovEntry.propInternalValue = newDbValue;\n    //uiProperty.dbValue = newDbValue;\n\n  } else if (propTypeDate(uiProperty) && uiProperty.dateApi.isNotLov) {\n    // zarq9k: revisit - Need to import uwValidationSvc in the new repo.lsdlksl;\n    //dateObject = uwValidationSvc.checkDateTime( $scope, dateObject );\n    setDateTimeValues({\n      dateVal: '',\n      timeVal: lovEntry.propDisplayValue\n    });\n    let dateApi = uiProperty.dateApi;\n    uiProperty.dbValue = getDBValueForDate(uiProperty);\n    uiProperty.uiValue = getUIValueForDate(dateApi);\n    newUiValue = uiProperty.uiValue;\n    newDbValue = uiProperty.dbValue;\n  } else {\n    newDbValue = lovEntry.propInternalValue;\n    newUiValue = lovEntry.propDisplayValue;\n  }\n\n  newDbValue = uiProperty.type === 'BOOLEAN' && (_.isNil(newDbValue) || newDbValue.length === 0) ? null : newDbValue;\n  uiProperty.dbValue = !uiProperty.isArray ? newDbValue : uiProperty.dbValue;\n  uiProperty.filterString = lovEntry.filterString ? lovEntry.filterString : null;\n  uiProperty.valueUpdated = true; // update optional icon\n\n  uiProperty.iconSource = lovEntry.iconSource;\n  uiProperty.iconName = lovEntry.iconName;\n\n  if (uiProperty.type !== 'DATE') {\n    lovEntry.propInternalValue = newDbValue;\n    lovEntry.propDisplayValue = newUiValue;\n  }\n\n  if (!uiProperty.isArray) {\n    promise = updateViewModelProperty(uiProperty);\n    clearDateTimeValues(uiProperty);\n\n    if (promise) {\n      return promise.then(() => {\n        //In dirty check, If newValue and value are same then we dont show dirty backgrnd\n        //uiProperty.value = newDbValue;\n        // for array & array lov\n        uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n        uiProperty.valueUpdated = true;\n        return uiProperty;\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      // for array & array lov\n      uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n      uiProperty.valueUpdated = true;\n      resolve(uiProperty);\n    });\n  }\n\n  return new Promise(resolve => {\n    let event = {\n      target: {\n        value: lovEntry.propInternalValue\n      }\n    };\n    let dateEvent = [lovEntry.propInternalValue];\n\n    if (uiProperty.type === 'OBJECTARRAY') {\n      dmSvc.loadObjects(dateEvent).then(function () {\n        uiProperty = createUpdateValue(uiProperty, event);\n        resolve(uiProperty);\n      }, function (error) {\n        return AwPromiseService.instance.reject(error);\n      });\n    } else {\n      uiProperty = createUpdateValue(uiProperty, event);\n      resolve(uiProperty);\n    }\n  });\n};\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function isDCPProperty\n * @param {String} propertyName - name of the property\n * @returns {Boolean} - returns whether the property is a dynamic compound property or not.\n */\n\nexport let isDCPProperty = function (propertyName) {\n  if (propertyName.indexOf('.') !== -1 && propertyName.indexOf('(') !== -1 && (propertyName.indexOf('GRM') !== -1 || propertyName.indexOf('GRMS2P') !== -1 || propertyName.indexOf('REF') !== -1 || propertyName.indexOf('REFBY') !== -1 || propertyName.indexOf('GRMREL') !== -1 || propertyName.indexOf('GRMS2PREL') !== -1)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function updateViewModelProp\n * @param {*} viewProp -\n * @param {*} newVal -\n * @param {*} additionalProp - \n * @param {*} nonatomicUpdate -\n */\n\nexport let updateViewModelProp = function (viewProp, newVal, additionalProp, nonatomicUpdate) {\n  if (additionalProp) {\n    if (additionalProp.hasOwnProperty('displayName')) {\n      viewProp.propertyDisplayName = additionalProp.displayName;\n    }\n\n    if (additionalProp.hasOwnProperty('isEditable')) {\n      let val = _.isBoolean(additionalProp.isEditable) ? additionalProp.isEditable : additionalProp.isEditable !== 'false';\n      exports.setIsEditable(viewProp, val);\n    }\n\n    if (additionalProp.hasOwnProperty('isRequired')) {\n      let isRequired = _.isBoolean(additionalProp.isRequired) ? additionalProp.isRequired : additionalProp.isRequired !== 'false';\n      exports.setIsRequired(viewProp, isRequired);\n    }\n\n    if (additionalProp.hasOwnProperty('isEnabled')) {\n      let isEnabled = _.isBoolean(additionalProp.isEnabled) ? additionalProp.isEnabled : additionalProp.isEnabled !== 'false';\n      exports.setIsEnabled(viewProp, isEnabled);\n    }\n\n    if (additionalProp.hasOwnProperty('labelPosition')) {\n      exports.setPropertyLabelDisplay(viewProp, additionalProp.labelPosition, true);\n\n      if (viewProp.labelPosition === 'PROPERTY_LABEL_AT_SIDE') {\n        viewProp.editLayoutSide = true;\n      }\n    }\n\n    if (additionalProp.hasOwnProperty('propName')) {\n      viewProp.propertyName = additionalProp.propName;\n    }\n\n    if (additionalProp.hasOwnProperty('displayValue')) {\n      viewProp.uiValues = additionalProp.displayValue;\n      viewProp.uiValue = exports.getUiValue(viewProp.uiValues);\n    }\n\n    if (additionalProp.hasOwnProperty('isModifiable')) {\n      exports.setIsPropertyModifiable(viewProp, additionalProp.isModifiable);\n    }\n\n    if (additionalProp.hasOwnProperty('isAutoAssignable')) {\n      exports.setIsAutoAssignable(viewProp, additionalProp.isAutoAssignable);\n    }\n\n    if (additionalProp.hasOwnProperty('maxLength')) {\n      exports.setLength(viewProp, additionalProp.maxLength);\n    }\n\n    if (additionalProp.hasOwnProperty('renderingHint')) {\n      exports.setRenderingHint(viewProp, additionalProp.renderingHint);\n    }\n\n    if (additionalProp.hasOwnProperty('requiredText')) {\n      exports.setPlaceHolderText(viewProp, additionalProp.requiredText);\n    }\n\n    if (additionalProp.hasOwnProperty('vertical')) {\n      viewProp.vertical = additionalProp.vertical;\n    }\n\n    if (additionalProp.hasOwnProperty('numberOfLines')) {\n      exports.setNumberOfLines(viewProp, additionalProp.numberOfLines);\n    }\n\n    if (additionalProp.hasOwnProperty('isArray')) {\n      let isArray = _.isBoolean(additionalProp.isArray) ? additionalProp.isArray : additionalProp.isArray === 'true';\n      exports.setIsArray(viewProp, isArray);\n    }\n\n    additionalProp.iconName && (viewProp.iconName = additionalProp.iconName);\n  }\n\n  if (nonatomicUpdate) {\n    exports.setValue(viewProp, newVal);\n  }\n};\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\n\nconst exports = {\n  getUiValue,\n  createViewModelProperty,\n  updateModelData,\n  copyModelData,\n  setSourceObjectUid,\n  getSourceObjectUid,\n  getRelationObjectUid,\n  getPropertyNameInSourceObject,\n\n  /** revisitme yogesh\n            * Hint: we may not be required this\n           triggerDigestCycle,\n            */\n  initializeDateApiValues,\n  setValue,\n  setOldValues,\n  setDisplayValue,\n  setWidgetDisplayValue,\n  setIsEnabled,\n  setIsRichText,\n  setIsNull,\n  setIsRequired,\n  setPlaceHolderText,\n  setIsLocalizable,\n  setIsDisplayable,\n  setIsAutoAssign,\n  setIsAutoAssignable,\n  setHasInitialValue,\n  setLength,\n  setNumberOfCharacters,\n  setNumberOfLines,\n  setIsArray,\n  setArrayLength,\n  setReferenceType,\n  setDataType,\n  setError,\n  setClientValidationError,\n  setServerValidationError,\n  setPropertyDisplayName,\n  setPropertyLabelDisplay,\n  resetUpdates,\n  replaceValuesWithNewValues,\n  resetProperty,\n  resetValues,\n  setEditState,\n  setEditable,\n  setIsEditable,\n  setIsPropertyModifiable,\n  setEditLayoutSide,\n  setHasLov,\n  setIsSelectOnly,\n  setRenderingHint,\n  setOverlayType,\n  setAutoFocus,\n  setDirty,\n  setMaxRowCount,\n  setMinimumDate,\n  setMaximumDate,\n  setDateEnabled,\n  setTimeEnabled,\n  setDateApi,\n  setRadioButtonVertical,\n  setRadioButtonCustomTrueLabel,\n  setRadioButtonCustomFalseLabel,\n  isModified,\n  getDisplayValues,\n  getOwningTypeName,\n  getDisplayName,\n  getValueStrings,\n  isDbValueNumber,\n  isDbValueBoolean,\n  isOverlayTypeWidget,\n  initialize,\n  updateDisplayValues,\n  getBasePropertyName,\n  updateViewModelProperty,\n  isViewModelProperty,\n  isArrayOfViewModelProperty,\n  getSourceModelObject,\n  createValidationCriteria,\n  updateValidationResult,\n  updateLov,\n  isDCPProperty,\n  updateViewModelProp\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewModelProperty\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ViewModelProperty\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/uwPropertyService.js"],"names":["PROP_EDITABLE","PROP_VALUE","PROP_ERROR","PROP_REQUIRED","VIEW_MODEL_PROPERTY","WIDGET","_integerMinValue","_integerMaxValue","_documentScope","_pingDeferred","_isPropertyValueTrue","stringValue","String","vmProp","_","localTextBundle","_pingLoadObjects","dmSvc","exports","error","ViewModelProperty","displayValuesFinal","displayValuesIn","isDateEnabled","isTimeEnabled","vmPropType","Number","doubleDbValues","l","dbValue","isFinite","declUtils","booleanDbValues","k","_setRadioText","localeSvc","_localTextBundle","dateDbValues","j","doubleDbValues1","i","getUiValue","uiValues","uiValue","ndx","createViewModelProperty","updateModelData","displayValues","sourceObjectLastSavedDate","value","displayValue","selected","isInEditMode","copyModelData","updatedProperty","targetProperty","setSourceObjectUid","getSourceObjectUid","sourceObjectUid","getRelationObjectUid","getPropertyNameInSourceObject","sourcePropertyName","initializeDateApiValues","props","dateApi","jsDate","dateTimeSvc","isDateNull","isNaN","uwDirectiveDateTimeSvc","setValue","sameAsOriginal","updateDateApi","setOldValues","oldValuesFinal","oldValues","setDisplayValue","setWidgetDisplayValue","setIsEnabled","setIsRichText","setIsNull","setIsRequired","setPlaceHolderText","setIsLocalizable","isLocalizable","setIsDisplayable","setIsAutoAssign","setIsAutoAssignable","setHasInitialValue","setLength","maxLength","setNumberOfCharacters","numberOfCharacters","setNumberOfLines","numberOfLines","setIsArray","_setArrayText","nVal","setArrayLength","setReferenceType","setDataType","setError","setClientValidationError","setServerValidationError","setPropertyDisplayName","setPropertyLabelDisplay","propertyLabelDisplay","fireEvent","resetUpdates","_resetPropertyAndResetUpdates","replaceValuesWithNewValues","resetProperty","resetValues","setEditState","setEditable","setIsEditable","setIsPropertyModifiable","setEditLayoutSide","setHasLov","setIsSelectOnly","setRenderingHint","setOverlayType","setAutoFocus","setDirty","setMaxRowCount","maxRowCount","setMinimumDate","setMaximumDate","setDateEnabled","setTimeEnabled","setDateApi","setRadioButtonVertical","setRadioButtonCustomTrueLabel","setRadioButtonCustomFalseLabel","isModified","getLocalBooleanDisplayValue","indx","newValue","getDisplayValues","_getDisplayValuesFromArrayType","_getDisplayValuesFromOtherTypes","getOwningTypeName","clientDataModel","getDisplayName","displayName","modelObject","getValueStrings","values","indx2","isDbValueNumber","isNumeric","parseFloat","isDbValueBoolean","isOverlayTypeWidget","initialize","updateDisplayValues","oldDisplayValsModel","getBasePropertyName","baseProperty","lastPeriod","isValid","uidsArray","AwPromiseService","updateViewModelProperty","_isValidVmProp","_updateVMPValue","_updateIsNullAndValueUpdatedFlags","isViewModelProperty","objectToTest","isArrayOfViewModelProperty","flag","obj","getSourceModelObject","createValidationCriteria","validationObj","condition","msgString","updateValidationResult","validationResult","uiProp","lovEntry","toBeModifiedProp","eventData","removeValues","eventBus","lovValue","updateLov","uiProperty","operation","index","val","promise","resolve","changed","newDbValue","newUiValue","number","parseInt","propTypeDate","setDateTimeValues","dateVal","timeVal","propDisplayValue","getDBValueForDate","getUIValueForDate","clearDateTimeValues","event","target","propInternalValue","dateEvent","createUpdateValue","isDCPProperty","propertyName","updateViewModelProp","additionalProp","viewProp","isRequired","isEnabled","isArray"],"mappings":"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AEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,OAAAA,GAAAA,OAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,aAAAA,GAAAA,kBAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,MAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,QAAAA,GAAAA,IAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,SAAAA,GAAAA,IAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,UAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,UAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,aAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,aAAAA,GAAAA,IAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,gBAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,eAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,OAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,YAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,mBAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,mBAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIA,MAAM,CAANA,oBAAAA,GAAAA,IAAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;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","sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2021 Siemens\n/* eslint-disable require-jsdoc */\n/* eslint-disable complexity */\n\n/**\n * This is the primary service used to create, test and manage the internal properties of ViewModelProperty Objects used\n * throughout the UniversalWidget (et al.) areas of AW. Views can create custom view models by creating a\n * ViewModelObject and adding ViewModelProperty Objects created by this service to it.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/uwPropertyService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport dmSvc from 'soa/dataManagementService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport uwDirectiveDateTimeSvc from 'js/uwDirectiveDateTimeService';\nimport eventBus from 'js/eventBus';\nimport { propTypeDate, updateDateApi, setDateTimeValues, getDBValueForDate, getUIValueForDate, clearDateTimeValues } from 'js/dateTimeProcessingService';\n\n/**\n * Editable State of the property object\n *\n * @private\n */\nvar PROP_EDITABLE = 'editable';\n\n/**\n * Value of the property object\n *\n * @private\n */\nvar PROP_VALUE = 'value';\n\n/**\n * Validation error of property object\n *\n * @private\n */\nvar PROP_ERROR = 'error';\n\n/**\n * Required state of property object\n *\n * @private\n */\nvar PROP_REQUIRED = 'required';\n\n/**\n * Overlay type 'viewModelPropertyOverlay', which defines that the overlay has real data(i.e\n * IViewModelProperty).\n *\n * @private\n */\nvar VIEW_MODEL_PROPERTY = 'viewModelPropertyOverlay';\n\n/**\n * Overlay type 'widgetOverlay', which defines that the overlay has widget data.\n *\n * @private\n */\nvar WIDGET = 'widgetOverlay';\n\n/**\n * Integer minimum value, which is equal to Java Integer's minimum value\n */\nvar _integerMinValue = -2147483648;\n\n/**\n * Integer maximum value, which is equal to Java Integer's maximum value\n */\nvar _integerMaxValue = 2147483647;\n\n/**\n * Cache document ng element to retrieve the scope and trigger digest cycle.\n *\n * @private\n */\n/** revisitme yogesh\n   * Hint: we may not be required this\n var _docNgElement = ngModule.element( document.body );\n  */\n\n/**\n * Cache $q promise service.\n *\n * @private\n */\n\n/**\n * {dateTimeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {localeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {clientDataModel} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {dataManagementService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {$rootScope} Cached reference to the 'root' scope associated with the top level (i.e. document) DOM Element.\n */\nvar _documentScope = null;\n\n/**\n * {StringMap} Cached 'basic' locale text bundle.\n */\nvar _localTextBundle;\n\n/**\n * {Array} Promise that need to be resolved when debounced function executes eventually\n */\nvar _pingDeferred = null;\n\n/**\n * @param {String} stringValue -\n *\n * @return {boolean} TRUE if given value is not NULL and equals 'true', 'TRUE' or '1'.\n */\nvar _isPropertyValueTrue = function( stringValue ) {\n    return stringValue && stringValue !== '0' &&\n        ( String( stringValue ).toUpperCase() === 'TRUE' || stringValue === '1' );\n};\n\n/**\n * Set locale specific string used for array UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\nfunction _setArrayText( vmProp, localTextBundle ) {\n    if( !vmProp.isRequired && ( _.isUndefined( vmProp.propertyRequiredText ) || vmProp.propertyRequiredText.length === 0 ) ) {\n        vmProp.propertyRequiredText = localTextBundle.ARRAY_PLACEHOLDER_TEXT;\n    }\n\n    // Set array button's tool tips\n    vmProp.moveUpButtonTitle = localTextBundle.MOVE_UP_BUTTON_TITLE;\n    vmProp.moveDownButtonTitle = localTextBundle.MOVE_DOWN_BUTTON_TITLE;\n    vmProp.removeButtonTitle = localTextBundle.REMOVE_BUTTON_TITLE;\n} // _setArrayText\n\n/**\n * Set locale specific string used for radio button UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\nfunction _setRadioText( vmProp, localTextBundle ) {\n    if( !vmProp.propertyRadioTrueText ) {\n        vmProp.propertyRadioTrueText = localTextBundle.RADIO_TRUE;\n    }\n\n    if( !vmProp.propertyRadioFalseText ) {\n        vmProp.propertyRadioFalseText = localTextBundle.RADIO_FALSE;\n    }\n\n    /**\n     * Handles setting of custom labels and vertical alignment attributes when directives are used natively\n     */\n    if( vmProp.radioBtnApi ) {\n        if( vmProp.radioBtnApi.customTrueLabel ) {\n            vmProp.propertyRadioTrueText = vmProp.radioBtnApi.customTrueLabel;\n        }\n\n        if( vmProp.radioBtnApi.customFalseLabel ) {\n            vmProp.propertyRadioFalseText = vmProp.radioBtnApi.customFalseLabel;\n        }\n\n        if( vmProp.radioBtnApi.vertical ) {\n            vmProp.vertical = vmProp.radioBtnApi.vertical;\n        }\n    }\n}\n\n/**\n * Helper function to avoid multiple calls to load objects by using lodash debounce\n */\nvar _pingLoadObjects = _.debounce( function( uidsArray, vmProp ) {\n    dmSvc.loadObjects( uidsArray ).then( function() {\n        exports.setValue( vmProp, vmProp.dbValue );\n\n        if( vmProp.propApi && vmProp.propApi.fireValueChangeEvent ) {\n            vmProp.propApi.fireValueChangeEvent();\n        }\n\n        if( _pingDeferred ) {\n            _pingDeferred.resolve();\n            _pingDeferred = null;\n        }\n    }, function( error ) {\n        if( vmProp.propApi && vmProp.propApi.fireUIValidationErrorEvent ) {\n            vmProp.uiValue = '';\n            vmProp.error = error.message;\n            vmProp.clientValidationError = error.message;\n            vmProp.hasServerValidationError = true;\n            vmProp.propApi.fireUIValidationErrorEvent( error.message );\n        }\n\n        if( _pingDeferred ) {\n            _pingDeferred.reject( error );\n            _pingDeferred = null;\n        }\n    } );\n}, 250 );\n\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n * <P>\n * Note: The properties shown below in the 'members' section are defined, understood and created by this class\n * constructor.\n * <P>\n * Note: The properties shown below in the 'properties' section are marked as '(Optional)' and are defined and\n * understood, but not created by this class constructor. The are defined as needed by the various APIs of the\n * uwPropertyService.\n *\n * @class ViewModelProperty\n *\n * @memberof module:js/uwPropertyService\n *\n * @param {String} propertyName - The name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - User displayable name of the property\n * @param {String} dataType - Data type of the property\n * @param {Array} dbValue - Real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValuesIn - Display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n *\n * @property {String} inputType - (Optional) input type\n *\n * @property {Object} sourceObjectLastSavedDate - (Optional) source object last saved date\n *\n * @property {String} propertyRadioTrueText - (Optional) Used for boolean Radio button 'true' label\n *\n * @property {String} propertyRadioFalseText - (Optional) Used for boolean Radio button 'false' label\n *\n * @property {boolean} vertical - (Optional) Used for boolean radio button. TRUE to show the layout of the radio\n *           button vertically. FALSE for horizontal layout.\n *\n * @property {ObjectArray} displayValsModel - (Optional) This is only used for arrays so that we can maintain\n *           the selection of the rows in array widget.\n *\n * @property {String} parentUid - (Optional) This is the UID of the original IModelObject (in the client data\n *           model cache) that was used to originate this ViewModelProperty.\n *\n * @property {Object} newValue - (Optional) new value\n *\n * @property {Object} propApi - (Optional) property API\n *\n * @property {Object} oldValue - (Optional) old value\n *\n * @property {ObjectArray} oldValues - (Optional) old values\n *\n * @property {String} propertyRequiredText - (Optional) Localized text seen as the placeholder text in a field\n *           when the property is 'Required'.\n *\n * @property {Number} maxLength - (Optional) If not equal to '-1' or '0', this parameter specifies the maximum\n *           number of characters allowed in a string type property.\n *\n * @property {Number} numberOfCharacters - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of characters in a string type property.\n *\n * @property {Number} numberOfLines - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of lines allowed in a property.\n *\n * @property {String} moveUpButtonTitle - (Optional) Localized title for 'move-up' button in array widget.\n *\n * @property {String} moveDownButtonTitle - (Optional) Localized title for 'move-down' button in array widget.\n *\n * @property {String} removeButtonTitle - (Optional) Localized title for 'remove' button used only for array\n *           widget.\n *\n * @property {String} referenceTypeName - (Optional) reference type name\n *\n * @property {String} clientValidationError - (Optional) client validation error\n *\n * @property {String} hasServerValidationError - (Optional) has server validation error?\n *\n * @property {boolean} hasLov - (Optional) TRUE if the property has a specific list of values associated with\n *           it.\n *\n * @property {String} renderingHint - (Optional) Depending on the type, this string indicates some variation in\n *           how the property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include\n *           'radiobutton', 'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label',\n *           'textbox', 'textfield', 'textarea', 'longtext').\n *\n * @property {boolean} autofocus - (Optional) auto focus?\n *\n * @property {boolean} dirty - (Optional) TRUE if the value of the property has changed (been edited) since it\n *           was initially displayed.\n *\n * @property {Number} maxRowCount - (Optional) Used only for array widget. If != -1, then the array widget will\n *           only show the scroll bar after max row count is reached.\n *\n * @property {StringArray} newDisplayValues - (Optional) new display values\n *\n * @property {Object} propertyDescriptor - (Optional) property descriptor\n *\n * @property {boolean} initialize - (Optional) initialize?\n */\nvar ViewModelProperty = function( propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn ) { // eslint-disable-line complexity\n    var vmProp = this;\n\n    var displayValuesFinal = displayValuesIn || [];\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyName\n     *\n     * {String} Internal name of the property.\n     */\n    vmProp.propertyName = propertyName;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyDisplayName\n     *\n     * {String} User displayable name of the property (a.k.a. the property's 'label').\n     */\n    vmProp.propertyDisplayName = propertyDisplayName;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property type\n     *\n     * {String} Data type of the property. Valid values are: 'CHAR', 'DATE', 'DOUBLE', 'FLOAT', 'INTEGER',\n     * 'BOOLEAN', 'SHORT', 'STRING' & 'OBJECT'.\n     */\n    vmProp.type = dataType;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property dbValue\n     *\n     * {Object} The internal (database) representation of the property's value.\n     * <P>\n     * Note: For 'DATE' type properties, the 'dbValueIn' is assumed to be of type 'double' and represents the\n     * number of milliseconds since UNIX 'epoch' (January 1, 1970 00:00:00 GMT).\n     */\n    vmProp.dbValue = dbValue;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property displayValues\n     *\n     * {StringArray} Array of strings representing the current user displayable value(s) of the property.\n     */\n    vmProp.displayValues = displayValuesFinal;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isNull\n     *\n     * {boolean} TRUE if the current property value is 'no value'. FALSE if the value is valid as is.\n     * <P>\n     * Note: This option is used in cases when the property's value has not been set yet but that there is no\n     * way to represent this state in a simple string (e.g. Is the string 'empty' or not yet set? Is the 'empty'\n     * string an indication of an integer value of '0'?).\n     */\n    vmProp.isNull = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */\n    vmProp.editable = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isEnabled\n     *\n     * {boolean} TRUE if the property's value should be shown normally and (if also editable) react to user\n     * input. FALSE if the property's value should be shown 'greyed out' and not react to user input (even if\n     * editable).\n     */\n    vmProp.isEnabled = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isRichText\n     *\n     * {boolean} TRUE if the string value of the property is in HTML format and should be displayed using HTML\n     * formatting rules and edited with the 'rich text' editor.\n     */\n    vmProp.isRichText = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isRequired\n     *\n     * {boolean} TRUE if the property's value is required to successfully complete some operation that uses it.\n     * FALSE if the property's value is optional.\n     */\n    vmProp.isRequired = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isLocalizable\n     *\n     * {boolean} TRUE if the property value's UI should include the option to allow any user entered value to be\n     * converted from local language (as entered) into some other system language. Note: The UI necessary for\n     * translating the value is not currently supported in Active Workspace 2.4.\n     */\n    vmProp.isLocalizable = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isDisplayable\n     *\n     * {boolean} is displayable?\n     */\n    vmProp.isDisplayable = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isAutoAssignable\n     *\n     * {boolean} TRUE if the property's value can/should be assigned automatically by Teamcenter. FALSE if the\n     * property's value is not normally assigned/controlled by Teamcenter.\n     * <P>\n     * Note: The UI necessary for assigning this value is not currently supported in Active Workspace 2.4.\n     */\n    vmProp.isAutoAssignable = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property hasInitialValue\n     *\n     * {boolean} has initial value?\n     */\n    vmProp.hasInitialValue = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isArray\n     *\n     * {boolean} TRUE if the property can have more than one value in an ordered list. FALSE if the property can\n     * have only a single value.\n     * <P>\n     * Note: The UI necessary for displaying/editing the multiple value is not currently supported in Active\n     * Workspace 2.4.\n     */\n    vmProp.isArray = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property valueUpdated\n     *\n     * {boolean} value updated?\n     */\n    vmProp.valueUpdated = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property displayValueUpdated\n     *\n     * {boolean} display value updated?\n     */\n    vmProp.displayValueUpdated = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editableInViewModel\n     *\n     * {boolean} editable in view model?\n     */\n    vmProp.editableInViewModel = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isPropertyModifiable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */\n    vmProp.isPropertyModifiable = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isEditable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */\n    vmProp.isEditable = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property arrayLength\n     *\n     * {Number} array length\n     */\n    vmProp.arrayLength = -1;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property error\n     *\n     * {String} The message that should be displayed when some aspect of the property's value is not correct.\n     * This value must be 'null' or an empty string to not have the error be displayed.\n     */\n    vmProp.error = null;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyLabelDisplay\n     *\n     * {String} property label display\n     * empty by default\n     * see declReact/viewModelService.js for precedence\n     */\n    vmProp.propertyLabelDisplay = '';\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editLayoutSide\n     *\n     * {boolean} edit layout side\n     */\n    vmProp.editLayoutSide = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property uiValue\n     *\n     * {String} (Derived) A 'non-null' string containing comma separated values as specified in the\n     * 'displayValuesIn' parameter given in the constructor.\n     */\n    vmProp.uiValue = exports.getUiValue( displayValuesFinal );\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property overlayType\n     *\n     * {String} overlay type\n     */\n    vmProp.overlayType = VIEW_MODEL_PROPERTY;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property value\n     *\n     * {Object} database value\n     */\n    vmProp.value = _.cloneDeep( dbValue );\n\n    // for the purposes of lovs with initial values, we are expecting prevDisplayValue\n    // to be same as uiOriginalValue. This dependency is a bit of a historical accident\n    // that needs to be addressed as part of a vmProp re-organization.\n    // for now, re-introducing the intialization of this param.\n    vmProp.prevDisplayValues = displayValuesFinal;\n\n    /**\n     * @private\n     *\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property dateApi\n     *\n     * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n     * is created by a Universal Widget and of type \"DATE\".\n     *\n     * @property dateApi.isDateEnabled\n     *\n     * {boolean} TRUE if the \"DATE\" type Universal Widget should display a date field.\n     *\n     * @property dateApi.isTimeEnabled\n     *\n     * {boolean} TRUE if the \"DATE\" type Universal Widget should display a time field.\n     */\n    vmProp.dateApi = {\n        isDateEnabled: true,\n        isTimeEnabled: true\n    };\n\n    /**\n     * @private\n     *\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property radioBtnApi\n     *\n     * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n     * is created by a Universal Widget and of a type displayed as a groupd of 'radio buttons'.\n     */\n    vmProp.radioBtnApi = {};\n\n    /**\n     * -----------------------------------------------------------------------<BR>\n     * -----------------------------------------------------------------------<BR>\n     * Finish initialization of class properties <BR>\n     * -----------------------------------------------------------------------<BR>\n     * -----------------------------------------------------------------------<BR>\n     */\n\n    /**\n     */\n    var vmPropType = vmProp.type;\n\n    if( vmPropType === 'STRING' || vmPropType === 'STRINGARRAY' || vmPropType === 'CHAR' ) {\n        vmProp.inputType = 'text';\n    } else if( vmPropType === 'OBJECT' ) {\n        vmProp.dbValues = [ vmProp.dbValue ];\n    } else if( vmPropType === 'INTEGER' || vmPropType === 'INTEGERARRAY' ) {\n        if( dbValue ) {\n            if( _.isString( dbValue ) ) {\n                vmProp.dbValue = Number( dbValue );\n                vmProp.value = vmProp.dbValue;\n            } else if( _.isArray( dbValue ) ) {\n                var doubleDbValues = [];\n                for( var l = 0; l < dbValue.length; l++ ) {\n                    if( isFinite( dbValue[ l ] ) ) {\n                        doubleDbValues.push( Number( dbValue[ l ] ) );\n                    } else if( dbValue[ l ] === '' ) {\n                        doubleDbValues.push( dbValue[ l ] );\n                    }\n                }\n                vmProp.dbValue = doubleDbValues;\n                vmProp.value = _.cloneDeep( doubleDbValues );\n            } else {\n                vmProp.dbValue = dbValue;\n                vmProp.value = vmProp.dbValue;\n            }\n        }\n    } else if( vmPropType === 'BOOLEAN' || vmPropType === 'BOOLEANARRAY' ) {\n        if( declUtils.isNil( dbValue ) ) {\n            vmProp.dbValue = null;\n            vmProp.value = null; // Note: If the server had no opinion on this boolean, neither does the 'value' property.\n        } else if( _.isString( dbValue ) ) {\n            vmProp.dbValue = _isPropertyValueTrue( vmProp.dbValue );\n            vmProp.value = vmProp.dbValue;\n        } else if( _.isArray( dbValue ) ) {\n            var booleanDbValues = [];\n\n            for( var k = 0; k < dbValue.length; k++ ) {\n                booleanDbValues[ k ] = _isPropertyValueTrue( dbValue[ k ] );\n            }\n\n            vmProp.dbValue = booleanDbValues;\n            vmProp.value = _.cloneDeep( booleanDbValues );\n        }\n\n        if( _localTextBundle ) {\n            _setRadioText( vmProp, _localTextBundle );\n        } else {\n            localeSvc.getTextPromise().then( function( localTextBundle ) {\n                _localTextBundle = localTextBundle;\n                _setRadioText( vmProp, _localTextBundle );\n            } );\n        }\n    } else if( vmPropType === 'DATE' || vmPropType === 'DATEARRAY' ) {\n        if( _.isString( dbValue ) ) {\n            vmProp.dbValue = new Date( dbValue ).getTime();\n            vmProp.value = vmProp.dbValue;\n        } else if( _.isNumber( dbValue ) ) {\n            if( dbValue !== 0 ) {\n                vmProp.dbValue = new Date( dbValue ).getTime();\n                vmProp.value = vmProp.dbValue;\n            }\n        } else if( _.isArray( dbValue ) ) {\n            var dateDbValues = [];\n            for( var j = 0; j < dbValue.length; j++ ) {\n                dateDbValues[ j ] = new Date( dbValue[ j ] ).getTime();\n            }\n            vmProp.dbValue = dateDbValues;\n            vmProp.value = _.cloneDeep( dateDbValues );\n        }\n    } else if( vmPropType === 'DOUBLE' || vmPropType === 'DOUBLEARRAY' ) {\n        if( dbValue ) {\n            if( _.isString( dbValue ) ) {\n                vmProp.dbValue = Number( dbValue );\n                vmProp.value = vmProp.dbValue;\n            } else if( _.isArray( dbValue ) ) {\n                var doubleDbValues1 = [];\n\n                for( var i = 0; i < dbValue.length; i++ ) {\n                    if( dbValue[ i ] ) {\n                        doubleDbValues1.push( Number( dbValue[ i ] ) );\n                    } else if( dbValue[ i ] === '' ) {\n                        doubleDbValues1.push( dbValue[ i ] );\n                    }\n                }\n                vmProp.dbValue = doubleDbValues1;\n                vmProp.value = _.cloneDeep( doubleDbValues1 );\n            } else if( dbValue ) {\n                vmProp.dbValue = dbValue;\n                vmProp.value = vmProp.dbValue;\n            }\n        }\n    }\n};\n\n/**\n * @param {StringArray} uiValues - UI/display value array\n * @returns {String} UI value\n */\nexport let getUiValue = function( uiValues ) {\n    if( !uiValues || uiValues.length === 0 ) {\n        return '';\n    }\n    if( uiValues.length > 1 ) {\n        var uiValue = uiValues[ 0 ];\n        for( var ndx = 1; ndx < uiValues.length && ndx < 4; ndx++ ) {\n            uiValue += ', ' + uiValues[ ndx ];\n        }\n        if( ndx < uiValues.length ) {\n            uiValue += ', ...';\n        }\n        return uiValue;\n    }\n    return uiValues[ 0 ];\n};\n\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n *\n * @param {String} propertyName - the name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - user displayable name of the property\n * @param {String} dataType - data type of the property\n * @param {Object} dbValue - real value of the property. The internal (database) representation of the\n *            property's value.\n * @param {StringArray} displayValuesIn - display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n */\nexport let createViewModelProperty = function( propertyName, propertyDisplayName, dataType, dbValue,\n    displayValuesIn ) {\n    return new ViewModelProperty( propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn );\n};\n\n/**\n * Update the model data. The view model should use this method to update property data\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n * @param {Boolean} isNull - is the property value null\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n * @param {Boolean} isModifiable - TRUE if the property is modifiable\n * @param {Object} sourceObjectLastSavedDate - last saved date of source object\n */\nexport let updateModelData = function( vmProp, value, displayValues, isNull, isEditable, isModifiable,\n    sourceObjectLastSavedDate ) {\n    var displayValuesFinal = displayValues === null ? [] : displayValues;\n\n    vmProp.displayValues = displayValuesFinal;\n    vmProp.isNull = isNull;\n    vmProp.editable = isEditable;\n    vmProp.isPropertyModifiable = isModifiable;\n    vmProp.uiValue = exports.getUiValue( displayValuesFinal );\n    vmProp.sourceObjectLastSavedDate = sourceObjectLastSavedDate || vmProp.sourceObjectLastSavedDate;\n\n    if( _.isArray( value ) && !vmProp.isArray ) {\n        vmProp.value = value.slice( 0 );\n    } else {\n        vmProp.value = value;\n    }\n\n    if( vmProp.prevDisplayValues ) {\n        vmProp.prevDisplayValues = _.clone( vmProp.displayValues );\n    }\n\n    if( vmProp.uiValues ) {\n        vmProp.uiValues = _.clone( vmProp.displayValues );\n    }\n\n    if( vmProp.isArray ) {\n        vmProp.displayValsModel = [];\n        for( var i = 0; i < vmProp.displayValues.length; i++ ) {\n            vmProp.displayValsModel.push( {\n                displayValue: vmProp.displayValues[ i ],\n                selected: false,\n                isInEditMode: false\n            } );\n        }\n    }\n\n    if( !exports.isModified( vmProp ) ) {\n        vmProp.dbValue = _.cloneDeep( value );\n    }\n};\n\n/**\n * Copy the model data. The view model should use this method to copy model data\n *\n * @param {ViewModelProperty} targetProperty - ViewModelProperty object that will be updated.\n * @param {ViewModelProperty} updatedProperty - ViewModelProperty that has the updated information.\n */\nexport let copyModelData = function( targetProperty, updatedProperty ) {\n    exports.updateModelData( targetProperty, updatedProperty.value, updatedProperty.displayValues,\n        updatedProperty.isNull, updatedProperty.editable, updatedProperty.isPropertyModifiable,\n        updatedProperty.sourceObjectLastSavedDate );\n    if( updatedProperty.dbValues && updatedProperty.dbValues.length > 0 ) {\n        targetProperty.dbValues = updatedProperty.dbValues.slice( 0 );\n    } else {\n        targetProperty.dbValues = [];\n    }\n};\n\n/**\n * Set's the parent object uid in view model property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty\n * @param {String} sourceObjectUid - source object UID\n */\nexport let setSourceObjectUid = function( vmProp, sourceObjectUid ) {\n    vmProp.parentUid = sourceObjectUid;\n};\n\n/**\n * Retrieve the source object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\nexport let getSourceObjectUid = function( vmProp ) {\n    var sourceObjectUid = vmProp.parentUid;\n\n    if( !_.isEmpty( vmProp.intermediateObjectUids ) ) {\n        sourceObjectUid = vmProp.intermediateObjectUids[ vmProp.intermediateObjectUids.length - 1 ];\n    }\n\n    return sourceObjectUid;\n};\n\n/**\n * Retrieve the relation object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\nexport let getRelationObjectUid = function( vmProp ) {\n    var sourceObjectUid = vmProp.parentUid;\n\n    if( vmProp.intermediateObjectUids && vmProp.intermediateObjectUids.length > 0 ) {\n        sourceObjectUid = vmProp.intermediateObjectUids[ 0 ];\n    }\n\n    return sourceObjectUid;\n};\n\n/**\n * Returns the property name as defined in the source object for this view model property .\n *\n * For e.g. this method would return \"object_name\" for a view Model property with name\n * REF(items_tag,Item).object_name\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String} - Source property name\n */\nexport let getPropertyNameInSourceObject = function( vmProp ) {\n    var sourcePropertyName = vmProp.propertyName;\n\n    if( vmProp.isDCP || !_.isEmpty( vmProp.intermediateObjectUids ) ) {\n        if( sourcePropertyName.includes( '.' ) ) {\n            sourcePropertyName = sourcePropertyName.split( '.' ).slice( -1 ).pop();\n        }\n    }\n\n    return sourcePropertyName;\n};\n\n/**\n * Trigger digest cycle of root scope so that widgets get reflected to the overlay object updates.\n */\n/** revisitme yogesh\n  * Hint: we don't need this\n export let triggerDigestCycle = function() {\n     // trigger angular digest cycle on root scope so that value updates get reflected\n     if( _documentScope ) {\n         _documentScope.$evalAsync();\n     } else if( _docNgElement && _docNgElement.scope() ) {\n         _documentScope = _docNgElement.scope();\n         _documentScope.$evalAsync();\n     }\n };\n */\n\n/**\n * Initialize dateApi with initial value if provided from dbValue\n *\n *  @param {ViewModelProperty} props - ViewModelProperty object that will be updated.\n *\n */\nexport const initializeDateApiValues = ( props ) => {\n    let dateApi = props.dateApi;\n    let jsDate = new Date( props.dbValue );\n    jsDate = dateTimeSvc.getJSDate( jsDate );\n\n    var isDateNull = true;\n\n    if( !isNaN( jsDate ) ) {\n        if( !dateTimeSvc.isNullDate( jsDate ) ) {\n            isDateNull = false;\n\n            if( dateApi.isDateEnabled ) {\n                props.dateApi.dateObject = jsDate;\n                props.dateApi.dateValue = uwDirectiveDateTimeSvc.formatDate( jsDate );\n            }\n\n            if( dateApi.isTimeEnabled ) {\n                props.dateApi.timeValue = dateTimeSvc.formatTime( jsDate );\n            }\n        }\n    }\n\n    if( isDateNull ) {\n        if( dateApi.isDateEnabled ) {\n            props.dateApi.dateObject = dateTimeSvc.getNullDate();\n            props.dateApi.dateValue = '';\n        }\n\n        if( dateApi.isTimeEnabled && props.type !== 'DATEARRAY' ) {\n            props.dateApi.timeValue = '';\n        }\n    }\n};\n\n/**\n * Set the internal value of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n */\nexport let setValue = function( vmProp, value ) {\n    var sameAsOriginal = _.isEqual( value, vmProp.value );\n\n    if( !sameAsOriginal || vmProp.valueUpdated && !_.isEqual( value, vmProp.newValue ) ) {\n        vmProp.valueUpdated = true;\n\n        /**\n         * This happens in case of CasCade Suggestive LOV, When user changes value in first LOV, for dependent\n         * LOV value comes as [\"\"] ( array of empty string) and it causes JSON parsing error for soa call.\n         */\n        if( !vmProp.isArray && _.isArray( value ) && value.length > 0 ) {\n            vmProp.dbValue = value[ 0 ];\n        } else {\n            vmProp.dbValue = value;\n        }\n\n        if( vmProp.isArray ) {\n            vmProp.dbValues = value;\n        }\n\n        if( _.isArray( value ) && !vmProp.isArray ) {\n            vmProp.newValue = _.cloneDeep( value[ 0 ] );\n        } else {\n            vmProp.newValue = _.cloneDeep( value );\n        }\n\n        vmProp.error = null;\n\n        // Always update display values\n        // Do this first in case property change listeners want to change to something else\n        exports.updateDisplayValues( vmProp, exports.getDisplayValues( vmProp ) );\n\n        updateDateApi( vmProp );\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_VALUE );\n        }\n    }\n};\n\n/**\n * Set the old value of the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} oldValues - Old Value of property.\n */\nexport let setOldValues = function( vmProp, oldValues ) {\n    var oldValuesFinal = oldValues === null ? [] : oldValues;\n    vmProp.oldValues = oldValuesFinal;\n    vmProp.oldValue = exports.getUiValue( oldValuesFinal );\n};\n\n/**\n * Set display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\nexport let setDisplayValue = function( vmProp, displayValues ) {\n    var sameAsOriginal = !vmProp.prevDisplayValues || _.isEqual( displayValues, vmProp.prevDisplayValues );\n\n    if( !vmProp.displayValueUpdated && !sameAsOriginal || vmProp.displayValueUpdated &&\n        !_.isEqual( displayValues, vmProp.newDisplayValues ) ) {\n        vmProp.displayValueUpdated = !sameAsOriginal;\n        vmProp.error = null;\n\n        exports.updateDisplayValues( vmProp, displayValues );\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_VALUE );\n        }\n    }\n};\n\n/**\n * Set widget display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\nexport let setWidgetDisplayValue = function( vmProp, displayValues ) {\n    var sameAsOriginal = _.isEqual( displayValues, vmProp.displayValues );\n\n    if( !sameAsOriginal ) {\n        exports.updateDisplayValues( vmProp, displayValues );\n    }\n};\n\n/**\n * Set 'isEnabled' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEnabled - TRUE if the property's value should be shown normally and (if also editable)\n *            react to user input. FALSE if the property's value should be shown 'greyed out' and not react to\n *            user input (even if editable).\n */\nexport let setIsEnabled = function( vmProp, isEnabled ) {\n    vmProp.isEnabled = isEnabled;\n};\n\n/**\n * Set 'isRichText' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRichText - TRUE if the string value of the property is in HTML format and should be\n *            displayed using HTML formatting rules and edited with the 'rich text' editor.\n */\nexport let setIsRichText = function( vmProp, isRichText ) {\n    vmProp.isRichText = isRichText;\n};\n\n/**\n * Set 'isNull' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isNull - TRUE if the current property value is 'no value'. FALSE if the value is valid as\n *            is.\n */\nexport let setIsNull = function( vmProp, isNull ) {\n    vmProp.isNull = isNull;\n};\n\n/**\n * Set 'isRequired' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRequired - TRUE if the property's value is required to sucessfully complete some operation\n *            that uses it. FALSE if the property's value is optional.\n */\nexport let setIsRequired = function( vmProp, isRequired ) {\n    if( vmProp.isRequired !== isRequired ) {\n        vmProp.isRequired = isRequired;\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_REQUIRED );\n        }\n\n        // Set required place holder text if 'isRequired' flag is true\n        if( vmProp.isRequired && !vmProp.propertyRequiredText ) {\n            if( _localTextBundle ) {\n                vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n            } else {\n                localeSvc.getTextPromise().then( function( localTextBundle ) {\n                    _localTextBundle = localTextBundle;\n                    vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n                } );\n            }\n        }\n    }\n};\n\n/**\n * Set the place holder text on the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} placeHolderText - The place holder text\n */\nexport let setPlaceHolderText = function( vmProp, placeHolderText ) {\n    vmProp.propertyRequiredText = placeHolderText;\n};\n\n/**\n * Set 'isLocalizable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isLocalizable - TRUE if the property value's UI should include the option to alow any user\n *            entered value to be converted from local language (as entered) into some other system language.\n */\nexport let setIsLocalizable = function( vmProp, isLocalizable ) {\n    vmProp.isLocalizable = isLocalizable;\n    vmProp.uwAnchor = '';\n    if( isLocalizable && ( vmProp.type === 'STRING' || vmProp.type === 'STRINGARRAY' ) ) {\n        vmProp.uwAnchor = 'aw_multiLanguageProperty';\n    }\n};\n\n/**\n * Set 'isDisplayable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isDisplayable - isDisplayable state of ViewModelProperty.\n */\nexport let setIsDisplayable = function( vmProp, isDisplayable ) {\n    vmProp.isDisplayable = isDisplayable;\n};\n\n/**\n * Set 'isAutoAssign' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssign - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\nexport let setIsAutoAssign = function( vmProp, isAutoAssign ) {\n    vmProp.isAutoAssign = isAutoAssign;\n};\n\n/**\n * Set 'isAutoAssignable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssignable - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\nexport let setIsAutoAssignable = function( vmProp, isAutoAssignable ) {\n    vmProp.isAutoAssignable = isAutoAssignable;\n};\n\n/**\n * Set 'hasInitialValue' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} hasInitialValue - TRUE if the property has initial value. FALSE if the property does not\n *            have initial value.\n */\nexport let setHasInitialValue = function( vmProp, hasInitialValue ) {\n    vmProp.hasInitialValue = hasInitialValue;\n};\n\n/**\n * Set 'maxLength' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Number} maxLength - If not equal to '-1' or '0', this parameter specifies the maximum number of\n *            characters allowed in a string type property.\n */\nexport let setLength = function( vmProp, maxLength ) {\n    if( maxLength !== -1 && maxLength !== 0 ) {\n        vmProp.maxLength = maxLength;\n    }\n};\n\n/**\n * Set 'numberOfCharacters' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfCharacters - If not equal to '-1' or '0', this parameter specifies the number of\n *            characters in a string type property.\n */\nexport let setNumberOfCharacters = function( vmProp, numberOfCharacters ) {\n    if( numberOfCharacters !== -1 && numberOfCharacters !== 0 ) {\n        vmProp.numberOfCharacters = numberOfCharacters;\n    }\n};\n\n/**\n * Set 'numberOfLines' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfLines - If not equal to '-1' or '0', this parameter specifies the number of lines\n *            allowed in a property.\n */\nexport let setNumberOfLines = function( vmProp, numberOfLines ) {\n    if( numberOfLines !== -1 && numberOfLines !== 0 ) {\n        vmProp.numberOfLines = numberOfLines;\n    }\n};\n\n/**\n * Set 'isArray' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isArray - TRUE if the property can have more than one value in an ordered list. FALSE if the\n *            property can have only a single value.\n */\nexport let setIsArray = function( vmProp, isArray ) {\n    if( vmProp.isArray !== isArray ) {\n        vmProp.isArray = isArray;\n\n        // Set array place holder text if 'isArray' flag is true and the property is not required.\n        if( vmProp.isArray ) {\n            if( !_.isArray( vmProp.dbValue ) ) {\n                vmProp.dbValue = [];\n                vmProp.value = [];\n            }\n\n            if( _localTextBundle ) {\n                _setArrayText( vmProp, _localTextBundle );\n            } else {\n                localeSvc.getTextPromise().then( function( localTextBundle ) {\n                    _localTextBundle = localTextBundle;\n\n                    _setArrayText( vmProp, _localTextBundle );\n                } );\n            }\n        }\n\n        vmProp.displayValsModel = [];\n        var nVal = vmProp.displayValues.length;\n\n        for( var i = 0; i < nVal; i++ ) {\n            vmProp.displayValsModel.push( {\n                displayValue: vmProp.displayValues[ i ],\n                selected: false,\n                isInEditMode: false\n            } );\n        }\n    }\n};\n\n/**\n * Set 'arrayLength' state of ViewModelProperty. Applies only if the property is an array\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} arrayLength - set the array length. Set \"-1\" if unlimited array.\n */\nexport let setArrayLength = function( vmProp, arrayLength ) {\n    vmProp.arrayLength = arrayLength;\n};\n\n/**\n * Set 'referenceTypeName' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} typeName - set reference type name of ViewModelProperty.\n */\nexport let setReferenceType = function( vmProp, typeName ) {\n    vmProp.referenceTypeName = typeName;\n};\n\n/**\n * Set data type of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} dataType - data type of ViewModelProperty.\n */\nexport let setDataType = function( vmProp, dataType ) {\n    vmProp.type = dataType;\n};\n\n/**\n * Set 'error' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} error - The message that should be displayed when some aspect of the property's value is not\n *            correct. This value must be 'null' or an empty string to not have the error be displayed.\n */\nexport let setError = function( vmProp, error ) {\n    if( vmProp.error !== error ) {\n        vmProp.error = error;\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_ERROR );\n        }\n    }\n};\n\n/**\n * Set client validation error of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} clientValidationError - set client validation error of ViewModelProperty.\n */\nexport let setClientValidationError = function( vmProp, clientValidationError ) {\n    vmProp.clientValidationError = clientValidationError;\n};\n\n/**\n * Set server validation error flag of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} hasServerValidationError - set server validation error flag of ViewModelProperty.\n */\nexport let setServerValidationError = function( vmProp, hasServerValidationError ) {\n    vmProp.hasServerValidationError = hasServerValidationError;\n};\n\n/**\n * Set property display name of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} propertyDisplayName - user displayable name of ViewModelProperty.\n */\nexport let setPropertyDisplayName = function( vmProp, propertyDisplayName ) {\n    vmProp.propertyDisplayName = propertyDisplayName;\n};\n\n/**\n * Set property label display of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} propertyLabelDisplay - String value of property label display.\n */\nexport let setPropertyLabelDisplay = function( vmProp, propertyLabelDisplay ) {\n    vmProp.propertyLabelDisplay = propertyLabelDisplay;\n\n    // point-fix for xrt labeldisplay=titled issue...\n    // factor with declViewModelService.getLabelPlacement()?\n    if( vmProp.fielddata && propertyLabelDisplay === 'PROPERTY_LABEL_AT_TOP' ) {\n        vmProp.fielddata.labelPlacement = 'top';\n    }\n};\n\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} resetValues - True is values needs to be updated\n */\nfunction _resetPropertyAndResetUpdates( vmProp, resetValues ) {\n    var fireEvent = false;\n\n    if( vmProp.valueUpdated ) {\n        vmProp.valueUpdated = false;\n        fireEvent = true;\n    }\n\n    if( vmProp.displayValueUpdated ) {\n        vmProp.displayValueUpdated = false;\n        fireEvent = true;\n    }\n\n    if( vmProp.error ) {\n        vmProp.error = null;\n        if( !fireEvent && vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_ERROR );\n        }\n    }\n\n    if( fireEvent ) {\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_VALUE );\n        }\n\n        if( resetValues ) {\n            exports.resetValues( vmProp );\n        }\n    }\n}\n\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let resetUpdates = function( vmProp ) {\n    _resetPropertyAndResetUpdates( vmProp, true );\n};\n\n/**\n * Sets the value and displayValues with the updated 'new' values.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let replaceValuesWithNewValues = function( vmProp ) {\n    if( vmProp.valueUpdated ) {\n        vmProp.value = _.cloneDeep( vmProp.newValue );\n    }\n\n    if( vmProp.displayValueUpdated ) {\n        if( vmProp.prevDisplayValues ) {\n            vmProp.prevDisplayValues = _.clone( vmProp.displayValues );\n        }\n        vmProp.displayValues = _.clone( vmProp.newDisplayValues );\n    }\n};\n\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let resetProperty = function( vmProp ) {\n    _resetPropertyAndResetUpdates( vmProp, false );\n};\n\n/**\n * Reset db values and display values back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let resetValues = function( vmProp ) {\n    if( _.isArray( vmProp.value ) ) {\n        vmProp.dbValue = vmProp.value.slice( 0 );\n        if( !_.isUndefined( vmProp.dbOriginalValue ) ) {\n            vmProp.dbOriginalValue = vmProp.value.slice( 0 );\n        }\n    } else {\n        vmProp.dbValue = _.cloneDeep( vmProp.value );\n        if( !_.isUndefined( vmProp.dbOriginalValue ) ) {\n            vmProp.dbOriginalValue = _.cloneDeep( vmProp.value );\n        }\n    }\n\n    if( vmProp.prevDisplayValues ) {\n        vmProp.displayValues = _.clone( vmProp.prevDisplayValues );\n    }\n\n    vmProp.uiValue = exports.getUiValue( vmProp.displayValues );\n\n    if( vmProp.isArray ) {\n        vmProp.displayValsModel = [];\n\n        for( var i = 0; i < vmProp.displayValues.length; i++ ) {\n            vmProp.displayValsModel.push( {\n                displayValue: vmProp.displayValues[ i ],\n                selected: false,\n                isInEditMode: false\n            } );\n        }\n    }\n};\n\n/**\n * Set edit state of ViewModelProperty. If the property is editable and editable in view model then the\n * 'isEditable' flag is set to true which shows the properties as editable.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set edit state of ViewModelProperty.\n *\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n */\nexport let setEditState = function( vmProp, editable, override ) {\n    if( vmProp.editableInViewModel !== editable || override ) {\n        vmProp.editableInViewModel = editable;\n        vmProp.error = null;\n        vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n        exports.setEditLayoutSide( vmProp );\n\n        if( vmProp.propApi ) {\n            if( vmProp.propApi.setLOVValueProvider ) {\n                vmProp.propApi.setLOVValueProvider();\n            }\n\n            if( vmProp.propApi.setAutoAssignHandler ) {\n                vmProp.propApi.setAutoAssignHandler();\n            }\n\n            if( vmProp.propApi.setObjectLinkPropertyHandler ) {\n                vmProp.propApi.setObjectLinkPropertyHandler();\n            }\n\n            if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n                vmProp.propApi.notifyPropChange( PROP_EDITABLE );\n            }\n        }\n\n        if( vmProp.isEditable &&\n            ( !vmProp.prevDisplayValues || vmProp.prevDisplayValues !== vmProp.displayValues ) ) {\n            vmProp.prevDisplayValues = _.clone( vmProp.displayValues );\n        }\n    }\n};\n\n/**\n * Set 'editable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set editable state of ViewModelProperty.\n */\nexport let setEditable = function( vmProp, editable ) {\n    vmProp.editable = editable;\n};\n\n/**\n * Set 'isEditable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n */\nexport let setIsEditable = function( vmProp, isEditable ) {\n    if( vmProp.isEditable !== isEditable ) {\n        vmProp.isEditable = isEditable;\n\n        exports.setEditLayoutSide( vmProp );\n    }\n};\n\n/**\n * Set 'isPropertyModifiable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isPropertyModifiable - TRUE if the user should have the ability to change the property's\n *            value. FALSE if the value is read-only.\n */\nexport let setIsPropertyModifiable = function( vmProp, isPropertyModifiable ) {\n    if( vmProp.isPropertyModifiable !== isPropertyModifiable ) {\n        vmProp.isPropertyModifiable = isPropertyModifiable;\n\n        // set is editable flag whenever property modifiable state is changed\n        vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n\n        exports.setEditLayoutSide( vmProp );\n    }\n};\n\n/**\n * Set edit layout side state of ViewModelProperty. For 'Boolean' and 'Object' based properties which doesn't\n * have LOV's this flag is set to true.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let setEditLayoutSide = function( vmProp ) {\n    if( vmProp.type === 'BOOLEAN' || vmProp.type === 'OBJECT' ) {\n        vmProp.editLayoutSide = !vmProp.hasLov;\n    }\n};\n\n/**\n * Set 'hasLov' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} hasLov - TRUE if the property has a specific list of values associated with it.\n */\nexport let setHasLov = function( vmProp, hasLov ) {\n    if( vmProp.hasLov !== hasLov ) {\n        vmProp.hasLov = hasLov;\n\n        exports.setEditLayoutSide( vmProp );\n    }\n};\n\n/**\n * Set 'isSelectOnly' state of ViewModelProperty.\n * This property allows the selected lov entry to be select only, i.e, user cannot type in the widget after selecting the lov entry.\n * This change is to support isSelectOnly in aw-widget used as a list box.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isSelectOnly - TRUE/FALSE. Default is false, allows user to edit value in input box.\n */\nexport let setIsSelectOnly = function( vmProp, isSelectOnly ) {\n    if( vmProp.isSelectOnly !== isSelectOnly ) {\n        vmProp.isSelectOnly = isSelectOnly;\n    }\n};\n\n/**\n * Set 'renderingHint' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} renderingHint - Depending on the type, this string indicates some variation in how the\n *            property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include 'radiobutton',\n *            'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label', 'textbox',\n *            'textfield', 'textarea', 'longtext').\n */\nexport let setRenderingHint = function( vmProp, renderingHint ) {\n    vmProp.renderingHint = renderingHint;\n};\n\n/**\n * Set 'overlayType' of ViewModelProperty. 'viewModelPropertyOverlay' - which defines that the overlay has real\n * data(i.e IViewModelProperty). 'widgetOverlay' - which defines that the overlay has widget data.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} overlayType - set overlay type of ViewModelProperty.\n */\nexport let setOverlayType = function( vmProp, overlayType ) {\n    vmProp.overlayType = overlayType;\n};\n\n/**\n * Set 'autofocus' state of ViewModelProperty. Which defines whether the widget needs to be autofocused or NOT\n * bound to this property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} autofocus - set autofocus state of ViewModelProperty.\n */\nexport let setAutoFocus = function( vmProp, autofocus ) {\n    vmProp.autofocus = autofocus;\n};\n\n/**\n * Set 'dirty' state of ViewModelProperty. Which defines whether the widget needs to be dirty or NOT.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} dirty - set dirty state of ViewModelProperty.\n */\nexport let setDirty = function( vmProp, dirty ) {\n    vmProp.dirty = dirty;\n};\n\n/**\n * Set array max row count of ViewModelProperty. Number of visible rows for array widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} maxRowCount - set array max row count of ViewModelProperty.\n */\nexport let setMaxRowCount = function( vmProp, maxRowCount ) {\n    if( maxRowCount !== -1 && maxRowCount !== 0 && vmProp.maxRowCount !== maxRowCount ) {\n        vmProp.maxRowCount = maxRowCount;\n    }\n};\n\n/**\n * Set minimum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the earliest date/time this widget should allow.\n */\nexport let setMinimumDate = function( vmProp, dateToSet ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.minDate = dateToSet;\n    }\n};\n\n/**\n * Set maximum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the latest date/time this widget should allow.\n */\nexport let setMaximumDate = function( vmProp, dateToSet ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.maxDate = dateToSet;\n    }\n};\n\n/**\n * Set date Enabled state of ViewModelProperty. Which defines whether the date should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if date is enabled\n */\nexport let setDateEnabled = function( vmProp, enabled ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.isDateEnabled = enabled;\n    }\n};\n\n/**\n * Set time Enabled state of ViewModelProperty. Which defines whether the time should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if time is enabled.\n */\nexport let setTimeEnabled = function( vmProp, enabled ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.isTimeEnabled = enabled;\n    }\n};\n\nexport const setDateApi = ( vmProp, dateApi ) => {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi = dateApi;\n    }\n};\n\n/**\n * Set vertical state of ViewModelProperty. Which defines whether the radio button should show vertical or not.\n * Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} vertical TRUE if radio button need to be shown vertically.\n */\nexport let setRadioButtonVertical = function( vmProp, vertical ) {\n    if( vmProp && vmProp.radioBtnApi ) {\n        vmProp.radioBtnApi.vertical = vertical;\n    }\n};\n\n/**\n * Set radio button's custom true label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customTrueLabel custom true label for radio button.\n */\nexport let setRadioButtonCustomTrueLabel = function( vmProp, customTrueLabel ) {\n    if( vmProp && vmProp.radioBtnApi ) {\n        vmProp.radioBtnApi.customTrueLabel = customTrueLabel;\n    }\n};\n\n/**\n * Set radio button's custom false label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customFalseLabel custom false label for radio button.\n */\nexport let setRadioButtonCustomFalseLabel = function( vmProp, customFalseLabel ) {\n    if( vmProp && vmProp.radioBtnApi ) {\n        vmProp.radioBtnApi.customFalseLabel = customFalseLabel;\n    }\n};\n\n/**\n * Has this property been modified in the view model\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the property is modified in the view model.\n */\nexport let isModified = function( vmProp ) {\n    return vmProp.valueUpdated || vmProp.displayValueUpdated;\n};\n\n/**\n * return the display value with local configured for boolean dbValue\n *\n * @param {Boolean } value - The boolean dbValue need turn to display value.\n * @param {StringMap} localTextBundle - Text bundles to use.\n * @return {String } the display value after local.\n */\nexport const getLocalBooleanDisplayValue = function( value, localTextBundle = _localTextBundle ) {\n    if( !localTextBundle || !localTextBundle.RADIO_TRUE ) {\n        return value.toString();\n    }\n    return value ? localTextBundle.RADIO_TRUE : localTextBundle.RADIO_FALSE;\n};\n\n/**\n * Get the Display Value for Property from array type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\nfunction _getDisplayValuesFromArrayType( vmProp ) {\n    var indx;\n    var displayValues = [];\n\n    if( vmProp.type === 'DATEARRAY' && !vmProp.hasLov ) {\n        for( indx = 0; indx < vmProp.newValue.length; indx++ ) {\n            if( !vmProp.dateApi || vmProp.dateApi.isTimeEnabled !== false && vmProp.dateApi.isDateEnabled ) {\n                displayValues.push( dateTimeSvc.formatSessionDateTime( vmProp.newValue[ indx ] ) );\n            } else {\n                displayValues.push( dateTimeSvc.formatSessionDate( vmProp.newValue[ indx ] ) );\n            }\n        }\n    } else if( vmProp.type === 'OBJECTARRAY' ) {\n        for( indx = 0; indx < vmProp.newValue.length; indx++ ) {\n            displayValues.push( exports.getDisplayName( vmProp.newValue[ indx ] ) );\n        }\n    } else {\n        /**\n         * For LOVs use property display values which are already set by LOV widget.\n         */\n        if( vmProp.hasLov ) {\n            for( indx = 0; indx < vmProp.displayValues.length; indx++ ) {\n                vmProp.displayValues[ indx ] && displayValues.push( vmProp.displayValues[ indx ].toString() );\n            }\n        } else {\n            for( indx = 0; indx < vmProp.newValue.length; indx++ ) {\n                if( _.isBoolean( vmProp.newValue[ indx ] ) || vmProp.newValue[ indx ] === 'true' || vmProp.newValue[ indx ] === 'false' ) {\n                    //changing vmProp.newValue string value into boolean\n                    const newValue = typeof vmProp.newValue[ indx ] === 'string' ? vmProp.newValue[ indx ] === 'true' ? true : false : vmProp.newValue[ indx ]; // eslint-disable-line\n                    displayValues.push( getLocalBooleanDisplayValue( newValue ) );\n                } else {\n                    vmProp.newValue[ indx ] && displayValues.push( vmProp.newValue[ indx ].toString() );\n                }\n            }\n        }\n    }\n    return displayValues;\n}\n\n/**\n * Get the Display Value from DATE, OBJECT,... type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\nfunction _getDisplayValuesFromOtherTypes( vmProp ) {\n    var displayValues = [];\n    if( vmProp.type === 'DATE' ) {\n        if( !vmProp.dateApi.isTimeEnabled && vmProp.dateApi.isDateEnabled ) {\n            displayValues.push( dateTimeSvc.formatSessionDate( vmProp.newValue ) );\n        } else if( vmProp.dateApi.isTimeEnabled && !vmProp.dateApi.isDateEnabled ) {\n            displayValues.push( dateTimeSvc.formatSessionTime( vmProp.newValue ) );\n        } else {\n            displayValues.push( dateTimeSvc.formatSessionDateTime( vmProp.newValue ) );\n        }\n    } else if( vmProp.type === 'OBJECT' ) {\n        /**\n         * This is for the case where view model property is created in GWT. Once we have all all GWT\n         * code converted to native, this condition will go away\n         */\n        if( vmProp.propApi ) {\n            displayValues.push( exports.getDisplayName( vmProp.newValue ) );\n        } else { // If view model property is created in native code. e.g. declarative\n            if( !declUtils.isNil( vmProp.uiValue ) ) {\n                displayValues.push( vmProp.uiValue );\n            }\n        }\n    } else if( vmProp.type === 'BOOLEAN' ) {\n        displayValues.push( getLocalBooleanDisplayValue( vmProp.newValue ) );\n    } else if( vmProp.hasLov ) {\n        /**\n         * For LOVs use property uiValue which is already set by LOV widget.\n         */\n        if( !declUtils.isNil( vmProp.uiValue ) ) {\n            displayValues.push( vmProp.uiValue.toString() );\n        }\n    } else {\n        /**\n         * when the type is integer or string, if value is 0 or empty string, framework is not allowing\n         * the display value to be updated with those values previously.\n         */\n        if( !declUtils.isNil( vmProp.newValue ) && typeof vmProp.newValue !== 'object' ) {\n            displayValues.push( vmProp.newValue.toString() );\n        }\n    }\n    return displayValues;\n}\n\n/**\n * Get the Display Value for Property. View uses Display Value for rendering if the property is not in edit\n * state. <br>\n * View uses Display Value for rendering if the property is not in edit state. If it is edit state, it has to\n * use the value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\nexport let getDisplayValues = function( vmProp ) {\n    /**\n     * Return new display values when ViewModelProperty display values are updated.\n     */\n    if( vmProp.displayValueUpdated ) {\n        return vmProp.newDisplayValues;\n    }\n\n    /**\n     * Return the display value as per the real value when they are out of sync. If valueUpdated is true but\n     * displayValueUpdated is false, then it means they are out of sync.\n     */\n    if( vmProp.valueUpdated && vmProp.newValue !== null && vmProp.newValue !== undefined ) {\n        var displayValues = [];\n\n        if( vmProp.isArray ) {\n            displayValues = _getDisplayValuesFromArrayType( vmProp );\n        } else {\n            displayValues = _getDisplayValuesFromOtherTypes( vmProp );\n        }\n\n        return displayValues;\n    }\n\n    return vmProp.prevDisplayValues;\n};\n\n/**\n * Returns the object type name for which this property is defined.\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String } object type name for which this property is defined.\n */\nexport let getOwningTypeName = function( vmProp ) {\n    if( vmProp.propertyDescriptor && vmProp.propertyDescriptor.srcObjectTypeName ) {\n        // use the source object type name for dcp properties\n        return vmProp.propertyDescriptor.srcObjectTypeName;\n    } else if( vmProp.parentUid && clientDataModel.getObject( vmProp.parentUid ) ) {\n        return clientDataModel.getObject( vmProp.parentUid ).type;\n    }\n    // return null if no information of the owning object is found\n    return null;\n};\n\n/**\n * Get the display name of the selected type reference object\n *\n * @param {String} uid - The UID of the selected object\n * @return {String} Display name of the object\n */\nexport let getDisplayName = function( uid ) {\n    var displayName = null;\n    var modelObject = clientDataModel.getObject( uid );\n    if( modelObject && modelObject.props.object_string ) {\n        displayName = modelObject.props.object_string.uiValues[ 0 ];\n    }\n\n    return displayName;\n};\n\n/**\n * Get string of the Property value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\nexport let getValueStrings = function( vmProp ) {\n    var values = [];\n\n    if( vmProp.isArray ) {\n        if( vmProp.type === 'DATEARRAY' ) {\n            for( var indx = 0; indx < vmProp.dbValue.length; indx++ ) {\n                values.push( dateTimeSvc.formatUTC( vmProp.dbValue[ indx ] ) );\n            }\n        } else {\n            for( var indx2 = 0; indx2 < vmProp.dbValue.length; indx2++ ) {\n                values.push( String( vmProp.dbValue[ indx2 ] !== null ? vmProp.dbValue[ indx2 ] : '' ) );\n            }\n        }\n    } else {\n        if( vmProp.type === 'DATE' ) {\n            values.push( dateTimeSvc.formatUTC( vmProp.dbValue ) );\n        } else {\n            values.push( String( vmProp.dbValue !== null ? vmProp.dbValue : '' ) );\n        }\n    }\n\n    return values;\n};\n\n/**\n * Returns TRUE if the internal value of the property is a number.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a number.\n */\nexport let isDbValueNumber = function( vmProp ) {\n    if( vmProp.valueUpdated ) {\n        return isNumeric( vmProp.newValue );\n    }\n    return isNumeric( vmProp.value );\n};\n\nfunction isNumeric( n ) {\n    return !isNaN( parseFloat( n ) ) && isFinite( n );\n}\n\n/**\n * Returns TRUE if the internal value of the property is a boolean.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a boolean.\n */\nexport let isDbValueBoolean = function( vmProp ) {\n    if( vmProp.valueUpdated ) {\n        return _.isBoolean( vmProp.newValue );\n    }\n\n    return _.isBoolean( vmProp.value );\n};\n\n/**\n * Returns TRUE if the overlayType is widgetOverlay.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the overlay type is widgetOverlay.\n */\nexport let isOverlayTypeWidget = function( vmProp ) {\n    return vmProp.overlayType && vmProp.overlayType === WIDGET;\n};\n\n/**\n * Set 'initialize' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let initialize = function( vmProp ) {\n    vmProp.initialize = true;\n};\n\n/**\n * Updates property display values\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\nexport let updateDisplayValues = function( vmProp, displayValues ) {\n    var displayValuesFinal = displayValues ? displayValues : [];\n\n    if( displayValuesFinal && displayValuesFinal.length === 0 ) {\n        vmProp.isNull = true;\n    } else {\n        vmProp.isNull = false;\n    }\n    vmProp.displayValues = displayValuesFinal;\n    vmProp.newDisplayValues = displayValuesFinal;\n    vmProp.uiValue = exports.getUiValue( vmProp.displayValues );\n\n    if( vmProp.isArray ) {\n        vmProp.uiValues = vmProp.displayValues;\n        var oldDisplayValsModel = vmProp.displayValsModel;\n        vmProp.displayValsModel = [];\n        for( var i = 0; i < vmProp.displayValues.length; i++ ) {\n            if( oldDisplayValsModel.length > 0 && oldDisplayValsModel[ i ] && oldDisplayValsModel[ i ].displayValue === vmProp.displayValues[ i ] ) {\n                vmProp.displayValsModel.push( {\n                    displayValue: vmProp.displayValues[ i ],\n                    selected: oldDisplayValsModel[ i ].selected,\n                    isInEditMode: oldDisplayValsModel[ i ].isInEditMode\n                } );\n            } else {\n                vmProp.displayValsModel.push( {\n                    displayValue: vmProp.displayValues[ i ],\n                    selected: false,\n                    isInEditMode: false\n                } );\n            }\n        }\n    }\n};\n\n/**\n * Returns the base property name of the dynamic compound property.\n *\n * @param {String} propertyName - property name to be evaluated.\n * @return {String} Base property name.\n */\nexport let getBasePropertyName = function( propertyName ) {\n    var baseProperty = propertyName;\n    var lastPeriod = baseProperty.lastIndexOf( '.' );\n    baseProperty = baseProperty.substr( lastPeriod + 1 );\n\n    return baseProperty;\n};\n\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Boolean} True if the given vmProp is valid.\n */\nfunction _isValidVmProp( vmProp ) {\n    var isValid = false;\n    var vmPropType = vmProp.type;\n\n    if( vmPropType === 'INTEGER' ) {\n        if( isFinite( vmProp.dbValue ) ) {\n            if( vmProp.dbValue !== null && vmProp.dbValue !== '' ) {\n                vmProp.dbValue = Number( vmProp.dbValue );\n                if( vmProp.dbValue >= _integerMinValue && vmProp.dbValue <= _integerMaxValue ) {\n                    isValid = true;\n                }\n            } else {\n                isValid = true;\n            }\n        }\n    } else if( vmPropType === 'DOUBLE' || vmPropType === 'DATE' ) {\n        if( isFinite( vmProp.dbValue ) ) {\n            if( vmProp.dbValue !== null && vmProp.dbValue !== '' ) {\n                vmProp.dbValue = Number( vmProp.dbValue );\n            }\n            isValid = true;\n        }\n    } else {\n        isValid = true;\n    }\n\n    return isValid;\n}\n\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available.\n */\nfunction _updateVMPValue( vmProp ) {\n    var uidsArray = vmProp.dbValue;\n    if( !vmProp.isArray ) {\n        uidsArray = [];\n        if( vmProp.dbValue !== null && vmProp.dbValue !== undefined && vmProp.dbValue !== '' ) {\n            uidsArray.push( vmProp.dbValue );\n        } else if( vmProp.uiValue ) {\n            uidsArray.push( vmProp.uiValue );\n        }\n    }\n\n    if( !_pingDeferred ) {\n        _pingDeferred = AwPromiseService.instance.defer();\n    }\n    _pingLoadObjects( uidsArray, vmProp );\n    return _pingDeferred.promise;\n}\n\n/**\n * updates isNull and valueUpdated props on ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n */\nfunction _updateIsNullAndValueUpdatedFlags( vmProp ) {\n    /**\n     * Change isNull flag to false, if dbValue & uiValue exists and even though its NOT valid.\n     */\n    if( vmProp.isNull && vmProp.dbValue && vmProp.uiValue ) {\n        vmProp.isNull = false;\n    }\n\n    /**\n     * Change valueUpdated flag to true, if dbValue & uiValue exists and even though its NOT valid.\n     */\n    if( vmProp.dbValue && vmProp.uiValue ) {\n        vmProp.valueUpdated = true;\n    }\n}\n\n/**\n * Updates ViewModelProperty with updated values. Added a return of promise in case of async call to load\n * objects which is required for OBJECT or OBJECTARRAY property types. The promise is resolved or rejected based\n * on execution of the load objects api.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available. In case the input vmProp.type is not OBJECT or\n *         OBJECTARRAY, then promise returned is null. Caller should explicitly do a null check on the promise\n *         before invoking any functions on it.\n */\nexport let updateViewModelProperty = function( vmProp ) {\n    var isValid = false;\n\n    var vmPropType = vmProp.type;\n\n    isValid = _isValidVmProp( vmProp );\n\n    if( isValid ) {\n        if( vmPropType !== 'OBJECT' && vmPropType !== 'OBJECTARRAY' ) {\n            exports.setValue( vmProp, vmProp.dbValue );\n\n            if( vmProp.propApi && vmProp.propApi.fireValueChangeEvent ) {\n                vmProp.propApi.fireValueChangeEvent();\n            }\n        } else {\n            exports.setValue( vmProp, vmProp.dbValue );\n            return _updateVMPValue( vmProp );\n        }\n    } else {\n        _updateIsNullAndValueUpdatedFlags( vmProp );\n    }\n\n    return null;\n};\n\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\nexport let isViewModelProperty = function( objectToTest ) {\n    return objectToTest instanceof ViewModelProperty || objectToTest.hasOwnProperty( 'dbValues' );\n};\n\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} listOfobjectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\nexport let isArrayOfViewModelProperty = function( listOfobjectToTest ) {\n    let flag = true;\n    _.forEach( listOfobjectToTest, function( obj ) {\n        if( obj && !( exports.isViewModelProperty( obj ) || obj.hasOwnProperty( 'dbValues' ) ) ) {\n            flag = false;\n            return false;\n        }\n    } );\n    return flag;\n};\n\n/**\n * Retrieve the cdm's modelObject from a property's source object uid.\n *\n * @param {ViewModelProperty} vmProp - Property to retrieve source object\n * @return {ModelObject} The ModelObject; null if not cached\n */\nexport let getSourceModelObject = function( vmProp ) {\n    var sourceObjectUid = exports.getSourceObjectUid( vmProp );\n    return clientDataModel.getObject( sourceObjectUid );\n};\n\n/**\n * This methods attaches validation criteria in view model property.\n *\n * @param {ViewModelProperty} vmProp - Property in whcih validation criteria needs to be attched\n *\n * @param {String} conditionName - The name of the condition in validation criteria\n *\n * @param {String} msgString - The message which will be shown if the validation criteria doesn't match\n *\n */\nexport let createValidationCriteria = function( vmProp, conditionName, msgString ) {\n    var validationObj = {\n        condition: 'conditions.' + conditionName,\n        value: msgString\n    };\n    if( !vmProp.validationCriteria ) {\n        vmProp.validationCriteria = [];\n    }\n    vmProp.validationCriteria.push( validationObj );\n};\n\nexport let updateValidationResult = ( lovEntry, validationResult, uiProp ) => {\n    if( validationResult.valid && uiProp.isEditable !== false ) {\n        if( !uiProp.isArray ) {\n            if( uiProp.type !== 'DATE' ) {\n                uiProp.dbValue = lovEntry.propInternalValue;\n                uiProp.uiValue = lovEntry.propDisplayValue;\n            }\n            uiProp.dbValues = [ uiProp.dbValue ];\n            uiProp.uiValues = [ uiProp.uiValue ];\n        }\n\n        // update orig vals on validation\n        uiProp.dbOriginalValue = uiProp.dbValue;\n        uiProp.uiOriginalValue = uiProp.uiValue;\n\n        // Update dependent properties\n        _.forEach( validationResult.updatedPropValueMap, function( values, propertyName ) {\n            var sourceObjectUid = getSourceObjectUid( uiProp );\n            var toBeModifiedProp = validationResult.viewModelObj\n                .retrievePropertyWithBasePropertyName( propertyName, sourceObjectUid );\n            if( toBeModifiedProp ) {\n                var eventData = { removeValues: toBeModifiedProp.dbValue };\n                setValue( toBeModifiedProp, values );\n                setWidgetDisplayValue( toBeModifiedProp,\n                    validationResult.updatedPropDisplayValueMap[ propertyName ] );\n            }\n        } );\n        setServerValidationError( uiProp, false );\n        uiProp.error = null;\n        // revisitme: zarq9k Need to import uwValidationSvc\n        //setErrorMessage( $scope, null );\n        // var eventData = {\n        //     lovValue: lovEntry\n        // };\n        eventBus.publish( uiProp.propertyName + '.lovValueChanged', {\n            lovValue: lovEntry\n        } );\n    } else {\n        if( validationResult.error ) {\n            setServerValidationError( uiProp, true );\n            uiProp.error = validationResult.error;\n            // revisitme: zarq9k Need to import uwValidationSvc\n            //setErrorMessage( $scope, validationResult.error );\n        }\n    }\n};\n\n/**\n * zarq9k: Moved the updateDbValue from aw.property.lov.controller.\n * @param {*} uiProperty\n * @param {*} lovEntry\n */\nexport let updateLov = ( uiProperty, lovEntry, createUpdateValue, operation, checkLovEntries ) => {\n    // special handling for checkbox array lov\n    let promise;\n    if( uiProperty.renderingHint === 'checkboxoptionlov' ) {\n        if( operation === 'unchecked' ) {\n            // remove the item based on the propInternalValue\n            let index = uiProperty.dbValue.findIndex( val => val === lovEntry.propInternalValue );\n            if( _.isObject( lovEntry.propInternalValue ) ) {\n                index = uiProperty.displayValues.findIndex( val => val === lovEntry.propDisplayValue );\n            }\n            uiProperty.dbValue.splice( index, 1 );\n            uiProperty.displayValues.splice( index, 1 );\n        } else {\n            uiProperty.dbValue.push( lovEntry.propInternalValue );\n            uiProperty.displayValues.push( lovEntry.propDisplayValue );\n        }\n\n        updateDisplayValues( uiProperty, [ ...uiProperty.displayValues ] );\n        // Below weird behaviour is due to function \"updateViewModelProperty\" which returns promise is few cases and null in other cases.\n        promise = updateViewModelProperty( uiProperty );\n        if( promise ) {\n            return promise.then( ( resolve ) => resolve( uiProperty ) );\n        }\n        return new Promise( ( resolve ) => resolve( uiProperty ) );\n    }\n\n    uiProperty.displayValues.push( lovEntry.propDisplayValue );\n    var changed = uiProperty.dbOriginalValue !== lovEntry.propInternalValue;\n\n    // update the dbValue based on the uiValue\n    //zarq9k: Multiple if checks for uiProperty.type === 'DATE' - Need cleanup\n    let newDbValue = '';\n    let newUiValue = '';\n    /**\n     * For integer and double we have to actually see if it is valid number and then convert it into number\n     * type accordingly or else throw an error\n     */\n    if( uiProperty.type === 'INTEGER' || uiProperty.type === 'DOUBLE' ||\n        uiProperty.type === 'INTEGERARRAY' || uiProperty.type === 'DOUBLEARRAY' ) {\n        if( uiProperty.type === 'INTEGER' || uiProperty.type === 'INTEGERARRAY' ) {\n            // zarq9k: revisit - Need to import uwValidationSvc in the new repo.\n            //newDbValue = uwValidationSvc.checkInteger( $scope, null, lovEntry.propInternalValue );\n            // Below is a temp fix until unless uwValidationSvc comes again\n            let number = parseInt( lovEntry.propInternalValue, 10 );\n            newDbValue = isNaN( number ) ? '' : number;\n            newUiValue = lovEntry.propDisplayValue;\n        } else {\n            //newDbValue = uwValidationSvc.checkDouble( $scope, null, lovEntry.propInternalValue );\n            // Below is a temp fix until unless uwValidationSvc comes again\n            let number = parseFloat( lovEntry.propInternalValue, 10 );\n            newDbValue = isNaN( number ) ? '' : number;\n            newUiValue = lovEntry.propDisplayValue;\n        }\n        // set the converted number to the dbValue\n        //lovEntry.propInternalValue = newDbValue;\n        //uiProperty.dbValue = newDbValue;\n    } else if( propTypeDate( uiProperty ) && uiProperty.dateApi.isNotLov ) {\n        // zarq9k: revisit - Need to import uwValidationSvc in the new repo.lsdlksl;\n        //dateObject = uwValidationSvc.checkDateTime( $scope, dateObject );\n        setDateTimeValues( {\n            dateVal: '',\n            timeVal: lovEntry.propDisplayValue\n        } );\n        let dateApi = uiProperty.dateApi;\n        uiProperty.dbValue = getDBValueForDate( uiProperty );\n        uiProperty.uiValue = getUIValueForDate( dateApi );\n        newUiValue = uiProperty.uiValue;\n        newDbValue = uiProperty.dbValue;\n    } else {\n        newDbValue = lovEntry.propInternalValue;\n        newUiValue = lovEntry.propDisplayValue;\n    }\n    newDbValue = uiProperty.type === 'BOOLEAN' && ( _.isNil( newDbValue ) || newDbValue.length === 0 ) ? null : newDbValue;\n    uiProperty.dbValue = !uiProperty.isArray ? newDbValue : uiProperty.dbValue;\n\n    uiProperty.filterString = lovEntry.filterString ? lovEntry.filterString : null;\n    uiProperty.valueUpdated = true;\n\n    // update optional icon\n    uiProperty.iconSource = lovEntry.iconSource;\n    uiProperty.iconName = lovEntry.iconName;\n\n    if( uiProperty.type !== 'DATE' ) {\n        lovEntry.propInternalValue = newDbValue;\n        lovEntry.propDisplayValue = newUiValue;\n    }\n\n    if( !uiProperty.isArray ) {\n        promise = updateViewModelProperty( uiProperty );\n        clearDateTimeValues( uiProperty );\n        if( promise ) {\n            return promise.then( () => {\n                //In dirty check, If newValue and value are same then we dont show dirty backgrnd\n                //uiProperty.value = newDbValue;\n                // for array & array lov\n                uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n                uiProperty.valueUpdated = true;\n                return uiProperty;\n            } );\n        }\n        return new Promise( ( resolve, reject ) => {\n            // for array & array lov\n            uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n            uiProperty.valueUpdated = true;\n            resolve( uiProperty );\n        } );\n    }\n    return new Promise( ( resolve ) => {\n        let event = {\n            target: {\n                value: lovEntry.propInternalValue\n            }\n        };\n        let dateEvent = [ lovEntry.propInternalValue ];\n\n        if( uiProperty.type === 'OBJECTARRAY' ) {\n            dmSvc.loadObjects( dateEvent ).then( function() {\n                uiProperty = createUpdateValue( uiProperty, event );\n                resolve( uiProperty );\n            }, function( error ) {\n                return AwPromiseService.instance.reject( error );\n            } );\n        } else {\n            uiProperty = createUpdateValue( uiProperty, event );\n            resolve( uiProperty );\n        }\n    } );\n};\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function isDCPProperty\n * @param {String} propertyName - name of the property\n * @returns {Boolean} - returns whether the property is a dynamic compound property or not.\n */\nexport let isDCPProperty = function( propertyName ) {\n    if( propertyName.indexOf( '.' ) !== -1 &&\n        propertyName.indexOf( '(' ) !== -1 &&\n        ( propertyName.indexOf( 'GRM' ) !== -1 ||\n            propertyName.indexOf( 'GRMS2P' ) !== -1 ||\n            propertyName.indexOf( 'REF' ) !== -1 ||\n            propertyName.indexOf( 'REFBY' ) !== -1 ||\n            propertyName.indexOf( 'GRMREL' ) !== -1 ||\n            propertyName.indexOf( 'GRMS2PREL' ) !== -1 )\n    ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function updateViewModelProp\n * @param {*} viewProp -\n * @param {*} newVal -\n * @param {*} additionalProp - \n * @param {*} nonatomicUpdate -\n */\nexport let updateViewModelProp = function( viewProp, newVal, additionalProp, nonatomicUpdate ) {\n    if( additionalProp ) {\n        if( additionalProp.hasOwnProperty( 'displayName' ) ) {\n            viewProp.propertyDisplayName = additionalProp.displayName;\n        }\n\n        if( additionalProp.hasOwnProperty( 'isEditable' ) ) {\n            let val = _.isBoolean( additionalProp.isEditable ) ? additionalProp.isEditable :\n                additionalProp.isEditable !== 'false';\n            exports.setIsEditable( viewProp, val );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isRequired' ) ) {\n            let isRequired = _.isBoolean( additionalProp.isRequired ) ? additionalProp.isRequired :\n                additionalProp.isRequired !== 'false';\n            exports.setIsRequired( viewProp, isRequired );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isEnabled' ) ) {\n            let isEnabled = _.isBoolean( additionalProp.isEnabled ) ? additionalProp.isEnabled :\n                additionalProp.isEnabled !== 'false';\n            exports.setIsEnabled( viewProp, isEnabled );\n        }\n\n        if( additionalProp.hasOwnProperty( 'labelPosition' ) ) {\n            exports.setPropertyLabelDisplay( viewProp, additionalProp.labelPosition, true );\n            if( viewProp.labelPosition === 'PROPERTY_LABEL_AT_SIDE' ) {\n                viewProp.editLayoutSide = true;\n            }\n        }\n\n        if( additionalProp.hasOwnProperty( 'propName' ) ) {\n            viewProp.propertyName = additionalProp.propName;\n        }\n\n        if( additionalProp.hasOwnProperty( 'displayValue' ) ) {\n            viewProp.uiValues = additionalProp.displayValue;\n            viewProp.uiValue = exports.getUiValue( viewProp.uiValues );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isModifiable' ) ) {\n            exports.setIsPropertyModifiable( viewProp, additionalProp.isModifiable );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isAutoAssignable' ) ) {\n            exports.setIsAutoAssignable( viewProp, additionalProp.isAutoAssignable );\n        }\n\n        if( additionalProp.hasOwnProperty( 'maxLength' ) ) {\n            exports.setLength( viewProp, additionalProp.maxLength );\n        }\n\n        if( additionalProp.hasOwnProperty( 'renderingHint' ) ) {\n            exports.setRenderingHint( viewProp, additionalProp.renderingHint );\n        }\n\n        if( additionalProp.hasOwnProperty( 'requiredText' ) ) {\n            exports.setPlaceHolderText( viewProp, additionalProp.requiredText );\n        }\n\n        if( additionalProp.hasOwnProperty( 'vertical' ) ) {\n            viewProp.vertical = additionalProp.vertical;\n        }\n\n        if( additionalProp.hasOwnProperty( 'numberOfLines' ) ) {\n            exports.setNumberOfLines( viewProp, additionalProp.numberOfLines );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isArray' ) ) {\n            let isArray = _.isBoolean( additionalProp.isArray ) ? additionalProp.isArray :\n                additionalProp.isArray === 'true';\n            exports.setIsArray( viewProp, isArray );\n        }\n\n        additionalProp.iconName && ( viewProp.iconName = additionalProp.iconName );\n    }\n\n    if( nonatomicUpdate ) {\n        exports.setValue( viewProp, newVal );\n    }\n};\n\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\nconst exports = {\n    getUiValue,\n    createViewModelProperty,\n    updateModelData,\n    copyModelData,\n    setSourceObjectUid,\n    getSourceObjectUid,\n    getRelationObjectUid,\n    getPropertyNameInSourceObject,\n    /** revisitme yogesh\n              * Hint: we may not be required this\n             triggerDigestCycle,\n              */\n    initializeDateApiValues,\n    setValue,\n    setOldValues,\n    setDisplayValue,\n    setWidgetDisplayValue,\n    setIsEnabled,\n    setIsRichText,\n    setIsNull,\n    setIsRequired,\n    setPlaceHolderText,\n    setIsLocalizable,\n    setIsDisplayable,\n    setIsAutoAssign,\n    setIsAutoAssignable,\n    setHasInitialValue,\n    setLength,\n    setNumberOfCharacters,\n    setNumberOfLines,\n    setIsArray,\n    setArrayLength,\n    setReferenceType,\n    setDataType,\n    setError,\n    setClientValidationError,\n    setServerValidationError,\n    setPropertyDisplayName,\n    setPropertyLabelDisplay,\n    resetUpdates,\n    replaceValuesWithNewValues,\n    resetProperty,\n    resetValues,\n    setEditState,\n    setEditable,\n    setIsEditable,\n    setIsPropertyModifiable,\n    setEditLayoutSide,\n    setHasLov,\n    setIsSelectOnly,\n    setRenderingHint,\n    setOverlayType,\n    setAutoFocus,\n    setDirty,\n    setMaxRowCount,\n    setMinimumDate,\n    setMaximumDate,\n    setDateEnabled,\n    setTimeEnabled,\n    setDateApi,\n    setRadioButtonVertical,\n    setRadioButtonCustomTrueLabel,\n    setRadioButtonCustomFalseLabel,\n    isModified,\n    getDisplayValues,\n    getOwningTypeName,\n    getDisplayName,\n    getValueStrings,\n    isDbValueNumber,\n    isDbValueBoolean,\n    isOverlayTypeWidget,\n    initialize,\n    updateDisplayValues,\n    getBasePropertyName,\n    updateViewModelProperty,\n    isViewModelProperty,\n    isArrayOfViewModelProperty,\n    getSourceModelObject,\n    createValidationCriteria,\n    updateValidationResult,\n    updateLov,\n    isDCPProperty,\n    updateViewModelProp\n};\n\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is the typeCacheService.\n *\n * The purpose of this service is to store commonly used types in localStorage.\n *\n * @module soa/kernel/typeCacheService\n */\nimport _ from 'lodash';\nimport localStrg from 'js/localStorage';\nimport lzstring from 'lz-string';\nimport localeSvc from 'js/localeService';\n/**\n * Object used to place all the exported API of this module upon.\n */\n\nvar exports = {};\n/**\n * localStorage type cache.\n *\n * @private\n */\n\nvar _localPropTypes = 'propertyTypes';\n/**\n * Key used to determine the validity of a previously stored cache.\n * Used to store an object with typeCacheLMD and locale properties\n * If the typeCacheLMD or Locale change we must flush the cache.\n *\n * @private\n */\n\nvar _localPropTypesKey = 'propertyTypesKey';\n/**\n * Timer variable.\n *\n * @private\n */\n\nvar _storageTimer;\n/**\n * Types to cache.\n *\n * @private\n */\n\n\nvar _typesToCache = [];\n/**\n * SaveToLocalStorage delay time in milliseconds .\n *\n * @private\n */\n\nvar _saveToLSTime = 60000;\n/**\n * Types cache timestamp\n *\n * @private\n */\n\nvar _typeCacheLMD;\n/**\n * Checks to see if an object with the same name already exists.\n *\n * @param {StringArray} typeArray - Modeltypes to check.\n * @param {String} name - Name of the type to check.\n *\n * @returns {Boolean} TRUE if an object with the same name already exists.\n */\n\n\nfunction containsTypeDesc(typeArray, name) {\n  var found = false;\n\n  for (var i = 0; i < typeArray.length; i++) {\n    if (typeArray[i].name === name) {\n      found = true;\n      break;\n    }\n  }\n\n  return found;\n}\n/**\n * Saves any valid types added to _typesToCache to localStorage.\n */\n\n\nfunction saveToLocalStorage() {\n  _storageTimer = null;\n  var locale = localeSvc.getLocale();\n  var localTypes = [];\n\n  if (localStrg.get(_localPropTypes)) {\n    var decompressedStr = lzstring.decompressFromUTF16(localStrg.get(_localPropTypes));\n    localTypes = JSON.parse(decompressedStr);\n  }\n\n  for (var i = 0, len = _typesToCache.length; i < len; i++) {\n    if (!containsTypeDesc(localTypes, _typesToCache[i].name)) {\n      localTypes.push(_typesToCache[i]);\n    }\n  }\n\n  var typesKey = {\n    locale: locale,\n    typeCacheLMD: _typeCacheLMD\n  };\n  var compressedStr = lzstring.compressToUTF16(JSON.stringify(localTypes));\n  localStrg.publish(_localPropTypes, compressedStr);\n  localStrg.publish(_localPropTypesKey, JSON.stringify(typesKey)); // Clear out array of types to cache.\n\n  _typesToCache = [];\n}\n/**\n * Returns any typeDescriptions stored in localStorage\n *\n * @param {Number} typeCacheLMD - Last modified date of the cached local storage data.\n *\n * @return {ObjectArray} Type Descriptors.\n */\n\n\nexport let getLocalTypes = function (typeCacheLMD) {\n  var localTypes = [];\n  var locale = localeSvc.getLocale();\n\n  if (localStrg.get(_localPropTypesKey)) {\n    var currentKey = JSON.parse(localStrg.get(_localPropTypesKey)); // If the typeCacheLMD or the locale have changed we need to flush cached properties.\n\n    if (currentKey && (currentKey.locale !== locale || currentKey.typeCacheLMD !== typeCacheLMD)) {\n      localStrg.removeItem(_localPropTypes);\n      localStrg.removeItem(_localPropTypesKey);\n      return localTypes;\n    }\n  }\n\n  if (localStrg.get(_localPropTypes)) {\n    var decompressedStr = lzstring.decompressFromUTF16(localStrg.get(_localPropTypes));\n    localTypes = JSON.parse(decompressedStr);\n  }\n\n  return localTypes;\n};\n/**\n * Adds type descriptors to _typesToCache if they are included\n * in the awStartupPreferences.\n * If delayed storage is set to true as soon as the first type descriptor is added\n * a 60 second timer will begin before calling saveToLocalStorage.\n * Add subsequent calls during this 60 seconds will add types to\n * the _typesToCache.\n * After the timer has finished and the saveToLocalStorage is made\n * everything is reset.\n * If delayedStorage is not set, the saveToLocalStorage will be immediate.\n *\n * @param {Array} modelTypes - An array of type descriptors to potentially cache.\n *\n * @param {StringArray} awStartupPreferences - A string array of type descriptors to cache.\n *\n * @param {String} typeCacheLMD - A string with typeCacheLMD timestamp.\n *\n * @param {boolean} delayedStorage - A boolean to set delayed storage on or off.\n */\n\nexport let setLocalTypes = function (modelTypes, awStartupPreferences, typeCacheLMD, delayedStorage) {\n  _typeCacheLMD = typeCacheLMD;\n  modelTypes.forEach(function (element) {\n    if (_.includes(awStartupPreferences, element.name)) {\n      if (!containsTypeDesc(_typesToCache, element.name)) {\n        _typesToCache.push(element);\n      }\n    }\n  });\n\n  if (delayedStorage) {\n    if (_typesToCache && _typesToCache.length > 0 && !_storageTimer) {\n      // We are using setTimeout instead of $timeout\n      // as we do not care about the digest cycle.\n      _storageTimer = setTimeout(saveToLocalStorage, _saveToLSTime);\n    }\n  } else {\n    saveToLocalStorage();\n  }\n};\nexports = {\n  getLocalTypes,\n  setLocalTypes\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/kernel/typeCacheService.js"],"names":["exports","_localPropTypes","_localPropTypesKey","_typesToCache","_saveToLSTime","found","i","typeArray","_storageTimer","locale","localeSvc","localTypes","localStrg","decompressedStr","lzstring","JSON","len","containsTypeDesc","typesKey","typeCacheLMD","_typeCacheLMD","compressedStr","getLocalTypes","currentKey","setLocalTypes","modelTypes","_","element","setTimeout","saveToLocalStorage"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is the typeCacheService.\n *\n * The purpose of this service is to store commonly used types in localStorage.\n *\n * @module soa/kernel/typeCacheService\n */\nimport _ from 'lodash';\nimport localStrg from 'js/localStorage';\nimport lzstring from 'lz-string';\nimport localeSvc from 'js/localeService';\n\n/**\n * Object used to place all the exported API of this module upon.\n */\nvar exports = {};\n\n/**\n * localStorage type cache.\n *\n * @private\n */\nvar _localPropTypes = 'propertyTypes';\n\n/**\n * Key used to determine the validity of a previously stored cache.\n * Used to store an object with typeCacheLMD and locale properties\n * If the typeCacheLMD or Locale change we must flush the cache.\n *\n * @private\n */\nvar _localPropTypesKey = 'propertyTypesKey';\n\n/**\n * Timer variable.\n *\n * @private\n */\nvar _storageTimer;\n\n/**\n * Types to cache.\n *\n * @private\n */\nvar _typesToCache = [];\n\n/**\n * SaveToLocalStorage delay time in milliseconds .\n *\n * @private\n */\nvar _saveToLSTime = 60000;\n\n/**\n * Types cache timestamp\n *\n * @private\n */\nvar _typeCacheLMD;\n\n/**\n * Checks to see if an object with the same name already exists.\n *\n * @param {StringArray} typeArray - Modeltypes to check.\n * @param {String} name - Name of the type to check.\n *\n * @returns {Boolean} TRUE if an object with the same name already exists.\n */\nfunction containsTypeDesc( typeArray, name ) {\n    var found = false;\n    for( var i = 0; i < typeArray.length; i++ ) {\n        if( typeArray[ i ].name === name ) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n/**\n * Saves any valid types added to _typesToCache to localStorage.\n */\nfunction saveToLocalStorage() {\n    _storageTimer = null;\n    var locale = localeSvc.getLocale();\n    var localTypes = [];\n    if( localStrg.get( _localPropTypes ) ) {\n        var decompressedStr = lzstring.decompressFromUTF16( localStrg.get( _localPropTypes ) );\n        localTypes = JSON.parse( decompressedStr );\n    }\n    for( var i = 0, len = _typesToCache.length; i < len; i++ ) {\n        if( !containsTypeDesc( localTypes, _typesToCache[ i ].name ) ) {\n            localTypes.push( _typesToCache[ i ] );\n        }\n    }\n\n    var typesKey = {\n        locale: locale,\n        typeCacheLMD: _typeCacheLMD\n    };\n\n    var compressedStr = lzstring.compressToUTF16( JSON.stringify( localTypes ) );\n    localStrg.publish( _localPropTypes, compressedStr );\n    localStrg.publish( _localPropTypesKey, JSON.stringify( typesKey ) );\n\n    // Clear out array of types to cache.\n    _typesToCache = [];\n}\n\n/**\n * Returns any typeDescriptions stored in localStorage\n *\n * @param {Number} typeCacheLMD - Last modified date of the cached local storage data.\n *\n * @return {ObjectArray} Type Descriptors.\n */\nexport let getLocalTypes = function( typeCacheLMD ) {\n    var localTypes = [];\n    var locale = localeSvc.getLocale();\n    if( localStrg.get( _localPropTypesKey ) ) {\n        var currentKey = JSON.parse( localStrg.get( _localPropTypesKey ) );\n        // If the typeCacheLMD or the locale have changed we need to flush cached properties.\n        if( currentKey && ( currentKey.locale !== locale || currentKey.typeCacheLMD !== typeCacheLMD ) ) {\n            localStrg.removeItem( _localPropTypes );\n            localStrg.removeItem( _localPropTypesKey );\n            return localTypes;\n        }\n    }\n    if( localStrg.get( _localPropTypes ) ) {\n        var decompressedStr = lzstring.decompressFromUTF16( localStrg.get( _localPropTypes ) );\n        localTypes = JSON.parse( decompressedStr );\n    }\n    return localTypes;\n};\n\n/**\n * Adds type descriptors to _typesToCache if they are included\n * in the awStartupPreferences.\n * If delayed storage is set to true as soon as the first type descriptor is added\n * a 60 second timer will begin before calling saveToLocalStorage.\n * Add subsequent calls during this 60 seconds will add types to\n * the _typesToCache.\n * After the timer has finished and the saveToLocalStorage is made\n * everything is reset.\n * If delayedStorage is not set, the saveToLocalStorage will be immediate.\n *\n * @param {Array} modelTypes - An array of type descriptors to potentially cache.\n *\n * @param {StringArray} awStartupPreferences - A string array of type descriptors to cache.\n *\n * @param {String} typeCacheLMD - A string with typeCacheLMD timestamp.\n *\n * @param {boolean} delayedStorage - A boolean to set delayed storage on or off.\n */\nexport let setLocalTypes = function( modelTypes, awStartupPreferences, typeCacheLMD, delayedStorage ) {\n    _typeCacheLMD = typeCacheLMD;\n    modelTypes.forEach( function( element ) {\n        if( _.includes( awStartupPreferences, element.name ) ) {\n            if( !containsTypeDesc( _typesToCache, element.name ) ) {\n                _typesToCache.push( element );\n            }\n        }\n    } );\n\n    if( delayedStorage ) {\n        if( _typesToCache && _typesToCache.length > 0 && !_storageTimer ) {\n            // We are using setTimeout instead of $timeout\n            // as we do not care about the digest cycle.\n            _storageTimer = setTimeout( saveToLocalStorage, _saveToLSTime );\n        }\n    } else {\n        saveToLocalStorage();\n    }\n};\n\nexports = {\n    getLocalTypes,\n    setLocalTypes\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
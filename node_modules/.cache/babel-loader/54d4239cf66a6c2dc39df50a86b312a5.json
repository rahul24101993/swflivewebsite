{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * General profier for async worker\n *\n * https://github.com/GoogleChromeLabs/tti-polyfill\n *\n * @module js/splmStatsProfiler\n */\nimport { now } from 'js/splmStatsUtils';\nimport { LAST_DIGEST_BUSY_WAIT } from 'js/splmStatsConstants'; // DOM Node type in browser\n\nexport const STATE = {\n  IDLE: 0,\n  HOLD: 1,\n  WAIT: 2,\n  DONE: 3\n}; // pre save origin set timeout call\n\nconst globalSetTimeout = setTimeout;\nexport const createProfiler = function () {\n  let watchers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LAST_DIGEST_BUSY_WAIT;\n\n  let _promise;\n\n  let _state = STATE.IDLE;\n  const _watchers = [...watchers]; // addWatcher intreface to add more flexibility\n\n  const addWatcher = watcher => _watchers.push(watcher);\n\n  const profile = () => {\n    _promise = _promise || new Promise((resolve, reject) => {\n      // start time\n      const startTime = now();\n\n      const completePageLoad = () => {\n        _watchers.forEach(watcher => {\n          watcher.unregister();\n        }); // WAIT => DONE\n\n\n        _state = STATE.DONE;\n        resolve(now() - startTime - interval);\n      };\n\n      let timeoutID = globalSetTimeout(completePageLoad, interval);\n      let _requestCnt = 0;\n\n      const _onStart = () => {\n        if (_requestCnt === 0) {\n          timeoutID = clearTimeout(timeoutID); // WAIT => HOLD\n\n          _state = STATE.HOLD;\n        }\n\n        _requestCnt++; // console.log( `Profiler rquestCnt: ${_requestCnt} (onStart)` );\n      };\n\n      const _onDone = () => {\n        _requestCnt = _requestCnt > 0 ? _requestCnt - 1 : 0;\n\n        if (_requestCnt === 0) {\n          // for the case onDone come in 1stly as side effect.\n          timeoutID = clearTimeout(timeoutID);\n          timeoutID = globalSetTimeout(completePageLoad, interval); // HOLD => WAIT\n\n          _state = STATE.WAIT;\n        } // console.log( `Profiler rquestCnt: ${_requestCnt} (onDone)` );\n\n      };\n\n      _watchers.forEach(watcher => {\n        watcher.register(_onStart, _onDone);\n      }); // IDLE => WAIT\n\n\n      _state = STATE.WAIT;\n    });\n    return _promise;\n  };\n\n  return {\n    get state() {\n      return _state;\n    },\n\n    get active() {\n      return _state === STATE.HOLD || _state === STATE.WAIT;\n    },\n\n    addWatcher,\n    profile\n  };\n};\n\nconst Profiler = () => createProfiler([]);\n\n_c = Profiler;\nexport default Profiler;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profiler\");","map":{"version":3,"names":["now","LAST_DIGEST_BUSY_WAIT","STATE","IDLE","HOLD","WAIT","DONE","globalSetTimeout","setTimeout","createProfiler","watchers","interval","_promise","_state","_watchers","addWatcher","watcher","push","profile","Promise","resolve","reject","startTime","completePageLoad","forEach","unregister","timeoutID","_requestCnt","_onStart","clearTimeout","_onDone","register","state","active","Profiler"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsProfiler.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * General profier for async worker\n *\n * https://github.com/GoogleChromeLabs/tti-polyfill\n *\n * @module js/splmStatsProfiler\n */\nimport { now } from 'js/splmStatsUtils';\nimport { LAST_DIGEST_BUSY_WAIT } from 'js/splmStatsConstants';\n\n// DOM Node type in browser\nexport const STATE = {\n    IDLE: 0,\n    HOLD: 1,\n    WAIT: 2,\n    DONE: 3\n};\n\n// pre save origin set timeout call\nconst globalSetTimeout = setTimeout;\n\nexport const createProfiler = ( watchers = [], interval = LAST_DIGEST_BUSY_WAIT ) => {\n    let _promise;\n    let _state = STATE.IDLE;\n\n    const _watchers = [ ...watchers ];\n\n    // addWatcher intreface to add more flexibility\n    const addWatcher = watcher => _watchers.push( watcher );\n\n    const profile = () => {\n        _promise = _promise || new Promise( ( resolve, reject ) => {\n            // start time\n            const startTime = now();\n\n            const completePageLoad = () => {\n                _watchers.forEach( watcher => {\n                    watcher.unregister();\n                } );\n\n                // WAIT => DONE\n                _state = STATE.DONE;\n\n                resolve( now() - startTime - interval );\n            };\n\n            let timeoutID = globalSetTimeout( completePageLoad, interval );\n\n            let _requestCnt = 0;\n            const _onStart = () => {\n                if( _requestCnt === 0 ) {\n                    timeoutID = clearTimeout( timeoutID );\n\n                    // WAIT => HOLD\n                    _state = STATE.HOLD;\n                }\n                _requestCnt++;\n                // console.log( `Profiler rquestCnt: ${_requestCnt} (onStart)` );\n            };\n\n            const _onDone = () => {\n                _requestCnt = _requestCnt > 0 ? _requestCnt - 1 : 0;\n                if( _requestCnt === 0 ) {\n                    // for the case onDone come in 1stly as side effect.\n                    timeoutID = clearTimeout( timeoutID );\n                    timeoutID = globalSetTimeout( completePageLoad, interval );\n\n                    // HOLD => WAIT\n                    _state = STATE.WAIT;\n                }\n                // console.log( `Profiler rquestCnt: ${_requestCnt} (onDone)` );\n            };\n\n            _watchers.forEach( watcher => {\n                watcher.register( _onStart, _onDone );\n            } );\n\n            // IDLE => WAIT\n            _state = STATE.WAIT;\n        } );\n        return _promise;\n    };\n\n    return {\n        get state() {\n            return _state;\n        },\n        get active() {\n            return _state === STATE.HOLD || _state === STATE.WAIT;\n        },\n        addWatcher,\n        profile\n    };\n};\n\nconst Profiler = () => createProfiler( [] );\nexport default Profiler;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,qBAAT,QAAsC,uBAAtC,C,CAEA;;AACA,OAAO,MAAMC,KAAK,GAAG;EACjBC,IAAI,EAAE,CADW;EAEjBC,IAAI,EAAE,CAFW;EAGjBC,IAAI,EAAE,CAHW;EAIjBC,IAAI,EAAE;AAJW,CAAd,C,CAOP;;AACA,MAAMC,gBAAgB,GAAGC,UAAzB;AAEA,OAAO,MAAMC,cAAc,GAAG,YAAuD;EAAA,IAArDC,QAAqD,uEAA1C,EAA0C;EAAA,IAAtCC,QAAsC,uEAA3BV,qBAA2B;;EACjF,IAAIW,QAAJ;;EACA,IAAIC,MAAM,GAAGX,KAAK,CAACC,IAAnB;EAEA,MAAMW,SAAS,GAAG,CAAE,GAAGJ,QAAL,CAAlB,CAJiF,CAMjF;;EACA,MAAMK,UAAU,GAAGC,OAAO,IAAIF,SAAS,CAACG,IAAV,CAAgBD,OAAhB,CAA9B;;EAEA,MAAME,OAAO,GAAG,MAAM;IAClBN,QAAQ,GAAGA,QAAQ,IAAI,IAAIO,OAAJ,CAAa,CAAEC,OAAF,EAAWC,MAAX,KAAuB;MACvD;MACA,MAAMC,SAAS,GAAGtB,GAAG,EAArB;;MAEA,MAAMuB,gBAAgB,GAAG,MAAM;QAC3BT,SAAS,CAACU,OAAV,CAAmBR,OAAO,IAAI;UAC1BA,OAAO,CAACS,UAAR;QACH,CAFD,EAD2B,CAK3B;;;QACAZ,MAAM,GAAGX,KAAK,CAACI,IAAf;QAEAc,OAAO,CAAEpB,GAAG,KAAKsB,SAAR,GAAoBX,QAAtB,CAAP;MACH,CATD;;MAWA,IAAIe,SAAS,GAAGnB,gBAAgB,CAAEgB,gBAAF,EAAoBZ,QAApB,CAAhC;MAEA,IAAIgB,WAAW,GAAG,CAAlB;;MACA,MAAMC,QAAQ,GAAG,MAAM;QACnB,IAAID,WAAW,KAAK,CAApB,EAAwB;UACpBD,SAAS,GAAGG,YAAY,CAAEH,SAAF,CAAxB,CADoB,CAGpB;;UACAb,MAAM,GAAGX,KAAK,CAACE,IAAf;QACH;;QACDuB,WAAW,GAPQ,CAQnB;MACH,CATD;;MAWA,MAAMG,OAAO,GAAG,MAAM;QAClBH,WAAW,GAAGA,WAAW,GAAG,CAAd,GAAkBA,WAAW,GAAG,CAAhC,GAAoC,CAAlD;;QACA,IAAIA,WAAW,KAAK,CAApB,EAAwB;UACpB;UACAD,SAAS,GAAGG,YAAY,CAAEH,SAAF,CAAxB;UACAA,SAAS,GAAGnB,gBAAgB,CAAEgB,gBAAF,EAAoBZ,QAApB,CAA5B,CAHoB,CAKpB;;UACAE,MAAM,GAAGX,KAAK,CAACG,IAAf;QACH,CATiB,CAUlB;;MACH,CAXD;;MAaAS,SAAS,CAACU,OAAV,CAAmBR,OAAO,IAAI;QAC1BA,OAAO,CAACe,QAAR,CAAkBH,QAAlB,EAA4BE,OAA5B;MACH,CAFD,EA1CuD,CA8CvD;;;MACAjB,MAAM,GAAGX,KAAK,CAACG,IAAf;IACH,CAhDsB,CAAvB;IAiDA,OAAOO,QAAP;EACH,CAnDD;;EAqDA,OAAO;IACH,IAAIoB,KAAJ,GAAY;MACR,OAAOnB,MAAP;IACH,CAHE;;IAIH,IAAIoB,MAAJ,GAAa;MACT,OAAOpB,MAAM,KAAKX,KAAK,CAACE,IAAjB,IAAyBS,MAAM,KAAKX,KAAK,CAACG,IAAjD;IACH,CANE;;IAOHU,UAPG;IAQHG;EARG,CAAP;AAUH,CAxEM;;AA0EP,MAAMgB,QAAQ,GAAG,MAAMzB,cAAc,CAAE,EAAF,CAArC;;KAAMyB,Q;AACN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}
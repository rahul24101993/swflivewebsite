{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwServerVisibilityCommandBarService.js\";\n// Copyright (c) 2021 Siemens\n\n/* eslint-disable sonarjs/no-duplicate-string */\n\n/**\n * @module js/AwServerVisibilityCommandBarService\n */\nimport AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport AwStateService from 'js/awStateService';\nimport AwToolbar from 'viewmodel/AwToolbarViewModel';\nimport DataLoader from 'dataloader';\nimport Debug from 'debug';\nimport appCtxSvc from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dms from 'soa/dataManagementService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { createComponent } from 'js/declViewModelService';\nimport { debounce, forEach, uniq, includes, replace } from 'lodash';\nimport { registerDynImportEntry } from 'js/moduleLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterDynImportEntry('js/AwServerVisibilityCommandBarService', () => import('js/AwServerVisibilityCommandBarService'));\nconst trace = new Debug('command:tcCommandVisibilityService2');\n/**\n * Get the selection information for SOA input\n *\n * @param {Object[]} selection Currently selected objects\n * @param {Object} parentSelection Parent selection\n * @param {Boolean} istcgql Whether currently in GraphQL sublocation\n * @return {Object[]} Current selection information\n */\n\nconst getSelectionInfo = function () {\n  let selection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let parentSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let istcgql = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (parentSelection && parentSelection.uid === cdm.NULL_UID) {\n    parentSelection = null;\n  }\n\n  var soaMOs = [];\n  var isTCGQL = istcgql;\n  forEach(selection, function (selectedObj) {\n    var mo = cdm.getObject(selectedObj.uid);\n\n    if (mo) {\n      soaMOs.push(mo);\n    } else {\n      if (isTCGQL) {\n        soaMOs.push(selectedObj);\n      }\n    }\n  });\n  var selInfo = [];\n\n  if (soaMOs.length) {\n    var primarySelection = {\n      contextName: '',\n      parentSelectionIndex: parentSelection ? 1 : -1,\n      selectedObjects: soaMOs\n    };\n    selInfo.push(primarySelection);\n  }\n\n  if (parentSelection) {\n    var pmo = cdm.getObject(parentSelection.uid);\n\n    if (pmo) {\n      selInfo.push({\n        contextName: '',\n        parentSelectionIndex: -1,\n        selectedObjects: [parentSelection]\n      });\n    }\n  }\n\n  return selInfo;\n};\n/**\n * Get the command information for SOA input\n *\n * @param {List<String>} commandIds Specific IDs to include in the call instead of all commands\n * @return {Object[]} Command info\n */\n\n\nconst getCommandInfo = function (commandIds) {\n  return uniq(commandIds).sort().map(function (commandId) {\n    return {\n      commandCollectionId: '',\n      commandId\n    };\n  });\n};\n/**\n * Command context parameter for the current XRT page\n */\n\n\nconst XRT_PAGE_ID = 'ActiveXrtPageId';\n/**\n * Prefix use for any URL parameters included in command context\n */\n\nconst URL_PARAMETER_PREFIX = 'UrlParameter_';\n/**\n * Get the selection information for SOA input\n *\n * @param {Boolean} aw_hosting_enabled Whether currently in hosted mode\n * @param {String} aw_host_type The current host type\n * @param {String[]} commandContextParameters List of URL parameters to include in command context\n * @param {Object} processedState The current state parameters\n * @return {Object[]} The current command context\n */\n\nconst getCommandContext = function () {\n  let aw_hosting_enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let aw_host_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let commandContextParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let processedState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var hostingInfo = [{\n    contextName: 'IsHosted',\n    contextValue: aw_hosting_enabled ? 'true' : 'false'\n  }, {\n    contextName: 'HostType',\n    contextValue: aw_host_type\n  }]; //uid is always included since many teams have used to avoid writing conditions against what is selected vs the opened object\n\n  var urlInfo = commandContextParameters.concat(['uid']).map(function (param) {\n    if (includes(param, XRT_PAGE_ID)) {\n      return {\n        contextName: XRT_PAGE_ID,\n        contextValue: replace(param, XRT_PAGE_ID + ':', '')\n      };\n    }\n\n    return {\n      contextName: URL_PARAMETER_PREFIX + param,\n      contextValue: processedState[param] || ''\n    };\n  });\n  return hostingInfo.concat(urlInfo);\n};\n/**\n * Create a cache map for the dataloader to use\n *\n * Something in the declarative framework breaks the native JS map, so reimplement with the same API\n *\n * @returns {Object} Plain object matching the API of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n */\n\n\nconst getCacheMap = () => {\n  const cache = {};\n  return {\n    get: k => cache[k],\n    set: (k, v) => cache[k] = v,\n    delete: k => delete cache[k],\n    clear: () => {\n      for (const k in cache) {\n        delete cache[k];\n      }\n    }\n  };\n};\n/**\n * Get the current server visibility for the list of commands\n *\n * @param {[String]} commandIds Command IDs to load server visibility for\n * @param {Object} ctx The current context for loading\n * @returns {[Boolean]} True/false for each command ID\n */\n\n\nexport const getCurrentServerVisibility = async (commandIds, ctx) => {\n  const {\n    sublocation: {\n      clientScopeURI = ''\n    },\n    mselected,\n    pselected,\n    istcgql = false,\n    ViewModeContext: {\n      ViewModeContext\n    },\n    aw_hosting_enabled,\n    aw_host_type,\n    commandContextParameters,\n    services: {\n      awCommandVisibilityLoader\n    }\n  } = ctx; //Support for GraphQL based sublocations\n\n  if (istcgql) {\n    const isSummaryHidden = ViewModeContext === 'TableView' || ViewModeContext === 'ListView' || ViewModeContext === 'ImageView';\n    const selectObjUids = mselected.map(x => x.uid).filter(x => x);\n    const isMultiSelected = mselected.length > 1;\n\n    if (selectObjUids.length > 0 && (isSummaryHidden || isMultiSelected)) {\n      dms.loadObjects(selectObjUids);\n    }\n  }\n\n  const stateParameters = AwStateService.instance.params;\n  let pselectedIn = appCtxSvc.getCtx('pselected');\n  const getVisibleCommandsInfo = {\n    clientScopeURI,\n    selectionInfo: getSelectionInfo(mselected, pselectedIn, istcgql),\n    commandContextInfo: getCommandContext(aw_hosting_enabled, aw_host_type, commandContextParameters, stateParameters),\n    commandInfo: getCommandInfo(commandIds)\n  };\n  trace('Loading visibility commands with given context information', commandIds, getVisibleCommandsInfo);\n  const visibleCommandsInfo = await awCommandVisibilityLoader.load(getVisibleCommandsInfo);\n  const visibleCommandIds = visibleCommandsInfo.map(x => x.commandId);\n  return commandIds.map(id => visibleCommandIds.includes(id));\n};\n/**\n * Get a dataloader for command visibility based on the current selection\n *\n * @param {Object} param0 Render context\n * @param {[ViewModelObject]} mselected Selected objects from props\n * @param {ViewModelObject} pselected Parent selection from props\n * @param {Number} visibilityLoaderIdCounter Counter used to force refresh\n * @returns {DataLoader} Loader for command visibility\n */\n\nexport const getServerVisibilityLoader = (_ref, mselected, pselected, visibilityLoaderIdCounter) => {\n  let {\n    ctx\n  } = _ref;\n  //note: we could simply do { ...ctx, mselected, pselected } but other cosumers of this loader not refactored yet to use props\n  ctx.mselected = mselected ? mselected : ctx.mselected;\n  ctx.pselected = pselected ? pselected : ctx.pselected;\n  trace('Previous visibility loader is stale, creating new loader', ctx, visibilityLoaderIdCounter);\n  return new DataLoader(async commandIds => getCurrentServerVisibility(commandIds, ctx), {\n    cacheMap: getCacheMap()\n  });\n};\n/**\n * Get the derived state configuration for visibility loader\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\nexport const getDerivedVisibilityLoader = (vmDef, prop, data) => {\n  return new DerivedStateResult({\n    ctxParameters: ['ViewModeContext.ViewModeContext', 'services.awCommandVisibilityLoader', 'aw_host_type', 'aw_hosting_enabled', 'commandContextParameters', 'istcgql', 'mselected', 'pselected', 'sublocation.clientScopeURI'],\n    additionalParameters: [prop.mselected, prop.pselected, data.visibilityLoaderIdCount || 0],\n    compute: getServerVisibilityLoader\n  });\n};\n/**\n * Counter used to force server visibilty reload. Increment method is debounced to avoid\n * multiple calls when a \"cdm.relatedModified\" is happening at the same time as \"cdm.updated\"\n *\n * @returns {Object} Counter object\n */\n\nexport const getForcedLoaderCounter = () => {\n  trace('Initializing visibility loader counter');\n  return {\n    count: 0,\n    counter: {\n      increment: debounce(x => {\n        return x + 1;\n      }, 100, {\n        leading: true,\n        trailing: false\n      })\n    }\n  };\n};\n/**\n * Check the event data to determine if a server visibility reload is necessary.\n * Will increment counter only if update is required\n *\n * @param {Object} eventData cdm.relatedModified or cdm.updated event data\n * @param {*} mselected The current selected objects\n * @param {*} count The current count\n * @param {*} counter The current counter\n * @returns {Object} Updated counter\n */\n\nexport const checkForRefresh = function (eventData) {\n  let mselected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let count = arguments.length > 2 ? arguments[2] : undefined;\n  let counter = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (!counter) {\n    return count;\n  }\n\n  const mselectedUids = mselected.map(x => x.uid);\n  const modifiedObjects = eventData.relatedModified || eventData.updatedObjects || [];\n\n  if (eventData.relatedModified) {\n    trace('cdm.relatedModified', eventData.relatedModified);\n  }\n\n  if (eventData.updatedObjects) {\n    trace('cdm.updated', eventData.updatedObjects);\n  }\n\n  for (const mo of modifiedObjects) {\n    if (mselectedUids.includes(mo.uid)) {\n      trace('Incrementing counter to force reload of server visibility', mo.uid);\n      return {\n        count: counter.increment(count)\n      };\n    }\n  }\n\n  return {\n    count\n  };\n};\n/**\n * Wrap the given component with Active Workspace specific server visibility logic\n *\n * addServerVisibility :: ( [DataLoader,...props] => JSX ) => ( [Object,Object,...props] => JSX )\n *\n * @param {Component} ChildComponent The component to wrap\n * @param {String} componentId ID of the component (will appear in dev tools)\n * @returns {Component} The wrapper component\n */\n\nexport const addServerVisibility = (ChildComponent, componentId) => {\n  const ctxImportObj = {\n    serverVisibilityLoader: getDerivedVisibilityLoader\n  }; //Generated view model JSON for wrapper component\n\n  const declViewModelJson = {\n    schemaVersion: '1.0.0',\n    actions: {\n      //Refresh action used to force visibility reload without selection change\n      checkForRefresh: {\n        actionType: 'JSFunction',\n        method: 'checkForRefresh',\n        deps: 'js/AwServerVisibilityCommandBarService',\n        inputData: {\n          0: '{{data.eventData}}',\n          1: '{{props.mselected}}',\n          2: '{{data.visibilityLoaderIdCount}}',\n          3: '{{data.visibilityLoaderIdCounter}}'\n        },\n        outputData: {\n          //Increment counter to force recreation of dataloader, causing server visibility reload\n          visibilityLoaderIdCount: 'count'\n        }\n      },\n      //Initializes the counter used to \"force\" server visibility reloads\n      getForcedLoaderCounter: {\n        actionType: 'JSFunction',\n        method: 'getForcedLoaderCounter',\n        deps: 'js/AwServerVisibilityCommandBarService',\n        inputData: {},\n        outputData: {\n          visibilityLoaderIdCount: 'count',\n          visibilityLoaderIdCounter: 'counter'\n        }\n      }\n    },\n    ctx: {\n      //Use derived state to recreate a data loader whenever the relevant data (selection, etc) changes\n      //Creation of new data loader triggers reload of server visibility\n      serverVisibilityLoader: {\n        parser: {\n          method: 'getDerivedVisibilityLoader',\n          deps: 'js/AwServerVisibilityCommandBarService'\n        }\n      },\n      mselected: null,\n      pselected: null\n    },\n    onEvent: [{\n      eventId: 'cdm.relatedModified',\n      action: 'checkForRefresh',\n      cacheEventData: true\n    }, {\n      eventId: 'cdm.updated',\n      action: 'checkForRefresh',\n      cacheEventData: true\n    }],\n    props: {\n      mselected: {\n        type: 'object'\n      },\n      pselected: {\n        type: 'viewModelObject'\n      }\n    },\n    lifecycleHooks: {\n      onMount: 'getForcedLoaderCounter'\n    },\n    _viewModelId: componentId,\n    _uniqueViewModelId: componentId\n  };\n\n  const render = props => {\n    const {\n      ctx\n    } = props;\n    return /*#__PURE__*/_jsxDEV(ChildComponent, { ...props,\n      visibilityLoader: ctx.serverVisibilityLoader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 16\n    }, this);\n  };\n\n  return createComponent(declViewModelJson, render, undefined, ctxImportObj);\n};\n/**\n * AW specific wrappers of the standard AwCommandBar, AwToolbar, AwPopupCommandBar\n *\n * Instead of a server visibility loader these components will have \"mselected\" and \"pselected\" props. They\n * will use those props to manage server visiiblity. If either one of those props is not provided the values\n * from ctx.mselected and ctx.pselected will be used instead\n */\n\nexport const AwServerVisibilityPopupCommandBar = addServerVisibility(AwPopupCommandBar, 'AwServerVisibilityPopupCommandBarImpl');\n_c = AwServerVisibilityPopupCommandBar;\nexport const AwServerVisibilityCommandBar = addServerVisibility(AwCommandBar, 'AwServerVisibilityCommandBarImpl');\n_c2 = AwServerVisibilityCommandBar;\nexport const AwServerVisibilityToolbar = addServerVisibility(AwToolbar, 'AwServerVisibilityToolbarImpl');\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\n\n_c3 = AwServerVisibilityToolbar;\nexport const renderCommandBar = props => {\n  return /*#__PURE__*/_jsxDEV(AwServerVisibilityCommandBar, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 12\n  }, this);\n};\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\n\nexport const renderToolbar = props => {\n  return /*#__PURE__*/_jsxDEV(AwServerVisibilityToolbar, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 12\n  }, this);\n};\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\n\nexport const renderPopupCommandBar = props => {\n  return /*#__PURE__*/_jsxDEV(AwServerVisibilityPopupCommandBar, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 12\n  }, this);\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AwServerVisibilityPopupCommandBar\");\n$RefreshReg$(_c2, \"AwServerVisibilityCommandBar\");\n$RefreshReg$(_c3, \"AwServerVisibilityToolbar\");","map":{"version":3,"names":["AwCommandBar","AwPopupCommandBar","AwStateService","AwToolbar","DataLoader","Debug","appCtxSvc","cdm","dms","DerivedStateResult","createComponent","debounce","forEach","uniq","includes","replace","registerDynImportEntry","trace","getSelectionInfo","selection","parentSelection","istcgql","uid","NULL_UID","soaMOs","isTCGQL","selectedObj","mo","getObject","push","selInfo","length","primarySelection","contextName","parentSelectionIndex","selectedObjects","pmo","getCommandInfo","commandIds","sort","map","commandId","commandCollectionId","XRT_PAGE_ID","URL_PARAMETER_PREFIX","getCommandContext","aw_hosting_enabled","aw_host_type","commandContextParameters","processedState","hostingInfo","contextValue","urlInfo","concat","param","getCacheMap","cache","get","k","set","v","delete","clear","getCurrentServerVisibility","ctx","sublocation","clientScopeURI","mselected","pselected","ViewModeContext","services","awCommandVisibilityLoader","isSummaryHidden","selectObjUids","x","filter","isMultiSelected","loadObjects","stateParameters","instance","params","pselectedIn","getCtx","getVisibleCommandsInfo","selectionInfo","commandContextInfo","commandInfo","visibleCommandsInfo","load","visibleCommandIds","id","getServerVisibilityLoader","visibilityLoaderIdCounter","cacheMap","getDerivedVisibilityLoader","vmDef","prop","data","ctxParameters","additionalParameters","visibilityLoaderIdCount","compute","getForcedLoaderCounter","count","counter","increment","leading","trailing","checkForRefresh","eventData","mselectedUids","modifiedObjects","relatedModified","updatedObjects","addServerVisibility","ChildComponent","componentId","ctxImportObj","serverVisibilityLoader","declViewModelJson","schemaVersion","actions","actionType","method","deps","inputData","outputData","parser","onEvent","eventId","action","cacheEventData","props","type","lifecycleHooks","onMount","_viewModelId","_uniqueViewModelId","render","undefined","AwServerVisibilityPopupCommandBar","AwServerVisibilityCommandBar","AwServerVisibilityToolbar","renderCommandBar","renderToolbar","renderPopupCommandBar"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwServerVisibilityCommandBarService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable sonarjs/no-duplicate-string */\n\n/**\n * @module js/AwServerVisibilityCommandBarService\n */\nimport AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport AwStateService from 'js/awStateService';\nimport AwToolbar from 'viewmodel/AwToolbarViewModel';\nimport DataLoader from 'dataloader';\nimport Debug from 'debug';\nimport appCtxSvc from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dms from 'soa/dataManagementService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { createComponent } from 'js/declViewModelService';\nimport { debounce, forEach, uniq, includes, replace } from 'lodash';\nimport { registerDynImportEntry } from 'js/moduleLoader';\n\nregisterDynImportEntry( 'js/AwServerVisibilityCommandBarService', () => import( 'js/AwServerVisibilityCommandBarService' ) );\n\nconst trace = new Debug( 'command:tcCommandVisibilityService2' );\n\n/**\n * Get the selection information for SOA input\n *\n * @param {Object[]} selection Currently selected objects\n * @param {Object} parentSelection Parent selection\n * @param {Boolean} istcgql Whether currently in GraphQL sublocation\n * @return {Object[]} Current selection information\n */\nconst getSelectionInfo = function( selection = [], parentSelection = null, istcgql = false ) {\n    if( parentSelection && parentSelection.uid === cdm.NULL_UID ) {\n        parentSelection = null;\n    }\n    var soaMOs = [];\n    var isTCGQL = istcgql;\n    forEach( selection, function( selectedObj ) {\n        var mo = cdm.getObject( selectedObj.uid );\n        if( mo ) {\n            soaMOs.push( mo );\n        } else {\n            if( isTCGQL ) {\n                soaMOs.push( selectedObj );\n            }\n        }\n    } );\n    var selInfo = [];\n    if( soaMOs.length ) {\n        var primarySelection = {\n            contextName: '',\n            parentSelectionIndex: parentSelection ? 1 : -1,\n            selectedObjects: soaMOs\n        };\n\n        selInfo.push( primarySelection );\n    }\n    if( parentSelection ) {\n        var pmo = cdm.getObject( parentSelection.uid );\n        if( pmo ) {\n            selInfo.push( {\n                contextName: '',\n                parentSelectionIndex: -1,\n                selectedObjects: [ parentSelection ]\n            } );\n        }\n    }\n    return selInfo;\n};\n\n/**\n * Get the command information for SOA input\n *\n * @param {List<String>} commandIds Specific IDs to include in the call instead of all commands\n * @return {Object[]} Command info\n */\nconst getCommandInfo = function( commandIds ) {\n    return uniq( commandIds ).sort().map( function( commandId ) {\n        return {\n            commandCollectionId: '',\n            commandId\n        };\n    } );\n};\n\n/**\n * Command context parameter for the current XRT page\n */\nconst XRT_PAGE_ID = 'ActiveXrtPageId';\n\n/**\n * Prefix use for any URL parameters included in command context\n */\nconst URL_PARAMETER_PREFIX = 'UrlParameter_';\n\n/**\n * Get the selection information for SOA input\n *\n * @param {Boolean} aw_hosting_enabled Whether currently in hosted mode\n * @param {String} aw_host_type The current host type\n * @param {String[]} commandContextParameters List of URL parameters to include in command context\n * @param {Object} processedState The current state parameters\n * @return {Object[]} The current command context\n */\nconst getCommandContext = function( aw_hosting_enabled = false, aw_host_type = '', commandContextParameters = [], processedState = {} ) {\n    var hostingInfo = [ {\n        contextName: 'IsHosted',\n        contextValue: aw_hosting_enabled ? 'true' : 'false'\n    }, {\n        contextName: 'HostType',\n        contextValue: aw_host_type\n    } ];\n\n    //uid is always included since many teams have used to avoid writing conditions against what is selected vs the opened object\n    var urlInfo = commandContextParameters.concat( [ 'uid' ] ).map( function( param ) {\n        if( includes( param, XRT_PAGE_ID ) ) {\n            return {\n                contextName: XRT_PAGE_ID,\n                contextValue: replace( param, XRT_PAGE_ID + ':', '' )\n            };\n        }\n        return {\n            contextName: URL_PARAMETER_PREFIX + param,\n            contextValue: processedState[ param ] || ''\n        };\n    } );\n\n    return hostingInfo.concat( urlInfo );\n};\n\n/**\n * Create a cache map for the dataloader to use\n *\n * Something in the declarative framework breaks the native JS map, so reimplement with the same API\n *\n * @returns {Object} Plain object matching the API of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n */\nconst getCacheMap = () => {\n    const cache = {};\n    return {\n        get: k => cache[ k ],\n        set: ( k, v ) => cache[ k ] = v,\n        delete: k => delete cache[ k ],\n        clear: () => {\n            for( const k in cache ) {\n                delete cache[ k ];\n            }\n        }\n    };\n};\n\n/**\n * Get the current server visibility for the list of commands\n *\n * @param {[String]} commandIds Command IDs to load server visibility for\n * @param {Object} ctx The current context for loading\n * @returns {[Boolean]} True/false for each command ID\n */\nexport const getCurrentServerVisibility = async( commandIds, ctx ) => {\n    const {\n        sublocation: { clientScopeURI = '' },\n        mselected,\n        pselected,\n        istcgql = false,\n        ViewModeContext: { ViewModeContext },\n        aw_hosting_enabled,\n        aw_host_type,\n        commandContextParameters,\n        services: {\n            awCommandVisibilityLoader\n        }\n    } = ctx;\n    //Support for GraphQL based sublocations\n    if( istcgql ) {\n        const isSummaryHidden = ViewModeContext === 'TableView' || ViewModeContext === 'ListView' || ViewModeContext === 'ImageView';\n        const selectObjUids = mselected.map( x => x.uid ).filter( x => x );\n        const isMultiSelected = mselected.length > 1;\n        if( selectObjUids.length > 0 && ( isSummaryHidden || isMultiSelected ) ) {\n            dms.loadObjects( selectObjUids );\n        }\n    }\n    const stateParameters = AwStateService.instance.params;\n    let pselectedIn = appCtxSvc.getCtx( 'pselected' );\n    const getVisibleCommandsInfo = {\n        clientScopeURI,\n        selectionInfo: getSelectionInfo( mselected, pselectedIn, istcgql ),\n        commandContextInfo: getCommandContext( aw_hosting_enabled, aw_host_type, commandContextParameters, stateParameters ),\n        commandInfo: getCommandInfo( commandIds )\n    };\n    trace( 'Loading visibility commands with given context information', commandIds, getVisibleCommandsInfo );\n    const visibleCommandsInfo = await awCommandVisibilityLoader.load( getVisibleCommandsInfo );\n    const visibleCommandIds = visibleCommandsInfo.map( x => x.commandId );\n    return commandIds.map( id => visibleCommandIds.includes( id ) );\n};\n\n/**\n * Get a dataloader for command visibility based on the current selection\n *\n * @param {Object} param0 Render context\n * @param {[ViewModelObject]} mselected Selected objects from props\n * @param {ViewModelObject} pselected Parent selection from props\n * @param {Number} visibilityLoaderIdCounter Counter used to force refresh\n * @returns {DataLoader} Loader for command visibility\n */\nexport const getServerVisibilityLoader = ( {\n    ctx\n}, mselected, pselected, visibilityLoaderIdCounter ) => {\n    //note: we could simply do { ...ctx, mselected, pselected } but other cosumers of this loader not refactored yet to use props\n    ctx.mselected = mselected ? mselected : ctx.mselected;\n    ctx.pselected = pselected ? pselected : ctx.pselected;\n    trace( 'Previous visibility loader is stale, creating new loader', ctx, visibilityLoaderIdCounter );\n    return new DataLoader( async commandIds => getCurrentServerVisibility( commandIds, ctx ), {\n        cacheMap: getCacheMap()\n    } );\n};\n\n/**\n * Get the derived state configuration for visibility loader\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getDerivedVisibilityLoader = ( vmDef, prop, data ) => {\n    return new DerivedStateResult( {\n        ctxParameters: [\n            'ViewModeContext.ViewModeContext',\n            'services.awCommandVisibilityLoader',\n            'aw_host_type',\n            'aw_hosting_enabled',\n            'commandContextParameters',\n            'istcgql',\n            'mselected',\n            'pselected',\n            'sublocation.clientScopeURI'\n        ],\n        additionalParameters: [ prop.mselected, prop.pselected, data.visibilityLoaderIdCount || 0 ],\n        compute: getServerVisibilityLoader\n    } );\n};\n\n/**\n * Counter used to force server visibilty reload. Increment method is debounced to avoid\n * multiple calls when a \"cdm.relatedModified\" is happening at the same time as \"cdm.updated\"\n *\n * @returns {Object} Counter object\n */\nexport const getForcedLoaderCounter = () => {\n    trace( 'Initializing visibility loader counter' );\n    return {\n        count: 0,\n        counter: {\n            increment: debounce( x => {\n                return x + 1;\n            }, 100, {\n                leading: true,\n                trailing: false\n            } )\n        }\n    };\n};\n\n/**\n * Check the event data to determine if a server visibility reload is necessary.\n * Will increment counter only if update is required\n *\n * @param {Object} eventData cdm.relatedModified or cdm.updated event data\n * @param {*} mselected The current selected objects\n * @param {*} count The current count\n * @param {*} counter The current counter\n * @returns {Object} Updated counter\n */\nexport const checkForRefresh = ( eventData, mselected = [], count, counter ) => {\n    if( !counter ) {\n        return count;\n    }\n    const mselectedUids = mselected.map( x => x.uid );\n    const modifiedObjects = eventData.relatedModified || eventData.updatedObjects || [];\n    if( eventData.relatedModified ) {\n        trace( 'cdm.relatedModified', eventData.relatedModified );\n    }\n    if( eventData.updatedObjects ) {\n        trace( 'cdm.updated', eventData.updatedObjects );\n    }\n    for( const mo of modifiedObjects ) {\n        if( mselectedUids.includes( mo.uid ) ) {\n            trace( 'Incrementing counter to force reload of server visibility', mo.uid );\n            return {\n                count: counter.increment( count )\n            };\n        }\n    }\n    return {\n        count\n    };\n};\n\n/**\n * Wrap the given component with Active Workspace specific server visibility logic\n *\n * addServerVisibility :: ( [DataLoader,...props] => JSX ) => ( [Object,Object,...props] => JSX )\n *\n * @param {Component} ChildComponent The component to wrap\n * @param {String} componentId ID of the component (will appear in dev tools)\n * @returns {Component} The wrapper component\n */\nexport const addServerVisibility = ( ChildComponent, componentId ) => {\n    const ctxImportObj = { serverVisibilityLoader: getDerivedVisibilityLoader };\n    //Generated view model JSON for wrapper component\n    const declViewModelJson = {\n        schemaVersion: '1.0.0',\n        actions: {\n            //Refresh action used to force visibility reload without selection change\n            checkForRefresh: {\n                actionType: 'JSFunction',\n                method: 'checkForRefresh',\n                deps: 'js/AwServerVisibilityCommandBarService',\n                inputData: {\n                    0: '{{data.eventData}}',\n                    1: '{{props.mselected}}',\n                    2: '{{data.visibilityLoaderIdCount}}',\n                    3: '{{data.visibilityLoaderIdCounter}}'\n                },\n                outputData: {\n                    //Increment counter to force recreation of dataloader, causing server visibility reload\n                    visibilityLoaderIdCount: 'count'\n                }\n            },\n            //Initializes the counter used to \"force\" server visibility reloads\n            getForcedLoaderCounter: {\n                actionType: 'JSFunction',\n                method: 'getForcedLoaderCounter',\n                deps: 'js/AwServerVisibilityCommandBarService',\n                inputData: {},\n                outputData: {\n                    visibilityLoaderIdCount: 'count',\n                    visibilityLoaderIdCounter: 'counter'\n                }\n            }\n        },\n        ctx: {\n            //Use derived state to recreate a data loader whenever the relevant data (selection, etc) changes\n            //Creation of new data loader triggers reload of server visibility\n            serverVisibilityLoader: {\n                parser: {\n                    method: 'getDerivedVisibilityLoader',\n                    deps: 'js/AwServerVisibilityCommandBarService'\n                }\n            },\n            mselected: null,\n            pselected: null\n        },\n        onEvent: [ {\n            eventId: 'cdm.relatedModified',\n            action: 'checkForRefresh',\n            cacheEventData: true\n        }, {\n            eventId: 'cdm.updated',\n            action: 'checkForRefresh',\n            cacheEventData: true\n        } ],\n        props: {\n            mselected: {\n                type: 'object'\n            },\n            pselected: {\n                type: 'viewModelObject'\n            }\n        },\n        lifecycleHooks: {\n            onMount: 'getForcedLoaderCounter'\n        },\n        _viewModelId: componentId,\n        _uniqueViewModelId: componentId\n    };\n    const render = ( props ) => {\n        const { ctx } = props;\n        return <ChildComponent\n            {...props}\n            visibilityLoader={ctx.serverVisibilityLoader}\n        ></ChildComponent>;\n    };\n    return createComponent( declViewModelJson, render, undefined, ctxImportObj );\n};\n\n/**\n * AW specific wrappers of the standard AwCommandBar, AwToolbar, AwPopupCommandBar\n *\n * Instead of a server visibility loader these components will have \"mselected\" and \"pselected\" props. They\n * will use those props to manage server visiiblity. If either one of those props is not provided the values\n * from ctx.mselected and ctx.pselected will be used instead\n */\nexport const AwServerVisibilityPopupCommandBar = addServerVisibility( AwPopupCommandBar, 'AwServerVisibilityPopupCommandBarImpl' );\nexport const AwServerVisibilityCommandBar = addServerVisibility( AwCommandBar, 'AwServerVisibilityCommandBarImpl' );\nexport const AwServerVisibilityToolbar = addServerVisibility( AwToolbar, 'AwServerVisibilityToolbarImpl' );\n\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\nexport const renderCommandBar = ( props ) => {\n    return <AwServerVisibilityCommandBar\n        {...props}\n    ></AwServerVisibilityCommandBar>;\n};\n\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\nexport const renderToolbar = ( props ) => {\n    return <AwServerVisibilityToolbar\n        {...props}\n    ></AwServerVisibilityToolbar>;\n};\n\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\nexport const renderPopupCommandBar = ( props ) => {\n    return <AwServerVisibilityPopupCommandBar\n        {...props}\n    ></AwServerVisibilityPopupCommandBar>;\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable no-eval */ // Copyright (c) 2020 Siemens\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected.\n *\n * @module js/notyErrorService\n */import _ from'lodash';import declUtils from'js/declUtils';import cdm from'soa/kernel/clientDataModel';import{evalExpression}from'js/serviceUtils';var exports={};export let getLocalizedMessage=function(messageDefn,messageData,declViewModel){var errorMessages=[];let localizedMessage;errorMessages.push('<div class=\"aw-jswidgets-notyContainer\">');const messageParamMessage=getMessageParamMessage(messageData.context,messageData.params,declViewModel.i18n[messageDefn.message.messageParam.name]);if(messageParamMessage){errorMessages.push(messageParamMessage);}_.forEach(messageData.partialErrors,function(partialError){if(messageDefn.message.errorValues){_.forEach(partialError.errorValues,function(errorValue){if(messageDefn.message.errorValues.condition){if(evalExpression(messageDefn.message.errorValues.condition,[],[],true)){errorMessages=populateErrorMessage(partialError,errorValue.message,errorMessages);}}else{errorMessages=populateErrorMessage(partialError,errorValue.message,errorMessages);}if(messageDefn.message.partialError){if(messageDefn.message.partialError.condition){if(evalExpression(messageDefn.message.errorValues.condition,[],[],true)){errorMessages=populateErrorMessage(partialError,declViewModel.i18n[messageDefn.message.partialError.name],errorMessages);}}else{errorMessages=populateErrorMessage(partialError,declViewModel.i18n[messageDefn.message.partialError.name],errorMessages);}}});}else{errorMessages=populateErrorMessage(partialError,declViewModel.i18n[messageDefn.message.partialError.name],errorMessages);}});errorMessages.push('</div>');if(!_.isEmpty(errorMessages)){localizedMessage=errorMessages.join('');}return localizedMessage;};const populateErrorMessage=function(partialError,message,errorMessages){const partialErrorLocalizedMessage=getPartialErrorMessage(partialError,message);if(partialErrorLocalizedMessage){errorMessages.push(partialErrorLocalizedMessage);}return errorMessages;};const getMessageParamMessage=function(context,params,message){let localizedMessage=declUtils.applyMessageParams(message?message:'',params,context);return'<div>'+localizedMessage+'</div>';};const getPartialErrorMessage=function(partialError,message){if(partialError&&partialError.uid){var modelObject=cdm.getObject(partialError.uid);if(modelObject.props){var objectName=modelObject.props.object_string.uiValues[0];var errorMsgs=[];var reason='';_.forEach(partialError.errorValues,function(errorValue){if(errorValue){errorMsgs.push(errorValue.message);}});if(!_.isEmpty(errorMsgs)){reason=errorMsgs.join('');}let localizedMessage=declUtils.applyMessageParams(message,['{{objectName}}','{{reason}}'],{objectName:objectName,reason:reason});return'<div>'+localizedMessage+'</div>';}}return undefined;};/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */exports={getLocalizedMessage};export default exports;","map":null,"metadata":{},"sourceType":"module"}
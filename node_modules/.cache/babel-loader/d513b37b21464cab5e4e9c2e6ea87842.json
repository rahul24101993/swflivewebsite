{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service handles resolution to HTML text of special cases of icon names seen with data binding.\n *\n * @module js/awIconService\n */\nimport iconSvc from 'js/iconService';\nimport typeIconSvc from 'js/typeIconsRegistryService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport fmsUtils from 'js/fmsUtils';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n/**\n * Regular expression to extract the type from a type's file name (without number suffix).\n */\n\nvar _REGEX_TYPE_FILE_NAME = /(^type)([a-z0-9\\s]+)/i;\n/**\n * Regular expression to extract the type from a type's file name (w/number suffix).\n */\n\nvar _REGEX_TYPE_FILE_NAME_SUFFIX = /(^type)([a-z0-9\\s]+)([0-9][0-9]$)/i;\n/**\n * Regular expression detect a full type file name.\n */\n\nvar _REGEX_TYPE_FILE_EXT = /.svg$/i;\n/**\n * {String} Cached base URL path.\n */\n\nvar _iconBase = '';\n/**\n * @private\n *\n * @return {String} The path from the root of the war file to the directory where icon image files can be found.\n */\n\nfunction _getIconBaseUrlPath() {\n  if (!_iconBase) {\n    _iconBase = awConfiguration.get('baseUrl') + '/image/';\n  }\n\n  return _iconBase;\n}\n\nlet exports; // eslint-disable-line no-invalid-this\n\n/**\n * Get the icon to use when one is not found\n *\n * @returns {String} The missing icon\n */\n\nexport let getMissingIcon = function () {\n  return iconSvc.getTypeIcon('MissingImage') || '<svg></svg>';\n};\n/**\n * Get the HTML tag for the given icon name.\n *\n * @param {String} iconID - ID of the icon to return. The ID is assumed to match one of the SVG definitions\n *            or have a valid alias to an SVG. Do not include any 'size' number on the end of the ID (e.g.\n *            the SVG's file name). All model types must be prefixed with 'type'.\n *\n * @return {String} HTML tag text (&lt;IMG&gt; or &lt;SVG&gt;) for the given 'iconID' (or 'missing image'\n *         definition if the icon name has not been registered as an alias in a module.json or the SVG file\n *         was not found during war the build)..\n */\n\nexport let getIconDef = function (iconID) {\n  var iconDef = null;\n\n  if (iconID) {\n    if (_REGEX_TYPE_FILE_EXT.test(iconID)) {\n      iconDef = '<img class=\"aw-base-icon\" src=\"' + _getIconBaseUrlPath() + iconID + '\" alt=\"' + iconID + '\" />';\n    }\n\n    if (!iconDef) {\n      var parts = iconID.match(_REGEX_TYPE_FILE_NAME_SUFFIX);\n\n      if (parts && parts.length === 4) {\n        iconDef = iconSvc.getTypeIcon(parts[2]);\n      } else {\n        parts = iconID.match(_REGEX_TYPE_FILE_NAME);\n\n        if (parts && parts.length === 3) {\n          iconDef = iconSvc.getTypeIcon(parts[2]);\n        }\n      }\n    }\n  }\n\n  return iconDef || exports.getMissingIcon();\n};\n/**\n * Build thumbnail file url from the ticket input provided\n *\n * @param {String} ticket - thumbnail image ticket\n * @return {String} the URL to the thumbnail file that represents the given ticket or '' if a) the\n *         'ticket' is not valid b) there is no thumbnail.\n */\n\nexport let buildThumbnailFileUrlFromTicket = function (ticket) {\n  var thumbnailUrl = '';\n\n  if (ticket && ticket.length > 28) {\n    thumbnailUrl = browserUtils.getBaseURL() + 'fms/fmsdownload/' + fmsUtils.getFilenameFromTicket(ticket) + '?ticket=' + ticket;\n  }\n\n  return thumbnailUrl;\n};\n/**\n * Get the URL to the thumbnail file that represents the given ViewModelObject, if it exists.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the thumbnail URL for.\n * @return {String} the URL to the thumbnail file that represents the given ViewModelObject (or '' if a) the\n *         'vmo' is not valid b) there is no thumbnail.\n */\n\nexport let getThumbnailFileUrl = function (vmo) {\n  var url = '';\n\n  if (vmo) {\n    var customVmo = null;\n\n    if (vmo.modelType) {\n      customVmo = typeIconSvc.getCustomVmoForThumbnail(vmo);\n    }\n\n    if (customVmo === null) {\n      customVmo = vmo;\n    }\n\n    if (customVmo.props && customVmo.props.awp0ThumbnailImageTicket) {\n      var prop = customVmo.props.awp0ThumbnailImageTicket;\n\n      if (prop.dbValues.length > 0) {\n        var ticket = prop.dbValues[0];\n        url = exports.buildThumbnailFileUrlFromTicket(ticket);\n      }\n    } else if (customVmo.thumbnailURL) {\n      url = customVmo.thumbnailURL;\n    }\n  }\n\n  return url;\n};\nexport let getTypeIconURLFromHierarchy = function (vmo) {\n  if (vmo && vmo.typeHierarchy) {\n    var typeFileName;\n\n    for (let index = 0; index < vmo.typeHierarchy.length; index++) {\n      var typeName = vmo.typeHierarchy[index];\n      typeFileName = iconMapSvc.getTypeFileName(typeName);\n\n      if (typeFileName) {\n        return iconSvc.getTypeIconFileUrl(typeFileName);\n      }\n    }\n\n    if (!typeFileName) {\n      return exports.getTypeIconURL('MissingImage');\n    }\n  }\n\n  return 0;\n};\n/**\n * Get the URL to the icon file that represents the 'type' of the given ViewModelObject.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the icon definition for.\n * @return {String} the URL to the icon file that represents the 'type' of the given ViewModelObject (or ''\n *         if a) the 'vmo' is not valid b) the type icon has not been registered as an alias in a\n *         module.json or c) the SVG file was not found during war the build).\n */\n\nexport let getTypeIconFileUrl = function (vmo) {\n  var url = '';\n\n  if (vmo && vmo.modelType) {\n    var customTypeIcon = typeIconSvc.getCustomIcon(vmo);\n\n    if (customTypeIcon && customTypeIcon.length > 0) {\n      url = iconSvc.getTypeIconFileUrl(customTypeIcon);\n    } else {\n      if (vmo.modelType.constantsMap && vmo.modelType.constantsMap.IconFileName) {\n        url = _getIconBaseUrlPath() + vmo.modelType.constantsMap.IconFileName;\n      } else {\n        if (vmo.modelType.typeHierarchyArray) {\n          var typeIconFileName = cmm.getTypeIconFileName(vmo.modelType);\n          url = iconSvc.getTypeIconFileUrl(typeIconFileName);\n        } else if (vmo.typeHierarchy) {\n          url = exports.getTypeIconURLFromHierarchy(vmo);\n        }\n      }\n    }\n  } else if (vmo && vmo.typeHierarchy) {\n    url = exports.getTypeIconURLFromHierarchy(vmo);\n  }\n\n  return url;\n};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon\n *            for.\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been\n *         registered as an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconURL = function (typeName) {\n  return iconSvc.getTypeIconURL(typeName);\n};\n/**\n * Given a type hierarchy, get the URL to the icon file for the type or its closest superior.\n *\n * @param {StringArray} typeHierarchy - The type hierarchy.\n *\n * @return {String} The URL to the icon file.\n */\n\nexport let getTypeIconFileUrlForTypeHierarchy = function (typeHierarchy) {\n  for (var j in typeHierarchy) {\n    var iconUrl = iconSvc.getTypeIconURL(typeHierarchy[j]);\n\n    if (iconUrl !== null) {\n      return iconUrl;\n    }\n  }\n\n  return '';\n};\nexports = {\n  getMissingIcon,\n  getIconDef,\n  buildThumbnailFileUrlFromTicket,\n  getThumbnailFileUrl,\n  getTypeIconURLFromHierarchy,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTypeIconFileUrlForTypeHierarchy\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/awIconService.js"],"names":["_REGEX_TYPE_FILE_NAME","_REGEX_TYPE_FILE_NAME_SUFFIX","_REGEX_TYPE_FILE_EXT","_iconBase","awConfiguration","getMissingIcon","iconSvc","getIconDef","iconDef","_getIconBaseUrlPath","parts","iconID","exports","buildThumbnailFileUrlFromTicket","thumbnailUrl","ticket","browserUtils","fmsUtils","getThumbnailFileUrl","url","customVmo","vmo","typeIconSvc","prop","getTypeIconURLFromHierarchy","index","typeName","typeFileName","iconMapSvc","getTypeIconFileUrl","customTypeIcon","typeIconFileName","cmm","getTypeIconURL","getTypeIconFileUrlForTypeHierarchy","iconUrl","typeHierarchy"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service handles resolution to HTML text of special cases of icon names seen with data binding.\n *\n * @module js/awIconService\n */\nimport iconSvc from 'js/iconService';\nimport typeIconSvc from 'js/typeIconsRegistryService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport fmsUtils from 'js/fmsUtils';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n\n/**\n * Regular expression to extract the type from a type's file name (without number suffix).\n */\nvar _REGEX_TYPE_FILE_NAME = /(^type)([a-z0-9\\s]+)/i;\n\n/**\n * Regular expression to extract the type from a type's file name (w/number suffix).\n */\nvar _REGEX_TYPE_FILE_NAME_SUFFIX = /(^type)([a-z0-9\\s]+)([0-9][0-9]$)/i;\n\n/**\n * Regular expression detect a full type file name.\n */\nvar _REGEX_TYPE_FILE_EXT = /.svg$/i;\n\n/**\n * {String} Cached base URL path.\n */\nvar _iconBase = '';\n\n/**\n * @private\n *\n * @return {String} The path from the root of the war file to the directory where icon image files can be found.\n */\nfunction _getIconBaseUrlPath() {\n    if( !_iconBase ) {\n        _iconBase = awConfiguration.get( 'baseUrl' ) + '/image/';\n    }\n    return _iconBase;\n}\n\nlet exports; // eslint-disable-line no-invalid-this\n\n/**\n * Get the icon to use when one is not found\n *\n * @returns {String} The missing icon\n */\nexport let getMissingIcon = function() {\n    return iconSvc.getTypeIcon( 'MissingImage' ) || '<svg></svg>';\n};\n\n/**\n * Get the HTML tag for the given icon name.\n *\n * @param {String} iconID - ID of the icon to return. The ID is assumed to match one of the SVG definitions\n *            or have a valid alias to an SVG. Do not include any 'size' number on the end of the ID (e.g.\n *            the SVG's file name). All model types must be prefixed with 'type'.\n *\n * @return {String} HTML tag text (&lt;IMG&gt; or &lt;SVG&gt;) for the given 'iconID' (or 'missing image'\n *         definition if the icon name has not been registered as an alias in a module.json or the SVG file\n *         was not found during war the build)..\n */\nexport let getIconDef = function( iconID ) {\n    var iconDef = null;\n\n    if( iconID ) {\n        if( _REGEX_TYPE_FILE_EXT.test( iconID ) ) {\n            iconDef = '<img class=\"aw-base-icon\" src=\"' + _getIconBaseUrlPath() + iconID + '\" alt=\"' + iconID + '\" />';\n        }\n        if( !iconDef ) {\n            var parts = iconID.match( _REGEX_TYPE_FILE_NAME_SUFFIX );\n\n            if( parts && parts.length === 4 ) {\n                iconDef = iconSvc.getTypeIcon( parts[ 2 ] );\n            } else {\n                parts = iconID.match( _REGEX_TYPE_FILE_NAME );\n\n                if( parts && parts.length === 3 ) {\n                    iconDef = iconSvc.getTypeIcon( parts[ 2 ] );\n                }\n            }\n        }\n    }\n    return iconDef || exports.getMissingIcon();\n};\n\n/**\n * Build thumbnail file url from the ticket input provided\n *\n * @param {String} ticket - thumbnail image ticket\n * @return {String} the URL to the thumbnail file that represents the given ticket or '' if a) the\n *         'ticket' is not valid b) there is no thumbnail.\n */\nexport let buildThumbnailFileUrlFromTicket = function( ticket ) {\n    var thumbnailUrl = '';\n    if( ticket && ticket.length > 28 ) {\n        thumbnailUrl = browserUtils.getBaseURL() + 'fms/fmsdownload/' +\n            fmsUtils.getFilenameFromTicket( ticket ) + '?ticket=' + ticket;\n    }\n\n    return thumbnailUrl;\n};\n\n/**\n * Get the URL to the thumbnail file that represents the given ViewModelObject, if it exists.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the thumbnail URL for.\n * @return {String} the URL to the thumbnail file that represents the given ViewModelObject (or '' if a) the\n *         'vmo' is not valid b) there is no thumbnail.\n */\nexport let getThumbnailFileUrl = function( vmo ) {\n    var url = '';\n    if( vmo ) {\n        var customVmo = null;\n        if( vmo.modelType ) {\n            customVmo = typeIconSvc.getCustomVmoForThumbnail( vmo );\n        }\n        if( customVmo === null ) {\n            customVmo = vmo;\n        }\n        if( customVmo.props && customVmo.props.awp0ThumbnailImageTicket ) {\n            var prop = customVmo.props.awp0ThumbnailImageTicket;\n            if( prop.dbValues.length > 0 ) {\n                var ticket = prop.dbValues[ 0 ];\n                url = exports.buildThumbnailFileUrlFromTicket( ticket );\n            }\n        } else if( customVmo.thumbnailURL ) {\n            url = customVmo.thumbnailURL;\n        }\n    }\n    return url;\n};\n\nexport let getTypeIconURLFromHierarchy = function( vmo ) {\n    if( vmo && vmo.typeHierarchy ) {\n        var typeFileName;\n        for( let index = 0; index < vmo.typeHierarchy.length; index++ ) {\n            var typeName = vmo.typeHierarchy[ index ];\n            typeFileName = iconMapSvc.getTypeFileName( typeName );\n            if( typeFileName ) {\n                return iconSvc.getTypeIconFileUrl( typeFileName );\n            }\n        }\n        if( !typeFileName ) {\n            return exports.getTypeIconURL( 'MissingImage' );\n        }\n    }\n    return 0;\n};\n\n/**\n * Get the URL to the icon file that represents the 'type' of the given ViewModelObject.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the icon definition for.\n * @return {String} the URL to the icon file that represents the 'type' of the given ViewModelObject (or ''\n *         if a) the 'vmo' is not valid b) the type icon has not been registered as an alias in a\n *         module.json or c) the SVG file was not found during war the build).\n */\nexport let getTypeIconFileUrl = function( vmo ) {\n    var url = '';\n    if( vmo && vmo.modelType ) {\n        var customTypeIcon = typeIconSvc.getCustomIcon( vmo );\n        if( customTypeIcon && customTypeIcon.length > 0 ) {\n            url = iconSvc.getTypeIconFileUrl( customTypeIcon );\n        } else {\n            if( vmo.modelType.constantsMap && vmo.modelType.constantsMap.IconFileName ) {\n                url = _getIconBaseUrlPath() + vmo.modelType.constantsMap.IconFileName;\n            } else {\n                if( vmo.modelType.typeHierarchyArray ) {\n                    var typeIconFileName = cmm.getTypeIconFileName( vmo.modelType );\n\n                    url = iconSvc.getTypeIconFileUrl( typeIconFileName );\n                } else if( vmo.typeHierarchy ) {\n                    url = exports.getTypeIconURLFromHierarchy( vmo );\n                }\n            }\n        }\n    } else if( vmo && vmo.typeHierarchy ) {\n        url = exports.getTypeIconURLFromHierarchy( vmo );\n    }\n    return url;\n};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon\n *            for.\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been\n *         registered as an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconURL = function( typeName ) {\n    return iconSvc.getTypeIconURL( typeName );\n};\n\n/**\n * Given a type hierarchy, get the URL to the icon file for the type or its closest superior.\n *\n * @param {StringArray} typeHierarchy - The type hierarchy.\n *\n * @return {String} The URL to the icon file.\n */\nexport let getTypeIconFileUrlForTypeHierarchy = function( typeHierarchy ) {\n    for( var j in typeHierarchy ) {\n        var iconUrl = iconSvc.getTypeIconURL( typeHierarchy[ j ] );\n        if( iconUrl !== null ) {\n            return iconUrl;\n        }\n    }\n\n    return '';\n};\n\nexports = {\n    getMissingIcon,\n    getIconDef,\n    buildThumbnailFileUrlFromTicket,\n    getThumbnailFileUrl,\n    getTypeIconURLFromHierarchy,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTypeIconFileUrlForTypeHierarchy\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
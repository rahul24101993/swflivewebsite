{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwContextControlService.js\";\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport cfgSvc from 'js/configurationService';\nimport workSvc from 'js/workspaceService';\nimport contextSvc from 'js/contextContributionService';\nimport _ from 'lodash';\nimport { includeComponent } from 'js/moduleLoader';\nimport appCtxService from 'js/appCtxService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst loadView = (viewname, idx) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: includeComponent(viewname, {\n      key: idx\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n};\n\nconst getContributedContextViews = (contextJson, workspaceContexts, anchor, ctx) => {\n  let filterContextList;\n  let allActivePlacements = [];\n  let sortedActiveList;\n  let allContexts = {};\n\n  if (contextJson && contextJson.contexts) {\n    let availContexts = Object.keys(contextJson.contexts);\n\n    let allowedContexts = _.intersection(availContexts, workspaceContexts);\n\n    if (allowedContexts && allowedContexts.length > 0) {\n      filterContextList = allowedContexts;\n    } else {\n      filterContextList = availContexts;\n    } // get only active sortedlist\n\n\n    _.forEach(filterContextList, function (contextId) {\n      let activePlacement = contextSvc.getAllPlacements(allContexts, contextJson.placements, contextId, {\n        ctx: ctx\n      });\n      let isActivePlacementVisible = contextSvc.isPlacementVisible(activePlacement, {\n        ctx: ctx\n      });\n\n      if (isActivePlacementVisible) {\n        let activeView = _.get(contextJson.contexts, contextId);\n\n        let headerContri = _.assign(activePlacement, activeView);\n\n        allActivePlacements.push(headerContri);\n      }\n    });\n\n    let anchorFilteredList = _.filter(allActivePlacements, {\n      anchor: anchor\n    });\n\n    sortedActiveList = _.sortBy(anchorFilteredList, 'priority');\n    return _.map(sortedActiveList, 'view');\n  }\n\n  return [];\n};\n\nexport const fetchContributedViews = async ctx => {\n  const workspaceContexts = ctx.workspace && (await workSvc.getAvailableContexts(ctx.workspace.workspaceId));\n  const contextJson = await cfgSvc.getCfg('contextConfiguration');\n  return {\n    workspaceContexts,\n    contextJson\n  };\n};\nexport const registerUserInfo = ctx => {\n  if (ctx.user && ctx.tcSessionData) {\n    const userVMO = viewModelObjectService.createViewModelObject(ctx.user);\n\n    if (userVMO) {\n      appCtxService.registerCtx('user', userVMO);\n    }\n  }\n\n  if (ctx.userSession && ctx.userSession.uid) {\n    const userSession = viewModelObjectService.createViewModelObject(ctx.userSession.uid, 'Edit');\n    appCtxService.registerCtx('userSession', userSession);\n  }\n};\nexport const awContextControlRenderFunction = props => {\n  //revisitMe:\n  //the ctxMin used in some complex method like conditionService.evaluateCondition() cause some issues\n  //use ctxDeprecated to resolve them\n  const {\n    ctxDeprecated,\n    viewModel\n  } = props;\n  const {\n    data\n  } = viewModel;\n  const contributedViews = data.contextJson && getContributedContextViews(data.contextJson, data.workspaceContexts, props.anchor, ctxDeprecated);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-row flex-auto sw-contextControl\",\n    children: [contributedViews && contributedViews.map(loadView), props.children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwContextControlService.js"],"names":["loadView","includeComponent","key","idx","getContributedContextViews","allActivePlacements","allContexts","contextJson","availContexts","Object","allowedContexts","_","filterContextList","activePlacement","ctx","isActivePlacementVisible","activeView","headerContri","anchorFilteredList","anchor","sortedActiveList","fetchContributedViews","workspaceContexts","workSvc","cfgSvc","registerUserInfo","userVMO","viewModelObjectService","appCtxService","userSession","awContextControlRenderFunction","props","viewModel","data","contributedViews"],"mappings":"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","sourcesContent":["import viewModelObjectService from 'js/viewModelObjectService';\nimport cfgSvc from 'js/configurationService';\nimport workSvc from 'js/workspaceService';\nimport contextSvc from 'js/contextContributionService';\nimport _ from 'lodash';\nimport { includeComponent } from 'js/moduleLoader';\nimport appCtxService from 'js/appCtxService';\n\nconst loadView = ( viewname, idx ) => {\n    return <div>{includeComponent( viewname, { key: idx } )}</div>;\n};\n\nconst getContributedContextViews = ( contextJson, workspaceContexts, anchor, ctx ) => {\n    let filterContextList;\n    let allActivePlacements = [];\n    let sortedActiveList;\n    let allContexts = {};\n    if( contextJson && contextJson.contexts ) {\n        let availContexts = Object.keys( contextJson.contexts );\n        let allowedContexts = _.intersection( availContexts, workspaceContexts );\n\n        if( allowedContexts && allowedContexts.length > 0 ) {\n            filterContextList = allowedContexts;\n        } else {\n            filterContextList = availContexts;\n        }\n\n        // get only active sortedlist\n        _.forEach( filterContextList, function( contextId ) {\n            let activePlacement = contextSvc.getAllPlacements( allContexts, contextJson.placements, contextId, { ctx: ctx } );\n            let isActivePlacementVisible = contextSvc.isPlacementVisible( activePlacement, { ctx: ctx } );\n            if( isActivePlacementVisible ) {\n                let activeView = _.get( contextJson.contexts, contextId );\n                let headerContri = _.assign( activePlacement, activeView );\n                allActivePlacements.push( headerContri );\n            }\n        } );\n        let anchorFilteredList = _.filter( allActivePlacements, {\n            anchor: anchor\n        } );\n        sortedActiveList = _.sortBy( anchorFilteredList, 'priority' );\n        return _.map( sortedActiveList, 'view' );\n    }\n    return [];\n};\n\nexport const fetchContributedViews = async( ctx ) => {\n    const workspaceContexts = ctx.workspace && await workSvc.getAvailableContexts( ctx.workspace.workspaceId );\n    const contextJson = await cfgSvc.getCfg( 'contextConfiguration' );\n    return {\n        workspaceContexts,\n        contextJson\n    };\n};\n\nexport const registerUserInfo = ( ctx ) => {\n    if( ctx.user && ctx.tcSessionData ) {\n        const userVMO = viewModelObjectService.createViewModelObject( ctx.user );\n        if( userVMO ) {\n            appCtxService.registerCtx( 'user', userVMO );\n        }\n    }\n\n    if( ctx.userSession && ctx.userSession.uid ) {\n        const userSession = viewModelObjectService.createViewModelObject(\n            ctx.userSession.uid, 'Edit' );\n        appCtxService.registerCtx( 'userSession', userSession );\n    }\n};\n\nexport const awContextControlRenderFunction = ( props ) => {\n    //revisitMe:\n    //the ctxMin used in some complex method like conditionService.evaluateCondition() cause some issues\n    //use ctxDeprecated to resolve them\n    const { ctxDeprecated, viewModel } = props;\n    const { data } = viewModel;\n    const contributedViews = data.contextJson && getContributedContextViews( data.contextJson, data.workspaceContexts, props.anchor, ctxDeprecated );\n\n    return (\n        <div className='sw-row flex-auto sw-contextControl'>\n            {contributedViews && contributedViews.map( loadView )}\n            {props.children}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
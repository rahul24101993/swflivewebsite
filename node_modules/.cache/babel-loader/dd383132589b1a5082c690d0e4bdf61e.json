{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * TODO\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/awFileService\n */\n\n/**\n * Get file name from path\n *\n * @param {String} filePath - The file path to get\n *\n * @return {String} file name\n */\nexport let getFileFromPath = function (filePath) {\n  if (filePath !== null) {\n    let seperatorIndex = filePath.lastIndexOf('\\\\');\n\n    if (seperatorIndex === -1) {\n      seperatorIndex = filePath.lastIndexOf('/');\n    }\n\n    return filePath.substring(seperatorIndex + 1);\n  }\n\n  return null;\n};\n/**\n * Get file name without extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name without extension\n */\n\nexport let getFileNameWithoutExtension = function (fileName) {\n  const extIndex = fileName.lastIndexOf('.');\n\n  if (extIndex > -1) {\n    return fileName.substring(0, extIndex);\n  }\n\n  return fileName;\n};\n/**\n * Get file name extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name extension\n */\n\nexport let getFileExtension = function (fileName) {\n  const extIndex = fileName.lastIndexOf('.');\n\n  if (extIndex > -1) {\n    return fileName.substring(extIndex);\n  }\n\n  return '';\n};\n/**\n * Look for support of the 'files' in the 'dataTranfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.\n */\n\nexport let dataTransferContainsFiles = function (event) {\n  if (event.dataTransfer) {\n    const types = event.dataTransfer.types;\n\n    if (types) {\n      for (let i = 0; i < types.length; ++i) {\n        if (types[i] === 'Files') {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * check if the current file extension match the filter types.\n *\n * @param {String } typeFilter - The types that file need match .\n * @param {String } fileExt - The file need match .\n *\n * @return {boolean} TRUE if the 'file' match the 'typeFilter'.\n */\n\nexport let fileMatchTypes = function (typeFilter, fileExt) {\n  if (typeFilter) {\n    const validFileExtensions = typeFilter.split(',');\n\n    if (fileExt !== '') {\n      fileExt = fileExt.replace('.', '');\n    }\n\n    for (let ndx = 0; ndx < validFileExtensions.length; ndx++) {\n      let validFileExt = validFileExtensions[ndx].trim();\n\n      if (validFileExt !== null) {\n        validFileExt = validFileExt.replace('.', '');\n\n        if (fileExt !== '' && fileExt.toLowerCase() === validFileExt.toLowerCase()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return true;\n};\nexport default {\n  getFileFromPath,\n  getFileNameWithoutExtension,\n  getFileExtension,\n  dataTransferContainsFiles,\n  fileMatchTypes\n};","map":{"version":3,"names":["getFileFromPath","filePath","seperatorIndex","lastIndexOf","substring","getFileNameWithoutExtension","fileName","extIndex","getFileExtension","dataTransferContainsFiles","event","dataTransfer","types","i","length","fileMatchTypes","typeFilter","fileExt","validFileExtensions","split","replace","ndx","validFileExt","trim","toLowerCase"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awFileService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/**\n * TODO\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/awFileService\n */\n\n/**\n * Get file name from path\n *\n * @param {String} filePath - The file path to get\n *\n * @return {String} file name\n */\nexport let getFileFromPath = function( filePath ) {\n    if( filePath !== null ) {\n        let seperatorIndex = filePath.lastIndexOf( '\\\\' );\n        if( seperatorIndex === -1 ) {\n            seperatorIndex = filePath.lastIndexOf( '/' );\n        }\n        return filePath.substring( seperatorIndex + 1 );\n    }\n\n    return null;\n};\n\n/**\n * Get file name without extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name without extension\n */\nexport let getFileNameWithoutExtension = function( fileName ) {\n    const extIndex = fileName.lastIndexOf( '.' );\n    if( extIndex > -1 ) {\n        return fileName.substring( 0, extIndex );\n    }\n    return fileName;\n};\n\n/**\n * Get file name extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name extension\n */\nexport let getFileExtension = function( fileName ) {\n    const extIndex = fileName.lastIndexOf( '.' );\n    if( extIndex > -1 ) {\n        return fileName.substring( extIndex );\n    }\n    return '';\n};\n\n/**\n * Look for support of the 'files' in the 'dataTranfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.\n */\nexport let dataTransferContainsFiles = function( event ) {\n    if( event.dataTransfer ) {\n        const types = event.dataTransfer.types;\n\n        if( types ) {\n            for( let i = 0; i < types.length; ++i ) {\n                if( types[ i ] === 'Files' ) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n\n/**\n * check if the current file extension match the filter types.\n *\n * @param {String } typeFilter - The types that file need match .\n * @param {String } fileExt - The file need match .\n *\n * @return {boolean} TRUE if the 'file' match the 'typeFilter'.\n */\nexport let fileMatchTypes = function( typeFilter, fileExt ) {\n    if( typeFilter ) {\n        const validFileExtensions = typeFilter.split( ',' );\n        if( fileExt !== '' ) {\n            fileExt = fileExt.replace( '.', '' );\n        }\n        for( let ndx = 0; ndx < validFileExtensions.length; ndx++ ) {\n            let validFileExt = validFileExtensions[ ndx ].trim();\n            if( validFileExt !== null ) {\n                validFileExt = validFileExt.replace( '.', '' );\n                if( fileExt !== '' &&\n                    fileExt.toLowerCase() === validFileExt.toLowerCase() ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n};\n\nexport default {\n    getFileFromPath,\n    getFileNameWithoutExtension,\n    getFileExtension,\n    dataTransferContainsFiles,\n    fileMatchTypes\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
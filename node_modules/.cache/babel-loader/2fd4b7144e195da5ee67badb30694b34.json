{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.selectionService}  which helps manage selection.\n *\n * @module js/selection.service\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nlet exports = {}; // eslint-disable-line no-invalid-this\n\n/**\n * selection name space\n */\n\nvar _selected = 'selected';\n/**\n * multi selection name space\n */\n\nvar _mselected = 'mselected';\n/**\n * parent selection name space\n */\n\nvar _pselected = 'pselected';\n/**\n * relation info name space\n */\n\nvar _relationInfo = 'relationContext';\nexport let updateSelection = function (selection, parentSelection, relationInformation) {\n  var currentSelection = exports.getSelection();\n  var rInfo = relationInformation ? {\n    relationInfo: relationInformation\n  } : undefined;\n  var singleSelection = null;\n  var multiSelection = [];\n\n  if (_.isArray(selection)) {\n    singleSelection = selection[0];\n\n    for (var i = 0; i < selection.length; i++) {\n      multiSelection.push(selection[i]);\n    }\n  } else if (selection) {\n    singleSelection = selection;\n    multiSelection = [selection];\n  }\n\n  var contextChanged = false;\n\n  if (!currentSelection.selected || !_.isEqual(singleSelection, currentSelection.selected[0])) {\n    appCtxService.registerCtx(_selected, singleSelection);\n    contextChanged = true;\n  }\n\n  if (!_.isEqual(multiSelection, currentSelection.selected)) {\n    appCtxService.registerCtx(_mselected, multiSelection);\n    contextChanged = true;\n  }\n\n  if (!_.isEqual(parentSelection, currentSelection.parent)) {\n    appCtxService.registerCtx(_pselected, parentSelection);\n    contextChanged = true;\n  }\n\n  if (!_.isEqual(rInfo, currentSelection.relationInfo)) {\n    appCtxService.registerCtx(_relationInfo, rInfo);\n    contextChanged = true;\n  }\n\n  if (contextChanged) {\n    return exports.updateCommandContext();\n  }\n\n  return AwPromiseService.instance.resolve();\n};\nexport let getSelection = function () {\n  return {\n    selected: appCtxService.getCtx(_mselected),\n    parent: appCtxService.getCtx(_pselected),\n    relationInfo: appCtxService.getCtx(_relationInfo)\n  };\n};\nexport let getAlternateSelectedObjects = function (propObjects) {\n  var modelObjects = [];\n  var uidsToLoad = [];\n\n  if (propObjects) {\n    _.forEach(propObjects, function (property) {\n      if (property && property.dbValues) {\n        _.forEach(property.dbValues, function (dbValue) {\n          var modelObject = cdm.getObject(dbValue);\n\n          if (modelObject && !_.isEmpty(modelObject.props)) {\n            modelObjects.push(modelObject);\n          } else {\n            uidsToLoad.push(dbValue);\n          }\n        });\n      }\n    });\n\n    if (!_.isEmpty(uidsToLoad)) {\n      _.forEach(uidsToLoad, function (uid) {\n        var modelObject = cdm.getObject(uid);\n        modelObjects.push(modelObject);\n      });\n    }\n  }\n\n  return modelObjects;\n};\nexport let updateCommandContext = function () {\n  return AwPromiseService.instance.resolve();\n};\nexports = {\n  updateSelection,\n  getSelection,\n  getAlternateSelectedObjects,\n  updateCommandContext\n};\nexport default exports;\n/**\n * Set of utility functions to manage selection\n *\n * @member selectionService\n * @memberof NgServices\n *\n * @param {AwPromiseService.instance} AwPromiseService.instance - Service to use.\n * @param {appCtxService} appCtxService - Service to use.\n * @param {soa_kernel_clientDataModel} cdm - Service to use.\n */\n\n/**\n * Update the selection context\n *\n * @function updateSelection\n * @memberOf NgServices.selectionService\n *\n * @param {Object | Object[]} selection - The new selection\n * @param {Object} parentSelection - The new parent selection\n * @param {Object[]} relationInformation - The new relation information\n *\n * @return {Promise} A promise resolved once selection and command context are updated.\n */\n\n/**\n * Get the selection from the context\n *\n * @function getSelection\n * @memberOf NgServices.selectionService\n *\n * @return {Object} An object containing the selection and the parent selection\n */\n\n/**\n * Returns the model objects based off input property objects\n *\n * @function getTargetModelObjects\n * @memberOf NgServices.selectionService\n *\n * @param {Array} propObjects - array of property objects\n *\n * @return {Array} array of alternate selected model objects containing the results\n */\n\n/**\n * Update the command context\n *\n * @function updateCommandContext\n * @memberOf NgServices.selectionService\n *\n * @return {Promise} A promise resolved once command context is updated.\n */\n\neventBus.subscribe('cdm.modified', function (event) {\n  // Update the VMOs in context for the modified model objects\n  var mSelectedInCtx = appCtxService.getCtx(_mselected);\n  var selectedInCtx = appCtxService.getCtx(_selected);\n\n  _.forEach(event.modifiedObjects, function _iterateModifiedObjects(updatedObj) {\n    _.forEach(mSelectedInCtx, function _updateAppCtxSelection(selectedObj) {\n      // Verifying the object is same. Also, we need to ensure that object is a View Model object.\n      // For model objects, the data binding should be handled already. So we don't need this\n      if (updatedObj.uid === selectedObj.uid && viewModelObjectSrv.isViewModelObject(selectedObj)) {\n        var updatedVmo = viewModelObjectSrv.createViewModelObject(updatedObj, 'EDIT');\n\n        if (updatedVmo && updatedVmo.props) {\n          viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(updatedVmo, mSelectedInCtx); // No need for object name check here because if 'mselected' is a VMO, 'selected' has to be VMO\n\n          if (selectedInCtx.uid === selectedObj.uid) {\n            viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(updatedVmo, [selectedInCtx]);\n          }\n        }\n      }\n    });\n  });\n});","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/selection.service.js"],"names":["exports","_selected","_mselected","_pselected","_relationInfo","updateSelection","currentSelection","rInfo","relationInformation","relationInfo","singleSelection","multiSelection","_","selection","i","contextChanged","appCtxService","AwPromiseService","getSelection","selected","parent","getAlternateSelectedObjects","modelObjects","uidsToLoad","property","modelObject","cdm","updateCommandContext","eventBus","mSelectedInCtx","selectedInCtx","event","updatedObj","selectedObj","viewModelObjectSrv","updatedVmo"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.selectionService}  which helps manage selection.\n *\n * @module js/selection.service\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\nlet exports = {}; // eslint-disable-line no-invalid-this\n\n/**\n * selection name space\n */\nvar _selected = 'selected';\n\n/**\n * multi selection name space\n */\nvar _mselected = 'mselected';\n\n/**\n * parent selection name space\n */\nvar _pselected = 'pselected';\n\n/**\n * relation info name space\n */\nvar _relationInfo = 'relationContext';\n\nexport let updateSelection = function( selection, parentSelection, relationInformation ) {\n    var currentSelection = exports.getSelection();\n\n    var rInfo = relationInformation ? {\n        relationInfo: relationInformation\n    } : undefined;\n\n    var singleSelection = null;\n    var multiSelection = [];\n    if( _.isArray( selection ) ) {\n        singleSelection = selection[ 0 ];\n        for( var i = 0; i < selection.length; i++ ) {\n            multiSelection.push( selection[ i ] );\n        }\n    } else if( selection ) {\n        singleSelection = selection;\n        multiSelection = [ selection ];\n    }\n\n    var contextChanged = false;\n    if( !currentSelection.selected || !_.isEqual( singleSelection, currentSelection.selected[ 0 ] ) ) {\n        appCtxService.registerCtx( _selected, singleSelection );\n        contextChanged = true;\n    }\n    if( !_.isEqual( multiSelection, currentSelection.selected ) ) {\n        appCtxService.registerCtx( _mselected, multiSelection );\n        contextChanged = true;\n    }\n    if( !_.isEqual( parentSelection, currentSelection.parent ) ) {\n        appCtxService.registerCtx( _pselected, parentSelection );\n        contextChanged = true;\n    }\n    if( !_.isEqual( rInfo, currentSelection.relationInfo ) ) {\n        appCtxService.registerCtx( _relationInfo, rInfo );\n        contextChanged = true;\n    }\n\n    if( contextChanged ) {\n        return exports.updateCommandContext();\n    }\n    return AwPromiseService.instance.resolve();\n};\n\nexport let getSelection = function() {\n    return {\n        selected: appCtxService.getCtx( _mselected ),\n        parent: appCtxService.getCtx( _pselected ),\n        relationInfo: appCtxService.getCtx( _relationInfo )\n    };\n};\n\nexport let getAlternateSelectedObjects = function( propObjects ) {\n    var modelObjects = [];\n    var uidsToLoad = [];\n\n    if( propObjects ) {\n        _.forEach( propObjects, function( property ) {\n            if( property && property.dbValues ) {\n                _.forEach( property.dbValues, function( dbValue ) {\n                    var modelObject = cdm.getObject( dbValue );\n                    if( modelObject && !_.isEmpty( modelObject.props ) ) {\n                        modelObjects.push( modelObject );\n                    } else {\n                        uidsToLoad.push( dbValue );\n                    }\n                } );\n            }\n        } );\n\n        if( !_.isEmpty( uidsToLoad ) ) {\n            _.forEach( uidsToLoad, function( uid ) {\n                var modelObject = cdm.getObject( uid );\n                modelObjects.push( modelObject );\n            } );\n        }\n    }\n\n    return modelObjects;\n};\n\nexport let updateCommandContext = function() {\n    return AwPromiseService.instance.resolve();\n};\n\nexports = {\n    updateSelection,\n    getSelection,\n    getAlternateSelectedObjects,\n    updateCommandContext\n};\nexport default exports;\n/**\n * Set of utility functions to manage selection\n *\n * @member selectionService\n * @memberof NgServices\n *\n * @param {AwPromiseService.instance} AwPromiseService.instance - Service to use.\n * @param {appCtxService} appCtxService - Service to use.\n * @param {soa_kernel_clientDataModel} cdm - Service to use.\n */\n/**\n * Update the selection context\n *\n * @function updateSelection\n * @memberOf NgServices.selectionService\n *\n * @param {Object | Object[]} selection - The new selection\n * @param {Object} parentSelection - The new parent selection\n * @param {Object[]} relationInformation - The new relation information\n *\n * @return {Promise} A promise resolved once selection and command context are updated.\n */\n/**\n * Get the selection from the context\n *\n * @function getSelection\n * @memberOf NgServices.selectionService\n *\n * @return {Object} An object containing the selection and the parent selection\n */\n/**\n * Returns the model objects based off input property objects\n *\n * @function getTargetModelObjects\n * @memberOf NgServices.selectionService\n *\n * @param {Array} propObjects - array of property objects\n *\n * @return {Array} array of alternate selected model objects containing the results\n */\n/**\n * Update the command context\n *\n * @function updateCommandContext\n * @memberOf NgServices.selectionService\n *\n * @return {Promise} A promise resolved once command context is updated.\n */\n\neventBus.subscribe( 'cdm.modified', function( event ) {\n    // Update the VMOs in context for the modified model objects\n    var mSelectedInCtx = appCtxService.getCtx( _mselected );\n    var selectedInCtx = appCtxService.getCtx( _selected );\n    _.forEach( event.modifiedObjects, function _iterateModifiedObjects( updatedObj ) {\n        _.forEach( mSelectedInCtx, function _updateAppCtxSelection( selectedObj ) {\n            // Verifying the object is same. Also, we need to ensure that object is a View Model object.\n            // For model objects, the data binding should be handled already. So we don't need this\n            if( updatedObj.uid === selectedObj.uid && viewModelObjectSrv.isViewModelObject( selectedObj ) ) {\n                var updatedVmo = viewModelObjectSrv.createViewModelObject( updatedObj, 'EDIT' );\n\n                if( updatedVmo && updatedVmo.props ) {\n                    viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject( updatedVmo, mSelectedInCtx );\n                    // No need for object name check here because if 'mselected' is a VMO, 'selected' has to be VMO\n                    if( selectedInCtx.uid === selectedObj.uid ) {\n                        viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject( updatedVmo, [ selectedInCtx ] );\n                    }\n                }\n            }\n        } );\n    } );\n} );\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable no-console */\n// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\n/**\n * awStateService\n *\n * @module js/awStateService\n */\n\nlet routerStateSvc;\nlet stateServiceObject = {\n  instance: {\n    //test purpose only, will be overriden by router\n    go: () => {},\n    params: {},\n    transitionHooks: {\n      onEnter: () => {},\n      onSuccess: () => {},\n      onBefore: () => {}\n    }\n  }\n};\n\nconst subscribeHooks = (transitionService, locationService) => {\n  if (locationService.path() && !/^(\\/|undefined)/.test(locationService.path()) && window && window.location) {\n    // The following block is to support remapping of \"invalid\" URLs\n    // #state -> #/state\n    // #state;uid=123 => #/state?uid=123\n    const pathElems = locationService.path().split(';');\n    let newPath = pathElems[0];\n\n    for (let ii = 1; ii < pathElems.length; ii++) {\n      if (ii === 1) {\n        newPath += `?${pathElems[ii]}`;\n      } else {\n        newPath += `&${pathElems[ii]}`;\n      }\n    } // Update URL & reload page\n\n\n    window.location.hash = `#/${newPath}`;\n    window.location.reload(false); // force page refresh\n  }\n\n  eventBus.publish('transitionHooks', {\n    transitionService\n  });\n  locationService.onChange(event => {\n    eventBus.publish('locationChangeSuccess', {\n      event: event,\n      newUrl: event.newURL,\n      oldUrl: event.oldURL\n    }); // Update the state params on appCtx\n\n    updateStateParamsOnAppCtx(stateServiceObject.instance.params); // support legacy usages of location change complete event\n\n    eventBus.publish('LOCATION_CHANGE_COMPLETE');\n  });\n  transitionService.onSuccess({}, transition => {\n    // Update the state params on appCtx\n    updateStateParamsOnAppCtx(transition.params());\n    eventBus.publish('stateChangeSuccess', {\n      transitionParams: transition.params()\n    });\n  });\n};\n\nexport const initializeStateService = router => {\n  routerStateSvc = router.stateService;\n  stateServiceObject.instance = {\n    go: routerStateSvc.go,\n    get: routerStateSvc.get,\n    href: routerStateSvc.href,\n\n    get current() {\n      return routerStateSvc.current;\n    },\n\n    get params() {\n      return _.reduce(routerStateSvc.params, (sum, curr, key) => ({ ...sum,\n        [key]: curr && typeof curr === 'string' ? decodeURIComponent(encodeURIComponent(curr)) : curr\n      }), {});\n    },\n\n    transitionTo: routerStateSvc.transitionTo,\n    transitionHooks: {\n      /**\n       * Replacement of $stateChangeStart\n       */\n      onEnter: router.transitionService.onEnter,\n\n      /**\n       * Replacement of $stateChangeSuccess\n       */\n      onSuccess: router.transitionService.onSuccess,\n\n      /**\n       * Replacement of $stateChangeError\n       */\n      onError: router.transitionService.onError,\n      onBefore: router.transitionService.onBefore\n    },\n\n    /**\n     * Replacement of $stateNotFound\n     */\n    onInvalid: routerStateSvc.onInvalid,\n    reload: routerStateSvc.reload\n  };\n  subscribeHooks(router.transitionService, router.locationService); // Suppress console errors, we are deliberately aborting the state transition at few places\n\n  routerStateSvc.defaultErrorHandler(function (error) {// do nothing- suppress errors\n  });\n};\n\nconst updateStateParamsOnAppCtx = stateParams => {\n  var processParameters = function processParameters(stateParams) {\n    return Object.keys(stateParams) // Filter parameters that are not set\n    .filter(function (param) {\n      return stateParams[param];\n    }) // Build the new object\n    .reduce(function (acc, nxt) {\n      acc[nxt] = stateParams[nxt];\n      return acc;\n    }, {});\n  };\n\n  appCtxService.registerCtx('state', {\n    params: stateParams,\n    processed: processParameters(stateParams)\n  });\n};\n\nexport default stateServiceObject;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awStateService.js"],"names":["stateServiceObject","instance","go","params","transitionHooks","onEnter","onSuccess","onBefore","subscribeHooks","locationService","window","pathElems","newPath","ii","eventBus","transitionService","event","newUrl","oldUrl","oldURL","updateStateParamsOnAppCtx","transition","transitionParams","initializeStateService","router","routerStateSvc","get","href","curr","decodeURIComponent","encodeURIComponent","transitionTo","onError","onInvalid","reload","stateParams","processParameters","acc","appCtxService","processed"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\n\n/**\n * awStateService\n *\n * @module js/awStateService\n */\nlet routerStateSvc;\nlet stateServiceObject = {\n    instance: {\n        //test purpose only, will be overriden by router\n        go: () => {},\n        params: {},\n        transitionHooks: {\n            onEnter: () => {},\n            onSuccess: () => {},\n            onBefore: () => {}\n        }\n    }\n};\n\nconst subscribeHooks = ( transitionService, locationService ) => {\n    if( locationService.path() && !/^(\\/|undefined)/.test( locationService.path() ) &&\n        window && window.location ) {\n        // The following block is to support remapping of \"invalid\" URLs\n        // #state -> #/state\n        // #state;uid=123 => #/state?uid=123\n        const pathElems = locationService.path().split( ';' );\n        let newPath = pathElems[ 0 ];\n        for( let ii = 1; ii < pathElems.length; ii++ ) {\n            if( ii === 1 ) {\n                newPath += `?${pathElems[ii]}`;\n            } else {\n                newPath += `&${pathElems[ii]}`;\n            }\n        }\n        // Update URL & reload page\n        window.location.hash = `#/${newPath}`;\n        window.location.reload( false ); // force page refresh\n    }\n    eventBus.publish( 'transitionHooks', {\n        transitionService\n    } );\n    locationService.onChange( ( event ) => {\n        eventBus.publish( 'locationChangeSuccess', {\n            event: event,\n            newUrl: event.newURL,\n            oldUrl: event.oldURL\n        } );\n        // Update the state params on appCtx\n        updateStateParamsOnAppCtx( stateServiceObject.instance.params );\n        // support legacy usages of location change complete event\n        eventBus.publish( 'LOCATION_CHANGE_COMPLETE' );\n    } );\n    transitionService.onSuccess( {}, ( transition ) => {\n        // Update the state params on appCtx\n        updateStateParamsOnAppCtx( transition.params() );\n        eventBus.publish( 'stateChangeSuccess', {\n            transitionParams: transition.params()\n        } );\n    } );\n};\nexport const initializeStateService = ( router ) => {\n    routerStateSvc = router.stateService;\n    stateServiceObject.instance = {\n        go: routerStateSvc.go,\n        get: routerStateSvc.get,\n        href: routerStateSvc.href,\n        get current() {\n            return routerStateSvc.current;\n        },\n        get params() {\n            return _.reduce( routerStateSvc.params, ( sum, curr, key ) => ( {\n                ...sum,\n                [ key ]: curr && typeof curr === 'string' ? decodeURIComponent( encodeURIComponent( curr ) ) : curr\n            } ), {} );\n        },\n        transitionTo: routerStateSvc.transitionTo,\n        transitionHooks: {\n            /**\n             * Replacement of $stateChangeStart\n             */\n            onEnter: router.transitionService.onEnter,\n            /**\n             * Replacement of $stateChangeSuccess\n             */\n            onSuccess: router.transitionService.onSuccess,\n            /**\n             * Replacement of $stateChangeError\n             */\n            onError: router.transitionService.onError,\n            onBefore: router.transitionService.onBefore\n        },\n        /**\n         * Replacement of $stateNotFound\n         */\n        onInvalid: routerStateSvc.onInvalid,\n        reload : routerStateSvc.reload\n    };\n    subscribeHooks( router.transitionService, router.locationService );\n    // Suppress console errors, we are deliberately aborting the state transition at few places\n    routerStateSvc.defaultErrorHandler( function( error ) {\n        // do nothing- suppress errors\n    } );\n};\n\nconst updateStateParamsOnAppCtx = ( stateParams ) => {\n    var processParameters = function processParameters( stateParams ) {\n        return Object.keys( stateParams ) // Filter parameters that are not set\n            .filter( function( param ) {\n                return stateParams[ param ];\n            } ) // Build the new object\n            .reduce( function( acc, nxt ) {\n                acc[ nxt ] = stateParams[ nxt ];\n                return acc;\n            }, {} );\n    };\n\n    appCtxService.registerCtx( 'state', {\n        params: stateParams,\n        processed: processParameters( stateParams )\n    } );\n};\n\nexport default stateServiceObject;\n"]},"metadata":{},"sourceType":"module"}
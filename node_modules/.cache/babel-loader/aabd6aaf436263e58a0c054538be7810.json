{"ast":null,"code":"import eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport { DerivedStateResult } from 'js/derivedContextService';\nconst trace = new Debug('selection');\n\nconst defaultPWASelectionChangeHandler = (_ref, selModel) => {\n  let {\n    selected,\n    dataProvider\n  } = _ref; // Revisit me: Story LCS-524878 - Reduce dependency on ctx - follow uni-directional data flow\n\n  appCtxService.registerCtx('pwaSelectionInfo', {\n    currentSelectedCount: selModel.getCurrentSelectedCount()\n  }); //Named event is an anti-pattern. Keeping it here to maintain backward compatibility.\n  // data.source = 'primaryWorkArea'; This event used to send the scope\n\n  eventBus.publish('primaryWorkArea.selectionChangeEvent', {\n    selectionModel: selModel,\n    // dataCtxNode: $scope,\n    dataProvider: dataProvider,\n    selectedObjects: _.cloneDeep(selected)\n  });\n};\n\nexport const handleSelectionChange = (localSelectionData, parentSelectionData, selModel) => {\n  if (!_.isEmpty(localSelectionData)) {\n    if (parentSelectionData) {\n      parentSelectionData.update({ ...localSelectionData,\n        source: 'primary'\n      });\n    }\n\n    defaultPWASelectionChangeHandler(localSelectionData, selModel);\n    trace('AwPrimaryWorkarea selectionData: ', localSelectionData);\n  }\n};\nexport const reset = selectionModel => {\n  const dp = selectionModel.getDpListener();\n\n  if (dp) {\n    dp.resetDataProvider();\n  }\n};\nexport const handleSelectEvent = (eventData, selectionModel) => {\n  const dp = selectionModel.getDpListener();\n\n  if (dp) {\n    if (eventData.selectAll) {\n      dp.selectAll();\n    } else {\n      dp.selectNone();\n    }\n  }\n};\nexport const handleMultiSelectEvent = (eventData, selectionModel) => {\n  const dp = selectionModel.getDpListener();\n\n  if (dp) {\n    dp.selectionModel.setMultiSelectionEnabled(eventData.multiSelect);\n\n    if (!eventData.multiSelect) {\n      dp.selectNone();\n    }\n\n    return eventData.multiSelect;\n  }\n\n  return false;\n};\nexport const getContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.searchState],\n    compute: () => {\n      return {\n        provider: props.subPanelContext,\n        searchState: props.searchState\n      };\n    }\n  })];\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/AwPrimaryWorkareaService.js"],"names":["trace","defaultPWASelectionChangeHandler","dataProvider","appCtxService","currentSelectedCount","selModel","eventBus","selectionModel","selectedObjects","_","handleSelectionChange","parentSelectionData","source","reset","dp","handleSelectEvent","eventData","handleMultiSelectEvent","getContext","ctxParameters","additionalParameters","props","compute","provider","searchState"],"mappings":"AAAA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,kBAAA,QAAA,0BAAA;AAEA,MAAMA,KAAK,GAAG,IAAA,KAAA,CAAd,WAAc,CAAd;;AAEA,MAAMC,gCAAgC,GAAG,CAAA,IAAA,EAAA,QAAA,KAA4C;EAAA,IAA1C;IAAA,QAAA;IAAYC;EAAZ,IAA0C,IAAA,CAAA,CACjF;;EACAC,aAAa,CAAbA,WAAAA,CAAAA,kBAAAA,EAA+C;IAC3CC,oBAAoB,EAAEC,QAAQ,CAARA,uBAAAA;EADqB,CAA/CF,EAFiF,CAMjF;EACA;;EACAG,QAAQ,CAARA,OAAAA,CAAAA,sCAAAA,EAA0D;IACtDC,cAAc,EADwC,QAAA;IAEtD;IACAL,YAAY,EAH0C,YAAA;IAItDM,eAAe,EAAEC,CAAC,CAADA,SAAAA,CAAAA,QAAAA;EAJqC,CAA1DH;AARJ,CAAA;;AAgBA,OAAO,MAAMI,qBAAqB,GAAG,CAAA,kBAAA,EAAA,mBAAA,EAAA,QAAA,KAAyD;EAC1F,IAAI,CAACD,CAAC,CAADA,OAAAA,CAAL,kBAAKA,CAAL,EAAuC;IACnC,IAAA,mBAAA,EAA0B;MACtBE,mBAAmB,CAAnBA,MAAAA,CAA4B,EAAE,GAAF,kBAAA;QAAyBC,MAAM,EAAE;MAAjC,CAA5BD;IACH;;IACDV,gCAAgC,CAAA,kBAAA,EAAhCA,QAAgC,CAAhCA;IACAD,KAAK,CAAA,mCAAA,EAALA,kBAAK,CAALA;EACH;AAPE,CAAA;AAUP,OAAO,MAAMa,KAAK,GAAKN,cAAF,IAAsB;EACvC,MAAMO,EAAE,GAAGP,cAAc,CAAzB,aAAWA,EAAX;;EACA,IAAA,EAAA,EAAS;IACLO,EAAE,CAAFA,iBAAAA;EACH;AAJE,CAAA;AAOP,OAAO,MAAMC,iBAAiB,GAAG,CAAA,SAAA,EAAA,cAAA,KAAiC;EAC9D,MAAMD,EAAE,GAAGP,cAAc,CAAzB,aAAWA,EAAX;;EACA,IAAA,EAAA,EAAS;IACL,IAAIS,SAAS,CAAb,SAAA,EAA0B;MACtBF,EAAE,CAAFA,SAAAA;IADJ,CAAA,MAEO;MACHA,EAAE,CAAFA,UAAAA;IACH;EACJ;AARE,CAAA;AAWP,OAAO,MAAMG,sBAAsB,GAAG,CAAA,SAAA,EAAA,cAAA,KAAiC;EACnE,MAAMH,EAAE,GAAGP,cAAc,CAAzB,aAAWA,EAAX;;EACA,IAAA,EAAA,EAAS;IACLO,EAAE,CAAFA,cAAAA,CAAAA,wBAAAA,CAA4CE,SAAS,CAArDF,WAAAA;;IACA,IAAI,CAACE,SAAS,CAAd,WAAA,EAA6B;MACzBF,EAAE,CAAFA,UAAAA;IACH;;IACD,OAAOE,SAAS,CAAhB,WAAA;EACH;;EACD,OAAA,KAAA;AATG,CAAA;AAYP,OAAO,MAAME,UAAU,GAAG,CAAA,KAAA,EAAA,KAAA,KAAoB;EAC1C,OAAO,CAAE,IAAA,kBAAA,CAAwB;IAC7BC,aAAa,EADgB,EAAA;IAE7BC,oBAAoB,EAAE,CAAEC,KAAK,CAAP,eAAA,EAAyBA,KAAK,CAFvB,WAEP,CAFO;IAG7BC,OAAO,EAAE,MAAM;MACX,OAAO;QACHC,QAAQ,EAAEF,KAAK,CADZ,eAAA;QAEHG,WAAW,EAAEH,KAAK,CAACG;MAFhB,CAAP;IAIH;EAR4B,CAAxB,CAAF,CAAP;AADG,CAAA","sourcesContent":["import eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport { DerivedStateResult } from 'js/derivedContextService';\n\nconst trace = new Debug( 'selection' );\n\nconst defaultPWASelectionChangeHandler = ( { selected, dataProvider }, selModel ) => {\n    // Revisit me: Story LCS-524878 - Reduce dependency on ctx - follow uni-directional data flow\n    appCtxService.registerCtx( 'pwaSelectionInfo', {\n        currentSelectedCount: selModel.getCurrentSelectedCount()\n    } );\n\n    //Named event is an anti-pattern. Keeping it here to maintain backward compatibility.\n    // data.source = 'primaryWorkArea'; This event used to send the scope\n    eventBus.publish( 'primaryWorkArea.selectionChangeEvent', {\n        selectionModel: selModel,\n        // dataCtxNode: $scope,\n        dataProvider: dataProvider,\n        selectedObjects: _.cloneDeep( selected )\n    } );\n};\n\nexport const handleSelectionChange = ( localSelectionData, parentSelectionData, selModel ) => {\n    if( !_.isEmpty( localSelectionData ) ) {\n        if( parentSelectionData ) {\n            parentSelectionData.update( { ...localSelectionData, source: 'primary' } );\n        }\n        defaultPWASelectionChangeHandler( localSelectionData, selModel );\n        trace( 'AwPrimaryWorkarea selectionData: ', localSelectionData );\n    }\n};\n\nexport const reset = ( selectionModel ) => {\n    const dp = selectionModel.getDpListener();\n    if( dp ) {\n        dp.resetDataProvider();\n    }\n};\n\nexport const handleSelectEvent = ( eventData, selectionModel ) => {\n    const dp = selectionModel.getDpListener();\n    if( dp ) {\n        if( eventData.selectAll ) {\n            dp.selectAll();\n        } else {\n            dp.selectNone();\n        }\n    }\n};\n\nexport const handleMultiSelectEvent = ( eventData, selectionModel ) => {\n    const dp = selectionModel.getDpListener();\n    if( dp ) {\n        dp.selectionModel.setMultiSelectionEnabled( eventData.multiSelect );\n        if( !eventData.multiSelect ) {\n            dp.selectNone();\n        }\n        return eventData.multiSelect;\n    }\n    return false;\n};\n\nexport const getContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.searchState ],\n        compute: () => {\n            return {\n                provider: props.subPanelContext,\n                searchState: props.searchState\n            };\n        }\n    } ) ];\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2022 Siemens\n/**\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/dataManagementService\n */import AwPromiseService from'js/awPromiseService';import cdm from'./kernel/clientDataModel';import propPolicySvc from'./kernel/propertyPolicyService';import soaSvc from'./kernel/soaService';import prefSvc from'./preferenceService';import dateTimeSvc from'../dateTimeService';import localeSvc from'../localeService';import _ from'lodash';import assert from'../assert';import eventBus from'../eventBus';// Object to track which uids are currently being loaded such that loadObjects is not duplicated for the same uid\nlet _uidLoadInProgress={};var exports={};/**\n * Create objects\n *\n * @param {ObjectArray} input - array of 'createObjects' input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let createObjects=function(input){return soaSvc.post('Core-2008-06-DataManagement','createObjects',{input:input});};/**\n * Create Relation and Submit objects.\n *\n * @param {ObjectArray} inputs - array of create & submit object input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let createRelateAndSubmitObjects=function(inputs){return soaSvc.post('Internal-Core-2012-10-DataManagement','createRelateAndSubmitObjects',{inputs:inputs});};/**\n * Create relations.\n *\n * @param {ObjectArray} inputs - array of create relation input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let createRelations=function(inputs){return soaSvc.post('Core-2006-03-DataManagement','createRelations',{input:inputs});};/**\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getCurrentUserGateway=function(){return soaSvc.post('Internal-AWS2-2012-10-DataManagement','getCurrentUserGateway',{});};/**\n * @param {String} typeName - type name\n * @param {String} propName - property name\n * @param {String} pattern - pattern\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getNextId=function(typeName,propName,pattern){return exports.getNextIds([{typeName:typeName,propName:propName,pattern:pattern?pattern:''}]);};/**\n * @param {Array} vInfoForNextId - array of type name, property name & pattern objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getNextIds=function(vInfoForNextId){return soaSvc.post('Core-2008-06-DataManagement','getNextIds',{vInfoForNextId:vInfoForNextId});};/**\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getTCSessionInfo=function(ignoreHost){return soaSvc.getTCSessionInfo(ignoreHost).then(function(response){if(response&&response.extraInfoOut){// Capture the data time format from the server\nvar userSession=cdm.getUserSession();var locale=_.get(userSession,'props.fnd0locale.dbValues.0');if(locale){locale=localeSvc.setLocale(locale);}if(response.extraInfoOut.DefaultDateFormat){dateTimeSvc.setSessionDateTimeFormat(response.extraInfoOut.DefaultDateFormat);}if(eventBus){eventBus.publish('sessionInfo.updated',response.extraInfoOut);}// Preferences\nvar prefNames=[];if(response.extraInfoOut.AWC_StartupPreferences){// The server should tell us what preferences we need to bulk cache upon login. This avoids unnecessary\n// client-server chats.\nprefNames=prefNames.concat(response.extraInfoOut.AWC_StartupPreferences.split(','));}return prefSvc.getMultiStringValues(prefNames,true).then(function(){return response;});}// This should happen but should do it anyway to ensure serial processing.\nreturn response;});};/**\n * @param {Object} input - Array e.g. { inputData: [ { clientId: '', parentObj: { uid: 'QteVoUbsqd$DyB', type:\n *            'Awp0TileCollection' }, childrenObj: [ { uid: 'QzaVoUbsqd$DyB', type: 'Awp0Tile' } ], propertyName:\n *            'Awp0GatewayTileRel' } ]}\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let removeChildren=function(input){return soaSvc.post('Core-2014-10-DataManagement','removeChildren',{inputData:input});};/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let saveEdit=function(inputs){return soaSvc.post('Internal-AWS2-2012-10-DataManagement','saveEdit',{inputs:inputs});};/**\n * @param {Array} info - array of set property info objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let setProperties=function(info){return soaSvc.post('Core-2010-09-DataManagement','setProperties',{info:info,options:[]});};/**\n * @param {StringArray} uids - array of model object UIDs to load\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let loadObjects=async function(uids){var missingUids=[];_.forEach(uids,function(uid){var modelObject=cdm.getObject(uid);if(!modelObject||_.isEmpty(modelObject.props)){missingUids.push(uid);}});if(missingUids.length>0){const uidsToLoad=missingUids.filter(uid=>{if(!_uidLoadInProgress[uid]){return uid;}});const currentUidsBeingLoadedPromises=missingUids.filter(uid=>!uidsToLoad.includes(uid)).map(uid=>{if(_uidLoadInProgress[uid]){return _uidLoadInProgress[uid];}});const newLoadPromises=[];if(uidsToLoad.length>0){const loadObjectsPromise=soaSvc.post('Core-2007-09-DataManagement','loadObjects',{uids:uidsToLoad});for(const uid of uidsToLoad){_uidLoadInProgress[uid]=loadObjectsPromise;}newLoadPromises.push(loadObjectsPromise);}await Promise.all([...currentUidsBeingLoadedPromises,...newLoadPromises]);for(const uid of uidsToLoad){delete _uidLoadInProgress[uid];}}// no op\nreturn AwPromiseService.instance.resolve();};/**\n * @param {ModelObject} target -\n *\n * @param {String} pasteProp - Relation type\n *\n * @param {String} typeName -\n *\n * @param {String} itemName -\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let createItem=function(target,pasteProp,typeName,itemName){var propName='item_id';var revisionTypeName=typeName+'Revision';var revisionPropName='item_revision_id';var itemRevision={};return exports.getNextIds([{typeName:typeName,propName:propName},{typeName:revisionTypeName,propName:revisionPropName}]).then(function(response){return exports.createRelateAndSubmitObjects([{createData:{boName:typeName,propertyNameValues:{item_id:[response.nextIds[0]],object_name:[itemName]},compoundCreateInput:{revision:[{boName:revisionTypeName,propertyNameValues:{item_revision_id:[response.nextIds[1]]},compoundCreateInput:{}}]}}}]);}).then(function(response){itemRevision=cdm.getObject(response.output[0].objects[2].uid);return exports.createRelations([{relationType:pasteProp,primaryObject:target,secondaryObject:itemRevision}]);}).then(function(){return itemRevision;});};/**\n * Cache of promises for getProperties to \"reuse\" if the same request comes in before the first response has\n * completed.\n *\n * @private\n */var _getPropertiesPromises=[];/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {StringArray} uids - array of model object UIDs\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getProperties=function(uids,propNames){var objects=[];uids.sort();_.forEach(_.uniq(uids,true),function(uid){var modelObject=cdm.getObject(uid);if(modelObject){var modelObjAdded=false;// Cached model object\n_.forEach(propNames,function(propName){if(modelObject.modelType.propertyDescriptorsMap.hasOwnProperty(propName)&&(!modelObject.props||!modelObject.props.hasOwnProperty(propName))){if(!modelObjAdded){// Valid property for this model type AND property not cached\nobjects.push(modelObject);modelObjAdded=true;}}});}});if(objects.length>0){propPolicySvc.validatePropertyRegistration(objects,propNames);return exports.getPropertiesUnchecked(objects,propNames);}return AwPromiseService.instance.resolve();};/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {ObjectArray} objects - array of model objects\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getPropertiesUnchecked=function(objects,propNames){var input={objects:objects,attributes:propNames};var promise=null;_.forEach(_getPropertiesPromises,function(promiseLp){if(!promise&&_.isEqual(input.attributes,promiseLp.input.attributes)){if(objects.length===promiseLp.input.objects.length){promise=promiseLp;// assume a match\nfor(var ii=0;ii<objects.length;ii++){if(objects[ii].uid!==promiseLp.input.objects[ii].uid){promise=null;// invalid assumption\nbreak;}}}}});if(!promise){promise=soaSvc.post('Core-2006-03-DataManagement','getProperties',input).then(function(response){_getPropertiesPromises.splice(_getPropertiesPromises.indexOf(promise),1);return response;});_getPropertiesPromises.push(promise);promise.input=input;}return promise;};/**\n * Convenience method for 'core' {@linkcode module:soa/dataManagementService.getStyleSheet|getStyleSheet} to handle\n * default values used in that service's request.\n *\n * @param {ModelObject} modelObject - The soa object to get the stylesheet for.\n * @param {String} styleSheetType - (Optional) The type of style sheet to return (Default: 'SUMMARY').\n * @param {Object} clientContext - (Optional) (Default: {'ActiveWorkspace:Location':\n *            'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'})\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let getStyleSheet=function(modelObject,styleSheetType,clientContext){assert(modelObject,'getStyleSheet: No ModelObject specified');var styleSheetTypeFinal=styleSheetType;var clientContextFinal=clientContext;if(!styleSheetTypeFinal){styleSheetTypeFinal='SUMMARY';}if(!clientContextFinal){clientContextFinal={'ActiveWorkspace:Location':'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'};}return soaSvc.post('Internal-AWS2-2016-04-DataManagement','getStyleSheet',{processEntireXRT:false,input:[{businessObject:modelObject,styleSheetType:styleSheetTypeFinal,clientContext:clientContextFinal}]});};/**\n * Post the input directly to getStyleSheet\n *\n * @param {Integer} input - The json request object. All necessary fields should already be filled\n *\n * @returns {Promise} Resolved when the style sheet information is returned from the SOA service.\n */export let getStyleSheetPure=function(input){return soaSvc.post('Internal-AWS2-2016-04-DataManagement','getStyleSheet',input);};/**\n * This function is used to create input structure for the loadViewModelForEditing SOA call. Consumer need to call\n * this function in loop for each ViewModelObject keeping the same input object.\n *\n * @param {Object} input - Structure containing the viewModelObj and its property names\n * @param {String} uid - ID of the model object that owns the properties\n * @param {StringArray} propertyNames - Props which we need to check the modifiable status\n *\n * @returns {Object} Input structure details.\n */export let getLoadViewModelForEditingInput=function(input,uid,propertyNames){var modelObj=cdm.getObject(uid);if(!input){input={inputs:[]};}var objs=[];objs.push(modelObj);input.inputs.push({objs:objs,propertyNames:propertyNames,isPessimisticLock:false});return input;};/**\n * @param {Object} inputs - payload to the soa call.\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let loadViewModelForEditing2=function(inputs){var selectedPropertyPolicy=propPolicySvc.getEffectivePolicy(null,true);return soaSvc.postUnchecked('Internal-AWS2-2017-12-DataManagement','loadViewModelForEditing2',{inputs:inputs},selectedPropertyPolicy);};/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */export let saveViewModelEditAndSubmitWorkflow=function(inputs){var selectedPropertyPolicy=propPolicySvc.getEffectivePolicy(null,true);return soaSvc.postUnchecked('Internal-AWS2-2018-05-DataManagement','saveViewModelEditAndSubmitWorkflow2',{inputs:inputs},selectedPropertyPolicy);};/**\n * This function is used to create the input data for saveViewModelEditAndSubmitWorkflow SOA. This SOA requires the\n * view Model properties which are modified and need to update in DB\n *\n * @param {Object} input - Structure containing the viewModelObj\n * @param {Object} viewModelProperty - viewModel prop object whose value has changed and need to commit.\n *\n */export let pushViewModelProperty=function(input,viewModelProperty){if(!input.viewModelProperties){input.viewModelProperties=[];}var dbValues=[];var uiValues=[];if(viewModelProperty.isArray){dbValues=viewModelProperty.dbValue;uiValues=viewModelProperty.newValue;}else{dbValues.push(viewModelProperty.dbValue);uiValues.push(viewModelProperty.newValue);}// Replace all the null values with empty string\nfor(var i=0;i<dbValues.length;i++){if(viewModelProperty.type==='DATE'||viewModelProperty.type==='DATEARRAY'){dbValues[i]=dateTimeSvc.formatUTC(dbValues[i]);}else{dbValues[i]=dbValues[i]===null?'':String(dbValues[i]);}}// Replace all the null values with empty string\nfor(i=0;i<uiValues.length;i++){if(viewModelProperty.type==='DATE'||viewModelProperty.type==='DATEARRAY'){uiValues[i]=dateTimeSvc.formatUTC(uiValues[i]);}else{uiValues[i]=uiValues[i]===null?'':String(uiValues[i]);}}var vmProp={propertyName:viewModelProperty.propertyName,dbValues:dbValues,uiValues:uiValues,intermediateObjectUids:viewModelProperty.intermediateObjectUids,srcObjLsd:viewModelProperty.sourceObjectLastSavedDate,isModifiable:viewModelProperty.isPropertyModifiable};input.viewModelProperties.push(vmProp);};/**\n * This utility function is used create the input pay load for SaveViewModelEditAndSubmitToWorkflowInput SAO.\n *\n * @param {Object} viewModelObject - viewModelObj whose properties has been modified.\n * @returns {Object} structure containing the modified viewModelobject.\n */export let getSaveViewModelEditAndSubmitToWorkflowInput=function(viewModelObject){return{obj:viewModelObject};};exports={createObjects,createRelateAndSubmitObjects,createRelations,getCurrentUserGateway,getNextId,getNextIds,getTCSessionInfo,removeChildren,saveEdit,setProperties,loadObjects,createItem,getProperties,getPropertiesUnchecked,getStyleSheet,getStyleSheetPure,getLoadViewModelForEditingInput,loadViewModelForEditing2,saveViewModelEditAndSubmitWorkflow,pushViewModelProperty,getSaveViewModelEditAndSubmitToWorkflowInput};export default exports;","map":null,"metadata":{},"sourceType":"module"}
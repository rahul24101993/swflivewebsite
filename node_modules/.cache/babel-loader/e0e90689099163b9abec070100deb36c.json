{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to map the declarative resolve configuration to the ui router resolve state functionality.\n *\n\n * @module js/stateResolveService\n */\nimport _ from 'lodash';\nimport moduleLoader from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport viewModelProcessingFactory from 'js/viewModelProcessingFactory';\nimport actionService from 'js/actionService';\n/**\n * Filter parameters that are not set and build the new object.\n *\n * @param {Object} stateParams - Routing state params.\n * @return {Object} params - processed paramater object.\n */\n\nvar processParameters = function (stateParams) {\n  return Object.keys(stateParams) // Filter parameters that are not set\n  .filter(function (param) {\n    return stateParams[param];\n  }) // Build the new object\n  .reduce(function (acc, nxt) {\n    acc[nxt] = stateParams[nxt];\n    return acc;\n  }, {});\n};\n/**\n * Get the state params object with processed params.\n *\n * @param {Object} stateParams - Routing state params.\n * @return {Object} params - Object of original state params and processed params.\n */\n\n\nvar getStateParamsObject = function (stateParams) {\n  return {\n    params: stateParams,\n    processed: processParameters(stateParams)\n  };\n};\n/**\n * Create declarative functions from resolveAction object and set it on the state.resolve\n *\n * @param {Object} state - Routing state.\n * @returns {Array} returns array of the resolveActions\n */\n\n\nexport const getResolvedActions = function (state) {\n  let resolveActions = [];\n\n  _.forEach(state.resolveActions, function (action, actionName) {\n    resolveActions.push({\n      token: `${actionName}Response`,\n      deps: ['$transition$'],\n      resolveFn: transition => {\n        //execute declarative action here\n        var defer = AwPromiseService.instance.defer();\n        var declarativeViewModelId = '__stateResolveSvc';\n        var declViewModel = viewModelProcessingFactory.createDeclViewModel({\n          _viewModelId: declarativeViewModelId\n        });\n        var dataCtxNode = {\n          ctx: appCtxService.ctx,\n          data: declViewModel\n        }; // Update the state params on app ctx.\n\n        dataCtxNode.ctx.state = getStateParamsObject(transition.params());\n        moduleLoader.loadDependentModule(action.deps).then(function (depModuleObj) {\n          actionService.executeAction(declViewModel, action, dataCtxNode, depModuleObj).then(function success(response) {\n            defer.resolve(response);\n          }, function reject(error) {\n            defer.reject(error);\n          }).finally(function () {\n            declViewModel._internal.destroy();\n          });\n        });\n        return defer.promise;\n      }\n    });\n  });\n\n  if (state.resolve) {\n    resolveActions = Array.isArray(state.resolve) ? state.resolve.concat(resolveActions) : resolveActions;\n  }\n\n  return resolveActions;\n};","map":{"version":3,"names":["_","moduleLoader","AwPromiseService","appCtxService","viewModelProcessingFactory","actionService","processParameters","stateParams","Object","keys","filter","param","reduce","acc","nxt","getStateParamsObject","params","processed","getResolvedActions","state","resolveActions","forEach","action","actionName","push","token","deps","resolveFn","transition","defer","instance","declarativeViewModelId","declViewModel","createDeclViewModel","_viewModelId","dataCtxNode","ctx","data","loadDependentModule","then","depModuleObj","executeAction","success","response","resolve","reject","error","finally","_internal","destroy","promise","Array","isArray","concat"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/stateResolveService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to map the declarative resolve configuration to the ui router resolve state functionality.\n *\n\n * @module js/stateResolveService\n */\nimport _ from 'lodash';\nimport moduleLoader from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport viewModelProcessingFactory from 'js/viewModelProcessingFactory';\nimport actionService from 'js/actionService';\n\n/**\n * Filter parameters that are not set and build the new object.\n *\n * @param {Object} stateParams - Routing state params.\n * @return {Object} params - processed paramater object.\n */\nvar processParameters = function( stateParams ) {\n    return Object.keys( stateParams )\n        // Filter parameters that are not set\n        .filter( function( param ) {\n            return stateParams[ param ];\n        } )\n        // Build the new object\n        .reduce( function( acc, nxt ) {\n            acc[ nxt ] = stateParams[ nxt ];\n            return acc;\n        }, {} );\n};\n\n/**\n * Get the state params object with processed params.\n *\n * @param {Object} stateParams - Routing state params.\n * @return {Object} params - Object of original state params and processed params.\n */\nvar getStateParamsObject = function( stateParams ) {\n    return {\n        params: stateParams,\n        processed: processParameters( stateParams )\n    };\n};\n\n/**\n * Create declarative functions from resolveAction object and set it on the state.resolve\n *\n * @param {Object} state - Routing state.\n * @returns {Array} returns array of the resolveActions\n */\nexport const getResolvedActions = function( state ) {\n    let resolveActions = [];\n    _.forEach( state.resolveActions, function( action, actionName ) {\n        resolveActions.push( {\n            token: `${actionName}Response`,\n            deps: [ '$transition$' ],\n            resolveFn: ( transition ) => {\n                //execute declarative action here\n                var defer = AwPromiseService.instance.defer();\n                var declarativeViewModelId = '__stateResolveSvc';\n                var declViewModel = viewModelProcessingFactory.createDeclViewModel( {\n                    _viewModelId: declarativeViewModelId\n                } );\n                var dataCtxNode = {\n                    ctx: appCtxService.ctx,\n                    data: declViewModel\n                };\n                // Update the state params on app ctx.\n                dataCtxNode.ctx.state = getStateParamsObject( transition.params() );\n                moduleLoader.loadDependentModule( action.deps ).then( function( depModuleObj ) {\n                    actionService.executeAction( declViewModel, action, dataCtxNode, depModuleObj ).then( function success( response ) {\n                        defer.resolve( response );\n                    }, function reject( error ) {\n                        defer.reject( error );\n                    } ).finally( function() {\n                        declViewModel._internal.destroy();\n                    } );\n                } );\n                return defer.promise;\n            }\n        } );\n    } );\n    if( state.resolve ) {\n        resolveActions = Array.isArray( state.resolve ) ? state.resolve.concat( resolveActions ) : resolveActions;\n    }\n    return resolveActions;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awColumnService\n */import actionSvc from'js/actionService';import cmm from'soa/kernel/clientMetaModel';import soaService from'soa/kernel/soaService';import declarativeDataCtxSvc from'js/declarativeDataCtxService';import AwPromiseService from'js/awPromiseService';import awColumnFilterService from'js/awColumnFilterService';import assert from'js/assert';import _ from'lodash';import logger from'js/logger';import declUtils from'js/declUtils';import moduleLoader from'js/moduleLoader';import eventBus from'js/eventBus';/**\n   * revisitme yogesh\n   * in whole file lot of scope usages\n   */ /**\n   * {Number} The debug ID of the 'next' AwTableColumnProvider.\n   */var _debug_nextColumnProviderId=0;/**\n   * This class defines the name and behavior of a single column in the 'aw-table'. Column defaults are defined here\n   * and can be overriden by the view-model.\n   *\n   * @class AwTableColumnInfo\n   * @memberOf module:js/awColumnService\n   */var AwTableColumnInfo=function(){var colSelf=this;/**\n       * @property {String} name - Internal (non-localized) name of the column.\n       *\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.name='';/**\n       * @property {String} displayName - User facing (localized) name of the column.\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.displayName='';/**\n       * @property {Function} api - callback functions\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.api=null;/**\n       * @property {Boolean} enableColumnResizing - allow column resize?\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.enableColumnResizing=true;/**\n       * @property { Boolean } enableRendererContribution- allow to override default cellRender template?\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.enableRendererContribution=true;/**\n       * @property {Number|String} width - Default number of pixels or '*' for auto.\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.width=150;/**\n       * @property {Number|String} minWidth - min Number of pixels\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.minWidth=20;/**\n       * @property {Boolean} enableHiding - enable column hiding\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.enableHiding=true;/**\n       * @property {Boolean} enableSorting - expose sorting\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.enableSorting=true;// sorting will come later\n/**\n       * @property {Boolean} enableColumnMenu - expose column menu\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.enableColumnMenu=true;/**\n       * @property {Boolean} ? - enable column filtering\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.isFilteringEnabled=true;/**\n       * @property {Boolean} ? - enable column rearrange\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.enableColumnMoving=true;/**\n       * @property {Boolean} ? - enable tooltip on header\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.headerTooltip=true;/**\n       * @property {Boolean} isCommand - TRUE if this column is being used to handle display and management of\n       *           commands table navigation (e.g. Often the 1st column displaying the primary ID/Name of the object\n       *           in that row).\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.isTableCommand=false;/**\n       * @property {Boolean} isTreeNavigation - TRUE if this column is being used to handle tree-table navigation\n       *           (e.g. node expand/collapse and any other specific display options).\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */colSelf.isTreeNavigation=false;};/**\n   * @param {Number} columnOrder -\n   * @param {Boolean} hiddenFlag -\n   * @param {Number} pixelWidth -\n   * @param {String} propertyName -\n   * @param {String} sortDirection -\n   * @param {Number} sortPriority -\n   * @param {String} typeName -\n   * @param {Boolean} isFilteringEnabled - Flag for filter enabled/disabled on this column\n   */var AwSoaColumnInfo=function(columnOrder,hiddenFlag,pixelWidth,propertyName,sortDirection,sortPriority,typeName,isFilteringEnabled){var scSelf=this;/**\n       * {Number}\n       */scSelf.columnOrder=columnOrder;/**\n       * {Boolean}\n       */scSelf.hiddenFlag=hiddenFlag;/**\n       * {Number}\n       */scSelf.pixelWidth=pixelWidth;/**\n       * {String}\n       */scSelf.propertyName=propertyName;/**\n       * {String} ASC or DESC\n       */scSelf.sortDirection=sortDirection;/**\n       * {Number}\n       */scSelf.sortPriority=sortPriority;/**\n       * {String}\n       */scSelf.typeName=typeName;/**\n       * {Boolean}\n       */scSelf.isFilteringEnabled=isFilteringEnabled;};/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Object} $scope - The AngularJS data context node.\n   * @param {OjectArray} commands - Array of command objects to associate with the 'isTableCommand' or\n   *            'isTreeNavigation' column.\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   */var AwTableColumnProvider=function(declViewModel,$scope,commands,gridId,commandsAnchor){var cpSelf=this;var _declViewModel=declViewModel;var _$scope=$scope;var _commands=commands;var _gridId=gridId;var _commandsAnchor=commandsAnchor;/**\n       * Set the ID of this instance.\n       */cpSelf.id=_debug_nextColumnProviderId++;cpSelf.columnFilters=null;cpSelf.sortCriteria=null;/**\n       * {Object} _uwDataProvider - A UwDataProvider based on the dataProvider in the DeclViewModel JSON specified by\n       * the DeclGrid.\n       */var _uwDataProvider=null;/**\n       * {Object} _declColumnProviderJSON - A UwDataProvider based on the columnProvider in the DeclViewModel JSON\n       * specified by the DeclGrid.\n       */var _declColumnProviderJSON=null;/**\n       * {Boolean} _pinIconColumn - TRUE if the 1st column should be pinned to the left so that it is not scroll with\n       * the rest of the columns in the table.\n       */var _pinIconColumn=true;/**\n       * {Boolean} _soaEnabled - TRUE if this service is allowed to access soaService APIs.\n       * <P>\n       * Note: This service can be used in non\n       */var _soaEnabled=true;/**\n       * Make the little tweaks that are necessary.\n       *\n       * @param {AwTableColumnInfo} columnInfo - The column to be tweaked.\n       *\n       * @param {Boolean} isArrangeSupported - TRUE if columns should be allowed to move (but only if they wanted to in the first place).\n       *            FALSE if ALL columns should be fixed and not movable.\n       *\n       * @param {Boolean} isSortingSupported - TRUE if columns should be allowed to be corted.\n       */function _tweakColumnInfo(columnInfo,isArrangeSupported,isSortingSupported){// make sure propDescriptor isn't null\ncolumnInfo.propDescriptor=columnInfo.propDescriptor||{};/**\n           * Override 'enableColumnMoving' if 'arrange' not supported.\n           */if(!isArrangeSupported){columnInfo.enableColumnMoving=false;}/**\n           * Override 'enableSorting' if 'sorting' not supported.\n           */if(!isSortingSupported){columnInfo.enableSorting=false;}/**\n           * For now, we do not have any support for column menus.\n           */columnInfo.enableColumnMenus=false;/**\n           * Check if we DO NOT have a 'displayName' property but we do have a 'typeName' property<BR>\n           * If so: Make the 'displayName' the localized name of the type.\n           */if(!columnInfo.displayName){if(columnInfo.typeName){var type=cmm.getType(columnInfo.typeName);if(type&&type.propertyDescriptorsMap[columnInfo.propertyName]){columnInfo.displayName=type.propertyDescriptorsMap[columnInfo.propertyName].displayName;}else{columnInfo.displayName=columnInfo.propertyName;}}else{columnInfo.typeName=columnInfo.columnSrcType;columnInfo.displayName=columnInfo.propDescriptor.displayName||columnInfo.displayName;}}/**\n           * Make sure was have a 'name' property (If not: Set it to the same as the 'propertyName' property).\n           */columnInfo.name=columnInfo.name||columnInfo.propDescriptor.propertyName||columnInfo.propertyName;/**\n           * If we have a 'pixelWidth' property, set the 'width' property to that value as well.\n           */columnInfo.width=columnInfo.pixelWidth||columnInfo.width;/**\n           * Make sure was have a 'visible' property (If not: Set it to the same as the 'hiddenFlag' property or just\n           * default to 'true').\n           */if(!columnInfo.visible){if(!declUtils.isNil(columnInfo.hiddenFlag)){columnInfo.visible=!columnInfo.hiddenFlag;}else{columnInfo.visible=true;}}/**\n           * Make sure we have a 'field' (use 'name' is default)\n           */columnInfo.field=columnInfo.field||columnInfo.name;columnInfo.name=columnInfo.typeName?columnInfo.typeName+'.'+columnInfo.name:columnInfo.name;/**\n           * Setup to handle column sorting (if necessary)\n           */if(columnInfo.enableSorting){/**\n               * Fix for LCS-99462 - (Grid) Column sorting arrow not maintained, when switch to another view mode.\n               */if(_.isEmpty(columnInfo.sort)){columnInfo.sort={};}let sortCriteria=cpSelf.getSortCriteria();if(sortCriteria){// loop over column provider's sort criteria here and reapply as-needed\ntry{declarativeDataCtxSvc.applyScope(_declViewModel,sortCriteria,_declViewModel._internal.functions,_$scope,null);}catch(error){throw new Error(error);}cpSelf.setSortCriteria(sortCriteria);_.forEach(sortCriteria,function(currentSortCriteria){if(columnInfo.name===currentSortCriteria.fieldName||columnInfo.propertyName===currentSortCriteria.fieldName){columnInfo.sort.direction=currentSortCriteria.sortDirection.toLowerCase();columnInfo.sort.priority=0;}});}columnInfo.sortingAlgorithm=function(a,b,rowA,rowB,sortDir){// eslint-disable-line no-unused-vars\nvar vmPropA=rowA.entity.props[columnInfo.field];var vmPropB=rowB.entity.props[columnInfo.field];var valA='';var valB='';if(vmPropA.uiValue){valA=vmPropA.uiValue;}if(vmPropB.uiValue){valB=vmPropB.uiValue;}var strA=valA.toLowerCase();var strB=valB.toLowerCase();return strA===strB?0:strA.localeCompare(strB);};}}// _tweakColumnInfo\n/**\n       * Build the final set of columnInfos from the given array of columnInfos.\n       *\n       * @param {ObjectArray} columnInfoIn - Array of column settings from declarative model.\n       *\n       * @return {AwTableColumnInfoArray} Array of AwTableColumnInfo initialized with the given column settings (plus\n       *         an 'icon' column as the 1st column, if requested by this columnProvider).\n       */function _buildFinalColumnInfos(columnInfoIn){let finalColumnInfos=[];let newColumnInfo;if(declGrid.addIconColumn!==false&&declGrid.gridOptions.addIconColumn!==false){let iconColumnFound=false;let iconCellRenderer=null;_.forEach(columnInfoIn,function(colInfo){if(colInfo.name==='icon'){iconColumnFound=true;return false;}// This block is added for PL table. Since icon column is hardcoded in this service,\n// there is no way to provide a cell template at application layer. So added this hack.\n// Once we correct the hardcoded way of creating icon column, this will no more be needed.\nif(colInfo.isTableCommand&&colInfo.iconCellRenderer){iconCellRenderer=colInfo.iconCellRenderer;return false;}});if(!iconColumnFound){// Setup the special icon column\nnewColumnInfo=new AwTableColumnInfo();newColumnInfo.name='icon';newColumnInfo.displayName='';newColumnInfo.width=34;newColumnInfo.enableColumnMoving=false;newColumnInfo.enableColumnMenu=false;newColumnInfo.enableColumnResizing=false;newColumnInfo.isFilteringEnabled=columnInfoIn.isFilteringEnabled!==false;newColumnInfo.enableSorting=false;newColumnInfo.visible=true;if(_pinIconColumn){newColumnInfo.pinnedLeft=true;}if(iconCellRenderer){newColumnInfo.iconCellRenderer=iconCellRenderer;}finalColumnInfos.push(newColumnInfo);}}let isArrangeSupported=cpSelf.isArrangeSupported();let isSortingSupported=cpSelf.isSortingSupported();let needsNavigationColumn=true;_.forEach(columnInfoIn,function(colInfo){if(colInfo.isTableCommand||colInfo.isTreeNavigation){needsNavigationColumn=false;return false;}return true;});/**\n           * Create a new ('tweaked') AwTableColumnInfo for each of the given awColumnInfos.\n           */_.forEach(columnInfoIn,function(info){newColumnInfo=new AwTableColumnInfo();/**\n               * Move over all existing property values\n               */_.forEach(info,function(value,name){newColumnInfo[name]=value;});if(needsNavigationColumn){if(_uwDataProvider&&_uwDataProvider.accessMode==='tree'){newColumnInfo.isTreeNavigation=true;}else{newColumnInfo.isTableCommand=true;}needsNavigationColumn=false;}if((newColumnInfo.isTreeNavigation||newColumnInfo.isTableCommand)&&_commands){newColumnInfo.commands=_commands;}newColumnInfo.commandsAnchor=_commandsAnchor;// Even if sorting is supported at data provider level, if could be disabled at column level.\n// check both values to decide sort enablement.\nlet sortPossibleForProp=isSortingSupported&&newColumnInfo.enableSorting;let typeDesc=cmm.getType(newColumnInfo.typeName);if(typeDesc){let propDesc=typeDesc.propertyDescriptorsMap[newColumnInfo.propertyName];if(propDesc){// if no dataType specified, use property descriptor\nif(!newColumnInfo.dataType){newColumnInfo.dataType=propDesc.valueType;}}}/**\n               * Adjust the properties (as necessary)\n               */_tweakColumnInfo(newColumnInfo,isArrangeSupported,sortPossibleForProp);// Add column filter\nif(declGrid.gridOptions.isFilteringEnabled&&newColumnInfo.isFilteringEnabled!==false){let existingFilters=[];const columnFilters=cpSelf.getColumnFilters();_.forEach(columnFilters,function(currentFilter){if(newColumnInfo.field===currentFilter.columnName){existingFilters.push(currentFilter);}});awColumnFilterService.updateColumnFilter(newColumnInfo,existingFilters);}/**\n               * check for duplicate column before adding\n               */if(finalColumnInfos.find(function(finalColumnInfo){return finalColumnInfo.name===newColumnInfo.name&&finalColumnInfo.typeName===newColumnInfo.typeName;})){logger.warn('Skipping duplicate column: '+newColumnInfo.name);}else{finalColumnInfos.push(newColumnInfo);}});// Set sort from columns if sortCriteria is empty\nconst sortCriteria=cpSelf.getSortCriteria();if(_.isEmpty(sortCriteria)){let sortPriority=NaN;let sortDirection='';let sortColumn=null;_.forEach(finalColumnInfos,function(currentColumn){if(currentColumn.sortDirection&&(isNaN(sortPriority)||currentColumn.sortPriority<sortPriority)){sortPriority=currentColumn.sortPriority;sortDirection=currentColumn.sortDirection.toLowerCase().includes('desc')?'DESC':'ASC';sortColumn=currentColumn;}});if(sortColumn&&sortColumn.enableSorting&&sortDirection){sortColumn.sort.direction=sortDirection;sortColumn.sort.priority=0;cpSelf.setSortCriteria([{fieldName:sortColumn.field,sortDirection:sortDirection}]);}}// checking if columns are set as frozen via xrt or vmo json otherwise rendered the default frozen columns\nfinalColumnInfos=_checkForFrozenColumnsConfiguration(finalColumnInfos);return finalColumnInfos;}// _buildFinalColumnInfos\n/**\n       * checks and froze columns specified via xrt, vmo json or defualt.\n       * 1st prefrence is given to xrt, then vmo json and at last if nothing is specified, default columns will be forzen.\n       * (i.e. 1st col for tree & 1st,2nd col for table)\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Object} finalColumnInfos final columns config with frozen properties.\n       */function _checkForFrozenColumnsConfiguration(allColumns){var xrtConfigured=_checkFrozenColumnParameterConfig(allColumns);if(!xrtConfigured){var vmJsonConfigured=_checkFrozenColumnJsonConfig(allColumns);if(!vmJsonConfigured){_defaultFrozenColumns(allColumns);}}return allColumns;}/**\n       * check and froze columns as specified in xrt\n       *\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Boolean} True if frozen column configuration is done via xrt.\n       */function _checkFrozenColumnParameterConfig(allColumns){var frozenIndex=-1;// find the frozen col index\nallColumns.forEach(function(col,index){if(col.parameters&&col.parameters.frozen==='true'){frozenIndex=index;}});// froze all columns upto xrt configured frozen col.\nif(frozenIndex!==-1&&frozenIndex<=allColumns.length){for(var i=0;i<=frozenIndex;i++){allColumns[i].pinnedLeft=true;}return true;}return false;}/**\n       * check and froze columns as specified in view model json\n       *\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Boolean} True if frozen column configuration is done via vmo json.\n       */function _checkFrozenColumnJsonConfig(allColumns){if(_declViewModel&&_declViewModel.columnProviders){var columnProviders=[];for(var provider in _declViewModel.columnProviders){columnProviders.push(provider);}var frozenIndex=_declViewModel.columnProviders[columnProviders[0]].frozenColumnIndex;if(frozenIndex===undefined){return false;}if(frozenIndex>=0&&frozenIndex<=allColumns.length){// froze all columns upto frozenIndex specified in vmo json.\nfor(var index=0;index<=frozenIndex;index++){allColumns[index].pinnedLeft=true;}}return true;}return false;}/**\n       * freezing default columns i.e. 1st col for tree & 1st,2nd col for table\n       *\n       * @param {Object} allColumns - all columns of ui grid.             *\n       */function _defaultFrozenColumns(allColumns){if(allColumns&&allColumns.length>0){if(allColumns[0].name==='icon'){// this for table\n// 0th column (contains icon) + 1st column must be frozen in table as an AC of AW-4227 & AW-67931\nallColumns[0].pinnedLeft=true;if(allColumns[1]){allColumns[1].pinnedLeft=true;}}else{// In tree, 0th column (contains icon + name) must be frozen\nallColumns[0].pinnedLeft=true;}}}/**\n       * @param {Object} columnProviderJSON - JSON object where the columnProvider is defined.\n       * @param {Object} passedState - State with which column provider invokes actions\n       *\n       * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n       */function _initializedFromJSON(columnProviderJSON,passedState){/**\n           * Set whether this column provider should interact with SOA APIs.\n           */if(!declUtils.isNil(columnProviderJSON.soaEnabled)){_soaEnabled=columnProviderJSON.soaEnabled;}if(_declColumnProviderJSON){try{declarativeDataCtxSvc.applyScope(_declViewModel,_declColumnProviderJSON,null,passedState||_$scope,null);}catch(error){throw new Error(error);}cpSelf.columnFilters=_declColumnProviderJSON.columnFilters;cpSelf.sortCriteria=_declColumnProviderJSON.sortCriteria;}/**\n           * Check for column load and row property actions\n           */var loadColumnAction=columnProviderJSON.loadColumnAction?_declViewModel.getAction(columnProviderJSON.loadColumnAction):null;if(loadColumnAction){if(loadColumnAction.deps){return moduleLoader.loadDependentModule(loadColumnAction.deps).then(function(moduleObj){return _executeLoadColumnAction(loadColumnAction,moduleObj,passedState);});}return _executeLoadColumnAction(loadColumnAction,null);}/**\n           * Load from the dataProvider (if possible)\n           */if(!_.isEmpty(_uwDataProvider.columnConfig)&&!_.isEmpty(_uwDataProvider.columnConfig.columns)){_uwDataProvider.cols=_buildFinalColumnInfos(_uwDataProvider.columnConfig.columns);return AwPromiseService.instance.resolve(_uwDataProvider.cols);}else if(columnProviderJSON){if(!_.isEmpty(columnProviderJSON.columnConfig)&&!_.isEmpty(columnProviderJSON.columnConfig.columns)){_uwDataProvider.cols=_buildFinalColumnInfos(columnProviderJSON.columnConfig.columns);return AwPromiseService.instance.resolve(_uwDataProvider.cols);}else if(!_.isEmpty(columnProviderJSON.columns)){/**\n\n                  /**\n                   * For static column provider, setting width to auto and minWidth to 150.\n                   */_.forEach(columnProviderJSON.columns,function autoResizeStaticColumns(column){if(!column.width){column.width='*';column.minWidth=150;}});_updateColumnInfosFromColumnInfos(_uwDataProvider,columnProviderJSON.columns);return AwPromiseService.instance.resolve(_uwDataProvider.cols);}}return AwPromiseService.instance.resolve([]);}/**\n       * @param {DeclAction} loadColumnAction - Action used to load columns.\n       * @param {Object} loadColumnModuleObj - (Optional) Module API object to use when executing the action.\n       * @param {Object} passedState - State with which column provider invokes actions\n       *\n       * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n       */function _executeLoadColumnAction(loadColumnAction,loadColumnModuleObj,passedState){/**\n           * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action event\n           * processing was started.\n           */var localDataCtx=declUtils.resolveLocalDataCtx(_declViewModel,passedState||_$scope);if(loadColumnAction){return actionSvc.executeAction(_declViewModel,loadColumnAction,localDataCtx,loadColumnModuleObj).then(function(columnResult){if(columnResult&&columnResult.columnInfos){_uwDataProvider.cols=_buildFinalColumnInfos(columnResult.columnInfos);}else if(_uwDataProvider.columnConfig&&_uwDataProvider.columnConfig.columns){_uwDataProvider.cols=_buildFinalColumnInfos(_uwDataProvider.columnConfig.columns);}return _uwDataProvider.cols;});}return AwPromiseService.instance.resolve(_uwDataProvider.cols);}/**\n       *\n       * @param {AwColumnInfoArray} columnInfos - Collection of Object containing the 'cok\n       */function _updateColumnInfosFromColumnInfos(uwDataProvider,columnInfos){uwDataProvider.cols=_buildFinalColumnInfos(columnInfos);}// _updateColumnInfosFromColumnInfos\n/**\n       * ---------------------------------------------------------------------<br>\n       * Define the exposed API <BR>\n       * ---------------------------------------------------------------------<br>\n       */ /**\n       * Build the new dynamic columns, and update the grid control\n       *\n       * @param {AwTableColumnInfoArray} columnInfosIn - the new set of columns\n       * @param {Boolean} updateDataProvider - update the grid ui?\n       * @returns {Promise} to ensure _uwDataProvider.cols is updated before used.\n       */cpSelf.buildDynamicColumns=function(columnInfosIn,updateDataProvider){if(_soaEnabled){var typeNames=[];_.forEach(columnInfosIn,function(columnInfo){if(columnInfo.typeName){typeNames.push(columnInfo.typeName);}else if(columnInfo.associatedTypeName){typeNames.push(columnInfo.associatedTypeName);}});typeNames=_.uniq(typeNames);return soaService.ensureModelTypesLoaded(typeNames).then(function(){var columnInfos=_buildFinalColumnInfos(columnInfosIn);if(updateDataProvider){var oldCols=_uwDataProvider.cols;_uwDataProvider.cols=columnInfos;// preserve properties that were not included in new columns\n_.forEach(oldCols,function(oldCol){_.forEach(_uwDataProvider.cols,function(currentColumn){if(currentColumn.name===oldCol.name){if(oldCol.enableColumnMoving===false){currentColumn.enableColumnMoving=false;}// Handle column filter logic\nawColumnFilterService.updateNewColumnFilter(currentColumn,oldCol);// XRT properties\nvar xrtProperties=['renderingHint','parameters','modifiable','isTableCommand','enableSorting','isFilteringEnabled'];_.forEach(xrtProperties,function(propertyName){if(currentColumn[propertyName]===undefined){currentColumn[propertyName]=oldCol[propertyName];}});return false;}});});}});}else if(updateDataProvider){_uwDataProvider.cols=_buildFinalColumnInfos(columnInfosIn);return Promise.resolve();}};// buildDynamicColumns\n/**\n       * Get the current columns\n       *\n       * @return {ArrayUwGridColumnInfo} an array of UwGridColumnInfo that represent the columns specified by EITHER\n       *         the given 'declViewModel' (columnPropNames, columnDisplayNames & nColsToFreeze) OR\n       *         'declGrid.columnDefs'\n       */cpSelf.getColumns=function(){if(_uwDataProvider&&_uwDataProvider.cols){return _uwDataProvider.cols;}return null;};/**\n       * Change the size of one of the columns\n       *\n       * @param {String} name - The name of the column that has had it's size change\n       * @param {Integer} delta - The change in size of the column\n       *\n       */cpSelf.columnSizeChanged=function(name,delta){var columnInfos=cpSelf.getColumns();_.forEach(columnInfos,function(columnInfo){if(columnInfo.name===name){columnInfo.width+=delta;/**\n                   * Previously ui-grid was enforcing min and max, but it seems we need to do it here for now Also\n                   * round since IE11 is returning a float instead of an int\n                   */columnInfo.width=Math.round(Math.max(columnInfo.width,columnInfo.minWidth));if(columnInfo.pixelWidth){columnInfo.pixelWidth=columnInfo.width;}return false;}});eventBus.publish('columnArrange',{name:_gridId,columnConfigId:_uwDataProvider.columnConfig?_uwDataProvider.columnConfig.columnConfigId:null,arrangeType:'saveColumnAction',columns:columnInfos});};/**\n       * Re-order one of the columns\n       *\n       * @param {String} name - The name of the column that has been moved\n       * @param {Integer} origPosition - column's original position\n       * @param {Integer} newPosition - column's new position\n       */cpSelf.columnOrderChanged=function(name,origPosition,newPosition){var columnInfos=cpSelf.getColumns();// assume icon is using col 0 and we don't have to adjust indexes for splicing below\n// if not, adjust indexes\nif(columnInfos[0].name!=='icon'){origPosition=origPosition>0?origPosition-1:0;newPosition=newPosition>0?newPosition-1:0;}// dis-allow positioning to the left of any initial un-moveable columns\nwhile(columnInfos[newPosition]&&columnInfos[newPosition].enableColumnMoving===false){newPosition++;}var movedColumnInfo=columnInfos.splice(origPosition,1);columnInfos.splice(newPosition,0,movedColumnInfo[0]);eventBus.publish('columnArrange',{name:_gridId,columnConfigId:_uwDataProvider.columnConfig?_uwDataProvider.columnConfig.columnConfigId:null,arrangeType:'saveColumnAction',columns:columnInfos});};/**\n       * Hide one of the columns\n       *\n       * @param {Integer} columnIndex - The index of the column that has been hidden\n       */cpSelf.hideColumn=function(columnIndex){var columnInfos=cpSelf.getColumns();let operation=_uwDataProvider.columnConfig?_uwDataProvider.columnConfig.operationType:'';columnInfos[columnIndex].hiddenFlag=true;eventBus.publish('columnArrange',{name:_gridId,columnConfigId:_uwDataProvider.columnConfig?_uwDataProvider.columnConfig.columnConfigId:null,arrangeType:'saveColumnAndLoadAction',columns:columnInfos,operationType:operation});};/**\n       * Get the current sort criteria\n       */cpSelf.getSortCriteria=function(){return cpSelf.sortCriteria;};/**\n       * Set the current sort criteria\n       *\n       * @param {Object[]} sortCriteria - The new sort criteria\n       */cpSelf.setSortCriteria=function(sortCriteria){cpSelf.sortCriteria=sortCriteria;if(_declColumnProviderJSON){_declColumnProviderJSON.sortCriteria=sortCriteria;}};/**\n       * Get the current column filters\n       * @return {Object[]} columnFilters - the column filters\n       */cpSelf.getColumnFilters=function(){return cpSelf.columnFilters;};/**\n       * Set the column filters\n       * @param {Object[]} columnFilters - the column filters\n       */cpSelf.setColumnFilters=function(columnFilters){cpSelf.columnFilters=columnFilters;if(_declColumnProviderJSON){_declColumnProviderJSON.columnFilters=columnFilters;}};/**\n       * Free up all resources held/managed by this object.\n       * <P>\n       * Note: After this function, no API call should be considered valid. This function is intended to be called\n       * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n       * objects managed by this class may be considered a 'memory leak'.\n       */cpSelf.destroy=function(){_declViewModel=null;_uwDataProvider=null;// Note: We did not create this object, so it's not ours to destroy\n_$scope=null;_commands=null;cpSelf=null;};cpSelf.setAdditionalPrams=function(commands,commandsAnchor,dataCtxNode){_commands=commands;_commandsAnchor=commandsAnchor;_$scope=dataCtxNode;};/**\n       * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n       *         additional declActions necessary to support column arranging.\n       */cpSelf.isArrangeSupported=function(){declUtils.assertValidModel(_declViewModel);var declGrid=_declViewModel.grids[_gridId];assert(declGrid,'Invalid declGrid');if(_declViewModel.columnProviders){var colProvider=_declViewModel.columnProviders[declGrid.columnProvider];assert(colProvider,'Invalid columnProvider');return colProvider.resetColumnAction&&colProvider.saveColumnAndLoadAction;}return false;};/**\n       * @return {Boolean} TRUE support column filtering.\n       */cpSelf.isFilteringSupported=function(){declUtils.assertValidModel(_declViewModel);var declGrid=_declViewModel.grids[_gridId];assert(declGrid,'Invalid declGrid');return declGrid.gridOptions.isFilteringEnabled===true;};/**\n       * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n       *         additional option or declActions necessary to support column sorting.\n       */cpSelf.isSortingSupported=function(){declUtils.assertValidModel(_declViewModel);var declGrid=_declViewModel.grids[_gridId];assert(declGrid,'Invalid declGrid');/**\n           * Check if the declGrid options indicates if 'external' sorting is supported or not.\n           */if(!declUtils.isNil(declGrid.gridOptions.useExternalSorting)){return declGrid.gridOptions.useExternalSorting;}/**\n           * Since the options did not indicate support, check if the declColumnProvider indicates sorting by the\n           * existence of a declAction for sorting.\n           */if(!_declViewModel.columnProviders){return false;}var colProvider=_declViewModel.columnProviders[declGrid.columnProvider];assert(colProvider,'Invalid columnProvider');if(!declUtils.isNil(colProvider.sortColumnAction)){return true;}/**\n           * Note: Since aw3.3 'useExternalSorting' is true by default. This default should be changed to FALSE, but\n           * until then we need to honor it here. The declGrid in the declViewModel should override that property if\n           * they do NOT want 'useExternalSorting' to be true.\n           */return true;};/**\n       * @return {String} Column provider Id, it is equal to clientScopeURI for aw tables if specified.\n       */cpSelf.getId=function(){declUtils.assertValidModel(_declViewModel);var declGrid=_declViewModel.grids[_gridId];assert(declGrid,'Invalid declGrid');if(_declViewModel.columnProviders){var colProvider=_declViewModel.columnProviders[declGrid.columnProvider];assert(colProvider,'Invalid columnProvider');return colProvider.id;}return null;};/**\n       * @return {Promise} A Promise resolved with the initial array of AwTableColumnInfo.\n       */cpSelf.initialize=function(passedState){/**\n           * Check for columnProvider on viewModel\n           */if(_declColumnProviderJSON){return _initializedFromJSON(_declColumnProviderJSON,passedState);}/**\n           * Use properties placed on the 'declViewModel' as the basis of the column information.\n           * <P>\n           * Note: This is what the shf measurement table does, but should update to use col provider\n           */var columnPropNames=_declViewModel.columnPropNames?_declViewModel.columnPropNames:[];var columnDisplayNames=_declViewModel.columnDisplayNames?_declViewModel.columnDisplayNames:[];var nColsToFreeze=_declViewModel.nColsToFreeze?_declViewModel.nColsToFreeze:0;var newColumnInfos=[];for(var index=0;index<columnPropNames.length;index++){var columnInfo=new AwTableColumnInfo();columnInfo.name=columnPropNames[index];if(columnDisplayNames!==null&&columnDisplayNames.length>index){columnInfo.displayName=columnDisplayNames[index];}if(index<nColsToFreeze){columnInfo.pinnedLeft=true;}newColumnInfos.push(columnInfo);}_uwDataProvider.cols=newColumnInfos;return AwPromiseService.instance.resolve(_uwDataProvider.cols);};// initialize\n/**\n       * ---------------------------------------------------------------------------<BR>\n       * Property & Function definition complete....Finish initialization. <BR>\n       * ---------------------------------------------------------------------------<BR>\n       */ /**\n       * Validate parameters and initialize fields\n       */assert(_declViewModel,'No in DeclViewModel specified ');// assert( _gridId, 'No DeclGrid specified ' );\nif(_gridId){var declGrid=_declViewModel.grids[_gridId];assert(declGrid,'No DeclGrid specified ');if(_declViewModel.dataProviders&&declGrid.dataProvider){_uwDataProvider=_declViewModel.dataProviders[declGrid.dataProvider];}if(_declViewModel.columnProviders&&declGrid.columnProvider){_declColumnProviderJSON=_declViewModel.columnProviders[declGrid.columnProvider];if(!_.isEmpty(_declColumnProviderJSON.columnConfig)&&!_.isEmpty(_declColumnProviderJSON.columnConfig.columns)){_uwDataProvider.columnConfig=_declColumnProviderJSON.columnConfig;}if(_declColumnProviderJSON.objectSetUri){_uwDataProvider.objectSetUri=_declColumnProviderJSON.objectSetUri;}}assert(_uwDataProvider,'No DataProvider specified in DeclViewModel');if(declGrid.hasOwnProperty('pinIconColumn')){_pinIconColumn=declGrid.pinIconColumn;}}};// AwTableColumnProvider\n/**\n   * ----------------------------------------------------------------------------<BR>\n   * Define published service APIs<BR>\n   * ----------------------------------------------------------------------------<BR>\n   */var exports={};/**\n   * @param {Object} columnProperties - (Optional) An object who's properties will overwrite the default values of the\n   *            new AwTableColumnInfo object.\n   *\n   * @return {AwTableColumnInfo} Newly created AwTableColumnInfo object.\n   */export let createColumnInfo=function(columnProperties){var columnInfo=new AwTableColumnInfo();if(columnProperties){_.forEach(columnProperties,function(value,name){columnInfo[name]=value;});}return columnInfo;};/**\n   * @param {AwTableColumnInfo} awColumnInfo -\n   * @param {Number} columnOrder -\n   */export let createSoaColumnInfo=function(awColumnInfo,columnOrder){return new AwSoaColumnInfo(columnOrder,awColumnInfo.hiddenFlag,awColumnInfo.pixelWidth,awColumnInfo.propertyName,awColumnInfo.sortDirection,awColumnInfo.sortPriority,awColumnInfo.typeName,awColumnInfo.isFilteringEnabled);};/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Scope} $scope - The AngularJS data context node.\n   * @param {Array} commands - The list of associated commands\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   *\n   * @return {AwTableColumnProvider} Newly created AwTableColumnProvider object.\n   */export let createColumnProvider=function(declViewModel,$scope,commands,gridId,commandsAnchor){return new AwTableColumnProvider(declViewModel,$scope,commands,gridId,commandsAnchor);};exports={createColumnInfo,createSoaColumnInfo,createColumnProvider};export default exports;","map":null,"metadata":{},"sourceType":"module"}
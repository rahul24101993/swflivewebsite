{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwChipListService.js\";\nimport AwChip from 'viewmodel/AwChipViewModel';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awChipListRenderFunction = props => {\n  const {\n    dataprovider,\n    buttonType,\n    action,\n    uiIconAction,\n    chipCondition,\n    viewModel\n  } = props;\n  const {\n    data\n  } = viewModel;\n  let vmCollectionObj = dataprovider.vmCollectionObj;\n  let loadedVMO = vmCollectionObj && vmCollectionObj.vmCollection.loadedVMObjects || [];\n\n  if (_.isEmpty(loadedVMO)) {\n    return;\n  }\n\n  let subscriptions = data.subscriptions;\n  let subscribedEventsStr = getEventSubscribtionsList(subscriptions);\n\n  if (!subscribedEventsStr.includes(`${dataprovider.name}.reset`)) {\n    data.subscriptions.push(eventBus.subscribe(`${dataprovider.name}.reset`, () => {\n      initChipList(props);\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aw-layout-flexbox aw-widgets-chipList\",\n    children: loadedVMO.map((chipModel, index) => {\n      return /*#__PURE__*/_jsxDEV(AwChip, {\n        chip: chipModel,\n        buttonType: buttonType,\n        action: action,\n        uiIconAction: uiIconAction,\n        chipCondition: chipCondition\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\nexport const initChipList = props => {\n  const {\n    dataprovider\n  } = props;\n\n  if (dataprovider && dataprovider.resetDataProvider) {\n    dataprovider.resetDataProvider();\n  }\n};\nexport const updateDefaultSelection = dataProvider => {\n  let selected = _.filter(dataProvider.vmCollectionObj.vmCollection.loadedVMObjects, {\n    selected: true\n  });\n\n  dataProvider.selectionModel.setSelection(selected);\n};\n\nconst getEventSubscribtionsList = subscriptions => {\n  let subscribedEventsStr = [];\n\n  if (subscriptions.length !== 0) {\n    subscriptions.map(eventSubscribed => {\n      subscribedEventsStr.push(eventSubscribed.topic);\n    });\n  }\n\n  return subscribedEventsStr;\n};\n\nexport const destroyIndicatorSubscription = subscriptions => {\n  if (subscriptions && subscriptions.length > 0) {\n    subscriptions.forEach(subscription => {\n      eventBus.unsubscribe(subscription);\n    });\n  }\n};","map":{"version":3,"names":["AwChip","eventBus","_","awChipListRenderFunction","props","dataprovider","buttonType","action","uiIconAction","chipCondition","viewModel","data","vmCollectionObj","loadedVMO","vmCollection","loadedVMObjects","isEmpty","subscriptions","subscribedEventsStr","getEventSubscribtionsList","includes","name","push","subscribe","initChipList","map","chipModel","index","resetDataProvider","updateDefaultSelection","dataProvider","selected","filter","selectionModel","setSelection","length","eventSubscribed","topic","destroyIndicatorSubscription","forEach","subscription","unsubscribe"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwChipListService.js"],"sourcesContent":["import AwChip from 'viewmodel/AwChipViewModel';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\n\nexport const awChipListRenderFunction = ( props ) => {\n    const { dataprovider, buttonType, action, uiIconAction, chipCondition, viewModel } = props;\n    const { data } = viewModel;\n\n    let vmCollectionObj = dataprovider.vmCollectionObj;\n    let loadedVMO = vmCollectionObj && vmCollectionObj.vmCollection.loadedVMObjects || [];\n\n    if( _.isEmpty( loadedVMO ) ) {\n        return;\n    }\n\n    let subscriptions = data.subscriptions;\n    let subscribedEventsStr = getEventSubscribtionsList( subscriptions );\n\n    if( !subscribedEventsStr.includes( `${dataprovider.name}.reset` ) ) {\n        data.subscriptions.push( eventBus.subscribe( `${dataprovider.name}.reset`, () => {\n            initChipList( props );\n        } ) );\n    }\n\n    return (\n        <div className='aw-layout-flexbox aw-widgets-chipList'>\n                { loadedVMO.map( ( chipModel, index ) => {\n                    return (\n                            <AwChip\n                                chip={chipModel}\n                                buttonType={buttonType}\n                                action={action}\n                                uiIconAction={uiIconAction}\n                                key={index}\n                                chipCondition={chipCondition}>\n                            </AwChip>\n                        );\n                } )}\n            </div>\n\n    );\n};\n\nexport const initChipList = ( props ) => {\n    const { dataprovider } = props;\n    if( dataprovider && dataprovider.resetDataProvider ) {\n        dataprovider.resetDataProvider();\n    }\n};\n\nexport const updateDefaultSelection = ( dataProvider ) => {\n    let selected = _.filter( dataProvider.vmCollectionObj.vmCollection.loadedVMObjects, { selected: true } );\n    dataProvider.selectionModel.setSelection( selected );\n};\n\nconst getEventSubscribtionsList = ( subscriptions ) => {\n    let subscribedEventsStr = [];\n    if( subscriptions.length !== 0 ) {\n        subscriptions.map( ( eventSubscribed ) => {\n            subscribedEventsStr.push( eventSubscribed.topic );\n        } );\n    }\n    return subscribedEventsStr;\n};\n\nexport const destroyIndicatorSubscription = ( subscriptions ) => {\n    if( subscriptions && subscriptions.length > 0 ) {\n        subscriptions.forEach( subscription => {\n            eventBus.unsubscribe( subscription );\n        } );\n    }\n};\n"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,OAAO,MAAMC,wBAAwB,GAAKC,KAAF,IAAa;EACjD,MAAM;IAAEC,YAAF;IAAgBC,UAAhB;IAA4BC,MAA5B;IAAoCC,YAApC;IAAkDC,aAAlD;IAAiEC;EAAjE,IAA+EN,KAArF;EACA,MAAM;IAAEO;EAAF,IAAWD,SAAjB;EAEA,IAAIE,eAAe,GAAGP,YAAY,CAACO,eAAnC;EACA,IAAIC,SAAS,GAAGD,eAAe,IAAIA,eAAe,CAACE,YAAhB,CAA6BC,eAAhD,IAAmE,EAAnF;;EAEA,IAAIb,CAAC,CAACc,OAAF,CAAWH,SAAX,CAAJ,EAA6B;IACzB;EACH;;EAED,IAAII,aAAa,GAAGN,IAAI,CAACM,aAAzB;EACA,IAAIC,mBAAmB,GAAGC,yBAAyB,CAAEF,aAAF,CAAnD;;EAEA,IAAI,CAACC,mBAAmB,CAACE,QAApB,CAA+B,GAAEf,YAAY,CAACgB,IAAK,QAAnD,CAAL,EAAoE;IAChEV,IAAI,CAACM,aAAL,CAAmBK,IAAnB,CAAyBrB,QAAQ,CAACsB,SAAT,CAAqB,GAAElB,YAAY,CAACgB,IAAK,QAAzC,EAAkD,MAAM;MAC7EG,YAAY,CAAEpB,KAAF,CAAZ;IACH,CAFwB,CAAzB;EAGH;;EAED,oBACI;IAAK,SAAS,EAAC,uCAAf;IAAA,UACUS,SAAS,CAACY,GAAV,CAAe,CAAEC,SAAF,EAAaC,KAAb,KAAwB;MACrC,oBACQ,QAAC,MAAD;QACI,IAAI,EAAED,SADV;QAEI,UAAU,EAAEpB,UAFhB;QAGI,MAAM,EAAEC,MAHZ;QAII,YAAY,EAAEC,YAJlB;QAMI,aAAa,EAAEC;MANnB,GAKSkB,KALT;QAAA;QAAA;QAAA;MAAA,QADR;IAUH,CAXC;EADV;IAAA;IAAA;IAAA;EAAA,QADJ;AAiBH,CArCM;AAuCP,OAAO,MAAMH,YAAY,GAAKpB,KAAF,IAAa;EACrC,MAAM;IAAEC;EAAF,IAAmBD,KAAzB;;EACA,IAAIC,YAAY,IAAIA,YAAY,CAACuB,iBAAjC,EAAqD;IACjDvB,YAAY,CAACuB,iBAAb;EACH;AACJ,CALM;AAOP,OAAO,MAAMC,sBAAsB,GAAKC,YAAF,IAAoB;EACtD,IAAIC,QAAQ,GAAG7B,CAAC,CAAC8B,MAAF,CAAUF,YAAY,CAAClB,eAAb,CAA6BE,YAA7B,CAA0CC,eAApD,EAAqE;IAAEgB,QAAQ,EAAE;EAAZ,CAArE,CAAf;;EACAD,YAAY,CAACG,cAAb,CAA4BC,YAA5B,CAA0CH,QAA1C;AACH,CAHM;;AAKP,MAAMZ,yBAAyB,GAAKF,aAAF,IAAqB;EACnD,IAAIC,mBAAmB,GAAG,EAA1B;;EACA,IAAID,aAAa,CAACkB,MAAd,KAAyB,CAA7B,EAAiC;IAC7BlB,aAAa,CAACQ,GAAd,CAAqBW,eAAF,IAAuB;MACtClB,mBAAmB,CAACI,IAApB,CAA0Bc,eAAe,CAACC,KAA1C;IACH,CAFD;EAGH;;EACD,OAAOnB,mBAAP;AACH,CARD;;AAUA,OAAO,MAAMoB,4BAA4B,GAAKrB,aAAF,IAAqB;EAC7D,IAAIA,aAAa,IAAIA,aAAa,CAACkB,MAAd,GAAuB,CAA5C,EAAgD;IAC5ClB,aAAa,CAACsB,OAAd,CAAuBC,YAAY,IAAI;MACnCvC,QAAQ,CAACwC,WAAT,CAAsBD,YAAtB;IACH,CAFD;EAGH;AACJ,CANM"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * View model collection factory\n * This factory creates ViewModelCollection instances which maintain the loaded ViewModelObjects and exposes APIs to\n * access the information of collection.\n *\n * @module js/viewModelCollectionFactory\n */\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport browserUtils from 'js/browserUtils'; // eslint-disable-next-line valid-jsdoc\n\n/**\n * {Number} The debug ID of the 'next' instance of a certain class.\n */\n\nvar _debug_nextId = {\n  viewModelCollection: 0\n};\n/**\n * {Number} The current number of 'active' instances of a certain class.\n */\n\nvar _debug_currentCount = {\n  viewModelCollection: 0\n};\n/**\n * {Boolean} TRUE if create/destroy events should be logged for all non-dataProvider objects from this\n * service.\n */\n\nvar _debug_logMiscModelLifeCycle = false;\n/**\n * Based on the given uid this function retrieves the IModelObject instance from the ClientDataModel and\n * creates a new instance of a ViewModelObject based on the model object passed in.\n *\n * @param {String} uid - ID of the new ViewModelObject.\n *\n * @return {ViewModelObject} New ViewModelObject (or NULL if no match was found in the ClientDataModel).\n */\n\nfunction _createViewModelObject(uid) {\n  if (uid) {\n    return viewModelObjectSvc.createViewModelObject(uid, 'EDIT');\n  }\n\n  return null;\n}\n/**\n * Class used to maintain data for various DataProviders.\n *\n * @param {String} name of the viewModelCollection\n * @constructor ViewModelCollection\n */\n\n\nvar ViewModelCollection = function (name) {\n  var self = this;\n  /**\n   * Name of this view model collection (usually the same as the dataprovider name)\n   */\n\n  self.name = name;\n  /**\n   * Array of ViewModelObjects currently being managed in this 'virtual' collection.\n   */\n\n  self.loadedVMObjects = [];\n  /**\n   * The number of ViewModelObjects currently in this 'virtual' collection (should be same as length of\n   * 'loadedVMObjects').\n   */\n\n  self.totalObjectsLoaded = 0;\n  /**\n   * The number of ViewModelObjects possible in this 'virtual' collection.\n   */\n\n  self.totalFound = 0;\n  /**\n   * {SubDefArray} Collection of eventBus subscription definitions.\n   */\n\n  var _eventBusSubDefs = [];\n  /**\n   * {String} Topic to publish for each 'cdm.new' event.\n   */\n\n  var _eventTopicNew = 'vmc.new.' + self.name;\n  /**\n   * {String} Topic to publish for each 'cdm.modified.' event.\n   */\n\n\n  var _eventTopicModified = 'vmc.modified.' + self.name;\n  /**\n   * {Object} Cached (shared) data object to publish for 'vmc.new.xxx' events.\n   */\n\n\n  var _eventDataNew = {\n    vmc: self,\n    newObjects: null\n  };\n  /**\n   * {Object} Cached (shared) data object to publish for 'vmc.modified.xxx' events.\n   */\n\n  var _eventDataModified = {\n    vmc: self,\n    modifiedObjects: null\n  };\n  /**\n   * Updates the loaded objects array and total objects loaded counter.\n   *\n   * @param {Array} results - Array of model objects or objects\n   *\n   * @param {String} uidInResponse - if response object doesn't have uid at top level, then this attribute\n   *            should specify the level where uid is available. Example:\n   *\n   * <pre>\n   *    responseObject: {\n   *        test: {\n   *            uid: 'AAAAAAAA'\n   *        }\n   *    },\n   *    uidInResponse: 'test.uid'\n   * </pre>\n   *\n   * @param {Boolean} preSelection - if the objects should inherit 'selected' status\n   *\n   * @param {Boolean} prepend - Insert Before current start index. (optional)\n   *\n   * @memberof ViewModelCollection\n   */\n\n  self.updateModelObjects = function (results, uidInResponse, preSelection, prepend) {\n    var actualResults = results.objects || results;\n\n    if (!_.isEmpty(actualResults)) {\n      var preprendVMObjects = [];\n\n      _.forEach(actualResults, function (object) {\n        var vmObject = null;\n        var uid = null;\n\n        if (results.objects) {\n          uid = object.uid;\n          vmObject = viewModelObjectSvc.createViewModelObject(uid, 'EDIT', null, object);\n        } else if (object.uid) {\n          // Retrieve object's UID\n          uid = object.uid;\n          var modelObj = cdm.getObject(uid); // If object is there in the CDM, convert it to VM object\n\n          if (modelObj) {\n            if (viewModelObjectSvc.isViewModelObject(object) || object.dataMapper) {\n              // if VMObject is passed, use it directly instead of creating again\n              vmObject = object;\n            } else {\n              // Get underlying target object's UID if 'awp0Target' property exists\n              if (modelObj.props && modelObj.props.awp0Target) {\n                uid = modelObj.props.awp0Target.dbValues[0];\n              }\n\n              vmObject = _createViewModelObject(uid);\n            }\n          } else {\n            // If object is not there in the CDM, it is a VM object\n            vmObject = object;\n          }\n        } else if (uidInResponse) {\n          // if object doesn't have any UID, then retrieve the UID from the structure provided\n          uid = _.get(object, uidInResponse);\n          vmObject = _createViewModelObject(uid);\n        } else {\n          // for static objects\n          vmObject = object;\n        }\n\n        if (vmObject && !prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          self.loadedVMObjects.push(vmObject);\n        }\n\n        if (vmObject && prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          preprendVMObjects.push(vmObject);\n        } // update total count for loaded objects\n\n\n        self.totalObjectsLoaded++;\n      });\n\n      if (!_.isEmpty(preprendVMObjects)) {\n        self.loadedVMObjects = preprendVMObjects.concat(self.loadedVMObjects);\n      } // if moreValuesExist of the LOV results,\n\n\n      if (actualResults.moreValuesExist) {\n        self.moreValuesExist = actualResults.moreValuesExist;\n      }\n    }\n  };\n\n  self.createModelObjects = function (results, uidInResponse, preSelection, prepend) {\n    let actualResults = results.objects || results;\n    let loadedVMObjects = [];\n\n    if (!_.isEmpty(actualResults)) {\n      var preprendVMObjects = [];\n\n      _.forEach(actualResults, function (object) {\n        let vmObject = null;\n        let uid = null;\n\n        if (results.objects) {\n          uid = object.uid;\n          vmObject = viewModelObjectSvc.createViewModelObject(uid, 'EDIT', null, object);\n        } else if (object.uid) {\n          // Retrieve object's UID\n          uid = object.uid;\n          let modelObj = cdm.getObject(uid); // If object is there in the CDM, convert it to VM object\n\n          if (modelObj) {\n            if (viewModelObjectSvc.isViewModelObject(object) || object.dataMapper) {\n              // if VMObject is passed, use it directly instead of creating again\n              vmObject = object;\n            } else {\n              // Get underlying target object's UID if 'awp0Target' property exists\n              if (modelObj.props && modelObj.props.awp0Target) {\n                uid = modelObj.props.awp0Target.dbValues[0];\n              }\n\n              vmObject = _createViewModelObject(uid);\n            }\n          } else {\n            // If object is not there in the CDM, it is a VM object\n            vmObject = object;\n          }\n        } else if (uidInResponse) {\n          // if object doesn't have any UID, then retrieve the UID from the structure provided\n          uid = _.get(object, uidInResponse);\n          vmObject = _createViewModelObject(uid);\n        } else {\n          // for static objects\n          vmObject = object;\n        }\n\n        if (vmObject && !prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          loadedVMObjects.push(vmObject);\n        }\n\n        if (vmObject && prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          preprendVMObjects.push(vmObject);\n        }\n      });\n\n      if (!_.isEmpty(preprendVMObjects)) {\n        loadedVMObjects = preprendVMObjects.concat(self.loadedVMObjects);\n      } // if moreValuesExist of the LOV results,\n\n\n      if (actualResults.moreValuesExist) {\n        self.moreValuesExist = actualResults.moreValuesExist;\n      }\n    }\n\n    return loadedVMObjects;\n  };\n  /**\n   * @param {ObjectArray} viewModelObjects - The array to set as the currently loaded view model objects\n   *            being managed within this viewModelCollection.\n   */\n\n\n  self.setViewModelObjects = function (viewModelObjects) {\n    self.totalObjectsLoaded = viewModelObjects.length; //create a new reference to trigger update.\n\n    self.loadedVMObjects = [...viewModelObjects];\n  };\n  /**\n   * Returns view model object at specified index.\n   *\n   * @param {Number} index - specified index\n   * @return {Object} Null or object at given index\n   * @memberof ViewModelCollection\n   */\n\n\n  self.getViewModelObject = function (index) {\n    if (self.loadedVMObjects) {\n      return self.loadedVMObjects[index];\n    }\n\n    return null;\n  };\n  /**\n   * Returns view model objects with the specified id (can be uid).\n   *\n   * @param {String} id - specific id of the view model object\n   * @return {Array} Empty or with view model objects found\n   * @memberof ViewModelCollection\n   */\n\n\n  self.getViewModelObjects = function (id) {\n    var returnViewModelObjects = [];\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      if (id === vmo.getId()) {\n        returnViewModelObjects.push(vmo);\n      }\n    });\n\n    return returnViewModelObjects;\n  };\n  /**\n   * Set total objects found\n   *\n   * @param {Number} totalFound - total found\n   * @memberof ViewModelCollection\n   */\n\n\n  self.setTotalObjectsFound = function (totalFound) {\n    self.totalFound = totalFound;\n  };\n  /**\n   * Return total objects found\n   *\n   * @memberof ViewModelCollection\n   *\n   * @returns {Number} Total objects found.\n   */\n\n\n  self.getTotalObjectsFound = function () {\n    return self.totalFound;\n  };\n  /**\n   * Return total unique objects found, unique by id.\n   *\n   * @memberof ViewModelCollection\n   *\n   * @returns {Number} Total unique objects found, unique by id.\n   */\n\n\n  self.getTotalUniqueObjectsLoaded = function () {\n    var uniqueUids = {};\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      if (vmo.getId) {\n        uniqueUids[vmo.getId()] = null;\n      } else if (vmo.uid) {\n        //This is the case of ViewModelTreeNode which doesn't contain getId method as its not a VMO. getId is added when the props are loaded.\n        uniqueUids[vmo.uid] = null;\n      }\n    }); // return totalObjectsLoaded if no ids were found on the objects\n\n\n    return Object.keys(uniqueUids).length || self.totalObjectsLoaded;\n  };\n  /**\n   * Return True/False if there are more objects to be loaded.\n   *\n   * @memberof ViewModelCollection\n   *\n   * @return {Boolean} True/False if there are more objects to be loaded.\n   */\n\n\n  self.hasMoreObjectsToLoad = function () {\n    return self.getTotalUniqueObjectsLoaded() < self.getTotalObjectsFound();\n  };\n  /**\n   * To support infinite scroll, if total found are greater than loaded objects then return\n   * totalObjectsLoaded + 3 else return total objects loaded\n   *\n   * @memberof ViewModelCollection\n   *\n   * @return {Number} Total objects loaded\n   */\n\n\n  self.getVirtualLength = function () {\n    var retValue = self.totalObjectsLoaded;\n\n    if (self.totalObjectsLoaded > 0 && self.hasMoreObjectsToLoad()) {\n      retValue += 3;\n    }\n\n    return retValue;\n  };\n  /**\n   * Returns total objects loaded\n   *\n   * @memberof ViewModelCollection\n   *\n   * @return {Number} total objects loaded\n   */\n\n\n  self.getTotalObjectsLoaded = function () {\n    return self.totalObjectsLoaded;\n  };\n  /**\n   * Reset loaded objects array and total objects loaded counter\n   *\n   * @memberof ViewModelCollection\n   */\n\n\n  self.clear = function () {\n    self.loadedVMObjects = [];\n    self.totalObjectsLoaded = 0;\n    self.totalFound = 0;\n  };\n  /**\n   * Return loaded view model objects\n   *\n   * @memberof ViewModelCollection\n   * @return {Array} loaded view model objects\n   */\n\n\n  self.getLoadedViewModelObjects = function () {\n    return self.loadedVMObjects;\n  };\n  /**\n   * Get all the editable properties\n   *\n   * @return {ViewModelPropertyArray} Collection of editable properties.\n   */\n\n\n  self.getAllEditableProperties = function () {\n    var allEditableProperties = [];\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (prop.isEditable) {\n          allEditableProperties.push(prop);\n        }\n      });\n    });\n\n    return allEditableProperties;\n  };\n  /**\n   * Get all the modified properties\n   *\n   * @return {ViewModelPropertyArray} Collection of modified properties.\n   */\n\n\n  self.getAllModifiedProperties = function () {\n    var allModifiedProperties = [];\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (uwPropertySvc.isModified(prop)) {\n          allModifiedProperties.push({\n            property: prop,\n            viewModelObject: vmo\n          });\n        }\n      });\n    });\n\n    return allModifiedProperties;\n  };\n  /**\n   * Check editability on all properties\n   */\n\n\n  self.checkEditableOnProperties = function () {\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      viewModelObjectSvc.updateVMOProperties(vmo);\n    });\n  };\n  /**\n   * Reset all 'editable' status properties from the underlying object.\n   */\n\n\n  self.clearEditiableStates = function () {\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      vmo.clearEditiableStates(true);\n    });\n    /** revisitme billa\n     * HINT: We don't need this now\n     * uwPropertySvc.triggerDigestCycle();\n     */\n\n  };\n  /**\n   * Returns 1st ViewModelObject index in the collection whose 'id' (or 'uid') matches specified value.\n   *\n   * @memberof ViewModelCollection\n   *\n   * @param {String} idToFind - The ID (or UID) of the ViewModelObject to find.\n   * @return {Number} Index in the ViewModelSelection of the ViewModelObject found (or -1 if not found).\n   */\n\n\n  self.findViewModelObjectById = function (idToFind) {\n    for (var ndx = 0; ndx < self.loadedVMObjects.length; ndx++) {\n      var vmo = self.loadedVMObjects[ndx];\n\n      if (vmo.alternateID && vmo.alternateID === idToFind) {\n        return ndx;\n      }\n\n      if (vmo.id && vmo.id === idToFind) {\n        return ndx;\n      }\n\n      if (vmo.uid && vmo.uid === idToFind) {\n        return ndx;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * Remove the passed in objects (array of viewModelTreeNodes)\n   *\n   * @param {Array} objectsToRemove an array of viewModelTreeNodes keyed by uid\n   */\n\n\n  self.removeLoadedObjects = function (objectsToRemove) {\n    if (objectsToRemove && objectsToRemove.length > 0) {\n      _.remove(self.loadedVMObjects, function (treeNode) {\n        var i = 0;\n        var doRemove = false;\n\n        while (i < objectsToRemove.length && !doRemove) {\n          if (treeNode.uid === objectsToRemove[i].uid) {\n            doRemove = true;\n          }\n\n          i++;\n        }\n\n        return doRemove;\n      });\n    }\n  };\n  /**\n   * Free up all resources held/managed by this object.\n   * <P>\n   * Note: After this function, no API call should be considered valid. This function is intended to be\n   * called when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a\n   * GC event), any objects managed by this class may be considered a 'memory leak'.\n   */\n\n\n  self.destroy = function () {\n    self._isDestroyed = true;\n    _debug_currentCount.viewModelCollection--;\n\n    if (_debug_logMiscModelLifeCycle) {\n      logger.info('Destroying ViewModelCollection: ' + self._modelId + ' # Remaining:' + _debug_currentCount.viewModelCollection);\n    }\n\n    _.forEach(_eventBusSubDefs, function (subDef) {\n      eventBus.unsubscribe(subDef);\n    });\n\n    _eventBusSubDefs = null;\n    self.clear();\n  };\n  /**\n   * ---------------------------------------------------------------------------<BR>\n   * Property & Function definition complete....Finish initialization. <BR>\n   * ---------------------------------------------------------------------------<BR>\n   */\n\n\n  self._modelId = _debug_nextId.viewModelCollection++;\n  _debug_currentCount.viewModelCollection++;\n\n  if (_debug_logMiscModelLifeCycle) {\n    logger.info('Created ViewModelCollection: ' + self._modelId);\n  }\n\n  _eventBusSubDefs.push(eventBus.subscribe('cdm.new', function (event) {\n    _eventDataNew.newObjects = event.newObjects;\n    eventBus.publish(_eventTopicNew, _eventDataNew);\n  }));\n\n  _eventBusSubDefs.push(eventBus.subscribe('cdm.modified', function (event) {\n    _eventDataModified.modifiedObjects = event.modifiedObjects;\n    eventBus.publish(_eventTopicModified, _eventDataModified);\n    /**\n     * Post process cdm event to update any of the reported objects that may be loaded in this\n     * viewModelCollection.\n     */\n\n    viewModelObjectSvc.updateViewModelObjectCollection(self.loadedVMObjects, event.modifiedObjects);\n  })); // Listen for CDM Deleted events (will be unregistered onDestroy)\n\n\n  _eventBusSubDefs.push(eventBus.subscribe('cdm.deleted', function (event) {\n    /**\n     * Post process cdm deleted event to remove any deleted objects from viewModelCollection collection\n     * of loadedVMObjects and then set the totalObjectsLoaded count.\n     */\n    let updateRequired = false;\n\n    if (event.deletedObjectUids && event.deletedObjectUids.length > 0) {\n      _.forEach(event.deletedObjectUids, function (deletedUid) {\n        // remove the found object by uid from the collection of loadedVMObjects\n        _.remove(self.loadedVMObjects, function (vmo) {\n          if (vmo.uid === deletedUid) {\n            updateRequired = true;\n            return true;\n          }\n        });\n      });\n\n      if (updateRequired) {\n        self.update(self.loadedVMObjects, self.loadedVMObjects.length);\n      }\n    }\n  }));\n};\n\n_c2 = ViewModelCollection;\n_c = ViewModelCollection;\n_debug_logMiscModelLifeCycle = browserUtils.getUrlAttributes().logMiscModelLifeCycle === '';\nvar exports = {};\n/**\n * Create new instance of view model collection\n *\n * @param {String} name - name of the ViewModelCollection\n * @return {ViewModelCollection} Returns view model collection object\n */\n\nexport let createViewModelCollection = function (name) {\n  return new ViewModelCollection(name);\n};\nexports = {\n  createViewModelCollection\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewModelCollection\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ViewModelCollection\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/viewModelCollectionFactory.js"],"names":["_debug_nextId","viewModelCollection","_debug_currentCount","_debug_logMiscModelLifeCycle","viewModelObjectSvc","ViewModelCollection","self","_eventBusSubDefs","_eventTopicNew","_eventTopicModified","_eventDataNew","vmc","newObjects","_eventDataModified","modifiedObjects","actualResults","results","_","preprendVMObjects","vmObject","uid","object","modelObj","cdm","_createViewModelObject","preSelection","loadedVMObjects","viewModelObjects","returnViewModelObjects","id","vmo","uniqueUids","Object","retValue","allEditableProperties","prop","allModifiedProperties","uwPropertySvc","property","viewModelObject","ndx","objectsToRemove","i","doRemove","treeNode","logger","eventBus","event","updateRequired","browserUtils","exports","createViewModelCollection"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,GAAA,MAAA,4BAAA;AACA,OAAA,kBAAA,MAAA,2BAAA;AACA,OAAA,aAAA,MAAA,sBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,YAAA,MAAA,iBAAA,C,CAEA;;AAEA;AACA;AACA;;AACA,IAAIA,aAAa,GAAG;EAChBC,mBAAmB,EAAE;AADL,CAApB;AAIA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG;EACtBD,mBAAmB,EAAE;AADC,CAA1B;AAIA;AACA;AACA;AACA;;AACA,IAAIE,4BAA4B,GAAhC,KAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAA,sBAAA,CAAA,GAAA,EAAuC;EACnC,IAAA,GAAA,EAAU;IACN,OAAOC,kBAAkB,CAAlBA,qBAAAA,CAAAA,GAAAA,EAAP,MAAOA,CAAP;EACH;;EAED,OAAA,IAAA;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,mBAAmB,GAAG,UAAA,IAAA,EAAiB;EACvC,IAAIC,IAAI,GAAR,IAAA;EAEA;AACJ;AACA;;EACIA,IAAI,CAAJA,IAAAA,GAAAA,IAAAA;EAEA;AACJ;AACA;;EACIA,IAAI,CAAJA,eAAAA,GAAAA,EAAAA;EAEA;AACJ;AACA;AACA;;EACIA,IAAI,CAAJA,kBAAAA,GAAAA,CAAAA;EAEA;AACJ;AACA;;EACIA,IAAI,CAAJA,UAAAA,GAAAA,CAAAA;EAEA;AACJ;AACA;;EACI,IAAIC,gBAAgB,GAApB,EAAA;EAEA;AACJ;AACA;;EACI,IAAIC,cAAc,GAAG,aAAaF,IAAI,CAAtC,IAAA;EAEA;AACJ;AACA;;;EACI,IAAIG,mBAAmB,GAAG,kBAAkBH,IAAI,CAAhD,IAAA;EAEA;AACJ;AACA;;;EACI,IAAII,aAAa,GAAG;IAChBC,GAAG,EADa,IAAA;IAEhBC,UAAU,EAAE;EAFI,CAApB;EAKA;AACJ;AACA;;EACI,IAAIC,kBAAkB,GAAG;IACrBF,GAAG,EADkB,IAAA;IAErBG,eAAe,EAAE;EAFI,CAAzB;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIR,IAAI,CAAJA,kBAAAA,GAA0B,UAAA,OAAA,EAAA,aAAA,EAAA,YAAA,EAAA,OAAA,EAA0D;IAChF,IAAIS,aAAa,GAAGC,OAAO,CAAPA,OAAAA,IAApB,OAAA;;IAEA,IAAI,CAACC,CAAC,CAADA,OAAAA,CAAL,aAAKA,CAAL,EAAkC;MAC9B,IAAIC,iBAAiB,GAArB,EAAA;;MAEAD,CAAC,CAADA,OAAAA,CAAAA,aAAAA,EAA0B,UAAA,MAAA,EAAmB;QACzC,IAAIE,QAAQ,GAAZ,IAAA;QACA,IAAIC,GAAG,GAAP,IAAA;;QAEA,IAAIJ,OAAO,CAAX,OAAA,EAAsB;UAClBI,GAAG,GAAGC,MAAM,CAAZD,GAAAA;UACAD,QAAQ,GAAGf,kBAAkB,CAAlBA,qBAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAXe,MAAWf,CAAXe;QAFJ,CAAA,MAGO,IAAIE,MAAM,CAAV,GAAA,EAAiB;UAAE;UACtBD,GAAG,GAAGC,MAAM,CAAZD,GAAAA;UAEA,IAAIE,QAAQ,GAAGC,GAAG,CAAHA,SAAAA,CAHK,GAGLA,CAAf,CAHoB,CAKpB;;UACA,IAAA,QAAA,EAAe;YACX,IAAInB,kBAAkB,CAAlBA,iBAAAA,CAAAA,MAAAA,KAAkDiB,MAAM,CAA5D,UAAA,EAA0E;cACtE;cACAF,QAAQ,GAARA,MAAAA;YAFJ,CAAA,MAGO;cACH;cACA,IAAIG,QAAQ,CAARA,KAAAA,IAAkBA,QAAQ,CAARA,KAAAA,CAAtB,UAAA,EAAkD;gBAC9CF,GAAG,GAAGE,QAAQ,CAARA,KAAAA,CAAAA,UAAAA,CAAAA,QAAAA,CAANF,CAAME,CAANF;cACH;;cAEDD,QAAQ,GAAGK,sBAAsB,CAAjCL,GAAiC,CAAjCA;YACH;UAXL,CAAA,MAYO;YACH;YACAA,QAAQ,GAARA,MAAAA;UACH;QArBE,CAAA,MAsBA,IAAA,aAAA,EAAoB;UAAE;UACzBC,GAAG,GAAGH,CAAC,CAADA,GAAAA,CAAAA,MAAAA,EAANG,aAAMH,CAANG;UAEAD,QAAQ,GAAGK,sBAAsB,CAAjCL,GAAiC,CAAjCA;QAHG,CAAA,MAIA;UAAE;UACLA,QAAQ,GAARA,MAAAA;QACH;;QAED,IAAIA,QAAQ,IAAI,CAAhB,OAAA,EAA2B;UACvB,IAAIM,YAAY,IAAI,CAACR,CAAC,CAADA,WAAAA,CAAeI,MAAM,CAA1C,QAAqBJ,CAArB,EAAwD;YACpDE,QAAQ,CAARA,QAAAA,GAAoBE,MAAM,CAA1BF,QAAAA;UACH;;UAEDb,IAAI,CAAJA,eAAAA,CAAAA,IAAAA,CAAAA,QAAAA;QACH;;QAED,IAAIa,QAAQ,IAAZ,OAAA,EAA0B;UACtB,IAAIM,YAAY,IAAI,CAACR,CAAC,CAADA,WAAAA,CAAeI,MAAM,CAA1C,QAAqBJ,CAArB,EAAwD;YACpDE,QAAQ,CAARA,QAAAA,GAAoBE,MAAM,CAA1BF,QAAAA;UACH;;UAEDD,iBAAiB,CAAjBA,IAAAA,CAAAA,QAAAA;QAlDqC,CAAA,CAqDzC;;;QACAZ,IAAI,CAAJA,kBAAAA;MAtDJW,CAAAA;;MAyDA,IAAI,CAACA,CAAC,CAADA,OAAAA,CAAL,iBAAKA,CAAL,EAAsC;QAClCX,IAAI,CAAJA,eAAAA,GAAuBY,iBAAiB,CAAjBA,MAAAA,CAA0BZ,IAAI,CAArDA,eAAuBY,CAAvBZ;MA7D0B,CAAA,CAgE9B;;;MACA,IAAIS,aAAa,CAAjB,eAAA,EAAoC;QAChCT,IAAI,CAAJA,eAAAA,GAAuBS,aAAa,CAApCT,eAAAA;MACH;IACJ;EAvELA,CAAAA;;EA0EAA,IAAI,CAAJA,kBAAAA,GAA0B,UAAA,OAAA,EAAA,aAAA,EAAA,YAAA,EAAA,OAAA,EAA0D;IAChF,IAAIS,aAAa,GAAGC,OAAO,CAAPA,OAAAA,IAApB,OAAA;IACA,IAAIU,eAAe,GAAnB,EAAA;;IACA,IAAI,CAACT,CAAC,CAADA,OAAAA,CAAL,aAAKA,CAAL,EAAkC;MAC9B,IAAIC,iBAAiB,GAArB,EAAA;;MAEAD,CAAC,CAADA,OAAAA,CAAAA,aAAAA,EAA0B,UAAA,MAAA,EAAmB;QACzC,IAAIE,QAAQ,GAAZ,IAAA;QACA,IAAIC,GAAG,GAAP,IAAA;;QAEA,IAAIJ,OAAO,CAAX,OAAA,EAAsB;UAClBI,GAAG,GAAGC,MAAM,CAAZD,GAAAA;UACAD,QAAQ,GAAGf,kBAAkB,CAAlBA,qBAAAA,CAAAA,GAAAA,EAAAA,MAAAA,EAAAA,IAAAA,EAAXe,MAAWf,CAAXe;QAFJ,CAAA,MAGO,IAAIE,MAAM,CAAV,GAAA,EAAiB;UAAE;UACtBD,GAAG,GAAGC,MAAM,CAAZD,GAAAA;UAEA,IAAIE,QAAQ,GAAGC,GAAG,CAAHA,SAAAA,CAHK,GAGLA,CAAf,CAHoB,CAKpB;;UACA,IAAA,QAAA,EAAe;YACX,IAAInB,kBAAkB,CAAlBA,iBAAAA,CAAAA,MAAAA,KAAkDiB,MAAM,CAA5D,UAAA,EAA0E;cACtE;cACAF,QAAQ,GAARA,MAAAA;YAFJ,CAAA,MAGO;cACH;cACA,IAAIG,QAAQ,CAARA,KAAAA,IAAkBA,QAAQ,CAARA,KAAAA,CAAtB,UAAA,EAAkD;gBAC9CF,GAAG,GAAGE,QAAQ,CAARA,KAAAA,CAAAA,UAAAA,CAAAA,QAAAA,CAANF,CAAME,CAANF;cACH;;cAEDD,QAAQ,GAAGK,sBAAsB,CAAjCL,GAAiC,CAAjCA;YACH;UAXL,CAAA,MAYO;YACH;YACAA,QAAQ,GAARA,MAAAA;UACH;QArBE,CAAA,MAsBA,IAAA,aAAA,EAAoB;UAAE;UACzBC,GAAG,GAAGH,CAAC,CAADA,GAAAA,CAAAA,MAAAA,EAANG,aAAMH,CAANG;UAEAD,QAAQ,GAAGK,sBAAsB,CAAjCL,GAAiC,CAAjCA;QAHG,CAAA,MAIA;UAAE;UACLA,QAAQ,GAARA,MAAAA;QACH;;QAED,IAAIA,QAAQ,IAAI,CAAhB,OAAA,EAA2B;UACvB,IAAIM,YAAY,IAAI,CAACR,CAAC,CAADA,WAAAA,CAAeI,MAAM,CAA1C,QAAqBJ,CAArB,EAAwD;YACpDE,QAAQ,CAARA,QAAAA,GAAoBE,MAAM,CAA1BF,QAAAA;UACH;;UAEDO,eAAe,CAAfA,IAAAA,CAAAA,QAAAA;QACH;;QAED,IAAIP,QAAQ,IAAZ,OAAA,EAA0B;UACtB,IAAIM,YAAY,IAAI,CAACR,CAAC,CAADA,WAAAA,CAAeI,MAAM,CAA1C,QAAqBJ,CAArB,EAAwD;YACpDE,QAAQ,CAARA,QAAAA,GAAoBE,MAAM,CAA1BF,QAAAA;UACH;;UAEDD,iBAAiB,CAAjBA,IAAAA,CAAAA,QAAAA;QACH;MAnDLD,CAAAA;;MAsDA,IAAI,CAACA,CAAC,CAADA,OAAAA,CAAL,iBAAKA,CAAL,EAAsC;QAClCS,eAAe,GAAGR,iBAAiB,CAAjBA,MAAAA,CAA0BZ,IAAI,CAAhDoB,eAAkBR,CAAlBQ;MA1D0B,CAAA,CA4D9B;;;MACA,IAAIX,aAAa,CAAjB,eAAA,EAAoC;QAChCT,IAAI,CAAJA,eAAAA,GAAuBS,aAAa,CAApCT,eAAAA;MACH;IACJ;;IACD,OAAA,eAAA;EApEJA,CAAAA;EAuEA;AACJ;AACA;AACA;;;EACIA,IAAI,CAAJA,mBAAAA,GAA2B,UAAA,gBAAA,EAA6B;IACpDA,IAAI,CAAJA,kBAAAA,GAA0BqB,gBAAgB,CADU,MACpDrB,CADoD,CAEpD;;IACAA,IAAI,CAAJA,eAAAA,GAAuB,CAAE,GAAzBA,gBAAuB,CAAvBA;EAHJA,CAAAA;EAMA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,kBAAAA,GAA0B,UAAA,KAAA,EAAkB;IACxC,IAAIA,IAAI,CAAR,eAAA,EAA2B;MACvB,OAAOA,IAAI,CAAJA,eAAAA,CAAP,KAAOA,CAAP;IACH;;IACD,OAAA,IAAA;EAJJA,CAAAA;EAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,mBAAAA,GAA2B,UAAA,EAAA,EAAe;IACtC,IAAIsB,sBAAsB,GAA1B,EAAA;;IAEAX,CAAC,CAADA,OAAAA,CAAWX,IAAI,CAAfW,eAAAA,EAAiC,UAAA,GAAA,EAAgB;MAC7C,IAAIY,EAAE,KAAKC,GAAG,CAAd,KAAWA,EAAX,EAAyB;QACrBF,sBAAsB,CAAtBA,IAAAA,CAAAA,GAAAA;MACH;IAHLX,CAAAA;;IAMA,OAAA,sBAAA;EATJX,CAAAA;EAYA;AACJ;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,oBAAAA,GAA4B,UAAA,UAAA,EAAuB;IAC/CA,IAAI,CAAJA,UAAAA,GAAAA,UAAAA;EADJA,CAAAA;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,oBAAAA,GAA4B,YAAW;IACnC,OAAOA,IAAI,CAAX,UAAA;EADJA,CAAAA;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,2BAAAA,GAAmC,YAAW;IAC1C,IAAIyB,UAAU,GAAd,EAAA;;IAEAd,CAAC,CAADA,OAAAA,CAAWX,IAAI,CAAfW,eAAAA,EAAiC,UAAA,GAAA,EAAgB;MAC7C,IAAIa,GAAG,CAAP,KAAA,EAAgB;QACZC,UAAU,CAAED,GAAG,CAAfC,KAAYD,EAAF,CAAVC,GAAAA,IAAAA;MADJ,CAAA,MAEO,IAAID,GAAG,CAAP,GAAA,EAAc;QAAE;QACnBC,UAAU,CAAED,GAAG,CAAfC,GAAU,CAAVA,GAAAA,IAAAA;MACH;IARqC,CAG1Cd,EAH0C,CAU1C;;;IACA,OAAOe,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAAA,MAAAA,IAAoC1B,IAAI,CAA/C,kBAAA;EAXJA,CAAAA;EAcA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,oBAAAA,GAA4B,YAAW;IACnC,OAAOA,IAAI,CAAJA,2BAAAA,KAAqCA,IAAI,CAAhD,oBAA4CA,EAA5C;EADJA,CAAAA;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,gBAAAA,GAAwB,YAAW;IAC/B,IAAI2B,QAAQ,GAAG3B,IAAI,CAAnB,kBAAA;;IAEA,IAAIA,IAAI,CAAJA,kBAAAA,GAAAA,CAAAA,IAA+BA,IAAI,CAAvC,oBAAmCA,EAAnC,EAAiE;MAC7D2B,QAAQ,IAARA,CAAAA;IACH;;IAED,OAAA,QAAA;EAPJ3B,CAAAA;EAUA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,qBAAAA,GAA6B,YAAW;IACpC,OAAOA,IAAI,CAAX,kBAAA;EADJA,CAAAA;EAIA;AACJ;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,KAAAA,GAAa,YAAW;IACpBA,IAAI,CAAJA,eAAAA,GAAAA,EAAAA;IACAA,IAAI,CAAJA,kBAAAA,GAAAA,CAAAA;IACAA,IAAI,CAAJA,UAAAA,GAAAA,CAAAA;EAHJA,CAAAA;EAMA;AACJ;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,yBAAAA,GAAiC,YAAW;IACxC,OAAOA,IAAI,CAAX,eAAA;EADJA,CAAAA;EAIA;AACJ;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,wBAAAA,GAAgC,YAAW;IACvC,IAAI4B,qBAAqB,GAAzB,EAAA;;IAEAjB,CAAC,CAADA,OAAAA,CAAWX,IAAI,CAAfW,eAAAA,EAAiC,UAAA,GAAA,EAAgB;MAC7CA,CAAC,CAADA,OAAAA,CAAWa,GAAG,CAAdb,KAAAA,EAAsB,UAAA,IAAA,EAAiB;QACnC,IAAIkB,IAAI,CAAR,UAAA,EAAsB;UAClBD,qBAAqB,CAArBA,IAAAA,CAAAA,IAAAA;QACH;MAHLjB,CAAAA;IADJA,CAAAA;;IAQA,OAAA,qBAAA;EAXJX,CAAAA;EAcA;AACJ;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,wBAAAA,GAAgC,YAAW;IACvC,IAAI8B,qBAAqB,GAAzB,EAAA;;IAEAnB,CAAC,CAADA,OAAAA,CAAWX,IAAI,CAAfW,eAAAA,EAAiC,UAAA,GAAA,EAAgB;MAC7CA,CAAC,CAADA,OAAAA,CAAWa,GAAG,CAAdb,KAAAA,EAAsB,UAAA,IAAA,EAAiB;QACnC,IAAIoB,aAAa,CAAbA,UAAAA,CAAJ,IAAIA,CAAJ,EAAuC;UACnCD,qBAAqB,CAArBA,IAAAA,CAA4B;YACxBE,QAAQ,EADgB,IAAA;YAExBC,eAAe,EAAET;UAFO,CAA5BM;QAIH;MANLnB,CAAAA;IADJA,CAAAA;;IAWA,OAAA,qBAAA;EAdJX,CAAAA;EAiBA;AACJ;AACA;;;EACIA,IAAI,CAAJA,yBAAAA,GAAiC,YAAW;IACxCW,CAAC,CAADA,OAAAA,CAAWX,IAAI,CAAfW,eAAAA,EAAiC,UAAA,GAAA,EAAgB;MAC7Cb,kBAAkB,CAAlBA,mBAAAA,CAAAA,GAAAA;IADJa,CAAAA;EADJX,CAAAA;EAMA;AACJ;AACA;;;EACIA,IAAI,CAAJA,oBAAAA,GAA4B,YAAW;IACnCW,CAAC,CAADA,OAAAA,CAAWX,IAAI,CAAfW,eAAAA,EAAiC,UAAA,GAAA,EAAgB;MAC7Ca,GAAG,CAAHA,oBAAAA,CAAAA,IAAAA;IADJb,CAAAA;IAIA;AACR;AACA;AACA;;EARIX,CAAAA;EAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,uBAAAA,GAA+B,UAAA,QAAA,EAAqB;IAChD,KAAK,IAAIkC,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAGlC,IAAI,CAAJA,eAAAA,CAAxB,MAAA,EAAqDkC,GAArD,EAAA,EAA6D;MACzD,IAAIV,GAAG,GAAGxB,IAAI,CAAJA,eAAAA,CAAV,GAAUA,CAAV;;MAEA,IAAIwB,GAAG,CAAHA,WAAAA,IAAmBA,GAAG,CAAHA,WAAAA,KAAvB,QAAA,EAAsD;QAClD,OAAA,GAAA;MACH;;MAED,IAAIA,GAAG,CAAHA,EAAAA,IAAUA,GAAG,CAAHA,EAAAA,KAAd,QAAA,EAAoC;QAChC,OAAA,GAAA;MACH;;MAED,IAAIA,GAAG,CAAHA,GAAAA,IAAWA,GAAG,CAAHA,GAAAA,KAAf,QAAA,EAAsC;QAClC,OAAA,GAAA;MACH;IACJ;;IAED,OAAO,CAAP,CAAA;EAjBJxB,CAAAA;EAoBA;AACJ;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,mBAAAA,GAA2B,UAAA,eAAA,EAA4B;IACnD,IAAImC,eAAe,IAAIA,eAAe,CAAfA,MAAAA,GAAvB,CAAA,EAAoD;MAChDxB,CAAC,CAADA,MAAAA,CAAUX,IAAI,CAAdW,eAAAA,EAAgC,UAAA,QAAA,EAAqB;QACjD,IAAIyB,CAAC,GAAL,CAAA;QACA,IAAIC,QAAQ,GAAZ,KAAA;;QAEA,OAAOD,CAAC,GAAGD,eAAe,CAAnBC,MAAAA,IAA8B,CAArC,QAAA,EAAiD;UAC7C,IAAIE,QAAQ,CAARA,GAAAA,KAAiBH,eAAe,CAAfA,CAAe,CAAfA,CAArB,GAAA,EAAgD;YAC5CE,QAAQ,GAARA,IAAAA;UACH;;UACDD,CAAC;QACJ;;QACD,OAAA,QAAA;MAVJzB,CAAAA;IAYH;EAdLX,CAAAA;EAiBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,IAAI,CAAJA,OAAAA,GAAe,YAAW;IACtBA,IAAI,CAAJA,YAAAA,GAAAA,IAAAA;IAEAJ,mBAAmB,CAAnBA,mBAAAA;;IAEA,IAAA,4BAAA,EAAmC;MAC/B2C,MAAM,CAANA,IAAAA,CAAa,qCAAqCvC,IAAI,CAAzC,QAAA,GAAA,eAAA,GACTJ,mBAAmB,CADvB2C,mBAAAA;IAEH;;IAED5B,CAAC,CAADA,OAAAA,CAAAA,gBAAAA,EAA6B,UAAA,MAAA,EAAmB;MAC5C6B,QAAQ,CAARA,WAAAA,CAAAA,MAAAA;IADJ7B,CAAAA;;IAIAV,gBAAgB,GAAhBA,IAAAA;IAEAD,IAAI,CAAJA,KAAAA;EAhBJA,CAAAA;EAmBA;AACJ;AACA;AACA;AACA;;;EAEIA,IAAI,CAAJA,QAAAA,GAAgBN,aAAa,CAA7BM,mBAAgBN,EAAhBM;EAEAJ,mBAAmB,CAAnBA,mBAAAA;;EAEA,IAAA,4BAAA,EAAmC;IAC/B2C,MAAM,CAANA,IAAAA,CAAa,kCAAkCvC,IAAI,CAAnDuC,QAAAA;EACH;;EAEDtC,gBAAgB,CAAhBA,IAAAA,CAAuB,QAAQ,CAAR,SAAA,CAAA,SAAA,EAA+B,UAAA,KAAA,EAAkB;IACpEG,aAAa,CAAbA,UAAAA,GAA2BqC,KAAK,CAAhCrC,UAAAA;IACAoC,QAAQ,CAARA,OAAAA,CAAAA,cAAAA,EAAAA,aAAAA;EAFJvC,CAAuB,CAAvBA;;EAKAA,gBAAgB,CAAhBA,IAAAA,CAAuB,QAAQ,CAAR,SAAA,CAAA,cAAA,EAAoC,UAAA,KAAA,EAAkB;IACzEM,kBAAkB,CAAlBA,eAAAA,GAAqCkC,KAAK,CAA1ClC,eAAAA;IAEAiC,QAAQ,CAARA,OAAAA,CAAAA,mBAAAA,EAAAA,kBAAAA;IAEA;AACR;AACA;AACA;;IACQ1C,kBAAkB,CAAlBA,+BAAAA,CAAoDE,IAAI,CAAxDF,eAAAA,EAA0E2C,KAAK,CAA/E3C,eAAAA;EAzhBmC,CAghBhB,CAAvBG,EAhhBuC,CA4hBvC;;;EACAA,gBAAgB,CAAhBA,IAAAA,CAAuB,QAAQ,CAAR,SAAA,CAAA,aAAA,EAAmC,UAAA,KAAA,EAAkB;IACxE;AACR;AACA;AACA;IACQ,IAAIyC,cAAc,GAAlB,KAAA;;IACA,IAAID,KAAK,CAALA,iBAAAA,IAA2BA,KAAK,CAALA,iBAAAA,CAAAA,MAAAA,GAA/B,CAAA,EAAoE;MAChE9B,CAAC,CAADA,OAAAA,CAAW8B,KAAK,CAAhB9B,iBAAAA,EAAoC,UAAA,UAAA,EAAuB;QACvD;QACAA,CAAC,CAADA,MAAAA,CAAUX,IAAI,CAAdW,eAAAA,EAAgC,UAAA,GAAA,EAAgB;UAC5C,IAAIa,GAAG,CAAHA,GAAAA,KAAJ,UAAA,EAA6B;YACzBkB,cAAc,GAAdA,IAAAA;YACA,OAAA,IAAA;UACH;QAJL/B,CAAAA;MAFJA,CAAAA;;MAUA,IAAA,cAAA,EAAqB;QACjBX,IAAI,CAAJA,MAAAA,CAAaA,IAAI,CAAjBA,eAAAA,EAAmCA,IAAI,CAAJA,eAAAA,CAAnCA,MAAAA;MACH;IACJ;EApBLC,CAAuB,CAAvBA;AA7hBJ,CAAA;;MAAIF,mB;KAAAA,mB;AAqjBJF,4BAA4B,GAAG8C,YAAY,CAAZA,gBAAAA,GAAAA,qBAAAA,KAA/B9C,EAAAA;AAEA,IAAI+C,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,yBAAyB,GAAG,UAAA,IAAA,EAAiB;EACpD,OAAO,IAAA,mBAAA,CAAP,IAAO,CAAP;AADG,CAAA;AAIPD,OAAO,GAAG;EACNC;AADM,CAAVD;AAGA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * View model collection factory\n * This factory creates ViewModelCollection instances which maintain the loaded ViewModelObjects and exposes APIs to\n * access the information of collection.\n *\n * @module js/viewModelCollectionFactory\n */\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport browserUtils from 'js/browserUtils';\n\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * {Number} The debug ID of the 'next' instance of a certain class.\n */\nvar _debug_nextId = {\n    viewModelCollection: 0\n};\n\n/**\n * {Number} The current number of 'active' instances of a certain class.\n */\nvar _debug_currentCount = {\n    viewModelCollection: 0\n};\n\n/**\n * {Boolean} TRUE if create/destroy events should be logged for all non-dataProvider objects from this\n * service.\n */\nvar _debug_logMiscModelLifeCycle = false;\n\n/**\n * Based on the given uid this function retrieves the IModelObject instance from the ClientDataModel and\n * creates a new instance of a ViewModelObject based on the model object passed in.\n *\n * @param {String} uid - ID of the new ViewModelObject.\n *\n * @return {ViewModelObject} New ViewModelObject (or NULL if no match was found in the ClientDataModel).\n */\nfunction _createViewModelObject( uid ) {\n    if( uid ) {\n        return viewModelObjectSvc.createViewModelObject( uid, 'EDIT' );\n    }\n\n    return null;\n}\n\n/**\n * Class used to maintain data for various DataProviders.\n *\n * @param {String} name of the viewModelCollection\n * @constructor ViewModelCollection\n */\nvar ViewModelCollection = function( name ) {\n    var self = this;\n\n    /**\n     * Name of this view model collection (usually the same as the dataprovider name)\n     */\n    self.name = name;\n\n    /**\n     * Array of ViewModelObjects currently being managed in this 'virtual' collection.\n     */\n    self.loadedVMObjects = [];\n\n    /**\n     * The number of ViewModelObjects currently in this 'virtual' collection (should be same as length of\n     * 'loadedVMObjects').\n     */\n    self.totalObjectsLoaded = 0;\n\n    /**\n     * The number of ViewModelObjects possible in this 'virtual' collection.\n     */\n    self.totalFound = 0;\n\n    /**\n     * {SubDefArray} Collection of eventBus subscription definitions.\n     */\n    var _eventBusSubDefs = [];\n\n    /**\n     * {String} Topic to publish for each 'cdm.new' event.\n     */\n    var _eventTopicNew = 'vmc.new.' + self.name;\n\n    /**\n     * {String} Topic to publish for each 'cdm.modified.' event.\n     */\n    var _eventTopicModified = 'vmc.modified.' + self.name;\n\n    /**\n     * {Object} Cached (shared) data object to publish for 'vmc.new.xxx' events.\n     */\n    var _eventDataNew = {\n        vmc: self,\n        newObjects: null\n    };\n\n    /**\n     * {Object} Cached (shared) data object to publish for 'vmc.modified.xxx' events.\n     */\n    var _eventDataModified = {\n        vmc: self,\n        modifiedObjects: null\n    };\n\n    /**\n     * Updates the loaded objects array and total objects loaded counter.\n     *\n     * @param {Array} results - Array of model objects or objects\n     *\n     * @param {String} uidInResponse - if response object doesn't have uid at top level, then this attribute\n     *            should specify the level where uid is available. Example:\n     *\n     * <pre>\n     *    responseObject: {\n     *        test: {\n     *            uid: 'AAAAAAAA'\n     *        }\n     *    },\n     *    uidInResponse: 'test.uid'\n     * </pre>\n     *\n     * @param {Boolean} preSelection - if the objects should inherit 'selected' status\n     *\n     * @param {Boolean} prepend - Insert Before current start index. (optional)\n     *\n     * @memberof ViewModelCollection\n     */\n    self.updateModelObjects = function( results, uidInResponse, preSelection, prepend ) {\n        var actualResults = results.objects || results;\n\n        if( !_.isEmpty( actualResults ) ) {\n            var preprendVMObjects = [];\n\n            _.forEach( actualResults, function( object ) {\n                var vmObject = null;\n                var uid = null;\n\n                if( results.objects ) {\n                    uid = object.uid;\n                    vmObject = viewModelObjectSvc.createViewModelObject( uid, 'EDIT', null, object );\n                } else if( object.uid ) { // Retrieve object's UID\n                    uid = object.uid;\n\n                    var modelObj = cdm.getObject( uid );\n\n                    // If object is there in the CDM, convert it to VM object\n                    if( modelObj ) {\n                        if( viewModelObjectSvc.isViewModelObject( object ) || object.dataMapper ) {\n                            // if VMObject is passed, use it directly instead of creating again\n                            vmObject = object;\n                        } else {\n                            // Get underlying target object's UID if 'awp0Target' property exists\n                            if( modelObj.props && modelObj.props.awp0Target ) {\n                                uid = modelObj.props.awp0Target.dbValues[ 0 ];\n                            }\n\n                            vmObject = _createViewModelObject( uid );\n                        }\n                    } else {\n                        // If object is not there in the CDM, it is a VM object\n                        vmObject = object;\n                    }\n                } else if( uidInResponse ) { // if object doesn't have any UID, then retrieve the UID from the structure provided\n                    uid = _.get( object, uidInResponse );\n\n                    vmObject = _createViewModelObject( uid );\n                } else { // for static objects\n                    vmObject = object;\n                }\n\n                if( vmObject && !prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    self.loadedVMObjects.push( vmObject );\n                }\n\n                if( vmObject && prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    preprendVMObjects.push( vmObject );\n                }\n\n                // update total count for loaded objects\n                self.totalObjectsLoaded++;\n            } );\n\n            if( !_.isEmpty( preprendVMObjects ) ) {\n                self.loadedVMObjects = preprendVMObjects.concat( self.loadedVMObjects );\n            }\n\n            // if moreValuesExist of the LOV results,\n            if( actualResults.moreValuesExist ) {\n                self.moreValuesExist = actualResults.moreValuesExist;\n            }\n        }\n    };\n\n    self.createModelObjects = function( results, uidInResponse, preSelection, prepend ) {\n        let actualResults = results.objects || results;\n        let loadedVMObjects = [];\n        if( !_.isEmpty( actualResults ) ) {\n            var preprendVMObjects = [];\n\n            _.forEach( actualResults, function( object ) {\n                let vmObject = null;\n                let uid = null;\n\n                if( results.objects ) {\n                    uid = object.uid;\n                    vmObject = viewModelObjectSvc.createViewModelObject( uid, 'EDIT', null, object );\n                } else if( object.uid ) { // Retrieve object's UID\n                    uid = object.uid;\n\n                    let modelObj = cdm.getObject( uid );\n\n                    // If object is there in the CDM, convert it to VM object\n                    if( modelObj ) {\n                        if( viewModelObjectSvc.isViewModelObject( object ) || object.dataMapper ) {\n                            // if VMObject is passed, use it directly instead of creating again\n                            vmObject = object;\n                        } else {\n                            // Get underlying target object's UID if 'awp0Target' property exists\n                            if( modelObj.props && modelObj.props.awp0Target ) {\n                                uid = modelObj.props.awp0Target.dbValues[ 0 ];\n                            }\n\n                            vmObject = _createViewModelObject( uid );\n                        }\n                    } else {\n                        // If object is not there in the CDM, it is a VM object\n                        vmObject = object;\n                    }\n                } else if( uidInResponse ) { // if object doesn't have any UID, then retrieve the UID from the structure provided\n                    uid = _.get( object, uidInResponse );\n\n                    vmObject = _createViewModelObject( uid );\n                } else { // for static objects\n                    vmObject = object;\n                }\n\n                if( vmObject && !prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    loadedVMObjects.push( vmObject );\n                }\n\n                if( vmObject && prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    preprendVMObjects.push( vmObject );\n                }\n            } );\n\n            if( !_.isEmpty( preprendVMObjects ) ) {\n                loadedVMObjects = preprendVMObjects.concat( self.loadedVMObjects );\n            }\n            // if moreValuesExist of the LOV results,\n            if( actualResults.moreValuesExist ) {\n                self.moreValuesExist = actualResults.moreValuesExist;\n            }\n        }\n        return loadedVMObjects;\n    };\n\n    /**\n     * @param {ObjectArray} viewModelObjects - The array to set as the currently loaded view model objects\n     *            being managed within this viewModelCollection.\n     */\n    self.setViewModelObjects = function( viewModelObjects ) {\n        self.totalObjectsLoaded = viewModelObjects.length;\n        //create a new reference to trigger update.\n        self.loadedVMObjects = [ ...viewModelObjects ];\n    };\n\n    /**\n     * Returns view model object at specified index.\n     *\n     * @param {Number} index - specified index\n     * @return {Object} Null or object at given index\n     * @memberof ViewModelCollection\n     */\n    self.getViewModelObject = function( index ) {\n        if( self.loadedVMObjects ) {\n            return self.loadedVMObjects[ index ];\n        }\n        return null;\n    };\n\n    /**\n     * Returns view model objects with the specified id (can be uid).\n     *\n     * @param {String} id - specific id of the view model object\n     * @return {Array} Empty or with view model objects found\n     * @memberof ViewModelCollection\n     */\n    self.getViewModelObjects = function( id ) {\n        var returnViewModelObjects = [];\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            if( id === vmo.getId() ) {\n                returnViewModelObjects.push( vmo );\n            }\n        } );\n\n        return returnViewModelObjects;\n    };\n\n    /**\n     * Set total objects found\n     *\n     * @param {Number} totalFound - total found\n     * @memberof ViewModelCollection\n     */\n    self.setTotalObjectsFound = function( totalFound ) {\n        self.totalFound = totalFound;\n    };\n\n    /**\n     * Return total objects found\n     *\n     * @memberof ViewModelCollection\n     *\n     * @returns {Number} Total objects found.\n     */\n    self.getTotalObjectsFound = function() {\n        return self.totalFound;\n    };\n\n    /**\n     * Return total unique objects found, unique by id.\n     *\n     * @memberof ViewModelCollection\n     *\n     * @returns {Number} Total unique objects found, unique by id.\n     */\n    self.getTotalUniqueObjectsLoaded = function() {\n        var uniqueUids = {};\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            if( vmo.getId ) {\n                uniqueUids[ vmo.getId() ] = null;\n            } else if( vmo.uid ) { //This is the case of ViewModelTreeNode which doesn't contain getId method as its not a VMO. getId is added when the props are loaded.\n                uniqueUids[ vmo.uid ] = null;\n            }\n        } );\n        // return totalObjectsLoaded if no ids were found on the objects\n        return Object.keys( uniqueUids ).length || self.totalObjectsLoaded;\n    };\n\n    /**\n     * Return True/False if there are more objects to be loaded.\n     *\n     * @memberof ViewModelCollection\n     *\n     * @return {Boolean} True/False if there are more objects to be loaded.\n     */\n    self.hasMoreObjectsToLoad = function() {\n        return self.getTotalUniqueObjectsLoaded() < self.getTotalObjectsFound();\n    };\n\n    /**\n     * To support infinite scroll, if total found are greater than loaded objects then return\n     * totalObjectsLoaded + 3 else return total objects loaded\n     *\n     * @memberof ViewModelCollection\n     *\n     * @return {Number} Total objects loaded\n     */\n    self.getVirtualLength = function() {\n        var retValue = self.totalObjectsLoaded;\n\n        if( self.totalObjectsLoaded > 0 && self.hasMoreObjectsToLoad() ) {\n            retValue += 3;\n        }\n\n        return retValue;\n    };\n\n    /**\n     * Returns total objects loaded\n     *\n     * @memberof ViewModelCollection\n     *\n     * @return {Number} total objects loaded\n     */\n    self.getTotalObjectsLoaded = function() {\n        return self.totalObjectsLoaded;\n    };\n\n    /**\n     * Reset loaded objects array and total objects loaded counter\n     *\n     * @memberof ViewModelCollection\n     */\n    self.clear = function() {\n        self.loadedVMObjects = [];\n        self.totalObjectsLoaded = 0;\n        self.totalFound = 0;\n    };\n\n    /**\n     * Return loaded view model objects\n     *\n     * @memberof ViewModelCollection\n     * @return {Array} loaded view model objects\n     */\n    self.getLoadedViewModelObjects = function() {\n        return self.loadedVMObjects;\n    };\n\n    /**\n     * Get all the editable properties\n     *\n     * @return {ViewModelPropertyArray} Collection of editable properties.\n     */\n    self.getAllEditableProperties = function() {\n        var allEditableProperties = [];\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( prop.isEditable ) {\n                    allEditableProperties.push( prop );\n                }\n            } );\n        } );\n\n        return allEditableProperties;\n    };\n\n    /**\n     * Get all the modified properties\n     *\n     * @return {ViewModelPropertyArray} Collection of modified properties.\n     */\n    self.getAllModifiedProperties = function() {\n        var allModifiedProperties = [];\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( uwPropertySvc.isModified( prop ) ) {\n                    allModifiedProperties.push( {\n                        property: prop,\n                        viewModelObject: vmo\n                    } );\n                }\n            } );\n        } );\n\n        return allModifiedProperties;\n    };\n\n    /**\n     * Check editability on all properties\n     */\n    self.checkEditableOnProperties = function() {\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            viewModelObjectSvc.updateVMOProperties( vmo );\n        } );\n    };\n\n    /**\n     * Reset all 'editable' status properties from the underlying object.\n     */\n    self.clearEditiableStates = function() {\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            vmo.clearEditiableStates( true );\n        } );\n\n        /** revisitme billa\n         * HINT: We don't need this now\n         * uwPropertySvc.triggerDigestCycle();\n         */\n    };\n\n    /**\n     * Returns 1st ViewModelObject index in the collection whose 'id' (or 'uid') matches specified value.\n     *\n     * @memberof ViewModelCollection\n     *\n     * @param {String} idToFind - The ID (or UID) of the ViewModelObject to find.\n     * @return {Number} Index in the ViewModelSelection of the ViewModelObject found (or -1 if not found).\n     */\n    self.findViewModelObjectById = function( idToFind ) {\n        for( var ndx = 0; ndx < self.loadedVMObjects.length; ndx++ ) {\n            var vmo = self.loadedVMObjects[ ndx ];\n\n            if( vmo.alternateID && vmo.alternateID === idToFind ) {\n                return ndx;\n            }\n\n            if( vmo.id && vmo.id === idToFind ) {\n                return ndx;\n            }\n\n            if( vmo.uid && vmo.uid === idToFind ) {\n                return ndx;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Remove the passed in objects (array of viewModelTreeNodes)\n     *\n     * @param {Array} objectsToRemove an array of viewModelTreeNodes keyed by uid\n     */\n    self.removeLoadedObjects = function( objectsToRemove ) {\n        if( objectsToRemove && objectsToRemove.length > 0 ) {\n            _.remove( self.loadedVMObjects, function( treeNode ) {\n                var i = 0;\n                var doRemove = false;\n\n                while( i < objectsToRemove.length && !doRemove ) {\n                    if( treeNode.uid === objectsToRemove[ i ].uid ) {\n                        doRemove = true;\n                    }\n                    i++;\n                }\n                return doRemove;\n            } );\n        }\n    };\n\n    /**\n     * Free up all resources held/managed by this object.\n     * <P>\n     * Note: After this function, no API call should be considered valid. This function is intended to be\n     * called when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a\n     * GC event), any objects managed by this class may be considered a 'memory leak'.\n     */\n    self.destroy = function() {\n        self._isDestroyed = true;\n\n        _debug_currentCount.viewModelCollection--;\n\n        if( _debug_logMiscModelLifeCycle ) {\n            logger.info( 'Destroying ViewModelCollection: ' + self._modelId + ' # Remaining:' +\n                _debug_currentCount.viewModelCollection );\n        }\n\n        _.forEach( _eventBusSubDefs, function( subDef ) {\n            eventBus.unsubscribe( subDef );\n        } );\n\n        _eventBusSubDefs = null;\n\n        self.clear();\n    };\n\n    /**\n     * ---------------------------------------------------------------------------<BR>\n     * Property & Function definition complete....Finish initialization. <BR>\n     * ---------------------------------------------------------------------------<BR>\n     */\n\n    self._modelId = _debug_nextId.viewModelCollection++;\n\n    _debug_currentCount.viewModelCollection++;\n\n    if( _debug_logMiscModelLifeCycle ) {\n        logger.info( 'Created ViewModelCollection: ' + self._modelId );\n    }\n\n    _eventBusSubDefs.push( eventBus.subscribe( 'cdm.new', function( event ) {\n        _eventDataNew.newObjects = event.newObjects;\n        eventBus.publish( _eventTopicNew, _eventDataNew );\n    } ) );\n\n    _eventBusSubDefs.push( eventBus.subscribe( 'cdm.modified', function( event ) {\n        _eventDataModified.modifiedObjects = event.modifiedObjects;\n\n        eventBus.publish( _eventTopicModified, _eventDataModified );\n\n        /**\n         * Post process cdm event to update any of the reported objects that may be loaded in this\n         * viewModelCollection.\n         */\n        viewModelObjectSvc.updateViewModelObjectCollection( self.loadedVMObjects, event.modifiedObjects );\n    } ) );\n\n    // Listen for CDM Deleted events (will be unregistered onDestroy)\n    _eventBusSubDefs.push( eventBus.subscribe( 'cdm.deleted', function( event ) {\n        /**\n         * Post process cdm deleted event to remove any deleted objects from viewModelCollection collection\n         * of loadedVMObjects and then set the totalObjectsLoaded count.\n         */\n        let updateRequired = false;\n        if( event.deletedObjectUids && event.deletedObjectUids.length > 0 ) {\n            _.forEach( event.deletedObjectUids, function( deletedUid ) {\n                // remove the found object by uid from the collection of loadedVMObjects\n                _.remove( self.loadedVMObjects, function( vmo ) {\n                    if( vmo.uid === deletedUid ) {\n                        updateRequired = true;\n                        return true;\n                    }\n                } );\n            } );\n\n            if( updateRequired ) {\n                self.update( self.loadedVMObjects, self.loadedVMObjects.length );\n            }\n        }\n    } ) );\n};\n\n_debug_logMiscModelLifeCycle = browserUtils.getUrlAttributes().logMiscModelLifeCycle === '';\n\nvar exports = {};\n\n/**\n * Create new instance of view model collection\n *\n * @param {String} name - name of the ViewModelCollection\n * @return {ViewModelCollection} Returns view model collection object\n */\nexport let createViewModelCollection = function( name ) {\n    return new ViewModelCollection( name );\n};\n\nexports = {\n    createViewModelCollection\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\pltable\\\\src\\\\js\\\\awSPLMTableCellRendererFactory.js\";\n/* eslint-disable max-lines */\n\n/* eslint-disable @swf/swf/no-react-usage */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * DOM Structure:\n * - Cell Command\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_CELL_TOP|aw-splm-tableCellTop\n *         ( Content in CLASS_TABLE_CELL_TOP for all case above )\n *         CLASS_AW_CELL_COMMANDS|aw-jswidgets-gridCellCommands --> Custom command cell if exist\n *         CLASS_NATIVE_CELL_COMMANDS|aw-splm-tableGridCellCommands --> OOTB command cell, check mark\n *\n *\n * - Object/Object List:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_NON_EDIT_CELL_LIST|aw-jswidgets-arrayNonEditValueCellList  --> ( <ul>, CLASS_TABLE_CELL_TOP )\n *         CLASS_TOOLTIP_POPUP|aw-splm-tableTooltipPopup\n *         CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM|aw-jswidgets-arrayValueCellListItem --> ( <li> )\n *           CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS|aw-splm-tablePropertyValueLinks --> ( <a>, innerHTML from addHighlights )\n *           CLASS_AW_OLD_TEXT|aw-jswidgets-oldText --> ( <div>, innerHTML from addHighlights )\n *\n *\n * - Rich Text/Rich Text List:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_NON_EDIT_CELL_LIST|aw-jswidgets-arrayNonEditValueCellList  --> ( <ul>, CLASS_TABLE_CELL_TOP )\n *         CLASS_TOOLTIP_POPUP|aw-splm-tableTooltipPopup\n *         CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM|aw-jswidgets-arrayValueCellListItem  --> ( <li> )\n *           CLASS_TABLE_RTF_CELL_ITEM|aw-splm-tableRTFCellItem ( <div>, innerHTML from addHighlights )\n *           CLASS_AW_OLD_TEXT|aw-jswidgets-oldText --> ( <div>, innerHTML from addHighlights )\n *\n *\n * - Changed Text/Text List:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_NON_EDIT_CELL_LIST|aw-jswidgets-arrayNonEditValueCellList  --> ( <ul>, CLASS_TABLE_CELL_TOP )\n *         CLASS_TOOLTIP_POPUP|aw-splm-tableTooltipPopup\n *         CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM|aw-jswidgets-arrayValueCellListItem --> ( <li> )\n *           CLASS_WIDGET_TABLE_CELL_TEXT|aw-splm-tableCellText --> ( <div>, innerHTML from addHighlights )\n *           CLASS_AW_OLD_TEXT|aw-jswidgets-oldText --> ( <div>, innerHTML from addHighlights )\n *\n * - Text:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_CELL_TOP|aw-splm-tableCellTop --> ( <div> )\n *         CLASS_WIDGET_TABLE_CELL_TEXT|aw-splm-tableCellText --> ( <div>, innerHTML from addHighlights )\n *\n *\n * @module js/awSPLMTableCellRendererFactory\n */\n\nimport sanitizer from 'js/sanitizer';\nimport appCtxService from 'js/appCtxService';\nimport commandService from 'js/command.service';\nimport clickableTitleService from 'js/clickableTitleService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport AwHttpService from 'js/awHttpService';\nimport AwPromiseService from 'js/awPromiseService';\nimport AwCacheFactoryService from 'js/awCacheFactoryService';\nimport navigationTokenService from 'js/navigationTokenService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport cfgSvc from 'js/configurationService';\nimport { includeComponent, getDependentModule, loadDependentModule } from 'js/moduleLoader';\nimport awConfiguration from 'js/awConfiguration';\nimport { renderComponent } from 'js/declReactUtils';\nimport { AppCtxComponent } from 'js/reactAppCtx';\nimport { svgString as miscInProcessIndicator } from \"image/miscInProcessIndicator16.svg\";\nimport { svgString as miscExpandedTree } from \"image/miscExpandedTree12.svg\";\nimport { svgString as miscCollapsedTree } from \"image/miscCollapsedTree12.svg\";\nimport util from 'js/splmTableUtils';\nimport Const from 'js/splmTableConstants';\nimport Cell from 'js/splmTableCellRenderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar exports = {};\n\nvar _propVsRenderingTemplate;\n\nvar _defaultRenderingTemplates = {};\nlet highlighter;\n/**\n * Method to render rows\n *\n * @param {Number} startIndex Start render index\n * @param {Number} endIndex End render Index\n */\n\nfunction generatePropRendererTemplateMap() {\n  _propVsRenderingTemplate = {};\n\n  var _contributedTemplates = cfgSvc.getCfgCached('propertyRendererTemplates');\n\n  _.forEach(_contributedTemplates, function (contributedTemplate) {\n    if (!_.isEmpty(contributedTemplate.headerTemplate) || !_.isEmpty(contributedTemplate.headerTemplateUrl) || !_.isEmpty(contributedTemplate.headerRenderFunction) || !_.isEmpty(contributedTemplate.headerComponent)) {\n      contributedTemplate.isHeaderTemplate = true;\n    }\n\n    if (!_.isEmpty(contributedTemplate.template) || !_.isEmpty(contributedTemplate.templateUrl) || !_.isEmpty(contributedTemplate.renderFunction)) {\n      contributedTemplate.isCellTemplate = true;\n    }\n\n    var isDefaultTemplate = false;\n\n    if (_.isEmpty(contributedTemplate.grids)) {\n      // default rendering template for property\n      isDefaultTemplate = true;\n    } // Get ModelTypes for this Indicator Json\n\n\n    if (_.isEmpty(contributedTemplate.columns)) {\n      _.forEach(contributedTemplate.grids, function (gridid) {\n        _defaultRenderingTemplates[gridid] = contributedTemplate;\n      });\n    }\n\n    _.forEach(contributedTemplate.columns, function (column) {\n      if (!_propVsRenderingTemplate[column]) {\n        _.set(_propVsRenderingTemplate, [column], {\n          specificRenderingTemplates: [],\n          defaultPropRenderingTemplate: {}\n        });\n      }\n\n      var renderingTemplatesForProp = _propVsRenderingTemplate[column];\n\n      if (isDefaultTemplate) {\n        _.set(renderingTemplatesForProp, 'defaultPropRenderingTemplate', contributedTemplate);\n      } else {\n        renderingTemplatesForProp.specificRenderingTemplates.push(contributedTemplate);\n      }\n    });\n  });\n}\n\nvar applyCommandCellScope = function (cellCmdElem, column, vmo, extraDigest) {\n  // The below getElementScope method is commented out and the usages are commented too by assigning empty object to scope.\n  //var scope = util.getElementScope( cellCmdElem );\n  var scope = {};\n  scope.anchor = column.commandsAnchor;\n  scope.commandContext = {\n    vmo: vmo\n  };\n\n  if (vmo.props !== undefined) {\n    scope.prop = vmo.props[column.field];\n  }\n\n  if (extraDigest) {\n    scope.$evalAsync();\n  }\n};\n\nconst getTreeIconCellInfo = function (vmo) {\n  if (vmo.loadingStatus) {\n    return {\n      id: 'miscInProcessIndicator',\n      icon: miscInProcessIndicator\n    };\n  } else if (vmo.isLeaf) {\n    // we made the decision to stop rendering 'typeBlankIcon' because (1) there is no visual difference, (2) we want\n    // to decrease the number of DOM elements and (3) we don't know the history of why it was there.\n    return {};\n  } else if (vmo.isExpanded) {\n    return {\n      id: 'miscExpandedTree',\n      icon: miscExpandedTree\n    };\n  }\n\n  return {\n    id: 'miscCollapsedTree',\n    icon: miscCollapsedTree\n  };\n};\n/**\n * Creates the Icon cell for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n *\n * @returns {DOMElement} icon element\n */\n\n\nconst createIconElement = function (tableElem, vmo) {\n  let treeCellButtonHeaderCell = util.createElement('div', Const.CLASS_TREE_ROW_HEADER_BUTTONS, Const.CLASS_TREE_BASE_HEADER);\n\n  if (!vmo.isLeaf) {\n    treeCellButtonHeaderCell.classList.add(Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD);\n    treeCellButtonHeaderCell.tabIndex = -1;\n\n    tableElem._tableInstance.keyboardService.setOnFocusAndBlur(treeCellButtonHeaderCell);\n  }\n\n  const treeIndent = 16;\n  treeCellButtonHeaderCell.style.marginLeft = treeIndent * vmo.levelNdx + 'px';\n  treeCellButtonHeaderCell.title = vmo._twistieTitle;\n  const iconCellInfo = getTreeIconCellInfo(vmo); // this if check is for the vmo.isLeaf use case where there is no need to render an icon\n\n  if (iconCellInfo && iconCellInfo.id) {\n    let iconElem = document.createElement('span');\n    iconElem.classList.add('aw-icon', 'aw-base-icon');\n    let attr = document.createAttribute('iconid');\n    attr.value = iconCellInfo.id;\n    let attrLegacy = document.createAttribute('icon-id');\n    attrLegacy.value = iconCellInfo.id;\n    iconElem.setAttributeNode(attr);\n    iconElem.setAttributeNode(attrLegacy);\n    iconElem.innerHTML = iconCellInfo.icon;\n    treeCellButtonHeaderCell.appendChild(iconElem);\n  }\n\n  return treeCellButtonHeaderCell;\n};\n/**\n * Creates the cell decorator element for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n *\n * @returns {DOMElement} cell decorator element\n */\n\n\nvar createCellDecoratorElement = function (tableElem, vmo) {\n  var cellColorContainerElement = util.createElement('div', Const.CLASS_GRID_CELL_COLOR_CONTAINER, Const.CLASS_TREE_COLOR_CONTAINER);\n  var cellColorElement = util.createColorIndicatorElement(vmo);\n  cellColorContainerElement.appendChild(cellColorElement);\n  return cellColorContainerElement;\n};\n/**\n * Get the img element tag alt text for WCAG accessibility compliance\n * @param {Object} vmo - View model object\n * @returns {String} Returns alt text\n */\n\n\nvar getImageAltText = function (vmo) {\n  if (vmo.hasThumbnail) {\n    return vmo.cellHeader1;\n  } else if (vmo.props && vmo.props.object_type && vmo.props.object_type.uiValue) {\n    return vmo.props.object_type.uiValue;\n  }\n\n  return vmo.modelType && vmo.modelType.displayName ? vmo.modelType.displayName : '';\n};\n/**\n * Creates the cell image element for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n *\n * @returns {DOMElement} cell image element\n */\n\n\nvar createCellImageElement = function (tableElem, vmo) {\n  let imgURL = util.getImgURL(vmo);\n  let svgString = vmo.svgString;\n\n  if (imgURL === '' && !svgString) {\n    return null;\n  }\n\n  let cellImageContainerElement = util.createElement('div', Const.CLASS_GRID_CELL_IMAGE);\n  let cellImageElement = null;\n\n  if (imgURL && imgURL !== '') {\n    cellImageElement = util.createElement('img', Const.CLASS_ICON_BASE);\n    cellImageElement.src = imgURL;\n  } else if (svgString) {\n    cellImageElement = util.createElement('span', Const.CLASS_ICON_BASE);\n    cellImageElement.innerHTML = svgString;\n  }\n\n  if (cellImageElement) {\n    cellImageElement.alt = getImageAltText(vmo);\n    cellImageContainerElement.appendChild(cellImageElement);\n  }\n\n  return cellImageContainerElement;\n};\n\nvar toggleTreeCellAction = function (vmo, tableElem, treeCellElement) {\n  if (vmo.isExpanded || vmo.isInExpandBelowMode) {\n    // collapse\n    delete vmo.isExpanded;\n    vmo.isInExpandBelowMode = false;\n  } else {\n    vmo.isExpanded = true; // Set icon cell to loading icon\n\n    var iconContainerElement = treeCellElement.getElementsByClassName(Const.CLASS_ICON_BASE)[0];\n\n    if (iconContainerElement !== undefined) {\n      iconContainerElement.innerHTML = miscInProcessIndicator;\n    }\n  } // Prevent the selected row from being scrolled to if it goes out of view\n\n\n  tableElem._tableInstance.tableInstanceCallbacks.unsetScrollToRowIndex();\n\n  if (tableElem._tableInstance.tableInstanceCallbacks.toggleTreeNode) {\n    tableElem._tableInstance.tableInstanceCallbacks.toggleTreeNode(vmo);\n  } else {\n    eventBus.publish(tableElem.id + '.plTable.toggleTreeNode', vmo);\n  }\n};\n\nvar populateHrefContentPerPropValue = function (objectElement, scope, uidToBeEvaluated, vmo) {\n  var deferred = AwPromiseService.instance.defer();\n\n  if (objectElement && scope && uidToBeEvaluated) {\n    navigationTokenService.getNavigationContent(scope, uidToBeEvaluated, vmo).then(function (urlDetails) {\n      var hrefDetails = urlDetails;\n\n      if (hrefDetails) {\n        deferred.resolve({\n          objectElement: objectElement,\n          url: hrefDetails\n        });\n      }\n    });\n  }\n\n  return deferred.promise;\n};\n\nvar addHrefToAnchorLink = function (objectElement, scope, uidToBeEvaluated, vmo) {\n  objectElement.addEventListener('mouseenter', function () {\n    populateHrefContentPerPropValue(objectElement, scope, uidToBeEvaluated, vmo).then(function (response) {\n      if (!_.isUndefined(response)) {\n        objectElement = util.addAttributeToDOMElement(response.objectElement, 'href', response.url.urlContent);\n        objectElement = util.addAttributeToDOMElement(objectElement, 'target', response.url.target);\n      }\n    });\n  });\n  return objectElement;\n};\n\nvar addClickableCellTitle = function (element, vmo, value, tableElem) {\n  // make cell text clickable\n  var clickableTextDiv = util.createElement('div');\n  var clickableText = util.createElement('a', 'aw-uiwidgets-clickableTitle');\n  const scope = {\n    data: tableElem._tableInstance.declViewModel,\n    ctx: tableElem._tableInstance.ctx,\n    tableContext: tableElem._tableInstance\n  };\n\n  clickableText.onclick = function (event) {\n    scope.vmo = vmo;\n    clickableTitleService.doIt(event, scope, tableElem._tableInstance.runActionWithViewModel);\n  };\n\n  clickableText.innerHTML = exports.addHighlights(value);\n  clickableTextDiv.appendChild(clickableText);\n  element.appendChild(clickableTextDiv);\n};\n/**\n * Creates the title and command container element for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n * @param {Object} column the column associated with the cell\n * @returns {DOMElement} title/command container element\n */\n\n\nlet createTitleElement = function (tableElem, vmo, column) {\n  let tableNonEditContainerElement = util.createElement('div', Const.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER, Const.CLASS_LAYOUT_ROW_CONTAINER);\n  let displayName = vmo.displayName;\n  tableNonEditContainerElement.title = displayName;\n  let parsedValue = sanitizer.htmlEscapeAllowEntities(displayName, true, true);\n  let gridCellText = util.createElement('div', Const.CLASS_WIDGET_TABLE_CELL_TEXT);\n\n  if ((column.isTableCommand || column.isTreeNavigation) && clickableTitleService.hasClickableCellTitleActions()) {\n    addClickableCellTitle(gridCellText, vmo, parsedValue, tableElem);\n  } else {\n    gridCellText.innerHTML = exports.addHighlights(parsedValue);\n  }\n\n  const dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n\n  if (dynamicRowHeightEnabled) {\n    tableNonEditContainerElement.classList.add(Const.CLASS_TABLE_CELL_TOP_DYNAMIC);\n    gridCellText.classList.add(Const.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC);\n  } // Skeletons fix - if no cell content, remove table cell text class\n\n\n  if (gridCellText.innerHTML === '') {\n    gridCellText.classList.remove(Const.CLASS_WIDGET_TABLE_CELL_TEXT);\n  }\n\n  tableNonEditContainerElement.appendChild(gridCellText);\n  return tableNonEditContainerElement;\n};\n/**\n * Show or hide the element based on 'isSelected'.\n *\n * @param {DOMElement} element DOM element to show/hide\n * @param {Boolean} isSelected used to either show or hide element\n */\n\n\nvar toggleCellCommandVisibility = function (element, isSelected) {\n  if (isSelected) {\n    util.showHideElement(element, false);\n  } else {\n    util.showHideElement(element, true);\n  }\n};\n/**\n * Add events to the tree command cell elements.\n *\n * @param {DOMElement} treeCellElement tree cell container element\n * @param {Object} vmo the vmo for the cell\n * @param {DOMElement} tableElem table element\n */\n\n\nvar addTreeCommandCellEvents = function (treeCellElement, vmo, tableElem) {\n  var tableInstance = util.getTableInstance(tableElem);\n  var dataProviderName = tableInstance.dataProvider.name;\n  var treeCellButtonElement = treeCellElement.getElementsByClassName(Const.CLASS_TREE_ROW_HEADER_BUTTONS)[0];\n\n  if (treeCellButtonElement) {\n    const treeCommandCellClickListener = function () {\n      if (!vmo.isLeaf && util.isExpandAllowed(tableElem)) {\n        toggleTreeCellAction(vmo, tableElem, treeCellElement);\n      }\n    };\n\n    treeCellButtonElement.addEventListener('click', treeCommandCellClickListener);\n    treeCellButtonElement.addEventListener('keydown', function (event) {\n      if (event.code === 'Enter' || event.code === 'Space') {\n        treeCommandCellClickListener();\n      }\n    });\n  }\n\n  var treeCellImageElement = treeCellElement.getElementsByClassName(Const.CLASS_GRID_CELL_IMAGE)[0];\n\n  if (treeCellImageElement) {\n    treeCellImageElement.addEventListener('click', function () {\n      eventBus.publish('plTable.imageButtonClick', vmo);\n    });\n  }\n\n  var cellCommandBarElement = treeCellElement.getElementsByClassName('cellCommandBarContainer')[0];\n\n  if (cellCommandBarElement) {\n    var isSelected = tableInstance.dataProvider.selectionModel.multiSelectEnabled && vmo.selected;\n    toggleCellCommandVisibility(cellCommandBarElement, isSelected);\n    eventBus.subscribe(dataProviderName + '.selectionChangeEvent', function () {\n      isSelected = tableInstance.dataProvider.selectionModel.multiSelectEnabled && vmo.selected;\n      toggleCellCommandVisibility(cellCommandBarElement, isSelected);\n    });\n  }\n};\n/**\n * @memberOf js/awSPLMTableCellRendererFactory\n *\n * This method is used for creating cell commands for PL Table in AW usecase.\n *\n * @param {Object} column - column Definition\n * @param {Object} vmo - View model object\n * @param {Boolean} [isInternal] - true if function being called from internal PL Table code\n * @returns {DOMElement} DOMElement presents cell command bar\n *\n */\n\n\nexport let createCellCommandElement = function (column, vmo, isInternal) {\n  const fields = {\n    anchor: column.commandsAnchor,\n    column: column,\n    vmo: vmo,\n    isInternal: isInternal\n  };\n  var cellCommandsContainer = util.createElement('div', Const.CLASS_AW_CELL_COMMANDS_CONTAINER);\n  let cellCmdElem = includeComponent('AwTableCommandBar', fields);\n  renderComponent( /*#__PURE__*/_jsxDEV(AppCtxComponent, {\n    children: cellCmdElem\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 22\n  }, this), cellCommandsContainer);\n  return cellCommandsContainer;\n};\nexport let createTreeCellCommandElement = function (column, vmo, tableElem) {\n  // CELL CONTAINER\n  var tableTreeCommandCell = util.createElement('div', Const.CLASS_AW_TREE_COMMAND_CELL, Const.CLASS_WIDGET_TABLE_CELL);\n  var treeCellTop = util.createElement('div', Const.CLASS_AW_JS_CELL_TOP, Const.CLASS_WIDGET_UI_NON_EDIT_CELL);\n  tableTreeCommandCell.appendChild(treeCellTop); // ICON\n\n  var iconElement = createIconElement(tableElem, vmo);\n  treeCellTop.appendChild(iconElement); // DECORATOR\n\n  var cellDecoratorElement = createCellDecoratorElement(tableElem, vmo);\n  treeCellTop.appendChild(cellDecoratorElement); // IMAGE\n\n  var cellImageElement = createCellImageElement(tableElem, vmo);\n\n  if (cellImageElement) {\n    treeCellTop.appendChild(cellImageElement);\n  } // TITLE\n\n\n  var tableNonEditContainerElement = createTitleElement(tableElem, vmo, column);\n  treeCellTop.appendChild(tableNonEditContainerElement);\n  addTreeCommandCellEvents(tableTreeCommandCell, vmo, tableElem);\n  return tableTreeCommandCell;\n};\n\nvar createCheckMarkElementInternal = function (tableElem) {\n  var commandBarHtml = '<div class=\"aw-splm-tableCheckBoxPresent\" >' + //\n  '<a class=\"aw-commands-cellCommandCommon\">' + //\n  '<div class=\"afx-checkbox afx-checkbox-label-side\">' + //\n  '<input type=\"checkbox\" class=\"aw-jswidgets-checkboxButton\"/>' + //\n  '<span class=\"afx-checkbox-md-style\">' + //\n  '<span class=\"check\"></span>' + //\n  '</span>' + //\n  '</div>' + //\n  '</a>' + //\n  '</div>'; //\n\n  var cellScope = {};\n  return util.createNgElement(commandBarHtml, tableElem, cellScope);\n}; // NOTE: By this design, the cell command will only be available for OOTB AW Cell.\n\n\nexport let createCheckMarkElement = function (column, vmo, tableElem) {\n  var elem = createCheckMarkElementInternal(tableElem);\n  applyCommandCellScope(elem, column, vmo);\n  return elem;\n};\nexport let addHighlights = function (displayValue) {\n  if (!highlighter) {\n    highlighter = appCtxService.getCtx('highlighter');\n  }\n\n  if (highlighter && typeof displayValue === 'string') {\n    return displayValue.replace(highlighter.regEx, highlighter.style);\n  }\n\n  return displayValue;\n}; // This function is called when we click on any object link\n// REFACTOR: Awp0ShowObjectCell is TC specific. Try to pull command ID from solution configuration\n// instead.\n\nvar openObjectLink = function (propertyName, uid, objectElement) {\n  if (uid && uid.length > 0) {\n    var modelObject = cdm.getObject(uid);\n    var vmo = {\n      propertyName: propertyName,\n      uid: uid\n    };\n    var commandContext = {\n      vmo: modelObject || vmo,\n      // vmo needed for gwt commands\n      edit: false\n    };\n    commandService.executeCommand('Awp0ShowObjectCell', null, null, commandContext, objectElement.runActionWithViewModel);\n  }\n}; // REFACTOR: The only meaning here to keep this is the _cellCmdElem mechanism, we can separate it out later.\n\n\nexport let createCellRenderer = function () {\n  var _renderer = {};\n\n  var _cellCmdElem;\n\n  var _tooltipElement = util.createElement('div', Const.CLASS_AW_POPUP, Const.CLASS_AW_TOOLTIP_POPUP, Const.CLASS_TOOLTIP_POPUP);\n\n  var createCommandCellHandler = function (cellTop, column, vmo, tableElem) {\n    return function () {\n      //no commands visible when in multiselection/visible checkbox\n      if (!tableElem._tableInstance.showCheckBox && cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length === 0) {\n        _cellCmdElem = createCellCommandElement(column, vmo, true);\n        cellTop.appendChild(_cellCmdElem);\n      }\n    };\n  };\n\n  var destroyCommandCellHandler = function (cellTop, column, vmo, tableElem) {\n    return function () {\n      //no commands visible when in multiselection/visible checkbox\n      if (!tableElem._tableInstance.showCheckBox && cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length === 1 && _cellCmdElem) {\n        _renderer.destroyHoverCommandElement();\n      }\n    };\n  };\n\n  var addCommandOnHover = function (commandHandlerParent, column, vmo, tableElem) {\n    commandHandlerParent.addEventListener('mouseover', createCommandCellHandler(commandHandlerParent, column, vmo, tableElem));\n  };\n\n  var removeCommandOnHover = function (commandHandlerParent, column, vmo, tableElem) {\n    commandHandlerParent.addEventListener('mouseleave', destroyCommandCellHandler(commandHandlerParent, column, vmo, tableElem));\n  };\n\n  var createInlineComponent = function (extendedTooltip, containerElement, vmo, column) {\n    const subPanelContext = {\n      vmo: vmo,\n      column: column\n    };\n    let extendedTooltipElement = includeComponent(extendedTooltip, subPanelContext);\n\n    if (containerElement) {\n      renderComponent( /*#__PURE__*/_jsxDEV(AppCtxComponent, {\n        children: extendedTooltipElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 30\n      }, this), containerElement);\n    }\n\n    return containerElement;\n  };\n\n  var getTooltipHTML = function (values) {\n    var tooltipInnerHTML = '<ul>';\n\n    _.forEach(values, function (value) {\n      tooltipInnerHTML += '<li>' + exports.addHighlights(value) + '</li>';\n    });\n\n    tooltipInnerHTML += '</ul>';\n    return tooltipInnerHTML;\n  };\n\n  var containsOnlyEmptyStrings = function (values) {\n    if (values.length) {\n      for (var i = 0; i < values.length; i++) {\n        if (values[i] !== '') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  var getNewValues = function (prop) {\n    var newValues = []; // Get the new values, return an empty array if the values are all empty strings\n    // to avoid creating unnecessary DOM elements.\n\n    if (prop.isArray === true) {\n      // Only use uiValues if displayValues is not defined.\n      if (prop.displayValues) {\n        if (!containsOnlyEmptyStrings(prop.displayValues)) {\n          newValues = prop.displayValues.slice();\n        }\n      } else if (prop.uiValues) {\n        if (!containsOnlyEmptyStrings(prop.uiValues)) {\n          newValues = prop.uiValues.slice();\n        }\n      }\n    } else if (!containsOnlyEmptyStrings([prop.uiValue])) {\n      newValues = [prop.uiValue];\n    }\n\n    return newValues;\n  };\n\n  var getOldValues = function (prop) {\n    var oldValues = [];\n\n    if (prop.isArray === true && prop.oldValues && !containsOnlyEmptyStrings(prop.oldValues)) {\n      oldValues = prop.oldValues.slice();\n    } else if (prop.oldValue && !containsOnlyEmptyStrings([prop.oldValue])) {\n      oldValues = [prop.oldValue];\n    }\n\n    return oldValues;\n  };\n\n  var addOpenObjectLinkHandler = function (objectElement, prop, index) {\n    var openObjLinkHandle = function (e) {\n      if (e.target && e.target.tagName.toLowerCase() === 'a' && e.target.href !== '') {\n        return;\n      }\n\n      if (!prop.isEditable) {\n        e.cancelBubble = true;\n        openObjectLink(prop.propertyName, prop.dbValues[index], objectElement);\n      }\n    };\n\n    objectElement.addEventListener('click', function (event) {\n      openObjLinkHandle(event);\n    });\n    objectElement.addEventListener('keydown', function (event) {\n      if (event.code === 'Enter' || event.code === 'Space') {\n        openObjLinkHandle(event);\n      }\n    });\n  };\n\n  const createPropertyValueLinkElement = function (prop, oldValue) {\n    if (prop.isEditable) {\n      return util.createElement('a', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS_DISABLED);\n    } else if (oldValue) {\n      return util.createElement('a', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS, Const.CLASS_AW_CHANGED_TEXT);\n    }\n\n    return util.createElement('a', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS);\n  };\n\n  var createObjectListFragment = function (prop, addOldValue, scope, dynamicRowHeightEnabled, tableElem) {\n    var fragment = document.createDocumentFragment();\n    var newValues = getNewValues(prop);\n    var oldValues = getOldValues(prop);\n    let runActionWithViewModel = tableElem._tableInstance.runActionWithViewModel;\n    var index = 0;\n\n    while (newValues.length > 0 || oldValues.length > 0) {\n      var liForObjectLinks = util.createElement('li', Const.CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM);\n      var newValue = newValues.shift();\n      var oldValue = oldValues.shift();\n\n      if (newValue) {\n        // use a different class when there is an object array.\n        let objectElement = createPropertyValueLinkElement(prop, oldValue);\n        objectElement.tabIndex = -1;\n\n        if (dynamicRowHeightEnabled) {\n          objectElement.style.whiteSpace = 'normal';\n        } // href not to be associated with editable prop\n\n\n        if (!util.isBulkEditing(tableElem)) {\n          // associating every prop with href\n          var uidToBeEvaluated = '';\n\n          if (prop.isArray) {\n            uidToBeEvaluated = prop.dbValue[index];\n          } else {\n            uidToBeEvaluated = prop.dbValue;\n          }\n\n          addHrefToAnchorLink(objectElement, scope, uidToBeEvaluated);\n        }\n\n        objectElement.runActionWithViewModel = runActionWithViewModel;\n        addOpenObjectLinkHandler(objectElement, prop, index);\n        objectElement.innerHTML = exports.addHighlights(newValue);\n        liForObjectLinks.appendChild(objectElement);\n      }\n\n      if (addOldValue && hasOldValue(oldValue, prop.oldValue)) {\n        var oldCellTextElement = util.createElement('div', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS_DISABLED, Const.CLASS_AW_OLD_TEXT);\n        oldCellTextElement.innerHTML = exports.addHighlights(oldValue);\n        liForObjectLinks.appendChild(oldCellTextElement);\n      }\n\n      fragment.appendChild(liForObjectLinks); // Add cell text class to last li\n\n      if (fragment.childNodes.length > 0) {\n        fragment.childNodes[fragment.childNodes.length - 1].classList.add(Const.CLASS_WIDGET_TABLE_CELL_TEXT);\n      }\n\n      index++;\n    }\n\n    return fragment;\n  };\n  /**\n   * Clear the child elements of the _tooltipElement.\n   */\n\n\n  var clearTooltipContent = function () {\n    if (_tooltipElement.parentElement) {\n      _tooltipElement.parentElement.removeChild(_tooltipElement);\n    }\n\n    while (_tooltipElement.firstChild) {\n      _tooltipElement.removeChild(_tooltipElement.firstChild);\n    }\n  };\n\n  var addTooltipListeners = function (parentElement, tooltipContent, tableElement) {\n    var tooltipTimeout = null;\n    parentElement.addEventListener('mouseenter', function (event) {\n      clearTimeout(tooltipTimeout);\n\n      if (event.offsetX > event.target.clientWidth) {\n        return false;\n      }\n\n      tooltipTimeout = setTimeout(function () {\n        clearTooltipContent();\n        var parentElementDimensions = parentElement.getBoundingClientRect();\n        _tooltipElement.style.left = parentElementDimensions.left + 'px';\n        _tooltipElement.style.top = parentElementDimensions.top + 'px';\n        var tableBoundingBox = tableElement.getBoundingClientRect();\n        _tooltipElement.style.maxWidth = tableBoundingBox.right - parentElementDimensions.left + 'px'; // When tooltipContent is a document fragment, convert to array of html elements to maintain\n        // references after appending\n\n        if (tooltipContent instanceof DocumentFragment) {\n          tooltipContent = Array.prototype.slice.call(tooltipContent.childNodes);\n        }\n\n        if (Array.isArray(tooltipContent)) {\n          for (var i = 0; i < tooltipContent.length; i++) {\n            _tooltipElement.appendChild(tooltipContent[i]);\n          }\n        } else if (tooltipContent instanceof Element) {\n          _tooltipElement.appendChild(tooltipContent);\n        } else {\n          _tooltipElement.innerHTML = tooltipContent;\n        }\n\n        parentElement.appendChild(_tooltipElement);\n      }, 750);\n    });\n    parentElement.addEventListener('mouseleave', function () {\n      clearTimeout(tooltipTimeout);\n      tooltipTimeout = setTimeout(clearTooltipContent, 750);\n    });\n    return _tooltipElement;\n  };\n  /**\n   * Icon cell\n   */\n\n\n  var iconCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var cell = util.createElement('div', Const.CLASS_CELL_CONTENTS, Const.CLASS_SPLM_TABLE_ICON_CELL);\n      var colorIndicatorElement = util.createColorIndicatorElement(vmo);\n      cell.appendChild(colorIndicatorElement);\n      var cellImg = util.createElement('img', Const.CLASS_ICON_BASE, Const.CLASS_ICON_TYPE, Const.CLASS_SPLM_TABLE_ICON);\n      var rowHeight = util.getTableRowHeightForIconCellRenderer(util.getTableInstance(tableElem).gridOptions, undefined);\n\n      if (rowHeight !== undefined) {\n        cellImg.style.height = rowHeight + 'px';\n        cellImg.style.width = rowHeight + 'px';\n      }\n\n      cellImg.src = util.getImgURL(vmo);\n      cellImg.alt = getImageAltText(vmo);\n      cell.appendChild(cellImg);\n      return cell;\n    },\n    condition: function (column, vmo, tableElem) {\n      return column.name === 'icon';\n    }\n  };\n  /**\n   * Transpose Icon cell\n   */\n\n  const transposeIconCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      const cell = util.createElement('div', Const.CLASS_CELL_CONTENTS, Const.CLASS_SPLM_TABLE_ICON_CELL);\n      const colorIndicatorElement = util.createColorIndicatorElement(vmo);\n      cell.appendChild(colorIndicatorElement);\n      const cellImg = util.createElement('img', Const.CLASS_ICON_BASE, Const.CLASS_ICON_TYPE, Const.CLASS_SPLM_TABLE_ICON);\n      const rowHeight = util.getTableRowHeightForIconCellRenderer(util.getTableInstance(tableElem).gridOptions, undefined);\n\n      if (rowHeight !== undefined) {\n        cellImg.style.height = rowHeight + 'px';\n        cellImg.style.width = rowHeight + 'px';\n      }\n\n      cellImg.src = util.getImgURL(vmo.props[column.field]);\n      cellImg.alt = getImageAltText(vmo);\n      cell.appendChild(cellImg);\n      return cell;\n    },\n    condition: function (column, vmo, tableElem) {\n      return tableElem._tableInstance.gridOptions.transpose === true && vmo.name === 'icon' && column.field !== 'transposedColumnProperty';\n    }\n  };\n  /**\n   * Command in cell\n   */\n\n  var commandCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var cellContent = Cell.createElement(column, vmo, tableElem, rowElem);\n\n      if (cellContent) {\n        addCommandOnHover(cellContent, column, vmo, tableElem);\n        removeCommandOnHover(cellContent, column, vmo, tableElem);\n      }\n\n      return cellContent;\n    },\n    condition: function (column, vmo, tableElem, rowElem) {\n      return column.isTableCommand;\n    }\n  };\n  /**\n   * Tree Node\n   */\n\n  var treeTableCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var createTreeCellCommandElement = exports.createTreeCellCommandElement(column, vmo, tableElem);\n      var commandHandlerParent = createTreeCellCommandElement.getElementsByClassName(Const.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER)[0];\n      addCommandOnHover(commandHandlerParent, column, vmo, tableElem);\n      removeCommandOnHover(commandHandlerParent, column, vmo, tableElem);\n      return createTreeCellCommandElement;\n    },\n    condition: function (column, vmo, tableElem, rowElem) {\n      return column.isTreeNavigation;\n    }\n  };\n  /**\n   * AW Object Reference\n   */\n\n  var objectCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var prop = vmo.props[column.field];\n      var ulForObjectLinks = util.createElement('ul', Const.CLASS_TABLE_NON_EDIT_CELL_LIST, Const.CLASS_TABLE_CELL_TOP);\n      var dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n\n      if (dynamicRowHeightEnabled) {\n        ulForObjectLinks.classList.add(Const.CLASS_TABLE_CELL_TOP_DYNAMIC);\n      } // Prevent wrapping for cells that could have a command\n\n\n      if (column.isTableCommand === true) {\n        ulForObjectLinks.style.flexWrap = 'nowrap';\n        ulForObjectLinks.style.overflow = 'hidden';\n      }\n\n      var values = prop.displayValues || prop.uiValues; // Add tooltip\n\n      /** revisitme Shaishav: What is the replacement? Do we need anything from parent element?\n        * tstark - needed for navigationToken, only thing added is .vmo to scope, anything else is needed here\n      var scope = util.getElementScope( tableElem.parentElement, true );\n      */\n\n      var scope = {};\n\n      if (prop.isArray && values.length > 0) {\n        var objectListDomFragment = createObjectListFragment(prop, null, scope, dynamicRowHeightEnabled, tableElem);\n\n        if (objectListDomFragment) {\n          addTooltipListeners(ulForObjectLinks, objectListDomFragment, tableElem);\n        }\n      } else {\n        ulForObjectLinks.title = prop.uiValue;\n      }\n\n      var contentDomFragment = createObjectListFragment(prop, true, scope, dynamicRowHeightEnabled, tableElem);\n\n      if (contentDomFragment) {\n        ulForObjectLinks.appendChild(contentDomFragment);\n      }\n\n      return ulForObjectLinks;\n    },\n    condition: function (column, vmo, tableElem, rowElem) {\n      return vmo.props && vmo.props[column.field] && (vmo.props[column.field].type === 'OBJECT' || vmo.props[column.field].type === 'OBJECTARRAY');\n    }\n  };\n\n  var getCompiledFunctionFromCache = function (templateUrl, htmlString) {\n    // In order to stop loading/compiling same template again, template should be cached against its URL\n    var renderingTemplateCache = AwCacheFactoryService.instance.get('propRenderingTemplate');\n\n    if (!renderingTemplateCache) {\n      renderingTemplateCache = AwCacheFactoryService.instance('propRenderingTemplate');\n    }\n\n    var compiledTemplateFn = renderingTemplateCache.get(templateUrl);\n\n    if (!compiledTemplateFn && !_.isEmpty(htmlString)) {\n      compiledTemplateFn = _.template(htmlString);\n      renderingTemplateCache.put(templateUrl, compiledTemplateFn);\n    }\n\n    return compiledTemplateFn;\n  };\n\n  var loadTemplate = function (containerElement, vmo, templateUrl, dependentServices) {\n    var deferred = AwPromiseService.instance.defer();\n    AwHttpService.instance.get(templateUrl, {\n      cache: true\n    }).then(function (response) {\n      var htmlString = response;\n\n      if (htmlString) {\n        deferred.resolve({\n          containerElement: containerElement,\n          templateUrl: templateUrl,\n          vmo: vmo,\n          htmlString: response.data,\n          dependentServices: dependentServices\n        });\n      }\n    });\n    return deferred.promise;\n  };\n\n  var updateContainerElement = function (containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, depServices, column, tableElem) {\n    var compiledTemplateFn = getCompiledFunctionFromCache(templateUrl, htmlString);\n    var generatedElement = compiledTemplateFn({\n      vmo: vmo,\n      propName: propName,\n      tooltipProps: tooltipProps,\n      basePath: awConfiguration.get('baseUrl'),\n      dependentServices: depServices,\n      column: column,\n      tableContext: tableElem._tableInstance.tableContext\n    });\n    containerElement.innerHTML = generatedElement.trim();\n  };\n\n  const updateContainerWithCellTemplate = async function (containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, depsToInject, column, tableElem) {\n    if (depsToInject && depsToInject.length > 0) {\n      for (let dep in depsToInject) {\n        // eslint-disable-next-line no-await-in-loop\n        const cachedDep = await getDependentModule(depsToInject[dep]);\n\n        if (cachedDep && _.isEmpty(htmlString)) {\n          updateContainerElement(containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, [cachedDep], column, tableElem);\n        } else {\n          // eslint-disable-next-line no-await-in-loop\n          const loadedDep = await loadDependentModule(depsToInject[dep]);\n          updateContainerElement(containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, [loadedDep], column, tableElem);\n        }\n      }\n    } else {\n      updateContainerElement(containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, depsToInject, column, tableElem);\n    }\n  };\n\n  var getColRendererTemplateToUse = function (propName, tableElem, retrieveHeader) {\n    var renderingTemplate = {};\n    var propRenderTemplates = _propVsRenderingTemplate[propName];\n    var gridId = tableElem.id;\n    var defaultRenderingTemplate = _defaultRenderingTemplates[gridId];\n\n    if (defaultRenderingTemplate) {\n      if (defaultRenderingTemplate.isHeaderTemplate === true && retrieveHeader === true || defaultRenderingTemplate.isCellTemplate === true && retrieveHeader === false) {\n        renderingTemplate = defaultRenderingTemplate;\n      }\n    }\n\n    if (propRenderTemplates) {\n      var propDefault = propRenderTemplates.defaultPropRenderingTemplate;\n\n      if (propDefault) {\n        if (propDefault.isHeaderTemplate === true && retrieveHeader === true || propDefault.isCellTemplate === true && retrieveHeader === false) {\n          renderingTemplate = propDefault;\n        }\n      }\n\n      _.forEach(propRenderTemplates.specificRenderingTemplates, function (propRenderTemplate) {\n        if (propRenderTemplate.grids.indexOf(gridId) >= 0) {\n          if (propRenderTemplate.isHeaderTemplate === true && retrieveHeader === true || propRenderTemplate.isCellTemplate === true && retrieveHeader === false) {\n            renderingTemplate = propRenderTemplate;\n            return;\n          }\n        }\n      });\n    }\n\n    return renderingTemplate;\n  };\n\n  var isCustomTemplate = function (defaultTemplate, specificTemplate, retrieveHeader) {\n    if (!_.isEmpty(specificTemplate)) {\n      for (var i = 0; i < specificTemplate.length; i++) {\n        var currentTemplate = specificTemplate[i];\n\n        if (retrieveHeader) {\n          if (currentTemplate.isHeaderTemplate === true) {\n            return true;\n          }\n        } else {\n          if (currentTemplate.isCellTemplate === true) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if (!_.isEmpty(defaultTemplate)) {\n      if (retrieveHeader) {\n        if (defaultTemplate.isHeaderTemplate === true) {\n          return true;\n        }\n      } else {\n        if (defaultTemplate.isCellTemplate === true) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  var isGraphicalRenderrDefinedForProp = function (propName, gridid, retrieveHeader) {\n    if (_.isEmpty(_propVsRenderingTemplate)) {\n      generatePropRendererTemplateMap();\n    }\n\n    var propRenderingObj = _propVsRenderingTemplate[propName];\n\n    if (propRenderingObj) {\n      var isHeaderTrue = isCustomTemplate(propRenderingObj.defaultPropRenderingTemplate, propRenderingObj.specificRenderingTemplates, retrieveHeader);\n      var isCellTrue = isCustomTemplate(propRenderingObj.defaultPropRenderingTemplate, propRenderingObj.specificRenderingTemplates, retrieveHeader);\n\n      if (isHeaderTrue === true && retrieveHeader === true || isCellTrue === true && retrieveHeader === false) {\n        return true;\n      }\n    }\n\n    if (_defaultRenderingTemplates[gridid]) {\n      if (_defaultRenderingTemplates[gridid].isHeaderTemplate === true && retrieveHeader === true || _defaultRenderingTemplates[gridid].isCellTemplate === true && retrieveHeader === false) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // Returns the correct property name\n\n\n  const getPropName = function (column, vmo, tableElem) {\n    let propName = column.field;\n\n    if (tableElem._tableInstance.gridOptions.transpose === true) {\n      propName = vmo.props.transposedColumnProperty.dbValue;\n    }\n\n    return propName;\n  };\n\n  var customCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var retrieveHeader = false;\n      var propName = getPropName(column, vmo, tableElem);\n      var colRenderTemplateDef = getColRendererTemplateToUse(propName, tableElem, retrieveHeader);\n      var containerElement = null;\n\n      if (!_.isEmpty(colRenderTemplateDef.template)) {\n        //Template processing -> No need for async processing..\n        containerElement = util.createElement('div', Const.CLASS_TABLE_CELL_TOP);\n        updateContainerWithCellTemplate(containerElement, vmo, column.field, colRenderTemplateDef.tooltip, colRenderTemplateDef.template, colRenderTemplateDef.template, colRenderTemplateDef.dependentServices, column, tableElem);\n      } else if (!_.isEmpty(colRenderTemplateDef.templateUrl)) {\n        //Async loading for template once template is loaded\n        containerElement = util.createElement('div', Const.CLASS_TABLE_CELL_TOP);\n        var templateUrl = awConfiguration.get('baseUrl') + colRenderTemplateDef.templateUrl;\n        var compiledTemplateFn = getCompiledFunctionFromCache(templateUrl, null);\n\n        if (compiledTemplateFn) {\n          //If compiled function already exists for templateUrl, return\n          updateContainerWithCellTemplate(containerElement, vmo, column.field, colRenderTemplateDef.tooltip, templateUrl, '', colRenderTemplateDef.dependentServices, column, tableElem);\n        } else {\n          loadTemplate(containerElement, vmo, templateUrl, colRenderTemplateDef.dependentServices).then(function (response) {\n            updateContainerWithCellTemplate(response.containerElement, response.vmo, column.field, colRenderTemplateDef.tooltip, response.templateUrl, response.htmlString, response.dependentServices, column, tableElem);\n          });\n        }\n      } else if (!_.isEmpty(colRenderTemplateDef.renderFunction)) {\n        containerElement = util.createElement('div', Const.CLASS_TABLE_CELL_TOP);\n        var args = [vmo, containerElement, column.field, colRenderTemplateDef.tooltip];\n        /** revisitme Santhosh - The below methods to get and load dependent module has changed and both of them are same now.\n         *  Now getDependentModule method returns a promise which is not the case in old afx.\n         *  If the method implementations are changed again, we need to revert the code back to two method calls for get and load.\n         * we need to understand what this cachedDep obj is really doing in terms of performance or if there is any other reason\n         * and once we have that understanding, we need to add similar logic again.\n         * */\n\n        /* var cachedDepModuleObj = getDependentModule( colRenderTemplateDef.deps );\n        if( !cachedDepModuleObj ) {\n            loadDependentModule( colRenderTemplateDef.deps ).then( function( depModuleObj ) {\n                depModuleObj[ colRenderTemplateDef.renderFunction ].apply( null, args );\n                return containerElement;\n            } );\n        } else {\n            cachedDepModuleObj[ colRenderTemplateDef.renderFunction ].apply( null, args );\n        }*/\n\n        loadDependentModule(colRenderTemplateDef.deps).then(function (depModuleObj) {\n          depModuleObj[colRenderTemplateDef.renderFunction].apply(null, args); //return containerElement;\n        });\n      }\n\n      if (containerElement !== null) {\n        containerElement.style.paddingLeft = Const.CUSTOM_CELL_LEFTPADDING_DEFAULT_SPACE + 'px';\n      }\n\n      return containerElement; // If container element is null, default rendering will happen\n    },\n    condition: function (column, vmo, tableElem) {\n      var retrieveHeader = false;\n      var propName = column.field; // If transpose, use the propName representing the vmo to apply the renderer across the row instead of column for transpose.\n      // Don't apply renderer for the first column in transpose since it represents the column property.\n\n      if (tableElem._tableInstance.gridOptions.transpose === true && column.field !== 'transposedColumnProperty') {\n        propName = vmo.props.transposedColumnProperty.dbValue;\n      }\n\n      if (column.enableRendererContribution && isGraphicalRenderrDefinedForProp(propName, tableElem.id, retrieveHeader)) {\n        //If propertyRenderer template defined for a given property, use it for rendering\n        return true;\n      }\n\n      return false;\n    }\n  };\n  var customCellHeaderRenderer = {\n    action: function (column, tableElem) {\n      var retrieveHeader = true;\n      var colRenderTemplateDef = getColRendererTemplateToUse(column.field, tableElem, retrieveHeader);\n      var containerElement = null;\n\n      if (!_.isEmpty(colRenderTemplateDef.headerTemplate)) {\n        //Template processing -> No need for async processing..\n        containerElement = document.createElement('div');\n        updateContainerWithCellTemplate(containerElement, null, column.field, colRenderTemplateDef.tooltip, colRenderTemplateDef.headerTemplate, colRenderTemplateDef.headerTemplate, colRenderTemplateDef.dependentServices, column, tableElem);\n      } else if (!_.isEmpty(colRenderTemplateDef.headerTemplateUrl)) {\n        //Async loading for template once template is loaded\n        containerElement = document.createElement('div');\n        var templateUrl = awConfiguration.get('baseUrl') + colRenderTemplateDef.headerTemplateUrl;\n        var compiledTemplateFn = getCompiledFunctionFromCache(templateUrl, null);\n\n        if (compiledTemplateFn) {\n          //If compiled function already exists for templateUrl, return\n          updateContainerWithCellTemplate(containerElement, null, column.field, colRenderTemplateDef.tooltip, templateUrl, '', colRenderTemplateDef.dependentServices, column, tableElem);\n        } else {\n          loadTemplate(containerElement, null, templateUrl, colRenderTemplateDef.dependentServices).then(function (response) {\n            updateContainerWithCellTemplate(response.containerElement, response.vmo, column.field, colRenderTemplateDef.tooltip, response.templateUrl, response.htmlString, response.dependentServices, column, tableElem);\n          });\n        }\n      } else if (!_.isEmpty(colRenderTemplateDef.headerRenderFunction)) {\n        containerElement = document.createElement('div');\n        var args = [containerElement, column.field, colRenderTemplateDef.tooltip, column];\n        /** revisitme Santhosh - The below methods to get and load dependent module has changed and both of them are same now.\n         *  Now getDependentModule method returns a promise which is not the case in old afx.\n         *  If the method implementations are changed again, we need to revert the code back to two method calls for get and load.\n         * we need to understand what this cachedDep obj is really doing in terms of performance or if there is any other reason\n         * and once we have that understanding, we need to add similar logic again.\n         * */\n\n        /*  var cachedDepModuleObj = getDependentModule( colRenderTemplateDef.deps );\n        if( !cachedDepModuleObj ) {\n            loadDependentModule( colRenderTemplateDef.deps ).then( function( depModuleObj ) {\n                depModuleObj[ colRenderTemplateDef.headerRenderFunction ].apply( null, args );\n                return containerElement;\n            } );\n        } else {\n            cachedDepModuleObj[ colRenderTemplateDef.headerRenderFunction ].apply( null, args );\n        } */\n\n        loadDependentModule(colRenderTemplateDef.deps).then(function (depModuleObj) {\n          depModuleObj[colRenderTemplateDef.headerRenderFunction].apply(null, args);\n        });\n      } else if (!_.isEmpty(colRenderTemplateDef.headerComponent)) {\n        var vmo = {};\n        containerElement = document.createElement('div', Const.CLASS_TABLE_CELL_TOP);\n        createInlineComponent(colRenderTemplateDef.headerComponent, containerElement, vmo, column);\n      }\n\n      return containerElement; // If container element is null, default rendering will happen\n    },\n    condition: function (column, tableElem) {\n      var retrieveHeader = true;\n\n      if (column.enableRendererContribution && isGraphicalRenderrDefinedForProp(column.field, tableElem.id, retrieveHeader)) {\n        //If propertyRenderer template defined for a given property, use it for rendering\n        return true;\n      }\n\n      return false;\n    }\n  };\n  /**\n   * Rich Text Field\n   */\n\n  var richTextCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var prop = vmo.props[column.field];\n      var newValues = getNewValues(prop);\n      var oldValues = getOldValues(prop);\n      var cellTop = util.createElement('ul', Const.CLASS_TABLE_NON_EDIT_CELL_LIST, Const.CLASS_TABLE_CELL_TOP);\n\n      if (tableElem && tableElem._tableInstance.dynamicRowHeightStatus) {\n        cellTop.classList.add(Const.CLASS_TABLE_CELL_TOP_DYNAMIC);\n      } // Add tooltip\n\n\n      if (newValues.length > 0) {\n        var tooltipHTML = getTooltipHTML(newValues);\n        addTooltipListeners(cellTop, tooltipHTML, tableElem);\n      }\n\n      while (newValues.length > 0 || oldValues.length > 0) {\n        var liElement = util.createElement('li', Const.CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM);\n        liElement.style.width = '100%';\n        var rtfContainer;\n        var newValue = newValues.shift();\n        var oldValue = oldValues.shift();\n\n        if (newValue) {\n          if (oldValue) {\n            rtfContainer = util.createElement('div', Const.CLASS_TABLE_RTF_CELL_ITEM, Const.CLASS_AW_CHANGED_TEXT);\n          } else {\n            rtfContainer = util.createElement('div', Const.CLASS_TABLE_RTF_CELL_ITEM);\n          }\n\n          rtfContainer.innerHTML = exports.addHighlights(newValue);\n          liElement.appendChild(rtfContainer);\n        }\n\n        if (hasOldValue(oldValue, prop.oldValue)) {\n          var oldCellTextElement = util.createElement('div', Const.CLASS_AW_OLD_TEXT);\n          oldCellTextElement.innerHTML = exports.addHighlights(oldValue);\n          liElement.appendChild(oldCellTextElement);\n        } // NOTE: For Firefox there is a limitation that the vertical scroll bar is not show up,\n        // because of issue below:\n        // https://stackoverflow.com/questions/28636832/firefox-overflow-y-not-working-with-nested-flexbox\n        // there is a workaround by using { min-height: 0 }, I have not tested it yet and no plan to fix it\n        // now.\n        // It is not only an RTF issue, same problem for string list and object list\n        // Dynamic styling for RTF\n\n\n        if (rtfContainer && rtfContainer.childElementCount > 1 && newValues.length === 1) {\n          liElement.style.height = '100%';\n        }\n\n        cellTop.appendChild(liElement);\n      }\n\n      return cellTop;\n    },\n    condition: function (column, vmo, tableElem, rowElem) {\n      return vmo.props && vmo.props[column.field] && vmo.props[column.field].isRichText;\n    }\n  };\n  /**\n   * Plain Text\n   */\n\n  var simpleTextCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var prop = vmo.props[column.field];\n      var dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n      var cellTop = util.createElement('div', Const.CLASS_TABLE_CELL_TOP);\n\n      if (dynamicRowHeightEnabled) {\n        cellTop.classList.add(Const.CLASS_TABLE_CELL_TOP_DYNAMIC);\n      }\n\n      if (prop.uiValue) {\n        var gridCellText = util.createElement('div', Const.CLASS_WIDGET_TABLE_CELL_TEXT);\n\n        if (dynamicRowHeightEnabled) {\n          gridCellText.classList.add(Const.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC);\n        }\n\n        cellTop.title = prop.uiValue;\n        var parsedValue = sanitizer.htmlEscapeAllowEntities(prop.uiValue, true, true);\n\n        if ((column.isTableCommand || column.isTreeNavigation) && clickableTitleService.hasClickableCellTitleActions()) {\n          addClickableCellTitle(gridCellText, vmo, parsedValue, tableElem);\n        } else {\n          gridCellText.innerHTML = exports.addHighlights(parsedValue);\n        }\n\n        cellTop.appendChild(gridCellText);\n      }\n\n      return cellTop;\n    },\n    condition: function (column, vmo, tableElem, rowElem) {\n      return vmo.props && vmo.props[column.field] && !vmo.props[column.field].isRichText && !vmo.props[column.field].oldValue && !vmo.props[column.field].isArray;\n    }\n  };\n  var plainTextCellRenderer = {\n    action: function (column, vmo, tableElem, rowElem) {\n      var prop = vmo.props[column.field];\n      var newValues = getNewValues(prop);\n      var oldValues = getOldValues(prop);\n      var dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n      var ulElement = util.createElement('ul', Const.CLASS_TABLE_NON_EDIT_CELL_LIST, Const.CLASS_TABLE_CELL_TOP);\n\n      if (dynamicRowHeightEnabled) {\n        ulElement.classList.add(Const.CLASS_TABLE_CELL_TOP_DYNAMIC);\n      } // Add tooltip\n\n\n      if (prop.isArray) {\n        if (newValues.length > 0) {\n          var tooltipHTML = getTooltipHTML(newValues);\n          addTooltipListeners(ulElement, tooltipHTML, tableElem);\n        }\n      } else {\n        ulElement.title = prop.uiValue;\n      }\n\n      while (newValues.length > 0 || oldValues.length > 0) {\n        var liElement = util.createElement('li', Const.CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM);\n        var newValue = newValues.shift();\n        var oldValue = oldValues.shift();\n        var textElem;\n\n        if (newValue) {\n          if (hasOldValue(oldValue, prop.oldValue)) {\n            textElem = util.createElement('div', Const.CLASS_WIDGET_TABLE_CELL_TEXT, Const.CLASS_AW_CHANGED_TEXT);\n          } else {\n            textElem = util.createElement('div', Const.CLASS_WIDGET_TABLE_CELL_TEXT);\n          }\n\n          var parsedValue = sanitizer.htmlEscapeAllowEntities(newValue, true, true);\n          textElem.innerHTML = exports.addHighlights(parsedValue);\n\n          if (dynamicRowHeightEnabled) {\n            textElem.classList.add(Const.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC);\n          }\n\n          liElement.appendChild(textElem);\n        }\n\n        if (oldValue) {\n          var oldCellTextElement = util.createElement('div', Const.CLASS_WIDGET_TABLE_CELL_TEXT, Const.CLASS_AW_OLD_TEXT);\n          oldCellTextElement.innerHTML = exports.addHighlights(oldValue);\n          liElement.appendChild(oldCellTextElement);\n        }\n\n        ulElement.appendChild(liElement);\n      }\n\n      return ulElement;\n    },\n    condition: function (column, vmo, tableElem, rowElem) {\n      return vmo.props && vmo.props[column.field] && !vmo.props[column.field].isRichText && (vmo.props[column.field].isArray || vmo.props[column.field].oldValue);\n    }\n  };\n  var headerCellRenderer = {\n    action: function (column) {\n      var labelElem = document.createElement('div');\n      labelElem.classList.add(Const.CLASS_HEADER_CELL_LABEL);\n      labelElem.textContent = column.displayName;\n      return labelElem;\n    },\n    condition: function () {\n      return true;\n    }\n  };\n  var headerIconCellRenderer = {\n    action: function (column) {\n      let cellContent = document.createElement('div');\n      let imgContainer = util.createElement('div', Const.CLASS_HEADER_ICON_CONTAINER);\n      var cellImg = util.createElement('img', Const.CLASS_HEADER_ICON);\n      cellImg.src = util.getImgURL(column.vmo);\n      cellImg.alt = getImageAltText(column.vmo);\n      imgContainer.appendChild(cellImg);\n      cellContent.appendChild(imgContainer);\n      cellContent.appendChild(headerCellRenderer.action(column));\n      return cellContent;\n    },\n    condition: function (column, tableElem) {\n      return tableElem._tableInstance.gridOptions.enableHeaderIcon === true && column.field !== 'transposedColumnProperty';\n    }\n  };\n  /**\n   * exposed method\n   */\n\n  _renderer.resetHoverCommandElement = function () {\n    if (_cellCmdElem && _cellCmdElem.parentElement) {\n      util.cleanupComponents(_cellCmdElem.parentElement);\n\n      if (_cellCmdElem.parentElement) {\n        _cellCmdElem.parentElement.removeChild(_cellCmdElem);\n      }\n    }\n  };\n\n  _renderer.destroyHoverCommandElement = function () {\n    if (_cellCmdElem && _cellCmdElem.parentElement) {\n      util.cleanupComponents(_cellCmdElem.parentElement);\n\n      if (_cellCmdElem.parentElement) {\n        _cellCmdElem.parentElement.removeChild(_cellCmdElem);\n      }\n\n      util.destroyElement(_cellCmdElem);\n    }\n\n    _cellCmdElem = null;\n  };\n\n  _renderer.getAwCellRenderers = function () {\n    // NOTE: If the condition is not isolated, then the sequence matters.\n    // Decorator renderers should be first in the array since they will call\n    // Cell.createElement to get cell content provided by the next valid renderer.\n    return [commandCellRenderer, customCellRenderer, iconCellRenderer, transposeIconCellRenderer, treeTableCellRenderer, objectCellRenderer, simpleTextCellRenderer, plainTextCellRenderer, richTextCellRenderer];\n  };\n\n  _renderer.getAwHeaderRenderers = function () {\n    return [customCellHeaderRenderer, headerIconCellRenderer, headerCellRenderer];\n  };\n\n  return _renderer;\n};\n/**\n * Check if old value is available or not\n * @param  old value\n * @param old value of prop\n * @return boolean True/False\n */\n\nfunction hasOldValue(oldValue, propOldValue) {\n  return oldValue || !_.isUndefined(propOldValue);\n} // cleanup global variables.\n\n\nexport let cleanup = function () {\n  if (_propVsRenderingTemplate) {\n    _propVsRenderingTemplate = null;\n  }\n\n  if (_defaultRenderingTemplates) {\n    _defaultRenderingTemplates = {};\n  }\n};\nexports = {\n  createCellCommandElement,\n  createTreeCellCommandElement,\n  createCheckMarkElement,\n  addHighlights,\n  createCellRenderer,\n  cleanup\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/awSPLMTableCellRendererFactory.js"],"names":["exports","_defaultRenderingTemplates","_propVsRenderingTemplate","_contributedTemplates","cfgSvc","_","contributedTemplate","isDefaultTemplate","specificRenderingTemplates","defaultPropRenderingTemplate","renderingTemplatesForProp","applyCommandCellScope","scope","column","vmo","getTreeIconCellInfo","id","icon","miscInProcessIndicator","miscExpandedTree","miscCollapsedTree","createIconElement","treeCellButtonHeaderCell","util","Const","tableElem","treeIndent","iconCellInfo","iconElem","document","attr","attrLegacy","createCellDecoratorElement","cellColorContainerElement","cellColorElement","getImageAltText","createCellImageElement","imgURL","svgString","cellImageContainerElement","cellImageElement","toggleTreeCellAction","iconContainerElement","treeCellElement","eventBus","populateHrefContentPerPropValue","deferred","AwPromiseService","objectElement","navigationTokenService","hrefDetails","url","addHrefToAnchorLink","response","addClickableCellTitle","clickableTextDiv","clickableText","data","ctx","tableContext","_tableInstance","clickableTitleService","element","createTitleElement","tableNonEditContainerElement","displayName","parsedValue","sanitizer","gridCellText","dynamicRowHeightEnabled","toggleCellCommandVisibility","addTreeCommandCellEvents","tableInstance","dataProviderName","treeCellButtonElement","treeCommandCellClickListener","event","treeCellImageElement","cellCommandBarElement","isSelected","createCellCommandElement","fields","anchor","isInternal","cellCommandsContainer","cellCmdElem","includeComponent","renderComponent","createTreeCellCommandElement","tableTreeCommandCell","treeCellTop","iconElement","cellDecoratorElement","createCheckMarkElementInternal","commandBarHtml","cellScope","createCheckMarkElement","elem","addHighlights","highlighter","appCtxService","displayValue","openObjectLink","uid","modelObject","cdm","propertyName","commandContext","edit","commandService","createCellRenderer","_renderer","_tooltipElement","createCommandCellHandler","cellTop","_cellCmdElem","destroyCommandCellHandler","addCommandOnHover","commandHandlerParent","removeCommandOnHover","createInlineComponent","subPanelContext","extendedTooltipElement","getTooltipHTML","tooltipInnerHTML","containsOnlyEmptyStrings","values","i","getNewValues","newValues","prop","getOldValues","oldValues","addOpenObjectLinkHandler","openObjLinkHandle","e","createPropertyValueLinkElement","createObjectListFragment","fragment","runActionWithViewModel","index","liForObjectLinks","newValue","oldValue","uidToBeEvaluated","addOldValue","hasOldValue","oldCellTextElement","clearTooltipContent","addTooltipListeners","tooltipTimeout","parentElement","clearTimeout","setTimeout","parentElementDimensions","tableBoundingBox","tableElement","tooltipContent","Array","iconCellRenderer","action","cell","colorIndicatorElement","cellImg","rowHeight","condition","transposeIconCellRenderer","commandCellRenderer","cellContent","Cell","treeTableCellRenderer","objectCellRenderer","ulForObjectLinks","objectListDomFragment","contentDomFragment","getCompiledFunctionFromCache","renderingTemplateCache","AwCacheFactoryService","compiledTemplateFn","loadTemplate","AwHttpService","cache","htmlString","containerElement","templateUrl","dependentServices","updateContainerElement","generatedElement","propName","tooltipProps","basePath","awConfiguration","updateContainerWithCellTemplate","depsToInject","cachedDep","getDependentModule","loadedDep","loadDependentModule","getColRendererTemplateToUse","renderingTemplate","propRenderTemplates","gridId","defaultRenderingTemplate","retrieveHeader","propDefault","propRenderTemplate","isCustomTemplate","specificTemplate","currentTemplate","defaultTemplate","isGraphicalRenderrDefinedForProp","generatePropRendererTemplateMap","propRenderingObj","isHeaderTrue","isCellTrue","getPropName","customCellRenderer","colRenderTemplateDef","args","depModuleObj","customCellHeaderRenderer","richTextCellRenderer","tooltipHTML","liElement","rtfContainer","simpleTextCellRenderer","plainTextCellRenderer","ulElement","textElem","headerCellRenderer","labelElem","headerIconCellRenderer","imgContainer","cleanup"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @swf/swf/no-react-usage */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * DOM Structure:\n * - Cell Command\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_CELL_TOP|aw-splm-tableCellTop\n *         ( Content in CLASS_TABLE_CELL_TOP for all case above )\n *         CLASS_AW_CELL_COMMANDS|aw-jswidgets-gridCellCommands --> Custom command cell if exist\n *         CLASS_NATIVE_CELL_COMMANDS|aw-splm-tableGridCellCommands --> OOTB command cell, check mark\n *\n *\n * - Object/Object List:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_NON_EDIT_CELL_LIST|aw-jswidgets-arrayNonEditValueCellList  --> ( <ul>, CLASS_TABLE_CELL_TOP )\n *         CLASS_TOOLTIP_POPUP|aw-splm-tableTooltipPopup\n *         CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM|aw-jswidgets-arrayValueCellListItem --> ( <li> )\n *           CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS|aw-splm-tablePropertyValueLinks --> ( <a>, innerHTML from addHighlights )\n *           CLASS_AW_OLD_TEXT|aw-jswidgets-oldText --> ( <div>, innerHTML from addHighlights )\n *\n *\n * - Rich Text/Rich Text List:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_NON_EDIT_CELL_LIST|aw-jswidgets-arrayNonEditValueCellList  --> ( <ul>, CLASS_TABLE_CELL_TOP )\n *         CLASS_TOOLTIP_POPUP|aw-splm-tableTooltipPopup\n *         CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM|aw-jswidgets-arrayValueCellListItem  --> ( <li> )\n *           CLASS_TABLE_RTF_CELL_ITEM|aw-splm-tableRTFCellItem ( <div>, innerHTML from addHighlights )\n *           CLASS_AW_OLD_TEXT|aw-jswidgets-oldText --> ( <div>, innerHTML from addHighlights )\n *\n *\n * - Changed Text/Text List:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_NON_EDIT_CELL_LIST|aw-jswidgets-arrayNonEditValueCellList  --> ( <ul>, CLASS_TABLE_CELL_TOP )\n *         CLASS_TOOLTIP_POPUP|aw-splm-tableTooltipPopup\n *         CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM|aw-jswidgets-arrayValueCellListItem --> ( <li> )\n *           CLASS_WIDGET_TABLE_CELL_TEXT|aw-splm-tableCellText --> ( <div>, innerHTML from addHighlights )\n *           CLASS_AW_OLD_TEXT|aw-jswidgets-oldText --> ( <div>, innerHTML from addHighlights )\n *\n * - Text:\n *     CLASS_CELL|ui-grid-cell\n *       CLASS_TABLE_CELL_TOP|aw-splm-tableCellTop --> ( <div> )\n *         CLASS_WIDGET_TABLE_CELL_TEXT|aw-splm-tableCellText --> ( <div>, innerHTML from addHighlights )\n *\n *\n * @module js/awSPLMTableCellRendererFactory\n */\nimport sanitizer from 'js/sanitizer';\nimport appCtxService from 'js/appCtxService';\nimport commandService from 'js/command.service';\nimport clickableTitleService from 'js/clickableTitleService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport AwHttpService from 'js/awHttpService';\nimport AwPromiseService from 'js/awPromiseService';\nimport AwCacheFactoryService from 'js/awCacheFactoryService';\nimport navigationTokenService from 'js/navigationTokenService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport cfgSvc from 'js/configurationService';\nimport { includeComponent, getDependentModule, loadDependentModule } from 'js/moduleLoader';\nimport awConfiguration from 'js/awConfiguration';\nimport { renderComponent } from 'js/declReactUtils';\nimport { AppCtxComponent } from 'js/reactAppCtx';\nimport { svgString as miscInProcessIndicator } from 'image/miscInProcessIndicator16.svg';\nimport { svgString as miscExpandedTree } from 'image/miscExpandedTree12.svg';\nimport { svgString as miscCollapsedTree } from 'image/miscCollapsedTree12.svg';\nimport util from 'js/splmTableUtils';\nimport Const from 'js/splmTableConstants';\nimport Cell from 'js/splmTableCellRenderer';\n\nvar exports = {};\n\nvar _propVsRenderingTemplate;\nvar _defaultRenderingTemplates = {};\n\nlet highlighter;\n\n/**\n * Method to render rows\n *\n * @param {Number} startIndex Start render index\n * @param {Number} endIndex End render Index\n */\nfunction generatePropRendererTemplateMap() {\n    _propVsRenderingTemplate = {};\n    var _contributedTemplates = cfgSvc.getCfgCached( 'propertyRendererTemplates' );\n    _.forEach( _contributedTemplates, function( contributedTemplate ) {\n        if( !_.isEmpty( contributedTemplate.headerTemplate ) || !_.isEmpty( contributedTemplate.headerTemplateUrl ) ||\n            !_.isEmpty( contributedTemplate.headerRenderFunction ) || !_.isEmpty( contributedTemplate.headerComponent ) ) {\n            contributedTemplate.isHeaderTemplate = true;\n        }\n        if( !_.isEmpty( contributedTemplate.template ) || !_.isEmpty( contributedTemplate.templateUrl ) ||\n            !_.isEmpty( contributedTemplate.renderFunction ) ) {\n            contributedTemplate.isCellTemplate = true;\n        }\n\n        var isDefaultTemplate = false;\n        if( _.isEmpty( contributedTemplate.grids ) ) {\n            // default rendering template for property\n            isDefaultTemplate = true;\n        }\n        // Get ModelTypes for this Indicator Json\n        if( _.isEmpty( contributedTemplate.columns ) ) {\n            _.forEach( contributedTemplate.grids, function( gridid ) {\n                _defaultRenderingTemplates[ gridid ] = contributedTemplate;\n            } );\n        }\n        _.forEach( contributedTemplate.columns, function( column ) {\n            if( !_propVsRenderingTemplate[ column ] ) {\n                _.set( _propVsRenderingTemplate, [ column ], { specificRenderingTemplates: [], defaultPropRenderingTemplate: {} } );\n            }\n            var renderingTemplatesForProp = _propVsRenderingTemplate[ column ];\n            if( isDefaultTemplate ) {\n                _.set( renderingTemplatesForProp, 'defaultPropRenderingTemplate', contributedTemplate );\n            } else {\n                renderingTemplatesForProp.specificRenderingTemplates.push( contributedTemplate );\n            }\n        } );\n    } );\n}\n\nvar applyCommandCellScope = function( cellCmdElem, column, vmo, extraDigest ) {\n    // The below getElementScope method is commented out and the usages are commented too by assigning empty object to scope.\n    //var scope = util.getElementScope( cellCmdElem );\n    var scope = {};\n    scope.anchor = column.commandsAnchor;\n    scope.commandContext = {\n        vmo: vmo\n    };\n\n    if( vmo.props !== undefined ) {\n        scope.prop = vmo.props[ column.field ];\n    }\n\n    if( extraDigest ) {\n        scope.$evalAsync();\n    }\n};\n\nconst getTreeIconCellInfo = function( vmo ) {\n    if( vmo.loadingStatus ) {\n        return { id: 'miscInProcessIndicator', icon: miscInProcessIndicator };\n    } else if( vmo.isLeaf ) {\n        // we made the decision to stop rendering 'typeBlankIcon' because (1) there is no visual difference, (2) we want\n        // to decrease the number of DOM elements and (3) we don't know the history of why it was there.\n        return {};\n    } else if( vmo.isExpanded ) {\n        return { id: 'miscExpandedTree', icon: miscExpandedTree };\n    }\n    return { id: 'miscCollapsedTree', icon: miscCollapsedTree };\n};\n\n/**\n * Creates the Icon cell for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n *\n * @returns {DOMElement} icon element\n */\nconst createIconElement = function( tableElem, vmo ) {\n    let treeCellButtonHeaderCell = util.createElement( 'div', Const.CLASS_TREE_ROW_HEADER_BUTTONS, Const.CLASS_TREE_BASE_HEADER );\n    if( !vmo.isLeaf ) {\n        treeCellButtonHeaderCell.classList.add( Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD );\n        treeCellButtonHeaderCell.tabIndex = -1;\n        tableElem._tableInstance.keyboardService.setOnFocusAndBlur( treeCellButtonHeaderCell );\n    }\n    const treeIndent = 16;\n    treeCellButtonHeaderCell.style.marginLeft = treeIndent * vmo.levelNdx + 'px';\n    treeCellButtonHeaderCell.title = vmo._twistieTitle;\n    const iconCellInfo = getTreeIconCellInfo( vmo );\n    // this if check is for the vmo.isLeaf use case where there is no need to render an icon\n    if( iconCellInfo && iconCellInfo.id ) {\n        let iconElem = document.createElement( 'span' );\n        iconElem.classList.add( 'aw-icon', 'aw-base-icon' );\n        let attr = document.createAttribute( 'iconid' );\n        attr.value = iconCellInfo.id;\n        let attrLegacy = document.createAttribute( 'icon-id' );\n        attrLegacy.value = iconCellInfo.id;\n        iconElem.setAttributeNode( attr );\n        iconElem.setAttributeNode( attrLegacy );\n        iconElem.innerHTML = iconCellInfo.icon;\n        treeCellButtonHeaderCell.appendChild( iconElem );\n    }\n\n    return treeCellButtonHeaderCell;\n};\n\n/**\n * Creates the cell decorator element for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n *\n * @returns {DOMElement} cell decorator element\n */\nvar createCellDecoratorElement = function( tableElem, vmo ) {\n    var cellColorContainerElement = util.createElement( 'div', Const.CLASS_GRID_CELL_COLOR_CONTAINER, Const.CLASS_TREE_COLOR_CONTAINER );\n    var cellColorElement = util.createColorIndicatorElement( vmo );\n    cellColorContainerElement.appendChild( cellColorElement );\n\n    return cellColorContainerElement;\n};\n\n/**\n * Get the img element tag alt text for WCAG accessibility compliance\n * @param {Object} vmo - View model object\n * @returns {String} Returns alt text\n */\nvar getImageAltText = function( vmo ) {\n    if( vmo.hasThumbnail ) {\n        return vmo.cellHeader1;\n    } else if( vmo.props && vmo.props.object_type && vmo.props.object_type.uiValue ) {\n        return vmo.props.object_type.uiValue;\n    }\n    return vmo.modelType && vmo.modelType.displayName ? vmo.modelType.displayName : '';\n};\n\n/**\n * Creates the cell image element for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n *\n * @returns {DOMElement} cell image element\n */\nvar createCellImageElement = function( tableElem, vmo ) {\n    let imgURL = util.getImgURL( vmo );\n    let svgString = vmo.svgString;\n    if( imgURL === '' && !svgString ) {\n        return null;\n    }\n\n    let cellImageContainerElement = util.createElement( 'div', Const.CLASS_GRID_CELL_IMAGE );\n    let cellImageElement = null;\n    if( imgURL && imgURL !== '' ) {\n        cellImageElement = util.createElement( 'img', Const.CLASS_ICON_BASE );\n        cellImageElement.src = imgURL;\n    } else if( svgString ) {\n        cellImageElement = util.createElement( 'span', Const.CLASS_ICON_BASE );\n        cellImageElement.innerHTML = svgString;\n    }\n    if( cellImageElement ) {\n        cellImageElement.alt = getImageAltText( vmo );\n        cellImageContainerElement.appendChild( cellImageElement );\n    }\n    return cellImageContainerElement;\n};\n\nvar toggleTreeCellAction = function( vmo, tableElem, treeCellElement ) {\n    if( vmo.isExpanded || vmo.isInExpandBelowMode ) {\n        // collapse\n        delete vmo.isExpanded;\n        vmo.isInExpandBelowMode = false;\n    } else {\n        vmo.isExpanded = true;\n        // Set icon cell to loading icon\n        var iconContainerElement = treeCellElement.getElementsByClassName( Const.CLASS_ICON_BASE )[ 0 ];\n        if( iconContainerElement !== undefined ) {\n            iconContainerElement.innerHTML = miscInProcessIndicator;\n        }\n    }\n    // Prevent the selected row from being scrolled to if it goes out of view\n    tableElem._tableInstance.tableInstanceCallbacks.unsetScrollToRowIndex();\n    if( tableElem._tableInstance.tableInstanceCallbacks.toggleTreeNode ) {\n        tableElem._tableInstance.tableInstanceCallbacks.toggleTreeNode( vmo );\n    } else {\n        eventBus.publish( tableElem.id + '.plTable.toggleTreeNode', vmo );\n    }\n};\n\nvar populateHrefContentPerPropValue = function( objectElement, scope, uidToBeEvaluated, vmo ) {\n    var deferred = AwPromiseService.instance.defer();\n    if( objectElement && scope && uidToBeEvaluated ) {\n        navigationTokenService.getNavigationContent( scope, uidToBeEvaluated, vmo ).then( function( urlDetails ) {\n            var hrefDetails = urlDetails;\n            if( hrefDetails ) {\n                deferred.resolve( { objectElement: objectElement, url: hrefDetails } );\n            }\n        } );\n    }\n    return deferred.promise;\n};\n\nvar addHrefToAnchorLink = function( objectElement, scope, uidToBeEvaluated, vmo ) {\n    objectElement.addEventListener( 'mouseenter', function() {\n        populateHrefContentPerPropValue( objectElement, scope, uidToBeEvaluated, vmo ).then( function( response ) {\n            if( !_.isUndefined( response ) ) {\n                objectElement = util.addAttributeToDOMElement( response.objectElement, 'href', response.url.urlContent );\n                objectElement = util.addAttributeToDOMElement( objectElement, 'target', response.url.target );\n            }\n        } );\n    } );\n    return objectElement;\n};\n\nvar addClickableCellTitle = function( element, vmo, value, tableElem ) {\n    // make cell text clickable\n    var clickableTextDiv = util.createElement( 'div' );\n    var clickableText = util.createElement( 'a', 'aw-uiwidgets-clickableTitle' );\n    const scope = {\n        data: tableElem._tableInstance.declViewModel,\n        ctx: tableElem._tableInstance.ctx,\n        tableContext: tableElem._tableInstance\n    };\n    clickableText.onclick = function( event ) {\n        scope.vmo = vmo;\n        clickableTitleService.doIt( event, scope, tableElem._tableInstance.runActionWithViewModel );\n    };\n\n    clickableText.innerHTML = exports.addHighlights( value );\n    clickableTextDiv.appendChild( clickableText );\n    element.appendChild( clickableTextDiv );\n};\n\n/**\n * Creates the title and command container element for tree command cell.\n *\n * @param {DOMElement} tableElem tree table element\n * @param {Object} vmo the vmo for the cell\n * @param {Object} column the column associated with the cell\n * @returns {DOMElement} title/command container element\n */\nlet createTitleElement = function( tableElem, vmo, column ) {\n    let tableNonEditContainerElement = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER,\n        Const.CLASS_LAYOUT_ROW_CONTAINER );\n    let displayName = vmo.displayName;\n    tableNonEditContainerElement.title = displayName;\n\n    let parsedValue = sanitizer.htmlEscapeAllowEntities( displayName, true, true );\n    let gridCellText = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_CELL_TEXT );\n\n    if( ( column.isTableCommand || column.isTreeNavigation ) && clickableTitleService.hasClickableCellTitleActions() ) {\n        addClickableCellTitle( gridCellText, vmo, parsedValue, tableElem );\n    } else {\n        gridCellText.innerHTML = exports.addHighlights( parsedValue );\n    }\n\n    const dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n    if( dynamicRowHeightEnabled ) {\n        tableNonEditContainerElement.classList.add( Const.CLASS_TABLE_CELL_TOP_DYNAMIC );\n        gridCellText.classList.add( Const.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC );\n    }\n\n    // Skeletons fix - if no cell content, remove table cell text class\n    if( gridCellText.innerHTML === '' ) {\n        gridCellText.classList.remove( Const.CLASS_WIDGET_TABLE_CELL_TEXT );\n    }\n\n    tableNonEditContainerElement.appendChild( gridCellText );\n\n    return tableNonEditContainerElement;\n};\n\n/**\n * Show or hide the element based on 'isSelected'.\n *\n * @param {DOMElement} element DOM element to show/hide\n * @param {Boolean} isSelected used to either show or hide element\n */\nvar toggleCellCommandVisibility = function( element, isSelected ) {\n    if( isSelected ) {\n        util.showHideElement( element, false );\n    } else {\n        util.showHideElement( element, true );\n    }\n};\n\n/**\n * Add events to the tree command cell elements.\n *\n * @param {DOMElement} treeCellElement tree cell container element\n * @param {Object} vmo the vmo for the cell\n * @param {DOMElement} tableElem table element\n */\nvar addTreeCommandCellEvents = function( treeCellElement, vmo, tableElem ) {\n    var tableInstance = util.getTableInstance( tableElem );\n    var dataProviderName = tableInstance.dataProvider.name;\n\n    var treeCellButtonElement = treeCellElement.getElementsByClassName( Const.CLASS_TREE_ROW_HEADER_BUTTONS )[ 0 ];\n    if( treeCellButtonElement ) {\n        const treeCommandCellClickListener = function() {\n            if( !vmo.isLeaf && util.isExpandAllowed( tableElem ) ) {\n                toggleTreeCellAction( vmo, tableElem, treeCellElement );\n            }\n        };\n        treeCellButtonElement.addEventListener( 'click', treeCommandCellClickListener );\n        treeCellButtonElement.addEventListener( 'keydown', function( event ) {\n            if( event.code === 'Enter' || event.code === 'Space' ) {\n                treeCommandCellClickListener();\n            }\n        } );\n    }\n\n    var treeCellImageElement = treeCellElement.getElementsByClassName( Const.CLASS_GRID_CELL_IMAGE )[ 0 ];\n    if( treeCellImageElement ) {\n        treeCellImageElement.addEventListener( 'click', function() {\n            eventBus.publish( 'plTable.imageButtonClick', vmo );\n        } );\n    }\n\n    var cellCommandBarElement = treeCellElement.getElementsByClassName( 'cellCommandBarContainer' )[ 0 ];\n    if( cellCommandBarElement ) {\n        var isSelected = tableInstance.dataProvider.selectionModel.multiSelectEnabled && vmo.selected;\n        toggleCellCommandVisibility( cellCommandBarElement, isSelected );\n\n        eventBus.subscribe( dataProviderName + '.selectionChangeEvent', function() {\n            isSelected = tableInstance.dataProvider.selectionModel.multiSelectEnabled && vmo.selected;\n            toggleCellCommandVisibility( cellCommandBarElement, isSelected );\n        } );\n    }\n};\n\n/**\n * @memberOf js/awSPLMTableCellRendererFactory\n *\n * This method is used for creating cell commands for PL Table in AW usecase.\n *\n * @param {Object} column - column Definition\n * @param {Object} vmo - View model object\n * @param {Boolean} [isInternal] - true if function being called from internal PL Table code\n * @returns {DOMElement} DOMElement presents cell command bar\n *\n */\nexport let createCellCommandElement = function( column, vmo, isInternal ) {\n    const fields = {\n        anchor: column.commandsAnchor,\n        column: column,\n        vmo: vmo,\n        isInternal: isInternal\n    };\n    var cellCommandsContainer = util.createElement( 'div', Const.CLASS_AW_CELL_COMMANDS_CONTAINER );\n    let cellCmdElem = includeComponent( 'AwTableCommandBar', fields );\n    renderComponent( <AppCtxComponent>{ cellCmdElem }</AppCtxComponent>, cellCommandsContainer );\n    return cellCommandsContainer;\n};\n\nexport let createTreeCellCommandElement = function( column, vmo, tableElem ) {\n    // CELL CONTAINER\n    var tableTreeCommandCell = util.createElement( 'div', Const.CLASS_AW_TREE_COMMAND_CELL, Const.CLASS_WIDGET_TABLE_CELL );\n    var treeCellTop = util.createElement( 'div', Const.CLASS_AW_JS_CELL_TOP, Const.CLASS_WIDGET_UI_NON_EDIT_CELL );\n    tableTreeCommandCell.appendChild( treeCellTop );\n\n    // ICON\n    var iconElement = createIconElement( tableElem, vmo );\n    treeCellTop.appendChild( iconElement );\n\n    // DECORATOR\n    var cellDecoratorElement = createCellDecoratorElement( tableElem, vmo );\n    treeCellTop.appendChild( cellDecoratorElement );\n\n    // IMAGE\n    var cellImageElement = createCellImageElement( tableElem, vmo );\n    if( cellImageElement ) {\n        treeCellTop.appendChild( cellImageElement );\n    }\n\n    // TITLE\n    var tableNonEditContainerElement = createTitleElement( tableElem, vmo, column );\n    treeCellTop.appendChild( tableNonEditContainerElement );\n\n    addTreeCommandCellEvents( tableTreeCommandCell, vmo, tableElem );\n\n    return tableTreeCommandCell;\n};\n\nvar createCheckMarkElementInternal = function( tableElem ) {\n    var commandBarHtml =\n        '<div class=\"aw-splm-tableCheckBoxPresent\" >' + //\n        '<a class=\"aw-commands-cellCommandCommon\">' + //\n        '<div class=\"afx-checkbox afx-checkbox-label-side\">' + //\n        '<input type=\"checkbox\" class=\"aw-jswidgets-checkboxButton\"/>' + //\n        '<span class=\"afx-checkbox-md-style\">' + //\n        '<span class=\"check\"></span>' + //\n        '</span>' + //\n        '</div>' + //\n        '</a>' + //\n        '</div>'; //\n    var cellScope = {};\n\n    return util.createNgElement( commandBarHtml, tableElem, cellScope );\n};\n\n// NOTE: By this design, the cell command will only be available for OOTB AW Cell.\nexport let createCheckMarkElement = function( column, vmo, tableElem ) {\n    var elem = createCheckMarkElementInternal( tableElem );\n    applyCommandCellScope( elem, column, vmo );\n    return elem;\n};\n\nexport let addHighlights = function( displayValue ) {\n    if( !highlighter ) {\n        highlighter = appCtxService.getCtx( 'highlighter' );\n    }\n    if( highlighter && typeof displayValue === 'string' ) {\n        return displayValue.replace( highlighter.regEx, highlighter.style );\n    }\n    return displayValue;\n};\n\n// This function is called when we click on any object link\n// REFACTOR: Awp0ShowObjectCell is TC specific. Try to pull command ID from solution configuration\n// instead.\nvar openObjectLink = function( propertyName, uid, objectElement ) {\n    if( uid && uid.length > 0 ) {\n        var modelObject = cdm.getObject( uid );\n\n        var vmo = {\n            propertyName: propertyName,\n            uid: uid\n        };\n\n        var commandContext = {\n            vmo: modelObject || vmo, // vmo needed for gwt commands\n            edit: false\n        };\n        commandService.executeCommand( 'Awp0ShowObjectCell', null, null, commandContext, objectElement.runActionWithViewModel );\n    }\n};\n\n// REFACTOR: The only meaning here to keep this is the _cellCmdElem mechanism, we can separate it out later.\nexport let createCellRenderer = function() {\n    var _renderer = {};\n\n    var _cellCmdElem;\n\n    var _tooltipElement = util.createElement( 'div', Const.CLASS_AW_POPUP, Const.CLASS_AW_TOOLTIP_POPUP, Const.CLASS_TOOLTIP_POPUP );\n\n    var createCommandCellHandler = function( cellTop, column, vmo, tableElem ) {\n        return function() {\n            //no commands visible when in multiselection/visible checkbox\n            if( !tableElem._tableInstance.showCheckBox && cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER ).length === 0 ) {\n                _cellCmdElem = createCellCommandElement( column, vmo, true );\n                cellTop.appendChild( _cellCmdElem );\n            }\n        };\n    };\n\n    var destroyCommandCellHandler = function( cellTop, column, vmo, tableElem ) {\n        return function() {\n            //no commands visible when in multiselection/visible checkbox\n            if( !tableElem._tableInstance.showCheckBox && cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER ).length === 1 && _cellCmdElem ) {\n                _renderer.destroyHoverCommandElement();\n            }\n        };\n    };\n\n    var addCommandOnHover = function( commandHandlerParent, column, vmo, tableElem ) {\n        commandHandlerParent.addEventListener( 'mouseover', createCommandCellHandler( commandHandlerParent, column, vmo, tableElem ) );\n    };\n\n    var removeCommandOnHover = function( commandHandlerParent, column, vmo, tableElem ) {\n        commandHandlerParent.addEventListener( 'mouseleave', destroyCommandCellHandler( commandHandlerParent, column, vmo, tableElem ) );\n    };\n\n    var createInlineComponent = function( extendedTooltip, containerElement, vmo, column ) {\n        const subPanelContext = {\n            vmo: vmo,\n            column: column\n        };\n        let extendedTooltipElement = includeComponent( extendedTooltip, subPanelContext );\n        if( containerElement ) {\n            renderComponent( <AppCtxComponent>{ extendedTooltipElement }</AppCtxComponent>, containerElement );\n        }\n        return containerElement;\n    };\n\n    var getTooltipHTML = function( values ) {\n        var tooltipInnerHTML = '<ul>';\n        _.forEach( values, function( value ) {\n            tooltipInnerHTML += '<li>' + exports.addHighlights( value ) + '</li>';\n        } );\n        tooltipInnerHTML += '</ul>';\n        return tooltipInnerHTML;\n    };\n\n    var containsOnlyEmptyStrings = function( values ) {\n        if( values.length ) {\n            for( var i = 0; i < values.length; i++ ) {\n                if( values[ i ] !== '' ) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n\n    var getNewValues = function( prop ) {\n        var newValues = [];\n        // Get the new values, return an empty array if the values are all empty strings\n        // to avoid creating unnecessary DOM elements.\n        if( prop.isArray === true ) {\n            // Only use uiValues if displayValues is not defined.\n            if( prop.displayValues ) {\n                if( !containsOnlyEmptyStrings( prop.displayValues ) ) {\n                    newValues = prop.displayValues.slice();\n                }\n            } else if( prop.uiValues ) {\n                if( !containsOnlyEmptyStrings( prop.uiValues ) ) {\n                    newValues = prop.uiValues.slice();\n                }\n            }\n        } else if( !containsOnlyEmptyStrings( [ prop.uiValue ] ) ) {\n            newValues = [ prop.uiValue ];\n        }\n        return newValues;\n    };\n\n    var getOldValues = function( prop ) {\n        var oldValues = [];\n        if( prop.isArray === true && prop.oldValues && !containsOnlyEmptyStrings( prop.oldValues ) ) {\n            oldValues = prop.oldValues.slice();\n        } else if( prop.oldValue && !containsOnlyEmptyStrings( [ prop.oldValue ] ) ) {\n            oldValues = [ prop.oldValue ];\n        }\n        return oldValues;\n    };\n\n    var addOpenObjectLinkHandler = function( objectElement, prop, index ) {\n        var openObjLinkHandle = function( e ) {\n            if( e.target && e.target.tagName.toLowerCase() === 'a' && e.target.href !== '' ) {\n                return;\n            }\n            if( !prop.isEditable ) {\n                e.cancelBubble = true;\n                openObjectLink( prop.propertyName, prop.dbValues[ index ], objectElement );\n            }\n        };\n\n        objectElement.addEventListener( 'click', function( event ) {\n            openObjLinkHandle( event );\n        } );\n\n        objectElement.addEventListener( 'keydown', function( event ) {\n            if( event.code === 'Enter' || event.code === 'Space' ) {\n                openObjLinkHandle( event );\n            }\n        } );\n    };\n\n    const createPropertyValueLinkElement = function( prop, oldValue ) {\n        if( prop.isEditable ) {\n            return util.createElement( 'a', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS_DISABLED );\n        } else if( oldValue ) {\n            return util.createElement( 'a', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS, Const.CLASS_AW_CHANGED_TEXT );\n        }\n        return util.createElement( 'a', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS );\n    };\n\n    var createObjectListFragment = function( prop, addOldValue, scope, dynamicRowHeightEnabled, tableElem ) {\n        var fragment = document.createDocumentFragment();\n        var newValues = getNewValues( prop );\n        var oldValues = getOldValues( prop );\n        let runActionWithViewModel = tableElem._tableInstance.runActionWithViewModel;\n        var index = 0;\n        while( newValues.length > 0 || oldValues.length > 0 ) {\n            var liForObjectLinks = util.createElement( 'li', Const.CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM );\n            var newValue = newValues.shift();\n            var oldValue = oldValues.shift();\n\n            if( newValue ) {\n                // use a different class when there is an object array.\n                let objectElement = createPropertyValueLinkElement( prop, oldValue );\n                objectElement.tabIndex = -1;\n                if( dynamicRowHeightEnabled ) {\n                    objectElement.style.whiteSpace = 'normal';\n                }\n                // href not to be associated with editable prop\n                if( !util.isBulkEditing( tableElem ) ) {\n                    // associating every prop with href\n                    var uidToBeEvaluated = '';\n                    if( prop.isArray ) {\n                        uidToBeEvaluated = prop.dbValue[ index ];\n                    } else {\n                        uidToBeEvaluated = prop.dbValue;\n                    }\n                    addHrefToAnchorLink( objectElement, scope, uidToBeEvaluated );\n                }\n                objectElement.runActionWithViewModel = runActionWithViewModel;\n                addOpenObjectLinkHandler( objectElement, prop, index );\n                objectElement.innerHTML = exports.addHighlights( newValue );\n                liForObjectLinks.appendChild( objectElement );\n            }\n\n            if( addOldValue && hasOldValue( oldValue, prop.oldValue ) ) {\n                var oldCellTextElement = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS_DISABLED, Const.CLASS_AW_OLD_TEXT );\n                oldCellTextElement.innerHTML = exports.addHighlights( oldValue );\n                liForObjectLinks.appendChild( oldCellTextElement );\n            }\n\n            fragment.appendChild( liForObjectLinks );\n\n            // Add cell text class to last li\n            if( fragment.childNodes.length > 0 ) {\n                fragment.childNodes[ fragment.childNodes.length - 1 ].classList.add( Const.CLASS_WIDGET_TABLE_CELL_TEXT );\n            }\n            index++;\n        }\n        return fragment;\n    };\n\n    /**\n     * Clear the child elements of the _tooltipElement.\n     */\n    var clearTooltipContent = function() {\n        if( _tooltipElement.parentElement ) {\n            _tooltipElement.parentElement.removeChild( _tooltipElement );\n        }\n        while( _tooltipElement.firstChild ) {\n            _tooltipElement.removeChild( _tooltipElement.firstChild );\n        }\n    };\n\n    var addTooltipListeners = function( parentElement, tooltipContent, tableElement ) {\n        var tooltipTimeout = null;\n        parentElement.addEventListener( 'mouseenter', function( event ) {\n            clearTimeout( tooltipTimeout );\n            if( event.offsetX > event.target.clientWidth ) {\n                return false;\n            }\n            tooltipTimeout = setTimeout( function() {\n                clearTooltipContent();\n                var parentElementDimensions = parentElement.getBoundingClientRect();\n                _tooltipElement.style.left = parentElementDimensions.left + 'px';\n                _tooltipElement.style.top = parentElementDimensions.top + 'px';\n                var tableBoundingBox = tableElement.getBoundingClientRect();\n                _tooltipElement.style.maxWidth = tableBoundingBox.right - parentElementDimensions.left + 'px';\n                // When tooltipContent is a document fragment, convert to array of html elements to maintain\n                // references after appending\n                if( tooltipContent instanceof DocumentFragment ) {\n                    tooltipContent = Array.prototype.slice.call( tooltipContent.childNodes );\n                }\n\n                if( Array.isArray( tooltipContent ) ) {\n                    for( var i = 0; i < tooltipContent.length; i++ ) {\n                        _tooltipElement.appendChild( tooltipContent[ i ] );\n                    }\n                } else if( tooltipContent instanceof Element ) {\n                    _tooltipElement.appendChild( tooltipContent );\n                } else {\n                    _tooltipElement.innerHTML = tooltipContent;\n                }\n                parentElement.appendChild( _tooltipElement );\n            }, 750 );\n        } );\n\n        parentElement.addEventListener( 'mouseleave', function() {\n            clearTimeout( tooltipTimeout );\n            tooltipTimeout = setTimeout( clearTooltipContent, 750 );\n        } );\n\n        return _tooltipElement;\n    };\n\n    /**\n     * Icon cell\n     */\n    var iconCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var cell = util.createElement( 'div', Const.CLASS_CELL_CONTENTS, Const.CLASS_SPLM_TABLE_ICON_CELL );\n\n            var colorIndicatorElement = util.createColorIndicatorElement( vmo );\n            cell.appendChild( colorIndicatorElement );\n\n            var cellImg = util.createElement( 'img', Const.CLASS_ICON_BASE, Const.CLASS_ICON_TYPE,\n                Const.CLASS_SPLM_TABLE_ICON );\n            var rowHeight = util.getTableRowHeightForIconCellRenderer( util.getTableInstance( tableElem ).gridOptions, undefined );\n            if( rowHeight !== undefined ) {\n                cellImg.style.height = rowHeight + 'px';\n                cellImg.style.width = rowHeight + 'px';\n            }\n            cellImg.src = util.getImgURL( vmo );\n            cellImg.alt = getImageAltText( vmo );\n            cell.appendChild( cellImg );\n            return cell;\n        },\n        condition: function( column, vmo, tableElem ) {\n            return column.name === 'icon';\n        }\n    };\n\n    /**\n     * Transpose Icon cell\n     */\n    const transposeIconCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            const cell = util.createElement( 'div', Const.CLASS_CELL_CONTENTS, Const.CLASS_SPLM_TABLE_ICON_CELL );\n\n            const colorIndicatorElement = util.createColorIndicatorElement( vmo );\n            cell.appendChild( colorIndicatorElement );\n\n            const cellImg = util.createElement( 'img', Const.CLASS_ICON_BASE, Const.CLASS_ICON_TYPE,\n                Const.CLASS_SPLM_TABLE_ICON );\n            const rowHeight = util.getTableRowHeightForIconCellRenderer( util.getTableInstance( tableElem ).gridOptions, undefined );\n            if( rowHeight !== undefined ) {\n                cellImg.style.height = rowHeight + 'px';\n                cellImg.style.width = rowHeight + 'px';\n            }\n            cellImg.src = util.getImgURL( vmo.props[ column.field ] );\n            cellImg.alt = getImageAltText( vmo );\n            cell.appendChild( cellImg );\n            return cell;\n        },\n        condition: function( column, vmo, tableElem ) {\n            return tableElem._tableInstance.gridOptions.transpose === true && vmo.name === 'icon' && column.field !== 'transposedColumnProperty';\n        }\n    };\n\n    /**\n     * Command in cell\n     */\n    var commandCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var cellContent = Cell.createElement( column, vmo, tableElem, rowElem );\n            if( cellContent ) {\n                addCommandOnHover( cellContent, column, vmo, tableElem );\n                removeCommandOnHover( cellContent, column, vmo, tableElem );\n            }\n            return cellContent;\n        },\n        condition: function( column, vmo, tableElem, rowElem ) {\n            return column.isTableCommand;\n        }\n    };\n\n    /**\n     * Tree Node\n     */\n    var treeTableCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var createTreeCellCommandElement = exports.createTreeCellCommandElement( column, vmo, tableElem );\n            var commandHandlerParent = createTreeCellCommandElement.getElementsByClassName( Const.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER )[ 0 ];\n            addCommandOnHover( commandHandlerParent, column, vmo, tableElem );\n            removeCommandOnHover( commandHandlerParent, column, vmo, tableElem );\n            return createTreeCellCommandElement;\n        },\n        condition: function( column, vmo, tableElem, rowElem ) {\n            return column.isTreeNavigation;\n        }\n    };\n\n    /**\n     * AW Object Reference\n     */\n    var objectCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var prop = vmo.props[ column.field ];\n            var ulForObjectLinks = util.createElement( 'ul', Const.CLASS_TABLE_NON_EDIT_CELL_LIST, Const.CLASS_TABLE_CELL_TOP );\n            var dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n            if( dynamicRowHeightEnabled ) {\n                ulForObjectLinks.classList.add( Const.CLASS_TABLE_CELL_TOP_DYNAMIC );\n            }\n\n            // Prevent wrapping for cells that could have a command\n            if( column.isTableCommand === true ) {\n                ulForObjectLinks.style.flexWrap = 'nowrap';\n                ulForObjectLinks.style.overflow = 'hidden';\n            }\n\n            var values = prop.displayValues || prop.uiValues;\n            // Add tooltip\n            /** revisitme Shaishav: What is the replacement? Do we need anything from parent element?\n              * tstark - needed for navigationToken, only thing added is .vmo to scope, anything else is needed here\n         var scope = util.getElementScope( tableElem.parentElement, true );\n          */\n            var scope = {};\n            if( prop.isArray && values.length > 0 ) {\n                var objectListDomFragment = createObjectListFragment( prop, null, scope, dynamicRowHeightEnabled, tableElem );\n                if( objectListDomFragment ) {\n                    addTooltipListeners( ulForObjectLinks, objectListDomFragment, tableElem );\n                }\n            } else {\n                ulForObjectLinks.title = prop.uiValue;\n            }\n\n            var contentDomFragment = createObjectListFragment( prop, true, scope, dynamicRowHeightEnabled, tableElem );\n            if( contentDomFragment ) {\n                ulForObjectLinks.appendChild( contentDomFragment );\n            }\n            return ulForObjectLinks;\n        },\n        condition: function( column, vmo, tableElem, rowElem ) {\n            return vmo.props &&\n                vmo.props[ column.field ] &&\n                ( vmo.props[ column.field ].type === 'OBJECT' ||\n                    vmo.props[ column.field ].type === 'OBJECTARRAY' );\n        }\n    };\n\n    var getCompiledFunctionFromCache = function( templateUrl, htmlString ) {\n        // In order to stop loading/compiling same template again, template should be cached against its URL\n        var renderingTemplateCache = AwCacheFactoryService.instance.get( 'propRenderingTemplate' );\n        if( !renderingTemplateCache ) {\n            renderingTemplateCache = AwCacheFactoryService.instance( 'propRenderingTemplate' );\n        }\n        var compiledTemplateFn = renderingTemplateCache.get( templateUrl );\n        if( !compiledTemplateFn && !_.isEmpty( htmlString ) ) {\n            compiledTemplateFn = _.template( htmlString );\n            renderingTemplateCache.put( templateUrl, compiledTemplateFn );\n        }\n        return compiledTemplateFn;\n    };\n\n    var loadTemplate = function( containerElement, vmo, templateUrl, dependentServices ) {\n        var deferred = AwPromiseService.instance.defer();\n        AwHttpService.instance.get( templateUrl, { cache: true } ).then( function( response ) {\n            var htmlString = response;\n            if( htmlString ) {\n                deferred.resolve( { containerElement: containerElement, templateUrl: templateUrl, vmo: vmo, htmlString: response.data, dependentServices: dependentServices } );\n            }\n        } );\n        return deferred.promise;\n    };\n\n    var updateContainerElement = function( containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, depServices, column, tableElem ) {\n        var compiledTemplateFn = getCompiledFunctionFromCache( templateUrl, htmlString );\n        var generatedElement = compiledTemplateFn( {\n            vmo: vmo,\n            propName: propName,\n            tooltipProps: tooltipProps,\n            basePath: awConfiguration.get( 'baseUrl' ),\n            dependentServices: depServices,\n            column: column,\n            tableContext: tableElem._tableInstance.tableContext\n        } );\n        containerElement.innerHTML = generatedElement.trim();\n    };\n    const updateContainerWithCellTemplate = async function( containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, depsToInject, column, tableElem ) {\n        if( depsToInject && depsToInject.length > 0 ) {\n            for( let dep in depsToInject ) {\n                // eslint-disable-next-line no-await-in-loop\n                const cachedDep = await getDependentModule( depsToInject[ dep ] );\n                if( cachedDep && _.isEmpty( htmlString ) ) {\n                    updateContainerElement( containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, [ cachedDep ], column, tableElem );\n                } else {\n                    // eslint-disable-next-line no-await-in-loop\n                    const loadedDep = await loadDependentModule( depsToInject[ dep ] );\n                    updateContainerElement( containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, [ loadedDep ], column, tableElem );\n                }\n            }\n        } else {\n            updateContainerElement( containerElement, vmo, propName, tooltipProps, templateUrl, htmlString, depsToInject, column, tableElem );\n        }\n    };\n\n    var getColRendererTemplateToUse = function( propName, tableElem, retrieveHeader ) {\n        var renderingTemplate = {};\n        var propRenderTemplates = _propVsRenderingTemplate[ propName ];\n        var gridId = tableElem.id;\n        var defaultRenderingTemplate = _defaultRenderingTemplates[ gridId ];\n        if( defaultRenderingTemplate ) {\n            if( defaultRenderingTemplate.isHeaderTemplate === true && retrieveHeader === true || defaultRenderingTemplate.isCellTemplate === true && retrieveHeader === false ) {\n                renderingTemplate = defaultRenderingTemplate;\n            }\n        }\n\n        if( propRenderTemplates ) {\n            var propDefault = propRenderTemplates.defaultPropRenderingTemplate;\n            if( propDefault ) {\n                if( propDefault.isHeaderTemplate === true && retrieveHeader === true || propDefault.isCellTemplate === true && retrieveHeader === false ) {\n                    renderingTemplate = propDefault;\n                }\n            }\n            _.forEach( propRenderTemplates.specificRenderingTemplates, function( propRenderTemplate ) {\n                if( propRenderTemplate.grids.indexOf( gridId ) >= 0 ) {\n                    if( propRenderTemplate.isHeaderTemplate === true && retrieveHeader === true ||\n                        propRenderTemplate.isCellTemplate === true && retrieveHeader === false ) {\n                        renderingTemplate = propRenderTemplate;\n                        return;\n                    }\n                }\n            } );\n        }\n        return renderingTemplate;\n    };\n\n    var isCustomTemplate = function( defaultTemplate, specificTemplate, retrieveHeader ) {\n        if( !_.isEmpty( specificTemplate ) ) {\n            for( var i = 0; i < specificTemplate.length; i++ ) {\n                var currentTemplate = specificTemplate[ i ];\n                if( retrieveHeader ) {\n                    if( currentTemplate.isHeaderTemplate === true ) {\n                        return true;\n                    }\n                } else {\n                    if( currentTemplate.isCellTemplate === true ) {\n                        return true;\n                    }\n                }\n            }\n        }\n        if( !_.isEmpty( defaultTemplate ) ) {\n            if( retrieveHeader ) {\n                if( defaultTemplate.isHeaderTemplate === true ) {\n                    return true;\n                }\n            } else {\n                if( defaultTemplate.isCellTemplate === true ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n\n    var isGraphicalRenderrDefinedForProp = function( propName, gridid, retrieveHeader ) {\n        if( _.isEmpty( _propVsRenderingTemplate ) ) {\n            generatePropRendererTemplateMap();\n        }\n\n        var propRenderingObj = _propVsRenderingTemplate[ propName ];\n        if( propRenderingObj ) {\n            var isHeaderTrue = isCustomTemplate( propRenderingObj.defaultPropRenderingTemplate, propRenderingObj.specificRenderingTemplates, retrieveHeader );\n            var isCellTrue = isCustomTemplate( propRenderingObj.defaultPropRenderingTemplate, propRenderingObj.specificRenderingTemplates, retrieveHeader );\n            if( isHeaderTrue === true && retrieveHeader === true || isCellTrue === true && retrieveHeader === false ) {\n                return true;\n            }\n        }\n\n        if( _defaultRenderingTemplates[ gridid ] ) {\n            if( _defaultRenderingTemplates[ gridid ].isHeaderTemplate === true && retrieveHeader === true || _defaultRenderingTemplates[ gridid ].isCellTemplate === true && retrieveHeader ===\n                false ) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Returns the correct property name\n    const getPropName = function( column, vmo, tableElem ) {\n        let propName = column.field;\n        if( tableElem._tableInstance.gridOptions.transpose === true ) {\n            propName = vmo.props.transposedColumnProperty.dbValue;\n        }\n        return propName;\n    };\n\n    var customCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var retrieveHeader = false;\n            var propName = getPropName( column, vmo, tableElem );\n            var colRenderTemplateDef = getColRendererTemplateToUse( propName, tableElem, retrieveHeader );\n            var containerElement = null;\n            if( !_.isEmpty( colRenderTemplateDef.template ) ) {\n                //Template processing -> No need for async processing..\n                containerElement = util.createElement( 'div', Const.CLASS_TABLE_CELL_TOP );\n                updateContainerWithCellTemplate( containerElement, vmo, column.field, colRenderTemplateDef.tooltip,\n                    colRenderTemplateDef.template, colRenderTemplateDef.template, colRenderTemplateDef.dependentServices, column, tableElem );\n            } else if( !_.isEmpty( colRenderTemplateDef.templateUrl ) ) {\n                //Async loading for template once template is loaded\n                containerElement = util.createElement( 'div', Const.CLASS_TABLE_CELL_TOP );\n                var templateUrl = awConfiguration.get( 'baseUrl' ) + colRenderTemplateDef.templateUrl;\n\n                var compiledTemplateFn = getCompiledFunctionFromCache( templateUrl, null );\n                if( compiledTemplateFn ) {\n                    //If compiled function already exists for templateUrl, return\n                    updateContainerWithCellTemplate( containerElement, vmo, column.field, colRenderTemplateDef.tooltip,\n                        templateUrl, '', colRenderTemplateDef.dependentServices, column, tableElem );\n                } else {\n                    loadTemplate( containerElement, vmo, templateUrl, colRenderTemplateDef.dependentServices ).then( function( response ) {\n                        updateContainerWithCellTemplate( response.containerElement, response.vmo, column.field, colRenderTemplateDef.tooltip,\n                            response.templateUrl, response.htmlString, response.dependentServices, column, tableElem );\n                    } );\n                }\n            } else if( !_.isEmpty( colRenderTemplateDef.renderFunction ) ) {\n                containerElement = util.createElement( 'div', Const.CLASS_TABLE_CELL_TOP );\n                var args = [ vmo, containerElement, column.field, colRenderTemplateDef.tooltip ];\n\n                /** revisitme Santhosh - The below methods to get and load dependent module has changed and both of them are same now.\n                 *  Now getDependentModule method returns a promise which is not the case in old afx.\n                 *  If the method implementations are changed again, we need to revert the code back to two method calls for get and load.\n                 * we need to understand what this cachedDep obj is really doing in terms of performance or if there is any other reason\n                 * and once we have that understanding, we need to add similar logic again.\n                 * */\n                /* var cachedDepModuleObj = getDependentModule( colRenderTemplateDef.deps );\n                if( !cachedDepModuleObj ) {\n                    loadDependentModule( colRenderTemplateDef.deps ).then( function( depModuleObj ) {\n                        depModuleObj[ colRenderTemplateDef.renderFunction ].apply( null, args );\n                        return containerElement;\n                    } );\n                } else {\n                    cachedDepModuleObj[ colRenderTemplateDef.renderFunction ].apply( null, args );\n                }*/\n\n                loadDependentModule( colRenderTemplateDef.deps ).then( function( depModuleObj ) {\n                    depModuleObj[ colRenderTemplateDef.renderFunction ].apply( null, args );\n                    //return containerElement;\n                } );\n            }\n            if( containerElement !== null ) {\n                containerElement.style.paddingLeft = Const.CUSTOM_CELL_LEFTPADDING_DEFAULT_SPACE + 'px';\n            }\n            return containerElement; // If container element is null, default rendering will happen\n        },\n        condition: function( column, vmo, tableElem ) {\n            var retrieveHeader = false;\n            var propName = column.field;\n\n            // If transpose, use the propName representing the vmo to apply the renderer across the row instead of column for transpose.\n            // Don't apply renderer for the first column in transpose since it represents the column property.\n            if( tableElem._tableInstance.gridOptions.transpose === true && column.field !== 'transposedColumnProperty' ) {\n                propName = vmo.props.transposedColumnProperty.dbValue;\n            }\n\n            if( column.enableRendererContribution && isGraphicalRenderrDefinedForProp( propName, tableElem.id, retrieveHeader ) ) {\n                //If propertyRenderer template defined for a given property, use it for rendering\n                return true;\n            }\n            return false;\n        }\n    };\n\n    var customCellHeaderRenderer = {\n        action: function( column, tableElem ) {\n            var retrieveHeader = true;\n            var colRenderTemplateDef = getColRendererTemplateToUse( column.field, tableElem, retrieveHeader );\n            var containerElement = null;\n            if( !_.isEmpty( colRenderTemplateDef.headerTemplate ) ) {\n                //Template processing -> No need for async processing..\n                containerElement = document.createElement( 'div' );\n                updateContainerWithCellTemplate( containerElement, null, column.field, colRenderTemplateDef.tooltip,\n                    colRenderTemplateDef.headerTemplate, colRenderTemplateDef.headerTemplate, colRenderTemplateDef.dependentServices, column, tableElem );\n            } else if( !_.isEmpty( colRenderTemplateDef.headerTemplateUrl ) ) {\n                //Async loading for template once template is loaded\n                containerElement = document.createElement( 'div' );\n                var templateUrl = awConfiguration.get( 'baseUrl' ) + colRenderTemplateDef.headerTemplateUrl;\n                var compiledTemplateFn = getCompiledFunctionFromCache( templateUrl, null );\n                if( compiledTemplateFn ) {\n                    //If compiled function already exists for templateUrl, return\n                    updateContainerWithCellTemplate( containerElement, null, column.field, colRenderTemplateDef.tooltip,\n                        templateUrl, '', colRenderTemplateDef.dependentServices, column, tableElem );\n                } else {\n                    loadTemplate( containerElement, null, templateUrl, colRenderTemplateDef.dependentServices ).then( function( response ) {\n                        updateContainerWithCellTemplate( response.containerElement, response.vmo, column.field, colRenderTemplateDef.tooltip,\n                            response.templateUrl, response.htmlString, response.dependentServices, column, tableElem );\n                    } );\n                }\n            } else if( !_.isEmpty( colRenderTemplateDef.headerRenderFunction ) ) {\n                containerElement = document.createElement( 'div' );\n                var args = [ containerElement, column.field, colRenderTemplateDef.tooltip, column ];\n                /** revisitme Santhosh - The below methods to get and load dependent module has changed and both of them are same now.\n                 *  Now getDependentModule method returns a promise which is not the case in old afx.\n                 *  If the method implementations are changed again, we need to revert the code back to two method calls for get and load.\n                 * we need to understand what this cachedDep obj is really doing in terms of performance or if there is any other reason\n                 * and once we have that understanding, we need to add similar logic again.\n                 * */\n                /*  var cachedDepModuleObj = getDependentModule( colRenderTemplateDef.deps );\n                if( !cachedDepModuleObj ) {\n                    loadDependentModule( colRenderTemplateDef.deps ).then( function( depModuleObj ) {\n                        depModuleObj[ colRenderTemplateDef.headerRenderFunction ].apply( null, args );\n                        return containerElement;\n                    } );\n                } else {\n                    cachedDepModuleObj[ colRenderTemplateDef.headerRenderFunction ].apply( null, args );\n                } */\n                loadDependentModule( colRenderTemplateDef.deps ).then( function( depModuleObj ) {\n                    depModuleObj[ colRenderTemplateDef.headerRenderFunction ].apply( null, args );\n                } );\n            } else if( !_.isEmpty( colRenderTemplateDef.headerComponent ) ) {\n                var vmo = {};\n                containerElement = document.createElement( 'div', Const.CLASS_TABLE_CELL_TOP );\n                createInlineComponent( colRenderTemplateDef.headerComponent, containerElement, vmo, column );\n            }\n            return containerElement; // If container element is null, default rendering will happen\n        },\n        condition: function( column, tableElem ) {\n            var retrieveHeader = true;\n            if( column.enableRendererContribution && isGraphicalRenderrDefinedForProp( column.field, tableElem.id, retrieveHeader ) ) {\n                //If propertyRenderer template defined for a given property, use it for rendering\n                return true;\n            }\n            return false;\n        }\n    };\n\n    /**\n     * Rich Text Field\n     */\n    var richTextCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var prop = vmo.props[ column.field ];\n            var newValues = getNewValues( prop );\n            var oldValues = getOldValues( prop );\n\n            var cellTop = util.createElement( 'ul', Const.CLASS_TABLE_NON_EDIT_CELL_LIST, Const.CLASS_TABLE_CELL_TOP );\n            if( tableElem && tableElem._tableInstance.dynamicRowHeightStatus ) {\n                cellTop.classList.add( Const.CLASS_TABLE_CELL_TOP_DYNAMIC );\n            }\n\n            // Add tooltip\n            if( newValues.length > 0 ) {\n                var tooltipHTML = getTooltipHTML( newValues );\n                addTooltipListeners( cellTop, tooltipHTML, tableElem );\n            }\n\n            while( newValues.length > 0 || oldValues.length > 0 ) {\n                var liElement = util.createElement( 'li', Const.CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM );\n                liElement.style.width = '100%';\n\n                var rtfContainer;\n                var newValue = newValues.shift();\n                var oldValue = oldValues.shift();\n\n                if( newValue ) {\n                    if( oldValue ) {\n                        rtfContainer = util.createElement( 'div', Const.CLASS_TABLE_RTF_CELL_ITEM, Const.CLASS_AW_CHANGED_TEXT );\n                    } else {\n                        rtfContainer = util.createElement( 'div', Const.CLASS_TABLE_RTF_CELL_ITEM );\n                    }\n                    rtfContainer.innerHTML = exports.addHighlights( newValue );\n                    liElement.appendChild( rtfContainer );\n                }\n\n                if( hasOldValue( oldValue, prop.oldValue ) ) {\n                    var oldCellTextElement = util.createElement( 'div', Const.CLASS_AW_OLD_TEXT );\n                    oldCellTextElement.innerHTML = exports.addHighlights( oldValue );\n                    liElement.appendChild( oldCellTextElement );\n                }\n\n                // NOTE: For Firefox there is a limitation that the vertical scroll bar is not show up,\n                // because of issue below:\n                // https://stackoverflow.com/questions/28636832/firefox-overflow-y-not-working-with-nested-flexbox\n                // there is a workaround by using { min-height: 0 }, I have not tested it yet and no plan to fix it\n                // now.\n                // It is not only an RTF issue, same problem for string list and object list\n\n                // Dynamic styling for RTF\n                if( rtfContainer && rtfContainer.childElementCount > 1 && newValues.length === 1 ) {\n                    liElement.style.height = '100%';\n                }\n                cellTop.appendChild( liElement );\n            }\n\n            return cellTop;\n        },\n        condition: function( column, vmo, tableElem, rowElem ) {\n            return vmo.props &&\n                vmo.props[ column.field ] &&\n                vmo.props[ column.field ].isRichText;\n        }\n    };\n\n    /**\n     * Plain Text\n     */\n    var simpleTextCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var prop = vmo.props[ column.field ];\n            var dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n            var cellTop = util.createElement( 'div', Const.CLASS_TABLE_CELL_TOP );\n            if( dynamicRowHeightEnabled ) {\n                cellTop.classList.add( Const.CLASS_TABLE_CELL_TOP_DYNAMIC );\n            }\n\n            if( prop.uiValue ) {\n                var gridCellText = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_CELL_TEXT );\n                if( dynamicRowHeightEnabled ) {\n                    gridCellText.classList.add( Const.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC );\n                }\n                cellTop.title = prop.uiValue;\n                var parsedValue = sanitizer.htmlEscapeAllowEntities( prop.uiValue, true, true );\n\n                if( ( column.isTableCommand || column.isTreeNavigation ) && clickableTitleService.hasClickableCellTitleActions() ) {\n                    addClickableCellTitle( gridCellText, vmo, parsedValue, tableElem );\n                } else {\n                    gridCellText.innerHTML = exports.addHighlights( parsedValue );\n                }\n                cellTop.appendChild( gridCellText );\n            }\n\n            return cellTop;\n        },\n        condition: function( column, vmo, tableElem, rowElem ) {\n            return vmo.props &&\n                vmo.props[ column.field ] &&\n                !vmo.props[ column.field ].isRichText &&\n                !vmo.props[ column.field ].oldValue &&\n                !vmo.props[ column.field ].isArray;\n        }\n    };\n\n    var plainTextCellRenderer = {\n        action: function( column, vmo, tableElem, rowElem ) {\n            var prop = vmo.props[ column.field ];\n            var newValues = getNewValues( prop );\n            var oldValues = getOldValues( prop );\n\n            var dynamicRowHeightEnabled = tableElem && tableElem._tableInstance.dynamicRowHeightStatus;\n\n            var ulElement = util.createElement( 'ul', Const.CLASS_TABLE_NON_EDIT_CELL_LIST, Const.CLASS_TABLE_CELL_TOP );\n            if( dynamicRowHeightEnabled ) {\n                ulElement.classList.add( Const.CLASS_TABLE_CELL_TOP_DYNAMIC );\n            }\n\n            // Add tooltip\n            if( prop.isArray ) {\n                if( newValues.length > 0 ) {\n                    var tooltipHTML = getTooltipHTML( newValues );\n                    addTooltipListeners( ulElement, tooltipHTML, tableElem );\n                }\n            } else {\n                ulElement.title = prop.uiValue;\n            }\n\n            while( newValues.length > 0 || oldValues.length > 0 ) {\n                var liElement = util.createElement( 'li', Const.CLASS_TABLE_NON_EDIT_CELL_LIST_ITEM );\n                var newValue = newValues.shift();\n                var oldValue = oldValues.shift();\n                var textElem;\n\n                if( newValue ) {\n                    if( hasOldValue( oldValue, prop.oldValue ) ) {\n                        textElem = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_CELL_TEXT, Const.CLASS_AW_CHANGED_TEXT );\n                    } else {\n                        textElem = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_CELL_TEXT );\n                    }\n\n                    var parsedValue = sanitizer.htmlEscapeAllowEntities( newValue, true, true );\n                    textElem.innerHTML = exports.addHighlights( parsedValue );\n                    if( dynamicRowHeightEnabled ) {\n                        textElem.classList.add( Const.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC );\n                    }\n                    liElement.appendChild( textElem );\n                }\n\n                if( oldValue ) {\n                    var oldCellTextElement = util.createElement( 'div', Const.CLASS_WIDGET_TABLE_CELL_TEXT, Const.CLASS_AW_OLD_TEXT );\n                    oldCellTextElement.innerHTML = exports.addHighlights( oldValue );\n                    liElement.appendChild( oldCellTextElement );\n                }\n                ulElement.appendChild( liElement );\n            }\n\n            return ulElement;\n        },\n        condition: function( column, vmo, tableElem, rowElem ) {\n            return vmo.props && vmo.props[ column.field ] &&\n                !vmo.props[ column.field ].isRichText &&\n                ( vmo.props[ column.field ].isArray ||\n                    vmo.props[ column.field ].oldValue );\n        }\n    };\n\n    var headerCellRenderer = {\n        action: function( column ) {\n            var labelElem = document.createElement( 'div' );\n            labelElem.classList.add( Const.CLASS_HEADER_CELL_LABEL );\n            labelElem.textContent = column.displayName;\n            return labelElem;\n        },\n        condition: function() {\n            return true;\n        }\n    };\n\n    var headerIconCellRenderer = {\n        action: function( column ) {\n            let cellContent = document.createElement( 'div' );\n            let imgContainer = util.createElement( 'div', Const.CLASS_HEADER_ICON_CONTAINER );\n            var cellImg = util.createElement( 'img', Const.CLASS_HEADER_ICON );\n            cellImg.src = util.getImgURL( column.vmo );\n            cellImg.alt = getImageAltText( column.vmo );\n            imgContainer.appendChild( cellImg );\n            cellContent.appendChild( imgContainer );\n            cellContent.appendChild( headerCellRenderer.action( column ) );\n            return cellContent;\n        },\n        condition: function( column, tableElem ) {\n            return tableElem._tableInstance.gridOptions.enableHeaderIcon === true && column.field !== 'transposedColumnProperty';\n        }\n    };\n\n    /**\n     * exposed method\n     */\n    _renderer.resetHoverCommandElement = function() {\n        if( _cellCmdElem && _cellCmdElem.parentElement ) {\n            util.cleanupComponents( _cellCmdElem.parentElement );\n            if( _cellCmdElem.parentElement ) {\n                _cellCmdElem.parentElement.removeChild( _cellCmdElem );\n            }\n        }\n    };\n\n    _renderer.destroyHoverCommandElement = function() {\n        if( _cellCmdElem && _cellCmdElem.parentElement ) {\n            util.cleanupComponents( _cellCmdElem.parentElement );\n            if( _cellCmdElem.parentElement ) {\n                _cellCmdElem.parentElement.removeChild( _cellCmdElem );\n            }\n            util.destroyElement( _cellCmdElem );\n        }\n        _cellCmdElem = null;\n    };\n\n    _renderer.getAwCellRenderers = function() {\n        // NOTE: If the condition is not isolated, then the sequence matters.\n        // Decorator renderers should be first in the array since they will call\n        // Cell.createElement to get cell content provided by the next valid renderer.\n        return [\n            commandCellRenderer,\n            customCellRenderer,\n            iconCellRenderer,\n            transposeIconCellRenderer,\n            treeTableCellRenderer,\n            objectCellRenderer,\n            simpleTextCellRenderer,\n            plainTextCellRenderer,\n            richTextCellRenderer\n        ];\n    };\n\n    _renderer.getAwHeaderRenderers = function() {\n        return [\n            customCellHeaderRenderer,\n            headerIconCellRenderer,\n            headerCellRenderer\n        ];\n    };\n\n    return _renderer;\n};\n/**\n * Check if old value is available or not\n * @param  old value\n * @param old value of prop\n * @return boolean True/False\n */\nfunction hasOldValue( oldValue, propOldValue ) {\n    return oldValue || !_.isUndefined( propOldValue );\n}\n\n// cleanup global variables.\nexport let cleanup = function() {\n    if( _propVsRenderingTemplate ) {\n        _propVsRenderingTemplate = null;\n    }\n    if( _defaultRenderingTemplates ) {\n        _defaultRenderingTemplates = {};\n    }\n};\n\nexports = {\n    createCellCommandElement,\n    createTreeCellCommandElement,\n    createCheckMarkElement,\n    addHighlights,\n    createCellRenderer,\n    cleanup\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
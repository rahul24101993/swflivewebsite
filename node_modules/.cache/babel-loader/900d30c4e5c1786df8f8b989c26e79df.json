{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Selection helper service which handles single and multi selections for table.\n *\n * @module js/selectionHelper\n */let exports={};/**\n * Handles table single selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */export let handleSingleSelect=function(selectedObject,selectionModel){if(!selectedObject.selected){selectionModel.setSelection(selectedObject);}else{selectionModel.setSelection([]);}};/**\n * Handles table multi-selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */export let handleMultiSelect=function(selectedObject,selectionModel){selectionModel.toggleSelection(selectedObject);};/**\n * Handles multi-selection with the shift key down for cell list\n *\n * @param {ModelObject[]} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n * @param {Object} loadedVMObjects - Loaded VMObjects\n */export let handleListShiftMultiSelect=function(selectedObject,selectionModel,loadedVMObjects){// If object is already selected ignore shift and just deselect\nif(selectionModel.isSelected(selectedObject)){selectionModel.removeFromSelection(selectedObject);}else{var uid=selectedObject.alternateID?selectedObject.alternateID:selectedObject.uid;var allLoadedObjects=loadedVMObjects.getLoadedViewModelObjects();// Get the index of the object that matches uid\nvar start=allLoadedObjects.indexOf(allLoadedObjects.filter(function(vmo){return vmo.alternateID?vmo.alternateID===uid:vmo.uid===uid;})[0]);// Get the index of the object that matches last selected uid\nvar end=allLoadedObjects.indexOf(allLoadedObjects.filter(function(vmo){return selectionModel.getSelectedIndex(vmo)===selectionModel.getCurrentSelectedCount()-1;})[0]);// Select everything in between\nif(start!==-1&&end!==-1){changeObjectsSelection(start,end,true,selectionModel,allLoadedObjects);}}};/**\n * Change the selection range\n *\n * @param {Number} start - String index in collection to add/remove/toggle.\n * @param {Number} end -  Ending index in collection to add/remove/toggle.\n * @param {Boolean} select - (Optional) TRUE, 'select'...FALSE, 'unselect'...UNDEFINED, 'toggle'.\n * @param {Object} selectionModel - The Selection Model instance\n * @param {Object} loadedVMOs - LoadedVMOs\n */const changeObjectsSelection=(start,end,select,selectionModel,loadedVMOs)=>{var e=start>end?start:end;var s=start>end?end:start;var objects=loadedVMOs.slice(s,e+1);if(select===true){if(selectionModel.isMultiSelectionEnabled()||objects.length>1){selectionModel.addToSelection(objects);}else{selectionModel.setSelection(objects);}}else if(select===false){selectionModel.removeFromSelection(objects);}else{selectionModel.toggleSelection(objects);}};/**\n * Handle a event that should trigger a selection change\n *\n * @param {ModelObject[]} selectedObjects - selected objects\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - The event\n * @param {Object} loadedVMObjects - The currently loaded viewModelObjects\n */export let handleSelectionEvent=function(selectedObjects,selectionModel,event,loadedVMObjects){// Event is optional so default\nevent=event?event:{};// If the model supports multiple selection\nif(selectionModel.getMode()==='multiple'){// If shift key and something is selected do range selection\nif(event.shiftKey&&selectionModel.getCurrentSelectedCount()>0){/**\n             * Note: This handling is specific to list as ui-grid has handling for shift select built in - see\n             * rowSelectionChangedBatch.\n             */exports.handleListShiftMultiSelect(selectedObjects[0],selectionModel,loadedVMObjects);}else{// If right click or ctrl click (also implies single object clicked)\n// event.which =1 is for long press on touch devices & event.which=3 is for right click on desktop devices\n//right click should setSelect instead of  toggleSelection\nif(event.ctrlKey||event.metaKey&&window.navigator.platform.toUpperCase().indexOf('MAC')!==-1||event.srcElement&&event.type==='pointerdown'&&event.which===1||selectionModel.isMultiSelectionEnabled()&&event.which===3||event.shiftKey){// If object is already selected\nselectionModel.toggleSelection(selectedObjects[0]);}else if(selectionModel.isMultiSelectionEnabled()){if(!selectionModel.isSelected(selectedObjects[0])){selectionModel.addToSelection(selectedObjects[0]);}else{selectionModel.removeFromSelection(selectedObjects[0]);}}else{let isSelected=selectionModel.isSelected(selectedObjects[0]);let currentSelectedCount=selectionModel.getCurrentSelectedCount();if(!isSelected||currentSelectedCount>1){selectionModel.setSelection(selectedObjects[0]);}else{selectionModel.setSelection([]);}}}}else{exports.handleSingleSelect(selectedObjects[0],selectionModel);}};export let handleSelectAllOrSelectNone=function(eventData,selectionModel,selectedObjects){if(eventData.selectAll){selectionModel.setSelection(selectedObjects[0]);}else{selectionModel.setSelection([]);}};exports={handleSingleSelect,handleMultiSelect,handleListShiftMultiSelect,handleSelectionEvent,handleSelectAllOrSelectNone};export default exports;","map":null,"metadata":{},"sourceType":"module"}
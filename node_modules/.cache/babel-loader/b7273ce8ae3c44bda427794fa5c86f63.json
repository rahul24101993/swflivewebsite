{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-disable valid-jsdoc */\n\n/**\n * Defines {@link page.service} which serves basic queries related to page.\n *\n * @module js/page.service\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport State from 'js/awStateService';\nimport appCtxService from 'js/appCtxService';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport _ from 'lodash';\nimport conditionService from 'js/conditionService';\nimport viewModelProcessingFactory from 'js/viewModelProcessingFactory';\n/** object to export */\n\nvar exports = {};\n/** Reference to $state service */\n\n/** Reference to $parse service */\n\n/** Reference to appCtxService service */\n\n/** Reference to {@angular.$q} service */\n\n/** Reference to {@$rootScope} */\n\n/** Reference to {@workspaceValidationService} */\n\n/**\n * Evaluate the provided expression against given environment.\n *\n * @param expression to evaluate.\n * @param evaluationEnvironment against expression to evaluate.\n * @return true if expression is true other-wise false\n */\n\nvar _evaluateExpression = function (expression, evaluationEnvironment) {\n  var declViewModel = viewModelProcessingFactory.createDeclViewModel({\n    _viewModelId: '__pageSvc'\n  });\n  var verdict = conditionService.parseExpression(declViewModel, expression, evaluationEnvironment);\n\n  declViewModel._internal.destroy();\n\n  return verdict;\n};\n/**\n * Build evaluationEnvironment.\n *\n * @param state a state\n * @param additionalEvalEnvironment provided by consumer\n * @return evaluationEnvironment.\n */\n\n\nvar _buildEvaluationEnvironment = function (state, additionalEvalEnvironment) {\n  return _.assign({}, {\n    data: _.clone(state.data),\n    params: _.clone(state.params),\n    ctx: _.clone(appCtxService.ctx)\n  }, additionalEvalEnvironment);\n};\n/**\n * The method resolve a promise with a list of states which confirm:<br>\n * <ul>\n * <li>The return state should be child state of the parentState, If parentState is not provided, the return state\n * should be child state of the current state's parent</li>\n * <li>And the state's visibleWhen should be evaluates to true.</li>\n * </ul>\n * The visibleWhen's expression can be as defined below while defining a state.<br>\n * <code>\n * \"aState\": {\n *     \"data\":{\"priority\":0},\n *     \"controller\": \"controllerOfThisState\",\n *     \"parent\": \"parentState\",\n *     \"url\": \"/someUrl\",\n *     \"visibleWhen\":{\"expression\":\"ctx.someVariable==1\"}\n *            }\n * </code>\n * Supported contexts: parentState.data, parentState.params, appCtxService.ctx any other additionalEvalEnvironment\n * provided to the method.\n *\n * @param {String} parentState is used to get the children, if not provided current state's parent ({@$state.current.parent})\n *            will be considered as a parent state.\n * @return promise <array>\n *\n */\n\n\nexport let getAvailableSubpages = function (parentState, additionalEvalEnv) {\n  let parentStateObj = {};\n  var additionalEvalEnvironment = additionalEvalEnv ? additionalEvalEnv : {};\n  var defferd = AwPromiseService.instance.defer();\n  var availableStates = [];\n  var _parentState = parentState;\n\n  if (!_parentState) {\n    _parentState = State.instance.current.parent;\n  }\n\n  State.instance.get().filter(function (state) {\n    if (state.name === _parentState) {\n      parentStateObj = state;\n    }\n\n    return state.parent === _parentState;\n  }).forEach(function (state) {\n    if (state.visibleWhen !== undefined && (state.visibleWhen.expression || state.visibleWhen.condition)) {\n      var expression = state.visibleWhen.expression ? state.visibleWhen.expression : state.visibleWhen.condition.expression;\n\n      var visibleWhen = _evaluateExpression(expression, _buildEvaluationEnvironment(State.instance.get(_parentState), { ...parentStateObj,\n        ...additionalEvalEnvironment\n      }));\n\n      if (visibleWhen) {\n        availableStates.push(state);\n      }\n    } else {\n      availableStates.push(state);\n    }\n  });\n  var availableSubPages = availableStates.filter(function (aSubPage) {\n    return workspaceValidationService.isValidPage(aSubPage.name);\n  });\n  defferd.resolve(availableSubPages);\n  return defferd.promise;\n};\n/**\n * Return a default sub-page for a given page.This method uses\n * <code>state.data.priority<code> to decide a default sub-page.\n * A page will have a default sub-page X, if following are true:\n * 1) X is a visible(available) page.\n * 2) X has highest priority(state.data.priority) value among available sub-pages.\n * 3) X is available in current workspace.\n *\n * @param {Object} page , a state object.\n * @return promise<page>\n */\n\nexport let getDefaultSubPage = function (page) {\n  return getAvailableSubpages(page).then(function (availableSubPages) {\n    if (availableSubPages && availableSubPages.length > 0) {\n      availableSubPages.sort(function (o1, o2) {\n        return _.parseInt(o1.data.priority) - _.parseInt(o2.data.priority);\n      });\n      return availableSubPages[0];\n    }\n\n    return null;\n  });\n};\n/**\n * If a (parent) page(or location) is revealed application should should find out a visible sub-page (sub-location)\n * which has a highest priority and should reveal it.\n *\n * @param {Object} page - a state\n * @param {Object} toParams\n */\n\nexport let navigateToDefaultSubPage = function (page, toParams) {\n  getDefaultSubPage(page.name).then(function (defaultSubPage) {\n    if (defaultSubPage) {\n      return State.instance.go(defaultSubPage.name, toParams);\n    }\n  });\n};\nexport let registerSubLocationContext = function () {\n  var provider = State.instance.current.data; // Update the sublocation context\n\n  var initialContext = {\n    clientScopeURI: provider.clientScopeURI,\n    historyNameToken: provider.name,\n    label: provider.label,\n    nameToken: provider.nameToken\n  };\n  appCtxService.registerCtx('sublocation', initialContext);\n};\nexports = {\n  getAvailableSubpages,\n  getDefaultSubPage,\n  navigateToDefaultSubPage,\n  registerSubLocationContext\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/page.service.js"],"names":["exports","_evaluateExpression","declViewModel","_viewModelId","verdict","conditionService","_buildEvaluationEnvironment","data","_","state","params","ctx","appCtxService","getAvailableSubpages","parentStateObj","additionalEvalEnvironment","additionalEvalEnv","defferd","AwPromiseService","availableStates","_parentState","State","expression","visibleWhen","availableSubPages","workspaceValidationService","aSubPage","getDefaultSubPage","o1","o2","navigateToDefaultSubPage","page","defaultSubPage","registerSubLocationContext","provider","initialContext","clientScopeURI","historyNameToken","label","nameToken"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,KAAA,MAAA,mBAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,0BAAA,MAAA,+BAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,0BAAA,MAAA,+BAAA;AAEA;;AACA,IAAIA,OAAO,GAAX,EAAA;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG,UAAA,UAAA,EAAA,qBAAA,EAA8C;EACpE,IAAIC,aAAa,GAAG,0BAA0B,CAA1B,mBAAA,CAAgD;IAAEC,YAAY,EAAE;EAAhB,CAAhD,CAApB;EACA,IAAIC,OAAO,GAAGC,gBAAgB,CAAhBA,eAAAA,CAAAA,aAAAA,EAAAA,UAAAA,EAAd,qBAAcA,CAAd;;EACAH,aAAa,CAAbA,SAAAA,CAAAA,OAAAA;;EACA,OAAA,OAAA;AAJJ,CAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,2BAA2B,GAAG,UAAA,KAAA,EAAA,yBAAA,EAA6C;EAC3E,OAAO,CAAC,CAAD,MAAA,CAAA,EAAA,EAAc;IACjBC,IAAI,EAAEC,CAAC,CAADA,KAAAA,CAASC,KAAK,CADH,IACXD,CADW;IAEjBE,MAAM,EAAEF,CAAC,CAADA,KAAAA,CAASC,KAAK,CAFL,MAETD,CAFS;IAGjBG,GAAG,EAAEH,CAAC,CAADA,KAAAA,CAASI,aAAa,CAAtBJ,GAAAA;EAHY,CAAd,EAAP,yBAAO,CAAP;AADJ,CAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIK,oBAAoB,GAAG,UAAA,WAAA,EAAA,iBAAA,EAA2C;EACzE,IAAIC,cAAc,GAAlB,EAAA;EACA,IAAIC,yBAAyB,GAAGC,iBAAiB,GAAA,iBAAA,GAAjD,EAAA;EACA,IAAIC,OAAO,GAAGC,gBAAgB,CAAhBA,QAAAA,CAAd,KAAcA,EAAd;EACA,IAAIC,eAAe,GAAnB,EAAA;EACA,IAAIC,YAAY,GAAhB,WAAA;;EACA,IAAI,CAAJ,YAAA,EAAoB;IAChBA,YAAY,GAAGC,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CAAfD,MAAAA;EACH;;EACDC,KAAK,CAALA,QAAAA,CAAAA,GAAAA,GAAAA,MAAAA,CAA6B,UAAA,KAAA,EAAkB;IAC3C,IAAIZ,KAAK,CAALA,IAAAA,KAAJ,YAAA,EAAkC;MAC9BK,cAAc,GAAdA,KAAAA;IACH;;IACD,OAAOL,KAAK,CAALA,MAAAA,KAAP,YAAA;EAJJY,CAAAA,EAAAA,OAAAA,CAMI,UAAA,KAAA,EAAkB;IACd,IAAIZ,KAAK,CAALA,WAAAA,KAAAA,SAAAA,KAAqCA,KAAK,CAALA,WAAAA,CAAAA,UAAAA,IAAgCA,KAAK,CAALA,WAAAA,CAAzE,SAAIA,CAAJ,EAAyG;MACrG,IAAIa,UAAU,GAAGb,KAAK,CAALA,WAAAA,CAAAA,UAAAA,GAA+BA,KAAK,CAALA,WAAAA,CAA/BA,UAAAA,GAA8DA,KAAK,CAALA,WAAAA,CAAAA,SAAAA,CAA/E,UAAA;;MACA,IAAIc,WAAW,GAAGtB,mBAAmB,CAAA,UAAA,EACjCK,2BAA2B,CAAEe,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAF,YAAEA,CAAF,EACvB,EAAE,GAAF,cAAA;QAAqB,GAAGN;MAAxB,CADuB,CADM,CAArC;;MAGA,IAAA,WAAA,EAAkB;QACdI,eAAe,CAAfA,IAAAA,CAAAA,KAAAA;MACH;IAPL,CAAA,MAQO;MACHA,eAAe,CAAfA,IAAAA,CAAAA,KAAAA;IACH;EAjBTE,CAAAA;EAmBA,IAAIG,iBAAiB,GAAG,eAAe,CAAf,MAAA,CAAwB,UAAA,QAAA,EAAqB;IACjE,OAAOC,0BAA0B,CAA1BA,WAAAA,CAAwCC,QAAQ,CAAvD,IAAOD,CAAP;EADJ,CAAwB,CAAxB;EAGAR,OAAO,CAAPA,OAAAA,CAAAA,iBAAAA;EACA,OAAOA,OAAO,CAAd,OAAA;AAhCG,CAAA;AAmCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIU,iBAAiB,GAAG,UAAA,IAAA,EAAiB;EAC5C,OAAO,oBAAoB,CAApB,IAAoB,CAApB,CAAA,IAAA,CAAmC,UAAA,iBAAA,EAA8B;IACpE,IAAIH,iBAAiB,IAAIA,iBAAiB,CAAjBA,MAAAA,GAAzB,CAAA,EAAwD;MACpDA,iBAAiB,CAAjBA,IAAAA,CAAwB,UAAA,EAAA,EAAA,EAAA,EAAmB;QACvC,OAAOhB,CAAC,CAADA,QAAAA,CAAYoB,EAAE,CAAFA,IAAAA,CAAZpB,QAAAA,IAAiCA,CAAC,CAADA,QAAAA,CAAYqB,EAAE,CAAFA,IAAAA,CAApD,QAAwCrB,CAAxC;MADJgB,CAAAA;MAGA,OAAOA,iBAAiB,CAAxB,CAAwB,CAAxB;IACH;;IACD,OAAA,IAAA;EAPJ,CAAO,CAAP;AADG,CAAA;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,wBAAwB,GAAG,UAAA,IAAA,EAAA,QAAA,EAA2B;EAC7DH,iBAAiB,CAAEI,IAAI,CAAvBJ,IAAiB,CAAjBA,CAAAA,IAAAA,CAAqC,UAAA,cAAA,EAA2B;IAC5D,IAAA,cAAA,EAAqB;MACjB,OAAON,KAAK,CAALA,QAAAA,CAAAA,EAAAA,CAAmBW,cAAc,CAAjCX,IAAAA,EAAP,QAAOA,CAAP;IACH;EAHLM,CAAAA;AADG,CAAA;AAQP,OAAO,IAAIM,0BAA0B,GAAG,YAAW;EAC/C,IAAIC,QAAQ,GAAGb,KAAK,CAALA,QAAAA,CAAAA,OAAAA,CADgC,IAC/C,CAD+C,CAE/C;;EACA,IAAIc,cAAc,GAAG;IACjBC,cAAc,EAAEF,QAAQ,CADP,cAAA;IAEjBG,gBAAgB,EAAEH,QAAQ,CAFT,IAAA;IAGjBI,KAAK,EAAEJ,QAAQ,CAHE,KAAA;IAIjBK,SAAS,EAAEL,QAAQ,CAACK;EAJH,CAArB;EAMA3B,aAAa,CAAbA,WAAAA,CAAAA,aAAAA,EAAAA,cAAAA;AATG,CAAA;AAYPZ,OAAO,GAAG;EAAA,oBAAA;EAAA,iBAAA;EAAA,wBAAA;EAINiC;AAJM,CAAVjC;AAMA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-disable valid-jsdoc */\n\n/**\n * Defines {@link page.service} which serves basic queries related to page.\n *\n * @module js/page.service\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport State from 'js/awStateService';\nimport appCtxService from 'js/appCtxService';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport _ from 'lodash';\nimport conditionService from 'js/conditionService';\nimport viewModelProcessingFactory from 'js/viewModelProcessingFactory';\n\n/** object to export */\nvar exports = {};\n\n/** Reference to $state service */\n\n/** Reference to $parse service */\n\n/** Reference to appCtxService service */\n\n/** Reference to {@angular.$q} service */\n\n/** Reference to {@$rootScope} */\n\n/** Reference to {@workspaceValidationService} */\n\n/**\n * Evaluate the provided expression against given environment.\n *\n * @param expression to evaluate.\n * @param evaluationEnvironment against expression to evaluate.\n * @return true if expression is true other-wise false\n */\nvar _evaluateExpression = function( expression, evaluationEnvironment ) {\n    var declViewModel = viewModelProcessingFactory.createDeclViewModel( { _viewModelId: '__pageSvc' } );\n    var verdict = conditionService.parseExpression( declViewModel, expression, evaluationEnvironment );\n    declViewModel._internal.destroy();\n    return verdict;\n};\n\n/**\n * Build evaluationEnvironment.\n *\n * @param state a state\n * @param additionalEvalEnvironment provided by consumer\n * @return evaluationEnvironment.\n */\nvar _buildEvaluationEnvironment = function( state, additionalEvalEnvironment ) {\n    return _.assign( {}, {\n        data: _.clone( state.data ),\n        params: _.clone( state.params ),\n        ctx: _.clone( appCtxService.ctx )\n    }, additionalEvalEnvironment );\n};\n\n/**\n * The method resolve a promise with a list of states which confirm:<br>\n * <ul>\n * <li>The return state should be child state of the parentState, If parentState is not provided, the return state\n * should be child state of the current state's parent</li>\n * <li>And the state's visibleWhen should be evaluates to true.</li>\n * </ul>\n * The visibleWhen's expression can be as defined below while defining a state.<br>\n * <code>\n * \"aState\": {\n *     \"data\":{\"priority\":0},\n *     \"controller\": \"controllerOfThisState\",\n *     \"parent\": \"parentState\",\n *     \"url\": \"/someUrl\",\n *     \"visibleWhen\":{\"expression\":\"ctx.someVariable==1\"}\n *            }\n * </code>\n * Supported contexts: parentState.data, parentState.params, appCtxService.ctx any other additionalEvalEnvironment\n * provided to the method.\n *\n * @param {String} parentState is used to get the children, if not provided current state's parent ({@$state.current.parent})\n *            will be considered as a parent state.\n * @return promise <array>\n *\n */\nexport let getAvailableSubpages = function( parentState, additionalEvalEnv ) {\n    let parentStateObj = {};\n    var additionalEvalEnvironment = additionalEvalEnv ? additionalEvalEnv : {};\n    var defferd = AwPromiseService.instance.defer();\n    var availableStates = [];\n    var _parentState = parentState;\n    if( !_parentState ) {\n        _parentState = State.instance.current.parent;\n    }\n    State.instance.get().filter( function( state ) {\n        if( state.name === _parentState ) {\n            parentStateObj = state;\n        }\n        return state.parent === _parentState;\n    } ).forEach(\n        function( state ) {\n            if( state.visibleWhen !== undefined && ( state.visibleWhen.expression || state.visibleWhen.condition ) ) {\n                var expression = state.visibleWhen.expression ? state.visibleWhen.expression : state.visibleWhen.condition.expression;\n                var visibleWhen = _evaluateExpression( expression,\n                    _buildEvaluationEnvironment( State.instance.get( _parentState ),\n                        { ...parentStateObj, ...additionalEvalEnvironment } ) );\n                if( visibleWhen ) {\n                    availableStates.push( state );\n                }\n            } else {\n                availableStates.push( state );\n            }\n        } );\n    var availableSubPages = availableStates.filter( function( aSubPage ) {\n        return workspaceValidationService.isValidPage( aSubPage.name );\n    } );\n    defferd.resolve( availableSubPages );\n    return defferd.promise;\n};\n\n/**\n * Return a default sub-page for a given page.This method uses\n * <code>state.data.priority<code> to decide a default sub-page.\n * A page will have a default sub-page X, if following are true:\n * 1) X is a visible(available) page.\n * 2) X has highest priority(state.data.priority) value among available sub-pages.\n * 3) X is available in current workspace.\n *\n * @param {Object} page , a state object.\n * @return promise<page>\n */\nexport let getDefaultSubPage = function( page ) {\n    return getAvailableSubpages( page ).then( function( availableSubPages ) {\n        if( availableSubPages && availableSubPages.length > 0 ) {\n            availableSubPages.sort( function( o1, o2 ) {\n                return _.parseInt( o1.data.priority ) - _.parseInt( o2.data.priority );\n            } );\n            return availableSubPages[ 0 ];\n        }\n        return null;\n    } );\n};\n\n/**\n * If a (parent) page(or location) is revealed application should should find out a visible sub-page (sub-location)\n * which has a highest priority and should reveal it.\n *\n * @param {Object} page - a state\n * @param {Object} toParams\n */\nexport let navigateToDefaultSubPage = function( page, toParams ) {\n    getDefaultSubPage( page.name ).then( function( defaultSubPage ) {\n        if( defaultSubPage ) {\n            return State.instance.go( defaultSubPage.name, toParams );\n        }\n    } );\n};\n\nexport let registerSubLocationContext = function() {\n    var provider = State.instance.current.data;\n    // Update the sublocation context\n    var initialContext = {\n        clientScopeURI: provider.clientScopeURI,\n        historyNameToken: provider.name,\n        label: provider.label,\n        nameToken: provider.nameToken\n    };\n    appCtxService.registerCtx( 'sublocation', initialContext );\n};\n\nexports = {\n    getAvailableSubpages,\n    getDefaultSubPage,\n    navigateToDefaultSubPage,\n    registerSubLocationContext\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
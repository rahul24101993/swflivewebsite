{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/workspaceUtils\n */\nimport _ from 'lodash';\n/**\n * Get the kit list from the workspace configurations\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } inclusive kits\n */\n\nconst getKitsFromConfigurations = availableConfigurations => {\n  const regex = new RegExp('^kit::(.*)');\n  var inclusiveKits = [];\n\n  _.forEach(availableConfigurations, page => {\n    var t = regex.exec(page);\n\n    if (t !== null && t[1]) {\n      inclusiveKits.push(t[1]);\n    }\n  });\n\n  return inclusiveKits;\n};\n/**\n * Remove the kit entries from the workspace\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } all inclusive configurations\n */\n\n\nconst removeKitsFromConfigurations = availableConfigurations => {\n  return availableConfigurations.filter(entry => !/^kit::/.test(entry));\n};\n\nexport const resolveKitDefinitions = (workspaceObject, allKitsJson, allModules2StatesJson) => {\n  if (workspaceObject.workspaceType === 'Exclusive') {\n    var inclusiveKitsForPages = getKitsFromConfigurations(workspaceObject.availablePages);\n    var availPages = removeKitsFromConfigurations(workspaceObject.availablePages);\n\n    if (availPages) {\n      workspaceObject.availablePages = availPages;\n    }\n\n    workspaceObject.availablePages = addConfigurationsFromKits(allKitsJson, inclusiveKitsForPages, workspaceObject.availablePages, allModules2StatesJson, 'states');\n\n    if (workspaceObject.includedCommands) {\n      var inclusiveKitsForCommands = getKitsFromConfigurations(workspaceObject.includedCommands);\n      var includedCommands = removeKitsFromConfigurations(workspaceObject.includedCommands);\n\n      if (includedCommands) {\n        workspaceObject.includedCommands = includedCommands;\n      }\n\n      workspaceObject.includedCommands = addConfigurationsFromKits(allKitsJson, inclusiveKitsForCommands, workspaceObject.includedCommands, allModules2StatesJson, 'commands');\n    }\n\n    if (workspaceObject.excludedCommands) {\n      var exclusiveKitsForCommands = getKitsFromConfigurations(workspaceObject.excludedCommands);\n      var excludedCommands = removeKitsFromConfigurations(workspaceObject.excludedCommands);\n\n      if (excludedCommands) {\n        workspaceObject.excludedCommands = excludedCommands;\n      }\n\n      workspaceObject.excludedCommands = addConfigurationsFromKits(allKitsJson, exclusiveKitsForCommands, workspaceObject.excludedCommands, allModules2StatesJson, 'commands');\n    }\n  }\n\n  return workspaceObject;\n};\n/**\n * Add all kit entries in the workspace\n *\n * @param {Object} allKitsJson - all kits in the solution\n * @param {Object} inclusiveKits - all kit entries in the workspace\n * @param {Object} availableConfigurations - all configurations in the workspace\n * @param {Object} allStatesJson - all states in the solution\n * @param {String} key - Key of the Array against which kit should be resolved\n * @param {String} path - path of the Array against which kit should be resolved\n * @return {Array} all inclusive configurations\n */\n\nconst addConfigurationsFromKits = (allKitsJson, inclusiveKits, availableConfigurations, allStatesJson, key) => {\n  var kitModules = [];\n  var inclusiveModules = null;\n\n  _.forEach(inclusiveKits, kit => {\n    if (allKitsJson[kit]) {\n      const kitContent = allKitsJson[kit].content;\n\n      if (kitContent) {\n        var kitMod = _.get(kitContent, 'modules');\n\n        if (kitMod) {\n          kitModules = _.union(kitModules, kitMod);\n        }\n      }\n    }\n  });\n\n  if (kitModules && kitModules.length > 0) {\n    inclusiveModules = _.union(kitModules, inclusiveModules);\n  }\n\n  var allInclusiveConfigurations = [];\n\n  if (inclusiveModules !== null) {\n    for (let module of inclusiveModules) {\n      var moduleDefination = allStatesJson[module];\n      var moduleJsonObjects;\n\n      var compareJsonObject = _.get(moduleDefination, key);\n\n      if (compareJsonObject) {\n        moduleJsonObjects = compareJsonObject;\n        var moduleEntries = Object.keys(moduleJsonObjects);\n        allInclusiveConfigurations = _.union(allInclusiveConfigurations, moduleEntries);\n      }\n    }\n  }\n\n  allInclusiveConfigurations = _.union(availableConfigurations, allInclusiveConfigurations);\n  return allInclusiveConfigurations;\n};\n\nexport default {\n  resolveKitDefinitions\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/config/src/js/workspaceUtils.js"],"names":["getKitsFromConfigurations","availableConfigurations","regex","inclusiveKits","_","page","t","removeKitsFromConfigurations","entry","resolveKitDefinitions","workspaceObject","inclusiveKitsForPages","availPages","addConfigurationsFromKits","inclusiveKitsForCommands","includedCommands","exclusiveKitsForCommands","excludedCommands","kitModules","inclusiveModules","kit","allKitsJson","kitContent","kitMod","allInclusiveConfigurations","moduleDefination","allStatesJson","compareJsonObject","moduleJsonObjects","moduleEntries","Object"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/workspaceUtils\n */\nimport _ from 'lodash';\n\n/**\n * Get the kit list from the workspace configurations\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } inclusive kits\n */\nconst getKitsFromConfigurations = ( availableConfigurations ) => {\n    const regex = new RegExp( '^kit::(.*)' );\n    var inclusiveKits = [];\n    _.forEach( availableConfigurations, page => {\n        var t = regex.exec( page );\n        if( t !== null && t[ 1 ] ) {\n            inclusiveKits.push( t[ 1 ] );\n        }\n    } );\n    return inclusiveKits;\n};\n\n/**\n * Remove the kit entries from the workspace\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } all inclusive configurations\n */\nconst removeKitsFromConfigurations = ( availableConfigurations ) => {\n    return availableConfigurations.filter( entry => !/^kit::/.test( entry ) );\n};\n\nexport const resolveKitDefinitions = ( workspaceObject, allKitsJson, allModules2StatesJson ) => {\n    if( workspaceObject.workspaceType === 'Exclusive' ) {\n        var inclusiveKitsForPages = getKitsFromConfigurations( workspaceObject.availablePages );\n        var availPages = removeKitsFromConfigurations( workspaceObject.availablePages );\n        if( availPages ) {\n            workspaceObject.availablePages = availPages;\n        }\n        workspaceObject.availablePages = addConfigurationsFromKits( allKitsJson, inclusiveKitsForPages, workspaceObject.availablePages, allModules2StatesJson, 'states' );\n        if( workspaceObject.includedCommands ) {\n            var inclusiveKitsForCommands = getKitsFromConfigurations( workspaceObject.includedCommands );\n            var includedCommands = removeKitsFromConfigurations( workspaceObject.includedCommands );\n            if( includedCommands ) {\n                workspaceObject.includedCommands = includedCommands;\n            }\n            workspaceObject.includedCommands = addConfigurationsFromKits( allKitsJson, inclusiveKitsForCommands, workspaceObject.includedCommands, allModules2StatesJson, 'commands' );\n        }\n        if( workspaceObject.excludedCommands ) {\n            var exclusiveKitsForCommands = getKitsFromConfigurations( workspaceObject.excludedCommands );\n            var excludedCommands = removeKitsFromConfigurations( workspaceObject.excludedCommands );\n            if( excludedCommands ) {\n                workspaceObject.excludedCommands = excludedCommands;\n            }\n            workspaceObject.excludedCommands = addConfigurationsFromKits( allKitsJson, exclusiveKitsForCommands, workspaceObject.excludedCommands, allModules2StatesJson, 'commands' );\n        }\n    }\n    return workspaceObject;\n};\n\n/**\n * Add all kit entries in the workspace\n *\n * @param {Object} allKitsJson - all kits in the solution\n * @param {Object} inclusiveKits - all kit entries in the workspace\n * @param {Object} availableConfigurations - all configurations in the workspace\n * @param {Object} allStatesJson - all states in the solution\n * @param {String} key - Key of the Array against which kit should be resolved\n * @param {String} path - path of the Array against which kit should be resolved\n * @return {Array} all inclusive configurations\n */\nconst addConfigurationsFromKits = ( allKitsJson, inclusiveKits, availableConfigurations, allStatesJson, key ) => {\n    var kitModules = [];\n    var inclusiveModules = null;\n\n    _.forEach( inclusiveKits, kit => {\n        if( allKitsJson[ kit ] ) {\n            const kitContent = allKitsJson[ kit ].content;\n            if( kitContent ) {\n                var kitMod = _.get( kitContent, 'modules' );\n                if( kitMod ) {\n                    kitModules = _.union( kitModules, kitMod );\n                }\n            }\n        }\n    } );\n    if( kitModules && kitModules.length > 0 ) {\n        inclusiveModules = _.union( kitModules, inclusiveModules );\n    }\n    var allInclusiveConfigurations = [];\n    if( inclusiveModules !== null ) {\n        for( let module of inclusiveModules ) {\n            var moduleDefination = allStatesJson[ module ];\n            var moduleJsonObjects;\n            var compareJsonObject = _.get( moduleDefination, key );\n            if( compareJsonObject ) {\n                moduleJsonObjects = compareJsonObject;\n                var moduleEntries = Object.keys( moduleJsonObjects );\n                allInclusiveConfigurations = _.union( allInclusiveConfigurations, moduleEntries );\n            }\n        }\n    }\n    allInclusiveConfigurations = _.union( availableConfigurations, allInclusiveConfigurations );\n    return allInclusiveConfigurations;\n};\nexport default { resolveKitDefinitions };\n"]},"metadata":{},"sourceType":"module"}
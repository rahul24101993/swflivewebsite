{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwGuidanceMessageService.js\";\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwLink from 'viewmodel/AwLinkViewModel';\nimport { convertToHtml } from 'js/reactHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GUIDANCE_MSG_STYLES = {\n  ERROR: 'guidance-container-type-error',\n  WARNING: 'guidance-container-type-warning',\n  INFO: 'guidance-container-type-information',\n  SUCCESS: 'guidance-container-type-success'\n};\nconst GUIDANCE_MSG_ICONS = {\n  ERROR: 'indicatorCancelled',\n  WARNING: 'indicatorWarning',\n  INFO: 'indicatorInfo',\n  SUCCESS: 'indicatorCompleted'\n};\nconst GUIDANCE_MSG_TYPES = {\n  INFO: 'generalInfo',\n  WARNING: 'warningInfo',\n  ERROR: 'errorInfo',\n  SUCCESS: 'successInfo'\n};\n\nconst applyLinkParams = (messageString, messageParams) => {\n  if (!messageString) {\n    return [];\n  }\n\n  const outputString = [];\n  const msgParts = messageString.split(/(\\{@msgTxtLink[0-9]*\\})/g);\n\n  for (const msgStr of msgParts) {\n    if (/\\{@msgTxtLink[0-9]*\\}/g.test(msgStr)) {\n      const index = msgStr.split('{@msgTxtLink').pop().split('}')[0];\n      outputString.push( /*#__PURE__*/_jsxDEV(AwLink, { ...messageParams[index].prop,\n        action: messageParams[index].action\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 32\n      }, this));\n      continue;\n    } else {\n      outputString.push(convertToHtml(`<span>${msgStr}</span>`));\n    }\n  }\n\n  return outputString;\n};\n\nexport const closeGuidanceMessage = () => {\n  return true;\n};\nexport const awGuidanceMessageRenderFunction = props => {\n  const {\n    i18n,\n    actions,\n    viewModel\n  } = props;\n  const {\n    data\n  } = viewModel;\n  const {\n    message,\n    icon\n  } = props;\n\n  if (message && !data.hideMessage) {\n    const guidanceMsgDef = message.messageDefn;\n    const guidanceMessageText = applyLinkParams(message.localizedMessage, guidanceMsgDef && guidanceMsgDef.messageTextLinks);\n    const messageType = guidanceMsgDef && guidanceMsgDef.messageType.toUpperCase();\n    let bannerStyleClass = props.bannerStyle !== 'false' ? 'guidance-container-banner' : 'guidance-container-fullWidth';\n    const iconId = icon ? icon : GUIDANCE_MSG_ICONS[messageType];\n    const messageTypeGuidance = i18n[GUIDANCE_MSG_TYPES[messageType]];\n    const guidanceMessageClass = GUIDANCE_MSG_STYLES[messageType] + ' ' + bannerStyleClass;\n    const isCloseButtonHidden = props.closable && /^false$/i.test(props.closable) === true;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'sw-guidanceMessage' + ' ' + guidanceMessageClass,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-guidanceMsg-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sw-guidanceMsg-textContainer\",\n          children: [props.showIcon !== 'false' ? /*#__PURE__*/_jsxDEV(AwIcon, {\n            className: \"sw-guidanceMsg-typeIndicator\",\n            iconId: iconId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 55\n          }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sw-guidanceMsg-text\",\n            children: [props.showType !== 'false' ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sw-guidanceMsg-guideText\",\n              children: [messageTypeGuidance, \"\\xA0-\\xA0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this) : '', guidanceMessageText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-shrink\",\n          children: props.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), !isCloseButtonHidden ? /*#__PURE__*/_jsxDEV(AwButton, {\n        \"aria-label\": i18n.closeMessage,\n        className: \"sw-guidanceMsg-closeButton\",\n        iconId: \"cmdClosePanel\",\n        action: actions.closeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 41\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n};","map":{"version":3,"names":["AwButton","AwIcon","AwLink","convertToHtml","GUIDANCE_MSG_STYLES","ERROR","WARNING","INFO","SUCCESS","GUIDANCE_MSG_ICONS","GUIDANCE_MSG_TYPES","applyLinkParams","messageString","messageParams","outputString","msgParts","split","msgStr","test","index","pop","push","prop","action","closeGuidanceMessage","awGuidanceMessageRenderFunction","props","i18n","actions","viewModel","data","message","icon","hideMessage","guidanceMsgDef","messageDefn","guidanceMessageText","localizedMessage","messageTextLinks","messageType","toUpperCase","bannerStyleClass","bannerStyle","iconId","messageTypeGuidance","guidanceMessageClass","isCloseButtonHidden","closable","showIcon","showType","children","closeMessage"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwGuidanceMessageService.js"],"sourcesContent":["import AwButton from 'viewmodel/AwButtonViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwLink from 'viewmodel/AwLinkViewModel';\nimport { convertToHtml } from 'js/reactHelper';\n\nconst GUIDANCE_MSG_STYLES = {\n    ERROR: 'guidance-container-type-error',\n    WARNING: 'guidance-container-type-warning',\n    INFO: 'guidance-container-type-information',\n    SUCCESS: 'guidance-container-type-success'\n};\n\nconst GUIDANCE_MSG_ICONS = {\n    ERROR: 'indicatorCancelled',\n    WARNING: 'indicatorWarning',\n    INFO: 'indicatorInfo',\n    SUCCESS: 'indicatorCompleted'\n};\n\nconst GUIDANCE_MSG_TYPES = {\n    INFO: 'generalInfo',\n    WARNING: 'warningInfo',\n    ERROR: 'errorInfo',\n    SUCCESS: 'successInfo'\n};\n\nconst applyLinkParams = ( messageString, messageParams ) => {\n    if( !messageString ) {\n        return [];\n    }\n\n    const outputString = [];\n    const msgParts = messageString.split( /(\\{@msgTxtLink[0-9]*\\})/g );\n\n    for( const msgStr of msgParts ) {\n        if( /\\{@msgTxtLink[0-9]*\\}/g.test( msgStr ) ) {\n            const index = msgStr.split( '{@msgTxtLink' ).pop().split( '}' )[ 0 ];\n            outputString.push( <AwLink {...messageParams[ index ].prop} action={messageParams[ index ].action}></AwLink> );\n            continue;\n        } else {\n            outputString.push( convertToHtml( `<span>${msgStr}</span>` ) );\n        }\n    }\n\n    return outputString;\n};\n\nexport const closeGuidanceMessage = () => {\n    return true;\n};\n\nexport const awGuidanceMessageRenderFunction = ( props ) => {\n    const { i18n, actions, viewModel } = props;\n    const { data } = viewModel;\n    const { message, icon } = props;\n    if( message && !data.hideMessage ) {\n        const guidanceMsgDef = message.messageDefn;\n        const guidanceMessageText = applyLinkParams( message.localizedMessage, guidanceMsgDef && guidanceMsgDef.messageTextLinks );\n        const messageType = guidanceMsgDef && guidanceMsgDef.messageType.toUpperCase();\n        let bannerStyleClass = props.bannerStyle !== 'false' ? 'guidance-container-banner' : 'guidance-container-fullWidth';\n        const iconId = icon ? icon : GUIDANCE_MSG_ICONS[ messageType ];\n        const messageTypeGuidance = i18n[ GUIDANCE_MSG_TYPES[ messageType ] ];\n        const guidanceMessageClass = GUIDANCE_MSG_STYLES[ messageType ] + ' ' + bannerStyleClass;\n        const isCloseButtonHidden = props.closable && ( /^false$/i ).test( props.closable ) === true;\n        return (\n            <div className={'sw-guidanceMessage' + ' ' + guidanceMessageClass}>\n                <div className='sw-guidanceMsg-container'>\n                    <div className='sw-guidanceMsg-textContainer'>\n                        {props.showIcon !== 'false' ? <AwIcon className='sw-guidanceMsg-typeIndicator' iconId={iconId}></AwIcon> : ''}\n                        <div className='sw-guidanceMsg-text'>\n                            {props.showType !== 'false' ?\n                                <span className='sw-guidanceMsg-guideText'>{messageTypeGuidance}&nbsp;-&nbsp;</span> : ''}\n                            {guidanceMessageText}\n                        </div>\n                    </div>\n                    <div className='flex-shrink'>\n                        {props.children}\n                    </div>\n                </div>\n                {!isCloseButtonHidden ? <AwButton aria-label={i18n.closeMessage} className='sw-guidanceMsg-closeButton' iconId='cmdClosePanel' action={actions.closeMessage}></AwButton> : ''}\n            </div>\n        );\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
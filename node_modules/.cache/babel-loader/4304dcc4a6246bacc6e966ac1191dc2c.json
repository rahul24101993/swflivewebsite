{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Main Entry of PLStats\n *\n * @module js/splmStatsService\n */\nimport locationService from 'js/splmStatsLocationService';\nimport jsService from 'js/splmStatsJsService';\nimport xhrService from 'js/splmStatsXhrService';\nimport mutationService from 'js/splmStatsMutationService';\nimport browserUtils from 'js/browserUtils';\nimport cfgSvc from 'js/configurationService';\nimport Benchmark from 'js/splmStatsBenchmark';\nimport Performance from 'js/splmStatsPerformance';\nimport DOMProcessor from 'js/splmStatsDOMProcessor';\nimport JSProcessor from 'js/splmStatsJsProcessor';\nimport MEMProcessor from 'js/splmStatsMemProcessor';\nimport XHRProcessor from 'js/splmStatsXhrProcessor';\nimport ComponentProcessor from 'js/splmStatsComponentProcessor';\nimport ClickListener from 'js/splmStatsClickListener';\nimport LocationListener from 'js/splmStatsLocationListener';\nimport AnalyticsReporter from 'js/splmStatsAnalyticsReporter';\nimport CucumberReporter from 'js/splmStatsCucumberReporter';\nimport DebugReporter from 'js/splmStatsDebugReporter';\nimport MobileReporter from 'js/splmStatsMobileReporter';\nimport ClientReporter from 'js/splmStatsClientReporter';\nimport { createProfiler as createBaseProfiler } from 'js/splmStatsProfiler';\nimport { LAST_DIGEST_BUSY_WAIT } from 'js/splmStatsConstants';\nimport splmStatsUtils from './splmStatsUtils';\nconst _defaultAnalyticsConfig = {\n  splmStatsConfiguration: {\n    name: 'ActiveWorkspaceTest',\n    appCtxValueFilters: ['com.siemens.splm.clientfx.tcui.xrt.', 'com.siemens.splm.client.search.', 'com.siemens.splm.client.', 'teamcenter.search.search', 'SubLocation', 'Location'],\n    appCtxKeys: [{\n      name: 'Location',\n      searchPaths: [['locationContext', 'ActiveWorkspace:Location']]\n    }, {\n      name: 'Sublocation',\n      searchPaths: [['locationContext', 'ActiveWorkspace:SubLocation']]\n    }, {\n      name: 'ViewMode',\n      searchPaths: [['ViewModeContext', 'ViewModeContext']]\n    }, {\n      name: 'PrimaryPage',\n      searchPaths: [['xrtPageContext', 'primaryXrtPageID']]\n    }, {\n      name: 'SecondaryPage',\n      searchPaths: [['xrtPageContext', 'secondaryXrtPageID']]\n    }, {\n      name: 'clientScopeURI',\n      searchPaths: [['sublocation', 'clientScopeURI']]\n    }, {\n      name: 'SelectedObjectType',\n      searchPaths: [['selected', 'type']]\n    }],\n    triggers: {\n      commands: []\n    }\n  }\n};\nconst componentProcessor = new ComponentProcessor();\nvar plStatsEnabled = false;\nconst clientReporter = new ClientReporter();\n\nconst isAnalyticsConfigured = analyticsConfigObject => {\n  return analyticsConfigObject && Object.keys(analyticsConfigObject).length > 0;\n};\n\nexport const install = () => {\n  xhrService.install();\n  mutationService.install();\n  locationService.install();\n};\nexport const uninstall = () => {\n  xhrService.uninstall();\n  mutationService.uninstall();\n  locationService.uninstall();\n};\nexport const createProfiler = function () {\n  let watchers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LAST_DIGEST_BUSY_WAIT; // Provide resetWait function as default\n\n  const resetWatcher = {\n    register: (start, done) => {\n      resetWatcher.resetWait = () => (start() || true) && done();\n    },\n    unregister: () => {\n      delete resetWatcher.resetWait;\n    }\n  }; // JS watcher\n\n  const jsWatcher = {};\n\n  jsWatcher.register = (start, done) => {\n    jsWatcher.proc = {\n      start,\n      done\n    };\n    jsService.addProc(jsWatcher.proc);\n  };\n\n  jsWatcher.unregister = () => {\n    jsService.removeProc(jsWatcher.proc);\n    delete jsWatcher.proc;\n  }; // Location watcher\n\n\n  const locWatcher = {};\n\n  locWatcher.register = (start, done) => {\n    locWatcher.proc = {\n      start,\n      done\n    };\n    locationService.addProc(locWatcher.proc);\n  };\n\n  locWatcher.unregister = () => {\n    locationService.removeProc(locWatcher.proc);\n    delete locWatcher.proc;\n  }; // XHR watcher\n\n\n  const xhrWatcher = {};\n\n  xhrWatcher.register = (start, done) => {\n    xhrWatcher.proc = {\n      start,\n      done\n    };\n    xhrService.addProc(xhrWatcher.proc);\n  };\n\n  xhrWatcher.unregister = () => {\n    xhrService.removeProc(xhrWatcher.proc);\n    delete xhrWatcher.proc;\n  }; // Browser mutation watcher\n\n\n  const mutationWatcher = {};\n\n  mutationWatcher.register = (start, done) => {\n    mutationWatcher.proc = {\n      start,\n      done\n    };\n    mutationService.addProc(mutationWatcher.proc);\n  };\n\n  mutationWatcher.unregister = () => {\n    mutationService.removeProc(mutationWatcher.proc);\n    delete mutationWatcher.proc;\n  };\n\n  const profiler = createBaseProfiler([...watchers, jsWatcher, xhrWatcher, resetWatcher, mutationWatcher], interval);\n\n  profiler.resetWait = () => resetWatcher.resetWait();\n\n  return profiler;\n};\n/**\n * Create default benckmark for PLStats\n * @returns {Benchmark} benchmark object\n */\n\nexport function createBenchmark() {\n  const benchmark = new Benchmark();\n  benchmark.addProcessor('JS', new JSProcessor());\n  benchmark.addProcessor('DOM', new DOMProcessor());\n  benchmark.addProcessor('XHR', new XHRProcessor());\n  benchmark.addProcessor('MEM', new MEMProcessor());\n  benchmark.addProcessor('Components', componentProcessor);\n  benchmark.includeProcessorTime();\n  return benchmark;\n}\n/**\n * Creates cucumber monitor/reporter for automation tests\n * @returns {Performance} performance object\n */\n\nexport function createCucumberMonitor() {\n  enablePLStats();\n  const benchmark = createBenchmark();\n  benchmark.addReporter(new DebugReporter());\n  benchmark.addReporter(new CucumberReporter());\n  const perf = new Performance({\n    createProfiler\n  });\n  perf.setBenchmark(benchmark);\n  perf.addListener(new ClickListener());\n  perf.addListener(new LocationListener());\n  return perf;\n}\n/**\n * Create default monitor for PLStats\n * @returns {Performance} default performance object object\n */\n\nexport function createPerformance() {\n  const benchmark = createBenchmark();\n  enablePLStats();\n  benchmark.addReporter(new DebugReporter());\n  const perf = new Performance({\n    createProfiler\n  });\n  perf.setBenchmark(benchmark);\n  perf.addListener(new ClickListener());\n  perf.addListener(new LocationListener());\n  return perf; // then enable and run\n}\n/**\n * Adds analytics cfg\n */\n\nexport function installAnalyticsConfig() {\n  let analyticsConfigObject = cfgSvc.getCfgCached('analytics');\n\n  if (!isAnalyticsConfigured(analyticsConfigObject)) {\n    // handle unit test scenario when analytics isn't set\n    cfgSvc.add('analytics', _defaultAnalyticsConfig);\n  } else if (!isAnalyticsConfigured(analyticsConfigObject.splmStatsConfiguration)) {\n    // merge into existing analytics root object\n    cfgSvc.add('analytics.splmStatsConfiguration', _defaultAnalyticsConfig.splmStatsConfiguration);\n  }\n}\n/**\n * Function to check if PLStats is enabled\n * @returns {Boolean} plStatsEnabled\n */\n\nexport function isPLStatsEnabled() {\n  return plStatsEnabled;\n}\n/**\n * Function to enable flag for plStats\n */\n\nexport function enablePLStats() {\n  plStatsEnabled = true;\n  jsService.install();\n}\n/**\n * Function to disable flag for plStats\n */\n\nexport function disablePLStats() {\n  plStatsEnabled = false;\n  jsService.uninstall();\n}\n/**\n * Track Component details for PLStats reporting\n * @param {string} componentName - Name of component\n * @param {float} renderTime - Time component took to render\n */\n\nexport function trackComponent(componentName) {\n  componentProcessor.endComponentRenderTime();\n\n  if (isPLStatsEnabled()) {\n    componentProcessor.addComponent(componentName);\n  }\n}\n/**\n * Function to start component render timer\n */\n\nexport function startComponentRenderTime() {\n  if (isPLStatsEnabled()) {\n    componentProcessor.startComponentRenderTime();\n  }\n}\n/**\n *\n * @returns {Object} PLStatsData - Object containing PLStats Data to display on performance monitor panel\n */\n\nexport function getPLStatsData() {\n  return clientReporter.getPLStatsData();\n}\n/**\n * Initializes profiler\n * @param {Boolean} usePLStatsClient - Flag for if plStats is enabled from client\n * @returns {Object} performance - Object to track performance object from client\n */\n\nexport function initProfiler() {\n  let usePLStatsClient = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let performance = null;\n  const urlAttrs = browserUtils.getUrlAttributes();\n  const usePLStats = urlAttrs.usePLStats !== undefined;\n\n  if (usePLStats || !splmStatsUtils.isAnalyticsDisabled() || usePLStatsClient) {\n    // Enable profiler/performance by default\n    enablePLStats();\n    const benchmark = createBenchmark();\n    benchmark.addReporter(new AnalyticsReporter());\n\n    if (usePLStats || usePLStatsClient) {\n      benchmark.addReporter(new DebugReporter());\n    }\n\n    if ((usePLStats || usePLStatsClient) && browserUtils.isMobileOS) {\n      benchmark.addReporter(new MobileReporter());\n    }\n\n    if (usePLStatsClient) {\n      benchmark.addReporter(clientReporter);\n    }\n\n    performance = new Performance({\n      createProfiler\n    });\n    performance.setBenchmark(benchmark);\n    performance.addListener(new ClickListener());\n    performance.addListener(new LocationListener());\n    performance.enable();\n    performance.run();\n  }\n\n  return performance;\n}\nexport default {\n  install,\n  uninstall,\n  createProfiler,\n  createBenchmark,\n  createCucumberMonitor,\n  createPerformance,\n  installAnalyticsConfig,\n  isPLStatsEnabled,\n  enablePLStats,\n  disablePLStats,\n  trackComponent,\n  startComponentRenderTime,\n  getPLStatsData,\n  initProfiler\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsService.js"],"names":["createProfiler","_defaultAnalyticsConfig","splmStatsConfiguration","name","appCtxValueFilters","appCtxKeys","searchPaths","triggers","commands","componentProcessor","plStatsEnabled","clientReporter","isAnalyticsConfigured","analyticsConfigObject","Object","install","xhrService","mutationService","locationService","uninstall","watchers","interval","LAST_DIGEST_BUSY_WAIT","resetWatcher","register","start","done","unregister","jsWatcher","jsService","locWatcher","xhrWatcher","mutationWatcher","profiler","createBaseProfiler","benchmark","enablePLStats","createBenchmark","perf","cfgSvc","isPLStatsEnabled","usePLStatsClient","performance","urlAttrs","browserUtils","usePLStats","splmStatsUtils","initProfiler"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Main Entry of PLStats\n *\n * @module js/splmStatsService\n */\nimport locationService from 'js/splmStatsLocationService';\nimport jsService from 'js/splmStatsJsService';\nimport xhrService from 'js/splmStatsXhrService';\nimport mutationService from 'js/splmStatsMutationService';\nimport browserUtils from 'js/browserUtils';\nimport cfgSvc from 'js/configurationService';\n\nimport Benchmark from 'js/splmStatsBenchmark';\nimport Performance from 'js/splmStatsPerformance';\n\nimport DOMProcessor from 'js/splmStatsDOMProcessor';\nimport JSProcessor from 'js/splmStatsJsProcessor';\nimport MEMProcessor from 'js/splmStatsMemProcessor';\nimport XHRProcessor from 'js/splmStatsXhrProcessor';\nimport ComponentProcessor from 'js/splmStatsComponentProcessor';\n\nimport ClickListener from 'js/splmStatsClickListener';\nimport LocationListener from 'js/splmStatsLocationListener';\n\nimport AnalyticsReporter from 'js/splmStatsAnalyticsReporter';\nimport CucumberReporter from 'js/splmStatsCucumberReporter';\nimport DebugReporter from 'js/splmStatsDebugReporter';\nimport MobileReporter from 'js/splmStatsMobileReporter';\nimport ClientReporter from 'js/splmStatsClientReporter';\n\nimport { createProfiler as createBaseProfiler } from 'js/splmStatsProfiler';\nimport { LAST_DIGEST_BUSY_WAIT } from 'js/splmStatsConstants';\nimport splmStatsUtils from './splmStatsUtils';\n\nconst _defaultAnalyticsConfig = {\n    splmStatsConfiguration: {\n        name: 'ActiveWorkspaceTest',\n        appCtxValueFilters: [\n            'com.siemens.splm.clientfx.tcui.xrt.',\n            'com.siemens.splm.client.search.',\n            'com.siemens.splm.client.',\n            'teamcenter.search.search',\n            'SubLocation',\n            'Location'\n        ],\n        appCtxKeys: [ {\n            name: 'Location',\n            searchPaths: [\n                [ 'locationContext', 'ActiveWorkspace:Location' ]\n            ]\n        },\n        {\n            name: 'Sublocation',\n            searchPaths: [\n                [ 'locationContext', 'ActiveWorkspace:SubLocation' ]\n            ]\n        },\n        {\n            name: 'ViewMode',\n            searchPaths: [\n                [ 'ViewModeContext', 'ViewModeContext' ]\n            ]\n        },\n        {\n            name: 'PrimaryPage',\n            searchPaths: [\n                [ 'xrtPageContext', 'primaryXrtPageID' ]\n            ]\n        },\n        {\n            name: 'SecondaryPage',\n            searchPaths: [\n                [ 'xrtPageContext', 'secondaryXrtPageID' ]\n            ]\n        },\n        {\n            name: 'clientScopeURI',\n            searchPaths: [\n                [ 'sublocation', 'clientScopeURI' ]\n            ]\n        },\n        {\n            name: 'SelectedObjectType',\n            searchPaths: [\n                [ 'selected', 'type' ]\n            ]\n        }\n        ],\n        triggers: {\n            commands: []\n        }\n    }\n};\n\nconst componentProcessor = new ComponentProcessor();\nvar plStatsEnabled = false;\nconst clientReporter = new ClientReporter();\nconst isAnalyticsConfigured = ( analyticsConfigObject ) => {\n    return analyticsConfigObject && Object.keys( analyticsConfigObject ).length > 0;\n};\n\nexport const install = () => {\n    xhrService.install();\n    mutationService.install();\n    locationService.install();\n};\n\nexport const uninstall = () => {\n    xhrService.uninstall();\n    mutationService.uninstall();\n    locationService.uninstall();\n};\n\nexport const createProfiler = ( watchers = [], interval = LAST_DIGEST_BUSY_WAIT ) => {\n    // Provide resetWait function as default\n    const resetWatcher = {\n        register: ( start, done ) => {\n            resetWatcher.resetWait = () => ( start() || true ) && done();\n        },\n        unregister: () => {\n            delete resetWatcher.resetWait;\n        }\n    };\n\n    // JS watcher\n    const jsWatcher = {};\n    jsWatcher.register = ( start, done ) => {\n        jsWatcher.proc = { start, done };\n        jsService.addProc( jsWatcher.proc );\n    };\n\n    jsWatcher.unregister = () => {\n        jsService.removeProc( jsWatcher.proc );\n        delete jsWatcher.proc;\n    };\n\n    // Location watcher\n    const locWatcher = {};\n    locWatcher.register = ( start, done ) => {\n        locWatcher.proc = { start, done };\n        locationService.addProc( locWatcher.proc );\n    };\n    locWatcher.unregister = () => {\n        locationService.removeProc( locWatcher.proc );\n        delete locWatcher.proc;\n    };\n\n    // XHR watcher\n    const xhrWatcher = {};\n    xhrWatcher.register = ( start, done ) => {\n        xhrWatcher.proc = { start, done };\n        xhrService.addProc( xhrWatcher.proc );\n    };\n    xhrWatcher.unregister = () => {\n        xhrService.removeProc( xhrWatcher.proc );\n        delete xhrWatcher.proc;\n    };\n\n    // Browser mutation watcher\n    const mutationWatcher = {};\n    mutationWatcher.register = ( start, done ) => {\n        mutationWatcher.proc = { start, done };\n        mutationService.addProc( mutationWatcher.proc );\n    };\n    mutationWatcher.unregister = () => {\n        mutationService.removeProc( mutationWatcher.proc );\n        delete mutationWatcher.proc;\n    };\n\n    const profiler = createBaseProfiler( [\n        ...watchers,\n        jsWatcher,\n        xhrWatcher,\n        resetWatcher,\n        mutationWatcher\n    ], interval );\n\n    profiler.resetWait = () => resetWatcher.resetWait();\n\n    return profiler;\n};\n\n/**\n * Create default benckmark for PLStats\n * @returns {Benchmark} benchmark object\n */\nexport function createBenchmark() {\n    const benchmark = new Benchmark();\n    benchmark.addProcessor( 'JS', new JSProcessor() );\n    benchmark.addProcessor( 'DOM', new DOMProcessor() );\n    benchmark.addProcessor( 'XHR', new XHRProcessor() );\n    benchmark.addProcessor( 'MEM', new MEMProcessor() );\n    benchmark.addProcessor( 'Components', componentProcessor );\n    benchmark.includeProcessorTime();\n    return benchmark;\n}\n\n/**\n * Creates cucumber monitor/reporter for automation tests\n * @returns {Performance} performance object\n */\nexport function createCucumberMonitor() {\n    enablePLStats();\n    const benchmark = createBenchmark();\n\n    benchmark.addReporter( new DebugReporter() );\n    benchmark.addReporter( new CucumberReporter() );\n\n    const perf = new Performance( { createProfiler } );\n\n    perf.setBenchmark( benchmark );\n\n    perf.addListener( new ClickListener() );\n    perf.addListener( new LocationListener() );\n\n    return perf;\n}\n\n/**\n * Create default monitor for PLStats\n * @returns {Performance} default performance object object\n */\nexport function createPerformance() {\n    const benchmark = createBenchmark();\n    enablePLStats();\n\n    benchmark.addReporter( new DebugReporter() );\n\n    const perf = new Performance( { createProfiler } );\n\n    perf.setBenchmark( benchmark );\n\n    perf.addListener( new ClickListener() );\n    perf.addListener( new LocationListener() );\n\n    return perf;\n\n    // then enable and run\n}\n\n/**\n * Adds analytics cfg\n */\nexport function installAnalyticsConfig() {\n    let analyticsConfigObject = cfgSvc.getCfgCached( 'analytics' );\n    if( !isAnalyticsConfigured( analyticsConfigObject ) ) {\n        // handle unit test scenario when analytics isn't set\n        cfgSvc.add( 'analytics', _defaultAnalyticsConfig );\n    } else if( !isAnalyticsConfigured( analyticsConfigObject.splmStatsConfiguration ) ) {\n        // merge into existing analytics root object\n        cfgSvc.add( 'analytics.splmStatsConfiguration', _defaultAnalyticsConfig.splmStatsConfiguration );\n    }\n}\n\n/**\n * Function to check if PLStats is enabled\n * @returns {Boolean} plStatsEnabled\n */\nexport function isPLStatsEnabled() {\n    return plStatsEnabled;\n}\n\n/**\n * Function to enable flag for plStats\n */\nexport function enablePLStats() {\n    plStatsEnabled = true;\n    jsService.install();\n}\n\n/**\n * Function to disable flag for plStats\n */\nexport function disablePLStats() {\n    plStatsEnabled = false;\n    jsService.uninstall();\n}\n\n/**\n * Track Component details for PLStats reporting\n * @param {string} componentName - Name of component\n * @param {float} renderTime - Time component took to render\n */\nexport function trackComponent( componentName ) {\n    componentProcessor.endComponentRenderTime();\n    if( isPLStatsEnabled() ) {\n        componentProcessor.addComponent( componentName );\n    }\n}\n\n/**\n * Function to start component render timer\n */\nexport function startComponentRenderTime() {\n    if( isPLStatsEnabled() ) {\n        componentProcessor.startComponentRenderTime();\n    }\n}\n\n/**\n *\n * @returns {Object} PLStatsData - Object containing PLStats Data to display on performance monitor panel\n */\nexport function getPLStatsData() {\n    return clientReporter.getPLStatsData();\n}\n\n/**\n * Initializes profiler\n * @param {Boolean} usePLStatsClient - Flag for if plStats is enabled from client\n * @returns {Object} performance - Object to track performance object from client\n */\nexport function initProfiler( usePLStatsClient = false ) {\n    let performance = null;\n    const urlAttrs = browserUtils.getUrlAttributes();\n    const usePLStats = urlAttrs.usePLStats !== undefined;\n    if( usePLStats || !splmStatsUtils.isAnalyticsDisabled() || usePLStatsClient ) {\n        // Enable profiler/performance by default\n        enablePLStats();\n        const benchmark = createBenchmark();\n        benchmark.addReporter( new AnalyticsReporter() );\n\n        if( usePLStats || usePLStatsClient ) {\n            benchmark.addReporter( new DebugReporter() );\n        }\n        if( ( usePLStats || usePLStatsClient ) && browserUtils.isMobileOS ) {\n            benchmark.addReporter( new MobileReporter() );\n        }\n        if( usePLStatsClient ) {\n            benchmark.addReporter( clientReporter );\n        }\n        performance = new Performance( { createProfiler } );\n        performance.setBenchmark( benchmark );\n\n        performance.addListener( new ClickListener() );\n        performance.addListener( new LocationListener() );\n\n        performance.enable();\n        performance.run();\n    }\n    return performance;\n}\n\nexport default {\n    install,\n    uninstall,\n    createProfiler,\n    createBenchmark,\n    createCucumberMonitor,\n    createPerformance,\n    installAnalyticsConfig,\n    isPLStatsEnabled,\n    enablePLStats,\n    disablePLStats,\n    trackComponent,\n    startComponentRenderTime,\n    getPLStatsData,\n    initProfiler\n};\n"]},"metadata":{},"sourceType":"module"}
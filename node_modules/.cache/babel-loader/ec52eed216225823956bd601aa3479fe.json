{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Declarative UI data provider service\n * This service performs actions to retrieve data in a paged fashion based solely on a given 'declAction' object.\n *\n * @module js/declDataProviderService\n */\nimport declDataCtxSvc from 'js/declarativeDataCtxService';\nimport appCtxSvc from 'js/appCtxService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport Debug from 'debug';\nimport declUtils from 'js/declUtils';\nimport actionSvc from 'js/actionService';\nimport moduleLoader from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nvar dataProviderTcLOV = 'TcLOV';\nvar trace = new Debug('declDataProviderService');\n/**\n * Use the 'actionService' to execute the given action and resolve the returned 'promise' with the either no object\n * or a reference to the any dependent module's API object.\n * <P>\n * Note: Any dependent module will be loaded before the action is executed.\n * <P>\n * Note: It is assumed that the action will use its 'input' and 'output' properties to move action related data into\n * or out of the dataCtxNode or declViewModel.\n *\n * @param {Object} dataCtxNode - The data context node the action is being performed within.\n * @param {DeclViewModel} declViewModel - The view model containing the action to be executed.\n * @param {DeclAction} action - The declarative action to be executed.\n * @param {ModuleObject} depModuleObj - (Optional) Reference to a module containing 'glue code' to assist in the\n *            execution.\n *\n * @return {Promise} A promise resolved with the response/result(s) of the action as properties as follows:\n *\n * <pre>\n * {\n *     responseObj: responseObj,\n *     depModuleObj: depModuleObj\n * }\n * </pre>\n */\n\nfunction _executeAction(dataCtxNode, declViewModel, action, depModuleObj) {\n  declUtils.assertValidModelDataCtxNodeAndAction2(declViewModel, dataCtxNode, action, null, '_executeAction');\n  return actionSvc.executeAction(declViewModel, action, dataCtxNode, depModuleObj).then(function (responseObj) {\n    return {\n      responseObj: responseObj,\n      depModuleObj: depModuleObj\n    };\n  }).catch(function (x) {\n    trace('exception', x);\n    logger.error('exception: ' + x);\n  });\n}\n/**\n *\n * @param {DeclViewModel} declViewModel - The view model containing the action to be executed.\n *\n * @param {DeclAction} action - The 'declAction' object to use to get the page data.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {dataProviderJson} dataProviderJson - The data provider's json object.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *            <P>\n *            If not provided all action options are resolved solely from action's 'inputData' via the given dataCtxNode.\n *            <P>\n *            Note: The properties in this object are guaranteed to be passed to the action being invoked and that\n *            the results of that particular action invocation are returned as the resolution of the promise\n *            returned by this function. Use of the dataCtxNode for 'inputData' binding can result in mixed input vs.\n *            output results when multiple async calls are made to the same action.\n *\n * @param {ModuleObject} depModuleObj - (Optional) Reference to a module containing 'glue code' to assist in the\n *            execution.\n *\n * @return {Promise} A promise resolved with the response/result(s) of the action as properties as follows:\n */\n\n\nfunction _executeLoadAction(declViewModel, action, dataCtxNode, dataProviderJson, actionRequestObj, depModuleObj) {\n  //new in aw4.2\n  declUtils.assertValidModelDataCtxNodeAndAction2(declViewModel, dataCtxNode, action, null, '_executeLoadAction');\n  var actionFinal = action;\n\n  if (actionRequestObj) {\n    actionFinal = _prepareActionAltInputData(dataCtxNode, declViewModel, action, actionRequestObj, depModuleObj);\n  }\n\n  return _executeAction(dataCtxNode, declViewModel, actionFinal, depModuleObj).then(function (actionResultObj) {\n    // revisitme - somehow in the long SOA case like search, the dataCtxNode.data is not equal to declViewModel\n    // anymore which is cause side effect - will investigate later\n    dataCtxNode.data.totalFound = declViewModel.totalFound;\n    dataCtxNode.data.searchResults = declViewModel.searchResults;\n    return _postProcessAction(dataCtxNode, dataCtxNode.data, dataProviderJson, actionResultObj);\n  }, function (rejectObj) {\n    return AwPromiseService.instance.reject(rejectObj);\n  });\n}\n/**\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n * @param {DeclViewModel} declViewModel - The view model the action is defined within.\n * @param {Object} dataProviderJson - The original JSON definition of the declDataProvider.\n * @param {Object} actionResultObj - The resolved response object from executing the action.\n *\n * @return {Promise} A Promise object resolved with the processed result of the action. The result contains updated\n *         values for all the properties in the given 'dataProviderJson' object.\n */\n\n\nfunction _postProcessAction(dataCtxNode, declViewModel, dataProviderJson, actionResultObj) {\n  var responseObj;\n\n  if (dataProviderJson && declUtils.isValidModelAndDataCtxNode(declViewModel, dataCtxNode)) {\n    let localContext = declUtils.getLatestContext(dataCtxNode, declViewModel);\n\n    var dpResult = _.cloneDeep(dataProviderJson); // LCS-166817 - Active Workspace tree table view performance in IE and embedded in TCVis is bad - Framework Fixes\n    // Fix cucumber 'Record Utilization Declarative Panel': depModuleObj is needed for all {{function:}}\n\n\n    var depModuleObj = actionResultObj && actionResultObj.depModuleObj ? actionResultObj.depModuleObj : null;\n    /**\n     * Check if the dataCtxNode we need has been destroyed (due to DOM manipulation) since the action event\n     * processing was started.\n     */\n\n    var localDataCtx = declUtils.resolveLocalDataCtx(localContext.data, localContext);\n    /**\n     * Resolve any other data 'from' the declViewModel and/or dataCtxNode\n     */\n\n    declDataCtxSvc.applyScope(localContext.data, dpResult, declViewModel._internal.functions, localDataCtx, depModuleObj);\n\n    if (actionResultObj) {\n      _.forEach(dpResult, function (fromPath, toPath) {\n        /**\n         * If fromPath has a 'result.' prefix, parse the expression within fromPath to get the correct\n         * value.\n         */\n        if (_.isString(fromPath) && /^action\\.result\\./.test(fromPath)) {\n          var fromResultPath = fromPath.split('action.result.')[1];\n\n          var fromObj = _.get(actionResultObj.responseObj, fromResultPath);\n\n          _.set(dpResult, toPath, fromObj);\n        }\n      });\n    }\n    /**\n     * Build the response object from the updated (i.e. data bound) properties in the declDataProvider's JSON\n     * definition.\n     */\n\n\n    responseObj = {\n      actionResultObj: actionResultObj\n    };\n\n    _.forEach(dpResult, function (value, name) {\n      if (name === 'action') {\n        return;\n      }\n      /**\n       * Handle special case of a mapping to a different property name (e.g. 'response' to 'result').\n       */\n\n\n      if (name === 'response') {\n        responseObj.results = value;\n      } else if (/^ctx\\./.test(name)) {\n        /**\n         * If the name starts with ctx. update the appCtxService\n         */\n        var toCtxName = name.split('ctx.')[1];\n        appCtxSvc.updatePartialCtx(toCtxName, value);\n      } else {\n        responseObj[name] = value;\n      }\n    });\n    /**\n     * Make sure the 'totalFound' is set if we had any data returned.\n     */\n\n\n    if (responseObj.results && _.isUndefined(responseObj.totalFound)) {\n      responseObj.totalFound = responseObj.results.length;\n    }\n  }\n\n  return AwPromiseService.instance.resolve(responseObj);\n}\n/**\n * @param {Object} inputData - Input properties from JSON.\n * @param {Object} altInputData - Input properties to use.\n * @param {Object} actionRequestObj - Object from action to use.\n */\n\n\nfunction _applyActionRequestObject(inputData, altInputData, actionRequestObj) {\n  /**\n   * Put the specific action's request values on the 'atInputData' of the action's inputData clone.\n   */\n  _.forEach(inputData, function (fromPath, toPath) {\n    if (_.isString(fromPath)) {\n      if (/^request\\./.test(fromPath)) {\n        var fromRequestPath = fromPath.split('request.')[1];\n\n        var fromObj = _.get(actionRequestObj, fromRequestPath);\n\n        _.set(altInputData, toPath, fromObj);\n      }\n    } else {\n      _applyActionRequestObject(fromPath, altInputData[toPath], actionRequestObj);\n    }\n  });\n} // _applyActionRequestObject\n\n/**\n * Note 1: Multiple async load requests can be made before any given one completes. So we cannot put action-related\n * objects on the dataCtxNode since the dataCtxNode may change before the original dataCtxNode is applied to the action the objects\n * were ment for.\n * <P>\n * To address this, the dataCtxNode will be applied to the 'inputData' of a clone of the action NOW. This clone (and the\n * now static 'inputData' objects) will be passed to the actionService which will use this 'altInputData' as-is\n * without trying to apply the dataCtxNode to it again.\n * <P>\n * Note 2: The post processing of the action results do not have this problem since a new 'outputData' object is\n * created and passed back through the 'promise chain' in a more synchronous fashion. So any output data placed on\n * the dataCtxNode is not there long enough to be overwritten by another action completing before it.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context the operation is being performed within.\n *\n * @param {DeclAction} action - The 'declAction' object to use to get the page data.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @param {Object} depModuleObj - Dependent module object on which the 'apply' method of any named functions will be\n *            called (action.deps).\n\n *\n * @returns {DeclAction} Action object to actually use.\n */\n\n\nfunction _prepareActionAltInputData(dataCtxNode, declViewModel, action, actionRequestObj, depModuleObj) {\n  var actionFinal = action;\n\n  if (action.inputData) {\n    /**\n     * Make copied of the 'action' and 'inputData' objects (to keep the originals safe from modification)\n     */\n    actionFinal = _.cloneDeep(action);\n    actionFinal.altInputData = _.cloneDeep(action.inputData); // LCS-166817 - Active Workspace tree table view performance in IE and embedded in TCVis is bad - Framework Fixes\n    // The actonRequestObj, which may be a very complex structure, can be applied after applyScope\n\n    declDataCtxSvc.applyScope(declViewModel, actionFinal.altInputData, declViewModel._internal.functions, dataCtxNode, depModuleObj);\n    /**\n     * Put the specific action's request values on the 'atInputData' of the action's inputData clone.\n     */\n\n    _applyActionRequestObject(actionFinal.inputData, actionFinal.altInputData, actionRequestObj);\n  }\n\n  return actionFinal;\n} // _prepareActionAltInputData\n\n/**\n * --------------------------------------------------------------------------<BR>\n * Define external API<BR>\n * --------------------------------------------------------------------------<BR>\n */\n\n\nvar exports = {};\n/**\n * validate the LOV sections using the function in the lovService\n *\n * @param {array} lovEntries - The 'lovEntries' to update.\n * @param {Object} dataProviderJson - data provider json object\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @return {Promise} A promise object. validateLOVValueSelections\n */\n\nexport let validateLOVSelection = function (_ref, dataCtxNode, action, dataProviderJson) {\n  let {\n    lovEntries,\n    vmo,\n    viewModelProp\n  } = _ref; //let declViewModel = declUtils.findViewModel( dataCtxNode, true, appCtxSvc );\n  // if( dataProviderJson.dataProviderType && dataProviderJson.dataProviderType === dataProviderTcLOV ) {\n  //     declDataCtxSvc.applyScope( declViewModel, dataProviderJson, null, dataCtxNode, null );\n  //     var lovConfig = dataProviderJson.lovConfiguration;\n  //     var viewModelObj = lovConfig.viewModelObj;\n  //     var viewProp = lovConfig.viewProp;\n  //     var operationName = lovConfig.operationName;\n  //     return lovService.validateLOVValueSelections( lovEntries, viewProp, operationName, viewModelObj );\n  // }\n\n  if (action && viewModelProp) {\n    let actionRequestObj = {\n      selected: lovEntries,\n      suggestion: viewModelProp.filterString,\n      vmo,\n      vmProp: viewModelProp\n    };\n    return validateSelections(action, dataProviderJson, dataCtxNode, actionRequestObj).then(resp => {\n      let response;\n\n      if (resp.actionResultObj && resp.actionResultObj.responseObj) {\n        response = resp.actionResultObj.responseObj;\n\n        if (!response.valid) {\n          return Promise.reject(response);\n        }\n\n        return Promise.resolve(response);\n      } else if (!resp.valid) {\n        resp.cause = {\n          partialErrors: true\n        };\n        return Promise.reject(resp);\n      }\n\n      return resp;\n    });\n  }\n\n  return Promise.resolve({\n    valid: true\n  });\n};\n/**\n * Validate the LOV selections using the function in the dataProvider.\n *\n * @param {DeclAction} action - The 'declAction' object to use.\n * @param {Object} dataProviderJson - data provider json object\n * @param {Object} lovScope - The context in which to evaluate any conditions/bindings.\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object.\n */\n\nexport let validateSelections = function (action, dataProviderJson, lovScope, actionRequestObj) {\n  return exports.executeLoadAction(action, dataProviderJson, lovScope, actionRequestObj);\n};\n/**\n * Execute the given action and return results in the async resolution.\n *\n * @param {DeclAction} action - The 'declAction' object to use.\n *\n * @param {dataProviderJson} dataProviderJson - The data provider's JSON object.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object resolved with the results (IModelObject, ViewModelObjects, etc.) of the given\n *         action.\n *\n * <pre>\n * If NOT LOV:\n * {Number} totalFound -\n * {Object} results -\n *\n * If LOV:\n * {Object}\n * </pre>\n */\n\nexport let executeLoadAction = function (action, dataProviderJson, dataCtxNode, actionRequestObj) {\n  // if( !action ) {\n  //     logger.error( 'Invalid action specified' );\n  // }\n  let declViewModel = declUtils.findViewModel(dataCtxNode, true, appCtxSvc); // add update To latestHere ...\n\n  let localContext = declUtils.getLatestContext(dataCtxNode, declViewModel);\n\n  if (!declUtils.isNil(action)) {\n    /**\n     * Execute the action within the context of the DeclViewModel on the dataCtxNode.\n     */\n    declUtils.assertValidModelDataCtxNodeAndAction2(declViewModel, dataCtxNode, action, 'Load action not executed.', 'executeLoadAction (a)'); // Get Function deps\n\n    var functionDeps = declUtils.getFunctionDeps(action, declViewModel._internal);\n\n    if (!_.isEmpty(action.deps)) {\n      return moduleLoader.loadDependentModule(action.deps).then(function (depModuleObj) {\n        //new in aw4.2\n        declUtils.assertValidModelDataCtxNodeAndAction2(declViewModel, dataCtxNode, action, 'Load action not executed.', 'executeLoadAction (b)'); // Load function.deps\n        //\n        // Note: Even if the list of 'functionDeps' is empty we need to execute the async load since some\n        // code (breadcrumbs) needs the extra digest cycle (or two). This is odd since the same 'empty'\n        // check later in this function seems to work ok.\n        //\n\n        return moduleLoader.loadDependentModules(functionDeps).then(function (depFunctionObj) {\n          _.forEach(depFunctionObj, function (depFuncValue, depFuncKey) {\n            depModuleObj[depFuncKey] = depFuncValue;\n          });\n\n          var localScope = declUtils.resolveLocalDataCtx(localContext.data, localContext);\n          return _executeLoadAction(localContext.data, action, localScope, dataProviderJson, actionRequestObj, depModuleObj);\n        });\n      });\n    }\n\n    if (!_.isEmpty(functionDeps)) {\n      // Load function.deps\n      return moduleLoader.loadDependentModules(functionDeps).then(function (depFunctionObj) {\n        var localScope = declUtils.resolveLocalDataCtx(localContext.data, localContext);\n        return _executeLoadAction(localContext.data, action, localScope, dataProviderJson, actionRequestObj, depFunctionObj);\n      });\n    }\n\n    return _executeLoadAction(localContext.data, action, localContext, dataProviderJson, actionRequestObj, null);\n  } //let localScope = declUtils.resolveLocalDataCtx( declViewModel, dataCtxNode );\n\n\n  return _postProcessAction(localContext, localContext.data, dataProviderJson, null);\n};\n/**\n * Get first page of results\n *\n * @param {DeclAction} action - The 'declAction' object to use to get the page data.\n *\n * @param {dataProviderJson} dataProviderJson - The data provider's json object.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object resolved with the IModelObject results of this operation.\n *\n * <pre>\n * If NOT LOV:\n * {Number} totalFound -\n * {Object} results -\n *\n * If LOV:\n * {Object}\n * </pre>\n *\n */\n\nexport let getFirstPage = function (action, dataProviderJson, dataCtxNode, actionRequestObj) {\n  if (action) {\n    return exports.executeLoadAction(action, dataProviderJson, dataCtxNode, actionRequestObj);\n  }\n  /**\n   * Execute the action within the context of the DeclViewModel on the dataCtxNode.\n   */\n\n\n  var declViewModel = declUtils.findViewModel(dataCtxNode, true, appCtxSvc);\n  declUtils.assertValidModelAndDataCtxNode(declViewModel, dataCtxNode);\n  /**\n   * Support for binding dataProvider's response to a static list, when action is not provided.\n   */\n\n  return _postProcessAction(dataCtxNode, declViewModel, dataProviderJson, null);\n};\n/**\n * Get next page of results\n *\n * @param {DeclAction} action - The 'declAction' to perform.\n *\n * @param {Object} dataProviderJson - data provider json object\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object resolved with the IModelObject results of this operation.\n */\n\nexport let getNextPage = function (action, dataProviderJson, dataCtxNode, actionRequestObj) {\n  if (action) {\n    return exports.executeLoadAction(action, dataProviderJson, dataCtxNode, actionRequestObj);\n  }\n  /**\n   * Execute the action within the context of the DeclViewModel on the dataCtxNode.\n   */\n\n\n  var declViewModel = declUtils.findViewModel(dataCtxNode, true, appCtxSvc);\n  declUtils.assertValidModelAndDataCtxNode(declViewModel, dataCtxNode);\n  /**\n   * Support for binding dataProvider's response to a static list, when action is not provided.\n   */\n\n  return _postProcessAction(dataCtxNode, declViewModel, dataProviderJson, null);\n};\nexports = {\n  validateLOVSelection,\n  validateSelections,\n  executeLoadAction,\n  getFirstPage,\n  getNextPage\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/declDataProviderService.js"],"names":["dataProviderTcLOV","trace","declUtils","responseObj","depModuleObj","logger","actionFinal","_prepareActionAltInputData","dataCtxNode","declViewModel","_postProcessAction","AwPromiseService","dataProviderJson","localContext","dpResult","_","actionResultObj","localDataCtx","declDataCtxSvc","fromResultPath","fromPath","fromObj","name","toCtxName","appCtxSvc","fromRequestPath","_applyActionRequestObject","altInputData","action","exports","validateLOVSelection","viewModelProp","actionRequestObj","selected","suggestion","vmProp","resp","response","Promise","partialErrors","valid","validateSelections","executeLoadAction","functionDeps","localScope","_executeLoadAction","getFirstPage","getNextPage"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Declarative UI data provider service\n * This service performs actions to retrieve data in a paged fashion based solely on a given 'declAction' object.\n *\n * @module js/declDataProviderService\n */\nimport declDataCtxSvc from 'js/declarativeDataCtxService';\nimport appCtxSvc from 'js/appCtxService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport Debug from 'debug';\nimport declUtils from 'js/declUtils';\nimport actionSvc from 'js/actionService';\nimport moduleLoader from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\n\nvar dataProviderTcLOV = 'TcLOV';\n\nvar trace = new Debug( 'declDataProviderService' );\n\n/**\n * Use the 'actionService' to execute the given action and resolve the returned 'promise' with the either no object\n * or a reference to the any dependent module's API object.\n * <P>\n * Note: Any dependent module will be loaded before the action is executed.\n * <P>\n * Note: It is assumed that the action will use its 'input' and 'output' properties to move action related data into\n * or out of the dataCtxNode or declViewModel.\n *\n * @param {Object} dataCtxNode - The data context node the action is being performed within.\n * @param {DeclViewModel} declViewModel - The view model containing the action to be executed.\n * @param {DeclAction} action - The declarative action to be executed.\n * @param {ModuleObject} depModuleObj - (Optional) Reference to a module containing 'glue code' to assist in the\n *            execution.\n *\n * @return {Promise} A promise resolved with the response/result(s) of the action as properties as follows:\n *\n * <pre>\n * {\n *     responseObj: responseObj,\n *     depModuleObj: depModuleObj\n * }\n * </pre>\n */\nfunction _executeAction( dataCtxNode, declViewModel, action, depModuleObj ) {\n    declUtils.assertValidModelDataCtxNodeAndAction2( declViewModel, dataCtxNode, action, null, '_executeAction' );\n    return actionSvc.executeAction( declViewModel, action, dataCtxNode, depModuleObj ).then( function( responseObj ) {\n        return {\n            responseObj: responseObj,\n            depModuleObj: depModuleObj\n        };\n    } ).catch( function( x ) {\n        trace( 'exception', x );\n        logger.error( 'exception: ' + x );\n    } );\n}\n\n/**\n *\n * @param {DeclViewModel} declViewModel - The view model containing the action to be executed.\n *\n * @param {DeclAction} action - The 'declAction' object to use to get the page data.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {dataProviderJson} dataProviderJson - The data provider's json object.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *            <P>\n *            If not provided all action options are resolved solely from action's 'inputData' via the given dataCtxNode.\n *            <P>\n *            Note: The properties in this object are guaranteed to be passed to the action being invoked and that\n *            the results of that particular action invocation are returned as the resolution of the promise\n *            returned by this function. Use of the dataCtxNode for 'inputData' binding can result in mixed input vs.\n *            output results when multiple async calls are made to the same action.\n *\n * @param {ModuleObject} depModuleObj - (Optional) Reference to a module containing 'glue code' to assist in the\n *            execution.\n *\n * @return {Promise} A promise resolved with the response/result(s) of the action as properties as follows:\n */\nfunction _executeLoadAction( declViewModel, action, dataCtxNode, dataProviderJson, actionRequestObj, depModuleObj ) {\n    //new in aw4.2\n    declUtils.assertValidModelDataCtxNodeAndAction2( declViewModel, dataCtxNode, action, null, '_executeLoadAction' );\n\n    var actionFinal = action;\n\n    if( actionRequestObj ) {\n        actionFinal = _prepareActionAltInputData( dataCtxNode, declViewModel, action, actionRequestObj, depModuleObj );\n    }\n\n    return _executeAction( dataCtxNode, declViewModel, actionFinal, depModuleObj ).then( function( actionResultObj ) {\n        // revisitme - somehow in the long SOA case like search, the dataCtxNode.data is not equal to declViewModel\n        // anymore which is cause side effect - will investigate later\n        dataCtxNode.data.totalFound = declViewModel.totalFound;\n        dataCtxNode.data.searchResults = declViewModel.searchResults;\n        return _postProcessAction( dataCtxNode, dataCtxNode.data, dataProviderJson, actionResultObj );\n    }, function( rejectObj ) {\n        return AwPromiseService.instance.reject( rejectObj );\n    } );\n}\n\n/**\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n * @param {DeclViewModel} declViewModel - The view model the action is defined within.\n * @param {Object} dataProviderJson - The original JSON definition of the declDataProvider.\n * @param {Object} actionResultObj - The resolved response object from executing the action.\n *\n * @return {Promise} A Promise object resolved with the processed result of the action. The result contains updated\n *         values for all the properties in the given 'dataProviderJson' object.\n */\nfunction _postProcessAction( dataCtxNode, declViewModel, dataProviderJson, actionResultObj ) {\n    var responseObj;\n\n    if( dataProviderJson && declUtils.isValidModelAndDataCtxNode( declViewModel, dataCtxNode ) ) {\n        let localContext = declUtils.getLatestContext( dataCtxNode, declViewModel );\n        var dpResult = _.cloneDeep( dataProviderJson );\n\n        // LCS-166817 - Active Workspace tree table view performance in IE and embedded in TCVis is bad - Framework Fixes\n        // Fix cucumber 'Record Utilization Declarative Panel': depModuleObj is needed for all {{function:}}\n        var depModuleObj = actionResultObj && actionResultObj.depModuleObj ? actionResultObj.depModuleObj : null;\n\n        /**\n         * Check if the dataCtxNode we need has been destroyed (due to DOM manipulation) since the action event\n         * processing was started.\n         */\n        var localDataCtx = declUtils.resolveLocalDataCtx( localContext.data, localContext );\n\n        /**\n         * Resolve any other data 'from' the declViewModel and/or dataCtxNode\n         */\n        declDataCtxSvc.applyScope( localContext.data, dpResult, declViewModel._internal.functions, localDataCtx,\n            depModuleObj );\n\n        if( actionResultObj ) {\n            _.forEach( dpResult, function( fromPath, toPath ) {\n                /**\n                 * If fromPath has a 'result.' prefix, parse the expression within fromPath to get the correct\n                 * value.\n                 */\n                if( _.isString( fromPath ) && /^action\\.result\\./.test( fromPath ) ) {\n                    var fromResultPath = fromPath.split( 'action.result.' )[ 1 ];\n\n                    var fromObj = _.get( actionResultObj.responseObj, fromResultPath );\n\n                    _.set( dpResult, toPath, fromObj );\n                }\n            } );\n        }\n\n        /**\n         * Build the response object from the updated (i.e. data bound) properties in the declDataProvider's JSON\n         * definition.\n         */\n        responseObj = {\n            actionResultObj: actionResultObj\n        };\n\n        _.forEach( dpResult, function( value, name ) {\n            if( name === 'action' ) {\n                return;\n            }\n\n            /**\n             * Handle special case of a mapping to a different property name (e.g. 'response' to 'result').\n             */\n            if( name === 'response' ) {\n                responseObj.results = value;\n            } else if( /^ctx\\./.test( name ) ) {\n                /**\n                 * If the name starts with ctx. update the appCtxService\n                 */\n                var toCtxName = name.split( 'ctx.' )[ 1 ];\n                appCtxSvc.updatePartialCtx( toCtxName, value );\n            } else {\n                responseObj[ name ] = value;\n            }\n        } );\n\n        /**\n         * Make sure the 'totalFound' is set if we had any data returned.\n         */\n        if( responseObj.results && _.isUndefined( responseObj.totalFound ) ) {\n            responseObj.totalFound = responseObj.results.length;\n        }\n    }\n\n    return AwPromiseService.instance.resolve( responseObj );\n}\n\n/**\n * @param {Object} inputData - Input properties from JSON.\n * @param {Object} altInputData - Input properties to use.\n * @param {Object} actionRequestObj - Object from action to use.\n */\nfunction _applyActionRequestObject( inputData, altInputData, actionRequestObj ) {\n    /**\n     * Put the specific action's request values on the 'atInputData' of the action's inputData clone.\n     */\n    _.forEach( inputData, function( fromPath, toPath ) {\n        if( _.isString( fromPath ) ) {\n            if( /^request\\./.test( fromPath ) ) {\n                var fromRequestPath = fromPath.split( 'request.' )[ 1 ];\n\n                var fromObj = _.get( actionRequestObj, fromRequestPath );\n\n                _.set( altInputData, toPath, fromObj );\n            }\n        } else {\n            _applyActionRequestObject( fromPath, altInputData[ toPath ], actionRequestObj );\n        }\n    } );\n} // _applyActionRequestObject\n\n/**\n * Note 1: Multiple async load requests can be made before any given one completes. So we cannot put action-related\n * objects on the dataCtxNode since the dataCtxNode may change before the original dataCtxNode is applied to the action the objects\n * were ment for.\n * <P>\n * To address this, the dataCtxNode will be applied to the 'inputData' of a clone of the action NOW. This clone (and the\n * now static 'inputData' objects) will be passed to the actionService which will use this 'altInputData' as-is\n * without trying to apply the dataCtxNode to it again.\n * <P>\n * Note 2: The post processing of the action results do not have this problem since a new 'outputData' object is\n * created and passed back through the 'promise chain' in a more synchronous fashion. So any output data placed on\n * the dataCtxNode is not there long enough to be overwritten by another action completing before it.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context the operation is being performed within.\n *\n * @param {DeclAction} action - The 'declAction' object to use to get the page data.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @param {Object} depModuleObj - Dependent module object on which the 'apply' method of any named functions will be\n *            called (action.deps).\n\n *\n * @returns {DeclAction} Action object to actually use.\n */\nfunction _prepareActionAltInputData( dataCtxNode, declViewModel, action, actionRequestObj, depModuleObj ) {\n    var actionFinal = action;\n\n    if( action.inputData ) {\n        /**\n         * Make copied of the 'action' and 'inputData' objects (to keep the originals safe from modification)\n         */\n        actionFinal = _.cloneDeep( action );\n\n        actionFinal.altInputData = _.cloneDeep( action.inputData );\n\n        // LCS-166817 - Active Workspace tree table view performance in IE and embedded in TCVis is bad - Framework Fixes\n        // The actonRequestObj, which may be a very complex structure, can be applied after applyScope\n        declDataCtxSvc.applyScope( declViewModel, actionFinal.altInputData, declViewModel._internal.functions,\n            dataCtxNode, depModuleObj );\n\n        /**\n         * Put the specific action's request values on the 'atInputData' of the action's inputData clone.\n         */\n        _applyActionRequestObject( actionFinal.inputData, actionFinal.altInputData, actionRequestObj );\n    }\n\n    return actionFinal;\n} // _prepareActionAltInputData\n\n/**\n * --------------------------------------------------------------------------<BR>\n * Define external API<BR>\n * --------------------------------------------------------------------------<BR>\n */\n\nvar exports = {};\n\n/**\n * validate the LOV sections using the function in the lovService\n *\n * @param {array} lovEntries - The 'lovEntries' to update.\n * @param {Object} dataProviderJson - data provider json object\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @return {Promise} A promise object. validateLOVValueSelections\n */\nexport let validateLOVSelection = function( { lovEntries, vmo, viewModelProp }, dataCtxNode, action, dataProviderJson ) {\n    //let declViewModel = declUtils.findViewModel( dataCtxNode, true, appCtxSvc );\n    // if( dataProviderJson.dataProviderType && dataProviderJson.dataProviderType === dataProviderTcLOV ) {\n    //     declDataCtxSvc.applyScope( declViewModel, dataProviderJson, null, dataCtxNode, null );\n    //     var lovConfig = dataProviderJson.lovConfiguration;\n    //     var viewModelObj = lovConfig.viewModelObj;\n    //     var viewProp = lovConfig.viewProp;\n    //     var operationName = lovConfig.operationName;\n    //     return lovService.validateLOVValueSelections( lovEntries, viewProp, operationName, viewModelObj );\n    // }\n    if( action && viewModelProp ) {\n        let actionRequestObj = {\n            selected: lovEntries,\n            suggestion: viewModelProp.filterString,\n            vmo,\n            vmProp: viewModelProp\n        };\n        return validateSelections( action, dataProviderJson, dataCtxNode, actionRequestObj ).then( ( resp ) => {\n            let response;\n            if( resp.actionResultObj && resp.actionResultObj.responseObj ) {\n                response = resp.actionResultObj.responseObj;\n                if( !response.valid ) {\n                    return Promise.reject( response );\n                }\n                return Promise.resolve( response );\n            } else if( !resp.valid ) {\n                resp.cause = { partialErrors: true };\n                return Promise.reject( resp );\n            }\n\n            return resp;\n        } );\n    }\n    return Promise.resolve( { valid: true } );\n};\n\n/**\n * Validate the LOV selections using the function in the dataProvider.\n *\n * @param {DeclAction} action - The 'declAction' object to use.\n * @param {Object} dataProviderJson - data provider json object\n * @param {Object} lovScope - The context in which to evaluate any conditions/bindings.\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object.\n */\nexport let validateSelections = function( action, dataProviderJson, lovScope, actionRequestObj ) {\n    return exports.executeLoadAction( action, dataProviderJson, lovScope, actionRequestObj );\n};\n\n/**\n * Execute the given action and return results in the async resolution.\n *\n * @param {DeclAction} action - The 'declAction' object to use.\n *\n * @param {dataProviderJson} dataProviderJson - The data provider's JSON object.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object resolved with the results (IModelObject, ViewModelObjects, etc.) of the given\n *         action.\n *\n * <pre>\n * If NOT LOV:\n * {Number} totalFound -\n * {Object} results -\n *\n * If LOV:\n * {Object}\n * </pre>\n */\nexport let executeLoadAction = function( action, dataProviderJson, dataCtxNode, actionRequestObj ) {\n    // if( !action ) {\n    //     logger.error( 'Invalid action specified' );\n    // }\n\n    let declViewModel = declUtils.findViewModel( dataCtxNode, true, appCtxSvc );\n    // add update To latestHere ...\n    let localContext = declUtils.getLatestContext( dataCtxNode, declViewModel );\n    if( !declUtils.isNil( action ) ) {\n        /**\n         * Execute the action within the context of the DeclViewModel on the dataCtxNode.\n         */\n        declUtils.assertValidModelDataCtxNodeAndAction2( declViewModel, dataCtxNode, action, 'Load action not executed.', 'executeLoadAction (a)' );\n        // Get Function deps\n        var functionDeps = declUtils.getFunctionDeps( action, declViewModel._internal );\n        if( !_.isEmpty( action.deps ) ) {\n            return moduleLoader.loadDependentModule( action.deps ).then( function( depModuleObj ) {\n                //new in aw4.2\n                declUtils.assertValidModelDataCtxNodeAndAction2( declViewModel, dataCtxNode, action, 'Load action not executed.', 'executeLoadAction (b)' );\n\n                // Load function.deps\n                //\n                // Note: Even if the list of 'functionDeps' is empty we need to execute the async load since some\n                // code (breadcrumbs) needs the extra digest cycle (or two). This is odd since the same 'empty'\n                // check later in this function seems to work ok.\n                //\n                return moduleLoader.loadDependentModules( functionDeps ).then( function( depFunctionObj ) {\n                    _.forEach( depFunctionObj, function( depFuncValue, depFuncKey ) {\n                        depModuleObj[ depFuncKey ] = depFuncValue;\n                    } );\n\n                    var localScope = declUtils.resolveLocalDataCtx( localContext.data, localContext );\n\n                    return _executeLoadAction( localContext.data, action, localScope, dataProviderJson, actionRequestObj,\n                        depModuleObj );\n                } );\n            } );\n        }\n\n        if( !_.isEmpty( functionDeps ) ) {\n            // Load function.deps\n            return moduleLoader.loadDependentModules( functionDeps ).then( function( depFunctionObj ) {\n                var localScope = declUtils.resolveLocalDataCtx( localContext.data, localContext );\n\n                return _executeLoadAction( localContext.data, action, localScope, dataProviderJson, actionRequestObj, depFunctionObj );\n            } );\n        }\n        return _executeLoadAction( localContext.data, action, localContext, dataProviderJson, actionRequestObj, null );\n    }\n    //let localScope = declUtils.resolveLocalDataCtx( declViewModel, dataCtxNode );\n    return _postProcessAction( localContext, localContext.data, dataProviderJson, null );\n};\n\n/**\n * Get first page of results\n *\n * @param {DeclAction} action - The 'declAction' object to use to get the page data.\n *\n * @param {dataProviderJson} dataProviderJson - The data provider's json object.\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object resolved with the IModelObject results of this operation.\n *\n * <pre>\n * If NOT LOV:\n * {Number} totalFound -\n * {Object} results -\n *\n * If LOV:\n * {Object}\n * </pre>\n *\n */\nexport let getFirstPage = function( action, dataProviderJson, dataCtxNode, actionRequestObj ) {\n    if( action ) {\n        return exports.executeLoadAction( action, dataProviderJson, dataCtxNode, actionRequestObj );\n    }\n\n    /**\n     * Execute the action within the context of the DeclViewModel on the dataCtxNode.\n     */\n    var declViewModel = declUtils.findViewModel( dataCtxNode, true, appCtxSvc );\n\n    declUtils.assertValidModelAndDataCtxNode( declViewModel, dataCtxNode );\n\n\n    /**\n     * Support for binding dataProvider's response to a static list, when action is not provided.\n     */\n    return _postProcessAction( dataCtxNode, declViewModel, dataProviderJson, null );\n};\n\n/**\n * Get next page of results\n *\n * @param {DeclAction} action - The 'declAction' to perform.\n *\n * @param {Object} dataProviderJson - data provider json object\n *\n * @param {Object} dataCtxNode - The context in which to evaluate any conditions/bindings.\n *\n * @param {Object} actionRequestObj - (Optional) An Object holding details of the action's 'inputData' and options\n *            for this load operation. Its properties are accessed via the 'request.' prefix on properties on the\n *            action's 'inputData' (e.g. \"myActionParam1\": \"request.listLoadInput\" where 'listLoadInput' is a\n *            parameter on the 'actionRequestObj' object)\n *\n * @return {Promise} A promise object resolved with the IModelObject results of this operation.\n */\nexport let getNextPage = function( action, dataProviderJson, dataCtxNode, actionRequestObj ) {\n    if( action ) {\n        return exports.executeLoadAction( action, dataProviderJson, dataCtxNode, actionRequestObj );\n    }\n\n    /**\n     * Execute the action within the context of the DeclViewModel on the dataCtxNode.\n     */\n    var declViewModel = declUtils.findViewModel( dataCtxNode, true, appCtxSvc );\n\n    declUtils.assertValidModelAndDataCtxNode( declViewModel, dataCtxNode );\n\n\n    /**\n     * Support for binding dataProvider's response to a static list, when action is not provided.\n     */\n    return _postProcessAction( dataCtxNode, declViewModel, dataProviderJson, null );\n};\n\nexports = {\n    validateLOVSelection,\n    validateSelections,\n    executeLoadAction,\n    getFirstPage,\n    getNextPage\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
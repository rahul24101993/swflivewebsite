{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link breadCrumbService} which provides the data for navigation bread crumb from url.\n *\n * @module js/breadCrumbService\n */\nimport searchFilterSvc from 'js/aw.searchFilter.service';\nimport appCtxSvc from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\n/**\n * Reset the breadcrumb provider to loading\n *\n * @param {Object} breadCrumbConfig - bread crumb config info\n * @return {Object} breadcrumb provider\n */\n\nexport let resetBreadcrumbProvider = function (breadCrumbConfig) {\n  var breadCrumbProvider;\n\n  if (breadCrumbConfig && breadCrumbConfig.type === 'navigate' && !breadCrumbProvider) {\n    breadCrumbProvider = {\n      crumbs: []\n    };\n  }\n\n  return breadCrumbProvider;\n};\n/**\n * Refresh the breadcrumb provider\n *\n * @param {Object} breadCrumbConfig - bread crumb config info\n * @param {Object} pwaSelectionModel - selection model of primary workarea\n * @param {Object} searchFilterCategories - search filter categories\n * @param {Object} searchFilterMap - search filter map\n * @param {Object} searchCriteria - search criteria\n * @param {Object} label - breadcrumb label when there is no search criteria\n * @param {Object} secondarySearchEnabled - true if secondary search is enabled\n *\n * @return {Object} breadcrumb provider and total found information\n */\n\nexport let refreshBreadcrumbProvider = function (breadCrumbConfig, pwaSelectionModel, searchFilterCategories, searchFilterMap, searchCriteria, label, secondarySearchEnabled) {\n  var breadCrumbProvider;\n\n  if (breadCrumbConfig && breadCrumbConfig.type === 'navigate') {\n    eventBus.publish('navigateBreadcrumb.refresh', breadCrumbConfig.id);\n    eventBus.publish(breadCrumbConfig.vm + '.refresh', breadCrumbConfig.id);\n  } else {\n    breadCrumbProvider = searchFilterSvc.buildBreadcrumbProvider(breadCrumbConfig, !_.isEmpty(searchCriteria) ? searchCriteria : label, appCtxSvc.getCtx('search.totalFound'), pwaSelectionModel, searchFilterCategories, searchFilterMap, secondarySearchEnabled, searchCriteria);\n  }\n\n  return breadCrumbProvider;\n};\nconst breadCrumbService = {\n  resetBreadcrumbProvider,\n  refreshBreadcrumbProvider\n};\nexport default breadCrumbService;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/breadCrumbService.js"],"names":["resetBreadcrumbProvider","breadCrumbConfig","breadCrumbProvider","crumbs","refreshBreadcrumbProvider","eventBus","searchFilterSvc","_","appCtxSvc","breadCrumbService"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,eAAA,MAAA,4BAAA;AACA,OAAA,SAAA,MAAA,kBAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIA,uBAAuB,GAAG,UAAA,gBAAA,EAA6B;EAC9D,IAAA,kBAAA;;EACA,IAAIC,gBAAgB,IAAIA,gBAAgB,CAAhBA,IAAAA,KAApBA,UAAAA,IAA4D,CAAhE,kBAAA,EAAsF;IAClFC,kBAAkB,GAAG;MACjBC,MAAM,EAAE;IADS,CAArBD;EAGH;;EACD,OAAA,kBAAA;AAPG,CAAA;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,yBAAyB,GAAG,UAAA,gBAAA,EAAA,iBAAA,EAAA,sBAAA,EAAA,eAAA,EAAA,cAAA,EAAA,KAAA,EAAA,sBAAA,EACsD;EACzF,IAAA,kBAAA;;EACA,IAAIH,gBAAgB,IAAIA,gBAAgB,CAAhBA,IAAAA,KAAxB,UAAA,EAA+D;IAC3DI,QAAQ,CAARA,OAAAA,CAAAA,4BAAAA,EAAgDJ,gBAAgB,CAAhEI,EAAAA;IACAA,QAAQ,CAARA,OAAAA,CAAkBJ,gBAAgB,CAAhBA,EAAAA,GAAlBI,UAAAA,EAAoDJ,gBAAgB,CAApEI,EAAAA;EAFJ,CAAA,MAGO;IACHH,kBAAkB,GAAGI,eAAe,CAAfA,uBAAAA,CAAAA,gBAAAA,EAEjB,CAACC,CAAC,CAADA,OAAAA,CAAD,cAACA,CAAD,GAAA,cAAA,GAFiBD,KAAAA,EAEsCE,SAAS,CAATA,MAAAA,CAFtCF,mBAEsCE,CAFtCF,EAAAA,iBAAAA,EAAAA,sBAAAA,EAAAA,eAAAA,EAAAA,sBAAAA,EAArBJ,cAAqBI,CAArBJ;EAIH;;EACD,OAAA,kBAAA;AAZG,CAAA;AAeP,MAAMO,iBAAiB,GAAG;EAAA,uBAAA;EAEtBL;AAFsB,CAA1B;AAIA,eAAA,iBAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link breadCrumbService} which provides the data for navigation bread crumb from url.\n *\n * @module js/breadCrumbService\n */\nimport searchFilterSvc from 'js/aw.searchFilter.service';\nimport appCtxSvc from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\n\n/**\n * Reset the breadcrumb provider to loading\n *\n * @param {Object} breadCrumbConfig - bread crumb config info\n * @return {Object} breadcrumb provider\n */\nexport let resetBreadcrumbProvider = function( breadCrumbConfig ) {\n    var breadCrumbProvider;\n    if( breadCrumbConfig && breadCrumbConfig.type === 'navigate' && !breadCrumbProvider ) {\n        breadCrumbProvider = {\n            crumbs: []\n        };\n    }\n    return breadCrumbProvider;\n};\n\n/**\n * Refresh the breadcrumb provider\n *\n * @param {Object} breadCrumbConfig - bread crumb config info\n * @param {Object} pwaSelectionModel - selection model of primary workarea\n * @param {Object} searchFilterCategories - search filter categories\n * @param {Object} searchFilterMap - search filter map\n * @param {Object} searchCriteria - search criteria\n * @param {Object} label - breadcrumb label when there is no search criteria\n * @param {Object} secondarySearchEnabled - true if secondary search is enabled\n *\n * @return {Object} breadcrumb provider and total found information\n */\nexport let refreshBreadcrumbProvider = function( breadCrumbConfig, pwaSelectionModel,\n    searchFilterCategories, searchFilterMap, searchCriteria, label, secondarySearchEnabled ) {\n    var breadCrumbProvider;\n    if( breadCrumbConfig && breadCrumbConfig.type === 'navigate' ) {\n        eventBus.publish( 'navigateBreadcrumb.refresh', breadCrumbConfig.id );\n        eventBus.publish( breadCrumbConfig.vm + '.refresh', breadCrumbConfig.id );\n    } else {\n        breadCrumbProvider = searchFilterSvc.buildBreadcrumbProvider(\n            breadCrumbConfig,\n            !_.isEmpty( searchCriteria ) ? searchCriteria : label, appCtxSvc.getCtx( 'search.totalFound' ),\n            pwaSelectionModel, searchFilterCategories, searchFilterMap, secondarySearchEnabled, searchCriteria );\n    }\n    return breadCrumbProvider;\n};\n\nconst breadCrumbService = {\n    resetBreadcrumbProvider,\n    refreshBreadcrumbProvider\n};\nexport default breadCrumbService;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2021 Siemens\n\n/* eslint-disable require-jsdoc */\n\n/* eslint-disable complexity */\n\n/**\n * This is the primary service used to create, test and manage the internal properties of ViewModelProperty Objects used\n * throughout the UniversalWidget (et al.) areas of AW. Views can create custom view models by creating a\n * ViewModelObject and adding ViewModelProperty Objects created by this service to it.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/uwPropertyService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport dmSvc from 'soa/dataManagementService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport uwDirectiveDateTimeSvc from 'js/uwDirectiveDateTimeService';\nimport eventBus from 'js/eventBus';\nimport { propTypeDate, updateDateApi, setDateTimeValues, getDBValueForDate, getUIValueForDate, clearDateTimeValues } from 'js/dateTimeProcessingService';\n/**\n * Editable State of the property object\n *\n * @private\n */\n\nvar PROP_EDITABLE = 'editable';\n/**\n * Value of the property object\n *\n * @private\n */\n\nvar PROP_VALUE = 'value';\n/**\n * Validation error of property object\n *\n * @private\n */\n\nvar PROP_ERROR = 'error';\n/**\n * Required state of property object\n *\n * @private\n */\n\nvar PROP_REQUIRED = 'required';\n/**\n * Overlay type 'viewModelPropertyOverlay', which defines that the overlay has real data(i.e\n * IViewModelProperty).\n *\n * @private\n */\n\nvar VIEW_MODEL_PROPERTY = 'viewModelPropertyOverlay';\n/**\n * Overlay type 'widgetOverlay', which defines that the overlay has widget data.\n *\n * @private\n */\n\nvar WIDGET = 'widgetOverlay';\n/**\n * Integer minimum value, which is equal to Java Integer's minimum value\n */\n\nvar _integerMinValue = -2147483648;\n/**\n * Integer maximum value, which is equal to Java Integer's maximum value\n */\n\n\nvar _integerMaxValue = 2147483647;\n/**\n * Cache document ng element to retrieve the scope and trigger digest cycle.\n *\n * @private\n */\n\n/** revisitme yogesh\n   * Hint: we may not be required this\n var _docNgElement = ngModule.element( document.body );\n  */\n\n/**\n * Cache $q promise service.\n *\n * @private\n */\n\n/**\n * {dateTimeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {localeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {clientDataModel} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {dataManagementService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {$rootScope} Cached reference to the 'root' scope associated with the top level (i.e. document) DOM Element.\n */\n\nvar _documentScope = null;\n/**\n * {StringMap} Cached 'basic' locale text bundle.\n */\n\nvar _localTextBundle;\n/**\n * {Array} Promise that need to be resolved when debounced function executes eventually\n */\n\n\nvar _pingDeferred = null;\n/**\n * @param {String} stringValue -\n *\n * @return {boolean} TRUE if given value is not NULL and equals 'true', 'TRUE' or '1'.\n */\n\nvar _isPropertyValueTrue = function (stringValue) {\n  return stringValue && stringValue !== '0' && (String(stringValue).toUpperCase() === 'TRUE' || stringValue === '1');\n};\n/**\n * Set locale specific string used for array UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\n\n\nfunction _setArrayText(vmProp, localTextBundle) {\n  if (!vmProp.isRequired && (_.isUndefined(vmProp.propertyRequiredText) || vmProp.propertyRequiredText.length === 0)) {\n    vmProp.propertyRequiredText = localTextBundle.ARRAY_PLACEHOLDER_TEXT;\n  } // Set array button's tool tips\n\n\n  vmProp.moveUpButtonTitle = localTextBundle.MOVE_UP_BUTTON_TITLE;\n  vmProp.moveDownButtonTitle = localTextBundle.MOVE_DOWN_BUTTON_TITLE;\n  vmProp.removeButtonTitle = localTextBundle.REMOVE_BUTTON_TITLE;\n} // _setArrayText\n\n/**\n * Set locale specific string used for radio button UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\n\n\nfunction _setRadioText(vmProp, localTextBundle) {\n  if (!vmProp.propertyRadioTrueText) {\n    vmProp.propertyRadioTrueText = localTextBundle.RADIO_TRUE;\n  }\n\n  if (!vmProp.propertyRadioFalseText) {\n    vmProp.propertyRadioFalseText = localTextBundle.RADIO_FALSE;\n  }\n  /**\n   * Handles setting of custom labels and vertical alignment attributes when directives are used natively\n   */\n\n\n  if (vmProp.radioBtnApi) {\n    if (vmProp.radioBtnApi.customTrueLabel) {\n      vmProp.propertyRadioTrueText = vmProp.radioBtnApi.customTrueLabel;\n    }\n\n    if (vmProp.radioBtnApi.customFalseLabel) {\n      vmProp.propertyRadioFalseText = vmProp.radioBtnApi.customFalseLabel;\n    }\n\n    if (vmProp.radioBtnApi.vertical) {\n      vmProp.vertical = vmProp.radioBtnApi.vertical;\n    }\n  }\n}\n/**\n * Helper function to avoid multiple calls to load objects by using lodash debounce\n */\n\n\nvar _pingLoadObjects = _.debounce(function (uidsArray, vmProp) {\n  dmSvc.loadObjects(uidsArray).then(function () {\n    exports.setValue(vmProp, vmProp.dbValue);\n\n    if (vmProp.propApi && vmProp.propApi.fireValueChangeEvent) {\n      vmProp.propApi.fireValueChangeEvent();\n    }\n\n    if (_pingDeferred) {\n      _pingDeferred.resolve();\n\n      _pingDeferred = null;\n    }\n  }, function (error) {\n    if (vmProp.propApi && vmProp.propApi.fireUIValidationErrorEvent) {\n      vmProp.uiValue = '';\n      vmProp.error = error.message;\n      vmProp.clientValidationError = error.message;\n      vmProp.hasServerValidationError = true;\n      vmProp.propApi.fireUIValidationErrorEvent(error.message);\n    }\n\n    if (_pingDeferred) {\n      _pingDeferred.reject(error);\n\n      _pingDeferred = null;\n    }\n  });\n}, 250);\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n * <P>\n * Note: The properties shown below in the 'members' section are defined, understood and created by this class\n * constructor.\n * <P>\n * Note: The properties shown below in the 'properties' section are marked as '(Optional)' and are defined and\n * understood, but not created by this class constructor. The are defined as needed by the various APIs of the\n * uwPropertyService.\n *\n * @class ViewModelProperty\n *\n * @memberof module:js/uwPropertyService\n *\n * @param {String} propertyName - The name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - User displayable name of the property\n * @param {String} dataType - Data type of the property\n * @param {Array} dbValue - Real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValuesIn - Display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n *\n * @property {String} inputType - (Optional) input type\n *\n * @property {Object} sourceObjectLastSavedDate - (Optional) source object last saved date\n *\n * @property {String} propertyRadioTrueText - (Optional) Used for boolean Radio button 'true' label\n *\n * @property {String} propertyRadioFalseText - (Optional) Used for boolean Radio button 'false' label\n *\n * @property {boolean} vertical - (Optional) Used for boolean radio button. TRUE to show the layout of the radio\n *           button vertically. FALSE for horizontal layout.\n *\n * @property {ObjectArray} displayValsModel - (Optional) This is only used for arrays so that we can maintain\n *           the selection of the rows in array widget.\n *\n * @property {String} parentUid - (Optional) This is the UID of the original IModelObject (in the client data\n *           model cache) that was used to originate this ViewModelProperty.\n *\n * @property {Object} newValue - (Optional) new value\n *\n * @property {Object} propApi - (Optional) property API\n *\n * @property {Object} oldValue - (Optional) old value\n *\n * @property {ObjectArray} oldValues - (Optional) old values\n *\n * @property {String} propertyRequiredText - (Optional) Localized text seen as the placeholder text in a field\n *           when the property is 'Required'.\n *\n * @property {Number} maxLength - (Optional) If not equal to '-1' or '0', this parameter specifies the maximum\n *           number of characters allowed in a string type property.\n *\n * @property {Number} numberOfCharacters - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of characters in a string type property.\n *\n * @property {Number} numberOfLines - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of lines allowed in a property.\n *\n * @property {String} moveUpButtonTitle - (Optional) Localized title for 'move-up' button in array widget.\n *\n * @property {String} moveDownButtonTitle - (Optional) Localized title for 'move-down' button in array widget.\n *\n * @property {String} removeButtonTitle - (Optional) Localized title for 'remove' button used only for array\n *           widget.\n *\n * @property {String} referenceTypeName - (Optional) reference type name\n *\n * @property {String} clientValidationError - (Optional) client validation error\n *\n * @property {String} hasServerValidationError - (Optional) has server validation error?\n *\n * @property {boolean} hasLov - (Optional) TRUE if the property has a specific list of values associated with\n *           it.\n *\n * @property {String} renderingHint - (Optional) Depending on the type, this string indicates some variation in\n *           how the property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include\n *           'radiobutton', 'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label',\n *           'textbox', 'textfield', 'textarea', 'longtext').\n *\n * @property {boolean} autofocus - (Optional) auto focus?\n *\n * @property {boolean} dirty - (Optional) TRUE if the value of the property has changed (been edited) since it\n *           was initially displayed.\n *\n * @property {Number} maxRowCount - (Optional) Used only for array widget. If != -1, then the array widget will\n *           only show the scroll bar after max row count is reached.\n *\n * @property {StringArray} newDisplayValues - (Optional) new display values\n *\n * @property {Object} propertyDescriptor - (Optional) property descriptor\n *\n * @property {boolean} initialize - (Optional) initialize?\n */\n\n\nvar ViewModelProperty = function (propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn) {\n  // eslint-disable-line complexity\n  var vmProp = this;\n  var displayValuesFinal = displayValuesIn || [];\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property propertyName\n   *\n   * {String} Internal name of the property.\n   */\n\n  vmProp.propertyName = propertyName;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property propertyDisplayName\n   *\n   * {String} User displayable name of the property (a.k.a. the property's 'label').\n   */\n\n  vmProp.propertyDisplayName = propertyDisplayName;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property type\n   *\n   * {String} Data type of the property. Valid values are: 'CHAR', 'DATE', 'DOUBLE', 'FLOAT', 'INTEGER',\n   * 'BOOLEAN', 'SHORT', 'STRING' & 'OBJECT'.\n   */\n\n  vmProp.type = dataType;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property dbValue\n   *\n   * {Object} The internal (database) representation of the property's value.\n   * <P>\n   * Note: For 'DATE' type properties, the 'dbValueIn' is assumed to be of type 'double' and represents the\n   * number of milliseconds since UNIX 'epoch' (January 1, 1970 00:00:00 GMT).\n   */\n\n  vmProp.dbValue = dbValue;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property displayValues\n   *\n   * {StringArray} Array of strings representing the current user displayable value(s) of the property.\n   */\n\n  vmProp.displayValues = displayValuesFinal;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isNull\n   *\n   * {boolean} TRUE if the current property value is 'no value'. FALSE if the value is valid as is.\n   * <P>\n   * Note: This option is used in cases when the property's value has not been set yet but that there is no\n   * way to represent this state in a simple string (e.g. Is the string 'empty' or not yet set? Is the 'empty'\n   * string an indication of an integer value of '0'?).\n   */\n\n  vmProp.isNull = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property editable\n   *\n   * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n   * read-only.\n   */\n\n  vmProp.editable = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isEnabled\n   *\n   * {boolean} TRUE if the property's value should be shown normally and (if also editable) react to user\n   * input. FALSE if the property's value should be shown 'greyed out' and not react to user input (even if\n   * editable).\n   */\n\n  vmProp.isEnabled = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isRichText\n   *\n   * {boolean} TRUE if the string value of the property is in HTML format and should be displayed using HTML\n   * formatting rules and edited with the 'rich text' editor.\n   */\n\n  vmProp.isRichText = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isRequired\n   *\n   * {boolean} TRUE if the property's value is required to successfully complete some operation that uses it.\n   * FALSE if the property's value is optional.\n   */\n\n  vmProp.isRequired = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isLocalizable\n   *\n   * {boolean} TRUE if the property value's UI should include the option to allow any user entered value to be\n   * converted from local language (as entered) into some other system language. Note: The UI necessary for\n   * translating the value is not currently supported in Active Workspace 2.4.\n   */\n\n  vmProp.isLocalizable = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isDisplayable\n   *\n   * {boolean} is displayable?\n   */\n\n  vmProp.isDisplayable = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isAutoAssignable\n   *\n   * {boolean} TRUE if the property's value can/should be assigned automatically by Teamcenter. FALSE if the\n   * property's value is not normally assigned/controlled by Teamcenter.\n   * <P>\n   * Note: The UI necessary for assigning this value is not currently supported in Active Workspace 2.4.\n   */\n\n  vmProp.isAutoAssignable = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property hasInitialValue\n   *\n   * {boolean} has initial value?\n   */\n\n  vmProp.hasInitialValue = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isArray\n   *\n   * {boolean} TRUE if the property can have more than one value in an ordered list. FALSE if the property can\n   * have only a single value.\n   * <P>\n   * Note: The UI necessary for displaying/editing the multiple value is not currently supported in Active\n   * Workspace 2.4.\n   */\n\n  vmProp.isArray = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property valueUpdated\n   *\n   * {boolean} value updated?\n   */\n\n  vmProp.valueUpdated = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property displayValueUpdated\n   *\n   * {boolean} display value updated?\n   */\n\n  vmProp.displayValueUpdated = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property editableInViewModel\n   *\n   * {boolean} editable in view model?\n   */\n\n  vmProp.editableInViewModel = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isPropertyModifiable\n   *\n   * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n   * read-only.\n   */\n\n  vmProp.isPropertyModifiable = true;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property isEditable\n   *\n   * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n   * read-only.\n   */\n\n  vmProp.isEditable = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property arrayLength\n   *\n   * {Number} array length\n   */\n\n  vmProp.arrayLength = -1;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property error\n   *\n   * {String} The message that should be displayed when some aspect of the property's value is not correct.\n   * This value must be 'null' or an empty string to not have the error be displayed.\n   */\n\n  vmProp.error = null;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property propertyLabelDisplay\n   *\n   * {String} property label display\n   * empty by default\n   * see declReact/viewModelService.js for precedence\n   */\n\n  vmProp.propertyLabelDisplay = '';\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property editLayoutSide\n   *\n   * {boolean} edit layout side\n   */\n\n  vmProp.editLayoutSide = false;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property uiValue\n   *\n   * {String} (Derived) A 'non-null' string containing comma separated values as specified in the\n   * 'displayValuesIn' parameter given in the constructor.\n   */\n\n  vmProp.uiValue = exports.getUiValue(displayValuesFinal);\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property overlayType\n   *\n   * {String} overlay type\n   */\n\n  vmProp.overlayType = VIEW_MODEL_PROPERTY;\n  /**\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property value\n   *\n   * {Object} database value\n   */\n\n  vmProp.value = _.cloneDeep(dbValue); // for the purposes of lovs with initial values, we are expecting prevDisplayValue\n  // to be same as uiOriginalValue. This dependency is a bit of a historical accident\n  // that needs to be addressed as part of a vmProp re-organization.\n  // for now, re-introducing the intialization of this param.\n\n  vmProp.prevDisplayValues = displayValuesFinal;\n  /**\n   * @private\n   *\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property dateApi\n   *\n   * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n   * is created by a Universal Widget and of type \"DATE\".\n   *\n   * @property dateApi.isDateEnabled\n   *\n   * {boolean} TRUE if the \"DATE\" type Universal Widget should display a date field.\n   *\n   * @property dateApi.isTimeEnabled\n   *\n   * {boolean} TRUE if the \"DATE\" type Universal Widget should display a time field.\n   */\n\n  vmProp.dateApi = {\n    isDateEnabled: true,\n    isTimeEnabled: true\n  };\n  /**\n   * @private\n   *\n   * @memberof module:js/uwPropertyService.ViewModelProperty\n   * @property radioBtnApi\n   *\n   * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n   * is created by a Universal Widget and of a type displayed as a groupd of 'radio buttons'.\n   */\n\n  vmProp.radioBtnApi = {};\n  /**\n   * -----------------------------------------------------------------------<BR>\n   * -----------------------------------------------------------------------<BR>\n   * Finish initialization of class properties <BR>\n   * -----------------------------------------------------------------------<BR>\n   * -----------------------------------------------------------------------<BR>\n   */\n\n  /**\n   */\n\n  var vmPropType = vmProp.type;\n\n  if (vmPropType === 'STRING' || vmPropType === 'STRINGARRAY' || vmPropType === 'CHAR') {\n    vmProp.inputType = 'text';\n  } else if (vmPropType === 'OBJECT') {\n    vmProp.dbValues = [vmProp.dbValue];\n  } else if (vmPropType === 'INTEGER' || vmPropType === 'INTEGERARRAY') {\n    if (dbValue) {\n      if (_.isString(dbValue)) {\n        vmProp.dbValue = Number(dbValue);\n        vmProp.value = vmProp.dbValue;\n      } else if (_.isArray(dbValue)) {\n        var doubleDbValues = [];\n\n        for (var l = 0; l < dbValue.length; l++) {\n          if (isFinite(dbValue[l])) {\n            doubleDbValues.push(Number(dbValue[l]));\n          } else if (dbValue[l] === '') {\n            doubleDbValues.push(dbValue[l]);\n          }\n        }\n\n        vmProp.dbValue = doubleDbValues;\n        vmProp.value = _.cloneDeep(doubleDbValues);\n      } else {\n        vmProp.dbValue = dbValue;\n        vmProp.value = vmProp.dbValue;\n      }\n    }\n  } else if (vmPropType === 'BOOLEAN' || vmPropType === 'BOOLEANARRAY') {\n    if (declUtils.isNil(dbValue)) {\n      vmProp.dbValue = null;\n      vmProp.value = null; // Note: If the server had no opinion on this boolean, neither does the 'value' property.\n    } else if (_.isString(dbValue)) {\n      vmProp.dbValue = _isPropertyValueTrue(vmProp.dbValue);\n      vmProp.value = vmProp.dbValue;\n    } else if (_.isArray(dbValue)) {\n      var booleanDbValues = [];\n\n      for (var k = 0; k < dbValue.length; k++) {\n        booleanDbValues[k] = _isPropertyValueTrue(dbValue[k]);\n      }\n\n      vmProp.dbValue = booleanDbValues;\n      vmProp.value = _.cloneDeep(booleanDbValues);\n    }\n\n    if (_localTextBundle) {\n      _setRadioText(vmProp, _localTextBundle);\n    } else {\n      localeSvc.getTextPromise().then(function (localTextBundle) {\n        _localTextBundle = localTextBundle;\n\n        _setRadioText(vmProp, _localTextBundle);\n      });\n    }\n  } else if (vmPropType === 'DATE' || vmPropType === 'DATEARRAY') {\n    if (_.isString(dbValue)) {\n      vmProp.dbValue = new Date(dbValue).getTime();\n      vmProp.value = vmProp.dbValue;\n    } else if (_.isNumber(dbValue)) {\n      if (dbValue !== 0) {\n        vmProp.dbValue = new Date(dbValue).getTime();\n        vmProp.value = vmProp.dbValue;\n      }\n    } else if (_.isArray(dbValue)) {\n      var dateDbValues = [];\n\n      for (var j = 0; j < dbValue.length; j++) {\n        dateDbValues[j] = new Date(dbValue[j]).getTime();\n      }\n\n      vmProp.dbValue = dateDbValues;\n      vmProp.value = _.cloneDeep(dateDbValues);\n    }\n  } else if (vmPropType === 'DOUBLE' || vmPropType === 'DOUBLEARRAY') {\n    if (dbValue) {\n      if (_.isString(dbValue)) {\n        vmProp.dbValue = Number(dbValue);\n        vmProp.value = vmProp.dbValue;\n      } else if (_.isArray(dbValue)) {\n        var doubleDbValues1 = [];\n\n        for (var i = 0; i < dbValue.length; i++) {\n          if (dbValue[i]) {\n            doubleDbValues1.push(Number(dbValue[i]));\n          } else if (dbValue[i] === '') {\n            doubleDbValues1.push(dbValue[i]);\n          }\n        }\n\n        vmProp.dbValue = doubleDbValues1;\n        vmProp.value = _.cloneDeep(doubleDbValues1);\n      } else if (dbValue) {\n        vmProp.dbValue = dbValue;\n        vmProp.value = vmProp.dbValue;\n      }\n    }\n  }\n};\n/**\n * @param {StringArray} uiValues - UI/display value array\n * @returns {String} UI value\n */\n\n\n_c = ViewModelProperty;\nexport let getUiValue = function (uiValues) {\n  if (!uiValues || uiValues.length === 0) {\n    return '';\n  }\n\n  if (uiValues.length > 1) {\n    var uiValue = uiValues[0];\n\n    for (var ndx = 1; ndx < uiValues.length && ndx < 4; ndx++) {\n      uiValue += ', ' + uiValues[ndx];\n    }\n\n    if (ndx < uiValues.length) {\n      uiValue += ', ...';\n    }\n\n    return uiValue;\n  }\n\n  return uiValues[0];\n};\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n *\n * @param {String} propertyName - the name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - user displayable name of the property\n * @param {String} dataType - data type of the property\n * @param {Object} dbValue - real value of the property. The internal (database) representation of the\n *            property's value.\n * @param {StringArray} displayValuesIn - display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n */\n\nexport let createViewModelProperty = function (propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn) {\n  return new ViewModelProperty(propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn);\n};\n/**\n * Update the model data. The view model should use this method to update property data\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n * @param {Boolean} isNull - is the property value null\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n * @param {Boolean} isModifiable - TRUE if the property is modifiable\n * @param {Object} sourceObjectLastSavedDate - last saved date of source object\n */\n\nexport let updateModelData = function (vmProp, value, displayValues, isNull, isEditable, isModifiable, sourceObjectLastSavedDate) {\n  var displayValuesFinal = displayValues === null ? [] : displayValues;\n  vmProp.displayValues = displayValuesFinal;\n  vmProp.isNull = isNull;\n  vmProp.editable = isEditable;\n  vmProp.isPropertyModifiable = isModifiable;\n  vmProp.uiValue = exports.getUiValue(displayValuesFinal);\n  vmProp.sourceObjectLastSavedDate = sourceObjectLastSavedDate || vmProp.sourceObjectLastSavedDate;\n\n  if (_.isArray(value) && !vmProp.isArray) {\n    vmProp.value = value.slice(0);\n  } else {\n    vmProp.value = value;\n  }\n\n  if (vmProp.prevDisplayValues) {\n    vmProp.prevDisplayValues = _.clone(vmProp.displayValues);\n  }\n\n  if (vmProp.uiValues) {\n    vmProp.uiValues = _.clone(vmProp.displayValues);\n  }\n\n  if (vmProp.isArray) {\n    vmProp.displayValsModel = [];\n\n    for (var i = 0; i < vmProp.displayValues.length; i++) {\n      vmProp.displayValsModel.push({\n        displayValue: vmProp.displayValues[i],\n        selected: false,\n        isInEditMode: false\n      });\n    }\n  }\n\n  if (!exports.isModified(vmProp)) {\n    vmProp.dbValue = _.cloneDeep(value);\n  }\n};\n/**\n * Copy the model data. The view model should use this method to copy model data\n *\n * @param {ViewModelProperty} targetProperty - ViewModelProperty object that will be updated.\n * @param {ViewModelProperty} updatedProperty - ViewModelProperty that has the updated information.\n */\n\nexport let copyModelData = function (targetProperty, updatedProperty) {\n  exports.updateModelData(targetProperty, updatedProperty.value, updatedProperty.displayValues, updatedProperty.isNull, updatedProperty.editable, updatedProperty.isPropertyModifiable, updatedProperty.sourceObjectLastSavedDate);\n\n  if (updatedProperty.dbValues && updatedProperty.dbValues.length > 0) {\n    targetProperty.dbValues = updatedProperty.dbValues.slice(0);\n  } else {\n    targetProperty.dbValues = [];\n  }\n};\n/**\n * Set's the parent object uid in view model property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty\n * @param {String} sourceObjectUid - source object UID\n */\n\nexport let setSourceObjectUid = function (vmProp, sourceObjectUid) {\n  vmProp.parentUid = sourceObjectUid;\n};\n/**\n * Retrieve the source object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\n\nexport let getSourceObjectUid = function (vmProp) {\n  var sourceObjectUid = vmProp.parentUid;\n\n  if (!_.isEmpty(vmProp.intermediateObjectUids)) {\n    sourceObjectUid = vmProp.intermediateObjectUids[vmProp.intermediateObjectUids.length - 1];\n  }\n\n  return sourceObjectUid;\n};\n/**\n * Retrieve the relation object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\n\nexport let getRelationObjectUid = function (vmProp) {\n  var sourceObjectUid = vmProp.parentUid;\n\n  if (vmProp.intermediateObjectUids && vmProp.intermediateObjectUids.length > 0) {\n    sourceObjectUid = vmProp.intermediateObjectUids[0];\n  }\n\n  return sourceObjectUid;\n};\n/**\n * Returns the property name as defined in the source object for this view model property .\n *\n * For e.g. this method would return \"object_name\" for a view Model property with name\n * REF(items_tag,Item).object_name\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String} - Source property name\n */\n\nexport let getPropertyNameInSourceObject = function (vmProp) {\n  var sourcePropertyName = vmProp.propertyName;\n\n  if (vmProp.isDCP || !_.isEmpty(vmProp.intermediateObjectUids)) {\n    if (sourcePropertyName.includes('.')) {\n      sourcePropertyName = sourcePropertyName.split('.').slice(-1).pop();\n    }\n  }\n\n  return sourcePropertyName;\n};\n/**\n * Trigger digest cycle of root scope so that widgets get reflected to the overlay object updates.\n */\n\n/** revisitme yogesh\n  * Hint: we don't need this\n export let triggerDigestCycle = function() {\n     // trigger angular digest cycle on root scope so that value updates get reflected\n     if( _documentScope ) {\n         _documentScope.$evalAsync();\n     } else if( _docNgElement && _docNgElement.scope() ) {\n         _documentScope = _docNgElement.scope();\n         _documentScope.$evalAsync();\n     }\n };\n */\n\n/**\n * Initialize dateApi with initial value if provided from dbValue\n *\n *  @param {ViewModelProperty} props - ViewModelProperty object that will be updated.\n *\n */\n\nexport const initializeDateApiValues = props => {\n  let dateApi = props.dateApi;\n  let jsDate = new Date(props.dbValue);\n  jsDate = dateTimeSvc.getJSDate(jsDate);\n  var isDateNull = true;\n\n  if (!isNaN(jsDate)) {\n    if (!dateTimeSvc.isNullDate(jsDate)) {\n      isDateNull = false;\n\n      if (dateApi.isDateEnabled) {\n        props.dateApi.dateObject = jsDate;\n        props.dateApi.dateValue = uwDirectiveDateTimeSvc.formatDate(jsDate);\n      }\n\n      if (dateApi.isTimeEnabled) {\n        props.dateApi.timeValue = dateTimeSvc.formatTime(jsDate);\n      }\n    }\n  }\n\n  if (isDateNull) {\n    if (dateApi.isDateEnabled) {\n      props.dateApi.dateObject = dateTimeSvc.getNullDate();\n      props.dateApi.dateValue = '';\n    }\n\n    if (dateApi.isTimeEnabled && props.type !== 'DATEARRAY') {\n      props.dateApi.timeValue = '';\n    }\n  }\n};\n/**\n * Set the internal value of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n */\n\nexport let setValue = function (vmProp, value) {\n  var sameAsOriginal = _.isEqual(value, vmProp.value);\n\n  if (!sameAsOriginal || vmProp.valueUpdated && !_.isEqual(value, vmProp.newValue)) {\n    vmProp.valueUpdated = true;\n    /**\n     * This happens in case of CasCade Suggestive LOV, When user changes value in first LOV, for dependent\n     * LOV value comes as [\"\"] ( array of empty string) and it causes JSON parsing error for soa call.\n     */\n\n    if (!vmProp.isArray && _.isArray(value) && value.length > 0) {\n      vmProp.dbValue = value[0];\n    } else {\n      vmProp.dbValue = value;\n    }\n\n    if (vmProp.isArray) {\n      vmProp.dbValues = value;\n    }\n\n    if (_.isArray(value) && !vmProp.isArray) {\n      vmProp.newValue = _.cloneDeep(value[0]);\n    } else {\n      vmProp.newValue = _.cloneDeep(value);\n    }\n\n    vmProp.error = null; // Always update display values\n    // Do this first in case property change listeners want to change to something else\n\n    exports.updateDisplayValues(vmProp, exports.getDisplayValues(vmProp));\n    updateDateApi(vmProp);\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_VALUE);\n    }\n  }\n};\n/**\n * Set the old value of the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} oldValues - Old Value of property.\n */\n\nexport let setOldValues = function (vmProp, oldValues) {\n  var oldValuesFinal = oldValues === null ? [] : oldValues;\n  vmProp.oldValues = oldValuesFinal;\n  vmProp.oldValue = exports.getUiValue(oldValuesFinal);\n};\n/**\n * Set display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\n\nexport let setDisplayValue = function (vmProp, displayValues) {\n  var sameAsOriginal = !vmProp.prevDisplayValues || _.isEqual(displayValues, vmProp.prevDisplayValues);\n\n  if (!vmProp.displayValueUpdated && !sameAsOriginal || vmProp.displayValueUpdated && !_.isEqual(displayValues, vmProp.newDisplayValues)) {\n    vmProp.displayValueUpdated = !sameAsOriginal;\n    vmProp.error = null;\n    exports.updateDisplayValues(vmProp, displayValues);\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_VALUE);\n    }\n  }\n};\n/**\n * Set widget display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\n\nexport let setWidgetDisplayValue = function (vmProp, displayValues) {\n  var sameAsOriginal = _.isEqual(displayValues, vmProp.displayValues);\n\n  if (!sameAsOriginal) {\n    exports.updateDisplayValues(vmProp, displayValues);\n  }\n};\n/**\n * Set 'isEnabled' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEnabled - TRUE if the property's value should be shown normally and (if also editable)\n *            react to user input. FALSE if the property's value should be shown 'greyed out' and not react to\n *            user input (even if editable).\n */\n\nexport let setIsEnabled = function (vmProp, isEnabled) {\n  vmProp.isEnabled = isEnabled;\n};\n/**\n * Set 'isRichText' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRichText - TRUE if the string value of the property is in HTML format and should be\n *            displayed using HTML formatting rules and edited with the 'rich text' editor.\n */\n\nexport let setIsRichText = function (vmProp, isRichText) {\n  vmProp.isRichText = isRichText;\n};\n/**\n * Set 'isNull' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isNull - TRUE if the current property value is 'no value'. FALSE if the value is valid as\n *            is.\n */\n\nexport let setIsNull = function (vmProp, isNull) {\n  vmProp.isNull = isNull;\n};\n/**\n * Set 'isRequired' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRequired - TRUE if the property's value is required to sucessfully complete some operation\n *            that uses it. FALSE if the property's value is optional.\n */\n\nexport let setIsRequired = function (vmProp, isRequired) {\n  if (vmProp.isRequired !== isRequired) {\n    vmProp.isRequired = isRequired;\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_REQUIRED);\n    } // Set required place holder text if 'isRequired' flag is true\n\n\n    if (vmProp.isRequired && !vmProp.propertyRequiredText) {\n      if (_localTextBundle) {\n        vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n      } else {\n        localeSvc.getTextPromise().then(function (localTextBundle) {\n          _localTextBundle = localTextBundle;\n          vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n        });\n      }\n    }\n  }\n};\n/**\n * Set the place holder text on the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} placeHolderText - The place holder text\n */\n\nexport let setPlaceHolderText = function (vmProp, placeHolderText) {\n  vmProp.propertyRequiredText = placeHolderText;\n};\n/**\n * Set 'isLocalizable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isLocalizable - TRUE if the property value's UI should include the option to alow any user\n *            entered value to be converted from local language (as entered) into some other system language.\n */\n\nexport let setIsLocalizable = function (vmProp, isLocalizable) {\n  vmProp.isLocalizable = isLocalizable;\n  vmProp.uwAnchor = '';\n\n  if (isLocalizable && (vmProp.type === 'STRING' || vmProp.type === 'STRINGARRAY')) {\n    vmProp.uwAnchor = 'aw_multiLanguageProperty';\n  }\n};\n/**\n * Set 'isDisplayable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isDisplayable - isDisplayable state of ViewModelProperty.\n */\n\nexport let setIsDisplayable = function (vmProp, isDisplayable) {\n  vmProp.isDisplayable = isDisplayable;\n};\n/**\n * Set 'isAutoAssign' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssign - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\n\nexport let setIsAutoAssign = function (vmProp, isAutoAssign) {\n  vmProp.isAutoAssign = isAutoAssign;\n};\n/**\n * Set 'isAutoAssignable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssignable - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\n\nexport let setIsAutoAssignable = function (vmProp, isAutoAssignable) {\n  vmProp.isAutoAssignable = isAutoAssignable;\n};\n/**\n * Set 'hasInitialValue' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} hasInitialValue - TRUE if the property has initial value. FALSE if the property does not\n *            have initial value.\n */\n\nexport let setHasInitialValue = function (vmProp, hasInitialValue) {\n  vmProp.hasInitialValue = hasInitialValue;\n};\n/**\n * Set 'maxLength' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Number} maxLength - If not equal to '-1' or '0', this parameter specifies the maximum number of\n *            characters allowed in a string type property.\n */\n\nexport let setLength = function (vmProp, maxLength) {\n  if (maxLength !== -1 && maxLength !== 0) {\n    vmProp.maxLength = maxLength;\n  }\n};\n/**\n * Set 'numberOfCharacters' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfCharacters - If not equal to '-1' or '0', this parameter specifies the number of\n *            characters in a string type property.\n */\n\nexport let setNumberOfCharacters = function (vmProp, numberOfCharacters) {\n  if (numberOfCharacters !== -1 && numberOfCharacters !== 0) {\n    vmProp.numberOfCharacters = numberOfCharacters;\n  }\n};\n/**\n * Set 'numberOfLines' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfLines - If not equal to '-1' or '0', this parameter specifies the number of lines\n *            allowed in a property.\n */\n\nexport let setNumberOfLines = function (vmProp, numberOfLines) {\n  if (numberOfLines !== -1 && numberOfLines !== 0) {\n    vmProp.numberOfLines = numberOfLines;\n  }\n};\n/**\n * Set 'isArray' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isArray - TRUE if the property can have more than one value in an ordered list. FALSE if the\n *            property can have only a single value.\n */\n\nexport let setIsArray = function (vmProp, isArray) {\n  if (vmProp.isArray !== isArray) {\n    vmProp.isArray = isArray; // Set array place holder text if 'isArray' flag is true and the property is not required.\n\n    if (vmProp.isArray) {\n      if (!_.isArray(vmProp.dbValue)) {\n        vmProp.dbValue = [];\n        vmProp.value = [];\n      }\n\n      if (_localTextBundle) {\n        _setArrayText(vmProp, _localTextBundle);\n      } else {\n        localeSvc.getTextPromise().then(function (localTextBundle) {\n          _localTextBundle = localTextBundle;\n\n          _setArrayText(vmProp, _localTextBundle);\n        });\n      }\n    }\n\n    vmProp.displayValsModel = [];\n    var nVal = vmProp.displayValues.length;\n\n    for (var i = 0; i < nVal; i++) {\n      vmProp.displayValsModel.push({\n        displayValue: vmProp.displayValues[i],\n        selected: false,\n        isInEditMode: false\n      });\n    }\n  }\n};\n/**\n * Set 'arrayLength' state of ViewModelProperty. Applies only if the property is an array\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} arrayLength - set the array length. Set \"-1\" if unlimited array.\n */\n\nexport let setArrayLength = function (vmProp, arrayLength) {\n  vmProp.arrayLength = arrayLength;\n};\n/**\n * Set 'referenceTypeName' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} typeName - set reference type name of ViewModelProperty.\n */\n\nexport let setReferenceType = function (vmProp, typeName) {\n  vmProp.referenceTypeName = typeName;\n};\n/**\n * Set data type of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} dataType - data type of ViewModelProperty.\n */\n\nexport let setDataType = function (vmProp, dataType) {\n  vmProp.type = dataType;\n};\n/**\n * Set 'error' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} error - The message that should be displayed when some aspect of the property's value is not\n *            correct. This value must be 'null' or an empty string to not have the error be displayed.\n */\n\nexport let setError = function (vmProp, error) {\n  if (vmProp.error !== error) {\n    vmProp.error = error;\n\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_ERROR);\n    }\n  }\n};\n/**\n * Set client validation error of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} clientValidationError - set client validation error of ViewModelProperty.\n */\n\nexport let setClientValidationError = function (vmProp, clientValidationError) {\n  vmProp.clientValidationError = clientValidationError;\n};\n/**\n * Set server validation error flag of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} hasServerValidationError - set server validation error flag of ViewModelProperty.\n */\n\nexport let setServerValidationError = function (vmProp, hasServerValidationError) {\n  vmProp.hasServerValidationError = hasServerValidationError;\n};\n/**\n * Set property display name of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} propertyDisplayName - user displayable name of ViewModelProperty.\n */\n\nexport let setPropertyDisplayName = function (vmProp, propertyDisplayName) {\n  vmProp.propertyDisplayName = propertyDisplayName;\n};\n/**\n * Set property label display of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} propertyLabelDisplay - String value of property label display.\n */\n\nexport let setPropertyLabelDisplay = function (vmProp, propertyLabelDisplay) {\n  vmProp.propertyLabelDisplay = propertyLabelDisplay; // point-fix for xrt labeldisplay=titled issue...\n  // factor with declViewModelService.getLabelPlacement()?\n\n  if (vmProp.fielddata && propertyLabelDisplay === 'PROPERTY_LABEL_AT_TOP') {\n    vmProp.fielddata.labelPlacement = 'top';\n  }\n};\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} resetValues - True is values needs to be updated\n */\n\nfunction _resetPropertyAndResetUpdates(vmProp, resetValues) {\n  var fireEvent = false;\n\n  if (vmProp.valueUpdated) {\n    vmProp.valueUpdated = false;\n    fireEvent = true;\n  }\n\n  if (vmProp.displayValueUpdated) {\n    vmProp.displayValueUpdated = false;\n    fireEvent = true;\n  }\n\n  if (vmProp.error) {\n    vmProp.error = null;\n\n    if (!fireEvent && vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_ERROR);\n    }\n  }\n\n  if (fireEvent) {\n    if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n      vmProp.propApi.notifyPropChange(PROP_VALUE);\n    }\n\n    if (resetValues) {\n      exports.resetValues(vmProp);\n    }\n  }\n}\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\n\nexport let resetUpdates = function (vmProp) {\n  _resetPropertyAndResetUpdates(vmProp, true);\n};\n/**\n * Sets the value and displayValues with the updated 'new' values.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let replaceValuesWithNewValues = function (vmProp) {\n  if (vmProp.valueUpdated) {\n    vmProp.value = _.cloneDeep(vmProp.newValue);\n  }\n\n  if (vmProp.displayValueUpdated) {\n    if (vmProp.prevDisplayValues) {\n      vmProp.prevDisplayValues = _.clone(vmProp.displayValues);\n    }\n\n    vmProp.displayValues = _.clone(vmProp.newDisplayValues);\n  }\n};\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let resetProperty = function (vmProp) {\n  _resetPropertyAndResetUpdates(vmProp, false);\n};\n/**\n * Reset db values and display values back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let resetValues = function (vmProp) {\n  if (_.isArray(vmProp.value)) {\n    vmProp.dbValue = vmProp.value.slice(0);\n\n    if (!_.isUndefined(vmProp.dbOriginalValue)) {\n      vmProp.dbOriginalValue = vmProp.value.slice(0);\n    }\n  } else {\n    vmProp.dbValue = _.cloneDeep(vmProp.value);\n\n    if (!_.isUndefined(vmProp.dbOriginalValue)) {\n      vmProp.dbOriginalValue = _.cloneDeep(vmProp.value);\n    }\n  }\n\n  if (vmProp.prevDisplayValues) {\n    vmProp.displayValues = _.clone(vmProp.prevDisplayValues);\n  }\n\n  vmProp.uiValue = exports.getUiValue(vmProp.displayValues);\n\n  if (vmProp.isArray) {\n    vmProp.displayValsModel = [];\n\n    for (var i = 0; i < vmProp.displayValues.length; i++) {\n      vmProp.displayValsModel.push({\n        displayValue: vmProp.displayValues[i],\n        selected: false,\n        isInEditMode: false\n      });\n    }\n  }\n};\n/**\n * Set edit state of ViewModelProperty. If the property is editable and editable in view model then the\n * 'isEditable' flag is set to true which shows the properties as editable.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set edit state of ViewModelProperty.\n *\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n */\n\nexport let setEditState = function (vmProp, editable, override) {\n  if (vmProp.editableInViewModel !== editable || override) {\n    vmProp.editableInViewModel = editable;\n    vmProp.error = null;\n    vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n    exports.setEditLayoutSide(vmProp);\n\n    if (vmProp.propApi) {\n      if (vmProp.propApi.setLOVValueProvider) {\n        vmProp.propApi.setLOVValueProvider();\n      }\n\n      if (vmProp.propApi.setAutoAssignHandler) {\n        vmProp.propApi.setAutoAssignHandler();\n      }\n\n      if (vmProp.propApi.setObjectLinkPropertyHandler) {\n        vmProp.propApi.setObjectLinkPropertyHandler();\n      }\n\n      if (vmProp.propApi && vmProp.propApi.notifyPropChange) {\n        vmProp.propApi.notifyPropChange(PROP_EDITABLE);\n      }\n    }\n\n    if (vmProp.isEditable && (!vmProp.prevDisplayValues || vmProp.prevDisplayValues !== vmProp.displayValues)) {\n      vmProp.prevDisplayValues = _.clone(vmProp.displayValues);\n    }\n  }\n};\n/**\n * Set 'editable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set editable state of ViewModelProperty.\n */\n\nexport let setEditable = function (vmProp, editable) {\n  vmProp.editable = editable;\n};\n/**\n * Set 'isEditable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n */\n\nexport let setIsEditable = function (vmProp, isEditable) {\n  if (vmProp.isEditable !== isEditable) {\n    vmProp.isEditable = isEditable;\n    exports.setEditLayoutSide(vmProp);\n  }\n};\n/**\n * Set 'isPropertyModifiable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isPropertyModifiable - TRUE if the user should have the ability to change the property's\n *            value. FALSE if the value is read-only.\n */\n\nexport let setIsPropertyModifiable = function (vmProp, isPropertyModifiable) {\n  if (vmProp.isPropertyModifiable !== isPropertyModifiable) {\n    vmProp.isPropertyModifiable = isPropertyModifiable; // set is editable flag whenever property modifiable state is changed\n\n    vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n    exports.setEditLayoutSide(vmProp);\n  }\n};\n/**\n * Set edit layout side state of ViewModelProperty. For 'Boolean' and 'Object' based properties which doesn't\n * have LOV's this flag is set to true.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let setEditLayoutSide = function (vmProp) {\n  if (vmProp.type === 'BOOLEAN' || vmProp.type === 'OBJECT') {\n    vmProp.editLayoutSide = !vmProp.hasLov;\n  }\n};\n/**\n * Set 'hasLov' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} hasLov - TRUE if the property has a specific list of values associated with it.\n */\n\nexport let setHasLov = function (vmProp, hasLov) {\n  if (vmProp.hasLov !== hasLov) {\n    vmProp.hasLov = hasLov;\n    exports.setEditLayoutSide(vmProp);\n  }\n};\n/**\n * Set 'isSelectOnly' state of ViewModelProperty.\n * This property allows the selected lov entry to be select only, i.e, user cannot type in the widget after selecting the lov entry.\n * This change is to support isSelectOnly in aw-widget used as a list box.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isSelectOnly - TRUE/FALSE. Default is false, allows user to edit value in input box.\n */\n\nexport let setIsSelectOnly = function (vmProp, isSelectOnly) {\n  if (vmProp.isSelectOnly !== isSelectOnly) {\n    vmProp.isSelectOnly = isSelectOnly;\n  }\n};\n/**\n * Set 'renderingHint' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} renderingHint - Depending on the type, this string indicates some variation in how the\n *            property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include 'radiobutton',\n *            'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label', 'textbox',\n *            'textfield', 'textarea', 'longtext').\n */\n\nexport let setRenderingHint = function (vmProp, renderingHint) {\n  vmProp.renderingHint = renderingHint;\n};\n/**\n * Set 'overlayType' of ViewModelProperty. 'viewModelPropertyOverlay' - which defines that the overlay has real\n * data(i.e IViewModelProperty). 'widgetOverlay' - which defines that the overlay has widget data.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} overlayType - set overlay type of ViewModelProperty.\n */\n\nexport let setOverlayType = function (vmProp, overlayType) {\n  vmProp.overlayType = overlayType;\n};\n/**\n * Set 'autofocus' state of ViewModelProperty. Which defines whether the widget needs to be autofocused or NOT\n * bound to this property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} autofocus - set autofocus state of ViewModelProperty.\n */\n\nexport let setAutoFocus = function (vmProp, autofocus) {\n  vmProp.autofocus = autofocus;\n};\n/**\n * Set 'dirty' state of ViewModelProperty. Which defines whether the widget needs to be dirty or NOT.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} dirty - set dirty state of ViewModelProperty.\n */\n\nexport let setDirty = function (vmProp, dirty) {\n  vmProp.dirty = dirty;\n};\n/**\n * Set array max row count of ViewModelProperty. Number of visible rows for array widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} maxRowCount - set array max row count of ViewModelProperty.\n */\n\nexport let setMaxRowCount = function (vmProp, maxRowCount) {\n  if (maxRowCount !== -1 && maxRowCount !== 0 && vmProp.maxRowCount !== maxRowCount) {\n    vmProp.maxRowCount = maxRowCount;\n  }\n};\n/**\n * Set minimum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the earliest date/time this widget should allow.\n */\n\nexport let setMinimumDate = function (vmProp, dateToSet) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.minDate = dateToSet;\n  }\n};\n/**\n * Set maximum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the latest date/time this widget should allow.\n */\n\nexport let setMaximumDate = function (vmProp, dateToSet) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.maxDate = dateToSet;\n  }\n};\n/**\n * Set date Enabled state of ViewModelProperty. Which defines whether the date should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if date is enabled\n */\n\nexport let setDateEnabled = function (vmProp, enabled) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.isDateEnabled = enabled;\n  }\n};\n/**\n * Set time Enabled state of ViewModelProperty. Which defines whether the time should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if time is enabled.\n */\n\nexport let setTimeEnabled = function (vmProp, enabled) {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi.isTimeEnabled = enabled;\n  }\n};\nexport const setDateApi = (vmProp, dateApi) => {\n  if (vmProp && vmProp.dateApi) {\n    vmProp.dateApi = dateApi;\n  }\n};\n/**\n * Set vertical state of ViewModelProperty. Which defines whether the radio button should show vertical or not.\n * Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} vertical TRUE if radio button need to be shown vertically.\n */\n\nexport let setRadioButtonVertical = function (vmProp, vertical) {\n  if (vmProp && vmProp.radioBtnApi) {\n    vmProp.radioBtnApi.vertical = vertical;\n  }\n};\n/**\n * Set radio button's custom true label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customTrueLabel custom true label for radio button.\n */\n\nexport let setRadioButtonCustomTrueLabel = function (vmProp, customTrueLabel) {\n  if (vmProp && vmProp.radioBtnApi) {\n    vmProp.radioBtnApi.customTrueLabel = customTrueLabel;\n  }\n};\n/**\n * Set radio button's custom false label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customFalseLabel custom false label for radio button.\n */\n\nexport let setRadioButtonCustomFalseLabel = function (vmProp, customFalseLabel) {\n  if (vmProp && vmProp.radioBtnApi) {\n    vmProp.radioBtnApi.customFalseLabel = customFalseLabel;\n  }\n};\n/**\n * Has this property been modified in the view model\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the property is modified in the view model.\n */\n\nexport let isModified = function (vmProp) {\n  return vmProp.valueUpdated || vmProp.displayValueUpdated;\n};\n/**\n * return the display value with local configured for boolean dbValue\n *\n * @param {Boolean } value - The boolean dbValue need turn to display value.\n * @param {StringMap} localTextBundle - Text bundles to use.\n * @return {String } the display value after local.\n */\n\nexport const getLocalBooleanDisplayValue = function (value) {\n  let localTextBundle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _localTextBundle;\n\n  if (!localTextBundle || !localTextBundle.RADIO_TRUE) {\n    return value.toString();\n  }\n\n  return value ? localTextBundle.RADIO_TRUE : localTextBundle.RADIO_FALSE;\n};\n/**\n * Get the Display Value for Property from array type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\n\nfunction _getDisplayValuesFromArrayType(vmProp) {\n  var indx;\n  var displayValues = [];\n\n  if (vmProp.type === 'DATEARRAY' && !vmProp.hasLov) {\n    for (indx = 0; indx < vmProp.newValue.length; indx++) {\n      if (!vmProp.dateApi || vmProp.dateApi.isTimeEnabled !== false && vmProp.dateApi.isDateEnabled) {\n        displayValues.push(dateTimeSvc.formatSessionDateTime(vmProp.newValue[indx]));\n      } else {\n        displayValues.push(dateTimeSvc.formatSessionDate(vmProp.newValue[indx]));\n      }\n    }\n  } else if (vmProp.type === 'OBJECTARRAY') {\n    for (indx = 0; indx < vmProp.newValue.length; indx++) {\n      displayValues.push(exports.getDisplayName(vmProp.newValue[indx]));\n    }\n  } else {\n    /**\n     * For LOVs use property display values which are already set by LOV widget.\n     */\n    if (vmProp.hasLov) {\n      for (indx = 0; indx < vmProp.displayValues.length; indx++) {\n        vmProp.displayValues[indx] && displayValues.push(vmProp.displayValues[indx].toString());\n      }\n    } else {\n      for (indx = 0; indx < vmProp.newValue.length; indx++) {\n        if (_.isBoolean(vmProp.newValue[indx]) || vmProp.newValue[indx] === 'true' || vmProp.newValue[indx] === 'false') {\n          //changing vmProp.newValue string value into boolean\n          const newValue = typeof vmProp.newValue[indx] === 'string' ? vmProp.newValue[indx] === 'true' ? true : false : vmProp.newValue[indx]; // eslint-disable-line\n\n          displayValues.push(getLocalBooleanDisplayValue(newValue));\n        } else {\n          vmProp.newValue[indx] && displayValues.push(vmProp.newValue[indx].toString());\n        }\n      }\n    }\n  }\n\n  return displayValues;\n}\n/**\n * Get the Display Value from DATE, OBJECT,... type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\n\n\nfunction _getDisplayValuesFromOtherTypes(vmProp) {\n  var displayValues = [];\n\n  if (vmProp.type === 'DATE') {\n    if (!vmProp.dateApi.isTimeEnabled && vmProp.dateApi.isDateEnabled) {\n      displayValues.push(dateTimeSvc.formatSessionDate(vmProp.newValue));\n    } else if (vmProp.dateApi.isTimeEnabled && !vmProp.dateApi.isDateEnabled) {\n      displayValues.push(dateTimeSvc.formatSessionTime(vmProp.newValue));\n    } else {\n      displayValues.push(dateTimeSvc.formatSessionDateTime(vmProp.newValue));\n    }\n  } else if (vmProp.type === 'OBJECT') {\n    /**\n     * This is for the case where view model property is created in GWT. Once we have all all GWT\n     * code converted to native, this condition will go away\n     */\n    if (vmProp.propApi) {\n      displayValues.push(exports.getDisplayName(vmProp.newValue));\n    } else {\n      // If view model property is created in native code. e.g. declarative\n      if (!declUtils.isNil(vmProp.uiValue)) {\n        displayValues.push(vmProp.uiValue);\n      }\n    }\n  } else if (vmProp.type === 'BOOLEAN') {\n    displayValues.push(getLocalBooleanDisplayValue(vmProp.newValue));\n  } else if (vmProp.hasLov) {\n    /**\n     * For LOVs use property uiValue which is already set by LOV widget.\n     */\n    if (!declUtils.isNil(vmProp.uiValue)) {\n      displayValues.push(vmProp.uiValue.toString());\n    }\n  } else {\n    /**\n     * when the type is integer or string, if value is 0 or empty string, framework is not allowing\n     * the display value to be updated with those values previously.\n     */\n    if (!declUtils.isNil(vmProp.newValue) && typeof vmProp.newValue !== 'object') {\n      displayValues.push(vmProp.newValue.toString());\n    }\n  }\n\n  return displayValues;\n}\n/**\n * Get the Display Value for Property. View uses Display Value for rendering if the property is not in edit\n * state. <br>\n * View uses Display Value for rendering if the property is not in edit state. If it is edit state, it has to\n * use the value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\n\n\nexport let getDisplayValues = function (vmProp) {\n  /**\n   * Return new display values when ViewModelProperty display values are updated.\n   */\n  if (vmProp.displayValueUpdated) {\n    return vmProp.newDisplayValues;\n  }\n  /**\n   * Return the display value as per the real value when they are out of sync. If valueUpdated is true but\n   * displayValueUpdated is false, then it means they are out of sync.\n   */\n\n\n  if (vmProp.valueUpdated && vmProp.newValue !== null && vmProp.newValue !== undefined) {\n    var displayValues = [];\n\n    if (vmProp.isArray) {\n      displayValues = _getDisplayValuesFromArrayType(vmProp);\n    } else {\n      displayValues = _getDisplayValuesFromOtherTypes(vmProp);\n    }\n\n    return displayValues;\n  }\n\n  return vmProp.prevDisplayValues;\n};\n/**\n * Returns the object type name for which this property is defined.\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String } object type name for which this property is defined.\n */\n\nexport let getOwningTypeName = function (vmProp) {\n  if (vmProp.propertyDescriptor && vmProp.propertyDescriptor.srcObjectTypeName) {\n    // use the source object type name for dcp properties\n    return vmProp.propertyDescriptor.srcObjectTypeName;\n  } else if (vmProp.parentUid && clientDataModel.getObject(vmProp.parentUid)) {\n    return clientDataModel.getObject(vmProp.parentUid).type;\n  } // return null if no information of the owning object is found\n\n\n  return null;\n};\n/**\n * Get the display name of the selected type reference object\n *\n * @param {String} uid - The UID of the selected object\n * @return {String} Display name of the object\n */\n\nexport let getDisplayName = function (uid) {\n  var displayName = null;\n  var modelObject = clientDataModel.getObject(uid);\n\n  if (modelObject && modelObject.props.object_string) {\n    displayName = modelObject.props.object_string.uiValues[0];\n  }\n\n  return displayName;\n};\n/**\n * Get string of the Property value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\n\nexport let getValueStrings = function (vmProp) {\n  var values = [];\n\n  if (vmProp.isArray) {\n    if (vmProp.type === 'DATEARRAY') {\n      for (var indx = 0; indx < vmProp.dbValue.length; indx++) {\n        values.push(dateTimeSvc.formatUTC(vmProp.dbValue[indx]));\n      }\n    } else {\n      for (var indx2 = 0; indx2 < vmProp.dbValue.length; indx2++) {\n        values.push(String(vmProp.dbValue[indx2] !== null ? vmProp.dbValue[indx2] : ''));\n      }\n    }\n  } else {\n    if (vmProp.type === 'DATE') {\n      values.push(dateTimeSvc.formatUTC(vmProp.dbValue));\n    } else {\n      values.push(String(vmProp.dbValue !== null ? vmProp.dbValue : ''));\n    }\n  }\n\n  return values;\n};\n/**\n * Returns TRUE if the internal value of the property is a number.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a number.\n */\n\nexport let isDbValueNumber = function (vmProp) {\n  if (vmProp.valueUpdated) {\n    return isNumeric(vmProp.newValue);\n  }\n\n  return isNumeric(vmProp.value);\n};\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * Returns TRUE if the internal value of the property is a boolean.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a boolean.\n */\n\n\nexport let isDbValueBoolean = function (vmProp) {\n  if (vmProp.valueUpdated) {\n    return _.isBoolean(vmProp.newValue);\n  }\n\n  return _.isBoolean(vmProp.value);\n};\n/**\n * Returns TRUE if the overlayType is widgetOverlay.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the overlay type is widgetOverlay.\n */\n\nexport let isOverlayTypeWidget = function (vmProp) {\n  return vmProp.overlayType && vmProp.overlayType === WIDGET;\n};\n/**\n * Set 'initialize' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\n\nexport let initialize = function (vmProp) {\n  vmProp.initialize = true;\n};\n/**\n * Updates property display values\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\n\nexport let updateDisplayValues = function (vmProp, displayValues) {\n  var displayValuesFinal = displayValues ? displayValues : [];\n\n  if (displayValuesFinal && displayValuesFinal.length === 0) {\n    vmProp.isNull = true;\n  } else {\n    vmProp.isNull = false;\n  }\n\n  vmProp.displayValues = displayValuesFinal;\n  vmProp.newDisplayValues = displayValuesFinal;\n  vmProp.uiValue = exports.getUiValue(vmProp.displayValues);\n\n  if (vmProp.isArray) {\n    vmProp.uiValues = vmProp.displayValues;\n    var oldDisplayValsModel = vmProp.displayValsModel;\n    vmProp.displayValsModel = [];\n\n    for (var i = 0; i < vmProp.displayValues.length; i++) {\n      if (oldDisplayValsModel.length > 0 && oldDisplayValsModel[i] && oldDisplayValsModel[i].displayValue === vmProp.displayValues[i]) {\n        vmProp.displayValsModel.push({\n          displayValue: vmProp.displayValues[i],\n          selected: oldDisplayValsModel[i].selected,\n          isInEditMode: oldDisplayValsModel[i].isInEditMode\n        });\n      } else {\n        vmProp.displayValsModel.push({\n          displayValue: vmProp.displayValues[i],\n          selected: false,\n          isInEditMode: false\n        });\n      }\n    }\n  }\n};\n/**\n * Returns the base property name of the dynamic compound property.\n *\n * @param {String} propertyName - property name to be evaluated.\n * @return {String} Base property name.\n */\n\nexport let getBasePropertyName = function (propertyName) {\n  var baseProperty = propertyName;\n  var lastPeriod = baseProperty.lastIndexOf('.');\n  baseProperty = baseProperty.substr(lastPeriod + 1);\n  return baseProperty;\n};\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Boolean} True if the given vmProp is valid.\n */\n\nfunction _isValidVmProp(vmProp) {\n  var isValid = false;\n  var vmPropType = vmProp.type;\n\n  if (vmPropType === 'INTEGER') {\n    if (isFinite(vmProp.dbValue)) {\n      if (vmProp.dbValue !== null && vmProp.dbValue !== '') {\n        vmProp.dbValue = Number(vmProp.dbValue);\n\n        if (vmProp.dbValue >= _integerMinValue && vmProp.dbValue <= _integerMaxValue) {\n          isValid = true;\n        }\n      } else {\n        isValid = true;\n      }\n    }\n  } else if (vmPropType === 'DOUBLE' || vmPropType === 'DATE') {\n    if (isFinite(vmProp.dbValue)) {\n      if (vmProp.dbValue !== null && vmProp.dbValue !== '') {\n        vmProp.dbValue = Number(vmProp.dbValue);\n      }\n\n      isValid = true;\n    }\n  } else {\n    isValid = true;\n  }\n\n  return isValid;\n}\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available.\n */\n\n\nfunction _updateVMPValue(vmProp) {\n  var uidsArray = vmProp.dbValue;\n\n  if (!vmProp.isArray) {\n    uidsArray = [];\n\n    if (vmProp.dbValue !== null && vmProp.dbValue !== undefined && vmProp.dbValue !== '') {\n      uidsArray.push(vmProp.dbValue);\n    } else if (vmProp.uiValue) {\n      uidsArray.push(vmProp.uiValue);\n    }\n  }\n\n  if (!_pingDeferred) {\n    _pingDeferred = AwPromiseService.instance.defer();\n  }\n\n  _pingLoadObjects(uidsArray, vmProp);\n\n  return _pingDeferred.promise;\n}\n/**\n * updates isNull and valueUpdated props on ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n */\n\n\nfunction _updateIsNullAndValueUpdatedFlags(vmProp) {\n  /**\n   * Change isNull flag to false, if dbValue & uiValue exists and even though its NOT valid.\n   */\n  if (vmProp.isNull && vmProp.dbValue && vmProp.uiValue) {\n    vmProp.isNull = false;\n  }\n  /**\n   * Change valueUpdated flag to true, if dbValue & uiValue exists and even though its NOT valid.\n   */\n\n\n  if (vmProp.dbValue && vmProp.uiValue) {\n    vmProp.valueUpdated = true;\n  }\n}\n/**\n * Updates ViewModelProperty with updated values. Added a return of promise in case of async call to load\n * objects which is required for OBJECT or OBJECTARRAY property types. The promise is resolved or rejected based\n * on execution of the load objects api.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available. In case the input vmProp.type is not OBJECT or\n *         OBJECTARRAY, then promise returned is null. Caller should explicitly do a null check on the promise\n *         before invoking any functions on it.\n */\n\n\nexport let updateViewModelProperty = function (vmProp) {\n  var isValid = false;\n  var vmPropType = vmProp.type;\n  isValid = _isValidVmProp(vmProp);\n\n  if (isValid) {\n    if (vmPropType !== 'OBJECT' && vmPropType !== 'OBJECTARRAY') {\n      exports.setValue(vmProp, vmProp.dbValue);\n\n      if (vmProp.propApi && vmProp.propApi.fireValueChangeEvent) {\n        vmProp.propApi.fireValueChangeEvent();\n      }\n    } else {\n      exports.setValue(vmProp, vmProp.dbValue);\n      return _updateVMPValue(vmProp);\n    }\n  } else {\n    _updateIsNullAndValueUpdatedFlags(vmProp);\n  }\n\n  return null;\n};\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\n\nexport let isViewModelProperty = function (objectToTest) {\n  return objectToTest instanceof ViewModelProperty || objectToTest.hasOwnProperty('dbValues');\n};\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} listOfobjectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\n\nexport let isArrayOfViewModelProperty = function (listOfobjectToTest) {\n  let flag = true;\n\n  _.forEach(listOfobjectToTest, function (obj) {\n    if (obj && !(exports.isViewModelProperty(obj) || obj.hasOwnProperty('dbValues'))) {\n      flag = false;\n      return false;\n    }\n  });\n\n  return flag;\n};\n/**\n * Retrieve the cdm's modelObject from a property's source object uid.\n *\n * @param {ViewModelProperty} vmProp - Property to retrieve source object\n * @return {ModelObject} The ModelObject; null if not cached\n */\n\nexport let getSourceModelObject = function (vmProp) {\n  var sourceObjectUid = exports.getSourceObjectUid(vmProp);\n  return clientDataModel.getObject(sourceObjectUid);\n};\n/**\n * This methods attaches validation criteria in view model property.\n *\n * @param {ViewModelProperty} vmProp - Property in whcih validation criteria needs to be attched\n *\n * @param {String} conditionName - The name of the condition in validation criteria\n *\n * @param {String} msgString - The message which will be shown if the validation criteria doesn't match\n *\n */\n\nexport let createValidationCriteria = function (vmProp, conditionName, msgString) {\n  var validationObj = {\n    condition: 'conditions.' + conditionName,\n    value: msgString\n  };\n\n  if (!vmProp.validationCriteria) {\n    vmProp.validationCriteria = [];\n  }\n\n  vmProp.validationCriteria.push(validationObj);\n};\nexport let updateValidationResult = (lovEntry, validationResult, uiProp) => {\n  if (validationResult.valid && uiProp.isEditable !== false) {\n    if (!uiProp.isArray) {\n      if (uiProp.type !== 'DATE') {\n        uiProp.dbValue = lovEntry.propInternalValue;\n        uiProp.uiValue = lovEntry.propDisplayValue;\n      }\n\n      uiProp.dbValues = [uiProp.dbValue];\n      uiProp.uiValues = [uiProp.uiValue];\n    } // update orig vals on validation\n\n\n    uiProp.dbOriginalValue = uiProp.dbValue;\n    uiProp.uiOriginalValue = uiProp.uiValue; // Update dependent properties\n\n    _.forEach(validationResult.updatedPropValueMap, function (values, propertyName) {\n      var sourceObjectUid = getSourceObjectUid(uiProp);\n      var toBeModifiedProp = validationResult.viewModelObj.retrievePropertyWithBasePropertyName(propertyName, sourceObjectUid);\n\n      if (toBeModifiedProp) {\n        var eventData = {\n          removeValues: toBeModifiedProp.dbValue\n        };\n        setValue(toBeModifiedProp, values);\n        setWidgetDisplayValue(toBeModifiedProp, validationResult.updatedPropDisplayValueMap[propertyName]);\n      }\n    });\n\n    setServerValidationError(uiProp, false);\n    uiProp.error = null; // revisitme: zarq9k Need to import uwValidationSvc\n    //setErrorMessage( $scope, null );\n    // var eventData = {\n    //     lovValue: lovEntry\n    // };\n\n    eventBus.publish(uiProp.propertyName + '.lovValueChanged', {\n      lovValue: lovEntry\n    });\n  } else {\n    if (validationResult.error) {\n      setServerValidationError(uiProp, true);\n      uiProp.error = validationResult.error; // revisitme: zarq9k Need to import uwValidationSvc\n      //setErrorMessage( $scope, validationResult.error );\n    }\n  }\n};\n/**\n * zarq9k: Moved the updateDbValue from aw.property.lov.controller.\n * @param {*} uiProperty\n * @param {*} lovEntry\n */\n\nexport let updateLov = (uiProperty, lovEntry, createUpdateValue, operation, checkLovEntries) => {\n  // special handling for checkbox array lov\n  let promise;\n\n  if (uiProperty.renderingHint === 'checkboxoptionlov') {\n    if (operation === 'unchecked') {\n      // remove the item based on the propInternalValue\n      let index = uiProperty.dbValue.findIndex(val => val === lovEntry.propInternalValue);\n\n      if (_.isObject(lovEntry.propInternalValue)) {\n        index = uiProperty.displayValues.findIndex(val => val === lovEntry.propDisplayValue);\n      }\n\n      uiProperty.dbValue.splice(index, 1);\n      uiProperty.displayValues.splice(index, 1);\n    } else {\n      uiProperty.dbValue.push(lovEntry.propInternalValue);\n      uiProperty.displayValues.push(lovEntry.propDisplayValue);\n    }\n\n    updateDisplayValues(uiProperty, [...uiProperty.displayValues]); // Below weird behaviour is due to function \"updateViewModelProperty\" which returns promise is few cases and null in other cases.\n\n    promise = updateViewModelProperty(uiProperty);\n\n    if (promise) {\n      return promise.then(resolve => resolve(uiProperty));\n    }\n\n    return new Promise(resolve => resolve(uiProperty));\n  }\n\n  uiProperty.displayValues.push(lovEntry.propDisplayValue);\n  var changed = uiProperty.dbOriginalValue !== lovEntry.propInternalValue; // update the dbValue based on the uiValue\n  //zarq9k: Multiple if checks for uiProperty.type === 'DATE' - Need cleanup\n\n  let newDbValue = '';\n  let newUiValue = '';\n  /**\n   * For integer and double we have to actually see if it is valid number and then convert it into number\n   * type accordingly or else throw an error\n   */\n\n  if (uiProperty.type === 'INTEGER' || uiProperty.type === 'DOUBLE' || uiProperty.type === 'INTEGERARRAY' || uiProperty.type === 'DOUBLEARRAY') {\n    if (uiProperty.type === 'INTEGER' || uiProperty.type === 'INTEGERARRAY') {\n      // zarq9k: revisit - Need to import uwValidationSvc in the new repo.\n      //newDbValue = uwValidationSvc.checkInteger( $scope, null, lovEntry.propInternalValue );\n      // Below is a temp fix until unless uwValidationSvc comes again\n      let number = parseInt(lovEntry.propInternalValue, 10);\n      newDbValue = isNaN(number) ? '' : number;\n      newUiValue = lovEntry.propDisplayValue;\n    } else {\n      //newDbValue = uwValidationSvc.checkDouble( $scope, null, lovEntry.propInternalValue );\n      // Below is a temp fix until unless uwValidationSvc comes again\n      let number = parseFloat(lovEntry.propInternalValue, 10);\n      newDbValue = isNaN(number) ? '' : number;\n      newUiValue = lovEntry.propDisplayValue;\n    } // set the converted number to the dbValue\n    //lovEntry.propInternalValue = newDbValue;\n    //uiProperty.dbValue = newDbValue;\n\n  } else if (propTypeDate(uiProperty) && uiProperty.dateApi.isNotLov) {\n    // zarq9k: revisit - Need to import uwValidationSvc in the new repo.lsdlksl;\n    //dateObject = uwValidationSvc.checkDateTime( $scope, dateObject );\n    setDateTimeValues({\n      dateVal: '',\n      timeVal: lovEntry.propDisplayValue\n    });\n    let dateApi = uiProperty.dateApi;\n    uiProperty.dbValue = getDBValueForDate(uiProperty);\n    uiProperty.uiValue = getUIValueForDate(dateApi);\n    newUiValue = uiProperty.uiValue;\n    newDbValue = uiProperty.dbValue;\n  } else {\n    newDbValue = lovEntry.propInternalValue;\n    newUiValue = lovEntry.propDisplayValue;\n  }\n\n  newDbValue = uiProperty.type === 'BOOLEAN' && (_.isNil(newDbValue) || newDbValue.length === 0) ? null : newDbValue;\n  uiProperty.dbValue = !uiProperty.isArray ? newDbValue : uiProperty.dbValue;\n  uiProperty.filterString = lovEntry.filterString ? lovEntry.filterString : null;\n  uiProperty.valueUpdated = true; // update optional icon\n\n  uiProperty.iconSource = lovEntry.iconSource;\n  uiProperty.iconName = lovEntry.iconName;\n\n  if (uiProperty.type !== 'DATE') {\n    lovEntry.propInternalValue = newDbValue;\n    lovEntry.propDisplayValue = newUiValue;\n  }\n\n  if (!uiProperty.isArray) {\n    promise = updateViewModelProperty(uiProperty);\n    clearDateTimeValues(uiProperty);\n\n    if (promise) {\n      return promise.then(() => {\n        //In dirty check, If newValue and value are same then we dont show dirty backgrnd\n        //uiProperty.value = newDbValue;\n        // for array & array lov\n        uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n        uiProperty.valueUpdated = true;\n        return uiProperty;\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      // for array & array lov\n      uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n      uiProperty.valueUpdated = true;\n      resolve(uiProperty);\n    });\n  }\n\n  return new Promise(resolve => {\n    let event = {\n      target: {\n        value: lovEntry.propInternalValue\n      }\n    };\n    let dateEvent = [lovEntry.propInternalValue];\n\n    if (uiProperty.type === 'OBJECTARRAY') {\n      dmSvc.loadObjects(dateEvent).then(function () {\n        uiProperty = createUpdateValue(uiProperty, event);\n        resolve(uiProperty);\n      }, function (error) {\n        return AwPromiseService.instance.reject(error);\n      });\n    } else {\n      uiProperty = createUpdateValue(uiProperty, event);\n      resolve(uiProperty);\n    }\n  });\n};\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function isDCPProperty\n * @param {String} propertyName - name of the property\n * @returns {Boolean} - returns whether the property is a dynamic compound property or not.\n */\n\nexport let isDCPProperty = function (propertyName) {\n  if (propertyName.indexOf('.') !== -1 && propertyName.indexOf('(') !== -1 && (propertyName.indexOf('GRM') !== -1 || propertyName.indexOf('GRMS2P') !== -1 || propertyName.indexOf('REF') !== -1 || propertyName.indexOf('REFBY') !== -1 || propertyName.indexOf('GRMREL') !== -1 || propertyName.indexOf('GRMS2PREL') !== -1)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function updateViewModelProp\n * @param {*} viewProp -\n * @param {*} newVal -\n * @param {*} additionalProp - \n * @param {*} nonatomicUpdate -\n */\n\nexport let updateViewModelProp = function (viewProp, newVal, additionalProp, nonatomicUpdate) {\n  if (additionalProp) {\n    if (additionalProp.hasOwnProperty('displayName')) {\n      viewProp.propertyDisplayName = additionalProp.displayName;\n    }\n\n    if (additionalProp.hasOwnProperty('isEditable')) {\n      let val = _.isBoolean(additionalProp.isEditable) ? additionalProp.isEditable : additionalProp.isEditable !== 'false';\n      exports.setIsEditable(viewProp, val);\n    }\n\n    if (additionalProp.hasOwnProperty('isRequired')) {\n      let isRequired = _.isBoolean(additionalProp.isRequired) ? additionalProp.isRequired : additionalProp.isRequired !== 'false';\n      exports.setIsRequired(viewProp, isRequired);\n    }\n\n    if (additionalProp.hasOwnProperty('isEnabled')) {\n      let isEnabled = _.isBoolean(additionalProp.isEnabled) ? additionalProp.isEnabled : additionalProp.isEnabled !== 'false';\n      exports.setIsEnabled(viewProp, isEnabled);\n    }\n\n    if (additionalProp.hasOwnProperty('labelPosition')) {\n      exports.setPropertyLabelDisplay(viewProp, additionalProp.labelPosition, true);\n\n      if (viewProp.labelPosition === 'PROPERTY_LABEL_AT_SIDE') {\n        viewProp.editLayoutSide = true;\n      }\n    }\n\n    if (additionalProp.hasOwnProperty('propName')) {\n      viewProp.propertyName = additionalProp.propName;\n    }\n\n    if (additionalProp.hasOwnProperty('displayValue')) {\n      viewProp.uiValues = additionalProp.displayValue;\n      viewProp.uiValue = exports.getUiValue(viewProp.uiValues);\n    }\n\n    if (additionalProp.hasOwnProperty('isModifiable')) {\n      exports.setIsPropertyModifiable(viewProp, additionalProp.isModifiable);\n    }\n\n    if (additionalProp.hasOwnProperty('isAutoAssignable')) {\n      exports.setIsAutoAssignable(viewProp, additionalProp.isAutoAssignable);\n    }\n\n    if (additionalProp.hasOwnProperty('maxLength')) {\n      exports.setLength(viewProp, additionalProp.maxLength);\n    }\n\n    if (additionalProp.hasOwnProperty('renderingHint')) {\n      exports.setRenderingHint(viewProp, additionalProp.renderingHint);\n    }\n\n    if (additionalProp.hasOwnProperty('requiredText')) {\n      exports.setPlaceHolderText(viewProp, additionalProp.requiredText);\n    }\n\n    if (additionalProp.hasOwnProperty('vertical')) {\n      viewProp.vertical = additionalProp.vertical;\n    }\n\n    if (additionalProp.hasOwnProperty('numberOfLines')) {\n      exports.setNumberOfLines(viewProp, additionalProp.numberOfLines);\n    }\n\n    if (additionalProp.hasOwnProperty('isArray')) {\n      let isArray = _.isBoolean(additionalProp.isArray) ? additionalProp.isArray : additionalProp.isArray === 'true';\n      exports.setIsArray(viewProp, isArray);\n    }\n\n    additionalProp.iconName && (viewProp.iconName = additionalProp.iconName);\n  }\n\n  if (nonatomicUpdate) {\n    exports.setValue(viewProp, newVal);\n  }\n};\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\n\nconst exports = {\n  getUiValue,\n  createViewModelProperty,\n  updateModelData,\n  copyModelData,\n  setSourceObjectUid,\n  getSourceObjectUid,\n  getRelationObjectUid,\n  getPropertyNameInSourceObject,\n\n  /** revisitme yogesh\n            * Hint: we may not be required this\n           triggerDigestCycle,\n            */\n  initializeDateApiValues,\n  setValue,\n  setOldValues,\n  setDisplayValue,\n  setWidgetDisplayValue,\n  setIsEnabled,\n  setIsRichText,\n  setIsNull,\n  setIsRequired,\n  setPlaceHolderText,\n  setIsLocalizable,\n  setIsDisplayable,\n  setIsAutoAssign,\n  setIsAutoAssignable,\n  setHasInitialValue,\n  setLength,\n  setNumberOfCharacters,\n  setNumberOfLines,\n  setIsArray,\n  setArrayLength,\n  setReferenceType,\n  setDataType,\n  setError,\n  setClientValidationError,\n  setServerValidationError,\n  setPropertyDisplayName,\n  setPropertyLabelDisplay,\n  resetUpdates,\n  replaceValuesWithNewValues,\n  resetProperty,\n  resetValues,\n  setEditState,\n  setEditable,\n  setIsEditable,\n  setIsPropertyModifiable,\n  setEditLayoutSide,\n  setHasLov,\n  setIsSelectOnly,\n  setRenderingHint,\n  setOverlayType,\n  setAutoFocus,\n  setDirty,\n  setMaxRowCount,\n  setMinimumDate,\n  setMaximumDate,\n  setDateEnabled,\n  setTimeEnabled,\n  setDateApi,\n  setRadioButtonVertical,\n  setRadioButtonCustomTrueLabel,\n  setRadioButtonCustomFalseLabel,\n  isModified,\n  getDisplayValues,\n  getOwningTypeName,\n  getDisplayName,\n  getValueStrings,\n  isDbValueNumber,\n  isDbValueBoolean,\n  isOverlayTypeWidget,\n  initialize,\n  updateDisplayValues,\n  getBasePropertyName,\n  updateViewModelProperty,\n  isViewModelProperty,\n  isArrayOfViewModelProperty,\n  getSourceModelObject,\n  createValidationCriteria,\n  updateValidationResult,\n  updateLov,\n  isDCPProperty,\n  updateViewModelProp\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewModelProperty\");","map":{"version":3,"names":["AwPromiseService","dateTimeSvc","localeSvc","clientDataModel","dmSvc","_","declUtils","uwDirectiveDateTimeSvc","eventBus","propTypeDate","updateDateApi","setDateTimeValues","getDBValueForDate","getUIValueForDate","clearDateTimeValues","PROP_EDITABLE","PROP_VALUE","PROP_ERROR","PROP_REQUIRED","VIEW_MODEL_PROPERTY","WIDGET","_integerMinValue","_integerMaxValue","_documentScope","_localTextBundle","_pingDeferred","_isPropertyValueTrue","stringValue","String","toUpperCase","_setArrayText","vmProp","localTextBundle","isRequired","isUndefined","propertyRequiredText","length","ARRAY_PLACEHOLDER_TEXT","moveUpButtonTitle","MOVE_UP_BUTTON_TITLE","moveDownButtonTitle","MOVE_DOWN_BUTTON_TITLE","removeButtonTitle","REMOVE_BUTTON_TITLE","_setRadioText","propertyRadioTrueText","RADIO_TRUE","propertyRadioFalseText","RADIO_FALSE","radioBtnApi","customTrueLabel","customFalseLabel","vertical","_pingLoadObjects","debounce","uidsArray","loadObjects","then","exports","setValue","dbValue","propApi","fireValueChangeEvent","resolve","error","fireUIValidationErrorEvent","uiValue","message","clientValidationError","hasServerValidationError","reject","ViewModelProperty","propertyName","propertyDisplayName","dataType","displayValuesIn","displayValuesFinal","type","displayValues","isNull","editable","isEnabled","isRichText","isLocalizable","isDisplayable","isAutoAssignable","hasInitialValue","isArray","valueUpdated","displayValueUpdated","editableInViewModel","isPropertyModifiable","isEditable","arrayLength","propertyLabelDisplay","editLayoutSide","getUiValue","overlayType","value","cloneDeep","prevDisplayValues","dateApi","isDateEnabled","isTimeEnabled","vmPropType","inputType","dbValues","isString","Number","doubleDbValues","l","isFinite","push","isNil","booleanDbValues","k","getTextPromise","Date","getTime","isNumber","dateDbValues","j","doubleDbValues1","i","uiValues","ndx","createViewModelProperty","updateModelData","isModifiable","sourceObjectLastSavedDate","slice","clone","displayValsModel","displayValue","selected","isInEditMode","isModified","copyModelData","targetProperty","updatedProperty","setSourceObjectUid","sourceObjectUid","parentUid","getSourceObjectUid","isEmpty","intermediateObjectUids","getRelationObjectUid","getPropertyNameInSourceObject","sourcePropertyName","isDCP","includes","split","pop","initializeDateApiValues","props","jsDate","getJSDate","isDateNull","isNaN","isNullDate","dateObject","dateValue","formatDate","timeValue","formatTime","getNullDate","sameAsOriginal","isEqual","newValue","updateDisplayValues","getDisplayValues","notifyPropChange","setOldValues","oldValues","oldValuesFinal","oldValue","setDisplayValue","newDisplayValues","setWidgetDisplayValue","setIsEnabled","setIsRichText","setIsNull","setIsRequired","REQUIRED_TEXT","setPlaceHolderText","placeHolderText","setIsLocalizable","uwAnchor","setIsDisplayable","setIsAutoAssign","isAutoAssign","setIsAutoAssignable","setHasInitialValue","setLength","maxLength","setNumberOfCharacters","numberOfCharacters","setNumberOfLines","numberOfLines","setIsArray","nVal","setArrayLength","setReferenceType","typeName","referenceTypeName","setDataType","setError","setClientValidationError","setServerValidationError","setPropertyDisplayName","setPropertyLabelDisplay","fielddata","labelPlacement","_resetPropertyAndResetUpdates","resetValues","fireEvent","resetUpdates","replaceValuesWithNewValues","resetProperty","dbOriginalValue","setEditState","override","setEditLayoutSide","setLOVValueProvider","setAutoAssignHandler","setObjectLinkPropertyHandler","setEditable","setIsEditable","setIsPropertyModifiable","hasLov","setHasLov","setIsSelectOnly","isSelectOnly","setRenderingHint","renderingHint","setOverlayType","setAutoFocus","autofocus","setDirty","dirty","setMaxRowCount","maxRowCount","setMinimumDate","dateToSet","minDate","setMaximumDate","maxDate","setDateEnabled","enabled","setTimeEnabled","setDateApi","setRadioButtonVertical","setRadioButtonCustomTrueLabel","setRadioButtonCustomFalseLabel","getLocalBooleanDisplayValue","toString","_getDisplayValuesFromArrayType","indx","formatSessionDateTime","formatSessionDate","getDisplayName","isBoolean","_getDisplayValuesFromOtherTypes","formatSessionTime","undefined","getOwningTypeName","propertyDescriptor","srcObjectTypeName","getObject","uid","displayName","modelObject","object_string","getValueStrings","values","formatUTC","indx2","isDbValueNumber","isNumeric","n","parseFloat","isDbValueBoolean","isOverlayTypeWidget","initialize","oldDisplayValsModel","getBasePropertyName","baseProperty","lastPeriod","lastIndexOf","substr","_isValidVmProp","isValid","_updateVMPValue","instance","defer","promise","_updateIsNullAndValueUpdatedFlags","updateViewModelProperty","isViewModelProperty","objectToTest","hasOwnProperty","isArrayOfViewModelProperty","listOfobjectToTest","flag","forEach","obj","getSourceModelObject","createValidationCriteria","conditionName","msgString","validationObj","condition","validationCriteria","updateValidationResult","lovEntry","validationResult","uiProp","valid","propInternalValue","propDisplayValue","uiOriginalValue","updatedPropValueMap","toBeModifiedProp","viewModelObj","retrievePropertyWithBasePropertyName","eventData","removeValues","updatedPropDisplayValueMap","publish","lovValue","updateLov","uiProperty","createUpdateValue","operation","checkLovEntries","index","findIndex","val","isObject","splice","Promise","changed","newDbValue","newUiValue","number","parseInt","isNotLov","dateVal","timeVal","filterString","iconSource","iconName","event","target","dateEvent","isDCPProperty","indexOf","updateViewModelProp","viewProp","newVal","additionalProp","nonatomicUpdate","labelPosition","propName","requiredText"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/uwPropertyService.js"],"sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2021 Siemens\n/* eslint-disable require-jsdoc */\n/* eslint-disable complexity */\n\n/**\n * This is the primary service used to create, test and manage the internal properties of ViewModelProperty Objects used\n * throughout the UniversalWidget (et al.) areas of AW. Views can create custom view models by creating a\n * ViewModelObject and adding ViewModelProperty Objects created by this service to it.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/uwPropertyService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport dmSvc from 'soa/dataManagementService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport uwDirectiveDateTimeSvc from 'js/uwDirectiveDateTimeService';\nimport eventBus from 'js/eventBus';\nimport { propTypeDate, updateDateApi, setDateTimeValues, getDBValueForDate, getUIValueForDate, clearDateTimeValues } from 'js/dateTimeProcessingService';\n\n/**\n * Editable State of the property object\n *\n * @private\n */\nvar PROP_EDITABLE = 'editable';\n\n/**\n * Value of the property object\n *\n * @private\n */\nvar PROP_VALUE = 'value';\n\n/**\n * Validation error of property object\n *\n * @private\n */\nvar PROP_ERROR = 'error';\n\n/**\n * Required state of property object\n *\n * @private\n */\nvar PROP_REQUIRED = 'required';\n\n/**\n * Overlay type 'viewModelPropertyOverlay', which defines that the overlay has real data(i.e\n * IViewModelProperty).\n *\n * @private\n */\nvar VIEW_MODEL_PROPERTY = 'viewModelPropertyOverlay';\n\n/**\n * Overlay type 'widgetOverlay', which defines that the overlay has widget data.\n *\n * @private\n */\nvar WIDGET = 'widgetOverlay';\n\n/**\n * Integer minimum value, which is equal to Java Integer's minimum value\n */\nvar _integerMinValue = -2147483648;\n\n/**\n * Integer maximum value, which is equal to Java Integer's maximum value\n */\nvar _integerMaxValue = 2147483647;\n\n/**\n * Cache document ng element to retrieve the scope and trigger digest cycle.\n *\n * @private\n */\n/** revisitme yogesh\n   * Hint: we may not be required this\n var _docNgElement = ngModule.element( document.body );\n  */\n\n/**\n * Cache $q promise service.\n *\n * @private\n */\n\n/**\n * {dateTimeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {localeService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {clientDataModel} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {dataManagementService} Cached reference to injected AngularJS service.\n *\n * @private\n */\n\n/**\n * {$rootScope} Cached reference to the 'root' scope associated with the top level (i.e. document) DOM Element.\n */\nvar _documentScope = null;\n\n/**\n * {StringMap} Cached 'basic' locale text bundle.\n */\nvar _localTextBundle;\n\n/**\n * {Array} Promise that need to be resolved when debounced function executes eventually\n */\nvar _pingDeferred = null;\n\n/**\n * @param {String} stringValue -\n *\n * @return {boolean} TRUE if given value is not NULL and equals 'true', 'TRUE' or '1'.\n */\nvar _isPropertyValueTrue = function( stringValue ) {\n    return stringValue && stringValue !== '0' &&\n        ( String( stringValue ).toUpperCase() === 'TRUE' || stringValue === '1' );\n};\n\n/**\n * Set locale specific string used for array UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\nfunction _setArrayText( vmProp, localTextBundle ) {\n    if( !vmProp.isRequired && ( _.isUndefined( vmProp.propertyRequiredText ) || vmProp.propertyRequiredText.length === 0 ) ) {\n        vmProp.propertyRequiredText = localTextBundle.ARRAY_PLACEHOLDER_TEXT;\n    }\n\n    // Set array button's tool tips\n    vmProp.moveUpButtonTitle = localTextBundle.MOVE_UP_BUTTON_TITLE;\n    vmProp.moveDownButtonTitle = localTextBundle.MOVE_DOWN_BUTTON_TITLE;\n    vmProp.removeButtonTitle = localTextBundle.REMOVE_BUTTON_TITLE;\n} // _setArrayText\n\n/**\n * Set locale specific string used for radio button UI.\n *\n * @param {ViewModelProperty} vmProp - Object to update.\n * @param {StringMap} localTextBundle - Text bundles to use.\n */\nfunction _setRadioText( vmProp, localTextBundle ) {\n    if( !vmProp.propertyRadioTrueText ) {\n        vmProp.propertyRadioTrueText = localTextBundle.RADIO_TRUE;\n    }\n\n    if( !vmProp.propertyRadioFalseText ) {\n        vmProp.propertyRadioFalseText = localTextBundle.RADIO_FALSE;\n    }\n\n    /**\n     * Handles setting of custom labels and vertical alignment attributes when directives are used natively\n     */\n    if( vmProp.radioBtnApi ) {\n        if( vmProp.radioBtnApi.customTrueLabel ) {\n            vmProp.propertyRadioTrueText = vmProp.radioBtnApi.customTrueLabel;\n        }\n\n        if( vmProp.radioBtnApi.customFalseLabel ) {\n            vmProp.propertyRadioFalseText = vmProp.radioBtnApi.customFalseLabel;\n        }\n\n        if( vmProp.radioBtnApi.vertical ) {\n            vmProp.vertical = vmProp.radioBtnApi.vertical;\n        }\n    }\n}\n\n/**\n * Helper function to avoid multiple calls to load objects by using lodash debounce\n */\nvar _pingLoadObjects = _.debounce( function( uidsArray, vmProp ) {\n    dmSvc.loadObjects( uidsArray ).then( function() {\n        exports.setValue( vmProp, vmProp.dbValue );\n\n        if( vmProp.propApi && vmProp.propApi.fireValueChangeEvent ) {\n            vmProp.propApi.fireValueChangeEvent();\n        }\n\n        if( _pingDeferred ) {\n            _pingDeferred.resolve();\n            _pingDeferred = null;\n        }\n    }, function( error ) {\n        if( vmProp.propApi && vmProp.propApi.fireUIValidationErrorEvent ) {\n            vmProp.uiValue = '';\n            vmProp.error = error.message;\n            vmProp.clientValidationError = error.message;\n            vmProp.hasServerValidationError = true;\n            vmProp.propApi.fireUIValidationErrorEvent( error.message );\n        }\n\n        if( _pingDeferred ) {\n            _pingDeferred.reject( error );\n            _pingDeferred = null;\n        }\n    } );\n}, 250 );\n\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n * <P>\n * Note: The properties shown below in the 'members' section are defined, understood and created by this class\n * constructor.\n * <P>\n * Note: The properties shown below in the 'properties' section are marked as '(Optional)' and are defined and\n * understood, but not created by this class constructor. The are defined as needed by the various APIs of the\n * uwPropertyService.\n *\n * @class ViewModelProperty\n *\n * @memberof module:js/uwPropertyService\n *\n * @param {String} propertyName - The name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - User displayable name of the property\n * @param {String} dataType - Data type of the property\n * @param {Array} dbValue - Real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValuesIn - Display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n *\n * @property {String} inputType - (Optional) input type\n *\n * @property {Object} sourceObjectLastSavedDate - (Optional) source object last saved date\n *\n * @property {String} propertyRadioTrueText - (Optional) Used for boolean Radio button 'true' label\n *\n * @property {String} propertyRadioFalseText - (Optional) Used for boolean Radio button 'false' label\n *\n * @property {boolean} vertical - (Optional) Used for boolean radio button. TRUE to show the layout of the radio\n *           button vertically. FALSE for horizontal layout.\n *\n * @property {ObjectArray} displayValsModel - (Optional) This is only used for arrays so that we can maintain\n *           the selection of the rows in array widget.\n *\n * @property {String} parentUid - (Optional) This is the UID of the original IModelObject (in the client data\n *           model cache) that was used to originate this ViewModelProperty.\n *\n * @property {Object} newValue - (Optional) new value\n *\n * @property {Object} propApi - (Optional) property API\n *\n * @property {Object} oldValue - (Optional) old value\n *\n * @property {ObjectArray} oldValues - (Optional) old values\n *\n * @property {String} propertyRequiredText - (Optional) Localized text seen as the placeholder text in a field\n *           when the property is 'Required'.\n *\n * @property {Number} maxLength - (Optional) If not equal to '-1' or '0', this parameter specifies the maximum\n *           number of characters allowed in a string type property.\n *\n * @property {Number} numberOfCharacters - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of characters in a string type property.\n *\n * @property {Number} numberOfLines - (Optional) If not equal to '-1' or '0', this parameter specifies the\n *           number of lines allowed in a property.\n *\n * @property {String} moveUpButtonTitle - (Optional) Localized title for 'move-up' button in array widget.\n *\n * @property {String} moveDownButtonTitle - (Optional) Localized title for 'move-down' button in array widget.\n *\n * @property {String} removeButtonTitle - (Optional) Localized title for 'remove' button used only for array\n *           widget.\n *\n * @property {String} referenceTypeName - (Optional) reference type name\n *\n * @property {String} clientValidationError - (Optional) client validation error\n *\n * @property {String} hasServerValidationError - (Optional) has server validation error?\n *\n * @property {boolean} hasLov - (Optional) TRUE if the property has a specific list of values associated with\n *           it.\n *\n * @property {String} renderingHint - (Optional) Depending on the type, this string indicates some variation in\n *           how the property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include\n *           'radiobutton', 'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label',\n *           'textbox', 'textfield', 'textarea', 'longtext').\n *\n * @property {boolean} autofocus - (Optional) auto focus?\n *\n * @property {boolean} dirty - (Optional) TRUE if the value of the property has changed (been edited) since it\n *           was initially displayed.\n *\n * @property {Number} maxRowCount - (Optional) Used only for array widget. If != -1, then the array widget will\n *           only show the scroll bar after max row count is reached.\n *\n * @property {StringArray} newDisplayValues - (Optional) new display values\n *\n * @property {Object} propertyDescriptor - (Optional) property descriptor\n *\n * @property {boolean} initialize - (Optional) initialize?\n */\nvar ViewModelProperty = function( propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn ) { // eslint-disable-line complexity\n    var vmProp = this;\n\n    var displayValuesFinal = displayValuesIn || [];\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyName\n     *\n     * {String} Internal name of the property.\n     */\n    vmProp.propertyName = propertyName;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyDisplayName\n     *\n     * {String} User displayable name of the property (a.k.a. the property's 'label').\n     */\n    vmProp.propertyDisplayName = propertyDisplayName;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property type\n     *\n     * {String} Data type of the property. Valid values are: 'CHAR', 'DATE', 'DOUBLE', 'FLOAT', 'INTEGER',\n     * 'BOOLEAN', 'SHORT', 'STRING' & 'OBJECT'.\n     */\n    vmProp.type = dataType;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property dbValue\n     *\n     * {Object} The internal (database) representation of the property's value.\n     * <P>\n     * Note: For 'DATE' type properties, the 'dbValueIn' is assumed to be of type 'double' and represents the\n     * number of milliseconds since UNIX 'epoch' (January 1, 1970 00:00:00 GMT).\n     */\n    vmProp.dbValue = dbValue;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property displayValues\n     *\n     * {StringArray} Array of strings representing the current user displayable value(s) of the property.\n     */\n    vmProp.displayValues = displayValuesFinal;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isNull\n     *\n     * {boolean} TRUE if the current property value is 'no value'. FALSE if the value is valid as is.\n     * <P>\n     * Note: This option is used in cases when the property's value has not been set yet but that there is no\n     * way to represent this state in a simple string (e.g. Is the string 'empty' or not yet set? Is the 'empty'\n     * string an indication of an integer value of '0'?).\n     */\n    vmProp.isNull = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */\n    vmProp.editable = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isEnabled\n     *\n     * {boolean} TRUE if the property's value should be shown normally and (if also editable) react to user\n     * input. FALSE if the property's value should be shown 'greyed out' and not react to user input (even if\n     * editable).\n     */\n    vmProp.isEnabled = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isRichText\n     *\n     * {boolean} TRUE if the string value of the property is in HTML format and should be displayed using HTML\n     * formatting rules and edited with the 'rich text' editor.\n     */\n    vmProp.isRichText = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isRequired\n     *\n     * {boolean} TRUE if the property's value is required to successfully complete some operation that uses it.\n     * FALSE if the property's value is optional.\n     */\n    vmProp.isRequired = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isLocalizable\n     *\n     * {boolean} TRUE if the property value's UI should include the option to allow any user entered value to be\n     * converted from local language (as entered) into some other system language. Note: The UI necessary for\n     * translating the value is not currently supported in Active Workspace 2.4.\n     */\n    vmProp.isLocalizable = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isDisplayable\n     *\n     * {boolean} is displayable?\n     */\n    vmProp.isDisplayable = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isAutoAssignable\n     *\n     * {boolean} TRUE if the property's value can/should be assigned automatically by Teamcenter. FALSE if the\n     * property's value is not normally assigned/controlled by Teamcenter.\n     * <P>\n     * Note: The UI necessary for assigning this value is not currently supported in Active Workspace 2.4.\n     */\n    vmProp.isAutoAssignable = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property hasInitialValue\n     *\n     * {boolean} has initial value?\n     */\n    vmProp.hasInitialValue = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isArray\n     *\n     * {boolean} TRUE if the property can have more than one value in an ordered list. FALSE if the property can\n     * have only a single value.\n     * <P>\n     * Note: The UI necessary for displaying/editing the multiple value is not currently supported in Active\n     * Workspace 2.4.\n     */\n    vmProp.isArray = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property valueUpdated\n     *\n     * {boolean} value updated?\n     */\n    vmProp.valueUpdated = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property displayValueUpdated\n     *\n     * {boolean} display value updated?\n     */\n    vmProp.displayValueUpdated = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editableInViewModel\n     *\n     * {boolean} editable in view model?\n     */\n    vmProp.editableInViewModel = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isPropertyModifiable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */\n    vmProp.isPropertyModifiable = true;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property isEditable\n     *\n     * {boolean} TRUE if the user should have the ability to change the property's value. FALSE if the value is\n     * read-only.\n     */\n    vmProp.isEditable = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property arrayLength\n     *\n     * {Number} array length\n     */\n    vmProp.arrayLength = -1;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property error\n     *\n     * {String} The message that should be displayed when some aspect of the property's value is not correct.\n     * This value must be 'null' or an empty string to not have the error be displayed.\n     */\n    vmProp.error = null;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property propertyLabelDisplay\n     *\n     * {String} property label display\n     * empty by default\n     * see declReact/viewModelService.js for precedence\n     */\n    vmProp.propertyLabelDisplay = '';\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property editLayoutSide\n     *\n     * {boolean} edit layout side\n     */\n    vmProp.editLayoutSide = false;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property uiValue\n     *\n     * {String} (Derived) A 'non-null' string containing comma separated values as specified in the\n     * 'displayValuesIn' parameter given in the constructor.\n     */\n    vmProp.uiValue = exports.getUiValue( displayValuesFinal );\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property overlayType\n     *\n     * {String} overlay type\n     */\n    vmProp.overlayType = VIEW_MODEL_PROPERTY;\n\n    /**\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property value\n     *\n     * {Object} database value\n     */\n    vmProp.value = _.cloneDeep( dbValue );\n\n    // for the purposes of lovs with initial values, we are expecting prevDisplayValue\n    // to be same as uiOriginalValue. This dependency is a bit of a historical accident\n    // that needs to be addressed as part of a vmProp re-organization.\n    // for now, re-introducing the intialization of this param.\n    vmProp.prevDisplayValues = displayValuesFinal;\n\n    /**\n     * @private\n     *\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property dateApi\n     *\n     * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n     * is created by a Universal Widget and of type \"DATE\".\n     *\n     * @property dateApi.isDateEnabled\n     *\n     * {boolean} TRUE if the \"DATE\" type Universal Widget should display a date field.\n     *\n     * @property dateApi.isTimeEnabled\n     *\n     * {boolean} TRUE if the \"DATE\" type Universal Widget should display a time field.\n     */\n    vmProp.dateApi = {\n        isDateEnabled: true,\n        isTimeEnabled: true\n    };\n\n    /**\n     * @private\n     *\n     * @memberof module:js/uwPropertyService.ViewModelProperty\n     * @property radioBtnApi\n     *\n     * {Object} (Extra/Optional) An 'internal decoration' object and property created when the ViewModelProperty\n     * is created by a Universal Widget and of a type displayed as a groupd of 'radio buttons'.\n     */\n    vmProp.radioBtnApi = {};\n\n    /**\n     * -----------------------------------------------------------------------<BR>\n     * -----------------------------------------------------------------------<BR>\n     * Finish initialization of class properties <BR>\n     * -----------------------------------------------------------------------<BR>\n     * -----------------------------------------------------------------------<BR>\n     */\n\n    /**\n     */\n    var vmPropType = vmProp.type;\n\n    if( vmPropType === 'STRING' || vmPropType === 'STRINGARRAY' || vmPropType === 'CHAR' ) {\n        vmProp.inputType = 'text';\n    } else if( vmPropType === 'OBJECT' ) {\n        vmProp.dbValues = [ vmProp.dbValue ];\n    } else if( vmPropType === 'INTEGER' || vmPropType === 'INTEGERARRAY' ) {\n        if( dbValue ) {\n            if( _.isString( dbValue ) ) {\n                vmProp.dbValue = Number( dbValue );\n                vmProp.value = vmProp.dbValue;\n            } else if( _.isArray( dbValue ) ) {\n                var doubleDbValues = [];\n                for( var l = 0; l < dbValue.length; l++ ) {\n                    if( isFinite( dbValue[ l ] ) ) {\n                        doubleDbValues.push( Number( dbValue[ l ] ) );\n                    } else if( dbValue[ l ] === '' ) {\n                        doubleDbValues.push( dbValue[ l ] );\n                    }\n                }\n                vmProp.dbValue = doubleDbValues;\n                vmProp.value = _.cloneDeep( doubleDbValues );\n            } else {\n                vmProp.dbValue = dbValue;\n                vmProp.value = vmProp.dbValue;\n            }\n        }\n    } else if( vmPropType === 'BOOLEAN' || vmPropType === 'BOOLEANARRAY' ) {\n        if( declUtils.isNil( dbValue ) ) {\n            vmProp.dbValue = null;\n            vmProp.value = null; // Note: If the server had no opinion on this boolean, neither does the 'value' property.\n        } else if( _.isString( dbValue ) ) {\n            vmProp.dbValue = _isPropertyValueTrue( vmProp.dbValue );\n            vmProp.value = vmProp.dbValue;\n        } else if( _.isArray( dbValue ) ) {\n            var booleanDbValues = [];\n\n            for( var k = 0; k < dbValue.length; k++ ) {\n                booleanDbValues[ k ] = _isPropertyValueTrue( dbValue[ k ] );\n            }\n\n            vmProp.dbValue = booleanDbValues;\n            vmProp.value = _.cloneDeep( booleanDbValues );\n        }\n\n        if( _localTextBundle ) {\n            _setRadioText( vmProp, _localTextBundle );\n        } else {\n            localeSvc.getTextPromise().then( function( localTextBundle ) {\n                _localTextBundle = localTextBundle;\n                _setRadioText( vmProp, _localTextBundle );\n            } );\n        }\n    } else if( vmPropType === 'DATE' || vmPropType === 'DATEARRAY' ) {\n        if( _.isString( dbValue ) ) {\n            vmProp.dbValue = new Date( dbValue ).getTime();\n            vmProp.value = vmProp.dbValue;\n        } else if( _.isNumber( dbValue ) ) {\n            if( dbValue !== 0 ) {\n                vmProp.dbValue = new Date( dbValue ).getTime();\n                vmProp.value = vmProp.dbValue;\n            }\n        } else if( _.isArray( dbValue ) ) {\n            var dateDbValues = [];\n            for( var j = 0; j < dbValue.length; j++ ) {\n                dateDbValues[ j ] = new Date( dbValue[ j ] ).getTime();\n            }\n            vmProp.dbValue = dateDbValues;\n            vmProp.value = _.cloneDeep( dateDbValues );\n        }\n    } else if( vmPropType === 'DOUBLE' || vmPropType === 'DOUBLEARRAY' ) {\n        if( dbValue ) {\n            if( _.isString( dbValue ) ) {\n                vmProp.dbValue = Number( dbValue );\n                vmProp.value = vmProp.dbValue;\n            } else if( _.isArray( dbValue ) ) {\n                var doubleDbValues1 = [];\n\n                for( var i = 0; i < dbValue.length; i++ ) {\n                    if( dbValue[ i ] ) {\n                        doubleDbValues1.push( Number( dbValue[ i ] ) );\n                    } else if( dbValue[ i ] === '' ) {\n                        doubleDbValues1.push( dbValue[ i ] );\n                    }\n                }\n                vmProp.dbValue = doubleDbValues1;\n                vmProp.value = _.cloneDeep( doubleDbValues1 );\n            } else if( dbValue ) {\n                vmProp.dbValue = dbValue;\n                vmProp.value = vmProp.dbValue;\n            }\n        }\n    }\n};\n\n/**\n * @param {StringArray} uiValues - UI/display value array\n * @returns {String} UI value\n */\nexport let getUiValue = function( uiValues ) {\n    if( !uiValues || uiValues.length === 0 ) {\n        return '';\n    }\n    if( uiValues.length > 1 ) {\n        var uiValue = uiValues[ 0 ];\n        for( var ndx = 1; ndx < uiValues.length && ndx < 4; ndx++ ) {\n            uiValue += ', ' + uiValues[ ndx ];\n        }\n        if( ndx < uiValues.length ) {\n            uiValue += ', ...';\n        }\n        return uiValue;\n    }\n    return uiValues[ 0 ];\n};\n\n/**\n * Constructor for a ViewModelProperty used to hold all Teamcenter property description and view state.\n * <P>\n * Note: Unless otherwise noted, the various parameters are simply set, unmodified and with the same name, as\n * properties on the resulting object created by this constructor. Parameters what have a suffix of 'In' are\n * modified in some way before being set as properties.\n *\n * @param {String} propertyName - the name/id of the property. Has to be unique within the object\n * @param {String} propertyDisplayName - user displayable name of the property\n * @param {String} dataType - data type of the property\n * @param {Object} dbValue - real value of the property. The internal (database) representation of the\n *            property's value.\n * @param {StringArray} displayValuesIn - display value of the property. Arrays of string representing the\n *            current user displayable value(s) of the property.\n *\n * @return {ViewModelProperty} A new instance of this class.\n */\nexport let createViewModelProperty = function( propertyName, propertyDisplayName, dataType, dbValue,\n    displayValuesIn ) {\n    return new ViewModelProperty( propertyName, propertyDisplayName, dataType, dbValue, displayValuesIn );\n};\n\n/**\n * Update the model data. The view model should use this method to update property data\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n * @param {Boolean} isNull - is the property value null\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n * @param {Boolean} isModifiable - TRUE if the property is modifiable\n * @param {Object} sourceObjectLastSavedDate - last saved date of source object\n */\nexport let updateModelData = function( vmProp, value, displayValues, isNull, isEditable, isModifiable,\n    sourceObjectLastSavedDate ) {\n    var displayValuesFinal = displayValues === null ? [] : displayValues;\n\n    vmProp.displayValues = displayValuesFinal;\n    vmProp.isNull = isNull;\n    vmProp.editable = isEditable;\n    vmProp.isPropertyModifiable = isModifiable;\n    vmProp.uiValue = exports.getUiValue( displayValuesFinal );\n    vmProp.sourceObjectLastSavedDate = sourceObjectLastSavedDate || vmProp.sourceObjectLastSavedDate;\n\n    if( _.isArray( value ) && !vmProp.isArray ) {\n        vmProp.value = value.slice( 0 );\n    } else {\n        vmProp.value = value;\n    }\n\n    if( vmProp.prevDisplayValues ) {\n        vmProp.prevDisplayValues = _.clone( vmProp.displayValues );\n    }\n\n    if( vmProp.uiValues ) {\n        vmProp.uiValues = _.clone( vmProp.displayValues );\n    }\n\n    if( vmProp.isArray ) {\n        vmProp.displayValsModel = [];\n        for( var i = 0; i < vmProp.displayValues.length; i++ ) {\n            vmProp.displayValsModel.push( {\n                displayValue: vmProp.displayValues[ i ],\n                selected: false,\n                isInEditMode: false\n            } );\n        }\n    }\n\n    if( !exports.isModified( vmProp ) ) {\n        vmProp.dbValue = _.cloneDeep( value );\n    }\n};\n\n/**\n * Copy the model data. The view model should use this method to copy model data\n *\n * @param {ViewModelProperty} targetProperty - ViewModelProperty object that will be updated.\n * @param {ViewModelProperty} updatedProperty - ViewModelProperty that has the updated information.\n */\nexport let copyModelData = function( targetProperty, updatedProperty ) {\n    exports.updateModelData( targetProperty, updatedProperty.value, updatedProperty.displayValues,\n        updatedProperty.isNull, updatedProperty.editable, updatedProperty.isPropertyModifiable,\n        updatedProperty.sourceObjectLastSavedDate );\n    if( updatedProperty.dbValues && updatedProperty.dbValues.length > 0 ) {\n        targetProperty.dbValues = updatedProperty.dbValues.slice( 0 );\n    } else {\n        targetProperty.dbValues = [];\n    }\n};\n\n/**\n * Set's the parent object uid in view model property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty\n * @param {String} sourceObjectUid - source object UID\n */\nexport let setSourceObjectUid = function( vmProp, sourceObjectUid ) {\n    vmProp.parentUid = sourceObjectUid;\n};\n\n/**\n * Retrieve the source object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\nexport let getSourceObjectUid = function( vmProp ) {\n    var sourceObjectUid = vmProp.parentUid;\n\n    if( !_.isEmpty( vmProp.intermediateObjectUids ) ) {\n        sourceObjectUid = vmProp.intermediateObjectUids[ vmProp.intermediateObjectUids.length - 1 ];\n    }\n\n    return sourceObjectUid;\n};\n\n/**\n * Retrieve the relation object uid from the property, if no intermediate object, then from the parent object.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {String} - source objects uid\n */\nexport let getRelationObjectUid = function( vmProp ) {\n    var sourceObjectUid = vmProp.parentUid;\n\n    if( vmProp.intermediateObjectUids && vmProp.intermediateObjectUids.length > 0 ) {\n        sourceObjectUid = vmProp.intermediateObjectUids[ 0 ];\n    }\n\n    return sourceObjectUid;\n};\n\n/**\n * Returns the property name as defined in the source object for this view model property .\n *\n * For e.g. this method would return \"object_name\" for a view Model property with name\n * REF(items_tag,Item).object_name\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String} - Source property name\n */\nexport let getPropertyNameInSourceObject = function( vmProp ) {\n    var sourcePropertyName = vmProp.propertyName;\n\n    if( vmProp.isDCP || !_.isEmpty( vmProp.intermediateObjectUids ) ) {\n        if( sourcePropertyName.includes( '.' ) ) {\n            sourcePropertyName = sourcePropertyName.split( '.' ).slice( -1 ).pop();\n        }\n    }\n\n    return sourcePropertyName;\n};\n\n/**\n * Trigger digest cycle of root scope so that widgets get reflected to the overlay object updates.\n */\n/** revisitme yogesh\n  * Hint: we don't need this\n export let triggerDigestCycle = function() {\n     // trigger angular digest cycle on root scope so that value updates get reflected\n     if( _documentScope ) {\n         _documentScope.$evalAsync();\n     } else if( _docNgElement && _docNgElement.scope() ) {\n         _documentScope = _docNgElement.scope();\n         _documentScope.$evalAsync();\n     }\n };\n */\n\n/**\n * Initialize dateApi with initial value if provided from dbValue\n *\n *  @param {ViewModelProperty} props - ViewModelProperty object that will be updated.\n *\n */\nexport const initializeDateApiValues = ( props ) => {\n    let dateApi = props.dateApi;\n    let jsDate = new Date( props.dbValue );\n    jsDate = dateTimeSvc.getJSDate( jsDate );\n\n    var isDateNull = true;\n\n    if( !isNaN( jsDate ) ) {\n        if( !dateTimeSvc.isNullDate( jsDate ) ) {\n            isDateNull = false;\n\n            if( dateApi.isDateEnabled ) {\n                props.dateApi.dateObject = jsDate;\n                props.dateApi.dateValue = uwDirectiveDateTimeSvc.formatDate( jsDate );\n            }\n\n            if( dateApi.isTimeEnabled ) {\n                props.dateApi.timeValue = dateTimeSvc.formatTime( jsDate );\n            }\n        }\n    }\n\n    if( isDateNull ) {\n        if( dateApi.isDateEnabled ) {\n            props.dateApi.dateObject = dateTimeSvc.getNullDate();\n            props.dateApi.dateValue = '';\n        }\n\n        if( dateApi.isTimeEnabled && props.type !== 'DATEARRAY' ) {\n            props.dateApi.timeValue = '';\n        }\n    }\n};\n\n/**\n * Set the internal value of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Object} value - real value of the property. The internal (database) representation of the property's\n *            value.\n */\nexport let setValue = function( vmProp, value ) {\n    var sameAsOriginal = _.isEqual( value, vmProp.value );\n\n    if( !sameAsOriginal || vmProp.valueUpdated && !_.isEqual( value, vmProp.newValue ) ) {\n        vmProp.valueUpdated = true;\n\n        /**\n         * This happens in case of CasCade Suggestive LOV, When user changes value in first LOV, for dependent\n         * LOV value comes as [\"\"] ( array of empty string) and it causes JSON parsing error for soa call.\n         */\n        if( !vmProp.isArray && _.isArray( value ) && value.length > 0 ) {\n            vmProp.dbValue = value[ 0 ];\n        } else {\n            vmProp.dbValue = value;\n        }\n\n        if( vmProp.isArray ) {\n            vmProp.dbValues = value;\n        }\n\n        if( _.isArray( value ) && !vmProp.isArray ) {\n            vmProp.newValue = _.cloneDeep( value[ 0 ] );\n        } else {\n            vmProp.newValue = _.cloneDeep( value );\n        }\n\n        vmProp.error = null;\n\n        // Always update display values\n        // Do this first in case property change listeners want to change to something else\n        exports.updateDisplayValues( vmProp, exports.getDisplayValues( vmProp ) );\n\n        updateDateApi( vmProp );\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_VALUE );\n        }\n    }\n};\n\n/**\n * Set the old value of the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Object} oldValues - Old Value of property.\n */\nexport let setOldValues = function( vmProp, oldValues ) {\n    var oldValuesFinal = oldValues === null ? [] : oldValues;\n    vmProp.oldValues = oldValuesFinal;\n    vmProp.oldValue = exports.getUiValue( oldValuesFinal );\n};\n\n/**\n * Set display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\nexport let setDisplayValue = function( vmProp, displayValues ) {\n    var sameAsOriginal = !vmProp.prevDisplayValues || _.isEqual( displayValues, vmProp.prevDisplayValues );\n\n    if( !vmProp.displayValueUpdated && !sameAsOriginal || vmProp.displayValueUpdated &&\n        !_.isEqual( displayValues, vmProp.newDisplayValues ) ) {\n        vmProp.displayValueUpdated = !sameAsOriginal;\n        vmProp.error = null;\n\n        exports.updateDisplayValues( vmProp, displayValues );\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_VALUE );\n        }\n    }\n};\n\n/**\n * Set widget display values of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\nexport let setWidgetDisplayValue = function( vmProp, displayValues ) {\n    var sameAsOriginal = _.isEqual( displayValues, vmProp.displayValues );\n\n    if( !sameAsOriginal ) {\n        exports.updateDisplayValues( vmProp, displayValues );\n    }\n};\n\n/**\n * Set 'isEnabled' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEnabled - TRUE if the property's value should be shown normally and (if also editable)\n *            react to user input. FALSE if the property's value should be shown 'greyed out' and not react to\n *            user input (even if editable).\n */\nexport let setIsEnabled = function( vmProp, isEnabled ) {\n    vmProp.isEnabled = isEnabled;\n};\n\n/**\n * Set 'isRichText' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRichText - TRUE if the string value of the property is in HTML format and should be\n *            displayed using HTML formatting rules and edited with the 'rich text' editor.\n */\nexport let setIsRichText = function( vmProp, isRichText ) {\n    vmProp.isRichText = isRichText;\n};\n\n/**\n * Set 'isNull' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isNull - TRUE if the current property value is 'no value'. FALSE if the value is valid as\n *            is.\n */\nexport let setIsNull = function( vmProp, isNull ) {\n    vmProp.isNull = isNull;\n};\n\n/**\n * Set 'isRequired' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isRequired - TRUE if the property's value is required to sucessfully complete some operation\n *            that uses it. FALSE if the property's value is optional.\n */\nexport let setIsRequired = function( vmProp, isRequired ) {\n    if( vmProp.isRequired !== isRequired ) {\n        vmProp.isRequired = isRequired;\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_REQUIRED );\n        }\n\n        // Set required place holder text if 'isRequired' flag is true\n        if( vmProp.isRequired && !vmProp.propertyRequiredText ) {\n            if( _localTextBundle ) {\n                vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n            } else {\n                localeSvc.getTextPromise().then( function( localTextBundle ) {\n                    _localTextBundle = localTextBundle;\n                    vmProp.propertyRequiredText = _localTextBundle.REQUIRED_TEXT;\n                } );\n            }\n        }\n    }\n};\n\n/**\n * Set the place holder text on the ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} placeHolderText - The place holder text\n */\nexport let setPlaceHolderText = function( vmProp, placeHolderText ) {\n    vmProp.propertyRequiredText = placeHolderText;\n};\n\n/**\n * Set 'isLocalizable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isLocalizable - TRUE if the property value's UI should include the option to alow any user\n *            entered value to be converted from local language (as entered) into some other system language.\n */\nexport let setIsLocalizable = function( vmProp, isLocalizable ) {\n    vmProp.isLocalizable = isLocalizable;\n    vmProp.uwAnchor = '';\n    if( isLocalizable && ( vmProp.type === 'STRING' || vmProp.type === 'STRINGARRAY' ) ) {\n        vmProp.uwAnchor = 'aw_multiLanguageProperty';\n    }\n};\n\n/**\n * Set 'isDisplayable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isDisplayable - isDisplayable state of ViewModelProperty.\n */\nexport let setIsDisplayable = function( vmProp, isDisplayable ) {\n    vmProp.isDisplayable = isDisplayable;\n};\n\n/**\n * Set 'isAutoAssign' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssign - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\nexport let setIsAutoAssign = function( vmProp, isAutoAssign ) {\n    vmProp.isAutoAssign = isAutoAssign;\n};\n\n/**\n * Set 'isAutoAssignable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} isAutoAssignable - TRUE if the property's value can/should be assigned automatically by\n *            Teamcenter. FALSE if the property's value is not normally assigned/controlled by Teamcenter.\n */\nexport let setIsAutoAssignable = function( vmProp, isAutoAssignable ) {\n    vmProp.isAutoAssignable = isAutoAssignable;\n};\n\n/**\n * Set 'hasInitialValue' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} hasInitialValue - TRUE if the property has initial value. FALSE if the property does not\n *            have initial value.\n */\nexport let setHasInitialValue = function( vmProp, hasInitialValue ) {\n    vmProp.hasInitialValue = hasInitialValue;\n};\n\n/**\n * Set 'maxLength' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Number} maxLength - If not equal to '-1' or '0', this parameter specifies the maximum number of\n *            characters allowed in a string type property.\n */\nexport let setLength = function( vmProp, maxLength ) {\n    if( maxLength !== -1 && maxLength !== 0 ) {\n        vmProp.maxLength = maxLength;\n    }\n};\n\n/**\n * Set 'numberOfCharacters' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfCharacters - If not equal to '-1' or '0', this parameter specifies the number of\n *            characters in a string type property.\n */\nexport let setNumberOfCharacters = function( vmProp, numberOfCharacters ) {\n    if( numberOfCharacters !== -1 && numberOfCharacters !== 0 ) {\n        vmProp.numberOfCharacters = numberOfCharacters;\n    }\n};\n\n/**\n * Set 'numberOfLines' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} numberOfLines - If not equal to '-1' or '0', this parameter specifies the number of lines\n *            allowed in a property.\n */\nexport let setNumberOfLines = function( vmProp, numberOfLines ) {\n    if( numberOfLines !== -1 && numberOfLines !== 0 ) {\n        vmProp.numberOfLines = numberOfLines;\n    }\n};\n\n/**\n * Set 'isArray' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isArray - TRUE if the property can have more than one value in an ordered list. FALSE if the\n *            property can have only a single value.\n */\nexport let setIsArray = function( vmProp, isArray ) {\n    if( vmProp.isArray !== isArray ) {\n        vmProp.isArray = isArray;\n\n        // Set array place holder text if 'isArray' flag is true and the property is not required.\n        if( vmProp.isArray ) {\n            if( !_.isArray( vmProp.dbValue ) ) {\n                vmProp.dbValue = [];\n                vmProp.value = [];\n            }\n\n            if( _localTextBundle ) {\n                _setArrayText( vmProp, _localTextBundle );\n            } else {\n                localeSvc.getTextPromise().then( function( localTextBundle ) {\n                    _localTextBundle = localTextBundle;\n\n                    _setArrayText( vmProp, _localTextBundle );\n                } );\n            }\n        }\n\n        vmProp.displayValsModel = [];\n        var nVal = vmProp.displayValues.length;\n\n        for( var i = 0; i < nVal; i++ ) {\n            vmProp.displayValsModel.push( {\n                displayValue: vmProp.displayValues[ i ],\n                selected: false,\n                isInEditMode: false\n            } );\n        }\n    }\n};\n\n/**\n * Set 'arrayLength' state of ViewModelProperty. Applies only if the property is an array\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} arrayLength - set the array length. Set \"-1\" if unlimited array.\n */\nexport let setArrayLength = function( vmProp, arrayLength ) {\n    vmProp.arrayLength = arrayLength;\n};\n\n/**\n * Set 'referenceTypeName' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} typeName - set reference type name of ViewModelProperty.\n */\nexport let setReferenceType = function( vmProp, typeName ) {\n    vmProp.referenceTypeName = typeName;\n};\n\n/**\n * Set data type of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} dataType - data type of ViewModelProperty.\n */\nexport let setDataType = function( vmProp, dataType ) {\n    vmProp.type = dataType;\n};\n\n/**\n * Set 'error' of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} error - The message that should be displayed when some aspect of the property's value is not\n *            correct. This value must be 'null' or an empty string to not have the error be displayed.\n */\nexport let setError = function( vmProp, error ) {\n    if( vmProp.error !== error ) {\n        vmProp.error = error;\n\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_ERROR );\n        }\n    }\n};\n\n/**\n * Set client validation error of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} clientValidationError - set client validation error of ViewModelProperty.\n */\nexport let setClientValidationError = function( vmProp, clientValidationError ) {\n    vmProp.clientValidationError = clientValidationError;\n};\n\n/**\n * Set server validation error flag of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} hasServerValidationError - set server validation error flag of ViewModelProperty.\n */\nexport let setServerValidationError = function( vmProp, hasServerValidationError ) {\n    vmProp.hasServerValidationError = hasServerValidationError;\n};\n\n/**\n * Set property display name of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} propertyDisplayName - user displayable name of ViewModelProperty.\n */\nexport let setPropertyDisplayName = function( vmProp, propertyDisplayName ) {\n    vmProp.propertyDisplayName = propertyDisplayName;\n};\n\n/**\n * Set property label display of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} propertyLabelDisplay - String value of property label display.\n */\nexport let setPropertyLabelDisplay = function( vmProp, propertyLabelDisplay ) {\n    vmProp.propertyLabelDisplay = propertyLabelDisplay;\n\n    // point-fix for xrt labeldisplay=titled issue...\n    // factor with declViewModelService.getLabelPlacement()?\n    if( vmProp.fielddata && propertyLabelDisplay === 'PROPERTY_LABEL_AT_TOP' ) {\n        vmProp.fielddata.labelPlacement = 'top';\n    }\n};\n\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} resetValues - True is values needs to be updated\n */\nfunction _resetPropertyAndResetUpdates( vmProp, resetValues ) {\n    var fireEvent = false;\n\n    if( vmProp.valueUpdated ) {\n        vmProp.valueUpdated = false;\n        fireEvent = true;\n    }\n\n    if( vmProp.displayValueUpdated ) {\n        vmProp.displayValueUpdated = false;\n        fireEvent = true;\n    }\n\n    if( vmProp.error ) {\n        vmProp.error = null;\n        if( !fireEvent && vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_ERROR );\n        }\n    }\n\n    if( fireEvent ) {\n        if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n            vmProp.propApi.notifyPropChange( PROP_VALUE );\n        }\n\n        if( resetValues ) {\n            exports.resetValues( vmProp );\n        }\n    }\n}\n\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let resetUpdates = function( vmProp ) {\n    _resetPropertyAndResetUpdates( vmProp, true );\n};\n\n/**\n * Sets the value and displayValues with the updated 'new' values.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let replaceValuesWithNewValues = function( vmProp ) {\n    if( vmProp.valueUpdated ) {\n        vmProp.value = _.cloneDeep( vmProp.newValue );\n    }\n\n    if( vmProp.displayValueUpdated ) {\n        if( vmProp.prevDisplayValues ) {\n            vmProp.prevDisplayValues = _.clone( vmProp.displayValues );\n        }\n        vmProp.displayValues = _.clone( vmProp.newDisplayValues );\n    }\n};\n\n/**\n * Reset updates which converts back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let resetProperty = function( vmProp ) {\n    _resetPropertyAndResetUpdates( vmProp, false );\n};\n\n/**\n * Reset db values and display values back to original value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let resetValues = function( vmProp ) {\n    if( _.isArray( vmProp.value ) ) {\n        vmProp.dbValue = vmProp.value.slice( 0 );\n        if( !_.isUndefined( vmProp.dbOriginalValue ) ) {\n            vmProp.dbOriginalValue = vmProp.value.slice( 0 );\n        }\n    } else {\n        vmProp.dbValue = _.cloneDeep( vmProp.value );\n        if( !_.isUndefined( vmProp.dbOriginalValue ) ) {\n            vmProp.dbOriginalValue = _.cloneDeep( vmProp.value );\n        }\n    }\n\n    if( vmProp.prevDisplayValues ) {\n        vmProp.displayValues = _.clone( vmProp.prevDisplayValues );\n    }\n\n    vmProp.uiValue = exports.getUiValue( vmProp.displayValues );\n\n    if( vmProp.isArray ) {\n        vmProp.displayValsModel = [];\n\n        for( var i = 0; i < vmProp.displayValues.length; i++ ) {\n            vmProp.displayValsModel.push( {\n                displayValue: vmProp.displayValues[ i ],\n                selected: false,\n                isInEditMode: false\n            } );\n        }\n    }\n};\n\n/**\n * Set edit state of ViewModelProperty. If the property is editable and editable in view model then the\n * 'isEditable' flag is set to true which shows the properties as editable.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set edit state of ViewModelProperty.\n *\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n */\nexport let setEditState = function( vmProp, editable, override ) {\n    if( vmProp.editableInViewModel !== editable || override ) {\n        vmProp.editableInViewModel = editable;\n        vmProp.error = null;\n        vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n        exports.setEditLayoutSide( vmProp );\n\n        if( vmProp.propApi ) {\n            if( vmProp.propApi.setLOVValueProvider ) {\n                vmProp.propApi.setLOVValueProvider();\n            }\n\n            if( vmProp.propApi.setAutoAssignHandler ) {\n                vmProp.propApi.setAutoAssignHandler();\n            }\n\n            if( vmProp.propApi.setObjectLinkPropertyHandler ) {\n                vmProp.propApi.setObjectLinkPropertyHandler();\n            }\n\n            if( vmProp.propApi && vmProp.propApi.notifyPropChange ) {\n                vmProp.propApi.notifyPropChange( PROP_EDITABLE );\n            }\n        }\n\n        if( vmProp.isEditable &&\n            ( !vmProp.prevDisplayValues || vmProp.prevDisplayValues !== vmProp.displayValues ) ) {\n            vmProp.prevDisplayValues = _.clone( vmProp.displayValues );\n        }\n    }\n};\n\n/**\n * Set 'editable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} editable - set editable state of ViewModelProperty.\n */\nexport let setEditable = function( vmProp, editable ) {\n    vmProp.editable = editable;\n};\n\n/**\n * Set 'isEditable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isEditable - TRUE if the user should have the ability to change the property's value. FALSE\n *            if the value is read-only.\n */\nexport let setIsEditable = function( vmProp, isEditable ) {\n    if( vmProp.isEditable !== isEditable ) {\n        vmProp.isEditable = isEditable;\n\n        exports.setEditLayoutSide( vmProp );\n    }\n};\n\n/**\n * Set 'isPropertyModifiable' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isPropertyModifiable - TRUE if the user should have the ability to change the property's\n *            value. FALSE if the value is read-only.\n */\nexport let setIsPropertyModifiable = function( vmProp, isPropertyModifiable ) {\n    if( vmProp.isPropertyModifiable !== isPropertyModifiable ) {\n        vmProp.isPropertyModifiable = isPropertyModifiable;\n\n        // set is editable flag whenever property modifiable state is changed\n        vmProp.isEditable = vmProp.editable && vmProp.editableInViewModel && vmProp.isPropertyModifiable;\n\n        exports.setEditLayoutSide( vmProp );\n    }\n};\n\n/**\n * Set edit layout side state of ViewModelProperty. For 'Boolean' and 'Object' based properties which doesn't\n * have LOV's this flag is set to true.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let setEditLayoutSide = function( vmProp ) {\n    if( vmProp.type === 'BOOLEAN' || vmProp.type === 'OBJECT' ) {\n        vmProp.editLayoutSide = !vmProp.hasLov;\n    }\n};\n\n/**\n * Set 'hasLov' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} hasLov - TRUE if the property has a specific list of values associated with it.\n */\nexport let setHasLov = function( vmProp, hasLov ) {\n    if( vmProp.hasLov !== hasLov ) {\n        vmProp.hasLov = hasLov;\n\n        exports.setEditLayoutSide( vmProp );\n    }\n};\n\n/**\n * Set 'isSelectOnly' state of ViewModelProperty.\n * This property allows the selected lov entry to be select only, i.e, user cannot type in the widget after selecting the lov entry.\n * This change is to support isSelectOnly in aw-widget used as a list box.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} isSelectOnly - TRUE/FALSE. Default is false, allows user to edit value in input box.\n */\nexport let setIsSelectOnly = function( vmProp, isSelectOnly ) {\n    if( vmProp.isSelectOnly !== isSelectOnly ) {\n        vmProp.isSelectOnly = isSelectOnly;\n    }\n};\n\n/**\n * Set 'renderingHint' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} renderingHint - Depending on the type, this string indicates some variation in how the\n *            property's value should be displayed (e.g. For 'BOOLEAN' type, valid values include 'radiobutton',\n *            'togglebutton', 'checkbox'. For 'STRING' type, valid values include 'label', 'textbox',\n *            'textfield', 'textarea', 'longtext').\n */\nexport let setRenderingHint = function( vmProp, renderingHint ) {\n    vmProp.renderingHint = renderingHint;\n};\n\n/**\n * Set 'overlayType' of ViewModelProperty. 'viewModelPropertyOverlay' - which defines that the overlay has real\n * data(i.e IViewModelProperty). 'widgetOverlay' - which defines that the overlay has widget data.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {String} overlayType - set overlay type of ViewModelProperty.\n */\nexport let setOverlayType = function( vmProp, overlayType ) {\n    vmProp.overlayType = overlayType;\n};\n\n/**\n * Set 'autofocus' state of ViewModelProperty. Which defines whether the widget needs to be autofocused or NOT\n * bound to this property.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} autofocus - set autofocus state of ViewModelProperty.\n */\nexport let setAutoFocus = function( vmProp, autofocus ) {\n    vmProp.autofocus = autofocus;\n};\n\n/**\n * Set 'dirty' state of ViewModelProperty. Which defines whether the widget needs to be dirty or NOT.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} dirty - set dirty state of ViewModelProperty.\n */\nexport let setDirty = function( vmProp, dirty ) {\n    vmProp.dirty = dirty;\n};\n\n/**\n * Set array max row count of ViewModelProperty. Number of visible rows for array widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Number} maxRowCount - set array max row count of ViewModelProperty.\n */\nexport let setMaxRowCount = function( vmProp, maxRowCount ) {\n    if( maxRowCount !== -1 && maxRowCount !== 0 && vmProp.maxRowCount !== maxRowCount ) {\n        vmProp.maxRowCount = maxRowCount;\n    }\n};\n\n/**\n * Set minimum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the earliest date/time this widget should allow.\n */\nexport let setMinimumDate = function( vmProp, dateToSet ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.minDate = dateToSet;\n    }\n};\n\n/**\n * Set maximum date of ViewModelProperty. Only applicable for date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Date} dateToSet - Date object that represents the latest date/time this widget should allow.\n */\nexport let setMaximumDate = function( vmProp, dateToSet ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.maxDate = dateToSet;\n    }\n};\n\n/**\n * Set date Enabled state of ViewModelProperty. Which defines whether the date should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if date is enabled\n */\nexport let setDateEnabled = function( vmProp, enabled ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.isDateEnabled = enabled;\n    }\n};\n\n/**\n * Set time Enabled state of ViewModelProperty. Which defines whether the time should be shown in date widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {Boolean} enabled TRUE if time is enabled.\n */\nexport let setTimeEnabled = function( vmProp, enabled ) {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi.isTimeEnabled = enabled;\n    }\n};\n\nexport const setDateApi = ( vmProp, dateApi ) => {\n    if( vmProp && vmProp.dateApi ) {\n        vmProp.dateApi = dateApi;\n    }\n};\n\n/**\n * Set vertical state of ViewModelProperty. Which defines whether the radio button should show vertical or not.\n * Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {Boolean} vertical TRUE if radio button need to be shown vertically.\n */\nexport let setRadioButtonVertical = function( vmProp, vertical ) {\n    if( vmProp && vmProp.radioBtnApi ) {\n        vmProp.radioBtnApi.vertical = vertical;\n    }\n};\n\n/**\n * Set radio button's custom true label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customTrueLabel custom true label for radio button.\n */\nexport let setRadioButtonCustomTrueLabel = function( vmProp, customTrueLabel ) {\n    if( vmProp && vmProp.radioBtnApi ) {\n        vmProp.radioBtnApi.customTrueLabel = customTrueLabel;\n    }\n};\n\n/**\n * Set radio button's custom false label of ViewModelProperty. Only applicable for radio button widget.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n *\n * @param {String} customFalseLabel custom false label for radio button.\n */\nexport let setRadioButtonCustomFalseLabel = function( vmProp, customFalseLabel ) {\n    if( vmProp && vmProp.radioBtnApi ) {\n        vmProp.radioBtnApi.customFalseLabel = customFalseLabel;\n    }\n};\n\n/**\n * Has this property been modified in the view model\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the property is modified in the view model.\n */\nexport let isModified = function( vmProp ) {\n    return vmProp.valueUpdated || vmProp.displayValueUpdated;\n};\n\n/**\n * return the display value with local configured for boolean dbValue\n *\n * @param {Boolean } value - The boolean dbValue need turn to display value.\n * @param {StringMap} localTextBundle - Text bundles to use.\n * @return {String } the display value after local.\n */\nexport const getLocalBooleanDisplayValue = function( value, localTextBundle = _localTextBundle ) {\n    if( !localTextBundle || !localTextBundle.RADIO_TRUE ) {\n        return value.toString();\n    }\n    return value ? localTextBundle.RADIO_TRUE : localTextBundle.RADIO_FALSE;\n};\n\n/**\n * Get the Display Value for Property from array type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\nfunction _getDisplayValuesFromArrayType( vmProp ) {\n    var indx;\n    var displayValues = [];\n\n    if( vmProp.type === 'DATEARRAY' && !vmProp.hasLov ) {\n        for( indx = 0; indx < vmProp.newValue.length; indx++ ) {\n            if( !vmProp.dateApi || vmProp.dateApi.isTimeEnabled !== false && vmProp.dateApi.isDateEnabled ) {\n                displayValues.push( dateTimeSvc.formatSessionDateTime( vmProp.newValue[ indx ] ) );\n            } else {\n                displayValues.push( dateTimeSvc.formatSessionDate( vmProp.newValue[ indx ] ) );\n            }\n        }\n    } else if( vmProp.type === 'OBJECTARRAY' ) {\n        for( indx = 0; indx < vmProp.newValue.length; indx++ ) {\n            displayValues.push( exports.getDisplayName( vmProp.newValue[ indx ] ) );\n        }\n    } else {\n        /**\n         * For LOVs use property display values which are already set by LOV widget.\n         */\n        if( vmProp.hasLov ) {\n            for( indx = 0; indx < vmProp.displayValues.length; indx++ ) {\n                vmProp.displayValues[ indx ] && displayValues.push( vmProp.displayValues[ indx ].toString() );\n            }\n        } else {\n            for( indx = 0; indx < vmProp.newValue.length; indx++ ) {\n                if( _.isBoolean( vmProp.newValue[ indx ] ) || vmProp.newValue[ indx ] === 'true' || vmProp.newValue[ indx ] === 'false' ) {\n                    //changing vmProp.newValue string value into boolean\n                    const newValue = typeof vmProp.newValue[ indx ] === 'string' ? vmProp.newValue[ indx ] === 'true' ? true : false : vmProp.newValue[ indx ]; // eslint-disable-line\n                    displayValues.push( getLocalBooleanDisplayValue( newValue ) );\n                } else {\n                    vmProp.newValue[ indx ] && displayValues.push( vmProp.newValue[ indx ].toString() );\n                }\n            }\n        }\n    }\n    return displayValues;\n}\n\n/**\n * Get the Display Value from DATE, OBJECT,... type\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object.\n * @return {Array} Array of display values\n */\nfunction _getDisplayValuesFromOtherTypes( vmProp ) {\n    var displayValues = [];\n    if( vmProp.type === 'DATE' ) {\n        if( !vmProp.dateApi.isTimeEnabled && vmProp.dateApi.isDateEnabled ) {\n            displayValues.push( dateTimeSvc.formatSessionDate( vmProp.newValue ) );\n        } else if( vmProp.dateApi.isTimeEnabled && !vmProp.dateApi.isDateEnabled ) {\n            displayValues.push( dateTimeSvc.formatSessionTime( vmProp.newValue ) );\n        } else {\n            displayValues.push( dateTimeSvc.formatSessionDateTime( vmProp.newValue ) );\n        }\n    } else if( vmProp.type === 'OBJECT' ) {\n        /**\n         * This is for the case where view model property is created in GWT. Once we have all all GWT\n         * code converted to native, this condition will go away\n         */\n        if( vmProp.propApi ) {\n            displayValues.push( exports.getDisplayName( vmProp.newValue ) );\n        } else { // If view model property is created in native code. e.g. declarative\n            if( !declUtils.isNil( vmProp.uiValue ) ) {\n                displayValues.push( vmProp.uiValue );\n            }\n        }\n    } else if( vmProp.type === 'BOOLEAN' ) {\n        displayValues.push( getLocalBooleanDisplayValue( vmProp.newValue ) );\n    } else if( vmProp.hasLov ) {\n        /**\n         * For LOVs use property uiValue which is already set by LOV widget.\n         */\n        if( !declUtils.isNil( vmProp.uiValue ) ) {\n            displayValues.push( vmProp.uiValue.toString() );\n        }\n    } else {\n        /**\n         * when the type is integer or string, if value is 0 or empty string, framework is not allowing\n         * the display value to be updated with those values previously.\n         */\n        if( !declUtils.isNil( vmProp.newValue ) && typeof vmProp.newValue !== 'object' ) {\n            displayValues.push( vmProp.newValue.toString() );\n        }\n    }\n    return displayValues;\n}\n\n/**\n * Get the Display Value for Property. View uses Display Value for rendering if the property is not in edit\n * state. <br>\n * View uses Display Value for rendering if the property is not in edit state. If it is edit state, it has to\n * use the value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\nexport let getDisplayValues = function( vmProp ) {\n    /**\n     * Return new display values when ViewModelProperty display values are updated.\n     */\n    if( vmProp.displayValueUpdated ) {\n        return vmProp.newDisplayValues;\n    }\n\n    /**\n     * Return the display value as per the real value when they are out of sync. If valueUpdated is true but\n     * displayValueUpdated is false, then it means they are out of sync.\n     */\n    if( vmProp.valueUpdated && vmProp.newValue !== null && vmProp.newValue !== undefined ) {\n        var displayValues = [];\n\n        if( vmProp.isArray ) {\n            displayValues = _getDisplayValuesFromArrayType( vmProp );\n        } else {\n            displayValues = _getDisplayValuesFromOtherTypes( vmProp );\n        }\n\n        return displayValues;\n    }\n\n    return vmProp.prevDisplayValues;\n};\n\n/**\n * Returns the object type name for which this property is defined.\n * @param {ViewModelProperty} vmProp - ViewModelProperty object\n * @return {String } object type name for which this property is defined.\n */\nexport let getOwningTypeName = function( vmProp ) {\n    if( vmProp.propertyDescriptor && vmProp.propertyDescriptor.srcObjectTypeName ) {\n        // use the source object type name for dcp properties\n        return vmProp.propertyDescriptor.srcObjectTypeName;\n    } else if( vmProp.parentUid && clientDataModel.getObject( vmProp.parentUid ) ) {\n        return clientDataModel.getObject( vmProp.parentUid ).type;\n    }\n    // return null if no information of the owning object is found\n    return null;\n};\n\n/**\n * Get the display name of the selected type reference object\n *\n * @param {String} uid - The UID of the selected object\n * @return {String} Display name of the object\n */\nexport let getDisplayName = function( uid ) {\n    var displayName = null;\n    var modelObject = clientDataModel.getObject( uid );\n    if( modelObject && modelObject.props.object_string ) {\n        displayName = modelObject.props.object_string.uiValues[ 0 ];\n    }\n\n    return displayName;\n};\n\n/**\n * Get string of the Property value.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {StringArray} Array of display values\n */\nexport let getValueStrings = function( vmProp ) {\n    var values = [];\n\n    if( vmProp.isArray ) {\n        if( vmProp.type === 'DATEARRAY' ) {\n            for( var indx = 0; indx < vmProp.dbValue.length; indx++ ) {\n                values.push( dateTimeSvc.formatUTC( vmProp.dbValue[ indx ] ) );\n            }\n        } else {\n            for( var indx2 = 0; indx2 < vmProp.dbValue.length; indx2++ ) {\n                values.push( String( vmProp.dbValue[ indx2 ] !== null ? vmProp.dbValue[ indx2 ] : '' ) );\n            }\n        }\n    } else {\n        if( vmProp.type === 'DATE' ) {\n            values.push( dateTimeSvc.formatUTC( vmProp.dbValue ) );\n        } else {\n            values.push( String( vmProp.dbValue !== null ? vmProp.dbValue : '' ) );\n        }\n    }\n\n    return values;\n};\n\n/**\n * Returns TRUE if the internal value of the property is a number.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a number.\n */\nexport let isDbValueNumber = function( vmProp ) {\n    if( vmProp.valueUpdated ) {\n        return isNumeric( vmProp.newValue );\n    }\n    return isNumeric( vmProp.value );\n};\n\nfunction isNumeric( n ) {\n    return !isNaN( parseFloat( n ) ) && isFinite( n );\n}\n\n/**\n * Returns TRUE if the internal value of the property is a boolean.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the dbValue of the property overlay is a boolean.\n */\nexport let isDbValueBoolean = function( vmProp ) {\n    if( vmProp.valueUpdated ) {\n        return _.isBoolean( vmProp.newValue );\n    }\n\n    return _.isBoolean( vmProp.value );\n};\n\n/**\n * Returns TRUE if the overlayType is widgetOverlay.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Boolean} TRUE if the overlay type is widgetOverlay.\n */\nexport let isOverlayTypeWidget = function( vmProp ) {\n    return vmProp.overlayType && vmProp.overlayType === WIDGET;\n};\n\n/**\n * Set 'initialize' state of ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n */\nexport let initialize = function( vmProp ) {\n    vmProp.initialize = true;\n};\n\n/**\n * Updates property display values\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @param {StringArray} displayValues - display value of the property. Array of strings representing the current\n *            user displayable value(s) of the property.\n */\nexport let updateDisplayValues = function( vmProp, displayValues ) {\n    var displayValuesFinal = displayValues ? displayValues : [];\n\n    if( displayValuesFinal && displayValuesFinal.length === 0 ) {\n        vmProp.isNull = true;\n    } else {\n        vmProp.isNull = false;\n    }\n    vmProp.displayValues = displayValuesFinal;\n    vmProp.newDisplayValues = displayValuesFinal;\n    vmProp.uiValue = exports.getUiValue( vmProp.displayValues );\n\n    if( vmProp.isArray ) {\n        vmProp.uiValues = vmProp.displayValues;\n        var oldDisplayValsModel = vmProp.displayValsModel;\n        vmProp.displayValsModel = [];\n        for( var i = 0; i < vmProp.displayValues.length; i++ ) {\n            if( oldDisplayValsModel.length > 0 && oldDisplayValsModel[ i ] && oldDisplayValsModel[ i ].displayValue === vmProp.displayValues[ i ] ) {\n                vmProp.displayValsModel.push( {\n                    displayValue: vmProp.displayValues[ i ],\n                    selected: oldDisplayValsModel[ i ].selected,\n                    isInEditMode: oldDisplayValsModel[ i ].isInEditMode\n                } );\n            } else {\n                vmProp.displayValsModel.push( {\n                    displayValue: vmProp.displayValues[ i ],\n                    selected: false,\n                    isInEditMode: false\n                } );\n            }\n        }\n    }\n};\n\n/**\n * Returns the base property name of the dynamic compound property.\n *\n * @param {String} propertyName - property name to be evaluated.\n * @return {String} Base property name.\n */\nexport let getBasePropertyName = function( propertyName ) {\n    var baseProperty = propertyName;\n    var lastPeriod = baseProperty.lastIndexOf( '.' );\n    baseProperty = baseProperty.substr( lastPeriod + 1 );\n\n    return baseProperty;\n};\n\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Boolean} True if the given vmProp is valid.\n */\nfunction _isValidVmProp( vmProp ) {\n    var isValid = false;\n    var vmPropType = vmProp.type;\n\n    if( vmPropType === 'INTEGER' ) {\n        if( isFinite( vmProp.dbValue ) ) {\n            if( vmProp.dbValue !== null && vmProp.dbValue !== '' ) {\n                vmProp.dbValue = Number( vmProp.dbValue );\n                if( vmProp.dbValue >= _integerMinValue && vmProp.dbValue <= _integerMaxValue ) {\n                    isValid = true;\n                }\n            } else {\n                isValid = true;\n            }\n        }\n    } else if( vmPropType === 'DOUBLE' || vmPropType === 'DATE' ) {\n        if( isFinite( vmProp.dbValue ) ) {\n            if( vmProp.dbValue !== null && vmProp.dbValue !== '' ) {\n                vmProp.dbValue = Number( vmProp.dbValue );\n            }\n            isValid = true;\n        }\n    } else {\n        isValid = true;\n    }\n\n    return isValid;\n}\n\n/**\n * Returns true for a valid vmProp.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available.\n */\nfunction _updateVMPValue( vmProp ) {\n    var uidsArray = vmProp.dbValue;\n    if( !vmProp.isArray ) {\n        uidsArray = [];\n        if( vmProp.dbValue !== null && vmProp.dbValue !== undefined && vmProp.dbValue !== '' ) {\n            uidsArray.push( vmProp.dbValue );\n        } else if( vmProp.uiValue ) {\n            uidsArray.push( vmProp.uiValue );\n        }\n    }\n\n    if( !_pingDeferred ) {\n        _pingDeferred = AwPromiseService.instance.defer();\n    }\n    _pingLoadObjects( uidsArray, vmProp );\n    return _pingDeferred.promise;\n}\n\n/**\n * updates isNull and valueUpdated props on ViewModelProperty.\n *\n * @param {ViewModelProperty} vmProp - property name to be evaluated.\n */\nfunction _updateIsNullAndValueUpdatedFlags( vmProp ) {\n    /**\n     * Change isNull flag to false, if dbValue & uiValue exists and even though its NOT valid.\n     */\n    if( vmProp.isNull && vmProp.dbValue && vmProp.uiValue ) {\n        vmProp.isNull = false;\n    }\n\n    /**\n     * Change valueUpdated flag to true, if dbValue & uiValue exists and even though its NOT valid.\n     */\n    if( vmProp.dbValue && vmProp.uiValue ) {\n        vmProp.valueUpdated = true;\n    }\n}\n\n/**\n * Updates ViewModelProperty with updated values. Added a return of promise in case of async call to load\n * objects which is required for OBJECT or OBJECTARRAY property types. The promise is resolved or rejected based\n * on execution of the load objects api.\n *\n * @param {ViewModelProperty} vmProp - ViewModelProperty object that will be updated.\n * @return {Promise} A non-null promise is returned when the input vmProp.type is an OBJECT or OBJECTARRAY. This\n *         promise will be 'resolved' or 'rejected' when the loadObject operation of data management service is\n *         invoked and its response data is available. In case the input vmProp.type is not OBJECT or\n *         OBJECTARRAY, then promise returned is null. Caller should explicitly do a null check on the promise\n *         before invoking any functions on it.\n */\nexport let updateViewModelProperty = function( vmProp ) {\n    var isValid = false;\n\n    var vmPropType = vmProp.type;\n\n    isValid = _isValidVmProp( vmProp );\n\n    if( isValid ) {\n        if( vmPropType !== 'OBJECT' && vmPropType !== 'OBJECTARRAY' ) {\n            exports.setValue( vmProp, vmProp.dbValue );\n\n            if( vmProp.propApi && vmProp.propApi.fireValueChangeEvent ) {\n                vmProp.propApi.fireValueChangeEvent();\n            }\n        } else {\n            exports.setValue( vmProp, vmProp.dbValue );\n            return _updateVMPValue( vmProp );\n        }\n    } else {\n        _updateIsNullAndValueUpdatedFlags( vmProp );\n    }\n\n    return null;\n};\n\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\nexport let isViewModelProperty = function( objectToTest ) {\n    return objectToTest instanceof ViewModelProperty || objectToTest.hasOwnProperty( 'dbValues' );\n};\n\n/**\n * Test if the given object 'is-a' ViewModelProperty created by this service.\n *\n * @param {Object} listOfobjectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelProperty.\n */\nexport let isArrayOfViewModelProperty = function( listOfobjectToTest ) {\n    let flag = true;\n    _.forEach( listOfobjectToTest, function( obj ) {\n        if( obj && !( exports.isViewModelProperty( obj ) || obj.hasOwnProperty( 'dbValues' ) ) ) {\n            flag = false;\n            return false;\n        }\n    } );\n    return flag;\n};\n\n/**\n * Retrieve the cdm's modelObject from a property's source object uid.\n *\n * @param {ViewModelProperty} vmProp - Property to retrieve source object\n * @return {ModelObject} The ModelObject; null if not cached\n */\nexport let getSourceModelObject = function( vmProp ) {\n    var sourceObjectUid = exports.getSourceObjectUid( vmProp );\n    return clientDataModel.getObject( sourceObjectUid );\n};\n\n/**\n * This methods attaches validation criteria in view model property.\n *\n * @param {ViewModelProperty} vmProp - Property in whcih validation criteria needs to be attched\n *\n * @param {String} conditionName - The name of the condition in validation criteria\n *\n * @param {String} msgString - The message which will be shown if the validation criteria doesn't match\n *\n */\nexport let createValidationCriteria = function( vmProp, conditionName, msgString ) {\n    var validationObj = {\n        condition: 'conditions.' + conditionName,\n        value: msgString\n    };\n    if( !vmProp.validationCriteria ) {\n        vmProp.validationCriteria = [];\n    }\n    vmProp.validationCriteria.push( validationObj );\n};\n\nexport let updateValidationResult = ( lovEntry, validationResult, uiProp ) => {\n    if( validationResult.valid && uiProp.isEditable !== false ) {\n        if( !uiProp.isArray ) {\n            if( uiProp.type !== 'DATE' ) {\n                uiProp.dbValue = lovEntry.propInternalValue;\n                uiProp.uiValue = lovEntry.propDisplayValue;\n            }\n            uiProp.dbValues = [ uiProp.dbValue ];\n            uiProp.uiValues = [ uiProp.uiValue ];\n        }\n\n        // update orig vals on validation\n        uiProp.dbOriginalValue = uiProp.dbValue;\n        uiProp.uiOriginalValue = uiProp.uiValue;\n\n        // Update dependent properties\n        _.forEach( validationResult.updatedPropValueMap, function( values, propertyName ) {\n            var sourceObjectUid = getSourceObjectUid( uiProp );\n            var toBeModifiedProp = validationResult.viewModelObj\n                .retrievePropertyWithBasePropertyName( propertyName, sourceObjectUid );\n            if( toBeModifiedProp ) {\n                var eventData = { removeValues: toBeModifiedProp.dbValue };\n                setValue( toBeModifiedProp, values );\n                setWidgetDisplayValue( toBeModifiedProp,\n                    validationResult.updatedPropDisplayValueMap[ propertyName ] );\n            }\n        } );\n        setServerValidationError( uiProp, false );\n        uiProp.error = null;\n        // revisitme: zarq9k Need to import uwValidationSvc\n        //setErrorMessage( $scope, null );\n        // var eventData = {\n        //     lovValue: lovEntry\n        // };\n        eventBus.publish( uiProp.propertyName + '.lovValueChanged', {\n            lovValue: lovEntry\n        } );\n    } else {\n        if( validationResult.error ) {\n            setServerValidationError( uiProp, true );\n            uiProp.error = validationResult.error;\n            // revisitme: zarq9k Need to import uwValidationSvc\n            //setErrorMessage( $scope, validationResult.error );\n        }\n    }\n};\n\n/**\n * zarq9k: Moved the updateDbValue from aw.property.lov.controller.\n * @param {*} uiProperty\n * @param {*} lovEntry\n */\nexport let updateLov = ( uiProperty, lovEntry, createUpdateValue, operation, checkLovEntries ) => {\n    // special handling for checkbox array lov\n    let promise;\n    if( uiProperty.renderingHint === 'checkboxoptionlov' ) {\n        if( operation === 'unchecked' ) {\n            // remove the item based on the propInternalValue\n            let index = uiProperty.dbValue.findIndex( val => val === lovEntry.propInternalValue );\n            if( _.isObject( lovEntry.propInternalValue ) ) {\n                index = uiProperty.displayValues.findIndex( val => val === lovEntry.propDisplayValue );\n            }\n            uiProperty.dbValue.splice( index, 1 );\n            uiProperty.displayValues.splice( index, 1 );\n        } else {\n            uiProperty.dbValue.push( lovEntry.propInternalValue );\n            uiProperty.displayValues.push( lovEntry.propDisplayValue );\n        }\n\n        updateDisplayValues( uiProperty, [ ...uiProperty.displayValues ] );\n        // Below weird behaviour is due to function \"updateViewModelProperty\" which returns promise is few cases and null in other cases.\n        promise = updateViewModelProperty( uiProperty );\n        if( promise ) {\n            return promise.then( ( resolve ) => resolve( uiProperty ) );\n        }\n        return new Promise( ( resolve ) => resolve( uiProperty ) );\n    }\n\n    uiProperty.displayValues.push( lovEntry.propDisplayValue );\n    var changed = uiProperty.dbOriginalValue !== lovEntry.propInternalValue;\n\n    // update the dbValue based on the uiValue\n    //zarq9k: Multiple if checks for uiProperty.type === 'DATE' - Need cleanup\n    let newDbValue = '';\n    let newUiValue = '';\n    /**\n     * For integer and double we have to actually see if it is valid number and then convert it into number\n     * type accordingly or else throw an error\n     */\n    if( uiProperty.type === 'INTEGER' || uiProperty.type === 'DOUBLE' ||\n        uiProperty.type === 'INTEGERARRAY' || uiProperty.type === 'DOUBLEARRAY' ) {\n        if( uiProperty.type === 'INTEGER' || uiProperty.type === 'INTEGERARRAY' ) {\n            // zarq9k: revisit - Need to import uwValidationSvc in the new repo.\n            //newDbValue = uwValidationSvc.checkInteger( $scope, null, lovEntry.propInternalValue );\n            // Below is a temp fix until unless uwValidationSvc comes again\n            let number = parseInt( lovEntry.propInternalValue, 10 );\n            newDbValue = isNaN( number ) ? '' : number;\n            newUiValue = lovEntry.propDisplayValue;\n        } else {\n            //newDbValue = uwValidationSvc.checkDouble( $scope, null, lovEntry.propInternalValue );\n            // Below is a temp fix until unless uwValidationSvc comes again\n            let number = parseFloat( lovEntry.propInternalValue, 10 );\n            newDbValue = isNaN( number ) ? '' : number;\n            newUiValue = lovEntry.propDisplayValue;\n        }\n        // set the converted number to the dbValue\n        //lovEntry.propInternalValue = newDbValue;\n        //uiProperty.dbValue = newDbValue;\n    } else if( propTypeDate( uiProperty ) && uiProperty.dateApi.isNotLov ) {\n        // zarq9k: revisit - Need to import uwValidationSvc in the new repo.lsdlksl;\n        //dateObject = uwValidationSvc.checkDateTime( $scope, dateObject );\n        setDateTimeValues( {\n            dateVal: '',\n            timeVal: lovEntry.propDisplayValue\n        } );\n        let dateApi = uiProperty.dateApi;\n        uiProperty.dbValue = getDBValueForDate( uiProperty );\n        uiProperty.uiValue = getUIValueForDate( dateApi );\n        newUiValue = uiProperty.uiValue;\n        newDbValue = uiProperty.dbValue;\n    } else {\n        newDbValue = lovEntry.propInternalValue;\n        newUiValue = lovEntry.propDisplayValue;\n    }\n    newDbValue = uiProperty.type === 'BOOLEAN' && ( _.isNil( newDbValue ) || newDbValue.length === 0 ) ? null : newDbValue;\n    uiProperty.dbValue = !uiProperty.isArray ? newDbValue : uiProperty.dbValue;\n\n    uiProperty.filterString = lovEntry.filterString ? lovEntry.filterString : null;\n    uiProperty.valueUpdated = true;\n\n    // update optional icon\n    uiProperty.iconSource = lovEntry.iconSource;\n    uiProperty.iconName = lovEntry.iconName;\n\n    if( uiProperty.type !== 'DATE' ) {\n        lovEntry.propInternalValue = newDbValue;\n        lovEntry.propDisplayValue = newUiValue;\n    }\n\n    if( !uiProperty.isArray ) {\n        promise = updateViewModelProperty( uiProperty );\n        clearDateTimeValues( uiProperty );\n        if( promise ) {\n            return promise.then( () => {\n                //In dirty check, If newValue and value are same then we dont show dirty backgrnd\n                //uiProperty.value = newDbValue;\n                // for array & array lov\n                uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n                uiProperty.valueUpdated = true;\n                return uiProperty;\n            } );\n        }\n        return new Promise( ( resolve, reject ) => {\n            // for array & array lov\n            uiProperty.uiValue = !uiProperty.isArray ? newUiValue : '';\n            uiProperty.valueUpdated = true;\n            resolve( uiProperty );\n        } );\n    }\n    return new Promise( ( resolve ) => {\n        let event = {\n            target: {\n                value: lovEntry.propInternalValue\n            }\n        };\n        let dateEvent = [ lovEntry.propInternalValue ];\n\n        if( uiProperty.type === 'OBJECTARRAY' ) {\n            dmSvc.loadObjects( dateEvent ).then( function() {\n                uiProperty = createUpdateValue( uiProperty, event );\n                resolve( uiProperty );\n            }, function( error ) {\n                return AwPromiseService.instance.reject( error );\n            } );\n        } else {\n            uiProperty = createUpdateValue( uiProperty, event );\n            resolve( uiProperty );\n        }\n    } );\n};\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function isDCPProperty\n * @param {String} propertyName - name of the property\n * @returns {Boolean} - returns whether the property is a dynamic compound property or not.\n */\nexport let isDCPProperty = function( propertyName ) {\n    if( propertyName.indexOf( '.' ) !== -1 &&\n        propertyName.indexOf( '(' ) !== -1 &&\n        ( propertyName.indexOf( 'GRM' ) !== -1 ||\n            propertyName.indexOf( 'GRMS2P' ) !== -1 ||\n            propertyName.indexOf( 'REF' ) !== -1 ||\n            propertyName.indexOf( 'REFBY' ) !== -1 ||\n            propertyName.indexOf( 'GRMREL' ) !== -1 ||\n            propertyName.indexOf( 'GRMS2PREL' ) !== -1 )\n    ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * checks if the property name is of type DCP ( Dynamic Compound Property )\n * @function updateViewModelProp\n * @param {*} viewProp -\n * @param {*} newVal -\n * @param {*} additionalProp - \n * @param {*} nonatomicUpdate -\n */\nexport let updateViewModelProp = function( viewProp, newVal, additionalProp, nonatomicUpdate ) {\n    if( additionalProp ) {\n        if( additionalProp.hasOwnProperty( 'displayName' ) ) {\n            viewProp.propertyDisplayName = additionalProp.displayName;\n        }\n\n        if( additionalProp.hasOwnProperty( 'isEditable' ) ) {\n            let val = _.isBoolean( additionalProp.isEditable ) ? additionalProp.isEditable :\n                additionalProp.isEditable !== 'false';\n            exports.setIsEditable( viewProp, val );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isRequired' ) ) {\n            let isRequired = _.isBoolean( additionalProp.isRequired ) ? additionalProp.isRequired :\n                additionalProp.isRequired !== 'false';\n            exports.setIsRequired( viewProp, isRequired );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isEnabled' ) ) {\n            let isEnabled = _.isBoolean( additionalProp.isEnabled ) ? additionalProp.isEnabled :\n                additionalProp.isEnabled !== 'false';\n            exports.setIsEnabled( viewProp, isEnabled );\n        }\n\n        if( additionalProp.hasOwnProperty( 'labelPosition' ) ) {\n            exports.setPropertyLabelDisplay( viewProp, additionalProp.labelPosition, true );\n            if( viewProp.labelPosition === 'PROPERTY_LABEL_AT_SIDE' ) {\n                viewProp.editLayoutSide = true;\n            }\n        }\n\n        if( additionalProp.hasOwnProperty( 'propName' ) ) {\n            viewProp.propertyName = additionalProp.propName;\n        }\n\n        if( additionalProp.hasOwnProperty( 'displayValue' ) ) {\n            viewProp.uiValues = additionalProp.displayValue;\n            viewProp.uiValue = exports.getUiValue( viewProp.uiValues );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isModifiable' ) ) {\n            exports.setIsPropertyModifiable( viewProp, additionalProp.isModifiable );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isAutoAssignable' ) ) {\n            exports.setIsAutoAssignable( viewProp, additionalProp.isAutoAssignable );\n        }\n\n        if( additionalProp.hasOwnProperty( 'maxLength' ) ) {\n            exports.setLength( viewProp, additionalProp.maxLength );\n        }\n\n        if( additionalProp.hasOwnProperty( 'renderingHint' ) ) {\n            exports.setRenderingHint( viewProp, additionalProp.renderingHint );\n        }\n\n        if( additionalProp.hasOwnProperty( 'requiredText' ) ) {\n            exports.setPlaceHolderText( viewProp, additionalProp.requiredText );\n        }\n\n        if( additionalProp.hasOwnProperty( 'vertical' ) ) {\n            viewProp.vertical = additionalProp.vertical;\n        }\n\n        if( additionalProp.hasOwnProperty( 'numberOfLines' ) ) {\n            exports.setNumberOfLines( viewProp, additionalProp.numberOfLines );\n        }\n\n        if( additionalProp.hasOwnProperty( 'isArray' ) ) {\n            let isArray = _.isBoolean( additionalProp.isArray ) ? additionalProp.isArray :\n                additionalProp.isArray === 'true';\n            exports.setIsArray( viewProp, isArray );\n        }\n\n        additionalProp.iconName && ( viewProp.iconName = additionalProp.iconName );\n    }\n\n    if( nonatomicUpdate ) {\n        exports.setValue( viewProp, newVal );\n    }\n};\n\n/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */\nconst exports = {\n    getUiValue,\n    createViewModelProperty,\n    updateModelData,\n    copyModelData,\n    setSourceObjectUid,\n    getSourceObjectUid,\n    getRelationObjectUid,\n    getPropertyNameInSourceObject,\n    /** revisitme yogesh\n              * Hint: we may not be required this\n             triggerDigestCycle,\n              */\n    initializeDateApiValues,\n    setValue,\n    setOldValues,\n    setDisplayValue,\n    setWidgetDisplayValue,\n    setIsEnabled,\n    setIsRichText,\n    setIsNull,\n    setIsRequired,\n    setPlaceHolderText,\n    setIsLocalizable,\n    setIsDisplayable,\n    setIsAutoAssign,\n    setIsAutoAssignable,\n    setHasInitialValue,\n    setLength,\n    setNumberOfCharacters,\n    setNumberOfLines,\n    setIsArray,\n    setArrayLength,\n    setReferenceType,\n    setDataType,\n    setError,\n    setClientValidationError,\n    setServerValidationError,\n    setPropertyDisplayName,\n    setPropertyLabelDisplay,\n    resetUpdates,\n    replaceValuesWithNewValues,\n    resetProperty,\n    resetValues,\n    setEditState,\n    setEditable,\n    setIsEditable,\n    setIsPropertyModifiable,\n    setEditLayoutSide,\n    setHasLov,\n    setIsSelectOnly,\n    setRenderingHint,\n    setOverlayType,\n    setAutoFocus,\n    setDirty,\n    setMaxRowCount,\n    setMinimumDate,\n    setMaximumDate,\n    setDateEnabled,\n    setTimeEnabled,\n    setDateApi,\n    setRadioButtonVertical,\n    setRadioButtonCustomTrueLabel,\n    setRadioButtonCustomFalseLabel,\n    isModified,\n    getDisplayValues,\n    getOwningTypeName,\n    getDisplayName,\n    getValueStrings,\n    isDbValueNumber,\n    isDbValueBoolean,\n    isOverlayTypeWidget,\n    initialize,\n    updateDisplayValues,\n    getBasePropertyName,\n    updateViewModelProperty,\n    isViewModelProperty,\n    isArrayOfViewModelProperty,\n    getSourceModelObject,\n    createValidationCriteria,\n    updateValidationResult,\n    updateLov,\n    isDCPProperty,\n    updateViewModelProp\n};\n\nexport default exports;\n"],"mappings":"AAAA;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,sBAAP,MAAmC,+BAAnC;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,iBAAtC,EAAyDC,iBAAzD,EAA4EC,iBAA5E,EAA+FC,mBAA/F,QAA0H,8BAA1H;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG,UAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,OAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,OAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,aAAa,GAAG,UAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB,GAAG,0BAA1B;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAG,eAAb;AAEA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG,CAAC,UAAxB;AAEA;AACA;AACA;;;AACA,IAAIC,gBAAgB,GAAG,UAAvB;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,IAArB;AAEA;AACA;AACA;;AACA,IAAIC,gBAAJ;AAEA;AACA;AACA;;;AACA,IAAIC,aAAa,GAAG,IAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAG,UAAUC,WAAV,EAAwB;EAC/C,OAAOA,WAAW,IAAIA,WAAW,KAAK,GAA/B,KACDC,MAAM,CAAED,WAAF,CAAN,CAAsBE,WAAtB,OAAwC,MAAxC,IAAkDF,WAAW,KAAK,GADjE,CAAP;AAEH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,aAAT,CAAwBC,MAAxB,EAAgCC,eAAhC,EAAkD;EAC9C,IAAI,CAACD,MAAM,CAACE,UAAR,KAAwB5B,CAAC,CAAC6B,WAAF,CAAeH,MAAM,CAACI,oBAAtB,KAAgDJ,MAAM,CAACI,oBAAP,CAA4BC,MAA5B,KAAuC,CAA/G,CAAJ,EAAyH;IACrHL,MAAM,CAACI,oBAAP,GAA8BH,eAAe,CAACK,sBAA9C;EACH,CAH6C,CAK9C;;;EACAN,MAAM,CAACO,iBAAP,GAA2BN,eAAe,CAACO,oBAA3C;EACAR,MAAM,CAACS,mBAAP,GAA6BR,eAAe,CAACS,sBAA7C;EACAV,MAAM,CAACW,iBAAP,GAA2BV,eAAe,CAACW,mBAA3C;AACH,C,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAwBb,MAAxB,EAAgCC,eAAhC,EAAkD;EAC9C,IAAI,CAACD,MAAM,CAACc,qBAAZ,EAAoC;IAChCd,MAAM,CAACc,qBAAP,GAA+Bb,eAAe,CAACc,UAA/C;EACH;;EAED,IAAI,CAACf,MAAM,CAACgB,sBAAZ,EAAqC;IACjChB,MAAM,CAACgB,sBAAP,GAAgCf,eAAe,CAACgB,WAAhD;EACH;EAED;AACJ;AACA;;;EACI,IAAIjB,MAAM,CAACkB,WAAX,EAAyB;IACrB,IAAIlB,MAAM,CAACkB,WAAP,CAAmBC,eAAvB,EAAyC;MACrCnB,MAAM,CAACc,qBAAP,GAA+Bd,MAAM,CAACkB,WAAP,CAAmBC,eAAlD;IACH;;IAED,IAAInB,MAAM,CAACkB,WAAP,CAAmBE,gBAAvB,EAA0C;MACtCpB,MAAM,CAACgB,sBAAP,GAAgChB,MAAM,CAACkB,WAAP,CAAmBE,gBAAnD;IACH;;IAED,IAAIpB,MAAM,CAACkB,WAAP,CAAmBG,QAAvB,EAAkC;MAC9BrB,MAAM,CAACqB,QAAP,GAAkBrB,MAAM,CAACkB,WAAP,CAAmBG,QAArC;IACH;EACJ;AACJ;AAED;AACA;AACA;;;AACA,IAAIC,gBAAgB,GAAGhD,CAAC,CAACiD,QAAF,CAAY,UAAUC,SAAV,EAAqBxB,MAArB,EAA8B;EAC7D3B,KAAK,CAACoD,WAAN,CAAmBD,SAAnB,EAA+BE,IAA/B,CAAqC,YAAW;IAC5CC,OAAO,CAACC,QAAR,CAAkB5B,MAAlB,EAA0BA,MAAM,CAAC6B,OAAjC;;IAEA,IAAI7B,MAAM,CAAC8B,OAAP,IAAkB9B,MAAM,CAAC8B,OAAP,CAAeC,oBAArC,EAA4D;MACxD/B,MAAM,CAAC8B,OAAP,CAAeC,oBAAf;IACH;;IAED,IAAIrC,aAAJ,EAAoB;MAChBA,aAAa,CAACsC,OAAd;;MACAtC,aAAa,GAAG,IAAhB;IACH;EACJ,CAXD,EAWG,UAAUuC,KAAV,EAAkB;IACjB,IAAIjC,MAAM,CAAC8B,OAAP,IAAkB9B,MAAM,CAAC8B,OAAP,CAAeI,0BAArC,EAAkE;MAC9DlC,MAAM,CAACmC,OAAP,GAAiB,EAAjB;MACAnC,MAAM,CAACiC,KAAP,GAAeA,KAAK,CAACG,OAArB;MACApC,MAAM,CAACqC,qBAAP,GAA+BJ,KAAK,CAACG,OAArC;MACApC,MAAM,CAACsC,wBAAP,GAAkC,IAAlC;MACAtC,MAAM,CAAC8B,OAAP,CAAeI,0BAAf,CAA2CD,KAAK,CAACG,OAAjD;IACH;;IAED,IAAI1C,aAAJ,EAAoB;MAChBA,aAAa,CAAC6C,MAAd,CAAsBN,KAAtB;;MACAvC,aAAa,GAAG,IAAhB;IACH;EACJ,CAxBD;AAyBH,CA1BsB,EA0BpB,GA1BoB,CAAviBAAiB,GAAG,UAAUC,YAAV,EAAwBC,mBAAxB,EAA6CC,QAA7C,EAAuDd,OAAvD,EAAgEe,eAAhE,EAAkF;EAAE;EACxG,IAAI5C,MAAM,GAAG,IAAb;EAEA,IAAI6C,kBAAkB,GAAGD,eAAe,IAAI,EAA5C;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACI5C,MAAM,CAACyC,YAAP,GAAsBA,YAAtB;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIzC,MAAM,CAAC0C,mBAAP,GAA6BA,mBAA7B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACI1C,MAAM,CAAC8C,IAAP,GAAcH,QAAd;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI3C,MAAM,CAAC6B,OAAP,GAAiBA,OAAjB;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACI7B,MAAM,CAAC+C,aAAP,GAAuBF,kBAAvB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI7C,MAAM,CAACgD,MAAP,GAAgB,KAAhB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIhD,MAAM,CAACiD,QAAP,GAAkB,IAAlB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIjD,MAAM,CAACkD,SAAP,GAAmB,IAAnB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACIlD,MAAM,CAACmD,UAAP,GAAoB,KAApB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACInD,MAAM,CAACE,UAAP,GAAoB,KAApB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACIF,MAAM,CAACoD,aAAP,GAAuB,KAAvB;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIpD,MAAM,CAACqD,aAAP,GAAuB,IAAvB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIrD,MAAM,CAACsD,gBAAP,GAA0B,KAA1B;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACItD,MAAM,CAACuD,eAAP,GAAyB,KAAzB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACIvD,MAAM,CAACwD,OAAP,GAAiB,KAAjB;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIxD,MAAM,CAACyD,YAAP,GAAsB,KAAtB;EAEA;AACJ;AACA;AACA;AACA;AACA;;EACIzD,MAAM,CAAC0D,mBAAP,GAA6B,KAA7B;EAEA;AACJ;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module"}
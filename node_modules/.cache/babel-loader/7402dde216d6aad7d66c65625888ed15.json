{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/navigationTokenService\n */\nimport cfgSvc from 'js/configurationService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport adapterParserService from 'js/adapterParserService';\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport navigationService from 'js/navigationService';\nimport viewModelProcessingFactory from 'js/viewModelProcessingFactory';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\n\nvar _navigationToken;\n\nvar exports = {}; // A property is which type of BO will be driven by solution config , based on the same naivigationToken will be associated in the href attribute of\n// anchor tag for the particular property\n// Example :\n\n/* [{\"conditions\": {\"$and\": [{ \"modelType.typeHierarchyArray\": { \"$in\": \"ImanFile\" }}]},\n     \"navigations\": {\"navigateTo\": \"downloadFile\",\"navigationParams\": {\"uid\": \"{{navContext.vmo.uid}}\"}  }\n    },\n    {\"conditions\": {\"modelType.typeHierarchyArray\": {\"$notin\": \"ImanFile\"}},\n     \"navigations\": {\"navigateTo\": \"com_siemens_splm_clientfx_tcui_xrt_showObject\",\"navigationParams\": {\"uid\": \"{{navContext.vmo.uid}}\" }  }\n    }\n    ]\n*/\n\nexport const getNavigationContent = function (scope, dbValue, vmo) {\n  //The scope input is not needed anymore, verify the other usecases which leverages this api\n  //and this can be cleaned up\n  var conditionVerdict = {};\n\n  if (vmo && vmo.navigation) {\n    return navigationService.navigate(vmo.navigation[0].navigateTo, vmo.navigation[0].navigationParams).then(function (urlDetails) {\n      return urlDetails;\n    });\n  }\n\n  return cfgSvc.getCfg('navigationURLToken').then(function (token) {\n    _navigationToken = token;\n\n    if (_navigationToken && _navigationToken.length > 0) {\n      // the below cdm check has been added to avoid any console errors when an OBJECT prop is not a VMO which ultimately shows up console errors\n      // emanating out of a logger.error statement in constructViewModelObjectFromModelObject ()\n      // it will be removed once cdm dependency is taken out from SWF\n      if (cdm.getObject(dbValue) !== null) {\n        var propVmo = viewModelObjectService.constructViewModelObjectFromModelObject(cdm.getObject(dbValue), null, null, null, true);\n        scope.navContext = {\n          vmo: propVmo\n        };\n        conditionVerdict = adapterParserService.applyConditions(propVmo, _navigationToken);\n\n        if (conditionVerdict && conditionVerdict.verdict) {\n          var inputData = _.cloneDeep(_navigationToken[conditionVerdict.index].navigations.navigationParams);\n\n          try {\n            //Revisit: Need to evluate if there is a better way of handling this\n            //For now, creating a temporary declviewmodel as the 'applyscope' method expects\n            //a declviewmodel\n            if (inputData && !_.isEmpty(inputData)) {\n              var declViewModel = viewModelProcessingFactory.createDeclViewModel({});\n              declarativeDataCtxSvc.applyScope(declViewModel, inputData, null, scope, null);\n\n              declViewModel._internal.destroy();\n            } else {\n              inputData = {\n                uid: propVmo.uid\n              };\n            }\n          } catch (error) {\n            throw new Error(error);\n          }\n\n          return declarativeDataCtxSvc.applyExpression(inputData).then(function () {\n            return navigationService.navigate(_navigationToken[conditionVerdict.index].navigations, inputData).then(function (urlDetails) {\n              return urlDetails;\n            });\n          });\n        }\n      }\n    }\n\n    return undefined;\n  });\n};\nexports = {\n  getNavigationContent\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/navigationTokenService.js"],"names":["exports","getNavigationContent","conditionVerdict","vmo","_navigationToken","cdm","propVmo","viewModelObjectService","scope","adapterParserService","inputData","_","declViewModel","viewModelProcessingFactory","declarativeDataCtxSvc","uid"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/navigationTokenService\n */\nimport cfgSvc from 'js/configurationService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport adapterParserService from 'js/adapterParserService';\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport navigationService from 'js/navigationService';\nimport viewModelProcessingFactory from 'js/viewModelProcessingFactory';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\n\nvar _navigationToken;\nvar exports = {};\n\n// A property is which type of BO will be driven by solution config , based on the same naivigationToken will be associated in the href attribute of\n// anchor tag for the particular property\n\n// Example :\n/* [{\"conditions\": {\"$and\": [{ \"modelType.typeHierarchyArray\": { \"$in\": \"ImanFile\" }}]},\n     \"navigations\": {\"navigateTo\": \"downloadFile\",\"navigationParams\": {\"uid\": \"{{navContext.vmo.uid}}\"}  }\n    },\n    {\"conditions\": {\"modelType.typeHierarchyArray\": {\"$notin\": \"ImanFile\"}},\n     \"navigations\": {\"navigateTo\": \"com_siemens_splm_clientfx_tcui_xrt_showObject\",\"navigationParams\": {\"uid\": \"{{navContext.vmo.uid}}\" }  }\n    }\n    ]\n*/\nexport const getNavigationContent = function( scope, dbValue, vmo ) {\n    //The scope input is not needed anymore, verify the other usecases which leverages this api\n    //and this can be cleaned up\n\n    var conditionVerdict = {};\n\n    if( vmo && vmo.navigation ) {\n        return navigationService.navigate( vmo.navigation[ 0 ].navigateTo, vmo.navigation[ 0 ].navigationParams ).then( function( urlDetails ) {\n            return urlDetails;\n        } );\n    }\n\n    return cfgSvc.getCfg( 'navigationURLToken' ).then( function( token ) {\n        _navigationToken = token;\n        if( _navigationToken && _navigationToken.length > 0 ) {\n            // the below cdm check has been added to avoid any console errors when an OBJECT prop is not a VMO which ultimately shows up console errors\n            // emanating out of a logger.error statement in constructViewModelObjectFromModelObject ()\n            // it will be removed once cdm dependency is taken out from SWF\n            if( cdm.getObject( dbValue ) !== null ) {\n                var propVmo = viewModelObjectService.constructViewModelObjectFromModelObject( cdm.getObject( dbValue ), null, null, null, true );\n\n                scope.navContext = {\n                    vmo: propVmo\n                };\n                conditionVerdict = adapterParserService.applyConditions( propVmo, _navigationToken );\n                if( conditionVerdict && conditionVerdict.verdict ) {\n                    var inputData = _.cloneDeep( _navigationToken[ conditionVerdict.index ].navigations.navigationParams );\n                    try {\n                        //Revisit: Need to evluate if there is a better way of handling this\n                        //For now, creating a temporary declviewmodel as the 'applyscope' method expects\n                        //a declviewmodel\n                        if( inputData && !_.isEmpty( inputData ) ) {\n                            var declViewModel = viewModelProcessingFactory.createDeclViewModel( {} );\n                            declarativeDataCtxSvc.applyScope( declViewModel, inputData, null, scope, null );\n                            declViewModel._internal.destroy();\n                        } else {\n                            inputData = {\n                                uid: propVmo.uid\n                            };\n                        }\n                    } catch ( error ) {\n                        throw new Error( error );\n                    }\n                    return declarativeDataCtxSvc.applyExpression( inputData ).then( function() {\n                        return navigationService.navigate( _navigationToken[ conditionVerdict.index ].navigations, inputData ).then( function( urlDetails ) {\n                            return urlDetails;\n                        } );\n                    } );\n                }\n            }\n        }\n        return undefined;\n    } );\n};\n\nexports = {\n    getNavigationContent\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
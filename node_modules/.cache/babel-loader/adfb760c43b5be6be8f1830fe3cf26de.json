{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to manage command visibility.\n *\n * @module js/commandVisibilityService\n */\nimport functional from 'js/functionalUtility.service';\n/**\n * Get any usages of \"visibleServerCommands\" context from the condition string\n *\n * @param {String} s The string condition to check\n * @return {String[]} Values in visibleServerCommands that are checked\n */\n\nconst getServerConditions = function (s) {\n  var re = /ctx\\.visibleServerCommands\\.([a-zA-Z]\\w*)(\\W*|$)/g;\n  var result = [];\n  var m = re.exec(s);\n\n  while (m) {\n    result.push(m[1]);\n    m = re.exec(s);\n  }\n\n  return result;\n};\n/**\n * Parse a condition expression for any usages of server visibility\n *\n * @param {String|Object} condition Condition expression\n * @returns {[String]} List of server visibility usages\n */\n\n\nexport const getServerVisibilityUsage = condition => {\n  if (typeof condition === 'string') {\n    return getServerConditions(condition);\n  } //If object based condition recursivly parse the object values\n\n\n  return Object.values(condition).map(getServerVisibilityUsage).reduce(functional.concat, []);\n};\n/**\n * Get the list of server conditions used by a command\n *\n * @param {CommandOverlay} command Command to check\n * @returns {[String]} List of server visibility usages\n */\n\nexport const getServerConditionUsage = command => {\n  const directReferences = command.handlers.map(handler => {\n    return [...getServerVisibilityUsage(handler.activeWhen.expression), ...(handler.enableWhen ? getServerVisibilityUsage(handler.enableWhen.expression) : []), ...(handler.selectWhen ? getServerVisibilityUsage(handler.selectWhen.expression) : []), ...(handler.visibleWhen ? getServerVisibilityUsage(handler.visibleWhen.expression) : [])];\n  }).reduce((acc, nxt) => acc.concat(nxt), []);\n  const childReferences = command.children.map(getServerConditionUsage).reduce((acc, nxt) => acc.concat(nxt), []);\n  return [...directReferences, ...childReferences];\n};\nexport default {\n  getServerVisibilityUsage,\n  getServerConditionUsage\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/commandVisibilityService.js"],"names":["getServerConditions","re","result","m","getServerVisibilityUsage","condition","Object","functional","getServerConditionUsage","command","directReferences","handler","acc","childReferences"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,UAAA,MAAA,8BAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,mBAAmB,GAAG,UAAA,CAAA,EAAc;EACtC,IAAIC,EAAE,GAAN,mDAAA;EACA,IAAIC,MAAM,GAAV,EAAA;EACA,IAAIC,CAAC,GAAGF,EAAE,CAAFA,IAAAA,CAAR,CAAQA,CAAR;;EACA,OAAA,CAAA,EAAW;IACPC,MAAM,CAANA,IAAAA,CAAaC,CAAC,CAAdD,CAAc,CAAdA;IACAC,CAAC,GAAGF,EAAE,CAAFA,IAAAA,CAAJE,CAAIF,CAAJE;EACH;;EACD,OAAA,MAAA;AARJ,CAAA;AAWA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,wBAAwB,GAAKC,SAAF,IAAiB;EACrD,IAAI,OAAA,SAAA,KAAJ,QAAA,EAAoC;IAChC,OAAOL,mBAAmB,CAA1B,SAA0B,CAA1B;EAFiD,CAAA,CAIrD;;;EACA,OAAOM,MAAM,CAANA,MAAAA,CAAAA,SAAAA,EAAAA,GAAAA,CAAAA,wBAAAA,EAAAA,MAAAA,CAEMC,UAAU,CAFhBD,MAAAA,EAAP,EAAOA,CAAP;AALG,CAAA;AAUP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,uBAAuB,GAAGC,OAAO,IAAI;EAC9C,MAAMC,gBAAgB,GAAG,OAAO,CAAP,QAAA,CAAA,GAAA,CAAsBC,OAAO,IAAI;IACtD,OAAO,CACH,GAAGP,wBAAwB,CAAEO,OAAO,CAAPA,UAAAA,CAD1B,UACwB,CADxB,EAEH,IAAGA,OAAO,CAAPA,UAAAA,GAAqBP,wBAAwB,CAAEO,OAAO,CAAPA,UAAAA,CAA/CA,UAA6C,CAA7CA,GAFA,EAEH,CAFG,EAGH,IAAGA,OAAO,CAAPA,UAAAA,GAAqBP,wBAAwB,CAAEO,OAAO,CAAPA,UAAAA,CAA/CA,UAA6C,CAA7CA,GAHA,EAGH,CAHG,EAIH,IAAGA,OAAO,CAAPA,WAAAA,GAAsBP,wBAAwB,CAAEO,OAAO,CAAPA,WAAAA,CAAhDA,UAA8C,CAA9CA,GAJP,EAII,CAJG,CAAP;EADqB,CAAA,EAAA,MAAA,CAOb,CAAA,GAAA,EAAA,GAAA,KAAgBC,GAAG,CAAHA,MAAAA,CAPH,GAOGA,CAPH,EAAzB,EAAyB,CAAzB;EAQA,MAAMC,eAAe,GAAGJ,OAAO,CAAPA,QAAAA,CAAAA,GAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,CAEX,CAAA,GAAA,EAAA,GAAA,KAAgBG,GAAG,CAAHA,MAAAA,CAFLH,GAEKG,CAFLH,EAAxB,EAAwBA,CAAxB;EAGA,OAAO,CAAE,GAAF,gBAAA,EAAuB,GAA9B,eAAO,CAAP;AAZG,CAAA;AAeP,eAAe;EAAA,wBAAA;EAEXD;AAFW,CAAf","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to manage command visibility.\n *\n * @module js/commandVisibilityService\n */\nimport functional from 'js/functionalUtility.service';\n\n/**\n * Get any usages of \"visibleServerCommands\" context from the condition string\n *\n * @param {String} s The string condition to check\n * @return {String[]} Values in visibleServerCommands that are checked\n */\nconst getServerConditions = function( s ) {\n    var re = /ctx\\.visibleServerCommands\\.([a-zA-Z]\\w*)(\\W*|$)/g;\n    var result = [];\n    var m = re.exec( s );\n    while( m ) {\n        result.push( m[ 1 ] );\n        m = re.exec( s );\n    }\n    return result;\n};\n\n/**\n * Parse a condition expression for any usages of server visibility\n *\n * @param {String|Object} condition Condition expression\n * @returns {[String]} List of server visibility usages\n */\nexport const getServerVisibilityUsage = ( condition ) => {\n    if( typeof condition === 'string' ) {\n        return getServerConditions( condition );\n    }\n    //If object based condition recursivly parse the object values\n    return Object.values( condition )\n        .map( getServerVisibilityUsage )\n        .reduce( functional.concat, [] );\n};\n\n/**\n * Get the list of server conditions used by a command\n *\n * @param {CommandOverlay} command Command to check\n * @returns {[String]} List of server visibility usages\n */\nexport const getServerConditionUsage = command => {\n    const directReferences = command.handlers.map( handler => {\n        return [\n            ...getServerVisibilityUsage( handler.activeWhen.expression ),\n            ...handler.enableWhen ? getServerVisibilityUsage( handler.enableWhen.expression ) : [],\n            ...handler.selectWhen ? getServerVisibilityUsage( handler.selectWhen.expression ) : [],\n            ...handler.visibleWhen ? getServerVisibilityUsage( handler.visibleWhen.expression ) : []\n        ];\n    } ).reduce( ( acc, nxt ) => acc.concat( nxt ), [] );\n    const childReferences = command.children\n        .map( getServerConditionUsage )\n        .reduce( ( acc, nxt ) => acc.concat( nxt ), [] );\n    return [ ...directReferences, ...childReferences ];\n};\n\nexport default {\n    getServerVisibilityUsage,\n    getServerConditionUsage\n};\n"]},"metadata":{},"sourceType":"module"}
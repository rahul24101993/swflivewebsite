{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service handles resolution to HTML text of special cases of icon names seen with data binding.\n *\n * @module js/awIconService\n */\nimport iconSvc from 'js/iconService';\nimport typeIconSvc from 'js/typeIconsRegistryService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport fmsUtils from 'js/fmsUtils';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n/**\n * Regular expression to extract the type from a type's file name (without number suffix).\n */\n\nvar _REGEX_TYPE_FILE_NAME = /(^type)([a-z0-9\\s]+)/i;\n/**\n * Regular expression to extract the type from a type's file name (w/number suffix).\n */\n\nvar _REGEX_TYPE_FILE_NAME_SUFFIX = /(^type)([a-z0-9\\s]+)([0-9][0-9]$)/i;\n/**\n * Regular expression detect a full type file name.\n */\n\nvar _REGEX_TYPE_FILE_EXT = /.svg$/i;\n/**\n * {String} Cached base URL path.\n */\n\nvar _iconBase = '';\n/**\n * @private\n *\n * @return {String} The path from the root of the war file to the directory where icon image files can be found.\n */\n\nfunction _getIconBaseUrlPath() {\n  if (!_iconBase) {\n    _iconBase = awConfiguration.get('baseUrl') + '/image/';\n  }\n\n  return _iconBase;\n}\n\nlet exports; // eslint-disable-line no-invalid-this\n\n/**\n * Get the icon to use when one is not found\n *\n * @returns {String} The missing icon\n */\n\nexport let getMissingIcon = function () {\n  return iconSvc.getTypeIcon('MissingImage') || '<svg></svg>';\n};\n/**\n * Get the HTML tag for the given icon name.\n *\n * @param {String} iconID - ID of the icon to return. The ID is assumed to match one of the SVG definitions\n *            or have a valid alias to an SVG. Do not include any 'size' number on the end of the ID (e.g.\n *            the SVG's file name). All model types must be prefixed with 'type'.\n *\n * @return {String} HTML tag text (&lt;IMG&gt; or &lt;SVG&gt;) for the given 'iconID' (or 'missing image'\n *         definition if the icon name has not been registered as an alias in a module.json or the SVG file\n *         was not found during war the build)..\n */\n\nexport let getIconDef = function (iconID) {\n  var iconDef = null;\n\n  if (iconID) {\n    if (_REGEX_TYPE_FILE_EXT.test(iconID)) {\n      iconDef = '<img class=\"aw-base-icon\" src=\"' + _getIconBaseUrlPath() + iconID + '\" alt=\"' + iconID + '\" />';\n    }\n\n    if (!iconDef) {\n      var parts = iconID.match(_REGEX_TYPE_FILE_NAME_SUFFIX);\n\n      if (parts && parts.length === 4) {\n        iconDef = iconSvc.getTypeIcon(parts[2]);\n      } else {\n        parts = iconID.match(_REGEX_TYPE_FILE_NAME);\n\n        if (parts && parts.length === 3) {\n          iconDef = iconSvc.getTypeIcon(parts[2]);\n        }\n      }\n    }\n  }\n\n  return iconDef || exports.getMissingIcon();\n};\n/**\n * Build thumbnail file url from the ticket input provided\n *\n * @param {String} ticket - thumbnail image ticket\n * @return {String} the URL to the thumbnail file that represents the given ticket or '' if a) the\n *         'ticket' is not valid b) there is no thumbnail.\n */\n\nexport let buildThumbnailFileUrlFromTicket = function (ticket) {\n  var thumbnailUrl = '';\n\n  if (ticket && ticket.length > 28) {\n    thumbnailUrl = browserUtils.getBaseURL() + 'fms/fmsdownload/' + fmsUtils.getFilenameFromTicket(ticket) + '?ticket=' + ticket;\n  }\n\n  return thumbnailUrl;\n};\n/**\n * Get the URL to the thumbnail file that represents the given ViewModelObject, if it exists.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the thumbnail URL for.\n * @return {String} the URL to the thumbnail file that represents the given ViewModelObject (or '' if a) the\n *         'vmo' is not valid b) there is no thumbnail.\n */\n\nexport let getThumbnailFileUrl = function (vmo) {\n  var url = '';\n\n  if (vmo) {\n    var customVmo = null;\n\n    if (vmo.modelType) {\n      customVmo = typeIconSvc.getCustomVmoForThumbnail(vmo);\n    }\n\n    if (customVmo === null) {\n      customVmo = vmo;\n    }\n\n    if (customVmo.props && customVmo.props.awp0ThumbnailImageTicket) {\n      var prop = customVmo.props.awp0ThumbnailImageTicket;\n\n      if (prop.dbValues.length > 0) {\n        var ticket = prop.dbValues[0];\n        url = exports.buildThumbnailFileUrlFromTicket(ticket);\n      }\n    } else if (customVmo.thumbnailURL) {\n      url = customVmo.thumbnailURL;\n    }\n  }\n\n  return url;\n};\nexport let getTypeIconURLFromHierarchy = function (vmo) {\n  if (vmo && vmo.typeHierarchy) {\n    var typeFileName;\n\n    for (let index = 0; index < vmo.typeHierarchy.length; index++) {\n      var typeName = vmo.typeHierarchy[index];\n      typeFileName = iconMapSvc.getTypeFileName(typeName);\n\n      if (typeFileName) {\n        return iconSvc.getTypeIconFileUrl(typeFileName);\n      }\n    }\n\n    if (!typeFileName) {\n      return exports.getTypeIconURL('MissingImage');\n    }\n  }\n\n  return 0;\n};\n/**\n * Get the URL to the icon file that represents the 'type' of the given ViewModelObject.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the icon definition for.\n * @return {String} the URL to the icon file that represents the 'type' of the given ViewModelObject (or ''\n *         if a) the 'vmo' is not valid b) the type icon has not been registered as an alias in a\n *         module.json or c) the SVG file was not found during war the build).\n */\n\nexport let getTypeIconFileUrl = function (vmo) {\n  var url = '';\n\n  if (vmo && vmo.modelType) {\n    var customTypeIcon = typeIconSvc.getCustomIcon(vmo);\n\n    if (customTypeIcon && customTypeIcon.length > 0) {\n      url = iconSvc.getTypeIconFileUrl(customTypeIcon);\n    } else {\n      if (vmo.modelType.constantsMap && vmo.modelType.constantsMap.IconFileName) {\n        url = _getIconBaseUrlPath() + vmo.modelType.constantsMap.IconFileName;\n      } else {\n        if (vmo.modelType.typeHierarchyArray) {\n          var typeIconFileName = cmm.getTypeIconFileName(vmo.modelType);\n          url = iconSvc.getTypeIconFileUrl(typeIconFileName);\n        } else if (vmo.typeHierarchy) {\n          url = exports.getTypeIconURLFromHierarchy(vmo);\n        }\n      }\n    }\n  } else if (vmo && vmo.typeHierarchy) {\n    url = exports.getTypeIconURLFromHierarchy(vmo);\n  }\n\n  return url;\n};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon\n *            for.\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been\n *         registered as an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconURL = function (typeName) {\n  return iconSvc.getTypeIconURL(typeName);\n};\n/**\n * Given a type hierarchy, get the URL to the icon file for the type or its closest superior.\n *\n * @param {StringArray} typeHierarchy - The type hierarchy.\n *\n * @return {String} The URL to the icon file.\n */\n\nexport let getTypeIconFileUrlForTypeHierarchy = function (typeHierarchy) {\n  for (var j in typeHierarchy) {\n    var iconUrl = iconSvc.getTypeIconURL(typeHierarchy[j]);\n\n    if (iconUrl !== null) {\n      return iconUrl;\n    }\n  }\n\n  return '';\n};\nexports = {\n  getMissingIcon,\n  getIconDef,\n  buildThumbnailFileUrlFromTicket,\n  getThumbnailFileUrl,\n  getTypeIconURLFromHierarchy,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTypeIconFileUrlForTypeHierarchy\n};\nexport default exports;","map":{"version":3,"names":["iconSvc","typeIconSvc","cmm","iconMapSvc","fmsUtils","browserUtils","awConfiguration","_REGEX_TYPE_FILE_NAME","_REGEX_TYPE_FILE_NAME_SUFFIX","_REGEX_TYPE_FILE_EXT","_iconBase","_getIconBaseUrlPath","get","exports","getMissingIcon","getTypeIcon","getIconDef","iconID","iconDef","test","parts","match","length","buildThumbnailFileUrlFromTicket","ticket","thumbnailUrl","getBaseURL","getFilenameFromTicket","getThumbnailFileUrl","vmo","url","customVmo","modelType","getCustomVmoForThumbnail","props","awp0ThumbnailImageTicket","prop","dbValues","thumbnailURL","getTypeIconURLFromHierarchy","typeHierarchy","typeFileName","index","typeName","getTypeFileName","getTypeIconFileUrl","getTypeIconURL","customTypeIcon","getCustomIcon","constantsMap","IconFileName","typeHierarchyArray","typeIconFileName","getTypeIconFileName","getTypeIconFileUrlForTypeHierarchy","j","iconUrl"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/awIconService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service handles resolution to HTML text of special cases of icon names seen with data binding.\n *\n * @module js/awIconService\n */\nimport iconSvc from 'js/iconService';\nimport typeIconSvc from 'js/typeIconsRegistryService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport fmsUtils from 'js/fmsUtils';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n\n/**\n * Regular expression to extract the type from a type's file name (without number suffix).\n */\nvar _REGEX_TYPE_FILE_NAME = /(^type)([a-z0-9\\s]+)/i;\n\n/**\n * Regular expression to extract the type from a type's file name (w/number suffix).\n */\nvar _REGEX_TYPE_FILE_NAME_SUFFIX = /(^type)([a-z0-9\\s]+)([0-9][0-9]$)/i;\n\n/**\n * Regular expression detect a full type file name.\n */\nvar _REGEX_TYPE_FILE_EXT = /.svg$/i;\n\n/**\n * {String} Cached base URL path.\n */\nvar _iconBase = '';\n\n/**\n * @private\n *\n * @return {String} The path from the root of the war file to the directory where icon image files can be found.\n */\nfunction _getIconBaseUrlPath() {\n    if( !_iconBase ) {\n        _iconBase = awConfiguration.get( 'baseUrl' ) + '/image/';\n    }\n    return _iconBase;\n}\n\nlet exports; // eslint-disable-line no-invalid-this\n\n/**\n * Get the icon to use when one is not found\n *\n * @returns {String} The missing icon\n */\nexport let getMissingIcon = function() {\n    return iconSvc.getTypeIcon( 'MissingImage' ) || '<svg></svg>';\n};\n\n/**\n * Get the HTML tag for the given icon name.\n *\n * @param {String} iconID - ID of the icon to return. The ID is assumed to match one of the SVG definitions\n *            or have a valid alias to an SVG. Do not include any 'size' number on the end of the ID (e.g.\n *            the SVG's file name). All model types must be prefixed with 'type'.\n *\n * @return {String} HTML tag text (&lt;IMG&gt; or &lt;SVG&gt;) for the given 'iconID' (or 'missing image'\n *         definition if the icon name has not been registered as an alias in a module.json or the SVG file\n *         was not found during war the build)..\n */\nexport let getIconDef = function( iconID ) {\n    var iconDef = null;\n\n    if( iconID ) {\n        if( _REGEX_TYPE_FILE_EXT.test( iconID ) ) {\n            iconDef = '<img class=\"aw-base-icon\" src=\"' + _getIconBaseUrlPath() + iconID + '\" alt=\"' + iconID + '\" />';\n        }\n        if( !iconDef ) {\n            var parts = iconID.match( _REGEX_TYPE_FILE_NAME_SUFFIX );\n\n            if( parts && parts.length === 4 ) {\n                iconDef = iconSvc.getTypeIcon( parts[ 2 ] );\n            } else {\n                parts = iconID.match( _REGEX_TYPE_FILE_NAME );\n\n                if( parts && parts.length === 3 ) {\n                    iconDef = iconSvc.getTypeIcon( parts[ 2 ] );\n                }\n            }\n        }\n    }\n    return iconDef || exports.getMissingIcon();\n};\n\n/**\n * Build thumbnail file url from the ticket input provided\n *\n * @param {String} ticket - thumbnail image ticket\n * @return {String} the URL to the thumbnail file that represents the given ticket or '' if a) the\n *         'ticket' is not valid b) there is no thumbnail.\n */\nexport let buildThumbnailFileUrlFromTicket = function( ticket ) {\n    var thumbnailUrl = '';\n    if( ticket && ticket.length > 28 ) {\n        thumbnailUrl = browserUtils.getBaseURL() + 'fms/fmsdownload/' +\n            fmsUtils.getFilenameFromTicket( ticket ) + '?ticket=' + ticket;\n    }\n\n    return thumbnailUrl;\n};\n\n/**\n * Get the URL to the thumbnail file that represents the given ViewModelObject, if it exists.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the thumbnail URL for.\n * @return {String} the URL to the thumbnail file that represents the given ViewModelObject (or '' if a) the\n *         'vmo' is not valid b) there is no thumbnail.\n */\nexport let getThumbnailFileUrl = function( vmo ) {\n    var url = '';\n    if( vmo ) {\n        var customVmo = null;\n        if( vmo.modelType ) {\n            customVmo = typeIconSvc.getCustomVmoForThumbnail( vmo );\n        }\n        if( customVmo === null ) {\n            customVmo = vmo;\n        }\n        if( customVmo.props && customVmo.props.awp0ThumbnailImageTicket ) {\n            var prop = customVmo.props.awp0ThumbnailImageTicket;\n            if( prop.dbValues.length > 0 ) {\n                var ticket = prop.dbValues[ 0 ];\n                url = exports.buildThumbnailFileUrlFromTicket( ticket );\n            }\n        } else if( customVmo.thumbnailURL ) {\n            url = customVmo.thumbnailURL;\n        }\n    }\n    return url;\n};\n\nexport let getTypeIconURLFromHierarchy = function( vmo ) {\n    if( vmo && vmo.typeHierarchy ) {\n        var typeFileName;\n        for( let index = 0; index < vmo.typeHierarchy.length; index++ ) {\n            var typeName = vmo.typeHierarchy[ index ];\n            typeFileName = iconMapSvc.getTypeFileName( typeName );\n            if( typeFileName ) {\n                return iconSvc.getTypeIconFileUrl( typeFileName );\n            }\n        }\n        if( !typeFileName ) {\n            return exports.getTypeIconURL( 'MissingImage' );\n        }\n    }\n    return 0;\n};\n\n/**\n * Get the URL to the icon file that represents the 'type' of the given ViewModelObject.\n *\n * @param {ViewModelObject} vmo - The ViewModelObject to return the icon definition for.\n * @return {String} the URL to the icon file that represents the 'type' of the given ViewModelObject (or ''\n *         if a) the 'vmo' is not valid b) the type icon has not been registered as an alias in a\n *         module.json or c) the SVG file was not found during war the build).\n */\nexport let getTypeIconFileUrl = function( vmo ) {\n    var url = '';\n    if( vmo && vmo.modelType ) {\n        var customTypeIcon = typeIconSvc.getCustomIcon( vmo );\n        if( customTypeIcon && customTypeIcon.length > 0 ) {\n            url = iconSvc.getTypeIconFileUrl( customTypeIcon );\n        } else {\n            if( vmo.modelType.constantsMap && vmo.modelType.constantsMap.IconFileName ) {\n                url = _getIconBaseUrlPath() + vmo.modelType.constantsMap.IconFileName;\n            } else {\n                if( vmo.modelType.typeHierarchyArray ) {\n                    var typeIconFileName = cmm.getTypeIconFileName( vmo.modelType );\n\n                    url = iconSvc.getTypeIconFileUrl( typeIconFileName );\n                } else if( vmo.typeHierarchy ) {\n                    url = exports.getTypeIconURLFromHierarchy( vmo );\n                }\n            }\n        }\n    } else if( vmo && vmo.typeHierarchy ) {\n        url = exports.getTypeIconURLFromHierarchy( vmo );\n    }\n    return url;\n};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon\n *            for.\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been\n *         registered as an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconURL = function( typeName ) {\n    return iconSvc.getTypeIconURL( typeName );\n};\n\n/**\n * Given a type hierarchy, get the URL to the icon file for the type or its closest superior.\n *\n * @param {StringArray} typeHierarchy - The type hierarchy.\n *\n * @return {String} The URL to the icon file.\n */\nexport let getTypeIconFileUrlForTypeHierarchy = function( typeHierarchy ) {\n    for( var j in typeHierarchy ) {\n        var iconUrl = iconSvc.getTypeIconURL( typeHierarchy[ j ] );\n        if( iconUrl !== null ) {\n            return iconUrl;\n        }\n    }\n\n    return '';\n};\n\nexports = {\n    getMissingIcon,\n    getIconDef,\n    buildThumbnailFileUrlFromTicket,\n    getThumbnailFileUrl,\n    getTypeIconURLFromHierarchy,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTypeIconFileUrlForTypeHierarchy\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
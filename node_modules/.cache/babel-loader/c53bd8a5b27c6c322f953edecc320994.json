{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /**\n * This service provides helpful APIs to register/unregister/update context variables used to hold application state.\n *\n * @module js/appCtxService\n *\n * @publishedApolloService\n */import _ from'lodash';import eventBus from'js/eventBus';import debugService from'js/debugService';/**\n * delegate object with 2 API: fetch and dispatch\n * Still put a 'default value' for testability\n */let _ctxObj={_ctx:{},fetch:path=>path?_.get(_ctxObj._ctx,path):_ctxObj._ctx,dispatch:_ref=>{let{path,value}=_ref;return value===undefined?_.unset(_ctxObj._ctx,path):_.set(_ctxObj._ctx,path,value);}};/**\n * Init appCtxService\n * @param {object} state state object which has getValue and setValue API\n */export function init(state){_ctxObj=state;}/**\n * Register application context variable\n *\n * @param {String} name - The name of context variable\n * @param {Object} value - The value of context variable\n */export let registerCtx=function(path,value){debugService.debug('ctx',path,'register');_ctxObj.dispatch({path,value});// Announce app context registration\neventBus.publish('appCtx.register',{name:path,value:value});};/**\n * Register part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */export let registerPartialCtx=function(path,value){debugService.debug('ctx',path,'register');_ctxObj.dispatch({path,value});// Announce app context registration\nvar splitPath=path.split('.');var context=splitPath.shift();eventBus.publish('appCtx.register',{name:context,target:splitPath.join('.'),value:value});};/**\n * Unregister application context variable\n *\n * @param {String} path - The name of context variable\n */export let unRegisterCtx=function(path){debugService.debug('ctx',path,'unregister');_ctxObj.dispatch({path,value:undefined});// Announce app context un-registration\neventBus.publish('appCtx.register',{name:path});};/**\n * Update application context and Announce app context update by publishing an {@link module:js/eventBus|event}\n * 'appCtx.update' with eventData as {\"name\": ctxVariableName, \"value\": ctxVariableValue}\n *\n * @param {String} path - The name of context variable\n * @param {Object} value - The value of context variable\n */export let updateCtx=function(path,value){debugService.debug('ctx',path,'modify');_ctxObj.dispatch({path,value});// Announce app context update\neventBus.publish('appCtx.update',{name:path,value:value});};/**\n * Get application context variable value\n *\n * @param {String} path - Path to the context\n * @returns {Object} Value (if any) at the indicated context path location.\n */export let getCtx=function(path){return _ctxObj.fetch(path);};/**\n * Update part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */export let updatePartialCtx=function(path,value){debugService.debug('ctx',path,'modify');var currValue=_ctxObj.fetch(path);// This will typically be done using angular binding, so we don't want an event potentially every $digest\nif(value!==currValue){_ctxObj.dispatch({path,value});// Announce update\nvar splitPath=path.split('.');var context=splitPath.shift();eventBus.publish('appCtx.update',{name:context,value:_ctxObj.fetch(),target:splitPath.join('.')});}};/**\n * Update app context from object\n *\n * @param {Object} ctxObject - The source context objeect containing properties that need to be update on global ctx\n */export let updateCtxFromObject=function(ctxObject){if(ctxObject){_.forEach(ctxObject,function(value,name){exports.updateCtx(name,value);});}};const exports={get ctx(){return _ctxObj.fetch();},registerCtx,registerPartialCtx,updateCtx,updatePartialCtx,unRegisterCtx,getCtx,updateCtxFromObject};export default exports;","map":null,"metadata":{},"sourceType":"module"}
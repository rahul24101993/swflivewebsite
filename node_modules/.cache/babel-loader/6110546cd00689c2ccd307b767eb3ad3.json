{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/localeService\n *\n * @publishedApolloService\n */import _ from'lodash';import eventBus from'js/eventBus';import browserUtils from'js/browserUtils';import cfgSvc from'js/configurationService';import localStrg from'js/localStorage';// revisitme - should be 'config/installedLocales'\nimport'js/installedLocales';import AwPromiseService from'js/awPromiseService';/**\n * The country (i.e. region) code of the current locale that will be appended to the textBundle name to resolve the\n * text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)).\n *\n * @private\n */var _bundleSuffix='';/**\n * Locale value set up-to-date once login is complete.\n * <P>\n * Note: Until login, the default values we be as shown here.\n *\n * @private\n */var _localeCode;/**\n * Cache of installed locales\n * @private\n */var _installedLocales;/**\n * Local Storage key for last used locale.\n * @private\n */var getBrowserSessionLocaleKey='locale';/**\n * Default locale if local storage locale is undefined\n * @private\n */var getDefaultLocaleCode='en';let exports;/**\n * @return {String[]} array of installed locales\n */export let getInstalledLocales=function(){return _installedLocales;};/**\n * @param {String} locale - input locale\n * @return {String|null} resolved locale\n */function matchInstalledLocales(locale){locale=locale.replace(/-/g,'_');if(_installedLocales.indexOf(locale)>-1){return locale;}// search by the 2 character locale\nvar localeShort=locale.substring(0,2).toLowerCase();var ndx=_installedLocales.indexOf(localeShort);if(ndx>-1){return _installedLocales[ndx];}// search by ignoring case\nvar resolvedLocale;_.forEach(_installedLocales,function(installedLocale){if(locale.toLowerCase()===installedLocale.toLowerCase()){resolvedLocale=installedLocale;return false;// break\n}});if(!resolvedLocale){// search based upon only the first 2 characters\n_.forEach(_installedLocales,function(installedLocale){if(localeShort&&installedLocale.startsWith(localeShort)){resolvedLocale=installedLocale;return false;// break\n}});}return resolvedLocale;}/**\n * Return the current locale from the URL or browsers 'userAgent'\n *\n * @return {String} The 'locale' code for the current browser session based on a 'locale=' query in the URL or the\n *         browsers 'userAgent' (e.g. 'en_US', 'zh_CN', etc.).\n */function resolveLocale(){var localeCode;/**\n     * (1) Look for the 'locale' in the URL and if found extract the value from it.\n     */var localeFromURL=browserUtils.getUrlAttributes().locale;if(localeFromURL){localeCode=matchInstalledLocales(localeFromURL);if(!localeCode){// Remove invalid locale settings from URL\nbrowserUtils.removeUrlAttribute('locale');}}if(!localeCode){/**\n         * (2) Check localStorage for a last used locale\n         */localeCode=localStrg.get(getBrowserSessionLocaleKey);if(localeCode){localeCode=matchInstalledLocales(localeCode);}}if(!localeCode){/**\n         * (3) Check if we should simply assume the browser's current locale setting.\n         */var navigator=browserUtils.getWindowNavigator();if(navigator){localeCode=matchInstalledLocales(navigator.userLanguage||navigator.language);}}if(!localeCode){/**\n         * (4) Fallback to initial locale in installed array\n         */localeCode=_installedLocales[0];}setLocaleInt(localeCode);return localeCode;}/**\n * Sets the selected locale in local storage\n *\n * @param {Object} loginPageLocale - selected locale\n * @ignore\n */export let setLocaleInLocalStorage=function(loginPageLocale){localStrg.publish(getBrowserSessionLocaleKey,loginPageLocale);setLocaleInDOM();};/**\n * Sets the selected locale in DOM html tag\n */function setLocaleInDOM(){let localeCode=localStrg.get(getBrowserSessionLocaleKey);let element=document.getElementsByTagName('HTML')[0];let attLang=document.createAttribute('lang');attLang.value=localeCode?localeCode.replace(/_/g,'-'):getDefaultLocaleCode;element.setAttributeNode(attLang);}/**\n * @param {String} localeCode - locale code\n */function setLocaleInt(localeCode){_localeCode=localeCode;/**\n     * Create the text bundle suffix.\n     */if(/^en/.test(localeCode)){_bundleSuffix='';}else{_bundleSuffix='_'+localeCode;}}/**\n * Initializes user language and country code variables for this service.\n * <P>\n * Note: We handle some special cases to where we want just the language code without the region code (a.k.a.\n * country code).\n *\n * @param {String} localeCode - The locale in standard 'language_Country' format e.g. 'en_US'.\n * @return {String} resolved locale\n * @ignore\n */export let setLocale=function(localeCode){localeCode=matchInstalledLocales(localeCode);// Update localStorage with new value\nexports.setLocaleInLocalStorage(localeCode);// Remove from the URL after storing in localStorage\nbrowserUtils.removeUrlAttribute('locale');if(localeCode!==_localeCode){setLocaleInt(localeCode);eventBus.publish('locale.changed',_localeCode);}return localeCode;};/**\n * Returns the i18n code for the current user language *with* any country or region code.\n * <P>\n * Note: This value set up-to-date once login is complete. Until then, it will return a default locale code of\n * 'en_US'.\n *\n * @return {String} Current Locale value e.g. 'en_US'\n */export let getLocale=function(){return _localeCode;};/**\n * Returns baseName in the path.\n *\n * @param {String} path - path of the resource.\n * @return {String} baseName of the resource.\n */var baseName=function(path){if(!path){return'BaseMessages';}var base=path.substring(path.lastIndexOf('/')+1);if(base.lastIndexOf('.')!==-1){base=base.substring(0,base.lastIndexOf('.'));}return base;};/**\n * Returns a promise that will be 'resolved' with the localized string text bundle object for the given i18n\n * 'resource'.\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n *\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @return {Promise} A promise that will be 'resolved' with the localized string text bundle object for the\n *         given i18n 'resource' (or 'null' if the resource is not found or the 'localeService' has not be injected\n *         correctly.).\n */export let getTextPromise=function(resource,useNative){var resourceFinal=baseName(resource);return cfgSvc.getCfg('i18n'+_bundleSuffix+'.'+resourceFinal,false,useNative);};/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */export let getLocalizedText=function(resource,key,useNative){var resourceFinal=baseName(resource);return cfgSvc.getCfg('i18n'+_bundleSuffix+'.'+resourceFinal+'.'+key,false,useNative);};/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} localeCode - The locale language that the key text will be retrieved from\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */export let getLocalizedTextBundlePromise=function(localeCode,resource,key,useNative){var bundleSuffix='';if(/^en/.test(localeCode)){bundleSuffix='';}else{bundleSuffix='_'+localeCode;}var resourceFinal=baseName(resource);return cfgSvc.getCfg('LoginLocale'+bundleSuffix+'.'+resourceFinal+'.'+key,false,useNative);};/**\n * Returns localized text from the given resource with the given key for all installed languages\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @return {Promise} Promise containing the localized text\n */export let getMultiLanguageListPromise=function(resource,key){var _installedLocales=getInstalledLocales();const loginLocale=resource==='LoginLocale';let languagePromise=AwPromiseService.instance;var localePromises=[];var localeResponses={};for(var i=0;i<_installedLocales.length;i++){const locale=_installedLocales[i];if(loginLocale){key=locale;}localePromises.push(getLocalizedTextBundlePromise(locale,resource,key).then(function(textBundle){localeResponses[locale]=textBundle;}));}return new languagePromise(function(resolve,reject){AwPromiseService.instance.all(localePromises).then(function(){resolve(sortObject(localeResponses));},reject);});};// eslint-disable-next-line require-jsdoc\nfunction sortObject(obj){return Object.keys(obj).sort().reduce(function(result,key){result[key]=obj[key];return result;},{});}/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource.key to load\n * @param {Boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */export let getLocalizedTextFromKey=async function(resource,useNative){return cfgSvc.getCfg('i18n'+_bundleSuffix+'.'+resource,false,useNative);};/**\n * Returns the country (i.e. region) code of the current locale that will be appended to the textBundle name to\n * resolve the text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)). *\n *\n * @return {String} i18n code for the current user region *without* any language code.\n * @ignore\n */export let getBundleSuffix=function(){return _bundleSuffix;};/**\n * Returns the i18n code for the current user language *without* any country or region code.\n *\n * @return {String} The i18n code for the current user language *without* any country or region code.\n * @ignore\n */export let getLanguageCode=function(){return _localeCode.substring(0,2);};/**\n * Returns a string from cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {String} key - Name of the message to return.\n * @param {String[]} params - Array of message parameters.\n *\n * @return {String} Message with param substitutions.\n */export let getMessage=function(key,params){var msg=getLoadedText()[key];msg&&params&&params.forEach(function(item,index){msg=msg.replace(\"{\".concat(index,\"}\"),params[index]);});return msg;};/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle to return.\n *\n * @return {Object} Cached textBundle resource (or NULL if the bundle has not been cached yet).\n */export let getLoadedText=function(resource){var resourceFinal=baseName(resource);return cfgSvc.getCfgCached('i18n'+_bundleSuffix+'.'+resourceFinal);};/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle.key to return.\n *\n * @return {String} Cached localized text from textBundle\n */export let getLoadedTextFromKey=function(resource){return cfgSvc.getCfgCached('i18n'+_bundleSuffix+'.'+resource);};/**\n * Gets the default language based on locale stored in 1) the URL (if 'locale' attributes is defined) or 2) local\n * storage.\n *\n * @param {Object} installedLanguages - default selected locale\n * @param {StringMap} localeTextBundle - (Optional) Text bundle containing a mapping of locale code to locale specific name of the language (eg localeTextBundle.en_US = English).\n * @returns {String} Default language based on locale stored in local storage.\n * @ignore\n */export let getDefaultLanguage=function(installedLanguages,localeTextBundle){var defaultLang={};var locale=resolveLocale();if(localeTextBundle){if(locale){defaultLang.dbValue=locale;defaultLang.uiValue=localeTextBundle[locale];defaultLang.isSelected=true;return defaultLang;}}// Override the selected language with local storage locale value\nif(locale){_.forEach(installedLanguages,function(installedLanguage){if(installedLanguage.dbValue===locale){installedLanguage.isSelected=true;defaultLang=installedLanguage;}});}if(_.isEmpty(defaultLang)){defaultLang.dbValue='en_US';defaultLang.uiValue='English';defaultLang.isSelected=true;locale=defaultLang.dbValue;}if(locale&&locale!==exports.getLocale()){exports.setLocale(locale);}return defaultLang;};exports={getInstalledLocales,setLocaleInLocalStorage,setLocale,getLocale,getTextPromise,getLocalizedText,getBundleSuffix,getLanguageCode,getMessage,getLoadedText,getDefaultLanguage,getLocalizedTextFromKey,getLoadedTextFromKey,getMultiLanguageListPromise,getLocalizedTextBundlePromise};export default exports;_installedLocales=cfgSvc.getCfgCached('installedLocales');/**\n * Look for the default 'locale' in the URL and if found extract the value from it.\n */exports.setLocale(resolveLocale());","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable require-jsdoc */ // Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /**\n * This module provides the native implementation of the cacheFactory.\n *\n * @module js/awCacheFactoryService\n */import _ from'lodash';let caches={};function cacheFactory(cacheId){if(cacheId in caches){throw new Error(\"awCacheFactory, CacheId \".concat(cacheId,\" is already taken!\"));}var size=0;var stats=Object.assign({},{id:cacheId});var data=createMap();/**\n     * A cache object used to store and retrieve data\n     */return caches[cacheId]={/**\n         * Inserts a named entry into the cache object to be\n         * retrieved later, and incrementing the size of the cache if the key was not already\n         * present in the cache.\n         *\n         * It will not insert undefined values into the cache.\n         *\n         * @param {string} key the key under which the cached data is stored.\n         * @param {*} value the value to store alongside the key. If it is undefined, the key\n         *    will not be stored.\n         * @returns {*} the value stored.\n         */put:function(key,value){if(isUndefined(value)){return;}if(!(key in data)){size++;}data[key]=value;return value;},/**\n         * Retrieves named data stored in the cache object.\n         *\n         * @param {string} key the key of the data to be retrieved\n         * @returns {*} the value stored.\n         */get:function(key){return data[key];},/**\n         * Removes an entry from the cache object.\n         *\n         * @param {string} key the key of the entry to be removed\n         */remove:function(key){if(!(key in data)){return;}delete data[key];size--;},/**\n         * Clears the cache object of any entries.\n         */removeAll:function(){data=createMap();size=0;},/**\n         * Destroys the cache object entirely,\n         * removing it from the cacheFactory set.\n         */destroy:function(){data=null;stats=null;delete caches[cacheId];},/**\n         * Retrieve information regarding a particular cache\n         *\n         * @returns {object} an object with the id, size properties\n         */info:function(){return Object.assign({},stats,{size:size});}};}function createMap(){return Object.create(null);}/**\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.\n */function isUndefined(value){return typeof value==='undefined';}/**\n * Get information about all the caches that have been created\n *\n * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`\n */cacheFactory.info=function(){var info={};_.forEach(caches,function(cache,cacheId){info[cacheId]=cache.info();});return info;};/**\n * Get access to a cache object by the `cacheId` used when it was created.\n *\n * @param {string} cacheId Name or id of a cache to access.\n * @returns {object} Cache object identified by the cacheId or undefined if no such cache.\n */cacheFactory.get=function(cacheId){return caches[cacheId];};export let instance=cacheFactory;export default{instance};","map":null,"metadata":{},"sourceType":"module"}
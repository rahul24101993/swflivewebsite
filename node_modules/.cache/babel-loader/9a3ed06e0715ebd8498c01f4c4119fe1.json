{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/defaultIconProviderService\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport { getImageAliasFromId } from 'js/imageRegistry';\nimport { loadDynModule } from 'js/moduleLoader';\n/**\n * @private\n */\n\nvar _cache = {\n  /**\n   * Set of '&lt;SVG&gt;' and '&lt;IMG&gt;' HTML tags set with the \"aw-base-icon\" CSS class once an icon is used.\n   */\n  use: {}\n};\n/**\n * @private\n *\n * @param {String} key - key field within use object\n *\n * @return {String} string from use object per key field (or null)\n */\n\nfunction _getFromUseCache(key) {\n  var result = _cache.use[key];\n\n  if (result) {\n    return result;\n  }\n\n  return undefined;\n}\n/**\n * Returns the &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\n\n\nconst _getIcon = async name => {\n  /**\n   * Check if this is an alias name for the actual icon name.\n   */\n  var iconAlias = getImageAliasFromId(name);\n\n  if (iconAlias) {\n    return loadDynModule(iconAlias).then(result => result.svgString);\n  }\n\n  return null;\n};\n\nvar exports = {};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIcon = function (typeName) {\n  /**\n   * Check if we have already prepared a tag for this icon to use.\n   */\n  var ret = _getFromUseCache(typeName);\n\n  if (ret) {\n    return ret;\n  }\n\n  var typeIconFileName;\n  var modelType = cmm.getType(typeName);\n\n  if (modelType && modelType.constantsMap.typeIconFileName) {\n    // If we already have the meta model cached, use the constant for the type icon filename.\n    typeIconFileName = modelType.constantsMap.IconFileName;\n  } else {\n    /**\n     * Check if this is an alias name for the actual icon name.\n     */\n    typeIconFileName = iconMapSvc.getTypeFileName(typeName);\n\n    if (!typeIconFileName) {\n      return null;\n    }\n  }\n\n  return exports.getTypeIconFileTag(typeName, typeIconFileName);\n};\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconFileTag = function (typeName, typeIconFileName) {\n  /**\n   * Build final tag and put into the 'use' cache to save some work in the future.\n   */\n  var iconTag = '<img class=\"aw-base-icon\" src=\"' + exports.getTypeIconFileUrl(typeIconFileName) + '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"\" />';\n  _cache.use[typeName] = iconTag;\n  return iconTag;\n};\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconFileUrl = function (typeIconFileName) {\n  return iconRepositoryService.getIconFileUrl(typeIconFileName);\n};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconURL = function (typeName) {\n  var iconFileName;\n  var modelType = cmm.getType(typeName);\n\n  if (modelType && modelType.constantsMap.IconFileName) {\n    iconFileName = modelType.constantsMap.IconFileName;\n  }\n\n  if (!iconFileName) {\n    /**\n     * Check if this is an alias name for the actual icon name.\n     */\n    iconFileName = iconMapSvc.getTypeFileName(typeName);\n  }\n\n  if (!iconFileName) {\n    return null;\n  }\n  /**\n   * Create the path to the deployed icon file.\n   */\n\n\n  return iconRepositoryService.getIconFileUrl(iconFileName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTileIcon = async function (name) {\n  return await _getIcon('home' + name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getMiscIcon = async function (name) {\n  return await _getIcon('misc' + name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getCmdIcon = async function (name) {\n  return await _getIcon('cmd' + name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getAwIcon = async function (iconName) {\n  return await _getIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getIcon = async function (iconName) {\n  return await _getIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getIndicatorIcon = async function (iconName) {\n  return await _getIcon('indicator' + iconName);\n};\nexports = {\n  getTypeIcon,\n  getTypeIconFileTag,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTileIcon,\n  getMiscIcon,\n  getCmdIcon,\n  getAwIcon,\n  getIcon,\n  getIndicatorIcon\n};\nexport default exports;","map":{"version":3,"names":["cmm","iconMapSvc","iconRepositoryService","getImageAliasFromId","loadDynModule","_cache","use","_getFromUseCache","key","result","undefined","_getIcon","name","iconAlias","then","svgString","exports","getTypeIcon","typeName","ret","typeIconFileName","modelType","getType","constantsMap","IconFileName","getTypeFileName","getTypeIconFileTag","iconTag","getTypeIconFileUrl","getIconFileUrl","getTypeIconURL","iconFileName","getTileIcon","getMiscIcon","getCmdIcon","getAwIcon","iconName","getIcon","getIndicatorIcon"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/defaultIconProviderService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/defaultIconProviderService\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport { getImageAliasFromId } from 'js/imageRegistry';\nimport { loadDynModule } from 'js/moduleLoader';\n\n/**\n * @private\n */\nvar _cache = {\n\n    /**\n     * Set of '&lt;SVG&gt;' and '&lt;IMG&gt;' HTML tags set with the \"aw-base-icon\" CSS class once an icon is used.\n     */\n    use: {}\n};\n\n/**\n * @private\n *\n * @param {String} key - key field within use object\n *\n * @return {String} string from use object per key field (or null)\n */\nfunction _getFromUseCache( key ) {\n    var result = _cache.use[ key ];\n    if( result ) {\n        return result;\n    }\n    return undefined;\n}\n\n/**\n * Returns the &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\nconst _getIcon = async( name ) => {\n    /**\n     * Check if this is an alias name for the actual icon name.\n     */\n    var iconAlias = getImageAliasFromId( name );\n    if( iconAlias ) {\n        return loadDynModule( iconAlias ).then( result => result.svgString );\n    }\n    return null;\n};\n\nvar exports = {};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIcon = function( typeName ) {\n    /**\n     * Check if we have already prepared a tag for this icon to use.\n     */\n    var ret = _getFromUseCache( typeName );\n\n    if( ret ) {\n        return ret;\n    }\n\n    var typeIconFileName;\n\n    var modelType = cmm.getType( typeName );\n\n    if( modelType && modelType.constantsMap.typeIconFileName ) {\n        // If we already have the meta model cached, use the constant for the type icon filename.\n        typeIconFileName = modelType.constantsMap.IconFileName;\n    } else {\n        /**\n         * Check if this is an alias name for the actual icon name.\n         */\n        typeIconFileName = iconMapSvc.getTypeFileName( typeName );\n        if( !typeIconFileName ) {\n            return null;\n        }\n    }\n\n    return exports.getTypeIconFileTag( typeName, typeIconFileName );\n};\n\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconFileTag = function( typeName, typeIconFileName ) {\n    /**\n     * Build final tag and put into the 'use' cache to save some work in the future.\n     */\n    var iconTag = '<img class=\"aw-base-icon\" src=\"' + exports.getTypeIconFileUrl( typeIconFileName ) +\n        '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"\" />';\n\n    _cache.use[ typeName ] = iconTag;\n\n    return iconTag;\n};\n\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconFileUrl = function( typeIconFileName ) {\n    return iconRepositoryService.getIconFileUrl( typeIconFileName );\n};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconURL = function( typeName ) {\n    var iconFileName;\n\n    var modelType = cmm.getType( typeName );\n    if( modelType && modelType.constantsMap.IconFileName ) {\n        iconFileName = modelType.constantsMap.IconFileName;\n    }\n\n    if( !iconFileName ) {\n        /**\n         * Check if this is an alias name for the actual icon name.\n         */\n        iconFileName = iconMapSvc.getTypeFileName( typeName );\n    }\n\n    if( !iconFileName ) {\n        return null;\n    }\n\n    /**\n     * Create the path to the deployed icon file.\n     */\n    return iconRepositoryService.getIconFileUrl( iconFileName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getTileIcon = async function( name ) {\n    return await _getIcon( 'home' + name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getMiscIcon = async function( name ) {\n    return await _getIcon( 'misc' + name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getCmdIcon = async function( name ) {\n    return await _getIcon( 'cmd' + name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getAwIcon = async function( iconName ) {\n    return await _getIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getIcon = async function( iconName ) {\n    return await _getIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getIndicatorIcon = async function( iconName ) {\n    return await _getIcon( 'indicator' + iconName );\n};\n\nexports = {\n    getTypeIcon,\n    getTypeIconFileTag,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTileIcon,\n    getMiscIcon,\n    getCmdIcon,\n    getAwIcon,\n    getIcon,\n    getIndicatorIcon\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
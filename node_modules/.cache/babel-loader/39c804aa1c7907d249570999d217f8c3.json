{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This module is part of declarative UI framework and provides view model processing functionalities.\n *\n * @module js/parsingUtils\n */import _ from'lodash';import logger from'js/logger';/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */var exports={};/**\n * {Regex} Regular expression that allows extraction of the text between starting '{{' and ending '}}' using String\n * class 'match' function.\n * <P>\n * Note: The regex will only extract 4 segments w/the following for [1] & [3]<BR>\n * results[1] === '{{' && results[3] === '}}' *\n */export let REGEX_DATABINDING=/^({{)([a-zA-Z0-9$._\\s:\\[\\]\\']+)(}})$/;/**\n * @param {String} expression -\n * @return {String} The string between mustaches or 'undefined'\n */export let getStringInDoubleMustachMarkup=function(expression){if(expression.match){var results=expression.match(exports.REGEX_DATABINDING);if(results&&results.length===4){return results[2];}}return undefined;};/**\n * @param {String} expression -\n * @return {String} insertionString - the string between mustaches\n */export let getStringBetweenDoubleMustaches=function(expression){var insertionString=expression;if(_.isString(insertionString)){if(_.startsWith(insertionString,'{{')){insertionString=_.trimStart(insertionString,'{{');insertionString=_.trimEnd(insertionString,'}}');}return insertionString;}return undefined;};/**\n * Get the required value from the JSON.\n *\n * @param {Object} input - Input object.\n * @param {Object} path - path from which to search the input.\n * @return {Object} - searched output.\n */export let parentGet=function(input,path){var retVal=_.get(input,path);if(retVal!==undefined){return retVal;}// drill down by data - i18n case\nif(input&&input.data){return exports.parentGet(input.data,path);}return undefined;};/**\n * Try to parse the JSON string, return the JavaScript Object after parsing, false if cannot parse.\n *\n * @param {String} jsonString - JSON string to parse into Object\n */export let parseJsonString=function(jsonString){try{var jsonObject=JSON.parse(jsonString);if(jsonObject&&typeof jsonObject==='object'){return jsonObject;}}catch(exception){logger.error('Error parsing the JSON string: '+exception);}return false;};/**\n * @param {String} expression -\n * @return {String} key of i18n ex- incase of i18n.Close,it will return \"Close\".\n */export let geti18nKey=function(expression){var regex=/{{i18n.([_a-zA-Z0-9]+)}}/i;if(arguments.length===1&&_.isString(expression)){return expression.match(regex)[1];}return true;};exports={REGEX_DATABINDING,getStringInDoubleMustachMarkup,getStringBetweenDoubleMustaches,parentGet,parseJsonString,geti18nKey};export default exports;","map":null,"metadata":{},"sourceType":"module"}
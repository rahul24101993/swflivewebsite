{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmTableUtils\n */\nimport _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport awTableStateService from 'js/awTableStateService';\nimport browserUtils from 'js/browserUtils';\nimport { unmountComponents } from 'js/declReactUtils';\nimport editEventsService from 'js/editEventsService';\nimport htmlUtils from 'js/htmlUtils';\nimport ngUtils from 'js/ngUtils';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport Const from 'js/splmTableConstants';\nvar exports = {};\n/**\n * Locate the closest element including self\n * http://stackoverflow.com/a/24107550/888165\n *\n * @param {DOMElement} element element to start search\n *\n * @param {String} selector css selector to use in locating closest element\n *\n * @param {Int} maxLevelsUp the maximum levels up to search\n *\n * @returns {DOMElement} the closest element\n */\n\nexports.closestElement = function (element, selector, maxLevelsUp) {\n  return htmlUtils.closestElement(element, selector, maxLevelsUp);\n};\n/**\n * Returns the index of the node in its parent\n *\n * @param {DOMElement} node - The node to find the index of\n *\n * @return {Number} the index of the node\n */\n\n\nexports.getIndexInParent = function (node) {\n  var i = 0;\n\n  while (node.previousElementSibling) {\n    node = node.previousElementSibling;\n    i++;\n  }\n\n  return i;\n};\n/**\n * Get all table content cell in specific column.\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {Number} columnIndex - The column index\n *\n * @return {Array} List of DOMElements for table content cells.\n */\n\n\nexports.getColumnContentCellElementsByIndex = function (tableElement, columnIndex) {\n  var returnCellElements = [];\n  var cellElements = tableElement.getElementsByClassName(Const.CLASS_CELL);\n\n  _.forEach(cellElements, function (cellElement) {\n    if (cellElement.columnDef) {\n      if (cellElement.columnDef.index === columnIndex) {\n        returnCellElements.push(cellElement);\n      }\n    }\n  });\n\n  return returnCellElements;\n};\n/**\n * Get property object/view model for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\n\n\nexports.getPropertyByCellElement = function (cellElement) {\n  var rowElement = exports.closestElement(cellElement, '.' + Const.CLASS_ROW);\n\n  if (rowElement.vmo && rowElement.vmo.props) {\n    return rowElement.vmo.props[cellElement.columnDef.field];\n  }\n\n  return null;\n};\n/**\n * Get view model object for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\n\n\nexports.getViewModelObjectByCellElement = function (cellElement) {\n  return cellElement.parentElement.vmo;\n};\n/**\n * Get cell element by object UID and property name\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {String} propertyName - The property name\n *\n * @param {String} vmoUid - The uid to view model object\n *\n * @return {DOMElement} The DOMElement to table content cell which presents specific property of the vmo.\n */\n\n\nexports.getCellElementsByPropertyAndUid = function (tableElement, propertyName, vmoUid) {\n  let returnCellElements = [];\n  const rowElements = tableElement.getElementsByClassName(Const.CLASS_ROW);\n\n  for (let i = 0; i < rowElements.length; i++) {\n    if (rowElements[i].vmo && getEvaluatedId(rowElements[i].vmo) === vmoUid) {\n      let cellElements = rowElements[i].getElementsByClassName(Const.CLASS_CELL);\n\n      for (let j = 0; j < cellElements.length; j++) {\n        if (cellElements[j].columnDef && cellElements[j].columnDef.field === propertyName) {\n          returnCellElements.push(cellElements[j]);\n        }\n      }\n    }\n  }\n\n  return returnCellElements;\n};\n/**\n * Cleans up react components used in table\n * @param {DOMElement} element The root node to cleanup components from\n */\n\n\nexports.cleanupComponents = function (element) {\n  // get the container elements that could potentially have a component\n  // grid cell commands, tree expand/collapse icon, table editor cell\n  const selectors = '.aw-splm-gridCellCommandsContainer, .aw-jswidgets-treeExpandCollapseCmd, .aw-jswidgets-tableEditContainer';\n  unmountComponents(element, selectors);\n};\n/**\n * Create DOMElement based on AngularJS HTML Template for PL Table.\n * - Only single nest HTML description is supported.\n * - When use it inside a cell, it will be recycled automatically by row virtual rendering.\n * - When use it inside a table, it will be recycled when table is getting destroyed.\n *\n * @param {String} htmlContent - The HTML Content/AngularJS Template string needs to compile\n *\n * @param {DOMElement} parentElement - Parent DOMElement in PLTable as Context, could be direct parent or PL Table Element\n *            If parent DOMElement is not in table yet, please use table element.\n *\n * @param {Object} [scopeData] - Arbitrary object to be set as the primary '$scope' (i.e. 'context') of the new\n *            AngularJS controller.\n *\n\n * @param {DeclViewModel} [declViewModel] - The object to set as the 'data' property on the controller's '$scope'.\n *\n * @return {DOMElement} Compiled DOM Element from AngularJS HTML Template input\n */\n\n\nexports.createNgElement = function (htmlContent, parentElement, scopeData, declViewModel) {\n  return undefined;\n};\n/**\n * Destroys and removes the passed in angularJS DOMElement\n *\n * @param {DOMElement} element - DOMElement that has an angular scope\n * */\n\n\nexports.destroyElement = function (element) {\n  ngUtils.destroyElement(element);\n};\n/**\n * Destroys and removes the passed in DOMElements based under input DOM Element\n *\n * @param {DOMElement} element - DOMElement that has  DOM Elements as child elements\n * */\n\n\nexports.destroyChildElements = function (element) {\n  ngUtils.destroyChildElements(element, Const.CLASS_COMPILED_ELEMENT);\n};\n/**\n * revisitme\n * tstark - leave for refactor\n * remove angularism\n * Get AngularJS Scope Variable for Element compiled from AngularJS Template\n *\n * @param {DOMElement} element - DOMElement which is compiled from AngularJS Template.\n *\n * @param {Boolean} isIsolated - if true returns isolate scope.\n *\n * @return {Object} Scope object for specific AngularJS Element\n\nexports.getElementScope = function( element, isIsolated ) {\n    return ngUtils.getElementScope( element, isIsolated );\n};\n */\n\n/**\n * Get width for element text content\n * https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript\n *\n * @param {DOMElement} element - DOMElement in table.\n *\n * @return {Number} Font size as number\n */\n\n\nexports.getElementTextWidth = function (element) {\n  var width = 0;\n  var cloneElem = element.cloneNode(true);\n  cloneElem.style.position = 'absolute';\n  cloneElem.style.visibility = 'hidden';\n  cloneElem.style.height = 'auto';\n  cloneElem.style.width = 'auto';\n  cloneElem.style.whiteSpace = 'nowrap';\n\n  if (element.parentElement) {\n    element.parentElement.appendChild(cloneElem); // Plus 10 blindly for possible container styling\n\n    width = Math.round(cloneElem.clientWidth) + 10;\n    element.parentElement.removeChild(cloneElem);\n  }\n\n  return width;\n};\n/**\n * Create DOM Element with CSS Class Definitions\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createElement = function () {\n  var elem = document.createElement(arguments[0]);\n\n  for (var i = 1; i < arguments.length; i++) {\n    elem.classList.add(arguments[i]);\n  }\n\n  return elem;\n};\n/**\n * Update attribute on DOM element\n *\n * @param {String} elem - DOMElement name.\n * @param {String} attribute -   attribute name.\n * @param {String} attrValue -   attribute value.\n * @return {DOMElement} updated DOMElement\n */\n\n\nexports.addAttributeToDOMElement = function (elem, attribute, attrValue) {\n  var att = document.createAttribute(attribute);\n  att.value = attrValue;\n  elem.setAttributeNode(att);\n  return elem;\n};\n/**\n * Create Color Indicator Element based on vmo information\n *\n * @param {Object} vmo - View model object\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createColorIndicatorElement = function (vmo) {\n  var colorIndicatorElement = null; // Create color indicator element with proper classes\n\n  if (vmo.gridDecoratorStyle) {\n    colorIndicatorElement = exports.createElement('span', vmo.gridDecoratorStyle, Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR);\n  } else {\n    colorIndicatorElement = exports.createElement('span', Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR);\n  } // Add title\n\n\n  if (vmo.colorTitle) {\n    colorIndicatorElement.title = vmo.colorTitle;\n  }\n\n  return colorIndicatorElement;\n};\n/**\n * Create custom event. Mainly for IE\n *\n * @param {String} eventName - Name of the event\n *\n * @param {Object} eventDetail - Object for event detail\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createCustomEvent = function (eventName, eventDetail) {\n  if (browserUtils.isNonEdgeIE) {\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(eventName, false, false, eventDetail);\n    return evt;\n  }\n\n  return new CustomEvent(eventName, {\n    detail: eventDetail\n  });\n};\n/**\n * Get Table Control Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\n\n\nexports.getTableController = function (tableElement) {\n  return exports.getTableInstance(tableElement).controller;\n};\n/**\n * Get Menu Service from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Menu Utils object for current table.\n */\n\n\nexports.getTableMenuService = function (tableElement) {\n  return exports.getTableInstance(tableElement).menuService;\n};\n/**\n * Get Table Instance Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\n\n\nexports.getTableInstance = function (tableElement) {\n  return tableElement._tableInstance;\n};\n/**\n * Returns the isBulkEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table is in bulk editing mode\n */\n\n\nexports.isBulkEditing = function (tableElement) {\n  return exports.getTableInstance(tableElement).isBulkEditing;\n};\n/**\n * Sets the isBulkEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isBulkEditing - the isBulkEditing value\n */\n\n\nexports.setIsBulkEditing = function (tableElement, isBulkEditing) {\n  exports.getTableInstance(tableElement).isBulkEditing = isBulkEditing;\n};\n/**\n * Returns the isCellEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table has cellEditing\n */\n\n\nexports.isCellEditing = function (tableElement) {\n  return exports.getTableInstance(tableElement).isCellEditing;\n};\n/**\n * Sets the isCellEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isCellEditing - the isCellEditing value\n */\n\n\nexports.setIsCellEditing = function (tableElement, isCellEditing) {\n  exports.getTableInstance(tableElement).isCellEditing = isCellEditing;\n};\n/**\n * Create objects with all arguments pass in. No use currently but put it here for a while\n * https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createObjectWithArgs = function (Something) {\n  return function () {\n    var F = function (args) {\n      return Something.apply(this, args);\n    };\n\n    F.prototype = Something.prototype;\n    return function () {\n      return new F(arguments);\n    };\n  }();\n};\n\nexports.showHideElement = function (element, showElement) {\n  if (showElement) {\n    element.classList.remove('hiddenUtility');\n  } else {\n    element.classList.add('hiddenUtility');\n  }\n};\n\nvar getTableAttributes = function (gridOptions) {\n  var rowHeight = gridOptions.rowHeight;\n  var headerHeight = gridOptions.headerHeight;\n  var smallOversize = 56;\n  var mediumOversize = 72;\n  var largeOversize = 88;\n  var results = {\n    isOptionValid: false,\n    rowHeight: null,\n    headerHeight: null,\n    iconCellRendererHeight: null,\n    classes: null\n  };\n\n  switch (rowHeight) {\n    case 'small oversize':\n    case 'LARGE':\n      results.rowHeight = smallOversize;\n      results.iconCellRendererHeight = 48;\n      results.isOptionValid = true;\n      results.classes = rowHeight.split(' ');\n      break;\n\n    case 'medium oversize':\n    case 'XLARGE':\n      results.rowHeight = mediumOversize;\n      results.iconCellRendererHeight = 64;\n      results.isOptionValid = true;\n      results.classes = rowHeight.split(' ');\n      break;\n\n    case 'large oversize':\n    case 'XXLARGE':\n      results.rowHeight = largeOversize;\n      results.iconCellRendererHeight = 80;\n      results.isOptionValid = true;\n      results.classes = rowHeight.split(' ');\n      break;\n  }\n\n  switch (headerHeight) {\n    case 'small oversize':\n    case 'LARGE':\n      results.headerHeight = smallOversize;\n      break;\n\n    case 'medium oversize':\n    case 'XLARGE':\n      results.headerHeight = mediumOversize;\n      break;\n\n    case 'large oversize':\n    case 'XXLARGE':\n      results.headerHeight = largeOversize;\n      break;\n\n    default:\n      if (typeof headerHeight === 'number') {\n        // Custom header height\n        results.headerHeight = headerHeight;\n      } else if (typeof headerHeight === 'string') {\n        let value = parseInt(headerHeight, 10);\n\n        if (!Number.isNaN(value)) {\n          results.headerHeight = value;\n        }\n      }\n\n  }\n\n  return results;\n};\n/**\n * This API accepts configured grid options and validates whether configured grid options are valid or not.\n * Returns true if they are valid and return false if they are not valid.\n * @param {*} gridOptions : grid options configured in splmtable json.\n */\n\n\nexports.validateRowHeightGridOption = function (gridOptions) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.isOptionValid === true) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * This API returns table row height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\n\n\nexports.getTableRowHeight = function (gridOptions, defaultValue) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.rowHeight === null) {\n    return defaultValue;\n  }\n\n  return results.rowHeight;\n};\n/**\n * This API returns table row height for icon cell renderer based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\n\n\nexports.getTableRowHeightForIconCellRenderer = function (gridOptions, defaultValue) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.iconCellRendererHeight === null) {\n    return defaultValue;\n  }\n\n  return results.iconCellRendererHeight;\n};\n/**\n * This API adds class to css class list of the element based on row height grid option.\n * @param {*} element elements in which we need to add css class.\n * @param {*} gridOptions grid options configured in json.\n */\n\n\nexports.addCSSClassForRowHeight = function (element, gridOptions) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.isOptionValid) {\n    var classes = results.classes;\n\n    for (var index = 0; index < classes.length; index++) {\n      element.classList.add(classes[index].toLowerCase());\n    }\n  }\n};\n/**\n * Get number from string\n *\n * @param {String} prop - number string\n *\n * @return {Number} number parse from string\n */\n\n\nexports.numericProperty = function (prop) {\n  var value = !prop ? undefined : parseInt(prop);\n  return isNaN(value) ? undefined : value;\n};\n/**\n *\n * Returns the String CSS class name for the passed in columnName based on the passed in sort criteria\n *\n * @param {Object} columnDef - columnDef object\n *\n * @param { Object } columnProvider - The column provider\n *\n * @return {Object} Object to define sort criteria\n */\n\n\nexports.getSortCriteria = function (columnDef, columnProvider) {\n  var sortCriteria = columnProvider.getSortCriteria();\n\n  var foundCriteria = _.find(sortCriteria, function (o) {\n    return o.fieldName === columnDef.name || o.fieldName === columnDef.field;\n  });\n\n  if (foundCriteria) {\n    return foundCriteria;\n  }\n\n  return {};\n};\n/**\n *\n * Sets the sort criteria on the dataProvider columns\n *\n * @param { Object } columnProvider - The column provider\n *\n * @param { Object } dataProvider - The data provider\n */\n\n\nexports.setSortCriteriaOnColumns = function (columnProvider, dataProvider) {\n  columnProvider.sortCriteria = columnProvider.getSortCriteria();\n  var _length = dataProvider.cols.length;\n\n  for (var i = 0; i < _length; i++) {\n    var columnDef = dataProvider.cols[i];\n    dataProvider.cols[i].sortDirection = exports.getSortCriteria(columnDef, columnProvider).sortDirection;\n  }\n};\n\nexports.getImgURL = function (vmo) {\n  var url = '';\n\n  if (vmo.hasThumbnail) {\n    url = vmo.thumbnailURL;\n  } else if (vmo.typeIconURL) {\n    url = vmo.typeIconURL;\n  } else if (vmo.iconURL) {\n    url = vmo.iconURL;\n  }\n\n  return url;\n};\n/**\n * Syncs the headers for the table to the given scroll left\n *\n * @param {DOMElement} tableElement The table element\n * @param {Boolean} isPin If pinned headers should by synced\n * @param {Number} scrollLeft The scroll left\n */\n\n\nexports.syncHeader = function (_trv, isPin, scrollLeft) {\n  let header = null;\n\n  if (isPin === true) {\n    header = _trv.getPinHeaderElementFromTable();\n  } else {\n    header = _trv.getScrollHeaderElementFromTable();\n  }\n\n  header.style.marginLeft = String(scrollLeft * -1) + 'px';\n}; //----------------------------------------- Vertical Column Headers -----------------------------------------//\n\n/**\n * This API returns table header height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\n\n\nexports.getTableHeaderHeight = function (gridOptions, defaultValue) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.headerHeight === null) {\n    return defaultValue;\n  }\n\n  return results.headerHeight;\n}; //-------------------------------- Expand Pagination In Edit Mode -----------------------------------------//\n\n/**\n * This API returns whether expand or pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nconst isExpandOrPaginationAllowed = function (tableElem) {\n  if (!exports.isBulkEditing(tableElem)) {\n    return true;\n  }\n\n  return exports.isExpandOrPaginationAllowedInEdit(tableElem);\n};\n/**\n * This API returns whether pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nexports.isPaginationAllowed = function (tableElem) {\n  return isExpandOrPaginationAllowed(tableElem);\n};\n/**\n * This API returns whether expand is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nexports.isExpandAllowed = function (tableElem) {\n  return isExpandOrPaginationAllowed(tableElem);\n};\n/**\n * This API returns whether requestStartEdit should be called after pagination.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditPagination = function (tableElem) {\n  return exports.isBulkEditing(tableElem);\n};\n/**\n * This API returns whether requestStartEdit should be called after props have been loaded.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditPropsLoaded = function (tableElem) {\n  return exports.isBulkEditing(tableElem);\n};\n/**\n * This API returns whether requestStartEdit should be called after tree pagination.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditTreePagination = function (tableElem, propertyProvider) {\n  return exports.isBulkEditing(tableElem) && !propertyProvider;\n};\n/**\n * This API returns whether requestStartEdit should be called after tree expand.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} expandedNode : the node that was expanded\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditTreeExpand = function (tableElem, expandedNode, propertyProvider) {\n  return (expandedNode.__expandState || !expandedNode.__expandState && !propertyProvider) && exports.isBulkEditing(tableElem);\n};\n/**\n * This API requests startEdit\n * Publishes the requestStartEdit events when the enableExpandAndPaginationInEdit gridOption is set (AW/Edit Handler)\n * or\n * Calls startEdit on dataProvider or declViewModel when editConfiguration exists (AFX/Edit Config)\n * @param {DOMElement} tableElem : the table element\n */\n\n\nexports.requestStartEdit = function (tableElem) {\n  const tableInstance = exports.getTableInstance(tableElem);\n  const dataProvider = tableInstance.dataProvider;\n  const declViewModel = tableInstance.declViewModel;\n\n  if (tableInstance.gridOptions.enableExpandAndPaginationInEdit === true) {\n    editEventsService.publishStartEditRequested(dataProvider);\n  } else if (dataProvider.getEditConfiguration()) {\n    const dataCtxNode = {\n      data: declViewModel,\n      ctx: appCtxService.ctx\n    };\n    dataProvider.startEdit(dataCtxNode, declViewModel);\n  } else if (declViewModel.getEditConfiguration()) {\n    declViewModel.startEdit();\n  }\n};\n/**\n * This API returns whether expand or pagination is allowed in edit mode.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nexports.isExpandOrPaginationAllowedInEdit = function (tableElem) {\n  const tableInstance = exports.getTableInstance(tableElem);\n\n  if (tableInstance.gridOptions.enableExpandAndPaginationInEdit === true) {\n    return true;\n  } else if (tableInstance.dataProvider.getEditConfiguration() || tableInstance.declViewModel.getEditConfiguration()) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * This API is a helper function for interacting with awTableStateService.\n * @param {String} action the action to perform\n * @return {Object} the result of the action\n */\n\n\nexports.performStateServiceAction = function (action, declViewModel, gridId, node) {\n  if (declViewModel.grids[gridId].gridOptions && declViewModel.grids[gridId].gridOptions.enableExpansionStateCaching === false) {\n    return null;\n  }\n\n  switch (action) {\n    case 'clearAllStates':\n      return awTableStateService.clearAllStates(declViewModel, gridId);\n\n    case 'saveRowExpanded':\n      return awTableStateService.saveRowExpanded(declViewModel, gridId, node);\n\n    case 'saveRowCollapsed':\n      return awTableStateService.saveRowCollapsed(declViewModel, gridId, node);\n\n    case 'getTreeTableState':\n      return awTableStateService.getTreeTableState(declViewModel, gridId);\n\n    case 'isNodeExpanded':\n      {\n        const treeTableState = awTableStateService.getTreeTableState(declViewModel, gridId);\n        return awTableStateService.isNodeExpanded(treeTableState, node);\n      }\n\n    default:\n      return null;\n  }\n};\n/**\n * This API is a helper function to determine if auto save is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if auto save is enabled\n */\n\n\nexports.isAutoSaveEnabled = function (tableElem) {\n  const tableInstance = tableElem._tableInstance;\n\n  if (tableInstance && tableInstance.gridOptions && tableInstance.gridOptions.forceAutoSave === true || appCtxService.getCtx('autoSave') && appCtxService.getCtx('autoSave.dbValue') === true) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * This API is a helper function to determine if prop edit is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if prop edit is enabled\n */\n\n\nexports.isPropEditEnabled = function (tableElem) {\n  const tableInstance = tableElem._tableInstance;\n\n  if (tableInstance && tableInstance.dataProvider && tableInstance.dataProvider.isPropEditEnabled) {\n    return tableInstance.dataProvider.isPropEditEnabled(tableInstance.declViewModel);\n  }\n\n  return false;\n};\n/**\n * Checks to see if row/column header selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has header selection enabled\n */\n\n\nexports.isCellHeaderSelectionEnabled = function (tableElement) {\n  return exports.getTableInstance(tableElement).gridOptions.enableCellHeaderSelection;\n};\n/**\n * Checks to see if column selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has column selection enabled\n */\n\n\nexports.isColumnSelectionEnabled = function (tableElement) {\n  return exports.getTableInstance(tableElement).gridOptions.enableColumnSelection;\n};\n/**\n *\n * Get the column definition from the dataProvider based on column name\n *\n * @param { String } columnName - The column name\n * @param { Object } dataProvider - The data provider\n * @returns { Object } the column def found\n */\n\n\nexports.getColumnDef = function (columnName, dataProvider) {\n  let columnDef = null;\n\n  for (let currentColumn of dataProvider.cols) {\n    if (currentColumn.field === columnName) {\n      columnDef = currentColumn;\n      break;\n    }\n  }\n\n  return columnDef;\n};\n\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableUtils.js"],"names":["exports","htmlUtils","i","node","returnCellElements","cellElements","tableElement","Const","_","cellElement","rowElement","rowElements","getEvaluatedId","j","selectors","unmountComponents","ngUtils","width","cloneElem","element","Math","elem","document","arguments","att","colorIndicatorElement","vmo","browserUtils","evt","detail","eventDetail","F","Something","getTableAttributes","rowHeight","gridOptions","headerHeight","smallOversize","mediumOversize","largeOversize","results","isOptionValid","iconCellRendererHeight","classes","value","parseInt","Number","index","isNaN","sortCriteria","columnProvider","foundCriteria","o","columnDef","_length","dataProvider","url","header","isPin","_trv","String","scrollLeft","isExpandOrPaginationAllowed","expandedNode","tableInstance","declViewModel","editEventsService","dataCtxNode","data","ctx","appCtxService","awTableStateService","treeTableState","tableElem","currentColumn"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmTableUtils\n */\n\nimport _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport awTableStateService from 'js/awTableStateService';\nimport browserUtils from 'js/browserUtils';\nimport { unmountComponents } from 'js/declReactUtils';\nimport editEventsService from 'js/editEventsService';\nimport htmlUtils from 'js/htmlUtils';\nimport ngUtils from 'js/ngUtils';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport Const from 'js/splmTableConstants';\n\nvar exports = {};\n\n/**\n * Locate the closest element including self\n * http://stackoverflow.com/a/24107550/888165\n *\n * @param {DOMElement} element element to start search\n *\n * @param {String} selector css selector to use in locating closest element\n *\n * @param {Int} maxLevelsUp the maximum levels up to search\n *\n * @returns {DOMElement} the closest element\n */\nexports.closestElement = function( element, selector, maxLevelsUp ) {\n    return htmlUtils.closestElement( element, selector, maxLevelsUp );\n};\n\n/**\n * Returns the index of the node in its parent\n *\n * @param {DOMElement} node - The node to find the index of\n *\n * @return {Number} the index of the node\n */\nexports.getIndexInParent = function( node ) {\n    var i = 0;\n    while( node.previousElementSibling ) {\n        node = node.previousElementSibling;\n        i++;\n    }\n    return i;\n};\n\n/**\n * Get all table content cell in specific column.\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {Number} columnIndex - The column index\n *\n * @return {Array} List of DOMElements for table content cells.\n */\nexports.getColumnContentCellElementsByIndex = function( tableElement, columnIndex ) {\n    var returnCellElements = [];\n    var cellElements = tableElement.getElementsByClassName( Const.CLASS_CELL );\n    _.forEach( cellElements, function( cellElement ) {\n        if( cellElement.columnDef ) {\n            if( cellElement.columnDef.index === columnIndex ) {\n                returnCellElements.push( cellElement );\n            }\n        }\n    } );\n\n    return returnCellElements;\n};\n\n/**\n * Get property object/view model for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\nexports.getPropertyByCellElement = function( cellElement ) {\n    var rowElement = exports.closestElement( cellElement, '.' + Const.CLASS_ROW );\n    if( rowElement.vmo && rowElement.vmo.props ) {\n        return rowElement.vmo.props[ cellElement.columnDef.field ];\n    }\n    return null;\n};\n\n/**\n * Get view model object for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\nexports.getViewModelObjectByCellElement = function( cellElement ) {\n    return cellElement.parentElement.vmo;\n};\n\n/**\n * Get cell element by object UID and property name\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {String} propertyName - The property name\n *\n * @param {String} vmoUid - The uid to view model object\n *\n * @return {DOMElement} The DOMElement to table content cell which presents specific property of the vmo.\n */\nexports.getCellElementsByPropertyAndUid = function( tableElement, propertyName, vmoUid ) {\n    let returnCellElements = [];\n    const rowElements = tableElement.getElementsByClassName( Const.CLASS_ROW );\n    for( let i = 0; i < rowElements.length; i++ ) {\n        if( rowElements[ i ].vmo && getEvaluatedId( rowElements[ i ].vmo ) === vmoUid ) {\n            let cellElements = rowElements[ i ].getElementsByClassName( Const.CLASS_CELL );\n            for( let j = 0; j < cellElements.length; j++ ) {\n                if( cellElements[ j ].columnDef && cellElements[ j ].columnDef.field === propertyName ) {\n                    returnCellElements.push( cellElements[ j ] );\n                }\n            }\n        }\n    }\n\n    return returnCellElements;\n};\n\n/**\n * Cleans up react components used in table\n * @param {DOMElement} element The root node to cleanup components from\n */\nexports.cleanupComponents = function( element ) {\n    // get the container elements that could potentially have a component\n    // grid cell commands, tree expand/collapse icon, table editor cell\n    const selectors = '.aw-splm-gridCellCommandsContainer, .aw-jswidgets-treeExpandCollapseCmd, .aw-jswidgets-tableEditContainer';\n    unmountComponents( element, selectors );\n};\n\n/**\n * Create DOMElement based on AngularJS HTML Template for PL Table.\n * - Only single nest HTML description is supported.\n * - When use it inside a cell, it will be recycled automatically by row virtual rendering.\n * - When use it inside a table, it will be recycled when table is getting destroyed.\n *\n * @param {String} htmlContent - The HTML Content/AngularJS Template string needs to compile\n *\n * @param {DOMElement} parentElement - Parent DOMElement in PLTable as Context, could be direct parent or PL Table Element\n *            If parent DOMElement is not in table yet, please use table element.\n *\n * @param {Object} [scopeData] - Arbitrary object to be set as the primary '$scope' (i.e. 'context') of the new\n *            AngularJS controller.\n *\n\n * @param {DeclViewModel} [declViewModel] - The object to set as the 'data' property on the controller's '$scope'.\n *\n * @return {DOMElement} Compiled DOM Element from AngularJS HTML Template input\n */\nexports.createNgElement = function( htmlContent, parentElement, scopeData, declViewModel ) {\n    return undefined;\n};\n\n/**\n * Destroys and removes the passed in angularJS DOMElement\n *\n * @param {DOMElement} element - DOMElement that has an angular scope\n * */\nexports.destroyElement = function( element ) {\n    ngUtils.destroyElement( element );\n};\n\n/**\n * Destroys and removes the passed in DOMElements based under input DOM Element\n *\n * @param {DOMElement} element - DOMElement that has  DOM Elements as child elements\n * */\nexports.destroyChildElements = function( element ) {\n    ngUtils.destroyChildElements( element, Const.CLASS_COMPILED_ELEMENT );\n};\n\n/**\n * revisitme\n * tstark - leave for refactor\n * remove angularism\n * Get AngularJS Scope Variable for Element compiled from AngularJS Template\n *\n * @param {DOMElement} element - DOMElement which is compiled from AngularJS Template.\n *\n * @param {Boolean} isIsolated - if true returns isolate scope.\n *\n * @return {Object} Scope object for specific AngularJS Element\n\nexports.getElementScope = function( element, isIsolated ) {\n    return ngUtils.getElementScope( element, isIsolated );\n};\n */\n\n/**\n * Get width for element text content\n * https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript\n *\n * @param {DOMElement} element - DOMElement in table.\n *\n * @return {Number} Font size as number\n */\nexports.getElementTextWidth = function( element ) {\n    var width = 0;\n    var cloneElem = element.cloneNode( true );\n    cloneElem.style.position = 'absolute';\n    cloneElem.style.visibility = 'hidden';\n    cloneElem.style.height = 'auto';\n    cloneElem.style.width = 'auto';\n    cloneElem.style.whiteSpace = 'nowrap';\n    if( element.parentElement ) {\n        element.parentElement.appendChild( cloneElem );\n        // Plus 10 blindly for possible container styling\n        width = Math.round( cloneElem.clientWidth ) + 10;\n        element.parentElement.removeChild( cloneElem );\n    }\n    return width;\n};\n\n/**\n * Create DOM Element with CSS Class Definitions\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createElement = function() {\n    var elem = document.createElement( arguments[ 0 ] );\n\n    for( var i = 1; i < arguments.length; i++ ) {\n        elem.classList.add( arguments[ i ] );\n    }\n    return elem;\n};\n\n/**\n * Update attribute on DOM element\n *\n * @param {String} elem - DOMElement name.\n * @param {String} attribute -   attribute name.\n * @param {String} attrValue -   attribute value.\n * @return {DOMElement} updated DOMElement\n */\nexports.addAttributeToDOMElement = function( elem, attribute, attrValue ) {\n    var att = document.createAttribute( attribute );\n    att.value = attrValue;\n    elem.setAttributeNode( att );\n    return elem;\n};\n\n/**\n * Create Color Indicator Element based on vmo information\n *\n * @param {Object} vmo - View model object\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createColorIndicatorElement = function( vmo ) {\n    var colorIndicatorElement = null;\n\n    // Create color indicator element with proper classes\n    if( vmo.gridDecoratorStyle ) {\n        colorIndicatorElement = exports.createElement( 'span', vmo.gridDecoratorStyle, Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR );\n    } else {\n        colorIndicatorElement = exports.createElement( 'span', Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR );\n    }\n\n    // Add title\n    if( vmo.colorTitle ) {\n        colorIndicatorElement.title = vmo.colorTitle;\n    }\n\n    return colorIndicatorElement;\n};\n\n/**\n * Create custom event. Mainly for IE\n *\n * @param {String} eventName - Name of the event\n *\n * @param {Object} eventDetail - Object for event detail\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createCustomEvent = function( eventName, eventDetail ) {\n    if( browserUtils.isNonEdgeIE ) {\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( eventName, false, false, eventDetail );\n        return evt;\n    }\n    return new CustomEvent( eventName, {\n        detail: eventDetail\n    } );\n};\n\n/**\n * Get Table Control Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\nexports.getTableController = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).controller;\n};\n\n/**\n * Get Menu Service from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Menu Utils object for current table.\n */\nexports.getTableMenuService = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).menuService;\n};\n\n/**\n * Get Table Instance Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\nexports.getTableInstance = function( tableElement ) {\n    return tableElement._tableInstance;\n};\n\n/**\n * Returns the isBulkEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table is in bulk editing mode\n */\nexports.isBulkEditing = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).isBulkEditing;\n};\n\n/**\n * Sets the isBulkEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isBulkEditing - the isBulkEditing value\n */\nexports.setIsBulkEditing = function( tableElement, isBulkEditing ) {\n    exports.getTableInstance( tableElement ).isBulkEditing = isBulkEditing;\n};\n\n/**\n * Returns the isCellEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table has cellEditing\n */\nexports.isCellEditing = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).isCellEditing;\n};\n\n/**\n * Sets the isCellEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isCellEditing - the isCellEditing value\n */\nexports.setIsCellEditing = function( tableElement, isCellEditing ) {\n    exports.getTableInstance( tableElement ).isCellEditing = isCellEditing;\n};\n\n/**\n * Create objects with all arguments pass in. No use currently but put it here for a while\n * https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createObjectWithArgs = function( Something ) {\n    return ( function() {\n        var F = function( args ) {\n            return Something.apply( this, args );\n        };\n\n        F.prototype = Something.prototype;\n\n        return function() {\n            return new F( arguments );\n        };\n    } )();\n};\n\nexports.showHideElement = function( element, showElement ) {\n    if( showElement ) {\n        element.classList.remove( 'hiddenUtility' );\n    } else {\n        element.classList.add( 'hiddenUtility' );\n    }\n};\n\nvar getTableAttributes = function( gridOptions ) {\n    var rowHeight = gridOptions.rowHeight;\n    var headerHeight = gridOptions.headerHeight;\n    var smallOversize = 56;\n    var mediumOversize = 72;\n    var largeOversize = 88;\n    var results = {\n        isOptionValid: false,\n        rowHeight: null,\n        headerHeight: null,\n        iconCellRendererHeight: null,\n        classes: null\n    };\n    switch ( rowHeight ) {\n        case 'small oversize':\n        case 'LARGE':\n            results.rowHeight = smallOversize;\n            results.iconCellRendererHeight = 48;\n            results.isOptionValid = true;\n            results.classes = rowHeight.split( ' ' );\n            break;\n        case 'medium oversize':\n        case 'XLARGE':\n            results.rowHeight = mediumOversize;\n            results.iconCellRendererHeight = 64;\n            results.isOptionValid = true;\n            results.classes = rowHeight.split( ' ' );\n            break;\n        case 'large oversize':\n        case 'XXLARGE':\n            results.rowHeight = largeOversize;\n            results.iconCellRendererHeight = 80;\n            results.isOptionValid = true;\n            results.classes = rowHeight.split( ' ' );\n            break;\n    }\n\n    switch ( headerHeight ) {\n        case 'small oversize':\n        case 'LARGE':\n            results.headerHeight = smallOversize;\n            break;\n        case 'medium oversize':\n        case 'XLARGE':\n            results.headerHeight = mediumOversize;\n            break;\n        case 'large oversize':\n        case 'XXLARGE':\n            results.headerHeight = largeOversize;\n            break;\n        default:\n            if( typeof headerHeight === 'number' ) {\n                // Custom header height\n                results.headerHeight = headerHeight;\n            } else if( typeof headerHeight === 'string' ) {\n                let value = parseInt( headerHeight, 10 );\n                if( !Number.isNaN( value ) ) {\n                    results.headerHeight = value;\n                }\n            }\n    }\n    return results;\n};\n\n/**\n * This API accepts configured grid options and validates whether configured grid options are valid or not.\n * Returns true if they are valid and return false if they are not valid.\n * @param {*} gridOptions : grid options configured in splmtable json.\n */\nexports.validateRowHeightGridOption = function( gridOptions ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.isOptionValid === true ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * This API returns table row height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\nexports.getTableRowHeight = function( gridOptions, defaultValue ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.rowHeight === null ) {\n        return defaultValue;\n    }\n    return results.rowHeight;\n};\n/**\n * This API returns table row height for icon cell renderer based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\nexports.getTableRowHeightForIconCellRenderer = function( gridOptions, defaultValue ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.iconCellRendererHeight === null ) {\n        return defaultValue;\n    }\n    return results.iconCellRendererHeight;\n};\n\n/**\n * This API adds class to css class list of the element based on row height grid option.\n * @param {*} element elements in which we need to add css class.\n * @param {*} gridOptions grid options configured in json.\n */\nexports.addCSSClassForRowHeight = function( element, gridOptions ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.isOptionValid ) {\n        var classes = results.classes;\n        for( var index = 0; index < classes.length; index++ ) {\n            element.classList.add( classes[ index ].toLowerCase() );\n        }\n    }\n};\n/**\n * Get number from string\n *\n * @param {String} prop - number string\n *\n * @return {Number} number parse from string\n */\nexports.numericProperty = function( prop ) {\n    var value = !prop ? undefined : parseInt( prop );\n    return isNaN( value ) ? undefined : value;\n};\n\n/**\n *\n * Returns the String CSS class name for the passed in columnName based on the passed in sort criteria\n *\n * @param {Object} columnDef - columnDef object\n *\n * @param { Object } columnProvider - The column provider\n *\n * @return {Object} Object to define sort criteria\n */\nexports.getSortCriteria = function( columnDef, columnProvider ) {\n    var sortCriteria = columnProvider.getSortCriteria();\n    var foundCriteria = _.find( sortCriteria, function( o ) {\n        return o.fieldName === columnDef.name || o.fieldName === columnDef.field;\n    } );\n    if( foundCriteria ) {\n        return foundCriteria;\n    }\n    return {};\n};\n\n/**\n *\n * Sets the sort criteria on the dataProvider columns\n *\n * @param { Object } columnProvider - The column provider\n *\n * @param { Object } dataProvider - The data provider\n */\nexports.setSortCriteriaOnColumns = function( columnProvider, dataProvider ) {\n    columnProvider.sortCriteria = columnProvider.getSortCriteria();\n    var _length = dataProvider.cols.length;\n    for( var i = 0; i < _length; i++ ) {\n        var columnDef = dataProvider.cols[ i ];\n        dataProvider.cols[ i ].sortDirection = exports.getSortCriteria( columnDef, columnProvider ).sortDirection;\n    }\n};\n\nexports.getImgURL = function( vmo ) {\n    var url = '';\n    if( vmo.hasThumbnail ) {\n        url = vmo.thumbnailURL;\n    } else if( vmo.typeIconURL ) {\n        url = vmo.typeIconURL;\n    } else if( vmo.iconURL ) {\n        url = vmo.iconURL;\n    }\n\n    return url;\n};\n\n/**\n * Syncs the headers for the table to the given scroll left\n *\n * @param {DOMElement} tableElement The table element\n * @param {Boolean} isPin If pinned headers should by synced\n * @param {Number} scrollLeft The scroll left\n */\nexports.syncHeader = function( _trv, isPin, scrollLeft ) {\n    let header = null;\n    if( isPin === true ) {\n        header = _trv.getPinHeaderElementFromTable();\n    } else {\n        header = _trv.getScrollHeaderElementFromTable();\n    }\n    header.style.marginLeft = String( scrollLeft * -1 ) + 'px';\n};\n\n//----------------------------------------- Vertical Column Headers -----------------------------------------//\n/**\n * This API returns table header height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\nexports.getTableHeaderHeight = function( gridOptions, defaultValue ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.headerHeight === null ) {\n        return defaultValue;\n    }\n    return results.headerHeight;\n};\n\n//-------------------------------- Expand Pagination In Edit Mode -----------------------------------------//\n/**\n * This API returns whether expand or pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nconst isExpandOrPaginationAllowed = function( tableElem ) {\n    if( !exports.isBulkEditing( tableElem ) ) {\n        return true;\n    }\n    return exports.isExpandOrPaginationAllowedInEdit( tableElem );\n};\n\n/**\n * This API returns whether pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nexports.isPaginationAllowed = function( tableElem ) {\n    return isExpandOrPaginationAllowed( tableElem );\n};\n\n/**\n * This API returns whether expand is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nexports.isExpandAllowed = function( tableElem ) {\n    return isExpandOrPaginationAllowed( tableElem );\n};\n\n/**\n * This API returns whether requestStartEdit should be called after pagination.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditPagination = function( tableElem ) {\n    return exports.isBulkEditing( tableElem );\n};\n\n/**\n * This API returns whether requestStartEdit should be called after props have been loaded.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditPropsLoaded = function( tableElem ) {\n    return exports.isBulkEditing( tableElem );\n};\n\n/**\n * This API returns whether requestStartEdit should be called after tree pagination.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditTreePagination = function( tableElem, propertyProvider ) {\n    return exports.isBulkEditing( tableElem ) && !propertyProvider;\n};\n\n/**\n * This API returns whether requestStartEdit should be called after tree expand.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} expandedNode : the node that was expanded\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditTreeExpand = function( tableElem, expandedNode, propertyProvider ) {\n    return ( expandedNode.__expandState || !expandedNode.__expandState && !propertyProvider ) && exports.isBulkEditing( tableElem );\n};\n\n/**\n * This API requests startEdit\n * Publishes the requestStartEdit events when the enableExpandAndPaginationInEdit gridOption is set (AW/Edit Handler)\n * or\n * Calls startEdit on dataProvider or declViewModel when editConfiguration exists (AFX/Edit Config)\n * @param {DOMElement} tableElem : the table element\n */\nexports.requestStartEdit = function( tableElem ) {\n    const tableInstance = exports.getTableInstance( tableElem );\n    const dataProvider = tableInstance.dataProvider;\n    const declViewModel = tableInstance.declViewModel;\n    if( tableInstance.gridOptions.enableExpandAndPaginationInEdit === true ) {\n        editEventsService.publishStartEditRequested( dataProvider );\n    } else if( dataProvider.getEditConfiguration() ) {\n        const dataCtxNode = {\n            data: declViewModel,\n            ctx: appCtxService.ctx\n        };\n        dataProvider.startEdit( dataCtxNode, declViewModel );\n    } else if( declViewModel.getEditConfiguration() ) {\n        declViewModel.startEdit();\n    }\n};\n\n/**\n * This API returns whether expand or pagination is allowed in edit mode.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nexports.isExpandOrPaginationAllowedInEdit = function( tableElem ) {\n    const tableInstance = exports.getTableInstance( tableElem );\n    if( tableInstance.gridOptions.enableExpandAndPaginationInEdit === true ) {\n        return true;\n    } else if( tableInstance.dataProvider.getEditConfiguration() || tableInstance.declViewModel.getEditConfiguration() ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * This API is a helper function for interacting with awTableStateService.\n * @param {String} action the action to perform\n * @return {Object} the result of the action\n */\nexports.performStateServiceAction = function( action, declViewModel, gridId, node ) {\n    if( declViewModel.grids[ gridId ].gridOptions && declViewModel.grids[ gridId ].gridOptions.enableExpansionStateCaching === false ) {\n        return null;\n    }\n\n    switch ( action ) {\n        case 'clearAllStates':\n            return awTableStateService.clearAllStates( declViewModel, gridId );\n        case 'saveRowExpanded':\n            return awTableStateService.saveRowExpanded( declViewModel, gridId, node );\n        case 'saveRowCollapsed':\n            return awTableStateService.saveRowCollapsed( declViewModel, gridId, node );\n        case 'getTreeTableState':\n            return awTableStateService.getTreeTableState( declViewModel, gridId );\n        case 'isNodeExpanded': {\n            const treeTableState = awTableStateService.getTreeTableState( declViewModel, gridId );\n            return awTableStateService.isNodeExpanded( treeTableState, node );\n        }\n        default:\n            return null;\n    }\n};\n\n/**\n * This API is a helper function to determine if auto save is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if auto save is enabled\n */\nexports.isAutoSaveEnabled = function( tableElem ) {\n    const tableInstance = tableElem._tableInstance;\n    if( tableInstance && tableInstance.gridOptions && tableInstance.gridOptions.forceAutoSave === true || appCtxService.getCtx( 'autoSave' ) && appCtxService.getCtx( 'autoSave.dbValue' ) === true ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * This API is a helper function to determine if prop edit is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if prop edit is enabled\n */\nexports.isPropEditEnabled = function( tableElem ) {\n    const tableInstance = tableElem._tableInstance;\n    if( tableInstance && tableInstance.dataProvider && tableInstance.dataProvider.isPropEditEnabled ) {\n        return tableInstance.dataProvider.isPropEditEnabled( tableInstance.declViewModel );\n    }\n    return false;\n};\n\n/**\n * Checks to see if row/column header selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has header selection enabled\n */\nexports.isCellHeaderSelectionEnabled = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).gridOptions.enableCellHeaderSelection;\n};\n\n/**\n * Checks to see if column selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has column selection enabled\n */\nexports.isColumnSelectionEnabled = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).gridOptions.enableColumnSelection;\n};\n\n/**\n *\n * Get the column definition from the dataProvider based on column name\n *\n * @param { String } columnName - The column name\n * @param { Object } dataProvider - The data provider\n * @returns { Object } the column def found\n */\nexports.getColumnDef = function( columnName, dataProvider ) {\n    let columnDef = null;\n    for( let currentColumn of dataProvider.cols ) {\n        if( currentColumn.field === columnName ) {\n            columnDef = currentColumn;\n            break;\n        }\n    }\n    return columnDef;\n};\n\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
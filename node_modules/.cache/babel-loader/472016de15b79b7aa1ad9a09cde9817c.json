{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * This module provides reusable functions related to handling URL manipulation.\n *\n * @module js/browserUtils\n *\n * @publishedApolloService\n */\n\n/**\n * {String} Base URL for the current application's root 'document' without any query or location attributes and (if\n * otherwise valid) with a trailing '/' assured (e.g. 'http://100.100.100.100:8888/awc/').\n */\nvar _cachedBaseURL;\n/**\n * Regular Expression from: https://tools.ietf.org/html/rfc3986#appendix-B\n * <pre>\n * Input:\n * https://www.ics.uci.edu/pub/ietf/uri/?locale=dldl&sbsbs=ddd#Related/fkfkfkf/s/s/\n *\n * Output:\n * Full match   0-80    `https://www.ics.uci.edu/pub/ietf/uri/?locale=dldl&sbsbs=ddd#Related/fkfkfkf/s/s/`\n * Group 1. 0-6 `https:`\n * Group 2. 0-5 `https`\n * Group 3. 6-37    `//www.ics.uci.edu/pub/ietf/uri/`\n * Group 4. 8-37    `www.ics.uci.edu/pub/ietf/uri/`\n * Group 5. 37-37   ``\n * Group 6. 37-59   `?locale=dldl&sbsbs=ddd`\n * Group 7. 38-59   `locale=dldl&sbsbs=ddd`\n * Group 8. 59-80   `#Related/fkfkfkf/s/s/`\n * Group 9. 60-80   `Related/fkfkfkf/s/s/`\n * </pre>\n *\n * @param {String} url -\n *\n * @returns {StringArray} Result\n */\n\n\nfunction _matchUrlGroups(url) {\n  return url.match(/^(([^:?#]+):)?(\\/\\/([^?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/);\n}\n/**\n * Remove the given attribute (and its value) from the specified URL (if it exists).\n *\n * @param {String} urlToEdit - The original URL to evaluate and change.\n * @param {String} attrToRemove - Name of the attribute to remove.\n *\n * @returns {String} The given URL with the specified attribute removed (if it origianlly existed).\n */\n\n\nfunction _removeUrlAttribute(urlToEdit, attrToRemove) {\n  var urlToReturn = urlToEdit;\n\n  if (urlToEdit.indexOf(attrToRemove) !== -1) {\n    var results = _matchUrlGroups(urlToEdit); // Check if we have any search attributes\n\n\n    if (results[7]) {\n      urlToReturn = results[1] + results[3]; // protocol + server w/port\n\n      if (results[6]) {\n        // 'search' attributes\n        var searchAttrs = results[6]; // Check if this attr has a value\n\n        var attrStartNdx = searchAttrs.indexOf(attrToRemove + '=');\n\n        if (attrStartNdx !== -1) {\n          // Find the next attr (or end)\n          var nextAttrStartNdx = searchAttrs.indexOf('&', attrStartNdx);\n          var strToRemove;\n\n          if (nextAttrStartNdx !== -1) {\n            // extract attr and value (without prefix) to be removed (i.e. collapse out)\n            strToRemove = searchAttrs.substring(attrStartNdx, nextAttrStartNdx + 1);\n          } else {\n            // check if we are removing the whole set of 'search' attrs\n            if (attrStartNdx === 1) {\n              strToRemove = searchAttrs;\n            } else {\n              // extract attr and value (with prefix) to be removed\n              strToRemove = searchAttrs.substring(attrStartNdx - 1, searchAttrs.length);\n            }\n          }\n\n          var strWithOutParam = searchAttrs.replace(strToRemove, '');\n          urlToReturn += strWithOutParam;\n        } else {\n          // Non-value case not handled yet var ndx3 = searchAttrs.indexOf( '&', attrStartNdx );\n          urlToReturn += searchAttrs;\n        }\n      }\n\n      if (results[8]) {\n        // hash location\n        urlToReturn += results[8];\n      }\n    }\n  }\n\n  return urlToReturn;\n} // -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n\n\nvar exports = {};\n/**\n * Note: This API is here to allow Jasmine 'spyOn' type testing to act enough like a browser to test these URL\n * functions.\n *\n * @returns {Object} The current 'window.location' object.\n */\n\nexport let getWindowLocation = function () {\n  return window.location;\n};\n/**\n * Note: This API is here to allow jasmine testing to act enough like a browser to test URL functions.\n *\n * @returns {Object} The current 'window.navigator' object.\n */\n\nexport let getWindowNavigator = function () {\n  return window.navigator;\n};\n/**\n * Note: This API is here to allow jasmine testing to act enough like a browser to test URL functions.\n *\n * @param {String} url - The URK value to set as the window's HRef.\n */\n\nexport let setWindowHRef = function (url) {\n  window.location.href = url;\n};\n/**\n *\n * Returns Base URL for the current application\n *\n * @returns {String} Base URL for the current application's root 'document' without any query or location attributes\n *          and (if otherwise valid) with a trailing '/' assured (e.g. 'http://100.100.100.100:8888/awc/').\n */\n\nexport let getBaseURL = function () {\n  if (!_cachedBaseURL) {\n    // strip 'index.html' from end of pathname if present\n    var location = exports.getWindowLocation();\n    var pathname = location.pathname; // IE11 on Windows 10 doesn't have 'location.origin' object, so let's set it\n\n    if (!location.origin) {\n      location.origin = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');\n    }\n\n    _cachedBaseURL = location.origin + pathname.substring(0, pathname.lastIndexOf('/') + 1);\n  }\n\n  return _cachedBaseURL;\n};\n\nvar _navigator = getWindowNavigator();\n/**\n * Checks if browser is IE. TRUE if browser is IE\n */\n\n\nexport let isIE = _navigator.userAgent.search(/(trident|edge)/i) > -1;\n/**\n * Checks if browser is non Edge IE. TRUE if browser is non Edge IE\n */\n\nexport let isNonEdgeIE = /trident/i.test(_navigator.userAgent);\n/**\n * Checks if running on a mobile OS. TRUE if we're currently running on a mobile OS\n */\n\nexport let isMobileOS = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(_navigator.userAgent);\n/**\n * Checks if it is touch device, true if it is touch device\n */\n\nexport let isTouchDevice = 'ontouchstart' in window || navigator.msMaxTouchPoints > 0;\n/**\n * Checks if browser is Firefox. TRUE if browser is Firefox\n */\n\nexport let isFirefox = _navigator.userAgent.search(/firefox/i) > -1;\n/**\n * Checks if browser is Qt. TRUE if browser is Qt\n */\n\nexport let isQt = _navigator.userAgent.search(/QtWebEngine/i) > -1;\n/**\n * Checks if browser is Safari.\n */\n\nexport let isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n/**\n * Returns an object who's properties represent the 'search' attributes of the current $location (or window's URL if\n * _jsniInjector is not initialized).\n * <P>\n * Note: This should only be used if the attributes are needed before angular startup, otherwise use $state.params\n * or $location.search()\n *\n * @return {Object} An object who's properties represent the 'search' attributes of the current $location (or\n *         window's URL if _jsniInjector is not initialized).\n * @ignore\n */\n\nexport let getUrlAttributes = function () {\n  /**\n   * Check if AngularJS has started and _jsniInjector is setup\n   * <P>\n   * If so: use $location.search()\n   */\n  if (window._jsniInjector) {\n    return window._jsniInjector.service('$location').search();\n  }\n\n  return exports.getWindowLocationAttributes();\n};\n/**\n * Returns the browser type and the version of that browser as a string\n *\n * https://stackoverflow.com/questions/2400935/browser-detection-in-javascript\n */\n\nexport let getBrowserType = function () {\n  var ua = navigator.userAgent;\n  var tem = null;\n  var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n\n  if (/trident/i.test(M[1])) {\n    tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n    return 'IE ' + (tem[1] || '');\n  }\n\n  if (M[1] === 'Chrome') {\n    tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n\n    if (tem !== null) {\n      return tem.slice(1).join(' ').replace('OPR', 'Opera');\n    }\n  }\n\n  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\n\n  if ((tem = ua.match(/version\\/(\\d+)/i)) !== null) {\n    M.splice(1, 1, tem[1]);\n  }\n\n  return M.join(' ');\n};\n/**\n * Returns an object who's properties represent the 'search' attributes of the current window's URL.\n * <P>\n * Note: These attributes are only the ones BEFORE the '#' in the URL. All attributes AFTER the '#' are accessed by\n * using the $state.params or $location.search()\n *\n * @return {Object} An object who's properties represent the 'search' attributes of the current window's URL.\n */\n\nexport let getWindowLocationAttributes = function () {\n  var retAttr = {};\n  var location = exports.getWindowLocation();\n\n  if (location.search) {\n    var paramPairs = location.search.substring(1).split('&');\n    paramPairs.forEach(function (paramString) {\n      var param = paramString.split('=');\n\n      if (param.length === 1) {\n        retAttr[param[0]] = '';\n      } else {\n        retAttr[param[0]] = decodeURIComponent(param[1]);\n      }\n    });\n  }\n\n  return retAttr;\n};\n/**\n * Updates the URL with locale information\n *\n * @param {String} newLocale - The locale value which needs to be set e.g. 'en_US'\n */\n\nexport let updateBrowserUrl = function (newLocale) {\n  if (newLocale) {\n    var location = exports.getWindowLocation();\n\n    var newHRef = _removeUrlAttribute(location.href, 'locale');\n\n    var results = _matchUrlGroups(newHRef); // Build up the protocol and location portion\n\n\n    var newUrl = results[1] + results[3]; // Check if we already have some search attributes (or not)\n\n    if (results[6]) {\n      newUrl += results[6];\n      newUrl += '&locale=';\n      newUrl += newLocale;\n    } else {\n      newUrl += '?locale=';\n      newUrl += newLocale;\n    } // Add back the hash portion (if necessary)\n\n\n    if (results[8]) {\n      newUrl += results[8];\n    }\n\n    exports.setWindowHRef(newUrl);\n  }\n};\n/**\n * Remove the given named attribute from the 'search' area (i.e. URL attributes before the '#') of the browser's\n * current URL.\n *\n * @param {String} attrToRemove - Name of the attribute to remove.\n */\n\nexport let removeUrlAttribute = function (attrToRemove) {\n  if (attrToRemove) {\n    var location = exports.getWindowLocation();\n\n    var newHRef = _removeUrlAttribute(location.href, attrToRemove);\n\n    if (newHRef !== location.href) {\n      exports.setWindowHRef(newHRef);\n    }\n  }\n};\n/**\n * Attach script to the document.\n * If script is already attached to DOM then just call onload callback\n *\n * @param {String} src - source path of the script.\n * @param {String} onLoadCallback - on load callback\n */\n\nexport let attachScriptToDocument = function (src, onLoadCallback) {\n  var scriptElement = document.querySelector(`script[src=\"${src}\"]`);\n\n  if (scriptElement) {\n    onLoadCallback();\n  } else {\n    scriptElement = document.createElement('script');\n    scriptElement.type = 'text/javascript';\n    scriptElement.src = src;\n    document.head.appendChild(scriptElement);\n\n    scriptElement.onload = function () {\n      onLoadCallback();\n    };\n  }\n};\nexports = {\n  getWindowLocation,\n  getWindowNavigator,\n  setWindowHRef,\n  getBaseURL,\n  isIE,\n  isNonEdgeIE,\n  isMobileOS,\n  isTouchDevice,\n  isFirefox,\n  isQt,\n  isSafari,\n  getUrlAttributes,\n  getBrowserType,\n  getWindowLocationAttributes,\n  updateBrowserUrl,\n  removeUrlAttribute,\n  attachScriptToDocument\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/browserUtils.js"],"names":["url","urlToReturn","urlToEdit","results","_matchUrlGroups","searchAttrs","attrStartNdx","attrToRemove","nextAttrStartNdx","strToRemove","strWithOutParam","exports","getWindowLocation","window","getWindowNavigator","setWindowHRef","getBaseURL","location","pathname","_cachedBaseURL","_navigator","isIE","isNonEdgeIE","isMobileOS","isTouchDevice","navigator","isFirefox","isQt","isSafari","getUrlAttributes","getBrowserType","ua","tem","M","getWindowLocationAttributes","retAttr","paramPairs","param","paramString","decodeURIComponent","updateBrowserUrl","newHRef","_removeUrlAttribute","newUrl","removeUrlAttribute","attachScriptToDocument","scriptElement","document","src","onLoadCallback"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * This module provides reusable functions related to handling URL manipulation.\n *\n * @module js/browserUtils\n *\n * @publishedApolloService\n */\n\n/**\n * {String} Base URL for the current application's root 'document' without any query or location attributes and (if\n * otherwise valid) with a trailing '/' assured (e.g. 'http://100.100.100.100:8888/awc/').\n */\nvar _cachedBaseURL;\n\n/**\n * Regular Expression from: https://tools.ietf.org/html/rfc3986#appendix-B\n * <pre>\n * Input:\n * https://www.ics.uci.edu/pub/ietf/uri/?locale=dldl&sbsbs=ddd#Related/fkfkfkf/s/s/\n *\n * Output:\n * Full match   0-80    `https://www.ics.uci.edu/pub/ietf/uri/?locale=dldl&sbsbs=ddd#Related/fkfkfkf/s/s/`\n * Group 1. 0-6 `https:`\n * Group 2. 0-5 `https`\n * Group 3. 6-37    `//www.ics.uci.edu/pub/ietf/uri/`\n * Group 4. 8-37    `www.ics.uci.edu/pub/ietf/uri/`\n * Group 5. 37-37   ``\n * Group 6. 37-59   `?locale=dldl&sbsbs=ddd`\n * Group 7. 38-59   `locale=dldl&sbsbs=ddd`\n * Group 8. 59-80   `#Related/fkfkfkf/s/s/`\n * Group 9. 60-80   `Related/fkfkfkf/s/s/`\n * </pre>\n *\n * @param {String} url -\n *\n * @returns {StringArray} Result\n */\nfunction _matchUrlGroups( url ) {\n    return url.match( /^(([^:?#]+):)?(\\/\\/([^?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/ );\n}\n\n/**\n * Remove the given attribute (and its value) from the specified URL (if it exists).\n *\n * @param {String} urlToEdit - The original URL to evaluate and change.\n * @param {String} attrToRemove - Name of the attribute to remove.\n *\n * @returns {String} The given URL with the specified attribute removed (if it origianlly existed).\n */\nfunction _removeUrlAttribute( urlToEdit, attrToRemove ) {\n    var urlToReturn = urlToEdit;\n\n    if( urlToEdit.indexOf( attrToRemove ) !== -1 ) {\n        var results = _matchUrlGroups( urlToEdit );\n\n        // Check if we have any search attributes\n        if( results[ 7 ] ) {\n            urlToReturn = results[ 1 ] + results[ 3 ]; // protocol + server w/port\n\n            if( results[ 6 ] ) { // 'search' attributes\n                var searchAttrs = results[ 6 ];\n\n                // Check if this attr has a value\n                var attrStartNdx = searchAttrs.indexOf( attrToRemove + '=' );\n\n                if( attrStartNdx !== -1 ) {\n                    // Find the next attr (or end)\n                    var nextAttrStartNdx = searchAttrs.indexOf( '&', attrStartNdx );\n\n                    var strToRemove;\n\n                    if( nextAttrStartNdx !== -1 ) {\n                        // extract attr and value (without prefix) to be removed (i.e. collapse out)\n                        strToRemove = searchAttrs.substring( attrStartNdx, nextAttrStartNdx + 1 );\n                    } else {\n                        // check if we are removing the whole set of 'search' attrs\n                        if( attrStartNdx === 1 ) {\n                            strToRemove = searchAttrs;\n                        } else {\n                            // extract attr and value (with prefix) to be removed\n                            strToRemove = searchAttrs.substring( attrStartNdx - 1, searchAttrs.length );\n                        }\n                    }\n\n                    var strWithOutParam = searchAttrs.replace( strToRemove, '' );\n\n                    urlToReturn += strWithOutParam;\n                } else {\n                    // Non-value case not handled yet var ndx3 = searchAttrs.indexOf( '&', attrStartNdx );\n\n                    urlToReturn += searchAttrs;\n                }\n            }\n\n            if( results[ 8 ] ) { // hash location\n                urlToReturn += results[ 8 ];\n            }\n        }\n    }\n\n    return urlToReturn;\n}\n\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n\nvar exports = {};\n\n/**\n * Note: This API is here to allow Jasmine 'spyOn' type testing to act enough like a browser to test these URL\n * functions.\n *\n * @returns {Object} The current 'window.location' object.\n */\nexport let getWindowLocation = function() {\n    return window.location;\n};\n\n/**\n * Note: This API is here to allow jasmine testing to act enough like a browser to test URL functions.\n *\n * @returns {Object} The current 'window.navigator' object.\n */\nexport let getWindowNavigator = function() {\n    return window.navigator;\n};\n\n/**\n * Note: This API is here to allow jasmine testing to act enough like a browser to test URL functions.\n *\n * @param {String} url - The URK value to set as the window's HRef.\n */\nexport let setWindowHRef = function( url ) {\n    window.location.href = url;\n};\n\n/**\n *\n * Returns Base URL for the current application\n *\n * @returns {String} Base URL for the current application's root 'document' without any query or location attributes\n *          and (if otherwise valid) with a trailing '/' assured (e.g. 'http://100.100.100.100:8888/awc/').\n */\nexport let getBaseURL = function() {\n    if( !_cachedBaseURL ) {\n        // strip 'index.html' from end of pathname if present\n        var location = exports.getWindowLocation();\n\n        var pathname = location.pathname;\n\n        // IE11 on Windows 10 doesn't have 'location.origin' object, so let's set it\n        if( !location.origin ) {\n            location.origin = location.protocol + '//' + location.hostname +\n                ( location.port ? ':' + location.port : '' );\n        }\n\n        _cachedBaseURL = location.origin + pathname.substring( 0, pathname.lastIndexOf( '/' ) + 1 );\n    }\n\n    return _cachedBaseURL;\n};\n\nvar _navigator = getWindowNavigator();\n\n/**\n * Checks if browser is IE. TRUE if browser is IE\n */\nexport let isIE = _navigator.userAgent.search( /(trident|edge)/i ) > -1;\n\n/**\n * Checks if browser is non Edge IE. TRUE if browser is non Edge IE\n */\nexport let isNonEdgeIE = /trident/i.test( _navigator.userAgent );\n\n/**\n * Checks if running on a mobile OS. TRUE if we're currently running on a mobile OS\n */\nexport let isMobileOS = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( _navigator.userAgent );\n\n/**\n * Checks if it is touch device, true if it is touch device\n */\nexport let isTouchDevice = 'ontouchstart' in window || navigator.msMaxTouchPoints > 0;\n\n/**\n * Checks if browser is Firefox. TRUE if browser is Firefox\n */\nexport let isFirefox = _navigator.userAgent.search( /firefox/i ) > -1;\n\n/**\n * Checks if browser is Qt. TRUE if browser is Qt\n */\nexport let isQt = _navigator.userAgent.search( /QtWebEngine/i ) > -1;\n\n/**\n * Checks if browser is Safari.\n */\nexport let isSafari = /^((?!chrome|android).)*safari/i.test( navigator.userAgent );\n\n/**\n * Returns an object who's properties represent the 'search' attributes of the current $location (or window's URL if\n * _jsniInjector is not initialized).\n * <P>\n * Note: This should only be used if the attributes are needed before angular startup, otherwise use $state.params\n * or $location.search()\n *\n * @return {Object} An object who's properties represent the 'search' attributes of the current $location (or\n *         window's URL if _jsniInjector is not initialized).\n * @ignore\n */\nexport let getUrlAttributes = function() {\n    /**\n     * Check if AngularJS has started and _jsniInjector is setup\n     * <P>\n     * If so: use $location.search()\n     */\n    if( window._jsniInjector ) {\n        return window._jsniInjector.service( '$location' ).search();\n    }\n\n    return exports.getWindowLocationAttributes();\n};\n\n/**\n * Returns the browser type and the version of that browser as a string\n *\n * https://stackoverflow.com/questions/2400935/browser-detection-in-javascript\n */\nexport let getBrowserType = function() {\n    var ua = navigator.userAgent;\n    var tem = null;\n    var M = ua.match( /(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i ) || [];\n    if( /trident/i.test( M[ 1 ] ) ) {\n        tem = /\\brv[ :]+(\\d+)/g.exec( ua ) || [];\n        return 'IE ' + ( tem[ 1 ] || '' );\n    }\n    if( M[ 1 ] === 'Chrome' ) {\n        tem = ua.match( /\\b(OPR|Edge)\\/(\\d+)/ );\n        if( tem !== null ) {\n            return tem.slice( 1 ).join( ' ' ).replace( 'OPR', 'Opera' );\n        }\n    }\n    M = M[ 2 ] ? [ M[ 1 ], M[ 2 ] ] : [ navigator.appName, navigator.appVersion, '-?' ];\n    if( ( tem = ua.match( /version\\/(\\d+)/i ) ) !== null ) {\n        M.splice( 1, 1, tem[ 1 ] );\n    }\n    return M.join( ' ' );\n};\n\n/**\n * Returns an object who's properties represent the 'search' attributes of the current window's URL.\n * <P>\n * Note: These attributes are only the ones BEFORE the '#' in the URL. All attributes AFTER the '#' are accessed by\n * using the $state.params or $location.search()\n *\n * @return {Object} An object who's properties represent the 'search' attributes of the current window's URL.\n */\nexport let getWindowLocationAttributes = function() {\n    var retAttr = {};\n\n    var location = exports.getWindowLocation();\n\n    if( location.search ) {\n        var paramPairs = location.search.substring( 1 ).split( '&' );\n\n        paramPairs.forEach( function( paramString ) {\n            var param = paramString.split( '=' );\n\n            if( param.length === 1 ) {\n                retAttr[ param[ 0 ] ] = '';\n            } else {\n                retAttr[ param[ 0 ] ] = decodeURIComponent( param[ 1 ] );\n            }\n        } );\n    }\n\n    return retAttr;\n};\n\n/**\n * Updates the URL with locale information\n *\n * @param {String} newLocale - The locale value which needs to be set e.g. 'en_US'\n */\nexport let updateBrowserUrl = function( newLocale ) {\n    if( newLocale ) {\n        var location = exports.getWindowLocation();\n\n        var newHRef = _removeUrlAttribute( location.href, 'locale' );\n\n        var results = _matchUrlGroups( newHRef );\n\n        // Build up the protocol and location portion\n        var newUrl = results[ 1 ] + results[ 3 ];\n\n        // Check if we already have some search attributes (or not)\n        if( results[ 6 ] ) {\n            newUrl += results[ 6 ];\n            newUrl += '&locale=';\n            newUrl += newLocale;\n        } else {\n            newUrl += '?locale=';\n            newUrl += newLocale;\n        }\n\n        // Add back the hash portion (if necessary)\n        if( results[ 8 ] ) {\n            newUrl += results[ 8 ];\n        }\n\n        exports.setWindowHRef( newUrl );\n    }\n};\n\n/**\n * Remove the given named attribute from the 'search' area (i.e. URL attributes before the '#') of the browser's\n * current URL.\n *\n * @param {String} attrToRemove - Name of the attribute to remove.\n */\nexport let removeUrlAttribute = function( attrToRemove ) {\n    if( attrToRemove ) {\n        var location = exports.getWindowLocation();\n\n        var newHRef = _removeUrlAttribute( location.href, attrToRemove );\n\n        if( newHRef !== location.href ) {\n            exports.setWindowHRef( newHRef );\n        }\n    }\n};\n\n/**\n * Attach script to the document.\n * If script is already attached to DOM then just call onload callback\n *\n * @param {String} src - source path of the script.\n * @param {String} onLoadCallback - on load callback\n */\nexport let attachScriptToDocument = function( src, onLoadCallback ) {\n    var scriptElement = document.querySelector( `script[src=\"${src}\"]` );\n    if( scriptElement ) {\n        onLoadCallback();\n    } else {\n        scriptElement = document.createElement( 'script' );\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = src;\n        document.head.appendChild( scriptElement );\n        scriptElement.onload = function() {\n            onLoadCallback();\n        };\n    }\n};\n\nexports = {\n    getWindowLocation,\n    getWindowNavigator,\n    setWindowHRef,\n    getBaseURL,\n    isIE,\n    isNonEdgeIE,\n    isMobileOS,\n    isTouchDevice,\n    isFirefox,\n    isQt,\n    isSafari,\n    getUrlAttributes,\n    getBrowserType,\n    getWindowLocationAttributes,\n    updateBrowserUrl,\n    removeUrlAttribute,\n    attachScriptToDocument\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
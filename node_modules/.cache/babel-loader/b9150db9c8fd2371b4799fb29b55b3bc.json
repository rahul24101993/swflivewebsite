{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwCommandListService.js\",\n    _this = this;\n\n// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandListService\n */\nimport AwCommand from 'viewmodel/AwCommandViewModel';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';\n/**\n * Popup configuration for the overflow popup on command bars\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst overflowPopupOptions = {\n  advancePositioning: true,\n  autoFocus: true,\n  clickOutsideToClose: true,\n  closeWhenEsc: true,\n  flipBehavior: 'opposite',\n  resizeContainer: 'div.aw-layout-popup',\n  selectedElementCSS: '.aw-state-selected',\n  toggleMode: true,\n  whenParentScrolls: 'follow'\n};\n/**\n * Get class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */\n\nconst getCommandLabelClass = showCommandLabels => {\n  if (showCommandLabels === false) {\n    return 'aw-commands-noLabel';\n  }\n\n  if (showCommandLabels === true) {\n    return 'aw-commands-showIconLabel';\n  } //No override, use the global show/hide\n\n\n  return '';\n};\n/**\n * Get where the extended tooltip for the overflow button should be positioned\n *\n * @param {String} alignment Alignment\n * @returns {String} Extended tooltip position\n */\n\n\nconst getTooltipPlacement = function (alignment) {\n  var placement = 'top';\n\n  if (alignment === 'VERTICAL') {\n    placement = 'left';\n  }\n\n  return placement;\n};\n\nexport const awCommandListRenderFunction = _ref => {\n  let {\n    alignment,\n    visibilityLoader,\n    commandContext,\n    anchor,\n    ctxMin: {\n      commandDisplays: cd\n    },\n    className,\n    showCommandLabels,\n    elementRefList,\n    overflow,\n    hideMore,\n    trace = () => null,\n    reverse = false,\n    actions: {\n      overflowPopup\n    },\n    i18n,\n    viewModel: {\n      _observer,\n      _overflownCommands\n    }\n  } = _ref;\n  const commandDisplays = reverse ? cd.reverse() : cd;\n  const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';\n  const commandLabelsClass = getCommandLabelClass(showCommandLabels); //The element used to determine overflow\n\n  const commandBarMain = elementRefList.get('commandBarMain');\n  let overflownCommandsCount = 0;\n  const visibleCommands = commandDisplays.filter(x => {\n    if (x.visible) {\n      _overflownCommands[x.id] && overflownCommandsCount++;\n      return true;\n    }\n\n    return null;\n  });\n  trace(`${visibleCommands.length} commands are visible, computing command overflow`);\n  const hasOverflow = overflownCommandsCount > 0;\n  const noOverflowCls = !hasOverflow ? 'aw-no-overflow' : 'aw-use-commandOverflow';\n  trace('Non overflow command count', visibleCommands.length - overflownCommandsCount, 'has overflow', hasOverflow);\n  /**\n   * Callback for when a command within the overflow popup is clicked\n   *\n   * @param {Boolean} hasPopup Whether the command that was clicked will open a popup\n   */\n\n  const childCommandClickCallback = hasPopup => {\n    if (hasPopup !== true) {\n      overflowPopup.hide();\n    }\n  };\n  /**\n   * Get a click handler for the command overflow button\n   *\n   * @returns {Function} Click handler\n   */\n\n\n  const getOverflowClickHandler = () => {\n    return e => {\n      e.stopPropagation();\n\n      if (overflowPopup.open) {\n        overflowPopup.hide();\n      } else {\n        overflowPopup.show({ ...overflowPopupOptions,\n          placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'\n        });\n      }\n    };\n  };\n  /**\n   * Render the extended tooltip for the overflow button\n   *\n   * @returns {JSX} Extended tooltip element\n   */\n\n\n  const renderOverflowExtendedTooltip = () => {\n    return /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: overflowPopup.reference,\n      extendedTooltipContext: {\n        title: i18n.MORE_BUTTON_TITLE\n      },\n      extendedTooltipOptions: {\n        isCommand: true,\n        placement: getTooltipPlacement(alignment)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 16\n    }, this);\n  };\n  /**\n   * Render the horizontal overflow toggle button\n   *\n   * @returns {JSX} Horizontal overflow element\n   */\n\n\n  const renderHorizontalOverflowButton = () => {\n    const overflowClickHandler = getOverflowClickHandler();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-toolbarIcon aw-commands-moreButton\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `aw-commands-commandToolbarIconButton aw-use-commandOverflow ${overflowPopup.open ? 'aw-state-selected' : ''}`,\n        title: i18n.MORE_BUTTON_TITLE,\n        \"aria-label\": i18n.MORE_BUTTON_TITLE,\n        onClick: overflowClickHandler,\n        ref: overflowPopup.reference,\n        children: /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: 'cmdMore',\n          className: 'aw-commands-svg'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), renderOverflowExtendedTooltip()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 16\n    }, this);\n  };\n  /**\n   * Render the vertical overflow toggle button\n   *\n   * @returns {JSX} Horizontal overflow element\n   */\n\n\n  const renderVerticalOverflowButton = () => {\n    const overflowLabel = overflowPopup.open ? i18n.LESS_LINK_TEXT : i18n.MORE_LINK_TEXT;\n    const overflowClickHandler = getOverflowClickHandler();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-command-overflowIcon\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `aw-commands-commandIconButton aw-commands-commandWrapperVertical ${overflowPopup.open ? 'aw-state-selected' : ''}`,\n        title: overflowLabel,\n        \"aria-label\": overflowLabel,\n        onClick: overflowClickHandler,\n        ref: overflowPopup.reference,\n        children: [/*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: 'miscChevronDown',\n          className: `aw-commands-svg ${overflowPopup.open ? 'aw-icon-rotate' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commands-commandIconButtonText\",\n          children: overflowLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), renderOverflowExtendedTooltip()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 16\n    }, this);\n  };\n\n  const getOverflownCommands = () => {\n    return visibleCommands.filter(command => {\n      if (command && _overflownCommands[command.id]) {\n        return true;\n      }\n\n      return null;\n    });\n  };\n  /**\n   * Render the overflow popup content\n   *\n   * @returns {JSX} content\n   */\n\n\n  const renderOverflowPopupContent = () => {\n    return overflowPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...overflowPopup.options,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-popup-command-bar\",\n        children: getOverflownCommands().map(command => /*#__PURE__*/_jsxDEV(AwPopupCommandCell, {\n          commandContext: commandContext,\n          command: command,\n          alignment: alignment,\n          visibilityLoader: visibilityLoader,\n          overflow: true,\n          childCommandClickCallback: childCommandClickCallback\n        }, command && command.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 38\n    }, this);\n  };\n\n  const isOverflowenabled = (alignment === 'HORIZONTAL' || !alignment) && overflow !== true ? null : true;\n\n  const renderCommands = function () {\n    let disableOverflow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return visibleCommands.map(command => /*#__PURE__*/_jsxDEV(AwCommand, {\n      commandContext: commandContext,\n      command: command,\n      alignment: alignment,\n      visibilityLoader: visibilityLoader,\n      overflow: _overflownCommands[command.id] ? true : null,\n      commandObserver: disableOverflow ? null : _observer\n    }, command && command.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, _this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `aw-command-bar ${alignmentCls} ${overflow ? 'aw-use-commandOverflow' : ''}`,\n    anchor: anchor,\n    ref: commandBarMain,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `aw-commands-wrapper ${commandLabelsClass} ${noOverflowCls}`,\n      children: [isOverflowenabled && _observer && renderCommands(), !isOverflowenabled && renderCommands(true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), hasOverflow && !hideMore && alignment === 'VERTICAL' ? renderVerticalOverflowButton() : null, hasOverflow && !hideMore && alignment !== 'VERTICAL' ? renderHorizontalOverflowButton() : null, renderOverflowPopupContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["AwCommand","AwExtendedTooltip","AwIcon","AwPopup","AwPopupCommandCell","overflowPopupOptions","advancePositioning","autoFocus","clickOutsideToClose","closeWhenEsc","flipBehavior","resizeContainer","selectedElementCSS","toggleMode","whenParentScrolls","getCommandLabelClass","showCommandLabels","getTooltipPlacement","alignment","placement","awCommandListRenderFunction","visibilityLoader","commandContext","anchor","ctxMin","commandDisplays","cd","className","elementRefList","overflow","hideMore","trace","reverse","actions","overflowPopup","i18n","viewModel","_observer","_overflownCommands","alignmentCls","commandLabelsClass","commandBarMain","get","overflownCommandsCount","visibleCommands","filter","x","visible","id","length","hasOverflow","noOverflowCls","childCommandClickCallback","hasPopup","hide","getOverflowClickHandler","e","stopPropagation","open","show","renderOverflowExtendedTooltip","reference","title","MORE_BUTTON_TITLE","isCommand","renderHorizontalOverflowButton","overflowClickHandler","renderVerticalOverflowButton","overflowLabel","LESS_LINK_TEXT","MORE_LINK_TEXT","getOverflownCommands","command","renderOverflowPopupContent","options","map","isOverflowenabled","renderCommands","disableOverflow"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwCommandListService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandListService\n */\nimport AwCommand from 'viewmodel/AwCommandViewModel';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';\n\n/**\n * Popup configuration for the overflow popup on command bars\n */\nconst overflowPopupOptions = {\n    advancePositioning: true,\n    autoFocus: true,\n    clickOutsideToClose: true,\n    closeWhenEsc: true,\n    flipBehavior: 'opposite',\n    resizeContainer: 'div.aw-layout-popup',\n    selectedElementCSS: '.aw-state-selected',\n    toggleMode: true,\n    whenParentScrolls: 'follow'\n};\n\n/**\n * Get class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */\nconst getCommandLabelClass = ( showCommandLabels ) => {\n    if( showCommandLabels === false ) {\n        return 'aw-commands-noLabel';\n    }\n    if( showCommandLabels === true ) {\n        return 'aw-commands-showIconLabel';\n    }\n    //No override, use the global show/hide\n    return '';\n};\n\n/**\n * Get where the extended tooltip for the overflow button should be positioned\n *\n * @param {String} alignment Alignment\n * @returns {String} Extended tooltip position\n */\nconst getTooltipPlacement = function( alignment ) {\n    var placement = 'top';\n    if( alignment === 'VERTICAL' ) {\n        placement = 'left';\n    }\n    return placement;\n};\n\nexport const awCommandListRenderFunction = ( { alignment, visibilityLoader, commandContext, anchor, ctxMin: { commandDisplays: cd },\n    className, showCommandLabels, elementRefList, overflow, hideMore, trace = () => null, reverse = false,\n    actions: { overflowPopup }, i18n, viewModel: { _observer, _overflownCommands } } ) => {\n    const commandDisplays = reverse ? cd.reverse() : cd;\n    const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';\n    const commandLabelsClass =  getCommandLabelClass( showCommandLabels );\n    //The element used to determine overflow\n    const commandBarMain = elementRefList.get( 'commandBarMain' );\n    let overflownCommandsCount = 0;\n    const visibleCommands = commandDisplays.filter( x => {\n        if ( x.visible ) {\n            _overflownCommands[ x.id ] && overflownCommandsCount++;\n            return true;\n        }\n        return null;\n    } );\n    trace( `${visibleCommands.length} commands are visible, computing command overflow` );\n\n    const hasOverflow = overflownCommandsCount > 0;\n    const noOverflowCls = !hasOverflow ? 'aw-no-overflow' : 'aw-use-commandOverflow';\n    trace( 'Non overflow command count', visibleCommands.length - overflownCommandsCount, 'has overflow', hasOverflow );\n\n    /**\n     * Callback for when a command within the overflow popup is clicked\n     *\n     * @param {Boolean} hasPopup Whether the command that was clicked will open a popup\n     */\n    const childCommandClickCallback = ( hasPopup ) => {\n        if( hasPopup !== true ) {\n            overflowPopup.hide();\n        }\n    };\n\n    /**\n     * Get a click handler for the command overflow button\n     *\n     * @returns {Function} Click handler\n     */\n    const getOverflowClickHandler = () => {\n        return ( e ) => {\n            e.stopPropagation();\n            if( overflowPopup.open ) {\n                overflowPopup.hide();\n            } else {\n                overflowPopup.show( {\n                    ...overflowPopupOptions,\n                    placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'\n                } );\n            }\n        };\n    };\n\n    /**\n     * Render the extended tooltip for the overflow button\n     *\n     * @returns {JSX} Extended tooltip element\n     */\n    const renderOverflowExtendedTooltip = () => {\n        return <AwExtendedTooltip\n            reference={overflowPopup.reference}\n            extendedTooltipContext={{ title: i18n.MORE_BUTTON_TITLE }}\n            extendedTooltipOptions={{ isCommand: true, placement : getTooltipPlacement( alignment ) }}>\n        </AwExtendedTooltip>;\n    };\n\n    /**\n     * Render the horizontal overflow toggle button\n     *\n     * @returns {JSX} Horizontal overflow element\n     */\n    const renderHorizontalOverflowButton = () => {\n        const overflowClickHandler = getOverflowClickHandler( );\n        return <div className='aw-toolbarIcon aw-commands-moreButton'>\n            <button type='button'\n                className={`aw-commands-commandToolbarIconButton aw-use-commandOverflow ${ overflowPopup.open ? 'aw-state-selected' : '' }`}\n                title={i18n.MORE_BUTTON_TITLE}\n                aria-label={i18n.MORE_BUTTON_TITLE}\n                onClick={overflowClickHandler}\n                ref={overflowPopup.reference}>\n                <AwIcon iconId={'cmdMore'} className={'aw-commands-svg'}></AwIcon>\n            </button>\n            { renderOverflowExtendedTooltip() }\n        </div>;\n    };\n\n    /**\n     * Render the vertical overflow toggle button\n     *\n     * @returns {JSX} Horizontal overflow element\n     */\n    const renderVerticalOverflowButton = () => {\n        const overflowLabel = overflowPopup.open ? i18n.LESS_LINK_TEXT : i18n.MORE_LINK_TEXT;\n        const overflowClickHandler = getOverflowClickHandler();\n        return <div className='aw-command-overflowIcon'>\n            <button type='button'\n                className={`aw-commands-commandIconButton aw-commands-commandWrapperVertical ${ overflowPopup.open ? 'aw-state-selected' : '' }`}\n                title={overflowLabel}\n                aria-label={overflowLabel}\n                onClick={overflowClickHandler}\n                ref={overflowPopup.reference}>\n                <AwIcon iconId={'miscChevronDown'} className={`aw-commands-svg ${overflowPopup.open ? 'aw-icon-rotate' : ''}`}></AwIcon>\n                <div className='aw-commands-commandIconButtonText'>{overflowLabel}</div>\n            </button>\n            { renderOverflowExtendedTooltip() }\n        </div>;\n    };\n\n    const getOverflownCommands = () => {\n        return visibleCommands.filter( ( command ) => {\n            if( command && _overflownCommands[ command.id ] ) {\n                return true;\n            }\n            return null;\n        } );\n    };\n\n    /**\n     * Render the overflow popup content\n     *\n     * @returns {JSX} content\n     */\n    const renderOverflowPopupContent = () => {\n        return overflowPopup.open && <AwPopup {...overflowPopup.options}>\n            <div className='aw-popup-command-bar'>\n                { getOverflownCommands().map( command =>\n                    <AwPopupCommandCell commandContext={commandContext} key={command && command.id}\n                        command={command} alignment={alignment} visibilityLoader={visibilityLoader}\n                        overflow={true} childCommandClickCallback={childCommandClickCallback}></AwPopupCommandCell> )}\n            </div>\n        </AwPopup>;\n    };\n\n    const isOverflowenabled = ( alignment === 'HORIZONTAL' || !alignment ) && overflow !== true ? null : true;\n    const renderCommands = ( disableOverflow = false ) => {\n        return visibleCommands.map( command =>\n            <AwCommand commandContext={commandContext}\n                key={command && command.id}\n                command={command} alignment={alignment}\n                visibilityLoader={visibilityLoader}\n                overflow={_overflownCommands[ command.id ] ? true : null}\n                commandObserver={disableOverflow ? null : _observer}></AwCommand> );\n    };\n\n    return (\n        <div className={`aw-command-bar ${alignmentCls} ${overflow ? 'aw-use-commandOverflow' : ''}` } anchor={anchor} ref={commandBarMain}>\n            {/* Non overflow commands */}\n            <div className={`aw-commands-wrapper ${commandLabelsClass} ${noOverflowCls}`}>\n                { isOverflowenabled && _observer && renderCommands()}\n                { !isOverflowenabled && renderCommands( true )}\n            </div>\n            {/* Vertical overflow button */}\n            { hasOverflow && !hideMore && alignment === 'VERTICAL' ? renderVerticalOverflowButton() : null }\n            {/* Horizontal overflow button */}\n            { hasOverflow && !hideMore && alignment !== 'VERTICAL' ? renderHorizontalOverflowButton() : null }\n            {/* Overflow popup */}\n            { renderOverflowPopupContent() }\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
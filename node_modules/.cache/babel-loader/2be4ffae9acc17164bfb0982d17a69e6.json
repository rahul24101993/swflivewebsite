{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-disable new-cap */ /**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/Apollo-Analytics|Apollo-Analytics}\n *\n * @module js/analyticsService\n *\n * @publishedApolloService\n *\n */import _ from'lodash';import logger from'js/logger';import moduleLoader from'js/moduleLoader';import cfgSvc from'js/configurationService';import AwPromiseService from'js/awPromiseService';/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type { {Array.<string>}}\n * @private\n */var exports={};var _$q=AwPromiseService.instance.defer();var _delegateService;var _delegatePredictiveService;var eventsToInclude=[];/**\n * This API populates the eventsToInclude array based on the passed analytics config.\n * @param {JSON} analyticsJson - The Analytics JSON configuration.\n * @ignore\n */function _populateEventsToPublish(analyticsJson){if(analyticsJson&&analyticsJson.events){let analyticsEvents=analyticsJson.events;if(analyticsEvents.include&&analyticsEvents.include.length){_.forEach(analyticsEvents.include,function(toInclude){eventsToInclude.push(toInclude.toLowerCase());});}}}/**\n * This API returns true if publishAll events is enabled.\n * @returns {Boolean} true if publishAll is enabled, false otherwise.\n * @ignore\n */function _isPublishAllEnabled(){return eventsToInclude.length===0;}/**\n * This API checks if the passed eventType should be published or not.\n * @param {String} eventType - The analytics event type to check.\n * @returns {Boolean} true if event needs to be published, false otherwise.\n * @ignore\n */function _shouldPublishEvent(eventType){if(_isPublishAllEnabled()||eventType===undefined){return true;}if(eventsToInclude.length&&eventsToInclude.includes(eventType.toLowerCase())){return true;}return false;}/**\n * responsible for choosing the appropriate analyticsService logic to be used. resolve the promise with the\n * appropriate analyticsService.\n *\n * @return {Promise} returns a promise to be resolved once the correct analyticsService is chosen.\n */function _pickAnalyticsService(){if(_delegateService){// if an analyticsService is already set, just use it.\nreturn _$q.resolve(_delegateService);}var solution=cfgSvc.getCfgCached('solutionDef');if(!solution){return new Promise(function(resolve,reject){_.defer(function(){_pickAnalyticsService().then(resolve).catch(reject);});});}var name=solution.analytics;if(name){var deferred=AwPromiseService.instance.defer();cfgSvc.getCfg('analytics').then(analyticsProviders=>{moduleLoader.loadDependentModule(analyticsProviders[name].dep).then(function(depModuleObj){if(!depModuleObj){logger.error('Could not load the analytics module '+depModuleObj);}_populateEventsToPublish(analyticsProviders[name]);_delegateService=depModuleObj;deferred.resolve(_delegateService);});});return deferred.promise;}return _$q.reject();}/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */export let authenticationSuccessful=function(){if(_delegateService){_delegateService.authenticationSuccessful();}else{_pickAnalyticsService().then(function(_delegateService){_delegateService.authenticationSuccessful();});}};/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable.\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n * @return {Promise} promise\n */export let setPreInitData=function(preInitData){// Vendor ID is used to hash the user ID, so if we don't have the vendor ID we shouldnt be sending the user ID.\nif(!preInitData.vendor_id){preInitData.user_id='';}if(_delegateService){return _$q.resolve(_delegateService.setPreInitData(preInitData));}return _pickAnalyticsService().then(function(_delegateService){_delegateService.setPreInitData(preInitData);});};/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */export let enable=function(useInternalServer,repo){if(_delegateService){return _delegateService.enable(useInternalServer,repo).then(function(){exports.logPageViewEvent();});}return _pickAnalyticsService().then(function(_delegateService){return _delegateService.enable(useInternalServer,repo).then(function(){exports.logPageViewEvent();});});};/**\n * responsible for choosing the appropriate prediction utils logic to be used, resolves the promise with the\n * appropriate PredictionUtils.\n *\n * @return {Promise} returns a promise to be resolved once the correct PredictionUtils is chosen.\n */export let pickPredictionService=function(){if(_delegatePredictiveService){// if an analyticsService is already set, just use it.\nreturn _$q.resolve(_delegatePredictiveService);}var deferred=AwPromiseService.instance.defer();cfgSvc.getCfg('predictiveui').then(predictiveUiProviders=>{if(predictiveUiProviders&&predictiveUiProviders.predictiveUtils){moduleLoader.loadDependentModule(predictiveUiProviders.predictiveUtils.dep).then(function(depModuleObj){if(depModuleObj){_delegatePredictiveService=depModuleObj;deferred.resolve(_delegatePredictiveService);}else{deferred.resolve();}});}else{deferred.resolve();}});return deferred.promise;};/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */export let logCommands=function(data){if(_delegateService){var analyticsType=data&&data.sanAnalyticsType;if(_shouldPublishEvent(analyticsType)){_delegateService.logCommands(data);}}};// Log Predictive Commands\nexport let logPredictionData=function(data){if(_delegatePredictiveService){_delegatePredictiveService.assignEventlistener(data);}else{pickPredictionService().then(function(_delegatePredictiveService){if(_delegatePredictiveService){_delegatePredictiveService.assignEventlistener(data);}});}};/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */export let logAnalyticsEvent=function(name,property){if(_delegateService){var analyticsType=property&&property.sanAnalyticsType;if(_shouldPublishEvent(analyticsType)){_delegateService.logEvent(name,property);}}};/**\n * This method should be used to log Page Load data.\n * @param {Object} data The data to be Logged\n */export let logPageViewEvent=function(data){if(_delegateService){if(_shouldPublishEvent('Page Views')){_delegateService.logPageViewEvent(data);}}};/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */export let logEvent=function(name,property){if(_delegateService){_delegateService.logEvent(name,property);}};/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */export let logProductInfo=function(name,property){if(_delegateService){_delegateService.logProductInfo(name,property);}};/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */export let disable=function(useInternalServer,encVendId,repo){if(_delegateService){_delegateService.disable(useInternalServer,encVendId,repo);}};/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */export let publishableValue=function(artifactName,artifactType){if(_delegateService){return _delegateService.publishableValue(artifactName,artifactType);}return undefined;};exports={authenticationSuccessful,setPreInitData,enable,pickPredictionService,logCommands,logPredictionData,logAnalyticsEvent,logPageViewEvent,logEvent,logProductInfo,disable,publishableValue};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Benchmark object to record the performance metrics\n *\n * @module js/splmStatsBenchmark\n */\nimport { getBrowserType } from 'js/splmStatsUtils';\n/**\n * Instances of this class represent a processor for HTTP Request/Response\n *\n * @class SPLMStatsProfiler\n */\n\nfunction SPLMStatsBenchmark() {\n  let self = this;\n  let _processorMap = {};\n  let _reporters = []; // Context string as identifier\n\n  let _title = '';\n  let _processingTime = false;\n\n  self.includeProcessorTime = function () {\n    _processingTime = true;\n  };\n\n  self.getIncludeProcessorTime = function () {\n    return _processingTime;\n  };\n\n  self.start = function () {\n    for (let key in _processorMap) {\n      _processorMap[key].start();\n    }\n  };\n\n  self.stop = function () {\n    for (let key in _processorMap) {\n      _processorMap[key].stop();\n    }\n  };\n\n  self.getMetrics = function () {\n    let metrics = {};\n\n    for (let key in _processorMap) {\n      let processor = _processorMap[key];\n      Object.assign(metrics, processor.getMetrics());\n      Object.assign(metrics, processor.getProcessingTime());\n    }\n\n    metrics.title = _title;\n    metrics.BrowserType = getBrowserType();\n    return metrics;\n  };\n\n  self.report = function (elapsed) {\n    let metrics = self.getMetrics();\n\n    if (elapsed) {\n      metrics.TTI = elapsed;\n    }\n\n    _reporters.forEach(function (reporter) {\n      reporter.report(metrics);\n    });\n  };\n\n  self.addProcessor = function (name, processor) {\n    _processorMap[name] = processor;\n  };\n\n  self.addReporter = function (reporter) {\n    _reporters.push(reporter);\n  };\n\n  self.setTitle = function (title) {\n    _title = title;\n  };\n\n  return self;\n}\n\n_c = SPLMStatsBenchmark;\nexport default SPLMStatsBenchmark;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsBenchmark\");","map":{"version":3,"names":["getBrowserType","SPLMStatsBenchmark","self","_processorMap","_reporters","_title","_processingTime","includeProcessorTime","getIncludeProcessorTime","start","key","stop","getMetrics","metrics","processor","Object","assign","getProcessingTime","title","BrowserType","report","elapsed","TTI","forEach","reporter","addProcessor","name","addReporter","push","setTitle"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsBenchmark.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Benchmark object to record the performance metrics\n *\n * @module js/splmStatsBenchmark\n */\nimport { getBrowserType } from 'js/splmStatsUtils';\n\n/**\n * Instances of this class represent a processor for HTTP Request/Response\n *\n * @class SPLMStatsProfiler\n */\nfunction SPLMStatsBenchmark() {\n    let self = this;\n\n    let _processorMap = {};\n    let _reporters = [];\n\n    // Context string as identifier\n    let _title = '';\n\n    let _processingTime = false;\n\n    self.includeProcessorTime = function() {\n        _processingTime = true;\n    };\n\n    self.getIncludeProcessorTime = function() {\n        return _processingTime;\n    };\n\n    self.start = function() {\n        for( let key in _processorMap ) {\n            _processorMap[ key ].start();\n        }\n    };\n\n    self.stop = function() {\n        for( let key in _processorMap ) {\n            _processorMap[ key ].stop();\n        }\n    };\n\n    self.getMetrics = function() {\n        let metrics = {};\n        for( let key in _processorMap ) {\n            let processor = _processorMap[ key ];\n            Object.assign( metrics, processor.getMetrics() );\n            Object.assign( metrics, processor.getProcessingTime() );\n        }\n        metrics.title = _title;\n        metrics.BrowserType = getBrowserType();\n        return metrics;\n    };\n\n    self.report = function( elapsed ) {\n        let metrics = self.getMetrics();\n\n        if( elapsed ) {\n            metrics.TTI = elapsed;\n        }\n        _reporters.forEach( function( reporter ) {\n            reporter.report( metrics );\n        } );\n    };\n\n    self.addProcessor = function( name, processor ) {\n        _processorMap[ name ] = processor;\n    };\n\n    self.addReporter = function( reporter ) {\n        _reporters.push( reporter );\n    };\n\n    self.setTitle = function( title ) {\n        _title = title;\n    };\n\n    return self;\n}\n\nexport default SPLMStatsBenchmark;\n"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,mBAA/B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,GAA8B;EAC1B,IAAIC,IAAI,GAAG,IAAX;EAEA,IAAIC,aAAa,GAAG,EAApB;EACA,IAAIC,UAAU,GAAG,EAAjB,CAJ0B,CAM1B;;EACA,IAAIC,MAAM,GAAG,EAAb;EAEA,IAAIC,eAAe,GAAG,KAAtB;;EAEAJ,IAAI,CAACK,oBAAL,GAA4B,YAAW;IACnCD,eAAe,GAAG,IAAlB;EACH,CAFD;;EAIAJ,IAAI,CAACM,uBAAL,GAA+B,YAAW;IACtC,OAAOF,eAAP;EACH,CAFD;;EAIAJ,IAAI,CAACO,KAAL,GAAa,YAAW;IACpB,KAAK,IAAIC,GAAT,IAAgBP,aAAhB,EAAgC;MAC5BA,aAAa,CAAEO,GAAF,CAAb,CAAqBD,KAArB;IACH;EACJ,CAJD;;EAMAP,IAAI,CAACS,IAAL,GAAY,YAAW;IACnB,KAAK,IAAID,GAAT,IAAgBP,aAAhB,EAAgC;MAC5BA,aAAa,CAAEO,GAAF,CAAb,CAAqBC,IAArB;IACH;EACJ,CAJD;;EAMAT,IAAI,CAACU,UAAL,GAAkB,YAAW;IACzB,IAAIC,OAAO,GAAG,EAAd;;IACA,KAAK,IAAIH,GAAT,IAAgBP,aAAhB,EAAgC;MAC5B,IAAIW,SAAS,GAAGX,aAAa,CAAEO,GAAF,CAA7B;MACAK,MAAM,CAACC,MAAP,CAAeH,OAAf,EAAwBC,SAAS,CAACF,UAAV,EAAxB;MACAG,MAAM,CAACC,MAAP,CAAeH,OAAf,EAAwBC,SAAS,CAACG,iBAAV,EAAxB;IACH;;IACDJ,OAAO,CAACK,KAAR,GAAgBb,MAAhB;IACAQ,OAAO,CAACM,WAAR,GAAsBnB,cAAc,EAApC;IACA,OAAOa,OAAP;EACH,CAVD;;EAYAX,IAAI,CAACkB,MAAL,GAAc,UAAUC,OAAV,EAAoB;IAC9B,IAAIR,OAAO,GAAGX,IAAI,CAACU,UAAL,EAAd;;IAEA,IAAIS,OAAJ,EAAc;MACVR,OAAO,CAACS,GAAR,GAAcD,OAAd;IACH;;IACDjB,UAAU,CAACmB,OAAX,CAAoB,UAAUC,QAAV,EAAqB;MACrCA,QAAQ,CAACJ,MAAT,CAAiBP,OAAjB;IACH,CAFD;EAGH,CATD;;EAWAX,IAAI,CAACuB,YAAL,GAAoB,UAAUC,IAAV,EAAgBZ,SAAhB,EAA4B;IAC5CX,aAAa,CAAEuB,IAAF,CAAb,GAAwBZ,SAAxB;EACH,CAFD;;EAIAZ,IAAI,CAACyB,WAAL,GAAmB,UAAUH,QAAV,EAAqB;IACpCpB,UAAU,CAACwB,IAAX,CAAiBJ,QAAjB;EACH,CAFD;;EAIAtB,IAAI,CAAC2B,QAAL,GAAgB,UAAUX,KAAV,EAAkB;IAC9Bb,MAAM,GAAGa,KAAT;EACH,CAFD;;EAIA,OAAOhB,IAAP;AACH;;KAnEQD,kB;AAqET,eAAeA,kBAAf"},"metadata":{},"sourceType":"module"}
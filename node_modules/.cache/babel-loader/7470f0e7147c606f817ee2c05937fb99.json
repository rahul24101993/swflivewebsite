{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is a utility service for drag-n-drop operations.\n *\n * @module js/dragAndDropUtils\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dms from 'soa/dataManagementService';\nimport adapterSvc from 'js/adapterService';\nimport appCtxSvc from 'js/appCtxService';\nimport _ from 'lodash';\nvar exports = {};\nlet hasTCSessionData = appCtxSvc && appCtxSvc.ctx && !_.isUndefined(appCtxSvc.ctx.tcSessionData);\n\nconst fetchObjects = uids => {\n  let missingSourceUIDs = [];\n  let objsCorrespondingToUids = [];\n\n  if (uids.length > 0 && cdm) {\n    uids.forEach(uid => {\n      /**\n       * Attempt to locate the 'source' objects in this browser's CDM cache.\n       * <P>\n       * Note: When 'source' objects are being dragged from another browser they may not have been loaded into\n       * the 'target' browser.\n       */\n      let object = cdm.getObject(uid);\n\n      if (!object) {\n        missingSourceUIDs.push(uid);\n      } else {\n        objsCorrespondingToUids.push(object);\n      }\n    });\n  }\n\n  return {\n    missingSourceUIDs,\n    objsCorrespondingToUids\n  };\n};\n\nexport const getObjects = sourceVMOs => {\n  let modelObjects = [];\n\n  if (sourceVMOs) {\n    sourceVMOs.forEach(modelObject => {\n      if (cmm.isInstanceOf('Awp0XRTObjectSetRow', modelObject.modelType)) {\n        var adaptedObjs = adapterSvc.getAdaptedObjectsSync([modelObject]);\n        modelObjects.push(adaptedObjs[0]);\n      } else {\n        modelObjects.push(modelObject);\n      }\n    });\n  }\n\n  return modelObjects;\n};\nexport const loadVMOsIfNotAlreadyLoaded = uids => {\n  let objects = fetchObjects(uids);\n\n  if (objects.missingSourceUIDs.length > 0 && hasTCSessionData) {\n    dms.loadObjects(objects.missingSourceUIDs);\n  }\n};\nexport const getObjectByUidAsync = uids => {\n  let objects = fetchObjects(uids);\n\n  if (objects.missingSourceUIDs.length > 0 && hasTCSessionData) {\n    return dms.loadObjects(objects.missingSourceUIDs).then(() => {\n      return [...objects.objsCorrespondingToUids, ...fetchObjects(objects.missingSourceUIDs).objsCorrespondingToUids];\n    });\n  }\n\n  return Promise.resolve(objects.objsCorrespondingToUids);\n};\nexports = {\n  getObjects,\n  loadVMOsIfNotAlreadyLoaded,\n  getObjectByUidAsync\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/dragAndDropUtils.js"],"names":["exports","hasTCSessionData","appCtxSvc","_","fetchObjects","uids","missingSourceUIDs","objsCorrespondingToUids","uid","object","cdm","getObjects","sourceVMOs","modelObjects","modelObject","cmm","adaptedObjs","adapterSvc","loadVMOsIfNotAlreadyLoaded","objects","dms","getObjectByUidAsync","Promise"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,GAAA,MAAA,4BAAA;AACA,OAAA,GAAA,MAAA,4BAAA;AACA,OAAA,GAAA,MAAA,2BAAA;AACA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,SAAA,MAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,IAAIA,OAAO,GAAX,EAAA;AAEA,IAAIC,gBAAgB,GAAGC,SAAS,IAAIA,SAAS,CAAtBA,GAAAA,IAA8B,CAACC,CAAC,CAADA,WAAAA,CAAeD,SAAS,CAATA,GAAAA,CAArE,aAAsDC,CAAtD;;AAEA,MAAMC,YAAY,GAAKC,IAAF,IAAY;EAC7B,IAAIC,iBAAiB,GAArB,EAAA;EACA,IAAIC,uBAAuB,GAA3B,EAAA;;EACA,IAAIF,IAAI,CAAJA,MAAAA,GAAAA,CAAAA,IAAJ,GAAA,EAA6B;IACzBA,IAAI,CAAJA,OAAAA,CAAgBG,GAAF,IAAW;MACrB;AACZ;AACA;AACA;AACA;AACA;MACY,IAAIC,MAAM,GAAGC,GAAG,CAAHA,SAAAA,CAAb,GAAaA,CAAb;;MACA,IAAI,CAAJ,MAAA,EAAc;QACVJ,iBAAiB,CAAjBA,IAAAA,CAAAA,GAAAA;MADJ,CAAA,MAEO;QACHC,uBAAuB,CAAvBA,IAAAA,CAAAA,MAAAA;MACH;IAZLF,CAAAA;EAcH;;EAED,OAAO;IAAA,iBAAA;IAEHE;EAFG,CAAP;AApBJ,CAAA;;AA0BA,OAAO,MAAMI,UAAU,GAAKC,UAAF,IAAkB;EACxC,IAAIC,YAAY,GAAhB,EAAA;;EACA,IAAA,UAAA,EAAiB;IACbD,UAAU,CAAVA,OAAAA,CAAsBE,WAAF,IAAmB;MACnC,IAAIC,GAAG,CAAHA,YAAAA,CAAAA,qBAAAA,EAAyCD,WAAW,CAAxD,SAAIC,CAAJ,EAAuE;QACnE,IAAIC,WAAW,GAAGC,UAAU,CAAVA,qBAAAA,CAAkC,CAApD,WAAoD,CAAlCA,CAAlB;QACAJ,YAAY,CAAZA,IAAAA,CAAmBG,WAAW,CAA9BH,CAA8B,CAA9BA;MAFJ,CAAA,MAGO;QACHA,YAAY,CAAZA,IAAAA,CAAAA,WAAAA;MACH;IANLD,CAAAA;EAQH;;EACD,OAAA,YAAA;AAZG,CAAA;AAeP,OAAO,MAAMM,0BAA0B,GAAKb,IAAF,IAAY;EAClD,IAAIc,OAAO,GAAGf,YAAY,CAA1B,IAA0B,CAA1B;;EAEA,IAAIe,OAAO,CAAPA,iBAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAJ,gBAAA,EAA+D;IAC3DC,GAAG,CAAHA,WAAAA,CAAiBD,OAAO,CAAxBC,iBAAAA;EACH;AALE,CAAA;AAQP,OAAO,MAAMC,mBAAmB,GAAKhB,IAAF,IAAY;EAC3C,IAAIc,OAAO,GAAGf,YAAY,CAA1B,IAA0B,CAA1B;;EAEA,IAAIe,OAAO,CAAPA,iBAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAJ,gBAAA,EAA+D;IAC3D,OAAO,GAAG,CAAH,WAAA,CAAiBA,OAAO,CAAxB,iBAAA,EAAA,IAAA,CAAmD,MAAM;MAC5D,OAAO,CAAE,GAAGA,OAAO,CAAZ,uBAAA,EAAsC,GAAGf,YAAY,CAAEe,OAAO,CAArBf,iBAAY,CAAZA,CAAhD,uBAAO,CAAP;IADJ,CAAO,CAAP;EAGH;;EACD,OAAOkB,OAAO,CAAPA,OAAAA,CAAiBH,OAAO,CAA/B,uBAAOG,CAAP;AARG,CAAA;AAWPtB,OAAO,GAAG;EAAA,UAAA;EAAA,0BAAA;EAGNqB;AAHM,CAAVrB;AAKA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is a utility service for drag-n-drop operations.\n *\n * @module js/dragAndDropUtils\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dms from 'soa/dataManagementService';\nimport adapterSvc from 'js/adapterService';\nimport appCtxSvc from 'js/appCtxService';\nimport _ from 'lodash';\n\nvar exports = {};\n\nlet hasTCSessionData = appCtxSvc && appCtxSvc.ctx && !_.isUndefined( appCtxSvc.ctx.tcSessionData );\n\nconst fetchObjects = ( uids ) => {\n    let missingSourceUIDs = [];\n    let objsCorrespondingToUids = [];\n    if( uids.length > 0 && cdm ) {\n        uids.forEach( ( uid ) => {\n            /**\n             * Attempt to locate the 'source' objects in this browser's CDM cache.\n             * <P>\n             * Note: When 'source' objects are being dragged from another browser they may not have been loaded into\n             * the 'target' browser.\n             */\n            let object = cdm.getObject( uid );\n            if( !object ) {\n                missingSourceUIDs.push( uid );\n            } else {\n                objsCorrespondingToUids.push( object );\n            }\n        } );\n    }\n\n    return {\n        missingSourceUIDs,\n        objsCorrespondingToUids\n    };\n};\n\nexport const getObjects = ( sourceVMOs ) => {\n    let modelObjects = [];\n    if( sourceVMOs ) {\n        sourceVMOs.forEach( ( modelObject ) => {\n            if( cmm.isInstanceOf( 'Awp0XRTObjectSetRow', modelObject.modelType ) ) {\n                var adaptedObjs = adapterSvc.getAdaptedObjectsSync( [ modelObject ] );\n                modelObjects.push( adaptedObjs[ 0 ] );\n            } else {\n                modelObjects.push( modelObject );\n            }\n        } );\n    }\n    return modelObjects;\n};\n\nexport const loadVMOsIfNotAlreadyLoaded = ( uids ) => {\n    let objects = fetchObjects( uids );\n\n    if( objects.missingSourceUIDs.length > 0 && hasTCSessionData ) {\n        dms.loadObjects( objects.missingSourceUIDs );\n    }\n};\n\nexport const getObjectByUidAsync = ( uids ) => {\n    let objects = fetchObjects( uids );\n\n    if( objects.missingSourceUIDs.length > 0 && hasTCSessionData ) {\n        return dms.loadObjects( objects.missingSourceUIDs ).then( () => {\n            return [ ...objects.objsCorrespondingToUids, ...fetchObjects( objects.missingSourceUIDs ).objsCorrespondingToUids ];\n        } );\n    }\n    return Promise.resolve( objects.objsCorrespondingToUids );\n};\n\nexports = {\n    getObjects,\n    loadVMOsIfNotAlreadyLoaded,\n    getObjectByUidAsync\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
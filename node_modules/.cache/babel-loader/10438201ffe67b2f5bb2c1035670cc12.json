{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsJsProcessor\n */\nimport { addProc, removeProc } from 'js/splmStatsJsService';\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsJsProcessor\n */\n\nfunction SPLMStatsJsProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _scriptJournals = [];\n  /**\n   * @returns {Float} Total scripting time for angular events\n   */\n\n  const _processScriptTime = function () {\n    _startProcessorTime = window.performance.now();\n    let totalTime = 0;\n\n    _scriptJournals.forEach(function (obj) {\n      totalTime += obj.endTime - obj.startTime;\n    });\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return totalTime;\n  };\n  /**\n   *\n   * @param {Object} data - startTime, endTime, name of process to track scripting time\n   */\n\n\n  let _proc = {\n    start: () => {},\n    done: function (data) {\n      _startProcessorTime = window.performance.now();\n\n      _scriptJournals.push(data);\n\n      _endProcessorTime = window.performance.now();\n      _processingTime += _endProcessorTime - _startProcessorTime;\n    }\n  };\n\n  const _reset = function () {\n    _scriptJournals = [];\n  };\n\n  self.start = function () {\n    _startProcessorTime = window.performance.now();\n\n    _reset();\n\n    addProc(_proc);\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n    removeProc(_proc);\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      JsProcessorOverhead: _time\n    };\n  };\n  /**\n   * @returns {Object} Object containg Total Scripting Time\n   */\n\n\n  self.getMetrics = function () {\n    return {\n      scriptTime: _processScriptTime()\n    };\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsJsProcessor;\n_c = SPLMStatsJsProcessor;\nexport default SPLMStatsJsProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsJsProcessor\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsJsProcessor\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsJsProcessor.js"],"names":["SPLMStatsJsProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_scriptJournals","_processScriptTime","window","totalTime","obj","_proc","start","done","_reset","addProc","removeProc","_time","JsProcessorOverhead","scriptTime"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA,OAAA,EAAA,UAAA,QAAA,uBAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,oBAAA,GAAgC;EAC5B,IAAIC,IAAI,GAAR,IAAA;EAEA,IAAIC,eAAe,GAAnB,CAAA;EACA,IAAIC,mBAAmB,GAAvB,CAAA;EACA,IAAIC,iBAAiB,GAArB,CAAA;EAEA,IAAIC,eAAe,GAAnB,EAAA;EAEA;AACJ;AACA;;EACI,MAAMC,kBAAkB,GAAG,YAAW;IAClCH,mBAAmB,GAAGI,MAAM,CAANA,WAAAA,CAAtBJ,GAAsBI,EAAtBJ;IAEA,IAAIK,SAAS,GAAb,CAAA;;IACAH,eAAe,CAAfA,OAAAA,CAAyB,UAAA,GAAA,EAAgB;MACrCG,SAAS,IAAIC,GAAG,CAAHA,OAAAA,GAAcA,GAAG,CAA9BD,SAAAA;IADJH,CAAAA;;IAIAD,iBAAiB,GAAGG,MAAM,CAANA,WAAAA,CAApBH,GAAoBG,EAApBH;IACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;IACA,OAAA,SAAA;EAVJ,CAAA;EAaA;AACJ;AACA;AACA;;;EACI,IAAIQ,KAAK,GAAG;IACRC,KAAK,EAAE,MAAM,CADL,CAAA;IAERC,IAAI,EAAE,UAAA,IAAA,EAAiB;MACnBT,mBAAmB,GAAGI,MAAM,CAANA,WAAAA,CAAtBJ,GAAsBI,EAAtBJ;;MACAE,eAAe,CAAfA,IAAAA,CAAAA,IAAAA;;MACAD,iBAAiB,GAAGG,MAAM,CAANA,WAAAA,CAApBH,GAAoBG,EAApBH;MACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;IACH;EAPO,CAAZ;;EAUA,MAAMW,MAAM,GAAG,YAAW;IACtBR,eAAe,GAAfA,EAAAA;EADJ,CAAA;;EAIAJ,IAAI,CAAJA,KAAAA,GAAa,YAAW;IACpBE,mBAAmB,GAAGI,MAAM,CAANA,WAAAA,CAAtBJ,GAAsBI,EAAtBJ;;IACAU,MAAM;;IACNC,OAAO,CAAPA,KAAO,CAAPA;IACAV,iBAAiB,GAAGG,MAAM,CAANA,WAAAA,CAApBH,GAAoBG,EAApBH;IACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;EALJD,CAAAA;;EAQAA,IAAI,CAAJA,IAAAA,GAAY,YAAW;IACnBE,mBAAmB,GAAGI,MAAM,CAANA,WAAAA,CAAtBJ,GAAsBI,EAAtBJ;IACAY,UAAU,CAAVA,KAAU,CAAVA;IACAX,iBAAiB,GAAGG,MAAM,CAANA,WAAAA,CAApBH,GAAoBG,EAApBH;IACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;EAJJD,CAAAA;;EAOAA,IAAI,CAAJA,iBAAAA,GAAyB,YAAW;IAChC,MAAMe,KAAK,GAAX,eAAA;IACAd,eAAe,GAAfA,CAAAA;IACA,OAAO;MAAEe,mBAAmB,EAAED;IAAvB,CAAP;EAHJf,CAAAA;EAKA;AACJ;AACA;;;EACIA,IAAI,CAAJA,UAAAA,GAAkB,YAAW;IACzB,OAAO;MACHiB,UAAU,EAAEZ,kBAAkB;IAD3B,CAAP;EADJL,CAAAA;;EAMA,OAAA,IAAA;AACH;;MAzED,oB;KAASD,oB;AA2ET,eAAA,oBAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsJsProcessor\n */\nimport { addProc, removeProc } from 'js/splmStatsJsService';\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsJsProcessor\n */\nfunction SPLMStatsJsProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n    let _startProcessorTime = 0;\n    let _endProcessorTime = 0;\n\n    let _scriptJournals = [];\n\n    /**\n     * @returns {Float} Total scripting time for angular events\n     */\n    const _processScriptTime = function() {\n        _startProcessorTime = window.performance.now();\n\n        let totalTime = 0;\n        _scriptJournals.forEach( function( obj ) {\n            totalTime += obj.endTime - obj.startTime;\n        } );\n\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return totalTime;\n    };\n\n    /**\n     *\n     * @param {Object} data - startTime, endTime, name of process to track scripting time\n     */\n    let _proc = {\n        start: () => {},\n        done: function( data ) {\n            _startProcessorTime = window.performance.now();\n            _scriptJournals.push( data );\n            _endProcessorTime = window.performance.now();\n            _processingTime += _endProcessorTime - _startProcessorTime;\n        }\n    };\n\n    const _reset = function() {\n        _scriptJournals = [];\n    };\n\n    self.start = function() {\n        _startProcessorTime = window.performance.now();\n        _reset();\n        addProc( _proc );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        removeProc( _proc );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { JsProcessorOverhead: _time };\n    };\n    /**\n     * @returns {Object} Object containg Total Scripting Time\n     */\n    self.getMetrics = function() {\n        return {\n            scriptTime: _processScriptTime()\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsJsProcessor;\n"]},"metadata":{},"sourceType":"module"}
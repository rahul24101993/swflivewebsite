{"ast":null,"code":"import{useEffect,useLayoutEffect}from'react';/*\n* Function to calulate the overflown commands in the commandbar/toolbar\n*/const calculateOverflow=_ref=>{let{getData,dispatch}=_ref;return entries=>{let overflownCommands={...getData()._overflownCommands};let overCmdsUpdated=null;entries.forEach(entry=>{if(entry&&entry.target.childNodes&&entry.target.childNodes.length){const id=entry.target.childNodes[0].attributes['command-id'].nodeValue;if(entry.isIntersecting===false&&!overflownCommands[id]){overflownCommands[id]=true;overCmdsUpdated=true;}else if(entry.isIntersecting&&overflownCommands[id]){delete overflownCommands[id];overCmdsUpdated=true;}}});if(overCmdsUpdated){dispatch({path:'data._overflownCommands',value:overflownCommands});}};};/*\n* Attach observers to command bars and command elements\n*/const useCommandOverflow=(_ref2,_ref3,_ref4)=>{let{data,getData,actions,dispatch}=_ref2;let{commandObserver,overflow,alignment}=_ref3;let{elementRefList}=_ref4;let overflowEnabledForCmdbar=data._swfCommandBarComponent;//Overflow for horizontal commandBar is disabled by default\n//Do NOT attach observer for Horizontal cmdBar if not explicitly enabled\nif(overflowEnabledForCmdbar&&(alignment==='HORIZONTAL'||!alignment)&&overflow!==true){overflowEnabledForCmdbar=false;}if(overflowEnabledForCmdbar||data._swfToolBarComponent&&overflow&&overflow!=='false'){//eslint-disable-next-line react-hooks/rules-of-hooks\nuseEffect(()=>{const element=elementRefList.get('commandBarMain').current;const observer=new IntersectionObserver(calculateOverflow({getData,dispatch}),{root:element,threshold:0.1});dispatch({path:'data._observer',value:observer});return()=>{const{_observer}=getData()||{};_observer&&_observer.disconnect();};},[]);}if(data._swfCommandComponent&&commandObserver){//eslint-disable-next-line react-hooks/rules-of-hooks\nuseLayoutEffect(()=>{commandObserver.observe(actions.openCommandPopup.reference.current);return()=>{commandObserver.unobserve(actions.openCommandPopup.reference.current);};},[]);}};export const useCommands=function(viewModel){if(viewModel.data._swfToolBarComponent||viewModel.data._swfCommandBarComponent||viewModel.data._swfCommandComponent){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}// eslint-disable-next-line react-hooks/rules-of-hooks\nuseCommandOverflow(viewModel,...args);}};export default{useCommands};","map":null,"metadata":{},"sourceType":"module"}
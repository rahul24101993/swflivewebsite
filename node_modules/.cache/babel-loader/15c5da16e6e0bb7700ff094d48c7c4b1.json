{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * processor to profile XML HTTP Request\n *\n * @module js/splmStatsXhrProcessor\n */\nimport { logger } from 'js/splmStatsUtils';\nimport xhrService from 'js/splmStatsXhrService';\n/**\n * Instances of this class represent a profiler for HTTP Request/Response\n *\n * @class SPLMStatsXhrProcessor\n */\n\nfunction SPLMStatsXhrProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _XMLHttpRequests = {};\n  let _XMLFinishedHttpRequests = [];\n  let _internalXMLHttpRequests = [];\n  let _maxHTTPPayload = {\n    requestUrl: '',\n    payloadSize: 0\n  };\n  let _totalHttpRequests = 0;\n  let _transferSize = 0;\n  let _requestSize = 0;\n  let _responseSize = 0;\n  let _XMLNetworkTimes = [];\n  let _errorInfo = {\n    requestsAborted: [],\n    requestsErrored: [],\n    requestsTimeout: []\n  };\n  let _sortedXMLNetworkTimes = [];\n  let _eventListeners = {\n    abort: function (xhr) {\n      _errorInfo.requestsAborted.push(xhr);\n    },\n    error: function (xhr) {\n      _errorInfo.requestsErrored.push(xhr);\n    },\n    timeout: function (xhr) {\n      _errorInfo.requestsTimeout.push(xhr);\n    }\n  };\n\n  const max = function (a, b) {\n    return a > b ? a : b;\n  };\n\n  const _processRequestsTime = function () {\n    _startProcessorTime = window.performance.now();\n\n    for (let reqUrl in _XMLHttpRequests) {\n      let reqTimings = window.performance.getEntriesByName(reqUrl);\n      let i = 0;\n      reqTimings.forEach(req => {\n        let xmlHttpReq = _XMLHttpRequests[reqUrl][i];\n        let xhr = xmlHttpReq.XHR;\n        _transferSize += req.transferSize;\n        _responseSize += xhr.response.length;\n        xmlHttpReq.timeResponse = req.responseEnd;\n        let url = xhr.responseURL;\n\n        if (!url || url.length === 0) {\n          url = xhr.requestURL || '';\n        } // / Access to response data here ///\n\n\n        xmlHttpReq.timeStart = req.requestStart;\n        xmlHttpReq.totalTime = xmlHttpReq.timeResponse - xmlHttpReq.timeStart;\n        xmlHttpReq.responseUrl = url; // response url not available in IE, would have to customize looking in service data for url but not AW specific\n\n        _XMLFinishedHttpRequests.push({\n          timeTaken: xmlHttpReq.totalTime,\n          status: xhr.statusText,\n          responseUrl: url,\n          responseSize: xhr.response.length || xhr.response.byteLength,\n          logCorrelationID: xmlHttpReq.logCorrelationID,\n          startedDateTime: xmlHttpReq.startedDateTime,\n          requestSize: xmlHttpReq.requestSize\n        });\n\n        _internalXMLHttpRequests.push({\n          timeTaken: xmlHttpReq.totalTime\n        });\n\n        if (_maxHTTPPayload.payloadSize < xhr.response.length) {\n          _maxHTTPPayload.payloadSize = xhr.response.length;\n          _maxHTTPPayload.requestUrl = url;\n        }\n\n        _XMLNetworkTimes.push({\n          timeStart: xmlHttpReq.timeStart,\n          timeStop: xmlHttpReq.timeResponse\n        });\n\n        i++;\n      });\n      delete _XMLHttpRequests[reqUrl];\n    }\n\n    _totalHttpRequests += window.performance.getEntriesByType('resource').length;\n\n    if (window.performance.clearResourceTimings) {\n      window.performance.clearResourceTimings();\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  const _processNetworkGaps = function () {\n    _startProcessorTime = window.performance.now();\n    let firstStart = 0;\n    let firstStop = 0;\n    let tStart = 0;\n    let tStop = 0;\n    let totalTime = 0;\n\n    if (_XMLNetworkTimes.length > 0) {\n      _sortedXMLNetworkTimes = _XMLNetworkTimes.sort(function (a, b) {\n        return a.timeStart > b.timeStart ? 1 : -1;\n      });\n      firstStart = _sortedXMLNetworkTimes[0].timeStart;\n      firstStop = _sortedXMLNetworkTimes[0].timeStop;\n      totalTime = firstStop - firstStart;\n\n      for (let i = 1; i < _sortedXMLNetworkTimes.length; i++) {\n        tStart = _sortedXMLNetworkTimes[i].timeStart;\n        tStop = _sortedXMLNetworkTimes[i].timeStop;\n\n        if (tStart < firstStop && firstStop < tStop) {\n          totalTime += tStop - firstStop;\n        } else if (tStart < firstStop && tStop < firstStop) {//Do nothing, time already accounted for...\n        } else if (firstStop < tStart) {\n          totalTime += tStop - tStart;\n        }\n\n        firstStop = max(tStop, firstStop);\n      }\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return totalTime;\n  };\n\n  const _processErrorInfo = function () {\n    _startProcessorTime = window.performance.now();\n\n    let errorXhrs = _errorInfo.requestsAborted.concat(_errorInfo.requestsErrored).concat(_errorInfo.requestsTimeout);\n\n    let _newErrorInfo = {\n      requestsAborted: [],\n      requestsErrored: [],\n      requestsTimeout: []\n    };\n\n    _internalXMLHttpRequests.forEach(obj => {\n      let idx = errorXhrs.indexOf(obj.XHR);\n\n      if (idx !== -1) {\n        if (_errorInfo.requestsTimeout.includes(obj.XHR)) {\n          _newErrorInfo.requestsTimeout.push(obj);\n        } else if (_errorInfo.requestsErrored.includes(obj.XHR)) {\n          _newErrorInfo.requestsErrored.push(obj);\n        } else {\n          _newErrorInfo.requestsAborted.push(obj);\n        }\n      }\n    });\n\n    _XMLFinishedHttpRequests.forEach(req => {\n      if (req.status && req.status.toLowerCase() !== 'ok') {\n        _newErrorInfo.requestsErrored = _newErrorInfo.requestsErrored.concat([req]);\n      }\n    });\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return _newErrorInfo;\n  }; // -------------------------------------------------------------\n  // HTTP Request/Response Info\n  // -------------------------------------------------------------\n\n\n  const _xhrProc = function (xhr, data) {\n    _startProcessorTime = window.performance.now();\n    _transferSize += data && data.length ? data.length : 0;\n    _requestSize += data && data.length ? data.length : 0;\n    let JSONData;\n\n    try {\n      JSONData = typeof data === 'string' ? JSON.parse(data) : {};\n    } catch (error) {\n      if (!xhr.requestURL.includes('socket.io')) {\n        logger.warn('XHR Data not in JSON format');\n      }\n\n      JSONData = {};\n    }\n\n    let dataObj = {\n      timeStart: 0,\n      XHR: xhr,\n      timeResponse: 0,\n      requestSize: data && data.length ? data.length : 0,\n      logCorrelationID: JSONData.header && JSONData.header.state && JSONData.header.state.logCorrelationID ? JSONData.header.state.logCorrelationID : 0,\n      startedDateTime: new Date().toISOString()\n    };\n\n    if (_XMLHttpRequests.hasOwnProperty(xhr.requestURL)) {\n      _XMLHttpRequests[xhr.requestURL].push(dataObj);\n    } else {\n      _XMLHttpRequests[xhr.requestURL] = [dataObj];\n    }\n\n    for (let key in _eventListeners) {\n      const listenerFn = _eventListeners[key];\n      xhr.addEventListener(key, function () {\n        listenerFn(xhr);\n      });\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  xhrService.setMainProc(_xhrProc);\n\n  const _reset = function () {\n    _XMLHttpRequests = {};\n    _XMLFinishedHttpRequests = [];\n    _internalXMLHttpRequests = [];\n    _totalHttpRequests = 0;\n    _maxHTTPPayload = {\n      requestUrl: '',\n      payloadSize: 0\n    };\n    _transferSize = 0;\n    _requestSize = 0;\n    _responseSize = 0;\n    _XMLNetworkTimes = [];\n    _sortedXMLNetworkTimes = [];\n    _errorInfo = {\n      requestsAborted: [],\n      requestsErrored: [],\n      requestsTimeout: []\n    };\n\n    if (window.performance.clearResourceTimings) {\n      window.performance.clearResourceTimings();\n    }\n  };\n\n  self.start = function () {\n    _reset();\n\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      XHRProcessorOverhead: _time\n    };\n  };\n\n  self.getMetrics = function () {\n    _processRequestsTime();\n\n    return {\n      totalNetworkTime: _processNetworkGaps(),\n      Network: {\n        requestSize: _requestSize,\n        responseSize: _responseSize,\n        totalSize: _transferSize,\n        maxRequest: {\n          url: _maxHTTPPayload.requestUrl,\n          size: _maxHTTPPayload.payloadSize\n        },\n        totalHttpRequests: _totalHttpRequests,\n        SoaDetails: _XMLFinishedHttpRequests,\n        errorInfo: _processErrorInfo()\n      },\n      totalNetworkCost: _transferSize\n    };\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsXhrProcessor;\n_c = SPLMStatsXhrProcessor;\nexport default SPLMStatsXhrProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsXhrProcessor\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsXhrProcessor\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsXhrProcessor.js"],"names":["SPLMStatsXhrProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_XMLHttpRequests","_XMLFinishedHttpRequests","_internalXMLHttpRequests","_maxHTTPPayload","requestUrl","payloadSize","_totalHttpRequests","_transferSize","_requestSize","_responseSize","_XMLNetworkTimes","_errorInfo","requestsAborted","requestsErrored","requestsTimeout","_sortedXMLNetworkTimes","_eventListeners","abort","error","timeout","max","a","_processRequestsTime","window","reqTimings","i","req","xmlHttpReq","xhr","url","timeTaken","status","responseUrl","responseSize","logCorrelationID","startedDateTime","requestSize","totalTime","timeStart","timeStop","timeResponse","_processNetworkGaps","firstStart","firstStop","tStart","tStop","b","_processErrorInfo","errorXhrs","_newErrorInfo","obj","idx","_xhrProc","data","JSONData","JSON","logger","dataObj","XHR","listenerFn","xhrService","_reset","_time","XHRProcessorOverhead","totalNetworkTime","Network","totalSize","maxRequest","size","totalHttpRequests","SoaDetails","errorInfo","totalNetworkCost"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * processor to profile XML HTTP Request\n *\n * @module js/splmStatsXhrProcessor\n */\nimport { logger } from 'js/splmStatsUtils';\nimport xhrService from 'js/splmStatsXhrService';\n\n/**\n * Instances of this class represent a profiler for HTTP Request/Response\n *\n * @class SPLMStatsXhrProcessor\n */\nfunction SPLMStatsXhrProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n    let _startProcessorTime = 0;\n    let _endProcessorTime = 0;\n\n    let _XMLHttpRequests = {};\n    let _XMLFinishedHttpRequests = [];\n    let _internalXMLHttpRequests = [];\n    let _maxHTTPPayload = {\n        requestUrl: '',\n        payloadSize: 0\n    };\n    let _totalHttpRequests = 0;\n    let _transferSize = 0;\n    let _requestSize = 0;\n    let _responseSize = 0;\n    let _XMLNetworkTimes = [];\n    let _errorInfo = {\n        requestsAborted: [],\n        requestsErrored: [],\n        requestsTimeout: []\n    };\n    let _sortedXMLNetworkTimes = [];\n    let _eventListeners = {\n        abort: function( xhr ) {\n            _errorInfo.requestsAborted.push( xhr );\n        },\n        error: function( xhr ) {\n            _errorInfo.requestsErrored.push( xhr );\n        },\n        timeout: function( xhr ) {\n            _errorInfo.requestsTimeout.push( xhr );\n        }\n    };\n\n    const max = function( a, b ) {\n        return a > b ? a : b;\n    };\n\n    const _processRequestsTime = function() {\n        _startProcessorTime = window.performance.now();\n        for ( let reqUrl in _XMLHttpRequests ) {\n            let reqTimings = window.performance.getEntriesByName( reqUrl );\n            let i = 0;\n            reqTimings.forEach( req => {\n                let xmlHttpReq = _XMLHttpRequests[ reqUrl ][ i ];\n                let xhr = xmlHttpReq.XHR;\n                _transferSize += req.transferSize;\n                _responseSize += xhr.response.length;\n                xmlHttpReq.timeResponse = req.responseEnd;\n\n                let url = xhr.responseURL;\n                if( !url || url.length === 0 ) {\n                    url = xhr.requestURL || '';\n                }\n                // / Access to response data here ///\n                xmlHttpReq.timeStart = req.requestStart;\n                xmlHttpReq.totalTime = xmlHttpReq.timeResponse - xmlHttpReq.timeStart;\n                xmlHttpReq.responseUrl = url; // response url not available in IE, would have to customize looking in service data for url but not AW specific\n\n                _XMLFinishedHttpRequests.push( {\n                    timeTaken: xmlHttpReq.totalTime,\n                    status: xhr.statusText,\n                    responseUrl: url,\n                    responseSize: xhr.response.length || xhr.response.byteLength,\n                    logCorrelationID: xmlHttpReq.logCorrelationID,\n                    startedDateTime: xmlHttpReq.startedDateTime,\n                    requestSize: xmlHttpReq.requestSize\n                } );\n                _internalXMLHttpRequests.push( {\n                    timeTaken: xmlHttpReq.totalTime\n                } );\n                if( _maxHTTPPayload.payloadSize < xhr.response.length ) {\n                    _maxHTTPPayload.payloadSize = xhr.response.length;\n                    _maxHTTPPayload.requestUrl = url;\n                }\n\n                _XMLNetworkTimes.push( {\n                    timeStart: xmlHttpReq.timeStart,\n                    timeStop: xmlHttpReq.timeResponse\n                } );\n\n                i++;\n            } );\n            delete _XMLHttpRequests[ reqUrl ];\n        }\n        _totalHttpRequests += window.performance.getEntriesByType( 'resource' ).length;\n        if ( window.performance.clearResourceTimings ) {\n            window.performance.clearResourceTimings();\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    const _processNetworkGaps = function() {\n        _startProcessorTime = window.performance.now();\n        let firstStart = 0;\n        let firstStop = 0;\n        let tStart = 0;\n        let tStop = 0;\n        let totalTime = 0;\n        if( _XMLNetworkTimes.length > 0 ) {\n            _sortedXMLNetworkTimes = _XMLNetworkTimes.sort( function( a, b ) {\n                return a.timeStart > b.timeStart ? 1 : -1;\n            } );\n\n            firstStart = _sortedXMLNetworkTimes[ 0 ].timeStart;\n            firstStop = _sortedXMLNetworkTimes[ 0 ].timeStop;\n            totalTime = firstStop - firstStart;\n\n            for( let i = 1; i < _sortedXMLNetworkTimes.length; i++ ) {\n                tStart = _sortedXMLNetworkTimes[ i ].timeStart;\n                tStop = _sortedXMLNetworkTimes[ i ].timeStop;\n\n                if( tStart < firstStop && firstStop < tStop ) {\n                    totalTime += tStop - firstStop;\n                } else if( tStart < firstStop && tStop < firstStop ) {\n                    //Do nothing, time already accounted for...\n                } else if( firstStop < tStart ) {\n                    totalTime += tStop - tStart;\n                }\n\n                firstStop = max( tStop, firstStop );\n            }\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return totalTime;\n    };\n\n    const _processErrorInfo = function() {\n        _startProcessorTime = window.performance.now();\n        let errorXhrs = _errorInfo.requestsAborted.concat( _errorInfo.requestsErrored ).concat( _errorInfo.requestsTimeout );\n        let _newErrorInfo = {\n            requestsAborted: [],\n            requestsErrored: [],\n            requestsTimeout: []\n        };\n        _internalXMLHttpRequests.forEach( obj => {\n            let idx = errorXhrs.indexOf( obj.XHR );\n            if( idx !== -1 ) {\n                if( _errorInfo.requestsTimeout.includes( obj.XHR ) ) {\n                    _newErrorInfo.requestsTimeout.push( obj );\n                } else if( _errorInfo.requestsErrored.includes( obj.XHR ) ) {\n                    _newErrorInfo.requestsErrored.push( obj );\n                } else {\n                    _newErrorInfo.requestsAborted.push( obj );\n                }\n            }\n        } );\n\n        _XMLFinishedHttpRequests.forEach(  req => {\n            if( req.status && req.status.toLowerCase() !== 'ok' ) {\n                _newErrorInfo.requestsErrored = _newErrorInfo.requestsErrored.concat( [ req ] );\n            }\n        } );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return _newErrorInfo;\n    };\n\n    // -------------------------------------------------------------\n    // HTTP Request/Response Info\n    // -------------------------------------------------------------\n\n    const _xhrProc = function( xhr, data ) {\n        _startProcessorTime = window.performance.now();\n        _transferSize += data && data.length ? data.length : 0;\n        _requestSize += data && data.length ? data.length : 0;\n        let JSONData;\n        try {\n            JSONData = typeof data === 'string' ? JSON.parse( data ) : {};\n        } catch ( error ) {\n            if( !xhr.requestURL.includes( 'socket.io' ) ) {\n                logger.warn( 'XHR Data not in JSON format' );\n            }\n            JSONData = {};\n        }\n        let dataObj = {\n            timeStart: 0,\n            XHR: xhr,\n            timeResponse: 0,\n            requestSize: data && data.length ? data.length : 0,\n            logCorrelationID: JSONData.header && JSONData.header.state && JSONData.header.state.logCorrelationID ? JSONData.header.state.logCorrelationID : 0,\n            startedDateTime: new Date().toISOString()\n        };\n        if ( _XMLHttpRequests.hasOwnProperty( xhr.requestURL ) ) {\n            _XMLHttpRequests[ xhr.requestURL ].push( dataObj );\n        } else {\n            _XMLHttpRequests[ xhr.requestURL ] = [ dataObj ];\n        }\n\n        for( let key in _eventListeners ) {\n            const listenerFn = _eventListeners[ key ];\n            xhr.addEventListener( key, function() {\n                listenerFn( xhr );\n            } );\n        }\n\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    xhrService.setMainProc( _xhrProc );\n\n    const _reset = function() {\n        _XMLHttpRequests = {};\n        _XMLFinishedHttpRequests = [];\n        _internalXMLHttpRequests = [];\n        _totalHttpRequests = 0;\n        _maxHTTPPayload = {\n            requestUrl: '',\n            payloadSize: 0\n        };\n        _transferSize = 0;\n        _requestSize = 0;\n        _responseSize = 0;\n        _XMLNetworkTimes = [];\n        _sortedXMLNetworkTimes = [];\n        _errorInfo = {\n            requestsAborted: [],\n            requestsErrored: [],\n            requestsTimeout: []\n        };\n        if ( window.performance.clearResourceTimings ) {\n            window.performance.clearResourceTimings();\n        }\n    };\n\n    self.start = function() {\n        _reset();\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { XHRProcessorOverhead: _time };\n    };\n\n    self.getMetrics = function() {\n        _processRequestsTime();\n        return {\n            totalNetworkTime: _processNetworkGaps(),\n            Network: {\n                requestSize: _requestSize,\n                responseSize: _responseSize,\n                totalSize: _transferSize,\n                maxRequest: {\n                    url: _maxHTTPPayload.requestUrl,\n                    size: _maxHTTPPayload.payloadSize\n                },\n                totalHttpRequests: _totalHttpRequests,\n                SoaDetails: _XMLFinishedHttpRequests,\n                errorInfo: _processErrorInfo()\n            },\n            totalNetworkCost: _transferSize\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsXhrProcessor;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awTableService\n */\nimport awColumnSvc from 'js/awColumnService';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport declModelRegistrySvc from 'js/declModelRegistryService';\nimport vmPropSvc from 'js/uwPropertyService';\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport logger from 'js/logger';\n/**\n * revisitme yogesh\n * in whole file lot of jquery and scope usages\n */\n\nimport $ from 'jquery';\n/**\n * {Number} The maximum # of nodes/rows to request to be returned in a single call to the dataProviderService\n * for the table.\n * <P>\n * Note: This number could be changed dynamically in the future to be based on the number of rows actually being\n * displayed.\n */\n\nvar _defaultPageSizeTable = 40;\n/**\n * {Number} The maximum # of nodes/rows to request to be returned in a single call to the dataProviderService\n * for the tree.\n * <P>\n * Note: This number could be changed dynamically in the future to be based on the number of rows actually being\n * displayed.\n */\n\nvar _defaultPageSizeTree = 40;\n/**\n * -------------------------------------------------------------------------<BR>\n * Define Service Objects<BR>\n * -------------------------------------------------------------------------<BR>\n */\n\n/**\n * This class is the overall model used to control the contents and behavior of the 'aw-table' directive. This\n * model allows for functional pieces to be overridden and implemented in application specific ways. Defaults\n * are specified here.\n *\n * @class AwTableViewModel\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' containing properties to base the new\n *            'awTableViewModel' upon.\n *\n * @param {String} gridId - ID of the {declGrid} this model is wrapping.\n *\n * @param {Object} $scope - the scope object\n *\n */\n\nvar AwTableViewModel = function (declViewModel, gridId, $scope) {\n  var vmSelf = this; // eslint-disable-line consistent-this\n\n  /**\n   * @property {String} selectionMode - 'single' or 'multi'\n   *\n   * @memberOf module:js/awTableService~AwTableViewModel\n   */\n\n  vmSelf.selectionMode = 'single';\n  /**\n   * @property {String} selectionScope - 'row' or 'cell'\n   *\n   * @memberOf module:js/awTableService~AwTableViewModel\n   */\n\n  vmSelf.selectionScope = 'row';\n  /**\n   * @property {Boolean} enableArrangeMenu - default is false\n   *\n   * @memberOf module:js/awTableService~AwTableViewModel\n   */\n\n  vmSelf.enableArrangeMenu = false;\n  /**\n   * @property {Boolean} enableFilterMenu - default is false\n   *\n   * @memberOf module:js/awTableService~AwTableViewModel\n   */\n\n  vmSelf.enableFilterMenu = false;\n  /**\n   * @property {Boolean} isEditable - default is false\n   */\n\n  vmSelf.isEditable = false;\n  /**\n   * ---------------------------------------------------------------------------<BR>\n   * Property & Function definition complete....Finish initialization. <BR>\n   * ---------------------------------------------------------------------------<BR>\n   */\n\n  /**\n   * Check if we do NOT have a valid 'declViewModel' and 'gridId' to work with.\n   */\n\n  assert(declViewModel, 'No DeclViewModel specified');\n  assert(gridId, 'No DeclGrid ID specified');\n\n  if (declViewModel._internal.isDestroyed) {\n    assert(false, 'Invalid to create objects on a destroyed DeclViewModel: ' + declViewModel);\n  }\n  /**\n   * The ID of the 'declViewModel' to use for this 'aw-table'.\n   */\n\n\n  vmSelf._declViewModelId = declViewModel.getPanelId();\n  /**\n   * Remember this 'declGrid' ID\n   * The ID of the 'declGrid' in the 'declViewModel' to use for this 'aw-table'.\n   */\n\n  vmSelf._declGridId = gridId;\n  declModelRegistrySvc.registerModel('AwTableViewModel', vmSelf, '_declGridId', '_modelId');\n  /**\n   * Initialize all properties based on the 'declViewModel' defined information.\n   * <P>\n   * Check if the 'declGrid' exists\n   */\n\n  var declGrid = declViewModel._internal.grids[gridId];\n  assert(declGrid, 'Invalid DeclGrid ID specified');\n  /**\n   * Set options from v-m json data\n   */\n\n  vmSelf.gridOptions = declGrid.gridOptions;\n  /**\n   * Check if declGrid has a valid 'dataProvider'.\n   */\n\n  assert(declGrid.dataProvider, 'No DeclDataProvider ID specified');\n  assert(declViewModel.dataProviders[declGrid.dataProvider], 'Invalid DeclDataProvider ID specified');\n  /**\n   * Set reference to the 'declGrid's UwDataProvider.\n   */\n\n  var uwDataProvider = declViewModel.dataProviders[declGrid.dataProvider];\n  /**\n   * The 'UwDataProvider' used to access information about the rows and column value of this 'aw-table'.\n   */\n\n  vmSelf._uwDataProvider = uwDataProvider;\n\n  if (uwDataProvider.selectionModel && uwDataProvider.selectionModel.mode) {\n    vmSelf.selectionMode = uwDataProvider.selectionModel.mode;\n  }\n\n  if (uwDataProvider.selectionModel && uwDataProvider.selectionModel.scope) {\n    vmSelf.selectionScope = uwDataProvider.selectionModel.scope;\n  }\n  /**\n   * Setup columns information\n   * The 'AwTableColumnProvider' used to access information about the columns of this 'aw-table'.\n   */\n\n\n  vmSelf._tableColumnProvider = awColumnSvc.createColumnProvider(declViewModel, $scope, uwDataProvider.commands, gridId, uwDataProvider.json.commandsAnchor);\n\n  vmSelf._tableColumnProvider.initialize().then(function () {// DO nothing\n  }, function (err) {\n    logger.error('Failure during table tableColumnProvider initialization: ' + err);\n  });\n  /**\n   * Set 'enableArrangeMenu' if the declGrid indicated an override of the default.\n   */\n\n\n  if (!declUtils.isNil(declGrid.enableArrangeMenu)) {\n    vmSelf.enableArrangeMenu = declGrid.enableArrangeMenu;\n  }\n  /**\n   * Set 'enableFilterMenu' if the declGrid indicated an override of the default.\n   */\n\n\n  if (!declUtils.isNil(declGrid.enableFilterMenu)) {\n    vmSelf.enableFilterMenu = declGrid.enableFilterMenu;\n  }\n  /**\n   * Check if declGrid has a valid 'propertyProvider'.\n   * The 'UwDataProvider' used to access properties for the rows and column value of this 'aw-table'.\n   */\n\n\n  if (declGrid.propertyProvider && declViewModel.dataProviders[declGrid.propertyProvider]) {\n    vmSelf._uwPropProvider = declViewModel.dataProviders[declGrid.propertyProvider];\n  }\n}; // AwTableViewModel\n\n/**\n * Override the default implementation to return more helpful information.\n *\n * @return {String} Text used to identify the ID of the AwTableViewModel (e.g. 'modelId' + optional model IDs).\n */\n\n\n_c11 = AwTableViewModel;\n_c = AwTableViewModel;\n\nAwTableViewModel.prototype.toString = function () {\n  if (this) {\n    if (this._declViewModelId) {\n      return this._modelId + //\n      '  viewModel: ' + this._declViewModelId + //\n      '  grid: ' + this._declGridId + //\n      '  dataProvider: ' + this._uwDataProvider;\n    }\n\n    return this._modelId + '  viewModelId: ' + '???';\n  }\n\n  return 'AwTableViewModel' + '(Destroyed)';\n};\n/**\n * Get the 'provider' used to access information about the rows and column values of this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {UwDataProvider} Reference to the currently registered 'UwDataProvider'.\n */\n\n\nAwTableViewModel.prototype.getDataProvider = function () {\n  return this._uwDataProvider;\n};\n/**\n * Get the 'provider' used to access properties for the rows and column values of this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {UwDataProvider} Reference to the currently registered 'UwDataProvider' that provides property\n *         information.\n */\n\n\nAwTableViewModel.prototype.getPropertyProvider = function () {\n  return this._uwPropProvider;\n};\n/**\n * Get the 'provider' used to access information about the columns of this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {AwTableColumnProvider} Reference to the currently registered 'AwTableColumnProvider'.\n */\n\n\nAwTableViewModel.prototype.getColumnProvider = function () {\n  assert(this._tableColumnProvider, 'No AwTableColumnProvider set');\n  return this._tableColumnProvider;\n};\n/**\n * Get the ID of the 'declGridId' in the 'declViewModel' to be used with this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {String} The ID of the 'declGridId' in the 'declViewModel' to be used with this 'aw-table'.\n */\n\n\nAwTableViewModel.prototype.getGridId = function () {\n  return this._declGridId;\n};\n/**\n * Free up all resources held/managed by this object.\n * <P>\n * Note: After this function, no API call should be considered valid. This function is intended to be called\n * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n * objects managed by this class may be considered a 'memory leak'.\n */\n\n\nAwTableViewModel.prototype.destroy = function () {\n  declModelRegistrySvc.unregisterModel('AwTableViewModel', this, '_declGridId', '_modelId');\n\n  if (this._tableColumnProvider) {\n    this._tableColumnProvider.destroy();\n\n    this._tableColumnProvider = null;\n  }\n\n  this._uwDataProvider = null;\n  this._uwPropProvider = null;\n};\n/**\n * Instances of this class represent the input structure to a request to load a page of rows (nodes) into a flat\n * table/list.\n *\n * @class ListLoadInput\n *\n * @param {String} parentUid - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {Number} pageSize - (Optional) (See property description below)\n * @param {Boolean} addAfter - (Optional) (See property description below)\n * @param {Object} filter - (Optional) The string used to filter the list.\n *            <P>\n *            <P>\n *\n * @property {String} parentUid - The 'parent' ViewModelTreeNode used to access any 'child' nodes in the next\n *           level down in the hierarchy.\n * @property {Number} startChildNdx - The 'childNdx' of the node to start the 'next' page loading at (Default:\n *           0).\n * @property {Number} pageSize - The maximum # of 'child' node to return in any single paged access (Default:\n *           See _defaultPageSizeTable ).\n * @property {String} startChildId - The 'id' of the node to start the 'next' page loading at.\n * @property {Boolean} addAfter - TRUE if any new children should be added AFTER the optional 'cursorNodeId'\n *           (Default: TRUE)\n * @property {String} filter - The string used to filter the list.\n */\n\n\nvar ListLoadInput = function (parentUid, startChildNdx, pageSize, addAfter, filter) {\n  this.parentUid = parentUid;\n  this.startChildNdx = declUtils.isNil(startChildNdx) ? 0 : startChildNdx;\n  this.pageSize = declUtils.isNil(pageSize) ? _defaultPageSizeTable : pageSize;\n  this.addAfter = declUtils.isNil(addAfter) ? true : addAfter;\n  this.filter = filter;\n};\n/**\n * The class is used to communicate the results of a single paged loading of 'child' nodes in a 'parent' node.\n *\n * @class ListLoadResult\n *\n * @param {ViewModelObject} parentNode - (See property description below)\n * @param {ViewModelObjectArray} childNodes - (See property description below)\n * @param {Number} totalChildCount - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {ViewModelObject} newTopNode - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelObject} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *           the next level down in the hierarchy.\n *\n * @property {ViewModelObjectArray} childNodes - Array of 'child' nodes resulting from a single load execution\n *           in the context of a 'parent' node (i.e. 'children' in the next level down in the hierarchy).\n *\n * @property {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *           loaded into the 'parent' 'children' array.\n *\n * @property {Number} startChildNdx - The 'childNdx' provided in the ListLoadInput that was used to load this\n *           data. This is returned as part of the result to handle cases when multiple loads are being\n *           performed on the same 'parent' and the original closure data could have changed during the async\n *           processing.\n *\n * @property {ViewModelObject} newTopNode - (Optional) If this property is defined, it will be used to replace\n *           the (unseen) 'top' node associated with the overall list.\n *           <P>\n *           Note: If 'children' array of this node is not empty it will be ignored and the 'childNodes' of this\n *           result will be set as the 1st level children of this 'parent' node.\n */\n\n\n_c12 = ListLoadInput;\n_c2 = ListLoadInput;\n\nvar ListLoadResult = function (parentNode, childNodes, totalChildCount, startChildNdx, newTopNode) {\n  this.parentNode = parentNode;\n  this.childNodes = childNodes;\n  this.totalChildCount = totalChildCount;\n  this.startChildNdx = startChildNdx;\n  /**\n   * We want to keep the following undefined until when know we need them to be defined.\n   */\n\n  if (newTopNode) {\n    this.newTopNode = newTopNode;\n  }\n};\n/**\n * Instances of this class represent the input structure to a request to load properties of a collection of\n * tree-table nodes.\n *\n * @class PropertyLoadRequest\n * @param {ViewModelTreeNode} parentNode - (See property description below)\n * @param {ViewModelTreeNodeArray} childNodes - (See property description below)\n * @param {AwTableColumnInfoArray} columnInfos - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNode} parentNode - The 'parent' node the 'child' nodes belong to.\n * @property {ViewModelTreeNodeArray} childNodes - Array of nodes to load ViewModelProperty objects for.\n * @property {AwTableColumnInfoArray} columnInfos - Array of AwTableColumnInfo object containing property names\n *           to load.\n */\n\n\n_c13 = ListLoadResult;\n_c3 = ListLoadResult;\n\nvar PropertyLoadRequest = function (parentNode, childNodes, columnInfos) {\n  this.parentNode = parentNode;\n  this.childNodes = childNodes;\n  this.columnInfos = columnInfos;\n};\n/**\n * Instances of this class represent the input structure to a request to load properties of a collection of\n * tree-table nodes.\n *\n * @class PropertyLoadInput\n * @param {PropertyLoadRequestArray} propertyLoadRequests - (See property description below)\n *            <P>\n *            <P>\n * @property {PropertyLoadRequestArray} propertyLoadRequests - Array requests to fulfill.\n */\n\n\n_c14 = PropertyLoadRequest;\n_c4 = PropertyLoadRequest;\n\nvar PropertyLoadInput = function (propertyLoadRequests) {\n  this.propertyLoadRequests = propertyLoadRequests;\n};\n/**\n * The class is used to communicate the results of incremental loading of properties for ViewModelTreeNodes.\n *\n * @class PropertyLoadResult\n * @param {ViewModelTreeNodeArray} updatedNodes - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNodeArray} updatedNodes - Array of ViewModelTreeNodes who's ViewModelProperties have\n *           been loaded/updated.\n */\n\n\n_c15 = PropertyLoadInput;\n_c5 = PropertyLoadInput;\n\nvar PropertyLoadResult = function (updatedNodes) {\n  this.updatedNodes = updatedNodes;\n};\n/**\n * The class is used to communicate the results of a single paged loading of 'child' nodes in a 'parent' node.\n *\n * @class TableLoadResult\n * @param {Number} totalFound - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelObjectArray} rowsLoaded - Array of ViewModelObjects resulting from a single load\n *           execution in the context of a flat table.\n * @property {Number} totalFound - The total # of known rows regardless of how many are currently loaded into\n *           the flat table.\n * @property {Number} nextSearchIndex - The 'page' to start the 'next' page loading at (or -1 if no more rows\n *           exist).\n */\n\n\n_c16 = PropertyLoadResult;\n_c6 = PropertyLoadResult;\n\nvar TableLoadResult = function (totalFound) {\n  this.rowsLoaded = [];\n  this.totalFound = totalFound;\n  this.nextSearchIndex = -1;\n};\n/**\n * Instances of this class represent the input structure to a request to load a page of rows (nodes) into a\n * tree-table.\n *\n * @class TreeLoadInput\n *\n * @param {ViewModelTreeNode} parentNode - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {String} startChildId - (See property description below)\n * @param {String} cursorNodeId - (Optional) (See property description below)\n * @param {Number} pageSize - (Optional) (See property description below)\n * @param {Boolean} addAfter - (Optional) (See property description below)\n * @param {ViewModelTreeNode} rootNode - (Optional) (See property description below)\n * @param {Boolean} focusLoadAction - (Optional) (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *           the next level down in the hierarchy.\n * @property {Number} startChildNdx - The 'childNdx' of the node to start the 'next' page loading at.\n * @property {String} startChildId - The 'id' of the node to start the 'next' page loading at.\n * @property {String} cursorNodeId - ID of an existing node in the 'parent' (and, presumably a\n *           ViewModelCollection) to insert any new nodes after (or before...depending on value of 'addAfter').\n *           <P>\n *           Note: If not defined, the 'child' nodes will be added at the end (or beginning) of the 'parent'\n *           node's 'children'.\n * @property {Boolean} addAfter - TRUE if any new children should be added AFTER the optional 'cursorNodeId'\n *           (Default: TRUE)\n * @property {Number} pageSize - The maximum # of 'child' nodes to return in any single paged access (Default:\n *           See _defaultPageSizeTree).\n * @property {ViewModelTreeNode} rootNode - The 'tree' ViewModelTreeNode used to access any 'child' nodes in the\n *           next level down in the hierarchy.\n * @property {Boolean} focusLoadAction - (Optional) TRUE if action is called to load selected object that is\n *           currently not present in tree\n */\n\n\n_c17 = TableLoadResult;\n_c7 = TableLoadResult;\n\nvar TreeLoadInput = function (parentNode, startChildNdx, startChildId, cursorNodeId, pageSize, addAfter, rootNode, focusLoadAction) {\n  this.parentNode = parentNode;\n  this.rootNode = rootNode;\n  this.startChildNdx = startChildNdx;\n  this.startChildId = startChildId;\n  this.cursorNodeId = cursorNodeId;\n  this.pageSize = declUtils.isNil(pageSize) ? _defaultPageSizeTree : pageSize;\n  this.addAfter = declUtils.isNil(addAfter) ? true : addAfter;\n  /**\n   * We want to keep following parameter undefined until when know we need them to be defined.\n   */\n\n  if (focusLoadAction) {\n    this.focusLoadAction = focusLoadAction;\n  }\n};\n/**\n * The class is used to communicate the results of a single paged loading of 'child' nodes in a 'parent' node.\n *\n * @class TreeLoadResult\n *\n * @param {ViewModelTreeNode} parentNode - (See property description below)\n * @param {ViewModelTreeNodeArray} childNodes - (See property description below)\n * @param {Number} totalChildCount - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {String} cursorNodeId - (See property description below)\n * @param {ViewModelTreeNode} newTopNode - (See property description below)\n * @param {ViewModelTreeNodeArray} vmNodesInTreeHierarchyLevels - (See property description below)\n * @param {Boolean} mergeNewNodesInCurrentlyLoadedTree - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *           the next level down in the hierarchy.\n *\n * @property {ViewModelTreeNodeArray} childNodes - Array of 'child' ViewModelTreeNode objects resulting from a\n *           single load execution in the context of a 'parent' node (i.e. 'children' in the next level down in\n *           the hierarchy).\n *\n * @property {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *           loaded into the 'parent' 'children' array.\n *\n * @property {Number} startChildNdx - The 'childNdx' provided in the TreeLoadInput that was used to load this\n *           data. This is returned as part of the result to handle cases when multiple loads are being\n *           performed on the same 'parent' and the original closure data could have changed during the async\n *           processing.\n *\n * @property {String} cursorNodeId - (Optional) ID of an existing node in the 'parent' (and, presumably a\n *           ViewModelCollection) to insert any new nodes after (or before) depending on value of 'addAfter'.\n *\n * @property {ViewModelTreeNode} newTopNode - (Optional) If this property is defined, it will be used to replace\n *           the (unseen) 'top' tree node associated with the overall tree-table.\n *           <P>\n *           Note: If 'children' array of this node is not empty it will be ignored and the 'childNodes' of this\n *           result will be set as the 1st level children of this 'parent' node.\n *\n * @property {ViewModelTreeNodeArray} vmNodesInTreeHierarchyLevels - (Optional) Array of arrays. Each array\n *           index represents ViewModelTreeNode objects at given level.Array at index 0 in represents level -1, ,\n *           index 1 level 0 and so on. Each level will have ViewModelTreeNode where next level nodes need to be\n *           inserted.\n *\n * @property {Boolean} mergeNewNodesInCurrentlyLoadedTree - (Optional) If this property is true,\n *           vmNodesInTreeHierarchyLevels array will be merged in currently loaded tree at proper merge point if\n *           present in tree. All existing nodes in Tree and their properties will be retained.\n *\n */\n\n\n_c18 = TreeLoadInput;\n_c8 = TreeLoadInput;\n\nvar TreeLoadResult = function (parentNode, childNodes, totalChildCount, startChildNdx, cursorNodeId, newTopNode, vmNodesInTreeHierarchyLevels, mergeNewNodesInCurrentlyLoadedTree) {\n  this.parentNode = parentNode;\n  this.childNodes = childNodes;\n  this.totalChildCount = totalChildCount;\n  this.startChildNdx = startChildNdx;\n  this.cursorNodeId = cursorNodeId;\n  /**\n   * We want to keep the following parameters undefined until when know we need them to be defined.\n   */\n\n  if (newTopNode) {\n    this.newTopNode = newTopNode;\n  }\n\n  if (vmNodesInTreeHierarchyLevels) {\n    this.vmNodesInTreeHierarchyLevels = vmNodesInTreeHierarchyLevels;\n  }\n\n  if (mergeNewNodesInCurrentlyLoadedTree) {\n    this.mergeNewNodesInCurrentlyLoadedTree = mergeNewNodesInCurrentlyLoadedTree;\n  }\n};\n/**\n * Instances of this class represent the properties, hierarchy and status of a single row in a tree-table.\n *\n * @class ViewModelTreeNode\n * @param {String} nodeId - Unique ID for this node within the tree-table.\n * @param {String} type - (See property description below)\n * @param {String} displayName - (See property description below)\n * @param {Number} levelNdx - (See property description below)\n * @param {Number} childNdx - (See property description below)\n * @param {String} iconURL - (See property description below)\n * @param {String} svgString - (See property description below)\n *            <P>\n *            <P>\n * @property {String} id - Unique ID for this node within the tree-table.\n * @property {String} type - The type of model object represented by this tree node (i.e. 'Item'\n *           'DocumentRevision', etc.).\n * @property {String} displayName - The name to display in the 'navigation' column of the tree node.\n * @property {Number} levelNdx - The # of levels down from the 'root' of the tree-table.\n * @property {Number} childNdx - The index to this 'child' within the immediate 'parent'. This information is\n *           meant to help in when only a partial (or sparse) range of children have been loaded. This index is\n *           stable within the 'parent' and not representative of the order based on the 'id'.\n * @property {String} iconURL - The URL to the icon associated with the display of this node in the 'navigation'\n *           column of the tree-table.\n *           <P>\n * @property {String} svgString - The String svg icon associated with the display of this node in the 'navigation'\n *           column of the tree-table.\n *           <P>\n * @property {ViewModelPropertyMap} props - Map of propertyName to ViewModelProperty object holding the\n *           value/state of that property (or 'undefined' if no properties have been loaded yet).\n *           <P>\n * @property {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *           loaded into the 'children' array (or 'undefined' if no expansion has been occured or there are no\n *           children).\n *           <P>\n * @property {ViewModelTreeNodeArray} children - Array of currently loaded ViewModelTreeNode children in the\n *           next level down in the hierarchy (or 'undefined' if no expansion has been occurred or there are no\n *           children).\n *           <P>\n * @property {Boolean} isLeaf - TRUE if we have checked and there are NO 'child' nodes beneath this 'parent'\n *           node (or 'undefined' if no expansion has been occurred or there are children).\n */\n\n\n_c19 = TreeLoadResult;\n_c9 = TreeLoadResult;\n\nvar ViewModelTreeNode = function (nodeId, type, displayName, levelNdx, childNdx, iconURL, svgString) {\n  this.uid = nodeId;\n  this.id = nodeId;\n  this.type = type;\n  this.displayName = displayName;\n  this.levelNdx = levelNdx;\n  this.childNdx = childNdx;\n  this.iconURL = iconURL;\n  this.svgString = svgString;\n  this.visible = true;\n  /**\n   * We want to keep the following undefined until when know we need them to be defined.\n   */\n  // this.props;              // Defined for all ViewModelObjects\n  // this.selected;           // Defined for all ViewModelObjects\n  //\n  // this.totalChildCount;\n  // this.children;\n  // this.isLeaf;\n  // this.isExpanded;\n\n  /**\n   * @private\n   * @property {Number} level number property used by ui-grid\n   */\n\n  this.$$treeLevel = levelNdx;\n  /**\n   * Note: This property is only defined when needed and then deleted after use.\n   *\n   * @private\n   * @property {Boolean} TRUE if this node is known to have >0 siblings before it in the ordered collection of\n   *           'child' nodes of its 'parent' node.\n   */\n  // this.incompleteHead = false;\n\n  /**\n   * Note: This property is only defined when needed and then deleted after use.\n   *\n   * @private\n   * @property {Boolean} TRUE if this node is known to have >0 siblings after it in the ordered collection of\n   *           'child' nodes of its 'parent' node.\n   */\n  // this.incompleteTail = false;\n};\n/**\n * Note: This property is only defined when needed and then deleted after use.\n *\n * @private\n * @property {String} A localized suffix string shown when async loading operations are being performed on this\n *           node.\n */\n// this.loadingStatus;\n\n\n_c20 = ViewModelTreeNode;\n_c10 = ViewModelTreeNode;\n\nViewModelTreeNode.prototype.clearEditiableStates = function () {\n  _.forEach(this.props, function (prop2) {\n    vmPropSvc.resetUpdates(prop2);\n    vmPropSvc.setIsEditable(prop2, false);\n  });\n};\n/**\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n *\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n */\n\n\nViewModelTreeNode.prototype.setEditableStates = function (editable, override, skipDigest) {\n  viewModelObjectSvc.setEditableStates(this, editable, override, skipDigest);\n};\n/**\n * Override the default implementation to return more helpful information.\n *\n * @return {String} Text used to identify this ViewModelTreeNode (e.g. 'displayName', 'levelNdx', etc.).\n */\n\n\nViewModelTreeNode.prototype.toString = function () {\n  if (this.displayName) {\n    return 'node: displayName: ' + this.displayName + ' levelNdx: ' + this.levelNdx + ' childNdx: ' + this.childNdx;\n  }\n\n  return 'node: displayName: ' + '???';\n};\n/**\n * -------------------------------------------------------------------------<BR>\n * Define Service API<BR>\n * -------------------------------------------------------------------------<BR>\n */\n\n\nvar exports = {};\n/**\n * @param {String} parentUid - UID of the 'parent' IModelObject used to access any 'child' nodes in the next\n *            level down in the hierarchy.\n *\n * @param {Number} startChildNdx - The index to start the 'next' page loading at.\n *\n * @param {Number} pageSize - (Optional) The maximum # of 'child' nodes to return in any single paged access\n *            (Default: See _defaultPageSize).\n *\n * @param {Boolean} addAfter - (Optional) TRUE if any new children should be added AFTER the optional\n *            'cursorNodeId' (Default: TRUE)\n *\n * @param {Boolean} skipFocusOccCheck - (Optional) TRUE if you do not want focus passed. (Default: FALSE)\n *\n * @param {String} filter - (Optional) Filter string.\n *\n * @return {ListLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createListLoadInput = function (parentUid, startChildNdx, pageSize, addAfter, skipFocusOccCheck, filter) {\n  return new ListLoadInput(parentUid, startChildNdx, pageSize, addAfter, filter);\n};\n/**\n * @param {ViewModelObject} parentNode - The 'parent' ViewModelObject used to access any 'child' nodes in the\n *            next level down in the hierarchy.\n *\n * @param {ViewModelObjectArray} childNodes - Array of 'child' nodes resulting from a single load execution in\n *            the context of a 'parent' node (i.e. 'children' in the next level down in the hierarchy).\n *\n * @param {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *            loaded into the 'parent' 'children' array.\n *\n * @param {Number} startChildNdx - The 'childNdx' provided in the ListLoadInput that was used to load this data.\n *            This is returned as part of the result to handle cases when multiple loads are being performed on\n *            the same 'parent' and the original closure data could have changed during the async processing.\n *\n * @param {ViewModelObject} newTopNode - (Optional) If this property is defined, it will be used to replace the\n *            (unseen) 'top' node associated with the overall list.\n *            <P>\n *            Note: If 'children' array of this node is not empty it will be ignored and the 'childNodes' of\n *            this result will be set as the 1st level children of this 'parent' node.\n *\n * @return {ListLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createListLoadResult = function (parentNode, childNodes, totalChildCount, startChildNdx, newTopNode) {\n  return new ListLoadResult(parentNode, childNodes, totalChildCount, startChildNdx, newTopNode);\n};\n/**\n * @param {TreeNodeInput} treeLoadInput - The input to a 'getTreeNodePage' operation that specified which\n *            'child' nodes to load dynamically.\n * @param {TreeNodeResult} treeLoadResult - The result of a 'getTreeNodePage' operation that resulted in\n *            ViewModelTreeNodes who's ViewModelProperties need to be loaded dynamically.\n * @param {AwTableColumnInfoArray} columnInfos - Array of AwTableColumnInfo containing property names to\n *            request.\n *\n * @return {PropertyLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createPropertyLoadRequest = function (treeLoadInput, treeLoadResult, columnInfos) {\n  return new PropertyLoadRequest(treeLoadInput.parentNode, treeLoadResult.childNodes, columnInfos);\n};\n/**\n * @param {ViewModelTreeNodeArray} owningNodes - Array of nodes to load ViewModelProperty objects for.\n * @param {StringArray} propertyNames - Array property names to request.\n *\n * @return {PropertyLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createPropertyLoadInput = function (owningNodes, propertyNames) {\n  return new PropertyLoadInput(owningNodes, propertyNames);\n};\n/**\n * @param {ViewModelTreeNodeArray} childNodes - Array of nodes who's ViewModelProperties have been\n *           loaded/updated.\n *\n * @return {PropertyLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createPropertyLoadResult = function (childNodes) {\n  return new PropertyLoadResult(childNodes);\n};\n/**\n * @param {Number} totalFound - Total # of rows in the overall table.\n *\n * @return {TableLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createTableLoadResult = function (totalFound) {\n  return new TableLoadResult(totalFound);\n};\n/**\n * @param {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *            the next level down in the hierarchy.\n *\n * @param {Number} startChildNdx - The 'childNdx' to start the 'next' page loading at.\n *\n * @param {String} startChildId - (Optional) The 'id' of the node to start the 'next' page loading at.\n *\n * @param {String} cursorNodeId - (Optional) ID of an existing node in the 'parent' (and, presumably a\n *            ViewModelCollection) to insert any new nodes after (or before) depending on value of 'addAfter'.\n *\n * @param {Number} pageSize - (Optional) The maximum # of 'child' nodes to return in any single paged access\n *            (Default: See _defaultPageSize).\n *\n * @param {Boolean} addAfter - (Optional) TRUE if any new children should be added AFTER the optional\n *            'cursorNodeId' (Default: TRUE)\n * @param {ViewModelTreeNode} rootNode - The 'root' ViewModelTreeNode used to access any 'child' nodes in the\n *            next level down in the hierarchy.\n *\n * @return {TreeLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createTreeLoadInput = function (parentNode, startChildNdx, startChildId, cursorNodeId, pageSize, addAfter, rootNode) {\n  return new TreeLoadInput(parentNode, startChildNdx, startChildId, cursorNodeId, pageSize, addAfter, rootNode);\n};\n/**\n * @param {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *            the next level down in the hierarchy.\n *\n * @param {ViewModelTreeNodeArray} childNodes - Array of 'child' ViewModelTreeNode objects resulting from a\n *            single load execution in the context of a 'parent' node (i.e. 'children' in the next level down in\n *            the hierarchy).\n *\n * @param {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *            loaded into the 'parent' 'children' array.\n *\n * @param {Number} startChildNdx - The 'childNdx' provided in the TreeLoadInput that was used to load this data.\n *            This is returned as part of the result to handle cases when multiple loads are being performed on\n *            the same 'parent' and the original closure data could have changed during the async processing.\n *\n * @param {String} cursorNodeId - (Optional) ID of an existing node in the 'parent' (and, presumably a\n *            ViewModelCollection) to insert any new nodes after (or before) depending on value of 'addAfter'.\n *\n * @param {Number} newTopNode - (Optional) The node to be considered the new top-most 'parent' node as a result\n *            of this loading operation.\n *            <P>\n *            Note: Often this will be an 'occurrence' object of the underlying 'productModelObject'.\n *\n * @return {TreeLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createTreeLoadResult = function (parentNode, childNodes, totalChildCount, startChildNdx, cursorNodeId, newTopNode) {\n  return new TreeLoadResult(parentNode, childNodes, totalChildCount, startChildNdx, cursorNodeId, newTopNode);\n};\n/**\n * @param {String} nodeId - Unique ID for this node within the tree-table. 'DocumentRevision', etc.).\n * @param {String} type - The type of model object represented by this tree node (i.e. 'Item'\n * @param {String} displayName - The name to display in the 'navigation' column of the tree-table.\n * @param {Number} levelNdx - The # of levels down from the 'root' of the tree-table.\n * @param {Number} childNdx - The index to this 'child' within the immediate 'parent'. This information is meant\n *            to help in when only a partial (or sparse) range of children have been loaded. This index is\n *            stable within the 'parent' and not representative of the order based on the 'id'.\n * @param {String} iconURL - The URL to the icon associated with the display of this node in the 'navigation'\n *            column of the tree-table.\n * @param {String} svgString - The String svg icon associated with the display of this node in the 'navigation'\n *            column of the tree-table.\n *\n * @return {ViewModelTreeNode} Newly created wrapper initialized with properties from the given inputs.\n */\n\nexport let createViewModelTreeNode = function (nodeId, type, displayName, levelNdx, childNdx, iconURL, svgString) {\n  return new ViewModelTreeNode(nodeId, type, displayName, levelNdx, childNdx, iconURL, svgString);\n};\n/**\n * Returns a class that is the overall model used to control the contents and behavior of the 'aw-table'\n * directive. This model allows for functional pieces to be overridden and implemented in application specific\n * ways. Defaults are specified here.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' containing properties to base the new\n *            'awTableViewModel' upon.\n * @param {String} gridId - ID of the {declGrid} the new model will wrap.\n * @param {Object} $scope - the scope object\n *\n * @returns {AwTableViewModel} New instance of this class.\n */\n\nexport let createViewModel = function (declViewModel, gridId, $scope) {\n  return new AwTableViewModel(declViewModel, gridId, $scope);\n};\n/**\n * Centralized handling of the 'start' phase of editing a cell in the table. This function is invoked by the\n * 'aw-table-cell' directive's controller.\n *\n * @param {Object} $scope - The AngularJS scope of the controller.\n * @param {Element} $element - The DOM Element the controller is attached to.\n * @param {ClickEvent} event - The ClickEvent on the cell where the editing is to take place.\n */\n\nexport let handleCellStartEdit = function ($scope, $element, event) {\n  if ($scope.prop && $scope.prop.isEditable && !$scope.prop.isEditing) {\n    // stop propagation to avoid firing the stopEdit event we are about to attach\n    event.stopPropagation(); // trigger any existing stopEdit event in case another cell is in edit mode\n\n    $('body').triggerHandler('click');\n    $scope.prop.autofocus = true;\n    $scope.prop.isEditing = true;\n\n    $scope._bodyClickListener = function (event2) {\n      exports.handleCellStopEdit($scope, $element, event2);\n    }; // click outside stops the edit\n\n\n    $('body').on('click touchstart', $scope._bodyClickListener);\n    /**\n     * Apply editing class on the parent row so CSS can increase the height\n     * <P>\n     * Would be better to set this on the row scope and let the row template style the DOM but 'ui-grid'\n     * doesn't seem to make that part of the template easily customizable.\n     */\n\n    var gridElem = $element.closest('.aw-jswidgets-grid');\n\n    if (gridElem) {\n      var gridScope = gridElem.scope();\n\n      if (gridScope && gridScope.findCellRowElement) {\n        var rowElem = gridScope.findCellRowElement($element);\n\n        if (rowElem) {\n          rowElem.addClass('aw-jswidgets-isEditing-row');\n        }\n      }\n    }\n    /**\n     * Add tabIndex so that it can be used by the control being opened for edit. Otherwise, that control is\n     * opened with the default tab index and tabbing does not move to the next control.\n     */\n\n\n    $scope.prop.tabIndex = event.currentTarget.tabIndex;\n    /**\n     * Set the cellTop element tab index to -1 so that backtab moves to the correct cell\n     */\n\n    if ($scope.prop.type !== 'DATE' && $scope.prop.type !== 'DATEARRAY') {\n      event.currentTarget.tabIndex = -1;\n    }\n  }\n};\n/**\n * Centralized handling of the 'end' phase of editing a cell in the table. This function is invoked by the\n * 'aw-table-cell' directive's controller.\n *\n * @param {Object} $scope - The AngularJS scope of the controller.\n * @param {Element} $element - The DOM Element the controller is attached to.\n * @param {ClickEvent} event - The ClickEvent on some other element indicating editing is to stop.\n */\n\nexport let handleCellStopEdit = function ($scope, $element, event) {\n  /**\n   * Ignore clicks in the date picker header and ckeditor toolbar.\n   * <P>\n   * Note: Can't reference with the standard datepicker id (#ui-datepicker-div) as the element has been\n   * detached at this point (month change destroys original div)\n   * <P>\n   * Could be better to flip and ensure target has \"#main-view\" parent, but that would tie to tc.html\n   */\n  var target = $(event.target);\n\n  if (target.parents('.ui-datepicker-header').length === 0 && target.closest('.cke').length === 0) {\n    var cell = target.closest('.aw-jswidgets-cellTop');\n\n    if (cell.length === 0 || !cell.scope() || !cell.scope().prop || !cell.scope().prop.isEditing) {\n      /**\n       * For non-LOV object reference property stay on edit widget until object Reference panel is active\n       */\n      if ($scope.prop.type === 'OBJECT' && !$scope.prop.hasLov) {\n        if ($scope.referencePanelLoaded) {\n          return;\n        }\n      }\n\n      $scope.$evalAsync(function () {\n        $scope.prop.isEditing = false;\n        /**\n         * Set or unset dirty state based on current value\n         */\n\n        var prevDisplayValues = $scope.prop.prevDisplayValues;\n        $scope.prop.dirty = prevDisplayValues && prevDisplayValues.length > 0 && !_.isEqual(prevDisplayValues[0], $scope.prop.uiValue);\n      });\n      var gridElem = $element.closest('.aw-jswidgets-grid');\n\n      if (gridElem) {\n        var gridScope = gridElem.scope();\n\n        if (gridScope && gridScope.findCellRowElement) {\n          var rowElem = gridScope.findCellRowElement($element);\n\n          if (rowElem) {\n            rowElem.removeClass('aw-jswidgets-isEditing-row');\n          }\n        }\n      }\n\n      $('body').off('click touchstart', $scope._bodyClickListener);\n      delete $scope._bodyClickListener;\n      /**\n       * Reset the cellTop element tab index\n       */\n\n      var $cellTop = $element.find('.aw-jswidgets-cellTop');\n\n      if ($cellTop && $scope.prop) {\n        $cellTop.prop('tabindex', $scope.prop.tabIndex);\n      }\n    }\n  }\n};\n/**\n * Test if the given object 'is-a' ListLoadInput created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ListLoadInput.\n */\n\nexport let isListLoadInput = function (objectToTest) {\n  return objectToTest instanceof ListLoadInput;\n};\n/**\n * Test if the given object 'is-a' TreeLoadInput created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a TreeLoadInput.\n */\n\nexport let isTreeLoadInput = function (objectToTest) {\n  return objectToTest instanceof TreeLoadInput;\n};\n/**\n * Test if the given object 'is-a' ViewModelTreeNode created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelTreeNode.\n */\n\nexport let isViewModelTreeNode = function (objectToTest) {\n  return objectToTest instanceof ViewModelTreeNode;\n};\n/**\n * Test if the given object 'is-a' PropertyLoadInput created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a PropertyLoadInput.\n */\n\nexport let isPropertyLoadInput = function (objectToTest) {\n  return objectToTest instanceof PropertyLoadInput;\n};\n/**\n * Resolve the row data for the 'next' page of 'children' nodes of the given 'parent'.\n * <P>\n * Note: The paging status is maintained in the 'parent' node.\n *\n * @param {TreeLoadInput} treeLoadInput - The original input to the load operation.\n *\n * @param {ViewModelTreeNodeArray} childNodesIn - The 'child' nodes just loaded.\n *\n * @param {Boolean} simplePage - TRUE if the 'childNodesIn' represents a 'page' (and NOT an array of all 'child'\n *            nodes). If TRUE, the nodes will be simply passed along as the result. If FALSE, the page of\n *            children will be extracted from this array.\n *\n * @param {Boolean} startReached - TRUE if the first page of the results has been reached.\n *\n * @param {Boolean} endReached - TRUE if the last page of the results has been reached.\n *\n * @param {ViewModelTreeNode} newTopNode - (Optional) The node to be considered the new top-most 'parent' node\n *            as a result of this loading operation.\n *\n * @return {TreeLoadResult} A new TreeLoadResult object containing result/status information.\n */\n\nexport let buildTreeLoadResult = function (treeLoadInput, childNodesIn, simplePage, startReached, endReached, newTopNode) {\n  var parentNode = newTopNode ? newTopNode : treeLoadInput.parentNode;\n  var currentChildCount = parentNode.children ? parentNode.children.length : 0;\n\n  if (simplePage) {\n    /**\n     * Determine if we already know how many 'child' nodes this 'parent' has OR we need to compute it now.\n     * <P>\n     * Assume we do not know a 'total' for the 'parent' and simply add these 'child' nodes to the total.\n     */\n    var totalChildCount;\n\n    if (_.isEmpty(childNodesIn)) {\n      totalChildCount = currentChildCount;\n    } else {\n      totalChildCount = currentChildCount + childNodesIn.length;\n      /**\n       * Get the 'head' and 'tail' from the collection of new 'child' nodes.\n       */\n\n      var headChild = _.head(childNodesIn);\n\n      var lastChild = _.last(childNodesIn);\n      /**\n       * Check if the 'tail' is known to NOT be the last 'child' of this 'parent'.<br>\n       * If so: Mark that 'child' as an 'incompleteTail' so we know to ask for more below it later.\n       */\n\n\n      if (!declUtils.isNil(endReached)) {\n        if (!endReached) {\n          lastChild.incompleteTail = true;\n          totalChildCount++;\n        }\n      } else if (lastChild.childNdx + 1 < totalChildCount) {\n        lastChild.incompleteTail = true;\n      }\n      /**\n       * Check if we are adding the 1st set of 'child' nodes to this 'parent' and the 'head' one is NOT\n       * the actual 1st child of that 'parent'<BR>\n       * If so: Mark that 'child' as an 'incompleteHead' so we know to ask for more above it later.\n       */\n\n\n      if (!declUtils.isNil(startReached)) {\n        if (!startReached) {\n          headChild.incompleteHead = true;\n        }\n      } else if (currentChildCount === 0 && headChild && headChild.childNdx > 0) {\n        headChild.incompleteHead = true;\n      }\n    }\n    /**\n     * Create the final data object returned to the dataProvider.\n     */\n\n\n    return exports.createTreeLoadResult(treeLoadInput.parentNode, childNodesIn, totalChildCount, treeLoadInput.startChildNdx, treeLoadInput.cursorNodeId, newTopNode);\n  }\n  /**\n   * Check for trival 'no child' case.\n   */\n\n\n  if (_.isEmpty(childNodesIn)) {\n    return exports.createTreeLoadResult(parentNode, [], currentChildCount, treeLoadInput.startChildNdx, treeLoadInput.cursorNodeId, newTopNode);\n  }\n  /**\n   * Determine starting/stop row range to resolve\n   */\n\n\n  var pageSize = treeLoadInput.pageSize;\n  var begNdx = treeLoadInput.startChildNdx;\n\n  if (begNdx >= childNodesIn.length) {\n    return exports.createTreeLoadResult(parentNode, [], childNodesIn.length, treeLoadInput.startChildNdx, treeLoadInput.cursorNodeId, newTopNode);\n  }\n\n  var endNdx = begNdx + pageSize;\n\n  if (endNdx > childNodesIn.length) {\n    endNdx = childNodesIn.length;\n  }\n\n  var childNodes = childNodesIn.slice(begNdx, endNdx);\n\n  if (endNdx < childNodesIn.length) {\n    _.last(childNodes).incompleteTail = true;\n  }\n  /**\n   * Resolve the async request.\n   */\n\n\n  return exports.createTreeLoadResult(parentNode, childNodes, childNodesIn.length, treeLoadInput.startChildNdx, treeLoadInput.cursorNodeId, newTopNode);\n};\n/**\n * Check if the given TreeLoadInput is valid.\n *\n * @param {TreeLoadInput} treeLoadInput - Object to validate.\n *\n * @return {String} The text of a failure message (or NULL if input is valid).\n */\n\nexport let validateTreeLoadInput = function (treeLoadInput) {\n  if (!treeLoadInput) {\n    return 'No TreeLoadInput specified';\n  } else if (!treeLoadInput.parentNode || treeLoadInput.startChildNdx < 0 || treeLoadInput.pageSize <= 0) {\n    return 'Invalid TreeLoadInput specified';\n  }\n\n  return undefined;\n};\n/**\n * Extract a parameter of a specific class from the given arguments array.\n * <P>\n * Note: The order or existence of parameters can vary when more-than-one property is specified in the\n * 'inputData' property of a DeclAction JSON. This code seeks out the requested one.\n *\n * @param {ObjectArray} argsIn - Array of argument objects\n *\n * @return {Object} ListLoadInput from the given arguments (or undefined if not found)\n */\n\nexport let findListLoadInput = function (argsIn) {\n  for (var ndx = 0; ndx < argsIn.length; ndx++) {\n    var arg = argsIn[ndx];\n\n    if (exports.isListLoadInput(arg)) {\n      return arg;\n    }\n  }\n\n  return undefined;\n};\n/**\n * Extract a parameter of a specific class from the given arguments array.\n * <P>\n * Note: The order or existence of parameters can vary when more-than-one property is specified in the\n * 'inputData' property of a DeclAction JSON. This code seeks out the requested one.\n *\n * @param {ObjectArray} argsIn - Array of argument objects\n *\n * @return {Object} PropertyLoadInput from the given arguments (or undefined if not found)\n */\n\nexport let findPropertyLoadInput = function (argsIn) {\n  var input;\n\n  for (var ndx = 0; ndx < argsIn.length; ndx++) {\n    var arg = argsIn[ndx];\n\n    if (exports.isPropertyLoadInput(arg)) {\n      input = arg;\n    } else if (arg && arg.hasOwnProperty('clientName') && arg.hasOwnProperty('clientScopeURI') && input) {\n      // add input context from v-m\n      input.propertyLoadContext = arg;\n    }\n  }\n\n  return input;\n};\n/**\n * Extract a parameter of a specific class from the given arguments array.\n * <P>\n * Note: The order or existence of parameters can vary when more-than-one property is specified in the\n * 'inputData' property of a DeclAction JSON. This code seeks out the requested one.\n *\n * @param {ObjectArray} argsIn - Array of argument objects\n *\n * @return {Object} TreeLoadInput from the given arguments (or undefined if not found)\n */\n\nexport let findTreeLoadInput = function (argsIn) {\n  for (var ndx = 0; ndx < argsIn.length; ndx++) {\n    var arg = argsIn[ndx];\n\n    if (exports.isTreeLoadInput(arg)) {\n      return arg;\n    }\n  }\n\n  return undefined;\n};\nexports = {\n  createListLoadInput,\n  createListLoadResult,\n  createPropertyLoadRequest,\n  createPropertyLoadInput,\n  createPropertyLoadResult,\n  createTableLoadResult,\n  createTreeLoadInput,\n  createTreeLoadResult,\n  createViewModelTreeNode,\n  createViewModel,\n  handleCellStartEdit,\n  handleCellStopEdit,\n  isListLoadInput,\n  isTreeLoadInput,\n  isViewModelTreeNode,\n  isPropertyLoadInput,\n  buildTreeLoadResult,\n  validateTreeLoadInput,\n  findListLoadInput,\n  findPropertyLoadInput,\n  findTreeLoadInput\n};\nexport default exports;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"AwTableViewModel\");\n$RefreshReg$(_c2, \"ListLoadInput\");\n$RefreshReg$(_c3, \"ListLoadResult\");\n$RefreshReg$(_c4, \"PropertyLoadRequest\");\n$RefreshReg$(_c5, \"PropertyLoadInput\");\n$RefreshReg$(_c6, \"PropertyLoadResult\");\n$RefreshReg$(_c7, \"TableLoadResult\");\n$RefreshReg$(_c8, \"TreeLoadInput\");\n$RefreshReg$(_c9, \"TreeLoadResult\");\n$RefreshReg$(_c10, \"ViewModelTreeNode\");\n\nvar _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20;\n\n$RefreshReg$(_c11, \"AwTableViewModel\");\n$RefreshReg$(_c12, \"ListLoadInput\");\n$RefreshReg$(_c13, \"ListLoadResult\");\n$RefreshReg$(_c14, \"PropertyLoadRequest\");\n$RefreshReg$(_c15, \"PropertyLoadInput\");\n$RefreshReg$(_c16, \"PropertyLoadResult\");\n$RefreshReg$(_c17, \"TableLoadResult\");\n$RefreshReg$(_c18, \"TreeLoadInput\");\n$RefreshReg$(_c19, \"TreeLoadResult\");\n$RefreshReg$(_c20, \"ViewModelTreeNode\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/awTableService.js"],"names":["_defaultPageSizeTable","_defaultPageSizeTree","AwTableViewModel","vmSelf","assert","declViewModel","declModelRegistrySvc","declGrid","uwDataProvider","awColumnSvc","logger","declUtils","ListLoadInput","ListLoadResult","PropertyLoadRequest","PropertyLoadInput","PropertyLoadResult","TableLoadResult","TreeLoadInput","TreeLoadResult","ViewModelTreeNode","_","vmPropSvc","viewModelObjectSvc","exports","createListLoadInput","createListLoadResult","createPropertyLoadRequest","treeLoadInput","treeLoadResult","createPropertyLoadInput","createPropertyLoadResult","createTableLoadResult","createTreeLoadInput","createTreeLoadResult","createViewModelTreeNode","createViewModel","handleCellStartEdit","$scope","event","$","gridElem","$element","gridScope","rowElem","handleCellStopEdit","target","cell","prevDisplayValues","$cellTop","isListLoadInput","objectToTest","isTreeLoadInput","isViewModelTreeNode","isPropertyLoadInput","buildTreeLoadResult","parentNode","newTopNode","currentChildCount","totalChildCount","childNodesIn","headChild","lastChild","pageSize","begNdx","endNdx","childNodes","validateTreeLoadInput","findListLoadInput","ndx","argsIn","arg","findPropertyLoadInput","input","findTreeLoadInput"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,WAAA,MAAA,oBAAA;AACA,OAAA,kBAAA,MAAA,2BAAA;AACA,OAAA,oBAAA,MAAA,6BAAA;AACA,OAAA,SAAA,MAAA,sBAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,SAAA,MAAA,cAAA;AACA,OAAA,MAAA,MAAA,WAAA;AAEA;AACA;AACA;AACA;;AACA,OAAA,CAAA,MAAA,QAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,qBAAqB,GAAzB,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAxB,EAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gBAAgB,GAAG,UAAA,aAAA,EAAA,MAAA,EAAA,MAAA,EAA0C;EAC7D,IAAIC,MAAM,GADmD,IAC7D,CAD6D,CAC1C;;EAEnB;AACJ;AACA;AACA;AACA;;EACIA,MAAM,CAANA,aAAAA,GAAAA,QAAAA;EAEA;AACJ;AACA;AACA;AACA;;EACIA,MAAM,CAANA,cAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;;EACIA,MAAM,CAANA,iBAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;;EACIA,MAAM,CAANA,gBAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;;EACIA,MAAM,CAANA,UAAAA,GAAAA,KAAAA;EAEA;AACJ;AACA;AACA;AACA;;EAEI;AACJ;AACA;;EACIC,MAAM,CAAA,aAAA,EAANA,4BAAM,CAANA;EACAA,MAAM,CAAA,MAAA,EAANA,0BAAM,CAANA;;EAEA,IAAIC,aAAa,CAAbA,SAAAA,CAAJ,WAAA,EAA0C;IACtCD,MAAM,CAAA,KAAA,EAAS,6DAAfA,aAAM,CAANA;EACH;EAED;AACJ;AACA;;;EACID,MAAM,CAANA,gBAAAA,GAA0BE,aAAa,CAAvCF,UAA0BE,EAA1BF;EAEA;AACJ;AACA;AACA;;EACIA,MAAM,CAANA,WAAAA,GAAAA,MAAAA;EAEAG,oBAAoB,CAApBA,aAAAA,CAAAA,kBAAAA,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,UAAAA;EAEA;AACJ;AACA;AACA;AACA;;EACI,IAAIC,QAAQ,GAAGF,aAAa,CAAbA,SAAAA,CAAAA,KAAAA,CAAf,MAAeA,CAAf;EAEAD,MAAM,CAAA,QAAA,EAANA,+BAAM,CAANA;EAEA;AACJ;AACA;;EACID,MAAM,CAANA,WAAAA,GAAqBI,QAAQ,CAA7BJ,WAAAA;EAEA;AACJ;AACA;;EACIC,MAAM,CAAEG,QAAQ,CAAV,YAAA,EAANH,kCAAM,CAANA;EACAA,MAAM,CAAEC,aAAa,CAAbA,aAAAA,CAA6BE,QAAQ,CAAvC,YAAEF,CAAF,EAAND,uCAAM,CAANA;EAEA;AACJ;AACA;;EACI,IAAII,cAAc,GAAGH,aAAa,CAAbA,aAAAA,CAA6BE,QAAQ,CAA1D,YAAqBF,CAArB;EAEA;AACJ;AACA;;EACIF,MAAM,CAANA,eAAAA,GAAAA,cAAAA;;EAEA,IAAIK,cAAc,CAAdA,cAAAA,IAAiCA,cAAc,CAAdA,cAAAA,CAArC,IAAA,EAA0E;IACtEL,MAAM,CAANA,aAAAA,GAAuBK,cAAc,CAAdA,cAAAA,CAAvBL,IAAAA;EACH;;EAED,IAAIK,cAAc,CAAdA,cAAAA,IAAiCA,cAAc,CAAdA,cAAAA,CAArC,KAAA,EAA2E;IACvEL,MAAM,CAANA,cAAAA,GAAwBK,cAAc,CAAdA,cAAAA,CAAxBL,KAAAA;EACH;EAED;AACJ;AACA;AACA;;;EACIA,MAAM,CAANA,oBAAAA,GAA8BM,WAAW,CAAXA,oBAAAA,CAAAA,aAAAA,EAAAA,MAAAA,EAC1BD,cAAc,CADYC,QAAAA,EAAAA,MAAAA,EACOD,cAAc,CAAdA,IAAAA,CADrCL,cAA8BM,CAA9BN;;EAGAA,MAAM,CAANA,oBAAAA,CAAAA,UAAAA,GAAAA,IAAAA,CAA+C,YAAW,CACtD;EADJA,CAAAA,EAEG,UAAA,GAAA,EAAgB;IACfO,MAAM,CAANA,KAAAA,CAAc,8DAAdA,GAAAA;EAHJP,CAAAA;EAMA;AACJ;AACA;;;EACI,IAAI,CAACQ,SAAS,CAATA,KAAAA,CAAiBJ,QAAQ,CAA9B,iBAAKI,CAAL,EAAqD;IACjDR,MAAM,CAANA,iBAAAA,GAA2BI,QAAQ,CAAnCJ,iBAAAA;EACH;EAED;AACJ;AACA;;;EACI,IAAI,CAACQ,SAAS,CAATA,KAAAA,CAAiBJ,QAAQ,CAA9B,gBAAKI,CAAL,EAAoD;IAChDR,MAAM,CAANA,gBAAAA,GAA0BI,QAAQ,CAAlCJ,gBAAAA;EACH;EAED;AACJ;AACA;AACA;;;EACI,IAAII,QAAQ,CAARA,gBAAAA,IAA6BF,aAAa,CAAbA,aAAAA,CAA6BE,QAAQ,CAAtE,gBAAiCF,CAAjC,EAA4F;IACxFF,MAAM,CAANA,eAAAA,GAAyBE,aAAa,CAAbA,aAAAA,CAA6BE,QAAQ,CAA9DJ,gBAAyBE,CAAzBF;EACH;AAxIL,CAAA,C,CAyIG;;AAEH;AACA;AACA;AACA;AACA;;;OA/IID,gB;KAAAA,gB;;AAgJJA,gBAAgB,CAAhBA,SAAAA,CAAAA,QAAAA,GAAsC,YAAW;EAC7C,IAAA,IAAA,EAAW;IACP,IAAI,KAAJ,gBAAA,EAA4B;MACxB,OAAO,KAAA,QAAA,GAAgB;MAAhB,eAAA,GACe,KADf,gBAAA,GACuC;MADvC,UAAA,GAEU,KAFV,WAAA,GAE6B;MAF7B,kBAAA,GAGkB,KAHzB,eAAA;IAIH;;IAED,OAAO,KAAA,QAAA,GAAA,iBAAA,GAAP,KAAA;EACH;;EAED,OAAO,qBAAP,aAAA;AAZJA,CAAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,gBAAgB,CAAhBA,SAAAA,CAAAA,eAAAA,GAA6C,YAAW;EACpD,OAAO,KAAP,eAAA;AADJA,CAAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,gBAAgB,CAAhBA,SAAAA,CAAAA,mBAAAA,GAAiD,YAAW;EACxD,OAAO,KAAP,eAAA;AADJA,CAAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,gBAAgB,CAAhBA,SAAAA,CAAAA,iBAAAA,GAA+C,YAAW;EACtDE,MAAM,CAAE,KAAF,oBAAA,EAANA,8BAAM,CAANA;EAEA,OAAO,KAAP,oBAAA;AAHJF,CAAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,gBAAgB,CAAhBA,SAAAA,CAAAA,SAAAA,GAAuC,YAAW;EAC9C,OAAO,KAAP,WAAA;AADJA,CAAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,gBAAgB,CAAhBA,SAAAA,CAAAA,OAAAA,GAAqC,YAAW;EAC5CI,oBAAoB,CAApBA,eAAAA,CAAAA,kBAAAA,EAAAA,IAAAA,EAAAA,aAAAA,EAAAA,UAAAA;;EAEA,IAAI,KAAJ,oBAAA,EAAgC;IAC5B,KAAA,oBAAA,CAAA,OAAA;;IACA,KAAA,oBAAA,GAAA,IAAA;EACH;;EAED,KAAA,eAAA,GAAA,IAAA;EACA,KAAA,eAAA,GAAA,IAAA;AATJJ,CAAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIU,aAAa,GAAG,UAAA,SAAA,EAAA,aAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAiE;EACjF,KAAA,SAAA,GAAA,SAAA;EACA,KAAA,aAAA,GAAqBD,SAAS,CAATA,KAAAA,CAAAA,aAAAA,IAAAA,CAAAA,GAArB,aAAA;EACA,KAAA,QAAA,GAAgBA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,IAAAA,qBAAAA,GAAhB,QAAA;EACA,KAAA,QAAA,GAAgBA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,IAAAA,IAAAA,GAAhB,QAAA;EACA,KAAA,MAAA,GAAA,MAAA;AALJ,CAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAvCIC,a;MAAAA,a;;AAwCJ,IAAIC,cAAc,GAAG,UAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,UAAA,EAA+E;EAChG,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,eAAA,GAAA,eAAA;EACA,KAAA,aAAA,GAAA,aAAA;EAEA;AACJ;AACA;;EACI,IAAA,UAAA,EAAiB;IACb,KAAA,UAAA,GAAA,UAAA;EACH;AAXL,CAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OA5BIA,c;MAAAA,c;;AA6BJ,IAAIC,mBAAmB,GAAG,UAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAgD;EACtE,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,WAAA,GAAA,WAAA;AAHJ,CAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAfIA,mB;MAAAA,mB;;AAgBJ,IAAIC,iBAAiB,GAAG,UAAA,oBAAA,EAAiC;EACrD,KAAA,oBAAA,GAAA,oBAAA;AADJ,CAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAbIA,iB;MAAAA,iB;;AAcJ,IAAIC,kBAAkB,GAAG,UAAA,YAAA,EAAyB;EAC9C,KAAA,YAAA,GAAA,YAAA;AADJ,CAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAjBIA,kB;MAAAA,kB;;AAkBJ,IAAIC,eAAe,GAAG,UAAA,UAAA,EAAuB;EACzC,KAAA,UAAA,GAAA,EAAA;EACA,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,eAAA,GAAuB,CAAvB,CAAA;AAHJ,CAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAvCIA,e;MAAAA,e;;AAwCJ,IAAIC,aAAa,GAAG,UAAA,UAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,eAAA,EACY;EAC5B,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,QAAA,GAAA,QAAA;EAEA,KAAA,aAAA,GAAA,aAAA;EACA,KAAA,YAAA,GAAA,YAAA;EACA,KAAA,YAAA,GAAA,YAAA;EACA,KAAA,QAAA,GAAgBP,SAAS,CAATA,KAAAA,CAAAA,QAAAA,IAAAA,oBAAAA,GAAhB,QAAA;EACA,KAAA,QAAA,GAAgBA,SAAS,CAATA,KAAAA,CAAAA,QAAAA,IAAAA,IAAAA,GAAhB,QAAA;EAEA;AACJ;AACA;;EACI,IAAA,eAAA,EAAsB;IAClB,KAAA,eAAA,GAAA,eAAA;EACH;AAhBL,CAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAnEIO,a;MAAAA,a;;AAoEJ,IAAIC,cAAc,GAAG,UAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,YAAA,EAAA,UAAA,EAAA,4BAAA,EAAA,kCAAA,EAC8D;EAC/E,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,UAAA,GAAA,UAAA;EACA,KAAA,eAAA,GAAA,eAAA;EACA,KAAA,aAAA,GAAA,aAAA;EACA,KAAA,YAAA,GAAA,YAAA;EAEA;AACJ;AACA;;EACI,IAAA,UAAA,EAAiB;IACb,KAAA,UAAA,GAAA,UAAA;EACH;;EAED,IAAA,4BAAA,EAAmC;IAC/B,KAAA,4BAAA,GAAA,4BAAA;EACH;;EAED,IAAA,kCAAA,EAAyC;IACrC,KAAA,kCAAA,GAAA,kCAAA;EACH;AArBL,CAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAhEIA,c;MAAAA,c;;AAiEJ,IAAIC,iBAAiB,GAAG,UAAA,MAAA,EAAA,IAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAA8E;EAClG,KAAA,GAAA,GAAA,MAAA;EACA,KAAA,EAAA,GAAA,MAAA;EACA,KAAA,IAAA,GAAA,IAAA;EAEA,KAAA,WAAA,GAAA,WAAA;EAEA,KAAA,QAAA,GAAA,QAAA;EACA,KAAA,QAAA,GAAA,QAAA;EACA,KAAA,OAAA,GAAA,OAAA;EACA,KAAA,SAAA,GAAA,SAAA;EACA,KAAA,OAAA,GAAA,IAAA;EAEA;AACJ;AACA;EACI;EACA;EACA;EACA;EACA;EACA;EACA;;EACA;AACJ;AACA;AACA;;EACI,KAAA,WAAA,GAAA,QAAA;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;AA5CJ,CAAA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;OAtDIA,iB;OAAAA,iB;;AAuDJA,iBAAiB,CAAjBA,SAAAA,CAAAA,oBAAAA,GAAmD,YAAW;EAC1DC,CAAC,CAADA,OAAAA,CAAW,KAAXA,KAAAA,EAAuB,UAAA,KAAA,EAAkB;IACrCC,SAAS,CAATA,YAAAA,CAAAA,KAAAA;IACAA,SAAS,CAATA,aAAAA,CAAAA,KAAAA,EAAAA,KAAAA;EAFJD,CAAAA;AADJD,CAAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,iBAAiB,CAAjBA,SAAAA,CAAAA,iBAAAA,GAAgD,UAAA,QAAA,EAAA,QAAA,EAAA,UAAA,EAA2C;EACvFG,kBAAkB,CAAlBA,iBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,UAAAA;AADJH,CAAAA;AAIA;AACA;AACA;AACA;AACA;;;AACAA,iBAAiB,CAAjBA,SAAAA,CAAAA,QAAAA,GAAuC,YAAW;EAC9C,IAAI,KAAJ,WAAA,EAAuB;IACnB,OAAO,wBAAwB,KAAxB,WAAA,GAAA,aAAA,GAA2D,KAA3D,QAAA,GAAA,aAAA,GACH,KADJ,QAAA;EAEH;;EAED,OAAO,wBAAP,KAAA;AANJA,CAAAA;AASA;AACA;AACA;AACA;AACA;;;AACA,IAAII,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAA,SAAA,EAAA,aAAA,EAAA,QAAA,EAAA,QAAA,EAAA,iBAAA,EAAA,MAAA,EAAoF;EACjH,OAAO,IAAA,aAAA,CAAA,SAAA,EAAA,aAAA,EAAA,QAAA,EAAA,QAAA,EAAP,MAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,oBAAoB,GAAG,UAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,UAAA,EAA+E;EAC7G,OAAO,IAAA,cAAA,CAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAP,UAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,yBAAyB,GAAG,UAAA,aAAA,EAAA,cAAA,EAAA,WAAA,EAAuD;EAC1F,OAAO,IAAA,mBAAA,CAAyBC,aAAa,CAAtC,UAAA,EAAmDC,cAAc,CAAjE,UAAA,EAAP,WAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,uBAAuB,GAAG,UAAA,WAAA,EAAA,aAAA,EAAuC;EACxE,OAAO,IAAA,iBAAA,CAAA,WAAA,EAAP,aAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAA,UAAA,EAAuB;EACzD,OAAO,IAAA,kBAAA,CAAP,UAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,qBAAqB,GAAG,UAAA,UAAA,EAAuB;EACtD,OAAO,IAAA,eAAA,CAAP,UAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAA,UAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EACR;EACrB,OAAO,IAAA,aAAA,CAAA,UAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAP,QAAO,CAAP;AAFG,CAAA;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,oBAAoB,GAAG,UAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,YAAA,EAAA,UAAA,EACjB;EACb,OAAO,IAAA,cAAA,CAAA,UAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,YAAA,EAAP,UAAO,CAAP;AAFG,CAAA;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,uBAAuB,GAAG,UAAA,MAAA,EAAA,IAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAA8E;EAC/G,OAAO,IAAA,iBAAA,CAAA,MAAA,EAAA,IAAA,EAAA,WAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAP,SAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAA,aAAA,EAAA,MAAA,EAAA,MAAA,EAA0C;EACnE,OAAO,IAAA,gBAAA,CAAA,aAAA,EAAA,MAAA,EAAP,MAAO,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAA,MAAA,EAAA,QAAA,EAAA,KAAA,EAAoC;EACjE,IAAIC,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAANA,IAAAA,CAAfA,UAAAA,IAAyC,CAACA,MAAM,CAANA,IAAAA,CAA9C,SAAA,EAAsE;IAClE;IACAC,KAAK,CAF6D,eAElEA,GAFkE,CAIlE;;IACAC,CAAC,CAADA,MAAC,CAADA,CAAAA,cAAAA,CAAAA,OAAAA;IAEAF,MAAM,CAANA,IAAAA,CAAAA,SAAAA,GAAAA,IAAAA;IACAA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,GAAAA,IAAAA;;IAEAA,MAAM,CAANA,kBAAAA,GAA4B,UAAA,MAAA,EAAmB;MAC3Cd,OAAO,CAAPA,kBAAAA,CAAAA,MAAAA,EAAAA,QAAAA,EAAAA,MAAAA;IAX8D,CAUlEc,CAVkE,CAclE;;;IACAE,CAAC,CAADA,MAAC,CAADA,CAAAA,EAAAA,CAAAA,kBAAAA,EAAoCF,MAAM,CAA1CE,kBAAAA;IAEA;AACR;AACA;AACA;AACA;AACA;;IACQ,IAAIC,QAAQ,GAAGC,QAAQ,CAARA,OAAAA,CAAf,oBAAeA,CAAf;;IAEA,IAAA,QAAA,EAAe;MACX,IAAIC,SAAS,GAAGF,QAAQ,CAAxB,KAAgBA,EAAhB;;MAEA,IAAIE,SAAS,IAAIA,SAAS,CAA1B,kBAAA,EAAgD;QAC5C,IAAIC,OAAO,GAAGD,SAAS,CAATA,kBAAAA,CAAd,QAAcA,CAAd;;QAEA,IAAA,OAAA,EAAc;UACVC,OAAO,CAAPA,QAAAA,CAAAA,4BAAAA;QACH;MACJ;IACJ;IAED;AACR;AACA;AACA;;;IACQN,MAAM,CAANA,IAAAA,CAAAA,QAAAA,GAAuBC,KAAK,CAALA,aAAAA,CAAvBD,QAAAA;IAEA;AACR;AACA;;IACQ,IAAIA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,KAAAA,MAAAA,IAA+BA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,KAAnC,WAAA,EAAsE;MAClEC,KAAK,CAALA,aAAAA,CAAAA,QAAAA,GAA+B,CAA/BA,CAAAA;IACH;EACJ;AAlDE,CAAA;AAqDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,kBAAkB,GAAG,UAAA,MAAA,EAAA,QAAA,EAAA,KAAA,EAAoC;EAChE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,MAAM,GAAGN,CAAC,CAAED,KAAK,CAArB,MAAc,CAAd;;EACA,IAAIO,MAAM,CAANA,OAAAA,CAAAA,uBAAAA,EAAAA,MAAAA,KAAAA,CAAAA,IAA0DA,MAAM,CAANA,OAAAA,CAAAA,MAAAA,EAAAA,MAAAA,KAA9D,CAAA,EAAsG;IAClG,IAAIC,IAAI,GAAGD,MAAM,CAANA,OAAAA,CAAX,uBAAWA,CAAX;;IAEA,IAAIC,IAAI,CAAJA,MAAAA,KAAAA,CAAAA,IAAqB,CAACA,IAAI,CAA1BA,KAAsBA,EAAtBA,IAAsC,CAACA,IAAI,CAAJA,KAAAA,GAAvCA,IAAAA,IAA4D,CAACA,IAAI,CAAJA,KAAAA,GAAAA,IAAAA,CAAjE,SAAA,EAA+F;MAC3F;AACZ;AACA;MACY,IAAIT,MAAM,CAANA,IAAAA,CAAAA,IAAAA,KAAAA,QAAAA,IAAiC,CAACA,MAAM,CAANA,IAAAA,CAAtC,MAAA,EAA2D;QACvD,IAAIA,MAAM,CAAV,oBAAA,EAAkC;UAC9B;QACH;MACJ;;MAEDA,MAAM,CAANA,UAAAA,CAAmB,YAAW;QAC1BA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,GAAAA,KAAAA;QAEA;AAChB;AACA;;QACgB,IAAIU,iBAAiB,GAAGV,MAAM,CAANA,IAAAA,CAAxB,iBAAA;QACAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,GAAoBU,iBAAiB,IAAIA,iBAAiB,CAAjBA,MAAAA,GAArBA,CAAAA,IAChB,CAAC3B,CAAC,CAADA,OAAAA,CAAW2B,iBAAiB,CAA5B3B,CAA4B,CAA5BA,EAAmCiB,MAAM,CAANA,IAAAA,CADxCA,OACKjB,CADLiB;MAPJA,CAAAA;MAWA,IAAIG,QAAQ,GAAGC,QAAQ,CAARA,OAAAA,CAAf,oBAAeA,CAAf;;MAEA,IAAA,QAAA,EAAe;QACX,IAAIC,SAAS,GAAGF,QAAQ,CAAxB,KAAgBA,EAAhB;;QAEA,IAAIE,SAAS,IAAIA,SAAS,CAA1B,kBAAA,EAAgD;UAC5C,IAAIC,OAAO,GAAGD,SAAS,CAATA,kBAAAA,CAAd,QAAcA,CAAd;;UAEA,IAAA,OAAA,EAAc;YACVC,OAAO,CAAPA,WAAAA,CAAAA,4BAAAA;UACH;QACJ;MACJ;;MAEDJ,CAAC,CAADA,MAAC,CAADA,CAAAA,GAAAA,CAAAA,kBAAAA,EAAqCF,MAAM,CAA3CE,kBAAAA;MAEA,OAAOF,MAAM,CAAb,kBAAA;MAEA;AACZ;AACA;;MACY,IAAIW,QAAQ,GAAGP,QAAQ,CAARA,IAAAA,CAAf,uBAAeA,CAAf;;MAEA,IAAIO,QAAQ,IAAIX,MAAM,CAAtB,IAAA,EAA8B;QAC1BW,QAAQ,CAARA,IAAAA,CAAAA,UAAAA,EAA2BX,MAAM,CAANA,IAAAA,CAA3BW,QAAAA;MACH;IACJ;EACJ;AA7DE,CAAA;AAgEP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAA,YAAA,EAAyB;EAClD,OAAOC,YAAY,YAAnB,aAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAA,YAAA,EAAyB;EAClD,OAAOD,YAAY,YAAnB,aAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,mBAAmB,GAAG,UAAA,YAAA,EAAyB;EACtD,OAAOF,YAAY,YAAnB,iBAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,mBAAmB,GAAG,UAAA,YAAA,EAAyB;EACtD,OAAOH,YAAY,YAAnB,iBAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAII,mBAAmB,GAAG,UAAA,aAAA,EAAA,YAAA,EAAA,UAAA,EAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAChB;EACb,IAAIC,UAAU,GAAGC,UAAU,GAAA,UAAA,GAAgB7B,aAAa,CAAxD,UAAA;EAEA,IAAI8B,iBAAiB,GAAGF,UAAU,CAAVA,QAAAA,GAAsBA,UAAU,CAAVA,QAAAA,CAAtBA,MAAAA,GAAxB,CAAA;;EAEA,IAAA,UAAA,EAAiB;IACb;AACR;AACA;AACA;AACA;IACQ,IAAA,eAAA;;IAEA,IAAInC,CAAC,CAADA,OAAAA,CAAJ,YAAIA,CAAJ,EAAgC;MAC5BsC,eAAe,GAAfA,iBAAAA;IADJ,CAAA,MAEO;MACHA,eAAe,GAAGD,iBAAiB,GAAGE,YAAY,CAAlDD,MAAAA;MAEA;AACZ;AACA;;MACY,IAAIE,SAAS,GAAGxC,CAAC,CAADA,IAAAA,CAAhB,YAAgBA,CAAhB;;MACA,IAAIyC,SAAS,GAAGzC,CAAC,CAADA,IAAAA,CAAhB,YAAgBA,CAAhB;MAEA;AACZ;AACA;AACA;;;MACY,IAAI,CAACV,SAAS,CAATA,KAAAA,CAAL,UAAKA,CAAL,EAAqC;QACjC,IAAI,CAAJ,UAAA,EAAkB;UACdmD,SAAS,CAATA,cAAAA,GAAAA,IAAAA;UACAH,eAAe;QAClB;MAJL,CAAA,MAKO,IAAIG,SAAS,CAATA,QAAAA,GAAAA,CAAAA,GAAJ,eAAA,EAA+C;QAClDA,SAAS,CAATA,cAAAA,GAAAA,IAAAA;MACH;MAED;AACZ;AACA;AACA;AACA;;;MACY,IAAI,CAACnD,SAAS,CAATA,KAAAA,CAAL,YAAKA,CAAL,EAAuC;QACnC,IAAI,CAAJ,YAAA,EAAoB;UAChBkD,SAAS,CAATA,cAAAA,GAAAA,IAAAA;QACH;MAHL,CAAA,MAIO,IAAIH,iBAAiB,KAAjBA,CAAAA,IAAAA,SAAAA,IAAwCG,SAAS,CAATA,QAAAA,GAA5C,CAAA,EAAqE;QACxEA,SAAS,CAATA,cAAAA,GAAAA,IAAAA;MACH;IACJ;IAED;AACR;AACA;;;IACQ,OAAOrC,OAAO,CAAPA,oBAAAA,CAA8BI,aAAa,CAA3CJ,UAAAA,EAAAA,YAAAA,EAAAA,eAAAA,EACHI,aAAa,CADVJ,aAAAA,EAC0BI,aAAa,CADvCJ,YAAAA,EAAP,UAAOA,CAAP;EAEH;EAED;AACJ;AACA;;;EACI,IAAIH,CAAC,CAADA,OAAAA,CAAJ,YAAIA,CAAJ,EAAgC;IAC5B,OAAOG,OAAO,CAAPA,oBAAAA,CAAAA,UAAAA,EAAAA,EAAAA,EAAAA,iBAAAA,EAAiEI,aAAa,CAA9EJ,aAAAA,EACHI,aAAa,CADVJ,YAAAA,EAAP,UAAOA,CAAP;EAEH;EAED;AACJ;AACA;;;EACI,IAAIuC,QAAQ,GAAGnC,aAAa,CAA5B,QAAA;EAEA,IAAIoC,MAAM,GAAGpC,aAAa,CAA1B,aAAA;;EAEA,IAAIoC,MAAM,IAAIJ,YAAY,CAA1B,MAAA,EAAoC;IAChC,OAAOpC,OAAO,CAAPA,oBAAAA,CAAAA,UAAAA,EAAAA,EAAAA,EAA8CoC,YAAY,CAA1DpC,MAAAA,EAAmEI,aAAa,CAAhFJ,aAAAA,EACHI,aAAa,CADVJ,YAAAA,EAAP,UAAOA,CAAP;EAEH;;EAED,IAAIyC,MAAM,GAAGD,MAAM,GAAnB,QAAA;;EAEA,IAAIC,MAAM,GAAGL,YAAY,CAAzB,MAAA,EAAmC;IAC/BK,MAAM,GAAGL,YAAY,CAArBK,MAAAA;EACH;;EAED,IAAIC,UAAU,GAAGN,YAAY,CAAZA,KAAAA,CAAAA,MAAAA,EAAjB,MAAiBA,CAAjB;;EAEA,IAAIK,MAAM,GAAGL,YAAY,CAAzB,MAAA,EAAmC;IAC/BvC,CAAC,CAADA,IAAAA,CAAAA,UAAAA,EAAAA,cAAAA,GAAAA,IAAAA;EACH;EAED;AACJ;AACA;;;EACI,OAAOG,OAAO,CAAPA,oBAAAA,CAAAA,UAAAA,EAAAA,UAAAA,EAAsDoC,YAAY,CAAlEpC,MAAAA,EACHI,aAAa,CADVJ,aAAAA,EAC0BI,aAAa,CADvCJ,YAAAA,EAAP,UAAOA,CAAP;AA9FG,CAAA;AAkGP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI2C,qBAAqB,GAAG,UAAA,aAAA,EAA0B;EACzD,IAAI,CAAJ,aAAA,EAAqB;IACjB,OAAA,4BAAA;EADJ,CAAA,MAEO,IAAI,CAACvC,aAAa,CAAd,UAAA,IAA6BA,aAAa,CAAbA,aAAAA,GAA7B,CAAA,IAAgEA,aAAa,CAAbA,QAAAA,IAApE,CAAA,EAAkG;IACrG,OAAA,iCAAA;EACH;;EACD,OAAA,SAAA;AANG,CAAA;AASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIwC,iBAAiB,GAAG,UAAA,MAAA,EAAmB;EAC9C,KAAK,IAAIC,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAGC,MAAM,CAA9B,MAAA,EAAuCD,GAAvC,EAAA,EAA+C;IAC3C,IAAIE,GAAG,GAAGD,MAAM,CAAhB,GAAgB,CAAhB;;IAEA,IAAI9C,OAAO,CAAPA,eAAAA,CAAJ,GAAIA,CAAJ,EAAqC;MACjC,OAAA,GAAA;IACH;EACJ;;EACD,OAAA,SAAA;AARG,CAAA;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgD,qBAAqB,GAAG,UAAA,MAAA,EAAmB;EAClD,IAAA,KAAA;;EACA,KAAK,IAAIH,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAGC,MAAM,CAA9B,MAAA,EAAuCD,GAAvC,EAAA,EAA+C;IAC3C,IAAIE,GAAG,GAAGD,MAAM,CAAhB,GAAgB,CAAhB;;IAEA,IAAI9C,OAAO,CAAPA,mBAAAA,CAAJ,GAAIA,CAAJ,EAAyC;MACrCiD,KAAK,GAALA,GAAAA;IADJ,CAAA,MAEO,IAAIF,GAAG,IAAIA,GAAG,CAAHA,cAAAA,CAAPA,YAAOA,CAAPA,IAA6CA,GAAG,CAAHA,cAAAA,CAA7CA,gBAA6CA,CAA7CA,IAAJ,KAAA,EAAmG;MACtG;MACAE,KAAK,CAALA,mBAAAA,GAAAA,GAAAA;IACH;EACJ;;EACD,OAAA,KAAA;AAZG,CAAA;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAA,MAAA,EAAmB;EAC9C,KAAK,IAAIL,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAGC,MAAM,CAA9B,MAAA,EAAuCD,GAAvC,EAAA,EAA+C;IAC3C,IAAIE,GAAG,GAAGD,MAAM,CAAhB,GAAgB,CAAhB;;IAEA,IAAI9C,OAAO,CAAPA,eAAAA,CAAJ,GAAIA,CAAJ,EAAqC;MACjC,OAAA,GAAA;IACH;EACJ;;EACD,OAAA,SAAA;AARG,CAAA;AAWPA,OAAO,GAAG;EAAA,mBAAA;EAAA,oBAAA;EAAA,yBAAA;EAAA,uBAAA;EAAA,wBAAA;EAAA,qBAAA;EAAA,mBAAA;EAAA,oBAAA;EAAA,uBAAA;EAAA,eAAA;EAAA,mBAAA;EAAA,kBAAA;EAAA,eAAA;EAAA,eAAA;EAAA,mBAAA;EAAA,mBAAA;EAAA,mBAAA;EAAA,qBAAA;EAAA,iBAAA;EAAA,qBAAA;EAqBNkD;AArBM,CAAVlD;AAuBA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awTableService\n */\nimport awColumnSvc from 'js/awColumnService';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport declModelRegistrySvc from 'js/declModelRegistryService';\nimport vmPropSvc from 'js/uwPropertyService';\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport logger from 'js/logger';\n\n/**\n * revisitme yogesh\n * in whole file lot of jquery and scope usages\n */\nimport $ from 'jquery';\n\n/**\n * {Number} The maximum # of nodes/rows to request to be returned in a single call to the dataProviderService\n * for the table.\n * <P>\n * Note: This number could be changed dynamically in the future to be based on the number of rows actually being\n * displayed.\n */\nvar _defaultPageSizeTable = 40;\n\n/**\n * {Number} The maximum # of nodes/rows to request to be returned in a single call to the dataProviderService\n * for the tree.\n * <P>\n * Note: This number could be changed dynamically in the future to be based on the number of rows actually being\n * displayed.\n */\nvar _defaultPageSizeTree = 40;\n\n/**\n * -------------------------------------------------------------------------<BR>\n * Define Service Objects<BR>\n * -------------------------------------------------------------------------<BR>\n */\n\n/**\n * This class is the overall model used to control the contents and behavior of the 'aw-table' directive. This\n * model allows for functional pieces to be overridden and implemented in application specific ways. Defaults\n * are specified here.\n *\n * @class AwTableViewModel\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' containing properties to base the new\n *            'awTableViewModel' upon.\n *\n * @param {String} gridId - ID of the {declGrid} this model is wrapping.\n *\n * @param {Object} $scope - the scope object\n *\n */\nvar AwTableViewModel = function( declViewModel, gridId, $scope ) {\n    var vmSelf = this; // eslint-disable-line consistent-this\n\n    /**\n     * @property {String} selectionMode - 'single' or 'multi'\n     *\n     * @memberOf module:js/awTableService~AwTableViewModel\n     */\n    vmSelf.selectionMode = 'single';\n\n    /**\n     * @property {String} selectionScope - 'row' or 'cell'\n     *\n     * @memberOf module:js/awTableService~AwTableViewModel\n     */\n    vmSelf.selectionScope = 'row';\n\n    /**\n     * @property {Boolean} enableArrangeMenu - default is false\n     *\n     * @memberOf module:js/awTableService~AwTableViewModel\n     */\n    vmSelf.enableArrangeMenu = false;\n\n    /**\n     * @property {Boolean} enableFilterMenu - default is false\n     *\n     * @memberOf module:js/awTableService~AwTableViewModel\n     */\n    vmSelf.enableFilterMenu = false;\n\n    /**\n     * @property {Boolean} isEditable - default is false\n     */\n    vmSelf.isEditable = false;\n\n    /**\n     * ---------------------------------------------------------------------------<BR>\n     * Property & Function definition complete....Finish initialization. <BR>\n     * ---------------------------------------------------------------------------<BR>\n     */\n\n    /**\n     * Check if we do NOT have a valid 'declViewModel' and 'gridId' to work with.\n     */\n    assert( declViewModel, 'No DeclViewModel specified' );\n    assert( gridId, 'No DeclGrid ID specified' );\n\n    if( declViewModel._internal.isDestroyed ) {\n        assert( false, 'Invalid to create objects on a destroyed DeclViewModel: ' + declViewModel );\n    }\n\n    /**\n     * The ID of the 'declViewModel' to use for this 'aw-table'.\n     */\n    vmSelf._declViewModelId = declViewModel.getPanelId();\n\n    /**\n     * Remember this 'declGrid' ID\n     * The ID of the 'declGrid' in the 'declViewModel' to use for this 'aw-table'.\n     */\n    vmSelf._declGridId = gridId;\n\n    declModelRegistrySvc.registerModel( 'AwTableViewModel', vmSelf, '_declGridId', '_modelId' );\n\n    /**\n     * Initialize all properties based on the 'declViewModel' defined information.\n     * <P>\n     * Check if the 'declGrid' exists\n     */\n    var declGrid = declViewModel._internal.grids[ gridId ];\n\n    assert( declGrid, 'Invalid DeclGrid ID specified' );\n\n    /**\n     * Set options from v-m json data\n     */\n    vmSelf.gridOptions = declGrid.gridOptions;\n\n    /**\n     * Check if declGrid has a valid 'dataProvider'.\n     */\n    assert( declGrid.dataProvider, 'No DeclDataProvider ID specified' );\n    assert( declViewModel.dataProviders[ declGrid.dataProvider ], 'Invalid DeclDataProvider ID specified' );\n\n    /**\n     * Set reference to the 'declGrid's UwDataProvider.\n     */\n    var uwDataProvider = declViewModel.dataProviders[ declGrid.dataProvider ];\n\n    /**\n     * The 'UwDataProvider' used to access information about the rows and column value of this 'aw-table'.\n     */\n    vmSelf._uwDataProvider = uwDataProvider;\n\n    if( uwDataProvider.selectionModel && uwDataProvider.selectionModel.mode ) {\n        vmSelf.selectionMode = uwDataProvider.selectionModel.mode;\n    }\n\n    if( uwDataProvider.selectionModel && uwDataProvider.selectionModel.scope ) {\n        vmSelf.selectionScope = uwDataProvider.selectionModel.scope;\n    }\n\n    /**\n     * Setup columns information\n     * The 'AwTableColumnProvider' used to access information about the columns of this 'aw-table'.\n     */\n    vmSelf._tableColumnProvider = awColumnSvc.createColumnProvider( declViewModel, $scope,\n        uwDataProvider.commands, gridId, uwDataProvider.json.commandsAnchor );\n\n    vmSelf._tableColumnProvider.initialize().then( function() {\n        // DO nothing\n    }, function( err ) {\n        logger.error( 'Failure during table tableColumnProvider initialization: ' + err );\n    } );\n\n    /**\n     * Set 'enableArrangeMenu' if the declGrid indicated an override of the default.\n     */\n    if( !declUtils.isNil( declGrid.enableArrangeMenu ) ) {\n        vmSelf.enableArrangeMenu = declGrid.enableArrangeMenu;\n    }\n\n    /**\n     * Set 'enableFilterMenu' if the declGrid indicated an override of the default.\n     */\n    if( !declUtils.isNil( declGrid.enableFilterMenu ) ) {\n        vmSelf.enableFilterMenu = declGrid.enableFilterMenu;\n    }\n\n    /**\n     * Check if declGrid has a valid 'propertyProvider'.\n     * The 'UwDataProvider' used to access properties for the rows and column value of this 'aw-table'.\n     */\n    if( declGrid.propertyProvider && declViewModel.dataProviders[ declGrid.propertyProvider ] ) {\n        vmSelf._uwPropProvider = declViewModel.dataProviders[ declGrid.propertyProvider ];\n    }\n}; // AwTableViewModel\n\n/**\n * Override the default implementation to return more helpful information.\n *\n * @return {String} Text used to identify the ID of the AwTableViewModel (e.g. 'modelId' + optional model IDs).\n */\nAwTableViewModel.prototype.toString = function() {\n    if( this ) {\n        if( this._declViewModelId ) {\n            return this._modelId + //\n                '  viewModel: ' + this._declViewModelId + //\n                '  grid: ' + this._declGridId + //\n                '  dataProvider: ' + this._uwDataProvider;\n        }\n\n        return this._modelId + '  viewModelId: ' + '???';\n    }\n\n    return 'AwTableViewModel' + '(Destroyed)';\n};\n\n/**\n * Get the 'provider' used to access information about the rows and column values of this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {UwDataProvider} Reference to the currently registered 'UwDataProvider'.\n */\nAwTableViewModel.prototype.getDataProvider = function() {\n    return this._uwDataProvider;\n};\n\n/**\n * Get the 'provider' used to access properties for the rows and column values of this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {UwDataProvider} Reference to the currently registered 'UwDataProvider' that provides property\n *         information.\n */\nAwTableViewModel.prototype.getPropertyProvider = function() {\n    return this._uwPropProvider;\n};\n\n/**\n * Get the 'provider' used to access information about the columns of this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {AwTableColumnProvider} Reference to the currently registered 'AwTableColumnProvider'.\n */\nAwTableViewModel.prototype.getColumnProvider = function() {\n    assert( this._tableColumnProvider, 'No AwTableColumnProvider set' );\n\n    return this._tableColumnProvider;\n};\n\n/**\n * Get the ID of the 'declGridId' in the 'declViewModel' to be used with this 'aw-table'.\n *\n * @memberOf module:js/awTableService~AwTableViewModel\n *\n * @return {String} The ID of the 'declGridId' in the 'declViewModel' to be used with this 'aw-table'.\n */\nAwTableViewModel.prototype.getGridId = function() {\n    return this._declGridId;\n};\n\n/**\n * Free up all resources held/managed by this object.\n * <P>\n * Note: After this function, no API call should be considered valid. This function is intended to be called\n * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n * objects managed by this class may be considered a 'memory leak'.\n */\nAwTableViewModel.prototype.destroy = function() {\n    declModelRegistrySvc.unregisterModel( 'AwTableViewModel', this, '_declGridId', '_modelId' );\n\n    if( this._tableColumnProvider ) {\n        this._tableColumnProvider.destroy();\n        this._tableColumnProvider = null;\n    }\n\n    this._uwDataProvider = null;\n    this._uwPropProvider = null;\n};\n\n/**\n * Instances of this class represent the input structure to a request to load a page of rows (nodes) into a flat\n * table/list.\n *\n * @class ListLoadInput\n *\n * @param {String} parentUid - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {Number} pageSize - (Optional) (See property description below)\n * @param {Boolean} addAfter - (Optional) (See property description below)\n * @param {Object} filter - (Optional) The string used to filter the list.\n *            <P>\n *            <P>\n *\n * @property {String} parentUid - The 'parent' ViewModelTreeNode used to access any 'child' nodes in the next\n *           level down in the hierarchy.\n * @property {Number} startChildNdx - The 'childNdx' of the node to start the 'next' page loading at (Default:\n *           0).\n * @property {Number} pageSize - The maximum # of 'child' node to return in any single paged access (Default:\n *           See _defaultPageSizeTable ).\n * @property {String} startChildId - The 'id' of the node to start the 'next' page loading at.\n * @property {Boolean} addAfter - TRUE if any new children should be added AFTER the optional 'cursorNodeId'\n *           (Default: TRUE)\n * @property {String} filter - The string used to filter the list.\n */\nvar ListLoadInput = function( parentUid, startChildNdx, pageSize, addAfter, filter ) {\n    this.parentUid = parentUid;\n    this.startChildNdx = declUtils.isNil( startChildNdx ) ? 0 : startChildNdx;\n    this.pageSize = declUtils.isNil( pageSize ) ? _defaultPageSizeTable : pageSize;\n    this.addAfter = declUtils.isNil( addAfter ) ? true : addAfter;\n    this.filter = filter;\n};\n\n/**\n * The class is used to communicate the results of a single paged loading of 'child' nodes in a 'parent' node.\n *\n * @class ListLoadResult\n *\n * @param {ViewModelObject} parentNode - (See property description below)\n * @param {ViewModelObjectArray} childNodes - (See property description below)\n * @param {Number} totalChildCount - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {ViewModelObject} newTopNode - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelObject} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *           the next level down in the hierarchy.\n *\n * @property {ViewModelObjectArray} childNodes - Array of 'child' nodes resulting from a single load execution\n *           in the context of a 'parent' node (i.e. 'children' in the next level down in the hierarchy).\n *\n * @property {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *           loaded into the 'parent' 'children' array.\n *\n * @property {Number} startChildNdx - The 'childNdx' provided in the ListLoadInput that was used to load this\n *           data. This is returned as part of the result to handle cases when multiple loads are being\n *           performed on the same 'parent' and the original closure data could have changed during the async\n *           processing.\n *\n * @property {ViewModelObject} newTopNode - (Optional) If this property is defined, it will be used to replace\n *           the (unseen) 'top' node associated with the overall list.\n *           <P>\n *           Note: If 'children' array of this node is not empty it will be ignored and the 'childNodes' of this\n *           result will be set as the 1st level children of this 'parent' node.\n */\nvar ListLoadResult = function( parentNode, childNodes, totalChildCount, startChildNdx, newTopNode ) {\n    this.parentNode = parentNode;\n    this.childNodes = childNodes;\n    this.totalChildCount = totalChildCount;\n    this.startChildNdx = startChildNdx;\n\n    /**\n     * We want to keep the following undefined until when know we need them to be defined.\n     */\n    if( newTopNode ) {\n        this.newTopNode = newTopNode;\n    }\n};\n\n/**\n * Instances of this class represent the input structure to a request to load properties of a collection of\n * tree-table nodes.\n *\n * @class PropertyLoadRequest\n * @param {ViewModelTreeNode} parentNode - (See property description below)\n * @param {ViewModelTreeNodeArray} childNodes - (See property description below)\n * @param {AwTableColumnInfoArray} columnInfos - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNode} parentNode - The 'parent' node the 'child' nodes belong to.\n * @property {ViewModelTreeNodeArray} childNodes - Array of nodes to load ViewModelProperty objects for.\n * @property {AwTableColumnInfoArray} columnInfos - Array of AwTableColumnInfo object containing property names\n *           to load.\n */\nvar PropertyLoadRequest = function( parentNode, childNodes, columnInfos ) {\n    this.parentNode = parentNode;\n    this.childNodes = childNodes;\n    this.columnInfos = columnInfos;\n};\n\n/**\n * Instances of this class represent the input structure to a request to load properties of a collection of\n * tree-table nodes.\n *\n * @class PropertyLoadInput\n * @param {PropertyLoadRequestArray} propertyLoadRequests - (See property description below)\n *            <P>\n *            <P>\n * @property {PropertyLoadRequestArray} propertyLoadRequests - Array requests to fulfill.\n */\nvar PropertyLoadInput = function( propertyLoadRequests ) {\n    this.propertyLoadRequests = propertyLoadRequests;\n};\n\n/**\n * The class is used to communicate the results of incremental loading of properties for ViewModelTreeNodes.\n *\n * @class PropertyLoadResult\n * @param {ViewModelTreeNodeArray} updatedNodes - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNodeArray} updatedNodes - Array of ViewModelTreeNodes who's ViewModelProperties have\n *           been loaded/updated.\n */\nvar PropertyLoadResult = function( updatedNodes ) {\n    this.updatedNodes = updatedNodes;\n};\n\n/**\n * The class is used to communicate the results of a single paged loading of 'child' nodes in a 'parent' node.\n *\n * @class TableLoadResult\n * @param {Number} totalFound - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelObjectArray} rowsLoaded - Array of ViewModelObjects resulting from a single load\n *           execution in the context of a flat table.\n * @property {Number} totalFound - The total # of known rows regardless of how many are currently loaded into\n *           the flat table.\n * @property {Number} nextSearchIndex - The 'page' to start the 'next' page loading at (or -1 if no more rows\n *           exist).\n */\nvar TableLoadResult = function( totalFound ) {\n    this.rowsLoaded = [];\n    this.totalFound = totalFound;\n    this.nextSearchIndex = -1;\n};\n\n/**\n * Instances of this class represent the input structure to a request to load a page of rows (nodes) into a\n * tree-table.\n *\n * @class TreeLoadInput\n *\n * @param {ViewModelTreeNode} parentNode - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {String} startChildId - (See property description below)\n * @param {String} cursorNodeId - (Optional) (See property description below)\n * @param {Number} pageSize - (Optional) (See property description below)\n * @param {Boolean} addAfter - (Optional) (See property description below)\n * @param {ViewModelTreeNode} rootNode - (Optional) (See property description below)\n * @param {Boolean} focusLoadAction - (Optional) (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *           the next level down in the hierarchy.\n * @property {Number} startChildNdx - The 'childNdx' of the node to start the 'next' page loading at.\n * @property {String} startChildId - The 'id' of the node to start the 'next' page loading at.\n * @property {String} cursorNodeId - ID of an existing node in the 'parent' (and, presumably a\n *           ViewModelCollection) to insert any new nodes after (or before...depending on value of 'addAfter').\n *           <P>\n *           Note: If not defined, the 'child' nodes will be added at the end (or beginning) of the 'parent'\n *           node's 'children'.\n * @property {Boolean} addAfter - TRUE if any new children should be added AFTER the optional 'cursorNodeId'\n *           (Default: TRUE)\n * @property {Number} pageSize - The maximum # of 'child' nodes to return in any single paged access (Default:\n *           See _defaultPageSizeTree).\n * @property {ViewModelTreeNode} rootNode - The 'tree' ViewModelTreeNode used to access any 'child' nodes in the\n *           next level down in the hierarchy.\n * @property {Boolean} focusLoadAction - (Optional) TRUE if action is called to load selected object that is\n *           currently not present in tree\n */\nvar TreeLoadInput = function( parentNode, startChildNdx, startChildId, cursorNodeId, pageSize, addAfter,\n    rootNode, focusLoadAction ) {\n    this.parentNode = parentNode;\n    this.rootNode = rootNode;\n\n    this.startChildNdx = startChildNdx;\n    this.startChildId = startChildId;\n    this.cursorNodeId = cursorNodeId;\n    this.pageSize = declUtils.isNil( pageSize ) ? _defaultPageSizeTree : pageSize;\n    this.addAfter = declUtils.isNil( addAfter ) ? true : addAfter;\n\n    /**\n     * We want to keep following parameter undefined until when know we need them to be defined.\n     */\n    if( focusLoadAction ) {\n        this.focusLoadAction = focusLoadAction;\n    }\n};\n\n/**\n * The class is used to communicate the results of a single paged loading of 'child' nodes in a 'parent' node.\n *\n * @class TreeLoadResult\n *\n * @param {ViewModelTreeNode} parentNode - (See property description below)\n * @param {ViewModelTreeNodeArray} childNodes - (See property description below)\n * @param {Number} totalChildCount - (See property description below)\n * @param {Number} startChildNdx - (See property description below)\n * @param {String} cursorNodeId - (See property description below)\n * @param {ViewModelTreeNode} newTopNode - (See property description below)\n * @param {ViewModelTreeNodeArray} vmNodesInTreeHierarchyLevels - (See property description below)\n * @param {Boolean} mergeNewNodesInCurrentlyLoadedTree - (See property description below)\n *            <P>\n *            <P>\n * @property {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *           the next level down in the hierarchy.\n *\n * @property {ViewModelTreeNodeArray} childNodes - Array of 'child' ViewModelTreeNode objects resulting from a\n *           single load execution in the context of a 'parent' node (i.e. 'children' in the next level down in\n *           the hierarchy).\n *\n * @property {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *           loaded into the 'parent' 'children' array.\n *\n * @property {Number} startChildNdx - The 'childNdx' provided in the TreeLoadInput that was used to load this\n *           data. This is returned as part of the result to handle cases when multiple loads are being\n *           performed on the same 'parent' and the original closure data could have changed during the async\n *           processing.\n *\n * @property {String} cursorNodeId - (Optional) ID of an existing node in the 'parent' (and, presumably a\n *           ViewModelCollection) to insert any new nodes after (or before) depending on value of 'addAfter'.\n *\n * @property {ViewModelTreeNode} newTopNode - (Optional) If this property is defined, it will be used to replace\n *           the (unseen) 'top' tree node associated with the overall tree-table.\n *           <P>\n *           Note: If 'children' array of this node is not empty it will be ignored and the 'childNodes' of this\n *           result will be set as the 1st level children of this 'parent' node.\n *\n * @property {ViewModelTreeNodeArray} vmNodesInTreeHierarchyLevels - (Optional) Array of arrays. Each array\n *           index represents ViewModelTreeNode objects at given level.Array at index 0 in represents level -1, ,\n *           index 1 level 0 and so on. Each level will have ViewModelTreeNode where next level nodes need to be\n *           inserted.\n *\n * @property {Boolean} mergeNewNodesInCurrentlyLoadedTree - (Optional) If this property is true,\n *           vmNodesInTreeHierarchyLevels array will be merged in currently loaded tree at proper merge point if\n *           present in tree. All existing nodes in Tree and their properties will be retained.\n *\n */\nvar TreeLoadResult = function( parentNode, childNodes, totalChildCount, startChildNdx, cursorNodeId,\n    newTopNode, vmNodesInTreeHierarchyLevels, mergeNewNodesInCurrentlyLoadedTree ) {\n    this.parentNode = parentNode;\n    this.childNodes = childNodes;\n    this.totalChildCount = totalChildCount;\n    this.startChildNdx = startChildNdx;\n    this.cursorNodeId = cursorNodeId;\n\n    /**\n     * We want to keep the following parameters undefined until when know we need them to be defined.\n     */\n    if( newTopNode ) {\n        this.newTopNode = newTopNode;\n    }\n\n    if( vmNodesInTreeHierarchyLevels ) {\n        this.vmNodesInTreeHierarchyLevels = vmNodesInTreeHierarchyLevels;\n    }\n\n    if( mergeNewNodesInCurrentlyLoadedTree ) {\n        this.mergeNewNodesInCurrentlyLoadedTree = mergeNewNodesInCurrentlyLoadedTree;\n    }\n};\n\n/**\n * Instances of this class represent the properties, hierarchy and status of a single row in a tree-table.\n *\n * @class ViewModelTreeNode\n * @param {String} nodeId - Unique ID for this node within the tree-table.\n * @param {String} type - (See property description below)\n * @param {String} displayName - (See property description below)\n * @param {Number} levelNdx - (See property description below)\n * @param {Number} childNdx - (See property description below)\n * @param {String} iconURL - (See property description below)\n * @param {String} svgString - (See property description below)\n *            <P>\n *            <P>\n * @property {String} id - Unique ID for this node within the tree-table.\n * @property {String} type - The type of model object represented by this tree node (i.e. 'Item'\n *           'DocumentRevision', etc.).\n * @property {String} displayName - The name to display in the 'navigation' column of the tree node.\n * @property {Number} levelNdx - The # of levels down from the 'root' of the tree-table.\n * @property {Number} childNdx - The index to this 'child' within the immediate 'parent'. This information is\n *           meant to help in when only a partial (or sparse) range of children have been loaded. This index is\n *           stable within the 'parent' and not representative of the order based on the 'id'.\n * @property {String} iconURL - The URL to the icon associated with the display of this node in the 'navigation'\n *           column of the tree-table.\n *           <P>\n * @property {String} svgString - The String svg icon associated with the display of this node in the 'navigation'\n *           column of the tree-table.\n *           <P>\n * @property {ViewModelPropertyMap} props - Map of propertyName to ViewModelProperty object holding the\n *           value/state of that property (or 'undefined' if no properties have been loaded yet).\n *           <P>\n * @property {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *           loaded into the 'children' array (or 'undefined' if no expansion has been occured or there are no\n *           children).\n *           <P>\n * @property {ViewModelTreeNodeArray} children - Array of currently loaded ViewModelTreeNode children in the\n *           next level down in the hierarchy (or 'undefined' if no expansion has been occurred or there are no\n *           children).\n *           <P>\n * @property {Boolean} isLeaf - TRUE if we have checked and there are NO 'child' nodes beneath this 'parent'\n *           node (or 'undefined' if no expansion has been occurred or there are children).\n */\nvar ViewModelTreeNode = function( nodeId, type, displayName, levelNdx, childNdx, iconURL, svgString ) {\n    this.uid = nodeId;\n    this.id = nodeId;\n    this.type = type;\n\n    this.displayName = displayName;\n\n    this.levelNdx = levelNdx;\n    this.childNdx = childNdx;\n    this.iconURL = iconURL;\n    this.svgString = svgString;\n    this.visible = true;\n\n    /**\n     * We want to keep the following undefined until when know we need them to be defined.\n     */\n    // this.props;              // Defined for all ViewModelObjects\n    // this.selected;           // Defined for all ViewModelObjects\n    //\n    // this.totalChildCount;\n    // this.children;\n    // this.isLeaf;\n    // this.isExpanded;\n    /**\n     * @private\n     * @property {Number} level number property used by ui-grid\n     */\n    this.$$treeLevel = levelNdx;\n\n    /**\n     * Note: This property is only defined when needed and then deleted after use.\n     *\n     * @private\n     * @property {Boolean} TRUE if this node is known to have >0 siblings before it in the ordered collection of\n     *           'child' nodes of its 'parent' node.\n     */\n    // this.incompleteHead = false;\n    /**\n     * Note: This property is only defined when needed and then deleted after use.\n     *\n     * @private\n     * @property {Boolean} TRUE if this node is known to have >0 siblings after it in the ordered collection of\n     *           'child' nodes of its 'parent' node.\n     */\n    // this.incompleteTail = false;\n};\n\n/**\n * Note: This property is only defined when needed and then deleted after use.\n *\n * @private\n * @property {String} A localized suffix string shown when async loading operations are being performed on this\n *           node.\n */\n// this.loadingStatus;\nViewModelTreeNode.prototype.clearEditiableStates = function() {\n    _.forEach( this.props, function( prop2 ) {\n        vmPropSvc.resetUpdates( prop2 );\n        vmPropSvc.setIsEditable( prop2, false );\n    } );\n};\n\n/**\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n *\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n */\nViewModelTreeNode.prototype.setEditableStates = function( editable, override, skipDigest ) {\n    viewModelObjectSvc.setEditableStates( this, editable, override, skipDigest );\n};\n\n/**\n * Override the default implementation to return more helpful information.\n *\n * @return {String} Text used to identify this ViewModelTreeNode (e.g. 'displayName', 'levelNdx', etc.).\n */\nViewModelTreeNode.prototype.toString = function() {\n    if( this.displayName ) {\n        return 'node: displayName: ' + this.displayName + ' levelNdx: ' + this.levelNdx + ' childNdx: ' +\n            this.childNdx;\n    }\n\n    return 'node: displayName: ' + '???';\n};\n\n/**\n * -------------------------------------------------------------------------<BR>\n * Define Service API<BR>\n * -------------------------------------------------------------------------<BR>\n */\nvar exports = {};\n\n/**\n * @param {String} parentUid - UID of the 'parent' IModelObject used to access any 'child' nodes in the next\n *            level down in the hierarchy.\n *\n * @param {Number} startChildNdx - The index to start the 'next' page loading at.\n *\n * @param {Number} pageSize - (Optional) The maximum # of 'child' nodes to return in any single paged access\n *            (Default: See _defaultPageSize).\n *\n * @param {Boolean} addAfter - (Optional) TRUE if any new children should be added AFTER the optional\n *            'cursorNodeId' (Default: TRUE)\n *\n * @param {Boolean} skipFocusOccCheck - (Optional) TRUE if you do not want focus passed. (Default: FALSE)\n *\n * @param {String} filter - (Optional) Filter string.\n *\n * @return {ListLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createListLoadInput = function( parentUid, startChildNdx, pageSize, addAfter, skipFocusOccCheck, filter ) {\n    return new ListLoadInput( parentUid, startChildNdx, pageSize, addAfter, filter );\n};\n\n/**\n * @param {ViewModelObject} parentNode - The 'parent' ViewModelObject used to access any 'child' nodes in the\n *            next level down in the hierarchy.\n *\n * @param {ViewModelObjectArray} childNodes - Array of 'child' nodes resulting from a single load execution in\n *            the context of a 'parent' node (i.e. 'children' in the next level down in the hierarchy).\n *\n * @param {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *            loaded into the 'parent' 'children' array.\n *\n * @param {Number} startChildNdx - The 'childNdx' provided in the ListLoadInput that was used to load this data.\n *            This is returned as part of the result to handle cases when multiple loads are being performed on\n *            the same 'parent' and the original closure data could have changed during the async processing.\n *\n * @param {ViewModelObject} newTopNode - (Optional) If this property is defined, it will be used to replace the\n *            (unseen) 'top' node associated with the overall list.\n *            <P>\n *            Note: If 'children' array of this node is not empty it will be ignored and the 'childNodes' of\n *            this result will be set as the 1st level children of this 'parent' node.\n *\n * @return {ListLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createListLoadResult = function( parentNode, childNodes, totalChildCount, startChildNdx, newTopNode ) {\n    return new ListLoadResult( parentNode, childNodes, totalChildCount, startChildNdx, newTopNode );\n};\n\n/**\n * @param {TreeNodeInput} treeLoadInput - The input to a 'getTreeNodePage' operation that specified which\n *            'child' nodes to load dynamically.\n * @param {TreeNodeResult} treeLoadResult - The result of a 'getTreeNodePage' operation that resulted in\n *            ViewModelTreeNodes who's ViewModelProperties need to be loaded dynamically.\n * @param {AwTableColumnInfoArray} columnInfos - Array of AwTableColumnInfo containing property names to\n *            request.\n *\n * @return {PropertyLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createPropertyLoadRequest = function( treeLoadInput, treeLoadResult, columnInfos ) {\n    return new PropertyLoadRequest( treeLoadInput.parentNode, treeLoadResult.childNodes, columnInfos );\n};\n\n/**\n * @param {ViewModelTreeNodeArray} owningNodes - Array of nodes to load ViewModelProperty objects for.\n * @param {StringArray} propertyNames - Array property names to request.\n *\n * @return {PropertyLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createPropertyLoadInput = function( owningNodes, propertyNames ) {\n    return new PropertyLoadInput( owningNodes, propertyNames );\n};\n\n/**\n * @param {ViewModelTreeNodeArray} childNodes - Array of nodes who's ViewModelProperties have been\n *           loaded/updated.\n *\n * @return {PropertyLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createPropertyLoadResult = function( childNodes ) {\n    return new PropertyLoadResult( childNodes );\n};\n\n/**\n * @param {Number} totalFound - Total # of rows in the overall table.\n *\n * @return {TableLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createTableLoadResult = function( totalFound ) {\n    return new TableLoadResult( totalFound );\n};\n\n/**\n * @param {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *            the next level down in the hierarchy.\n *\n * @param {Number} startChildNdx - The 'childNdx' to start the 'next' page loading at.\n *\n * @param {String} startChildId - (Optional) The 'id' of the node to start the 'next' page loading at.\n *\n * @param {String} cursorNodeId - (Optional) ID of an existing node in the 'parent' (and, presumably a\n *            ViewModelCollection) to insert any new nodes after (or before) depending on value of 'addAfter'.\n *\n * @param {Number} pageSize - (Optional) The maximum # of 'child' nodes to return in any single paged access\n *            (Default: See _defaultPageSize).\n *\n * @param {Boolean} addAfter - (Optional) TRUE if any new children should be added AFTER the optional\n *            'cursorNodeId' (Default: TRUE)\n * @param {ViewModelTreeNode} rootNode - The 'root' ViewModelTreeNode used to access any 'child' nodes in the\n *            next level down in the hierarchy.\n *\n * @return {TreeLoadInput} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createTreeLoadInput = function( parentNode, startChildNdx, startChildId, cursorNodeId, pageSize,\n    addAfter, rootNode ) {\n    return new TreeLoadInput( parentNode, startChildNdx, startChildId, cursorNodeId, pageSize, addAfter,\n        rootNode );\n};\n\n/**\n * @param {ViewModelTreeNode} parentNode - The 'parent' ViewModelTreeNode used to access any 'child' nodes in\n *            the next level down in the hierarchy.\n *\n * @param {ViewModelTreeNodeArray} childNodes - Array of 'child' ViewModelTreeNode objects resulting from a\n *            single load execution in the context of a 'parent' node (i.e. 'children' in the next level down in\n *            the hierarchy).\n *\n * @param {Number} totalChildCount - The total # of known 'child' nodes regardless of how many are currently\n *            loaded into the 'parent' 'children' array.\n *\n * @param {Number} startChildNdx - The 'childNdx' provided in the TreeLoadInput that was used to load this data.\n *            This is returned as part of the result to handle cases when multiple loads are being performed on\n *            the same 'parent' and the original closure data could have changed during the async processing.\n *\n * @param {String} cursorNodeId - (Optional) ID of an existing node in the 'parent' (and, presumably a\n *            ViewModelCollection) to insert any new nodes after (or before) depending on value of 'addAfter'.\n *\n * @param {Number} newTopNode - (Optional) The node to be considered the new top-most 'parent' node as a result\n *            of this loading operation.\n *            <P>\n *            Note: Often this will be an 'occurrence' object of the underlying 'productModelObject'.\n *\n * @return {TreeLoadResult} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createTreeLoadResult = function( parentNode, childNodes, totalChildCount, startChildNdx, cursorNodeId,\n    newTopNode ) {\n    return new TreeLoadResult( parentNode, childNodes, totalChildCount, startChildNdx, cursorNodeId, newTopNode );\n};\n\n/**\n * @param {String} nodeId - Unique ID for this node within the tree-table. 'DocumentRevision', etc.).\n * @param {String} type - The type of model object represented by this tree node (i.e. 'Item'\n * @param {String} displayName - The name to display in the 'navigation' column of the tree-table.\n * @param {Number} levelNdx - The # of levels down from the 'root' of the tree-table.\n * @param {Number} childNdx - The index to this 'child' within the immediate 'parent'. This information is meant\n *            to help in when only a partial (or sparse) range of children have been loaded. This index is\n *            stable within the 'parent' and not representative of the order based on the 'id'.\n * @param {String} iconURL - The URL to the icon associated with the display of this node in the 'navigation'\n *            column of the tree-table.\n * @param {String} svgString - The String svg icon associated with the display of this node in the 'navigation'\n *            column of the tree-table.\n *\n * @return {ViewModelTreeNode} Newly created wrapper initialized with properties from the given inputs.\n */\nexport let createViewModelTreeNode = function( nodeId, type, displayName, levelNdx, childNdx, iconURL, svgString ) {\n    return new ViewModelTreeNode( nodeId, type, displayName, levelNdx, childNdx, iconURL, svgString );\n};\n\n/**\n * Returns a class that is the overall model used to control the contents and behavior of the 'aw-table'\n * directive. This model allows for functional pieces to be overridden and implemented in application specific\n * ways. Defaults are specified here.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' containing properties to base the new\n *            'awTableViewModel' upon.\n * @param {String} gridId - ID of the {declGrid} the new model will wrap.\n * @param {Object} $scope - the scope object\n *\n * @returns {AwTableViewModel} New instance of this class.\n */\nexport let createViewModel = function( declViewModel, gridId, $scope ) {\n    return new AwTableViewModel( declViewModel, gridId, $scope );\n};\n\n/**\n * Centralized handling of the 'start' phase of editing a cell in the table. This function is invoked by the\n * 'aw-table-cell' directive's controller.\n *\n * @param {Object} $scope - The AngularJS scope of the controller.\n * @param {Element} $element - The DOM Element the controller is attached to.\n * @param {ClickEvent} event - The ClickEvent on the cell where the editing is to take place.\n */\nexport let handleCellStartEdit = function( $scope, $element, event ) {\n    if( $scope.prop && $scope.prop.isEditable && !$scope.prop.isEditing ) {\n        // stop propagation to avoid firing the stopEdit event we are about to attach\n        event.stopPropagation();\n\n        // trigger any existing stopEdit event in case another cell is in edit mode\n        $( 'body' ).triggerHandler( 'click' );\n\n        $scope.prop.autofocus = true;\n        $scope.prop.isEditing = true;\n\n        $scope._bodyClickListener = function( event2 ) {\n            exports.handleCellStopEdit( $scope, $element, event2 );\n        };\n\n        // click outside stops the edit\n        $( 'body' ).on( 'click touchstart', $scope._bodyClickListener );\n\n        /**\n         * Apply editing class on the parent row so CSS can increase the height\n         * <P>\n         * Would be better to set this on the row scope and let the row template style the DOM but 'ui-grid'\n         * doesn't seem to make that part of the template easily customizable.\n         */\n        var gridElem = $element.closest( '.aw-jswidgets-grid' );\n\n        if( gridElem ) {\n            var gridScope = gridElem.scope();\n\n            if( gridScope && gridScope.findCellRowElement ) {\n                var rowElem = gridScope.findCellRowElement( $element );\n\n                if( rowElem ) {\n                    rowElem.addClass( 'aw-jswidgets-isEditing-row' );\n                }\n            }\n        }\n\n        /**\n         * Add tabIndex so that it can be used by the control being opened for edit. Otherwise, that control is\n         * opened with the default tab index and tabbing does not move to the next control.\n         */\n        $scope.prop.tabIndex = event.currentTarget.tabIndex;\n\n        /**\n         * Set the cellTop element tab index to -1 so that backtab moves to the correct cell\n         */\n        if( $scope.prop.type !== 'DATE' && $scope.prop.type !== 'DATEARRAY' ) {\n            event.currentTarget.tabIndex = -1;\n        }\n    }\n};\n\n/**\n * Centralized handling of the 'end' phase of editing a cell in the table. This function is invoked by the\n * 'aw-table-cell' directive's controller.\n *\n * @param {Object} $scope - The AngularJS scope of the controller.\n * @param {Element} $element - The DOM Element the controller is attached to.\n * @param {ClickEvent} event - The ClickEvent on some other element indicating editing is to stop.\n */\nexport let handleCellStopEdit = function( $scope, $element, event ) {\n    /**\n     * Ignore clicks in the date picker header and ckeditor toolbar.\n     * <P>\n     * Note: Can't reference with the standard datepicker id (#ui-datepicker-div) as the element has been\n     * detached at this point (month change destroys original div)\n     * <P>\n     * Could be better to flip and ensure target has \"#main-view\" parent, but that would tie to tc.html\n     */\n    var target = $( event.target );\n    if( target.parents( '.ui-datepicker-header' ).length === 0 && target.closest( '.cke' ).length === 0 ) {\n        var cell = target.closest( '.aw-jswidgets-cellTop' );\n\n        if( cell.length === 0 || !cell.scope() || !cell.scope().prop || !cell.scope().prop.isEditing ) {\n            /**\n             * For non-LOV object reference property stay on edit widget until object Reference panel is active\n             */\n            if( $scope.prop.type === 'OBJECT' && !$scope.prop.hasLov ) {\n                if( $scope.referencePanelLoaded ) {\n                    return;\n                }\n            }\n\n            $scope.$evalAsync( function() {\n                $scope.prop.isEditing = false;\n\n                /**\n                 * Set or unset dirty state based on current value\n                 */\n                var prevDisplayValues = $scope.prop.prevDisplayValues;\n                $scope.prop.dirty = prevDisplayValues && prevDisplayValues.length > 0 &&\n                    !_.isEqual( prevDisplayValues[ 0 ], $scope.prop.uiValue );\n            } );\n\n            var gridElem = $element.closest( '.aw-jswidgets-grid' );\n\n            if( gridElem ) {\n                var gridScope = gridElem.scope();\n\n                if( gridScope && gridScope.findCellRowElement ) {\n                    var rowElem = gridScope.findCellRowElement( $element );\n\n                    if( rowElem ) {\n                        rowElem.removeClass( 'aw-jswidgets-isEditing-row' );\n                    }\n                }\n            }\n\n            $( 'body' ).off( 'click touchstart', $scope._bodyClickListener );\n\n            delete $scope._bodyClickListener;\n\n            /**\n             * Reset the cellTop element tab index\n             */\n            var $cellTop = $element.find( '.aw-jswidgets-cellTop' );\n\n            if( $cellTop && $scope.prop ) {\n                $cellTop.prop( 'tabindex', $scope.prop.tabIndex );\n            }\n        }\n    }\n};\n\n/**\n * Test if the given object 'is-a' ListLoadInput created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ListLoadInput.\n */\nexport let isListLoadInput = function( objectToTest ) {\n    return objectToTest instanceof ListLoadInput;\n};\n\n/**\n * Test if the given object 'is-a' TreeLoadInput created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a TreeLoadInput.\n */\nexport let isTreeLoadInput = function( objectToTest ) {\n    return objectToTest instanceof TreeLoadInput;\n};\n\n/**\n * Test if the given object 'is-a' ViewModelTreeNode created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a ViewModelTreeNode.\n */\nexport let isViewModelTreeNode = function( objectToTest ) {\n    return objectToTest instanceof ViewModelTreeNode;\n};\n\n/**\n * Test if the given object 'is-a' PropertyLoadInput created by this service.\n *\n * @param {Object} objectToTest - Object to check prototype history of.\n * @return {Boolean} TRUE if the given object is a PropertyLoadInput.\n */\nexport let isPropertyLoadInput = function( objectToTest ) {\n    return objectToTest instanceof PropertyLoadInput;\n};\n\n/**\n * Resolve the row data for the 'next' page of 'children' nodes of the given 'parent'.\n * <P>\n * Note: The paging status is maintained in the 'parent' node.\n *\n * @param {TreeLoadInput} treeLoadInput - The original input to the load operation.\n *\n * @param {ViewModelTreeNodeArray} childNodesIn - The 'child' nodes just loaded.\n *\n * @param {Boolean} simplePage - TRUE if the 'childNodesIn' represents a 'page' (and NOT an array of all 'child'\n *            nodes). If TRUE, the nodes will be simply passed along as the result. If FALSE, the page of\n *            children will be extracted from this array.\n *\n * @param {Boolean} startReached - TRUE if the first page of the results has been reached.\n *\n * @param {Boolean} endReached - TRUE if the last page of the results has been reached.\n *\n * @param {ViewModelTreeNode} newTopNode - (Optional) The node to be considered the new top-most 'parent' node\n *            as a result of this loading operation.\n *\n * @return {TreeLoadResult} A new TreeLoadResult object containing result/status information.\n */\nexport let buildTreeLoadResult = function( treeLoadInput, childNodesIn, simplePage, startReached, endReached,\n    newTopNode ) {\n    var parentNode = newTopNode ? newTopNode : treeLoadInput.parentNode;\n\n    var currentChildCount = parentNode.children ? parentNode.children.length : 0;\n\n    if( simplePage ) {\n        /**\n         * Determine if we already know how many 'child' nodes this 'parent' has OR we need to compute it now.\n         * <P>\n         * Assume we do not know a 'total' for the 'parent' and simply add these 'child' nodes to the total.\n         */\n        var totalChildCount;\n\n        if( _.isEmpty( childNodesIn ) ) {\n            totalChildCount = currentChildCount;\n        } else {\n            totalChildCount = currentChildCount + childNodesIn.length;\n\n            /**\n             * Get the 'head' and 'tail' from the collection of new 'child' nodes.\n             */\n            var headChild = _.head( childNodesIn );\n            var lastChild = _.last( childNodesIn );\n\n            /**\n             * Check if the 'tail' is known to NOT be the last 'child' of this 'parent'.<br>\n             * If so: Mark that 'child' as an 'incompleteTail' so we know to ask for more below it later.\n             */\n            if( !declUtils.isNil( endReached ) ) {\n                if( !endReached ) {\n                    lastChild.incompleteTail = true;\n                    totalChildCount++;\n                }\n            } else if( lastChild.childNdx + 1 < totalChildCount ) {\n                lastChild.incompleteTail = true;\n            }\n\n            /**\n             * Check if we are adding the 1st set of 'child' nodes to this 'parent' and the 'head' one is NOT\n             * the actual 1st child of that 'parent'<BR>\n             * If so: Mark that 'child' as an 'incompleteHead' so we know to ask for more above it later.\n             */\n            if( !declUtils.isNil( startReached ) ) {\n                if( !startReached ) {\n                    headChild.incompleteHead = true;\n                }\n            } else if( currentChildCount === 0 && headChild && headChild.childNdx > 0 ) {\n                headChild.incompleteHead = true;\n            }\n        }\n\n        /**\n         * Create the final data object returned to the dataProvider.\n         */\n        return exports.createTreeLoadResult( treeLoadInput.parentNode, childNodesIn, totalChildCount,\n            treeLoadInput.startChildNdx, treeLoadInput.cursorNodeId, newTopNode );\n    }\n\n    /**\n     * Check for trival 'no child' case.\n     */\n    if( _.isEmpty( childNodesIn ) ) {\n        return exports.createTreeLoadResult( parentNode, [], currentChildCount, treeLoadInput.startChildNdx,\n            treeLoadInput.cursorNodeId, newTopNode );\n    }\n\n    /**\n     * Determine starting/stop row range to resolve\n     */\n    var pageSize = treeLoadInput.pageSize;\n\n    var begNdx = treeLoadInput.startChildNdx;\n\n    if( begNdx >= childNodesIn.length ) {\n        return exports.createTreeLoadResult( parentNode, [], childNodesIn.length, treeLoadInput.startChildNdx,\n            treeLoadInput.cursorNodeId, newTopNode );\n    }\n\n    var endNdx = begNdx + pageSize;\n\n    if( endNdx > childNodesIn.length ) {\n        endNdx = childNodesIn.length;\n    }\n\n    var childNodes = childNodesIn.slice( begNdx, endNdx );\n\n    if( endNdx < childNodesIn.length ) {\n        _.last( childNodes ).incompleteTail = true;\n    }\n\n    /**\n     * Resolve the async request.\n     */\n    return exports.createTreeLoadResult( parentNode, childNodes, childNodesIn.length,\n        treeLoadInput.startChildNdx, treeLoadInput.cursorNodeId, newTopNode );\n};\n\n/**\n * Check if the given TreeLoadInput is valid.\n *\n * @param {TreeLoadInput} treeLoadInput - Object to validate.\n *\n * @return {String} The text of a failure message (or NULL if input is valid).\n */\nexport let validateTreeLoadInput = function( treeLoadInput ) {\n    if( !treeLoadInput ) {\n        return 'No TreeLoadInput specified';\n    } else if( !treeLoadInput.parentNode || treeLoadInput.startChildNdx < 0 || treeLoadInput.pageSize <= 0 ) {\n        return 'Invalid TreeLoadInput specified';\n    }\n    return undefined;\n};\n\n/**\n * Extract a parameter of a specific class from the given arguments array.\n * <P>\n * Note: The order or existence of parameters can vary when more-than-one property is specified in the\n * 'inputData' property of a DeclAction JSON. This code seeks out the requested one.\n *\n * @param {ObjectArray} argsIn - Array of argument objects\n *\n * @return {Object} ListLoadInput from the given arguments (or undefined if not found)\n */\nexport let findListLoadInput = function( argsIn ) {\n    for( var ndx = 0; ndx < argsIn.length; ndx++ ) {\n        var arg = argsIn[ ndx ];\n\n        if( exports.isListLoadInput( arg ) ) {\n            return arg;\n        }\n    }\n    return undefined;\n};\n\n/**\n * Extract a parameter of a specific class from the given arguments array.\n * <P>\n * Note: The order or existence of parameters can vary when more-than-one property is specified in the\n * 'inputData' property of a DeclAction JSON. This code seeks out the requested one.\n *\n * @param {ObjectArray} argsIn - Array of argument objects\n *\n * @return {Object} PropertyLoadInput from the given arguments (or undefined if not found)\n */\nexport let findPropertyLoadInput = function( argsIn ) {\n    var input;\n    for( var ndx = 0; ndx < argsIn.length; ndx++ ) {\n        var arg = argsIn[ ndx ];\n\n        if( exports.isPropertyLoadInput( arg ) ) {\n            input = arg;\n        } else if( arg && arg.hasOwnProperty( 'clientName' ) && arg.hasOwnProperty( 'clientScopeURI' ) && input ) {\n            // add input context from v-m\n            input.propertyLoadContext = arg;\n        }\n    }\n    return input;\n};\n\n/**\n * Extract a parameter of a specific class from the given arguments array.\n * <P>\n * Note: The order or existence of parameters can vary when more-than-one property is specified in the\n * 'inputData' property of a DeclAction JSON. This code seeks out the requested one.\n *\n * @param {ObjectArray} argsIn - Array of argument objects\n *\n * @return {Object} TreeLoadInput from the given arguments (or undefined if not found)\n */\nexport let findTreeLoadInput = function( argsIn ) {\n    for( var ndx = 0; ndx < argsIn.length; ndx++ ) {\n        var arg = argsIn[ ndx ];\n\n        if( exports.isTreeLoadInput( arg ) ) {\n            return arg;\n        }\n    }\n    return undefined;\n};\n\nexports = {\n    createListLoadInput,\n    createListLoadResult,\n    createPropertyLoadRequest,\n    createPropertyLoadInput,\n    createPropertyLoadResult,\n    createTableLoadResult,\n    createTreeLoadInput,\n    createTreeLoadResult,\n    createViewModelTreeNode,\n    createViewModel,\n    handleCellStartEdit,\n    handleCellStopEdit,\n    isListLoadInput,\n    isTreeLoadInput,\n    isViewModelTreeNode,\n    isPropertyLoadInput,\n    buildTreeLoadResult,\n    validateTreeLoadInput,\n    findListLoadInput,\n    findPropertyLoadInput,\n    findTreeLoadInput\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
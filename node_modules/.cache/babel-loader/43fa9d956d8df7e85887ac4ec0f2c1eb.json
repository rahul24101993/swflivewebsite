{"ast":null,"code":"// Copyright (c) 2020 Siemens\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * This file contains the utility methods of aw-layout-slot.\n * @module js/layoutSlotService\n */\nimport conditionSvc from 'js/conditionService';\nimport commandConfigUtilsvc from 'js/commandConfigUtils.service';\nimport { parseCondition } from 'js/conditionParser.service';\nimport { concat, flatten, uniq, get, set, isString, isObject, forEach } from 'lodash';\nvar exports = {};\nconst regexContext = /context[.\\w]*/;\n/**\n * Find active slots  for the given application..\n *\n * @param {Object} allSlots - all slots for active application\n * @param {Object} conditionsObj - Scope to execute the command with context\n * @param {Object} context - Scope to execute the command with context\n *\n * @return {Object} most appropriate active slot.\n */\n\nvar findActiveSlotFromContext = function (allSlots, conditionsObj, context) {\n  var mostAppropriateActionHandler = null;\n  var mostAppropriateConditionLength = -1;\n  forEach(allSlots, function (slotConfig) {\n    var conditionExpression = slotConfig.activeWhen.expression;\n    var isValidCondition = conditionSvc.evaluateCondition(context, conditionExpression);\n    var expressionLength = conditionExpression.length;\n\n    if (isObject(conditionExpression)) {\n      expressionLength = JSON.stringify(conditionExpression).length;\n    }\n\n    if (isValidCondition && expressionLength > mostAppropriateConditionLength) {\n      mostAppropriateConditionLength = expressionLength;\n      mostAppropriateActionHandler = slotConfig;\n    }\n  });\n  return mostAppropriateActionHandler;\n};\n/**\n * Find active slot  for the given slot contributions..\n *\n * @param {Object} allSlotConfigs - all slots for application\n * @param {Object} conditions - condition object\n *\n * @return {Object} most appropriate active slot.\n */\n\n\nexport let findActiveSlot = function (allSlotConfigs, conditions, context) {\n  return findActiveSlotFromContext(allSlotConfigs, conditions, context);\n};\n\nconst DeclarativeCondition = function (condition, allSlotsJson) {\n  this.id = condition.split('.').slice(-1)[0];\n  this.expression = commandConfigUtilsvc.getConditionExpression(allSlotsJson, condition);\n};\n\n_c2 = DeclarativeCondition;\n_c = DeclarativeCondition;\nexport const getLayoutState = (slots, allSlotsJson, context) => {\n  const localContextMin = {};\n\n  const evaluateLocalContextMin = path => {\n    set(localContextMin, path, get(context, path));\n  };\n\n  return (slots || []).reduce((acc, slot) => {\n    if (slot.activeWhen && slot.activeWhen.condition) {\n      slot.activeWhen = new DeclarativeCondition(slot.activeWhen.condition, allSlotsJson);\n    } else if (slot.activeWhen.expression && isString(slot.activeWhen.expression)) {\n      const conditionSplits = slot.activeWhen.expression.split(' ');\n      conditionSplits.forEach(split => {\n        if (regexContext.test(split)) {\n          var fetchContextFromConditions = regexContext.exec(split)[0].replace(/context\\./, '');\n          evaluateLocalContextMin(fetchContextFromConditions);\n        }\n      });\n    }\n\n    const conditionDeps = [parseCondition(slot.activeWhen)];\n    return {\n      ctxParameters: uniq(concat(acc.ctxParameters, flatten(conditionDeps.map(x => x.ctxParameters)))),\n      additionalParameters: [localContextMin]\n    };\n  }, {\n    ctxParameters: [],\n    additionalParameters: []\n  });\n};\nexports = {\n  findActiveSlot,\n  getLayoutState\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeclarativeCondition\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"DeclarativeCondition\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/layoutSlotService.js"],"names":["exports","regexContext","findActiveSlotFromContext","mostAppropriateActionHandler","mostAppropriateConditionLength","forEach","conditionExpression","slotConfig","isValidCondition","conditionSvc","expressionLength","isObject","JSON","findActiveSlot","DeclarativeCondition","condition","commandConfigUtilsvc","getLayoutState","localContextMin","evaluateLocalContextMin","path","set","get","slots","slot","isString","conditionSplits","split","fetchContextFromConditions","conditionDeps","parseCondition","ctxParameters","uniq","concat","acc","flatten","x","additionalParameters"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * This file contains the utility methods of aw-layout-slot.\n * @module js/layoutSlotService\n */\nimport conditionSvc from 'js/conditionService';\nimport commandConfigUtilsvc from 'js/commandConfigUtils.service';\nimport { parseCondition } from 'js/conditionParser.service';\nimport { concat, flatten, uniq, get, set, isString, isObject, forEach } from 'lodash';\n\nvar exports = {};\n\nconst regexContext = /context[.\\w]*/;\n\n/**\n * Find active slots  for the given application..\n *\n * @param {Object} allSlots - all slots for active application\n * @param {Object} conditionsObj - Scope to execute the command with context\n * @param {Object} context - Scope to execute the command with context\n *\n * @return {Object} most appropriate active slot.\n */\nvar findActiveSlotFromContext = function( allSlots, conditionsObj, context ) {\n    var mostAppropriateActionHandler = null;\n    var mostAppropriateConditionLength = -1;\n    forEach( allSlots, function( slotConfig ) {\n        var conditionExpression = slotConfig.activeWhen.expression;\n        var isValidCondition = conditionSvc.evaluateCondition( context, conditionExpression );\n        var expressionLength = conditionExpression.length;\n        if( isObject( conditionExpression ) ) {\n            expressionLength = JSON.stringify( conditionExpression ).length;\n        }\n        if( isValidCondition &&\n            expressionLength > mostAppropriateConditionLength ) {\n            mostAppropriateConditionLength = expressionLength;\n            mostAppropriateActionHandler = slotConfig;\n        }\n    } );\n    return mostAppropriateActionHandler;\n};\n\n/**\n * Find active slot  for the given slot contributions..\n *\n * @param {Object} allSlotConfigs - all slots for application\n * @param {Object} conditions - condition object\n *\n * @return {Object} most appropriate active slot.\n */\n\nexport let findActiveSlot = function( allSlotConfigs, conditions, context ) {\n    return findActiveSlotFromContext( allSlotConfigs, conditions, context );\n};\n\nconst DeclarativeCondition = function( condition, allSlotsJson ) {\n    this.id = condition.split( '.' ).slice( -1 )[ 0 ];\n    this.expression = commandConfigUtilsvc.getConditionExpression( allSlotsJson, condition );\n};\n\nexport const getLayoutState = ( slots, allSlotsJson, context ) => {\n    const localContextMin = {};\n    const evaluateLocalContextMin = ( path ) => {\n        set( localContextMin, path, get( context, path ) );\n    };\n    return ( slots || [] ).reduce( ( acc, slot ) => {\n        if( slot.activeWhen && slot.activeWhen.condition ) {\n            slot.activeWhen = new DeclarativeCondition( slot.activeWhen.condition, allSlotsJson );\n        } else if( slot.activeWhen.expression && isString( slot.activeWhen.expression ) ) {\n            const conditionSplits = slot.activeWhen.expression.split( ' ' );\n            conditionSplits.forEach( split => {\n                if( regexContext.test( split ) ) {\n                    var fetchContextFromConditions = regexContext.exec( split )[ 0 ].replace( /context\\./, '' );\n                    evaluateLocalContextMin( fetchContextFromConditions );\n                }\n            } );\n        }\n        const conditionDeps = [\n            parseCondition( slot.activeWhen )\n        ];\n        return {\n            ctxParameters: uniq( concat( acc.ctxParameters, flatten( conditionDeps.map( x => x.ctxParameters ) ) ) ),\n            additionalParameters: [ localContextMin ]\n        };\n    }, {\n        ctxParameters: [],\n        additionalParameters: []\n    } );\n};\n\nexports = {\n    findActiveSlot,\n    getLayoutState\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
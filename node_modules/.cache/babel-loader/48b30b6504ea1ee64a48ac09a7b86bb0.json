{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/iconMapService\n */\nimport _ from 'lodash';\nimport cfgSvc from 'js/configurationService';\nlet exports;\n\nlet _typeFiles;\n\nlet _aliasRegistry;\n/**\n * Check if the given iconName is an alias name for the actual icon filename.\n *\n * @param {String} iconName - The name of the icon to any final iconName for.\n * @return {String} Final icon file name.\n */\n\n\nexport let resolveIconName = function (iconName) {\n  var key = iconName;\n\n  if (iconName && _aliasRegistry) {\n    key = _aliasRegistry[iconName];\n\n    if (!key) {\n      key = iconName;\n    }\n  }\n\n  return key;\n};\n/**\n * Return the name of the (SVG) file associated with the given type name (or NULL if the file is not cached).\n *\n * @param {String} typeName - Name of the type to return an icon filename for.\n * @return {String} The filename that contains the description of the icon defined for the given type.\n */\n\nexport let getTypeFileName = function (typeName) {\n  if (_typeFiles) {\n    var key = exports.resolveIconName('type' + typeName);\n\n    if (_.indexOf(_typeFiles, key, true) > -1) {\n      return key + '.svg';\n    } // If alias doesn't indicate the number try adding it.\n\n\n    key += '48';\n\n    if (_.indexOf(_typeFiles, key, true) > -1) {\n      return key + '.svg';\n    }\n  }\n\n  return null;\n};\nexport let loadConfiguration = async function () {\n  await cfgSvc.getCfg('typeFiles', false, true).then(typeFiles => {\n    _typeFiles = typeFiles;\n  });\n  await cfgSvc.getCfg('aliasRegistry', false, true).then(aliasRegistry => {\n    _aliasRegistry = aliasRegistry;\n  });\n};\nexports = {\n  resolveIconName,\n  getTypeFileName,\n  loadConfiguration\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/iconMapService.js"],"names":["resolveIconName","key","iconName","_aliasRegistry","getTypeFileName","exports","_","loadConfiguration","typeFiles","_typeFiles","aliasRegistry"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,MAAA,MAAA,yBAAA;AAEA,IAAA,OAAA;;AAEA,IAAA,UAAA;;AAEA,IAAA,cAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIA,eAAe,GAAG,UAAA,QAAA,EAAqB;EAC9C,IAAIC,GAAG,GAAP,QAAA;;EACA,IAAIC,QAAQ,IAAZ,cAAA,EAAiC;IAC7BD,GAAG,GAAGE,cAAc,CAApBF,QAAoB,CAApBA;;IACA,IAAI,CAAJ,GAAA,EAAW;MACPA,GAAG,GAAHA,QAAAA;IACH;EACJ;;EACD,OAAA,GAAA;AARG,CAAA;AAWP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,eAAe,GAAG,UAAA,QAAA,EAAqB;EAC9C,IAAA,UAAA,EAAiB;IACb,IAAIH,GAAG,GAAGI,OAAO,CAAPA,eAAAA,CAAyB,SAAnC,QAAUA,CAAV;;IACA,IAAIC,CAAC,CAADA,OAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAqC,CAAzC,CAAA,EAA8C;MAC1C,OAAOL,GAAG,GAAV,MAAA;IAHS,CAAA,CAMb;;;IACAA,GAAG,IAAHA,IAAAA;;IACA,IAAIK,CAAC,CAADA,OAAAA,CAAAA,UAAAA,EAAAA,GAAAA,EAAAA,IAAAA,IAAqC,CAAzC,CAAA,EAA8C;MAC1C,OAAOL,GAAG,GAAV,MAAA;IACH;EACJ;;EACD,OAAA,IAAA;AAbG,CAAA;AAgBP,OAAO,IAAIM,iBAAiB,GAAG,kBAAiB;EAC5C,MAAM,MAAM,CAAN,MAAA,CAAA,WAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,CAAkDC,SAAF,IAAiB;IACnEC,UAAU,GAAVA,SAAAA;EADJ,CAAM,CAAN;EAIA,MAAM,MAAM,CAAN,MAAA,CAAA,eAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,CAAsDC,aAAF,IAAqB;IAC3EP,cAAc,GAAdA,aAAAA;EADJ,CAAM,CAAN;AALG,CAAA;AAUPE,OAAO,GAAG;EAAA,eAAA;EAAA,eAAA;EAGNE;AAHM,CAAVF;AAKA,eAAA,OAAA;AAEAE,iBAAiB","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/iconMapService\n */\nimport _ from 'lodash';\nimport cfgSvc from 'js/configurationService';\n\nlet exports;\n\nlet _typeFiles;\n\nlet _aliasRegistry;\n\n/**\n * Check if the given iconName is an alias name for the actual icon filename.\n *\n * @param {String} iconName - The name of the icon to any final iconName for.\n * @return {String} Final icon file name.\n */\nexport let resolveIconName = function( iconName ) {\n    var key = iconName;\n    if( iconName && _aliasRegistry ) {\n        key = _aliasRegistry[ iconName ];\n        if( !key ) {\n            key = iconName;\n        }\n    }\n    return key;\n};\n\n/**\n * Return the name of the (SVG) file associated with the given type name (or NULL if the file is not cached).\n *\n * @param {String} typeName - Name of the type to return an icon filename for.\n * @return {String} The filename that contains the description of the icon defined for the given type.\n */\nexport let getTypeFileName = function( typeName ) {\n    if( _typeFiles ) {\n        var key = exports.resolveIconName( 'type' + typeName );\n        if( _.indexOf( _typeFiles, key, true ) > -1 ) {\n            return key + '.svg';\n        }\n\n        // If alias doesn't indicate the number try adding it.\n        key += '48';\n        if( _.indexOf( _typeFiles, key, true ) > -1 ) {\n            return key + '.svg';\n        }\n    }\n    return null;\n};\n\nexport let loadConfiguration = async function() {\n    await cfgSvc.getCfg( 'typeFiles', false, true ).then( ( typeFiles ) => {\n        _typeFiles = typeFiles;\n    } );\n\n    await cfgSvc.getCfg( 'aliasRegistry', false, true ).then( ( aliasRegistry ) => {\n        _aliasRegistry = aliasRegistry;\n    } );\n};\n\nexports = {\n    resolveIconName,\n    getTypeFileName,\n    loadConfiguration\n};\nexport default exports;\n\nloadConfiguration();\n"]},"metadata":{},"sourceType":"module"}
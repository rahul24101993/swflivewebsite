{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/resizeDetector\n */\nimport browserUtils from 'js/browserUtils'; // the timeout for element resize polling, only used for Firefox\n\nconst RESIZE_POLLING_TIMEOUT = 60000;\n\nlet checkResize = function (element, oldSize) {\n  let cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return function () {\n    let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let sizeChanged = false;\n    let width = element.offsetWidth;\n    let height = element.offsetHeight;\n\n    if (width !== oldSize.width || height !== oldSize.height) {\n      cb && cb(element, event);\n      oldSize = {\n        width,\n        height\n      };\n      sizeChanged = true;\n    }\n\n    return sizeChanged;\n  };\n};\n/**\n * Register resize detector on given element, the callback function will be called on element resized\n * @param {Element} el the element to detect size change\n * @param {Function} cb the callback function when size changed\n * @returns {Function} the cancel function to remove resize detector\n */\n\n\nlet resizeDetector = (el, cb) => {\n  // create iframe element and insert to the element detect the target element size change\n  var iframe = document.createElement('iframe'); //wcag accessibility compliance for iframe.\n\n  iframe.setAttribute('aria-hidden', 'true');\n  iframe.setAttribute('title', 'Pop up');\n  iframe.setAttribute('class', 'sw-popup-resizeDetector');\n  el.appendChild(iframe); // record size of current element\n\n  let oldSize = {\n    width: el.offsetWidth,\n    height: el.offsetHeight\n  };\n  let detector = checkResize(el, oldSize, cb);\n  let noResizeTimeStart = Date.now(); // as Firefox, IE doesn't support iframe resize event well, so use polling to detect size change\n\n  let resizeTimer;\n\n  if (browserUtils.isFirefox || browserUtils.isIE) {\n    resizeTimer = setInterval(() => {\n      if (detector()) {\n        noResizeTimeStart = Date.now();\n      } else {\n        let noResizeTime = Date.now() - noResizeTimeStart;\n        noResizeTime > RESIZE_POLLING_TIMEOUT && clearInterval(resizeTimer);\n      }\n    }, 50);\n  } else if (iframe.contentWindow) {\n    iframe.contentWindow.onresize = detector;\n  } // return the cancel function to remove size detector\n\n\n  return () => {\n    if (browserUtils.isFirefox || browserUtils.isIE) {\n      clearInterval(resizeTimer);\n    } else {\n      if (iframe.contentWindow) {\n        iframe.contentWindow.onresize = null;\n      }\n\n      el && el.removeChild(iframe);\n    }\n  };\n};\n\nexport { checkResize, resizeDetector };\nexport default resizeDetector;","map":{"version":3,"names":["browserUtils","RESIZE_POLLING_TIMEOUT","checkResize","element","oldSize","cb","event","sizeChanged","width","offsetWidth","height","offsetHeight","resizeDetector","el","iframe","document","createElement","setAttribute","appendChild","detector","noResizeTimeStart","Date","now","resizeTimer","isFirefox","isIE","setInterval","noResizeTime","clearInterval","contentWindow","onresize","removeChild"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/popup/src/js/resizeDetector.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/resizeDetector\n */\nimport browserUtils from 'js/browserUtils';\n\n// the timeout for element resize polling, only used for Firefox\nconst RESIZE_POLLING_TIMEOUT = 60000;\n\n\nlet checkResize = ( element, oldSize, cb = null ) => {\n    return ( event = null ) => {\n        let sizeChanged = false;\n        let width = element.offsetWidth;\n        let height = element.offsetHeight;\n        if ( width !== oldSize.width || height !== oldSize.height ) {\n            cb && cb( element, event );\n            oldSize = { width, height };\n            sizeChanged = true;\n        }\n        return sizeChanged;\n    };\n};\n\n/**\n * Register resize detector on given element, the callback function will be called on element resized\n * @param {Element} el the element to detect size change\n * @param {Function} cb the callback function when size changed\n * @returns {Function} the cancel function to remove resize detector\n */\nlet resizeDetector = ( el, cb ) => {\n    // create iframe element and insert to the element detect the target element size change\n    var iframe = document.createElement( 'iframe' );\n    //wcag accessibility compliance for iframe.\n    iframe.setAttribute( 'aria-hidden', 'true' );\n    iframe.setAttribute( 'title', 'Pop up' );\n\n    iframe.setAttribute( 'class', 'sw-popup-resizeDetector' );\n    el.appendChild( iframe );\n\n    // record size of current element\n    let oldSize = { width: el.offsetWidth, height: el.offsetHeight };\n    let detector = checkResize( el, oldSize, cb );\n\n    let noResizeTimeStart = Date.now();\n    // as Firefox, IE doesn't support iframe resize event well, so use polling to detect size change\n    let resizeTimer;\n    if ( browserUtils.isFirefox || browserUtils.isIE ) {\n        resizeTimer = setInterval( () => {\n            if ( detector() ) {\n                noResizeTimeStart = Date.now();\n            } else {\n                let noResizeTime = Date.now() - noResizeTimeStart;\n                noResizeTime > RESIZE_POLLING_TIMEOUT && clearInterval( resizeTimer );\n            }\n        }, 50 );\n    } else if( iframe.contentWindow ) {\n        iframe.contentWindow.onresize = detector;\n    }\n\n    // return the cancel function to remove size detector\n    return () => {\n        if ( browserUtils.isFirefox || browserUtils.isIE ) {\n            clearInterval( resizeTimer );\n        } else {\n            if ( iframe.contentWindow ) { iframe.contentWindow.onresize = null; }\n            el && el.removeChild( iframe );\n        }\n    };\n};\n\nexport {\n    checkResize,\n    resizeDetector\n};\n\nexport default resizeDetector;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAOA,YAAP,MAAyB,iBAAzB,C,CAEA;;AACA,MAAMC,sBAAsB,GAAG,KAA/B;;AAGA,IAAIC,WAAW,GAAG,UAAEC,OAAF,EAAWC,OAAX,EAAmC;EAAA,IAAfC,EAAe,uEAAV,IAAU;EACjD,OAAO,YAAoB;IAAA,IAAlBC,KAAkB,uEAAV,IAAU;IACvB,IAAIC,WAAW,GAAG,KAAlB;IACA,IAAIC,KAAK,GAAGL,OAAO,CAACM,WAApB;IACA,IAAIC,MAAM,GAAGP,OAAO,CAACQ,YAArB;;IACA,IAAKH,KAAK,KAAKJ,OAAO,CAACI,KAAlB,IAA2BE,MAAM,KAAKN,OAAO,CAACM,MAAnD,EAA4D;MACxDL,EAAE,IAAIA,EAAE,CAAEF,OAAF,EAAWG,KAAX,CAAR;MACAF,OAAO,GAAG;QAAEI,KAAF;QAASE;MAAT,CAAV;MACAH,WAAW,GAAG,IAAd;IACH;;IACD,OAAOA,WAAP;EACH,CAVD;AAWH,CAZD;AAcA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,cAAc,GAAG,CAAEC,EAAF,EAAMR,EAAN,KAAc;EAC/B;EACA,IAAIS,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAwB,QAAxB,CAAb,CAF+B,CAG/B;;EACAF,MAAM,CAACG,YAAP,CAAqB,aAArB,EAAoC,MAApC;EACAH,MAAM,CAACG,YAAP,CAAqB,OAArB,EAA8B,QAA9B;EAEAH,MAAM,CAACG,YAAP,CAAqB,OAArB,EAA8B,yBAA9B;EACAJ,EAAE,CAACK,WAAH,CAAgBJ,MAAhB,EAR+B,CAU/B;;EACA,IAAIV,OAAO,GAAG;IAAEI,KAAK,EAAEK,EAAE,CAACJ,WAAZ;IAAyBC,MAAM,EAAEG,EAAE,CAACF;EAApC,CAAd;EACA,IAAIQ,QAAQ,GAAGjB,WAAW,CAAEW,EAAF,EAAMT,OAAN,EAAeC,EAAf,CAA1B;EAEA,IAAIe,iBAAiB,GAAGC,IAAI,CAACC,GAAL,EAAxB,CAd+B,CAe/B;;EACA,IAAIC,WAAJ;;EACA,IAAKvB,YAAY,CAACwB,SAAb,IAA0BxB,YAAY,CAACyB,IAA5C,EAAmD;IAC/CF,WAAW,GAAGG,WAAW,CAAE,MAAM;MAC7B,IAAKP,QAAQ,EAAb,EAAkB;QACdC,iBAAiB,GAAGC,IAAI,CAACC,GAAL,EAApB;MACH,CAFD,MAEO;QACH,IAAIK,YAAY,GAAGN,IAAI,CAACC,GAAL,KAAaF,iBAAhC;QACAO,YAAY,GAAG1B,sBAAf,IAAyC2B,aAAa,CAAEL,WAAF,CAAtD;MACH;IACJ,CAPwB,EAOtB,EAPsB,CAAzB;EAQH,CATD,MASO,IAAIT,MAAM,CAACe,aAAX,EAA2B;IAC9Bf,MAAM,CAACe,aAAP,CAAqBC,QAArB,GAAgCX,QAAhC;EACH,CA5B8B,CA8B/B;;;EACA,OAAO,MAAM;IACT,IAAKnB,YAAY,CAACwB,SAAb,IAA0BxB,YAAY,CAACyB,IAA5C,EAAmD;MAC/CG,aAAa,CAAEL,WAAF,CAAb;IACH,CAFD,MAEO;MACH,IAAKT,MAAM,CAACe,aAAZ,EAA4B;QAAEf,MAAM,CAACe,aAAP,CAAqBC,QAArB,GAAgC,IAAhC;MAAuC;;MACrEjB,EAAE,IAAIA,EAAE,CAACkB,WAAH,CAAgBjB,MAAhB,CAAN;IACH;EACJ,CAPD;AAQH,CAvCD;;AAyCA,SACIZ,WADJ,EAEIU,cAFJ;AAKA,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}
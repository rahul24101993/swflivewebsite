{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\uielements\\\\src\\\\js\\\\AwStepProgressService.js\"; // Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwStepProgressService\n */\n\nimport _ from 'lodash';\nimport wcagSvc from 'js/wcagService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet markCompleted = step => {\n  step.isCompleted = true;\n  step.isCurrentActive = false;\n  step.isInProgress = false;\n};\n\nlet markInProgressStep = step => {\n  step.isCompleted = false;\n  step.isCurrentActive = true;\n  step.isInProgress = true;\n};\n\nlet isEqual = (thisStep, thatStep) => {\n  if (thisStep.dbValue && thatStep.dbValue && thisStep.dbValue === thatStep.dbValue) {\n    return true;\n  }\n\n  if (thisStep.uiValue && thatStep.uiValue && thisStep.uiValue === thatStep.uiValue) {\n    return true;\n  }\n\n  return false;\n};\n\nlet isStepClickable = step => {\n  return !step.isCurrentActive && (step.isCompleted || step.isInProgress);\n};\n\nvar hasStepCompleted = isStepClickable;\n\nlet addClass = step => step.isCurrentActive ? 'aw-progress-bar-text-current' : 'aw-progress-bar-text';\n\nlet getCurrentActiveStepNo = steps => {\n  let stepNo = steps.findIndex(step => {\n    return step.isCurrentActive;\n  });\n  return stepNo + 1;\n};\n\nlet stepProgressType = clickable => {\n  return clickable ? 'ClickableStepProgress' : 'StepProgress';\n};\n\nexport const awStepProgressRenderFunction = props => {\n  let {\n    steps,\n    clickable,\n    currentStep,\n    completedStep,\n    viewModel,\n    i18n\n  } = props;\n\n  if (!steps) {\n    return;\n  }\n\n  const {\n    data,\n    dispatch\n  } = viewModel;\n\n  if (!data.isStepLinkClicked) {\n    if (completedStep) {\n      markCompleted(completedStep);\n      steps.map(aStep => {\n        if (isEqual(aStep, completedStep)) {\n          markCompleted(aStep);\n        }\n      });\n    }\n\n    if (currentStep) {\n      markInProgressStep(currentStep);\n      steps.map(aStep => {\n        if (isEqual(aStep, currentStep)) {\n          markInProgressStep(aStep);\n        }\n      });\n    }\n  }\n\n  let moveToStep = selectedStep => {\n    if (clickable) {\n      props.stepClickAction(selectedStep);\n      dispatch({\n        path: 'data.isStepLinkClicked',\n        value: true\n      });\n    }\n  };\n\n  let handleKeyPress = (event, selectedStep) => {\n    if (wcagSvc.isValidKeyPress(event)) {\n      moveToStep(selectedStep);\n    }\n  };\n\n  data.isStepLinkClicked = false;\n\n  const getLabel = step => step.isCompleted ? i18n.COMPLETED : i18n.CURRENT;\n\n  const getLabelContainer = step => (step.isCompleted || step.isCurrentActive) && /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"hidden\",\n    children: [getLabel(step), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 91\n  }, this);\n\n  let stepsElements = steps.map((step, index) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      \"data-locator\": step.propertyDisplayName,\n      title: step.propertyDisplayName,\n      className: step.isCurrentActive ? 'aw-step-progressCurrentChevron' : 'aw-step-progressChevron',\n      children: [clickable && /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-locator\": \"aw-step-progressChevronText\",\n        className: \"aw-step-progressChevronText\",\n        role: \"button\",\n        \"aria-disabled\": !isStepClickable(step),\n        children: [getLabelContainer(step), !isStepClickable(step) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: addClass(step),\n          children: step.propertyDisplayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), isStepClickable(step) && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javscript: void(0);\",\n          onClick: () => moveToStep(step),\n          className: addClass(step),\n          tabIndex: \"0\",\n          onKeyDown: e => handleKeyPress(e, step),\n          children: step.propertyDisplayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), !clickable && /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-locator\": \"aw-step-progressChevronText\",\n        className: \"aw-step-progressChevronText\",\n        role: \"button\",\n        \"aria-disabled\": \"true\",\n        children: [getLabelContainer(step), !hasStepCompleted(step) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: addClass(step),\n          children: step.propertyDisplayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this), hasStepCompleted(step) && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"aw-progress-bar-completed\",\n          children: step.propertyDisplayName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-locator\": stepProgressType(clickable),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"aw-step-progressChevronContainer\",\n        children: stepsElements\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uielements/src/js/AwStepProgressService.js"],"names":["markCompleted","step","markInProgressStep","isEqual","thisStep","thatStep","isStepClickable","hasStepCompleted","addClass","getCurrentActiveStepNo","steps","stepNo","stepProgressType","clickable","awStepProgressRenderFunction","props","i18n","dispatch","data","aStep","moveToStep","selectedStep","path","value","handleKeyPress","wcagSvc","getLabel","getLabelContainer","stepsElements","propertyDisplayName","e"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwStepProgressService\n */\nimport _ from 'lodash';\nimport wcagSvc from 'js/wcagService';\n\nlet markCompleted = ( step ) => {\n    step.isCompleted = true;\n    step.isCurrentActive = false;\n    step.isInProgress = false;\n};\n\nlet markInProgressStep = ( step ) => {\n    step.isCompleted = false;\n    step.isCurrentActive = true;\n    step.isInProgress = true;\n};\n\nlet isEqual = ( thisStep, thatStep ) => {\n    if( thisStep.dbValue && thatStep.dbValue && thisStep.dbValue === thatStep.dbValue ) {\n        return true;\n    }\n    if( thisStep.uiValue && thatStep.uiValue && thisStep.uiValue === thatStep.uiValue ) {\n        return true;\n    }\n    return false;\n};\n\nlet isStepClickable = ( step ) => {\n    return !step.isCurrentActive && ( step.isCompleted || step.isInProgress );\n};\n\nvar hasStepCompleted = isStepClickable;\n\nlet addClass = ( step ) => step.isCurrentActive ? 'aw-progress-bar-text-current' : 'aw-progress-bar-text';\n\nlet getCurrentActiveStepNo = ( steps ) => {\n    let stepNo = steps.findIndex( step => {\n        return step.isCurrentActive;\n    } );\n    return stepNo + 1;\n};\n\nlet stepProgressType = ( clickable ) => {\n    return clickable ? 'ClickableStepProgress' : 'StepProgress';\n};\n\nexport const awStepProgressRenderFunction = ( props ) => {\n    let { steps, clickable, currentStep, completedStep, viewModel, i18n } = props;\n\n    if( !steps ) {\n        return;\n    }\n    const { data, dispatch } = viewModel;\n\n    if( !data.isStepLinkClicked ) {\n        if( completedStep ) {\n            markCompleted( completedStep );\n            steps.map( aStep => {\n                if( isEqual( aStep, completedStep ) ) {\n                    markCompleted( aStep );\n                }\n            } );\n        }\n        if( currentStep ) {\n            markInProgressStep( currentStep );\n            steps.map( aStep => {\n                if( isEqual( aStep, currentStep ) ) {\n                    markInProgressStep( aStep );\n                }\n            } );\n        }\n    }\n\n    let moveToStep = ( selectedStep ) => {\n        if( clickable ) {\n            props.stepClickAction( selectedStep );\n            dispatch( { path: 'data.isStepLinkClicked', value: true } );\n        }\n    };\n\n    let handleKeyPress = ( event, selectedStep ) => {\n        if( wcagSvc.isValidKeyPress( event ) ) {\n            moveToStep( selectedStep );\n        }\n    };\n\n    data.isStepLinkClicked = false;\n    const getLabel = ( step ) => step.isCompleted ? i18n.COMPLETED : i18n.CURRENT;\n    const getLabelContainer = ( step ) => ( step.isCompleted || step.isCurrentActive ) && <span className='hidden'>{getLabel( step )} </span>;\n\n    let stepsElements = steps.map( ( step, index ) => {\n        return (\n            <li key={ index } data-locator={ step.propertyDisplayName } title={ step.propertyDisplayName } className={ step.isCurrentActive ? 'aw-step-progressCurrentChevron' : 'aw-step-progressChevron' }>\n                { clickable &&\n                    <div data-locator='aw-step-progressChevronText' className='aw-step-progressChevronText' role='button' aria-disabled={ !isStepClickable( step ) }>\n                        { getLabelContainer( step )}\n                        { !isStepClickable( step ) &&\n                            <span className={ addClass( step ) }>{ step.propertyDisplayName }</span>\n                        }\n                        { isStepClickable( step ) &&\n                            <a href='javscript: void(0);' onClick={ () => moveToStep( step ) } className={ addClass( step ) } tabIndex='0' onKeyDown={ ( e ) => handleKeyPress( e, step ) }>\n                                { step.propertyDisplayName }\n                            </a>\n                        }\n                    </div>\n                }\n                { !clickable &&\n                    <div data-locator='aw-step-progressChevronText' className='aw-step-progressChevronText' role='button' aria-disabled='true'>\n                        { getLabelContainer( step )}\n                        { !hasStepCompleted( step ) &&\n                            <span className={ addClass( step ) }>{ step.propertyDisplayName }</span>\n                        }\n                        { hasStepCompleted( step ) &&\n                            <span className='aw-progress-bar-completed'>{ step.propertyDisplayName }</span>\n                        }\n                    </div>\n                }\n            </li>\n        );\n    } );\n\n    return (\n        <div data-locator={ stepProgressType( clickable ) } >\n            <div>\n                <ul className='aw-step-progressChevronContainer'>\n                    { stepsElements }\n                </ul>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
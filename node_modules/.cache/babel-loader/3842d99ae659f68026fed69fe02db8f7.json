{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module includes the various AngularJS directives that present and control date and/or time entry widgets to the\n * user.\n * <P>\n * Note: We include 'jqueryui' as a parameter to be sure it finished loading before we get here.\n *\n * @module js/uwDirectiveDateTimeService\n */\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport Debug from 'debug';\nimport flatpickr from 'flatpickr';\nvar trace = new Debug('uwDirectiveDateTimeService');\nvar _checked = false;\nlet exports;\n/**\n * Set (if necessary) the locale specific properties of the JQueryUI date picker based on the currently set\n * locale.\n */\n\nexport let assureDateTimeLocale = function () {\n  if (!_checked) {\n    _checked = true;\n    var promise = dateTimeSvc.getJQueryDatePickerTextBundle();\n\n    if (promise) {\n      promise.then(function (jqTextBundle) {\n        if (jqTextBundle) {//TODO: Map this to Flatpickr's localize (need to import it's bundles)\n          // https://flatpickr.js.org/localization/#using-modules\n          // $.datepicker.regional[ localeSvc.getLanguageCode() ] = jqTextBundle;\n          // $.datepicker.setDefaults( jqTextBundle );\n        }\n      });\n    }\n  }\n};\n/**\n * Returns a new Date object based on the given Date value and the current format string using JQuery UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {String} dateString - the date string to be converted to a date object\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {Date} A new JS Date object based on the given object.\n */\n\nexport let parseDate = function (dateString, format) {\n  if (!format) {\n    format = dateTimeSvc.getDateFormat();\n  }\n\n  return flatpickr.parseDate(dateString, format);\n};\n/**\n * Returns a new Date string value based on the given Date Object and the current format string using JQuery\n * UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {Object} dateTime - the Date object to be formatted\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {String} formatted date\n */\n\nexport let formatDate = function (dateTime, format) {\n  if (!format) {\n    format = dateTimeSvc.getDateFormat();\n  }\n\n  return flatpickr.formatDate(dateTime, format);\n};\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\n\nexport let convertDateToMsec = function (queryVal) {\n  if (typeof queryVal !== 'number') {\n    try {\n      queryVal = new Date(queryVal).getTime();\n    } catch (e) {\n      trace('Invalid Date format', e);\n    }\n  }\n\n  return queryVal > 0 ? queryVal : Infinity;\n};\nexports = {\n  assureDateTimeLocale,\n  parseDate,\n  formatDate,\n  convertDateToMsec\n};\nexport default exports;\n/**\n * Setup to listen to changes in locale.\n *\n * @param {Object} localeInfo - Updated locale info\n *\n * @return {Void}\n */\n\neventBus.subscribe('dateTime.changed', function (localeInfo) {\n  // eslint-disable-line no-unused-vars\n  _checked = false;\n  exports.assureDateTimeLocale();\n}, 'uwDirectiveDateTimeService');","map":{"version":3,"names":["dateTimeSvc","localeSvc","eventBus","Debug","flatpickr","trace","_checked","exports","assureDateTimeLocale","promise","getJQueryDatePickerTextBundle","then","jqTextBundle","parseDate","dateString","format","getDateFormat","formatDate","dateTime","convertDateToMsec","queryVal","Date","getTime","e","Infinity","subscribe","localeInfo"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/uwDirectiveDateTimeService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module includes the various AngularJS directives that present and control date and/or time entry widgets to the\n * user.\n * <P>\n * Note: We include 'jqueryui' as a parameter to be sure it finished loading before we get here.\n *\n * @module js/uwDirectiveDateTimeService\n */\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport Debug from 'debug';\nimport flatpickr from 'flatpickr';\n\nvar trace = new Debug( 'uwDirectiveDateTimeService' );\n\nvar _checked = false;\n\nlet exports;\n\n/**\n * Set (if necessary) the locale specific properties of the JQueryUI date picker based on the currently set\n * locale.\n */\nexport let assureDateTimeLocale = function() {\n    if( !_checked ) {\n        _checked = true;\n\n        var promise = dateTimeSvc.getJQueryDatePickerTextBundle();\n\n        if( promise ) {\n            promise.then( function( jqTextBundle ) {\n                if( jqTextBundle ) {\n                    //TODO: Map this to Flatpickr's localize (need to import it's bundles)\n                    // https://flatpickr.js.org/localization/#using-modules\n\n                    // $.datepicker.regional[ localeSvc.getLanguageCode() ] = jqTextBundle;\n                    // $.datepicker.setDefaults( jqTextBundle );\n                }\n            } );\n        }\n    }\n};\n\n/**\n * Returns a new Date object based on the given Date value and the current format string using JQuery UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {String} dateString - the date string to be converted to a date object\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {Date} A new JS Date object based on the given object.\n */\nexport let parseDate = function( dateString, format ) {\n    if( !format ) {\n        format = dateTimeSvc.getDateFormat();\n    }\n    return flatpickr.parseDate( dateString, format );\n};\n\n/**\n * Returns a new Date string value based on the given Date Object and the current format string using JQuery\n * UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {Object} dateTime - the Date object to be formatted\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {String} formatted date\n */\nexport let formatDate = function( dateTime, format ) {\n    if( !format ) {\n        format = dateTimeSvc.getDateFormat();\n    }\n    return flatpickr.formatDate( dateTime, format );\n};\n\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\nexport let convertDateToMsec = function( queryVal ) {\n    if( typeof queryVal !== 'number' ) {\n        try {\n            queryVal = new Date( queryVal ).getTime();\n        } catch ( e ) {\n            trace( 'Invalid Date format', e );\n        }\n    }\n    return queryVal > 0 ? queryVal : Infinity;\n};\n\nexports = {\n    assureDateTimeLocale,\n    parseDate,\n    formatDate,\n    convertDateToMsec\n};\nexport default exports;\n\n/**\n * Setup to listen to changes in locale.\n *\n * @param {Object} localeInfo - Updated locale info\n *\n * @return {Void}\n */\neventBus.subscribe( 'dateTime.changed', function( localeInfo ) { // eslint-disable-line no-unused-vars\n    _checked = false;\n\n    exports.assureDateTimeLocale();\n}, 'uwDirectiveDateTimeService' );\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAIC,KAAK,GAAG,IAAIF,KAAJ,CAAW,4BAAX,CAAZ;AAEA,IAAIG,QAAQ,GAAG,KAAf;AAEA,IAAIC,OAAJ;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,oBAAoB,GAAG,YAAW;EACzC,IAAI,CAACF,QAAL,EAAgB;IACZA,QAAQ,GAAG,IAAX;IAEA,IAAIG,OAAO,GAAGT,WAAW,CAACU,6BAAZ,EAAd;;IAEA,IAAID,OAAJ,EAAc;MACVA,OAAO,CAACE,IAAR,CAAc,UAAUC,YAAV,EAAyB;QACnC,IAAIA,YAAJ,EAAmB,CACf;UACA;UAEA;UACA;QACH;MACJ,CARD;IASH;EACJ;AACJ,CAlBM;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,UAAUC,UAAV,EAAsBC,MAAtB,EAA+B;EAClD,IAAI,CAACA,MAAL,EAAc;IACVA,MAAM,GAAGf,WAAW,CAACgB,aAAZ,EAAT;EACH;;EACD,OAAOZ,SAAS,CAACS,SAAV,CAAqBC,UAArB,EAAiCC,MAAjC,CAAP;AACH,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,UAAU,GAAG,UAAUC,QAAV,EAAoBH,MAApB,EAA6B;EACjD,IAAI,CAACA,MAAL,EAAc;IACVA,MAAM,GAAGf,WAAW,CAACgB,aAAZ,EAAT;EACH;;EACD,OAAOZ,SAAS,CAACa,UAAV,CAAsBC,QAAtB,EAAgCH,MAAhC,CAAP;AACH,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAII,iBAAiB,GAAG,UAAUC,QAAV,EAAqB;EAChD,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAmC;IAC/B,IAAI;MACAA,QAAQ,GAAG,IAAIC,IAAJ,CAAUD,QAAV,EAAqBE,OAArB,EAAX;IACH,CAFD,CAEE,OAAQC,CAAR,EAAY;MACVlB,KAAK,CAAE,qBAAF,EAAyBkB,CAAzB,CAAL;IACH;EACJ;;EACD,OAAOH,QAAQ,GAAG,CAAX,GAAeA,QAAf,GAA0BI,QAAjC;AACH,CATM;AAWPjB,OAAO,GAAG;EACNC,oBADM;EAENK,SAFM;EAGNI,UAHM;EAINE;AAJM,CAAV;AAMA,eAAeZ,OAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,QAAQ,CAACuB,SAAT,CAAoB,kBAApB,EAAwC,UAAUC,UAAV,EAAuB;EAAE;EAC7DpB,QAAQ,GAAG,KAAX;EAEAC,OAAO,CAACC,oBAAR;AACH,CAJD,EAIG,4BAJH"},"metadata":{},"sourceType":"module"}
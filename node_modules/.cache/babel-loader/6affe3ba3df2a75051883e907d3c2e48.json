{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/viewModeManagementService\n */import logger from'js/logger';import appCtxService from'js/appCtxService';import viewModeService from'js/viewMode.service';import editHandlerSvc from'js/editHandlerService';import narrowModeService from'js/aw.narrowMode.service';import AwPromiseService from'js/awPromiseService';export const populateSupportedViewModes=viewModes=>{let supportedViewModes=viewModes?viewModes:{SummaryView:{primaryWorkArea:'list',secondaryWorkArea:true},TableSummaryView:{primaryWorkArea:'table',secondaryWorkArea:true},ListView:{primaryWorkArea:'list',secondaryWorkArea:false},TableView:{primaryWorkArea:'table',secondaryWorkArea:false},ImageView:{primaryWorkArea:'image',secondaryWorkArea:false}};viewModeService.setAvailableViewModes(Object.keys(supportedViewModes));return supportedViewModes;};const updateViewMode=(viewModeKey,viewModeValue)=>{const getViewMode=()=>{//var shouldBroadcastUpdate = $scope.view !== newViewMode.primaryWorkArea;\n//Reset selection back to base when SWA is hidden\n// if( !viewModeValue.secondaryWorkArea ) {\n//     $scope.updateSecondarySelection( [], null );\n// }\n// if( shouldBroadcastUpdate ) {\n//     $scope.$broadcast( 'viewModeChanged', newViewMode );\n// }\nreturn{viewSuffix:viewModeValue.primaryWorkArea,showSecondaryWorkArea:viewModeValue.secondaryWorkArea};};const editHandler=editHandlerSvc.getActiveEditHandler();if(editHandler&&!editHandler.editInProgress()){return AwPromiseService.instance.resolve(getViewMode());}return editHandlerSvc.leaveConfirmation().then(()=>{return getViewMode();});};const getViewModePref=nameToken=>{return'AW_SubLocation_'+(nameToken.indexOf(':')!==-1?nameToken.split(':')[1]:'Generic')+'_ViewMode';};const getViewModeFromPref=nameToken=>{let viewModePref=appCtxService.getCtx('preferences.'+getViewModePref(nameToken));if(viewModePref){return viewModePref[0];}return viewModePref;};const setViewModeToPref=(viewModeKey,nameToken)=>{appCtxService.updatePartialCtx('preferences.'+getViewModePref(nameToken),[viewModeKey]);};export const handleViewModechange=(supportedViewModes,provider,viewModeKey)=>{if(supportedViewModes){var viewModeValue=supportedViewModes[viewModeKey];if(!viewModeValue){viewModeKey=provider.defaultDisplayMode?provider.defaultDisplayMode:Object.keys(supportedViewModes)[0];logger.warn('Unknown view mode, defaulting to',viewModeKey);viewModeValue=supportedViewModes[viewModeKey];}//This is an existing tech debt in ng-afx, fixing this is a big change and not a priority right now\nconst hasTcSessionData=appCtxService.getCtx('tcSessionData');if(getViewModeFromPref(provider.nameToken)!==viewModeKey&&hasTcSessionData){setViewModeToPref(viewModeKey,provider.nameToken);}return updateViewMode(viewModeKey,viewModeValue);}};export const setViewMode=(viewModes,_ref)=>{let{defaultDisplayMode,nameToken}=_ref;let viewMode=nameToken&&getViewModeFromPref(nameToken);if(defaultDisplayMode&&(!viewMode||!viewModes[viewMode])){viewModeService.changeViewMode(defaultDisplayMode);}else{if(narrowModeService.isNarrowMode()){let newViewMode=viewModes.hasOwnProperty(defaultDisplayMode)?viewModes[defaultDisplayMode]:{primaryWorkArea:'list',secondaryWorkArea:true};return updateViewMode(null,newViewMode);}viewMode=nameToken&&getViewModeFromPref(nameToken);if(viewMode){viewModeService.changeViewMode(viewMode);}else if(viewModes.hasOwnProperty('SummaryView')){viewModeService.changeViewMode('SummaryView');}else{viewModeService.changeViewMode(Object.keys(viewModes)[0]);}}};","map":null,"metadata":{},"sourceType":"module"}
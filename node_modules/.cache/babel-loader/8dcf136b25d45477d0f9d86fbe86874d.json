{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * This represents the Location Navigation and tracking\n *\n * @module js/locationNavigation.service\n */\n// module\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService'; // service\n\nimport AwBaseService from 'js/awBaseService';\nimport AwStateService from 'js/awStateService';\nimport AwUrlMatcherFactoryService from 'js/awUrlMatcherFactoryService';\nimport localeService from 'js/localeService';\nimport debugService from 'js/debugService';\nimport _ from 'lodash';\nexport default class LocationNavigationService extends AwBaseService {\n  // Only for unit test purpose\n  static reset() {\n    // leavePlaceSvc.reset();\n    AwBaseService.reset.apply(this);\n    AwStateService.reset();\n  }\n\n  constructor() {\n    super(); // service and module references\n\n    this._state = AwStateService.instance; // members\n\n    this._stateStackNames = null;\n    this._stateStack = null;\n    this._popState = null;\n    this._goBackInProgress = false;\n    this._xrtShowObjectState = ['com_siemens_splm_clientfx_tcui_xrt_showObject', 'com_siemens_splm_clientfx_tcui_xrt_showMultiObject'];\n    /**\n     * {Integer} The number of previous states that will be persisted for navigation from back button.\n     * If the number of states exceeds this count, the earliest state will be forgotten.\n     */\n\n    this._persistentStatesCount = 24;\n    this.init();\n    eventBus.subscribe('locationChangeSuccess', _ref => {\n      let {\n        event,\n        oldUrl,\n        newUrl\n      } = _ref;\n      var newLocation = this.parseUrl(newUrl);\n      var oldLocation = this.parseUrl(oldUrl);\n      /*\n       * Several location changes are made during show object location as query parameters are added do not\n       * want to check changes until toLocation are valid locations\n       */\n\n      if (newLocation.params && newLocation.params.uid) {\n        if (oldLocation.params) {\n          if (oldLocation.params.uid && newLocation.params.uid !== oldLocation.params.uid || newLocation.params.uid === oldLocation.params.uid && newLocation.state.name !== oldLocation.state.name) {\n            this.routeStateChangeSuccess(newLocation.state, newLocation.params, oldLocation.state, oldLocation.params);\n          }\n        } else {\n          this.routeStateChangeSuccess(newLocation.state, newLocation.params, oldLocation.state, oldLocation.params);\n        }\n      }\n\n      if (this._goBackInProgress === true) {\n        this._goBackInProgress = false;\n      }\n\n      eventBus.publish('$locationChangeSuccess', {\n        event,\n        newUrl,\n        oldUrl\n      });\n      logger.trace('#### locationChangeSuccess changed! new: ' + newUrl + ', oldUrl: ' + oldUrl);\n    });\n    window.addEventListener('resize', () => {\n      eventBus.publish('aw.windowResize');\n    });\n  }\n  /**\n   * Initializes the previous routes and route names if they are present in sessionStorage\n   */\n\n\n  init() {\n    this._stateStack = [];\n    this._stateStackNames = [];\n\n    try {\n      if (sessionStorage.getItem('STATES_ARRAY_NAMES') && sessionStorage.getItem('STATES_ARRAY')) {\n        this._stateStackNames = JSON.parse(sessionStorage.getItem('STATES_ARRAY_NAMES'));\n        this._stateStack = JSON.parse(sessionStorage.getItem('STATES_ARRAY'));\n      }\n    } catch (e) {\n      logger.trace('Error in location initiation', e);\n    }\n  }\n  /**\n   * Function parses a URL and returns an object consisting of state and params\n   * @param {string} url url input as string\n   * @returns {object} URL object with parse result\n   */\n\n\n  parseUrl(url) {\n    let urlMatcherFactory = AwUrlMatcherFactoryService.instance;\n    var stateStart = url.lastIndexOf('#');\n    var paramsStart = url.lastIndexOf('?');\n    var state = url.substring(stateStart + 1);\n    var paramsStr = '';\n    var params = {};\n\n    if (paramsStart > -1) {\n      state = url.substring(stateStart + 1, paramsStart);\n      paramsStr = url.substr(paramsStart + 1);\n      var paramPairs = paramsStr.split('&');\n\n      for (var i = 0; i < paramPairs.length; i++) {\n        var keyValue = paramPairs[i].split('=');\n\n        if (keyValue.length === 2) {\n          params[keyValue[0]] = urlMatcherFactory.type('string').decode(decodeURIComponent(keyValue[1]));\n        }\n      }\n    }\n\n    if (state === '/com.siemens.splm.clientfx.tcui.xrt.showObject') {\n      state = this._xrtShowObjectState[0];\n    } else if (state === '/com.siemens.splm.clientfx.tcui.xrt.showMultiObject') {\n      state = this._xrtShowObjectState[1];\n    } else if (state.charAt(0) === '/') {\n      state = state.substring(1);\n    }\n\n    return {\n      state: {\n        name: state.split('/').slice(-1)[0]\n      },\n      params: params,\n      url: url\n    };\n  }\n  /**\n   * goBack function wired to the goBack Button\n   */\n\n\n  goBack() {\n    this._popState = this._stateStack.pop();\n    sessionStorage.setItem('STATES_ARRAY', JSON.stringify(this._stateStack));\n\n    this._stateStackNames.pop();\n\n    sessionStorage.setItem('STATES_ARRAY_NAMES', JSON.stringify(this._stateStackNames));\n    appCtxService.registerCtx('previousLocationDisplayName', this.getGoBackLocation());\n\n    if (this._popState && this._popState.state) {\n      logger.trace('&&&&& go pop state' + this._popState.state.name);\n      this._goBackInProgress = true;\n\n      this._state.go(this._popState.state.name, this._popState.params, {\n        inherit: false\n      });\n    }\n  }\n\n  peekLastState() {\n    if (this._stateStack && this._stateStack.length > 0) {\n      return this._stateStack[this._stateStack.length - 1];\n    }\n\n    return undefined;\n  }\n\n  getGoBackLocation() {\n    if (this._stateStackNames && this._stateStackNames.length > 0) {\n      return this._stateStackNames[this._stateStackNames.length - 1];\n    }\n\n    return localeService.getLoadedTextFromKey('UIMessages.noPreviousLocation');\n  }\n\n  updateCurrentDisplayName() {\n    var title = document.title;\n\n    if (this._stateStackNames && this._stateStackNames.length > 0) {\n      let stackNameLen = this._stateStackNames.length;\n      title !== '' ? this._stateStackNames[stackNameLen - 1] = title.substr(title.indexOf('-') + 1) : this._stateStackNames[stackNameLen - 1] = this._stateStackNames[stackNameLen - 1].substr(this._stateStackNames[stackNameLen - 1].indexOf('-') + 1);\n      sessionStorage.setItem('STATES_ARRAY', JSON.stringify(this._stateStack));\n    }\n\n    if (this._stateStackNames && this._stateStackNames.length === 0 && !_.isEmpty(title)) {\n      this._stateStackNames[0] = title.substr(title.indexOf('-') + 1);\n      sessionStorage.setItem('STATES_ARRAY', JSON.stringify(this._stateStack));\n    }\n\n    return undefined;\n  }\n\n  ifCurrentDisplayNameToBeUpdated(fromState, toState) {\n    // following conditions when to update the current display name:\n    // a. When current page is refreshed\n    // b. When this fn is invoked from routeChangeHandler\n    // c. When this fn invoked from locationChangeSuccess however previous state and nextState is same\n    if (fromState.name === '' && fromState.url === '^' || fromState.parent && toState.parent || !toState.parent && toState.name === fromState.name) {\n      this.updateCurrentDisplayName();\n    }\n  }\n  /**\n   * Invoked when the state change was successful from UI router\n   * @param {object} event event body\n   * @param {object} toState state object transit to\n   * @param {object} toParams paramters for toState\n   * @param {object} fromState state object transit from\n   * @param {object} fromParams parameters for fromState\n   */\n\n\n  routeStateChangeSuccess(toState, toParams, fromState, fromParams) {\n    debugService.debug('routes', fromState.name, toState.name);\n\n    if (fromState && fromState.name !== 'checkAuthentication') {\n      if (this._popState && this._popState.state.name === toState.name && this._goBackInProgress === true) {\n        this._popState = null;\n        return; // revisitme- ported as it is during rebase in uirouter react there are no events\n        // This condition needed to restrict to save state on stack once user clicked on back button more than once\n        // and state name is different (Reference defect -LCS-462441)\n        // if( !( event.name === '$locationChangeSuccess' && fromState.name !== toState.name ) ) {\n        //     this._popState = null;\n        // }\n        // return;\n      } // the below check is required in afx-next to restrict locationChangeSuccess code to\n      // invoke the state persisting logic down below during a goBack operation; During a goBack\n      // operation, routeChangeHandler triggers routeStateChangeSuccess to persist the state information;\n      // we do not want the locationChangeSuccess to invoke this fn again in turn saving the goback\n      // state as a new state again in turn causing the goBack command to navigate in circles between 2 locations\n\n\n      if (this._goBackInProgress === true && this._popState === null) {\n        this._goBackInProgress = false;\n        return;\n      }\n\n      if (toState && toState.parent && fromState && fromState.parent && toState.parent === fromState.parent) {\n        return;\n      }\n\n      let title = _.isEmpty(document.title) ? localeService.getLoadedTextFromKey('UIMessages.noPreviousLocation') : document.title;\n      var newState = {\n        state: fromState,\n        params: fromParams,\n        displayName: title\n      };\n\n      if (this._stateStack.length > 0) {\n        var lastState = this.peekLastState();\n\n        if (lastState.state.name !== newState.state.name && newState.state.name !== '') {\n          this._stateStack.push(newState);\n\n          this._stateStackNames.push(newState.displayName);\n\n          logger.trace('^^^^1 pushing newState ' + newState.state.name);\n        } else if (newState.state.name !== '' && lastState.params.uid !== newState.params.uid && (newState.params.uid !== toParams.uid || newState.state.name !== toState.name)) {\n          this._stateStack.push(newState);\n\n          this._stateStackNames.push(newState.displayName);\n\n          logger.trace('^^^^2 pushing newState ' + newState.state.name);\n        }\n      } else if (!newState.state.abstract) {\n        this._stateStack.push(newState);\n\n        this._stateStackNames.push(newState.displayName);\n\n        logger.trace('^^^^3 pushing newState ' + newState.state.name);\n      } // If persisted states count exceeds allowed count, remove earliest state\n\n\n      if (this._stateStack.length > this._persistentStatesCount) {\n        this._stateStack.shift();\n\n        this._stateStackNames.shift();\n      }\n\n      sessionStorage.setItem('STATES_ARRAY_NAMES', JSON.stringify(this._stateStackNames));\n      sessionStorage.setItem('STATES_ARRAY', JSON.stringify(this._stateStack));\n      this.ifCurrentDisplayNameToBeUpdated(fromState, toState);\n    } // Once location is changed, fix focus navigation starting point ( check solution )\n    //https://sarahmhigley.com/writing/focus-navigation-start-point/#assistive-tech-support\n\n\n    let eleToFocus = document.querySelector('.aw-skip-to-main-container');\n\n    if (eleToFocus !== null) {\n      eleToFocus.focus();\n    }\n\n    appCtxService.registerCtx('previousLocationDisplayName', this.getGoBackLocation());\n  }\n  /**\n   * Function to update the state parameter\n   * @param {string} paramName parameter name\n   * @param {string} paramValue parameter value\n   */\n\n\n  updateStateParameter(paramName, paramValue) {\n    this._state.params[paramName] = paramValue;\n\n    this._state.go('.', this._state.params, {\n      inherit: true\n    });\n  }\n  /**\n   * Function to transition to a new state\n   * @param {string} transitionTo URL that transit to\n   * @param {object} toParams parameter for transitionTo\n   * @param {object} options transition options\n   */\n\n\n  go(transitionTo, toParams, options) {\n    this._state.go(transitionTo, toParams, options);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/locationNavigation.service.js"],"names":["reset","AwBaseService","AwStateService","constructor","eventBus","newUrl","newLocation","oldLocation","oldUrl","logger","window","init","sessionStorage","JSON","parseUrl","urlMatcherFactory","AwUrlMatcherFactoryService","stateStart","url","paramsStart","state","paramsStr","params","paramPairs","i","keyValue","decodeURIComponent","name","goBack","appCtxService","inherit","peekLastState","getGoBackLocation","localeService","updateCurrentDisplayName","title","document","stackNameLen","_","ifCurrentDisplayNameToBeUpdated","fromState","toState","routeStateChangeSuccess","debugService","newState","displayName","lastState","toParams","eleToFocus","updateStateParameter","go"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * This represents the Location Navigation and tracking\n *\n * @module js/locationNavigation.service\n */\n\n// module\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\n\n// service\nimport AwBaseService from 'js/awBaseService';\nimport AwStateService from 'js/awStateService';\nimport AwUrlMatcherFactoryService from 'js/awUrlMatcherFactoryService';\nimport localeService from 'js/localeService';\nimport debugService from 'js/debugService';\nimport _ from 'lodash';\n\nexport default class LocationNavigationService extends AwBaseService {\n    // Only for unit test purpose\n    static reset() {\n        // leavePlaceSvc.reset();\n        AwBaseService.reset.apply( this );\n        AwStateService.reset();\n    }\n    constructor() {\n        super();\n\n        // service and module references\n        this._state = AwStateService.instance;\n\n        // members\n        this._stateStackNames = null;\n\n        this._stateStack = null;\n\n        this._popState = null;\n\n        this._goBackInProgress = false;\n\n        this._xrtShowObjectState = [ 'com_siemens_splm_clientfx_tcui_xrt_showObject', 'com_siemens_splm_clientfx_tcui_xrt_showMultiObject' ];\n\n        /**\n         * {Integer} The number of previous states that will be persisted for navigation from back button.\n         * If the number of states exceeds this count, the earliest state will be forgotten.\n         */\n        this._persistentStatesCount = 24;\n\n        this.init();\n\n        eventBus.subscribe( 'locationChangeSuccess', ( { event, oldUrl, newUrl } ) => {\n            var newLocation = this.parseUrl( newUrl );\n            var oldLocation = this.parseUrl( oldUrl );\n\n            /*\n             * Several location changes are made during show object location as query parameters are added do not\n             * want to check changes until toLocation are valid locations\n             */\n            if( newLocation.params && newLocation.params.uid ) {\n                if( oldLocation.params ) {\n                    if( oldLocation.params.uid && newLocation.params.uid !== oldLocation.params.uid ||\n                        newLocation.params.uid === oldLocation.params.uid && newLocation.state.name !== oldLocation.state.name ) {\n                        this.routeStateChangeSuccess( newLocation.state, newLocation.params,\n                            oldLocation.state, oldLocation.params );\n                    }\n                } else {\n                    this.routeStateChangeSuccess( newLocation.state, newLocation.params,\n                        oldLocation.state, oldLocation.params );\n                }\n            }\n            if( this._goBackInProgress === true ) {\n                this._goBackInProgress = false;\n            }\n            eventBus.publish( '$locationChangeSuccess', { event, newUrl, oldUrl } );\n            logger.trace( '#### locationChangeSuccess changed! new: ' + newUrl + ', oldUrl: ' + oldUrl );\n        } );\n        window.addEventListener( 'resize', () => {\n            eventBus.publish( 'aw.windowResize' );\n        } );\n    }\n\n    /**\n     * Initializes the previous routes and route names if they are present in sessionStorage\n     */\n    init() {\n        this._stateStack = [];\n        this._stateStackNames = [];\n        try {\n            if( sessionStorage.getItem( 'STATES_ARRAY_NAMES' ) && sessionStorage.getItem( 'STATES_ARRAY' ) ) {\n                this._stateStackNames = JSON.parse( sessionStorage.getItem( 'STATES_ARRAY_NAMES' ) );\n                this._stateStack = JSON.parse( sessionStorage.getItem( 'STATES_ARRAY' ) );\n            }\n        } catch ( e ) {\n            logger.trace( 'Error in location initiation', e );\n        }\n    }\n\n    /**\n     * Function parses a URL and returns an object consisting of state and params\n     * @param {string} url url input as string\n     * @returns {object} URL object with parse result\n     */\n    parseUrl( url ) {\n        let urlMatcherFactory = AwUrlMatcherFactoryService.instance;\n        var stateStart = url.lastIndexOf( '#' );\n        var paramsStart = url.lastIndexOf( '?' );\n        var state = url.substring( stateStart + 1 );\n        var paramsStr = '';\n        var params = {};\n        if( paramsStart > -1 ) {\n            state = url.substring( stateStart + 1, paramsStart );\n            paramsStr = url.substr( paramsStart + 1 );\n            var paramPairs = paramsStr.split( '&' );\n            for( var i = 0; i < paramPairs.length; i++ ) {\n                var keyValue = paramPairs[ i ].split( '=' );\n                if( keyValue.length === 2 ) {\n                    params[ keyValue[ 0 ] ] = urlMatcherFactory.type( 'string' )\n                        .decode( decodeURIComponent( keyValue[ 1 ] ) );\n                }\n            }\n        }\n\n        if( state === '/com.siemens.splm.clientfx.tcui.xrt.showObject' ) {\n            state = this._xrtShowObjectState[ 0 ];\n        } else if( state === '/com.siemens.splm.clientfx.tcui.xrt.showMultiObject' ) {\n            state = this._xrtShowObjectState[ 1 ];\n        } else if( state.charAt( 0 ) === '/' ) {\n            state = state.substring( 1 );\n        }\n        return {\n            state: {\n                name: state.split( '/' ).slice( -1 )[ 0 ]\n            },\n            params: params,\n            url: url\n        };\n    }\n\n    /**\n     * goBack function wired to the goBack Button\n     */\n    goBack() {\n        this._popState = this._stateStack.pop();\n\n        sessionStorage.setItem( 'STATES_ARRAY', JSON.stringify( this._stateStack ) );\n\n        this._stateStackNames.pop();\n\n        sessionStorage.setItem( 'STATES_ARRAY_NAMES', JSON.stringify( this._stateStackNames ) );\n\n        appCtxService.registerCtx( 'previousLocationDisplayName', this.getGoBackLocation() );\n\n        if( this._popState && this._popState.state ) {\n            logger.trace( '&&&&& go pop state' + this._popState.state.name );\n            this._goBackInProgress = true;\n            this._state.go( this._popState.state.name, this._popState.params, {\n                inherit: false\n            } );\n        }\n    }\n\n    peekLastState() {\n        if( this._stateStack && this._stateStack.length > 0 ) {\n            return this._stateStack[ this._stateStack.length - 1 ];\n        }\n        return undefined;\n    }\n\n    getGoBackLocation() {\n        if( this._stateStackNames && this._stateStackNames.length > 0 ) {\n            return this._stateStackNames[ this._stateStackNames.length - 1 ];\n        }\n        return localeService.getLoadedTextFromKey( 'UIMessages.noPreviousLocation' );\n    }\n\n    updateCurrentDisplayName() {\n        var title = document.title;\n        if( this._stateStackNames && this._stateStackNames.length > 0 ) {\n            let stackNameLen = this._stateStackNames.length;\n            title !== '' ? this._stateStackNames[ stackNameLen - 1 ] = title.substr( title.indexOf( '-' ) + 1 ) : this._stateStackNames[ stackNameLen - 1 ] = this._stateStackNames[ stackNameLen - 1 ]\n                .substr( this._stateStackNames[ stackNameLen - 1 ]\n                    .indexOf( '-' ) + 1 );\n            sessionStorage.setItem( 'STATES_ARRAY', JSON.stringify( this._stateStack ) );\n        }\n        if( this._stateStackNames && this._stateStackNames.length === 0 && !_.isEmpty( title ) ) {\n            this._stateStackNames[ 0 ] = title.substr( title.indexOf( '-' ) + 1 );\n            sessionStorage.setItem( 'STATES_ARRAY', JSON.stringify( this._stateStack ) );\n        }\n        return undefined;\n    }\n\n    ifCurrentDisplayNameToBeUpdated( fromState, toState ) {\n        // following conditions when to update the current display name:\n        // a. When current page is refreshed\n        // b. When this fn is invoked from routeChangeHandler\n        // c. When this fn invoked from locationChangeSuccess however previous state and nextState is same\n        if( fromState.name === '' && fromState.url === '^' || fromState.parent && toState.parent || !toState.parent && toState.name === fromState.name ) {\n            this.updateCurrentDisplayName();\n        }\n    }\n\n    /**\n     * Invoked when the state change was successful from UI router\n     * @param {object} event event body\n     * @param {object} toState state object transit to\n     * @param {object} toParams paramters for toState\n     * @param {object} fromState state object transit from\n     * @param {object} fromParams parameters for fromState\n     */\n    routeStateChangeSuccess( toState, toParams, fromState, fromParams ) {\n        debugService.debug( 'routes', fromState.name, toState.name );\n        if( fromState && fromState.name !== 'checkAuthentication' ) {\n            if( this._popState && this._popState.state.name === toState.name && this._goBackInProgress === true ) {\n                this._popState = null;\n                return;\n                // revisitme- ported as it is during rebase in uirouter react there are no events\n                // This condition needed to restrict to save state on stack once user clicked on back button more than once\n                // and state name is different (Reference defect -LCS-462441)\n                // if( !( event.name === '$locationChangeSuccess' && fromState.name !== toState.name ) ) {\n                //     this._popState = null;\n                // }\n                // return;\n            }\n            // the below check is required in afx-next to restrict locationChangeSuccess code to\n            // invoke the state persisting logic down below during a goBack operation; During a goBack\n            // operation, routeChangeHandler triggers routeStateChangeSuccess to persist the state information;\n            // we do not want the locationChangeSuccess to invoke this fn again in turn saving the goback\n            // state as a new state again in turn causing the goBack command to navigate in circles between 2 locations\n            if( this._goBackInProgress === true && this._popState === null ) {\n                this._goBackInProgress = false;\n                return;\n            }\n\n            if( toState && toState.parent && fromState && fromState.parent && toState.parent === fromState.parent ) {\n                return;\n            }\n\n            let title = _.isEmpty( document.title ) ? localeService.getLoadedTextFromKey( 'UIMessages.noPreviousLocation' ) : document.title;\n            var newState = {\n                state: fromState,\n                params: fromParams,\n                displayName: title\n            };\n\n            if( this._stateStack.length > 0 ) {\n                var lastState = this.peekLastState();\n\n                if( lastState.state.name !== newState.state.name && newState.state.name !== '' ) {\n                    this._stateStack.push( newState );\n                    this._stateStackNames.push( newState.displayName );\n                    logger.trace( '^^^^1 pushing newState ' + newState.state.name );\n                } else if( newState.state.name !== '' && lastState.params.uid !== newState.params.uid &&\n                    ( newState.params.uid !== toParams.uid || newState.state.name !== toState.name ) ) {\n                    this._stateStack.push( newState );\n                    this._stateStackNames.push( newState.displayName );\n                    logger.trace( '^^^^2 pushing newState ' + newState.state.name );\n                }\n            } else if( !newState.state.abstract ) {\n                this._stateStack.push( newState );\n                this._stateStackNames.push( newState.displayName );\n                logger.trace( '^^^^3 pushing newState ' + newState.state.name );\n            }\n            // If persisted states count exceeds allowed count, remove earliest state\n            if( this._stateStack.length > this._persistentStatesCount ) {\n                this._stateStack.shift();\n                this._stateStackNames.shift();\n            }\n\n            sessionStorage.setItem( 'STATES_ARRAY_NAMES', JSON.stringify( this._stateStackNames ) );\n            sessionStorage.setItem( 'STATES_ARRAY', JSON.stringify( this._stateStack ) );\n            this.ifCurrentDisplayNameToBeUpdated( fromState, toState );\n        }\n        // Once location is changed, fix focus navigation starting point ( check solution )\n        //https://sarahmhigley.com/writing/focus-navigation-start-point/#assistive-tech-support\n        let eleToFocus = document.querySelector( '.aw-skip-to-main-container' );\n        if( eleToFocus !== null ) {\n            eleToFocus.focus();\n        }\n\n        appCtxService.registerCtx( 'previousLocationDisplayName', this.getGoBackLocation() );\n    }\n\n    /**\n     * Function to update the state parameter\n     * @param {string} paramName parameter name\n     * @param {string} paramValue parameter value\n     */\n    updateStateParameter( paramName, paramValue ) {\n        this._state.params[ paramName ] = paramValue;\n        this._state.go( '.', this._state.params, {\n            inherit: true\n        } );\n    }\n\n    /**\n     * Function to transition to a new state\n     * @param {string} transitionTo URL that transit to\n     * @param {object} toParams parameter for transitionTo\n     * @param {object} options transition options\n     */\n    go( transitionTo, toParams, options ) {\n        this._state.go( transitionTo, toParams, options );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\uielements\\\\src\\\\js\\\\AwSourceEditorService.js\"; // Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwSourceEditorService\n */\n\nimport _ from 'lodash';\nimport MonacoEditor from 'react-monaco-editor'; // the content of source editor needs to be re initialzed to remove auto highlight\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const srcEditorContentChange = editorRef => {\n  const editormodel = editorRef.getModels()[0];\n  editormodel.setValue(editormodel.getValue());\n};\nexport const awSourceEditorRenderFunction = props => {\n  const {\n    name,\n    config,\n    viewModel\n  } = props;\n  let fileConfig = Object.assign({}, config);\n  let content = _.isObject(props.value) ? { ...props.value\n  } : props.value;\n  let defaultConfig = {\n    language: 'text',\n    options: {\n      readOnly: false,\n      wordWrap: 'off',\n      lineNumbers: 'on',\n      automaticLayout: false,\n      minimap: {},\n      fontFamily: 'monospace'\n    },\n    onChange: (newContents, event) => props.update(newContents),\n    editorDidMount: (editorRef, monaco) => {\n      viewModel.dispatch({\n        path: 'data.monacoEditorInstance',\n        value: monaco.editor\n      });\n    }\n  };\n  let fileTypeLanguageMap = {\n    js: 'javascript',\n    txt: 'text',\n    ts: 'typescript'\n  };\n  fileConfig = _.defaultsDeep(fileConfig, defaultConfig);\n\n  if (config && content && !_.isEmpty(config) && !_.isEmpty(content)) {\n    let fileContent = content.data ? content.data : content;\n    let fileType = content.config && content.config.url ? content.config.url.split('.').pop() : null;\n    fileConfig.language = fileType && fileTypeLanguageMap[fileType.toLowerCase()] !== undefined ? fileTypeLanguageMap[fileType] : fileType || config.language;\n    fileConfig.height = config.height ? config.height + 'px' : 'inherit';\n    fileConfig.width = config.width ? config.width + 'px' : 'inherit';\n    fileConfig.theme = config.theme;\n    fileConfig.value = fileType === 'json' && _.isObject(fileContent) ? JSON.stringify(fileContent, null, 4) : fileContent;\n  }\n\n  return name && /*#__PURE__*/_jsxDEV(MonacoEditor, { ...fileConfig\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 21\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uielements/src/js/AwSourceEditorService.js"],"names":["srcEditorContentChange","editorRef","editormodel","awSourceEditorRenderFunction","props","viewModel","fileConfig","Object","content","value","defaultConfig","language","options","readOnly","wordWrap","lineNumbers","automaticLayout","minimap","fontFamily","onChange","editorDidMount","path","monaco","editor","fileTypeLanguageMap","js","txt","ts","_","config","fileContent","fileType","JSON","name"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwSourceEditorService\n */\nimport _ from 'lodash';\nimport MonacoEditor from 'react-monaco-editor';\n\n// the content of source editor needs to be re initialzed to remove auto highlight\nexport const srcEditorContentChange = ( editorRef ) => {\n    const editormodel = editorRef.getModels()[0];\n    editormodel.setValue( editormodel.getValue() );\n};\n\nexport const awSourceEditorRenderFunction = ( props ) => {\n    const { name, config, viewModel } = props;\n    let fileConfig = Object.assign( {}, config );\n    let content = _.isObject( props.value ) ?  { ...props.value } : props.value;\n    let defaultConfig = {\n        language: 'text',\n        options: {\n            readOnly: false,\n            wordWrap: 'off',\n            lineNumbers: 'on',\n            automaticLayout: false,\n            minimap: {},\n            fontFamily: 'monospace'\n        },\n        onChange: ( newContents, event ) => props.update( newContents ),\n        editorDidMount: ( editorRef, monaco ) => { viewModel.dispatch( { path: 'data.monacoEditorInstance', value: monaco.editor } ); }\n    };\n    let fileTypeLanguageMap = {\n        js: 'javascript',\n        txt: 'text',\n        ts: 'typescript'\n    };\n    fileConfig = _.defaultsDeep( fileConfig, defaultConfig );\n    if( config && content && !_.isEmpty( config ) && !_.isEmpty( content ) ) {\n        let fileContent = content.data ? content.data : content;\n        let fileType = content.config && content.config.url ? content.config.url.split( '.' ).pop() : null;\n        fileConfig.language = fileType && fileTypeLanguageMap[ fileType.toLowerCase() ] !== undefined ? fileTypeLanguageMap[ fileType ] : fileType || config.language;\n        fileConfig.height = config.height ? config.height + 'px' : 'inherit';\n        fileConfig.width = config.width ? config.width + 'px' : 'inherit';\n        fileConfig.theme = config.theme;\n        fileConfig.value = fileType === 'json' && _.isObject( fileContent ) ? JSON.stringify( fileContent, null, 4 ) : fileContent;\n    }\n    return name  && <MonacoEditor { ...fileConfig } ></MonacoEditor>;\n};\n"]},"metadata":{},"sourceType":"module"}
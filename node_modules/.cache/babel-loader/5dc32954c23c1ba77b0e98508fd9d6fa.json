{"ast":null,"code":"// Copyright (c) 2022 Siemens\n\n/**\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/dataManagementService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport cdm from './kernel/clientDataModel';\nimport propPolicySvc from './kernel/propertyPolicyService';\nimport soaSvc from './kernel/soaService';\nimport prefSvc from './preferenceService';\nimport dateTimeSvc from '../dateTimeService';\nimport localeSvc from '../localeService';\nimport _ from 'lodash';\nimport assert from '../assert';\nimport eventBus from '../eventBus'; // Object to track which uids are currently being loaded such that loadObjects is not duplicated for the same uid\n\nlet _uidLoadInProgress = {};\nvar exports = {};\n/**\n * Create objects\n *\n * @param {ObjectArray} input - array of 'createObjects' input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createObjects = function (input) {\n  return soaSvc.post('Core-2008-06-DataManagement', 'createObjects', {\n    input: input\n  });\n};\n/**\n * Create Relation and Submit objects.\n *\n * @param {ObjectArray} inputs - array of create & submit object input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createRelateAndSubmitObjects = function (inputs) {\n  return soaSvc.post('Internal-Core-2012-10-DataManagement', 'createRelateAndSubmitObjects', {\n    inputs: inputs\n  });\n};\n/**\n * Create relations.\n *\n * @param {ObjectArray} inputs - array of create relation input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createRelations = function (inputs) {\n  return soaSvc.post('Core-2006-03-DataManagement', 'createRelations', {\n    input: inputs\n  });\n};\n/**\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getCurrentUserGateway = function () {\n  return soaSvc.post('Internal-AWS2-2012-10-DataManagement', 'getCurrentUserGateway', {});\n};\n/**\n * @param {String} typeName - type name\n * @param {String} propName - property name\n * @param {String} pattern - pattern\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getNextId = function (typeName, propName, pattern) {\n  return exports.getNextIds([{\n    typeName: typeName,\n    propName: propName,\n    pattern: pattern ? pattern : ''\n  }]);\n};\n/**\n * @param {Array} vInfoForNextId - array of type name, property name & pattern objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getNextIds = function (vInfoForNextId) {\n  return soaSvc.post('Core-2008-06-DataManagement', 'getNextIds', {\n    vInfoForNextId: vInfoForNextId\n  });\n};\n/**\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getTCSessionInfo = function (ignoreHost) {\n  return soaSvc.getTCSessionInfo(ignoreHost).then(function (response) {\n    if (response && response.extraInfoOut) {\n      // Capture the data time format from the server\n      var userSession = cdm.getUserSession();\n\n      var locale = _.get(userSession, 'props.fnd0locale.dbValues.0');\n\n      if (locale) {\n        locale = localeSvc.setLocale(locale);\n      }\n\n      if (response.extraInfoOut.DefaultDateFormat) {\n        dateTimeSvc.setSessionDateTimeFormat(response.extraInfoOut.DefaultDateFormat);\n      }\n\n      if (eventBus) {\n        eventBus.publish('sessionInfo.updated', response.extraInfoOut);\n      } // Preferences\n\n\n      var prefNames = [];\n\n      if (response.extraInfoOut.AWC_StartupPreferences) {\n        // The server should tell us what preferences we need to bulk cache upon login. This avoids unnecessary\n        // client-server chats.\n        prefNames = prefNames.concat(response.extraInfoOut.AWC_StartupPreferences.split(','));\n      }\n\n      return prefSvc.getMultiStringValues(prefNames, true).then(function () {\n        return response;\n      });\n    } // This should happen but should do it anyway to ensure serial processing.\n\n\n    return response;\n  });\n};\n/**\n * @param {Object} input - Array e.g. { inputData: [ { clientId: '', parentObj: { uid: 'QteVoUbsqd$DyB', type:\n *            'Awp0TileCollection' }, childrenObj: [ { uid: 'QzaVoUbsqd$DyB', type: 'Awp0Tile' } ], propertyName:\n *            'Awp0GatewayTileRel' } ]}\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let removeChildren = function (input) {\n  return soaSvc.post('Core-2014-10-DataManagement', 'removeChildren', {\n    inputData: input\n  });\n};\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let saveEdit = function (inputs) {\n  return soaSvc.post('Internal-AWS2-2012-10-DataManagement', 'saveEdit', {\n    inputs: inputs\n  });\n};\n/**\n * @param {Array} info - array of set property info objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let setProperties = function (info) {\n  return soaSvc.post('Core-2010-09-DataManagement', 'setProperties', {\n    info: info,\n    options: []\n  });\n};\n/**\n * @param {StringArray} uids - array of model object UIDs to load\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let loadObjects = async function (uids) {\n  var missingUids = [];\n\n  _.forEach(uids, function (uid) {\n    var modelObject = cdm.getObject(uid);\n\n    if (!modelObject || _.isEmpty(modelObject.props)) {\n      missingUids.push(uid);\n    }\n  });\n\n  if (missingUids.length > 0) {\n    const uidsToLoad = missingUids.filter(uid => {\n      if (!_uidLoadInProgress[uid]) {\n        return uid;\n      }\n    });\n    const currentUidsBeingLoadedPromises = missingUids.filter(uid => !uidsToLoad.includes(uid)).map(uid => {\n      if (_uidLoadInProgress[uid]) {\n        return _uidLoadInProgress[uid];\n      }\n    });\n    const newLoadPromises = [];\n\n    if (uidsToLoad.length > 0) {\n      const loadObjectsPromise = soaSvc.post('Core-2007-09-DataManagement', 'loadObjects', {\n        uids: uidsToLoad\n      });\n\n      for (const uid of uidsToLoad) {\n        _uidLoadInProgress[uid] = loadObjectsPromise;\n      }\n\n      newLoadPromises.push(loadObjectsPromise);\n    }\n\n    await Promise.all([...currentUidsBeingLoadedPromises, ...newLoadPromises]);\n\n    for (const uid of uidsToLoad) {\n      delete _uidLoadInProgress[uid];\n    }\n  } // no op\n\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * @param {ModelObject} target -\n *\n * @param {String} pasteProp - Relation type\n *\n * @param {String} typeName -\n *\n * @param {String} itemName -\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createItem = function (target, pasteProp, typeName, itemName) {\n  var propName = 'item_id';\n  var revisionTypeName = typeName + 'Revision';\n  var revisionPropName = 'item_revision_id';\n  var itemRevision = {};\n  return exports.getNextIds([{\n    typeName: typeName,\n    propName: propName\n  }, {\n    typeName: revisionTypeName,\n    propName: revisionPropName\n  }]).then(function (response) {\n    return exports.createRelateAndSubmitObjects([{\n      createData: {\n        boName: typeName,\n        propertyNameValues: {\n          item_id: [response.nextIds[0]],\n          object_name: [itemName]\n        },\n        compoundCreateInput: {\n          revision: [{\n            boName: revisionTypeName,\n            propertyNameValues: {\n              item_revision_id: [response.nextIds[1]]\n            },\n            compoundCreateInput: {}\n          }]\n        }\n      }\n    }]);\n  }).then(function (response) {\n    itemRevision = cdm.getObject(response.output[0].objects[2].uid);\n    return exports.createRelations([{\n      relationType: pasteProp,\n      primaryObject: target,\n      secondaryObject: itemRevision\n    }]);\n  }).then(function () {\n    return itemRevision;\n  });\n};\n/**\n * Cache of promises for getProperties to \"reuse\" if the same request comes in before the first response has\n * completed.\n *\n * @private\n */\n\nvar _getPropertiesPromises = [];\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {StringArray} uids - array of model object UIDs\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getProperties = function (uids, propNames) {\n  var objects = [];\n  uids.sort();\n\n  _.forEach(_.uniq(uids, true), function (uid) {\n    var modelObject = cdm.getObject(uid);\n\n    if (modelObject) {\n      var modelObjAdded = false; // Cached model object\n\n      _.forEach(propNames, function (propName) {\n        if (modelObject.modelType.propertyDescriptorsMap.hasOwnProperty(propName) && (!modelObject.props || !modelObject.props.hasOwnProperty(propName))) {\n          if (!modelObjAdded) {\n            // Valid property for this model type AND property not cached\n            objects.push(modelObject);\n            modelObjAdded = true;\n          }\n        }\n      });\n    }\n  });\n\n  if (objects.length > 0) {\n    propPolicySvc.validatePropertyRegistration(objects, propNames);\n    return exports.getPropertiesUnchecked(objects, propNames);\n  }\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {ObjectArray} objects - array of model objects\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getPropertiesUnchecked = function (objects, propNames) {\n  var input = {\n    objects: objects,\n    attributes: propNames\n  };\n  var promise = null;\n\n  _.forEach(_getPropertiesPromises, function (promiseLp) {\n    if (!promise && _.isEqual(input.attributes, promiseLp.input.attributes)) {\n      if (objects.length === promiseLp.input.objects.length) {\n        promise = promiseLp; // assume a match\n\n        for (var ii = 0; ii < objects.length; ii++) {\n          if (objects[ii].uid !== promiseLp.input.objects[ii].uid) {\n            promise = null; // invalid assumption\n\n            break;\n          }\n        }\n      }\n    }\n  });\n\n  if (!promise) {\n    promise = soaSvc.post('Core-2006-03-DataManagement', 'getProperties', input).then(function (response) {\n      _getPropertiesPromises.splice(_getPropertiesPromises.indexOf(promise), 1);\n\n      return response;\n    });\n\n    _getPropertiesPromises.push(promise);\n\n    promise.input = input;\n  }\n\n  return promise;\n};\n/**\n * Convenience method for 'core' {@linkcode module:soa/dataManagementService.getStyleSheet|getStyleSheet} to handle\n * default values used in that service's request.\n *\n * @param {ModelObject} modelObject - The soa object to get the stylesheet for.\n * @param {String} styleSheetType - (Optional) The type of style sheet to return (Default: 'SUMMARY').\n * @param {Object} clientContext - (Optional) (Default: {'ActiveWorkspace:Location':\n *            'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'})\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getStyleSheet = function (modelObject, styleSheetType, clientContext) {\n  assert(modelObject, 'getStyleSheet: No ModelObject specified');\n  var styleSheetTypeFinal = styleSheetType;\n  var clientContextFinal = clientContext;\n\n  if (!styleSheetTypeFinal) {\n    styleSheetTypeFinal = 'SUMMARY';\n  }\n\n  if (!clientContextFinal) {\n    clientContextFinal = {\n      'ActiveWorkspace:Location': 'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'\n    };\n  }\n\n  return soaSvc.post('Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', {\n    processEntireXRT: false,\n    input: [{\n      businessObject: modelObject,\n      styleSheetType: styleSheetTypeFinal,\n      clientContext: clientContextFinal\n    }]\n  });\n};\n/**\n * Post the input directly to getStyleSheet\n *\n * @param {Integer} input - The json request object. All necessary fields should already be filled\n *\n * @returns {Promise} Resolved when the style sheet information is returned from the SOA service.\n */\n\nexport let getStyleSheetPure = function (input) {\n  return soaSvc.post('Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', input);\n};\n/**\n * This function is used to create input structure for the loadViewModelForEditing SOA call. Consumer need to call\n * this function in loop for each ViewModelObject keeping the same input object.\n *\n * @param {Object} input - Structure containing the viewModelObj and its property names\n * @param {String} uid - ID of the model object that owns the properties\n * @param {StringArray} propertyNames - Props which we need to check the modifiable status\n *\n * @returns {Object} Input structure details.\n */\n\nexport let getLoadViewModelForEditingInput = function (input, uid, propertyNames) {\n  var modelObj = cdm.getObject(uid);\n\n  if (!input) {\n    input = {\n      inputs: []\n    };\n  }\n\n  var objs = [];\n  objs.push(modelObj);\n  input.inputs.push({\n    objs: objs,\n    propertyNames: propertyNames,\n    isPessimisticLock: false\n  });\n  return input;\n};\n/**\n * @param {Object} inputs - payload to the soa call.\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let loadViewModelForEditing2 = function (inputs) {\n  var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy(null, true);\n  return soaSvc.postUnchecked('Internal-AWS2-2017-12-DataManagement', 'loadViewModelForEditing2', {\n    inputs: inputs\n  }, selectedPropertyPolicy);\n};\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let saveViewModelEditAndSubmitWorkflow = function (inputs) {\n  var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy(null, true);\n  return soaSvc.postUnchecked('Internal-AWS2-2018-05-DataManagement', 'saveViewModelEditAndSubmitWorkflow2', {\n    inputs: inputs\n  }, selectedPropertyPolicy);\n};\n/**\n * This function is used to create the input data for saveViewModelEditAndSubmitWorkflow SOA. This SOA requires the\n * view Model properties which are modified and need to update in DB\n *\n * @param {Object} input - Structure containing the viewModelObj\n * @param {Object} viewModelProperty - viewModel prop object whose value has changed and need to commit.\n *\n */\n\nexport let pushViewModelProperty = function (input, viewModelProperty) {\n  if (!input.viewModelProperties) {\n    input.viewModelProperties = [];\n  }\n\n  var dbValues = [];\n  var uiValues = [];\n\n  if (viewModelProperty.isArray) {\n    dbValues = viewModelProperty.dbValue;\n    uiValues = viewModelProperty.newValue;\n  } else {\n    dbValues.push(viewModelProperty.dbValue);\n    uiValues.push(viewModelProperty.newValue);\n  } // Replace all the null values with empty string\n\n\n  for (var i = 0; i < dbValues.length; i++) {\n    if (viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY') {\n      dbValues[i] = dateTimeSvc.formatUTC(dbValues[i]);\n    } else {\n      dbValues[i] = dbValues[i] === null ? '' : String(dbValues[i]);\n    }\n  } // Replace all the null values with empty string\n\n\n  for (i = 0; i < uiValues.length; i++) {\n    if (viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY') {\n      uiValues[i] = dateTimeSvc.formatUTC(uiValues[i]);\n    } else {\n      uiValues[i] = uiValues[i] === null ? '' : String(uiValues[i]);\n    }\n  }\n\n  var vmProp = {\n    propertyName: viewModelProperty.propertyName,\n    dbValues: dbValues,\n    uiValues: uiValues,\n    intermediateObjectUids: viewModelProperty.intermediateObjectUids,\n    srcObjLsd: viewModelProperty.sourceObjectLastSavedDate,\n    isModifiable: viewModelProperty.isPropertyModifiable\n  };\n  input.viewModelProperties.push(vmProp);\n};\n/**\n * This utility function is used create the input pay load for SaveViewModelEditAndSubmitToWorkflowInput SAO.\n *\n * @param {Object} viewModelObject - viewModelObj whose properties has been modified.\n * @returns {Object} structure containing the modified viewModelobject.\n */\n\nexport let getSaveViewModelEditAndSubmitToWorkflowInput = function (viewModelObject) {\n  return {\n    obj: viewModelObject\n  };\n};\nexports = {\n  createObjects,\n  createRelateAndSubmitObjects,\n  createRelations,\n  getCurrentUserGateway,\n  getNextId,\n  getNextIds,\n  getTCSessionInfo,\n  removeChildren,\n  saveEdit,\n  setProperties,\n  loadObjects,\n  createItem,\n  getProperties,\n  getPropertiesUnchecked,\n  getStyleSheet,\n  getStyleSheetPure,\n  getLoadViewModelForEditingInput,\n  loadViewModelForEditing2,\n  saveViewModelEditAndSubmitWorkflow,\n  pushViewModelProperty,\n  getSaveViewModelEditAndSubmitToWorkflowInput\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/dataManagementService.js"],"names":["_uidLoadInProgress","exports","createObjects","input","createRelateAndSubmitObjects","inputs","createRelations","getCurrentUserGateway","soaSvc","getNextId","typeName","propName","pattern","getNextIds","vInfoForNextId","getTCSessionInfo","response","userSession","cdm","locale","_","localeSvc","dateTimeSvc","eventBus","prefNames","removeChildren","inputData","saveEdit","setProperties","info","options","loadObjects","missingUids","modelObject","uidsToLoad","uid","currentUidsBeingLoadedPromises","newLoadPromises","loadObjectsPromise","uids","Promise","AwPromiseService","createItem","revisionTypeName","revisionPropName","itemRevision","createData","boName","propertyNameValues","item_id","object_name","compoundCreateInput","revision","item_revision_id","relationType","primaryObject","secondaryObject","_getPropertiesPromises","getProperties","objects","modelObjAdded","propPolicySvc","getPropertiesUnchecked","attributes","propNames","promise","promiseLp","ii","getStyleSheet","assert","styleSheetTypeFinal","clientContextFinal","processEntireXRT","businessObject","styleSheetType","clientContext","getStyleSheetPure","getLoadViewModelForEditingInput","modelObj","objs","propertyNames","isPessimisticLock","loadViewModelForEditing2","selectedPropertyPolicy","saveViewModelEditAndSubmitWorkflow","pushViewModelProperty","dbValues","uiValues","viewModelProperty","i","String","vmProp","propertyName","intermediateObjectUids","srcObjLsd","isModifiable","isPropertyModifiable","getSaveViewModelEditAndSubmitToWorkflowInput","obj","viewModelObject"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,GAAA,MAAA,0BAAA;AACA,OAAA,aAAA,MAAA,gCAAA;AACA,OAAA,MAAA,MAAA,qBAAA;AACA,OAAA,OAAA,MAAA,qBAAA;AACA,OAAA,WAAA,MAAA,oBAAA;AACA,OAAA,SAAA,MAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,QAAA,MAAA,aAAA,C,CAEA;;AACA,IAAIA,kBAAkB,GAAtB,EAAA;AAEA,IAAIC,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAA,KAAA,EAAkB;EACzC,OAAO,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,eAAA,EAA6D;IAChEC,KAAK,EAAEA;EADyD,CAA7D,CAAP;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,4BAA4B,GAAG,UAAA,MAAA,EAAmB;EACzD,OAAO,MAAM,CAAN,IAAA,CAAA,sCAAA,EAAA,8BAAA,EAAqF;IACxFC,MAAM,EAAEA;EADgF,CAArF,CAAP;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAA,MAAA,EAAmB;EAC5C,OAAO,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,iBAAA,EAA+D;IAClEH,KAAK,EAAEE;EAD2D,CAA/D,CAAP;AADG,CAAA;AAMP;AACA;AACA;AACA;;AACA,OAAO,IAAIE,qBAAqB,GAAG,YAAW;EAC1C,OAAOC,MAAM,CAANA,IAAAA,CAAAA,sCAAAA,EAAAA,uBAAAA,EAAP,EAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,UAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAwC;EAC3D,OAAO,OAAO,CAAP,UAAA,CAAoB,CAAE;IACzBC,QAAQ,EADiB,QAAA;IAEzBC,QAAQ,EAFiB,QAAA;IAGzBC,OAAO,EAAEA,OAAO,GAAA,OAAA,GAAa;EAHJ,CAAF,CAApB,CAAP;AADG,CAAA;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAU,GAAG,UAAA,cAAA,EAA2B;EAC/C,OAAO,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,YAAA,EAA0D;IAC7DC,cAAc,EAAEA;EAD6C,CAA1D,CAAP;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAA,UAAA,EAAuB;EACjD,OAAO,MAAM,CAAN,gBAAA,CAAA,UAAA,EAAA,IAAA,CAA4C,UAAA,QAAA,EAAqB;IACpE,IAAIC,QAAQ,IAAIA,QAAQ,CAAxB,YAAA,EAAwC;MACpC;MACA,IAAIC,WAAW,GAAGC,GAAG,CAArB,cAAkBA,EAAlB;;MACA,IAAIC,MAAM,GAAGC,CAAC,CAADA,GAAAA,CAAAA,WAAAA,EAAb,6BAAaA,CAAb;;MACA,IAAA,MAAA,EAAa;QACTD,MAAM,GAAGE,SAAS,CAATA,SAAAA,CAATF,MAASE,CAATF;MACH;;MAED,IAAIH,QAAQ,CAARA,YAAAA,CAAJ,iBAAA,EAA8C;QAC1CM,WAAW,CAAXA,wBAAAA,CAAsCN,QAAQ,CAARA,YAAAA,CAAtCM,iBAAAA;MACH;;MAED,IAAA,QAAA,EAAe;QACXC,QAAQ,CAARA,OAAAA,CAAAA,qBAAAA,EAAyCP,QAAQ,CAAjDO,YAAAA;MAbgC,CAAA,CAgBpC;;;MACA,IAAIC,SAAS,GAAb,EAAA;;MACA,IAAIR,QAAQ,CAARA,YAAAA,CAAJ,sBAAA,EAAmD;QAC/C;QACA;QACAQ,SAAS,GAAGA,SAAS,CAATA,MAAAA,CAAkBR,QAAQ,CAARA,YAAAA,CAAAA,sBAAAA,CAAAA,KAAAA,CAA9BQ,GAA8BR,CAAlBQ,CAAZA;MACH;;MAED,OAAO,OAAO,CAAP,oBAAA,CAAA,SAAA,EAAA,IAAA,EAAA,IAAA,CAAsD,YAAW;QACpE,OAAA,QAAA;MADJ,CAAO,CAAP;IAzBgE,CAAA,CA6BpE;;;IACA,OAAA,QAAA;EA9BJ,CAAO,CAAP;AADG,CAAA;AAmCP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAA,KAAA,EAAkB;EAC1C,OAAO,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,gBAAA,EAA8D;IACjEC,SAAS,EAAEvB;EADsD,CAA9D,CAAP;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIwB,QAAQ,GAAG,UAAA,MAAA,EAAmB;EACrC,OAAO,MAAM,CAAN,IAAA,CAAA,sCAAA,EAAA,UAAA,EAAiE;IACpEtB,MAAM,EAAEA;EAD4D,CAAjE,CAAP;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIuB,aAAa,GAAG,UAAA,IAAA,EAAiB;EACxC,OAAO,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,eAAA,EAA6D;IAChEC,IAAI,EAD4D,IAAA;IAEhEC,OAAO,EAAE;EAFuD,CAA7D,CAAP;AADG,CAAA;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,gBAAA,IAAA,EAAuB;EAC5C,IAAIC,WAAW,GAAf,EAAA;;EACAZ,CAAC,CAADA,OAAAA,CAAAA,IAAAA,EAAiB,UAAA,GAAA,EAAgB;IAC7B,IAAIa,WAAW,GAAGf,GAAG,CAAHA,SAAAA,CAAlB,GAAkBA,CAAlB;;IACA,IAAI,CAAA,WAAA,IAAgBE,CAAC,CAADA,OAAAA,CAAWa,WAAW,CAA1C,KAAoBb,CAApB,EAAqD;MACjDY,WAAW,CAAXA,IAAAA,CAAAA,GAAAA;IACH;EAJLZ,CAAAA;;EAOA,IAAIY,WAAW,CAAXA,MAAAA,GAAJ,CAAA,EAA6B;IACzB,MAAME,UAAU,GAAG,WAAW,CAAX,MAAA,CAAoBC,GAAG,IAAI;MAC1C,IAAI,CAACnC,kBAAkB,CAAvB,GAAuB,CAAvB,EAAiC;QAC7B,OAAA,GAAA;MACH;IAHL,CAAmB,CAAnB;IAMA,MAAMoC,8BAA8B,GAAG,WAAW,CAAX,MAAA,CAAoBD,GAAG,IAAI,CAACD,UAAU,CAAVA,QAAAA,CAA5B,GAA4BA,CAA5B,EAAA,GAAA,CAA8DC,GAAG,IAAI;MACxG,IAAInC,kBAAkB,CAAtB,GAAsB,CAAtB,EAAgC;QAC5B,OAAOA,kBAAkB,CAAzB,GAAyB,CAAzB;MACH;IAHL,CAAuC,CAAvC;IAMA,MAAMqC,eAAe,GAArB,EAAA;;IAEA,IAAIH,UAAU,CAAVA,MAAAA,GAAJ,CAAA,EAA4B;MACxB,MAAMI,kBAAkB,GAAG,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,aAAA,EAA2D;QAClFC,IAAI,EAAEL;MAD4E,CAA3D,CAA3B;;MAIA,KAAK,MAAL,GAAA,IAAA,UAAA,EAA+B;QAC3BlC,kBAAkB,CAAlBA,GAAkB,CAAlBA,GAAAA,kBAAAA;MACH;;MAEDqC,eAAe,CAAfA,IAAAA,CAAAA,kBAAAA;IACH;;IAED,MAAMG,OAAO,CAAPA,GAAAA,CAAa,CAAE,GAAF,8BAAA,EAAqC,GAAxD,eAAmB,CAAbA,CAAN;;IAEA,KAAK,MAAL,GAAA,IAAA,UAAA,EAA+B;MAC3B,OAAOxC,kBAAkB,CAAzB,GAAyB,CAAzB;IACH;EAxCuC,CAAA,CA2C5C;;;EACA,OAAOyC,gBAAgB,CAAhBA,QAAAA,CAAP,OAAOA,EAAP;AA5CG,CAAA;AA+CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAU,GAAG,UAAA,MAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAkD;EACtE,IAAI/B,QAAQ,GAAZ,SAAA;EACA,IAAIgC,gBAAgB,GAAGjC,QAAQ,GAA/B,UAAA;EACA,IAAIkC,gBAAgB,GAApB,kBAAA;EACA,IAAIC,YAAY,GAAhB,EAAA;EAEA,OAAO,OAAO,CAAP,UAAA,CAAoB,CAAE;IACzBnC,QAAQ,EADiB,QAAA;IAEzBC,QAAQ,EAAEA;EAFe,CAAF,EAGxB;IACCD,QAAQ,EADT,gBAAA;IAECC,QAAQ,EAAEiC;EAFX,CAHwB,CAApB,EAAA,IAAA,CAMK,UAAA,QAAA,EAAqB;IAC7B,OAAO,OAAO,CAAP,4BAAA,CAAsC,CAAE;MAC3CE,UAAU,EAAE;QACRC,MAAM,EADE,QAAA;QAERC,kBAAkB,EAAE;UAChBC,OAAO,EAAE,CAAEjC,QAAQ,CAARA,OAAAA,CADK,CACLA,CAAF,CADO;UAEhBkC,WAAW,EAAE,CAAA,QAAA;QAFG,CAFZ;QAMRC,mBAAmB,EAAE;UACjBC,QAAQ,EAAE,CAAE;YACRL,MAAM,EADE,gBAAA;YAERC,kBAAkB,EAAE;cAChBK,gBAAgB,EAAE,CAAErC,QAAQ,CAARA,OAAAA,CAAF,CAAEA,CAAF;YADF,CAFZ;YAKRmC,mBAAmB,EAAE;UALb,CAAF;QADO;MANb;IAD+B,CAAF,CAAtC,CAAP;EAPG,CAAA,EAAA,IAAA,CAyBG,UAAA,QAAA,EAAqB;IAC3BN,YAAY,GAAG3B,GAAG,CAAHA,SAAAA,CAAeF,QAAQ,CAARA,MAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA,CAAAA,EAA9B6B,GAAe3B,CAAf2B;IACA,OAAO,OAAO,CAAP,eAAA,CAAyB,CAAE;MAC9BS,YAAY,EADkB,SAAA;MAE9BC,aAAa,EAFiB,MAAA;MAG9BC,eAAe,EAAEX;IAHa,CAAF,CAAzB,CAAP;EA3BG,CAAA,EAAA,IAAA,CAgCG,YAAW;IACjB,OAAA,YAAA;EAjCJ,CAAO,CAAP;AANG,CAAA;AA2CP;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIY,sBAAsB,GAA1B,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAA,IAAA,EAAA,SAAA,EAA4B;EACnD,IAAIC,OAAO,GAAX,EAAA;EACApB,IAAI,CAAJA,IAAAA;;EACAnB,CAAC,CAADA,OAAAA,CAAWA,CAAC,CAADA,IAAAA,CAAAA,IAAAA,EAAXA,IAAWA,CAAXA,EAAiC,UAAA,GAAA,EAAgB;IAC7C,IAAIa,WAAW,GAAGf,GAAG,CAAHA,SAAAA,CAAlB,GAAkBA,CAAlB;;IACA,IAAA,WAAA,EAAkB;MACd,IAAI0C,aAAa,GADH,KACd,CADc,CAEd;;MACAxC,CAAC,CAADA,OAAAA,CAAAA,SAAAA,EAAsB,UAAA,QAAA,EAAqB;QACvC,IAAIa,WAAW,CAAXA,SAAAA,CAAAA,sBAAAA,CAAAA,cAAAA,CAAAA,QAAAA,MACE,CAACA,WAAW,CAAZ,KAAA,IAAsB,CAACA,WAAW,CAAXA,KAAAA,CAAAA,cAAAA,CAD7B,QAC6BA,CADzBA,CAAJ,EAC8E;UAC1E,IAAI,CAAJ,aAAA,EAAqB;YACjB;YACA0B,OAAO,CAAPA,IAAAA,CAAAA,WAAAA;YACAC,aAAa,GAAbA,IAAAA;UACH;QACJ;MARLxC,CAAAA;IAUH;EAfLA,CAAAA;;EAkBA,IAAIuC,OAAO,CAAPA,MAAAA,GAAJ,CAAA,EAAyB;IACrBE,aAAa,CAAbA,4BAAAA,CAAAA,OAAAA,EAAAA,SAAAA;IACA,OAAO5D,OAAO,CAAPA,sBAAAA,CAAAA,OAAAA,EAAP,SAAOA,CAAP;EACH;;EAED,OAAOwC,gBAAgB,CAAhBA,QAAAA,CAAP,OAAOA,EAAP;AA1BG,CAAA;AA6BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIqB,sBAAsB,GAAG,UAAA,OAAA,EAAA,SAAA,EAA+B;EAC/D,IAAI3D,KAAK,GAAG;IACRwD,OAAO,EADC,OAAA;IAERI,UAAU,EAAEC;EAFJ,CAAZ;EAKA,IAAIC,OAAO,GAAX,IAAA;;EACA7C,CAAC,CAADA,OAAAA,CAAAA,sBAAAA,EAAmC,UAAA,SAAA,EAAsB;IACrD,IAAI,CAAA,OAAA,IAAYA,CAAC,CAADA,OAAAA,CAAWjB,KAAK,CAAhBiB,UAAAA,EAA6B8C,SAAS,CAATA,KAAAA,CAA7C,UAAgB9C,CAAhB,EAA4E;MACxE,IAAIuC,OAAO,CAAPA,MAAAA,KAAmBO,SAAS,CAATA,KAAAA,CAAAA,OAAAA,CAAvB,MAAA,EAAwD;QACpDD,OAAO,GAD6C,SACpDA,CADoD,CAC/B;;QACrB,KAAK,IAAIE,EAAE,GAAX,CAAA,EAAiBA,EAAE,GAAGR,OAAO,CAA7B,MAAA,EAAsCQ,EAAtC,EAAA,EAA6C;UACzC,IAAIR,OAAO,CAAPA,EAAO,CAAPA,CAAAA,GAAAA,KAAsBO,SAAS,CAATA,KAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAA1B,GAAA,EAA8D;YAC1DD,OAAO,GADmD,IAC1DA,CAD0D,CAC1C;;YAChB;UACH;QACJ;MACJ;IACJ;EAXL7C,CAAAA;;EAcA,IAAI,CAAJ,OAAA,EAAe;IACX6C,OAAO,GAAG,MAAM,CAAN,IAAA,CAAA,6BAAA,EAAA,eAAA,EAAA,KAAA,EAAA,IAAA,CAA2E,UAAA,QAAA,EAAqB;MACtGR,sBAAsB,CAAtBA,MAAAA,CAA+BA,sBAAsB,CAAtBA,OAAAA,CAA/BA,OAA+BA,CAA/BA,EAAAA,CAAAA;;MACA,OAAA,QAAA;IAFJQ,CAAU,CAAVA;;IAIAR,sBAAsB,CAAtBA,IAAAA,CAAAA,OAAAA;;IACAQ,OAAO,CAAPA,KAAAA,GAAAA,KAAAA;EACH;;EACD,OAAA,OAAA;AA7BG,CAAA;AAgCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,aAAa,GAAG,UAAA,WAAA,EAAA,cAAA,EAAA,aAAA,EAAuD;EAC9EC,MAAM,CAAA,WAAA,EAANA,yCAAM,CAANA;EAEA,IAAIC,mBAAmB,GAAvB,cAAA;EACA,IAAIC,kBAAkB,GAAtB,aAAA;;EAEA,IAAI,CAAJ,mBAAA,EAA2B;IACvBD,mBAAmB,GAAnBA,SAAAA;EACH;;EAED,IAAI,CAAJ,kBAAA,EAA0B;IACtBC,kBAAkB,GAAG;MACjB,4BAA4B;IADX,CAArBA;EAGH;;EACD,OAAO,MAAM,CAAN,IAAA,CAAA,sCAAA,EAAA,eAAA,EAAsE;IACzEC,gBAAgB,EADyD,KAAA;IAEzErE,KAAK,EAAE,CAAE;MACLsE,cAAc,EADT,WAAA;MAELC,cAAc,EAFT,mBAAA;MAGLC,aAAa,EAAEJ;IAHV,CAAF;EAFkE,CAAtE,CAAP;AAfG,CAAA;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIK,iBAAiB,GAAG,UAAA,KAAA,EAAkB;EAC7C,OAAOpE,MAAM,CAANA,IAAAA,CAAAA,sCAAAA,EAAAA,eAAAA,EAAP,KAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIqE,+BAA+B,GAAG,UAAA,KAAA,EAAA,GAAA,EAAA,aAAA,EAAsC;EAC/E,IAAIC,QAAQ,GAAG5D,GAAG,CAAHA,SAAAA,CAAf,GAAeA,CAAf;;EACA,IAAI,CAAJ,KAAA,EAAa;IACTf,KAAK,GAAG;MACJE,MAAM,EAAE;IADJ,CAARF;EAGH;;EACD,IAAI4E,IAAI,GAAR,EAAA;EACAA,IAAI,CAAJA,IAAAA,CAAAA,QAAAA;EACA5E,KAAK,CAALA,MAAAA,CAAAA,IAAAA,CAAmB;IACf4E,IAAI,EADW,IAAA;IAEfC,aAAa,EAFE,aAAA;IAGfC,iBAAiB,EAAE;EAHJ,CAAnB9E;EAKA,OAAA,KAAA;AAdG,CAAA;AAiBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI+E,wBAAwB,GAAG,UAAA,MAAA,EAAmB;EACrD,IAAIC,sBAAsB,GAAGtB,aAAa,CAAbA,kBAAAA,CAAAA,IAAAA,EAA7B,IAA6BA,CAA7B;EACA,OAAO,MAAM,CAAN,aAAA,CAAA,sCAAA,EAAA,0BAAA,EAA0F;IAC7FxD,MAAM,EAAEA;EADqF,CAA1F,EAAP,sBAAO,CAAP;AAFG,CAAA;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI+E,kCAAkC,GAAG,UAAA,MAAA,EAAmB;EAC/D,IAAID,sBAAsB,GAAGtB,aAAa,CAAbA,kBAAAA,CAAAA,IAAAA,EAA7B,IAA6BA,CAA7B;EACA,OAAO,MAAM,CAAN,aAAA,CAAA,sCAAA,EAAA,qCAAA,EAAqG;IACxGxD,MAAM,EAAEA;EADgG,CAArG,EAAP,sBAAO,CAAP;AAFG,CAAA;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIgF,qBAAqB,GAAG,UAAA,KAAA,EAAA,iBAAA,EAAqC;EACpE,IAAI,CAAClF,KAAK,CAAV,mBAAA,EAAiC;IAC7BA,KAAK,CAALA,mBAAAA,GAAAA,EAAAA;EACH;;EAED,IAAImF,QAAQ,GAAZ,EAAA;EACA,IAAIC,QAAQ,GAAZ,EAAA;;EACA,IAAIC,iBAAiB,CAArB,OAAA,EAAgC;IAC5BF,QAAQ,GAAGE,iBAAiB,CAA5BF,OAAAA;IACAC,QAAQ,GAAGC,iBAAiB,CAA5BD,QAAAA;EAFJ,CAAA,MAGO;IACHD,QAAQ,CAARA,IAAAA,CAAeE,iBAAiB,CAAhCF,OAAAA;IACAC,QAAQ,CAARA,IAAAA,CAAeC,iBAAiB,CAAhCD,QAAAA;EAZgE,CAAA,CAepE;;;EACA,KAAK,IAAIE,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGH,QAAQ,CAA5B,MAAA,EAAqCG,CAArC,EAAA,EAA2C;IACvC,IAAID,iBAAiB,CAAjBA,IAAAA,KAAAA,MAAAA,IAAqCA,iBAAiB,CAAjBA,IAAAA,KAAzC,WAAA,EAAkF;MAC9EF,QAAQ,CAARA,CAAQ,CAARA,GAAgBhE,WAAW,CAAXA,SAAAA,CAAuBgE,QAAQ,CAA/CA,CAA+C,CAA/BhE,CAAhBgE;IADJ,CAAA,MAEO;MACHA,QAAQ,CAARA,CAAQ,CAARA,GAAgBA,QAAQ,CAARA,CAAQ,CAARA,KAAAA,IAAAA,GAAAA,EAAAA,GAA8BI,MAAM,CAAEJ,QAAQ,CAA9DA,CAA8D,CAAV,CAApDA;IACH;EArB+D,CAAA,CAwBpE;;;EACA,KAAKG,CAAC,GAAN,CAAA,EAAYA,CAAC,GAAGF,QAAQ,CAAxB,MAAA,EAAiCE,CAAjC,EAAA,EAAuC;IACnC,IAAID,iBAAiB,CAAjBA,IAAAA,KAAAA,MAAAA,IAAqCA,iBAAiB,CAAjBA,IAAAA,KAAzC,WAAA,EAAkF;MAC9ED,QAAQ,CAARA,CAAQ,CAARA,GAAgBjE,WAAW,CAAXA,SAAAA,CAAuBiE,QAAQ,CAA/CA,CAA+C,CAA/BjE,CAAhBiE;IADJ,CAAA,MAEO;MACHA,QAAQ,CAARA,CAAQ,CAARA,GAAgBA,QAAQ,CAARA,CAAQ,CAARA,KAAAA,IAAAA,GAAAA,EAAAA,GAA8BG,MAAM,CAAEH,QAAQ,CAA9DA,CAA8D,CAAV,CAApDA;IACH;EACJ;;EAED,IAAII,MAAM,GAAG;IACTC,YAAY,EAAEJ,iBAAiB,CADtB,YAAA;IAETF,QAAQ,EAFC,QAAA;IAGTC,QAAQ,EAHC,QAAA;IAITM,sBAAsB,EAAEL,iBAAiB,CAJhC,sBAAA;IAKTM,SAAS,EAAEN,iBAAiB,CALnB,yBAAA;IAMTO,YAAY,EAAEP,iBAAiB,CAACQ;EANvB,CAAb;EASA7F,KAAK,CAALA,mBAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AA1CG,CAAA;AA6CP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAI8F,4CAA4C,GAAG,UAAA,eAAA,EAA4B;EAClF,OAAO;IACHC,GAAG,EAAEC;EADF,CAAP;AADG,CAAA;AAMPlG,OAAO,GAAG;EAAA,aAAA;EAAA,4BAAA;EAAA,eAAA;EAAA,qBAAA;EAAA,SAAA;EAAA,UAAA;EAAA,gBAAA;EAAA,cAAA;EAAA,QAAA;EAAA,aAAA;EAAA,WAAA;EAAA,UAAA;EAAA,aAAA;EAAA,sBAAA;EAAA,aAAA;EAAA,iBAAA;EAAA,+BAAA;EAAA,wBAAA;EAAA,kCAAA;EAAA,qBAAA;EAqBNgG;AArBM,CAAVhG;AAuBA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2022 Siemens\n\n/**\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/dataManagementService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport cdm from './kernel/clientDataModel';\nimport propPolicySvc from './kernel/propertyPolicyService';\nimport soaSvc from './kernel/soaService';\nimport prefSvc from './preferenceService';\nimport dateTimeSvc from '../dateTimeService';\nimport localeSvc from '../localeService';\nimport _ from 'lodash';\nimport assert from '../assert';\nimport eventBus from '../eventBus';\n\n// Object to track which uids are currently being loaded such that loadObjects is not duplicated for the same uid\nlet _uidLoadInProgress = {};\n\nvar exports = {};\n\n/**\n * Create objects\n *\n * @param {ObjectArray} input - array of 'createObjects' input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createObjects = function( input ) {\n    return soaSvc.post( 'Core-2008-06-DataManagement', 'createObjects', {\n        input: input\n    } );\n};\n\n/**\n * Create Relation and Submit objects.\n *\n * @param {ObjectArray} inputs - array of create & submit object input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createRelateAndSubmitObjects = function( inputs ) {\n    return soaSvc.post( 'Internal-Core-2012-10-DataManagement', 'createRelateAndSubmitObjects', {\n        inputs: inputs\n    } );\n};\n\n/**\n * Create relations.\n *\n * @param {ObjectArray} inputs - array of create relation input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createRelations = function( inputs ) {\n    return soaSvc.post( 'Core-2006-03-DataManagement', 'createRelations', {\n        input: inputs\n    } );\n};\n\n/**\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getCurrentUserGateway = function() {\n    return soaSvc.post( 'Internal-AWS2-2012-10-DataManagement', 'getCurrentUserGateway', {} );\n};\n\n/**\n * @param {String} typeName - type name\n * @param {String} propName - property name\n * @param {String} pattern - pattern\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getNextId = function( typeName, propName, pattern ) {\n    return exports.getNextIds( [ {\n        typeName: typeName,\n        propName: propName,\n        pattern: pattern ? pattern : ''\n    } ] );\n};\n\n/**\n * @param {Array} vInfoForNextId - array of type name, property name & pattern objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getNextIds = function( vInfoForNextId ) {\n    return soaSvc.post( 'Core-2008-06-DataManagement', 'getNextIds', {\n        vInfoForNextId: vInfoForNextId\n    } );\n};\n\n/**\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getTCSessionInfo = function( ignoreHost ) {\n    return soaSvc.getTCSessionInfo( ignoreHost ).then( function( response ) {\n        if( response && response.extraInfoOut ) {\n            // Capture the data time format from the server\n            var userSession = cdm.getUserSession();\n            var locale = _.get( userSession, 'props.fnd0locale.dbValues.0' );\n            if( locale ) {\n                locale = localeSvc.setLocale( locale );\n            }\n\n            if( response.extraInfoOut.DefaultDateFormat ) {\n                dateTimeSvc.setSessionDateTimeFormat( response.extraInfoOut.DefaultDateFormat );\n            }\n\n            if( eventBus ) {\n                eventBus.publish( 'sessionInfo.updated', response.extraInfoOut );\n            }\n\n            // Preferences\n            var prefNames = [];\n            if( response.extraInfoOut.AWC_StartupPreferences ) {\n                // The server should tell us what preferences we need to bulk cache upon login. This avoids unnecessary\n                // client-server chats.\n                prefNames = prefNames.concat( response.extraInfoOut.AWC_StartupPreferences.split( ',' ) );\n            }\n\n            return prefSvc.getMultiStringValues( prefNames, true ).then( function() {\n                return response;\n            } );\n        }\n        // This should happen but should do it anyway to ensure serial processing.\n        return response;\n    } );\n};\n\n/**\n * @param {Object} input - Array e.g. { inputData: [ { clientId: '', parentObj: { uid: 'QteVoUbsqd$DyB', type:\n *            'Awp0TileCollection' }, childrenObj: [ { uid: 'QzaVoUbsqd$DyB', type: 'Awp0Tile' } ], propertyName:\n *            'Awp0GatewayTileRel' } ]}\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let removeChildren = function( input ) {\n    return soaSvc.post( 'Core-2014-10-DataManagement', 'removeChildren', {\n        inputData: input\n    } );\n};\n\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let saveEdit = function( inputs ) {\n    return soaSvc.post( 'Internal-AWS2-2012-10-DataManagement', 'saveEdit', {\n        inputs: inputs\n    } );\n};\n\n/**\n * @param {Array} info - array of set property info objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let setProperties = function( info ) {\n    return soaSvc.post( 'Core-2010-09-DataManagement', 'setProperties', {\n        info: info,\n        options: []\n    } );\n};\n\n/**\n * @param {StringArray} uids - array of model object UIDs to load\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let loadObjects = async function( uids ) {\n    var missingUids = [];\n    _.forEach( uids, function( uid ) {\n        var modelObject = cdm.getObject( uid );\n        if( !modelObject || _.isEmpty( modelObject.props ) ) {\n            missingUids.push( uid );\n        }\n    } );\n\n    if( missingUids.length > 0 ) {\n        const uidsToLoad = missingUids.filter( uid => {\n            if( !_uidLoadInProgress[ uid ] ) {\n                return uid;\n            }\n        } );\n\n        const currentUidsBeingLoadedPromises = missingUids.filter( uid => !uidsToLoad.includes( uid ) ).map( uid => {\n            if( _uidLoadInProgress[ uid ] ) {\n                return _uidLoadInProgress[ uid ];\n            }\n        } );\n\n        const newLoadPromises = [];\n\n        if( uidsToLoad.length > 0 ) {\n            const loadObjectsPromise = soaSvc.post( 'Core-2007-09-DataManagement', 'loadObjects', {\n                uids: uidsToLoad\n            } );\n\n            for( const uid of uidsToLoad ) {\n                _uidLoadInProgress[ uid ] = loadObjectsPromise;\n            }\n\n            newLoadPromises.push( loadObjectsPromise );\n        }\n\n        await Promise.all( [ ...currentUidsBeingLoadedPromises, ...newLoadPromises ] );\n\n        for( const uid of uidsToLoad ) {\n            delete _uidLoadInProgress[ uid ];\n        }\n    }\n\n    // no op\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * @param {ModelObject} target -\n *\n * @param {String} pasteProp - Relation type\n *\n * @param {String} typeName -\n *\n * @param {String} itemName -\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createItem = function( target, pasteProp, typeName, itemName ) {\n    var propName = 'item_id';\n    var revisionTypeName = typeName + 'Revision';\n    var revisionPropName = 'item_revision_id';\n    var itemRevision = {};\n\n    return exports.getNextIds( [ {\n        typeName: typeName,\n        propName: propName\n    }, {\n        typeName: revisionTypeName,\n        propName: revisionPropName\n    } ] ).then( function( response ) {\n        return exports.createRelateAndSubmitObjects( [ {\n            createData: {\n                boName: typeName,\n                propertyNameValues: {\n                    item_id: [ response.nextIds[ 0 ] ],\n                    object_name: [ itemName ]\n                },\n                compoundCreateInput: {\n                    revision: [ {\n                        boName: revisionTypeName,\n                        propertyNameValues: {\n                            item_revision_id: [ response.nextIds[ 1 ] ]\n                        },\n                        compoundCreateInput: {}\n                    } ]\n                }\n            }\n        } ] );\n    } ).then( function( response ) {\n        itemRevision = cdm.getObject( response.output[ 0 ].objects[ 2 ].uid );\n        return exports.createRelations( [ {\n            relationType: pasteProp,\n            primaryObject: target,\n            secondaryObject: itemRevision\n        } ] );\n    } ).then( function() {\n        return itemRevision;\n    } );\n};\n\n/**\n * Cache of promises for getProperties to \"reuse\" if the same request comes in before the first response has\n * completed.\n *\n * @private\n */\nvar _getPropertiesPromises = [];\n\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {StringArray} uids - array of model object UIDs\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getProperties = function( uids, propNames ) {\n    var objects = [];\n    uids.sort();\n    _.forEach( _.uniq( uids, true ), function( uid ) {\n        var modelObject = cdm.getObject( uid );\n        if( modelObject ) {\n            var modelObjAdded = false;\n            // Cached model object\n            _.forEach( propNames, function( propName ) {\n                if( modelObject.modelType.propertyDescriptorsMap.hasOwnProperty( propName ) &&\n                    ( !modelObject.props || !modelObject.props.hasOwnProperty( propName ) ) ) {\n                    if( !modelObjAdded ) {\n                        // Valid property for this model type AND property not cached\n                        objects.push( modelObject );\n                        modelObjAdded = true;\n                    }\n                }\n            } );\n        }\n    } );\n\n    if( objects.length > 0 ) {\n        propPolicySvc.validatePropertyRegistration( objects, propNames );\n        return exports.getPropertiesUnchecked( objects, propNames );\n    }\n\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {ObjectArray} objects - array of model objects\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getPropertiesUnchecked = function( objects, propNames ) {\n    var input = {\n        objects: objects,\n        attributes: propNames\n    };\n\n    var promise = null;\n    _.forEach( _getPropertiesPromises, function( promiseLp ) {\n        if( !promise && _.isEqual( input.attributes, promiseLp.input.attributes ) ) {\n            if( objects.length === promiseLp.input.objects.length ) {\n                promise = promiseLp; // assume a match\n                for( var ii = 0; ii < objects.length; ii++ ) {\n                    if( objects[ ii ].uid !== promiseLp.input.objects[ ii ].uid ) {\n                        promise = null; // invalid assumption\n                        break;\n                    }\n                }\n            }\n        }\n    } );\n\n    if( !promise ) {\n        promise = soaSvc.post( 'Core-2006-03-DataManagement', 'getProperties', input ).then( function( response ) {\n            _getPropertiesPromises.splice( _getPropertiesPromises.indexOf( promise ), 1 );\n            return response;\n        } );\n        _getPropertiesPromises.push( promise );\n        promise.input = input;\n    }\n    return promise;\n};\n\n/**\n * Convenience method for 'core' {@linkcode module:soa/dataManagementService.getStyleSheet|getStyleSheet} to handle\n * default values used in that service's request.\n *\n * @param {ModelObject} modelObject - The soa object to get the stylesheet for.\n * @param {String} styleSheetType - (Optional) The type of style sheet to return (Default: 'SUMMARY').\n * @param {Object} clientContext - (Optional) (Default: {'ActiveWorkspace:Location':\n *            'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'})\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getStyleSheet = function( modelObject, styleSheetType, clientContext ) {\n    assert( modelObject, 'getStyleSheet: No ModelObject specified' );\n\n    var styleSheetTypeFinal = styleSheetType;\n    var clientContextFinal = clientContext;\n\n    if( !styleSheetTypeFinal ) {\n        styleSheetTypeFinal = 'SUMMARY';\n    }\n\n    if( !clientContextFinal ) {\n        clientContextFinal = {\n            'ActiveWorkspace:Location': 'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'\n        };\n    }\n    return soaSvc.post( 'Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', {\n        processEntireXRT: false,\n        input: [ {\n            businessObject: modelObject,\n            styleSheetType: styleSheetTypeFinal,\n            clientContext: clientContextFinal\n        } ]\n    } );\n};\n\n/**\n * Post the input directly to getStyleSheet\n *\n * @param {Integer} input - The json request object. All necessary fields should already be filled\n *\n * @returns {Promise} Resolved when the style sheet information is returned from the SOA service.\n */\nexport let getStyleSheetPure = function( input ) {\n    return soaSvc.post( 'Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', input );\n};\n\n/**\n * This function is used to create input structure for the loadViewModelForEditing SOA call. Consumer need to call\n * this function in loop for each ViewModelObject keeping the same input object.\n *\n * @param {Object} input - Structure containing the viewModelObj and its property names\n * @param {String} uid - ID of the model object that owns the properties\n * @param {StringArray} propertyNames - Props which we need to check the modifiable status\n *\n * @returns {Object} Input structure details.\n */\nexport let getLoadViewModelForEditingInput = function( input, uid, propertyNames ) {\n    var modelObj = cdm.getObject( uid );\n    if( !input ) {\n        input = {\n            inputs: []\n        };\n    }\n    var objs = [];\n    objs.push( modelObj );\n    input.inputs.push( {\n        objs: objs,\n        propertyNames: propertyNames,\n        isPessimisticLock: false\n    } );\n    return input;\n};\n\n/**\n * @param {Object} inputs - payload to the soa call.\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let loadViewModelForEditing2 = function( inputs ) {\n    var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy( null, true );\n    return soaSvc.postUnchecked( 'Internal-AWS2-2017-12-DataManagement', 'loadViewModelForEditing2', {\n        inputs: inputs\n    }, selectedPropertyPolicy );\n};\n\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let saveViewModelEditAndSubmitWorkflow = function( inputs ) {\n    var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy( null, true );\n    return soaSvc.postUnchecked( 'Internal-AWS2-2018-05-DataManagement', 'saveViewModelEditAndSubmitWorkflow2', {\n        inputs: inputs\n    }, selectedPropertyPolicy );\n};\n\n/**\n * This function is used to create the input data for saveViewModelEditAndSubmitWorkflow SOA. This SOA requires the\n * view Model properties which are modified and need to update in DB\n *\n * @param {Object} input - Structure containing the viewModelObj\n * @param {Object} viewModelProperty - viewModel prop object whose value has changed and need to commit.\n *\n */\n\nexport let pushViewModelProperty = function( input, viewModelProperty ) {\n    if( !input.viewModelProperties ) {\n        input.viewModelProperties = [];\n    }\n\n    var dbValues = [];\n    var uiValues = [];\n    if( viewModelProperty.isArray ) {\n        dbValues = viewModelProperty.dbValue;\n        uiValues = viewModelProperty.newValue;\n    } else {\n        dbValues.push( viewModelProperty.dbValue );\n        uiValues.push( viewModelProperty.newValue );\n    }\n\n    // Replace all the null values with empty string\n    for( var i = 0; i < dbValues.length; i++ ) {\n        if( viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY' ) {\n            dbValues[ i ] = dateTimeSvc.formatUTC( dbValues[ i ] );\n        } else {\n            dbValues[ i ] = dbValues[ i ] === null ? '' : String( dbValues[ i ] );\n        }\n    }\n\n    // Replace all the null values with empty string\n    for( i = 0; i < uiValues.length; i++ ) {\n        if( viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY' ) {\n            uiValues[ i ] = dateTimeSvc.formatUTC( uiValues[ i ] );\n        } else {\n            uiValues[ i ] = uiValues[ i ] === null ? '' : String( uiValues[ i ] );\n        }\n    }\n\n    var vmProp = {\n        propertyName: viewModelProperty.propertyName,\n        dbValues: dbValues,\n        uiValues: uiValues,\n        intermediateObjectUids: viewModelProperty.intermediateObjectUids,\n        srcObjLsd: viewModelProperty.sourceObjectLastSavedDate,\n        isModifiable: viewModelProperty.isPropertyModifiable\n    };\n\n    input.viewModelProperties.push( vmProp );\n};\n\n/**\n * This utility function is used create the input pay load for SaveViewModelEditAndSubmitToWorkflowInput SAO.\n *\n * @param {Object} viewModelObject - viewModelObj whose properties has been modified.\n * @returns {Object} structure containing the modified viewModelobject.\n */\n\nexport let getSaveViewModelEditAndSubmitToWorkflowInput = function( viewModelObject ) {\n    return {\n        obj: viewModelObject\n    };\n};\n\nexports = {\n    createObjects,\n    createRelateAndSubmitObjects,\n    createRelations,\n    getCurrentUserGateway,\n    getNextId,\n    getNextIds,\n    getTCSessionInfo,\n    removeChildren,\n    saveEdit,\n    setProperties,\n    loadObjects,\n    createItem,\n    getProperties,\n    getPropertiesUnchecked,\n    getStyleSheet,\n    getStyleSheetPure,\n    getLoadViewModelForEditingInput,\n    loadViewModelForEditing2,\n    saveViewModelEditAndSubmitWorkflow,\n    pushViewModelProperty,\n    getSaveViewModelEditAndSubmitToWorkflowInput\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\commonframe\\\\src\\\\js\\\\autoSaveContextService.js\";\n// Copyright (c) 2020 Siemens\n\n/**\n * @module js/autoSaveContextService\n */\nimport appCtxService from 'js/appCtxService';\nimport editHandlerService from 'js/editHandlerService';\nimport localStorage from 'js/localStorage';\nimport modelPropertyService from 'js/modelPropertyService';\nimport localeService from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\nimport AwColumn from 'viewmodel/AwColumnViewModel';\nimport AwToggleButton from 'viewmodel/AwTogglebuttonViewModel';\nimport { ExtendedTooltip } from 'js/hocCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AUTO_SAVE_CTX_PATH = 'autoSave.dbValue';\nlet autoSaveWorkspaceValue;\nconst AwToggleButtonHOC = ExtendedTooltip(AwToggleButton);\n/**\n * API to update the autoSave mode\n *\n * @param {Boolean} enable - true if autoSave should be enabled\n */\n\n_c = AwToggleButtonHOC;\nexport const setAutoSaveToggle = function (enable) {\n  // Do not update value if workspace override is being used\n  if (autoSaveWorkspaceValue !== undefined) {\n    return;\n  }\n\n  appCtxService.updatePartialCtx(AUTO_SAVE_CTX_PATH, enable);\n};\n/**\n * API to trigger leaveConfirmation, update local storage, and announce changes when the toggle changes\n * @param {Object} prop - the property field\n */\n\nexport const onChangeCallback = function (prop) {\n  return function (event) {\n    if (prop.onChange) {\n      prop.onChange(event);\n    } // Revert toggle value until leave confirmation is finished\n\n\n    const currentToggleValue = appCtxService.getCtx(AUTO_SAVE_CTX_PATH);\n    prop.update(!currentToggleValue);\n    editHandlerService.leaveConfirmation().then(() => {\n      // Apply new toggle value\n      prop.update(currentToggleValue); // setAutoSaveToggle( currentToggleValue );\n      // Update local storage so user value can be persisted\n\n      localStorage.publish('autosave', currentToggleValue); // Publish event announcing the new value\n\n      eventBus.publish('autoSaveToggleChanged', currentToggleValue);\n    });\n  };\n};\n/**\n * API to handler workpace updates in ctx. When workspace is updated this api\n * will check for an autosave override. If the override is given the auto save mode will\n * be updated and the auto save toggle will be hidden in the UI.\n */\n\nconst handleWorkspaceAutoSaveSetting = function () {\n  // Overwrite overwrite and hide toggle if workspace override exists\n  eventBus.subscribe('appCtx.update', function (event) {\n    if (event.name === 'workspace') {\n      autoSaveWorkspaceValue = _.get(event.value, 'settings.autoSave');\n\n      if (autoSaveWorkspaceValue !== undefined) {\n        setAutoSaveToggle(autoSaveWorkspaceValue); // Hide autosave toggle if workspace override is in use\n\n        appCtxService.updateCtx('showAutoSaveToggle', false);\n      }\n    }\n  });\n};\n/**\n * Sets up autosave in appCtx. Priority is workspace override followed by local storage.\n */\n\n\nexport const initializeAutoSaveContext = async function () {\n  // The autoSave context initial value will be true unless local storage or workspace override exists\n  let initialAutoSaveValue = true;\n  appCtxService.registerCtx('showAutoSaveToggle', true); // Apply value from local storage if it exists\n\n  const autoSaveLocalStorageValue = localStorage.get('autosave');\n\n  if (autoSaveLocalStorageValue === 'true' || autoSaveLocalStorageValue === 'false') {\n    initialAutoSaveValue = autoSaveLocalStorageValue === 'true';\n  } // Aply workspace override if it exists\n\n\n  handleWorkspaceAutoSaveSetting(); // Apply initial value to ctx\n\n  const displayName = await localeService.getLocalizedTextFromKey('BaseMessages.AUTO_SAVE_TITLE', true);\n  appCtxService.registerCtx('autoSave', modelPropertyService.createViewModelProperty({\n    displayName: displayName,\n    type: 'BOOLEAN',\n    dbValue: initialAutoSaveValue\n  }));\n};\nexport const autoSaveContextRenderFunction = _ref => {\n  let {\n    actions,\n    viewModel,\n    fields\n  } = _ref;\n  const {\n    data\n  } = viewModel;\n\n  if (fields.autoSave && fields.autoSave.fielddata) {\n    fields.autoSave.fielddata.labelPlacement = 'start';\n  }\n\n  return /*#__PURE__*/_jsxDEV(AwColumn, {\n    children: /*#__PURE__*/_jsxDEV(AwToggleButtonHOC, { ...fields.autoSave,\n      onChange: onChangeCallback(fields.autoSave),\n      extendedTooltipOptions: \"{alignment : 'top'}\",\n      extendedTooltipContext: data.tooltip,\n      extendedTooltip: \"ExtendedTooltipDefault\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\nexport default {\n  initializeAutoSaveContext,\n  setAutoSaveToggle,\n  onChangeCallback,\n  autoSaveContextRenderFunction\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AwToggleButtonHOC\");","map":{"version":3,"names":["appCtxService","editHandlerService","localStorage","modelPropertyService","localeService","eventBus","_","AwColumn","AwToggleButton","ExtendedTooltip","AUTO_SAVE_CTX_PATH","autoSaveWorkspaceValue","AwToggleButtonHOC","setAutoSaveToggle","enable","undefined","updatePartialCtx","onChangeCallback","prop","event","onChange","currentToggleValue","getCtx","update","leaveConfirmation","then","publish","handleWorkspaceAutoSaveSetting","subscribe","name","get","value","updateCtx","initializeAutoSaveContext","initialAutoSaveValue","registerCtx","autoSaveLocalStorageValue","displayName","getLocalizedTextFromKey","createViewModelProperty","type","dbValue","autoSaveContextRenderFunction","actions","viewModel","fields","data","autoSave","fielddata","labelPlacement","tooltip"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/commonframe/src/js/autoSaveContextService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/autoSaveContextService\n */\nimport appCtxService from 'js/appCtxService';\nimport editHandlerService from 'js/editHandlerService';\nimport localStorage from 'js/localStorage';\nimport modelPropertyService from 'js/modelPropertyService';\nimport localeService from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\n\nimport AwColumn from 'viewmodel/AwColumnViewModel';\nimport AwToggleButton from 'viewmodel/AwTogglebuttonViewModel';\nimport { ExtendedTooltip } from 'js/hocCollection';\nconst AUTO_SAVE_CTX_PATH = 'autoSave.dbValue';\nlet autoSaveWorkspaceValue;\n\nconst AwToggleButtonHOC = ExtendedTooltip( AwToggleButton );\n/**\n * API to update the autoSave mode\n *\n * @param {Boolean} enable - true if autoSave should be enabled\n */\nexport const setAutoSaveToggle = function( enable ) {\n    // Do not update value if workspace override is being used\n    if( autoSaveWorkspaceValue !== undefined ) {\n        return;\n    }\n    appCtxService.updatePartialCtx( AUTO_SAVE_CTX_PATH, enable );\n};\n\n/**\n * API to trigger leaveConfirmation, update local storage, and announce changes when the toggle changes\n * @param {Object} prop - the property field\n */\nexport const onChangeCallback = function( prop ) {\n    return function( event ) {\n        if( prop.onChange ) {\n            prop.onChange( event );\n        }\n\n        // Revert toggle value until leave confirmation is finished\n        const currentToggleValue = appCtxService.getCtx( AUTO_SAVE_CTX_PATH );\n        prop.update( !currentToggleValue );\n        editHandlerService.leaveConfirmation().then( () => {\n            // Apply new toggle value\n            prop.update( currentToggleValue );\n            // setAutoSaveToggle( currentToggleValue );\n            // Update local storage so user value can be persisted\n            localStorage.publish( 'autosave', currentToggleValue );\n            // Publish event announcing the new value\n            eventBus.publish( 'autoSaveToggleChanged', currentToggleValue );\n        } );\n    };\n};\n\n/**\n * API to handler workpace updates in ctx. When workspace is updated this api\n * will check for an autosave override. If the override is given the auto save mode will\n * be updated and the auto save toggle will be hidden in the UI.\n */\nconst handleWorkspaceAutoSaveSetting = function() {\n    // Overwrite overwrite and hide toggle if workspace override exists\n    eventBus.subscribe( 'appCtx.update', function( event ) {\n        if( event.name === 'workspace' ) {\n            autoSaveWorkspaceValue = _.get( event.value, 'settings.autoSave' );\n            if( autoSaveWorkspaceValue !== undefined ) {\n                setAutoSaveToggle( autoSaveWorkspaceValue );\n                // Hide autosave toggle if workspace override is in use\n                appCtxService.updateCtx( 'showAutoSaveToggle', false );\n            }\n        }\n    } );\n};\n\n/**\n * Sets up autosave in appCtx. Priority is workspace override followed by local storage.\n */\nexport const initializeAutoSaveContext = async function() {\n    // The autoSave context initial value will be true unless local storage or workspace override exists\n    let initialAutoSaveValue = true;\n    appCtxService.registerCtx( 'showAutoSaveToggle', true );\n\n    // Apply value from local storage if it exists\n    const autoSaveLocalStorageValue = localStorage.get( 'autosave' );\n    if( autoSaveLocalStorageValue === 'true' || autoSaveLocalStorageValue === 'false' ) {\n        initialAutoSaveValue = autoSaveLocalStorageValue === 'true';\n    }\n\n    // Aply workspace override if it exists\n    handleWorkspaceAutoSaveSetting();\n\n    // Apply initial value to ctx\n    const displayName = await localeService.getLocalizedTextFromKey( 'BaseMessages.AUTO_SAVE_TITLE', true );\n    appCtxService.registerCtx( 'autoSave', modelPropertyService.createViewModelProperty( {\n        displayName: displayName,\n        type: 'BOOLEAN',\n        dbValue: initialAutoSaveValue\n    } ) );\n};\n\nexport const autoSaveContextRenderFunction = ( { actions, viewModel, fields } ) => {\n    const { data } = viewModel;\n\n    if( fields.autoSave && fields.autoSave.fielddata ) {\n        fields.autoSave.fielddata.labelPlacement = 'start';\n    }\n\n    return (\n        <AwColumn>\n            <AwToggleButtonHOC {...fields.autoSave} onChange={onChangeCallback( fields.autoSave )}\n                extendedTooltipOptions=\"{alignment : 'top'}\"\n                extendedTooltipContext={data.tooltip}\n                extendedTooltip='ExtendedTooltipDefault'>\n            </AwToggleButtonHOC>\n        </AwColumn>\n    );\n};\n\nexport default {\n    initializeAutoSaveContext,\n    setAutoSaveToggle,\n    onChangeCallback,\n    autoSaveContextRenderFunction\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
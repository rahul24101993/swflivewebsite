{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* global San */\n\n/**\n * This is the analytics service. It manages enablement & logging of messages to a backend analytics logging server.\n *\n * For more information about Siemens Analytics:\n * <ul>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:user_information</li>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:devguide:javascript_client</li>\n * </ul>\n *\n * @module js/splmAnalyticsService\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport eventBus from 'js/eventBus';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awConfiguration from 'js/awConfiguration';\nimport AwStateService from 'js/awStateService';\n/**\n * This flag indicates if the user was authenticated in this page instead of re-using an authenication from a\n * previous page load.\n *\n * @type {boolean}\n * @private\n */\n\nvar _authenticated = false;\n/**\n * This array holds a list of event objects to be logged into the SAN server.\n *\n * @type {Array}\n * @private\n */\n\nvar _sanLogEventList = [];\n/**\n * Id of the user logged in to the current session.\n *\n * @type {string}\n * @private\n */\n\nvar _userId = '';\n/**\n * Vendor Id from the license.\n *\n * @type {string}\n * @private\n */\n\nvar _vendorId = '';\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type {boolean}\n * @private\n */\n\nvar _enabled = false;\n/**\n * The license level of the currently logged in user\n *\n * @type {string}\n * @private\n */\n\nvar _licenseLevel;\n\nvar _autoTestMode = false;\nvar trace = new Debug('splmAnalyticsService');\nvar exports = {};\nvar _themeWhiteList = [];\nvar _commandsWhitelist = [];\nvar _pageWhitelist = [];\n\nvar _useInternalServer;\n\nvar _isIdle = false;\nvar MAX_PARTIAL_ERROR_COUNT = 10;\n/**\n * @ignore\n */\n\nexport let setAutoTestMode = function () {\n  _autoTestMode = true;\n};\n/**\n * This is a test support method to reset the service to default values. It should not be used outside of unit\n * testing.\n * @ignore\n */\n\nexport let reset = function () {\n  _authenticated = false;\n  _enabled = false;\n};\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\n\nexport let authenticationSuccessful = function () {\n  _authenticated = true;\n};\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n */\n\nexport let setPreInitData = function (preInitData) {\n  _userId = preInitData.user_id;\n  _vendorId = preInitData.vendor_id;\n\n  if (preInitData.user_license_level) {\n    _licenseLevel = preInitData.user_license_level;\n  }\n};\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\n\nexport let enable = function (useInternalServer, repo) {\n  if (_autoTestMode) {\n    _enabled = false;\n    return undefined;\n  }\n\n  _useInternalServer = useInternalServer; // load Siemens Analytics (San)\n\n  /** revisitme Charu\n   * Added lib/piwik/analytics under src to resolve the path\n   */\n\n  return AwPromiseService.instance(function (resolve) {\n    import('../lib/piwik/analytics').then(function () {\n      if (_authenticated) {\n        var solution;\n        AwPromiseService.instance.all([cfgSvc.getCfg('OOTB_Verification').then(function (OOTB_Verification) {\n          _pageWhitelist = OOTB_Verification.locations;\n          _commandsWhitelist = OOTB_Verification.commands;\n          _themeWhiteList = OOTB_Verification.themes;\n        }), cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n          solution = solutionDef;\n        })]).then(function () {\n          cfgSvc.getCfg('versionConstants').then(function (versionConstants) {\n            // initialize San with solution id & client version\n            // - passing undefined if not using internal server based upon API contract from San\n            // The user id and the customer/vendor id has to be set before the San layer is initialized.\n            _initializeSan(useInternalServer, repo, solution, versionConstants);\n\n            _enabled = true;\n            localStorage.setItem('AW_SAN_OPTOUT', 'false');\n            localStorage.setItem('AW_SAN_DO_DISABLE', 'false'); // If Analytics was previously disabled, enabled it now.\n\n            San.disable(false); // Subscribe to other events for logging.\n\n            _subscribeForEvents('selectFilter');\n\n            _idleSetup();\n\n            eventBus.subscribe('idle', _getResolutionZoomInfo); // Log the SOA errors during Idle time only.\n            // This can be done only after the _idleSetup() call.\n\n            _subscribeForErrors();\n\n            eventBus.subscribe('idle', _logEventDataAtIdle);\n            resolve();\n          });\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\n\nexport let disable = function (useInternalServer, encVendId, repo) {\n  _enabled = false;\n\n  if (localStorage.getItem('AW_SAN_OPTOUT') === 'true') {\n    // If we know that the user opted out and we have already processed it.\n    // Nothing more to do.\n    return;\n  }\n  /** revisitme Charu\n   * Added lib/piwik/analytics under src to resolve the path\n   */\n\n\n  import('../lib/piwik/analytics').then(function () {\n    if (_authenticated) {\n      var solution;\n      cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n        solution = solutionDef;\n        return cfgSvc.getCfg('versionConstants');\n      }).then(function (versionConstants) {\n        // Initialize San with solution id & client version\n        _initializeSan(useInternalServer, repo, solution, versionConstants); // If Analytics was previously enabled, we will log one \"participating=false\" event.\n        // San.logEvent( \"participating=false\") call is not working if\n        // San.disable(true) is called right after the San.logEvent().\n        // So, we call San.disable(true), during the subsequent login.\n\n\n        var doDisable = localStorage.getItem('AW_SAN_DO_DISABLE');\n\n        if (doDisable === null || doDisable === 'false') {\n          var participatingProp = {\n            Participating: 'false'\n          };\n\n          if (encVendId) {\n            participatingProp.Site = encVendId;\n          }\n\n          _enabled = true;\n          San.disable(false);\n          exports.logEvent(solution.solutionName, participatingProp);\n          exports.logProductInfo('Participating', 'Opt-Out');\n          _enabled = false;\n          localStorage.setItem('AW_SAN_DO_DISABLE', 'true'); // San.disable( true );\n          // Calling San.disable(true) here prevents the above logEvent() call from going through.\n        } else if (doDisable === 'true') {\n          //\n          _enabled = false;\n          San.disable(true);\n          localStorage.setItem('AW_SAN_OPTOUT', 'true');\n          localStorage.setItem('AW_SAN_DO_DISABLE', 'false');\n        }\n      });\n    }\n  });\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logEvent = function (name, property) {\n  if (_enabled) {\n    var eventObject = _.isPlainObject(property) ? JSON.stringify(property) : property;\n    San.logEvent(name, eventObject);\n    trace('LogEvent', name, property);\n  }\n};\n/**\n * Log Page Load Events.\n *\n * @ignore\n */\n\nexport let logPageViewEvent = function () {\n  AwStateService.instance.transitionHooks.onSuccess({}, function (transition) {\n    if (_enabled) {\n      var toState = transition.to();\n      var targetPageName;\n      targetPageName = toState.name.substr(toState.name.lastIndexOf('_') + 1);\n      San.logPageView(targetPageName);\n      trace('Page View', targetPageName);\n    }\n  });\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logProductInfo = function (name, property) {\n  if (_enabled) {\n    var productObject = _.isPlainObject(property) ? JSON.stringify(property) : property;\n    San.addProductInfo(name, productObject);\n    trace('LogProductInfo', name, property);\n  }\n};\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logCommands = function (data) {\n  if (_enabled) {\n    cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n      var solutionName = solutionDef.solutionName.concat(' ').concat('Commands'); // Convert the \"san\" prefixed names to human readable names.\n\n      if (_.isPlainObject(data) && data.hasOwnProperty('sanCommandId')) {\n        var readableKeyData = {};\n\n        _.forEach(data, function (value, key) {\n          switch (key) {\n            case 'sanCommandId':\n              readableKeyData['Command Id'] = exports.publishableValue(value, 'COMMAND');\n              break;\n\n            case 'sanCommandTitle':\n              if (exports.publishableValue(data.sanCommandId, 'COMMAND') === data.sanCommandId) {\n                readableKeyData['Command Title'] = value;\n              } else {\n                readableKeyData['Command Title'] = exports.publishableValue(data.sanCommandId, 'COMMAND');\n              }\n\n              break;\n\n            case 'sanViewMode':\n              readableKeyData['View Mode'] = value;\n              break;\n\n            case 'sanPrimaryPercentage':\n              readableKeyData['Primary Percentage'] = value;\n              break;\n\n            case 'sanTileAction':\n              readableKeyData['Tile Action'] = value;\n              break;\n\n            case 'sanCmdLocation':\n              readableKeyData['Command Location'] = value;\n              break;\n\n            case 'sanPixelSize':\n              readableKeyData['Pixel Size'] = value;\n              break;\n\n            case 'sanWidth':\n              readableKeyData.width = value;\n              break;\n\n            case 'sanHeight':\n              readableKeyData.height = value;\n              break;\n\n            case 'sanCommandData':\n              readableKeyData.cmdData = value;\n              break;\n\n            default:\n              readableKeyData[key] = value;\n          }\n        });\n      }\n\n      if (_licenseLevel && readableKeyData) {\n        readableKeyData['User License Level'] = _licenseLevel;\n      } // Now, log the data.\n\n\n      var keyData = _.isPlainObject(readableKeyData) ? JSON.stringify(readableKeyData) : readableKeyData;\n      San.logEvent(solutionName, keyData);\n      trace(solutionName, readableKeyData);\n    });\n  }\n};\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\n\nexport let publishableValue = function (artifactName, artifactType) {\n  if (_useInternalServer) {\n    return artifactName;\n  }\n\n  if (artifactType.toUpperCase() === 'THEME') {\n    if (_themeWhiteList && _themeWhiteList.length > 0) {\n      if (_themeWhiteList.indexOf(artifactName) < 0) {\n        return 'Customer';\n      }\n    } else {\n      return 'Unknown';\n    }\n  } else if (artifactType.toUpperCase() === 'COMMAND') {\n    if (artifactName === 'Tile' || artifactName.startsWith('action_')) {\n      return artifactName;\n    }\n\n    if (_commandsWhitelist && _commandsWhitelist.length > 0) {\n      if (_commandsWhitelist.indexOf(artifactName) < 0) {\n        return 'Customer';\n      }\n    } else {\n      return 'Unknown';\n    }\n  } else if (artifactType.toUpperCase() === 'PAGE') {\n    if (_pageWhitelist && _pageWhitelist.length > 0) {\n      if (_pageWhitelist.indexOf(artifactName) < 0) {\n        return 'Customer';\n      }\n    } else {\n      return 'Unknown';\n    }\n  }\n\n  return artifactName;\n};\n/**\n * This method logs all the data stored by _sanLogEventList in FIFO during Idle time.\n *\n */\n\nfunction _logEventDataAtIdle() {\n  if (_enabled && _isIdle) {\n    while (_sanLogEventList.length > 0) {\n      var logEventData = _sanLogEventList.shift();\n\n      San.logEvent(logEventData.solutionName, logEventData.jsonData);\n      trace('Idle', logEventData.solutionName, logEventData.jsonData);\n    }\n  }\n}\n/**\n * This method should be used by the client to log Errors to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - Partial Error data from a SOA response.\n */\n\n\nfunction _logErrors(data) {\n  setTimeout(function () {\n    if (_enabled) {\n      var soaPartialError = data.sanPartialErrors;\n      var serviceName = 'unknown';\n      var operationName = 'unknown'; // teamcenter.com, awp0, ics1 are internal SOAs that we want to report.\n      // Customer SOAs use IDs with numerals > 3 - for these we are not reporting the names.\n\n      if (/teamcenter.com/i.test(data.sanQName)) {\n        serviceName = data.sanServiceName;\n        operationName = data.sanOperationName;\n      } else {\n        // Get the \"awp0\" from \"http://awp0.com/Schemas/Internal/AWS2/2016-03/...\"\n        // If that has a number > 3, it is a customer SOA.\n        var templatePrefix = /:\\/\\/(.*)\\..*\\//i.exec(data.sanQName);\n\n        if (templatePrefix.length > 1 && /[0123]/.test(templatePrefix[1])) {\n          serviceName = data.sanServiceName;\n          operationName = data.sanOperationName;\n        } else {\n          serviceName = 'Customer';\n          operationName = 'Customer';\n        }\n      }\n\n      cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n        var solutionName = solutionDef.solutionName.concat(' ').concat('Errors');\n        var partial_error_count = 0;\n        soaPartialError.forEach(function (error, errIdx) {\n          if (partial_error_count > MAX_PARTIAL_ERROR_COUNT) {\n            return;\n          }\n\n          error.errorValues.forEach(function (errorValue, evIdx) {\n            // Log only error level 3 and above.\n            // Error levels below 3 are info/warning categories.\n            if (errorValue.level < 3) {\n              return;\n            }\n\n            var errorData = {}; // Report error Code and Level as string values, instead of int.\n            // Analytics site to generate reports such as \"sum\", \"average\", etc. for int.\n            // Sending it as string ensures that we can count the number of occurrences of a particular error code, etc.\n\n            errorData.Code = String(errorValue.code);\n            errorData.Level = String(errorValue.level);\n            errorData['Stack Index'] = evIdx;\n            errorData['Error Set'] = errIdx;\n            errorData['Service Name'] = serviceName;\n            errorData['Operation Name'] = operationName;\n            errorData['Log Correlation ID'] = data.sanLogCorrelationID;\n            var LogEventData = {};\n            LogEventData.solutionName = solutionName;\n            LogEventData.jsonData = JSON.stringify(errorData);\n\n            _sanLogEventList.push(LogEventData);\n          });\n          partial_error_count++;\n        });\n      });\n    }\n  }, 0, data);\n  return;\n}\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n */\n\n\nfunction _subscribeForErrors() {\n  // Log the Search Filter events in the \"left side\" Navigation panel.\n  eventBus.subscribeOnChannel({\n    channel: 'SAN_Events',\n    topic: 'aw-command-logErrros',\n    callback: _logErrors\n  });\n}\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n * @param {String} eventName - name of an event to subscribe to.\n */\n\n\nfunction _subscribeForEvents(eventName) {\n  // Log the Search Filter events in the \"left side\" Navigation panel.\n  eventBus.subscribe(eventName, function (data) {\n    var property = {};\n\n    if (data.source && data.categoryName) {\n      property['Command Id'] = data.filterType;\n      property['Command Location'] = data.source; // If the user enables the filter in the filter panel,\n      // the \"filterSelected\" field is coming in as \"false\"\n\n      if (data.hasOwnProperty('filterSelected')) {\n        if (data.filterSelected === true) {\n          property['Command Location'] = data.source.concat(' OFF');\n        } else {\n          property['Command Location'] = data.source.concat(' ON');\n        }\n      }\n    }\n\n    if (!_.isEmpty(property)) {\n      exports.logCommands(property);\n    }\n  });\n}\n/**\n * Records resolution and zoom information and logs it to Siemens analytics\n *\n */\n\n\nfunction _getResolutionZoomInfo() {\n  var resolutionZoomData = JSON.parse(localStorage.getItem('sanResolutionZoom'));\n  var new_resolutionZoomData = {\n    sanCommandId: 'ResolutionZoomData',\n    sanCommandTitle: 'Resolution / Zoom Info',\n    width: parseInt(window.innerWidth),\n    height: parseInt(window.innerHeight),\n    zoom: Math.round(window.devicePixelRatio * 100)\n  }; // if we have a resolution from last time...\n\n  if (resolutionZoomData) {\n    // if the resolution has changed since the last time we reported it...\n    if (!(resolutionZoomData.width === new_resolutionZoomData.width && resolutionZoomData.height === new_resolutionZoomData.height && resolutionZoomData.zoom === new_resolutionZoomData.zoom)) {\n      localStorage.setItem('sanResolutionZoom', JSON.stringify(new_resolutionZoomData));\n      exports.logCommands(new_resolutionZoomData);\n    }\n  } else {\n    // this is the first time reporting this info, store it in localStorage and publish\n    localStorage.setItem('sanResolutionZoom', JSON.stringify(new_resolutionZoomData));\n    exports.logCommands(new_resolutionZoomData);\n  }\n}\n/**\n * This waits for either a \"progress.start\" or \"progress.end\" event to come in and once they do, it starts up an idle event publisher.\n */\n\n\nfunction _idleSetup() {\n  /**\n   * @param {String|null} endPoint - optional endPoint of the progress event\n   */\n  function processEvent(endPoint) {\n    if (!/\\/getUnreadMessages$/.test(endPoint)) {\n      _isIdle = false;\n      eventBus.unsubscribe(progressStartListener);\n      eventBus.unsubscribe(progressEndListener);\n\n      _startupIdleEventPublisher();\n    }\n  }\n\n  var progressStartListener = eventBus.subscribe('progress.start', processEvent);\n  var progressEndListener = eventBus.subscribe('progress.end', processEvent);\n}\n/**\n * Sets up an Idle event publisher. This publisher uses a burndown timer which checks how long it has been since a \"progress.end\" or \"progress.start\"\n * event has come in. If one of those events come in, the burndown timer is restarted. Once the burndown exceeds its timer it will fire a single \"idle\"\n * event and then resume listening for a \"progress.end\"/\"progress.start\" event.\n */\n\n\nfunction _startupIdleEventPublisher() {\n  var idleBurndown;\n  /**\n   */\n\n  function processEvent() {\n    _isIdle = false;\n    clearTimeout(idleBurndown);\n    idleBurndown = _setupBurndownTimer(progressStartListener, progressEndListener);\n  }\n\n  var progressStartListener = eventBus.subscribe('progress.start', processEvent);\n  var progressEndListener = eventBus.subscribe('progress.end', processEvent);\n  idleBurndown = _setupBurndownTimer(progressStartListener, progressEndListener);\n}\n/**\n * Creates the burndown timer\n *\n * @param {Object} progressStartListener - eventBus subscription handle\n * @param {Object} progressEndListener - eventBus subscription handle\n * @return {Number} A Number, representing the ID value of the timer that is set. Use this value with the clearTimeout() method to cancel the timer.\n */\n\n\nfunction _setupBurndownTimer(progressStartListener, progressEndListener) {\n  var idle_cutoff_seconds = 30;\n  return setTimeout(function () {\n    eventBus.publish('idle', {});\n\n    _idleSetup();\n\n    eventBus.unsubscribe(progressStartListener);\n    eventBus.unsubscribe(progressEndListener);\n  }, idle_cutoff_seconds * 1000);\n}\n/**\n * Initialize the SAN SDK\n *\n * @param {Boolean} useInternalServer - boolean indicating if the data should go to the internal site or external site\n * @param {String} repo - optional parameter which can be used to overwrite the predefined repo, used for redirecting to TcX repo\n * @param {Object} solution - solution object used to define the application name\n * @param {Object} versionConstants - object used to define the application version\n */\n\n\nfunction _initializeSan(useInternalServer, repo, solution, versionConstants) {\n  San.setUserIdentifier(_userId);\n  San.setCustomerIdentifier(_vendorId);\n  var solutionId = repo ? repo : solution.solutionId;\n  var fullVersion = versionConstants.name + '@' + versionConstants.version + ' (' + versionConstants.description + ')'; // pull language from awSession in localStorage and convert to the object that SAN is expecting.\n\n  var applicationLanguage = '';\n  var sanApplicationLanguage = '';\n\n  try {\n    applicationLanguage = JSON.parse(localStorage.getItem('awSession:/')).locale;\n  } catch (error) {\n    try {\n      applicationLanguage = localStorage.getItem('locale:/');\n    } catch (error) {\n      applicationLanguage = '';\n    }\n  } // Several AW locales like de are not in the format that SAN is expecting. This if block updates them to the proper format.\n\n\n  if (applicationLanguage && applicationLanguage.length === 5) {\n    sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase();\n  } else if (applicationLanguage && applicationLanguage.length === 2) {\n    sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase() + '_' + applicationLanguage.toUpperCase();\n  } else {\n    sanApplicationLanguage = 'applicationLanguageNone';\n  } // if for some reason, the language value lookup fails, default to None\n  // Languages which AW supports that SAN does not would be corrected here.\n\n\n  if (San[sanApplicationLanguage]) {\n    sanApplicationLanguage = San[sanApplicationLanguage];\n  } else {\n    sanApplicationLanguage = San.applicationLanguageNone;\n  } // status and err_message are left for debugger use, not to be displayed to customer via console, etc\n\n\n  let status = San.initialize(solutionId, versionConstants.version, fullVersion, sanApplicationLanguage, useInternalServer || undefined, awConfiguration.get('baseUrl') + '/lib/piwik/piwik.js');\n  let err_message = San.getLastErrorMessage();\n}\n\nexports = {\n  setAutoTestMode,\n  reset,\n  authenticationSuccessful,\n  setPreInitData,\n  enable,\n  disable,\n  logEvent,\n  logPageViewEvent,\n  logProductInfo,\n  logCommands,\n  publishableValue\n};\nexport default exports;","map":{"version":3,"names":["_","Debug","eventBus","cfgSvc","AwPromiseService","awConfiguration","AwStateService","_authenticated","_sanLogEventList","_userId","_vendorId","_enabled","_licenseLevel","_autoTestMode","trace","exports","_themeWhiteList","_commandsWhitelist","_pageWhitelist","_useInternalServer","_isIdle","MAX_PARTIAL_ERROR_COUNT","setAutoTestMode","reset","authenticationSuccessful","setPreInitData","preInitData","user_id","vendor_id","user_license_level","enable","useInternalServer","repo","undefined","instance","resolve","then","solution","all","getCfg","OOTB_Verification","locations","commands","themes","solutionDef","versionConstants","_initializeSan","localStorage","setItem","San","disable","_subscribeForEvents","_idleSetup","subscribe","_getResolutionZoomInfo","_subscribeForErrors","_logEventDataAtIdle","encVendId","getItem","doDisable","participatingProp","Participating","Site","logEvent","solutionName","logProductInfo","name","property","eventObject","isPlainObject","JSON","stringify","logPageViewEvent","transitionHooks","onSuccess","transition","toState","to","targetPageName","substr","lastIndexOf","logPageView","productObject","addProductInfo","logCommands","data","concat","hasOwnProperty","readableKeyData","forEach","value","key","publishableValue","sanCommandId","width","height","cmdData","keyData","artifactName","artifactType","toUpperCase","length","indexOf","startsWith","logEventData","shift","jsonData","_logErrors","setTimeout","soaPartialError","sanPartialErrors","serviceName","operationName","test","sanQName","sanServiceName","sanOperationName","templatePrefix","exec","partial_error_count","error","errIdx","errorValues","errorValue","evIdx","level","errorData","Code","String","code","Level","sanLogCorrelationID","LogEventData","push","subscribeOnChannel","channel","topic","callback","eventName","source","categoryName","filterType","filterSelected","isEmpty","resolutionZoomData","parse","new_resolutionZoomData","sanCommandTitle","parseInt","window","innerWidth","innerHeight","zoom","Math","round","devicePixelRatio","processEvent","endPoint","unsubscribe","progressStartListener","progressEndListener","_startupIdleEventPublisher","idleBurndown","clearTimeout","_setupBurndownTimer","idle_cutoff_seconds","publish","setUserIdentifier","setCustomerIdentifier","solutionId","fullVersion","version","description","applicationLanguage","sanApplicationLanguage","locale","applicationLanguageNone","status","initialize","get","err_message","getLastErrorMessage"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/splmAnalyticsService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/* global San */\n\n/**\n * This is the analytics service. It manages enablement & logging of messages to a backend analytics logging server.\n *\n * For more information about Siemens Analytics:\n * <ul>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:user_information</li>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:devguide:javascript_client</li>\n * </ul>\n *\n * @module js/splmAnalyticsService\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport eventBus from 'js/eventBus';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awConfiguration from 'js/awConfiguration';\nimport AwStateService from 'js/awStateService';\n/**\n * This flag indicates if the user was authenticated in this page instead of re-using an authenication from a\n * previous page load.\n *\n * @type {boolean}\n * @private\n */\nvar _authenticated = false;\n\n/**\n * This array holds a list of event objects to be logged into the SAN server.\n *\n * @type {Array}\n * @private\n */\nvar _sanLogEventList = [];\n\n/**\n * Id of the user logged in to the current session.\n *\n * @type {string}\n * @private\n */\nvar _userId = '';\n\n/**\n * Vendor Id from the license.\n *\n * @type {string}\n * @private\n */\nvar _vendorId = '';\n\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type {boolean}\n * @private\n */\nvar _enabled = false;\n\n/**\n * The license level of the currently logged in user\n *\n * @type {string}\n * @private\n */\nvar _licenseLevel;\n\nvar _autoTestMode = false;\n\nvar trace = new Debug( 'splmAnalyticsService' );\n\nvar exports = {};\n\nvar _themeWhiteList = [];\n\nvar _commandsWhitelist = [];\n\nvar _pageWhitelist = [];\n\nvar _useInternalServer;\n\nvar _isIdle = false;\n\nvar MAX_PARTIAL_ERROR_COUNT = 10;\n\n\n/**\n * @ignore\n */\nexport let setAutoTestMode = function() {\n    _autoTestMode = true;\n};\n\n/**\n * This is a test support method to reset the service to default values. It should not be used outside of unit\n * testing.\n * @ignore\n */\nexport let reset = function() {\n    _authenticated = false;\n    _enabled = false;\n};\n\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\nexport let authenticationSuccessful = function() {\n    _authenticated = true;\n};\n\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n */\nexport let setPreInitData = function( preInitData ) {\n    _userId = preInitData.user_id;\n    _vendorId = preInitData.vendor_id;\n    if( preInitData.user_license_level ) {\n        _licenseLevel = preInitData.user_license_level;\n    }\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\nexport let enable = function( useInternalServer, repo ) {\n    if( _autoTestMode ) {\n        _enabled = false;\n        return undefined;\n    }\n    _useInternalServer = useInternalServer;\n    // load Siemens Analytics (San)\n    /** revisitme Charu\n     * Added lib/piwik/analytics under src to resolve the path\n     */\n    return AwPromiseService.instance( function( resolve ) {\n        import( '../lib/piwik/analytics' ).then( function() {\n            if( _authenticated ) {\n                var solution;\n                AwPromiseService.instance.all( [\n                    cfgSvc.getCfg( 'OOTB_Verification' ).then( function( OOTB_Verification ) {\n                        _pageWhitelist = OOTB_Verification.locations;\n                        _commandsWhitelist = OOTB_Verification.commands;\n                        _themeWhiteList = OOTB_Verification.themes;\n                    } ),\n                    cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n                        solution = solutionDef;\n                    } )\n                ] ).then( function() {\n                    cfgSvc.getCfg( 'versionConstants' ).then( function( versionConstants ) {\n                        // initialize San with solution id & client version\n                        // - passing undefined if not using internal server based upon API contract from San\n                        // The user id and the customer/vendor id has to be set before the San layer is initialized.\n                        _initializeSan( useInternalServer, repo, solution, versionConstants );\n                        _enabled = true;\n                        localStorage.setItem( 'AW_SAN_OPTOUT', 'false' );\n                        localStorage.setItem( 'AW_SAN_DO_DISABLE', 'false' );\n\n                        // If Analytics was previously disabled, enabled it now.\n                        San.disable( false );\n\n                        // Subscribe to other events for logging.\n                        _subscribeForEvents( 'selectFilter' );\n\n                        _idleSetup();\n                        eventBus.subscribe( 'idle', _getResolutionZoomInfo );\n\n                        // Log the SOA errors during Idle time only.\n                        // This can be done only after the _idleSetup() call.\n                        _subscribeForErrors();\n                        eventBus.subscribe( 'idle', _logEventDataAtIdle );\n                        resolve();\n                    } );\n                } );\n            } else {\n                resolve();\n            }\n        } );\n    } );\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\nexport let disable = function( useInternalServer, encVendId, repo ) {\n    _enabled = false;\n\n    if( localStorage.getItem( 'AW_SAN_OPTOUT' ) === 'true' ) {\n        // If we know that the user opted out and we have already processed it.\n        // Nothing more to do.\n        return;\n    }\n\n    /** revisitme Charu\n     * Added lib/piwik/analytics under src to resolve the path\n     */\n    import( '../lib/piwik/analytics' ).then( function() {\n        if( _authenticated ) {\n            var solution;\n            cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n                solution = solutionDef;\n                return cfgSvc.getCfg( 'versionConstants' );\n            } ).then( function( versionConstants ) {\n                // Initialize San with solution id & client version\n                _initializeSan( useInternalServer, repo, solution, versionConstants );\n\n                // If Analytics was previously enabled, we will log one \"participating=false\" event.\n                // San.logEvent( \"participating=false\") call is not working if\n                // San.disable(true) is called right after the San.logEvent().\n                // So, we call San.disable(true), during the subsequent login.\n                var doDisable = localStorage.getItem( 'AW_SAN_DO_DISABLE' );\n                if( doDisable === null || doDisable === 'false' ) {\n                    var participatingProp = { Participating: 'false' };\n\n                    if( encVendId ) {\n                        participatingProp.Site = encVendId;\n                    }\n\n                    _enabled = true;\n                    San.disable( false );\n                    exports.logEvent( solution.solutionName, participatingProp );\n                    exports.logProductInfo( 'Participating', 'Opt-Out' );\n                    _enabled = false;\n                    localStorage.setItem( 'AW_SAN_DO_DISABLE', 'true' );\n                    // San.disable( true );\n                    // Calling San.disable(true) here prevents the above logEvent() call from going through.\n                } else if( doDisable === 'true' ) {\n                    //\n                    _enabled = false;\n                    San.disable( true );\n                    localStorage.setItem( 'AW_SAN_OPTOUT', 'true' );\n                    localStorage.setItem( 'AW_SAN_DO_DISABLE', 'false' );\n                }\n            } );\n        }\n    } );\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logEvent = function( name, property ) {\n    if( _enabled ) {\n        var eventObject = _.isPlainObject( property ) ? JSON.stringify( property ) : property;\n        San.logEvent( name, eventObject );\n        trace( 'LogEvent', name, property );\n    }\n};\n\n/**\n * Log Page Load Events.\n *\n * @ignore\n */\nexport let logPageViewEvent = function() {\n    AwStateService.instance.transitionHooks.onSuccess( {}, function( transition ) {\n        if( _enabled ) {\n            var toState = transition.to();\n            var targetPageName;\n            targetPageName = toState.name.substr( toState.name.lastIndexOf( '_' ) + 1 );\n            San.logPageView( targetPageName );\n            trace( 'Page View', targetPageName );\n        }\n    } );\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logProductInfo = function( name, property ) {\n    if( _enabled ) {\n        var productObject = _.isPlainObject( property ) ? JSON.stringify( property ) : property;\n        San.addProductInfo( name, productObject );\n        trace( 'LogProductInfo', name, property );\n    }\n};\n\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logCommands = function( data ) {\n    if( _enabled ) {\n        cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n            var solutionName = solutionDef.solutionName.concat( ' ' ).concat( 'Commands' );\n\n            // Convert the \"san\" prefixed names to human readable names.\n            if( _.isPlainObject( data ) && data.hasOwnProperty( 'sanCommandId' ) ) {\n                var readableKeyData = {};\n                _.forEach( data, function( value, key ) {\n                    switch ( key ) {\n                        case 'sanCommandId':\n                            readableKeyData[ 'Command Id' ] = exports.publishableValue( value, 'COMMAND' );\n                            break;\n                        case 'sanCommandTitle':\n                            if( exports.publishableValue( data.sanCommandId, 'COMMAND' ) === data.sanCommandId ) {\n                                readableKeyData[ 'Command Title' ] = value;\n                            } else {\n                                readableKeyData[ 'Command Title' ] = exports.publishableValue( data.sanCommandId, 'COMMAND' );\n                            }\n                            break;\n                        case 'sanViewMode':\n                            readableKeyData[ 'View Mode' ] = value;\n                            break;\n                        case 'sanPrimaryPercentage':\n                            readableKeyData[ 'Primary Percentage' ] = value;\n                            break;\n                        case 'sanTileAction':\n                            readableKeyData[ 'Tile Action' ] = value;\n                            break;\n                        case 'sanCmdLocation':\n                            readableKeyData[ 'Command Location' ] = value;\n                            break;\n                        case 'sanPixelSize':\n                            readableKeyData[ 'Pixel Size' ] = value;\n                            break;\n                        case 'sanWidth':\n                            readableKeyData.width = value;\n                            break;\n                        case 'sanHeight':\n                            readableKeyData.height = value;\n                            break;\n                        case 'sanCommandData':\n                            readableKeyData.cmdData = value;\n                            break;\n                        default:\n                            readableKeyData[ key ] = value;\n                    }\n                } );\n            }\n\n            if( _licenseLevel && readableKeyData ) {\n                readableKeyData[ 'User License Level' ] = _licenseLevel;\n            }\n            // Now, log the data.\n            var keyData = _.isPlainObject( readableKeyData ) ? JSON.stringify( readableKeyData ) : readableKeyData;\n            San.logEvent( solutionName, keyData );\n            trace( solutionName, readableKeyData );\n        } );\n    }\n};\n\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\nexport let publishableValue = function( artifactName, artifactType ) {\n    if( _useInternalServer ) {\n        return artifactName;\n    }\n    if( artifactType.toUpperCase() === 'THEME' ) {\n        if( _themeWhiteList && _themeWhiteList.length > 0 ) {\n            if( _themeWhiteList.indexOf( artifactName ) < 0 ) {\n                return 'Customer';\n            }\n        } else {\n            return 'Unknown';\n        }\n    } else if( artifactType.toUpperCase() === 'COMMAND' ) {\n        if( artifactName === 'Tile' || artifactName.startsWith( 'action_' ) ) {\n            return artifactName;\n        }\n        if( _commandsWhitelist && _commandsWhitelist.length > 0 ) {\n            if( _commandsWhitelist.indexOf( artifactName ) < 0 ) {\n                return 'Customer';\n            }\n        } else {\n            return 'Unknown';\n        }\n    } else if( artifactType.toUpperCase() === 'PAGE' ) {\n        if( _pageWhitelist && _pageWhitelist.length > 0 ) {\n            if( _pageWhitelist.indexOf( artifactName ) < 0 ) {\n                return 'Customer';\n            }\n        } else {\n            return 'Unknown';\n        }\n    }\n    return artifactName;\n};\n\n/**\n * This method logs all the data stored by _sanLogEventList in FIFO during Idle time.\n *\n */\nfunction _logEventDataAtIdle() {\n    if( _enabled && _isIdle ) {\n        while( _sanLogEventList.length > 0 ) {\n            var logEventData = _sanLogEventList.shift();\n            San.logEvent( logEventData.solutionName, logEventData.jsonData );\n            trace( 'Idle', logEventData.solutionName, logEventData.jsonData );\n        }\n    }\n}\n\n/**\n * This method should be used by the client to log Errors to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - Partial Error data from a SOA response.\n */\nfunction _logErrors( data ) {\n    setTimeout( function() {\n        if( _enabled ) {\n            var soaPartialError = data.sanPartialErrors;\n            var serviceName = 'unknown';\n            var operationName = 'unknown';\n\n            // teamcenter.com, awp0, ics1 are internal SOAs that we want to report.\n            // Customer SOAs use IDs with numerals > 3 - for these we are not reporting the names.\n            if( /teamcenter.com/i.test( data.sanQName ) ) {\n                serviceName = data.sanServiceName;\n                operationName = data.sanOperationName;\n            } else {\n                // Get the \"awp0\" from \"http://awp0.com/Schemas/Internal/AWS2/2016-03/...\"\n                // If that has a number > 3, it is a customer SOA.\n                var templatePrefix = /:\\/\\/(.*)\\..*\\//i.exec( data.sanQName );\n                if( templatePrefix.length > 1 && /[0123]/.test( templatePrefix[ 1 ] ) ) {\n                    serviceName = data.sanServiceName;\n                    operationName = data.sanOperationName;\n                } else {\n                    serviceName = 'Customer';\n                    operationName = 'Customer';\n                }\n            }\n\n            cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n                var solutionName = solutionDef.solutionName.concat( ' ' ).concat( 'Errors' );\n                var partial_error_count = 0;\n                soaPartialError.forEach( function( error, errIdx ) {\n                    if( partial_error_count > MAX_PARTIAL_ERROR_COUNT ) {\n                        return;\n                    }\n                    error.errorValues.forEach( function( errorValue, evIdx ) {\n                        // Log only error level 3 and above.\n                        // Error levels below 3 are info/warning categories.\n                        if( errorValue.level < 3 ) {\n                            return;\n                        }\n\n                        var errorData = {};\n                        // Report error Code and Level as string values, instead of int.\n                        // Analytics site to generate reports such as \"sum\", \"average\", etc. for int.\n                        // Sending it as string ensures that we can count the number of occurrences of a particular error code, etc.\n                        errorData.Code = String( errorValue.code );\n                        errorData.Level = String( errorValue.level );\n                        errorData[ 'Stack Index' ] = evIdx;\n                        errorData[ 'Error Set' ] = errIdx;\n                        errorData[ 'Service Name' ] = serviceName;\n                        errorData[ 'Operation Name' ] = operationName;\n                        errorData[ 'Log Correlation ID' ] = data.sanLogCorrelationID;\n\n                        var LogEventData = {};\n                        LogEventData.solutionName = solutionName;\n                        LogEventData.jsonData = JSON.stringify( errorData );\n                        _sanLogEventList.push( LogEventData );\n                    } );\n                    partial_error_count++;\n                } );\n            } );\n        }\n    }, 0, data );\n    return;\n}\n\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n */\nfunction _subscribeForErrors() {\n    // Log the Search Filter events in the \"left side\" Navigation panel.\n    eventBus.subscribeOnChannel( {\n        channel: 'SAN_Events',\n        topic: 'aw-command-logErrros',\n        callback: _logErrors\n    } );\n}\n\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n * @param {String} eventName - name of an event to subscribe to.\n */\nfunction _subscribeForEvents( eventName ) {\n    // Log the Search Filter events in the \"left side\" Navigation panel.\n    eventBus.subscribe( eventName, function( data ) {\n        var property = {};\n        if( data.source && data.categoryName ) {\n            property[ 'Command Id' ] = data.filterType;\n            property[ 'Command Location' ] = data.source;\n\n            // If the user enables the filter in the filter panel,\n            // the \"filterSelected\" field is coming in as \"false\"\n            if( data.hasOwnProperty( 'filterSelected' ) ) {\n                if( data.filterSelected === true ) {\n                    property[ 'Command Location' ] = data.source.concat( ' OFF' );\n                } else {\n                    property[ 'Command Location' ] = data.source.concat( ' ON' );\n                }\n            }\n        }\n\n        if( !_.isEmpty( property ) ) {\n            exports.logCommands( property );\n        }\n    } );\n}\n\n/**\n * Records resolution and zoom information and logs it to Siemens analytics\n *\n */\nfunction _getResolutionZoomInfo() {\n    var resolutionZoomData = JSON.parse( localStorage.getItem( 'sanResolutionZoom' ) );\n    var new_resolutionZoomData = {\n        sanCommandId: 'ResolutionZoomData',\n        sanCommandTitle: 'Resolution / Zoom Info',\n        width: parseInt( window.innerWidth ),\n        height: parseInt( window.innerHeight ),\n        zoom: Math.round( window.devicePixelRatio * 100 )\n    };\n\n    // if we have a resolution from last time...\n    if( resolutionZoomData ) {\n        // if the resolution has changed since the last time we reported it...\n        if( !( resolutionZoomData.width === new_resolutionZoomData.width &&\n                resolutionZoomData.height === new_resolutionZoomData.height &&\n                resolutionZoomData.zoom === new_resolutionZoomData.zoom ) ) {\n            localStorage.setItem( 'sanResolutionZoom', JSON.stringify( new_resolutionZoomData ) );\n            exports.logCommands( new_resolutionZoomData );\n        }\n    } else {\n        // this is the first time reporting this info, store it in localStorage and publish\n        localStorage.setItem( 'sanResolutionZoom', JSON.stringify( new_resolutionZoomData ) );\n        exports.logCommands( new_resolutionZoomData );\n    }\n}\n\n/**\n * This waits for either a \"progress.start\" or \"progress.end\" event to come in and once they do, it starts up an idle event publisher.\n */\nfunction _idleSetup() {\n    /**\n     * @param {String|null} endPoint - optional endPoint of the progress event\n     */\n    function processEvent( endPoint ) {\n        if( !/\\/getUnreadMessages$/.test( endPoint ) ) {\n            _isIdle = false;\n            eventBus.unsubscribe( progressStartListener );\n            eventBus.unsubscribe( progressEndListener );\n            _startupIdleEventPublisher();\n        }\n    }\n\n    var progressStartListener = eventBus.subscribe( 'progress.start', processEvent );\n    var progressEndListener = eventBus.subscribe( 'progress.end', processEvent );\n}\n\n/**\n * Sets up an Idle event publisher. This publisher uses a burndown timer which checks how long it has been since a \"progress.end\" or \"progress.start\"\n * event has come in. If one of those events come in, the burndown timer is restarted. Once the burndown exceeds its timer it will fire a single \"idle\"\n * event and then resume listening for a \"progress.end\"/\"progress.start\" event.\n */\nfunction _startupIdleEventPublisher() {\n    var idleBurndown;\n\n    /**\n     */\n    function processEvent() {\n        _isIdle = false;\n        clearTimeout( idleBurndown );\n        idleBurndown = _setupBurndownTimer( progressStartListener, progressEndListener );\n    }\n\n    var progressStartListener = eventBus.subscribe( 'progress.start', processEvent );\n    var progressEndListener = eventBus.subscribe( 'progress.end', processEvent );\n\n    idleBurndown = _setupBurndownTimer( progressStartListener, progressEndListener );\n}\n\n/**\n * Creates the burndown timer\n *\n * @param {Object} progressStartListener - eventBus subscription handle\n * @param {Object} progressEndListener - eventBus subscription handle\n * @return {Number} A Number, representing the ID value of the timer that is set. Use this value with the clearTimeout() method to cancel the timer.\n */\nfunction _setupBurndownTimer( progressStartListener, progressEndListener ) {\n    var idle_cutoff_seconds = 30;\n    return setTimeout( function() {\n        eventBus.publish( 'idle', {} );\n        _idleSetup();\n        eventBus.unsubscribe( progressStartListener );\n        eventBus.unsubscribe( progressEndListener );\n    }, idle_cutoff_seconds * 1000 );\n}\n\n/**\n * Initialize the SAN SDK\n *\n * @param {Boolean} useInternalServer - boolean indicating if the data should go to the internal site or external site\n * @param {String} repo - optional parameter which can be used to overwrite the predefined repo, used for redirecting to TcX repo\n * @param {Object} solution - solution object used to define the application name\n * @param {Object} versionConstants - object used to define the application version\n */\nfunction _initializeSan( useInternalServer, repo, solution, versionConstants ) {\n    San.setUserIdentifier( _userId );\n    San.setCustomerIdentifier( _vendorId );\n    var solutionId = repo ? repo : solution.solutionId;\n    var fullVersion = versionConstants.name + '@' + versionConstants.version + ' (' + versionConstants.description + ')';\n    // pull language from awSession in localStorage and convert to the object that SAN is expecting.\n    var applicationLanguage = '';\n    var sanApplicationLanguage = '';\n    try {\n        applicationLanguage = JSON.parse( localStorage.getItem( 'awSession:/' ) ).locale;\n    } catch ( error ) {\n        try {\n            applicationLanguage = localStorage.getItem( 'locale:/' );\n        } catch ( error ) {\n            applicationLanguage = '';\n        }\n    }\n    // Several AW locales like de are not in the format that SAN is expecting. This if block updates them to the proper format.\n    if ( applicationLanguage && applicationLanguage.length === 5 ) {\n        sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase();\n    } else if( applicationLanguage && applicationLanguage.length === 2 ) {\n        sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase() + '_' + applicationLanguage.toUpperCase();\n    } else {\n        sanApplicationLanguage = 'applicationLanguageNone';\n    }\n    // if for some reason, the language value lookup fails, default to None\n    // Languages which AW supports that SAN does not would be corrected here.\n    if ( San[sanApplicationLanguage] ) {\n        sanApplicationLanguage = San[sanApplicationLanguage];\n    } else {\n        sanApplicationLanguage = San.applicationLanguageNone;\n    }\n    // status and err_message are left for debugger use, not to be displayed to customer via console, etc\n    let status = San.initialize(\n        solutionId,\n        versionConstants.version,\n        fullVersion,\n        sanApplicationLanguage,\n        useInternalServer || undefined,\n        awConfiguration.get( 'baseUrl' ) + '/lib/piwik/piwik.js'\n    );\n    let err_message = San.getLastErrorMessage();\n}\n\nexports = {\n    setAutoTestMode,\n    reset,\n    authenticationSuccessful,\n    setPreInitData,\n    enable,\n    disable,\n    logEvent,\n    logPageViewEvent,\n    logProductInfo,\n    logCommands,\n    publishableValue\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
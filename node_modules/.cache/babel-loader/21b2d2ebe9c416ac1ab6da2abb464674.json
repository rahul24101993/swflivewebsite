{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Debug Reporter that will send performance info to console if enabled\n *\n * @module js/splmStatsDebugReporter\n */\nimport _ from 'lodash';\nimport { getLocationInformation } from 'js/splmStatsUtils';\n/**\n * Debug Reporter that will send performance info to console if enabled\n *\n * @class SPLMStatsDebugReporter\n */\n\nfunction SPLMStatsDebugReporter() {\n  let self = this;\n\n  const repeat = function (str, n) {\n    let newStr = '';\n\n    for (let i = 0; i < n; i++) {\n      newStr += str;\n    }\n\n    return newStr;\n  };\n\n  const _getFormattedPrint = function (performanceObj) {\n    const Table = function (report) {\n      let self = this;\n      let _rows = {};\n      let _skeletonStruct = '';\n\n      self.addRow = function (row, colIdx) {\n        if (!_rows[colIdx]) {\n          _rows[colIdx] = {};\n          _rows[colIdx].rowList = [];\n          _rows[colIdx].maxWidth = 0;\n        }\n\n        _rows[colIdx].rowList.push(row);\n\n        if (_rows[colIdx].maxWidth < row.length) {\n          _rows[colIdx].maxWidth = row.length;\n        }\n      };\n\n      self.buildSkeleton = function () {\n        let _skel = 'PLStats Performance Summary\\n';\n        let columns = Object.keys(_rows);\n        _rows['0'].maxWidth = 1 + _rows[0].maxWidth;\n        _rows['1'].maxWidth = 1 + (_rows[1].maxWidth > 13 ? _rows[1].maxWidth : 13);\n        /* SETUP TOP */\n\n        for (let i = 0; i < columns.length; i++) {\n          _skel += '+' + repeat('-', _rows[i].maxWidth);\n        }\n\n        _skel += '+\\n';\n        _skel += '|' + ' Metric' + repeat(' ', _rows[0].maxWidth - ' Metric'.length);\n        _skel += '|' + repeat(' ', _rows[1].maxWidth - ' Value |'.length + 1) + ' Value |';\n        _skel += '\\n';\n        /* SETUP MIDDLE PORTION */\n\n        for (let ii = 0; ii < columns.length; ii++) {\n          _skel += '+' + repeat('-', _rows[ii].maxWidth);\n        }\n\n        _skel += '+\\n';\n        /* Print Data Here */\n\n        for (let j = 0; j < _rows[0].rowList.length; j++) {\n          _skel += '|' + ' ' + _rows[0].rowList[j] + repeat(' ', _rows[0].maxWidth - (' ' + _rows[0].rowList[j]).length);\n          _skel += '|' + repeat(' ', 1 + _rows[1].maxWidth - String(' ' + _rows[1].rowList[j] + '|').length) + ' ' + _rows[1].rowList[j] + '|';\n          _skel += '\\n';\n        }\n        /* SETUP BOTTOM */\n\n\n        for (let k = 0; k < columns.length; k++) {\n          _skel += '+' + repeat('-', _rows[k].maxWidth);\n        }\n\n        _skel += '+\\n';\n        _skeletonStruct = _skel;\n        return _skel;\n      };\n      /* Any processing that needs to be done to report performance object... => String */\n\n\n      let memoryUsed = report.MemoryUsed;\n      let memoryConsumed = report.MemoryConsumption;\n      let memoryStart = report.MemoryStart;\n      let memoryEnd = report.MemoryEnd;\n      let soaCount = 0;\n      let totalHttpRequests = report.Network.totalHttpRequests;\n\n      if (memoryUsed === 0 || memoryConsumed === 0) {\n        memoryStart = 'Not Supported';\n        memoryEnd = 'Not Supported';\n      } else {\n        memoryStart = (memoryStart / 1024000).toFixed(0) + 'MB';\n        memoryEnd = (memoryEnd / 1024000).toFixed(0) + 'MB';\n      }\n\n      soaCount = report.Network.SoaDetails.filter(function (networkCall) {\n        return networkCall.logCorrelationID !== 0;\n      }).length;\n      self.addRow(' Browser Type', 0);\n      self.addRow(report.BrowserType + ' ', 1);\n      self.addRow(' ', 0);\n      self.addRow(' ', 1);\n      self.addRow(' Total Time', 0);\n      self.addRow((report.TTI / 1000).toFixed(2) + 's ', 1); // TODO: Get scripting time recording correctly again/not included with networking time.\n      //self.addRow( ' Scripting Time', 0 );\n      //self.addRow( ( report.scriptTime / 1000 ).toFixed( 1 ) + 's ', 1 );\n\n      self.addRow(' Total Network Time', 0);\n      self.addRow((report.totalNetworkTime / 1000).toFixed(2) + 's ', 1);\n      self.addRow(' ', 0);\n      self.addRow(' ', 1);\n      self.addRow(' Total SOA Requests', 0);\n      self.addRow(soaCount + ' ', 1);\n      self.addRow(' Total HTTP Requests', 0);\n      self.addRow(totalHttpRequests + ' ', 1);\n      self.addRow(' ', 0);\n      self.addRow(' ', 1);\n      self.addRow(' Memory At Start', 0);\n      self.addRow(memoryStart + ' ', 1);\n      self.addRow(' Memory At Stop', 0);\n      self.addRow(memoryEnd + ' ', 1);\n      self.addRow(' ', 0);\n      self.addRow(' ', 1);\n      self.addRow(' DOM Node Count', 0);\n      self.addRow(report.DOM.elemCount + ' ', 1);\n      self.addRow(' DOM Tree Depth', 0);\n      self.addRow(report.DOM.DOMTreeDepth + ' ', 1);\n      self.addRow(' ', 0);\n      self.addRow(' ', 1);\n      self.addRow(' Number of Unique Components', 0);\n      self.addRow(report.Component.uniqueComponents + ' ', 1);\n      self.addRow(' Number of Component Renders', 0);\n      self.addRow(report.Component.componentRenders + ' ', 1); // self.addRow( ' Estimated Render Time', 0 );\n      // self.addRow( ( report.Component.componentsRenderTime / 1000 ).toFixed( 2 ) + 's ', 1 );\n\n      self.buildSkeleton();\n      return self;\n    };\n\n    return new Table(performanceObj).buildSkeleton();\n  };\n  /**\n   * @param {Object} performanceObject - Performance object to be formatted and sent to console\n   */\n\n\n  self.report = function (performanceObject) {\n    if (performanceObject.TTI < 50) {\n      return;\n    }\n\n    let memoryStart = performanceObject.MemoryStart;\n    let memoryEnd = performanceObject.MemoryEnd;\n\n    if (performanceObject.MemoryUsed === 0 || performanceObject.MemoryConsumption === 0) {\n      memoryStart = 'Not Supported';\n      memoryEnd = 'Not Supported';\n    } else {\n      memoryStart = (memoryStart / 1024).toFixed(3) + 'kb';\n      memoryEnd = (memoryEnd / 1024).toFixed(3) + 'kb';\n    }\n\n    performanceObject.Network['*TotalNetworkTime'] = performanceObject.totalNetworkTime.toFixed(3) + 'ms';\n    console.log(_getFormattedPrint(performanceObject));\n    console.log('PLStats Performance Telemetry Internal Debug: * = denotes sent to analytics if enabled', {\n      '*TotalTime': performanceObject.TTI.toFixed(3) + 'ms',\n      '*ScriptingTime': performanceObject.scriptTime.toFixed(3) + 'ms',\n      '*Type': performanceObject.BrowserType,\n      Title: performanceObject.title,\n      DOM: {\n        '*NodeCount': performanceObject.DOM.elemCount,\n        TreeDepth: performanceObject.DOM.DOMTreeDepth,\n        'CostlyWidgets( >= 50 watchers || >= 7 Descendant DOM Depth )': performanceObject.DOM.DOMCostlyWidgets\n      },\n      Network: performanceObject.Network,\n      Memory: {\n        '*MemoryAtStart': memoryStart,\n        '*MemoryAtStop': memoryEnd\n      },\n      Components: {\n        'Number of Unique Components': performanceObject.Component.uniqueComponents,\n        'Number of Component Renders': performanceObject.Component.componentRenders,\n        details: performanceObject.Component.componentDetails\n      },\n      LocationInformation: getLocationInformation(),\n      _processorOverhead: {\n        DOM: performanceObject.DOMProcessorOverhead.toFixed(3) + 'ms',\n        Memory: performanceObject.MemProcessorOverhead.toFixed(3) + 'ms',\n        NETWORK: performanceObject.XHRProcessorOverhead.toFixed(3) + 'ms',\n        SCRIPT: performanceObject.JsProcessorOverhead.toFixed(3) + 'ms',\n        COMPONENTS: performanceObject.ComponentOverhead.toFixed(3) + 'ms'\n      }\n    });\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsDebugReporter;\n_c = SPLMStatsDebugReporter;\nexport default SPLMStatsDebugReporter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsDebugReporter\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsDebugReporter\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsDebugReporter.js"],"names":["SPLMStatsDebugReporter","self","repeat","newStr","i","_getFormattedPrint","Table","_rows","_skeletonStruct","row","_skel","columns","Object","ii","j","String","k","memoryUsed","report","memoryConsumed","memoryStart","memoryEnd","soaCount","totalHttpRequests","networkCall","performanceObject","console","Title","DOM","TreeDepth","DOMCostlyWidgets","Network","Memory","Components","details","componentDetails","LocationInformation","getLocationInformation","_processorOverhead","NETWORK","SCRIPT","COMPONENTS"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Debug Reporter that will send performance info to console if enabled\n *\n * @module js/splmStatsDebugReporter\n */\nimport _ from 'lodash';\nimport { getLocationInformation } from 'js/splmStatsUtils';\n\n\n/**\n * Debug Reporter that will send performance info to console if enabled\n *\n * @class SPLMStatsDebugReporter\n */\nfunction SPLMStatsDebugReporter() {\n    let self = this;\n\n    const repeat = function( str, n ) {\n        let newStr = '';\n        for( let i = 0; i < n; i++ ) {\n            newStr += str;\n        }\n        return newStr;\n    };\n\n    const _getFormattedPrint = function( performanceObj ) {\n        const Table = function( report ) {\n            let self = this;\n            let _rows = {};\n            let _skeletonStruct = '';\n\n            self.addRow = function( row, colIdx ) {\n                if( !_rows[ colIdx ] ) {\n                    _rows[ colIdx ] = {};\n                    _rows[ colIdx ].rowList = [];\n                    _rows[ colIdx ].maxWidth = 0;\n                }\n                _rows[ colIdx ].rowList.push( row );\n                if( _rows[ colIdx ].maxWidth < row.length ) {\n                    _rows[ colIdx ].maxWidth = row.length;\n                }\n            };\n\n            self.buildSkeleton = function() {\n                let _skel = 'PLStats Performance Summary\\n';\n                let columns = Object.keys( _rows );\n\n                _rows[ '0' ].maxWidth = 1 + _rows[ 0 ].maxWidth;\n                _rows[ '1' ].maxWidth = 1 + ( _rows[ 1 ].maxWidth > 13 ? _rows[ 1 ].maxWidth : 13 );\n\n                /* SETUP TOP */\n                for( let i = 0; i < columns.length; i++ ) {\n                    _skel += '+' + repeat( '-', _rows[ i ].maxWidth );\n                }\n                _skel += '+\\n';\n                _skel += '|' + ' Metric' + repeat( ' ', _rows[ 0 ].maxWidth - ' Metric'.length );\n                _skel += '|' + repeat( ' ', _rows[ 1 ].maxWidth - ' Value |'.length + 1 ) + ' Value |';\n                _skel += '\\n';\n\n                /* SETUP MIDDLE PORTION */\n                for( let ii = 0; ii < columns.length; ii++ ) {\n                    _skel += '+' + repeat( '-', _rows[ ii ].maxWidth );\n                }\n                _skel += '+\\n';\n\n                /* Print Data Here */\n                for( let j = 0; j < _rows[ 0 ].rowList.length; j++ ) {\n                    _skel += '|' + ' ' + _rows[ 0 ].rowList[ j ] + repeat( ' ', _rows[ 0 ].maxWidth - ( ' ' + _rows[ 0 ].rowList[ j ] ).length );\n                    _skel += '|' + repeat( ' ', 1 + _rows[ 1 ].maxWidth - String( ' ' + _rows[ 1 ].rowList[ j ] + '|' ).length ) + ' ' + _rows[ 1 ].rowList[ j ] + '|';\n                    _skel += '\\n';\n                }\n\n                /* SETUP BOTTOM */\n                for( let k = 0; k < columns.length; k++ ) {\n                    _skel += '+' + repeat( '-', _rows[ k ].maxWidth );\n                }\n                _skel += '+\\n';\n                _skeletonStruct = _skel;\n                return _skel;\n            };\n\n            /* Any processing that needs to be done to report performance object... => String */\n\n            let memoryUsed = report.MemoryUsed;\n            let memoryConsumed = report.MemoryConsumption;\n            let memoryStart = report.MemoryStart;\n            let memoryEnd = report.MemoryEnd;\n\n            let soaCount = 0;\n            let totalHttpRequests = report.Network.totalHttpRequests;\n\n            if( memoryUsed === 0 || memoryConsumed === 0 ) {\n                memoryStart = 'Not Supported';\n                memoryEnd = 'Not Supported';\n            } else {\n                memoryStart = ( memoryStart / 1024000 ).toFixed( 0 ) + 'MB';\n                memoryEnd = ( memoryEnd / 1024000 ).toFixed( 0 ) + 'MB';\n            }\n\n            soaCount = report.Network.SoaDetails.filter( function( networkCall ) {\n                return networkCall.logCorrelationID !== 0;\n            } ).length;\n\n            self.addRow( ' Browser Type', 0 );\n            self.addRow( report.BrowserType + ' ', 1 );\n\n            self.addRow( ' ', 0 );\n            self.addRow( ' ', 1 );\n\n            self.addRow( ' Total Time', 0 );\n            self.addRow( ( report.TTI / 1000 ).toFixed( 2 ) + 's ', 1 );\n\n\n            // TODO: Get scripting time recording correctly again/not included with networking time.\n            //self.addRow( ' Scripting Time', 0 );\n            //self.addRow( ( report.scriptTime / 1000 ).toFixed( 1 ) + 's ', 1 );\n\n            self.addRow( ' Total Network Time', 0 );\n            self.addRow( ( report.totalNetworkTime / 1000 ).toFixed( 2 ) + 's ', 1 );\n\n            self.addRow( ' ', 0 );\n            self.addRow( ' ', 1 );\n\n            self.addRow( ' Total SOA Requests', 0 );\n            self.addRow( soaCount + ' ', 1 );\n            self.addRow( ' Total HTTP Requests', 0 );\n            self.addRow( totalHttpRequests + ' ', 1 );\n\n            self.addRow( ' ', 0 );\n            self.addRow( ' ', 1 );\n\n            self.addRow( ' Memory At Start', 0 );\n            self.addRow( memoryStart + ' ', 1 );\n\n            self.addRow( ' Memory At Stop', 0 );\n            self.addRow( memoryEnd + ' ', 1 );\n\n            self.addRow( ' ', 0 );\n            self.addRow( ' ', 1 );\n\n            self.addRow( ' DOM Node Count', 0 );\n            self.addRow( report.DOM.elemCount + ' ', 1 );\n\n            self.addRow( ' DOM Tree Depth', 0 );\n            self.addRow( report.DOM.DOMTreeDepth + ' ', 1 );\n\n            self.addRow( ' ', 0 );\n            self.addRow( ' ', 1 );\n\n            self.addRow( ' Number of Unique Components', 0 );\n            self.addRow( report.Component.uniqueComponents + ' ', 1 );\n\n            self.addRow( ' Number of Component Renders', 0 );\n            self.addRow( report.Component.componentRenders + ' ', 1 );\n\n            // self.addRow( ' Estimated Render Time', 0 );\n            // self.addRow( ( report.Component.componentsRenderTime / 1000 ).toFixed( 2 ) + 's ', 1 );\n\n            self.buildSkeleton();\n\n            return self;\n        };\n        return new Table( performanceObj ).buildSkeleton();\n    };\n\n    /**\n     * @param {Object} performanceObject - Performance object to be formatted and sent to console\n     */\n    self.report = function( performanceObject ) {\n        if( performanceObject.TTI < 50 ) {\n            return;\n        }\n        let memoryStart = performanceObject.MemoryStart;\n        let memoryEnd = performanceObject.MemoryEnd;\n        if( performanceObject.MemoryUsed === 0 || performanceObject.MemoryConsumption === 0 ) {\n            memoryStart = 'Not Supported';\n            memoryEnd = 'Not Supported';\n        } else {\n            memoryStart = ( memoryStart / 1024 ).toFixed( 3 ) + 'kb';\n            memoryEnd = ( memoryEnd / 1024 ).toFixed( 3 ) + 'kb';\n        }\n        performanceObject.Network[ '*TotalNetworkTime' ] = performanceObject.totalNetworkTime.toFixed( 3 ) + 'ms';\n\n        console.log( _getFormattedPrint( performanceObject ) );\n        console.log( 'PLStats Performance Telemetry Internal Debug: * = denotes sent to analytics if enabled', {\n            '*TotalTime': performanceObject.TTI.toFixed( 3 ) + 'ms',\n            '*ScriptingTime': performanceObject.scriptTime.toFixed( 3 ) + 'ms',\n            '*Type': performanceObject.BrowserType,\n            Title: performanceObject.title,\n            DOM: {\n                '*NodeCount': performanceObject.DOM.elemCount,\n                TreeDepth: performanceObject.DOM.DOMTreeDepth,\n                'CostlyWidgets( >= 50 watchers || >= 7 Descendant DOM Depth )': performanceObject.DOM.DOMCostlyWidgets\n            },\n            Network: performanceObject.Network,\n            Memory: {\n                '*MemoryAtStart': memoryStart,\n                '*MemoryAtStop': memoryEnd\n            },\n            Components: {\n                'Number of Unique Components': performanceObject.Component.uniqueComponents,\n                'Number of Component Renders': performanceObject.Component.componentRenders,\n                details: performanceObject.Component.componentDetails\n            },\n            LocationInformation: getLocationInformation(),\n            _processorOverhead: {\n                DOM: performanceObject.DOMProcessorOverhead.toFixed( 3 ) + 'ms',\n                Memory: performanceObject.MemProcessorOverhead.toFixed( 3 ) + 'ms',\n                NETWORK: performanceObject.XHRProcessorOverhead.toFixed( 3 ) + 'ms',\n                SCRIPT: performanceObject.JsProcessorOverhead.toFixed( 3 ) + 'ms',\n                COMPONENTS: performanceObject.ComponentOverhead.toFixed( 3 ) + 'ms'\n            }\n        } );\n    };\n    return self;\n}\n\nexport default SPLMStatsDebugReporter;\n"]},"metadata":{},"sourceType":"module"}
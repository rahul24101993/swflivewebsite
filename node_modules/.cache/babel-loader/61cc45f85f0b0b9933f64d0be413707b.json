{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module provides methods to process data parse configurations in the Declarative View Model\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined in this module is\n * injected by AngularJS.\n *\n * @module js/dataMapperService\n */\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\n/** revisitme Shaishav\n * Hint: We need to bring following services\nimport awIconSvc from 'js/awIconService';\n*/\n\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport debugService from 'js/debugService';\n/**\n * Cached reference to dependent services\n */\n\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specific format.\n *\n * @private\n */\n\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\n\nvar exports = {};\n/**\n * Check if valid prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\n\nvar isValidPropType = function (type) {\n  return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)$/.test(type);\n};\n/**\n * Check if valid array prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\n\n\nvar isValidArrayPropType = function (type) {\n  return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)ARRAY$/.test(type);\n};\n/**\n * @param {String} propType - The property type\n * @param {Boolean} isArray - If the property is of array type\n * @returns {String} - The correct property type\n */\n\n\nvar getPropertyType = function (propType, isArray) {\n  propType = propType.toUpperCase();\n\n  if (isArray) {\n    if (isValidArrayPropType(propType)) {\n      return propType;\n    } else if (isValidPropType(propType)) {\n      return propType + 'ARRAY';\n    }\n  } else {\n    if (isValidPropType(propType)) {\n      return propType;\n    }\n  }\n\n  logger.warn('Unknown property type ' + propType);\n  return 'UNKNOWN';\n};\n\nconst uuidv4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line no-bitwise\n    const r = Math.random() * 16 | 0; // eslint-disable-next-line no-bitwise\n\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\n/**\n * Convert one single response object to VMO\n * @param {Object} dataParseDef - The data parse definition\n * @returns {Object} - VMO containing view model properties\n */\n\n\nvar constructViewModelObject = function (dataParseDef) {\n  var serverVMO = {\n    props: {}\n  };\n  serverVMO.uid = dataParseDef.identifier || uuidv4();\n  serverVMO.type = dataParseDef.type;\n  serverVMO.modelType = dataParseDef.modelType;\n\n  _.forOwn(dataParseDef, function (val, key) {\n    if (key === 'props') {\n      _.forOwn(val, function (propDef, propId) {\n        serverVMO.props[propId] = {};\n        Object.assign(serverVMO.props[propId], propDef);\n        serverVMO.props[propId].displayName = propDef.displayName || propDef.name;\n        serverVMO.props[propId].propType = getPropertyType(propDef.type, propDef.isArray);\n        serverVMO.props[propId].isArray = propDef.isArray === true;\n        serverVMO.props[propId].displayValue = _.isArray(propDef.displayValue) ? propDef.displayValue : [propDef.displayValue];\n\n        if (propDef.isArray === true) {\n          serverVMO.props[propId].value = _.isArray(propDef.value) ? propDef.value : [propDef.value];\n        } else {\n          serverVMO.props[propId].value = propDef.value;\n        }\n      });\n    }\n  });\n\n  return viewModelObjectService.constructViewModelObject(serverVMO, true);\n};\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param { Object } cellProperties - object of cellProperties to consider.\n * @return { Object } Object if values after replacement of any strings.\n */\n\n\nvar _convertUTCTimeValues = function (cellProperties) {\n  for (var prop in cellProperties) {\n    if (Object.prototype.hasOwnProperty.call(cellProperties, prop)) {\n      var value = cellProperties[prop].value;\n      var markerNdx = value ? value.indexOf(UTC_DATE_TIME_MARKER) : -1;\n\n      if (markerNdx !== -1) {\n        var prefix = value.substring(0, markerNdx);\n        var utc = value.substring(markerNdx + UTC_DATE_TIME_MARKER.length);\n        var date = new Date(utc);\n        cellProperties[prop].value = prefix + dateTimeSvc.formatSessionDateTime(date);\n      }\n    }\n  }\n\n  return cellProperties;\n};\n/**\n * Convert one single response object to afx object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {Object} dataParseDefinition - The data parse definition\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @returns {Object} - vmo containing view model properties\n */\n\n\nvar convertResponseObjToVMO = function (declViewModel, dataParseDefinition, dataCtxNode, depModuleObj) {\n  var functionsList = declViewModel.getFunctions();\n\n  var dataParseDef = _.cloneDeep(dataParseDefinition);\n\n  declarativeDataCtxSvc.applyScope(declViewModel, dataParseDef, functionsList, dataCtxNode, depModuleObj);\n  var viewModelObject = constructViewModelObject(dataParseDef);\n\n  _.forOwn(dataParseDef, function (val, key) {\n    if (key === 'props') {\n      _.forOwn(val, function (propDef, propId) {\n        if (propDef.dataProvider && declViewModel.dataProviders) {\n          viewModelObject.props[propId].dataProvider = declViewModel.dataProviders[propDef.dataProvider];\n          uwPropertySvc.setHasLov(viewModelObject.props[propId], true);\n          viewModelObject.props[propId].emptyLOVEntry = propDef.emptyLOVEntry;\n          viewModelObject.props[propId].isSelectOnly = propDef.isSelectOnly;\n        }\n\n        viewModelObject.props[propId].getViewModel = function () {\n          return declViewModel;\n        };\n\n        if (viewModelObject.props[propId].type === 'DATE') {\n          viewModelObject.props[propId].dateApi = viewModelObject.props[propId].dateApi || {};\n          viewModelObject.props[propId].dateApi.isDateEnabled = true;\n          viewModelObject.props[propId].dateApi.isTimeEnabled = false;\n\n          if (propDef.type === 'DATETIME') {\n            viewModelObject.props[propId].dateApi.isTimeEnabled = true;\n          }\n        }\n      });\n    } else {\n      viewModelObject[key] = val;\n    }\n  });\n\n  if (viewModelObject && viewModelObject.indicators) {\n    var indicators = visualIndicatorSvc.getIndicatorFromJSON(viewModelObject.indicators);\n\n    if (indicators.length > 0) {\n      viewModelObject.indicators = indicators;\n    }\n  }\n\n  if (viewModelObject && viewModelObject.cellProperties) {\n    var cellProperties = _convertUTCTimeValues(viewModelObject.cellProperties);\n\n    if (cellProperties) {\n      viewModelObject.cellProperties = cellProperties;\n    }\n  }\n  /** revisitme Shaishav\n   * Hint: We need to bring aw icon service\n  if( viewModelObject && !viewModelObject.typeIconURL ) {\n      var typeIconURL = awIconSvc.getTypeIconFileUrl( viewModelObject );\n      if( typeIconURL ) {\n          viewModelObject.typeIconURL = typeIconURL;\n      }\n  }\n   if( !viewModelObject.thumbnailURL ) {\n      var thumbnailURL = awIconSvc.getThumbnailFileUrl( viewModelObject );\n      if( thumbnailURL ) {\n          viewModelObject.thumbnailURL = thumbnailURL;\n      }\n  }\n  */\n\n\n  viewModelObject.hasThumbnail = !declUtils.isNil(dataParseDef.thumbnailURL); // Set thumbnail flag\n\n  return viewModelObject;\n};\n/**\n * Apply the DataParseDefinitions to an array of response objects (as returned from a server).\n * This returns an array of objects which are consumable by various afx widgets.\n *\n * @param {Object} sourceObj - The object to apply dataParseDefinitions\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {ObjectArray} actionDataParsers - The dataParseDefinitions.\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @return {Object} - the modified sourceObj with dataParseDefinition applied\n */\n\n\nexport let applyDataParseDefinitions = function (sourceObj, declViewModel, actionDataParsers, dataCtxNode, depModuleObj) {\n  if (!_.isArray(actionDataParsers)) {\n    return sourceObj;\n  }\n\n  if (logger.isDeclarativeLogEnabled()) {\n    debugService.debugPreProcessingDataParser(sourceObj, declViewModel, actionDataParsers, dataCtxNode);\n  }\n\n  _.forEach(actionDataParsers, function (actionDpd) {\n    var dataParseDefinition = declViewModel.getDataParseDefinition(actionDpd.id);\n\n    if (_.isUndefined(dataParseDefinition)) {\n      logger.warn('Missing DataParseDefinition with id ' + actionDpd.id + ' in DeclViewModel');\n      return;\n    }\n\n    if (dataParseDefinition.typeHierarchy) {\n      dataParseDefinition.modelType = {\n        typeHierarchyArray: '{{response.typeHierarchy}}'\n      };\n    }\n\n    var responseObjsPath = actionDpd.responseObjs;\n\n    var responseObjs = _.get(sourceObj, responseObjsPath);\n\n    debugService.debug('dataParsers', declViewModel._internal.panelId, actionDpd.id, responseObjs);\n    var afxObjects = null;\n\n    if (_.isArray(responseObjs)) {\n      afxObjects = [];\n\n      _.forEach(responseObjs, function (responseObj) {\n        dataCtxNode.response = responseObj;\n        dataCtxNode.i18n = dataCtxNode.i18n || dataCtxNode.data.i18n;\n        var afxObject = convertResponseObjToVMO(declViewModel, dataParseDefinition, dataCtxNode, depModuleObj);\n        delete dataCtxNode.response;\n        afxObjects.push(afxObject);\n      });\n    } else if (_.isObject(responseObjs)) {\n      dataCtxNode.response = responseObjs;\n      afxObjects = convertResponseObjToVMO(declViewModel, dataParseDefinition, dataCtxNode, depModuleObj);\n      delete dataCtxNode.response;\n    }\n\n    _.set(sourceObj, responseObjsPath, afxObjects);\n  });\n\n  if (logger.isDeclarativeLogEnabled()) {\n    debugService.debugPostProcessingDataParser(sourceObj, declViewModel, actionDataParsers, dataCtxNode);\n  }\n\n  return sourceObj;\n};\nexports = {\n  applyDataParseDefinitions\n};\nexport default exports;","map":{"version":3,"names":["declarativeDataCtxSvc","viewModelObjectService","uwPropertySvc","visualIndicatorSvc","dateTimeSvc","_","logger","declUtils","debugService","UTC_DATE_TIME_MARKER","exports","isValidPropType","type","test","isValidArrayPropType","getPropertyType","propType","isArray","toUpperCase","warn","uuidv4","replace","c","r","Math","random","v","toString","constructViewModelObject","dataParseDef","serverVMO","props","uid","identifier","modelType","forOwn","val","key","propDef","propId","Object","assign","displayName","name","displayValue","value","_convertUTCTimeValues","cellProperties","prop","prototype","hasOwnProperty","call","markerNdx","indexOf","prefix","substring","utc","length","date","Date","formatSessionDateTime","convertResponseObjToVMO","declViewModel","dataParseDefinition","dataCtxNode","depModuleObj","functionsList","getFunctions","cloneDeep","applyScope","viewModelObject","dataProvider","dataProviders","setHasLov","emptyLOVEntry","isSelectOnly","getViewModel","dateApi","isDateEnabled","isTimeEnabled","indicators","getIndicatorFromJSON","hasThumbnail","isNil","thumbnailURL","applyDataParseDefinitions","sourceObj","actionDataParsers","isDeclarativeLogEnabled","debugPreProcessingDataParser","forEach","actionDpd","getDataParseDefinition","id","isUndefined","typeHierarchy","typeHierarchyArray","responseObjsPath","responseObjs","get","debug","_internal","panelId","afxObjects","responseObj","response","i18n","data","afxObject","push","isObject","set","debugPostProcessingDataParser"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dataMapperService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module provides methods to process data parse configurations in the Declarative View Model\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined in this module is\n * injected by AngularJS.\n *\n * @module js/dataMapperService\n */\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\n/** revisitme Shaishav\n * Hint: We need to bring following services\nimport awIconSvc from 'js/awIconService';\n*/\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport debugService from 'js/debugService';\n\n/**\n * Cached reference to dependent services\n */\n\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specific format.\n *\n * @private\n */\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\nvar exports = {};\n/**\n * Check if valid prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\nvar isValidPropType = function( type ) {\n    return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)$/.test( type );\n};\n/**\n * Check if valid array prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\nvar isValidArrayPropType = function( type ) {\n    return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)ARRAY$/.test( type );\n};\n/**\n * @param {String} propType - The property type\n * @param {Boolean} isArray - If the property is of array type\n * @returns {String} - The correct property type\n */\nvar getPropertyType = function( propType, isArray ) {\n    propType = propType.toUpperCase();\n    if( isArray ) {\n        if( isValidArrayPropType( propType ) ) {\n            return propType;\n        } else if( isValidPropType( propType ) ) {\n            return propType + 'ARRAY';\n        }\n    } else {\n        if( isValidPropType( propType ) ) {\n            return propType;\n        }\n    }\n\n    logger.warn( 'Unknown property type ' + propType );\n    return 'UNKNOWN';\n};\n\nconst uuidv4 = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, function( c ) {\n        // eslint-disable-next-line no-bitwise\n        const r = Math.random() * 16 | 0;\n        // eslint-disable-next-line no-bitwise\n        const v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString( 16 );\n    } );\n};\n\n/**\n * Convert one single response object to VMO\n * @param {Object} dataParseDef - The data parse definition\n * @returns {Object} - VMO containing view model properties\n */\nvar constructViewModelObject = function( dataParseDef ) {\n    var serverVMO = {\n        props: {}\n    };\n    serverVMO.uid = dataParseDef.identifier || uuidv4();\n    serverVMO.type = dataParseDef.type;\n    serverVMO.modelType = dataParseDef.modelType;\n    _.forOwn( dataParseDef, function( val, key ) {\n        if( key === 'props' ) {\n            _.forOwn( val, function( propDef, propId ) {\n                serverVMO.props[ propId ] = {};\n                Object.assign( serverVMO.props[ propId ], propDef );\n                serverVMO.props[ propId ].displayName = propDef.displayName || propDef.name;\n                serverVMO.props[ propId ].propType = getPropertyType( propDef.type, propDef.isArray );\n                serverVMO.props[ propId ].isArray = propDef.isArray === true;\n                serverVMO.props[ propId ].displayValue = _.isArray( propDef.displayValue ) ? propDef.displayValue : [ propDef.displayValue ];\n                if( propDef.isArray === true ) {\n                    serverVMO.props[ propId ].value = _.isArray( propDef.value ) ? propDef.value : [ propDef.value ];\n                } else {\n                    serverVMO.props[ propId ].value = propDef.value;\n                }\n            } );\n        }\n    } );\n    return viewModelObjectService.constructViewModelObject( serverVMO, true );\n};\n\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param { Object } cellProperties - object of cellProperties to consider.\n * @return { Object } Object if values after replacement of any strings.\n */\nvar _convertUTCTimeValues = function( cellProperties ) {\n    for( var prop in cellProperties ) {\n        if( Object.prototype.hasOwnProperty.call( cellProperties, prop ) ) {\n            var value = cellProperties[ prop ].value;\n\n            var markerNdx = value ? value.indexOf( UTC_DATE_TIME_MARKER ) : -1;\n\n            if( markerNdx !== -1 ) {\n                var prefix = value.substring( 0, markerNdx );\n                var utc = value.substring( markerNdx + UTC_DATE_TIME_MARKER.length );\n\n                var date = new Date( utc );\n                cellProperties[ prop ].value = prefix + dateTimeSvc.formatSessionDateTime( date );\n            }\n        }\n    }\n    return cellProperties;\n};\n/**\n * Convert one single response object to afx object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {Object} dataParseDefinition - The data parse definition\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @returns {Object} - vmo containing view model properties\n */\nvar convertResponseObjToVMO = function( declViewModel, dataParseDefinition, dataCtxNode, depModuleObj ) {\n    var functionsList = declViewModel.getFunctions();\n    var dataParseDef = _.cloneDeep( dataParseDefinition );\n    declarativeDataCtxSvc.applyScope( declViewModel, dataParseDef, functionsList, dataCtxNode, depModuleObj );\n    var viewModelObject = constructViewModelObject( dataParseDef );\n    _.forOwn( dataParseDef, function( val, key ) {\n        if( key === 'props' ) {\n            _.forOwn( val, function( propDef, propId ) {\n                if( propDef.dataProvider && declViewModel.dataProviders ) {\n                    viewModelObject.props[ propId ].dataProvider = declViewModel.dataProviders[propDef.dataProvider];\n                    uwPropertySvc.setHasLov( viewModelObject.props[ propId ], true );\n                    viewModelObject.props[ propId ].emptyLOVEntry = propDef.emptyLOVEntry;\n                    viewModelObject.props[ propId ].isSelectOnly = propDef.isSelectOnly;\n                }\n                viewModelObject.props[ propId ].getViewModel = function() {\n                    return declViewModel;\n                };\n                if( viewModelObject.props[ propId ].type === 'DATE' ) {\n                    viewModelObject.props[ propId ].dateApi = viewModelObject.props[ propId ].dateApi || {};\n                    viewModelObject.props[ propId ].dateApi.isDateEnabled = true;\n                    viewModelObject.props[ propId ].dateApi.isTimeEnabled = false;\n                    if( propDef.type === 'DATETIME' ) {\n                        viewModelObject.props[ propId ].dateApi.isTimeEnabled = true;\n                    }\n                }\n            } );\n        } else {\n            viewModelObject[ key ] = val;\n        }\n    } );\n\n    if( viewModelObject && viewModelObject.indicators ) {\n        var indicators = visualIndicatorSvc.getIndicatorFromJSON( viewModelObject.indicators );\n        if( indicators.length > 0 ) {\n            viewModelObject.indicators = indicators;\n        }\n    }\n\n    if( viewModelObject && viewModelObject.cellProperties ) {\n        var cellProperties = _convertUTCTimeValues( viewModelObject.cellProperties );\n        if( cellProperties ) {\n            viewModelObject.cellProperties = cellProperties;\n        }\n    }\n\n    /** revisitme Shaishav\n     * Hint: We need to bring aw icon service\n    if( viewModelObject && !viewModelObject.typeIconURL ) {\n        var typeIconURL = awIconSvc.getTypeIconFileUrl( viewModelObject );\n        if( typeIconURL ) {\n            viewModelObject.typeIconURL = typeIconURL;\n        }\n    }\n\n    if( !viewModelObject.thumbnailURL ) {\n        var thumbnailURL = awIconSvc.getThumbnailFileUrl( viewModelObject );\n        if( thumbnailURL ) {\n            viewModelObject.thumbnailURL = thumbnailURL;\n        }\n    }\n    */\n\n    viewModelObject.hasThumbnail = !declUtils.isNil( dataParseDef.thumbnailURL ); // Set thumbnail flag\n    return viewModelObject;\n};\n/**\n * Apply the DataParseDefinitions to an array of response objects (as returned from a server).\n * This returns an array of objects which are consumable by various afx widgets.\n *\n * @param {Object} sourceObj - The object to apply dataParseDefinitions\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {ObjectArray} actionDataParsers - The dataParseDefinitions.\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @return {Object} - the modified sourceObj with dataParseDefinition applied\n */\nexport let applyDataParseDefinitions = function( sourceObj, declViewModel, actionDataParsers, dataCtxNode, depModuleObj ) {\n    if( !_.isArray( actionDataParsers ) ) {\n        return sourceObj;\n    }\n    if( logger.isDeclarativeLogEnabled() ) {\n        debugService.debugPreProcessingDataParser( sourceObj, declViewModel, actionDataParsers, dataCtxNode );\n    }\n    _.forEach( actionDataParsers, function( actionDpd ) {\n        var dataParseDefinition = declViewModel.getDataParseDefinition( actionDpd.id );\n        if( _.isUndefined( dataParseDefinition ) ) {\n            logger.warn( 'Missing DataParseDefinition with id ' + actionDpd.id + ' in DeclViewModel' );\n            return;\n        }\n        if( dataParseDefinition.typeHierarchy ) {\n            dataParseDefinition.modelType = { typeHierarchyArray: '{{response.typeHierarchy}}' };\n        }\n        var responseObjsPath = actionDpd.responseObjs;\n        var responseObjs = _.get( sourceObj, responseObjsPath );\n        debugService.debug( 'dataParsers', declViewModel._internal.panelId, actionDpd.id, responseObjs );\n        var afxObjects = null;\n        if( _.isArray( responseObjs ) ) {\n            afxObjects = [];\n            _.forEach( responseObjs, function( responseObj ) {\n                dataCtxNode.response = responseObj;\n                dataCtxNode.i18n = dataCtxNode.i18n || dataCtxNode.data.i18n;\n                var afxObject = convertResponseObjToVMO( declViewModel, dataParseDefinition, dataCtxNode, depModuleObj );\n                delete dataCtxNode.response;\n                afxObjects.push( afxObject );\n            } );\n        } else if( _.isObject( responseObjs ) ) {\n            dataCtxNode.response = responseObjs;\n            afxObjects = convertResponseObjToVMO( declViewModel, dataParseDefinition, dataCtxNode, depModuleObj );\n            delete dataCtxNode.response;\n        }\n        _.set( sourceObj, responseObjsPath, afxObjects );\n    } );\n    if( logger.isDeclarativeLogEnabled() ) {\n        debugService.debugPostProcessingDataParser( sourceObj, declViewModel, actionDataParsers, dataCtxNode );\n    }\n    return sourceObj;\n};\n\nexports = {\n    applyDataParseDefinitions\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
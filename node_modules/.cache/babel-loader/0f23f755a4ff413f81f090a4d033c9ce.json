{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to find the alternate object for a given model object\n *\n * @module js/adapterService\n * @namespace adapterService\n */\nimport adapterParser from 'js/adapterParserService';\nimport assert from 'js/assert';\nimport cfgSvc from 'js/configurationService';\nlet exports;\n\nlet _adapterConfigObject;\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Boolean} isFullyAdapted - if object should be recursively adapted\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */\n\n\nexport let getAdaptedObjects = function (sourceObjects, isFullyAdapted) {\n  assert(_adapterConfigObject, 'The Adapter Config service is not loaded');\n  return adapterParser.getAdaptedObjects(sourceObjects, _adapterConfigObject, isFullyAdapted);\n};\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * This is a blocking call and assumes that the underlying property on current object is already loaded and available\n * in cdm for the adapter service to fetch the adapted object. This function does not perform soa call neither does it\n * support capability to invoke functions from dependent modules\n *\n * @param {Array} sourceObjects - source objects\n * @return {Array} Adapted objects\n */\n\nexport let getAdaptedObjectsSync = function (sourceObjects) {\n  assert(_adapterConfigObject, 'The Adapter Config service is not loaded');\n  return adapterParser.getAdaptedObjectsSync(sourceObjects, _adapterConfigObject);\n};\n/**\n * This method apply and evaluate the conditions on the source object and returns boolean value accordingly.\n *\n * @param {Object} sourceObject - source object\n * @return {Object} verdict object\n */\n\nexport let applyConditions = function (sourceObject) {\n  adapterParser.setConfiguration(_adapterConfigObject);\n  return adapterParser.applyConditions(sourceObject);\n};\nexport let loadConfiguration = async function () {\n  await cfgSvc.getCfg('adapters').then(adapters => {\n    _adapterConfigObject = adapters;\n  });\n};\nexports = {\n  getAdaptedObjects,\n  getAdaptedObjectsSync,\n  applyConditions,\n  loadConfiguration\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"names":["adapterParser","assert","cfgSvc","exports","_adapterConfigObject","getAdaptedObjects","sourceObjects","isFullyAdapted","getAdaptedObjectsSync","applyConditions","sourceObject","setConfiguration","loadConfiguration","getCfg","then","adapters"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/adapterService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to find the alternate object for a given model object\n *\n * @module js/adapterService\n * @namespace adapterService\n */\nimport adapterParser from 'js/adapterParserService';\nimport assert from 'js/assert';\nimport cfgSvc from 'js/configurationService';\n\nlet exports;\n\nlet _adapterConfigObject;\n\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Boolean} isFullyAdapted - if object should be recursively adapted\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */\nexport let getAdaptedObjects = function( sourceObjects, isFullyAdapted ) {\n    assert( _adapterConfigObject, 'The Adapter Config service is not loaded' );\n    return adapterParser.getAdaptedObjects( sourceObjects, _adapterConfigObject, isFullyAdapted );\n};\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * This is a blocking call and assumes that the underlying property on current object is already loaded and available\n * in cdm for the adapter service to fetch the adapted object. This function does not perform soa call neither does it\n * support capability to invoke functions from dependent modules\n *\n * @param {Array} sourceObjects - source objects\n * @return {Array} Adapted objects\n */\nexport let getAdaptedObjectsSync = function( sourceObjects ) {\n    assert( _adapterConfigObject, 'The Adapter Config service is not loaded' );\n    return adapterParser.getAdaptedObjectsSync( sourceObjects, _adapterConfigObject );\n};\n\n/**\n * This method apply and evaluate the conditions on the source object and returns boolean value accordingly.\n *\n * @param {Object} sourceObject - source object\n * @return {Object} verdict object\n */\nexport let applyConditions = function( sourceObject ) {\n    adapterParser.setConfiguration( _adapterConfigObject );\n    return adapterParser.applyConditions( sourceObject );\n};\n\nexport let loadConfiguration = async function() {\n    await cfgSvc.getCfg( 'adapters' ).then( adapters => {\n        _adapterConfigObject = adapters;\n    } );\n};\n\nexports = {\n    getAdaptedObjects,\n    getAdaptedObjectsSync,\n    applyConditions,\n    loadConfiguration\n};\nexport default exports;\n\nloadConfiguration();\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,yBAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,IAAIC,OAAJ;;AAEA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIC,iBAAiB,GAAG,UAAUC,aAAV,EAAyBC,cAAzB,EAA0C;EACrEN,MAAM,CAAEG,oBAAF,EAAwB,0CAAxB,CAAN;EACA,OAAOJ,aAAa,CAACK,iBAAd,CAAiCC,aAAjC,EAAgDF,oBAAhD,EAAsEG,cAAtE,CAAP;AACH,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,qBAAqB,GAAG,UAAUF,aAAV,EAA0B;EACzDL,MAAM,CAAEG,oBAAF,EAAwB,0CAAxB,CAAN;EACA,OAAOJ,aAAa,CAACQ,qBAAd,CAAqCF,aAArC,EAAoDF,oBAApD,CAAP;AACH,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIK,eAAe,GAAG,UAAUC,YAAV,EAAyB;EAClDV,aAAa,CAACW,gBAAd,CAAgCP,oBAAhC;EACA,OAAOJ,aAAa,CAACS,eAAd,CAA+BC,YAA/B,CAAP;AACH,CAHM;AAKP,OAAO,IAAIE,iBAAiB,GAAG,kBAAiB;EAC5C,MAAMV,MAAM,CAACW,MAAP,CAAe,UAAf,EAA4BC,IAA5B,CAAkCC,QAAQ,IAAI;IAChDX,oBAAoB,GAAGW,QAAvB;EACH,CAFK,CAAN;AAGH,CAJM;AAMPZ,OAAO,GAAG;EACNE,iBADM;EAENG,qBAFM;EAGNC,eAHM;EAING;AAJM,CAAV;AAMA,eAAeT,OAAf;AAEAS,iBAAiB"},"metadata":{},"sourceType":"module"}
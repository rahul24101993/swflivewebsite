{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * This service is used for triggering drag and click event for PL Table without conflict\n *\n * @module js/splmTableDragHandler\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport Const from 'js/splmTableConstants';\nimport util from 'js/splmTableUtils';\nvar exports = {};\n\nvar _dragEventHandler = function (e) {\n  // NOTE: pute every variable's inside this scope for isolation\n  var _elem = e.currentTarget; // NOTE: This number is based on manual testing. We can adjust it at any time.\n\n  var _clickInterval = 160; // For stopping cursor change from darg-and-drop service\n\n  var _cursorMutexListener = function (mutexEvent) {\n    if (mutexEvent.originalEvent) {\n      mutexEvent = mutexEvent.originalEvent;\n    }\n\n    mutexEvent.preventDefault();\n    return false;\n  };\n\n  var _onDragListener = function (dragEvent) {\n    if (dragEvent.originalEvent) {\n      dragEvent = dragEvent.originalEvent;\n    }\n\n    dragEvent.preventDefault();\n    dragEvent.cancelBubble = true;\n\n    _elem.dispatchEvent(util.createCustomEvent(Const.EVENT_ON_ELEM_DRAG, dragEvent));\n  };\n\n  var _onDragEndListener = function (dragEndEvent) {\n    if (dragEndEvent.originalEvent) {\n      dragEndEvent = e.originalEvent;\n    }\n\n    dragEndEvent.preventDefault();\n    document.removeEventListener('mouseup', _onDragEndListener);\n    document.removeEventListener('mousemove', _onDragListener);\n    document.removeEventListener('mousedown', _cursorMutexListener);\n    document.removeEventListener('mouseover', _cursorMutexListener);\n    dragEndEvent.cancelBubble = true;\n\n    _elem.dispatchEvent(util.createCustomEvent(Const.EVENT_ON_ELEM_DRAG_END, dragEndEvent));\n  };\n\n  var _onDragStartListener = function (dragStartEvent) {\n    if (dragStartEvent.originalEvent) {\n      dragStartEvent = dragStartEvent.originalEvent;\n    }\n\n    dragStartEvent.preventDefault();\n    dragStartEvent.cancelBubble = true;\n    document.addEventListener('mouseup', _onDragEndListener);\n    document.addEventListener('mousemove', _onDragListener);\n    document.addEventListener('mousedown', _cursorMutexListener);\n    document.addEventListener('mouseover', _cursorMutexListener);\n\n    _elem.dispatchEvent(util.createCustomEvent(Const.EVENT_ON_ELEM_DRAG_START, dragStartEvent));\n  };\n\n  var handleOriginEvent = function (originEvent) {\n    var ticking = false;\n\n    var cleanClickTicking = function () {\n      _elem.removeEventListener('mouseup', cleanClickTicking);\n\n      ticking = false;\n    };\n\n    var setupClickTiking = function () {\n      ticking = true;\n\n      _elem.addEventListener('mouseup', cleanClickTicking);\n    };\n\n    setupClickTiking();\n    setTimeout(function () {\n      if (ticking === true) {\n        cleanClickTicking();\n\n        _onDragStartListener(originEvent);\n      }\n    }, _clickInterval);\n  };\n\n  handleOriginEvent(e);\n};\n\nexport let enableDragging = function (elem) {\n  elem.addEventListener('mousedown', _dragEventHandler);\n};\nexport let disableDragging = function (elem) {\n  elem.removeEventListener('mousedown', _dragEventHandler);\n};\n/**\n * Listen for DnD highlight/unhighlight event from dragAndDropService\n */\n\neventBus.subscribe('dragDropEvent.highlight', function (eventData) {\n  exports.handleDragDropHighlightPLTable(eventData);\n});\n\nvar applyStyleForTableDnD = function (tableElement, applyFlag, style) {\n  if (applyFlag) {\n    if (style) {\n      tableElement.classList.add(style);\n    } else {\n      tableElement.classList.add(Const.CLASS_THEME_DROP_FRAME);\n      tableElement.classList.add(Const.CLASS_WIDGETS_DROP_FRAME);\n    }\n  } else {\n    if (style) {\n      tableElement.classList.remove(style);\n    } else {\n      tableElement.classList.remove(Const.CLASS_THEME_DROP_FRAME);\n      tableElement.classList.remove(Const.CLASS_WIDGETS_DROP_FRAME);\n    }\n  }\n};\n\nvar applyStyleToChildrenForAllRows = function (pinnedOrScrollContainerList, isPCList, isGlobalArea, applyFlag) {\n  _.forEach(pinnedOrScrollContainerList, function (pcOrsc) {\n    if (pcOrsc.children) {\n      if (isGlobalArea) {\n        applyStyleForTableDnD(pcOrsc, applyFlag, Const.CLASS_DONOT_HIGHLIGHT_INDIVIDUAL_ROWS);\n      } else {\n        if (isPCList) {\n          applyStyleForTableDnD(pcOrsc, applyFlag, Const.CLASS_PINNED_CONTAINER_DROP_FRAME);\n        } else {\n          applyStyleForTableDnD(pcOrsc, applyFlag, Const.CLASS_SCROLL_CONTAINER_DROP_FRAME);\n        }\n      }\n\n      _.forEach(pcOrsc.children, function (eachPcOrSc) {\n        if (isGlobalArea) {\n          applyStyleForTableDnD(eachPcOrSc, applyFlag, Const.CLASS_DONOT_HIGHLIGHT_INDIVIDUAL_ROWS);\n        } else {\n          applyStyleForTableDnD(eachPcOrSc, applyFlag);\n        }\n      });\n    }\n  });\n};\n/**\n * Add/Remove the widget  class to the elements of splm table that need highlighting/unhighlighting.\n * @param {DOMElement} rowOrTableElement - The element the mouse is over when the event was fired.\n * @param {Boolean} isHighlightFlag - add or remove the highlight class\n * @param {Boolean} isGlobalArea - is the object drag target over global invalid area or not\n */\n\n\nvar _setHoverStyle = function (rowOrTableElement, isHighlightFlag, isGlobalArea) {\n  var splmTablePinnedContainer = null;\n  var splmTableScrollContainer = null;\n\n  if (!isGlobalArea) {\n    // target on table row\n    // find the closest div holding splm table container\n    var splmTable = util.closestElement(rowOrTableElement, '.aw-splm-table');\n    splmTablePinnedContainer = splmTable.querySelector('.aw-splm-tablePinnedContainer');\n    splmTableScrollContainer = splmTable.querySelector('.aw-splm-tableScrollContainer');\n    var rowIndex = parseInt(rowOrTableElement.getAttribute('data-indexnumber'));\n  } else {\n    applyStyleForTableDnD(rowOrTableElement, isHighlightFlag);\n    splmTablePinnedContainer = rowOrTableElement.querySelector('.aw-splm-tablePinnedContainer');\n    splmTableScrollContainer = rowOrTableElement.querySelector('.aw-splm-tableScrollContainer');\n  }\n\n  if (splmTablePinnedContainer && splmTableScrollContainer) {\n    var pcList = [];\n    var scList = [];\n    var eachRowPC;\n    var eachRowSC;\n\n    if (!_.isUndefined(rowIndex)) {\n      // target on table row\n      pcList = splmTablePinnedContainer.querySelectorAll('div.ui-grid-row[data-indexnumber=\\'' + rowIndex + '\\']');\n\n      if (pcList && pcList.length > 0) {\n        eachRowPC = pcList[0];\n      }\n\n      scList = splmTableScrollContainer.querySelectorAll('div.ui-grid-row[data-indexnumber=\\'' + rowIndex + '\\']');\n\n      if (scList && scList.length > 0) {\n        eachRowSC = scList[0];\n      }\n    } else {\n      // target on white area\n      pcList = splmTablePinnedContainer.querySelectorAll('div.ui-grid-row');\n      scList = splmTableScrollContainer.querySelectorAll('div.ui-grid-row');\n    } // highlight every single row with borders ; this will not be required when drag is over an invalid/white area\n    // when over an invalid/white area , border-color will not be required for every single table row ; but only on splm-table-container\n\n\n    if (!isGlobalArea && !_.isUndefined(rowIndex) && eachRowPC && eachRowSC) {\n      // target on table row\n      applyStyleForTableDnD(eachRowPC, isHighlightFlag);\n      applyStyleForTableDnD(eachRowSC, isHighlightFlag);\n    }\n\n    applyStyleToChildrenForAllRows(pcList, true, isGlobalArea, isHighlightFlag);\n    applyStyleToChildrenForAllRows(scList, false, isGlobalArea, isHighlightFlag);\n  }\n};\n\nexport let handleDragDropHighlightPLTable = function (eventData) {\n  if (!_.isUndefined(eventData) && !_.isUndefined(eventData.targetElement) && eventData.targetElement.classList) {\n    var isHighlightFlag = eventData.isHighlightFlag;\n    var target = eventData.targetElement;\n\n    if (isHighlightFlag) {\n      if (target.classList.contains(Const.CLASS_ROW)) {\n        _setHoverStyle(target, true, false);\n      } else if (target.classList.contains(Const.CLASS_TABLE)) {\n        // this is when current drag is on an invalid/white area\n        _setHoverStyle(target, true, true);\n      }\n    } else {\n      if (target.classList.contains(Const.CLASS_ROW)) {\n        _setHoverStyle(target, false, false);\n      } else if (target.classList.contains(Const.CLASS_TABLE)) {\n        // this is when current drag is on an invalid/white area\n        _setHoverStyle(target, false, true);\n      }\n    }\n  }\n};\nexports = {\n  enableDragging,\n  disableDragging,\n  handleDragDropHighlightPLTable\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableDragHandler.js"],"names":["exports","_dragEventHandler","_elem","e","_clickInterval","_cursorMutexListener","mutexEvent","_onDragListener","dragEvent","util","Const","_onDragEndListener","dragEndEvent","document","_onDragStartListener","dragStartEvent","handleOriginEvent","ticking","cleanClickTicking","setupClickTiking","setTimeout","enableDragging","elem","disableDragging","eventBus","applyStyleForTableDnD","tableElement","applyStyleToChildrenForAllRows","_","pcOrsc","_setHoverStyle","splmTablePinnedContainer","splmTableScrollContainer","splmTable","rowIndex","parseInt","rowOrTableElement","pcList","scList","eachRowPC","eachRowSC","handleDragDropHighlightPLTable","eventData","isHighlightFlag","target"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * This service is used for triggering drag and click event for PL Table without conflict\n *\n * @module js/splmTableDragHandler\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n import Const from 'js/splmTableConstants';\n import util from 'js/splmTableUtils';\n\nvar exports = {};\n\nvar _dragEventHandler = function( e ) {\n    // NOTE: pute every variable's inside this scope for isolation\n    var _elem = e.currentTarget;\n\n    // NOTE: This number is based on manual testing. We can adjust it at any time.\n    var _clickInterval = 160;\n\n    // For stopping cursor change from darg-and-drop service\n    var _cursorMutexListener = function( mutexEvent ) {\n        if( mutexEvent.originalEvent ) {\n            mutexEvent = mutexEvent.originalEvent;\n        }\n        mutexEvent.preventDefault();\n        return false;\n    };\n\n    var _onDragListener = function( dragEvent ) {\n        if( dragEvent.originalEvent ) {\n            dragEvent = dragEvent.originalEvent;\n        }\n        dragEvent.preventDefault();\n        dragEvent.cancelBubble = true;\n        _elem.dispatchEvent( util.createCustomEvent( Const.EVENT_ON_ELEM_DRAG, dragEvent ) );\n    };\n\n    var _onDragEndListener = function( dragEndEvent ) {\n        if( dragEndEvent.originalEvent ) {\n            dragEndEvent = e.originalEvent;\n        }\n        dragEndEvent.preventDefault();\n        document.removeEventListener( 'mouseup', _onDragEndListener );\n        document.removeEventListener( 'mousemove', _onDragListener );\n        document.removeEventListener( 'mousedown', _cursorMutexListener );\n        document.removeEventListener( 'mouseover', _cursorMutexListener );\n        dragEndEvent.cancelBubble = true;\n        _elem.dispatchEvent( util.createCustomEvent( Const.EVENT_ON_ELEM_DRAG_END, dragEndEvent ) );\n    };\n\n    var _onDragStartListener = function( dragStartEvent ) {\n        if( dragStartEvent.originalEvent ) {\n            dragStartEvent = dragStartEvent.originalEvent;\n        }\n        dragStartEvent.preventDefault();\n        dragStartEvent.cancelBubble = true;\n\n        document.addEventListener( 'mouseup', _onDragEndListener );\n        document.addEventListener( 'mousemove', _onDragListener );\n        document.addEventListener( 'mousedown', _cursorMutexListener );\n        document.addEventListener( 'mouseover', _cursorMutexListener );\n        _elem.dispatchEvent( util.createCustomEvent( Const.EVENT_ON_ELEM_DRAG_START, dragStartEvent ) );\n    };\n\n    var handleOriginEvent = function( originEvent ) {\n        var ticking = false;\n\n        var cleanClickTicking = function() {\n            _elem.removeEventListener( 'mouseup', cleanClickTicking );\n            ticking = false;\n        };\n\n        var setupClickTiking = function() {\n            ticking = true;\n            _elem.addEventListener( 'mouseup', cleanClickTicking );\n        };\n\n        setupClickTiking();\n        setTimeout( function() {\n            if( ticking === true ) {\n                cleanClickTicking();\n                _onDragStartListener( originEvent );\n            }\n        }, _clickInterval );\n    };\n\n    handleOriginEvent( e );\n};\n\nexport let enableDragging = function( elem ) {\n    elem.addEventListener( 'mousedown', _dragEventHandler );\n};\n\nexport let disableDragging = function( elem ) {\n    elem.removeEventListener( 'mousedown', _dragEventHandler );\n};\n\n/**\n * Listen for DnD highlight/unhighlight event from dragAndDropService\n */\neventBus.subscribe( 'dragDropEvent.highlight', function( eventData ) {\n    exports.handleDragDropHighlightPLTable( eventData );\n} );\n\nvar applyStyleForTableDnD = function( tableElement, applyFlag, style ) {\n    if( applyFlag ) {\n        if( style ) {\n            tableElement.classList.add( style );\n        } else {\n            tableElement.classList.add( Const.CLASS_THEME_DROP_FRAME );\n            tableElement.classList.add( Const.CLASS_WIDGETS_DROP_FRAME );\n        }\n    } else {\n        if( style ) {\n            tableElement.classList.remove( style );\n        } else {\n            tableElement.classList.remove( Const.CLASS_THEME_DROP_FRAME );\n            tableElement.classList.remove( Const.CLASS_WIDGETS_DROP_FRAME );\n        }\n    }\n};\n\nvar applyStyleToChildrenForAllRows = function( pinnedOrScrollContainerList, isPCList, isGlobalArea, applyFlag ) {\n    _.forEach( pinnedOrScrollContainerList, function( pcOrsc ) {\n        if( pcOrsc.children ) {\n            if( isGlobalArea ) {\n                applyStyleForTableDnD( pcOrsc, applyFlag, Const.CLASS_DONOT_HIGHLIGHT_INDIVIDUAL_ROWS );\n            } else {\n                if( isPCList ) {\n                    applyStyleForTableDnD( pcOrsc, applyFlag, Const.CLASS_PINNED_CONTAINER_DROP_FRAME );\n                } else {\n                    applyStyleForTableDnD( pcOrsc, applyFlag, Const.CLASS_SCROLL_CONTAINER_DROP_FRAME );\n                }\n            }\n            _.forEach( pcOrsc.children, function( eachPcOrSc ) {\n                if( isGlobalArea ) {\n                    applyStyleForTableDnD( eachPcOrSc, applyFlag, Const.CLASS_DONOT_HIGHLIGHT_INDIVIDUAL_ROWS );\n                } else {\n                    applyStyleForTableDnD( eachPcOrSc, applyFlag );\n                }\n            } );\n        }\n    } );\n};\n\n/**\n * Add/Remove the widget  class to the elements of splm table that need highlighting/unhighlighting.\n * @param {DOMElement} rowOrTableElement - The element the mouse is over when the event was fired.\n * @param {Boolean} isHighlightFlag - add or remove the highlight class\n * @param {Boolean} isGlobalArea - is the object drag target over global invalid area or not\n */\nvar _setHoverStyle = function( rowOrTableElement, isHighlightFlag, isGlobalArea ) {\n    var splmTablePinnedContainer = null;\n    var splmTableScrollContainer = null;\n    if( !isGlobalArea ) { // target on table row\n        // find the closest div holding splm table container\n        var splmTable = util.closestElement( rowOrTableElement, '.aw-splm-table' );\n        splmTablePinnedContainer = splmTable.querySelector( '.aw-splm-tablePinnedContainer' );\n        splmTableScrollContainer = splmTable.querySelector( '.aw-splm-tableScrollContainer' );\n        var rowIndex = parseInt( rowOrTableElement.getAttribute( 'data-indexnumber' ) );\n    } else {\n        applyStyleForTableDnD( rowOrTableElement, isHighlightFlag );\n        splmTablePinnedContainer = rowOrTableElement.querySelector( '.aw-splm-tablePinnedContainer' );\n        splmTableScrollContainer = rowOrTableElement.querySelector( '.aw-splm-tableScrollContainer' );\n    }\n    if( splmTablePinnedContainer && splmTableScrollContainer ) {\n        var pcList = [];\n        var scList = [];\n        var eachRowPC;\n        var eachRowSC;\n        if( !_.isUndefined( rowIndex ) ) { // target on table row\n            pcList = splmTablePinnedContainer.querySelectorAll( 'div.ui-grid-row[data-indexnumber=\\'' + rowIndex + '\\']' );\n            if( pcList && pcList.length > 0 ) {\n                eachRowPC = pcList[ 0 ];\n            }\n            scList = splmTableScrollContainer.querySelectorAll( 'div.ui-grid-row[data-indexnumber=\\'' + rowIndex + '\\']' );\n            if( scList && scList.length > 0 ) {\n                eachRowSC = scList[ 0 ];\n            }\n        } else { // target on white area\n            pcList = splmTablePinnedContainer.querySelectorAll( 'div.ui-grid-row' );\n            scList = splmTableScrollContainer.querySelectorAll( 'div.ui-grid-row' );\n        }\n        // highlight every single row with borders ; this will not be required when drag is over an invalid/white area\n        // when over an invalid/white area , border-color will not be required for every single table row ; but only on splm-table-container\n        if( !isGlobalArea && !_.isUndefined( rowIndex ) && eachRowPC && eachRowSC ) { // target on table row\n            applyStyleForTableDnD( eachRowPC, isHighlightFlag );\n            applyStyleForTableDnD( eachRowSC, isHighlightFlag );\n        }\n        applyStyleToChildrenForAllRows( pcList, true, isGlobalArea, isHighlightFlag );\n        applyStyleToChildrenForAllRows( scList, false, isGlobalArea, isHighlightFlag );\n    }\n};\n\nexport let handleDragDropHighlightPLTable = function( eventData ) {\n    if( !_.isUndefined( eventData ) && !_.isUndefined( eventData.targetElement ) && eventData.targetElement.classList ) {\n        var isHighlightFlag = eventData.isHighlightFlag;\n        var target = eventData.targetElement;\n\n        if( isHighlightFlag ) {\n            if( target.classList.contains( Const.CLASS_ROW ) ) {\n                _setHoverStyle( target, true, false );\n            } else if( target.classList.contains( Const.CLASS_TABLE ) ) { // this is when current drag is on an invalid/white area\n                _setHoverStyle( target, true, true );\n            }\n        } else {\n            if( target.classList.contains( Const.CLASS_ROW ) ) {\n                _setHoverStyle( target, false, false );\n            } else if( target.classList.contains( Const.CLASS_TABLE ) ) { // this is when current drag is on an invalid/white area\n                _setHoverStyle( target, false, true );\n            }\n        }\n    }\n};\n\nexports = {\n    enableDragging,\n    disableDragging,\n    handleDragDropHighlightPLTable\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
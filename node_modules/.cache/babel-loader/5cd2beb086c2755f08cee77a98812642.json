{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service manages the subscription and publishing of the events. It is based on the 'PostalJS' API.\n * <P>\n * For more details, see: {@link https://github.com/postaljs/postal.js|PostalJS}\n * <P>\n *\n * @module js/eventBus\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport postal from 'postal';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\n/**\n * {Boolean} TRUE if subscribe/unsubscribe activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusActivity' attribute in the current document's\n * URL.\n */\n\nvar _logActivity = false;\n/**\n * {Boolean} TRUE if the 'soa.getVisibleCommands' topic (a particularly high volume of subscribe/unsubscribe events)\n * should be logged to the console. FALSE if they should not be logged to allow lower volume issues to be more\n * easily traced.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusCommandVisibility' attribute in the current\n * document's URL.\n */\n\nvar _logCommandVisibility = false;\n/**\n * {Boolean} TRUE if 'publish' activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logPublishActivity' attribute in the current document's\n * URL.\n * <P>\n * Note: If the attribute has NO value, all publish event topic will be logged. If it has a value it is interpreted\n * as a comma separated list of topics to limit logging to.\n */\n\nvar _logPublishActivity;\n/**\n * {Boolean} TRUE if 'publish' activity from the client data model (cdm) should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logCdmPublishActivity' attribute in the current document's\n * URL.\n */\n\n\nvar _logCdmPublishActivity;\n/**\n * {StringArray} Topic names to limit logging to.\n */\n\n\nvar _logPublishActivityKeys;\n/**\n * {Map} Map of topic-to-active-topic-subcription-count (used only when _logActivity is TRUE).\n */\n\n\nvar _topic2CountMap = {};\n/**\n * {Map} Map of topic-to-published-count (used only when _logActivity is TRUE).\n */\n\nvar _topic2PublishCountMap = {};\n/**\n * Set debug options based on URL attributes.\n */\n\nvar urlAttrs = browserUtils.getUrlAttributes();\n_logActivity = urlAttrs.logEventBusActivity !== undefined;\n_logCommandVisibility = urlAttrs.logEventBusCommandVisibility !== undefined;\n\nif (urlAttrs.logPublishActivity !== undefined) {\n  _logPublishActivity = true;\n\n  if (!_.isEmpty(urlAttrs.logPublishActivity)) {\n    _logPublishActivityKeys = urlAttrs.logPublishActivity.split(',');\n  }\n}\n\n_logCdmPublishActivity = urlAttrs.logCdmPublishActivity !== undefined;\n/**\n * Add modeule objects to the given array.\n *\n * @param {String} msg - Message to append information to.\n * @param {ViewModelObjectArray} modelObjects - Array of modelObjects to append info for.\n *\n * @returns {String} A message string with new information lines appended.\n */\n\nfunction _appendModelObjects(msg, modelObjects) {\n  if (!_.isEmpty(modelObjects)) {\n    _.forEach(modelObjects, function (mo, ndx) {\n      var begLength = msg.length;\n      msg += '\\n';\n      msg += '  [';\n      msg += ndx;\n      msg += ']: type: ';\n      msg += mo.type;\n\n      for (var char = msg.length - begLength; char < 40; char++) {\n        msg += ' ';\n      }\n\n      msg += ' uid: ';\n      msg += mo.uid;\n    });\n  } else {\n    msg += '  (empty)';\n  }\n\n  return msg;\n} // _appendModelObjects\n\n/**\n * Increment/decrement count of subsriptions to the given topic.\n *\n * @param {String} topic -\n * @param {Number} increment -\n *\n * @returns {Number} Updated count for the given topic.\n */\n\n\nfunction _changeTopicSubscriptionCount(topic, increment) {\n  var count = _topic2CountMap[topic];\n\n  if (!count) {\n    count = 0;\n  }\n\n  var newCount = count + increment;\n  _topic2CountMap[topic] = newCount;\n  return newCount;\n}\n/**\n * Define public API\n * @ignore\n */\n\n\nvar exports = {};\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listeneing for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\n\nexport let subscribePostal = function (options) {\n  return exports.subscribeOnChannel(options);\n};\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listening for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\n\nexport let subscribeOnChannel = function (options) {\n  return postal.subscribe(options);\n};\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\n\nexport let publishPostal = function (envelope, cb) {\n  exports.publishOnChannel(envelope, cb);\n};\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\n\nexport let publishOnChannel = function (envelope, cb) {\n  postal.publish(envelope, cb);\n};\n/**\n * Subscribe to the given 'topic' on the event channel. When the event is published, the given function will\n * be invoked and passed the 'eventData'.\n *\n * @param {String} topic - Topic to subscribe to. A '#' character is interpreted as a wildcard.\n *\n * @param {Function} callbackFn - Function to be invoked and passed 'eventData' when the event is published.\n *\n * @param {String} subId - An optional ID to associate with this subscription.\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object. Needed while unsuscribing the event topic using {@link module:js/eventBus.unsubscribe|unsubscribe}.\n */\n\nexport let subscribe = function (topic, callbackFn, subId) {\n  var subDef = postal.subscribe({\n    channel: 'soajs',\n    topic: topic,\n    callback: callbackFn\n  });\n\n  if (_logActivity || _logPublishActivity) {\n    var count = _changeTopicSubscriptionCount(subDef.topic, 1);\n\n    if (_logActivity && (_logCommandVisibility || topic !== 'soa.getVisibleCommands')) {\n      if (subId) {\n        console.log('Subscribe Topic: \"' + topic + '\" count: ' + count + ' id: ' + subId); // eslint-disable-line no-console\n\n        subDef.id = subId;\n      } else {\n        console.log('Subscribe Topic: \"' + topic + '\" count: ' + count); // eslint-disable-line no-console\n      }\n    }\n  }\n\n  return subDef;\n};\n/**\n * Publish the given 'topic' on the event channel. The given 'eventData' will be passed to each subscribers\n * callback function.\n *\n * @param {String} topic - Topic to publish.\n * @param {Object} eventData - Optional data to pass to the subscribed callback functions.\n * @param {Boolean} isCustomEvent - true if event stated in *viewModel.json\n */\n\nexport let publish = function (topic, eventData, isCustomEvent) {\n  debugService.debug('globalEvents', topic);\n  var doLogging = false;\n\n  if (_logPublishActivity) {\n    if (_logCommandVisibility) {\n      doLogging = !/^(log|progress.start|progress.end|StartSaveAutoBookmarkEvent)$/.test(topic);\n    } else {\n      doLogging = !/^(log|progress.start|progress.end|soa.getVisibleCommands|StartSaveAutoBookmarkEvent)$/.test(topic);\n    }\n  }\n  /**\n   * Check if we are listing ALL or just a select few topics (and this topic is one)\n   */\n\n\n  if (doLogging && (!_logPublishActivityKeys || _.indexOf(_logPublishActivityKeys, topic) !== -1)) {\n    var msg = 'Publish Topic: ';\n    var nListeners = _topic2CountMap[topic] ? _topic2CountMap[topic] : 0;\n\n    if (nListeners === 0) {\n      msg += ' (!) ';\n    }\n\n    msg += topic;\n\n    if (eventData) {\n      if (eventData.name === 'state') {\n        msg += '  event: ';\n        msg += JSON.stringify(eventData, ['name', 'target']);\n        msg += ' value: ';\n\n        _.forEach(eventData.value.params, function (value, name) {\n          if (value) {\n            var msg2 = '';\n            msg2 += '\\n';\n            msg2 += name;\n\n            while (msg2.length < 15) {\n              msg2 += ' ';\n            }\n\n            msg2 += ' = ';\n            msg2 += '\"';\n            msg2 += value;\n            msg2 += '\"';\n            msg += msg2;\n          }\n        });\n\n        msg += '\\n';\n      } else if (eventData.name === 'selected' || eventData.name === 'pselected') {\n        msg += '  event: ';\n        msg += JSON.stringify(eventData, ['name', 'target']);\n        msg += '  selected: ';\n        msg += eventData.value;\n      } else if (_logCdmPublishActivity) {\n        if (topic === 'cdm.new') {\n          msg = _appendModelObjects(msg, eventData.newObjects);\n        } else if (topic === 'cdm.modified') {\n          msg = _appendModelObjects(msg, eventData.modifiedObjects);\n        } else if (topic === 'cdm.updated' || topic === 'cdm.modified') {\n          msg = _appendModelObjects(msg, eventData.updatedObjects);\n        }\n      } else if (topic === 'primaryWorkArea.selectionChangeEvent') {\n        msg += '  selection: ';\n        msg += JSON.stringify(eventData.selectionModel.getSelection());\n      } else {\n        msg += '  event: ';\n        msg += JSON.stringify(eventData, ['name', 'target']);\n      }\n    }\n\n    if (nListeners > 0) {\n      msg += '  nListeners: ';\n      msg += nListeners;\n    }\n\n    if (_topic2PublishCountMap[topic]) {\n      _topic2PublishCountMap[topic]++;\n    } else {\n      _topic2PublishCountMap[topic] = 1;\n    }\n\n    msg += '  totalCount: ';\n    msg += _topic2PublishCountMap[topic];\n    console.log(msg); // eslint-disable-line no-console\n  }\n\n  if (!isCustomEvent && logger.isDeclarativeLogEnabled()) {\n    debugService.debugEventPub({}, {\n      name: topic\n    }, {\n      panelId: 'SystemEvent'\n    }, {}, eventData);\n  }\n\n  postal.publish({\n    channel: 'soajs',\n    topic: topic,\n    data: eventData\n  });\n};\n/**\n * Removes the given subscription from the event channel so that the callback will no longer be invoked.\n *\n * @param {Object} subDef - A 'PostalJS' SubscriptionDefinition object returned by {@link module:js/eventBus.subscribe|subscribe}\n */\n\nexport let unsubscribe = function (subDef) {\n  if (_logActivity || _logPublishActivity) {\n    var count = _changeTopicSubscriptionCount(subDef.topic, -1);\n\n    if (_logActivity && (_logCommandVisibility || subDef.topic !== 'soa.getVisibleCommands')) {\n      if (subDef.id) {\n        console.log('   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count + // eslint-disable-line no-console\n        ' id: ' + subDef.id);\n      } else {\n        console.log('   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count); // eslint-disable-line no-console\n      }\n    }\n  }\n\n  postal.unsubscribe(subDef);\n};\nlogger.setEventBus(exports);\nexports = {\n  subscribePostal,\n  subscribeOnChannel,\n  publishPostal,\n  publishOnChannel,\n  subscribe,\n  publish,\n  unsubscribe\n};\nexport default exports;","map":{"version":3,"names":["_","postal","browserUtils","logger","debugService","_logActivity","_logCommandVisibility","_logPublishActivity","_logCdmPublishActivity","_logPublishActivityKeys","_topic2CountMap","_topic2PublishCountMap","urlAttrs","getUrlAttributes","logEventBusActivity","undefined","logEventBusCommandVisibility","logPublishActivity","isEmpty","split","logCdmPublishActivity","_appendModelObjects","msg","modelObjects","forEach","mo","ndx","begLength","length","type","char","uid","_changeTopicSubscriptionCount","topic","increment","count","newCount","exports","subscribePostal","options","subscribeOnChannel","subscribe","publishPostal","envelope","cb","publishOnChannel","publish","callbackFn","subId","subDef","channel","callback","console","log","id","eventData","isCustomEvent","debug","doLogging","test","indexOf","nListeners","name","JSON","stringify","value","params","msg2","newObjects","modifiedObjects","updatedObjects","selectionModel","getSelection","isDeclarativeLogEnabled","debugEventPub","panelId","data","unsubscribe","setEventBus"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/eventBus.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service manages the subscription and publishing of the events. It is based on the 'PostalJS' API.\n * <P>\n * For more details, see: {@link https://github.com/postaljs/postal.js|PostalJS}\n * <P>\n *\n * @module js/eventBus\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport postal from 'postal';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\n\n/**\n * {Boolean} TRUE if subscribe/unsubscribe activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusActivity' attribute in the current document's\n * URL.\n */\nvar _logActivity = false;\n\n/**\n * {Boolean} TRUE if the 'soa.getVisibleCommands' topic (a particularly high volume of subscribe/unsubscribe events)\n * should be logged to the console. FALSE if they should not be logged to allow lower volume issues to be more\n * easily traced.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusCommandVisibility' attribute in the current\n * document's URL.\n */\nvar _logCommandVisibility = false;\n\n/**\n * {Boolean} TRUE if 'publish' activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logPublishActivity' attribute in the current document's\n * URL.\n * <P>\n * Note: If the attribute has NO value, all publish event topic will be logged. If it has a value it is interpreted\n * as a comma separated list of topics to limit logging to.\n */\nvar _logPublishActivity;\n\n/**\n * {Boolean} TRUE if 'publish' activity from the client data model (cdm) should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logCdmPublishActivity' attribute in the current document's\n * URL.\n */\nvar _logCdmPublishActivity;\n\n/**\n * {StringArray} Topic names to limit logging to.\n */\nvar _logPublishActivityKeys;\n\n/**\n * {Map} Map of topic-to-active-topic-subcription-count (used only when _logActivity is TRUE).\n */\nvar _topic2CountMap = {};\n\n/**\n * {Map} Map of topic-to-published-count (used only when _logActivity is TRUE).\n */\nvar _topic2PublishCountMap = {};\n\n/**\n * Set debug options based on URL attributes.\n */\nvar urlAttrs = browserUtils.getUrlAttributes();\n\n_logActivity = urlAttrs.logEventBusActivity !== undefined;\n\n_logCommandVisibility = urlAttrs.logEventBusCommandVisibility !== undefined;\n\nif( urlAttrs.logPublishActivity !== undefined ) {\n    _logPublishActivity = true;\n\n    if( !_.isEmpty( urlAttrs.logPublishActivity ) ) {\n        _logPublishActivityKeys = urlAttrs.logPublishActivity.split( ',' );\n    }\n}\n\n_logCdmPublishActivity = urlAttrs.logCdmPublishActivity !== undefined;\n\n/**\n * Add modeule objects to the given array.\n *\n * @param {String} msg - Message to append information to.\n * @param {ViewModelObjectArray} modelObjects - Array of modelObjects to append info for.\n *\n * @returns {String} A message string with new information lines appended.\n */\nfunction _appendModelObjects( msg, modelObjects ) {\n    if( !_.isEmpty( modelObjects ) ) {\n        _.forEach( modelObjects, function( mo, ndx ) {\n            var begLength = msg.length;\n\n            msg += '\\n';\n            msg += '  [';\n            msg += ndx;\n            msg += ']: type: ';\n            msg += mo.type;\n\n            for( var char = msg.length - begLength; char < 40; char++ ) {\n                msg += ' ';\n            }\n\n            msg += ' uid: ';\n            msg += mo.uid;\n        } );\n    } else {\n        msg += '  (empty)';\n    }\n\n    return msg;\n} // _appendModelObjects\n\n/**\n * Increment/decrement count of subsriptions to the given topic.\n *\n * @param {String} topic -\n * @param {Number} increment -\n *\n * @returns {Number} Updated count for the given topic.\n */\nfunction _changeTopicSubscriptionCount( topic, increment ) {\n    var count = _topic2CountMap[ topic ];\n\n    if( !count ) {\n        count = 0;\n    }\n\n    var newCount = count + increment;\n\n    _topic2CountMap[ topic ] = newCount;\n\n    return newCount;\n}\n\n/**\n * Define public API\n * @ignore\n */\nvar exports = {};\n\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listeneing for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\nexport let subscribePostal = function( options ) {\n    return exports.subscribeOnChannel( options );\n};\n\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listening for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\nexport let subscribeOnChannel = function( options ) {\n    return postal.subscribe( options );\n};\n\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\nexport let publishPostal = function( envelope, cb ) {\n    exports.publishOnChannel( envelope, cb );\n};\n\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\nexport let publishOnChannel = function( envelope, cb ) {\n    postal.publish( envelope, cb );\n};\n\n/**\n * Subscribe to the given 'topic' on the event channel. When the event is published, the given function will\n * be invoked and passed the 'eventData'.\n *\n * @param {String} topic - Topic to subscribe to. A '#' character is interpreted as a wildcard.\n *\n * @param {Function} callbackFn - Function to be invoked and passed 'eventData' when the event is published.\n *\n * @param {String} subId - An optional ID to associate with this subscription.\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object. Needed while unsuscribing the event topic using {@link module:js/eventBus.unsubscribe|unsubscribe}.\n */\nexport let subscribe = function( topic, callbackFn, subId ) {\n    var subDef = postal.subscribe( {\n        channel: 'soajs',\n        topic: topic,\n        callback: callbackFn\n    } );\n\n    if( _logActivity || _logPublishActivity ) {\n        var count = _changeTopicSubscriptionCount( subDef.topic, 1 );\n\n        if( _logActivity && ( _logCommandVisibility || topic !== 'soa.getVisibleCommands' ) ) {\n            if( subId ) {\n                console.log( 'Subscribe Topic: \"' + topic + '\" count: ' + count + ' id: ' + subId ); // eslint-disable-line no-console\n                subDef.id = subId;\n            } else {\n                console.log( 'Subscribe Topic: \"' + topic + '\" count: ' + count ); // eslint-disable-line no-console\n            }\n        }\n    }\n\n    return subDef;\n};\n\n/**\n * Publish the given 'topic' on the event channel. The given 'eventData' will be passed to each subscribers\n * callback function.\n *\n * @param {String} topic - Topic to publish.\n * @param {Object} eventData - Optional data to pass to the subscribed callback functions.\n * @param {Boolean} isCustomEvent - true if event stated in *viewModel.json\n */\nexport let publish = function( topic, eventData, isCustomEvent ) {\n    debugService.debug( 'globalEvents', topic );\n    var doLogging = false;\n\n    if( _logPublishActivity ) {\n        if( _logCommandVisibility ) {\n            doLogging = !/^(log|progress.start|progress.end|StartSaveAutoBookmarkEvent)$/.test( topic );\n        } else {\n            doLogging = !/^(log|progress.start|progress.end|soa.getVisibleCommands|StartSaveAutoBookmarkEvent)$/.test( topic );\n        }\n    }\n\n    /**\n     * Check if we are listing ALL or just a select few topics (and this topic is one)\n     */\n    if( doLogging && ( !_logPublishActivityKeys || _.indexOf( _logPublishActivityKeys, topic ) !== -1 ) ) {\n        var msg = 'Publish Topic: ';\n\n        var nListeners = _topic2CountMap[ topic ] ? _topic2CountMap[ topic ] : 0;\n\n        if( nListeners === 0 ) {\n            msg += ' (!) ';\n        }\n\n        msg += topic;\n\n        if( eventData ) {\n            if( eventData.name === 'state' ) {\n                msg += '  event: ';\n                msg += JSON.stringify( eventData, [ 'name', 'target' ] );\n\n                msg += ' value: ';\n\n                _.forEach( eventData.value.params, function( value, name ) {\n                    if( value ) {\n                        var msg2 = '';\n\n                        msg2 += '\\n';\n                        msg2 += name;\n\n                        while( msg2.length < 15 ) {\n                            msg2 += ' ';\n                        }\n\n                        msg2 += ' = ';\n\n                        msg2 += '\"';\n                        msg2 += value;\n                        msg2 += '\"';\n\n                        msg += msg2;\n                    }\n                } );\n\n                msg += '\\n';\n            } else if( eventData.name === 'selected' || eventData.name === 'pselected' ) {\n                msg += '  event: ';\n                msg += JSON.stringify( eventData, [ 'name', 'target' ] );\n\n                msg += '  selected: ';\n                msg += eventData.value;\n            } else if( _logCdmPublishActivity ) {\n                if( topic === 'cdm.new' ) {\n                    msg = _appendModelObjects( msg, eventData.newObjects );\n                } else if( topic === 'cdm.modified' ) {\n                    msg = _appendModelObjects( msg, eventData.modifiedObjects );\n                } else if( topic === 'cdm.updated' || topic === 'cdm.modified' ) {\n                    msg = _appendModelObjects( msg, eventData.updatedObjects );\n                }\n            } else if( topic === 'primaryWorkArea.selectionChangeEvent' ) {\n                msg += '  selection: ';\n                msg += JSON.stringify( eventData.selectionModel.getSelection() );\n            } else {\n                msg += '  event: ';\n                msg += JSON.stringify( eventData, [ 'name', 'target' ] );\n            }\n        }\n\n        if( nListeners > 0 ) {\n            msg += '  nListeners: ';\n            msg += nListeners;\n        }\n\n        if( _topic2PublishCountMap[ topic ] ) {\n            _topic2PublishCountMap[ topic ]++;\n        } else {\n            _topic2PublishCountMap[ topic ] = 1;\n        }\n\n        msg += '  totalCount: ';\n        msg += _topic2PublishCountMap[ topic ];\n\n        console.log( msg ); // eslint-disable-line no-console\n    }\n\n    if( !isCustomEvent && logger.isDeclarativeLogEnabled() ) {\n        debugService.debugEventPub( {}, { name: topic }, { panelId: 'SystemEvent' }, {}, eventData );\n    }\n    postal.publish( {\n        channel: 'soajs',\n        topic: topic,\n        data: eventData\n    } );\n};\n\n/**\n * Removes the given subscription from the event channel so that the callback will no longer be invoked.\n *\n * @param {Object} subDef - A 'PostalJS' SubscriptionDefinition object returned by {@link module:js/eventBus.subscribe|subscribe}\n */\nexport let unsubscribe = function( subDef ) {\n    if( _logActivity || _logPublishActivity ) {\n        var count = _changeTopicSubscriptionCount( subDef.topic, -1 );\n\n        if( _logActivity && ( _logCommandVisibility || subDef.topic !== 'soa.getVisibleCommands' ) ) {\n            if( subDef.id ) {\n                console.log( '   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count + // eslint-disable-line no-console\n                    ' id: ' + subDef.id );\n            } else {\n                console.log( '   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count ); // eslint-disable-line no-console\n            }\n        }\n    }\n    postal.unsubscribe( subDef );\n};\n\nlogger.setEventBus( exports );\n\nexports = {\n    subscribePostal,\n    subscribeOnChannel,\n    publishPostal,\n    publishOnChannel,\n    subscribe,\n    publish,\n    unsubscribe\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods of navigation utils. This is for GWT consumption of the navigation utils.\n *\n * @module js/navigationUtils\n */\nimport browserUtils from 'js/browserUtils';\nimport _ from 'lodash';\nimport conditionService from 'js/conditionService';\nimport AwStateService from 'js/awStateService';\nvar exports = {};\n/**\n * getting $state reference. $state is injected in this way so to do the unit testing. This function is stubbed with\n * desired output in unit testing.\n *\n * @return {$state} $state reference\n */\n\nexport let getState = function () {\n  return AwStateService.instance;\n};\n/**\n * creating url of selected object\n *\n * @param {IModelObject} obj - selected object in the clipboard\n * @return {string} url of selected object\n */\n\nexport let urlProcessing = function (obj) {\n  var url = '';\n  var stateSvc = exports.getState();\n\n  if (stateSvc) {\n    var uid = obj.uid; // s_uid is not required for creating unique url for Model Object\n\n    url = browserUtils.getBaseURL() + stateSvc.href('com_siemens_splm_clientfx_tcui_xrt_showObject', {\n      uid: uid,\n      s_uid: ''\n    }, {\n      inherit: false\n    });\n  }\n\n  return url;\n};\n/**\n * get url of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {array} url array of selected object\n */\n\nexport let getDisplayURLs = function (objList) {\n  var url = [];\n\n  if (objList.length > 0) {\n    for (var i = 0; i < objList.length; i++) {\n      url[i] = exports.urlProcessing(objList[i]);\n    }\n  }\n\n  return url;\n};\n/**\n * create hyperlink of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {string} hyperlink string of all the selected object\n */\n\nexport let creatingHyperlinkOfSelectedObjects = function (objList) {\n  var hyperlinkText;\n  var hyperlinkString = '';\n  var url = exports.getDisplayURLs(objList);\n\n  for (var i = 0; i < objList.length; i++) {\n    hyperlinkText = objList[i].props.object_string.uiValues[0];\n    hyperlinkString += '<a href=\"' + url[i] + '\" target=\"_parent\" class=\"aw-base-osClipboardHyperlink\">' + hyperlinkText + '</a><br/>';\n  }\n\n  return hyperlinkString;\n};\n/**\n * builds an encoded parameter string based on the state name and param map supplied\n *\n * @param {String} stateName - state name\n * @param {Object} paramMap - parameter map\n * @return {String} encoded parameter string\n */\n\nexport let buildEncodedParamString = function (stateName, paramMap) {\n  var stateSvc = exports.getState();\n  var stateIn = stateName;\n  var encodedParamStr = '';\n\n  if (stateIn !== '.') {\n    stateIn = stateIn.replace(/\\./g, '_');\n  }\n\n  var relativeUrl = stateSvc.href(stateIn, paramMap, {\n    inherit: false\n  });\n\n  if (relativeUrl) {\n    var splitArr = relativeUrl.split(stateName);\n\n    if (splitArr.length === 2) {\n      encodedParamStr = splitArr[1];\n    }\n  }\n\n  return encodedParamStr;\n};\n/**\n * Expand a string based expression to include nested conditions\n *\n * @param {String} expression - a string expression to evaluate\n * @param {Object} internalViewModel - the object containing other expressions\n * @returns {String} the new string expression\n */\n\nexport let getConditionExpression = function (expression, internalViewModel) {\n  var conditionIndex = expression.indexOf('conditions.');\n\n  if (conditionIndex > -1) {\n    var substring = expression.substring(conditionIndex);\n    var endConditionIndex = substring.search('[^a-zA-Z0-9._]');\n    endConditionIndex = endConditionIndex > -1 ? conditionIndex + endConditionIndex : expression.length;\n    var referenceCondition = expression.substring(conditionIndex, endConditionIndex);\n\n    var evaluatedCondition = _.get(internalViewModel, referenceCondition);\n\n    var returnExpression = expression.replace(referenceCondition, '(' + evaluatedCondition.expression + ')');\n    return exports.getConditionExpression(returnExpression, internalViewModel);\n  }\n\n  return expression;\n};\n/**\n * Find active naigations  for the given workspaces..\n *\n * @param {Object} allNavConfigs - all navigations for active woorkspace\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\n\nexport let findActiveWorkspaceNavigation = function (allNavConfigs, $scope) {\n  var mostAppropriateActionHandler = null;\n  var mostAppropriateConditionLength = -1;\n\n  _.forEach(allNavConfigs, function (navConfig) {\n    var conditions = _.get(navConfig, 'activeWhen.condition');\n\n    if (conditions) {\n      var conditionExpression = exports.getConditionExpression(conditions, navConfig);\n      var isValidCondition = conditionService.evaluateCondition($scope, conditionExpression);\n      var expressionLength = conditionExpression.length;\n\n      if (_.isObject(conditionExpression)) {\n        expressionLength = JSON.stringify(conditionExpression).length;\n      }\n\n      if (isValidCondition && expressionLength > mostAppropriateConditionLength) {\n        mostAppropriateConditionLength = expressionLength;\n        mostAppropriateActionHandler = navConfig;\n      }\n    } else {\n      mostAppropriateActionHandler = navConfig;\n    }\n  });\n\n  return mostAppropriateActionHandler;\n};\nexports = {\n  getState,\n  urlProcessing,\n  getDisplayURLs,\n  creatingHyperlinkOfSelectedObjects,\n  buildEncodedParamString,\n  getConditionExpression,\n  findActiveWorkspaceNavigation\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/navigationUtils.js"],"names":["exports","getState","AwStateService","urlProcessing","url","stateSvc","uid","obj","browserUtils","s_uid","inherit","getDisplayURLs","objList","i","creatingHyperlinkOfSelectedObjects","hyperlinkString","hyperlinkText","buildEncodedParamString","stateIn","encodedParamStr","relativeUrl","splitArr","getConditionExpression","conditionIndex","expression","substring","endConditionIndex","referenceCondition","evaluatedCondition","_","returnExpression","findActiveWorkspaceNavigation","mostAppropriateActionHandler","mostAppropriateConditionLength","conditions","conditionExpression","isValidCondition","conditionService","expressionLength","JSON"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods of navigation utils. This is for GWT consumption of the navigation utils.\n *\n * @module js/navigationUtils\n */\nimport browserUtils from 'js/browserUtils';\nimport _ from 'lodash';\nimport conditionService from 'js/conditionService';\nimport AwStateService from 'js/awStateService';\n\nvar exports = {};\n\n/**\n * getting $state reference. $state is injected in this way so to do the unit testing. This function is stubbed with\n * desired output in unit testing.\n *\n * @return {$state} $state reference\n */\nexport let getState = function() {\n    return AwStateService.instance;\n};\n\n/**\n * creating url of selected object\n *\n * @param {IModelObject} obj - selected object in the clipboard\n * @return {string} url of selected object\n */\nexport let urlProcessing = function( obj ) {\n    var url = '';\n    var stateSvc = exports.getState();\n    if( stateSvc ) {\n        var uid = obj.uid;\n        // s_uid is not required for creating unique url for Model Object\n        url = browserUtils.getBaseURL() + stateSvc.href( 'com_siemens_splm_clientfx_tcui_xrt_showObject', {\n            uid: uid,\n            s_uid: ''\n        }, {\n            inherit: false\n        } );\n    }\n    return url;\n};\n\n/**\n * get url of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {array} url array of selected object\n */\nexport let getDisplayURLs = function( objList ) {\n    var url = [];\n    if( objList.length > 0 ) {\n        for( var i = 0; i < objList.length; i++ ) {\n            url[ i ] = exports.urlProcessing( objList[ i ] );\n        }\n    }\n    return url;\n};\n\n/**\n * create hyperlink of all the selected objects\n *\n * @param {IModelObjectArray} ObjList - array of selected object in the clipboard\n * @return {string} hyperlink string of all the selected object\n */\nexport let creatingHyperlinkOfSelectedObjects = function( objList ) {\n    var hyperlinkText;\n    var hyperlinkString = '';\n    var url = exports.getDisplayURLs( objList );\n    for( var i = 0; i < objList.length; i++ ) {\n        hyperlinkText = objList[ i ].props.object_string.uiValues[ 0 ];\n        hyperlinkString += '<a href=\"' + url[ i ] + '\" target=\"_parent\" class=\"aw-base-osClipboardHyperlink\">' +\n            hyperlinkText + '</a><br/>';\n    }\n    return hyperlinkString;\n};\n\n/**\n * builds an encoded parameter string based on the state name and param map supplied\n *\n * @param {String} stateName - state name\n * @param {Object} paramMap - parameter map\n * @return {String} encoded parameter string\n */\nexport let buildEncodedParamString = function( stateName, paramMap ) {\n    var stateSvc = exports.getState();\n    var stateIn = stateName;\n    var encodedParamStr = '';\n\n    if( stateIn !== '.' ) {\n        stateIn = stateIn.replace( /\\./g, '_' );\n    }\n\n    var relativeUrl = stateSvc.href( stateIn, paramMap, {\n        inherit: false\n    } );\n\n    if( relativeUrl ) {\n        var splitArr = relativeUrl.split( stateName );\n        if( splitArr.length === 2 ) {\n            encodedParamStr = splitArr[ 1 ];\n        }\n    }\n\n    return encodedParamStr;\n};\n\n/**\n * Expand a string based expression to include nested conditions\n *\n * @param {String} expression - a string expression to evaluate\n * @param {Object} internalViewModel - the object containing other expressions\n * @returns {String} the new string expression\n */\nexport let getConditionExpression = function( expression, internalViewModel ) {\n    var conditionIndex = expression.indexOf( 'conditions.' );\n    if( conditionIndex > -1 ) {\n        var substring = expression.substring( conditionIndex );\n        var endConditionIndex = substring.search( '[^a-zA-Z0-9._]' );\n        endConditionIndex = endConditionIndex > -1 ? conditionIndex + endConditionIndex : expression.length;\n        var referenceCondition = expression.substring( conditionIndex, endConditionIndex );\n        var evaluatedCondition = _.get( internalViewModel, referenceCondition );\n        var returnExpression = expression.replace( referenceCondition, '(' + evaluatedCondition.expression + ')' );\n        return exports.getConditionExpression( returnExpression, internalViewModel );\n    }\n    return expression;\n};\n\n/**\n * Find active naigations  for the given workspaces..\n *\n * @param {Object} allNavConfigs - all navigations for active woorkspace\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\nexport let findActiveWorkspaceNavigation = function( allNavConfigs, $scope ) {\n    var mostAppropriateActionHandler = null;\n    var mostAppropriateConditionLength = -1;\n    _.forEach( allNavConfigs, function( navConfig ) {\n        var conditions = _.get( navConfig, 'activeWhen.condition' );\n        if( conditions ) {\n            var conditionExpression = exports.getConditionExpression( conditions, navConfig );\n            var isValidCondition = conditionService.evaluateCondition( $scope, conditionExpression );\n            var expressionLength = conditionExpression.length;\n            if( _.isObject( conditionExpression ) ) {\n                expressionLength = JSON.stringify( conditionExpression ).length;\n            }\n            if( isValidCondition &&\n                expressionLength > mostAppropriateConditionLength ) {\n                mostAppropriateConditionLength = expressionLength;\n                mostAppropriateActionHandler = navConfig;\n            }\n        } else {\n            mostAppropriateActionHandler = navConfig;\n        }\n    } );\n    return mostAppropriateActionHandler;\n};\n\nexports = {\n    getState,\n    urlProcessing,\n    getDisplayURLs,\n    creatingHyperlinkOfSelectedObjects,\n    buildEncodedParamString,\n    getConditionExpression,\n    findActiveWorkspaceNavigation\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
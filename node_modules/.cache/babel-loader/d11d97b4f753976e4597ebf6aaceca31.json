{"ast":null,"code":"import eventBus from'js/eventBus';import appCtxService from'js/appCtxService';import _ from'lodash';import Debug from'debug';import{DerivedStateResult}from'js/derivedContextService';const trace=new Debug('selection');const defaultPWASelectionChangeHandler=(_ref,selModel)=>{let{selected,dataProvider}=_ref;// Revisit me: Story LCS-524878 - Reduce dependency on ctx - follow uni-directional data flow\nappCtxService.registerCtx('pwaSelectionInfo',{currentSelectedCount:selModel.getCurrentSelectedCount()});//Named event is an anti-pattern. Keeping it here to maintain backward compatibility.\n// data.source = 'primaryWorkArea'; This event used to send the scope\neventBus.publish('primaryWorkArea.selectionChangeEvent',{selectionModel:selModel,// dataCtxNode: $scope,\ndataProvider:dataProvider,selectedObjects:_.cloneDeep(selected)});};export const handleSelectionChange=(localSelectionData,parentSelectionData,selModel)=>{if(!_.isEmpty(localSelectionData)){if(parentSelectionData){parentSelectionData.update({...localSelectionData,source:'primary'});}defaultPWASelectionChangeHandler(localSelectionData,selModel);trace('AwPrimaryWorkarea selectionData: ',localSelectionData);}};export const reset=selectionModel=>{const dp=selectionModel.getDpListener();if(dp){dp.resetDataProvider();}};export const handleSelectEvent=(eventData,selectionModel)=>{const dp=selectionModel.getDpListener();if(dp){if(eventData.selectAll){dp.selectAll();}else{dp.selectNone();}}};export const handleMultiSelectEvent=(eventData,selectionModel)=>{const dp=selectionModel.getDpListener();if(dp){dp.selectionModel.setMultiSelectionEnabled(eventData.multiSelect);if(!eventData.multiSelect){dp.selectNone();}return eventData.multiSelect;}return false;};export const getContext=(vmDef,props)=>{return[new DerivedStateResult({ctxParameters:[],additionalParameters:[props.subPanelContext,props.searchState],compute:()=>{return{provider:props.subPanelContext,searchState:props.searchState};}})];};","map":null,"metadata":{},"sourceType":"module"}
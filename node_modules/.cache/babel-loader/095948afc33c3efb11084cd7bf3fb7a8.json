{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/urlArgsUtilsService\n */\nimport AwStateService from 'js/awStateService';\nimport AwTimeoutService from 'js/awTimeoutService';\nimport commandService from 'js/command.service';\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\nlet _urlCommandCheckPromise = null;\nexport const executeUrlCommand = function (commandContext) {\n  let {\n    runActionWithViewModel\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const commandId = AwStateService.instance.params.cmdId || AwStateService.instance.params.commandID;\n\n  if (commandId && !_urlCommandCheckPromise && runActionWithViewModel) {\n    //Flag to avoid execution of cmd action multiple times.\n    //Keeping this as a local variable for now, considering that even if there are\n    //multiple components calling this particular api, the url is singleton\n    //Hence, the execution should only happen once\n    _urlCommandCheckPromise = true;\n    return AwTimeoutService.instance(function () {\n      let cmdContext = {\n        ctx: appCtxService.getCtx(),\n        commandContext\n      };\n      return commandService.executeCommand(commandId, AwStateService.instance.params.cmdArg, {}, cmdContext, runActionWithViewModel) // Log error or success message\n      .then(function () {\n        logger.trace('Executed command: ' + commandId + ' with args ' + AwStateService.instance.params.cmdArg + ' from url');\n      }, function (errorMessage) {\n        logger.error(errorMessage);\n      }) // clear cmdId and cmdArg\n      .then(function () {\n        if (AwStateService.instance.params.commandId) {\n          return;\n        }\n\n        return AwStateService.instance.go('.', {\n          cmdId: null,\n          cmdArg: null\n        }, {\n          location: 'replace'\n        });\n      }).then(function () {\n        _urlCommandCheckPromise = null;\n      });\n    }, 500);\n  }\n};\nexport default {\n  executeUrlCommand\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/urlArgsUtilsService.js"],"names":["_urlCommandCheckPromise","executeUrlCommand","runActionWithViewModel","commandId","AwStateService","cmdContext","ctx","appCtxService","commandContext","logger","cmdId","cmdArg","location"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAA,cAAA,MAAA,mBAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AACA,OAAA,cAAA,MAAA,oBAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AAEA,IAAIA,uBAAuB,GAA3B,IAAA;AAEA,OAAO,MAAMC,iBAAiB,GAAG,UAAA,cAAA,EAAuD;EAAA,IAArC;IAAEC;EAAF,IAAqC,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAR,EAAQ;EACpF,MAAMC,SAAS,GAAGC,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAwCA,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CAA1D,SAAA;;EACA,IAAID,SAAS,IAAI,CAAbA,uBAAAA,IAAJ,sBAAA,EAAsE;IAClE;IACA;IACA;IACA;IACAH,uBAAuB,GAAvBA,IAAAA;IACA,OAAO,gBAAgB,CAAhB,QAAA,CAA2B,YAAW;MACzC,IAAIK,UAAU,GAAG;QAAEC,GAAG,EAAEC,aAAa,CAApB,MAAOA,EAAP;QAA+BC;MAA/B,CAAjB;MACA,OAAO,cAAc,CAAd,cAAA,CAAA,SAAA,EACHJ,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CADG,MAAA,EAAA,EAAA,EAAA,UAAA,EAAA,sBAAA,EAEH;MAFG,CAAA,IAAA,CAIC,YAAW;QACPK,MAAM,CAANA,KAAAA,CAAc,uBAAA,SAAA,GAAA,aAAA,GACML,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CADN,MAAA,GAAdK,WAAAA;MALL,CAAA,EAQC,UAAA,YAAA,EAAyB;QACrBA,MAAM,CAANA,KAAAA,CAAAA,YAAAA;MATL,CAAA,EAWH;MAXG,CAAA,IAAA,CAYI,YAAW;QACd,IAAIL,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CAAJ,SAAA,EAA+C;UAC3C;QACH;;QACD,OAAO,cAAc,CAAd,QAAA,CAAA,EAAA,CAAA,GAAA,EAAiC;UACpCM,KAAK,EAD+B,IAAA;UAEpCC,MAAM,EAAE;QAF4B,CAAjC,EAGJ;UACCC,QAAQ,EAAE;QADX,CAHI,CAAP;MAhBD,CAAA,EAAA,IAAA,CAsBO,YAAW;QACjBZ,uBAAuB,GAAvBA,IAAAA;MAvBR,CAAO,CAAP;IAFG,CAAA,EAAP,GAAO,CAAP;EA4BH;AApCE,CAAA;AAuCP,eAAe;EACXC;AADW,CAAf","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/urlArgsUtilsService\n */\nimport AwStateService from 'js/awStateService';\nimport AwTimeoutService from 'js/awTimeoutService';\nimport commandService from 'js/command.service';\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\n\nlet _urlCommandCheckPromise = null;\n\nexport const executeUrlCommand = ( commandContext, { runActionWithViewModel } = {} ) => {\n    const commandId = AwStateService.instance.params.cmdId || AwStateService.instance.params.commandID;\n    if( commandId && !_urlCommandCheckPromise && runActionWithViewModel ) {\n        //Flag to avoid execution of cmd action multiple times.\n        //Keeping this as a local variable for now, considering that even if there are\n        //multiple components calling this particular api, the url is singleton\n        //Hence, the execution should only happen once\n        _urlCommandCheckPromise = true;\n        return AwTimeoutService.instance( function() {\n            let cmdContext = { ctx: appCtxService.getCtx(), commandContext };\n            return commandService.executeCommand( commandId,\n                AwStateService.instance.params.cmdArg, {}, cmdContext, runActionWithViewModel )\n                // Log error or success message\n                .then(\n                    function() {\n                        logger.trace( 'Executed command: ' + commandId +\n                            ' with args ' + AwStateService.instance.params.cmdArg + ' from url' );\n                    },\n                    function( errorMessage ) {\n                        logger.error( errorMessage );\n                    } )\n                // clear cmdId and cmdArg\n                .then( function() {\n                    if( AwStateService.instance.params.commandId ) {\n                        return;\n                    }\n                    return AwStateService.instance.go( '.', {\n                        cmdId: null,\n                        cmdArg: null\n                    }, {\n                        location: 'replace'\n                    } );\n                } ).then( function() {\n                    _urlCommandCheckPromise = null;\n                } );\n        }, 500 );\n    }\n};\n\nexport default {\n    executeUrlCommand\n};\n"]},"metadata":{},"sourceType":"module"}
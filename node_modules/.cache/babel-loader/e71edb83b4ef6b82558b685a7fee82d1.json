{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-disable complexity */\n\n/**\n * This module provides access to service APIs that help to convert the model object to view model object\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/viewModelObjectService\n */\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport lovService from 'js/lovService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\nimport colorDecoratorSvc from 'js/colorDecoratorService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport awIconSvc from 'js/awIconService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport eventBus from 'js/eventBus';\nvar exports = {};\n/**\n * This is added to handle relational property specified in objectset. prop specified as \"relName.relProp\", need to\n * extract the actual prop name to extract value from the refModel Object\n *\n * @param {Object} prop - The IViewModelPropObject of an IViewModelObject (from serverVMO or modelObject property)\n * @param {String} propName - The property name\n * @param {IModelObject} refModelObject - The actual IModelObject for which we are creating ViewModelObject\n *\n * @return {ModelObjectProperty|null} The Result.\n */\n\nvar getSourceObjectProp = function (prop, propName, refModelObject) {\n  var srcObj = null;\n\n  if (!_.isEmpty(prop.intermediateObjectUids)) {\n    srcObj = cdm.getObject(prop.intermediateObjectUids[prop.intermediateObjectUids.length - 1]);\n  } else {\n    srcObj = refModelObject;\n  }\n\n  var srcObjProp = srcObj ? srcObj.props[propName] : null;\n\n  if (!srcObjProp && /\\./.test(propName)) {\n    var actualPropName = uwPropertySvc.getBasePropertyName(propName);\n    srcObjProp = srcObj ? srcObj.props[actualPropName] : null;\n  }\n\n  return srcObjProp;\n};\n\nvar getPropValue = function (uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted) {\n  uw_displayValue[0] = _.isString(prop.displayValue[0]) ? prop.displayValue[0] : new String(prop.displayValue[0]);\n\n  if (propType === 'DATE') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value[0]).getTime();\n    uw_displayValue[0] = isDateAdjusted ? dateTimeSvc.formatDate(new Date(prop.displayValue[0]).getTime()) : prop.displayValue[0];\n  } else if (propType === 'DATETIME') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value[0]).getTime();\n    uw_displayValue[0] = dateTimeSvc.formatSessionDateTime(new Date(prop.displayValue[0]).getTime());\n  } else if ((propType === 'DOUBLE' || propType === 'INTEGER') && prop.value[0]) {\n    uw_dbValue = Number(prop.value[0]);\n  } else if (propType === 'CHAR' && prop.displayValue[0]) {\n    uw_dbValue = prop.displayValue[0];\n  } else {\n    uw_dbValue = prop.value[0];\n  }\n\n  return uw_dbValue;\n};\n\nvar getPropValueOnArray = function (uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted) {\n  uw_dbValue = [];\n\n  for (var i = 0; i < prop.value.length; i++) {\n    var isCharArray = false;\n    /**\n     * For character data types, TC server returns character ASCII values as the property internal\n     * value. Since AW doesn't differentiate between character and string types, the property object\n     * needs to created with display values as internal values. So passing the UI values as internal\n     * value.\n     */\n\n    if (propType === 'STRINGARRAY' && prop.isCharArray) {\n      isCharArray = true;\n    }\n\n    uw_displayValue[i] = prop.displayValue[i];\n\n    if (propType === 'DATEARRAY') {\n      uw_dbValue[i] = new Date(prop.value[i]).getTime();\n      uw_displayValue[i] = isDateAdjusted ? dateTimeSvc.formatDate(new Date(prop.displayValue[i]).getTime()) : prop.displayValue[i];\n    } else if (propType === 'DATETIMEARRAY') {\n      uw_dbValue[i] = new Date(prop.value[i]).getTime();\n      uw_displayValue[i] = dateTimeSvc.formatSessionDateTime(new Date(prop.displayValue[i]).getTime());\n    } else if ((propType === 'DOUBLEARRAY' || propType === 'INTEGERARRAY') && prop.value[i]) {\n      uw_dbValue[i] = Number(prop.value[i]);\n    } else if (isCharArray && prop.displayValue[i]) {\n      uw_dbValue[i] = prop.displayValue[i];\n    } else {\n      uw_dbValue[i] = prop.value[i];\n    }\n  }\n\n  return uw_dbValue;\n};\n\nvar getPropValueNotArray = function (prop, uw_displayValue, propType, uw_dbValue) {\n  if (_.isNil(prop.displayValue[0])) {\n    uw_displayValue[0] = '';\n  } else {\n    var tempDisplayValue = new String(prop.displayValue[0]);\n    uw_displayValue[0] = _.isString(prop.displayValue[0]) ? prop.displayValue[0] : tempDisplayValue;\n  }\n\n  if (propType === 'DATE') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value).getTime();\n    uw_displayValue[0] = dateTimeSvc.formatDate(new Date(prop.displayValue[0]).getTime());\n  } else if (propType === 'DATETIME') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value[0]).getTime();\n    uw_displayValue[0] = dateTimeSvc.formatSessionDateTime(new Date(prop.displayValue[0]).getTime());\n  } else if ((propType === 'DOUBLE' || propType === 'INTEGER') && prop.value && isFinite(prop.value) && prop.value !== null && prop.value !== '' && !_.isArray(prop.value)) {\n    uw_dbValue = Number(prop.value);\n  } else if (propType === 'CHAR' && prop.value) {\n    uw_dbValue = prop.displayValue[0];\n  } else {\n    uw_dbValue = prop.value;\n  }\n\n  return uw_dbValue;\n};\n/**\n *\n * @param {String} propType - The property type\n * @param {*} prop - The property value as defined in definition\n * @param {boolean} isDateAdjusted - isDateAdjusted\n * @returns {Object} - Object containing value and display value\n */\n\n\nvar getPropertyValues = function (propType, prop, isDateAdjusted) {\n  var uw_dbValue = null;\n  var uw_displayValue = null;\n\n  if (!_.isUndefined(prop.value) && !_.isNull(prop.value)) {\n    uw_displayValue = [];\n\n    if (prop.isArray) {\n      uw_dbValue = getPropValueOnArray(uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted);\n    } else if (_.isArray(prop.value) && prop.value.length > 0) {\n      uw_dbValue = getPropValue(uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted);\n    } else {\n      uw_dbValue = getPropValueNotArray(prop, uw_displayValue, propType, uw_dbValue);\n    }\n  } else if (!prop.value && propType === 'BOOLEAN') {\n    uw_displayValue = [];\n\n    if (_.isNil(prop.displayValue[0])) {\n      uw_displayValue[0] = '';\n    } else {\n      var tempDisplayValue = new String(prop.displayValue[0]);\n      uw_displayValue[0] = _.isString(prop.displayValue[0]) ? prop.displayValue[0] : tempDisplayValue;\n    }\n\n    uw_dbValue = prop.value;\n  } else {\n    uw_displayValue = prop.displayValue;\n  }\n\n  return {\n    value: uw_dbValue,\n    displayValue: uw_displayValue\n  };\n};\n/**\n * format serverVMO/modelObject property as par consistent API schema\n *\n * @constructor\n *\n * @param {propObject} prop - The IModelObject to create a ViewModelObject for.\n * @param {string} propName - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} serverVMO - The IModelObject to create a ViewModelObject for.\n * @param {string} operationName - operationName\n */\n\n\nvar formatProperties = function (prop, propName, modelObject, serverVMO, operationName) {\n  var propValue = prop instanceof Object ? Object.assign({}, prop) : new Object();\n  var hasServerVMO = serverVMO && serverVMO.props && serverVMO.props.hasOwnProperty(propName);\n  var initialValue = '';\n  var inputDbValues = null;\n  var displayValues = null;\n  var propDesc = prop.propertyDescriptor;\n  propValue.isModifiable = false;\n\n  if (!declUtils.isNil(prop.hasLOV)) {\n    propValue.hasLOV = prop.hasLOV;\n  } else {\n    propValue.hasLOV = propDesc && propDesc.lovCategory > 0;\n  }\n\n  if (hasServerVMO) {\n    propValue.propType = exports.getClientPropertyType(prop.type, prop.isArray === true);\n    propValue.isRequired = prop.isRequired === true;\n    propValue.displayName = prop.propertyDisplayName ? prop.propertyDisplayName : null;\n    propValue.referenceTypeName = prop.ReferencedTypeName ? prop.ReferencedTypeName : '';\n    propValue.isModifiable = prop.isModifiable === true;\n    propValue.isCharArray = prop.type === 1;\n    initialValue = prop.initialValue ? prop.initialValue : null;\n\n    if (prop.hasRevRuleAttached) {\n      propValue.hasRevRuleAttached = prop.hasRevRuleAttached === true;\n    }\n\n    if (propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY') {\n      let propFromServerVMO = serverVMO.props[propName]; //for date type property, set default value false to isTimeEnabled\n\n      propValue.isTimeEnabled = false;\n\n      if (propFromServerVMO) {\n        propValue.isTimeEnabled = _.isUndefined(propFromServerVMO.isTimeEnabled) ? false : propFromServerVMO.isTimeEnabled;\n      }\n    }\n  } else {\n    var constantsMap;\n\n    if (propDesc) {\n      propValue.isArray = propDesc.anArray;\n      propValue.propType = exports.getClientPropertyType(propDesc.valueType, propValue.isArray);\n      propValue.isCharArray = propDesc.valueType === 1;\n      propValue.displayName = propDesc.displayName;\n      propValue.maxLength = propDesc.maxLength;\n      propValue.maxArraySize = propDesc.maxArraySize ? propDesc.maxArraySize : -1;\n      constantsMap = propDesc.constantsMap;\n    }\n\n    if (constantsMap) {\n      initialValue = constantsMap.initialValue;\n      propValue.initialValue = constantsMap.initialValue;\n      propValue.isEditable = constantsMap.editable === '1';\n      propValue.isRequired = constantsMap.required === '1';\n      propValue.isAutoAssignable = constantsMap.autoassignable === '1';\n      propValue.isRichText = constantsMap.Fnd0RichText === '1';\n      propValue.isEnabled = constantsMap.editable ? constantsMap.editable === '1' : true;\n      propValue.referenceTypeName = constantsMap.ReferencedTypeName || '';\n\n      if (propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY') {\n        //from SOA getTypeDescriptions2, timeEnabled is undefined when Fnd0EnableTimeForDateProperty is default false.\n        propValue.isTimeEnabled = _.isUndefined(constantsMap.timeEnabled) ? false : constantsMap.timeEnabled === '1';\n      } // If isModifiable is false on the modelObject, use that first over propertyDescriptor's constantsMap default value\n\n\n      if (modelObject && modelObject.props && modelObject.props.is_modifiable && modelObject.props.is_modifiable.dbValues && modelObject.props.is_modifiable.dbValues[0] === '0') {\n        propValue.isModifiable = false;\n      } else {\n        propValue.isModifiable = constantsMap.modifiable === '1';\n      }\n    }\n  }\n\n  if (_.isNil(propValue.isModifiable)) {\n    propValue.isModifiable = false;\n  }\n\n  if (operationName && _.isString(operationName)) {\n    if (/^(EDIT|REVISE|SAVEAS|CREATE)$/i.test(operationName)) {\n      if (hasServerVMO) {\n        propValue.isEditable = prop.isModifiable === true;\n      } else {\n        propValue.isEditable = prop.modifiable === true;\n      }\n    } // Set isEnabled flag to 'true' for all properties for SaveAs ,Revise and Create operations.\n    // <P>\n    // Note: Create panel would require the below change when its converted to declarative.\n\n\n    if (/^(REVISE|SAVEAS|CREATE)$/i.test(operationName)) {\n      propValue.isEnabled = true;\n    }\n  }\n\n  if (propValue.isDCP) {\n    inputDbValues = prop && prop.dbValues || [];\n    displayValues = prop && prop.uiValues || [];\n\n    if (propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY') {\n      //For DCP property, replace displayValues with the date formatted dbValues value\n      var tempDisplayValues = [];\n\n      for (var indx = 0; indx < inputDbValues.length; indx++) {\n        if (propValue.isTimeEnabled === false) {\n          tempDisplayValues.push(dateTimeSvc.formatSessionDate(inputDbValues[indx]));\n        } else {\n          tempDisplayValues.push(dateTimeSvc.formatSessionDateTime(inputDbValues[indx]));\n        }\n      }\n\n      if (tempDisplayValues.length > 0) {\n        displayValues = tempDisplayValues;\n      }\n    }\n  } else {\n    var srcObjProp = getSourceObjectProp(prop, propName, modelObject);\n    inputDbValues = srcObjProp && srcObjProp.dbValues || [];\n    displayValues = srcObjProp && srcObjProp.uiValues || [];\n  }\n\n  propValue.dbValues = inputDbValues;\n\n  if (inputDbValues && inputDbValues.length > 0) {\n    propValue.value = inputDbValues;\n  } else if (initialValue !== '') {\n    propValue.value = initialValue;\n  } else {\n    propValue.value = null;\n  }\n\n  propValue.displayValue = displayValues;\n  return propValue;\n};\n/**\n * Processing and assigning modelObject and serverVMO property on ViewModelObject\n * It is post processing.\n *\n * @constructor\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {IModelObject} viewModelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} owningObjUid - The intended purpose for the new ViewModelOject (e.g. 'edit').\n */\n\n\nvar alignPropertiesOnVMO = function (modelObject, viewModelObject, owningObjUid) {\n  _.forOwn(modelObject.props, function (propValue, propName) {\n    var propDesc = propValue.propertyDescriptor;\n\n    if (propDesc) {\n      viewModelObject.propertyDescriptors[propName] = propDesc;\n    }\n\n    viewModelObject.props[propName].propertyDescriptor = propValue.propertyDescriptor;\n    viewModelObject.props[propName].intermediateObjectUids = propValue.intermediateObjectUids;\n    viewModelObject.props[propName].isDCP = propValue.isDCP || false;\n\n    if (!viewModelObject.props[propName].lovApi && viewModelObject.props[propName].hasLov) {\n      lovService.initNativeCellLovApi(viewModelObject.props[propName], null, viewModelObject.operationName, viewModelObject, owningObjUid);\n    }\n  });\n\n  if (modelObject.type === 'Awp0XRTObjectSetRow' && modelObject.props.awp0Target) {\n    const target = cdm.getObject(modelObject.props.awp0Target.dbValues[0]);\n\n    if (target) {\n      for (const prop of Object.values(modelObject.props)) {\n        if (!prop.propertyDescriptor && target.props[prop.propertyName]) {\n          prop.propertyDescriptor = target.props[prop.propertyName].propertyDescriptor;\n        }\n      }\n\n      for (const prop of Object.values(viewModelObject.props)) {\n        if (!prop.propertyDescriptor && target.props[prop.propertyName]) {\n          prop.propertyDescriptor = target.props[prop.propertyName].propertyDescriptor;\n        }\n      }\n    }\n  }\n\n  return viewModelObject;\n};\n/**\n * Update this model object's awp cell properties which are stored as key/value inside an array property\n * awp0CellProperties.\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\n\n\nvar updateCellProperties = function (viewModelObject) {\n  /**\n   * Pull any cell properties out of their encoded string and have them as 1st class properties of the\n   * ViewModelObject.\n   */\n  if (viewModelObject.props && viewModelObject.props.awp0CellProperties) {\n    // We should look up for dbValue always,'dbValues' is redundant and need to cleanup any dependency on that\n    // dbValue could be array or string based on the mode object\n    var dbValue = viewModelObject.props.awp0CellProperties.dbValue;\n    viewModelObject.cellProperties = {};\n\n    for (var ii = 0; ii < dbValue.length; ii++) {\n      var keyValue = dbValue[ii].split('\\\\:');\n      var value = keyValue[1] || '';\n      value = value.replace('{__UTC_DATE_TIME}', '');\n\n      if (ii === 0) {\n        viewModelObject.cellHeader1 = value;\n      } else if (ii === 1) {\n        viewModelObject.cellHeader2 = value;\n      } else if (value) {\n        var key = keyValue[0];\n        viewModelObject.cellProperties[key] = {\n          key: key,\n          value: value\n        };\n      }\n    }\n  }\n};\n/**\n * Update this model object's Thumbnail URL based on the FMS ticket stored in the awp0ThumbnailImageTicket property\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\n\n\nvar updateIcons = function (viewModelObject) {\n  if (viewModelObject && viewModelObject.props) {\n    viewModelObject.thumbnailURL = awIconSvc.getThumbnailFileUrl(viewModelObject);\n    viewModelObject.typeIconURL = awIconSvc.getTypeIconFileUrl(viewModelObject);\n\n    if (viewModelObject.thumbnailURL) {\n      viewModelObject.hasThumbnail = true;\n    } else {\n      viewModelObject.hasThumbnail = false;\n    }\n  }\n};\n/**\n * Get Model object from uid\n * @param {String} uid - The UID of the object whose Model object is required\n * @returns {modelObj} modelObject\n */\n\n\nvar getModelObject = function (uid) {\n  return cdm.getObject(uid);\n};\n/**\n * Update this model object's status indicators\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\n\n\nvar updateStatusIndicators = function (viewModelObject) {\n  if (viewModelObject.props) {\n    // Since we dont want to add another dependency in visualIndicatorSvc on cdm, we are passing callback here\n    // This will be called from visualIndicatorSvc when there is a need to get model object from UID.\n    var getObjCb = getModelObject;\n    var adaptedVmo = viewModelObject;\n\n    if (viewModelObject.type === 'Awp0XRTObjectSetRow') {\n      // Get underlying target object's UID if 'awp0Target' property exists\n      if (viewModelObject.props && viewModelObject.props.awp0Target) {\n        var targetUID = viewModelObject.props.awp0Target.dbValue;\n        var targetMO = cdm.getObject(targetUID);\n\n        if (targetMO) {\n          adaptedVmo = exports.constructViewModelObjectFromModelObject(targetMO, 'edit', null, null, true);\n        }\n      }\n    }\n\n    var indicators = visualIndicatorSvc.getVisualIndicators(adaptedVmo, getObjCb);\n    viewModelObject.indicators = indicators;\n  }\n};\n/**\n * Update this model object's status indicators\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - The object(s) to update properties on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\n\n\nvar updateColorDecorators = function (vmoIn, skipEvent) {\n  colorDecoratorSvc.setDecoratorStyles(vmoIn, skipEvent);\n};\n/**\n * Method to construct VMO from serverVMO and modelObject\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} operationName - The intended purpose for the new ViewModelOject (e.g. 'edit').\n * @param {String} owningObjUid - The UID of owning object.\n * @param {Object} serverVMO - (Optional) A property map from the server with values to include on the returned VMO.\n * @param {boolean}  skipIconUpdate - to udpate values\n */\n\n\nexport let constructViewModelObjectFromModelObject = function (modelObject, operationName, owningObjUid, serverVMO, skipIconUpdate) {\n  var basicVMO = {};\n  basicVMO.props = {};\n  basicVMO.propertyDescriptors = {};\n\n  if (modelObject) {\n    if (serverVMO) {\n      basicVMO.uid = serverVMO.uid || modelObject.uid;\n\n      if (serverVMO.alternateID || modelObject.alternateID) {\n        basicVMO.alternateID = serverVMO.alternateID || modelObject.alternateID;\n      }\n\n      basicVMO.type = serverVMO.type || modelObject.type;\n      basicVMO.modelType = serverVMO.modelType || modelObject.modelType;\n\n      if (!basicVMO.modelType) {\n        basicVMO.modelType = cmm.getType(basicVMO.type);\n      }\n\n      if (serverVMO.rowStatus) {\n        basicVMO.rowStatus = serverVMO.rowStatus;\n      }\n\n      var vmoProps = serverVMO.props;\n      var moProps = modelObject.props;\n\n      _.forEach(moProps, function (propValue, propName) {\n        if (propValue) {\n          if (vmoProps[propName]) {\n            var moPropValueClone = _.clone(propValue);\n\n            _.merge(moPropValueClone, vmoProps[propName]);\n\n            basicVMO.props[propName] = formatProperties(moPropValueClone, propName, modelObject, serverVMO, operationName);\n          } else {\n            basicVMO.props[propName] = formatProperties(propValue, propName, modelObject, serverVMO, operationName);\n          }\n        }\n      });\n      /**\n       * Check for the case of the serverVMO having a property NOT currently in the modelObject.\n       * <P>\n       * Note: Not sure when this could happen, but need to handle it.\n       */\n\n\n      _.forEach(vmoProps, function (propValue, propName) {\n        if (propValue && !moProps[propName]) {\n          basicVMO.props[propName] = formatProperties(propValue, propName, modelObject, serverVMO, operationName);\n        }\n      });\n    } else {\n      basicVMO.uid = modelObject.uid;\n\n      if (modelObject.alternateID) {\n        basicVMO.alternateID = modelObject.alternateID;\n      }\n\n      basicVMO.type = modelObject.type;\n      basicVMO.modelType = modelObject.modelType;\n\n      if (!basicVMO.modelType) {\n        basicVMO.modelType = cmm.getType(basicVMO.type);\n      }\n\n      basicVMO.props = {};\n\n      _.forEach(modelObject.props, function (propValue, propName) {\n        if (propValue) {\n          basicVMO.props[propName] = formatProperties(propValue, propName, modelObject, serverVMO, operationName);\n        }\n      });\n    }\n  }\n\n  var vmo = exports.constructViewModelObject(basicVMO, false);\n  vmo.operationName = operationName;\n\n  if (basicVMO.rowStatus) {\n    vmo.rowStatus = basicVMO.rowStatus;\n  }\n\n  var updateVMO = alignPropertiesOnVMO(basicVMO, vmo, owningObjUid);\n  updateCellProperties(updateVMO);\n\n  if (!skipIconUpdate) {\n    updateIcons(updateVMO);\n    updateStatusIndicators(updateVMO);\n    updateColorDecorators(updateVMO, true);\n  }\n\n  return updateVMO;\n};\n/**\n * Update this model object's status indicators\n * @param {prop} prop - The object(s) to update properties on.\n * @param {ViewModelProperty} viewProp - if true will skip event.\n * @param {type} propType - if true will skip event.\n */\n\nvar populateViewModelProperty = function (prop, viewProp, propType) {\n  if (!declUtils.isNil(prop.autofocus)) {\n    uwPropertySvc.setAutoFocus(viewProp, prop.autofocus);\n  }\n\n  if (prop.labelPosition) {\n    uwPropertySvc.setPropertyLabelDisplay(viewProp, prop.labelPosition, true);\n\n    if (prop.labelPosition === 'PROPERTY_LABEL_AT_SIDE') {\n      viewProp.editLayoutSide = true;\n    }\n  }\n\n  if (prop.renderingStyle) {\n    uwPropertySvc.setPropertyLabelDisplay(viewProp, prop.renderingStyle, true);\n  } // Add pattern information\n\n\n  if (prop.patterns) {\n    viewProp.patterns = prop.patterns;\n\n    if (prop.condition) {\n      viewProp.condition = prop.condition;\n    }\n  } // Add preferredPattern information\n\n\n  viewProp.preferredPattern = prop.preferredPattern; // Add patternAutoAssignFlags information\n\n  if (prop.patternAutoAssignFlags) {\n    viewProp.patternAutoAssignFlags = prop.patternAutoAssignFlags;\n  }\n\n  if (prop.validationCriteria) {\n    viewProp.validationCriteria = prop.validationCriteria;\n  }\n\n  if (!_.isUndefined(prop.oldValue)) {\n    viewProp.oldValue = prop.oldValue;\n  } else if (prop.oldValues) {\n    viewProp.oldValues = prop.oldValues;\n  }\n\n  if (prop.vertical) {\n    viewProp.vertical = prop.vertical;\n  }\n\n  if (!viewProp.propApi) {\n    viewProp.propApi = {};\n  }\n\n  if (propType === 'BOOLEAN' && prop.propertyRadioTrueText && prop.propertyRadioFalseText) {\n    viewProp.propertyRadioTrueText = prop.propertyRadioTrueText;\n    viewProp.propertyRadioFalseText = prop.propertyRadioFalseText;\n  }\n};\n/**\n * @param {Object} prop -\n * @param {String} propName -\n * @param {Object} owningObj -\n * @param {boolean} isDateAdjusted -\n *\n * @returns {ViewModelProperty} New object initialized with the given data.\n */\n\n\nexport let constructViewModelProperty = function (prop, propName, // eslint-disable-line\nowningObj, isDateAdjusted) {\n  var isArray = prop.isArray;\n  var propType = prop.propType;\n  var displayName = '';\n\n  if (prop.displayName) {\n    displayName = prop.displayName;\n  } else if (prop.propertyDisplayName) {\n    displayName = prop.propertyDisplayName;\n  }\n\n  var isEditable = _.isUndefined(prop.isEditable) ? false : prop.isEditable;\n  var isModifiable = _.isUndefined(prop.isModifiable) ? true : prop.isModifiable;\n  var isRequired = prop.isRequired === true;\n  var isAutoAssign = prop.isAutoAssign === true;\n  var isAutoAssignable = prop.isAutoAssignable === true;\n  var isRichText = prop.isRichText === true;\n  var isEnabled = _.isUndefined(prop.isEnabled) ? true : prop.isEnabled !== false; // default value\n\n  var referenceTypeName = prop.referenceTypeName ? prop.referenceTypeName : '';\n  var maxLength = _.isUndefined(prop.maxLength) ? 0 : prop.maxLength;\n  var maxArraySize = prop.maxArraySize ? prop.maxArraySize : -1;\n  var hasLov = prop.hasLOV === true;\n  var isLocalizable = prop.isLocalizable === true;\n  var isNull = false;\n  var error = null;\n  var renderingHint = prop.renderingHint ? prop.renderingHint : '';\n  var numberOfCharacters = -1;\n  var numberOfLines = prop.numberOfLines ? prop.numberOfLines : -1;\n  var isSelectOnly = false;\n  var requiredText = prop.requiredText;\n  var isTimeEnabled = prop.isTimeEnabled !== false;\n  var values = getPropertyValues(propType, prop, isDateAdjusted);\n\n  if (propType === 'CHAR' || propType === 'STRINGARRAY' && prop.isCharArray) {\n    maxLength = 1;\n  }\n\n  if (propType && propType === 'DATETIME') {\n    propType = 'DATE';\n  }\n\n  var viewProp = uwPropertySvc.createViewModelProperty(propName, displayName, propType, values.value, values.displayValue);\n\n  if (propType === 'STRING' || propType === 'STRINGARRAY') {\n    viewProp.inputType = 'text';\n  }\n\n  if (requiredText) {\n    uwPropertySvc.setPlaceHolderText(viewProp, requiredText); // need to add in VMO\n  }\n\n  isSelectOnly = _.isUndefined(prop.isSelectOnly) ? true : prop.isSelectOnly;\n  uwPropertySvc.setIsSelectOnly(viewProp, isSelectOnly, true);\n\n  if (prop.hasRevRuleAttached) {\n    viewProp.hasRevRuleAttached = true;\n  }\n\n  populateViewModelProperty(prop, viewProp, propType);\n  uwPropertySvc.setHasLov(viewProp, hasLov);\n  uwPropertySvc.setIsRequired(viewProp, isRequired);\n  uwPropertySvc.setIsArray(viewProp, isArray);\n  uwPropertySvc.setIsAutoAssign(viewProp, isAutoAssign);\n  uwPropertySvc.setIsAutoAssignable(viewProp, isAutoAssignable);\n  uwPropertySvc.setIsEditable(viewProp, isEditable);\n  uwPropertySvc.setIsRichText(viewProp, isRichText);\n  uwPropertySvc.setIsEnabled(viewProp, isEnabled);\n  uwPropertySvc.setIsLocalizable(viewProp, isLocalizable);\n  uwPropertySvc.setIsNull(viewProp, isNull);\n  uwPropertySvc.setLength(viewProp, maxLength);\n  uwPropertySvc.setRenderingHint(viewProp, renderingHint);\n  uwPropertySvc.setError(viewProp, error);\n  uwPropertySvc.setNumberOfCharacters(viewProp, numberOfCharacters);\n  uwPropertySvc.setNumberOfLines(viewProp, numberOfLines);\n  uwPropertySvc.setArrayLength(viewProp, maxArraySize);\n  uwPropertySvc.setIsPropertyModifiable(viewProp, isModifiable);\n  uwPropertySvc.setReferenceType(viewProp, referenceTypeName);\n  uwPropertySvc.setTimeEnabled(viewProp, isTimeEnabled);\n  viewProp.initialize = false;\n  viewProp.parentUid = owningObj ? owningObj.uid : '';\n  viewProp.dbValues = prop.dbValues ? prop.dbValues : prop.value;\n  viewProp.uiValues = values.displayValue;\n  viewProp.uiValue = uwPropertySvc.getUiValue(viewProp.uiValues);\n  viewProp.sourceObjectLastSavedDate = prop.srcObjLsd;\n  viewProp.srcObjectTypeName = prop.srcObjectTypeName;\n  viewProp.iconName = prop.iconName;\n  viewProp.iconSource = prop.iconSource;\n  viewProp.action = prop.action;\n  viewProp.tooltip = prop.tooltip;\n  return viewProp;\n}; // constructViewModelProperty\n\n/**\n * Class used to help view specific state information.\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {boolean} isDateAdjusted - isDateAdjusted\n */\n\nvar ViewModelObject = function (modelObject, isDateAdjusted) {\n  // eslint-disable-line complexity\n  var self = this;\n  self.props = {};\n  self.propertyDescriptors = {};\n  self.visible = true;\n  self.uid = modelObject.uid;\n  self.type = modelObject.type;\n  self.modelType = modelObject.modelType;\n\n  if (modelObject.alternateID) {\n    self.alternateID = modelObject.alternateID;\n  }\n\n  _.forOwn(modelObject.props, function (propValue, propName) {\n    if (propValue) {\n      self.props[propName] = exports.constructViewModelProperty(propValue, propName, self, isDateAdjusted);\n    }\n  });\n};\n/**\n * @return {String|Object} Displayable 'id' of this ViewModelObject (if possible, else the UID or '???' is\n *         returned).\n */\n\n\n_c2 = ViewModelObject;\n_c = ViewModelObject;\n\nViewModelObject.prototype.toString = function () {\n  if (this.cellHeader1) {\n    return this.cellHeader1;\n  } else if (this.props.object_string && this.props.object_string.uiValues[0]) {\n    return this.props.object_string.uiValues[0];\n  } else if (this.uid) {\n    return this.uid;\n  }\n\n  return '???';\n};\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified.\n *\n * @return {StringArray} Array of property names.\n */\n\n\nViewModelObject.prototype.getDirtyProps = function () {\n  var propertyNameValues = [];\n\n  for (var prop in this.props) {\n    if (this.props.hasOwnProperty(prop)) {\n      if (uwPropertySvc.isModified(this.props[prop])) {\n        var propNameValue = {};\n        propNameValue.name = prop;\n        propNameValue.values = uwPropertySvc.getValueStrings(this.props[prop]);\n        propertyNameValues.push(propNameValue);\n      }\n    }\n  }\n\n  return propertyNameValues;\n};\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\n\n\nViewModelObject.prototype.getSaveableDirtyProps = function () {\n  var propertyNameValues = this.getDirtyProps();\n\n  _.forEach(propertyNameValues, function (propObject) {\n    var propVals = propObject.values;\n\n    for (var i = 0; i < propVals.length; i++) {\n      propVals[i] = String(propVals[i]);\n    }\n  });\n\n  return propertyNameValues;\n};\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\n\n\nViewModelObject.prototype.getAutoAssignableProps = function () {\n  var propertyNameValues = [];\n\n  for (var prop in this.props) {\n    if (this.props.hasOwnProperty(prop) && this.props[prop].isAutoAssignable) {\n      var propNameValue = {};\n      propNameValue.name = prop;\n      propNameValue.values = uwPropertySvc.getValueStrings(this.props[prop]);\n      propertyNameValues.push(propNameValue);\n    }\n  }\n\n  _.forEach(propertyNameValues, function (propObject) {\n    var propVals = propObject.values;\n\n    for (var i = 0; i < propVals.length; i++) {\n      propVals[i] = String(propVals[i]);\n    }\n  });\n\n  return propertyNameValues;\n};\n/**\n * This function sets the vmo edit state\n * @param {Object} vmo the view model object.\n * @param {Boolean} editState the edit state.\n */\n\n\nexport const setEditState = function (vmo, editState) {\n  vmo.isEditing = editState;\n};\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Object} vmo - the view model object\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\n\nexport const clearEditableStates = function (vmo, skipDigest) {\n  setEditState(vmo, false);\n\n  _.forEach(vmo.props, function (prop2) {\n    uwPropertySvc.resetUpdates(prop2);\n    uwPropertySvc.setIsEditable(prop2, false);\n  });\n};\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\n\nViewModelObject.prototype.clearEditiableStates = function (skipDigest) {\n  clearEditableStates(this, skipDigest);\n};\n/**\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n *\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n */\n\n\nViewModelObject.prototype.setEditableStates = function (editable, override, skipDigest) {\n  exports.setEditableStates(this, editable, override, skipDigest);\n};\n/**\n * Retrieves the id of the object, currently set to uid.\n *\n * Could change in future if each vmo (with cardinality) has their own unique id instead of 'uid'.\n *\n * @returns {String} The ID.\n */\n\n\nViewModelObject.prototype.getId = function () {\n  return this.uid;\n};\n/**\n\n * Retrieve the ViewModelProperty object with the same basePropertyName and sourceObjectUid as the parameters.\n\n *\n\n * @param {String} basePropertyName - the base property name trying to be matched\n\n * @param {String} uid - unique id\n\n *\n\n * @returns {ViewModelProperty} The found property.\n\n */\n\n\nViewModelObject.prototype.retrievePropertyWithBasePropertyName = function (basePropertyName, uid) {\n  var foundProperty = null;\n\n  _.forEach(this.props, function (currentProperty, key) {\n    var currentBasePropertyName = uwPropertySvc.getBasePropertyName(key);\n\n    if (currentBasePropertyName === basePropertyName) {\n      var sourceObjectUid = uwPropertySvc.getSourceObjectUid(currentProperty);\n\n      if (sourceObjectUid === uid) {\n        foundProperty = currentProperty;\n        return false;\n      }\n    }\n  });\n\n  return foundProperty;\n};\n/**\n\n * create VMO API for all interface such as dataParser , viewModelCollection\n\n *\n\n * @constructor\n\n *\n\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n\n * @param {boolean} isDateAdjusted isDateAdjusted\n\n */\n\n\nexport let constructViewModelObject = function (modelObject, isDateAdjusted) {\n  return new ViewModelObject(modelObject, isDateAdjusted);\n};\n/**\n\n * Get view model property type based on the value type and array flag.\n\n *\n\n * @param {Integer} valueType - The valueType for this property\n\n * @param {Boolean} isArray - array flag\n\n *\n\n * @return {propertyType} propertyType based off the integer value of valueType (String/Double/char etc.)\n\n */\n\nexport let getClientPropertyType = function (valueType, isArray) {\n  // eslint-disable-line complexity\n  var propertyType;\n\n  switch (valueType) {\n    case 1:\n      if (isArray) {\n        propertyType = 'STRINGARRAY';\n      } else {\n        propertyType = 'CHAR';\n      }\n\n      break;\n\n    case 2:\n      if (isArray) {\n        propertyType = 'DATEARRAY';\n      } else {\n        propertyType = 'DATE';\n      }\n\n      break;\n\n    case 3:\n    case 4:\n      if (isArray) {\n        propertyType = 'DOUBLEARRAY';\n      } else {\n        propertyType = 'DOUBLE';\n      }\n\n      break;\n\n    case 5:\n      if (isArray) {\n        propertyType = 'INTEGERARRAY';\n      } else {\n        propertyType = 'INTEGER';\n      }\n\n      break;\n\n    case 6:\n      if (isArray) {\n        propertyType = 'BOOLEANARRAY';\n      } else {\n        propertyType = 'BOOLEAN';\n      }\n\n      break;\n\n    case 7:\n      if (isArray) {\n        propertyType = 'INTEGERARRAY';\n      } else {\n        propertyType = 'SHORT';\n      }\n\n      break;\n\n    case 8:\n      if (isArray) {\n        propertyType = 'STRINGARRAY';\n      } else {\n        propertyType = 'STRING';\n      }\n\n      break;\n\n    case 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n      if (isArray) {\n        propertyType = 'OBJECTARRAY';\n      } else {\n        propertyType = 'OBJECT';\n      }\n\n      break;\n\n    default:\n      propertyType = 'UNKNOWN';\n      break;\n  }\n\n  return propertyType;\n};\n/**\n\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n\n *\n\n * @param {ViewModelObject} vmo - The viewModelObject containing the 'props' to be checked.\n\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n\n *            different than the desired state.\n\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n\n */\n\nexport let setEditableStates = function (vmo, editable, override, skipDigest) {\n  setEditState(vmo, editable);\n  var modelObject = cdm.getObject(vmo.uid);\n  var isEditableNil = declUtils.isNil(editable);\n\n  _.forEach(vmo.props, function (propValue, propName) {\n    if (propValue) {\n      if (isEditableNil) {\n        var modelProp = modelObject.props[propName];\n\n        if (modelProp) {\n          propValue.isEditable = modelProp.modifiable;\n          uwPropertySvc.setEditable(propValue, modelProp.modifiable);\n          /**\n            * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n            * uwPropertySvc.setEditState instead. No need to set viewProp.editableInViewModel separately as it\n            * will be taken care by setEditStates method. This change is done as part of handling upload\n            * dataset use case.\n            */\n\n          uwPropertySvc.setEditState(propValue, modelProp.modifiable, true);\n        }\n      } else {\n        propValue.isEditable = editable;\n        uwPropertySvc.setEditable(propValue, editable);\n        /**\n          * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n          * uwPropertySvc.setEditState instead . No need to set viewProp.editableInViewModel separately as it\n          * will be taken care by setEditStates method. This changes is done as part of handling upload\n          * dataset use case.\n          */\n\n        uwPropertySvc.setEditState(propValue, editable, override, true);\n      }\n    }\n  });\n};\n/**\n\n/**\n\n * @param {String|Object} input - UID of the ModelObject to create a ViewModelObject wrapper for OR model object\n\n * @param {String} operationName - if \"EDIT\", then the VMO is modifiable. (null is acceptable)\n\n * @param {String} owningObjUid - The UID of owning object\n\n * @param {ViewModelObject} serverVMO -\n\n *\n\n * @return {ViewModelObject} Newly created ViewModelObject wrapper initialized with properties from the given\n\n *         inputs.\n\n */\n\nexport let createViewModelObject = function (input, operationName, owningObjUid, serverVMO) {\n  var modelObject = input;\n\n  if (_.isString(input)) {\n    modelObject = cdm.getObject(input);\n  } else if (input && input.uid && !serverVMO) {\n    modelObject = cdm.getObject(input.uid);\n  }\n\n  if (!modelObject) {\n    logger.error('viewModelObject.createViewModelObject: ' + 'Unable to locate ModelObject in the clientDataModel with UID=' + input);\n    return null;\n  }\n\n  return exports.constructViewModelObjectFromModelObject(modelObject, operationName, owningObjUid, serverVMO);\n};\n/**\n\n * This is a preProcessor to 'updateSourceObjectPropertiesByViewModelObject' to trivially ignore updating existing\n\n * (loaded) VMOs in the given collection.\n\n *\n\n * @param {ViewModelObjectArray} loadedVMOs - Collection of viewModelObjects to consider for updating.\n\n *\n\n * @param {IModelObjectArray} updatedCDMObjects - CDM Objects that have been reported as updated or modified.\n\n */\n\nexport let updateViewModelObjectCollection = function (loadedVMOs, updatedCDMObjects) {\n  /**\n    * Check if there is nothing to work on or with.\n    */\n  if (_.isEmpty(loadedVMOs) || _.isEmpty(updatedCDMObjects)) {\n    return;\n  }\n  /**\n    * Create a map containing the unique UID of all the loaded viewModelObjects so that we can trivially ignore any\n    * changed CDM objects NOT in this viewModelCollection.\n    * <P>\n    * Note: The map needs to consider all the different UIDs a modified object could be referenced by it. The UID\n    * checks mirror the check made in 'updateSourceObjectPropertiesByViewModelObject'.\n    */\n\n\n  var vmoMap = {};\n\n  _.forEach(loadedVMOs, function cdmHandlerCheck(vmo) {\n    if (vmo.uid) {\n      vmoMap[vmo.uid] = true;\n\n      if (!_.isEmpty(vmo.props)) {\n        if (vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target && vmo.props.awp0Target.dbValue) {\n          vmoMap[vmo.props.awp0Target.dbValue] = true;\n        }\n\n        _.forEach(vmo.props, function (vmProp) {\n          var sourceObjectUid = uwPropertySvc.getSourceObjectUid(vmProp);\n\n          if (sourceObjectUid) {\n            vmoMap[sourceObjectUid] = true;\n          }\n\n          if (vmProp.parentUid) {\n            vmoMap[vmProp.parentUid] = true;\n          }\n        });\n      }\n    }\n  });\n  /**\n    * Check if we ended up with NO viewModelObjects.\n    */\n\n\n  if (_.isEmpty(vmoMap)) {\n    return;\n  }\n  /**\n    * Loop for each modified object and update any VMOs effected by it.\n    */\n\n\n  _.forEach(updatedCDMObjects, function _updateViewModelCollection(updatedObj) {\n    if (updatedObj.uid && vmoMap[updatedObj.uid]) {\n      var updatedVmo = exports.createViewModelObject(updatedObj, 'EDIT');\n\n      if (updatedVmo && updatedVmo.props) {\n        exports.updateSourceObjectPropertiesByViewModelObject(updatedVmo, loadedVMOs);\n      }\n    }\n  });\n};\n/**\n\n * Updates all the viewModelObjects with the updatedVMO, depending on the property's sourceUid.\n\n *\n\n * @param {ViewModelObject} updatedVMO - view model object with updated information\n\n * @param {ViewModelObjectArray} origVMOs - all the view model objects that need to be updated\n\n */\n\nexport let updateSourceObjectPropertiesByViewModelObject = function (updatedVMO, origVMOs, propsToUpdate) {\n  if (updatedVMO && updatedVMO.props && origVMOs) {\n    var updatedUid = updatedVMO.uid;\n    var updatedProps = {};\n\n    _.forEach(origVMOs, function (vmo) {\n      if (vmo && vmo.props) {\n        var vmoChanged = false;\n\n        if (vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target && vmo.props.awp0Target.dbValue === updatedUid) {\n          _.forEach(vmo.props, function (vmProp, key) {\n            // If this is not one of the props we want to update, continue\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(key) === -1) {\n              return true;\n            }\n\n            var updatedProp = updatedVMO.props[key];\n\n            if (updatedProp) {\n              uwPropertySvc.copyModelData(vmProp, updatedProp);\n\n              if (updatedProps[vmo.uid] === undefined) {\n                updatedProps[vmo.uid] = [];\n              }\n\n              updatedProps[vmo.uid].push(vmProp.propertyName);\n              vmoChanged = true;\n            }\n          });\n        }\n\n        _.forEach(vmo.props, function (vmProp) {\n          var sourceObjectUid = uwPropertySvc.getSourceObjectUid(vmProp); // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n          // original object containing the property\n\n          if (sourceObjectUid === updatedUid || vmProp.parentUid === updatedUid) {\n            var propertyNameLookup = vmProp.propertyName;\n\n            if (sourceObjectUid === updatedUid && sourceObjectUid !== vmProp.parentUid) {\n              propertyNameLookup = uwPropertySvc.getBasePropertyName(propertyNameLookup);\n            } // If this is not one of the props we want to update, continue\n\n\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(propertyNameLookup) === -1) {\n              return true;\n            }\n\n            var updatedProp = updatedVMO.props[propertyNameLookup];\n\n            if (updatedProp) {\n              var updatedPropSourceUid = uwPropertySvc.getSourceObjectUid(updatedProp);\n\n              if (sourceObjectUid === updatedPropSourceUid) {\n                uwPropertySvc.copyModelData(vmProp, updatedProp);\n\n                if (updatedProps[vmo.uid] === undefined) {\n                  updatedProps[vmo.uid] = [];\n                }\n\n                updatedProps[vmo.uid].push(vmProp.propertyName);\n                vmoChanged = true;\n              }\n            }\n          }\n        });\n\n        _.forEach(updatedVMO.props, function (updatedVmProp) {\n          var updatedVmPropSourceUid = uwPropertySvc.getSourceObjectUid(updatedVmProp); // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n          // original object containing the property\n\n          if (vmo.uid === updatedVmPropSourceUid || updatedVmProp.parentUid === vmo.uid) {\n            var updatedPropNameLookup = updatedVmProp.propertyName;\n\n            if (updatedVmPropSourceUid === vmo.uid && updatedVmPropSourceUid !== updatedVmProp.parentUid) {\n              updatedPropNameLookup = uwPropertySvc.getBasePropertyName(updatedPropNameLookup);\n            } // If this is not one of the props we want to update, continue\n\n\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(updatedPropNameLookup) === -1) {\n              return true;\n            }\n\n            if (!vmo.props[updatedPropNameLookup]) {\n              vmo.props[updatedPropNameLookup] = updatedVmProp;\n\n              if (updatedProps[vmo.uid] === undefined) {\n                updatedProps[vmo.uid] = [];\n              }\n\n              updatedProps[vmo.uid].push(updatedPropNameLookup);\n              vmoChanged = true;\n            }\n          }\n        });\n\n        if (vmoChanged) {\n          updateCellProperties(vmo);\n          updateStatusIndicators(vmo);\n          updateColorDecorators(vmo);\n          updateIcons(vmo);\n        }\n      }\n    });\n\n    eventBus.publish('viewModelObject.propsUpdated', updatedProps);\n  }\n};\n/**\n\n * Update all existing VMO properties from the underlying CDM object's property value (with the same name).\n\n *\n\n * <pre>\n\n * </pre>\n\n *\n\n * @param {Object} vmo view model object\n\n */\n\nexport let updateVMOProperties = function (vmo) {\n  if (!vmo.uid) {\n    return;\n  }\n\n  var modelObj = cdm.getObject(vmo.uid);\n\n  if (!modelObj || !modelObj.props) {\n    return;\n  }\n\n  _.forEach(vmo.props, function (vmoProp, propName) {\n    if (modelObj.props.hasOwnProperty(propName)) {\n      var moProp = modelObj.props[propName];\n      vmoProp.dbValues = moProp.dbValues;\n      vmoProp.uiValues = moProp.uiValues;\n      vmoProp.uiValue = moProp.getDisplayValue();\n\n      if (moProp.uiValues) {\n        vmoProp.displayValues = moProp.uiValues;\n      } else {\n        vmoProp.displayValues = [];\n      }\n\n      vmoProp.isEditable = moProp.propertyDescriptor.constantsMap.editable === '1' && moProp.modifiable;\n      vmoProp.isLocalizable = moProp.propertyDescriptor.constantsMap.localizable === '1';\n    }\n  });\n\n  updateCellProperties(vmo);\n  updateStatusIndicators(vmo);\n  updateColorDecorators(vmo);\n  updateIcons(vmo);\n};\n/**\n\n * Test if the given object 'is-a' TreeLoadInput created by this service.\n\n *\n\n * @param {Object} objectToTest - Object to check prototype history of.\n\n * @return {Boolean} TRUE if the given object is a TreeLoadInput.\n\n */\n\nexport let isViewModelObject = function (objectToTest) {\n  return objectToTest instanceof ViewModelObject;\n};\n/**\n * This recursive function returns the given vmos and their cached children if present\n * @param {* } vmObjects the view model objects.\n * @param {* } vmObjectsAcc the accumulation of the view model objects and their cached children.\n * @returns {* } vmObjects and any cached children.\n */\n\nexport const getLoadedAndCachedViewModelObjects = function (vmObjects, vmObjectsAcc) {\n  if (!vmObjectsAcc) {\n    vmObjectsAcc = [];\n  }\n\n  _.forEach(vmObjects, vmo => {\n    vmObjectsAcc.push(vmo);\n\n    if (vmo.__expandState) {\n      getLoadedAndCachedViewModelObjects(vmo.__expandState.expandedNodes, vmObjectsAcc);\n    }\n  });\n\n  return vmObjectsAcc;\n};\n/**\n * This function gets the vmos that are not in edit\n * @param {* } vmObjects the view model objects.\n * @returns {* } vmObjects that are not in edit.\n */\n\nexport const getVmosNotInEdit = function (vmObjects) {\n  return vmObjects.filter(vmObject => {\n    return !vmObject.isEditing;\n  });\n};\nexports = {\n  constructViewModelProperty,\n  constructViewModelObject,\n  getClientPropertyType,\n  setEditableStates,\n  clearEditableStates,\n  constructViewModelObjectFromModelObject,\n  createViewModelObject,\n  updateViewModelObjectCollection,\n  updateSourceObjectPropertiesByViewModelObject,\n  updateVMOProperties,\n  isViewModelObject,\n  getLoadedAndCachedViewModelObjects,\n  getVmosNotInEdit,\n  setEditState\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewModelObject\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ViewModelObject\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/viewModelObjectService.js"],"names":["exports","getSourceObjectProp","srcObj","_","prop","cdm","srcObjProp","actualPropName","uwPropertySvc","getPropValue","uw_displayValue","propType","uw_dbValue","isDateAdjusted","dateTimeSvc","Number","getPropValueOnArray","i","isCharArray","getPropValueNotArray","tempDisplayValue","isFinite","getPropertyValues","value","displayValue","formatProperties","propValue","Object","hasServerVMO","serverVMO","initialValue","inputDbValues","displayValues","propDesc","declUtils","propFromServerVMO","constantsMap","modelObject","operationName","tempDisplayValues","indx","alignPropertiesOnVMO","viewModelObject","lovService","target","updateCellProperties","dbValue","ii","keyValue","key","updateIcons","awIconSvc","getModelObject","updateStatusIndicators","getObjCb","adaptedVmo","targetUID","targetMO","indicators","visualIndicatorSvc","updateColorDecorators","colorDecoratorSvc","constructViewModelObjectFromModelObject","basicVMO","cmm","vmoProps","moProps","moPropValueClone","vmo","updateVMO","populateViewModelProperty","viewProp","constructViewModelProperty","isArray","displayName","isEditable","isModifiable","isRequired","isAutoAssign","isAutoAssignable","isRichText","isEnabled","referenceTypeName","maxLength","maxArraySize","hasLov","isLocalizable","isNull","error","renderingHint","numberOfCharacters","numberOfLines","isSelectOnly","requiredText","isTimeEnabled","values","owningObj","ViewModelObject","self","propertyNameValues","propNameValue","propVals","propObject","String","setEditState","clearEditableStates","foundProperty","currentBasePropertyName","sourceObjectUid","constructViewModelObject","getClientPropertyType","propertyType","setEditableStates","isEditableNil","modelProp","createViewModelObject","input","logger","updateViewModelObjectCollection","vmoMap","vmProp","updatedObj","updatedVmo","updateSourceObjectPropertiesByViewModelObject","updatedVMO","updatedUid","updatedProps","vmoChanged","propsToUpdate","updatedProp","propertyNameLookup","updatedPropSourceUid","updatedVmPropSourceUid","updatedVmProp","updatedPropNameLookup","eventBus","updateVMOProperties","modelObj","moProp","vmoProp","isViewModelObject","objectToTest","getLoadedAndCachedViewModelObjects","vmObjectsAcc","getVmosNotInEdit","vmObject"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-disable complexity */\n\n/**\n * This module provides access to service APIs that help to convert the model object to view model object\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/viewModelObjectService\n */\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport lovService from 'js/lovService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\nimport colorDecoratorSvc from 'js/colorDecoratorService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport awIconSvc from 'js/awIconService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport eventBus from 'js/eventBus';\n\nvar exports = {};\n\n/**\n * This is added to handle relational property specified in objectset. prop specified as \"relName.relProp\", need to\n * extract the actual prop name to extract value from the refModel Object\n *\n * @param {Object} prop - The IViewModelPropObject of an IViewModelObject (from serverVMO or modelObject property)\n * @param {String} propName - The property name\n * @param {IModelObject} refModelObject - The actual IModelObject for which we are creating ViewModelObject\n *\n * @return {ModelObjectProperty|null} The Result.\n */\nvar getSourceObjectProp = function( prop, propName, refModelObject ) {\n    var srcObj = null;\n\n    if( !_.isEmpty( prop.intermediateObjectUids ) ) {\n        srcObj = cdm.getObject( prop.intermediateObjectUids[ prop.intermediateObjectUids.length - 1 ] );\n    } else {\n        srcObj = refModelObject;\n    }\n\n    var srcObjProp = srcObj ? srcObj.props[ propName ] : null;\n\n    if( !srcObjProp && /\\./.test( propName ) ) {\n        var actualPropName = uwPropertySvc.getBasePropertyName( propName );\n\n        srcObjProp = srcObj ? srcObj.props[ actualPropName ] : null;\n    }\n\n    return srcObjProp;\n};\n\nvar getPropValue = function( uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted ) {\n    uw_displayValue[ 0 ] = _.isString( prop.displayValue[ 0 ] ) ? prop.displayValue[ 0 ] : new String( prop.displayValue[ 0 ] );\n    if( propType === 'DATE' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value[ 0 ] ).getTime();\n        uw_displayValue[ 0 ] = isDateAdjusted ? dateTimeSvc.formatDate( new Date( prop.displayValue[ 0 ] ).getTime() ) : prop.displayValue[ 0 ];\n    } else if( propType === 'DATETIME' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value[ 0 ] ).getTime();\n        uw_displayValue[ 0 ] = dateTimeSvc.formatSessionDateTime( new Date( prop.displayValue[ 0 ] ).getTime() );\n    } else if( ( propType === 'DOUBLE' || propType === 'INTEGER' ) && prop.value[ 0 ] ) {\n        uw_dbValue = Number( prop.value[ 0 ] );\n    } else if( propType === 'CHAR' && prop.displayValue[ 0 ] ) {\n        uw_dbValue = prop.displayValue[ 0 ];\n    } else {\n        uw_dbValue = prop.value[ 0 ];\n    }\n    return uw_dbValue;\n};\n\nvar getPropValueOnArray = function( uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted ) {\n    uw_dbValue = [];\n    for( var i = 0; i < prop.value.length; i++ ) {\n        var isCharArray = false;\n        /**\n         * For character data types, TC server returns character ASCII values as the property internal\n         * value. Since AW doesn't differentiate between character and string types, the property object\n         * needs to created with display values as internal values. So passing the UI values as internal\n         * value.\n         */\n        if( propType === 'STRINGARRAY' && prop.isCharArray ) {\n            isCharArray = true;\n        }\n        uw_displayValue[ i ] = prop.displayValue[ i ];\n        if( propType === 'DATEARRAY' ) {\n            uw_dbValue[ i ] = new Date( prop.value[ i ] ).getTime();\n            uw_displayValue[ i ] = isDateAdjusted ? dateTimeSvc.formatDate( new Date( prop.displayValue[ i ] ).getTime() ) : prop.displayValue[ i ];\n        } else if( propType === 'DATETIMEARRAY' ) {\n            uw_dbValue[ i ] = new Date( prop.value[ i ] ).getTime();\n            uw_displayValue[ i ] = dateTimeSvc.formatSessionDateTime( new Date( prop.displayValue[ i ] ).getTime() );\n        } else if( ( propType === 'DOUBLEARRAY' || propType === 'INTEGERARRAY' ) && prop.value[ i ] ) {\n            uw_dbValue[ i ] = Number( prop.value[ i ] );\n        } else if( isCharArray && prop.displayValue[ i ] ) {\n            uw_dbValue[ i ] = prop.displayValue[ i ];\n        } else {\n            uw_dbValue[ i ] = prop.value[ i ];\n        }\n    }\n    return uw_dbValue;\n};\n\nvar getPropValueNotArray = function( prop, uw_displayValue, propType, uw_dbValue ) {\n    if( _.isNil( prop.displayValue[ 0 ] ) ) {\n        uw_displayValue[ 0 ] = '';\n    } else {\n        var tempDisplayValue = new String( prop.displayValue[ 0 ] );\n        uw_displayValue[ 0 ] = _.isString( prop.displayValue[ 0 ] ) ? prop.displayValue[ 0 ] : tempDisplayValue;\n    }\n    if( propType === 'DATE' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value ).getTime();\n        uw_displayValue[ 0 ] = dateTimeSvc.formatDate( new Date( prop.displayValue[ 0 ] ).getTime() );\n    } else if( propType === 'DATETIME' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value[ 0 ] ).getTime();\n        uw_displayValue[ 0 ] = dateTimeSvc.formatSessionDateTime( new Date( prop.displayValue[ 0 ] ).getTime() );\n    } else if( ( propType === 'DOUBLE' || propType === 'INTEGER' ) && prop.value && isFinite( prop.value ) && prop.value !== null && prop.value !== '' && !_.isArray( prop.value ) ) {\n        uw_dbValue = Number( prop.value );\n    } else if( propType === 'CHAR' && prop.value ) {\n        uw_dbValue = prop.displayValue[ 0 ];\n    } else {\n        uw_dbValue = prop.value;\n    }\n    return uw_dbValue;\n};\n\n/**\n *\n * @param {String} propType - The property type\n * @param {*} prop - The property value as defined in definition\n * @param {boolean} isDateAdjusted - isDateAdjusted\n * @returns {Object} - Object containing value and display value\n */\nvar getPropertyValues = function( propType, prop, isDateAdjusted ) {\n    var uw_dbValue = null;\n    var uw_displayValue = null;\n\n    if( !_.isUndefined( prop.value ) && !_.isNull( prop.value ) ) {\n        uw_displayValue = [];\n        if( prop.isArray ) {\n            uw_dbValue = getPropValueOnArray( uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted );\n        } else if( _.isArray( prop.value ) && prop.value.length > 0 ) {\n            uw_dbValue = getPropValue( uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted );\n        } else {\n            uw_dbValue = getPropValueNotArray( prop, uw_displayValue, propType, uw_dbValue );\n        }\n    } else if( !prop.value && propType === 'BOOLEAN' ) {\n        uw_displayValue = [];\n        if( _.isNil( prop.displayValue[ 0 ] ) ) {\n            uw_displayValue[ 0 ] = '';\n        } else {\n            var tempDisplayValue = new String( prop.displayValue[ 0 ] );\n            uw_displayValue[ 0 ] = _.isString( prop.displayValue[ 0 ] ) ? prop.displayValue[ 0 ] : tempDisplayValue;\n        }\n        uw_dbValue = prop.value;\n    } else {\n        uw_displayValue = prop.displayValue;\n    }\n\n    return {\n        value: uw_dbValue,\n        displayValue: uw_displayValue\n    };\n};\n\n/**\n * format serverVMO/modelObject property as par consistent API schema\n *\n * @constructor\n *\n * @param {propObject} prop - The IModelObject to create a ViewModelObject for.\n * @param {string} propName - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} serverVMO - The IModelObject to create a ViewModelObject for.\n * @param {string} operationName - operationName\n */\nvar formatProperties = function( prop, propName, modelObject, serverVMO, operationName ) {\n    var propValue = prop instanceof Object ? Object.assign( {}, prop ) : new Object();\n    var hasServerVMO = serverVMO && serverVMO.props && serverVMO.props.hasOwnProperty( propName );\n    var initialValue = '';\n    var inputDbValues = null;\n    var displayValues = null;\n    var propDesc = prop.propertyDescriptor;\n    propValue.isModifiable = false;\n    if( !declUtils.isNil( prop.hasLOV ) ) {\n        propValue.hasLOV = prop.hasLOV;\n    } else {\n        propValue.hasLOV = propDesc && propDesc.lovCategory > 0;\n    }\n    if( hasServerVMO ) {\n        propValue.propType = exports.getClientPropertyType( prop.type, prop.isArray === true );\n        propValue.isRequired = prop.isRequired === true;\n        propValue.displayName = prop.propertyDisplayName ? prop.propertyDisplayName : null;\n        propValue.referenceTypeName = prop.ReferencedTypeName ? prop.ReferencedTypeName : '';\n        propValue.isModifiable = prop.isModifiable === true;\n        propValue.isCharArray = prop.type === 1;\n        initialValue = prop.initialValue ? prop.initialValue : null;\n        if( prop.hasRevRuleAttached ) {\n            propValue.hasRevRuleAttached = prop.hasRevRuleAttached === true;\n        }\n        if( propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY' ) {\n            let propFromServerVMO = serverVMO.props[ propName ];\n            //for date type property, set default value false to isTimeEnabled\n            propValue.isTimeEnabled = false;\n            if( propFromServerVMO ) {\n                propValue.isTimeEnabled = _.isUndefined( propFromServerVMO.isTimeEnabled ) ? false : propFromServerVMO.isTimeEnabled;\n            }\n        }\n    } else {\n        var constantsMap;\n        if( propDesc ) {\n            propValue.isArray = propDesc.anArray;\n            propValue.propType = exports.getClientPropertyType( propDesc.valueType, propValue.isArray );\n            propValue.isCharArray = propDesc.valueType === 1;\n            propValue.displayName = propDesc.displayName;\n            propValue.maxLength = propDesc.maxLength;\n            propValue.maxArraySize = propDesc.maxArraySize ? propDesc.maxArraySize : -1;\n            constantsMap = propDesc.constantsMap;\n        }\n        if( constantsMap ) {\n            initialValue = constantsMap.initialValue;\n            propValue.initialValue = constantsMap.initialValue;\n            propValue.isEditable = constantsMap.editable === '1';\n            propValue.isRequired = constantsMap.required === '1';\n            propValue.isAutoAssignable = constantsMap.autoassignable === '1';\n            propValue.isRichText = constantsMap.Fnd0RichText === '1';\n            propValue.isEnabled = constantsMap.editable ? constantsMap.editable === '1' : true;\n            propValue.referenceTypeName = constantsMap.ReferencedTypeName || '';\n            if( propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY' ) {\n                //from SOA getTypeDescriptions2, timeEnabled is undefined when Fnd0EnableTimeForDateProperty is default false.\n                propValue.isTimeEnabled = _.isUndefined( constantsMap.timeEnabled ) ? false : constantsMap.timeEnabled === '1';\n            }\n            // If isModifiable is false on the modelObject, use that first over propertyDescriptor's constantsMap default value\n            if( modelObject && modelObject.props &&\n                modelObject.props.is_modifiable &&\n                modelObject.props.is_modifiable.dbValues &&\n                modelObject.props.is_modifiable.dbValues[ 0 ] === '0' ) {\n                propValue.isModifiable = false;\n            } else {\n                propValue.isModifiable = constantsMap.modifiable === '1';\n            }\n        }\n    }\n    if( _.isNil( propValue.isModifiable ) ) {\n        propValue.isModifiable = false;\n    }\n    if( operationName && _.isString( operationName ) ) {\n        if( /^(EDIT|REVISE|SAVEAS|CREATE)$/i.test( operationName ) ) {\n            if( hasServerVMO ) {\n                propValue.isEditable = prop.isModifiable === true;\n            } else {\n                propValue.isEditable = prop.modifiable === true;\n            }\n        }\n        // Set isEnabled flag to 'true' for all properties for SaveAs ,Revise and Create operations.\n        // <P>\n        // Note: Create panel would require the below change when its converted to declarative.\n        if( /^(REVISE|SAVEAS|CREATE)$/i.test( operationName ) ) {\n            propValue.isEnabled = true;\n        }\n    }\n    if( propValue.isDCP ) {\n        inputDbValues = prop && prop.dbValues || [];\n        displayValues = prop && prop.uiValues || [];\n        if( propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY' ) {\n            //For DCP property, replace displayValues with the date formatted dbValues value\n            var tempDisplayValues = [];\n            for( var indx = 0; indx < inputDbValues.length; indx++ ) {\n                if( propValue.isTimeEnabled === false ) {\n                    tempDisplayValues.push( dateTimeSvc.formatSessionDate( inputDbValues[ indx ] ) );\n                } else {\n                    tempDisplayValues.push( dateTimeSvc.formatSessionDateTime( inputDbValues[ indx ] ) );\n                }\n            }\n            if( tempDisplayValues.length > 0 ) {\n                displayValues = tempDisplayValues;\n            }\n        }\n    } else {\n        var srcObjProp = getSourceObjectProp( prop, propName, modelObject );\n        inputDbValues = srcObjProp && srcObjProp.dbValues || [];\n        displayValues = srcObjProp && srcObjProp.uiValues || [];\n    }\n    propValue.dbValues = inputDbValues;\n    if( inputDbValues && inputDbValues.length > 0 ) {\n        propValue.value = inputDbValues;\n    } else if( initialValue !== '' ) {\n        propValue.value = initialValue;\n    } else {\n        propValue.value = null;\n    }\n    propValue.displayValue = displayValues;\n    return propValue;\n};\n\n/**\n * Processing and assigning modelObject and serverVMO property on ViewModelObject\n * It is post processing.\n *\n * @constructor\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {IModelObject} viewModelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} owningObjUid - The intended purpose for the new ViewModelOject (e.g. 'edit').\n */\nvar alignPropertiesOnVMO = function( modelObject, viewModelObject, owningObjUid ) {\n    _.forOwn( modelObject.props, function( propValue, propName ) {\n        var propDesc = propValue.propertyDescriptor;\n        if( propDesc ) {\n            viewModelObject.propertyDescriptors[ propName ] = propDesc;\n        }\n        viewModelObject.props[ propName ].propertyDescriptor = propValue.propertyDescriptor;\n        viewModelObject.props[ propName ].intermediateObjectUids = propValue.intermediateObjectUids;\n        viewModelObject.props[ propName ].isDCP = propValue.isDCP || false;\n        if( !viewModelObject.props[ propName ].lovApi && viewModelObject.props[ propName ].hasLov ) {\n            lovService.initNativeCellLovApi( viewModelObject.props[ propName ], null, viewModelObject.operationName, viewModelObject, owningObjUid );\n        }\n    } );\n    if( modelObject.type === 'Awp0XRTObjectSetRow' && modelObject.props.awp0Target ) {\n        const target = cdm.getObject( modelObject.props.awp0Target.dbValues[ 0 ] );\n        if( target ) {\n            for( const prop of Object.values( modelObject.props ) ) {\n                if( !prop.propertyDescriptor && target.props[ prop.propertyName ] ) {\n                    prop.propertyDescriptor = target.props[ prop.propertyName ].propertyDescriptor;\n                }\n            }\n            for( const prop of Object.values( viewModelObject.props ) ) {\n                if( !prop.propertyDescriptor && target.props[ prop.propertyName ] ) {\n                    prop.propertyDescriptor = target.props[ prop.propertyName ].propertyDescriptor;\n                }\n            }\n        }\n    }\n    return viewModelObject;\n};\n\n/**\n * Update this model object's awp cell properties which are stored as key/value inside an array property\n * awp0CellProperties.\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\nvar updateCellProperties = function( viewModelObject ) {\n    /**\n     * Pull any cell properties out of their encoded string and have them as 1st class properties of the\n     * ViewModelObject.\n     */\n    if( viewModelObject.props && viewModelObject.props.awp0CellProperties ) {\n        // We should look up for dbValue always,'dbValues' is redundant and need to cleanup any dependency on that\n        // dbValue could be array or string based on the mode object\n        var dbValue = viewModelObject.props.awp0CellProperties.dbValue;\n        viewModelObject.cellProperties = {};\n        for( var ii = 0; ii < dbValue.length; ii++ ) {\n            var keyValue = dbValue[ ii ].split( '\\\\:' );\n\n            var value = keyValue[ 1 ] || '';\n\n            value = value.replace( '{__UTC_DATE_TIME}', '' );\n\n            if( ii === 0 ) {\n                viewModelObject.cellHeader1 = value;\n            } else if( ii === 1 ) {\n                viewModelObject.cellHeader2 = value;\n            } else if( value ) {\n                var key = keyValue[ 0 ];\n\n                viewModelObject.cellProperties[ key ] = {\n                    key: key,\n                    value: value\n                };\n            }\n        }\n    }\n};\n\n/**\n * Update this model object's Thumbnail URL based on the FMS ticket stored in the awp0ThumbnailImageTicket property\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\nvar updateIcons = function( viewModelObject ) {\n    if( viewModelObject && viewModelObject.props ) {\n        viewModelObject.thumbnailURL = awIconSvc.getThumbnailFileUrl( viewModelObject );\n        viewModelObject.typeIconURL = awIconSvc.getTypeIconFileUrl( viewModelObject );\n\n        if( viewModelObject.thumbnailURL ) {\n            viewModelObject.hasThumbnail = true;\n        } else {\n            viewModelObject.hasThumbnail = false;\n        }\n    }\n};\n\n/**\n * Get Model object from uid\n * @param {String} uid - The UID of the object whose Model object is required\n * @returns {modelObj} modelObject\n */\nvar getModelObject = function( uid ) {\n    return cdm.getObject( uid );\n};\n\n/**\n * Update this model object's status indicators\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\nvar updateStatusIndicators = function( viewModelObject ) {\n    if( viewModelObject.props ) {\n        // Since we dont want to add another dependency in visualIndicatorSvc on cdm, we are passing callback here\n        // This will be called from visualIndicatorSvc when there is a need to get model object from UID.\n        var getObjCb = getModelObject;\n        var adaptedVmo = viewModelObject;\n\n        if( viewModelObject.type === 'Awp0XRTObjectSetRow' ) {\n            // Get underlying target object's UID if 'awp0Target' property exists\n            if( viewModelObject.props && viewModelObject.props.awp0Target ) {\n                var targetUID = viewModelObject.props.awp0Target.dbValue;\n                var targetMO = cdm.getObject( targetUID );\n                if( targetMO ) {\n                    adaptedVmo = exports.constructViewModelObjectFromModelObject( targetMO, 'edit', null, null, true );\n                }\n            }\n        }\n\n        var indicators = visualIndicatorSvc.getVisualIndicators( adaptedVmo, getObjCb );\n\n        viewModelObject.indicators = indicators;\n    }\n};\n\n/**\n * Update this model object's status indicators\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - The object(s) to update properties on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\nvar updateColorDecorators = function( vmoIn, skipEvent ) {\n    colorDecoratorSvc.setDecoratorStyles( vmoIn, skipEvent );\n};\n\n/**\n * Method to construct VMO from serverVMO and modelObject\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} operationName - The intended purpose for the new ViewModelOject (e.g. 'edit').\n * @param {String} owningObjUid - The UID of owning object.\n * @param {Object} serverVMO - (Optional) A property map from the server with values to include on the returned VMO.\n * @param {boolean}  skipIconUpdate - to udpate values\n */\nexport let constructViewModelObjectFromModelObject = function( modelObject, operationName, owningObjUid, serverVMO, skipIconUpdate ) {\n    var basicVMO = {};\n    basicVMO.props = {};\n    basicVMO.propertyDescriptors = {};\n    if( modelObject ) {\n        if( serverVMO ) {\n            basicVMO.uid = serverVMO.uid || modelObject.uid;\n            if( serverVMO.alternateID || modelObject.alternateID ) {\n                basicVMO.alternateID = serverVMO.alternateID || modelObject.alternateID;\n            }\n            basicVMO.type = serverVMO.type || modelObject.type;\n            basicVMO.modelType = serverVMO.modelType || modelObject.modelType;\n            if( !basicVMO.modelType ) {\n                basicVMO.modelType = cmm.getType( basicVMO.type );\n            }\n            if( serverVMO.rowStatus ) {\n                basicVMO.rowStatus = serverVMO.rowStatus;\n            }\n            var vmoProps = serverVMO.props;\n            var moProps = modelObject.props;\n            _.forEach( moProps, function( propValue, propName ) {\n                if( propValue ) {\n                    if( vmoProps[ propName ] ) {\n                        var moPropValueClone = _.clone( propValue );\n\n                        _.merge( moPropValueClone, vmoProps[ propName ] );\n\n                        basicVMO.props[ propName ] = formatProperties( moPropValueClone, propName, modelObject, serverVMO, operationName );\n                    } else {\n                        basicVMO.props[ propName ] = formatProperties( propValue, propName, modelObject, serverVMO, operationName );\n                    }\n                }\n            } );\n            /**\n             * Check for the case of the serverVMO having a property NOT currently in the modelObject.\n             * <P>\n             * Note: Not sure when this could happen, but need to handle it.\n             */\n            _.forEach( vmoProps, function( propValue, propName ) {\n                if( propValue && !moProps[ propName ] ) {\n                    basicVMO.props[ propName ] = formatProperties( propValue, propName, modelObject, serverVMO, operationName );\n                }\n            } );\n        } else {\n            basicVMO.uid = modelObject.uid;\n            if( modelObject.alternateID ) {\n                basicVMO.alternateID = modelObject.alternateID;\n            }\n            basicVMO.type = modelObject.type;\n            basicVMO.modelType = modelObject.modelType;\n            if( !basicVMO.modelType ) {\n                basicVMO.modelType = cmm.getType( basicVMO.type );\n            }\n            basicVMO.props = {};\n            _.forEach( modelObject.props, function( propValue, propName ) {\n                if( propValue ) {\n                    basicVMO.props[ propName ] = formatProperties( propValue, propName, modelObject, serverVMO, operationName );\n                }\n            } );\n        }\n    }\n    var vmo = exports.constructViewModelObject( basicVMO, false );\n    vmo.operationName = operationName;\n    if( basicVMO.rowStatus ) {\n        vmo.rowStatus = basicVMO.rowStatus;\n    }\n    var updateVMO = alignPropertiesOnVMO( basicVMO, vmo, owningObjUid );\n    updateCellProperties( updateVMO );\n    if( !skipIconUpdate ) {\n        updateIcons( updateVMO );\n        updateStatusIndicators( updateVMO );\n        updateColorDecorators( updateVMO, true );\n    }\n    return updateVMO;\n};\n\n/**\n * Update this model object's status indicators\n * @param {prop} prop - The object(s) to update properties on.\n * @param {ViewModelProperty} viewProp - if true will skip event.\n * @param {type} propType - if true will skip event.\n */\nvar populateViewModelProperty = function( prop, viewProp, propType ) {\n    if( !declUtils.isNil( prop.autofocus ) ) {\n        uwPropertySvc.setAutoFocus( viewProp, prop.autofocus );\n    }\n    if( prop.labelPosition ) {\n        uwPropertySvc.setPropertyLabelDisplay( viewProp, prop.labelPosition, true );\n        if( prop.labelPosition === 'PROPERTY_LABEL_AT_SIDE' ) {\n            viewProp.editLayoutSide = true;\n        }\n    }\n    if( prop.renderingStyle ) {\n        uwPropertySvc.setPropertyLabelDisplay( viewProp, prop.renderingStyle, true );\n    }\n    // Add pattern information\n    if( prop.patterns ) {\n        viewProp.patterns = prop.patterns;\n        if( prop.condition ) {\n            viewProp.condition = prop.condition;\n        }\n    }\n    // Add preferredPattern information\n    viewProp.preferredPattern = prop.preferredPattern;\n    // Add patternAutoAssignFlags information\n    if( prop.patternAutoAssignFlags ) {\n        viewProp.patternAutoAssignFlags = prop.patternAutoAssignFlags;\n    }\n    if( prop.validationCriteria ) {\n        viewProp.validationCriteria = prop.validationCriteria;\n    }\n    if( !_.isUndefined( prop.oldValue ) ) {\n        viewProp.oldValue = prop.oldValue;\n    } else if( prop.oldValues ) {\n        viewProp.oldValues = prop.oldValues;\n    }\n    if( prop.vertical ) {\n        viewProp.vertical = prop.vertical;\n    }\n    if( !viewProp.propApi ) {\n        viewProp.propApi = {};\n    }\n    if( propType === 'BOOLEAN' && prop.propertyRadioTrueText &&\n        prop.propertyRadioFalseText ) {\n        viewProp.propertyRadioTrueText = prop.propertyRadioTrueText;\n        viewProp.propertyRadioFalseText = prop.propertyRadioFalseText;\n    }\n};\n\n/**\n * @param {Object} prop -\n * @param {String} propName -\n * @param {Object} owningObj -\n * @param {boolean} isDateAdjusted -\n *\n * @returns {ViewModelProperty} New object initialized with the given data.\n */\nexport let constructViewModelProperty = function( prop, propName, // eslint-disable-line\n    owningObj, isDateAdjusted ) {\n    var isArray = prop.isArray;\n    var propType = prop.propType;\n    var displayName = '';\n    if( prop.displayName ) {\n        displayName = prop.displayName;\n    } else if( prop.propertyDisplayName ) {\n        displayName = prop.propertyDisplayName;\n    }\n    var isEditable = _.isUndefined( prop.isEditable ) ? false : prop.isEditable;\n    var isModifiable = _.isUndefined( prop.isModifiable ) ? true : prop.isModifiable;\n    var isRequired = prop.isRequired === true;\n    var isAutoAssign = prop.isAutoAssign === true;\n    var isAutoAssignable = prop.isAutoAssignable === true;\n    var isRichText = prop.isRichText === true;\n    var isEnabled = _.isUndefined( prop.isEnabled ) ? true : prop.isEnabled !== false; // default value\n    var referenceTypeName = prop.referenceTypeName ? prop.referenceTypeName : '';\n    var maxLength = _.isUndefined( prop.maxLength ) ? 0 : prop.maxLength;\n    var maxArraySize = prop.maxArraySize ? prop.maxArraySize : -1;\n    var hasLov = prop.hasLOV === true;\n    var isLocalizable = prop.isLocalizable === true;\n    var isNull = false;\n    var error = null;\n    var renderingHint = prop.renderingHint ? prop.renderingHint : '';\n    var numberOfCharacters = -1;\n    var numberOfLines = prop.numberOfLines ? prop.numberOfLines : -1;\n    var isSelectOnly = false;\n    var requiredText = prop.requiredText;\n    var isTimeEnabled = prop.isTimeEnabled !== false;\n\n    var values = getPropertyValues( propType, prop, isDateAdjusted );\n    if( propType === 'CHAR' || propType === 'STRINGARRAY' && prop.isCharArray ) {\n        maxLength = 1;\n    }\n    if( propType && propType === 'DATETIME' ) {\n        propType = 'DATE';\n    }\n    var viewProp = uwPropertySvc.createViewModelProperty( propName, displayName, propType, values.value,\n        values.displayValue );\n    if( propType === 'STRING' || propType === 'STRINGARRAY' ) {\n        viewProp.inputType = 'text';\n    }\n\n    if( requiredText ) {\n        uwPropertySvc.setPlaceHolderText( viewProp, requiredText ); // need to add in VMO\n    }\n\n    isSelectOnly = _.isUndefined( prop.isSelectOnly ) ? true : prop.isSelectOnly;\n    uwPropertySvc.setIsSelectOnly( viewProp, isSelectOnly, true );\n\n    if( prop.hasRevRuleAttached ) {\n        viewProp.hasRevRuleAttached = true;\n    }\n\n    populateViewModelProperty( prop, viewProp, propType );\n\n    uwPropertySvc.setHasLov( viewProp, hasLov );\n    uwPropertySvc.setIsRequired( viewProp, isRequired );\n    uwPropertySvc.setIsArray( viewProp, isArray );\n    uwPropertySvc.setIsAutoAssign( viewProp, isAutoAssign );\n    uwPropertySvc.setIsAutoAssignable( viewProp, isAutoAssignable );\n    uwPropertySvc.setIsEditable( viewProp, isEditable );\n    uwPropertySvc.setIsRichText( viewProp, isRichText );\n    uwPropertySvc.setIsEnabled( viewProp, isEnabled );\n    uwPropertySvc.setIsLocalizable( viewProp, isLocalizable );\n    uwPropertySvc.setIsNull( viewProp, isNull );\n    uwPropertySvc.setLength( viewProp, maxLength );\n    uwPropertySvc.setRenderingHint( viewProp, renderingHint );\n    uwPropertySvc.setError( viewProp, error );\n    uwPropertySvc.setNumberOfCharacters( viewProp, numberOfCharacters );\n    uwPropertySvc.setNumberOfLines( viewProp, numberOfLines );\n    uwPropertySvc.setArrayLength( viewProp, maxArraySize );\n    uwPropertySvc.setIsPropertyModifiable( viewProp, isModifiable );\n    uwPropertySvc.setReferenceType( viewProp, referenceTypeName );\n    uwPropertySvc.setTimeEnabled( viewProp, isTimeEnabled );\n    viewProp.initialize = false;\n    viewProp.parentUid = owningObj ? owningObj.uid : '';\n    viewProp.dbValues = prop.dbValues ? prop.dbValues : prop.value;\n    viewProp.uiValues = values.displayValue;\n    viewProp.uiValue = uwPropertySvc.getUiValue( viewProp.uiValues );\n    viewProp.sourceObjectLastSavedDate = prop.srcObjLsd;\n    viewProp.srcObjectTypeName = prop.srcObjectTypeName;\n    viewProp.iconName = prop.iconName;\n    viewProp.iconSource = prop.iconSource;\n    viewProp.action = prop.action;\n    viewProp.tooltip = prop.tooltip;\n    return viewProp;\n}; // constructViewModelProperty\n\n/**\n * Class used to help view specific state information.\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {boolean} isDateAdjusted - isDateAdjusted\n */\nvar ViewModelObject = function( modelObject, isDateAdjusted ) { // eslint-disable-line complexity\n    var self = this;\n    self.props = {};\n    self.propertyDescriptors = {};\n    self.visible = true;\n    self.uid = modelObject.uid;\n    self.type = modelObject.type;\n    self.modelType = modelObject.modelType;\n\n    if( modelObject.alternateID ) {\n        self.alternateID = modelObject.alternateID;\n    }\n\n    _.forOwn( modelObject.props, function( propValue, propName ) {\n        if( propValue ) {\n            self.props[ propName ] = exports.constructViewModelProperty( propValue, propName, self, isDateAdjusted );\n        }\n    } );\n};\n\n/**\n * @return {String|Object} Displayable 'id' of this ViewModelObject (if possible, else the UID or '???' is\n *         returned).\n */\nViewModelObject.prototype.toString = function() {\n    if( this.cellHeader1 ) {\n        return this.cellHeader1;\n    } else if( this.props.object_string && this.props.object_string.uiValues[ 0 ] ) {\n        return this.props.object_string.uiValues[ 0 ];\n    } else if( this.uid ) {\n        return this.uid;\n    }\n\n    return '???';\n};\n\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified.\n *\n * @return {StringArray} Array of property names.\n */\nViewModelObject.prototype.getDirtyProps = function() {\n    var propertyNameValues = [];\n\n    for( var prop in this.props ) {\n        if( this.props.hasOwnProperty( prop ) ) {\n            if( uwPropertySvc.isModified( this.props[ prop ] ) ) {\n                var propNameValue = {};\n\n                propNameValue.name = prop;\n                propNameValue.values = uwPropertySvc.getValueStrings( this.props[ prop ] );\n                propertyNameValues.push( propNameValue );\n            }\n        }\n    }\n    return propertyNameValues;\n};\n\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\nViewModelObject.prototype.getSaveableDirtyProps = function() {\n    var propertyNameValues = this.getDirtyProps();\n\n    _.forEach( propertyNameValues, function( propObject ) {\n        var propVals = propObject.values;\n        for( var i = 0; i < propVals.length; i++ ) {\n            propVals[ i ] = String( propVals[ i ] );\n        }\n    } );\n\n    return propertyNameValues;\n};\n\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\nViewModelObject.prototype.getAutoAssignableProps = function() {\n    var propertyNameValues = [];\n\n    for( var prop in this.props ) {\n        if( this.props.hasOwnProperty( prop ) && this.props[ prop ].isAutoAssignable ) {\n            var propNameValue = {};\n\n            propNameValue.name = prop;\n            propNameValue.values = uwPropertySvc.getValueStrings( this.props[ prop ] );\n            propertyNameValues.push( propNameValue );\n        }\n    }\n\n    _.forEach( propertyNameValues, function( propObject ) {\n        var propVals = propObject.values;\n        for( var i = 0; i < propVals.length; i++ ) {\n            propVals[ i ] = String( propVals[ i ] );\n        }\n    } );\n\n    return propertyNameValues;\n};\n\n/**\n * This function sets the vmo edit state\n * @param {Object} vmo the view model object.\n * @param {Boolean} editState the edit state.\n */\nexport const setEditState = function( vmo, editState ) {\n    vmo.isEditing = editState;\n};\n\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Object} vmo - the view model object\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\nexport const clearEditableStates = function( vmo, skipDigest ) {\n    setEditState( vmo, false );\n    _.forEach( vmo.props, function( prop2 ) {\n        uwPropertySvc.resetUpdates( prop2 );\n        uwPropertySvc.setIsEditable( prop2, false );\n    } );\n};\n\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\nViewModelObject.prototype.clearEditiableStates = function( skipDigest ) {\n    clearEditableStates( this, skipDigest );\n};\n\n/**\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n *\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n */\nViewModelObject.prototype.setEditableStates = function( editable, override, skipDigest ) {\n    exports.setEditableStates( this, editable, override, skipDigest );\n};\n\n/**\n * Retrieves the id of the object, currently set to uid.\n *\n * Could change in future if each vmo (with cardinality) has their own unique id instead of 'uid'.\n *\n * @returns {String} The ID.\n */\nViewModelObject.prototype.getId = function() {\n    return this.uid;\n};\n\n/**\n\n * Retrieve the ViewModelProperty object with the same basePropertyName and sourceObjectUid as the parameters.\n\n *\n\n * @param {String} basePropertyName - the base property name trying to be matched\n\n * @param {String} uid - unique id\n\n *\n\n * @returns {ViewModelProperty} The found property.\n\n */\n\nViewModelObject.prototype.retrievePropertyWithBasePropertyName = function( basePropertyName, uid ) {\n    var foundProperty = null;\n\n    _.forEach( this.props, function( currentProperty, key ) {\n        var currentBasePropertyName = uwPropertySvc.getBasePropertyName( key );\n\n        if( currentBasePropertyName === basePropertyName ) {\n            var sourceObjectUid = uwPropertySvc.getSourceObjectUid( currentProperty );\n\n            if( sourceObjectUid === uid ) {\n                foundProperty = currentProperty;\n\n                return false;\n            }\n        }\n    } );\n\n    return foundProperty;\n};\n\n/**\n\n * create VMO API for all interface such as dataParser , viewModelCollection\n\n *\n\n * @constructor\n\n *\n\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n\n * @param {boolean} isDateAdjusted isDateAdjusted\n\n */\n\nexport let constructViewModelObject = function( modelObject, isDateAdjusted ) {\n    return new ViewModelObject( modelObject, isDateAdjusted );\n};\n\n/**\n\n * Get view model property type based on the value type and array flag.\n\n *\n\n * @param {Integer} valueType - The valueType for this property\n\n * @param {Boolean} isArray - array flag\n\n *\n\n * @return {propertyType} propertyType based off the integer value of valueType (String/Double/char etc.)\n\n */\n\nexport let getClientPropertyType = function( valueType, isArray ) { // eslint-disable-line complexity\n    var propertyType;\n\n    switch ( valueType ) {\n        case 1:\n\n            if( isArray ) {\n                propertyType = 'STRINGARRAY';\n            } else {\n                propertyType = 'CHAR';\n            }\n\n            break;\n\n        case 2:\n\n            if( isArray ) {\n                propertyType = 'DATEARRAY';\n            } else {\n                propertyType = 'DATE';\n            }\n\n            break;\n\n        case 3:\n        case 4:\n\n            if( isArray ) {\n                propertyType = 'DOUBLEARRAY';\n            } else {\n                propertyType = 'DOUBLE';\n            }\n\n            break;\n\n        case 5:\n\n            if( isArray ) {\n                propertyType = 'INTEGERARRAY';\n            } else {\n                propertyType = 'INTEGER';\n            }\n\n            break;\n\n        case 6:\n\n            if( isArray ) {\n                propertyType = 'BOOLEANARRAY';\n            } else {\n                propertyType = 'BOOLEAN';\n            }\n\n            break;\n\n        case 7:\n\n            if( isArray ) {\n                propertyType = 'INTEGERARRAY';\n            } else {\n                propertyType = 'SHORT';\n            }\n\n            break;\n\n        case 8:\n\n            if( isArray ) {\n                propertyType = 'STRINGARRAY';\n            } else {\n                propertyType = 'STRING';\n            }\n\n            break;\n\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n\n            if( isArray ) {\n                propertyType = 'OBJECTARRAY';\n            } else {\n                propertyType = 'OBJECT';\n            }\n\n            break;\n\n        default:\n\n            propertyType = 'UNKNOWN';\n\n            break;\n    }\n\n    return propertyType;\n};\n\n/**\n\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n\n *\n\n * @param {ViewModelObject} vmo - The viewModelObject containing the 'props' to be checked.\n\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n\n *            different than the desired state.\n\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n\n */\n\nexport let setEditableStates = function( vmo, editable, override, skipDigest ) {\n    setEditState( vmo, editable );\n    var modelObject = cdm.getObject( vmo.uid );\n\n    var isEditableNil = declUtils.isNil( editable );\n\n    _.forEach( vmo.props, function( propValue, propName ) {\n        if( propValue ) {\n            if( isEditableNil ) {\n                var modelProp = modelObject.props[ propName ];\n\n                if( modelProp ) {\n                    propValue.isEditable = modelProp.modifiable;\n\n                    uwPropertySvc.setEditable( propValue, modelProp.modifiable );\n\n                    /**\n\n                     * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n\n                     * uwPropertySvc.setEditState instead. No need to set viewProp.editableInViewModel separately as it\n\n                     * will be taken care by setEditStates method. This change is done as part of handling upload\n\n                     * dataset use case.\n\n                     */\n\n                    uwPropertySvc.setEditState( propValue, modelProp.modifiable, true );\n                }\n            } else {\n                propValue.isEditable = editable;\n\n                uwPropertySvc.setEditable( propValue, editable );\n\n                /**\n\n                 * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n\n                 * uwPropertySvc.setEditState instead . No need to set viewProp.editableInViewModel separately as it\n\n                 * will be taken care by setEditStates method. This changes is done as part of handling upload\n\n                 * dataset use case.\n\n                 */\n\n                uwPropertySvc.setEditState( propValue, editable, override, true );\n            }\n        }\n    } );\n};\n\n/**\n\n/**\n\n * @param {String|Object} input - UID of the ModelObject to create a ViewModelObject wrapper for OR model object\n\n * @param {String} operationName - if \"EDIT\", then the VMO is modifiable. (null is acceptable)\n\n * @param {String} owningObjUid - The UID of owning object\n\n * @param {ViewModelObject} serverVMO -\n\n *\n\n * @return {ViewModelObject} Newly created ViewModelObject wrapper initialized with properties from the given\n\n *         inputs.\n\n */\n\nexport let createViewModelObject = function( input, operationName, owningObjUid, serverVMO ) {\n    var modelObject = input;\n\n    if( _.isString( input ) ) {\n        modelObject = cdm.getObject( input );\n    } else if( input && input.uid && !serverVMO ) {\n        modelObject = cdm.getObject( input.uid );\n    }\n\n    if( !modelObject ) {\n        logger.error( 'viewModelObject.createViewModelObject: ' +\n\n            'Unable to locate ModelObject in the clientDataModel with UID=' + input );\n\n        return null;\n    }\n\n    return exports.constructViewModelObjectFromModelObject( modelObject, operationName, owningObjUid, serverVMO );\n};\n\n/**\n\n * This is a preProcessor to 'updateSourceObjectPropertiesByViewModelObject' to trivially ignore updating existing\n\n * (loaded) VMOs in the given collection.\n\n *\n\n * @param {ViewModelObjectArray} loadedVMOs - Collection of viewModelObjects to consider for updating.\n\n *\n\n * @param {IModelObjectArray} updatedCDMObjects - CDM Objects that have been reported as updated or modified.\n\n */\n\nexport let updateViewModelObjectCollection = function( loadedVMOs, updatedCDMObjects ) {\n    /**\n\n     * Check if there is nothing to work on or with.\n\n     */\n\n    if( _.isEmpty( loadedVMOs ) || _.isEmpty( updatedCDMObjects ) ) {\n        return;\n    }\n\n    /**\n\n     * Create a map containing the unique UID of all the loaded viewModelObjects so that we can trivially ignore any\n\n     * changed CDM objects NOT in this viewModelCollection.\n\n     * <P>\n\n     * Note: The map needs to consider all the different UIDs a modified object could be referenced by it. The UID\n\n     * checks mirror the check made in 'updateSourceObjectPropertiesByViewModelObject'.\n\n     */\n\n    var vmoMap = {};\n\n    _.forEach( loadedVMOs,\n\n        function cdmHandlerCheck( vmo ) {\n            if( vmo.uid ) {\n                vmoMap[ vmo.uid ] = true;\n\n                if( !_.isEmpty( vmo.props ) ) {\n                    if( vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target &&\n\n                        vmo.props.awp0Target.dbValue ) {\n                        vmoMap[ vmo.props.awp0Target.dbValue ] = true;\n                    }\n\n                    _.forEach( vmo.props, function( vmProp ) {\n                        var sourceObjectUid = uwPropertySvc.getSourceObjectUid( vmProp );\n\n                        if( sourceObjectUid ) {\n                            vmoMap[ sourceObjectUid ] = true;\n                        }\n\n                        if( vmProp.parentUid ) {\n                            vmoMap[ vmProp.parentUid ] = true;\n                        }\n                    } );\n                }\n            }\n        } );\n\n    /**\n\n     * Check if we ended up with NO viewModelObjects.\n\n     */\n\n    if( _.isEmpty( vmoMap ) ) {\n        return;\n    }\n\n    /**\n\n     * Loop for each modified object and update any VMOs effected by it.\n\n     */\n\n    _.forEach( updatedCDMObjects, function _updateViewModelCollection( updatedObj ) {\n        if( updatedObj.uid && vmoMap[ updatedObj.uid ] ) {\n            var updatedVmo = exports.createViewModelObject( updatedObj, 'EDIT' );\n\n            if( updatedVmo && updatedVmo.props ) {\n                exports.updateSourceObjectPropertiesByViewModelObject( updatedVmo, loadedVMOs );\n            }\n        }\n    } );\n};\n\n/**\n\n * Updates all the viewModelObjects with the updatedVMO, depending on the property's sourceUid.\n\n *\n\n * @param {ViewModelObject} updatedVMO - view model object with updated information\n\n * @param {ViewModelObjectArray} origVMOs - all the view model objects that need to be updated\n\n */\n\nexport let updateSourceObjectPropertiesByViewModelObject = function( updatedVMO, origVMOs, propsToUpdate ) {\n    if( updatedVMO && updatedVMO.props && origVMOs ) {\n        var updatedUid = updatedVMO.uid;\n\n        var updatedProps = {};\n\n        _.forEach( origVMOs, function( vmo ) {\n            if( vmo && vmo.props ) {\n                var vmoChanged = false;\n\n                if( vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target &&\n\n                    vmo.props.awp0Target.dbValue === updatedUid ) {\n                    _.forEach( vmo.props, function( vmProp, key ) {\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( key ) === -1 ) {\n                            return true;\n                        }\n                        var updatedProp = updatedVMO.props[ key ];\n\n                        if( updatedProp ) {\n                            uwPropertySvc.copyModelData( vmProp, updatedProp );\n\n                            if( updatedProps[ vmo.uid ] === undefined ) {\n                                updatedProps[ vmo.uid ] = [];\n                            }\n\n                            updatedProps[ vmo.uid ].push( vmProp.propertyName );\n\n                            vmoChanged = true;\n                        }\n                    } );\n                }\n\n                _.forEach( vmo.props, function( vmProp ) {\n                    var sourceObjectUid = uwPropertySvc.getSourceObjectUid( vmProp );\n\n                    // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n                    // original object containing the property\n                    if( sourceObjectUid === updatedUid || vmProp.parentUid === updatedUid ) {\n                        var propertyNameLookup = vmProp.propertyName;\n                        if( sourceObjectUid === updatedUid && sourceObjectUid !== vmProp.parentUid ) {\n                            propertyNameLookup = uwPropertySvc.getBasePropertyName( propertyNameLookup );\n                        }\n\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( propertyNameLookup ) === -1 ) {\n                            return true;\n                        }\n\n                        var updatedProp = updatedVMO.props[ propertyNameLookup ];\n                        if( updatedProp ) {\n                            var updatedPropSourceUid = uwPropertySvc.getSourceObjectUid( updatedProp );\n                            if( sourceObjectUid === updatedPropSourceUid ) {\n                                uwPropertySvc.copyModelData( vmProp, updatedProp );\n\n                                if( updatedProps[ vmo.uid ] === undefined ) {\n                                    updatedProps[ vmo.uid ] = [];\n                                }\n                                updatedProps[ vmo.uid ].push( vmProp.propertyName );\n                                vmoChanged = true;\n                            }\n                        }\n                    }\n                } );\n\n                _.forEach( updatedVMO.props, function( updatedVmProp ) {\n                    var updatedVmPropSourceUid = uwPropertySvc.getSourceObjectUid( updatedVmProp );\n\n                    // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n                    // original object containing the property\n                    if( vmo.uid === updatedVmPropSourceUid || updatedVmProp.parentUid === vmo.uid ) {\n                        var updatedPropNameLookup = updatedVmProp.propertyName;\n                        if( updatedVmPropSourceUid === vmo.uid && updatedVmPropSourceUid !== updatedVmProp.parentUid ) {\n                            updatedPropNameLookup = uwPropertySvc.getBasePropertyName( updatedPropNameLookup );\n                        }\n\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( updatedPropNameLookup ) === -1 ) {\n                            return true;\n                        }\n\n                        if( !vmo.props[ updatedPropNameLookup ] ) {\n                            vmo.props[ updatedPropNameLookup ] = updatedVmProp;\n\n                            if( updatedProps[ vmo.uid ] === undefined ) {\n                                updatedProps[ vmo.uid ] = [];\n                            }\n                            updatedProps[ vmo.uid ].push( updatedPropNameLookup );\n                            vmoChanged = true;\n                        }\n                    }\n                } );\n\n                if( vmoChanged ) {\n                    updateCellProperties( vmo );\n\n                    updateStatusIndicators( vmo );\n\n                    updateColorDecorators( vmo );\n\n                    updateIcons( vmo );\n                }\n            }\n        } );\n\n        eventBus.publish( 'viewModelObject.propsUpdated', updatedProps );\n    }\n};\n\n/**\n\n * Update all existing VMO properties from the underlying CDM object's property value (with the same name).\n\n *\n\n * <pre>\n\n * </pre>\n\n *\n\n * @param {Object} vmo view model object\n\n */\n\nexport let updateVMOProperties = function( vmo ) {\n    if( !vmo.uid ) {\n        return;\n    }\n\n    var modelObj = cdm.getObject( vmo.uid );\n\n    if( !modelObj || !modelObj.props ) {\n        return;\n    }\n\n    _.forEach( vmo.props, function( vmoProp, propName ) {\n        if( modelObj.props.hasOwnProperty( propName ) ) {\n            var moProp = modelObj.props[ propName ];\n\n            vmoProp.dbValues = moProp.dbValues;\n\n            vmoProp.uiValues = moProp.uiValues;\n\n            vmoProp.uiValue = moProp.getDisplayValue();\n\n            if( moProp.uiValues ) {\n                vmoProp.displayValues = moProp.uiValues;\n            } else {\n                vmoProp.displayValues = [];\n            }\n\n            vmoProp.isEditable = moProp.propertyDescriptor.constantsMap.editable === '1' && moProp.modifiable;\n            vmoProp.isLocalizable = moProp.propertyDescriptor.constantsMap.localizable === '1';\n        }\n    } );\n\n    updateCellProperties( vmo );\n\n    updateStatusIndicators( vmo );\n\n    updateColorDecorators( vmo );\n\n    updateIcons( vmo );\n};\n\n/**\n\n * Test if the given object 'is-a' TreeLoadInput created by this service.\n\n *\n\n * @param {Object} objectToTest - Object to check prototype history of.\n\n * @return {Boolean} TRUE if the given object is a TreeLoadInput.\n\n */\n\nexport let isViewModelObject = function( objectToTest ) {\n    return objectToTest instanceof ViewModelObject;\n};\n\n/**\n * This recursive function returns the given vmos and their cached children if present\n * @param {* } vmObjects the view model objects.\n * @param {* } vmObjectsAcc the accumulation of the view model objects and their cached children.\n * @returns {* } vmObjects and any cached children.\n */\nexport const getLoadedAndCachedViewModelObjects = function( vmObjects, vmObjectsAcc ) {\n    if( !vmObjectsAcc ) {\n        vmObjectsAcc = [];\n    }\n\n    _.forEach( vmObjects, ( vmo ) => {\n        vmObjectsAcc.push( vmo );\n        if( vmo.__expandState ) {\n            getLoadedAndCachedViewModelObjects( vmo.__expandState.expandedNodes, vmObjectsAcc );\n        }\n    } );\n\n    return vmObjectsAcc;\n};\n\n/**\n * This function gets the vmos that are not in edit\n * @param {* } vmObjects the view model objects.\n * @returns {* } vmObjects that are not in edit.\n */\nexport const getVmosNotInEdit = function( vmObjects ) {\n    return vmObjects.filter( ( vmObject ) => {\n        return !vmObject.isEditing;\n    } );\n};\n\nexports = {\n    constructViewModelProperty,\n    constructViewModelObject,\n    getClientPropertyType,\n    setEditableStates,\n    clearEditableStates,\n    constructViewModelObjectFromModelObject,\n    createViewModelObject,\n    updateViewModelObjectCollection,\n    updateSourceObjectPropertiesByViewModelObject,\n    updateVMOProperties,\n    isViewModelObject,\n    getLoadedAndCachedViewModelObjects,\n    getVmosNotInEdit,\n    setEditState\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
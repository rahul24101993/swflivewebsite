{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/clipboard|Clipboard}\n *\n * @module js/clipboardService\n * @publishedApolloService\n */import logger from'js/logger';import moduleLoader from'js/moduleLoader';import cfgSvc from'js/configurationService';// service\nimport AwPromiseService from'js/awPromiseService';import AwBaseService from'js/awBaseService';export default class ClipboardService extends AwBaseService{constructor(){super();this._delegateService=null;let dep;let solution;// Asynchronously loading the configured clipboardService\ncfgSvc.getCfg('solutionDef').then(solutionDef=>{solution=solutionDef;if(solution.clipboard){return cfgSvc.getCfg('clipboard');}return AwPromiseService.instance.reject('Missing configuration for \\'clipboard\\' in solution configuration.');}).then(clipboardProviders=>{dep=clipboardProviders[solution.clipboard].dep;return moduleLoader.loadDependentModule(dep);}).then(depModuleObj=>{if(!depModuleObj){logger.error('Could not load the clipboard module '+dep);}this._delegateService=depModuleObj;}).catch(e=>{logger.warn(e);});}/**\n     * Return an array of Objects currently on the clipboard.\n     *\n     * @memberof clipboardService\n     *\n     * @return {Array} Current contents of the clipboard.\n     */getContents(){return this._delegateService?this._delegateService.getContents():[];}/**\n     * Sets the current contents of the clipboard.\n     *\n     * @param {Array} contentsToSet - Array of Objects to set as the current clipboard contents.\n     *\n     */setContents(contentsToSet){if(this._delegateService){this._delegateService.setContents(contentsToSet);}}/**\n     * Return the content of the clipboard that is cached.\n     *\n     * @return {Array} Array of current Objects that is cached.\n     */getCachableObjects(){return this._delegateService?this._delegateService.getCachableObjects():[];}/**\n     * Copies the URL for the given object to OS clipboard\n     *\n     * @memberof clipboardService\n     *\n     * @param {Object} selObject - selected object\n     *\n     * @return {Boolean} verdict whether the content was successfully copied to the clipboard or not\n     */copyUrlToClipboard(selObject){return this._delegateService?this._delegateService.copyUrlToClipboard(selObject):false;}/**\n     * Copies hyperlink to OS clipboard\n     *\n     * @param {Array} content - array of selected object whose hyperlink is created and copied to os clipboard\n     * @return {Boolean} successful whether the content was successfully copied to the clipboard or not\n     */copyHyperlinkToClipboard(content){return this._delegateService?this._delegateService.copyHyperlinkToClipboard(content):false;}}","map":null,"metadata":{},"sourceType":"module"}
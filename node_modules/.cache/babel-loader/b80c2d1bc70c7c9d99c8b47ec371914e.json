{"ast":null,"code":"/* eslint-disable valid-jsdoc */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides service related to displaying notifications.\n *\n * @module js/messagingService\n *\n * @publishedApolloService\n */\nimport notyService from 'js/NotyModule';\nimport notyErrorService from 'js/notyErrorService';\nimport AwPromiseService from 'js/awPromiseService';\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport parsingUtils from 'js/parsingUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\nimport { registerDynImportEntry, loadDynModule } from 'js/moduleLoader';\nregisterDynImportEntry('js/viewModelService', () => import('js/viewModelService')); // Another pattern\n\nvar _messageTypes = {\n  info: true,\n  warning: true,\n  error: true\n};\nvar exports = {};\n/**\n * Get localized text\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @param {String} interpolationString - The string to search.\n *\n * @return {String} Interpolated string.\n * @ignore\n */\n\nexport let getLocalizedTextForInterpolationString = function (messageContext, interpolationString) {\n  var textPath = parsingUtils.getStringBetweenDoubleMustaches(interpolationString);\n\n  if (textPath === interpolationString) {\n    return interpolationString;\n  }\n\n  return _.get(messageContext, textPath);\n};\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {String} Result string after applying passed parameters.\n */\n\nexport let applyMessageParams = function (messageString, messageParams, messageContext) {\n  return declUtils.applyMessageParams(messageString, messageParams, messageContext);\n};\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @return {String} Result string after applying passed parameters.\n */\n\nexport let applyMessageParamsWithoutContext = function (messageString, messageParams) {\n  var placeHolders = messageString.match(/\\{[0-9]*\\}/g);\n  var resultString = messageString;\n\n  if (placeHolders) {\n    for (var i in placeHolders) {\n      if (placeHolders.hasOwnProperty(i)) {\n        var placeHolder = placeHolders[i];\n        var replacementString = messageParams[i];\n        resultString = resultString.replace(placeHolder, replacementString);\n      }\n    }\n  }\n\n  return resultString;\n};\n/**\n * Evaluate message data\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {String} messageData - The message data.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {Object} Result object after applying passed parameters.\n * @ignore\n */\n\nexport let applyMessageData = function (messageString, messageParams, messageData, messageContext) {\n  if (messageData) {\n    for (var key in messageData) {\n      if (messageData[key]) {\n        var parseKey = parsingUtils.getStringBetweenDoubleMustaches(messageData[key]);\n\n        var replacementString = _.get(messageContext, parseKey);\n\n        messageData[key] = replacementString;\n      }\n    }\n\n    messageData.context = messageContext;\n    messageData.params = messageParams;\n  }\n\n  return messageData;\n};\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {Object} messageDefn - message definition\n *\n * @param {String} localizedMessage - localizedMessage\n *\n * @param {Object} deferred - promise object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @param {Object} messageData - message data object\n */\n\nvar _reportNotyMessageInternal = function (messageDefn, localizedMessage, deferred, declViewModel, parentScope, messageData) {\n  var buttonsArr = [];\n\n  if (messageDefn.navigationOptions) {\n    _.forEach(messageDefn.navigationOptions, function (navOption) {\n      var button = {};\n      button.addClass = 'btn btn-notify';\n      button.text = exports.getLocalizedTextForInterpolationString(declViewModel, navOption.text);\n\n      button.onClick = function ($noty) {\n        $noty.close();\n\n        if (navOption.action) {\n          //revisitMe: Prasad use afxWeakImport or remove cyclic dep\n          loadDynModule('js/viewModelService').then(vmService => {\n            vmService.executeCommand(declViewModel, navOption.action, parentScope);\n            deferred.resolve();\n          });\n        } else {\n          deferred.resolve();\n        }\n      };\n\n      buttonsArr.push(button);\n    });\n  }\n\n  if (messageDefn.messageType === 'INFO') {\n    exports.showInfo(localizedMessage, messageData, messageDefn, buttonsArr);\n  } else if (messageDefn.messageType === 'WARNING') {\n    exports.showWarning(localizedMessage, buttonsArr, messageData, messageDefn);\n  } else if (messageDefn.messageType === 'ERROR' && messageDefn.messageKey && messageDefn.message) {\n    const localizedMessage = notyErrorService.getLocalizedMessage(messageDefn, messageData, declViewModel);\n    exports.showError(localizedMessage, messageData, messageDefn, buttonsArr);\n  } else if (messageDefn.messageType === 'ERROR') {\n    exports.showError(localizedMessage, messageData, messageDefn, buttonsArr);\n  }\n\n  if (!messageDefn.navigationOptions) {\n    deferred.resolve();\n  }\n};\n\nconst _applyErrorMessage = function (messageDefn, context) {\n  const parseKey = parsingUtils.getStringBetweenDoubleMustaches(messageDefn.messageText);\n  return _.get(context, parseKey);\n};\n/**\n * generate a message.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} message - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @ignore\n */\n\n\nexport let generateMessage = function (declViewModel, messageList, message, parentScope) {\n  if (!messageList) {\n    messageList = declViewModel._internal.messages;\n  }\n\n  if (parentScope) {\n    declUtils.assertValidModelAndDataCtxNode(declViewModel, parentScope);\n  } else {\n    declUtils.assertValidModel(declViewModel);\n  }\n\n  var messageDefn = _.cloneDeep(_.get(messageList, message));\n\n  if (messageDefn) {\n    let context = declUtils.getLatestContext(parentScope, declViewModel);\n    context = { ...context,\n      ...declViewModel.atomicData\n    };\n\n    if (messageDefn.expression) {\n      var expr = {};\n\n      _.forEach(messageDefn.expression, function (expression, key) {\n        expr[key] = conditionService.parseExpression(declViewModel, expression, context);\n      });\n\n      context.expression = expr;\n    }\n\n    var localizedMessage = null;\n\n    if (messageDefn.messageText) {\n      localizedMessage = exports.getLocalizedTextForInterpolationString(context.data, messageDefn.messageText);\n\n      if (localizedMessage) {\n        localizedMessage = exports.applyMessageParams(localizedMessage, messageDefn.messageTextParams, context);\n      } else {\n        localizedMessage = _applyErrorMessage(messageDefn, parentScope);\n      }\n    } else if (messageDefn.messageKey) {\n      var messageData = exports.applyMessageData(localizedMessage, messageDefn.messageTextParams, messageDefn.messageData, context);\n      messageData.isCustomElem = true;\n      localizedMessage = '<aw-include name=\"' + messageDefn.messageKey + '\" sub-panel-context=\"subPanelContext\"></aw-include>';\n    } else {\n      // Invalid usage of message\n      return {};\n    }\n\n    return {\n      localizedMessage: localizedMessage,\n      messageData: messageData,\n      messageDefn: messageDefn\n    };\n  }\n\n  return {};\n};\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} notyMessage - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n * @ignore\n */\n\nexport let reportNotyMessage = function (declViewModel, messageList, notyMessage, parentScope) {\n  var deferred = AwPromiseService.instance.defer();\n  var message = exports.generateMessage(declViewModel, messageList, notyMessage, parentScope);\n  var messageDefn = message.messageDefn;\n\n  if (!message.localizedMessage) {\n    deferred.reject('resolved message string is empty');\n  } else if (messageDefn && messageDefn.messageType) {\n    if (logger.isDeclarativeLogEnabled()) {\n      debugService.debugMessages(message, declViewModel, parentScope);\n    }\n\n    if (messageDefn.messageText) {\n      _reportNotyMessageInternal(messageDefn, message.localizedMessage, deferred, declViewModel, parentScope);\n    } else if (messageDefn.messageKey) {\n      _reportNotyMessageInternal(messageDefn, message.localizedMessage, deferred, declViewModel, parentScope, message.messageData);\n    } else {\n      // Invalid usage of message\n      deferred.reject();\n    } //Add active token to the declViewModel corresponding to which the noty msg is opened\n    //This assists usecases where noty msgs are opened through popups\n    //preventing the unmounting of popups(destruction of declViewModel) until a user action is performed on the noty msg\n\n\n    declViewModel.getToken().addAction(messageDefn);\n    deferred.promise.then(function () {\n      declViewModel.getToken().removeAction(messageDefn);\n    }).catch(function () {\n      declViewModel.getToken().removeAction(messageDefn);\n    });\n  }\n\n  return deferred.promise;\n};\n/**\n * Show error message in notification.\n *\n * @param {String} message - error message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showError = function (message, messageData, messageDefn, buttonsArr) {\n  if (_messageTypes.error) {\n    logger.error(message);\n    notyService.showError(message, messageData, messageDefn, buttonsArr);\n  }\n};\n/**\n * Show informational message in notification.\n *\n * @param {String} message - Informational message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showInfo = function (message, messageData, messageDefn, buttonsArr) {\n  if (_messageTypes.info) {\n    logger.info(message);\n    notyService.showInfo(message, messageData, messageDefn, buttonsArr);\n  }\n};\n/**\n * Show warning message in notification.\n *\n * @param {String} message - Warning message to show\n * @param {String} buttonsArr  – Array of buttons (like: Cancel, Ok)\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n */\n\nexport let showWarning = function (message, buttonsArr, messageData, messageDefn) {\n  if (_messageTypes.warning) {\n    logger.warn(message);\n    notyService.showWarning(message, buttonsArr, messageData, messageDefn);\n  }\n};\n/**\n * Get SOA error message from error object\n *\n * @param {String} errorJSO - JavaScript Object exception\n *\n * @return {String} message error message to be displayed.\n * @ignore\n */\n\nexport let getSOAErrorMessage = function (errorJSO) {\n  if (errorJSO.message) {\n    return errorJSO.message;\n  }\n\n  var partialErrors = null;\n\n  if (errorJSO.partialErrors) {\n    partialErrors = errorJSO.partialErrors;\n  } else if (errorJSO.cause && errorJSO.cause.partialErrors) {\n    partialErrors = errorJSO.cause.partialErrors;\n  }\n\n  errorJSO.message = '';\n\n  if (partialErrors) {\n    for (var ii = 0; ii < partialErrors.length; ii++) {\n      var errorValues = partialErrors[ii].errorValues;\n\n      if (errorValues) {\n        for (var jj = 0; jj < errorValues.length; jj++) {\n          if (errorValues[jj].message) {\n            if (errorJSO.message.length > 0) {\n              errorJSO.message += '\\n';\n            }\n\n            errorJSO.message += errorValues[jj].message;\n          }\n        }\n      }\n    }\n  }\n\n  return errorJSO.message;\n};\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {String} timeoutValue - timeout Value in ms.\n */\n\nexport let setTimeout = function (messageType, timeoutValue) {\n  timeoutValue = parseInt(timeoutValue);\n  messageType = messageType.toLocaleLowerCase();\n\n  if (!isNaN(timeoutValue) && timeoutValue > 0) {\n    timeoutValue = getTimeoutMillis(timeoutValue);\n  } else if (timeoutValue <= 0) {\n    timeoutValue = 0;\n  }\n\n  notyService.setTimeout(messageType, timeoutValue);\n};\n/**\n * API to set the visibility of any type of notification messages.\n *\n * @param {String} messageType - INFO/WARNING/ERROR\n * @param {Boolean} value - set visibility value\n *\n */\n\nexport let setMessageVisibility = function (messageType, value) {\n  messageType = messageType.toLocaleLowerCase();\n\n  if (messageType in _messageTypes) {\n    _messageTypes[messageType] = value;\n  }\n};\n/*\n * The service to convert seconds in milliseconds.\n */\n\nvar getTimeoutMillis = function (timeout) {\n  return timeout * 1000;\n};\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\n\nexports = {\n  getLocalizedTextForInterpolationString,\n  applyMessageParams,\n  applyMessageParamsWithoutContext,\n  applyMessageData,\n  generateMessage,\n  reportNotyMessage,\n  showError,\n  showInfo,\n  showWarning,\n  getSOAErrorMessage,\n  setTimeout,\n  setMessageVisibility\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/messagingService.js"],"names":["registerDynImportEntry","_messageTypes","info","warning","error","exports","getLocalizedTextForInterpolationString","textPath","parsingUtils","_","applyMessageParams","declUtils","applyMessageParamsWithoutContext","placeHolders","messageString","resultString","placeHolder","replacementString","messageParams","applyMessageData","messageData","parseKey","_reportNotyMessageInternal","buttonsArr","messageDefn","button","navOption","$noty","loadDynModule","vmService","deferred","localizedMessage","notyErrorService","_applyErrorMessage","generateMessage","messageList","declViewModel","context","atomicData","expr","conditionService","reportNotyMessage","AwPromiseService","message","logger","debugService","showError","notyService","showInfo","showWarning","getSOAErrorMessage","errorJSO","partialErrors","ii","errorValues","jj","setTimeout","timeoutValue","parseInt","messageType","isNaN","getTimeoutMillis","setMessageVisibility","timeout"],"mappings":"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","sourcesContent":["/* eslint-disable valid-jsdoc */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides service related to displaying notifications.\n *\n * @module js/messagingService\n *\n * @publishedApolloService\n */\nimport notyService from 'js/NotyModule';\nimport notyErrorService from 'js/notyErrorService';\nimport AwPromiseService from 'js/awPromiseService';\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport parsingUtils from 'js/parsingUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\nimport { registerDynImportEntry, loadDynModule } from 'js/moduleLoader';\nregisterDynImportEntry( 'js/viewModelService', () => import( 'js/viewModelService' ) );\n// Another pattern\n\nvar _messageTypes = {\n    info: true,\n    warning: true,\n    error: true\n};\n\nvar exports = {};\n\n/**\n * Get localized text\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @param {String} interpolationString - The string to search.\n *\n * @return {String} Interpolated string.\n * @ignore\n */\nexport let getLocalizedTextForInterpolationString = function( messageContext, interpolationString ) {\n    var textPath = parsingUtils.getStringBetweenDoubleMustaches( interpolationString );\n\n    if( textPath === interpolationString ) {\n        return interpolationString;\n    }\n\n    return _.get( messageContext, textPath );\n};\n\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {String} Result string after applying passed parameters.\n */\nexport let applyMessageParams = function( messageString, messageParams, messageContext ) {\n    return declUtils.applyMessageParams( messageString, messageParams, messageContext );\n};\n\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @return {String} Result string after applying passed parameters.\n */\nexport let applyMessageParamsWithoutContext = function( messageString, messageParams ) {\n    var placeHolders = messageString.match( /\\{[0-9]*\\}/g );\n\n    var resultString = messageString;\n\n    if( placeHolders ) {\n        for( var i in placeHolders ) {\n            if( placeHolders.hasOwnProperty( i ) ) {\n                var placeHolder = placeHolders[ i ];\n                var replacementString = messageParams[ i ];\n                resultString = resultString.replace( placeHolder, replacementString );\n            }\n        }\n    }\n\n    return resultString;\n};\n\n/**\n * Evaluate message data\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {String} messageData - The message data.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {Object} Result object after applying passed parameters.\n * @ignore\n */\nexport let applyMessageData = function( messageString, messageParams, messageData, messageContext ) {\n    if( messageData ) {\n        for( var key in messageData ) {\n            if( messageData[ key ] ) {\n                var parseKey = parsingUtils.getStringBetweenDoubleMustaches( messageData[ key ] );\n                var replacementString = _.get( messageContext, parseKey );\n\n                messageData[ key ] = replacementString;\n            }\n        }\n\n        messageData.context = messageContext;\n        messageData.params = messageParams;\n    }\n\n    return messageData;\n};\n\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {Object} messageDefn - message definition\n *\n * @param {String} localizedMessage - localizedMessage\n *\n * @param {Object} deferred - promise object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @param {Object} messageData - message data object\n */\nvar _reportNotyMessageInternal = function( messageDefn, localizedMessage, deferred, declViewModel, parentScope,\n    messageData ) {\n    var buttonsArr = [];\n\n    if( messageDefn.navigationOptions ) {\n        _.forEach( messageDefn.navigationOptions, function( navOption ) {\n            var button = {};\n\n            button.addClass = 'btn btn-notify';\n\n            button.text = exports.getLocalizedTextForInterpolationString( declViewModel, navOption.text );\n\n            button.onClick = function( $noty ) {\n                $noty.close();\n                if( navOption.action ) {\n                    //revisitMe: Prasad use afxWeakImport or remove cyclic dep\n                    loadDynModule( 'js/viewModelService' ).then( vmService => {\n                        vmService.executeCommand( declViewModel, navOption.action, parentScope );\n                        deferred.resolve();\n                    } );\n                } else {\n                    deferred.resolve();\n                }\n            };\n\n            buttonsArr.push( button );\n        } );\n    }\n\n    if( messageDefn.messageType === 'INFO' ) {\n        exports.showInfo( localizedMessage, messageData, messageDefn, buttonsArr );\n    } else if( messageDefn.messageType === 'WARNING' ) {\n        exports.showWarning( localizedMessage, buttonsArr, messageData, messageDefn );\n    } else if( messageDefn.messageType === 'ERROR' && messageDefn.messageKey && messageDefn.message ) {\n        const localizedMessage = notyErrorService.getLocalizedMessage( messageDefn, messageData, declViewModel );\n        exports.showError( localizedMessage, messageData, messageDefn, buttonsArr );\n    } else if( messageDefn.messageType === 'ERROR' ) {\n        exports.showError( localizedMessage, messageData, messageDefn, buttonsArr );\n    }\n    if( !messageDefn.navigationOptions ) {\n        deferred.resolve();\n    }\n};\n\nconst _applyErrorMessage = function( messageDefn, context ) {\n    const parseKey = parsingUtils.getStringBetweenDoubleMustaches( messageDefn.messageText );\n    return _.get( context, parseKey );\n};\n\n/**\n * generate a message.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} message - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @ignore\n */\nexport let generateMessage = function( declViewModel, messageList, message, parentScope ) {\n    if( !messageList ) {\n        messageList = declViewModel._internal.messages;\n    }\n    if( parentScope ) {\n        declUtils.assertValidModelAndDataCtxNode( declViewModel, parentScope );\n    } else {\n        declUtils.assertValidModel( declViewModel );\n    }\n    var messageDefn = _.cloneDeep( _.get( messageList, message ) );\n\n    if( messageDefn ) {\n        let context = declUtils.getLatestContext( parentScope, declViewModel );\n        context = { ...context, ...declViewModel.atomicData };\n\n        if( messageDefn.expression ) {\n            var expr = {};\n            _.forEach( messageDefn.expression, function( expression, key ) {\n                expr[ key ] = conditionService.parseExpression( declViewModel, expression, context );\n            } );\n\n            context.expression = expr;\n        }\n\n        var localizedMessage = null;\n        if( messageDefn.messageText ) {\n            localizedMessage = exports.getLocalizedTextForInterpolationString( context.data, messageDefn.messageText );\n            if( localizedMessage ) {\n                localizedMessage = exports.applyMessageParams( localizedMessage, messageDefn.messageTextParams, context );\n            } else {\n                localizedMessage = _applyErrorMessage( messageDefn, parentScope );\n            }\n        } else if( messageDefn.messageKey ) {\n            var messageData = exports.applyMessageData( localizedMessage, messageDefn.messageTextParams, messageDefn.messageData, context );\n            messageData.isCustomElem = true;\n            localizedMessage = '<aw-include name=\"' + messageDefn.messageKey +\n                '\" sub-panel-context=\"subPanelContext\"></aw-include>';\n        } else {\n            // Invalid usage of message\n            return {};\n        }\n        return { localizedMessage: localizedMessage, messageData: messageData, messageDefn: messageDefn };\n    }\n    return {};\n};\n\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} notyMessage - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n * @ignore\n */\nexport let reportNotyMessage = function( declViewModel, messageList, notyMessage, parentScope ) {\n    var deferred = AwPromiseService.instance.defer();\n    var message = exports.generateMessage( declViewModel, messageList, notyMessage, parentScope );\n    var messageDefn = message.messageDefn;\n    if( !message.localizedMessage ) {\n        deferred.reject( 'resolved message string is empty' );\n    } else if( messageDefn && messageDefn.messageType ) {\n        if( logger.isDeclarativeLogEnabled() ) {\n            debugService.debugMessages( message, declViewModel, parentScope );\n        }\n        if( messageDefn.messageText ) {\n            _reportNotyMessageInternal( messageDefn, message.localizedMessage, deferred, declViewModel, parentScope );\n        } else if( messageDefn.messageKey ) {\n            _reportNotyMessageInternal( messageDefn, message.localizedMessage, deferred, declViewModel, parentScope, message.messageData );\n        } else {\n            // Invalid usage of message\n            deferred.reject();\n        }\n\n        //Add active token to the declViewModel corresponding to which the noty msg is opened\n        //This assists usecases where noty msgs are opened through popups\n        //preventing the unmounting of popups(destruction of declViewModel) until a user action is performed on the noty msg\n        declViewModel.getToken().addAction( messageDefn );\n        deferred.promise.then( function() {\n            declViewModel.getToken().removeAction( messageDefn );\n        } ).catch( function() {\n            declViewModel.getToken().removeAction( messageDefn );\n        } );\n    }\n    return deferred.promise;\n};\n\n/**\n * Show error message in notification.\n *\n * @param {String} message - error message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showError = function( message, messageData, messageDefn, buttonsArr ) {\n    if( _messageTypes.error ) {\n        logger.error( message );\n        notyService.showError( message, messageData, messageDefn, buttonsArr );\n    }\n};\n\n/**\n * Show informational message in notification.\n *\n * @param {String} message - Informational message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showInfo = function( message, messageData, messageDefn, buttonsArr ) {\n    if( _messageTypes.info ) {\n        logger.info( message );\n        notyService.showInfo( message, messageData, messageDefn, buttonsArr );\n    }\n};\n\n/**\n * Show warning message in notification.\n *\n * @param {String} message - Warning message to show\n * @param {String} buttonsArr  – Array of buttons (like: Cancel, Ok)\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n */\nexport let showWarning = function( message, buttonsArr, messageData, messageDefn ) {\n    if( _messageTypes.warning ) {\n        logger.warn( message );\n        notyService.showWarning( message, buttonsArr, messageData, messageDefn );\n    }\n};\n\n/**\n * Get SOA error message from error object\n *\n * @param {String} errorJSO - JavaScript Object exception\n *\n * @return {String} message error message to be displayed.\n * @ignore\n */\nexport let getSOAErrorMessage = function( errorJSO ) {\n    if( errorJSO.message ) {\n        return errorJSO.message;\n    }\n\n    var partialErrors = null;\n\n    if( errorJSO.partialErrors ) {\n        partialErrors = errorJSO.partialErrors;\n    } else if( errorJSO.cause && errorJSO.cause.partialErrors ) {\n        partialErrors = errorJSO.cause.partialErrors;\n    }\n\n    errorJSO.message = '';\n\n    if( partialErrors ) {\n        for( var ii = 0; ii < partialErrors.length; ii++ ) {\n            var errorValues = partialErrors[ ii ].errorValues;\n\n            if( errorValues ) {\n                for( var jj = 0; jj < errorValues.length; jj++ ) {\n                    if( errorValues[ jj ].message ) {\n                        if( errorJSO.message.length > 0 ) {\n                            errorJSO.message += '\\n';\n                        }\n\n                        errorJSO.message += errorValues[ jj ].message;\n                    }\n                }\n            }\n        }\n    }\n\n    return errorJSO.message;\n};\n\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {String} timeoutValue - timeout Value in ms.\n */\nexport let setTimeout = function( messageType, timeoutValue ) {\n    timeoutValue = parseInt( timeoutValue );\n    messageType = messageType.toLocaleLowerCase();\n    if( !isNaN( timeoutValue ) && timeoutValue > 0 ) {\n        timeoutValue = getTimeoutMillis( timeoutValue );\n    } else if( timeoutValue <= 0 ) {\n        timeoutValue = 0;\n    }\n    notyService.setTimeout( messageType, timeoutValue );\n};\n\n/**\n * API to set the visibility of any type of notification messages.\n *\n * @param {String} messageType - INFO/WARNING/ERROR\n * @param {Boolean} value - set visibility value\n *\n */\nexport let setMessageVisibility = function( messageType, value ) {\n    messageType = messageType.toLocaleLowerCase();\n    if( messageType in _messageTypes ) {\n        _messageTypes[ messageType ] = value;\n    }\n};\n\n/*\n * The service to convert seconds in milliseconds.\n */\nvar getTimeoutMillis = function( timeout ) {\n    return timeout * 1000;\n};\n\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nexports = {\n    getLocalizedTextForInterpolationString,\n    applyMessageParams,\n    applyMessageParamsWithoutContext,\n    applyMessageData,\n    generateMessage,\n    reportNotyMessage,\n    showError,\n    showInfo,\n    showWarning,\n    getSOAErrorMessage,\n    setTimeout,\n    setMessageVisibility\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
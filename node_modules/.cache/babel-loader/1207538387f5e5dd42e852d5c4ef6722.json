{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service provides useful APIs for the date and Time formatting. It allows to se the default date and time format for the session.\n *\n * @module js/dateTimeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport localeSvc from 'js/localeService';\nimport cfgSvc from 'js/configurationService';\nimport AwFilterService from 'js/awFilterService';\nimport { isMatch } from 'date-fns';\nimport logger from 'js/logger';\n/**revisitme\n * Hint: config path is mocked one. we need to tune build and alias for config from assets folder\n * so we can use like, import 'config/localeDateTime'\n */\n\nimport 'config/localeDateTime'; // Beyond angular: for some untility service which is:\n// - heavily used\n// - init function is not rich\n// put them to bootstrap for now for better code design\n\nexport const FLATPICKR_ID = 'div.flatpickr-calendar';\n/**\n * Default locale specific date/time values used until login is complete.\n */\n\nvar _dateTimeLocaleInfo = {\n  is12HrFormat: false,\n  sessionDateTimeFormat: 'd-M-Y HH:mm',\n  sessionDateFormat: 'd-M-Y',\n  sessionTimeFormat: 'HH:mm'\n};\n/** Regular expression that matches a number between 0 and 59 */\n\nvar _regMinSec = /([0-5]?\\d)/;\n/**\n * @private\n */\n\nvar _englishDateTimeFormat = {\n  dateFilterFormat: 'd-M-Y HH:mm',\n  datePickerFormat: 'd-M-Y',\n  datePlaceholder: 'DD-MMM-YYYY',\n  timePlaceholder: 'HH:MM',\n  monthAfterYear: false,\n  dayOfWeekAfterDay: false\n};\n/**\n * @private\n */\n\nvar _englishDateFormat = {\n  dateFilterFormat: 'd-M-Y',\n  datePickerFormat: 'd-M-Y',\n  datePlaceholder: 'DD-MMM-YYYY',\n  timePlaceholder: '',\n  monthAfterYear: false,\n  dayOfWeekAfterDay: false\n};\n/**\n * @private\n */\n\nvar _englishTimeFormat = {\n  dateFilterFormat: 'HH:mm',\n  datePickerFormat: '',\n  datePlaceholder: '',\n  timePlaceholder: 'HH:MM',\n  monthAfterYear: false,\n  dayOfWeekAfterDay: false\n};\n/**\n * @private\n */\n\nvar _i18n_anteMeridiem = 'AM';\n/**\n * @private\n */\n\nvar _i18n_postMeridiem = 'PM';\n/**\n * Regular expression value to extract segments of a 12 hour time entry\n *\n * @private\n */\n\nvar _regPattern12 = null;\n/**\n * Regular expression value to extract segments of a 24 hour time entry\n *\n * @private\n */\n\nvar _regPattern24 = null;\n/**\n * @private\n */\n\nvar _localePlaceholders = {};\n/**\n * @private\n */\n\nvar _datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n/**\n * @private\n */\n\nvar _datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n/**\n * TRUE if the i18N requires the month to be shown after the year in the JQuery datePicker.\n *\n * @private\n */\n\nvar _showMonthAfterYear = _englishDateTimeFormat.showMonthAfterYear;\n/**\n * @private\n */\n\nvar _timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n/**\n * List of 24 hour time selections (in current 12/24 hour format).\n *\n * @private\n */\n\nvar _timeLovEntries = null;\n/**\n * @private\n */\n\nvar _dateFilterFormat = _englishDateFormat.dateFilterFormat;\n/**\n * Function to build the list of time values in the drop down list of (aw-property-time-val) UI.\n *\n * @private\n *\n * @returns {LovEntry[]} An array of 'lovEntry' populated with the internal an display values.\n */\n\nvar _buildTimeLovEntries = function () {\n  var lovEntries = [];\n\n  var _pad = function (number) {\n    if (number < 10) {\n      return '0' + number;\n    }\n\n    return number;\n  };\n\n  var msHr = 1000 * 60 * 60;\n  var msLimit = msHr * 24;\n  var msInc = 1000 * 60 * 30;\n\n  for (var msTime = 0; msTime < msLimit; msTime += msInc) {\n    var date = new Date(msTime);\n    var utcHours = date.getUTCHours();\n    var utcMinutes = date.getUTCMinutes();\n    var mer;\n    var disp;\n\n    if (_dateTimeLocaleInfo.is12HrFormat) {\n      if (utcHours < 12) {\n        if (utcHours === 0) {\n          utcHours += 12;\n        }\n\n        mer = _i18n_anteMeridiem;\n      } else {\n        if (utcHours > 12) {\n          utcHours -= 12;\n        }\n\n        mer = _i18n_postMeridiem;\n      }\n\n      disp = _pad(utcHours) + ':' + _pad(utcMinutes) + ' ' + mer;\n    } else {\n      disp = _pad(utcHours) + ':' + _pad(utcMinutes);\n    }\n\n    var lovEntry = {\n      propInternalValue: msTime,\n      propDisplayValue: disp\n    };\n    lovEntries.push(lovEntry);\n  }\n\n  return lovEntries;\n};\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 12 hours, optional\n *         minutes, optional seconds and optional meridiem.\n */\n\n\nvar _getTimePattern12Hr = function () {\n  if (!_regPattern12) {\n    var _regHr12 = /(1[012]|0\\d|\\d)/;\n    var _regGap = /\\s*/;\n\n    var _regMeridiem = new RegExp('(' + _i18n_anteMeridiem + //\n    '|' + _i18n_postMeridiem + '|a|p|am|pm' + ')?');\n    /** hh:mm:ss a */\n\n\n    var _reg12HrMnSec = new RegExp('(^' + _regHr12.source + //\n    ':' + _regMinSec.source + ':' + _regMinSec.source + //\n    _regGap.source + _regMeridiem.source + '$)');\n    /** hh:mm a */\n\n\n    var _reg12HrMin = new RegExp('(^' + _regHr12.source + //\n    ':' + _regMinSec.source + _regGap.source + //\n    _regMeridiem.source + '$)');\n    /** hh a */\n\n\n    var _reg12Hr = new RegExp('(^' + _regHr12.source + //\n    _regGap.source + _regMeridiem.source + '$)'); // aggregate of all sub expressions\n\n\n    _regPattern12 = new RegExp(_reg12HrMnSec.source + //\n    '|' + _reg12HrMin.source + '|' + _reg12Hr.source);\n  }\n\n  return _regPattern12;\n};\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 24 hours, optional minutes\n *         and optional seconds.\n */\n\n\nvar _getTimePattern24Hr = function () {\n  if (!_regPattern24) {\n    var _regHr24 = /([0-1]?\\d|2[0-3])/;\n    /** HH:mm:ss : https://regex101.com/ */\n\n    var _reg24HrMnSec = new RegExp('(^' + _regHr24.source + //\n    ':' + _regMinSec.source + ':' + _regMinSec.source + '$)');\n    /** HH:mms */\n\n\n    var _reg24HrMin = new RegExp('(^' + _regHr24.source + //\n    ':' + _regMinSec.source + '$)');\n    /** HH */\n\n\n    var _reg24Hr = new RegExp('(^' + _regHr24.source + '$)'); // aggregate of all sub expressions\n\n\n    _regPattern24 = new RegExp(_reg24HrMnSec.source + //\n    '|' + _reg24HrMin.source + '|' + _reg24Hr.source);\n  }\n\n  return _regPattern24;\n};\n/**\n * Function to validate normalized time\n *\n * @private\n *\n * @param {String} normalizedTimeString - normalized time string\n *\n * @return {Boolean}\n */\n\n\nvar isNormalizedTimeValid = function (normalizedTimeString) {\n  let timeString = normalizedTimeString;\n\n  if (!timeString.includes(':') || !isMatch(timeString, getTimeFilterFormat())) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Function to tokenize the time input.\n *\n * @private\n *\n * @param {String} timeString - Time string to tokenize in 'hh:mmm:ss a' format.\n *\n * @return {Number[]} Array of integers representing extracted hours, minutes and seconds.\n */\n\n\nvar _tokenizeTime = function (timeString) {\n  if (!isNormalizedTimeValid(timeString)) {\n    return null;\n  }\n\n  var time_AmPm = timeString.split(' ');\n  var hour_minuteArray = time_AmPm[0].split(/[:aApP\\s]+/);\n  var hour = 0;\n\n  if (hour_minuteArray.length > 0) {\n    hour = parseInt(hour_minuteArray[0], 10);\n\n    if (_dateTimeLocaleInfo.is12HrFormat) {\n      if (time_AmPm[1] === _i18n_postMeridiem) {\n        hour += 12;\n\n        if (hour >= 24) {\n          hour = 0;\n        }\n      }\n    }\n\n    if (hour > 23) {\n      hour = 23;\n    }\n  }\n\n  var minute = 0;\n\n  if (hour_minuteArray.length > 1) {\n    minute = parseInt(hour_minuteArray[1], 10);\n\n    if (minute > 59) {\n      minute = 59;\n    }\n  }\n\n  var second = 0;\n\n  if (hour_minuteArray.length > 2) {\n    second = parseInt(hour_minuteArray[2], 10);\n\n    if (isNaN(second)) {\n      second = 0;\n    }\n\n    if (second > 59) {\n      second = 59;\n    }\n  }\n\n  var splitTimeData = [];\n  splitTimeData[0] = hour;\n  splitTimeData[1] = minute;\n  splitTimeData[2] = second;\n  return splitTimeData;\n};\n/**\n * @param {String} dateFormat - The string from the TextServer used to construct the return date and/or time Format.\n *\n * @param {Boolea} includeDate - TRUE if date should be included in the format\n *\n * @param {Boolean} includeTime - TRUE if time should be included in the format\n *\n * @return {Object} An object with properties:<br>\n *         'dateFilterFormat' set with the converted pattern compatible with AngularJS \"$filter('date')\"\n *         <p>\n *         'datePickerFormat' set with the converted pattern compatible with the 'dateFormat' property (in the\n *         'options' object) and 'formatDate' and 'parseDate' functions of JQueryUI's 'datePicker'.\n *         <p>\n *         'datePlaceholder' set with i18N text to display in an empty date input field.\n *         <p>\n *         'timePlaceholder' set with i18N text to display in an empty time input field.\n *         <p>\n *         'monthAfterYear' set with TRUE if the i18N requires the month to be shown after the year in the JQuery\n *         datePicker.\n */\n\n\nvar _getDateFormatByServerString = function (dateFormat, includeDate, includeTime) {\n  // eslint-disable-line complexity\n  var dateFilterFormat = '';\n  var datePickerFormat = '';\n  var datePlaceholder = '';\n  var timePlaceholder = '';\n\n  var localePlaceHolder = _localePlaceholders[localeSvc.getLocale()] || _localePlaceholders.en_US;\n\n  var monthAfterYear = localePlaceHolder.monthAfterYear;\n  _dateTimeLocaleInfo.is12HrFormat = false;\n\n  if (dateFormat && dateFormat.length > 0) {\n    var containsSeconds = dateFormat.indexOf('%S') !== -1;\n    var format = dateFormat.trim();\n    var formatLength = format.length;\n\n    for (var i = 0; i < formatLength; i++) {\n      var c = format.charAt(i);\n\n      switch (c) {\n        case '%':\n          // ignore printf-specific char\n          break;\n\n        case 'd':\n          if (includeDate) {\n            // d: day of the month(0-31) -> dd: day in month (two digits)\n            dateFilterFormat = dateFilterFormat.concat('dd');\n            datePickerFormat = datePickerFormat.concat('d');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.day);\n          }\n\n          break;\n\n        case 'b':\n          if (includeDate) {\n            // b: abbreviated month name -> MMM: month in year (full month name) not supported by Java.\n            dateFilterFormat = dateFilterFormat.concat('MMM');\n            datePickerFormat = datePickerFormat.concat('M');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.month_3);\n          }\n\n          break;\n\n        case 'B':\n          if (includeDate) {\n            // B: full month name -> MMMMM: month in year (full month name)\n            dateFilterFormat = dateFilterFormat.concat('MMMM');\n            datePickerFormat = datePickerFormat.concat('M');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.month_4);\n          }\n\n          break;\n\n        case 'm':\n          if (includeDate) {\n            // m: month(01-12) -> MM: month in year (two digits)\n            dateFilterFormat = dateFilterFormat.concat('MM');\n            datePickerFormat = datePickerFormat.concat('m');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.month_2);\n          }\n\n          break;\n\n        case 'y':\n          if (includeDate) {\n            // y: year without century(00-99) -> yy: year (two digits).\n            dateFilterFormat = dateFilterFormat.concat('yy');\n            datePickerFormat = datePickerFormat.concat('y');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.year_2);\n          }\n\n          break;\n\n        case 'Y':\n          if (includeDate) {\n            // Y: year with century(1970-2069) ->yyyy: year (four digits)\n            dateFilterFormat = dateFilterFormat.concat('yyyy');\n            datePickerFormat = datePickerFormat.concat('yy');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.year_4);\n          }\n\n          break;\n\n        case 'H':\n          if (includeTime) {\n            // H: hour(24-hour clock)(00-23) ->HH: hour in day (0~23) (two digits)\n            dateFilterFormat = dateFilterFormat.concat('HH');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.hours);\n          }\n\n          break;\n\n        case 'I':\n          if (includeTime) {\n            _dateTimeLocaleInfo.is12HrFormat = true; // I: hour(12-hour clock)(01-12) ->hh: hour in am/pm (1~12) (two digits)\n\n            dateFilterFormat = dateFilterFormat.concat('hh');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.hours);\n          }\n\n          break;\n\n        case 'M':\n          if (includeTime) {\n            // M: minute(00-59) -> mm: minute in hour (two digits)\n            dateFilterFormat = dateFilterFormat.concat('mm');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.minutes);\n            /**\n             * Note: This is a little 'odd' but the placeholder has to have 'seconds' in it even if the\n             * general display for time does not.\n             */\n\n            if (!containsSeconds) {\n              timePlaceholder = timePlaceholder.concat(':' + localePlaceHolder.seconds);\n            }\n          }\n\n          break;\n\n        case 'S':\n          if (includeTime) {\n            // S: second(00-59) -> ss: second in minute (two digits)\n            dateFilterFormat = dateFilterFormat.concat('ss');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.seconds);\n          }\n\n          break;\n\n        default:\n          // If \":\" exists in the format, assume it must be a separator for time.\n          if (!includeTime && c === ':') {\n            break;\n          } // If \"-\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === '-') {\n            break;\n          } // If \".\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === '.') {\n            break;\n          } // If \"/\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === '/') {\n            break;\n          } // If \",\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === ',') {\n            break;\n          } // If \" \" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === ' ') {\n            break;\n          } // If \"年\" (year) \"月\" (month) or \"日\" (day) exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && (c === '年' || c === '月' || c === '日')) {\n            break;\n          }\n\n          dateFilterFormat += c;\n\n          if (c === ':') {\n            timePlaceholder += c;\n          }\n\n          if (c === '-' || c === '.' || c === '/' || c === ',' || c === ' ') {\n            datePickerFormat += c;\n            datePlaceholder += c;\n          }\n\n          break;\n      }\n    }\n  } else {\n    if (includeDate) {\n      if (includeTime) {\n        dateFilterFormat = _englishDateTimeFormat.dateFilterFormat;\n        datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n        datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n        timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n        monthAfterYear = _englishDateTimeFormat.monthAfterYear;\n      } else {\n        dateFilterFormat = _englishDateFormat.dateFilterFormat;\n        datePickerFormat = _englishDateFormat.datePickerFormat;\n        datePlaceholder = _englishDateFormat.datePlaceholder;\n        timePlaceholder = _englishDateFormat.timePlaceholder;\n        monthAfterYear = _englishDateFormat.monthAfterYear;\n      }\n    } else if (includeTime) {\n      dateFilterFormat = _englishTimeFormat.dateFilterFormat;\n      datePickerFormat = _englishTimeFormat.datePickerFormat;\n      datePlaceholder = _englishTimeFormat.datePlaceholder;\n      timePlaceholder = _englishTimeFormat.timePlaceholder;\n      monthAfterYear = _englishTimeFormat.monthAfterYear;\n    }\n  }\n  /**\n   * Insert AM/PM indicator (if necessary)<BR>\n   * If so: Insert it after either seconds, minutes or hours.\n   */\n\n\n  if (_dateTimeLocaleInfo.is12HrFormat && includeTime) {\n    var ndx = dateFilterFormat.lastIndexOf('ss');\n\n    if (ndx !== -1) {\n      dateFilterFormat = dateFilterFormat.substring(0, ndx + 2) + ' a' + dateFilterFormat.substring(ndx + 2);\n    } else {\n      ndx = dateFilterFormat.lastIndexOf('mm');\n\n      if (ndx !== -1) {\n        dateFilterFormat = dateFilterFormat.substring(0, ndx + 2) + ' a' + dateFilterFormat.substring(ndx + 2);\n      } else {\n        ndx = dateFilterFormat.lastIndexOf('hh');\n\n        if (ndx !== -1) {\n          dateFilterFormat = dateFilterFormat.substring(0, ndx + 2) + ' a' + dateFilterFormat.substring(ndx + 2);\n        }\n      }\n    }\n  }\n\n  return {\n    dateFilterFormat: dateFilterFormat.trim(),\n    datePickerFormat: datePickerFormat.trim(),\n    datePlaceholder: datePlaceholder.trim(),\n    timePlaceholder: timePlaceholder.trim(),\n    monthAfterYear: monthAfterYear\n  };\n};\n\nlet exports;\n\nvar _setupDateTimeLocaleInfo = function () {\n  let filter = AwFilterService.instance;\n\n  if (!_nullLocalDateString) {\n    _nullLocalDateString = filter('date')(_nullLocalDate, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ');\n  }\n\n  localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages').then(textBundle => {\n    if (!textBundle) {\n      logger.info('Unable to load dateTimeServiceMessages textBundle');\n      return;\n    }\n\n    _i18n_anteMeridiem = textBundle.anteMeridiem;\n    _i18n_postMeridiem = textBundle.postMeridiem; //revisitme: AwLocaleService is not available\n    // let locale = AwLocaleService.instance;\n\n    let locale;\n\n    if (locale) {\n      locale.id = localeSvc.getLocale();\n      locale.DATETIME_FORMATS.AMPMS = [textBundle.anteMeridiem, textBundle.postMeridiem];\n      locale.DATETIME_FORMATS.DAY = [textBundle.dayName_01, textBundle.dayName_02, textBundle.dayName_03, textBundle.dayName_04, textBundle.dayName_05, textBundle.dayName_06, textBundle.dayName_07];\n      locale.DATETIME_FORMATS.MONTH = [textBundle.monthName_01, textBundle.monthName_02, textBundle.monthName_03, textBundle.monthName_04, textBundle.monthName_05, textBundle.monthName_06, textBundle.monthName_07, textBundle.monthName_08, textBundle.monthName_09, textBundle.monthName_10, textBundle.monthName_11, textBundle.monthName_12];\n      locale.DATETIME_FORMATS.SHORTDAY = [textBundle.dayNameShort_01, textBundle.dayNameShort_02, textBundle.dayNameShort_03, textBundle.dayNameShort_04, textBundle.dayNameShort_05, textBundle.dayNameShort_06, textBundle.dayNameShort_07];\n      locale.DATETIME_FORMATS.SHORTMONTH = [textBundle.monthNameShort_01, textBundle.monthNameShort_02, textBundle.monthNameShort_03, textBundle.monthNameShort_04, textBundle.monthNameShort_05, textBundle.monthNameShort_06, textBundle.monthNameShort_07, textBundle.monthNameShort_08, textBundle.monthNameShort_09, textBundle.monthNameShort_10, textBundle.monthNameShort_11, textBundle.monthNameShort_12];\n    }\n\n    eventBus.publish('dateTime.changed', _dateTimeLocaleInfo);\n  }).catch(err => {\n    logger.error(err);\n  });\n  localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.anteMeridiem').then(result => {\n    _i18n_anteMeridiem = result;\n    eventBus.publish('dateTime.changed', _dateTimeLocaleInfo);\n  });\n  localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.postMeridiem').then(result => {\n    _i18n_postMeridiem = result;\n    eventBus.publish('dateTime.changed', _dateTimeLocaleInfo);\n  });\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {Number} The numeric value corresponding to the time for the given date according to universal time.\n */\n\n\nvar _getDateTime = function (dateToFormat) {\n  var dateTime;\n\n  if (!dateToFormat) {\n    return dateTime;\n  }\n\n  if (_.isString(dateToFormat) || _.isNumber(dateToFormat)) {\n    dateTime = dateToFormat;\n  } else {\n    dateTime = dateToFormat.getTime();\n  }\n\n  return dateTime;\n};\n/**\n * {String} Null date/time string for 1 Jan, 0001 at midnight GMT.\n * @ignore\n */\n\n\nexport let NULLDATE = '0001-01-01T00:00:00+00:00';\n/**\n * Definition of 'null' or 'not yet set' date time.\n * <P>\n * Same value as AW's IDateService.getNullLocalDate().\n *\n * @private\n */\n\nvar _nullGmtDate = new Date(NULLDATE);\n/**\n * @private\n */\n\n\nvar offset = _nullGmtDate.getTimezoneOffset();\n/**\n * @private\n */\n\n\nvar _nullGmtTime = _getDateTime(_nullGmtDate);\n/**\n * @private\n */\n\n\nvar _nullLocalDateString;\n/**\n   * @private\n   */\n\n\nvar _nullLocalDate = new Date(_nullGmtTime + offset * 60 * 1000);\n/**\n   */\n\n/**\n * @private\n */\n\n\nvar _epochDate = new Date(0);\n/**\n * ************************************<BR>\n * ***** Define service API <BR>\n * ************************************<BR>\n */\n\n/**\n * @return {Promise} TODO\n *\n *@ignore\n */\n\n\nexport let getJQueryDatePickerTextBundle = async function () {\n  await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.');\n  return {\n    closeText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.closeText'),\n    prevText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.prevText'),\n    nextText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.nextText'),\n    currentText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.currentText'),\n    monthNames: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_07'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_08'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_09'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_10'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_11'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_12')],\n    monthNamesShort: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_07'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_08'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_09'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_10'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_11'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_12')],\n    dayNames: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_07')],\n    dayNamesShort: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_07')],\n    dayNamesMin: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_07')],\n    weekHeader: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.weekHeader'),\n    dateFormat: _datePickerFormat,\n    firstDay: 1,\n    isRTL: false,\n    showMonthAfterYear: _showMonthAfterYear,\n    yearSuffix: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.yearSuffix')\n  };\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date of the given Date object formatted according to current user session format.\n */\n\nexport let formatDate = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getDateFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to current user session\n *          format.\n */\n\nexport let formatDateTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getDateTimeFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format.\n */\n\nexport let formatTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getTimeFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format\n *          and meant for display in an lovEntry (i.e. without 'seconds').\n * @ignore\n */\n\nexport let formatTimeLovEntry = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getTimeLovEntryFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatSessionDateTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var formattedDate = '';\n\n    var dateValue = _getDateTime(dateToFormat);\n\n    if (_.isNumber(dateValue) || _.isString(dateValue)) {\n      formattedDate = filter('date')(dateValue, exports.getSessionDateTimeFormat());\n    } else if (_.isDate(dateValue)) {\n      formattedDate = filter('date')(_getDateTime(dateValue), exports.getSessionDateTimeFormat());\n    }\n\n    return formattedDate.toString().trim();\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatSessionDate = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var format = exports.getSessionDateFormat();\n\n    if (format.length > 0) {\n      return filter('date')(dateValue, exports.getSessionDateFormat());\n    }\n\n    return '';\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The time portion of the given Date object formatted according to current user session format.\n */\n\nexport let formatSessionTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var format = exports.getSessionTimeFormat();\n\n    if (format.length > 0) {\n      return filter('date')(dateValue, exports.getSessionTimeFormat());\n    }\n\n    return '';\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: Tuesday-Sep 27\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date of the given Date object formatted according to current user session format.\n */\n\nexport let formatWeekdayMonthAndDayOfMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var dayOfWeek = filter('date')(dateValue, 'EEEE');\n    var month = exports.formatAbbreviatedMonth(dateValue);\n    var dayOfMonth = exports.formatFullDayOfMonth(dateValue);\n    var locale = localeSvc.getLocale();\n\n    if (_localePlaceholders[locale].dayOfWeekAfterDay) {\n      return month + _localePlaceholders[locale].monthDaySeparator + dayOfMonth + _localePlaceholders[locale].dayOfWeekSeparator + dayOfWeek;\n    }\n\n    return dayOfWeek + _localePlaceholders[locale].dayOfWeekSeparator + month + _localePlaceholders[locale].monthDaySeparator + dayOfMonth;\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: 27\n * <P>\n * Note: In some locales (i.e. ja_JP) there are extra symbols added to this number. This function will handle this\n * case.\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatFullDayOfMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var dayOfMonth = filter('date')(dateValue, 'dd');\n    var locale = localeSvc.getLocale();\n\n    if (_localePlaceholders[locale].fullDayOfMonth) {\n      dayOfMonth += _localePlaceholders[locale].day;\n    }\n\n    return dayOfMonth;\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatAbbreviatedMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, 'MMM');\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatFullMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, 'MMMM');\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to UTC format.\n */\n\nexport let formatUTC = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ');\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @param {String} dateFormat - format. This is a EWI data collection object time stamp format.\n *\n * @returns {String} The date & time of the given Date object formatted according to the input dateFormat.\n */\n\nexport let formatNonStandardDate = function (dateToFormat, dateFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, dateFormat);\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\n\nexport let getDateFilterFormat = function () {\n  return _dateFilterFormat;\n};\n/**\n * Format compatible with the 'dateFormat' property (in the 'options' object) and 'formatDate' and 'parseDate'\n * functions of JQueryUI's 'datePicker'.\n * <P>\n * Examples: <BR>\n * Format 'd-M-yy' would return \"01-Apr-2016\"<BR>\n * Format 'mm.dd.yy' would return \"04.01.2016\"<BR>\n *\n * @return {String} Date entry format for use in JQueryUI's datepicker API.\n */\n\nexport let getDateFormat = function () {\n  return _datePickerFormat;\n};\n/**\n * @return {String} User oriented text used to indicate the required format of the date entry (i.e. \"yy.mm.dd\",\n *         \"day-month-year\", etc.).\n */\n\nexport let getDateFormatPlaceholder = function () {\n  return _datePlaceholder;\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\n\nexport let getDateTimeFilterFormat = function () {\n  return exports.getDateFilterFormat() + _localePlaceholders[localeSvc.getLocale()].dateTimeSeparator + exports.getTimeFilterFormat();\n};\n/**\n * @param {DateTimeApi} dateApi - Object containing the current date/time context.\n *\n * @return {Date} Date object set to either 'today' or to 'minDate' or 'maxDate' if 'today' is outside those ranges.\n *         The 'minDate' or 'maxDate' will be chosen based on which of those values 'today' is closer to.\n * @ignore\n */\n\nexport let getDefaultDate = function (dateApi) {\n  var defaultDate;\n  var limitDate;\n\n  if (dateApi.isTimeEnabled) {\n    if (dateApi.isDateEnabled) {\n      /**\n       * Deal with date & time\n       *\n       * @private\n       */\n      defaultDate = new Date();\n      defaultDate.setHours(0);\n      defaultDate.setMinutes(0);\n      defaultDate.setSeconds(0);\n\n      if (dateApi.minDate && defaultDate < dateApi.minDate) {\n        return dateApi.minDate;\n      }\n\n      if (dateApi.maxDate && defaultDate > dateApi.maxDate) {\n        return dateApi.maxDate;\n      }\n    } else {\n      /**\n       * Deal with time only. Set to 'epoch' and then set hours/mins/secs\n       * @private\n       */\n      defaultDate = new Date(0);\n      defaultDate.setHours(0);\n      defaultDate.setMinutes(0);\n      defaultDate.setSeconds(0);\n\n      if (dateApi.minDate) {\n        limitDate = new Date(0);\n        var jsMinDate = exports.getJSDate(dateApi.minDate);\n        limitDate.setHours(jsMinDate.getHours());\n        limitDate.setMinutes(jsMinDate.getMinutes());\n        limitDate.setSeconds(jsMinDate.getSeconds());\n\n        if (defaultDate < limitDate) {\n          return limitDate;\n        }\n      }\n\n      if (dateApi.maxDate) {\n        limitDate = new Date(0);\n        var jsMaxDate = exports.getJSDate(dateApi.maxDate);\n        limitDate.setHours(jsMaxDate.getHours());\n        limitDate.setMinutes(jsMaxDate.getMinutes());\n        limitDate.setSeconds(jsMaxDate.getSeconds());\n\n        if (defaultDate > limitDate) {\n          return limitDate;\n        }\n      }\n    }\n  } else {\n    if (dateApi.isDateEnabled) {\n      /**\n       * Deal with date only. Set to hours/mins/secs to midnight local time.\n       *\n       * @private\n       */\n      defaultDate = new Date();\n      defaultDate.setHours(0);\n      defaultDate.setMinutes(0);\n      defaultDate.setSeconds(0);\n\n      if (dateApi.minDate) {\n        limitDate = exports.getJSDate(dateApi.minDate);\n        limitDate.setHours(0);\n        limitDate.setMinutes(0);\n        limitDate.setSeconds(0);\n\n        if (defaultDate < limitDate) {\n          return limitDate;\n        }\n      }\n\n      if (dateApi.maxDate) {\n        limitDate = exports.getJSDate(dateApi.maxDate);\n        limitDate.setHours(0);\n        limitDate.setMinutes(0);\n        limitDate.setSeconds(0);\n\n        if (defaultDate > limitDate) {\n          return limitDate;\n        }\n      }\n    } else {\n      defaultDate = exports.getNullDate();\n    }\n  }\n\n  return defaultDate;\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n * @ignore\n */\n\nexport let getEnglishDateTimeFormat = function () {\n  return _englishDateTimeFormat.dateFilterFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n * @ignore\n */\n\nexport let getEnglishDateFormat = function () {\n  return _englishDateFormat.dateFilterFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n * @ignore\n */\n\nexport let getEnglishTimeFormat = function () {\n  return _englishTimeFormat.dateFilterFormat;\n};\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'epoch' or '1-Jan-1970 00:00:00\n *         GMT' value.\n * @ignore\n */\n\nexport let getEpochDate = function () {\n  return _epochDate;\n};\n/**\n * @param {Number} timeValue - Milliseconds since unix 'epoch'.\n *\n * @returns {Date} The given string value converted into a time on 'January 1, 0001' (or NULL if the string contains\n *          an invalid time format).\n */\n\nexport let getDateFromTimeValue = function (timeValue) {\n  if (!timeValue) {\n    return exports.getNullDate();\n  }\n\n  var trim = timeValue.trim();\n  /**\n   * Remove any trailing ':' before trying to match the pattern\n   */\n\n  if (trim.length > 0 && trim.charAt(trim.length - 1) === ':') {\n    trim = trim.substring(0, trim.length - 1);\n  }\n\n  var pattern = _dateTimeLocaleInfo.is12HrFormat ? _getTimePattern12Hr() : _getTimePattern24Hr();\n  var matches = trim.match(pattern);\n\n  if (matches) {\n    var fields = {};\n\n    if (_dateTimeLocaleInfo.is12HrFormat) {\n      if (matches[1]) {\n        fields.disp = matches[1];\n        fields.hr = matches[2];\n        fields.min = matches[3];\n        fields.sec = matches[4];\n        fields.mer = matches[5];\n      } else if (matches[6]) {\n        fields.disp = matches[6];\n        fields.hr = matches[7];\n        fields.min = matches[8];\n        fields.mer = matches[9];\n        fields.sec = '0';\n      } else if (matches[10]) {\n        fields.disp = matches[10];\n        fields.hr = matches[11];\n        fields.min = '0';\n        fields.sec = '0';\n        fields.mer = matches[12];\n      }\n      /**\n       * If no meridiem, assume PM\n       */\n\n\n      if (!fields.mer) {\n        fields.mer = _i18n_postMeridiem;\n      }\n\n      fields.mer = fields.mer.toLowerCase();\n\n      if (fields.mer === _i18n_postMeridiem.toLowerCase() || fields.mer === 'p' || fields.mer === 'pm') {\n        fields.hr = parseInt(fields.hr, 10) + 12;\n\n        if (fields.hr >= 24) {\n          fields.hr = '0';\n        } else {\n          fields.hr = fields.hr.toString();\n        }\n      }\n    } else {\n      if (matches[1]) {\n        fields.disp = matches[1];\n        fields.hr = matches[2];\n        fields.min = matches[3];\n        fields.sec = matches[4];\n      } else if (matches[5]) {\n        fields.disp = matches[5];\n        fields.hr = matches[6];\n        fields.min = matches[7];\n        fields.sec = '0';\n      } else if (matches[8]) {\n        fields.disp = matches[0];\n        fields.hr = matches[8];\n        fields.min = '0';\n        fields.sec = '0';\n      }\n    }\n\n    if (fields.hr) {\n      return new Date('0001', 0, 1, fields.hr, fields.min, fields.sec);\n    }\n  }\n\n  return null;\n};\n/**\n * @param {String} timeValue - in HH:MM:SS format\n * @returns coverted time from a HH:MM:SS format to ms\n */\n\nlet getTimeInMs = function (timeValue) {\n  if (timeValue === null) {\n    return null;\n  }\n\n  let hourInMSec = timeValue[0] * 60 * 60 * 1000;\n  let minInMSec = timeValue[1] * 60 * 1000;\n  let mSec = timeValue[2] * 1000;\n  return hourInMSec + minInMSec + mSec;\n};\n/**\n * @param {*} timeValue - 'x' or 'x:y' or 'x:y:z' format\n * @returns coverted time from a string to ms\n */\n\n\nexport let getTimeInMilliSec = timeValue => {\n  if (!_.isString(timeValue) || timeValue === '') {\n    return timeValue;\n  }\n\n  let normalizedTime = normalizeTimeString(timeValue);\n  return getTimeInMs(_tokenizeTime(normalizedTime));\n};\n/**\n * Returns a new Date object based on the given Date object or value.\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser. The 'null date' used in AW\n * did not always create a valid Date object.\n *\n * @param {Object} dateToTest - Object that MAY be a JS Date or MAY be the number of milliseconds since 'epoch'.\n *\n * @return {Date} A new JS Date object based on the given object (or 'null' date if no other JS date possible).\n * @ignore\n */\n\nexport let getJSDate = function (dateToTest) {\n  /**\n   * D-24274: Date Array LOV fails to clear field<BR>\n   * On Firefox, When the 'dateToTest' has the 'null' date value, the 'new Date()' constructor creates an invalid\n   * Date object. This causes 'NaN' problems later when we try to get a formatted string from this invalid Date.\n   * <P>\n   * We check here for that case and create a date based on the 'null' date time value.\n   */\n  if (exports.isNullDate(dateToTest)) {\n    return new Date(_getDateTime(_nullLocalDate));\n  }\n\n  var jsDate = null;\n\n  try {\n    jsDate = new Date(dateToTest);\n  } finally {\n    if (!jsDate) {\n      jsDate = new Date(_getDateTime(_nullLocalDate));\n    }\n  }\n\n  return jsDate;\n};\n/**\n * @param {String} timeValue - String value to test.\n *\n * @returns {String} The given string value now cleaned of any invalid characters.\n * @ignore\n */\n\nexport let getNormalizedTimeValue = function (timeValue) {\n  if (isMatch(timeValue, 'dd-MMM-yyyy HH:mm')) {\n    return '';\n  }\n\n  var nDate = exports.getDateFromTimeValue(timeValue);\n\n  if (nDate) {\n    return exports.formatTime(nDate);\n  }\n\n  return timeValue;\n};\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'null' or 'not yet set' value.\n */\n\nexport let getNullDate = function () {\n  return _nullLocalDate;\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\n\nexport let getSessionDateTimeFormat = function () {\n  return _dateTimeLocaleInfo.sessionDateTimeFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n */\n\nexport let getSessionDateFormat = function () {\n  return _dateTimeLocaleInfo.sessionDateFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\n\nexport let getSessionTimeFormat = function () {\n  return _dateTimeLocaleInfo.sessionTimeFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\n\nexport let getTimeFilterFormat = function () {\n  if (_dateTimeLocaleInfo.is12HrFormat) {\n    return 'hh:mm:ss a';\n  }\n\n  return 'HH:mm:ss';\n};\n/**\n * @return {String} AngularJS $filter format to display a time lovEntry in.\n * @ignore\n */\n\nexport let getTimeLovEntryFilterFormat = function () {\n  if (_dateTimeLocaleInfo.is12HrFormat) {\n    return 'hh:mm a';\n  }\n\n  return 'HH:mm';\n};\n/**\n * @return {String} User oriented text used to indicate the required format of the time entry (i.e. \"12:00 AM\",\n *         \"Hours:Minutes\", etc.).\n */\n\nexport let getTimeFormatPlaceholder = function () {\n  var timePlaceholder = _timePlaceholder;\n\n  if (_dateTimeLocaleInfo.is12HrFormat) {\n    timePlaceholder = timePlaceholder.concat(' ' + _i18n_anteMeridiem + '/' + _i18n_postMeridiem);\n  }\n\n  return timePlaceholder;\n};\n/**\n * @returns {LovEntry[]} current list of time slots.\n * @ignore\n */\n\nexport let getTimeLovEntries = function () {\n  if (!_timeLovEntries) {\n    _timeLovEntries = _buildTimeLovEntries();\n  }\n\n  let objectValue = {};\n  objectValue.timeList = _timeLovEntries;\n  return objectValue;\n};\n/**\n * @param {Object} dateToTest - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @return {Boolean} TRUE if the given test object represents the same date/time as the special 'null' or 'not yet\n *         set' value.\n */\n\nexport let isNullDate = function (dateToTest) {\n  if (!dateToTest) {\n    return true;\n  }\n\n  var dateTime;\n\n  if (_.isString(dateToTest)) {\n    dateTime = dateToTest;\n    return dateTime === _nullLocalDateString || dateTime === exports.NULLDATE;\n  }\n\n  if (_.isNumber(dateToTest)) {\n    dateTime = dateToTest;\n  } else {\n    dateTime = _getDateTime(dateToTest);\n  }\n\n  return dateTime === _getDateTime(_nullLocalDate) || dateTime === _nullGmtTime;\n};\n/**\n * @param {Date} date1 - 1st date to compare.\n *\n * @param {Date} date2 - 2nd date to compare.\n *\n * @return {Number} The value <code>0</code> if the 'date2' is equal to 'date1'; a value less than <code>0</code>\n *         if 'date1' is less than 'date2'; and a value greater than <code>0</code> if 'date1' is greater than\n *         'date2'.\n */\n\nexport let compare = function (date1, date2) {\n  var date1Final = date1; // Note: Current dbValue could be a JavaUtil class from GWT\n\n  if (date1Final && date1Final.constructor !== Date) {\n    date1Final = new Date(date1);\n  }\n\n  if (exports.isNullDate(date1Final)) {\n    if (date2 && !exports.isNullDate(date2)) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  if (exports.isNullDate(date2)) {\n    return 1;\n  }\n\n  var diff = _getDateTime(date1Final) - _getDateTime(date2);\n\n  if (diff === 0) {\n    return 0;\n  }\n\n  if (diff > 0) {\n    return 1;\n  }\n\n  return -1;\n};\n/**\n * @param {String} timeString -\n *\n * @return {String} The input string normalized for display.\n */\n\nexport let normalizeTimeString = function (timeString) {\n  if (timeString && timeString !== '') {\n    return exports.getNormalizedTimeValue(timeString);\n  }\n\n  return '';\n};\n/**\n * @param {Date} dateInput - Date Object to modify\n *\n * @param {String} timeString - Time string that has been 'normalized' in 'HH:mm:ss' (24hr) or 'hh:mm:ss a' (12hr)\n *            format.\n *\n * @return {Date} The input Date object modified and set with the given timeString input.\n */\n\nexport let setTimeIntoDateModel = function (dateInput, timeString) {\n  if (timeString !== '' && !isMatch(timeString, getTimeFilterFormat())) {\n    return dateInput;\n  }\n\n  if (timeString && timeString !== '') {\n    var time = _tokenizeTime(timeString);\n\n    dateInput.setHours(time[0]);\n    dateInput.setMinutes(time[1]);\n    dateInput.setSeconds(time[2]);\n  } else {\n    dateInput.setHours(0);\n    dateInput.setMinutes(0);\n    dateInput.setSeconds(0);\n  }\n\n  return dateInput;\n};\n/**\n * Set the user session specific locale and date/time format.\n *\n * @param {String} pattern - String returned as the \"DefaultDateFormat\" parameter supplied by the server during\n *            login (e.g. \"%d-%b-%Y %H:%M\").\n *            <P>\n *            Note: This pattern is not directly compatible with the {@link DateTimeFormat} class and must be\n *            converted into a compatible string before it is used with that class.\n */\n\nexport let setSessionDateTimeFormat = function (pattern) {\n  // Test pattern for simulating a server with a 4-digit year, 2-digit month & 12hr time format and slightly different date pattern\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%Y-%b-%d %I:%M:%S\";\n  //\n  // Test pattern for simulating a server with a 2-digit month & year (in German placement order) and 24hr time format w/o/ seconds\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%d.%m.%y %H:%M\";\n  //\n  // Test pattern for simulating a server with a full month, day & 4-digit year and no time format\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%B %d, %Y\";\n  //\n  // Test pattern for simulating a server with a 2-digit month & year (in English placement order) and 24hr time format w/o/ seconds\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%m-%d-%Y %H:%M\";\n  var patternDateTime = _getDateFormatByServerString(pattern, true, true);\n\n  var patternDate = _getDateFormatByServerString(pattern, true, false);\n\n  var patternTime = _getDateFormatByServerString(pattern, false, true);\n\n  _dateTimeLocaleInfo.sessionDateTimeFormat = patternDateTime.dateFilterFormat;\n  _dateTimeLocaleInfo.sessionDateFormat = patternDate.dateFilterFormat;\n  _dateTimeLocaleInfo.sessionTimeFormat = patternTime.dateFilterFormat;\n  _dateFilterFormat = patternDate.dateFilterFormat;\n  _datePickerFormat = patternDate.datePickerFormat;\n  _datePlaceholder = patternDate.datePlaceholder;\n  _timePlaceholder = patternTime.timePlaceholder;\n  _showMonthAfterYear = patternDate.monthAfterYear;\n  eventBus.publish('dateTime.sessionChanged', _dateTimeLocaleInfo);\n};\n/**\n * Initialize the dateTimeService\n */\n\nexport let init = function () {\n  /**\n   * Set locale and a default format now that the 'localeService' is valid.\n   */\n  _localePlaceholders = cfgSvc.getCfgCached('localeDateTime');\n  exports.setSessionDateTimeFormat('%d-%b-%Y %H:%M');\n  /**\n   * Now that we have the localService, use its current value to init dateTime stuff.\n   */\n\n  _setupDateTimeLocaleInfo();\n  /**\n   * Setup to listen to changes in locale.\n   *\n   * @param {String} locale - String with the updated locale value.\n   */\n\n\n  eventBus.subscribe('locale.changed', function () {\n    _setupDateTimeLocaleInfo();\n  }, 'dateTimeService');\n};\nexports = {\n  NULLDATE,\n  getTimeInMilliSec,\n  getJQueryDatePickerTextBundle,\n  formatDate,\n  formatDateTime,\n  formatTime,\n  formatTimeLovEntry,\n  formatSessionDateTime,\n  formatSessionDate,\n  formatSessionTime,\n  formatWeekdayMonthAndDayOfMonth,\n  formatFullDayOfMonth,\n  formatAbbreviatedMonth,\n  formatFullMonth,\n  formatUTC,\n  formatNonStandardDate,\n  getDateFilterFormat,\n  getDateFormat,\n  getDateFormatPlaceholder,\n  getDateTimeFilterFormat,\n  getDefaultDate,\n  getEnglishDateTimeFormat,\n  getEnglishDateFormat,\n  getEnglishTimeFormat,\n  getEpochDate,\n  getDateFromTimeValue,\n  getJSDate,\n  getNormalizedTimeValue,\n  getNullDate,\n  getSessionDateTimeFormat,\n  getSessionDateFormat,\n  getSessionTimeFormat,\n  getTimeFilterFormat,\n  getTimeLovEntryFilterFormat,\n  getTimeFormatPlaceholder,\n  getTimeLovEntries,\n  isNullDate,\n  compare,\n  normalizeTimeString,\n  setTimeIntoDateModel,\n  setSessionDateTimeFormat,\n  init\n};\nexport default exports;","map":{"version":3,"names":["_","eventBus","localeSvc","cfgSvc","AwFilterService","isMatch","logger","FLATPICKR_ID","_dateTimeLocaleInfo","is12HrFormat","sessionDateTimeFormat","sessionDateFormat","sessionTimeFormat","_regMinSec","_englishDateTimeFormat","dateFilterFormat","datePickerFormat","datePlaceholder","timePlaceholder","monthAfterYear","dayOfWeekAfterDay","_englishDateFormat","_englishTimeFormat","_i18n_anteMeridiem","_i18n_postMeridiem","_regPattern12","_regPattern24","_localePlaceholders","_datePickerFormat","_datePlaceholder","_showMonthAfterYear","showMonthAfterYear","_timePlaceholder","_timeLovEntries","_dateFilterFormat","_buildTimeLovEntries","lovEntries","_pad","number","msHr","msLimit","msInc","msTime","date","Date","utcHours","getUTCHours","utcMinutes","getUTCMinutes","mer","disp","lovEntry","propInternalValue","propDisplayValue","push","_getTimePattern12Hr","_regHr12","_regGap","_regMeridiem","RegExp","_reg12HrMnSec","source","_reg12HrMin","_reg12Hr","_getTimePattern24Hr","_regHr24","_reg24HrMnSec","_reg24HrMin","_reg24Hr","isNormalizedTimeValid","normalizedTimeString","timeString","includes","getTimeFilterFormat","_tokenizeTime","time_AmPm","split","hour_minuteArray","hour","length","parseInt","minute","second","isNaN","splitTimeData","_getDateFormatByServerString","dateFormat","includeDate","includeTime","localePlaceHolder","getLocale","en_US","containsSeconds","indexOf","format","trim","formatLength","i","c","charAt","concat","day","month_3","month_4","month_2","year_2","year_4","hours","minutes","seconds","ndx","lastIndexOf","substring","exports","_setupDateTimeLocaleInfo","filter","instance","_nullLocalDateString","_nullLocalDate","getLocalizedTextFromKey","then","textBundle","info","anteMeridiem","postMeridiem","locale","id","DATETIME_FORMATS","AMPMS","DAY","dayName_01","dayName_02","dayName_03","dayName_04","dayName_05","dayName_06","dayName_07","MONTH","monthName_01","monthName_02","monthName_03","monthName_04","monthName_05","monthName_06","monthName_07","monthName_08","monthName_09","monthName_10","monthName_11","monthName_12","SHORTDAY","dayNameShort_01","dayNameShort_02","dayNameShort_03","dayNameShort_04","dayNameShort_05","dayNameShort_06","dayNameShort_07","SHORTMONTH","monthNameShort_01","monthNameShort_02","monthNameShort_03","monthNameShort_04","monthNameShort_05","monthNameShort_06","monthNameShort_07","monthNameShort_08","monthNameShort_09","monthNameShort_10","monthNameShort_11","monthNameShort_12","publish","catch","err","error","result","_getDateTime","dateToFormat","dateTime","isString","isNumber","getTime","NULLDATE","_nullGmtDate","offset","getTimezoneOffset","_nullGmtTime","_epochDate","getJQueryDatePickerTextBundle","closeText","prevText","nextText","currentText","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","weekHeader","firstDay","isRTL","yearSuffix","formatDate","isNullDate","dateValue","getDateFilterFormat","toString","formatDateTime","getDateTimeFilterFormat","formatTime","formatTimeLovEntry","getTimeLovEntryFilterFormat","formatSessionDateTime","formattedDate","getSessionDateTimeFormat","isDate","formatSessionDate","getSessionDateFormat","formatSessionTime","getSessionTimeFormat","formatWeekdayMonthAndDayOfMonth","dayOfWeek","month","formatAbbreviatedMonth","dayOfMonth","formatFullDayOfMonth","monthDaySeparator","dayOfWeekSeparator","fullDayOfMonth","formatFullMonth","formatUTC","formatNonStandardDate","getDateFormat","getDateFormatPlaceholder","dateTimeSeparator","getDefaultDate","dateApi","defaultDate","limitDate","isTimeEnabled","isDateEnabled","setHours","setMinutes","setSeconds","minDate","maxDate","jsMinDate","getJSDate","getHours","getMinutes","getSeconds","jsMaxDate","getNullDate","getEnglishDateTimeFormat","getEnglishDateFormat","getEnglishTimeFormat","getEpochDate","getDateFromTimeValue","timeValue","pattern","matches","match","fields","hr","min","sec","toLowerCase","getTimeInMs","hourInMSec","minInMSec","mSec","getTimeInMilliSec","normalizedTime","normalizeTimeString","dateToTest","jsDate","getNormalizedTimeValue","nDate","getTimeFormatPlaceholder","getTimeLovEntries","objectValue","timeList","compare","date1","date2","date1Final","constructor","diff","setTimeIntoDateModel","dateInput","time","setSessionDateTimeFormat","patternDateTime","patternDate","patternTime","init","getCfgCached","subscribe"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/dateTimeService.js"],"sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service provides useful APIs for the date and Time formatting. It allows to se the default date and time format for the session.\n *\n * @module js/dateTimeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport localeSvc from 'js/localeService';\nimport cfgSvc from 'js/configurationService';\nimport AwFilterService from 'js/awFilterService';\nimport { isMatch } from 'date-fns';\nimport logger from 'js/logger';\n\n/**revisitme\n * Hint: config path is mocked one. we need to tune build and alias for config from assets folder\n * so we can use like, import 'config/localeDateTime'\n */\nimport 'config/localeDateTime';\n\n// Beyond angular: for some untility service which is:\n// - heavily used\n// - init function is not rich\n// put them to bootstrap for now for better code design\n\nexport const FLATPICKR_ID = 'div.flatpickr-calendar';\n\n/**\n * Default locale specific date/time values used until login is complete.\n */\nvar _dateTimeLocaleInfo = {\n    is12HrFormat: false,\n    sessionDateTimeFormat: 'd-M-Y HH:mm',\n    sessionDateFormat: 'd-M-Y',\n    sessionTimeFormat: 'HH:mm'\n};\n\n/** Regular expression that matches a number between 0 and 59 */\nvar _regMinSec = /([0-5]?\\d)/;\n\n/**\n * @private\n */\nvar _englishDateTimeFormat = {\n    dateFilterFormat: 'd-M-Y HH:mm',\n    datePickerFormat: 'd-M-Y',\n    datePlaceholder: 'DD-MMM-YYYY',\n    timePlaceholder: 'HH:MM',\n    monthAfterYear: false,\n    dayOfWeekAfterDay: false\n};\n\n/**\n * @private\n */\nvar _englishDateFormat = {\n    dateFilterFormat: 'd-M-Y',\n    datePickerFormat: 'd-M-Y',\n    datePlaceholder: 'DD-MMM-YYYY',\n    timePlaceholder: '',\n    monthAfterYear: false,\n    dayOfWeekAfterDay: false\n};\n\n/**\n * @private\n */\nvar _englishTimeFormat = {\n    dateFilterFormat: 'HH:mm',\n    datePickerFormat: '',\n    datePlaceholder: '',\n    timePlaceholder: 'HH:MM',\n    monthAfterYear: false,\n    dayOfWeekAfterDay: false\n};\n\n/**\n * @private\n */\nvar _i18n_anteMeridiem = 'AM';\n\n/**\n * @private\n */\nvar _i18n_postMeridiem = 'PM';\n\n/**\n * Regular expression value to extract segments of a 12 hour time entry\n *\n * @private\n */\nvar _regPattern12 = null;\n\n/**\n * Regular expression value to extract segments of a 24 hour time entry\n *\n * @private\n */\nvar _regPattern24 = null;\n\n/**\n * @private\n */\nvar _localePlaceholders = {};\n\n/**\n * @private\n */\nvar _datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n\n/**\n * @private\n */\nvar _datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n\n/**\n * TRUE if the i18N requires the month to be shown after the year in the JQuery datePicker.\n *\n * @private\n */\nvar _showMonthAfterYear = _englishDateTimeFormat.showMonthAfterYear;\n\n/**\n * @private\n */\nvar _timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n\n/**\n * List of 24 hour time selections (in current 12/24 hour format).\n *\n * @private\n */\nvar _timeLovEntries = null;\n\n/**\n * @private\n */\nvar _dateFilterFormat = _englishDateFormat.dateFilterFormat;\n\n/**\n * Function to build the list of time values in the drop down list of (aw-property-time-val) UI.\n *\n * @private\n *\n * @returns {LovEntry[]} An array of 'lovEntry' populated with the internal an display values.\n */\nvar _buildTimeLovEntries = function() {\n    var lovEntries = [];\n\n    var _pad = function( number ) {\n        if( number < 10 ) {\n            return '0' + number;\n        }\n        return number;\n    };\n\n    var msHr = 1000 * 60 * 60;\n    var msLimit = msHr * 24;\n    var msInc = 1000 * 60 * 30;\n\n    for( var msTime = 0; msTime < msLimit; msTime += msInc ) {\n        var date = new Date( msTime );\n\n        var utcHours = date.getUTCHours();\n        var utcMinutes = date.getUTCMinutes();\n        var mer;\n        var disp;\n\n        if( _dateTimeLocaleInfo.is12HrFormat ) {\n            if( utcHours < 12 ) {\n                if( utcHours === 0 ) {\n                    utcHours += 12;\n                }\n                mer = _i18n_anteMeridiem;\n            } else {\n                if( utcHours > 12 ) {\n                    utcHours -= 12;\n                }\n                mer = _i18n_postMeridiem;\n            }\n\n            disp = _pad( utcHours ) + ':' + _pad( utcMinutes ) + ' ' + mer;\n        } else {\n            disp = _pad( utcHours ) + ':' + _pad( utcMinutes );\n        }\n\n        var lovEntry = {\n            propInternalValue: msTime,\n            propDisplayValue: disp\n        };\n\n        lovEntries.push( lovEntry );\n    }\n\n    return lovEntries;\n};\n\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 12 hours, optional\n *         minutes, optional seconds and optional meridiem.\n */\nvar _getTimePattern12Hr = function() {\n    if( !_regPattern12 ) {\n        var _regHr12 = /(1[012]|0\\d|\\d)/;\n\n        var _regGap = /\\s*/;\n\n        var _regMeridiem = new RegExp( '(' + _i18n_anteMeridiem + //\n            '|' + _i18n_postMeridiem + '|a|p|am|pm' + ')?' );\n\n        /** hh:mm:ss a */\n        var _reg12HrMnSec = new RegExp( '(^' + _regHr12.source + //\n            ':' + _regMinSec.source + ':' + _regMinSec.source + //\n            _regGap.source + _regMeridiem.source + '$)' );\n\n        /** hh:mm a */\n        var _reg12HrMin = new RegExp( '(^' + _regHr12.source + //\n            ':' + _regMinSec.source + _regGap.source + //\n            _regMeridiem.source + '$)' );\n\n        /** hh a */\n        var _reg12Hr = new RegExp( '(^' + _regHr12.source + //\n            _regGap.source + _regMeridiem.source + '$)' );\n\n        // aggregate of all sub expressions\n        _regPattern12 = new RegExp( _reg12HrMnSec.source + //\n            '|' + _reg12HrMin.source + '|' + _reg12Hr.source );\n    }\n\n    return _regPattern12;\n};\n\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 24 hours, optional minutes\n *         and optional seconds.\n */\nvar _getTimePattern24Hr = function() {\n    if( !_regPattern24 ) {\n        var _regHr24 = /([0-1]?\\d|2[0-3])/;\n\n        /** HH:mm:ss : https://regex101.com/ */\n        var _reg24HrMnSec = new RegExp( '(^' + _regHr24.source + //\n            ':' + _regMinSec.source + ':' + _regMinSec.source + '$)' );\n\n        /** HH:mms */\n        var _reg24HrMin = new RegExp( '(^' + _regHr24.source + //\n            ':' + _regMinSec.source + '$)' );\n\n        /** HH */\n        var _reg24Hr = new RegExp( '(^' + _regHr24.source + '$)' );\n\n        // aggregate of all sub expressions\n        _regPattern24 = new RegExp( _reg24HrMnSec.source + //\n            '|' + _reg24HrMin.source + '|' + _reg24Hr.source );\n    }\n\n    return _regPattern24;\n};\n\n/**\n * Function to validate normalized time\n *\n * @private\n *\n * @param {String} normalizedTimeString - normalized time string\n *\n * @return {Boolean}\n */\nvar isNormalizedTimeValid = function( normalizedTimeString ) {\n    let timeString = normalizedTimeString;\n    if( !timeString.includes( ':' ) || !isMatch( timeString, getTimeFilterFormat() ) ) {\n        return false;\n    }\n    return true;\n};\n\n/**\n * Function to tokenize the time input.\n *\n * @private\n *\n * @param {String} timeString - Time string to tokenize in 'hh:mmm:ss a' format.\n *\n * @return {Number[]} Array of integers representing extracted hours, minutes and seconds.\n */\nvar _tokenizeTime = function( timeString ) {\n    if( !isNormalizedTimeValid( timeString ) ) {\n        return null;\n    }\n\n    var time_AmPm = timeString.split( ' ' );\n\n    var hour_minuteArray = time_AmPm[ 0 ].split( /[:aApP\\s]+/ );\n\n    var hour = 0;\n\n    if( hour_minuteArray.length > 0 ) {\n        hour = parseInt( hour_minuteArray[ 0 ], 10 );\n\n        if( _dateTimeLocaleInfo.is12HrFormat ) {\n            if( time_AmPm[ 1 ] === _i18n_postMeridiem ) {\n                hour += 12;\n\n                if( hour >= 24 ) {\n                    hour = 0;\n                }\n            }\n        }\n\n        if( hour > 23 ) {\n            hour = 23;\n        }\n    }\n\n    var minute = 0;\n\n    if( hour_minuteArray.length > 1 ) {\n        minute = parseInt( hour_minuteArray[ 1 ], 10 );\n\n        if( minute > 59 ) {\n            minute = 59;\n        }\n    }\n\n    var second = 0;\n\n    if( hour_minuteArray.length > 2 ) {\n        second = parseInt( hour_minuteArray[ 2 ], 10 );\n\n        if( isNaN( second ) ) {\n            second = 0;\n        }\n\n        if( second > 59 ) {\n            second = 59;\n        }\n    }\n\n    var splitTimeData = [];\n\n    splitTimeData[ 0 ] = hour;\n    splitTimeData[ 1 ] = minute;\n    splitTimeData[ 2 ] = second;\n\n    return splitTimeData;\n};\n\n/**\n * @param {String} dateFormat - The string from the TextServer used to construct the return date and/or time Format.\n *\n * @param {Boolea} includeDate - TRUE if date should be included in the format\n *\n * @param {Boolean} includeTime - TRUE if time should be included in the format\n *\n * @return {Object} An object with properties:<br>\n *         'dateFilterFormat' set with the converted pattern compatible with AngularJS \"$filter('date')\"\n *         <p>\n *         'datePickerFormat' set with the converted pattern compatible with the 'dateFormat' property (in the\n *         'options' object) and 'formatDate' and 'parseDate' functions of JQueryUI's 'datePicker'.\n *         <p>\n *         'datePlaceholder' set with i18N text to display in an empty date input field.\n *         <p>\n *         'timePlaceholder' set with i18N text to display in an empty time input field.\n *         <p>\n *         'monthAfterYear' set with TRUE if the i18N requires the month to be shown after the year in the JQuery\n *         datePicker.\n */\nvar _getDateFormatByServerString = function( dateFormat, includeDate, includeTime ) { // eslint-disable-line complexity\n    var dateFilterFormat = '';\n    var datePickerFormat = '';\n    var datePlaceholder = '';\n    var timePlaceholder = '';\n\n    var localePlaceHolder = _localePlaceholders[ localeSvc.getLocale() ] || _localePlaceholders.en_US;\n    var monthAfterYear = localePlaceHolder.monthAfterYear;\n\n    _dateTimeLocaleInfo.is12HrFormat = false;\n    if( dateFormat && dateFormat.length > 0 ) {\n        var containsSeconds = dateFormat.indexOf( '%S' ) !== -1;\n\n        var format = dateFormat.trim();\n\n        var formatLength = format.length;\n\n        for( var i = 0; i < formatLength; i++ ) {\n            var c = format.charAt( i );\n\n            switch ( c ) {\n                case '%':\n                    // ignore printf-specific char\n                    break;\n\n                case 'd':\n                    if( includeDate ) {\n                        // d: day of the month(0-31) -> dd: day in month (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'dd' );\n                        datePickerFormat = datePickerFormat.concat( 'd' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.day );\n                    }\n                    break;\n\n                case 'b':\n                    if( includeDate ) {\n                        // b: abbreviated month name -> MMM: month in year (full month name) not supported by Java.\n                        dateFilterFormat = dateFilterFormat.concat( 'MMM' );\n                        datePickerFormat = datePickerFormat.concat( 'M' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.month_3 );\n                    }\n                    break;\n\n                case 'B':\n                    if( includeDate ) {\n                        // B: full month name -> MMMMM: month in year (full month name)\n                        dateFilterFormat = dateFilterFormat.concat( 'MMMM' );\n                        datePickerFormat = datePickerFormat.concat( 'M' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.month_4 );\n                    }\n                    break;\n\n                case 'm':\n                    if( includeDate ) {\n                        // m: month(01-12) -> MM: month in year (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'MM' );\n                        datePickerFormat = datePickerFormat.concat( 'm' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.month_2 );\n                    }\n                    break;\n\n                case 'y':\n                    if( includeDate ) {\n                        // y: year without century(00-99) -> yy: year (two digits).\n                        dateFilterFormat = dateFilterFormat.concat( 'yy' );\n                        datePickerFormat = datePickerFormat.concat( 'y' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.year_2 );\n                    }\n                    break;\n\n                case 'Y':\n                    if( includeDate ) {\n                        // Y: year with century(1970-2069) ->yyyy: year (four digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'yyyy' );\n                        datePickerFormat = datePickerFormat.concat( 'yy' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.year_4 );\n                    }\n                    break;\n\n                case 'H':\n                    if( includeTime ) {\n                        // H: hour(24-hour clock)(00-23) ->HH: hour in day (0~23) (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'HH' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.hours );\n                    }\n                    break;\n\n                case 'I':\n                    if( includeTime ) {\n                        _dateTimeLocaleInfo.is12HrFormat = true;\n\n                        // I: hour(12-hour clock)(01-12) ->hh: hour in am/pm (1~12) (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'hh' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.hours );\n                    }\n                    break;\n\n                case 'M':\n                    if( includeTime ) {\n                        // M: minute(00-59) -> mm: minute in hour (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'mm' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.minutes );\n\n                        /**\n                         * Note: This is a little 'odd' but the placeholder has to have 'seconds' in it even if the\n                         * general display for time does not.\n                         */\n                        if( !containsSeconds ) {\n                            timePlaceholder = timePlaceholder.concat( ':' + localePlaceHolder.seconds );\n                        }\n                    }\n                    break;\n\n                case 'S':\n                    if( includeTime ) {\n                        // S: second(00-59) -> ss: second in minute (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'ss' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.seconds );\n                    }\n                    break;\n\n                default:\n                    // If \":\" exists in the format, assume it must be a separator for time.\n                    if( !includeTime && c === ':' ) {\n                        break;\n                    }\n\n                    // If \"-\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === '-' ) {\n                        break;\n                    }\n\n                    // If \".\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === '.' ) {\n                        break;\n                    }\n\n                    // If \"/\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === '/' ) {\n                        break;\n                    }\n\n                    // If \",\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === ',' ) {\n                        break;\n                    }\n\n                    // If \" \" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === ' ' ) {\n                        break;\n                    }\n\n                    // If \"年\" (year) \"月\" (month) or \"日\" (day) exists in the format, assume it must be a separator for date.\n                    if( !includeDate && ( c === '年' || c === '月' || c === '日' ) ) {\n                        break;\n                    }\n\n                    dateFilterFormat += c;\n\n                    if( c === ':' ) {\n                        timePlaceholder += c;\n                    }\n\n                    if( c === '-' || c === '.' || c === '/' || c === ',' || c === ' ' ) {\n                        datePickerFormat += c;\n                        datePlaceholder += c;\n                    }\n\n                    break;\n            }\n        }\n    } else {\n        if( includeDate ) {\n            if( includeTime ) {\n                dateFilterFormat = _englishDateTimeFormat.dateFilterFormat;\n                datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n                datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n                timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n                monthAfterYear = _englishDateTimeFormat.monthAfterYear;\n            } else {\n                dateFilterFormat = _englishDateFormat.dateFilterFormat;\n                datePickerFormat = _englishDateFormat.datePickerFormat;\n                datePlaceholder = _englishDateFormat.datePlaceholder;\n                timePlaceholder = _englishDateFormat.timePlaceholder;\n                monthAfterYear = _englishDateFormat.monthAfterYear;\n            }\n        } else if( includeTime ) {\n            dateFilterFormat = _englishTimeFormat.dateFilterFormat;\n            datePickerFormat = _englishTimeFormat.datePickerFormat;\n            datePlaceholder = _englishTimeFormat.datePlaceholder;\n            timePlaceholder = _englishTimeFormat.timePlaceholder;\n            monthAfterYear = _englishTimeFormat.monthAfterYear;\n        }\n    }\n\n    /**\n     * Insert AM/PM indicator (if necessary)<BR>\n     * If so: Insert it after either seconds, minutes or hours.\n     */\n    if( _dateTimeLocaleInfo.is12HrFormat && includeTime ) {\n        var ndx = dateFilterFormat.lastIndexOf( 'ss' );\n\n        if( ndx !== -1 ) {\n            dateFilterFormat = dateFilterFormat.substring( 0, ndx + 2 ) + ' a' +\n                dateFilterFormat.substring( ndx + 2 );\n        } else {\n            ndx = dateFilterFormat.lastIndexOf( 'mm' );\n\n            if( ndx !== -1 ) {\n                dateFilterFormat = dateFilterFormat.substring( 0, ndx + 2 ) + ' a' +\n                    dateFilterFormat.substring( ndx + 2 );\n            } else {\n                ndx = dateFilterFormat.lastIndexOf( 'hh' );\n\n                if( ndx !== -1 ) {\n                    dateFilterFormat = dateFilterFormat.substring( 0, ndx + 2 ) + ' a' +\n                        dateFilterFormat.substring( ndx + 2 );\n                }\n            }\n        }\n    }\n\n    return {\n        dateFilterFormat: dateFilterFormat.trim(),\n        datePickerFormat: datePickerFormat.trim(),\n        datePlaceholder: datePlaceholder.trim(),\n        timePlaceholder: timePlaceholder.trim(),\n        monthAfterYear: monthAfterYear\n    };\n};\n\nlet exports;\nvar _setupDateTimeLocaleInfo = function() {\n    let filter = AwFilterService.instance;\n    if( !_nullLocalDateString ) {\n        _nullLocalDateString = filter( 'date' )( _nullLocalDate, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ' );\n    }\n\n    localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages' ).then( textBundle => {\n        if( !textBundle ) {\n            logger.info( 'Unable to load dateTimeServiceMessages textBundle' );\n            return;\n        }\n\n        _i18n_anteMeridiem = textBundle.anteMeridiem;\n        _i18n_postMeridiem = textBundle.postMeridiem;\n        //revisitme: AwLocaleService is not available\n        // let locale = AwLocaleService.instance;\n        let locale;\n        if( locale ) {\n            locale.id = localeSvc.getLocale();\n\n            locale.DATETIME_FORMATS.AMPMS = [ textBundle.anteMeridiem, textBundle.postMeridiem ];\n\n            locale.DATETIME_FORMATS.DAY = [ textBundle.dayName_01, textBundle.dayName_02,\n                textBundle.dayName_03, textBundle.dayName_04, textBundle.dayName_05, textBundle.dayName_06,\n                textBundle.dayName_07\n            ];\n\n            locale.DATETIME_FORMATS.MONTH = [ textBundle.monthName_01, textBundle.monthName_02,\n                textBundle.monthName_03, textBundle.monthName_04, textBundle.monthName_05,\n                textBundle.monthName_06, textBundle.monthName_07, textBundle.monthName_08,\n                textBundle.monthName_09, textBundle.monthName_10, textBundle.monthName_11,\n                textBundle.monthName_12\n            ];\n\n            locale.DATETIME_FORMATS.SHORTDAY = [ textBundle.dayNameShort_01, textBundle.dayNameShort_02,\n                textBundle.dayNameShort_03, textBundle.dayNameShort_04, textBundle.dayNameShort_05,\n                textBundle.dayNameShort_06, textBundle.dayNameShort_07\n            ];\n\n            locale.DATETIME_FORMATS.SHORTMONTH = [ textBundle.monthNameShort_01,\n                textBundle.monthNameShort_02, textBundle.monthNameShort_03, textBundle.monthNameShort_04,\n                textBundle.monthNameShort_05, textBundle.monthNameShort_06, textBundle.monthNameShort_07,\n                textBundle.monthNameShort_08, textBundle.monthNameShort_09, textBundle.monthNameShort_10,\n                textBundle.monthNameShort_11, textBundle.monthNameShort_12\n            ];\n        }\n        eventBus.publish( 'dateTime.changed', _dateTimeLocaleInfo );\n    } ).catch( err => {\n        logger.error( err );\n    } );\n\n    localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.anteMeridiem' ).then( result => {\n        _i18n_anteMeridiem = result;\n        eventBus.publish( 'dateTime.changed', _dateTimeLocaleInfo );\n    } );\n    localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.postMeridiem' ).then( result => {\n        _i18n_postMeridiem = result;\n        eventBus.publish( 'dateTime.changed', _dateTimeLocaleInfo );\n    } );\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {Number} The numeric value corresponding to the time for the given date according to universal time.\n */\nvar _getDateTime = function( dateToFormat ) {\n    var dateTime;\n\n    if( !dateToFormat ) {\n        return dateTime;\n    }\n\n    if( _.isString( dateToFormat ) || _.isNumber( dateToFormat ) ) {\n        dateTime = dateToFormat;\n    } else {\n        dateTime = dateToFormat.getTime();\n    }\n    return dateTime;\n};\n\n/**\n * {String} Null date/time string for 1 Jan, 0001 at midnight GMT.\n * @ignore\n */\nexport let NULLDATE = '0001-01-01T00:00:00+00:00';\n\n/**\n * Definition of 'null' or 'not yet set' date time.\n * <P>\n * Same value as AW's IDateService.getNullLocalDate().\n *\n * @private\n */\nvar _nullGmtDate = new Date( NULLDATE );\n\n/**\n * @private\n */\nvar offset = _nullGmtDate.getTimezoneOffset();\n\n/**\n * @private\n */\nvar _nullGmtTime = _getDateTime( _nullGmtDate );\n\n/**\n * @private\n */\nvar _nullLocalDateString;\n\n/**\n   * @private\n   */\nvar _nullLocalDate = new Date( _nullGmtTime + offset * 60 * 1000 );\n/**\n   */\n/**\n * @private\n */\nvar _epochDate = new Date( 0 );\n\n/**\n * ************************************<BR>\n * ***** Define service API <BR>\n * ************************************<BR>\n */\n\n/**\n * @return {Promise} TODO\n *\n *@ignore\n */\nexport let getJQueryDatePickerTextBundle = async function() {\n    await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.' );\n    return {\n        closeText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.closeText' ),\n        prevText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.prevText' ),\n        nextText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.nextText' ),\n        currentText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.currentText' ),\n        monthNames: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_07' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_08' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_09' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_10' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_11' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_12' )\n        ],\n        monthNamesShort: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_07' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_08' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_09' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_10' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_11' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_12' )\n        ],\n        dayNames: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_07' )\n        ],\n        dayNamesShort: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_07' )\n        ],\n        dayNamesMin: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_07' )\n        ],\n        weekHeader: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.weekHeader' ),\n        dateFormat: _datePickerFormat,\n        firstDay: 1,\n        isRTL: false,\n        showMonthAfterYear: _showMonthAfterYear,\n        yearSuffix: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.yearSuffix' )\n    };\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date of the given Date object formatted according to current user session format.\n */\nexport let formatDate = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getDateFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to current user session\n *          format.\n */\nexport let formatDateTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getDateTimeFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format.\n */\nexport let formatTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getTimeFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format\n *          and meant for display in an lovEntry (i.e. without 'seconds').\n * @ignore\n */\nexport let formatTimeLovEntry = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getTimeLovEntryFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatSessionDateTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var formattedDate = '';\n\n        var dateValue = _getDateTime( dateToFormat );\n\n        if( _.isNumber( dateValue ) || _.isString( dateValue ) ) {\n            formattedDate = filter( 'date' )( dateValue, exports.getSessionDateTimeFormat() );\n        } else if( _.isDate( dateValue ) ) {\n            formattedDate = filter( 'date' )( _getDateTime( dateValue ), exports.getSessionDateTimeFormat() );\n        }\n\n        return formattedDate.toString().trim();\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatSessionDate = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var format = exports.getSessionDateFormat();\n\n        if( format.length > 0 ) {\n            return filter( 'date' )( dateValue, exports.getSessionDateFormat() );\n        }\n\n        return '';\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The time portion of the given Date object formatted according to current user session format.\n */\nexport let formatSessionTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var format = exports.getSessionTimeFormat();\n\n        if( format.length > 0 ) {\n            return filter( 'date' )( dateValue, exports.getSessionTimeFormat() );\n        }\n        return '';\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: Tuesday-Sep 27\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date of the given Date object formatted according to current user session format.\n */\nexport let formatWeekdayMonthAndDayOfMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var dayOfWeek = filter( 'date' )( dateValue, 'EEEE' );\n        var month = exports.formatAbbreviatedMonth( dateValue );\n        var dayOfMonth = exports.formatFullDayOfMonth( dateValue );\n\n        var locale = localeSvc.getLocale();\n        if( _localePlaceholders[ locale ].dayOfWeekAfterDay ) {\n            return month + _localePlaceholders[ locale ].monthDaySeparator + dayOfMonth +\n                _localePlaceholders[ locale ].dayOfWeekSeparator + dayOfWeek;\n        }\n\n        return dayOfWeek + _localePlaceholders[ locale ].dayOfWeekSeparator + month +\n            _localePlaceholders[ locale ].monthDaySeparator + dayOfMonth;\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: 27\n * <P>\n * Note: In some locales (i.e. ja_JP) there are extra symbols added to this number. This function will handle this\n * case.\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatFullDayOfMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var dayOfMonth = filter( 'date' )( dateValue, 'dd' );\n\n        var locale = localeSvc.getLocale();\n        if( _localePlaceholders[ locale ].fullDayOfMonth ) {\n            dayOfMonth += _localePlaceholders[ locale ].day;\n        }\n\n        return dayOfMonth;\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatAbbreviatedMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, 'MMM' );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatFullMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, 'MMMM' );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to UTC format.\n */\nexport let formatUTC = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ' );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @param {String} dateFormat - format. This is a EWI data collection object time stamp format.\n *\n * @returns {String} The date & time of the given Date object formatted according to the input dateFormat.\n */\nexport let formatNonStandardDate = function( dateToFormat, dateFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, dateFormat );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\nexport let getDateFilterFormat = function() {\n    return _dateFilterFormat;\n};\n\n/**\n * Format compatible with the 'dateFormat' property (in the 'options' object) and 'formatDate' and 'parseDate'\n * functions of JQueryUI's 'datePicker'.\n * <P>\n * Examples: <BR>\n * Format 'd-M-yy' would return \"01-Apr-2016\"<BR>\n * Format 'mm.dd.yy' would return \"04.01.2016\"<BR>\n *\n * @return {String} Date entry format for use in JQueryUI's datepicker API.\n */\nexport let getDateFormat = function() {\n    return _datePickerFormat;\n};\n\n/**\n * @return {String} User oriented text used to indicate the required format of the date entry (i.e. \"yy.mm.dd\",\n *         \"day-month-year\", etc.).\n */\nexport let getDateFormatPlaceholder = function() {\n    return _datePlaceholder;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\nexport let getDateTimeFilterFormat = function() {\n    return exports.getDateFilterFormat() + _localePlaceholders[ localeSvc.getLocale() ].dateTimeSeparator +\n        exports.getTimeFilterFormat();\n};\n\n/**\n * @param {DateTimeApi} dateApi - Object containing the current date/time context.\n *\n * @return {Date} Date object set to either 'today' or to 'minDate' or 'maxDate' if 'today' is outside those ranges.\n *         The 'minDate' or 'maxDate' will be chosen based on which of those values 'today' is closer to.\n * @ignore\n */\nexport let getDefaultDate = function( dateApi ) {\n    var defaultDate;\n\n    var limitDate;\n\n    if( dateApi.isTimeEnabled ) {\n        if( dateApi.isDateEnabled ) {\n            /**\n             * Deal with date & time\n             *\n             * @private\n             */\n            defaultDate = new Date();\n\n            defaultDate.setHours( 0 );\n            defaultDate.setMinutes( 0 );\n            defaultDate.setSeconds( 0 );\n\n            if( dateApi.minDate && defaultDate < dateApi.minDate ) {\n                return dateApi.minDate;\n            }\n\n            if( dateApi.maxDate && defaultDate > dateApi.maxDate ) {\n                return dateApi.maxDate;\n            }\n        } else {\n            /**\n             * Deal with time only. Set to 'epoch' and then set hours/mins/secs\n             * @private\n             */\n            defaultDate = new Date( 0 );\n\n            defaultDate.setHours( 0 );\n            defaultDate.setMinutes( 0 );\n            defaultDate.setSeconds( 0 );\n\n            if( dateApi.minDate ) {\n                limitDate = new Date( 0 );\n\n                var jsMinDate = exports.getJSDate( dateApi.minDate );\n\n                limitDate.setHours( jsMinDate.getHours() );\n                limitDate.setMinutes( jsMinDate.getMinutes() );\n                limitDate.setSeconds( jsMinDate.getSeconds() );\n\n                if( defaultDate < limitDate ) {\n                    return limitDate;\n                }\n            }\n\n            if( dateApi.maxDate ) {\n                limitDate = new Date( 0 );\n\n                var jsMaxDate = exports.getJSDate( dateApi.maxDate );\n\n                limitDate.setHours( jsMaxDate.getHours() );\n                limitDate.setMinutes( jsMaxDate.getMinutes() );\n                limitDate.setSeconds( jsMaxDate.getSeconds() );\n\n                if( defaultDate > limitDate ) {\n                    return limitDate;\n                }\n            }\n        }\n    } else {\n        if( dateApi.isDateEnabled ) {\n            /**\n             * Deal with date only. Set to hours/mins/secs to midnight local time.\n             *\n             * @private\n             */\n            defaultDate = new Date();\n\n            defaultDate.setHours( 0 );\n            defaultDate.setMinutes( 0 );\n            defaultDate.setSeconds( 0 );\n\n            if( dateApi.minDate ) {\n                limitDate = exports.getJSDate( dateApi.minDate );\n                limitDate.setHours( 0 );\n                limitDate.setMinutes( 0 );\n                limitDate.setSeconds( 0 );\n\n                if( defaultDate < limitDate ) {\n                    return limitDate;\n                }\n            }\n\n            if( dateApi.maxDate ) {\n                limitDate = exports.getJSDate( dateApi.maxDate );\n                limitDate.setHours( 0 );\n                limitDate.setMinutes( 0 );\n                limitDate.setSeconds( 0 );\n\n                if( defaultDate > limitDate ) {\n                    return limitDate;\n                }\n            }\n        } else {\n            defaultDate = exports.getNullDate();\n        }\n    }\n\n    return defaultDate;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n * @ignore\n */\nexport let getEnglishDateTimeFormat = function() {\n    return _englishDateTimeFormat.dateFilterFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n * @ignore\n */\nexport let getEnglishDateFormat = function() {\n    return _englishDateFormat.dateFilterFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n * @ignore\n */\nexport let getEnglishTimeFormat = function() {\n    return _englishTimeFormat.dateFilterFormat;\n};\n\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'epoch' or '1-Jan-1970 00:00:00\n *         GMT' value.\n * @ignore\n */\nexport let getEpochDate = function() {\n    return _epochDate;\n};\n\n/**\n * @param {Number} timeValue - Milliseconds since unix 'epoch'.\n *\n * @returns {Date} The given string value converted into a time on 'January 1, 0001' (or NULL if the string contains\n *          an invalid time format).\n */\nexport let getDateFromTimeValue = function( timeValue ) {\n    if( !timeValue ) {\n        return exports.getNullDate();\n    }\n\n    var trim = timeValue.trim();\n\n    /**\n     * Remove any trailing ':' before trying to match the pattern\n     */\n    if( trim.length > 0 && trim.charAt( trim.length - 1 ) === ':' ) {\n        trim = trim.substring( 0, trim.length - 1 );\n    }\n\n    var pattern = _dateTimeLocaleInfo.is12HrFormat ? _getTimePattern12Hr() : _getTimePattern24Hr();\n\n    var matches = trim.match( pattern );\n\n    if( matches ) {\n        var fields = {};\n\n        if( _dateTimeLocaleInfo.is12HrFormat ) {\n            if( matches[ 1 ] ) {\n                fields.disp = matches[ 1 ];\n                fields.hr = matches[ 2 ];\n                fields.min = matches[ 3 ];\n                fields.sec = matches[ 4 ];\n                fields.mer = matches[ 5 ];\n            } else if( matches[ 6 ] ) {\n                fields.disp = matches[ 6 ];\n                fields.hr = matches[ 7 ];\n                fields.min = matches[ 8 ];\n                fields.mer = matches[ 9 ];\n                fields.sec = '0';\n            } else if( matches[ 10 ] ) {\n                fields.disp = matches[ 10 ];\n                fields.hr = matches[ 11 ];\n                fields.min = '0';\n                fields.sec = '0';\n                fields.mer = matches[ 12 ];\n            }\n\n            /**\n             * If no meridiem, assume PM\n             */\n            if( !fields.mer ) {\n                fields.mer = _i18n_postMeridiem;\n            }\n\n            fields.mer = fields.mer.toLowerCase();\n\n            if( fields.mer === _i18n_postMeridiem.toLowerCase() || fields.mer === 'p' || fields.mer === 'pm' ) {\n                fields.hr = parseInt( fields.hr, 10 ) + 12;\n\n                if( fields.hr >= 24 ) {\n                    fields.hr = '0';\n                } else {\n                    fields.hr = fields.hr.toString();\n                }\n            }\n        } else {\n            if( matches[ 1 ] ) {\n                fields.disp = matches[ 1 ];\n                fields.hr = matches[ 2 ];\n                fields.min = matches[ 3 ];\n                fields.sec = matches[ 4 ];\n            } else if( matches[ 5 ] ) {\n                fields.disp = matches[ 5 ];\n                fields.hr = matches[ 6 ];\n                fields.min = matches[ 7 ];\n                fields.sec = '0';\n            } else if( matches[ 8 ] ) {\n                fields.disp = matches[ 0 ];\n                fields.hr = matches[ 8 ];\n                fields.min = '0';\n                fields.sec = '0';\n            }\n        }\n\n        if( fields.hr ) {\n            return new Date( '0001', 0, 1, fields.hr, fields.min, fields.sec );\n        }\n    }\n\n    return null;\n};\n\n/**\n * @param {String} timeValue - in HH:MM:SS format\n * @returns coverted time from a HH:MM:SS format to ms\n */\nlet getTimeInMs = function( timeValue ) {\n    if( timeValue === null ) {\n        return null;\n    }\n    let hourInMSec = timeValue[ 0 ] * 60 * 60 * 1000;\n    let minInMSec = timeValue[ 1 ] * 60 * 1000;\n    let mSec = timeValue[ 2 ] * 1000;\n    return hourInMSec + minInMSec + mSec;\n};\n\n/**\n * @param {*} timeValue - 'x' or 'x:y' or 'x:y:z' format\n * @returns coverted time from a string to ms\n */\nexport let getTimeInMilliSec = ( timeValue ) => {\n    if( !_.isString( timeValue ) || timeValue === '' ) {\n        return timeValue;\n    }\n    let normalizedTime = normalizeTimeString( timeValue );\n    return getTimeInMs( _tokenizeTime( normalizedTime ) );\n};\n\n/**\n * Returns a new Date object based on the given Date object or value.\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser. The 'null date' used in AW\n * did not always create a valid Date object.\n *\n * @param {Object} dateToTest - Object that MAY be a JS Date or MAY be the number of milliseconds since 'epoch'.\n *\n * @return {Date} A new JS Date object based on the given object (or 'null' date if no other JS date possible).\n * @ignore\n */\nexport let getJSDate = function( dateToTest ) {\n    /**\n     * D-24274: Date Array LOV fails to clear field<BR>\n     * On Firefox, When the 'dateToTest' has the 'null' date value, the 'new Date()' constructor creates an invalid\n     * Date object. This causes 'NaN' problems later when we try to get a formatted string from this invalid Date.\n     * <P>\n     * We check here for that case and create a date based on the 'null' date time value.\n     */\n    if( exports.isNullDate( dateToTest ) ) {\n        return new Date( _getDateTime( _nullLocalDate ) );\n    }\n\n    var jsDate = null;\n\n    try {\n        jsDate = new Date( dateToTest );\n    } finally {\n        if( !jsDate ) {\n            jsDate = new Date( _getDateTime( _nullLocalDate ) );\n        }\n    }\n\n    return jsDate;\n};\n\n/**\n * @param {String} timeValue - String value to test.\n *\n * @returns {String} The given string value now cleaned of any invalid characters.\n * @ignore\n */\nexport let getNormalizedTimeValue = function( timeValue ) {\n    if( isMatch( timeValue, 'dd-MMM-yyyy HH:mm' ) ) {\n        return '';\n    }\n    var nDate = exports.getDateFromTimeValue( timeValue );\n\n    if( nDate ) {\n        return exports.formatTime( nDate );\n    }\n    return timeValue;\n};\n\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'null' or 'not yet set' value.\n */\nexport let getNullDate = function() {\n    return _nullLocalDate;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\nexport let getSessionDateTimeFormat = function() {\n    return _dateTimeLocaleInfo.sessionDateTimeFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n */\nexport let getSessionDateFormat = function() {\n    return _dateTimeLocaleInfo.sessionDateFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\nexport let getSessionTimeFormat = function() {\n    return _dateTimeLocaleInfo.sessionTimeFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\nexport let getTimeFilterFormat = function() {\n    if( _dateTimeLocaleInfo.is12HrFormat ) {\n        return 'hh:mm:ss a';\n    }\n\n    return 'HH:mm:ss';\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time lovEntry in.\n * @ignore\n */\nexport let getTimeLovEntryFilterFormat = function() {\n    if( _dateTimeLocaleInfo.is12HrFormat ) {\n        return 'hh:mm a';\n    }\n\n    return 'HH:mm';\n};\n\n/**\n * @return {String} User oriented text used to indicate the required format of the time entry (i.e. \"12:00 AM\",\n *         \"Hours:Minutes\", etc.).\n */\nexport let getTimeFormatPlaceholder = function() {\n    var timePlaceholder = _timePlaceholder;\n\n    if( _dateTimeLocaleInfo.is12HrFormat ) {\n        timePlaceholder = timePlaceholder.concat( ' ' + _i18n_anteMeridiem + '/' + _i18n_postMeridiem );\n    }\n\n    return timePlaceholder;\n};\n\n/**\n * @returns {LovEntry[]} current list of time slots.\n * @ignore\n */\nexport let getTimeLovEntries = function() {\n    if( !_timeLovEntries ) {\n        _timeLovEntries = _buildTimeLovEntries();\n    }\n    let objectValue = {};\n    objectValue.timeList = _timeLovEntries;\n    return objectValue;\n};\n\n/**\n * @param {Object} dateToTest - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @return {Boolean} TRUE if the given test object represents the same date/time as the special 'null' or 'not yet\n *         set' value.\n */\nexport let isNullDate = function( dateToTest ) {\n    if( !dateToTest ) {\n        return true;\n    }\n\n    var dateTime;\n\n    if( _.isString( dateToTest ) ) {\n        dateTime = dateToTest;\n        return dateTime === _nullLocalDateString || dateTime === exports.NULLDATE;\n    }\n\n    if( _.isNumber( dateToTest ) ) {\n        dateTime = dateToTest;\n    } else {\n        dateTime = _getDateTime( dateToTest );\n    }\n\n    return dateTime === _getDateTime( _nullLocalDate ) || dateTime === _nullGmtTime;\n};\n\n/**\n * @param {Date} date1 - 1st date to compare.\n *\n * @param {Date} date2 - 2nd date to compare.\n *\n * @return {Number} The value <code>0</code> if the 'date2' is equal to 'date1'; a value less than <code>0</code>\n *         if 'date1' is less than 'date2'; and a value greater than <code>0</code> if 'date1' is greater than\n *         'date2'.\n */\nexport let compare = function( date1, date2 ) {\n    var date1Final = date1;\n\n    // Note: Current dbValue could be a JavaUtil class from GWT\n    if( date1Final && date1Final.constructor !== Date ) {\n        date1Final = new Date( date1 );\n    }\n\n    if( exports.isNullDate( date1Final ) ) {\n        if( date2 && !exports.isNullDate( date2 ) ) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    if( exports.isNullDate( date2 ) ) {\n        return 1;\n    }\n\n    var diff = _getDateTime( date1Final ) - _getDateTime( date2 );\n\n    if( diff === 0 ) {\n        return 0;\n    }\n    if( diff > 0 ) {\n        return 1;\n    }\n    return -1;\n};\n\n/**\n * @param {String} timeString -\n *\n * @return {String} The input string normalized for display.\n */\nexport let normalizeTimeString = function( timeString ) {\n    if( timeString && timeString !== '' ) {\n        return exports.getNormalizedTimeValue( timeString );\n    }\n\n    return '';\n};\n\n/**\n * @param {Date} dateInput - Date Object to modify\n *\n * @param {String} timeString - Time string that has been 'normalized' in 'HH:mm:ss' (24hr) or 'hh:mm:ss a' (12hr)\n *            format.\n *\n * @return {Date} The input Date object modified and set with the given timeString input.\n */\nexport let setTimeIntoDateModel = function( dateInput, timeString ) {\n    if( timeString !== '' && !isMatch( timeString, getTimeFilterFormat() ) ) {\n        return dateInput;\n    }\n    if( timeString && timeString !== '' ) {\n        var time = _tokenizeTime( timeString );\n\n        dateInput.setHours( time[ 0 ] );\n        dateInput.setMinutes( time[ 1 ] );\n        dateInput.setSeconds( time[ 2 ] );\n    } else {\n        dateInput.setHours( 0 );\n        dateInput.setMinutes( 0 );\n        dateInput.setSeconds( 0 );\n    }\n\n    return dateInput;\n};\n\n/**\n * Set the user session specific locale and date/time format.\n *\n * @param {String} pattern - String returned as the \"DefaultDateFormat\" parameter supplied by the server during\n *            login (e.g. \"%d-%b-%Y %H:%M\").\n *            <P>\n *            Note: This pattern is not directly compatible with the {@link DateTimeFormat} class and must be\n *            converted into a compatible string before it is used with that class.\n */\nexport let setSessionDateTimeFormat = function( pattern ) {\n    // Test pattern for simulating a server with a 4-digit year, 2-digit month & 12hr time format and slightly different date pattern\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%Y-%b-%d %I:%M:%S\";\n    //\n    // Test pattern for simulating a server with a 2-digit month & year (in German placement order) and 24hr time format w/o/ seconds\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%d.%m.%y %H:%M\";\n    //\n    // Test pattern for simulating a server with a full month, day & 4-digit year and no time format\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%B %d, %Y\";\n    //\n    // Test pattern for simulating a server with a 2-digit month & year (in English placement order) and 24hr time format w/o/ seconds\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%m-%d-%Y %H:%M\";\n    var patternDateTime = _getDateFormatByServerString( pattern, true, true );\n    var patternDate = _getDateFormatByServerString( pattern, true, false );\n    var patternTime = _getDateFormatByServerString( pattern, false, true );\n\n    _dateTimeLocaleInfo.sessionDateTimeFormat = patternDateTime.dateFilterFormat;\n    _dateTimeLocaleInfo.sessionDateFormat = patternDate.dateFilterFormat;\n    _dateTimeLocaleInfo.sessionTimeFormat = patternTime.dateFilterFormat;\n\n    _dateFilterFormat = patternDate.dateFilterFormat;\n    _datePickerFormat = patternDate.datePickerFormat;\n\n    _datePlaceholder = patternDate.datePlaceholder;\n    _timePlaceholder = patternTime.timePlaceholder;\n\n    _showMonthAfterYear = patternDate.monthAfterYear;\n\n    eventBus.publish( 'dateTime.sessionChanged', _dateTimeLocaleInfo );\n};\n\n/**\n * Initialize the dateTimeService\n */\nexport let init = function() {\n    /**\n     * Set locale and a default format now that the 'localeService' is valid.\n     */\n    _localePlaceholders = cfgSvc.getCfgCached( 'localeDateTime' );\n\n    exports.setSessionDateTimeFormat( '%d-%b-%Y %H:%M' );\n\n    /**\n     * Now that we have the localService, use its current value to init dateTime stuff.\n     */\n    _setupDateTimeLocaleInfo();\n\n    /**\n     * Setup to listen to changes in locale.\n     *\n     * @param {String} locale - String with the updated locale value.\n     */\n    eventBus.subscribe( 'locale.changed', function() {\n        _setupDateTimeLocaleInfo();\n    }, 'dateTimeService' );\n};\n\nexports = {\n    NULLDATE,\n    getTimeInMilliSec,\n    getJQueryDatePickerTextBundle,\n    formatDate,\n    formatDateTime,\n    formatTime,\n    formatTimeLovEntry,\n    formatSessionDateTime,\n    formatSessionDate,\n    formatSessionTime,\n    formatWeekdayMonthAndDayOfMonth,\n    formatFullDayOfMonth,\n    formatAbbreviatedMonth,\n    formatFullMonth,\n    formatUTC,\n    formatNonStandardDate,\n    getDateFilterFormat,\n    getDateFormat,\n    getDateFormatPlaceholder,\n    getDateTimeFilterFormat,\n    getDefaultDate,\n    getEnglishDateTimeFormat,\n    getEnglishDateFormat,\n    getEnglishTimeFormat,\n    getEpochDate,\n    getDateFromTimeValue,\n    getJSDate,\n    getNormalizedTimeValue,\n    getNullDate,\n    getSessionDateTimeFormat,\n    getSessionDateFormat,\n    getSessionTimeFormat,\n    getTimeFilterFormat,\n    getTimeLovEntryFilterFormat,\n    getTimeFormatPlaceholder,\n    getTimeLovEntries,\n    isNullDate,\n    compare,\n    normalizeTimeString,\n    setTimeIntoDateModel,\n    setSessionDateTimeFormat,\n    init\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
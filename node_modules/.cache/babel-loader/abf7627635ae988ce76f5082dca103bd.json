{"ast":null,"code":"/* eslint-disable no-await-in-loop */ // Copyright (c) 2022 Siemens\n/**\n * Defines {@link NgServices.commandHighlightService} which manages highlighting commands.\n *\n * @module js/commandHighlightService\n *\n * @namespace commandHighlightService\n */import configurationService from'js/configurationService';import _ from'lodash';import AwTimeoutService from'js/awTimeoutService';import wcagSvc from'js/wcagService';import htmlUtils from'js/htmlUtils';let exports;const notInFooterButton='not(aw-footer button)';const notInFooterLi='not(aw-footer li)';const retryMaxCount=10;const idleTimeMs=50;/**\n * Delay the execution for a given ms\n *\n * @function delay\n * @param {Number} ms - amount of milliseconds to wait\n * @return {Promise} promise - resolved after x amount of milliseconds\n */const delay=function(ms){return new Promise(resolve=>setTimeout(resolve,ms));};/**\n * Click a command with the given name. Differs from original step def as it will also locate the command within a\n * group if necessary.\n *\n * @function getCommandPlacements\n * @param {String} commandId - ID of the command to check for\n * @param {Object} placementInfo - Object with \"anchors\" and \"groups\" properties\n */export const getCommandPlacements=async function(commandId){const commandsViewModel=await configurationService.getCfg('commandsViewModel');const placements=_.filter(commandsViewModel.commandPlacements,placement=>commandId===placement.id);const placementInfo=placements.reduce((acc,nxt)=>{if(nxt.parentGroupId){acc.groups[nxt.parentGroupId]=true;}else{acc.anchors[nxt.uiAnchor]=true;}return acc;},{anchors:{},groups:{}});placementInfo.anchors=Object.keys(placementInfo.anchors);placementInfo.groups=Object.keys(placementInfo.groups);return placementInfo;};/**\n * Poll the popup until it populates with a given command ID\n *\n * @function getCommandInPopup\n * @param {String} commandId - the ID to search the page for\n * @return {Element} popupCmdElement - command element in the popup\n */export const getCommandInPopup=async function(commandId){let retryCounter=0;let popupCmdElement;let loadingElement;setTimeout(function(){retryCounter=retryMaxCount;// After 10 seconds just quit\n},10000);while(retryCounter<retryMaxCount){loadingElement=htmlUtils.getElementByXpath('//div[contains(@class, \\'aw-popup-command-bar\\')]//div[contains(@class,\\'aw-jswidgets-loading\\')]',document.body);if(!loadingElement){popupCmdElement=htmlUtils.getElementByXpath(\"//li[@command-id='\".concat(commandId,\"']\"),document.body);if(popupCmdElement){return popupCmdElement;}retryCounter++;}await delay(idleTimeMs);}};/**\n * Check if the group command has a given command ID inside it\n *\n * @function checkGroupForElement\n * @param {String} commandId - the ID to search the popup for\n * @param {String} groupCommandLocation - groupCommand element to click\n * @return {Element} commandElement - the command element with ID we were looking for\n */export const checkGroupForElement=async function(commandId,groupCommandLocation){let $timeout=AwTimeoutService.instance;// Slight delay as the overflow loading is not instant\nif(groupCommandLocation){await $timeout(()=>{groupCommandLocation.click();},500,false);const commandElement=await exports.getCommandInPopup(commandId);if(commandElement){return commandElement;}}};/**\n * Clicks an element if it exists\n *\n * @function clickElement\n * @param {String} element - the element to click\n */const clickElement=function(element){if(element){element.click();}};/**\n * Click the commandOverflow and check if the command is in the popup\n *\n * @function clickCommandOverflowAndCheckPopup\n * @param {Element} element - the aw-command element\n * @param {Element} commandOverflow - the command-overflow element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */export const clickCommandOverflowAndCheckPopup=async function(element,commandOverflow,commandId,checkPopupForCmd){let $timeout=AwTimeoutService.instance;await $timeout(()=>{clickElement(commandOverflow);},100,false);if(checkPopupForCmd){const elementInPopup=await getCommandInPopup(commandId);if(elementInPopup){return elementInPopup;}}};/**\n * Click the overflow button ie '...' or 'More' and then get the command ID element in that popup\n *\n * @function clickOverflowAndGetCommand\n * @param {Element} element - the aw-command element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */export const clickOverflowAndGetCommand=async function(element,commandId){let checkPopupForCmd=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;let commandOverflow;let toolbar=element.closest('.aw-toolbar-layout');if(toolbar){let childCommandBars=toolbar.querySelectorAll('.aw-command-bar');for(const commandBar of childCommandBars){const anchor=commandBar.getAttribute('anchor');commandOverflow=htmlUtils.getElementByXpath(\"//div[@anchor='\".concat(anchor,\"']//div[contains(@class, 'aw-commands-moreButton')]//button\"),document.body);if(commandOverflow){return exports.clickCommandOverflowAndCheckPopup(element,commandOverflow,commandId,checkPopupForCmd);}}if(!commandOverflow){//look in toolbar\ncommandOverflow=toolbar.querySelector('.aw-commands-moreButton button');if(commandOverflow){return exports.clickCommandOverflowAndCheckPopup(element,commandOverflow,commandId,checkPopupForCmd);}}}let commandBar=element.closest('.aw-command-bar');if(commandBar){const anchor=commandBar.getAttribute('anchor');commandOverflow=htmlUtils.getElementByXpath(\"//div[@anchor='\".concat(anchor,\"']//div[contains(@class, 'aw-command-overflowIcon')]//button\"),document.body);return exports.clickCommandOverflowAndCheckPopup(element,commandOverflow,commandId,checkPopupForCmd);}};/**\n * Get the correct HTML element for a given command ID\n *\n * @function getCommandElement\n * @param {String} commandId - the ID to search the page for\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} element - the command element\n */export const getCommandElement=async function(commandId,xPath,grpCmdAnchor){let element=htmlUtils.getElementByXpath(xPath,document.body);if(element){const tabIndex=element.getAttribute('tabindex');if(tabIndex&&parseInt(tabIndex)<0){//overflow\nreturn await exports.clickOverflowAndGetCommand(element,commandId);}return element;}const commandPlacements=await exports.getCommandPlacements(commandId);for(const groupId of commandPlacements.groups){let groupCommandLocation=htmlUtils.getElementByXpath(\"//div[@anchor='\".concat(grpCmdAnchor,\"']//button[@command-id='\").concat(groupId,\"']\"),document.body);if(groupCommandLocation){const tabIndex=groupCommandLocation.getAttribute('tabindex');if(tabIndex&&parseInt(tabIndex)<0){// overflow\nlet groupCommandElement=await exports.clickOverflowAndGetCommand(groupCommandLocation,groupId);let commandElement=await exports.checkGroupForElement(commandId,groupCommandElement);if(commandElement){return commandElement;}}let commandElement=await exports.checkGroupForElement(commandId,groupCommandLocation);if(commandElement){return commandElement;}}}};/**\n * Highlight a given command ID in the LHN/PWA/Right wall\n *\n * @function highlightCommand\n * @param {String} commandId - command ID to highlight\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} commandElement - the command element with ID we were looking for\n */export const highlightCommand=async function(commandId,xPath,grpCmdAnchor){let commandElement=await exports.getCommandElement(commandId,xPath,grpCmdAnchor);if(commandElement){wcagSvc.afxFocusElement(commandElement);}return commandElement;};/**\n * Click on a given command ID\n *\n * @function clickOnCommand\n * @param {String} commandId - command ID to click on\n * @param {String} xPath - xPath of the command in the DOM\n * @return {Element} commandElement - the command element with ID we were looking for\n */export const clickOnCommand=async function(commandId,xPath){let commandElement=await exports.getCommandElement(commandId,xPath);if(commandElement){commandElement.click();}};exports={getCommandPlacements,getCommandInPopup,checkGroupForElement,clickCommandOverflowAndCheckPopup,clickOverflowAndGetCommand,getCommandElement,highlightCommand,clickOnCommand};export default exports;","map":null,"metadata":{},"sourceType":"module"}
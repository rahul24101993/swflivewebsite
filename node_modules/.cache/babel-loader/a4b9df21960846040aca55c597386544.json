{"ast":null,"code":"import _ from 'lodash';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport appCtxService from 'js/appCtxService';\nimport AwStateService from 'js/awStateService';\nimport Debug from 'debug';\nimport selectionService from 'js/selection.service';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { getEvaluatedId } from 'js/uwUtilService';\nconst trace = new Debug('selection');\n\nconst updateSearchContext = provider => {\n  // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria\n  // This sort criteria will be shared across all views in a sublocation in a given session.\n  var sortCriteria = appCtxService.getCtx(provider.clientScopeURI + '.sortCriteria');\n\n  if (sortCriteria === undefined || sortCriteria === '') {\n    appCtxService.updatePartialCtx(provider.clientScopeURI + '.sortCriteria', []);\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', []);\n  } else {\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', sortCriteria);\n  }\n\n  appCtxService.updateCtx('search.activeFilterMap', {}); // revisitme- dependency of serch ctx should be removed and replaced by subPanelContext.searchContext\n  // but search is dependent on this, refactor those usages and remove this code\n  // listen to state change\n\n  const onLocationChange = function (changedParams) {\n    if (provider.params) {\n      // Build up filter map and array\n      var searchContext = searchFilterService.buildSearchFilters(provider.context); // Put the searchCriteria property on the state into the params\n\n      if (provider.params.hasOwnProperty('searchCriteria')) {\n        if (!searchContext.criteria) {\n          searchContext.criteria = {};\n        }\n\n        searchContext.criteria.searchString = provider.params.searchCriteria ? provider.params.searchCriteria : '';\n      } // Otherwise just update the context\n\n\n      var contextChanged = !_.isEqual(appCtxService.getCtx('search'), searchContext);\n\n      if (contextChanged) {\n        appCtxService.registerCtx('search', searchContext);\n      }\n    }\n  };\n\n  AwStateService.instance.transitionHooks.onSuccess({}, transition => {\n    onLocationChange(transition.params());\n  });\n  return onLocationChange(AwStateService.instance.params);\n};\n\nexport const initializeDefaultSublocation = provider => {\n  // init breadcrumb\n  let breadcrumbConfig = provider.breadcrumbConfig ? Object.assign({}, provider.breadcrumbConfig) : {};\n\n  if (!breadcrumbConfig.id) {\n    breadcrumbConfig.id = 'wabc';\n  }\n\n  appCtxService.registerCtx('breadCrumbConfig', breadcrumbConfig); // search context logic\n\n  updateSearchContext(provider);\n};\nexport const cleanUp = () => {\n  appCtxService.unRegisterCtx('breadCrumbConfig');\n};\nexport const handleSelectionChange = function (localSelectionData, parentSelectionData) {\n  let selectionQueryParamKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 's_uid';\n\n  if (!_.isEmpty(localSelectionData)) {\n    if (parentSelectionData) {\n      parentSelectionData.update(localSelectionData);\n    } else {\n      selectionService.updateSelection(localSelectionData.selected, localSelectionData.pselected, localSelectionData.relationInfo);\n\n      if (selectionQueryParamKey && AwStateService.instance.params.hasOwnProperty(selectionQueryParamKey)) {\n        var newParams = {};\n\n        if (localSelectionData.selected.length === 1 && localSelectionData.source === 'primary') {\n          newParams[selectionQueryParamKey] = getEvaluatedId(localSelectionData.selected[0]);\n        } else if (localSelectionData.source !== 'secondary') {\n          newParams[selectionQueryParamKey] = null;\n        }\n\n        AwStateService.instance.go('.', newParams);\n      }\n    }\n\n    trace('AwDefaultSublocation selectionData: ', localSelectionData);\n  }\n};\nexport const getContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.selectionData, props.baseSelection, props.sublocationState],\n    compute: () => {\n      let selectionQueryParamKey = props.subPanelContext && props.subPanelContext.selectionQueryParamKey ? props.subPanelContext.selectionQueryParamKey : 's_uid';\n      let pageContext = { ...props.subPanelContext.pageContext,\n        secondaryActiveTabId: props.sublocationState && props.sublocationState.secondaryActiveTabId,\n        sublocationState: props.sublocationState\n      };\n      return {\n        providerForBaseSublocation: { ...props.subPanelContext,\n          selectionQueryParamKey: selectionQueryParamKey\n        },\n        subPanelContextForBaseSublocation: {\n          selectionData: props.selectionData,\n          baseSelection: props.baseSelection,\n          pageContext: pageContext\n        },\n        subPanelContextForAwWorkarea: { ...props.subPanelContext,\n          baseSelection: props.baseSelection,\n          selectionQueryParamKey: selectionQueryParamKey,\n          pageContext: pageContext\n        }\n      };\n    }\n  })];\n};\nexport const getStdContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.provider, props.baseSelection, props.sublocationState],\n    compute: () => {\n      let pageContext = {};\n\n      if (props.subPanelContext && props.subPanelContext.pageContext) {\n        pageContext = { ...props.subPanelContext.pageContext,\n          secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n          sublocationState: props.sublocationState\n        };\n      } else {\n        pageContext = {\n          secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n          sublocationState: props.sublocationState\n        };\n      }\n\n      return { ...props.subPanelContext,\n        ...props.provider,\n        baseSelection: props.baseSelection,\n        pageContext: pageContext\n      };\n    }\n  })];\n};\nexport const updateSelection = function (selectionModel, parentSelectionModel) {\n  let selectionQueryParamKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 's_uid';\n  let originalParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let changeInParams = {};\n  const changedParams = AwStateService.instance.params;\n\n  for (var i in changedParams) {\n    if (changedParams[i] !== originalParams[i]) {\n      changeInParams[i] = changedParams[i];\n    }\n  }\n\n  let activeSelectionModel = parentSelectionModel || selectionModel;\n\n  if (changeInParams.hasOwnProperty(selectionQueryParamKey) && activeSelectionModel.getCurrentSelectedCount() < 2) {\n    const selection = AwStateService.instance.params[selectionQueryParamKey] ? [AwStateService.instance.params[selectionQueryParamKey]] : [];\n    activeSelectionModel.setSelection(selection);\n  }\n\n  return {\n    changedParams: changedParams\n  };\n};","map":{"version":3,"names":["_","searchFilterService","appCtxService","AwStateService","Debug","selectionService","DerivedStateResult","getEvaluatedId","trace","updateSearchContext","provider","sortCriteria","getCtx","clientScopeURI","undefined","updatePartialCtx","updateCtx","onLocationChange","changedParams","params","searchContext","buildSearchFilters","context","hasOwnProperty","criteria","searchString","searchCriteria","contextChanged","isEqual","registerCtx","instance","transitionHooks","onSuccess","transition","initializeDefaultSublocation","breadcrumbConfig","Object","assign","id","cleanUp","unRegisterCtx","handleSelectionChange","localSelectionData","parentSelectionData","selectionQueryParamKey","isEmpty","update","updateSelection","selected","pselected","relationInfo","newParams","length","source","go","getContext","vmDef","props","ctxParameters","additionalParameters","subPanelContext","selectionData","baseSelection","sublocationState","compute","pageContext","secondaryActiveTabId","providerForBaseSublocation","subPanelContextForBaseSublocation","subPanelContextForAwWorkarea","getStdContext","selectionModel","parentSelectionModel","originalParams","changeInParams","i","activeSelectionModel","getCurrentSelectedCount","selection","setSelection"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/awDefaultSublocationService.js"],"sourcesContent":["import _ from 'lodash';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport appCtxService from 'js/appCtxService';\nimport AwStateService from 'js/awStateService';\nimport Debug from 'debug';\nimport selectionService from 'js/selection.service';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { getEvaluatedId } from 'js/uwUtilService';\n\nconst trace = new Debug( 'selection' );\n\nconst updateSearchContext = ( provider ) => {\n    // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria\n    // This sort criteria will be shared across all views in a sublocation in a given session.\n    var sortCriteria = appCtxService.getCtx( provider.clientScopeURI + '.sortCriteria' );\n    if( sortCriteria === undefined || sortCriteria === '' ) {\n        appCtxService.updatePartialCtx( provider.clientScopeURI + '.sortCriteria', [] );\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', [] );\n    } else {\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', sortCriteria );\n    }\n\n    appCtxService.updateCtx( 'search.activeFilterMap', {} );\n    // revisitme- dependency of serch ctx should be removed and replaced by subPanelContext.searchContext\n    // but search is dependent on this, refactor those usages and remove this code\n    // listen to state change\n    const onLocationChange = function( changedParams ) {\n        if( provider.params ) {\n            // Build up filter map and array\n            var searchContext = searchFilterService.buildSearchFilters( provider.context );\n\n            // Put the searchCriteria property on the state into the params\n            if( provider.params.hasOwnProperty( 'searchCriteria' ) ) {\n                if( !searchContext.criteria ) {\n                    searchContext.criteria = {};\n                }\n\n                searchContext.criteria.searchString = provider.params.searchCriteria ? provider.params.searchCriteria :\n                    '';\n            }\n\n            // Otherwise just update the context\n            var contextChanged = !_.isEqual( appCtxService.getCtx( 'search' ), searchContext );\n            if( contextChanged ) {\n                appCtxService.registerCtx( 'search', searchContext );\n            }\n        }\n    };\n\n    AwStateService.instance.transitionHooks.onSuccess( {}, ( transition ) => {\n        onLocationChange( transition.params() );\n    } );\n\n    return onLocationChange( AwStateService.instance.params );\n};\n\nexport const initializeDefaultSublocation = ( provider ) => {\n    // init breadcrumb\n    let breadcrumbConfig = provider.breadcrumbConfig ? Object.assign( {}, provider.breadcrumbConfig ) : {};\n    if( !breadcrumbConfig.id ) {\n        breadcrumbConfig.id = 'wabc';\n    }\n    appCtxService.registerCtx( 'breadCrumbConfig', breadcrumbConfig );\n    // search context logic\n    updateSearchContext( provider );\n};\n\nexport const cleanUp = () => {\n    appCtxService.unRegisterCtx( 'breadCrumbConfig' );\n};\n\nexport const handleSelectionChange = ( localSelectionData, parentSelectionData, selectionQueryParamKey = 's_uid' ) => {\n    if( !_.isEmpty( localSelectionData ) ) {\n        if( parentSelectionData ) {\n            parentSelectionData.update( localSelectionData );\n        } else {\n            selectionService.updateSelection( localSelectionData.selected, localSelectionData.pselected, localSelectionData\n                .relationInfo );\n\n            if( selectionQueryParamKey && AwStateService.instance.params.hasOwnProperty( selectionQueryParamKey ) ) {\n                var newParams = {};\n                if( localSelectionData.selected.length === 1 && localSelectionData.source === 'primary' ) {\n                    newParams[ selectionQueryParamKey ] = getEvaluatedId( localSelectionData.selected[ 0 ] );\n                } else if( localSelectionData.source !== 'secondary' ) {\n                    newParams[ selectionQueryParamKey ] = null;\n                }\n                AwStateService.instance.go( '.', newParams );\n            }\n        }\n        trace( 'AwDefaultSublocation selectionData: ', localSelectionData );\n    }\n};\n\nexport const getContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.selectionData, props.baseSelection, props.sublocationState ],\n        compute: () => {\n            let selectionQueryParamKey = props.subPanelContext && props.subPanelContext.selectionQueryParamKey ? props.subPanelContext.selectionQueryParamKey : 's_uid';\n            let pageContext = {\n                ...props.subPanelContext.pageContext,\n                secondaryActiveTabId: props.sublocationState && props.sublocationState.secondaryActiveTabId,\n                sublocationState: props.sublocationState\n            };\n\n            return {\n                providerForBaseSublocation: {\n                    ...props.subPanelContext,\n                    selectionQueryParamKey: selectionQueryParamKey\n                },\n                subPanelContextForBaseSublocation: {\n                    selectionData: props.selectionData,\n                    baseSelection: props.baseSelection,\n                    pageContext: pageContext\n                },\n                subPanelContextForAwWorkarea: {\n                    ...props.subPanelContext,\n                    baseSelection: props.baseSelection,\n                    selectionQueryParamKey: selectionQueryParamKey,\n                    pageContext: pageContext\n                }\n            };\n        }\n    } ) ];\n};\n\nexport const getStdContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.provider, props.baseSelection, props.sublocationState ],\n        compute: () => {\n            let pageContext = {};\n            if( props.subPanelContext && props.subPanelContext.pageContext ) {\n                pageContext = {\n                    ...props.subPanelContext.pageContext,\n                    secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n                    sublocationState: props.sublocationState\n                };\n            } else {\n                pageContext = {\n                    secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n                    sublocationState: props.sublocationState\n                };\n            }\n            return {\n                ...props.subPanelContext,\n                ...props.provider,\n                baseSelection: props.baseSelection,\n                pageContext: pageContext\n            };\n        }\n    } ) ];\n};\n\nexport const updateSelection = ( selectionModel, parentSelectionModel, selectionQueryParamKey = 's_uid', originalParams = {} ) => {\n    let changeInParams = {};\n    const changedParams = AwStateService.instance.params;\n    for( var i in changedParams ) {\n        if( changedParams[ i ] !== originalParams[ i ] ) {\n            changeInParams[ i ] = changedParams[ i ];\n        }\n    }\n    let activeSelectionModel = parentSelectionModel || selectionModel;\n    if( changeInParams.hasOwnProperty( selectionQueryParamKey ) && activeSelectionModel.getCurrentSelectedCount() < 2 ) {\n        const selection = AwStateService.instance.params[ selectionQueryParamKey ] ? [ AwStateService.instance.params[ selectionQueryParamKey ] ] : [];\n        activeSelectionModel.setSelection( selection );\n    }\n    return {\n        changedParams: changedParams\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
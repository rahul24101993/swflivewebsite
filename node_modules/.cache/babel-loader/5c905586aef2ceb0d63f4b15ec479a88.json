{"ast":null,"code":"//@<COPYRIGHT>@\n//==================================================\n//Copyright 2022.\n//Siemens Product Lifecycle Management Software Inc.\n//All Rights Reserved.\n//==================================================\n//@<COPYRIGHT>@\n\n/*global\n */\n\n/**\n * @module js/searchStateHelperService\n */\nimport appCtxService from 'js/appCtxService';\nexport const getForceChartParameterValue = searchState => {\n  let forceChart = true;\n\n  if (searchState && searchState.selectFirstObjectPreference) {\n    let firstObjectSelectionPref = appCtxService.getCtx('preferences.' + searchState.selectFirstObjectPreference);\n    firstObjectSelectionPref = firstObjectSelectionPref && firstObjectSelectionPref[0] ? firstObjectSelectionPref[0].toLowerCase() : undefined;\n    forceChart = firstObjectSelectionPref !== 'true';\n  }\n\n  return forceChart;\n};\nexport const getAutoUpdateFilteringPreferenceValue = () => {\n  let autoApplyFilters = true;\n  let autoApplyFiltersPreference = appCtxService.getCtx('preferences.AWC_Search_Auto_Update_Filters');\n  autoApplyFiltersPreference = autoApplyFiltersPreference && autoApplyFiltersPreference[0] ? autoApplyFiltersPreference[0].toLowerCase() : undefined;\n  autoApplyFilters = autoApplyFiltersPreference !== 'false';\n  return autoApplyFilters;\n};\nexport const getValueForShowAutoUpdateFilteringOption = () => {\n  let showAutoUpdateFilteringOption = true;\n  let showAutoUpdateFiltersPreferenceValue = appCtxService.getCtx('preferences.AWC_Search_Show_Auto_Update_Filters');\n  showAutoUpdateFiltersPreferenceValue = showAutoUpdateFiltersPreferenceValue && showAutoUpdateFiltersPreferenceValue[0] ? showAutoUpdateFiltersPreferenceValue[0].toLowerCase() : undefined;\n  showAutoUpdateFilteringOption = showAutoUpdateFiltersPreferenceValue !== 'false';\n  return showAutoUpdateFilteringOption;\n};\nexport const constructBaseSearchCriteria = (searchContext, stateParams) => {\n  const preferences = appCtxService.getCtx('preferences');\n  const colorFilteringValue = preferences.AWC_ColorFiltering[0];\n  searchContext.colorToggle = searchContext.showChartColorBars ? colorFilteringValue : 'false';\n  searchContext.forceChart = searchStateHelperService.getForceChartParameterValue(searchContext);\n  searchContext.bulkFiltering = searchContext.bulkFiltering !== false;\n  searchContext.showAutoUpdateFilteringOption = searchStateHelperService.getValueForShowAutoUpdateFilteringOption();\n  searchContext.bulkFilteringPreference = 'AWC_Search_Auto_Update_Filters';\n  searchContext.autoApplyFilters = searchContext.bulkFiltering ? searchStateHelperService.getAutoUpdateFilteringPreferenceValue() : true;\n  searchContext.bulkFiltersApplied = false;\n  const searchPreFilters = appCtxService.getCtx('searchPreFilters');\n  const ownerPreFilters = searchPreFilters ? searchPreFilters.ownPrefilters : undefined;\n  const categoryPreFilters = searchPreFilters ? searchPreFilters.catPrefilters : undefined;\n\n  switch (searchContext.provider) {\n    case 'Awp0FullTextSearchProvider':\n      {\n        searchContext.criteria = searchContext.criteria ? searchContext.criteria : {};\n        searchContext.criteria.limitedFilterCategoriesEnabled = searchContext.criteria && searchContext.criteria.limitedFilterCategoriesEnabled ? searchContext.criteria.limitedFilterCategoriesEnabled : preferences.AWC_Limited_Filter_Categories_Enabled[0];\n        searchContext.criteria.listOfExpandedCategories = '';\n\n        if (categoryPreFilters && categoryPreFilters.selectedCategory && categoryPreFilters.selectedCategory.length > 0 || ownerPreFilters && ownerPreFilters.selectedCategory && ownerPreFilters.selectedCategory.length > 0) {\n          searchContext.criteria.forceThreshold = 'true';\n        } else if (stateParams && stateParams.hasOwnProperty('filter') && stateParams.filter && stateParams.filter.length > 0) {\n          searchContext.criteria.forceThreshold = 'false';\n        }\n\n        if (stateParams && stateParams.hasOwnProperty('savedSearchUid')) {\n          searchContext.criteria.savedSearchUid = stateParams.savedSearchUid;\n        }\n      }\n  }\n\n  return searchContext;\n};\nexport const getCriteriaForNewSearch = (searchState, urlSearchString) => {\n  let criteria = searchState.criteria;\n\n  if (criteria) {\n    criteria.searchString = urlSearchString;\n\n    switch (searchState.provider) {\n      case 'Awp0FullTextSearchProvider':\n        {\n          criteria.forceThreshold = 'true';\n          criteria.listOfExpandedCategories = '';\n        }\n    }\n  }\n\n  return criteria;\n};\nexport const getCriteriaAfterFilterSelection = searchState => {\n  let criteria = searchState.criteria;\n\n  switch (searchState.provider) {\n    case 'Awp0FullTextSearchProvider':\n      {\n        criteria.forceThreshold = 'false';\n\n        if (searchState.additionalSearchString && searchState.additionalSearchString.length > 0) {\n          criteria.searchString = searchState.additionalSearchString;\n        }\n      }\n  }\n\n  return criteria;\n};\nconst searchStateHelperService = {\n  constructBaseSearchCriteria,\n  getForceChartParameterValue,\n  getCriteriaForNewSearch,\n  getCriteriaAfterFilterSelection,\n  getAutoUpdateFilteringPreferenceValue,\n  getValueForShowAutoUpdateFilteringOption\n};\nexport default searchStateHelperService;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/searchStateHelperService.js"],"names":["getForceChartParameterValue","searchState","forceChart","firstObjectSelectionPref","appCtxService","getAutoUpdateFilteringPreferenceValue","autoApplyFilters","autoApplyFiltersPreference","getValueForShowAutoUpdateFilteringOption","showAutoUpdateFilteringOption","showAutoUpdateFiltersPreferenceValue","constructBaseSearchCriteria","preferences","colorFilteringValue","searchContext","searchStateHelperService","searchPreFilters","ownerPreFilters","categoryPreFilters","stateParams","getCriteriaForNewSearch","criteria","getCriteriaAfterFilterSelection"],"mappings":"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","sourcesContent":["//@<COPYRIGHT>@\n//==================================================\n//Copyright 2022.\n//Siemens Product Lifecycle Management Software Inc.\n//All Rights Reserved.\n//==================================================\n//@<COPYRIGHT>@\n\n/*global\n */\n\n/**\n * @module js/searchStateHelperService\n */\nimport appCtxService from 'js/appCtxService';\n\nexport const getForceChartParameterValue = ( searchState ) => {\n    let forceChart = true;\n    if( searchState && searchState.selectFirstObjectPreference ) {\n        let firstObjectSelectionPref = appCtxService.getCtx( 'preferences.' + searchState.selectFirstObjectPreference );\n        firstObjectSelectionPref = firstObjectSelectionPref && firstObjectSelectionPref[ 0 ] ? firstObjectSelectionPref[ 0 ].toLowerCase() : undefined;\n        forceChart = firstObjectSelectionPref !== 'true';\n    }\n    return forceChart;\n};\n\nexport const getAutoUpdateFilteringPreferenceValue = () => {\n    let autoApplyFilters = true;\n    let autoApplyFiltersPreference = appCtxService.getCtx( 'preferences.AWC_Search_Auto_Update_Filters' );\n    autoApplyFiltersPreference = autoApplyFiltersPreference && autoApplyFiltersPreference[ 0 ] ? autoApplyFiltersPreference[ 0 ].toLowerCase() : undefined;\n    autoApplyFilters = autoApplyFiltersPreference !== 'false';\n    return autoApplyFilters;\n};\n\nexport const getValueForShowAutoUpdateFilteringOption = () => {\n    let showAutoUpdateFilteringOption = true;\n    let showAutoUpdateFiltersPreferenceValue = appCtxService.getCtx( 'preferences.AWC_Search_Show_Auto_Update_Filters' );\n    showAutoUpdateFiltersPreferenceValue = showAutoUpdateFiltersPreferenceValue && showAutoUpdateFiltersPreferenceValue[ 0 ] ? showAutoUpdateFiltersPreferenceValue[ 0 ].toLowerCase() : undefined;\n    showAutoUpdateFilteringOption = showAutoUpdateFiltersPreferenceValue !== 'false';\n    return showAutoUpdateFilteringOption;\n};\n\nexport const constructBaseSearchCriteria = ( searchContext, stateParams ) => {\n    const preferences = appCtxService.getCtx( 'preferences' );\n    const colorFilteringValue = preferences.AWC_ColorFiltering[ 0 ];\n    searchContext.colorToggle = searchContext.showChartColorBars ? colorFilteringValue : 'false';\n    searchContext.forceChart = searchStateHelperService.getForceChartParameterValue( searchContext );\n    searchContext.bulkFiltering = searchContext.bulkFiltering !== false;\n    searchContext.showAutoUpdateFilteringOption = searchStateHelperService.getValueForShowAutoUpdateFilteringOption();\n    searchContext.bulkFilteringPreference = 'AWC_Search_Auto_Update_Filters';\n    searchContext.autoApplyFilters = searchContext.bulkFiltering ? searchStateHelperService.getAutoUpdateFilteringPreferenceValue() : true;\n    searchContext.bulkFiltersApplied = false;\n    const searchPreFilters = appCtxService.getCtx( 'searchPreFilters' );\n    const ownerPreFilters = searchPreFilters ? searchPreFilters.ownPrefilters : undefined;\n    const categoryPreFilters = searchPreFilters ? searchPreFilters.catPrefilters : undefined;\n\n    switch ( searchContext.provider ) {\n        case 'Awp0FullTextSearchProvider': {\n            searchContext.criteria = searchContext.criteria ? searchContext.criteria : {};\n            searchContext.criteria.limitedFilterCategoriesEnabled = searchContext.criteria && searchContext.criteria.limitedFilterCategoriesEnabled ?\n                searchContext.criteria.limitedFilterCategoriesEnabled : preferences.AWC_Limited_Filter_Categories_Enabled[ 0 ];\n            searchContext.criteria.listOfExpandedCategories = '';\n            if( categoryPreFilters && categoryPreFilters.selectedCategory && categoryPreFilters.selectedCategory.length > 0\n                || ownerPreFilters && ownerPreFilters.selectedCategory && ownerPreFilters.selectedCategory.length > 0 ) {\n                searchContext.criteria.forceThreshold = 'true';\n            } else if( stateParams && stateParams.hasOwnProperty( 'filter' ) && stateParams.filter && stateParams.filter.length > 0 ) {\n                searchContext.criteria.forceThreshold = 'false';\n            }\n            if( stateParams && stateParams.hasOwnProperty( 'savedSearchUid' ) ) {\n                searchContext.criteria.savedSearchUid = stateParams.savedSearchUid;\n            }\n        }\n    }\n    return searchContext;\n};\n\nexport const getCriteriaForNewSearch = ( searchState, urlSearchString ) => {\n    let criteria = searchState.criteria;\n    if( criteria ) {\n        criteria.searchString = urlSearchString;\n        switch ( searchState.provider ) {\n            case 'Awp0FullTextSearchProvider': {\n                criteria.forceThreshold = 'true';\n                criteria.listOfExpandedCategories = '';\n            }\n        }\n    }\n    return criteria;\n};\n\nexport const getCriteriaAfterFilterSelection = ( searchState ) => {\n    let criteria = searchState.criteria;\n    switch ( searchState.provider ) {\n        case 'Awp0FullTextSearchProvider': {\n            criteria.forceThreshold = 'false';\n            if( searchState.additionalSearchString && searchState.additionalSearchString.length > 0 ) {\n                criteria.searchString = searchState.additionalSearchString;\n            }\n        }\n    }\n    return criteria;\n};\n\nconst searchStateHelperService = {\n    constructBaseSearchCriteria,\n    getForceChartParameterValue,\n    getCriteriaForNewSearch,\n    getCriteriaAfterFilterSelection,\n    getAutoUpdateFilteringPreferenceValue,\n    getValueForShowAutoUpdateFilteringOption\n};\n\nexport default searchStateHelperService;\n"]},"metadata":{},"sourceType":"module"}
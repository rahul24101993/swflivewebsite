{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Utility to traverse DOM Element in PL Table\n *\n * @module js/splmTableTraversal\n */\nimport Const from 'js/splmTableConstants';\nimport util from 'js/splmTableUtils';\n/**\n * Instances of this class represent a traverse utilty in table\n *\n * @class SPLMTableTraversal\n * @param {DOMElement} tableElement - HTML DOM Element for table\n * @param {Number} pinColumnCount - The number of pin column count\n */\n\nvar SPLMTableTraversal = function (tableElement) {\n  var _table = tableElement;\n  var _elem = _table;\n  var self = this; // Helper traverse method\n\n  self.getWidth = function () {\n    return util.numericProperty(_elem.style.width) || util.numericProperty(_elem.style.minWidth) || 0;\n  };\n\n  self.getElement = function () {\n    return _elem;\n  };\n\n  self.toHeader = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_ROW)[0];\n    return this;\n  };\n\n  self.toCanvas = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_CANVAS)[0];\n    return this;\n  };\n\n  self.toContentRow = function (rowIdx) {\n    _elem = self.getContentRowElements()[rowIdx];\n    return this;\n  };\n\n  self.getContentRowElements = function () {\n    return _elem.getElementsByClassName(Const.CLASS_ROW);\n  };\n\n  self.getHeaderCellElements = function () {\n    return _elem.getElementsByClassName(Const.CLASS_HEADER_CELL);\n  };\n\n  self.getContentCellElements = function () {\n    return _elem.getElementsByClassName(Const.CLASS_CELL);\n  };\n\n  self.toHeaderCell = function (columnIdx) {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_CELL)[columnIdx];\n    return this;\n  };\n\n  self.toHeaderCellContent = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_CELL_CONTENT)[0];\n    return this;\n  };\n\n  self.toMenuItem = function (itemIdx) {\n    _elem = _elem.getElementsByClassName(Const.CLASS_AW_CELL_LIST_ITEM)[itemIdx];\n    return this;\n  };\n\n  self.getMenuItemElements = function () {\n    return _elem.getElementsByClassName(Const.CLASS_AW_CELL_LIST_ITEM);\n  };\n\n  self.toContentCell = function (columnIdx) {\n    var cells = _elem.getElementsByClassName(Const.CLASS_CELL);\n\n    for (var i = 0; i < cells.length; i++) {\n      if (cells[i].columnDef.index === columnIdx) {\n        _elem = cells[i];\n        return this;\n      }\n    }\n\n    _elem = null;\n    return this;\n  };\n\n  self.getAwIconElement = function () {\n    return _elem.getElementsByTagName(Const.ELEMENT_AW_ICON)[0];\n  };\n\n  self.getTreeNodeToggleCommandElement = function () {\n    return _elem.getElementsByClassName(Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD)[0];\n  };\n\n  self.getTreeCommandCellElement = function (rowElement) {\n    return rowElement.getElementsByClassName(Const.CLASS_AW_TREE_COMMAND_CELL)[0];\n  };\n\n  self.toSortIndicator = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_CELL_SORT_ICON)[0];\n    return this;\n  };\n\n  self.toColumnSplitter = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_CELL_SPLITTER)[0];\n    return this;\n  };\n\n  self.toStringEditBox = function () {\n    _elem = _elem.getElementsByTagName(Const.ELEMENT_STRING_EDIT_BOX)[0];\n    return this;\n  };\n\n  self.toScrollContents = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_SCROLL_CONTENTS)[0];\n    return this;\n  };\n\n  self.toHeaderRow = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_ROW)[0];\n    return this;\n  };\n\n  self.toSortIcon = function () {\n    _elem = _elem.getElementsByClassName(Const.CLASS_HEADER_CELL_SORT_ICON)[0];\n    return this;\n  };\n\n  self.getCellCommandButtonElements = function () {\n    var cmdBarElem = _elem.getElementsByClassName(Const.CLASS_CELL_COMMAND_BAR)[0];\n\n    return cmdBarElem.getElementsByTagName('button');\n  }; // Root traverse method\n\n\n  self.queryPinContainerFromTable = function () {\n    _elem = _table.getElementsByClassName(Const.CLASS_PIN_CONTAINER)[0];\n    return this;\n  };\n\n  self.queryScrollContainerFromTable = function () {\n    _elem = _table.getElementsByClassName(Const.CLASS_SCROLL_CONTAINER)[0];\n    return this;\n  };\n\n  self.queryPinContentFromTable = function () {\n    return self.queryPinContainerFromTable().toScrollContents();\n  };\n\n  self.queryScrollContentFromTable = function () {\n    return self.queryScrollContainerFromTable().toScrollContents();\n  };\n\n  self.queryHeaderCellContentFromTable = function (columnIdx) {\n    return self.queryHeaderCellFromTable(columnIdx).toHeaderCellContent();\n  };\n\n  self.queryHeaderCellFromTable = function (columnIdx) {\n    var pinColumnCount = util.getTableController(_table).getPinColumnCount();\n\n    if (columnIdx < pinColumnCount) {\n      return self.queryPinContainerFromTable().toHeader().toHeaderCell(columnIdx);\n    }\n\n    return self.queryScrollContainerFromTable().toHeader().toHeaderCell(columnIdx - pinColumnCount);\n  };\n\n  self.queryFirstRowCellFromTable = function (columnIdx) {\n    var firstRowIdx = 0;\n    return self.queryContentCellFromTable(firstRowIdx, columnIdx);\n  };\n\n  self.queryRowColumnCellElementsFromTable = function (columnIdx) {\n    var idx = 0;\n    var rowElems = null;\n    var res = [];\n    var pinColumnCount = util.getTableController(_table).getPinColumnCount();\n\n    if (columnIdx < pinColumnCount) {\n      idx = columnIdx;\n      rowElems = self.getPinContentRowElementsFromTable();\n    } else {\n      idx = columnIdx - pinColumnCount;\n      rowElems = self.getScrollContentRowElementsFromTable();\n    }\n\n    for (var i = 0; i < rowElems.length; i++) {\n      res.push(rowElems[i].getElementsByClassName(Const.CLASS_CELL)[idx]);\n    }\n\n    return res;\n  };\n\n  self.queryAllRowCellElementsFromTable = function () {\n    var rowElements = [];\n    var pinnedElements = self.getPinContentRowElementsFromTable();\n\n    for (var i = 0; i < pinnedElements.length; i++) {\n      rowElements.push(pinnedElements[i]);\n    }\n\n    var scrollContentElements = self.getScrollContentRowElementsFromTable();\n\n    for (var j = 0; j < scrollContentElements.length; j++) {\n      rowElements.push(scrollContentElements[j]);\n    }\n\n    return rowElements;\n  };\n\n  self.queryContentCellFromTable = function (rowIdx, columnIdx) {\n    var pinColumnCount = util.getTableController(_table).getPinColumnCount();\n\n    if (columnIdx < pinColumnCount) {\n      return self.queryPinContainerFromTable().toContentRow(rowIdx).toContentCell(columnIdx);\n    }\n\n    return self.queryScrollContainerFromTable().toContentRow(rowIdx).toContentCell(columnIdx);\n  };\n\n  self.queryTableMenu = function (id) {\n    _elem = document.getElementById(id + '_menu');\n    return this;\n  };\n\n  self.queryResizeGripFromTable = function () {\n    _elem = _table.getElementsByClassName(Const.CLASS_COLUMN_RESIZE_GRIP)[0];\n    return this;\n  };\n\n  self.queryContextMenuFromTable = function () {\n    _elem = document.getElementsByClassName(Const.CLASS_AW_POPUP)[0];\n    return this;\n  };\n\n  self.getContentCellElementsFromTable = function () {\n    _elem = _table;\n    return self.getContentCellElements();\n  }; // Get element method\n\n\n  self.getRootElement = function (className) {\n    if (!className) {\n      className = Const.CLASS_AW_ROOT_ELEMENT;\n    }\n\n    var rootElem = document.getElementsByClassName(className)[0];\n\n    if (!rootElem) {\n      rootElem = document;\n    }\n\n    return rootElem;\n  };\n\n  self.getHeaderCellElementsFromTable = function () {\n    return _table.getElementsByClassName(Const.CLASS_HEADER_CELL) || [];\n  };\n\n  self.getHeaderRowWidthFromTable = function () {\n    return self.queryPinContainerFromTable().toHeader().getWidth() + self.queryScrollContainerFromTable().toHeader().getWidth();\n  };\n\n  self.getContentRowWidthFromTable = function () {\n    return self.queryPinContainerFromTable().toContentRow(0).getWidth() + self.queryScrollContainerFromTable().toContentRow(0).getWidth();\n  };\n\n  self.getScrollCanvasElementFromTable = function () {\n    return self.queryScrollContainerFromTable().toCanvas().getElement();\n  };\n\n  self.getPinCanvasElementFromTable = function () {\n    return self.queryPinContainerFromTable().toCanvas().getElement();\n  };\n\n  self.getPropertyValueLinkElement = function (index, cell) {\n    index = index || 0;\n    var elem1 = cell || _elem;\n    return elem1.getElementsByClassName(Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS)[index];\n  };\n\n  self.getCellTextElementFromTableCell = function (cellElement, index) {\n    index = index || 0;\n    var elem = cellElement || _elem;\n    return elem.getElementsByClassName(Const.CLASS_WIDGET_TABLE_CELL_TEXT)[index];\n  };\n\n  self.getTableContainerElementFromTable = function () {\n    return _table.getElementsByClassName(Const.CLASS_TABLE_CONTAINER)[0];\n  };\n\n  self.getPinContainerElementFromTable = function () {\n    return self.queryPinContainerFromTable().getElement();\n  };\n\n  self.getScrollContainerElementFromTable = function () {\n    return self.queryScrollContainerFromTable().getElement();\n  };\n\n  self.getPinContentElementFromTable = function () {\n    return self.queryPinContentFromTable().getElement();\n  };\n\n  self.getScrollContentElementFromTable = function () {\n    return self.queryScrollContentFromTable().getElement();\n  };\n\n  self.getPinContentRowElementsFromTable = function () {\n    return self.queryPinContentFromTable().getContentRowElements();\n  };\n\n  self.getScrollContentRowElementsFromTable = function () {\n    return self.queryScrollContentFromTable().getContentRowElements();\n  };\n\n  self.getPinHeaderElementFromTable = function () {\n    return self.queryPinContainerFromTable().toHeaderRow().getElement();\n  };\n\n  self.getScrollHeaderElementFromTable = function () {\n    return self.queryScrollContainerFromTable().toHeaderRow().getElement();\n  };\n\n  self.getPinContentRowElementFromTable = function (rowIdx) {\n    return self.getPinContentRowElementsFromTable()[rowIdx];\n  };\n\n  self.getScrollContentRowElementFromTable = function (rowIdx) {\n    return self.getScrollContentRowElementsFromTable()[rowIdx];\n  };\n\n  self.getContentCellFromTable = function (rowIdx, colIdx) {\n    return self.queryContentCellFromTable(rowIdx, colIdx).getElement();\n  };\n\n  self.getHeaderCellElementFromTable = function (colIdx) {\n    return self.queryHeaderCellContentFromTable(colIdx).getElement();\n  };\n\n  self.getHeaderCellSortIconElementFromTable = function (colIdx) {\n    return self.queryHeaderCellContentFromTable(colIdx).toSortIcon().getElement();\n  };\n\n  return self;\n}; // NOTE: Not all sub-modules needs this way to register itself to _t, the rule is:\n// If the sub-module is used heavily by DomCtrl and outer function - us this approach\n// If the sub-module is only used by outter function - register it in splmTableNative\n//_t.Trv = SPLMTableTraversal;\n\n\n_c2 = SPLMTableTraversal;\n_c = SPLMTableTraversal;\nexport default SPLMTableTraversal;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMTableTraversal\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMTableTraversal\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableTraversal.js"],"names":["SPLMTableTraversal","_table","_elem","self","util","Const","cells","i","rowElement","cmdBarElem","pinColumnCount","columnIdx","firstRowIdx","idx","rowElems","res","rowElements","pinnedElements","scrollContentElements","j","document","id","className","rootElem","index","elem1","cell","elem","cellElement"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Utility to traverse DOM Element in PL Table\n *\n * @module js/splmTableTraversal\n */\n\nimport Const from 'js/splmTableConstants';\nimport util from 'js/splmTableUtils';\n\n/**\n * Instances of this class represent a traverse utilty in table\n *\n * @class SPLMTableTraversal\n * @param {DOMElement} tableElement - HTML DOM Element for table\n * @param {Number} pinColumnCount - The number of pin column count\n */\nvar SPLMTableTraversal = function( tableElement ) {\n    var _table = tableElement;\n\n    var _elem = _table;\n    var self = this;\n\n    // Helper traverse method\n    self.getWidth = function() {\n        return util.numericProperty( _elem.style.width ) || util.numericProperty( _elem.style.minWidth ) || 0;\n    };\n\n    self.getElement = function() {\n        return _elem;\n    };\n\n    self.toHeader = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_ROW )[ 0 ];\n        return this;\n    };\n\n    self.toCanvas = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_CANVAS )[ 0 ];\n        return this;\n    };\n\n    self.toContentRow = function( rowIdx ) {\n        _elem = self.getContentRowElements()[ rowIdx ];\n        return this;\n    };\n\n    self.getContentRowElements = function() {\n        return _elem.getElementsByClassName( Const.CLASS_ROW );\n    };\n\n    self.getHeaderCellElements = function() {\n        return _elem.getElementsByClassName( Const.CLASS_HEADER_CELL );\n    };\n\n    self.getContentCellElements = function() {\n        return _elem.getElementsByClassName( Const.CLASS_CELL );\n    };\n\n    self.toHeaderCell = function( columnIdx ) {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_CELL )[ columnIdx ];\n        return this;\n    };\n\n    self.toHeaderCellContent = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_CELL_CONTENT )[ 0 ];\n        return this;\n    };\n\n    self.toMenuItem = function( itemIdx ) {\n        _elem = _elem.getElementsByClassName( Const.CLASS_AW_CELL_LIST_ITEM )[ itemIdx ];\n        return this;\n    };\n\n    self.getMenuItemElements = function() {\n        return _elem.getElementsByClassName( Const.CLASS_AW_CELL_LIST_ITEM );\n    };\n\n    self.toContentCell = function( columnIdx ) {\n        var cells = _elem.getElementsByClassName( Const.CLASS_CELL );\n        for( var i = 0; i < cells.length; i++ ) {\n            if( cells[ i ].columnDef.index === columnIdx ) {\n                _elem = cells[ i ];\n                return this;\n            }\n        }\n        _elem = null;\n        return this;\n    };\n\n    self.getAwIconElement = function() {\n        return _elem.getElementsByTagName( Const.ELEMENT_AW_ICON )[ 0 ];\n    };\n\n    self.getTreeNodeToggleCommandElement = function() {\n        return _elem.getElementsByClassName( Const.CLASS_WIDGET_TREE_NODE_TOGGLE_CMD )[ 0 ];\n    };\n\n    self.getTreeCommandCellElement = function( rowElement ) {\n        return rowElement.getElementsByClassName( Const.CLASS_AW_TREE_COMMAND_CELL )[ 0 ];\n    };\n\n    self.toSortIndicator = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_CELL_SORT_ICON )[ 0 ];\n        return this;\n    };\n\n    self.toColumnSplitter = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_CELL_SPLITTER )[ 0 ];\n        return this;\n    };\n\n    self.toStringEditBox = function() {\n        _elem = _elem.getElementsByTagName( Const.ELEMENT_STRING_EDIT_BOX )[ 0 ];\n        return this;\n    };\n\n    self.toScrollContents = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_SCROLL_CONTENTS )[ 0 ];\n        return this;\n    };\n\n    self.toHeaderRow = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_ROW )[ 0 ];\n        return this;\n    };\n\n    self.toSortIcon = function() {\n        _elem = _elem.getElementsByClassName( Const.CLASS_HEADER_CELL_SORT_ICON )[ 0 ];\n        return this;\n    };\n\n    self.getCellCommandButtonElements = function() {\n        var cmdBarElem = _elem.getElementsByClassName( Const.CLASS_CELL_COMMAND_BAR )[ 0 ];\n        return cmdBarElem.getElementsByTagName( 'button' );\n    };\n\n    // Root traverse method\n    self.queryPinContainerFromTable = function() {\n        _elem = _table.getElementsByClassName( Const.CLASS_PIN_CONTAINER )[ 0 ];\n        return this;\n    };\n\n    self.queryScrollContainerFromTable = function() {\n        _elem = _table.getElementsByClassName( Const.CLASS_SCROLL_CONTAINER )[ 0 ];\n        return this;\n    };\n\n    self.queryPinContentFromTable = function() {\n        return self.queryPinContainerFromTable().toScrollContents();\n    };\n\n    self.queryScrollContentFromTable = function() {\n        return self.queryScrollContainerFromTable().toScrollContents();\n    };\n\n    self.queryHeaderCellContentFromTable = function( columnIdx ) {\n        return self.queryHeaderCellFromTable( columnIdx ).toHeaderCellContent();\n    };\n\n    self.queryHeaderCellFromTable = function( columnIdx ) {\n        var pinColumnCount = util.getTableController( _table ).getPinColumnCount();\n        if( columnIdx < pinColumnCount ) {\n            return self.queryPinContainerFromTable().toHeader().toHeaderCell( columnIdx );\n        }\n        return self.queryScrollContainerFromTable().toHeader().toHeaderCell( columnIdx - pinColumnCount );\n    };\n\n    self.queryFirstRowCellFromTable = function( columnIdx ) {\n        var firstRowIdx = 0;\n        return self.queryContentCellFromTable( firstRowIdx, columnIdx );\n    };\n\n    self.queryRowColumnCellElementsFromTable = function( columnIdx ) {\n        var idx = 0;\n        var rowElems = null;\n        var res = [];\n        var pinColumnCount = util.getTableController( _table ).getPinColumnCount();\n        if( columnIdx < pinColumnCount ) {\n            idx = columnIdx;\n            rowElems = self.getPinContentRowElementsFromTable();\n        } else {\n            idx = columnIdx - pinColumnCount;\n            rowElems = self.getScrollContentRowElementsFromTable();\n        }\n\n        for( var i = 0; i < rowElems.length; i++ ) {\n            res.push( rowElems[ i ].getElementsByClassName( Const.CLASS_CELL )[ idx ] );\n        }\n\n        return res;\n    };\n\n    self.queryAllRowCellElementsFromTable = function() {\n        var rowElements = [];\n        var pinnedElements = self.getPinContentRowElementsFromTable();\n        for( var i = 0; i < pinnedElements.length; i++ ) {\n            rowElements.push( pinnedElements[ i ] );\n        }\n        var scrollContentElements = self.getScrollContentRowElementsFromTable();\n        for( var j = 0; j < scrollContentElements.length; j++ ) {\n            rowElements.push( scrollContentElements[ j ] );\n        }\n        return rowElements;\n    };\n\n    self.queryContentCellFromTable = function( rowIdx, columnIdx ) {\n        var pinColumnCount = util.getTableController( _table ).getPinColumnCount();\n        if( columnIdx < pinColumnCount ) {\n            return self.queryPinContainerFromTable().toContentRow( rowIdx ).toContentCell( columnIdx );\n        }\n        return self.queryScrollContainerFromTable().toContentRow( rowIdx ).toContentCell( columnIdx );\n    };\n\n    self.queryTableMenu = function( id ) {\n        _elem = document.getElementById( id + '_menu' );\n        return this;\n    };\n\n    self.queryResizeGripFromTable = function() {\n        _elem = _table.getElementsByClassName( Const.CLASS_COLUMN_RESIZE_GRIP )[ 0 ];\n        return this;\n    };\n\n    self.queryContextMenuFromTable = function() {\n        _elem = document.getElementsByClassName( Const.CLASS_AW_POPUP )[ 0 ];\n        return this;\n    };\n\n    self.getContentCellElementsFromTable = function() {\n        _elem = _table;\n        return self.getContentCellElements();\n    };\n\n    // Get element method\n    self.getRootElement = function( className ) {\n        if( !className ) {\n            className = Const.CLASS_AW_ROOT_ELEMENT;\n        }\n\n        var rootElem = document.getElementsByClassName( className )[ 0 ];\n        if( !rootElem ) {\n            rootElem = document;\n        }\n        return rootElem;\n    };\n\n    self.getHeaderCellElementsFromTable = function() {\n        return _table.getElementsByClassName( Const.CLASS_HEADER_CELL ) || [];\n    };\n\n    self.getHeaderRowWidthFromTable = function() {\n        return self.queryPinContainerFromTable().toHeader().getWidth() + self.queryScrollContainerFromTable().toHeader().getWidth();\n    };\n\n    self.getContentRowWidthFromTable = function() {\n        return self.queryPinContainerFromTable().toContentRow( 0 ).getWidth() + self.queryScrollContainerFromTable().toContentRow( 0 ).getWidth();\n    };\n\n    self.getScrollCanvasElementFromTable = function() {\n        return self.queryScrollContainerFromTable().toCanvas().getElement();\n    };\n\n    self.getPinCanvasElementFromTable = function() {\n        return self.queryPinContainerFromTable().toCanvas().getElement();\n    };\n\n    self.getPropertyValueLinkElement = function( index, cell ) {\n        index = index || 0;\n        var elem1 = cell || _elem;\n        return elem1.getElementsByClassName( Const.CLASS_WIDGET_TABLE_PROPERTY_VALUE_LINKS )[ index ];\n    };\n\n    self.getCellTextElementFromTableCell = function( cellElement, index ) {\n        index = index || 0;\n        var elem = cellElement || _elem;\n        return elem.getElementsByClassName( Const.CLASS_WIDGET_TABLE_CELL_TEXT )[ index ];\n    };\n\n    self.getTableContainerElementFromTable = function() {\n        return _table.getElementsByClassName( Const.CLASS_TABLE_CONTAINER )[ 0 ];\n    };\n\n    self.getPinContainerElementFromTable = function() {\n        return self.queryPinContainerFromTable().getElement();\n    };\n\n    self.getScrollContainerElementFromTable = function() {\n        return self.queryScrollContainerFromTable().getElement();\n    };\n\n    self.getPinContentElementFromTable = function() {\n        return self.queryPinContentFromTable().getElement();\n    };\n\n    self.getScrollContentElementFromTable = function() {\n        return self.queryScrollContentFromTable().getElement();\n    };\n\n    self.getPinContentRowElementsFromTable = function() {\n        return self.queryPinContentFromTable().getContentRowElements();\n    };\n\n    self.getScrollContentRowElementsFromTable = function() {\n        return self.queryScrollContentFromTable().getContentRowElements();\n    };\n\n    self.getPinHeaderElementFromTable = function() {\n        return self.queryPinContainerFromTable().toHeaderRow().getElement();\n    };\n\n    self.getScrollHeaderElementFromTable = function() {\n        return self.queryScrollContainerFromTable().toHeaderRow().getElement();\n    };\n\n    self.getPinContentRowElementFromTable = function( rowIdx ) {\n        return self.getPinContentRowElementsFromTable()[ rowIdx ];\n    };\n\n    self.getScrollContentRowElementFromTable = function( rowIdx ) {\n        return self.getScrollContentRowElementsFromTable()[ rowIdx ];\n    };\n\n    self.getContentCellFromTable = function( rowIdx, colIdx ) {\n        return self.queryContentCellFromTable( rowIdx, colIdx ).getElement();\n    };\n\n    self.getHeaderCellElementFromTable = function( colIdx ) {\n        return self.queryHeaderCellContentFromTable( colIdx ).getElement();\n    };\n\n    self.getHeaderCellSortIconElementFromTable = function( colIdx ) {\n        return self.queryHeaderCellContentFromTable( colIdx ).toSortIcon().getElement();\n    };\n\n    return self;\n};\n\n// NOTE: Not all sub-modules needs this way to register itself to _t, the rule is:\n// If the sub-module is used heavily by DomCtrl and outer function - us this approach\n// If the sub-module is only used by outter function - register it in splmTableNative\n//_t.Trv = SPLMTableTraversal;\nexport default SPLMTableTraversal;\n"]},"metadata":{},"sourceType":"module"}
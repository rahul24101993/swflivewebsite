{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwSidenavHelperService\n */\nimport $ from 'jquery';\nimport appCtx from 'js/appCtxService';\nimport localStorage from 'js/localStorage';\nimport commandHandlerSvc from 'js/commandHandlerService';\nimport browserUtils from 'js/browserUtils';\nimport AwPromiseService from 'js/awPromiseService';\nlet exports = {};\nvar localStorageTopicId = 'wysiwygChannel'; // Scope being used by the \"background\" command for the current panel\n\nvar commandScope = {};\nvar command = {}; //Register activeToolsAndInfoCommand and activeNavigationCommand for backward compatibility\n//to support existing consumers in AW\n// Save the two location contexts here\n\nvar currentLocationCtx = null;\nvar otherLocationCtx = null;\nexport let setLocationCtx = id => {\n  if (id === 'aw_navigation') {\n    currentLocationCtx = 'activeNavigationCommand';\n  } else if (id === 'aw_toolsAndInfo') {\n    currentLocationCtx = 'activeToolsAndInfoCommand';\n  }\n\n  if (id === 'aw_navigation') {\n    otherLocationCtx = 'activeToolsAndInfoCommand';\n  } else if (id === 'aw_toolsAndInfo') {\n    otherLocationCtx = 'activeNavigationCommand';\n  }\n};\n\nvar handleCommand = function (vmProps, eventData) {\n  if (eventData.command) {\n    // If a panel in the other area is open, remove it's ctx value\n    if (otherLocationCtx) {\n      if (appCtx.getCtx(otherLocationCtx)) {\n        appCtx.unRegisterCtx(otherLocationCtx);\n      }\n    }\n\n    if (currentLocationCtx) {\n      //Register current location ctx\n      appCtx.registerCtx(currentLocationCtx, eventData.command);\n    } //revisitMe: Jignesh: Let's keep this code commented for now.\n    //Will reevaluate if this is required after the new commands architecture\n    // if( eventData.command.closeWhenCommandHidden ) {\n    //     // Start evaluating the currently opened command in the background\n    //     // When the command is hidden or disabled the panel will close even if command is not active anywhere else on page\n    //     commandScope[ vmProps.id ] = {};\n    //     commandScope[ vmProps.id ].ctx = undefined;\n    //     // Note: Command context cannot be handled generically as putting it somewhere this directive can reach it will result in a memory leak\n    //     // Any command that opens a panel and needs command context must set \"closeWhenCommandHidden\" to true in command panel service action\n    //     // and update their panel to know when to close\n    //     commandScope[ vmProps.id ].commandContext = null;\n    //     commandService.getCommand( eventData.commandId, commandScope[ vmProps.id ] );\n    // }\n    //Set the panel context\n\n\n    commandHandlerSvc.setupDeclarativeView(eventData.command).then(function () {\n      command[vmProps.id] = eventData.command;\n    });\n  }\n};\n/**\n * Close the currently opened command panel.\n *\n * @return {Promise} Promise resolved when panel has been closed\n */\n\n\nvar removeCommandScope = vmProps => {\n  if (command[vmProps.id]) {\n    return commandHandlerSvc.getPanelLifeCycleClose(command[vmProps.id]).then(() => {\n      if (commandScope[vmProps.id]) {\n        commandScope[vmProps.id] = null;\n      }\n\n      command[vmProps.id] = null;\n    });\n  }\n\n  return AwPromiseService.instance.resolve();\n};\n\nvar toggleParentClass = function (isAdd, vmProps) {\n  //The left-side-nav-pushed class is required in sidenav to remove the white dot on the left corner of sidenav\n  //When this class is present, we remove the border-radius on top left corner of sidenav\n  if (vmProps.isLeftToRight && vmProps.slide === 'PUSH') {\n    if (isAdd) {\n      $('.aw-layout-mainView').addClass('left-sidenav-pushed');\n    } else {\n      $('.aw-layout-mainView').removeClass('left-sidenav-pushed');\n    }\n  }\n};\n\nvar setSlideForPinnablePanel = function (sidenavOpened, vmProps) {\n  if (sidenavOpened) {\n    //Only required for primary navigation panel that can be pinned\n    vmProps.slide = vmProps.pinned ? 'PUSH' : 'FLOAT';\n\n    if (vmProps.pinned) {\n      $('.aw-layout-mainView').addClass('aw-global-navigationPanelPinned');\n    } //revisitMe: Jignesh - test Safari\n\n\n    if (browserUtils.isSafari) {\n      reCalculateCss();\n    }\n  } else {\n    //Need to make the slide revert to its initial state\n    vmProps.slide = 'FLOAT';\n\n    if (vmProps.pinned) {\n      $('.aw-layout-mainView').removeClass('aw-global-navigationPanelPinned');\n    }\n  }\n}; // Need this specifically for Safari browser. As safari does not repaint css properly.\n\n\nvar reCalculateCss = function () {\n  var sidenavContainer = $('.aw-sidenav-layoutContainer');\n  sidenavContainer.css('display', 'none');\n  sidenavContainer.outerHeight();\n  sidenavContainer.css('display', 'flex');\n};\n\nlet doesSideNavRemainOpen = function (eventData, vmProps) {\n  return vmProps.currentCommandId !== eventData.commandId ? true : !vmProps.sidenavOpened;\n};\n/**\n * @param {*} status\n * @param {*} vmProps\n * do not update the prop.sidenavOpened by your own some where else in the code.\n * Use proper API's to update state of a component.\n */\n\n\nexport let updateSideNavStatus = (status, vmProps) => {\n  vmProps.sidenavOpened = status;\n};\n/**\n * @param {*} slide\n * @param {*} vmProps\n */\n\nexport let updateSideNavSlide = (slide, vmProps) => {\n  vmProps.slide = slide;\n};\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\n\nexport let updateView = (viewName, vmProps) => {\n  vmProps.view = vmProps.sidenavOpened ? viewName : null;\n};\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\n\nexport let updatePinUnpinEnabled = (vmProps, eventData) => {\n  vmProps.isPinUnpinEnabled = eventData && eventData.config ? eventData.config.isPinUnpinEnabled : false;\n  vmProps.panelPinned = eventData && eventData.config ? eventData.config.panelPinned : false;\n};\n/**\n *\n * @param {*} commandId\n * @param {*} vmProps\n */\n\nlet updateCommandId = (commandId, vmProps) => {\n  vmProps.currentCommandId = commandId;\n};\n\nlet toggleSidenav = function (shallRemainOpen, vmProps, eventData) {\n  if (vmProps.isPinnable) {\n    setSlideForPinnablePanel(shallRemainOpen, vmProps);\n  }\n\n  if (eventData.commandId) {\n    if (shallRemainOpen) {\n      appCtx.registerCtx('sidenavCommandId', eventData.commandId); // revisitme - hack for 20200919 demo\n      // appCtx.ctx.sidenavCommandId = eventData.commandId;\n    } else {\n      appCtx.unRegisterCtx('sidenavCommandId'); // revisitme - hack for 20200919 demo\n      // appCtx.ctx.sidenavCommandId = undefined;\n    }\n  }\n\n  toggleParentClass(shallRemainOpen, vmProps);\n};\n\nvar updateGlobalSidenavContext = function (vmProps) {\n  appCtx.updatePartialCtx('awSidenavConfig.globalSidenavContext.' + vmProps.id, {\n    open: vmProps.sidenavOpened,\n    pinned: vmProps.pinned,\n    slide: vmProps.slide\n  }); // revisitme - hack for 20200919 demo\n  // appCtx.ctx[ 'awSidenavConfig.globalSidenavContext.' + vmProps.id ] = {\n  //     open: vmProps.sidenavOpened,\n  //     pinned: vmProps.pinned,\n  //     slide: vmProps.slide\n  // };\n};\n\nexport let closeSidenav = (vmProps, eventData) => {\n  return removeCommandScope(vmProps).then(() => {\n    if (!(vmProps.isPinnable && vmProps.pinned)) {\n      updateSideNavStatus(false, vmProps);\n      updateView(null, vmProps);\n    }\n\n    if (!eventData.commandId) {\n      if (appCtx.getCtx('sidenavCommandId')) {\n        appCtx.unRegisterCtx('sidenavCommandId'); // revisitme - hack for 20200919 demo\n        // appCtx.ctx.sidenavCommandId = undefined;\n      }\n    }\n\n    updateGlobalSidenavContext(vmProps);\n  });\n};\nexport let togglePinState = function (prop) {\n  prop.pinned = !prop.pinned;\n  $('.aw-layout-mainView').toggleClass('aw-global-navigationPanelPinned');\n  prop.slide = prop.pinned ? 'PUSH' : 'FLOAT'; // This is specific to Safari browser. As safari browser does not repaint css properly.\n  // Here is stack overflow link which I referred - https://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes\n\n  if (browserUtils.isSafari) {\n    reCalculateCss();\n  }\n\n  updateGlobalSidenavContext(prop);\n};\nexport let togglePinUnpinPanelState = function (prop) {\n  prop.panelPinned = !prop.panelPinned;\n};\nexport let createSidenav = (config, eventData) => {\n  let vmProps = { ...config\n  };\n  let shallRemainOpen = doesSideNavRemainOpen(eventData, vmProps);\n  return removeCommandScope(vmProps).then(() => {\n    toggleSidenav(shallRemainOpen, vmProps, eventData);\n\n    if (eventData.commandId) {\n      if (shallRemainOpen) {\n        handleCommand(vmProps, eventData); // Export env for wysiwyg\n\n        if (localStorage.get(localStorageTopicId)) {\n          localStorage.removeItem(localStorageTopicId);\n        }\n\n        localStorage.publish(localStorageTopicId, eventData.commandId);\n      } else {\n        if (currentLocationCtx) {\n          appCtx.unRegisterCtx(currentLocationCtx);\n        }\n      }\n    }\n\n    updateSideNavStatus(shallRemainOpen, vmProps);\n    updateView(eventData.includeView, vmProps);\n    updatePinUnpinEnabled(vmProps, eventData);\n    updateGlobalSidenavContext(vmProps);\n    updateCommandId(eventData.commandId, vmProps);\n\n    if (eventData.config && eventData.config.slide) {\n      updateSideNavSlide(eventData.config.slide, vmProps);\n    }\n\n    return vmProps;\n  });\n};\nexports = {\n  setLocationCtx,\n  createSidenav,\n  closeSidenav,\n  togglePinState,\n  togglePinUnpinPanelState\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwSidenavHelperService.js"],"names":["exports","localStorageTopicId","commandScope","command","currentLocationCtx","otherLocationCtx","setLocationCtx","id","handleCommand","eventData","appCtx","commandHandlerSvc","vmProps","removeCommandScope","AwPromiseService","toggleParentClass","$","setSlideForPinnablePanel","browserUtils","reCalculateCss","sidenavContainer","doesSideNavRemainOpen","updateSideNavStatus","updateSideNavSlide","updateView","updatePinUnpinEnabled","updateCommandId","toggleSidenav","updateGlobalSidenavContext","open","pinned","slide","closeSidenav","togglePinState","prop","togglePinUnpinPanelState","createSidenav","config","shallRemainOpen","localStorage"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwSidenavHelperService\n */\nimport $ from 'jquery';\nimport appCtx from 'js/appCtxService';\n\nimport localStorage from 'js/localStorage';\nimport commandHandlerSvc from 'js/commandHandlerService';\nimport browserUtils from 'js/browserUtils';\nimport AwPromiseService from 'js/awPromiseService';\n\nlet exports = {};\n\nvar localStorageTopicId = 'wysiwygChannel';\n// Scope being used by the \"background\" command for the current panel\nvar commandScope = {};\nvar command = {};\n\n//Register activeToolsAndInfoCommand and activeNavigationCommand for backward compatibility\n//to support existing consumers in AW\n// Save the two location contexts here\nvar currentLocationCtx = null;\nvar otherLocationCtx = null;\n\nexport let setLocationCtx = ( id ) => {\n    if( id === 'aw_navigation' ) {\n        currentLocationCtx = 'activeNavigationCommand';\n    } else if( id === 'aw_toolsAndInfo' ) {\n        currentLocationCtx = 'activeToolsAndInfoCommand';\n    }\n    if( id === 'aw_navigation' ) {\n        otherLocationCtx = 'activeToolsAndInfoCommand';\n    } else if( id === 'aw_toolsAndInfo' ) {\n        otherLocationCtx = 'activeNavigationCommand';\n    }\n};\n\nvar handleCommand = function( vmProps, eventData ) {\n    if( eventData.command ) {\n        // If a panel in the other area is open, remove it's ctx value\n        if( otherLocationCtx ) {\n            if( appCtx.getCtx( otherLocationCtx ) ) {\n                appCtx.unRegisterCtx( otherLocationCtx );\n            }\n        }\n\n        if( currentLocationCtx ) {\n            //Register current location ctx\n            appCtx.registerCtx( currentLocationCtx, eventData.command );\n        }\n\n        //revisitMe: Jignesh: Let's keep this code commented for now.\n        //Will reevaluate if this is required after the new commands architecture\n        // if( eventData.command.closeWhenCommandHidden ) {\n        //     // Start evaluating the currently opened command in the background\n        //     // When the command is hidden or disabled the panel will close even if command is not active anywhere else on page\n        //     commandScope[ vmProps.id ] = {};\n        //     commandScope[ vmProps.id ].ctx = undefined;\n\n        //     // Note: Command context cannot be handled generically as putting it somewhere this directive can reach it will result in a memory leak\n        //     // Any command that opens a panel and needs command context must set \"closeWhenCommandHidden\" to true in command panel service action\n        //     // and update their panel to know when to close\n        //     commandScope[ vmProps.id ].commandContext = null;\n        //     commandService.getCommand( eventData.commandId, commandScope[ vmProps.id ] );\n        // }\n\n        //Set the panel context\n        commandHandlerSvc.setupDeclarativeView( eventData.command ).then( function() {\n            command[ vmProps.id ] = eventData.command;\n        } );\n    }\n};\n\n/**\n * Close the currently opened command panel.\n *\n * @return {Promise} Promise resolved when panel has been closed\n */\nvar removeCommandScope = ( vmProps ) => {\n    if( command[ vmProps.id ] ) {\n        return commandHandlerSvc.getPanelLifeCycleClose( command[ vmProps.id ] ).then( () => {\n            if( commandScope[ vmProps.id ] ) {\n                commandScope[ vmProps.id ] = null;\n            }\n            command[ vmProps.id ] = null;\n        } );\n    }\n    return AwPromiseService.instance.resolve();\n};\n\nvar toggleParentClass = function( isAdd, vmProps ) {\n    //The left-side-nav-pushed class is required in sidenav to remove the white dot on the left corner of sidenav\n    //When this class is present, we remove the border-radius on top left corner of sidenav\n    if( vmProps.isLeftToRight && vmProps.slide === 'PUSH' ) {\n        if( isAdd ) {\n            $( '.aw-layout-mainView' ).addClass( 'left-sidenav-pushed' );\n        } else {\n            $( '.aw-layout-mainView' ).removeClass( 'left-sidenav-pushed' );\n        }\n    }\n};\n\nvar setSlideForPinnablePanel = function( sidenavOpened, vmProps ) {\n    if( sidenavOpened ) {\n        //Only required for primary navigation panel that can be pinned\n        vmProps.slide = vmProps.pinned ? 'PUSH' : 'FLOAT';\n        if( vmProps.pinned ) {\n            $( '.aw-layout-mainView' ).addClass( 'aw-global-navigationPanelPinned' );\n        }\n\n        //revisitMe: Jignesh - test Safari\n        if( browserUtils.isSafari ) {\n            reCalculateCss();\n        }\n    } else {\n        //Need to make the slide revert to its initial state\n        vmProps.slide = 'FLOAT';\n        if( vmProps.pinned ) {\n            $( '.aw-layout-mainView' ).removeClass( 'aw-global-navigationPanelPinned' );\n        }\n    }\n};\n\n// Need this specifically for Safari browser. As safari does not repaint css properly.\nvar reCalculateCss = function() {\n    var sidenavContainer = $( '.aw-sidenav-layoutContainer' );\n    sidenavContainer.css( 'display', 'none' );\n    sidenavContainer.outerHeight();\n    sidenavContainer.css( 'display', 'flex' );\n};\n\nlet doesSideNavRemainOpen = function( eventData, vmProps ) {\n    return vmProps.currentCommandId !== eventData.commandId ? true : !vmProps.sidenavOpened;\n};\n\n/**\n * @param {*} status\n * @param {*} vmProps\n * do not update the prop.sidenavOpened by your own some where else in the code.\n * Use proper API's to update state of a component.\n */\nexport let updateSideNavStatus = ( status, vmProps ) => {\n    vmProps.sidenavOpened = status;\n};\n\n/**\n * @param {*} slide\n * @param {*} vmProps\n */\nexport let updateSideNavSlide = ( slide, vmProps ) => {\n    vmProps.slide = slide;\n};\n\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\nexport let updateView = ( viewName, vmProps ) => {\n    vmProps.view = vmProps.sidenavOpened ? viewName : null;\n};\n\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\nexport let updatePinUnpinEnabled = ( vmProps, eventData ) => {\n    vmProps.isPinUnpinEnabled = eventData && eventData.config ? eventData.config.isPinUnpinEnabled : false;\n    vmProps.panelPinned = eventData && eventData.config ? eventData.config.panelPinned : false;\n};\n\n/**\n *\n * @param {*} commandId\n * @param {*} vmProps\n */\nlet updateCommandId = ( commandId, vmProps ) => {\n    vmProps.currentCommandId = commandId;\n};\n\nlet toggleSidenav = function( shallRemainOpen, vmProps, eventData ) {\n    if( vmProps.isPinnable ) {\n        setSlideForPinnablePanel( shallRemainOpen, vmProps );\n    }\n\n    if( eventData.commandId ) {\n        if( shallRemainOpen ) {\n            appCtx.registerCtx( 'sidenavCommandId', eventData.commandId );\n            // revisitme - hack for 20200919 demo\n            // appCtx.ctx.sidenavCommandId = eventData.commandId;\n        } else {\n            appCtx.unRegisterCtx( 'sidenavCommandId' );\n            // revisitme - hack for 20200919 demo\n            // appCtx.ctx.sidenavCommandId = undefined;\n        }\n    }\n\n    toggleParentClass( shallRemainOpen, vmProps );\n};\n\nvar updateGlobalSidenavContext = function( vmProps ) {\n    appCtx.updatePartialCtx( 'awSidenavConfig.globalSidenavContext.' + vmProps.id, {\n        open: vmProps.sidenavOpened,\n        pinned: vmProps.pinned,\n        slide: vmProps.slide\n    } );\n\n    // revisitme - hack for 20200919 demo\n    // appCtx.ctx[ 'awSidenavConfig.globalSidenavContext.' + vmProps.id ] = {\n    //     open: vmProps.sidenavOpened,\n    //     pinned: vmProps.pinned,\n    //     slide: vmProps.slide\n    // };\n};\n\nexport let closeSidenav = ( vmProps, eventData ) => {\n    return removeCommandScope( vmProps ).then( () => {\n        if( !( vmProps.isPinnable && vmProps.pinned ) ) {\n            updateSideNavStatus( false, vmProps );\n            updateView( null, vmProps );\n        }\n        if( !eventData.commandId ) {\n            if( appCtx.getCtx( 'sidenavCommandId' ) ) {\n                appCtx.unRegisterCtx( 'sidenavCommandId' );\n                // revisitme - hack for 20200919 demo\n                // appCtx.ctx.sidenavCommandId = undefined;\n            }\n        }\n        updateGlobalSidenavContext( vmProps );\n    } );\n};\n\nexport let togglePinState = function( prop ) {\n    prop.pinned = !prop.pinned;\n    $( '.aw-layout-mainView' ).toggleClass( 'aw-global-navigationPanelPinned' );\n    prop.slide = prop.pinned ? 'PUSH' : 'FLOAT';\n    // This is specific to Safari browser. As safari browser does not repaint css properly.\n    // Here is stack overflow link which I referred - https://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes\n    if( browserUtils.isSafari ) {\n        reCalculateCss();\n    }\n    updateGlobalSidenavContext( prop );\n};\n\nexport let togglePinUnpinPanelState = function( prop ) {\n    prop.panelPinned = !prop.panelPinned;\n};\n\nexport let createSidenav = ( config, eventData ) => {\n    let vmProps = { ...config };\n    let shallRemainOpen = doesSideNavRemainOpen( eventData, vmProps );\n    return removeCommandScope( vmProps ).then( () => {\n        toggleSidenav( shallRemainOpen, vmProps, eventData );\n        if( eventData.commandId ) {\n            if( shallRemainOpen ) {\n                handleCommand( vmProps, eventData );\n                // Export env for wysiwyg\n                if( localStorage.get( localStorageTopicId ) ) {\n                    localStorage.removeItem( localStorageTopicId );\n                }\n                localStorage.publish( localStorageTopicId, eventData.commandId );\n            } else {\n                if( currentLocationCtx ) {\n                    appCtx.unRegisterCtx( currentLocationCtx );\n                }\n            }\n        }\n        updateSideNavStatus( shallRemainOpen, vmProps );\n        updateView( eventData.includeView, vmProps );\n        updatePinUnpinEnabled( vmProps, eventData );\n        updateGlobalSidenavContext( vmProps );\n        updateCommandId( eventData.commandId, vmProps );\n\n        if( eventData.config && eventData.config.slide ) {\n            updateSideNavSlide( eventData.config.slide, vmProps );\n        }\n\n        return vmProps;\n    } );\n};\n\nexports = {\n    setLocationCtx,\n    createSidenav,\n    closeSidenav,\n    togglePinState,\n    togglePinUnpinPanelState\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
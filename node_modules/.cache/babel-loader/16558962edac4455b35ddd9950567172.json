{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Edit Handler factory\n *\n * @module js/editUtilsService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport _ from 'lodash';\nimport actionService from 'js/actionService';\nimport declUtils from 'js/moduleLoader';\nimport uwPropertyService from 'js/uwPropertyService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nvar exports = {};\nlet saveListeners = {};\nexport const _removeListeners = function (sourceModel) {\n  removeSaveListener(sourceModel);\n};\n\nconst addListeners = function (dataCtxNode, declViewModel, viewModelCollection, editConfig, saveEditStateChangeCallback) {\n  _removeListeners(editConfig.sourceModel);\n\n  const saveEditsListener = function (event) {\n    if (event.ctrlKey && (event.key === 's' || event.key === 'S')) {\n      exports._saveEdits(dataCtxNode, declViewModel, viewModelCollection, editConfig);\n\n      saveEditStateChangeCallback();\n      event.preventDefault();\n      removeSaveListener(editConfig.sourceModel);\n    }\n  };\n\n  document.addEventListener('keydown', saveEditsListener);\n  saveListeners[editConfig.sourceModel] = saveEditsListener;\n};\n\nconst removeSaveListener = function (sourceModel) {\n  document.removeEventListener('keydown', saveListeners[sourceModel]);\n};\n/**\n * isDirty implementation of edit-handler interface.\n * @param {*} viewModelCollection collection of view model objects\n * @returns {*} AwPromiseService.instance promise with true/false\n */\n\n\nexport let _isDirty = function (viewModelCollection) {\n  var hasModifiedProperties = false;\n\n  _.forEach(viewModelCollection, function (vmo) {\n    _.forEach(vmo.props, function (vmoProp) {\n      hasModifiedProperties = uwPropertyService.isModified(vmoProp);\n      return !hasModifiedProperties;\n    });\n\n    return !hasModifiedProperties;\n  });\n\n  return AwPromiseService.instance.when(hasModifiedProperties);\n};\n/**\n * saveEdits implementation of edit - handler interface.\n * @param {*} dataCtxNode $scope or the data context node.\n * @param {*} declViewModel Declarative View Model, where edit actions are defined.\n * @param {*} viewModelCollection collection of view-model objects.\n * @param {*} editConfig standard edit configuration defined on dataprovider/declviewmodel\n * @returns {*} AwPromiseService.instance promise\n */\n\nexport let _saveEdits = function (dataCtxNode, declViewModel, viewModelCollection, editConfig) {\n  viewModelCollection = viewModelObjectService.getLoadedAndCachedViewModelObjects(viewModelCollection);\n\n  var getAllModifiedProperties = function () {\n    var modifiedProperties = [];\n\n    _.forEach(viewModelCollection, function (vmo) {\n      _.forOwn(vmo.props, function (vmoProp) {\n        if (uwPropertyService.isModified(vmoProp)) {\n          modifiedProperties.push(vmoProp);\n        }\n      });\n    });\n\n    return modifiedProperties;\n  };\n\n  var getModifiedPropertiesMap = function () {\n    var identifier = editConfig.identifier;\n    var inputs = [];\n    var inputRegistry = {};\n\n    _.forEach(viewModelCollection, function (vmo) {\n      var uid = vmo[identifier];\n\n      _.forOwn(vmo.props, function (prop) {\n        if (uwPropertyService.isModified(prop)) {\n          var propObj = {\n            propertyName: prop.propertyName,\n            dbValues: uwPropertyService.getValueStrings(prop),\n            uiValues: prop.uiValues,\n            srcObjLsd: prop.srcObjLsd\n          };\n          inputRegistry[uid] = inputRegistry[uid] || {\n            identifier: uid,\n            props: []\n          };\n          var inputObj = inputRegistry[uid];\n          inputObj.props.push(propObj);\n        }\n      });\n\n      if (inputRegistry[uid]) {\n        inputs.push(inputRegistry[uid]);\n      }\n    });\n\n    return inputs;\n  };\n\n  return exports._isDirty(viewModelCollection).then(function (hasModifiedProps) {\n    var saveSuccess = function (viewModelCollection) {\n      var modifiedPropsArr = getAllModifiedProperties();\n\n      _.forEach(viewModelCollection, function (vmo) {\n        viewModelObjectService.setEditableStates(vmo, false, true, true);\n      });\n\n      _.forEach(modifiedPropsArr, function (modProp) {\n        uwPropertyService.replaceValuesWithNewValues(modProp);\n        uwPropertyService.resetProperty(modProp);\n      });\n\n      _removeListeners(editConfig.sourceModel);\n\n      return AwPromiseService.instance.resolve();\n    };\n\n    if (hasModifiedProps) {\n      var inputs = getModifiedPropertiesMap();\n      var saveEditAction = editConfig.saveEditAction;\n      var action = declViewModel._internal.actions[saveEditAction];\n\n      if (action) {\n        if (action.actionType === 'RESTService') {\n          var requestData = action.inputData.request;\n          requestData.data = requestData.data || {};\n          requestData.data.saveInputs = inputs;\n        } else {\n          action.inputData = action.inputData || {};\n          action.inputData.saveInputs = inputs;\n        }\n\n        return exports.executeAction(declViewModel, action, dataCtxNode).then(function () {\n          return saveSuccess(viewModelCollection);\n        }, function (error) {\n          return AwPromiseService.instance.reject(error);\n        });\n      }\n    }\n\n    return saveSuccess(viewModelCollection);\n  });\n};\n/**\n * This is the cancel edits implementation of edit-handler interface.\n * @param {*} dataCtxNode data ctx node ($scope)\n * @param {*} declViewModel declarative view model\n * @param {*} viewModelCollection collection of view model objects\n * @param {*} editConfig edit configuration\n * @returns {* } AwPromiseService.instance when operation is completed.\n */\n\nexport let _cancelEdits = function (dataCtxNode, declViewModel, viewModelCollection, editConfig) {\n  viewModelCollection = viewModelObjectService.getLoadedAndCachedViewModelObjects(viewModelCollection);\n\n  _.forEach(viewModelCollection, function (vmo) {\n    viewModelObjectService.clearEditableStates(vmo);\n  });\n\n  _removeListeners(editConfig.sourceModel);\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * This function merges the start edit action response back into the view model collect.\n * The response from start edit action should be an array of view model objects.\n *\n * @param {* } serverData response from the response\n * @param {* } vmCollection collection of view model objects\n * @param {* } editConfig edit configuration\n * @param {* } [propsToUpdate] - (Optional) If provided, only update these properties from server response\n * @returns {* } Promise when operation is completed.\n */\n\nexport let _mergeStartEditResponse = function (serverData, vmCollection, editConfig, propsToUpdate) {\n  try {\n    var identifier = editConfig.identifier;\n    var identiferToVMOMap = vmCollection.reduce(function (acc, eachObject) {\n      var uid = eachObject[identifier];\n      acc[uid] = eachObject;\n      return acc;\n    }, {});\n\n    if (!editConfig.hasOwnProperty('mergeResponseFunction')) {\n      _.forEach(serverData, function (updatedVMO) {\n        var uid = updatedVMO[identifier];\n        var targetVMO = identiferToVMOMap[uid] || null;\n\n        if (targetVMO) {\n          _.forOwn(updatedVMO.props, function (updatedProperty) {\n            // If this is not one of the props we want to update, continue\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(updatedProperty.propertyName) === -1) {\n              return true;\n            }\n\n            var targetProperty = targetVMO.props[updatedProperty.propertyName] || null;\n\n            if (targetProperty) {\n              updatedProperty.value = updatedProperty.hasOwnProperty('value') ? updatedProperty.value : targetProperty.value;\n              updatedProperty.displayValues = updatedProperty.hasOwnProperty('displayValues') ? updatedProperty.displayValues : targetProperty.displayValues;\n              updatedProperty.isNull = updatedProperty.hasOwnProperty('isNull') ? updatedProperty.isNull : targetProperty.displayValues;\n              updatedProperty.editable = updatedProperty.hasOwnProperty('editable') ? updatedProperty.editable : targetProperty.editable;\n              updatedProperty.isPropertyModifiable = updatedProperty.hasOwnProperty('isPropertyModifiable') ? updatedProperty.isPropertyModifiable : targetProperty.isPropertyModifiable;\n              updatedProperty.sourceObjectLastSavedDate = updatedProperty.hasOwnProperty('sourceObjectLastSavedDate') ? updatedProperty.sourceObjectLastSavedDate : targetProperty.sourceObjectLastSavedDate;\n              uwPropertyService.copyModelData(targetProperty, updatedProperty);\n            }\n\n            return undefined;\n          });\n        }\n      });\n\n      return AwPromiseService.instance.resolve();\n    }\n\n    var deps = 'js/editMergeService';\n    return exports.loadDependentModule(deps).then(function (depModuleObj) {\n      var args = [serverData, vmCollection, editConfig];\n      return depModuleObj[editConfig.mergeResponseFunction].apply(null, args);\n    });\n  } catch (err) {\n    return AwPromiseService.instance.reject(err);\n  }\n};\n/**\n * This function loads the dependent module.\n * @param {*} deps name of the dependency files.\n * @returns {*} AwPromiseService.instance when module is loaded.\n */\n\nexport let loadDependentModule = function (deps) {\n  var depModuleObj = declUtils.getDependentModule(deps);\n\n  if (depModuleObj) {\n    return AwPromiseService.instance.resolve(depModuleObj);\n  }\n\n  return declUtils.loadDependentModule(deps).then(function (depModuleObj) {\n    return AwPromiseService.instance.resolve(depModuleObj);\n  }, function (error) {\n    return AwPromiseService.instance.reject(error);\n  });\n};\n/**\n * This function executes any action defined in the view model.\n * @param {*} declViewModel Declarative View Model, where edit action is defined\n * @param {*} action start/save/cancel Edit action\n * @param {*} dataCtxNode $scope/data ctx object\n * @returns {*} AwPromiseService.instance promise\n */\n\nexport let executeAction = function (declViewModel, action, dataCtxNode) {\n  if (action.deps) {\n    return exports.loadDependentModule(action.deps).then(function (depModuleObj) {\n      return actionService.executeAction(declViewModel, action, dataCtxNode, depModuleObj);\n    });\n  }\n\n  return actionService.executeAction(declViewModel, action, dataCtxNode, null);\n};\n/**\n * This function implements the start edit function edit handler interface\n * @param {* } dataCtxNode data ctx Node.\n * @param {* } declViewModel declarative ViewModel.\n * @param {* } vmCollection collection of all view model objects.\n * @param {* } editConfig edit configuration\n * @param {* } saveEditStateChangeCallback callback function on save\n * @param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyNames, autoSave } (Optional)\n * @returns {* } AwPromiseService.instance when module is loaded.\n */\n\nexport let _startEdit = function (dataCtxNode, declViewModel, vmCollection, editConfig, saveEditStateChangeCallback, editOptions) {\n  try {\n    var identifier = editConfig.identifier;\n\n    var setEditableStates = function () {\n      if (editOptions) {\n        for (let j = 0; j < editOptions.vmos.length; j++) {\n          for (let i = 0; i < editOptions.propertyNames.length; i++) {\n            const prop = editOptions.vmos[j].props[editOptions.propertyNames[i]];\n            uwPropertyService.setEditable(prop, true);\n            uwPropertyService.setEditState(prop, true, true, true);\n          }\n        }\n      } else if (vmCollection) {\n        _.forEach(vmCollection, function (vmo) {\n          viewModelObjectService.setEditableStates(vmo, true, true, true);\n        });\n      }\n    }; // Get viewModelObjects that are not in edit mode\n\n\n    let vmosNotInEdit = [];\n\n    if (editOptions) {\n      vmosNotInEdit = [editOptions.vmos];\n    } else {\n      vmosNotInEdit = viewModelObjectService.getVmosNotInEdit(vmCollection);\n    }\n\n    var inputs = vmosNotInEdit.map(function (eachObject) {\n      var objInput = {};\n      objInput[identifier] = eachObject[identifier];\n      objInput.propertyNames = [];\n\n      if (editOptions) {\n        objInput.propertyNames = editOptions.propertyNames;\n      } else {\n        _.forOwn(eachObject.props, function (prop) {\n          objInput.propertyNames.push(prop.propertyName);\n        });\n      }\n\n      return objInput;\n    });\n    var startEditActionName = editConfig.startEditAction;\n    var startEditAction = declViewModel.getAction(startEditActionName);\n\n    if (startEditAction) {\n      if (startEditAction.actionType === 'RESTService') {\n        var requestData = startEditAction.inputData.request;\n        requestData.data = requestData.data || {};\n        requestData.data.editInputs = inputs;\n      } else {\n        startEditAction.inputData = startEditAction.inputData || {};\n        startEditAction.inputData.editInputs = inputs;\n      }\n\n      return exports.executeAction(declViewModel, startEditAction, dataCtxNode).then(function (responseObj) {\n        responseObj = startEditAction.actionType === 'RESTService' ? responseObj.data : responseObj;\n\n        if (editConfig.hasOwnProperty('startEditResponseKey')) {\n          responseObj = responseObj[editConfig.startEditResponseKey];\n        }\n\n        let propsToUpdate = editOptions ? editOptions.propertyNames : [];\n        return exports._mergeStartEditResponse(responseObj, vmCollection, editConfig, propsToUpdate).then(function () {\n          setEditableStates();\n          addListeners(dataCtxNode, declViewModel, vmCollection, editConfig, saveEditStateChangeCallback);\n          return AwPromiseService.instance.resolve();\n        }, function (error) {\n          return AwPromiseService.instance.reject(error);\n        });\n      });\n    }\n\n    return AwPromiseService.instance.reject('start edit action not defined');\n  } catch (error) {\n    return AwPromiseService.instance.reject(error);\n  }\n};\nexports = {\n  _isDirty,\n  _saveEdits,\n  _cancelEdits,\n  _mergeStartEditResponse,\n  loadDependentModule,\n  executeAction,\n  _startEdit,\n  _removeListeners\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","_","actionService","declUtils","uwPropertyService","viewModelObjectService","exports","saveListeners","_removeListeners","sourceModel","removeSaveListener","addListeners","dataCtxNode","declViewModel","viewModelCollection","editConfig","saveEditStateChangeCallback","saveEditsListener","event","ctrlKey","key","_saveEdits","preventDefault","document","addEventListener","removeEventListener","_isDirty","hasModifiedProperties","forEach","vmo","props","vmoProp","isModified","instance","when","getLoadedAndCachedViewModelObjects","getAllModifiedProperties","modifiedProperties","forOwn","push","getModifiedPropertiesMap","identifier","inputs","inputRegistry","uid","prop","propObj","propertyName","dbValues","getValueStrings","uiValues","srcObjLsd","inputObj","then","hasModifiedProps","saveSuccess","modifiedPropsArr","setEditableStates","modProp","replaceValuesWithNewValues","resetProperty","resolve","saveEditAction","action","_internal","actions","actionType","requestData","inputData","request","data","saveInputs","executeAction","error","reject","_cancelEdits","clearEditableStates","_mergeStartEditResponse","serverData","vmCollection","propsToUpdate","identiferToVMOMap","reduce","acc","eachObject","hasOwnProperty","updatedVMO","targetVMO","updatedProperty","length","indexOf","targetProperty","value","displayValues","isNull","editable","isPropertyModifiable","sourceObjectLastSavedDate","copyModelData","undefined","deps","loadDependentModule","depModuleObj","args","mergeResponseFunction","apply","err","getDependentModule","_startEdit","editOptions","j","vmos","i","propertyNames","setEditable","setEditState","vmosNotInEdit","getVmosNotInEdit","map","objInput","startEditActionName","startEditAction","getAction","editInputs","responseObj","startEditResponseKey"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/editUtilsService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Edit Handler factory\n *\n * @module js/editUtilsService\n */\n\nimport AwPromiseService from 'js/awPromiseService';\nimport _ from 'lodash';\nimport actionService from 'js/actionService';\nimport declUtils from 'js/moduleLoader';\nimport uwPropertyService from 'js/uwPropertyService';\nimport viewModelObjectService from 'js/viewModelObjectService';\n\nvar exports = {};\n\nlet saveListeners = {};\n\nexport const _removeListeners = function( sourceModel ) {\n    removeSaveListener( sourceModel );\n};\n\nconst addListeners = function( dataCtxNode, declViewModel, viewModelCollection, editConfig, saveEditStateChangeCallback ) {\n    _removeListeners( editConfig.sourceModel );\n    const saveEditsListener = function( event ) {\n        if( event.ctrlKey && ( event.key === 's' || event.key === 'S' ) ) {\n            exports._saveEdits( dataCtxNode, declViewModel, viewModelCollection, editConfig );\n            saveEditStateChangeCallback();\n            event.preventDefault();\n            removeSaveListener( editConfig.sourceModel );\n        }\n    };\n    document.addEventListener( 'keydown', saveEditsListener );\n    saveListeners[ editConfig.sourceModel ] = saveEditsListener;\n};\n\nconst removeSaveListener = function( sourceModel ) {\n    document.removeEventListener( 'keydown', saveListeners[ sourceModel ] );\n};\n\n/**\n * isDirty implementation of edit-handler interface.\n * @param {*} viewModelCollection collection of view model objects\n * @returns {*} AwPromiseService.instance promise with true/false\n */\nexport let _isDirty = function( viewModelCollection ) {\n    var hasModifiedProperties = false;\n    _.forEach( viewModelCollection, function( vmo ) {\n        _.forEach( vmo.props, function( vmoProp ) {\n            hasModifiedProperties = uwPropertyService.isModified( vmoProp );\n            return !hasModifiedProperties;\n        } );\n        return !hasModifiedProperties;\n    } );\n    return AwPromiseService.instance.when( hasModifiedProperties );\n};\n/**\n * saveEdits implementation of edit - handler interface.\n * @param {*} dataCtxNode $scope or the data context node.\n * @param {*} declViewModel Declarative View Model, where edit actions are defined.\n * @param {*} viewModelCollection collection of view-model objects.\n * @param {*} editConfig standard edit configuration defined on dataprovider/declviewmodel\n * @returns {*} AwPromiseService.instance promise\n */\nexport let _saveEdits = function( dataCtxNode, declViewModel, viewModelCollection, editConfig ) {\n    viewModelCollection = viewModelObjectService.getLoadedAndCachedViewModelObjects( viewModelCollection );\n    var getAllModifiedProperties = function() {\n        var modifiedProperties = [];\n        _.forEach( viewModelCollection, function( vmo ) {\n            _.forOwn( vmo.props, function( vmoProp ) {\n                if( uwPropertyService.isModified( vmoProp ) ) {\n                    modifiedProperties.push( vmoProp );\n                }\n            } );\n        } );\n        return modifiedProperties;\n    };\n\n    var getModifiedPropertiesMap = function() {\n        var identifier = editConfig.identifier;\n        var inputs = [];\n        var inputRegistry = {};\n        _.forEach( viewModelCollection, function( vmo ) {\n            var uid = vmo[ identifier ];\n            _.forOwn( vmo.props, function( prop ) {\n                if( uwPropertyService.isModified( prop ) ) {\n                    var propObj = {\n                        propertyName: prop.propertyName,\n                        dbValues: uwPropertyService.getValueStrings( prop ),\n                        uiValues: prop.uiValues,\n                        srcObjLsd: prop.srcObjLsd\n                    };\n                    inputRegistry[ uid ] = inputRegistry[ uid ] || { identifier: uid, props: [] };\n                    var inputObj = inputRegistry[ uid ];\n                    inputObj.props.push( propObj );\n                }\n            } );\n            if( inputRegistry[ uid ] ) {\n                inputs.push( inputRegistry[ uid ] );\n            }\n        } );\n        return inputs;\n    };\n    return exports._isDirty( viewModelCollection ).then( function( hasModifiedProps ) {\n        var saveSuccess = function( viewModelCollection ) {\n            var modifiedPropsArr = getAllModifiedProperties();\n            _.forEach( viewModelCollection, function( vmo ) {\n                viewModelObjectService.setEditableStates( vmo, false, true, true );\n            } );\n\n            _.forEach( modifiedPropsArr, function( modProp ) {\n                uwPropertyService.replaceValuesWithNewValues( modProp );\n                uwPropertyService.resetProperty( modProp );\n            } );\n            _removeListeners( editConfig.sourceModel );\n            return AwPromiseService.instance.resolve();\n        };\n\n        if( hasModifiedProps ) {\n            var inputs = getModifiedPropertiesMap();\n            var saveEditAction = editConfig.saveEditAction;\n            var action = declViewModel._internal.actions[ saveEditAction ];\n            if( action ) {\n                if( action.actionType === 'RESTService' ) {\n                    var requestData = action.inputData.request;\n                    requestData.data = requestData.data || {};\n                    requestData.data.saveInputs = inputs;\n                } else {\n                    action.inputData = action.inputData || {};\n                    action.inputData.saveInputs = inputs;\n                }\n                return exports.executeAction( declViewModel, action, dataCtxNode )\n                    .then( function() {\n                        return saveSuccess( viewModelCollection );\n                    }, function( error ) {\n                        return AwPromiseService.instance.reject( error );\n                    } );\n            }\n        }\n        return saveSuccess( viewModelCollection );\n    } );\n};\n\n/**\n * This is the cancel edits implementation of edit-handler interface.\n * @param {*} dataCtxNode data ctx node ($scope)\n * @param {*} declViewModel declarative view model\n * @param {*} viewModelCollection collection of view model objects\n * @param {*} editConfig edit configuration\n * @returns {* } AwPromiseService.instance when operation is completed.\n */\nexport let _cancelEdits = function( dataCtxNode, declViewModel, viewModelCollection, editConfig ) {\n    viewModelCollection = viewModelObjectService.getLoadedAndCachedViewModelObjects( viewModelCollection );\n    _.forEach( viewModelCollection, function( vmo ) {\n        viewModelObjectService.clearEditableStates( vmo );\n    } );\n    _removeListeners( editConfig.sourceModel );\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * This function merges the start edit action response back into the view model collect.\n * The response from start edit action should be an array of view model objects.\n *\n * @param {* } serverData response from the response\n * @param {* } vmCollection collection of view model objects\n * @param {* } editConfig edit configuration\n * @param {* } [propsToUpdate] - (Optional) If provided, only update these properties from server response\n * @returns {* } Promise when operation is completed.\n */\nexport let _mergeStartEditResponse = function( serverData, vmCollection, editConfig, propsToUpdate ) {\n    try {\n        var identifier = editConfig.identifier;\n        var identiferToVMOMap = vmCollection.reduce( function( acc, eachObject ) {\n            var uid = eachObject[ identifier ];\n            acc[ uid ] = eachObject;\n            return acc;\n        }, {} );\n\n        if( !editConfig.hasOwnProperty( 'mergeResponseFunction' ) ) {\n            _.forEach( serverData, function( updatedVMO ) {\n                var uid = updatedVMO[ identifier ];\n                var targetVMO = identiferToVMOMap[ uid ] || null;\n                if( targetVMO ) {\n                    _.forOwn( updatedVMO.props, function( updatedProperty ) {\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( updatedProperty.propertyName ) === -1 ) {\n                            return true;\n                        }\n                        var targetProperty = targetVMO.props[ updatedProperty.propertyName ] || null;\n                        if( targetProperty ) {\n                            updatedProperty.value = updatedProperty.hasOwnProperty( 'value' ) ? updatedProperty.value : targetProperty.value;\n                            updatedProperty.displayValues = updatedProperty.hasOwnProperty( 'displayValues' ) ? updatedProperty.displayValues : targetProperty.displayValues;\n                            updatedProperty.isNull = updatedProperty.hasOwnProperty( 'isNull' ) ? updatedProperty.isNull : targetProperty.displayValues;\n                            updatedProperty.editable = updatedProperty.hasOwnProperty( 'editable' ) ? updatedProperty.editable : targetProperty.editable;\n                            updatedProperty.isPropertyModifiable = updatedProperty.hasOwnProperty( 'isPropertyModifiable' ) ? updatedProperty.isPropertyModifiable : targetProperty\n                                .isPropertyModifiable;\n                            updatedProperty.sourceObjectLastSavedDate = updatedProperty.hasOwnProperty( 'sourceObjectLastSavedDate' ) ? updatedProperty.sourceObjectLastSavedDate :\n                                targetProperty.sourceObjectLastSavedDate;\n                            uwPropertyService.copyModelData( targetProperty, updatedProperty );\n                        }\n                        return undefined;\n                    } );\n                }\n            } );\n            return AwPromiseService.instance.resolve();\n        }\n        var deps = 'js/editMergeService';\n        return exports.loadDependentModule( deps ).then( function( depModuleObj ) {\n            var args = [ serverData, vmCollection, editConfig ];\n            return depModuleObj[ editConfig.mergeResponseFunction ].apply( null, args );\n        } );\n    } catch ( err ) {\n        return AwPromiseService.instance.reject( err );\n    }\n};\n\n/**\n * This function loads the dependent module.\n * @param {*} deps name of the dependency files.\n * @returns {*} AwPromiseService.instance when module is loaded.\n */\nexport let loadDependentModule = function( deps ) {\n    var depModuleObj = declUtils.getDependentModule( deps );\n    if( depModuleObj ) {\n        return AwPromiseService.instance.resolve( depModuleObj );\n    }\n    return declUtils.loadDependentModule( deps ).then(\n        function( depModuleObj ) {\n            return AwPromiseService.instance.resolve( depModuleObj );\n        },\n        function( error ) {\n            return AwPromiseService.instance.reject( error );\n        }\n    );\n};\n\n/**\n * This function executes any action defined in the view model.\n * @param {*} declViewModel Declarative View Model, where edit action is defined\n * @param {*} action start/save/cancel Edit action\n * @param {*} dataCtxNode $scope/data ctx object\n * @returns {*} AwPromiseService.instance promise\n */\nexport let executeAction = function( declViewModel, action, dataCtxNode ) {\n    if( action.deps ) {\n        return exports.loadDependentModule( action.deps ).then( function( depModuleObj ) {\n            return actionService.executeAction( declViewModel, action, dataCtxNode, depModuleObj );\n        } );\n    }\n    return actionService.executeAction( declViewModel, action, dataCtxNode, null );\n};\n\n/**\n * This function implements the start edit function edit handler interface\n * @param {* } dataCtxNode data ctx Node.\n * @param {* } declViewModel declarative ViewModel.\n * @param {* } vmCollection collection of all view model objects.\n * @param {* } editConfig edit configuration\n * @param {* } saveEditStateChangeCallback callback function on save\n * @param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyNames, autoSave } (Optional)\n * @returns {* } AwPromiseService.instance when module is loaded.\n */\nexport let _startEdit = function( dataCtxNode, declViewModel, vmCollection, editConfig, saveEditStateChangeCallback, editOptions ) {\n    try {\n        var identifier = editConfig.identifier;\n        var setEditableStates = function() {\n            if( editOptions ) {\n                for( let j = 0; j < editOptions.vmos.length; j++ ) {\n                    for( let i = 0; i < editOptions.propertyNames.length; i++ ) {\n                        const prop = editOptions.vmos[ j ].props[ editOptions.propertyNames[ i ] ];\n                        uwPropertyService.setEditable( prop, true );\n                        uwPropertyService.setEditState( prop, true, true, true );\n                    }\n                }\n            } else if( vmCollection ) {\n                _.forEach( vmCollection, function( vmo ) {\n                    viewModelObjectService.setEditableStates( vmo, true, true, true );\n                } );\n            }\n        };\n\n        // Get viewModelObjects that are not in edit mode\n        let vmosNotInEdit = [];\n        if( editOptions ) {\n            vmosNotInEdit = [ editOptions.vmos ];\n        } else {\n            vmosNotInEdit = viewModelObjectService.getVmosNotInEdit( vmCollection );\n        }\n\n        var inputs = vmosNotInEdit.map( function( eachObject ) {\n            var objInput = {};\n            objInput[ identifier ] = eachObject[ identifier ];\n            objInput.propertyNames = [];\n            if( editOptions ) {\n                objInput.propertyNames = editOptions.propertyNames;\n            } else {\n                _.forOwn( eachObject.props, function( prop ) {\n                    objInput.propertyNames.push( prop.propertyName );\n                } );\n            }\n            return objInput;\n        } );\n\n        var startEditActionName = editConfig.startEditAction;\n        var startEditAction = declViewModel.getAction( startEditActionName );\n\n        if( startEditAction ) {\n            if( startEditAction.actionType === 'RESTService' ) {\n                var requestData = startEditAction.inputData.request;\n                requestData.data = requestData.data || {};\n                requestData.data.editInputs = inputs;\n            } else {\n                startEditAction.inputData = startEditAction.inputData || {};\n                startEditAction.inputData.editInputs = inputs;\n            }\n\n            return exports.executeAction( declViewModel, startEditAction, dataCtxNode ).then( function( responseObj ) {\n                responseObj = startEditAction.actionType === 'RESTService' ? responseObj.data : responseObj;\n                if( editConfig.hasOwnProperty( 'startEditResponseKey' ) ) {\n                    responseObj = responseObj[ editConfig.startEditResponseKey ];\n                }\n                let propsToUpdate = editOptions ? editOptions.propertyNames : [];\n                return exports._mergeStartEditResponse( responseObj, vmCollection, editConfig, propsToUpdate ).then( function() {\n                    setEditableStates();\n                    addListeners( dataCtxNode, declViewModel, vmCollection, editConfig, saveEditStateChangeCallback );\n                    return AwPromiseService.instance.resolve();\n                }, function( error ) {\n                    return AwPromiseService.instance.reject( error );\n                } );\n            } );\n        }\n        return AwPromiseService.instance.reject( 'start edit action not defined' );\n    } catch ( error ) {\n        return AwPromiseService.instance.reject( error );\n    }\n};\n\nexports = {\n    _isDirty,\n    _saveEdits,\n    _cancelEdits,\n    _mergeStartEditResponse,\n    loadDependentModule,\n    executeAction,\n    _startEdit,\n    _removeListeners\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
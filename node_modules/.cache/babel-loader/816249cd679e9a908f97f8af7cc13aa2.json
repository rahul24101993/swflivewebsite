{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module provides methods to process data parse configurations in the Declarative View Model\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined in this module is\n * injected by AngularJS.\n *\n * @module js/dataMapperService\n */\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\n/** revisitme Shaishav\n * Hint: We need to bring following services\nimport awIconSvc from 'js/awIconService';\n*/\n\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport debugService from 'js/debugService';\n/**\n * Cached reference to dependent services\n */\n\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specific format.\n *\n * @private\n */\n\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\n\nvar exports = {};\n/**\n * Check if valid prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\n\nvar isValidPropType = function (type) {\n  return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)$/.test(type);\n};\n/**\n * Check if valid array prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\n\n\nvar isValidArrayPropType = function (type) {\n  return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)ARRAY$/.test(type);\n};\n/**\n * @param {String} propType - The property type\n * @param {Boolean} isArray - If the property is of array type\n * @returns {String} - The correct property type\n */\n\n\nvar getPropertyType = function (propType, isArray) {\n  propType = propType.toUpperCase();\n\n  if (isArray) {\n    if (isValidArrayPropType(propType)) {\n      return propType;\n    } else if (isValidPropType(propType)) {\n      return propType + 'ARRAY';\n    }\n  } else {\n    if (isValidPropType(propType)) {\n      return propType;\n    }\n  }\n\n  logger.warn('Unknown property type ' + propType);\n  return 'UNKNOWN';\n};\n\nconst uuidv4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line no-bitwise\n    const r = Math.random() * 16 | 0; // eslint-disable-next-line no-bitwise\n\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\n/**\n * Convert one single response object to VMO\n * @param {Object} dataParseDef - The data parse definition\n * @returns {Object} - VMO containing view model properties\n */\n\n\nvar constructViewModelObject = function (dataParseDef) {\n  var serverVMO = {\n    props: {}\n  };\n  serverVMO.uid = dataParseDef.identifier || uuidv4();\n  serverVMO.type = dataParseDef.type;\n  serverVMO.modelType = dataParseDef.modelType;\n\n  _.forOwn(dataParseDef, function (val, key) {\n    if (key === 'props') {\n      _.forOwn(val, function (propDef, propId) {\n        serverVMO.props[propId] = {};\n        Object.assign(serverVMO.props[propId], propDef);\n        serverVMO.props[propId].displayName = propDef.displayName || propDef.name;\n        serverVMO.props[propId].propType = getPropertyType(propDef.type, propDef.isArray);\n        serverVMO.props[propId].isArray = propDef.isArray === true;\n        serverVMO.props[propId].displayValue = _.isArray(propDef.displayValue) ? propDef.displayValue : [propDef.displayValue];\n\n        if (propDef.isArray === true) {\n          serverVMO.props[propId].value = _.isArray(propDef.value) ? propDef.value : [propDef.value];\n        } else {\n          serverVMO.props[propId].value = propDef.value;\n        }\n      });\n    }\n  });\n\n  return viewModelObjectService.constructViewModelObject(serverVMO, true);\n};\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param { Object } cellProperties - object of cellProperties to consider.\n * @return { Object } Object if values after replacement of any strings.\n */\n\n\nvar _convertUTCTimeValues = function (cellProperties) {\n  for (var prop in cellProperties) {\n    if (Object.prototype.hasOwnProperty.call(cellProperties, prop)) {\n      var value = cellProperties[prop].value;\n      var markerNdx = value ? value.indexOf(UTC_DATE_TIME_MARKER) : -1;\n\n      if (markerNdx !== -1) {\n        var prefix = value.substring(0, markerNdx);\n        var utc = value.substring(markerNdx + UTC_DATE_TIME_MARKER.length);\n        var date = new Date(utc);\n        cellProperties[prop].value = prefix + dateTimeSvc.formatSessionDateTime(date);\n      }\n    }\n  }\n\n  return cellProperties;\n};\n/**\n * Convert one single response object to afx object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {Object} dataParseDefinition - The data parse definition\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @returns {Object} - vmo containing view model properties\n */\n\n\nvar convertResponseObjToVMO = function (declViewModel, dataParseDefinition, dataCtxNode, depModuleObj) {\n  var functionsList = declViewModel.getFunctions();\n\n  var dataParseDef = _.cloneDeep(dataParseDefinition);\n\n  declarativeDataCtxSvc.applyScope(declViewModel, dataParseDef, functionsList, dataCtxNode, depModuleObj);\n  var viewModelObject = constructViewModelObject(dataParseDef);\n\n  _.forOwn(dataParseDef, function (val, key) {\n    if (key === 'props') {\n      _.forOwn(val, function (propDef, propId) {\n        if (propDef.dataProvider && declViewModel.dataProviders) {\n          viewModelObject.props[propId].dataProvider = declViewModel.dataProviders[propDef.dataProvider];\n          uwPropertySvc.setHasLov(viewModelObject.props[propId], true);\n          viewModelObject.props[propId].emptyLOVEntry = propDef.emptyLOVEntry;\n          viewModelObject.props[propId].isSelectOnly = propDef.isSelectOnly;\n        }\n\n        viewModelObject.props[propId].getViewModel = function () {\n          return declViewModel;\n        };\n\n        if (viewModelObject.props[propId].type === 'DATE') {\n          viewModelObject.props[propId].dateApi = viewModelObject.props[propId].dateApi || {};\n          viewModelObject.props[propId].dateApi.isDateEnabled = true;\n          viewModelObject.props[propId].dateApi.isTimeEnabled = false;\n\n          if (propDef.type === 'DATETIME') {\n            viewModelObject.props[propId].dateApi.isTimeEnabled = true;\n          }\n        }\n      });\n    } else {\n      viewModelObject[key] = val;\n    }\n  });\n\n  if (viewModelObject && viewModelObject.indicators) {\n    var indicators = visualIndicatorSvc.getIndicatorFromJSON(viewModelObject.indicators);\n\n    if (indicators.length > 0) {\n      viewModelObject.indicators = indicators;\n    }\n  }\n\n  if (viewModelObject && viewModelObject.cellProperties) {\n    var cellProperties = _convertUTCTimeValues(viewModelObject.cellProperties);\n\n    if (cellProperties) {\n      viewModelObject.cellProperties = cellProperties;\n    }\n  }\n  /** revisitme Shaishav\n   * Hint: We need to bring aw icon service\n  if( viewModelObject && !viewModelObject.typeIconURL ) {\n      var typeIconURL = awIconSvc.getTypeIconFileUrl( viewModelObject );\n      if( typeIconURL ) {\n          viewModelObject.typeIconURL = typeIconURL;\n      }\n  }\n   if( !viewModelObject.thumbnailURL ) {\n      var thumbnailURL = awIconSvc.getThumbnailFileUrl( viewModelObject );\n      if( thumbnailURL ) {\n          viewModelObject.thumbnailURL = thumbnailURL;\n      }\n  }\n  */\n\n\n  viewModelObject.hasThumbnail = !declUtils.isNil(dataParseDef.thumbnailURL); // Set thumbnail flag\n\n  return viewModelObject;\n};\n/**\n * Apply the DataParseDefinitions to an array of response objects (as returned from a server).\n * This returns an array of objects which are consumable by various afx widgets.\n *\n * @param {Object} sourceObj - The object to apply dataParseDefinitions\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {ObjectArray} actionDataParsers - The dataParseDefinitions.\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @return {Object} - the modified sourceObj with dataParseDefinition applied\n */\n\n\nexport let applyDataParseDefinitions = function (sourceObj, declViewModel, actionDataParsers, dataCtxNode, depModuleObj) {\n  if (!_.isArray(actionDataParsers)) {\n    return sourceObj;\n  }\n\n  if (logger.isDeclarativeLogEnabled()) {\n    debugService.debugPreProcessingDataParser(sourceObj, declViewModel, actionDataParsers, dataCtxNode);\n  }\n\n  _.forEach(actionDataParsers, function (actionDpd) {\n    var dataParseDefinition = declViewModel.getDataParseDefinition(actionDpd.id);\n\n    if (_.isUndefined(dataParseDefinition)) {\n      logger.warn('Missing DataParseDefinition with id ' + actionDpd.id + ' in DeclViewModel');\n      return;\n    }\n\n    if (dataParseDefinition.typeHierarchy) {\n      dataParseDefinition.modelType = {\n        typeHierarchyArray: '{{response.typeHierarchy}}'\n      };\n    }\n\n    var responseObjsPath = actionDpd.responseObjs;\n\n    var responseObjs = _.get(sourceObj, responseObjsPath);\n\n    debugService.debug('dataParsers', declViewModel._internal.panelId, actionDpd.id, responseObjs);\n    var afxObjects = null;\n\n    if (_.isArray(responseObjs)) {\n      afxObjects = [];\n\n      _.forEach(responseObjs, function (responseObj) {\n        dataCtxNode.response = responseObj;\n        dataCtxNode.i18n = dataCtxNode.i18n || dataCtxNode.data.i18n;\n        var afxObject = convertResponseObjToVMO(declViewModel, dataParseDefinition, dataCtxNode, depModuleObj);\n        delete dataCtxNode.response;\n        afxObjects.push(afxObject);\n      });\n    } else if (_.isObject(responseObjs)) {\n      dataCtxNode.response = responseObjs;\n      afxObjects = convertResponseObjToVMO(declViewModel, dataParseDefinition, dataCtxNode, depModuleObj);\n      delete dataCtxNode.response;\n    }\n\n    _.set(sourceObj, responseObjsPath, afxObjects);\n  });\n\n  if (logger.isDeclarativeLogEnabled()) {\n    debugService.debugPostProcessingDataParser(sourceObj, declViewModel, actionDataParsers, dataCtxNode);\n  }\n\n  return sourceObj;\n};\nexports = {\n  applyDataParseDefinitions\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dataMapperService.js"],"names":["UTC_DATE_TIME_MARKER","exports","isValidPropType","isValidArrayPropType","getPropertyType","propType","logger","uuidv4","r","Math","v","c","constructViewModelObject","serverVMO","props","dataParseDef","_","key","Object","propDef","viewModelObjectService","_convertUTCTimeValues","value","cellProperties","markerNdx","prefix","utc","date","dateTimeSvc","convertResponseObjToVMO","functionsList","declViewModel","declarativeDataCtxSvc","viewModelObject","uwPropertySvc","indicators","visualIndicatorSvc","declUtils","applyDataParseDefinitions","debugService","dataParseDefinition","actionDpd","typeHierarchyArray","responseObjsPath","responseObjs","afxObjects","dataCtxNode","afxObject"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module provides methods to process data parse configurations in the Declarative View Model\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined in this module is\n * injected by AngularJS.\n *\n * @module js/dataMapperService\n */\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\n/** revisitme Shaishav\n * Hint: We need to bring following services\nimport awIconSvc from 'js/awIconService';\n*/\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport debugService from 'js/debugService';\n\n/**\n * Cached reference to dependent services\n */\n\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specific format.\n *\n * @private\n */\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\nvar exports = {};\n/**\n * Check if valid prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\nvar isValidPropType = function( type ) {\n    return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)$/.test( type );\n};\n/**\n * Check if valid array prop type\n * @param {String} type - Property type string\n * @return {boolean} Reference to service API.\n */\nvar isValidArrayPropType = function( type ) {\n    return /^(BOOLEAN|DATE|DATETIME|DOUBLE|INTEGER|STRING|OBJECT)ARRAY$/.test( type );\n};\n/**\n * @param {String} propType - The property type\n * @param {Boolean} isArray - If the property is of array type\n * @returns {String} - The correct property type\n */\nvar getPropertyType = function( propType, isArray ) {\n    propType = propType.toUpperCase();\n    if( isArray ) {\n        if( isValidArrayPropType( propType ) ) {\n            return propType;\n        } else if( isValidPropType( propType ) ) {\n            return propType + 'ARRAY';\n        }\n    } else {\n        if( isValidPropType( propType ) ) {\n            return propType;\n        }\n    }\n\n    logger.warn( 'Unknown property type ' + propType );\n    return 'UNKNOWN';\n};\n\nconst uuidv4 = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace( /[xy]/g, function( c ) {\n        // eslint-disable-next-line no-bitwise\n        const r = Math.random() * 16 | 0;\n        // eslint-disable-next-line no-bitwise\n        const v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString( 16 );\n    } );\n};\n\n/**\n * Convert one single response object to VMO\n * @param {Object} dataParseDef - The data parse definition\n * @returns {Object} - VMO containing view model properties\n */\nvar constructViewModelObject = function( dataParseDef ) {\n    var serverVMO = {\n        props: {}\n    };\n    serverVMO.uid = dataParseDef.identifier || uuidv4();\n    serverVMO.type = dataParseDef.type;\n    serverVMO.modelType = dataParseDef.modelType;\n    _.forOwn( dataParseDef, function( val, key ) {\n        if( key === 'props' ) {\n            _.forOwn( val, function( propDef, propId ) {\n                serverVMO.props[ propId ] = {};\n                Object.assign( serverVMO.props[ propId ], propDef );\n                serverVMO.props[ propId ].displayName = propDef.displayName || propDef.name;\n                serverVMO.props[ propId ].propType = getPropertyType( propDef.type, propDef.isArray );\n                serverVMO.props[ propId ].isArray = propDef.isArray === true;\n                serverVMO.props[ propId ].displayValue = _.isArray( propDef.displayValue ) ? propDef.displayValue : [ propDef.displayValue ];\n                if( propDef.isArray === true ) {\n                    serverVMO.props[ propId ].value = _.isArray( propDef.value ) ? propDef.value : [ propDef.value ];\n                } else {\n                    serverVMO.props[ propId ].value = propDef.value;\n                }\n            } );\n        }\n    } );\n    return viewModelObjectService.constructViewModelObject( serverVMO, true );\n};\n\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param { Object } cellProperties - object of cellProperties to consider.\n * @return { Object } Object if values after replacement of any strings.\n */\nvar _convertUTCTimeValues = function( cellProperties ) {\n    for( var prop in cellProperties ) {\n        if( Object.prototype.hasOwnProperty.call( cellProperties, prop ) ) {\n            var value = cellProperties[ prop ].value;\n\n            var markerNdx = value ? value.indexOf( UTC_DATE_TIME_MARKER ) : -1;\n\n            if( markerNdx !== -1 ) {\n                var prefix = value.substring( 0, markerNdx );\n                var utc = value.substring( markerNdx + UTC_DATE_TIME_MARKER.length );\n\n                var date = new Date( utc );\n                cellProperties[ prop ].value = prefix + dateTimeSvc.formatSessionDateTime( date );\n            }\n        }\n    }\n    return cellProperties;\n};\n/**\n * Convert one single response object to afx object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {Object} dataParseDefinition - The data parse definition\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @returns {Object} - vmo containing view model properties\n */\nvar convertResponseObjToVMO = function( declViewModel, dataParseDefinition, dataCtxNode, depModuleObj ) {\n    var functionsList = declViewModel.getFunctions();\n    var dataParseDef = _.cloneDeep( dataParseDefinition );\n    declarativeDataCtxSvc.applyScope( declViewModel, dataParseDef, functionsList, dataCtxNode, depModuleObj );\n    var viewModelObject = constructViewModelObject( dataParseDef );\n    _.forOwn( dataParseDef, function( val, key ) {\n        if( key === 'props' ) {\n            _.forOwn( val, function( propDef, propId ) {\n                if( propDef.dataProvider && declViewModel.dataProviders ) {\n                    viewModelObject.props[ propId ].dataProvider = declViewModel.dataProviders[propDef.dataProvider];\n                    uwPropertySvc.setHasLov( viewModelObject.props[ propId ], true );\n                    viewModelObject.props[ propId ].emptyLOVEntry = propDef.emptyLOVEntry;\n                    viewModelObject.props[ propId ].isSelectOnly = propDef.isSelectOnly;\n                }\n                viewModelObject.props[ propId ].getViewModel = function() {\n                    return declViewModel;\n                };\n                if( viewModelObject.props[ propId ].type === 'DATE' ) {\n                    viewModelObject.props[ propId ].dateApi = viewModelObject.props[ propId ].dateApi || {};\n                    viewModelObject.props[ propId ].dateApi.isDateEnabled = true;\n                    viewModelObject.props[ propId ].dateApi.isTimeEnabled = false;\n                    if( propDef.type === 'DATETIME' ) {\n                        viewModelObject.props[ propId ].dateApi.isTimeEnabled = true;\n                    }\n                }\n            } );\n        } else {\n            viewModelObject[ key ] = val;\n        }\n    } );\n\n    if( viewModelObject && viewModelObject.indicators ) {\n        var indicators = visualIndicatorSvc.getIndicatorFromJSON( viewModelObject.indicators );\n        if( indicators.length > 0 ) {\n            viewModelObject.indicators = indicators;\n        }\n    }\n\n    if( viewModelObject && viewModelObject.cellProperties ) {\n        var cellProperties = _convertUTCTimeValues( viewModelObject.cellProperties );\n        if( cellProperties ) {\n            viewModelObject.cellProperties = cellProperties;\n        }\n    }\n\n    /** revisitme Shaishav\n     * Hint: We need to bring aw icon service\n    if( viewModelObject && !viewModelObject.typeIconURL ) {\n        var typeIconURL = awIconSvc.getTypeIconFileUrl( viewModelObject );\n        if( typeIconURL ) {\n            viewModelObject.typeIconURL = typeIconURL;\n        }\n    }\n\n    if( !viewModelObject.thumbnailURL ) {\n        var thumbnailURL = awIconSvc.getThumbnailFileUrl( viewModelObject );\n        if( thumbnailURL ) {\n            viewModelObject.thumbnailURL = thumbnailURL;\n        }\n    }\n    */\n\n    viewModelObject.hasThumbnail = !declUtils.isNil( dataParseDef.thumbnailURL ); // Set thumbnail flag\n    return viewModelObject;\n};\n/**\n * Apply the DataParseDefinitions to an array of response objects (as returned from a server).\n * This returns an array of objects which are consumable by various afx widgets.\n *\n * @param {Object} sourceObj - The object to apply dataParseDefinitions\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context.\n * @param {ObjectArray} actionDataParsers - The dataParseDefinitions.\n * @param {Object} dataCtxNode - The data context node.\n * @param {Object} depModuleObj - The dependent module\n * @return {Object} - the modified sourceObj with dataParseDefinition applied\n */\nexport let applyDataParseDefinitions = function( sourceObj, declViewModel, actionDataParsers, dataCtxNode, depModuleObj ) {\n    if( !_.isArray( actionDataParsers ) ) {\n        return sourceObj;\n    }\n    if( logger.isDeclarativeLogEnabled() ) {\n        debugService.debugPreProcessingDataParser( sourceObj, declViewModel, actionDataParsers, dataCtxNode );\n    }\n    _.forEach( actionDataParsers, function( actionDpd ) {\n        var dataParseDefinition = declViewModel.getDataParseDefinition( actionDpd.id );\n        if( _.isUndefined( dataParseDefinition ) ) {\n            logger.warn( 'Missing DataParseDefinition with id ' + actionDpd.id + ' in DeclViewModel' );\n            return;\n        }\n        if( dataParseDefinition.typeHierarchy ) {\n            dataParseDefinition.modelType = { typeHierarchyArray: '{{response.typeHierarchy}}' };\n        }\n        var responseObjsPath = actionDpd.responseObjs;\n        var responseObjs = _.get( sourceObj, responseObjsPath );\n        debugService.debug( 'dataParsers', declViewModel._internal.panelId, actionDpd.id, responseObjs );\n        var afxObjects = null;\n        if( _.isArray( responseObjs ) ) {\n            afxObjects = [];\n            _.forEach( responseObjs, function( responseObj ) {\n                dataCtxNode.response = responseObj;\n                dataCtxNode.i18n = dataCtxNode.i18n || dataCtxNode.data.i18n;\n                var afxObject = convertResponseObjToVMO( declViewModel, dataParseDefinition, dataCtxNode, depModuleObj );\n                delete dataCtxNode.response;\n                afxObjects.push( afxObject );\n            } );\n        } else if( _.isObject( responseObjs ) ) {\n            dataCtxNode.response = responseObjs;\n            afxObjects = convertResponseObjToVMO( declViewModel, dataParseDefinition, dataCtxNode, depModuleObj );\n            delete dataCtxNode.response;\n        }\n        _.set( sourceObj, responseObjsPath, afxObjects );\n    } );\n    if( logger.isDeclarativeLogEnabled() ) {\n        debugService.debugPostProcessingDataParser( sourceObj, declViewModel, actionDataParsers, dataCtxNode );\n    }\n    return sourceObj;\n};\n\nexports = {\n    applyDataParseDefinitions\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
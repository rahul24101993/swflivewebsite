{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* global jQuery */\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/NotyModule\n */\nimport sanitizer from 'js/sanitizer';\nimport iconSvc from 'js/iconService';\nimport themeSvc from 'js/theme.service';\nimport eventBus from 'js/eventBus'; // revisitme - pengw\n// HINT: quick wire up for jq and needs to remove later\n\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\nvar exports = {};\nvar timeout = {\n  information: 6000,\n  error: 60000\n};\nvar modalType = {\n  information: false,\n  warning: true,\n  error: false\n};\n/**\n * @param {String} notyMessage - noty message\n */\n\nfunction renderMessage(notyMessage) {\n  // don't load jquery.noty.customized until it's actually needed\n  // revisitme - pengw\n  // HINT: need to define the path correctly later\n  import('./jquery.noty.customized').then(function (notyRenderer) {\n    if (notyMessage && notyMessage.type !== 'warning') {\n      var removeMessagesSubs = eventBus.subscribe('removeMessages', function () {\n        notyRenderer.close(); // unregister\n\n        eventBus.unsubscribe(removeMessagesSubs);\n      });\n    }\n\n    notyRenderer.setIconService(iconSvc);\n    notyRenderer.init(notyMessage);\n  });\n}\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\n\n\nfunction getNotyMessage(message, msgType, buttonsArr, messageData) {\n  var isModal = modalType[msgType];\n  var isTimeout = timeout[msgType];\n  var closeConfig = ['X', 'stayOnClick'];\n  var sanitizedMessage = sanitizer.sanitizeHtmlValue(message);\n  var parsedHtml = parseMessage(sanitizedMessage);\n  var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n\n  if (buttonsArr && buttonsArr.length > 0) {\n    isModal = true;\n    isTimeout = false;\n    closeConfig = [];\n  }\n\n  var notyMessage = {\n    layout: 'bottom',\n    theme: currentTheme,\n    type: msgType,\n    // Do not pass in escaped or safe html string in case of custom message.\n    text: messageData ? sanitizedMessage : parsedHtml,\n    dismissQueue: true,\n    maxVisible: 3,\n    modal: isModal,\n    closeWith: closeConfig,\n    animation: {\n      open: {\n        height: 'toggle'\n      },\n      close: {\n        height: 'toggle'\n      },\n      easing: 'swing',\n      speed: 500\n    },\n    timeout: isTimeout,\n    messageData: messageData\n  };\n\n  if (buttonsArr && buttonsArr.length > 0) {\n    notyMessage.buttons = buttonsArr;\n  }\n\n  return notyMessage;\n}\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\n\n\nfunction parseMessage(message) {\n  var escapedStr = '';\n  var parsedHtml = null;\n\n  if (message) {\n    escapedStr = message.replace(/(<br|<\\/br)\\s*[/]?>/gi, '\\n');\n    parsedHtml = sanitizer.htmlEscapeAllowEntities(escapedStr, true, true);\n    return parsedHtml;\n  }\n\n  return message;\n}\n/**\n * Get the modal type for the message.\n * messageDefination will get the higest priority\n * user can set globally using the setModelType which get second higest priority\n * OOTB modal type for message type are INFO:false , WARNING:true, ERROR:false\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\n\n\nexport let getModalType = function (messageDefn, messageType) {\n  if (messageDefn && messageDefn.hasOwnProperty('isModal')) {\n    return messageDefn.isModal;\n  }\n\n  return modalType[messageType];\n};\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {integer} timeoutValue - timeout Value in ms.\n */\n\nexport let setTimeout = function (messageType, timeoutValue) {\n  switch (messageType) {\n    case 'info':\n      timeout.information = timeoutValue;\n      timeout.error = timeoutValue * 10;\n      break;\n\n    case 'error':\n      timeout.error = timeoutValue;\n      break;\n  }\n};\n/**\n * Report an 'informational' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showInfo = function (message, messageData, messageDefn, buttonsArr) {\n  var notyMessage = getNotyMessage(message, 'information', buttonsArr, messageData);\n  renderMessage(notyMessage);\n};\n/**\n * Report an 'alert' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n */\n\nexport let showAlert = function (message, messageData) {\n  var sanitizedMessage = sanitizer.sanitizeHtmlValue(message);\n  var parsedHtml = parseMessage(sanitizedMessage);\n  var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n  var notyMessage = {\n    layout: 'bottom',\n    theme: currentTheme,\n    type: 'alert',\n    // Do not pass in escaped or safe html string in case of custom message.\n    text: messageData ? sanitizedMessage : parsedHtml,\n    dismissQueue: true,\n    maxVisible: 3,\n    closeWith: ['X', 'stayOnClick'],\n    animation: {\n      open: {\n        height: 'toggle'\n      },\n      close: {\n        height: 'toggle'\n      },\n      easing: 'swing',\n      speed: 500\n    },\n    timeout: timeout.info,\n    messageData: messageData\n  };\n  renderMessage(notyMessage);\n};\n/**\n * Report an 'warning' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {Object} buttonsArr - Array of buttons as user options\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n */\n\nexport let showWarning = function (message, buttonsArr, messageData, messageDefn) {\n  var notyMessage = getNotyMessage(message, 'warning', buttonsArr, messageData);\n  renderMessage(notyMessage);\n};\n/**\n * Report an 'error' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showError = function (message, messageData, messageDefn, buttonsArr) {\n  var notyMessage = getNotyMessage(message, 'error', buttonsArr, messageData);\n  renderMessage(notyMessage);\n};\nexports = {\n  getModalType,\n  setTimeout,\n  showInfo,\n  showAlert,\n  showWarning,\n  showError\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/noty/src/js/NotyModule.js"],"names":["window","exports","timeout","information","error","modalType","warning","notyMessage","removeMessagesSubs","notyRenderer","eventBus","isModal","isTimeout","closeConfig","sanitizedMessage","sanitizer","parsedHtml","parseMessage","currentTheme","themeSvc","buttonsArr","layout","theme","type","text","messageData","dismissQueue","maxVisible","modal","closeWith","animation","open","height","close","easing","speed","escapedStr","message","getModalType","messageDefn","setTimeout","timeoutValue","showInfo","getNotyMessage","renderMessage","showAlert","showWarning","showError"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* global jQuery */\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/NotyModule\n */\nimport sanitizer from 'js/sanitizer';\nimport iconSvc from 'js/iconService';\nimport themeSvc from 'js/theme.service';\nimport eventBus from 'js/eventBus';\n\n// revisitme - pengw\n// HINT: quick wire up for jq and needs to remove later\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\n\nvar exports = {};\n\nvar timeout = {\n    information: 6000,\n    error: 60000\n};\nvar modalType = {\n    information: false,\n    warning: true,\n    error: false\n};\n\n/**\n * @param {String} notyMessage - noty message\n */\nfunction renderMessage( notyMessage ) {\n    // don't load jquery.noty.customized until it's actually needed\n    // revisitme - pengw\n    // HINT: need to define the path correctly later\n    import( './jquery.noty.customized' ).then( function( notyRenderer ) {\n        if( notyMessage && notyMessage.type !== 'warning' ) {\n            var removeMessagesSubs = eventBus.subscribe( 'removeMessages', function() {\n                notyRenderer.close();\n                // unregister\n                eventBus.unsubscribe( removeMessagesSubs );\n            } );\n        }\n        notyRenderer.setIconService( iconSvc );\n        notyRenderer.init( notyMessage );\n    } );\n}\n\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\nfunction getNotyMessage( message, msgType, buttonsArr, messageData ) {\n    var isModal = modalType[ msgType ];\n    var isTimeout = timeout[ msgType ];\n    var closeConfig = [ 'X', 'stayOnClick' ];\n    var sanitizedMessage = sanitizer.sanitizeHtmlValue( message );\n    var parsedHtml = parseMessage( sanitizedMessage );\n    var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n\n    if( buttonsArr && buttonsArr.length > 0 ) {\n        isModal = true;\n        isTimeout = false;\n        closeConfig = [];\n    }\n    var notyMessage = {\n        layout: 'bottom',\n        theme: currentTheme,\n        type: msgType,\n        // Do not pass in escaped or safe html string in case of custom message.\n        text: messageData ? sanitizedMessage : parsedHtml,\n        dismissQueue: true,\n        maxVisible: 3,\n        modal: isModal,\n        closeWith: closeConfig,\n\n        animation: {\n            open: {\n                height: 'toggle'\n            },\n            close: {\n                height: 'toggle'\n            },\n            easing: 'swing',\n            speed: 500\n        },\n        timeout: isTimeout,\n        messageData: messageData\n    };\n    if( buttonsArr && buttonsArr.length > 0 ) {\n        notyMessage.buttons = buttonsArr;\n    }\n    return notyMessage;\n}\n\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\nfunction parseMessage( message ) {\n    var escapedStr = '';\n    var parsedHtml = null;\n    if( message ) {\n        escapedStr = message.replace( /(<br|<\\/br)\\s*[/]?>/gi, '\\n' );\n        parsedHtml = sanitizer.htmlEscapeAllowEntities( escapedStr, true, true );\n        return parsedHtml;\n    }\n    return message;\n}\n\n/**\n * Get the modal type for the message.\n * messageDefination will get the higest priority\n * user can set globally using the setModelType which get second higest priority\n * OOTB modal type for message type are INFO:false , WARNING:true, ERROR:false\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\nexport let getModalType = function( messageDefn, messageType ) {\n    if( messageDefn && messageDefn.hasOwnProperty( 'isModal' ) ) {\n        return messageDefn.isModal;\n    }\n    return modalType[ messageType ];\n};\n\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {integer} timeoutValue - timeout Value in ms.\n */\nexport let setTimeout = function( messageType, timeoutValue ) {\n    switch ( messageType ) {\n        case 'info':\n            timeout.information = timeoutValue;\n            timeout.error = timeoutValue * 10;\n            break;\n\n        case 'error':\n            timeout.error = timeoutValue;\n            break;\n    }\n};\n\n/**\n * Report an 'informational' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showInfo = function( message, messageData, messageDefn, buttonsArr ) {\n    var notyMessage = getNotyMessage( message, 'information', buttonsArr, messageData );\n    renderMessage( notyMessage );\n};\n/**\n * Report an 'alert' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n */\nexport let showAlert = function( message, messageData ) {\n    var sanitizedMessage = sanitizer.sanitizeHtmlValue( message );\n    var parsedHtml = parseMessage( sanitizedMessage );\n    var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n    var notyMessage = {\n        layout: 'bottom',\n        theme: currentTheme,\n        type: 'alert',\n        // Do not pass in escaped or safe html string in case of custom message.\n        text: messageData ? sanitizedMessage : parsedHtml,\n        dismissQueue: true,\n        maxVisible: 3,\n        closeWith: [ 'X', 'stayOnClick' ],\n        animation: {\n            open: {\n                height: 'toggle'\n            },\n            close: {\n                height: 'toggle'\n            },\n            easing: 'swing',\n            speed: 500\n        },\n        timeout: timeout.info,\n        messageData: messageData\n    };\n    renderMessage( notyMessage );\n};\n/**\n * Report an 'warning' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {Object} buttonsArr - Array of buttons as user options\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n */\nexport let showWarning = function( message, buttonsArr, messageData, messageDefn ) {\n    var notyMessage = getNotyMessage( message, 'warning', buttonsArr, messageData );\n    renderMessage( notyMessage );\n};\n/**\n * Report an 'error' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showError = function( message, messageData, messageDefn, buttonsArr ) {\n    var notyMessage = getNotyMessage( message, 'error', buttonsArr, messageData );\n    renderMessage( notyMessage );\n};\n\nexports = {\n    getModalType,\n    setTimeout,\n    showInfo,\n    showAlert,\n    showWarning,\n    showError\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
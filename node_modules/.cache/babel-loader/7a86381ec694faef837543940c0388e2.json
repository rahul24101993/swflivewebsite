{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service is used to the saveHandler object based on configuration.\n *\n * @module js/saveHandlerService\n */import adapterParser from'js/adapterParserService';import appCtxService from'js/appCtxService';import _ from'lodash';import cfgSvc from'js/configurationService';var exports={};/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */ /**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Array} evaluationContext - additional evaluation context needs to be passed to saveHandlers configuration\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */export let getSaveServiceHandlers=async function(sourceObjects,evaluationContext){sourceObjects.push(appCtxService.ctx);if(evaluationContext){sourceObjects.push(evaluationContext);}return await cfgSvc.getCfg('saveHandlers').then(function(saveHandlers){return adapterParser.getAdaptedObjects(sourceObjects,saveHandlers).then(function(adaptedObjects){_.forEach(sourceObjects,function(n){adaptedObjects=_.without(adaptedObjects,n);});return adaptedObjects;});});};exports={getSaveServiceHandlers};export default exports;","map":null,"metadata":{},"sourceType":"module"}
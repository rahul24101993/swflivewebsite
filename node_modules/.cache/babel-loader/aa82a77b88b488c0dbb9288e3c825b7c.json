{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Thue module defines helpful shared APIs and constants used throughout the DeclarativeUI code base.\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/declModelRegistryService\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n/**\n * {ObjectMap} The current 'active' instances of a certain class.\n */\n\nvar _modelRegistry = {};\n/**\n * {Boolean} TRUE if create/destroy events for UwDataProviders should be logged.\n */\n\nvar _debug_logModelLifeCycle = false;\n/**\n */\n\nfunction _caseInsensitive(a, b) {\n  var nameA = a.toUpperCase(); // ignore upper and lowercase\n\n  var nameB = b.toUpperCase(); // ignore upper and lowercase\n\n  if (nameA < nameB) {\n    return -1;\n  }\n\n  if (nameA > nameB) {\n    return 1;\n  } // names must be equal\n\n\n  return 0;\n}\n/**\n * @param {String} operationName -\n *\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n *\n * @return {String}\n */\n\n\nfunction _buildStatusString(operationName, modelTypeIn, modelObj) {\n  var msg = '\\n';\n  msg += operationName;\n  msg += ' ';\n  msg += modelTypeIn;\n  msg += ': ';\n  msg += modelObj.toString();\n  msg += '\\n';\n  msg += 'Status:';\n  msg += '\\n';\n\n  _.forEach(_modelRegistry, function (modelTypeGroup, modelType) {\n    var keys = Object.keys(_modelRegistry[modelType]);\n    keys.sort(_caseInsensitive);\n    var first = true;\n    var totalActive = 0;\n\n    _.forEach(keys, function (key) {\n      if (key === 'nextId') {\n        return;\n      }\n\n      var modelStatus = modelTypeGroup[key];\n      var modelIds = Object.keys(modelStatus.members);\n\n      if (modelIds.length) {\n        if (first) {\n          msg += modelType;\n          msg += '\\n';\n          first = false;\n        }\n\n        var currLen = msg.length;\n        msg += '    ';\n        msg += key;\n\n        if ((msg.length - currLen) % 2 === 0) {\n          msg += ' ';\n        }\n\n        for (var ndx = msg.length; ndx < currLen + 44; ndx += 2) {\n          msg += '. ';\n        }\n\n        msg += ': ';\n        msg += modelIds.length;\n        msg += ' ';\n        msg += JSON.stringify(modelIds);\n        msg += '\\n';\n        totalActive += modelIds.length;\n      }\n    });\n\n    if (totalActive) {\n      msg += 'Total: ';\n      msg += totalActive;\n      msg += '\\n';\n    }\n  });\n\n  return msg;\n} // _buildStatusString\n\n/**\n * ---------------------------------------------------------------------------<BR>\n * Define the public API for the Service<BR>\n * ---------------------------------------------------------------------------<BR>\n */\n\n\nvar exports = {};\n/**\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n */\n\nexport let registerModel = function (modelType, modelObj, modelNamePath, modelIdPath) {\n  var modelTypeGroup = _modelRegistry[modelType];\n\n  if (!modelTypeGroup) {\n    modelTypeGroup = {\n      nextId: 0\n    };\n    _modelRegistry[modelType] = modelTypeGroup;\n  }\n\n  var modelName = _.get(modelObj, modelNamePath);\n\n  var modelStatus = modelTypeGroup[modelName];\n\n  if (!modelStatus) {\n    modelStatus = {\n      members: {}\n    };\n    modelTypeGroup[modelName] = modelStatus;\n  }\n\n  var modelId = _.get(modelObj, modelIdPath);\n\n  if (modelId >= 0) {\n    logger.info('registerModel: Attempt to double register: ' + modelObj);\n  } else {\n    var nextId = modelTypeGroup.nextId;\n    modelTypeGroup.nextId++;\n    modelStatus.members[nextId] = true;\n\n    _.set(modelObj, modelIdPath, nextId);\n  }\n\n  if (_debug_logModelLifeCycle) {\n    logger.info(_buildStatusString('Created', modelType, modelObj));\n  }\n};\n/**\n * @param {String} modelType - The type of model being unregistered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to unregister.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n */\n\nexport let unregisterModel = function (modelType, modelObj, modelNamePath, modelIdPath) {\n  var modelTypeGroup = _modelRegistry[modelType];\n\n  if (!modelTypeGroup) {\n    modelTypeGroup = {\n      nextId: 0\n    };\n    _modelRegistry[modelType] = modelTypeGroup;\n  }\n\n  var modelName = _.get(modelObj, modelNamePath);\n\n  var modelId = _.get(modelObj, modelIdPath);\n\n  var modelStatus = modelTypeGroup[modelName];\n\n  if (modelStatus) {\n    if (modelStatus.members[modelId]) {\n      delete modelStatus.members[modelId];\n    } else {\n      logger.info('unregisterModel: Model not found in the registry: ' + modelObj);\n    }\n  }\n\n  if (_debug_logModelLifeCycle) {\n    logger.info(_buildStatusString('Destroyed', modelType, modelObj));\n  }\n};\n/**\n * ---------------------------------------------------------------------------<BR>\n * Property & Function definition complete....Finish initialization. <BR>\n * ---------------------------------------------------------------------------<BR>\n */\n\nvar urlAttrs = browserUtils.getUrlAttributes();\n_debug_logModelLifeCycle = urlAttrs.logModelLifeCycle !== undefined;\nexports = {\n  registerModel,\n  unregisterModel\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/declModelRegistryService.js"],"names":["_modelRegistry","_debug_logModelLifeCycle","nameA","a","nameB","b","msg","modelObj","_","keys","Object","first","totalActive","key","modelStatus","modelTypeGroup","modelIds","currLen","ndx","JSON","exports","registerModel","nextId","modelName","members","modelId","logger","_buildStatusString","unregisterModel","urlAttrs","browserUtils"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Thue module defines helpful shared APIs and constants used throughout the DeclarativeUI code base.\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/declModelRegistryService\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n\n/**\n * {ObjectMap} The current 'active' instances of a certain class.\n */\nvar _modelRegistry = {};\n\n/**\n * {Boolean} TRUE if create/destroy events for UwDataProviders should be logged.\n */\nvar _debug_logModelLifeCycle = false;\n\n/**\n */\nfunction _caseInsensitive( a, b ) {\n    var nameA = a.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.toUpperCase(); // ignore upper and lowercase\n\n    if( nameA < nameB ) {\n        return -1;\n    }\n\n    if( nameA > nameB ) {\n        return 1;\n    }\n\n    // names must be equal\n    return 0;\n}\n\n/**\n * @param {String} operationName -\n *\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n *\n * @return {String}\n */\nfunction _buildStatusString( operationName, modelTypeIn, modelObj ) {\n    var msg = '\\n';\n    msg += operationName;\n    msg += ' ';\n    msg += modelTypeIn;\n    msg += ': ';\n    msg += modelObj.toString();\n    msg += '\\n';\n    msg += 'Status:';\n    msg += '\\n';\n\n    _.forEach( _modelRegistry, function( modelTypeGroup, modelType ) {\n        var keys = Object.keys( _modelRegistry[ modelType ] );\n\n        keys.sort( _caseInsensitive );\n\n        var first = true;\n        var totalActive = 0;\n\n        _.forEach( keys, function( key ) {\n            if( key === 'nextId' ) {\n                return;\n            }\n\n            var modelStatus = modelTypeGroup[ key ];\n\n            var modelIds = Object.keys( modelStatus.members );\n\n            if( modelIds.length ) {\n                if( first ) {\n                    msg += modelType;\n                    msg += '\\n';\n\n                    first = false;\n                }\n\n                var currLen = msg.length;\n\n                msg += '    ';\n                msg += key;\n\n                if( ( msg.length - currLen ) % 2 === 0 ) {\n                    msg += ' ';\n                }\n\n                for( var ndx = msg.length; ndx < currLen + 44; ndx += 2 ) {\n                    msg += '. ';\n                }\n\n                msg += ': ';\n                msg += modelIds.length;\n                msg += ' ';\n                msg += JSON.stringify( modelIds );\n                msg += '\\n';\n\n                totalActive += modelIds.length;\n            }\n        } );\n\n        if( totalActive ) {\n            msg += 'Total: ';\n            msg += totalActive;\n            msg += '\\n';\n        }\n    } );\n\n    return msg;\n} // _buildStatusString\n\n/**\n * ---------------------------------------------------------------------------<BR>\n * Define the public API for the Service<BR>\n * ---------------------------------------------------------------------------<BR>\n */\n\nvar exports = {};\n\n/**\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n */\nexport let registerModel = function( modelType, modelObj, modelNamePath, modelIdPath ) {\n    var modelTypeGroup = _modelRegistry[ modelType ];\n\n    if( !modelTypeGroup ) {\n        modelTypeGroup = {\n            nextId: 0\n        };\n\n        _modelRegistry[ modelType ] = modelTypeGroup;\n    }\n\n    var modelName = _.get( modelObj, modelNamePath );\n\n    var modelStatus = modelTypeGroup[ modelName ];\n\n    if( !modelStatus ) {\n        modelStatus = {\n            members: {}\n        };\n\n        modelTypeGroup[ modelName ] = modelStatus;\n    }\n\n    var modelId = _.get( modelObj, modelIdPath );\n\n    if( modelId >= 0 ) {\n        logger.info( 'registerModel: Attempt to double register: ' + modelObj );\n    } else {\n        var nextId = modelTypeGroup.nextId;\n        modelTypeGroup.nextId++;\n\n        modelStatus.members[ nextId ] = true;\n\n        _.set( modelObj, modelIdPath, nextId );\n    }\n\n    if( _debug_logModelLifeCycle ) {\n        logger.info( _buildStatusString( 'Created', modelType, modelObj ) );\n    }\n};\n\n/**\n * @param {String} modelType - The type of model being unregistered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to unregister.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n */\nexport let unregisterModel = function( modelType, modelObj, modelNamePath, modelIdPath ) {\n    var modelTypeGroup = _modelRegistry[ modelType ];\n\n    if( !modelTypeGroup ) {\n        modelTypeGroup = {\n            nextId: 0\n        };\n\n        _modelRegistry[ modelType ] = modelTypeGroup;\n    }\n\n    var modelName = _.get( modelObj, modelNamePath );\n    var modelId = _.get( modelObj, modelIdPath );\n\n    var modelStatus = modelTypeGroup[ modelName ];\n\n    if( modelStatus ) {\n        if( modelStatus.members[ modelId ] ) {\n            delete modelStatus.members[ modelId ];\n        } else {\n            logger.info( 'unregisterModel: Model not found in the registry: ' + modelObj );\n        }\n    }\n\n    if( _debug_logModelLifeCycle ) {\n        logger.info( _buildStatusString( 'Destroyed', modelType, modelObj ) );\n    }\n};\n\n/**\n * ---------------------------------------------------------------------------<BR>\n * Property & Function definition complete....Finish initialization. <BR>\n * ---------------------------------------------------------------------------<BR>\n */\nvar urlAttrs = browserUtils.getUrlAttributes();\n\n_debug_logModelLifeCycle = urlAttrs.logModelLifeCycle !== undefined;\n\nexports = {\n    registerModel,\n    unregisterModel\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
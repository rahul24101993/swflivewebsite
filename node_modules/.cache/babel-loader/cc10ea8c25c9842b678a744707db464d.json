{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwChipListService.js\";\nimport AwChip from 'viewmodel/AwChipViewModel';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awChipListRenderFunction = props => {\n  const {\n    dataprovider,\n    buttonType,\n    action,\n    uiIconAction,\n    chipCondition,\n    viewModel\n  } = props;\n  const {\n    data\n  } = viewModel;\n  let vmCollectionObj = dataprovider.vmCollectionObj;\n  let loadedVMO = vmCollectionObj && vmCollectionObj.vmCollection.loadedVMObjects || [];\n\n  if (_.isEmpty(loadedVMO)) {\n    return;\n  }\n\n  let subscriptions = data.subscriptions;\n  let subscribedEventsStr = getEventSubscribtionsList(subscriptions);\n\n  if (!subscribedEventsStr.includes(`${dataprovider.name}.reset`)) {\n    data.subscriptions.push(eventBus.subscribe(`${dataprovider.name}.reset`, () => {\n      initChipList(props);\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aw-layout-flexbox aw-widgets-chipList\",\n    children: loadedVMO.map((chipModel, index) => {\n      return /*#__PURE__*/_jsxDEV(AwChip, {\n        chip: chipModel,\n        buttonType: buttonType,\n        action: action,\n        uiIconAction: uiIconAction,\n        chipCondition: chipCondition\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 29\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\nexport const initChipList = props => {\n  const {\n    dataprovider\n  } = props;\n\n  if (dataprovider && dataprovider.resetDataProvider) {\n    dataprovider.resetDataProvider();\n  }\n};\nexport const updateDefaultSelection = dataProvider => {\n  let selected = _.filter(dataProvider.vmCollectionObj.vmCollection.loadedVMObjects, {\n    selected: true\n  });\n\n  dataProvider.selectionModel.setSelection(selected);\n};\n\nconst getEventSubscribtionsList = subscriptions => {\n  let subscribedEventsStr = [];\n\n  if (subscriptions.length !== 0) {\n    subscriptions.map(eventSubscribed => {\n      subscribedEventsStr.push(eventSubscribed.topic);\n    });\n  }\n\n  return subscribedEventsStr;\n};\n\nexport const destroyIndicatorSubscription = subscriptions => {\n  if (subscriptions && subscriptions.length > 0) {\n    subscriptions.forEach(subscription => {\n      eventBus.unsubscribe(subscription);\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwChipListService.js"],"names":["awChipListRenderFunction","props","viewModel","data","vmCollectionObj","dataprovider","loadedVMO","_","subscriptions","subscribedEventsStr","getEventSubscribtionsList","name","initChipList","chipCondition","updateDefaultSelection","dataProvider","selected","eventSubscribed","destroyIndicatorSubscription","subscription","eventBus"],"mappings":";AAAA,OAAA,MAAA,MAAA,2BAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,CAAA,MAAA,QAAA;;AAEA,OAAO,MAAMA,wBAAwB,GAAKC,KAAF,IAAa;EACjD,MAAM;IAAA,YAAA;IAAA,UAAA;IAAA,MAAA;IAAA,YAAA;IAAA,aAAA;IAAiEC;EAAjE,IAAN,KAAA;EACA,MAAM;IAAEC;EAAF,IAAN,SAAA;EAEA,IAAIC,eAAe,GAAGC,YAAY,CAAlC,eAAA;EACA,IAAIC,SAAS,GAAGF,eAAe,IAAIA,eAAe,CAAfA,YAAAA,CAAnBA,eAAAA,IAAhB,EAAA;;EAEA,IAAIG,CAAC,CAADA,OAAAA,CAAJ,SAAIA,CAAJ,EAA6B;IACzB;EACH;;EAED,IAAIC,aAAa,GAAGL,IAAI,CAAxB,aAAA;EACA,IAAIM,mBAAmB,GAAGC,yBAAyB,CAAnD,aAAmD,CAAnD;;EAEA,IAAI,CAACD,mBAAmB,CAAnBA,QAAAA,CAA+B,GAAEJ,YAAY,CAACM,IAAnD,QAAKF,CAAL,EAAoE;IAChEN,IAAI,CAAJA,aAAAA,CAAAA,IAAAA,CAAyB,QAAQ,CAAR,SAAA,CAAqB,GAAEE,YAAY,CAACM,IAApC,QAAA,EAAkD,MAAM;MAC7EC,YAAY,CAAZA,KAAY,CAAZA;IADJT,CAAyB,CAAzBA;EAGH;;EAED,OAAA,aACI,OAAA,CAAA,KAAA,EAAA;IAAK,SAAS,EAAd,uCAAA;IAAA,QAAA,EACU,SAAS,CAAT,GAAA,CAAe,CAAA,SAAA,EAAA,KAAA,KAAwB;MACrC,OAAA,aACQ,OAAA,CAAA,MAAA,EAAA;QACI,IAAI,EADR,SAAA;QAEI,UAAU,EAFd,UAAA;QAGI,MAAM,EAHV,MAAA;QAII,YAAY,EAJhB,YAAA;QAMI,aAAa,EAAEU;MANnB,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA;QAAA,QAAA,EAAA,YAAA;QAAA,UAAA,EAAA,EAAA;QAAA,YAAA,EAAA;MAAA,CAAA,EADR,IACQ,CADR;IADF,CAAA;EADV,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADJ,IACI,CADJ;AApBG,CAAA;AAuCP,OAAO,MAAMD,YAAY,GAAKX,KAAF,IAAa;EACrC,MAAM;IAAEI;EAAF,IAAN,KAAA;;EACA,IAAIA,YAAY,IAAIA,YAAY,CAAhC,iBAAA,EAAqD;IACjDA,YAAY,CAAZA,iBAAAA;EACH;AAJE,CAAA;AAOP,OAAO,MAAMS,sBAAsB,GAAKC,YAAF,IAAoB;EACtD,IAAIC,QAAQ,GAAG,CAAC,CAAD,MAAA,CAAUD,YAAY,CAAZA,eAAAA,CAAAA,YAAAA,CAAV,eAAA,EAAqE;IAAEC,QAAQ,EAAE;EAAZ,CAArE,CAAf;;EACAD,YAAY,CAAZA,cAAAA,CAAAA,YAAAA,CAAAA,QAAAA;AAFG,CAAA;;AAKP,MAAML,yBAAyB,GAAKF,aAAF,IAAqB;EACnD,IAAIC,mBAAmB,GAAvB,EAAA;;EACA,IAAID,aAAa,CAAbA,MAAAA,KAAJ,CAAA,EAAiC;IAC7BA,aAAa,CAAbA,GAAAA,CAAqBS,eAAF,IAAuB;MACtCR,mBAAmB,CAAnBA,IAAAA,CAA0BQ,eAAe,CAAzCR,KAAAA;IADJD,CAAAA;EAGH;;EACD,OAAA,mBAAA;AAPJ,CAAA;;AAUA,OAAO,MAAMU,4BAA4B,GAAKV,aAAF,IAAqB;EAC7D,IAAIA,aAAa,IAAIA,aAAa,CAAbA,MAAAA,GAArB,CAAA,EAAgD;IAC5CA,aAAa,CAAbA,OAAAA,CAAuBW,YAAY,IAAI;MACnCC,QAAQ,CAARA,WAAAA,CAAAA,YAAAA;IADJZ,CAAAA;EAGH;AALE,CAAA","sourcesContent":["import AwChip from 'viewmodel/AwChipViewModel';\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\n\nexport const awChipListRenderFunction = ( props ) => {\n    const { dataprovider, buttonType, action, uiIconAction, chipCondition, viewModel } = props;\n    const { data } = viewModel;\n\n    let vmCollectionObj = dataprovider.vmCollectionObj;\n    let loadedVMO = vmCollectionObj && vmCollectionObj.vmCollection.loadedVMObjects || [];\n\n    if( _.isEmpty( loadedVMO ) ) {\n        return;\n    }\n\n    let subscriptions = data.subscriptions;\n    let subscribedEventsStr = getEventSubscribtionsList( subscriptions );\n\n    if( !subscribedEventsStr.includes( `${dataprovider.name}.reset` ) ) {\n        data.subscriptions.push( eventBus.subscribe( `${dataprovider.name}.reset`, () => {\n            initChipList( props );\n        } ) );\n    }\n\n    return (\n        <div className='aw-layout-flexbox aw-widgets-chipList'>\n                { loadedVMO.map( ( chipModel, index ) => {\n                    return (\n                            <AwChip\n                                chip={chipModel}\n                                buttonType={buttonType}\n                                action={action}\n                                uiIconAction={uiIconAction}\n                                key={index}\n                                chipCondition={chipCondition}>\n                            </AwChip>\n                        );\n                } )}\n            </div>\n\n    );\n};\n\nexport const initChipList = ( props ) => {\n    const { dataprovider } = props;\n    if( dataprovider && dataprovider.resetDataProvider ) {\n        dataprovider.resetDataProvider();\n    }\n};\n\nexport const updateDefaultSelection = ( dataProvider ) => {\n    let selected = _.filter( dataProvider.vmCollectionObj.vmCollection.loadedVMObjects, { selected: true } );\n    dataProvider.selectionModel.setSelection( selected );\n};\n\nconst getEventSubscribtionsList = ( subscriptions ) => {\n    let subscribedEventsStr = [];\n    if( subscriptions.length !== 0 ) {\n        subscriptions.map( ( eventSubscribed ) => {\n            subscribedEventsStr.push( eventSubscribed.topic );\n        } );\n    }\n    return subscribedEventsStr;\n};\n\nexport const destroyIndicatorSubscription = ( subscriptions ) => {\n    if( subscriptions && subscriptions.length > 0 ) {\n        subscriptions.forEach( subscription => {\n            eventBus.unsubscribe( subscription );\n        } );\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import AwInclude from'viewmodel/AwIncludeViewModel';import AwPopup from'viewmodel/AwPopupViewModel';import parsingUtils from'js/parsingUtils';import _ from'lodash';import utils from'js/popupUtils';import Debug from'debug';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const trace=new Debug('AwExtendedTooltip');const isJSONObject=jsonString=>{try{JSON.parse(jsonString);if(typeof jsonString==='string'&&jsonString.length===0){return false;}}catch(e){return false;}return true;};export const awExtendedTooltipRenderFunction=props=>{let{extendedTooltipPopup}=props.actions;let{extTooltipData,extendedTooltip,extendedTooltipContext,reference}=props;const initializer=()=>{trace('initialize tooltip with props: ',props);// set default view\nextendedTooltip=extendedTooltip||'ExtendedTooltipDefault';if(_.isString(extendedTooltip)&&extendedTooltip.indexOf('.')===-1&&!isJSONObject(extendedTooltip)){extendedTooltip={view:extendedTooltip};}else if(_.isString(extendedTooltip)&&extendedTooltip.indexOf('.')>0){let key=extendedTooltip.split('.')[1];extendedTooltip=_.get(extTooltipData,key).view?_.get(extTooltipData,key):null;}if(extendedTooltip.extendedTooltipContent){let content=extendedTooltip.extendedTooltipContent;if(extTooltipData&&_.startsWith(content,'{{')){let viewModelProp=parsingUtils.getStringBetweenDoubleMustaches(content);content=_.get({data:extTooltipData},viewModelProp);}extendedTooltip.content=content;}// init subPanelContext, subPanelContext always should be an object.\n// there are cases where application(ACE) pass in string values due to wrong usage.\nif(!extendedTooltip.subPanelContext&&extendedTooltipContext){// retrieve context by get, so that we can support any level path access: eg: data.tooltips.tooltip1\nlet contextValue=extendedTooltipContext;if(typeof contextValue==='object'){// extendedTooltip.subPanelContext = contextValue || {};\n}}// return Promise.resolve();\n};// modify ref belongs to side effect, should wrap with useEffect\n// //override placement based on dynamic configuration\n// extendedTooltipPopup.reference.current = prop.reference.current;\n// extendedTooltipPopup.userOptions.current = extendedTooltipOptions;\nconst getContent=()=>{if(reference.current!==null){utils.removeNativeTitle(reference.current);}extendedTooltipPopup.options&&Object.assign(extendedTooltipPopup.options,utils.tooltipAdapteOption(extendedTooltipPopup.options,reference.current));if(!extendedTooltipPopup.options.placement){extendedTooltipPopup.options.placement='left';}initializer();const{view,content}=extendedTooltip;let result=content;if(view){result=/*#__PURE__*/_jsx(AwInclude,{name:view,subPanelContext:extendedTooltipContext});}return/*#__PURE__*/_jsx(AwPopup,{...extendedTooltipPopup.options,children:/*#__PURE__*/_jsxs(\"div\",{className:\"sw-column aw-popup-tooltipContainer \".concat(!view?'font-bold new-line':''),children:[\" \",result,\" \"]})});};return extendedTooltipPopup.open&&getContent();};","map":null,"metadata":{},"sourceType":"module"}
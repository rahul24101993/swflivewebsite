{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* global San */ /**\n * This is the analytics service. It manages enablement & logging of messages to a backend analytics logging server.\n *\n * For more information about Siemens Analytics:\n * <ul>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:user_information</li>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:devguide:javascript_client</li>\n * </ul>\n *\n * @module js/splmAnalyticsService\n */import _ from'lodash';import Debug from'debug';import eventBus from'js/eventBus';import cfgSvc from'js/configurationService';import AwPromiseService from'js/awPromiseService';import awConfiguration from'js/awConfiguration';import AwStateService from'js/awStateService';/**\n * This flag indicates if the user was authenticated in this page instead of re-using an authenication from a\n * previous page load.\n *\n * @type {boolean}\n * @private\n */var _authenticated=false;/**\n * This array holds a list of event objects to be logged into the SAN server.\n *\n * @type {Array}\n * @private\n */var _sanLogEventList=[];/**\n * Id of the user logged in to the current session.\n *\n * @type {string}\n * @private\n */var _userId='';/**\n * Vendor Id from the license.\n *\n * @type {string}\n * @private\n */var _vendorId='';/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type {boolean}\n * @private\n */var _enabled=false;/**\n * The license level of the currently logged in user\n *\n * @type {string}\n * @private\n */var _licenseLevel;var _autoTestMode=false;var trace=new Debug('splmAnalyticsService');var exports={};var _themeWhiteList=[];var _commandsWhitelist=[];var _pageWhitelist=[];var _useInternalServer;var _isIdle=false;var MAX_PARTIAL_ERROR_COUNT=10;/**\n * @ignore\n */export let setAutoTestMode=function(){_autoTestMode=true;};/**\n * This is a test support method to reset the service to default values. It should not be used outside of unit\n * testing.\n * @ignore\n */export let reset=function(){_authenticated=false;_enabled=false;};/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */export let authenticationSuccessful=function(){_authenticated=true;};/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n */export let setPreInitData=function(preInitData){_userId=preInitData.user_id;_vendorId=preInitData.vendor_id;if(preInitData.user_license_level){_licenseLevel=preInitData.user_license_level;}};/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */export let enable=function(useInternalServer,repo){if(_autoTestMode){_enabled=false;return undefined;}_useInternalServer=useInternalServer;// load Siemens Analytics (San)\n/** revisitme Charu\n     * Added lib/piwik/analytics under src to resolve the path\n     */return AwPromiseService.instance(function(resolve){import('../lib/piwik/analytics').then(function(){if(_authenticated){var solution;AwPromiseService.instance.all([cfgSvc.getCfg('OOTB_Verification').then(function(OOTB_Verification){_pageWhitelist=OOTB_Verification.locations;_commandsWhitelist=OOTB_Verification.commands;_themeWhiteList=OOTB_Verification.themes;}),cfgSvc.getCfg('solutionDef').then(function(solutionDef){solution=solutionDef;})]).then(function(){cfgSvc.getCfg('versionConstants').then(function(versionConstants){// initialize San with solution id & client version\n// - passing undefined if not using internal server based upon API contract from San\n// The user id and the customer/vendor id has to be set before the San layer is initialized.\n_initializeSan(useInternalServer,repo,solution,versionConstants);_enabled=true;localStorage.setItem('AW_SAN_OPTOUT','false');localStorage.setItem('AW_SAN_DO_DISABLE','false');// If Analytics was previously disabled, enabled it now.\nSan.disable(false);// Subscribe to other events for logging.\n_subscribeForEvents('selectFilter');_idleSetup();eventBus.subscribe('idle',_getResolutionZoomInfo);// Log the SOA errors during Idle time only.\n// This can be done only after the _idleSetup() call.\n_subscribeForErrors();eventBus.subscribe('idle',_logEventDataAtIdle);resolve();});});}else{resolve();}});});};/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */export let disable=function(useInternalServer,encVendId,repo){_enabled=false;if(localStorage.getItem('AW_SAN_OPTOUT')==='true'){// If we know that the user opted out and we have already processed it.\n// Nothing more to do.\nreturn;}/** revisitme Charu\n     * Added lib/piwik/analytics under src to resolve the path\n     */import('../lib/piwik/analytics').then(function(){if(_authenticated){var solution;cfgSvc.getCfg('solutionDef').then(function(solutionDef){solution=solutionDef;return cfgSvc.getCfg('versionConstants');}).then(function(versionConstants){// Initialize San with solution id & client version\n_initializeSan(useInternalServer,repo,solution,versionConstants);// If Analytics was previously enabled, we will log one \"participating=false\" event.\n// San.logEvent( \"participating=false\") call is not working if\n// San.disable(true) is called right after the San.logEvent().\n// So, we call San.disable(true), during the subsequent login.\nvar doDisable=localStorage.getItem('AW_SAN_DO_DISABLE');if(doDisable===null||doDisable==='false'){var participatingProp={Participating:'false'};if(encVendId){participatingProp.Site=encVendId;}_enabled=true;San.disable(false);exports.logEvent(solution.solutionName,participatingProp);exports.logProductInfo('Participating','Opt-Out');_enabled=false;localStorage.setItem('AW_SAN_DO_DISABLE','true');// San.disable( true );\n// Calling San.disable(true) here prevents the above logEvent() call from going through.\n}else if(doDisable==='true'){//\n_enabled=false;San.disable(true);localStorage.setItem('AW_SAN_OPTOUT','true');localStorage.setItem('AW_SAN_DO_DISABLE','false');}});}});};/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */export let logEvent=function(name,property){if(_enabled){var eventObject=_.isPlainObject(property)?JSON.stringify(property):property;San.logEvent(name,eventObject);trace('LogEvent',name,property);}};/**\n * Log Page Load Events.\n *\n * @ignore\n */export let logPageViewEvent=function(){AwStateService.instance.transitionHooks.onSuccess({},function(transition){if(_enabled){var toState=transition.to();var targetPageName;targetPageName=toState.name.substr(toState.name.lastIndexOf('_')+1);San.logPageView(targetPageName);trace('Page View',targetPageName);}});};/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */export let logProductInfo=function(name,property){if(_enabled){var productObject=_.isPlainObject(property)?JSON.stringify(property):property;San.addProductInfo(name,productObject);trace('LogProductInfo',name,property);}};/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */export let logCommands=function(data){if(_enabled){cfgSvc.getCfg('solutionDef').then(function(solutionDef){var solutionName=solutionDef.solutionName.concat(' ').concat('Commands');// Convert the \"san\" prefixed names to human readable names.\nif(_.isPlainObject(data)&&data.hasOwnProperty('sanCommandId')){var readableKeyData={};_.forEach(data,function(value,key){switch(key){case'sanCommandId':readableKeyData['Command Id']=exports.publishableValue(value,'COMMAND');break;case'sanCommandTitle':if(exports.publishableValue(data.sanCommandId,'COMMAND')===data.sanCommandId){readableKeyData['Command Title']=value;}else{readableKeyData['Command Title']=exports.publishableValue(data.sanCommandId,'COMMAND');}break;case'sanViewMode':readableKeyData['View Mode']=value;break;case'sanPrimaryPercentage':readableKeyData['Primary Percentage']=value;break;case'sanTileAction':readableKeyData['Tile Action']=value;break;case'sanCmdLocation':readableKeyData['Command Location']=value;break;case'sanPixelSize':readableKeyData['Pixel Size']=value;break;case'sanWidth':readableKeyData.width=value;break;case'sanHeight':readableKeyData.height=value;break;case'sanCommandData':readableKeyData.cmdData=value;break;default:readableKeyData[key]=value;}});}if(_licenseLevel&&readableKeyData){readableKeyData['User License Level']=_licenseLevel;}// Now, log the data.\nvar keyData=_.isPlainObject(readableKeyData)?JSON.stringify(readableKeyData):readableKeyData;San.logEvent(solutionName,keyData);trace(solutionName,readableKeyData);});}};/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */export let publishableValue=function(artifactName,artifactType){if(_useInternalServer){return artifactName;}if(artifactType.toUpperCase()==='THEME'){if(_themeWhiteList&&_themeWhiteList.length>0){if(_themeWhiteList.indexOf(artifactName)<0){return'Customer';}}else{return'Unknown';}}else if(artifactType.toUpperCase()==='COMMAND'){if(artifactName==='Tile'||artifactName.startsWith('action_')){return artifactName;}if(_commandsWhitelist&&_commandsWhitelist.length>0){if(_commandsWhitelist.indexOf(artifactName)<0){return'Customer';}}else{return'Unknown';}}else if(artifactType.toUpperCase()==='PAGE'){if(_pageWhitelist&&_pageWhitelist.length>0){if(_pageWhitelist.indexOf(artifactName)<0){return'Customer';}}else{return'Unknown';}}return artifactName;};/**\n * This method logs all the data stored by _sanLogEventList in FIFO during Idle time.\n *\n */function _logEventDataAtIdle(){if(_enabled&&_isIdle){while(_sanLogEventList.length>0){var logEventData=_sanLogEventList.shift();San.logEvent(logEventData.solutionName,logEventData.jsonData);trace('Idle',logEventData.solutionName,logEventData.jsonData);}}}/**\n * This method should be used by the client to log Errors to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - Partial Error data from a SOA response.\n */function _logErrors(data){setTimeout(function(){if(_enabled){var soaPartialError=data.sanPartialErrors;var serviceName='unknown';var operationName='unknown';// teamcenter.com, awp0, ics1 are internal SOAs that we want to report.\n// Customer SOAs use IDs with numerals > 3 - for these we are not reporting the names.\nif(/teamcenter.com/i.test(data.sanQName)){serviceName=data.sanServiceName;operationName=data.sanOperationName;}else{// Get the \"awp0\" from \"http://awp0.com/Schemas/Internal/AWS2/2016-03/...\"\n// If that has a number > 3, it is a customer SOA.\nvar templatePrefix=/:\\/\\/(.*)\\..*\\//i.exec(data.sanQName);if(templatePrefix.length>1&&/[0123]/.test(templatePrefix[1])){serviceName=data.sanServiceName;operationName=data.sanOperationName;}else{serviceName='Customer';operationName='Customer';}}cfgSvc.getCfg('solutionDef').then(function(solutionDef){var solutionName=solutionDef.solutionName.concat(' ').concat('Errors');var partial_error_count=0;soaPartialError.forEach(function(error,errIdx){if(partial_error_count>MAX_PARTIAL_ERROR_COUNT){return;}error.errorValues.forEach(function(errorValue,evIdx){// Log only error level 3 and above.\n// Error levels below 3 are info/warning categories.\nif(errorValue.level<3){return;}var errorData={};// Report error Code and Level as string values, instead of int.\n// Analytics site to generate reports such as \"sum\", \"average\", etc. for int.\n// Sending it as string ensures that we can count the number of occurrences of a particular error code, etc.\nerrorData.Code=String(errorValue.code);errorData.Level=String(errorValue.level);errorData['Stack Index']=evIdx;errorData['Error Set']=errIdx;errorData['Service Name']=serviceName;errorData['Operation Name']=operationName;errorData['Log Correlation ID']=data.sanLogCorrelationID;var LogEventData={};LogEventData.solutionName=solutionName;LogEventData.jsonData=JSON.stringify(errorData);_sanLogEventList.push(LogEventData);});partial_error_count++;});});}},0,data);return;}/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n */function _subscribeForErrors(){// Log the Search Filter events in the \"left side\" Navigation panel.\neventBus.subscribeOnChannel({channel:'SAN_Events',topic:'aw-command-logErrros',callback:_logErrors});}/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n * @param {String} eventName - name of an event to subscribe to.\n */function _subscribeForEvents(eventName){// Log the Search Filter events in the \"left side\" Navigation panel.\neventBus.subscribe(eventName,function(data){var property={};if(data.source&&data.categoryName){property['Command Id']=data.filterType;property['Command Location']=data.source;// If the user enables the filter in the filter panel,\n// the \"filterSelected\" field is coming in as \"false\"\nif(data.hasOwnProperty('filterSelected')){if(data.filterSelected===true){property['Command Location']=data.source.concat(' OFF');}else{property['Command Location']=data.source.concat(' ON');}}}if(!_.isEmpty(property)){exports.logCommands(property);}});}/**\n * Records resolution and zoom information and logs it to Siemens analytics\n *\n */function _getResolutionZoomInfo(){var resolutionZoomData=JSON.parse(localStorage.getItem('sanResolutionZoom'));var new_resolutionZoomData={sanCommandId:'ResolutionZoomData',sanCommandTitle:'Resolution / Zoom Info',width:parseInt(window.innerWidth),height:parseInt(window.innerHeight),zoom:Math.round(window.devicePixelRatio*100)};// if we have a resolution from last time...\nif(resolutionZoomData){// if the resolution has changed since the last time we reported it...\nif(!(resolutionZoomData.width===new_resolutionZoomData.width&&resolutionZoomData.height===new_resolutionZoomData.height&&resolutionZoomData.zoom===new_resolutionZoomData.zoom)){localStorage.setItem('sanResolutionZoom',JSON.stringify(new_resolutionZoomData));exports.logCommands(new_resolutionZoomData);}}else{// this is the first time reporting this info, store it in localStorage and publish\nlocalStorage.setItem('sanResolutionZoom',JSON.stringify(new_resolutionZoomData));exports.logCommands(new_resolutionZoomData);}}/**\n * This waits for either a \"progress.start\" or \"progress.end\" event to come in and once they do, it starts up an idle event publisher.\n */function _idleSetup(){/**\n     * @param {String|null} endPoint - optional endPoint of the progress event\n     */function processEvent(endPoint){if(!/\\/getUnreadMessages$/.test(endPoint)){_isIdle=false;eventBus.unsubscribe(progressStartListener);eventBus.unsubscribe(progressEndListener);_startupIdleEventPublisher();}}var progressStartListener=eventBus.subscribe('progress.start',processEvent);var progressEndListener=eventBus.subscribe('progress.end',processEvent);}/**\n * Sets up an Idle event publisher. This publisher uses a burndown timer which checks how long it has been since a \"progress.end\" or \"progress.start\"\n * event has come in. If one of those events come in, the burndown timer is restarted. Once the burndown exceeds its timer it will fire a single \"idle\"\n * event and then resume listening for a \"progress.end\"/\"progress.start\" event.\n */function _startupIdleEventPublisher(){var idleBurndown;/**\n     */function processEvent(){_isIdle=false;clearTimeout(idleBurndown);idleBurndown=_setupBurndownTimer(progressStartListener,progressEndListener);}var progressStartListener=eventBus.subscribe('progress.start',processEvent);var progressEndListener=eventBus.subscribe('progress.end',processEvent);idleBurndown=_setupBurndownTimer(progressStartListener,progressEndListener);}/**\n * Creates the burndown timer\n *\n * @param {Object} progressStartListener - eventBus subscription handle\n * @param {Object} progressEndListener - eventBus subscription handle\n * @return {Number} A Number, representing the ID value of the timer that is set. Use this value with the clearTimeout() method to cancel the timer.\n */function _setupBurndownTimer(progressStartListener,progressEndListener){var idle_cutoff_seconds=30;return setTimeout(function(){eventBus.publish('idle',{});_idleSetup();eventBus.unsubscribe(progressStartListener);eventBus.unsubscribe(progressEndListener);},idle_cutoff_seconds*1000);}/**\n * Initialize the SAN SDK\n *\n * @param {Boolean} useInternalServer - boolean indicating if the data should go to the internal site or external site\n * @param {String} repo - optional parameter which can be used to overwrite the predefined repo, used for redirecting to TcX repo\n * @param {Object} solution - solution object used to define the application name\n * @param {Object} versionConstants - object used to define the application version\n */function _initializeSan(useInternalServer,repo,solution,versionConstants){San.setUserIdentifier(_userId);San.setCustomerIdentifier(_vendorId);var solutionId=repo?repo:solution.solutionId;var fullVersion=versionConstants.name+'@'+versionConstants.version+' ('+versionConstants.description+')';// pull language from awSession in localStorage and convert to the object that SAN is expecting.\nvar applicationLanguage='';var sanApplicationLanguage='';try{applicationLanguage=JSON.parse(localStorage.getItem('awSession:/')).locale;}catch(error){try{applicationLanguage=localStorage.getItem('locale:/');}catch(error){applicationLanguage='';}}// Several AW locales like de are not in the format that SAN is expecting. This if block updates them to the proper format.\nif(applicationLanguage&&applicationLanguage.length===5){sanApplicationLanguage='applicationLanguage_'+applicationLanguage.toUpperCase();}else if(applicationLanguage&&applicationLanguage.length===2){sanApplicationLanguage='applicationLanguage_'+applicationLanguage.toUpperCase()+'_'+applicationLanguage.toUpperCase();}else{sanApplicationLanguage='applicationLanguageNone';}// if for some reason, the language value lookup fails, default to None\n// Languages which AW supports that SAN does not would be corrected here.\nif(San[sanApplicationLanguage]){sanApplicationLanguage=San[sanApplicationLanguage];}else{sanApplicationLanguage=San.applicationLanguageNone;}// status and err_message are left for debugger use, not to be displayed to customer via console, etc\nlet status=San.initialize(solutionId,versionConstants.version,fullVersion,sanApplicationLanguage,useInternalServer||undefined,awConfiguration.get('baseUrl')+'/lib/piwik/piwik.js');let err_message=San.getLastErrorMessage();}exports={setAutoTestMode,reset,authenticationSuccessful,setPreInitData,enable,disable,logEvent,logPageViewEvent,logProductInfo,logCommands,publishableValue};export default exports;","map":null,"metadata":{},"sourceType":"module"}
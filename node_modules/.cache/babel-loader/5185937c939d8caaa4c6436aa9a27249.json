{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cfgSvc from 'js/configurationService';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxSvc from 'js/appCtxService';\nimport awIconService from 'js/awIconService';\nimport _ from 'lodash';\nimport 'js/workspaceInitService';\n/**\n * Cached reference to the various AngularJS and AW services.\n */\n\nvar exports = {};\n/**\n * Get all workspaces\n *\n * @return {Promise} Resolved with workspace list\n */\n\nexport let getAllWorkspaces = function () {\n  var emptyFilterList = {};\n  emptyFilterList.workspacesViewModel = '[]';\n  return exports.getWorkspaces(emptyFilterList, true);\n};\n/**\n * Get filtered workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @return {Promise} Resolved with workspace list\n */\n\nexport let getFilteredWorkspaces = function (response) {\n  return exports.getWorkspaces(response, false);\n};\n/**\n * Get available commands for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} command list\n */\n\nexport let getWorkspaceCommands = function (activeWorkSpaceId) {\n  var inKey = 'includedCommands';\n  var exKey = 'excludedCommands';\n  return cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    var workspaceCommands = [];\n    var activeWorkspace = {};\n\n    if (workspaceCfg) {\n      activeWorkspace = _.get(workspaceCfg, activeWorkSpaceId);\n    }\n\n    workspaceCommands[inKey] = activeWorkspace.includedCommands;\n    workspaceCommands[exKey] = activeWorkspace.excludedCommands;\n    return workspaceCommands;\n  });\n};\n/**\n * Get available commands for the given workspace\n *\n * @param {String} commands - commands on page\n * @return {Array} filter command list\n */\n\nexport let getActiveWorkspaceCommands = function (commands) {\n  var workspaceDefinition = appCtxSvc.getCtx('workspace');\n\n  if (!workspaceValidationService.isExclusiveWorkspace(workspaceDefinition)) {\n    return commands;\n  }\n\n  var inclusiveCmds = appCtxSvc.getCtx('workspace.includedCommands');\n\n  if (inclusiveCmds && inclusiveCmds.length === 0) {\n    return null;\n  }\n\n  if (inclusiveCmds !== undefined) {\n    var inclusiveCmdsOverlay = _.filter(commands, function (cmdOverlay) {\n      return inclusiveCmds.includes(cmdOverlay.commandId);\n    });\n  }\n\n  var includedcmds = inclusiveCmds === undefined ? commands : inclusiveCmdsOverlay;\n  var exclusiveCmds = appCtxSvc.getCtx('workspace.excludedCommands');\n\n  if (exclusiveCmds !== undefined) {\n    var cmdDiffArray = [];\n    cmdDiffArray = inclusiveCmdsOverlay && inclusiveCmdsOverlay.length > 0 ? inclusiveCmdsOverlay : includedcmds;\n    return cmdDiffArray.filter(cmdOverlay => !exclusiveCmds.includes(cmdOverlay.commandId));\n  }\n\n  return includedcmds;\n};\n/**\n * Get available context configuration for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} page list\n */\n\nexport let getAvailableContexts = function (activeWorkSpaceId) {\n  return cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    var activeWorkspace = {};\n\n    if (workspaceCfg) {\n      activeWorkspace = _.get(workspaceCfg, activeWorkSpaceId);\n    }\n\n    return activeWorkspace.availableContextConfigurations;\n  });\n};\n/**\n * Get available navigation configuration for the given workspace\n * @param {Object} activeWorkSpaceId - active workspace ID based on wworkspace\n * @return {Array} availableNavigations -navigation list\n */\n\nexport let getAvailableNavigations = function (activeWorkSpaceId) {\n  var navigationConfigs;\n  var availableNavigations = [];\n  return AwPromiseService.instance.all([cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    navigationConfigs = _.cloneDeep(workspaceCfg);\n    return true;\n  })]).then(function () {\n    if (navigationConfigs) {\n      _.forEach(navigationConfigs, function (workspaceDefn) {\n        if (activeWorkSpaceId === workspaceDefn.workspaceId && workspaceDefn.availableNavigations) {\n          availableNavigations = workspaceDefn.availableNavigations;\n        }\n\n        if (availableNavigations.length > 0) {\n          availableNavigations.sort();\n        }\n      });\n    }\n\n    return availableNavigations;\n  });\n};\n/**\n * Get available workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @param {Boolean} returnAll - true for getting all workspaces, false to filter workspaces\n * @return {Promise} Resolved with workspace list\n */\n\nexport let getWorkspaces = function (response, returnAll) {\n  var workspace = {};\n  var responseWorkspaceList = JSON.parse(response.workspacesViewModel);\n  workspace.workspaceList = [];\n  workspace.workspaceCount = 0;\n  var viewModel;\n  return cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n    return cfgSvc.getCfg('workspace');\n  }).then(function (workspaceCfg) {\n    viewModel = _.cloneDeep(workspaceCfg);\n    var workspaceNames = [];\n\n    _.forEach(viewModel, function (workspaceDefn) {\n      // Check whether it is a valid workspace definition. If so, lookup the workspace name\n      if (workspaceDefn.workspaceName) {\n        workspaceNames.push(workspaceDefn.workspaceName);\n      }\n    });\n\n    return exports.getMultipleLocalizedText(workspaceNames);\n  }).then(function (workspaceNameMap) {\n    _.forEach(viewModel, function (workspaceDefn) {\n      // Proceed only if this is a valid workspace\n      if (workspaceDefn.workspaceId) {\n        if (returnAll || _.includes(responseWorkspaceList, workspaceDefn.workspaceId)) {\n          var workspaceObj = {};\n          workspaceObj.uid = workspaceDefn.workspaceId;\n          workspaceObj.props = {};\n          var workspaceName;\n\n          if (workspaceDefn.workspaceName.key) {\n            workspaceName = workspaceNameMap[workspaceDefn.workspaceName.key];\n          } else {\n            workspaceName = workspaceDefn.workspaceName;\n          }\n\n          var viewProp = uwPropertySvc.createViewModelProperty('object_string', 'object_string', 'string', workspaceDefn.workspaceId, [workspaceName]);\n          workspaceObj.props[viewProp.propertyName] = viewProp;\n          workspaceObj.cellHeader1 = workspaceName;\n          workspaceObj.cellHeader2 = workspaceDefn.workspaceId;\n          workspaceObj.modelType = 'Awp0Workspace';\n          workspaceObj.typeIconURL = awIconService.getTypeIconFileUrl(workspaceObj); // Fake clear editable states for this mock vmo\n\n          workspaceObj.clearEditiableStates = function () {\n            return undefined;\n          };\n\n          workspace.workspaceList.push(workspaceObj);\n        }\n      }\n    });\n\n    workspace.workspaceCount = workspace.workspaceList.length;\n    workspace.workspaceList = _.sortBy(workspace.workspaceList, ['cellHeader1']);\n    return workspace;\n  });\n};\n/**\n * Reload page\n */\n\nexport let reloadPage = function () {\n  location.reload(false);\n};\n/**\n * Get available page\n *\n * @return {Array} page list\n */\n\nexport let getAvailablePages = function () {\n  var generatedRoutes;\n  var viewModel;\n  return AwPromiseService.instance.all([cfgSvc.getCfg('workspace').then(function (workspaceCfg) {\n    viewModel = _.cloneDeep(workspaceCfg);\n    return true;\n  }), cfgSvc.getCfg('states').then(function (states) {\n    generatedRoutes = states;\n    return true;\n  })]).then(function () {\n    var workspace = {};\n    workspace.pageList = [];\n    workspace.pageCount = 0;\n\n    if (viewModel) {\n      _.forEach(viewModel, function (workspaceDefn) {\n        var availablePages = [];\n\n        if (workspaceDefn.availablePages && workspaceValidationService.isExclusiveWorkspace(workspaceDefn)) {\n          availablePages = workspaceDefn.availablePages;\n        } else if (!workspaceValidationService.isExclusiveWorkspace(workspaceDefn)) {\n          availablePages = Object.keys(generatedRoutes);\n        }\n\n        availablePages.sort();\n\n        _.forEach(availablePages, function (availablePage) {\n          var pageObj = {};\n          pageObj.props = {};\n          pageObj.uid = availablePage;\n          var viewProp = uwPropertySvc.createViewModelProperty('object_string', 'object_string', 'string', availablePage, [availablePage]);\n          pageObj.props[viewProp.propertyName] = viewProp; // Fake clearEditable States\n\n          pageObj.clearEditiableStates = function () {\n            return undefined;\n          };\n\n          if (_.has(generatedRoutes, availablePage)) {\n            var routePageObject = generatedRoutes[availablePage];\n            pageObj.cellHeader1 = availablePage;\n\n            if (routePageObject.data) {\n              if (routePageObject.data.label) {\n                workspaceValidationService.getLocalizedText(routePageObject.data.label).then(function (result) {\n                  pageObj.cellHeader1 = result;\n                });\n              }\n            }\n\n            pageObj.cellHeader2 = availablePage;\n            pageObj.modelType = 'pages';\n            pageObj.typeIconURL = awIconService.getTypeIconFileUrl(pageObj);\n\n            if (!routePageObject.abstract && _.find(workspace.pageList, pageObj) === undefined) {\n              workspace.pageList.push(pageObj);\n            }\n          }\n        });\n      });\n    }\n\n    workspace.pageCount = workspace.pageList.length;\n    return workspace;\n  });\n};\n/**\n * Get localized text for multiple labels.\n *\n * @param {Array} labels - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {Promise} Which will resolve with map containing key to label mapping\n */\n\nexport let getMultipleLocalizedText = function (labels) {\n  return AwPromiseService.instance(function (resolve) {\n    _.defer(function () {\n      var promises = {};\n\n      _.forEach(labels, function (label) {\n        if (typeof label === 'string') {\n          // If the label is a string just return it\n          promises[label] = AwPromiseService.instance.when(label);\n        } else {\n          // Otherwise get the label from the localized file\n          promises[label.key] = localeSvc.getLocalizedText(label.source, label.key);\n        }\n      });\n\n      resolve(AwPromiseService.instance.all(promises));\n    });\n  });\n};\n/**\n * Load the column configuration\n *\n * @param {Object} dataprovider - the data provider\n */\n\nexport let loadColumns = function (dataprovider) {\n  dataprovider.columnConfig = {\n    columns: [{\n      name: 'object_string',\n      displayName: 'object_string',\n      typeName: 'WorkspaceObject',\n      width: 150,\n      pinnedLeft: true,\n      enableColumnMenu: false,\n      enableSorting: false,\n      enableFiltering: false\n    }]\n  };\n};\nexports = {\n  getAllWorkspaces,\n  getFilteredWorkspaces,\n  getWorkspaceCommands,\n  getActiveWorkspaceCommands,\n  getAvailableContexts,\n  getAvailableNavigations,\n  getWorkspaces,\n  reloadPage,\n  getAvailablePages,\n  getMultipleLocalizedText,\n  loadColumns\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/workspaceService.js"],"names":["exports","getAllWorkspaces","emptyFilterList","getFilteredWorkspaces","getWorkspaceCommands","inKey","exKey","workspaceCommands","activeWorkspace","_","getActiveWorkspaceCommands","workspaceDefinition","appCtxSvc","workspaceValidationService","inclusiveCmds","inclusiveCmdsOverlay","cmdOverlay","includedcmds","exclusiveCmds","cmdDiffArray","getAvailableContexts","getAvailableNavigations","availableNavigations","navigationConfigs","activeWorkSpaceId","workspaceDefn","getWorkspaces","workspace","responseWorkspaceList","JSON","response","cfgSvc","viewModel","workspaceNames","returnAll","workspaceObj","workspaceName","workspaceNameMap","viewProp","uwPropertySvc","awIconService","reloadPage","location","getAvailablePages","generatedRoutes","availablePages","Object","pageObj","routePageObject","getMultipleLocalizedText","promises","AwPromiseService","label","localeSvc","resolve","loadColumns","dataprovider","columns","name","displayName","typeName","width","pinnedLeft","enableColumnMenu","enableSorting","enableFiltering"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cfgSvc from 'js/configurationService';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxSvc from 'js/appCtxService';\nimport awIconService from 'js/awIconService';\nimport _ from 'lodash';\n\nimport 'js/workspaceInitService';\n\n/**\n * Cached reference to the various AngularJS and AW services.\n */\n\nvar exports = {};\n\n/**\n * Get all workspaces\n *\n * @return {Promise} Resolved with workspace list\n */\nexport let getAllWorkspaces = function() {\n    var emptyFilterList = {};\n    emptyFilterList.workspacesViewModel = '[]';\n    return exports.getWorkspaces( emptyFilterList, true );\n};\n\n/**\n * Get filtered workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @return {Promise} Resolved with workspace list\n */\nexport let getFilteredWorkspaces = function( response ) {\n    return exports.getWorkspaces( response, false );\n};\n\n/**\n * Get available commands for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} command list\n */\nexport let getWorkspaceCommands = function( activeWorkSpaceId ) {\n    var inKey = 'includedCommands';\n    var exKey = 'excludedCommands';\n    return cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        var workspaceCommands = [];\n        var activeWorkspace = {};\n        if( workspaceCfg ) {\n            activeWorkspace = _.get( workspaceCfg, activeWorkSpaceId );\n        }\n        workspaceCommands[ inKey ] = activeWorkspace.includedCommands;\n        workspaceCommands[ exKey ] = activeWorkspace.excludedCommands;\n        return workspaceCommands;\n    } );\n};\n\n/**\n * Get available commands for the given workspace\n *\n * @param {String} commands - commands on page\n * @return {Array} filter command list\n */\nexport let getActiveWorkspaceCommands = function( commands ) {\n    var workspaceDefinition = appCtxSvc.getCtx( 'workspace' );\n\n    if( !workspaceValidationService.isExclusiveWorkspace( workspaceDefinition ) ) {\n        return commands;\n    }\n    var inclusiveCmds = appCtxSvc.getCtx( 'workspace.includedCommands' );\n\n    if( inclusiveCmds && inclusiveCmds.length === 0 ) {\n        return null;\n    }\n    if( inclusiveCmds !== undefined ) {\n        var inclusiveCmdsOverlay = _.filter( commands, function( cmdOverlay ) {\n            return inclusiveCmds.includes( cmdOverlay.commandId );\n        } );\n    }\n    var includedcmds = inclusiveCmds === undefined ? commands : inclusiveCmdsOverlay;\n    var exclusiveCmds = appCtxSvc.getCtx( 'workspace.excludedCommands' );\n\n    if( exclusiveCmds !== undefined ) {\n        var cmdDiffArray = [];\n        cmdDiffArray = inclusiveCmdsOverlay && inclusiveCmdsOverlay.length > 0 ? inclusiveCmdsOverlay : includedcmds;\n        return cmdDiffArray.filter( cmdOverlay => !exclusiveCmds.includes( cmdOverlay.commandId ) );\n    }\n    return includedcmds;\n};\n\n/**\n * Get available context configuration for the given workspace\n *\n * @param {String} activeWorkSpaceId - active workspace ID\n * @return {Array} page list\n */\nexport let getAvailableContexts = function( activeWorkSpaceId ) {\n    return cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        var activeWorkspace = {};\n        if( workspaceCfg ) {\n            activeWorkspace = _.get( workspaceCfg, activeWorkSpaceId );\n        }\n        return activeWorkspace.availableContextConfigurations;\n    } );\n};\n\n/**\n * Get available navigation configuration for the given workspace\n * @param {Object} activeWorkSpaceId - active workspace ID based on wworkspace\n * @return {Array} availableNavigations -navigation list\n */\nexport let getAvailableNavigations = function( activeWorkSpaceId ) {\n    var navigationConfigs;\n    var availableNavigations = [];\n    return AwPromiseService.instance.all( [ cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        navigationConfigs = _.cloneDeep( workspaceCfg );\n        return true;\n    } ) ] ).then( function() {\n        if( navigationConfigs ) {\n            _.forEach( navigationConfigs, function( workspaceDefn ) {\n                if( activeWorkSpaceId === workspaceDefn.workspaceId && workspaceDefn.availableNavigations ) {\n                    availableNavigations = workspaceDefn.availableNavigations;\n                }\n                if( availableNavigations.length > 0 ) {\n                    availableNavigations.sort();\n                }\n            } );\n        }\n\n        return availableNavigations;\n    } );\n};\n\n/**\n * Get available workspaces\n *\n * @param {Object} response - Contains list of workspace IDs based on which filtering needs to happen\n * @param {Boolean} returnAll - true for getting all workspaces, false to filter workspaces\n * @return {Promise} Resolved with workspace list\n */\nexport let getWorkspaces = function( response, returnAll ) {\n    var workspace = {};\n    var responseWorkspaceList = JSON.parse( response.workspacesViewModel );\n    workspace.workspaceList = [];\n    workspace.workspaceCount = 0;\n\n    var viewModel;\n    return cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n        return cfgSvc.getCfg( 'workspace' );\n    } ).then( function( workspaceCfg ) {\n        viewModel = _.cloneDeep( workspaceCfg );\n        var workspaceNames = [];\n        _.forEach( viewModel, function( workspaceDefn ) {\n            // Check whether it is a valid workspace definition. If so, lookup the workspace name\n            if( workspaceDefn.workspaceName ) {\n                workspaceNames.push( workspaceDefn.workspaceName );\n            }\n        } );\n        return exports.getMultipleLocalizedText( workspaceNames );\n    } ).then( function( workspaceNameMap ) {\n        _.forEach( viewModel, function( workspaceDefn ) {\n            // Proceed only if this is a valid workspace\n            if( workspaceDefn.workspaceId ) {\n                if( returnAll ||\n                    _.includes( responseWorkspaceList, workspaceDefn.workspaceId ) ) {\n                    var workspaceObj = {};\n                    workspaceObj.uid = workspaceDefn.workspaceId;\n                    workspaceObj.props = {};\n\n                    var workspaceName;\n                    if( workspaceDefn.workspaceName.key ) {\n                        workspaceName = workspaceNameMap[ workspaceDefn.workspaceName.key ];\n                    } else {\n                        workspaceName = workspaceDefn.workspaceName;\n                    }\n                    var viewProp = uwPropertySvc.createViewModelProperty( 'object_string', 'object_string', 'string',\n                        workspaceDefn.workspaceId, [ workspaceName ] );\n                    workspaceObj.props[ viewProp.propertyName ] = viewProp;\n                    workspaceObj.cellHeader1 = workspaceName;\n                    workspaceObj.cellHeader2 = workspaceDefn.workspaceId;\n                    workspaceObj.modelType = 'Awp0Workspace';\n                    workspaceObj.typeIconURL = awIconService.getTypeIconFileUrl( workspaceObj );\n                    // Fake clear editable states for this mock vmo\n                    workspaceObj.clearEditiableStates = function() {\n                        return undefined;\n                    };\n                    workspace.workspaceList.push( workspaceObj );\n                }\n            }\n        } );\n        workspace.workspaceCount = workspace.workspaceList.length;\n        workspace.workspaceList = _.sortBy( workspace.workspaceList, [ 'cellHeader1' ] );\n        return workspace;\n    } );\n};\n\n/**\n * Reload page\n */\nexport let reloadPage = function() {\n    location.reload( false );\n};\n\n/**\n * Get available page\n *\n * @return {Array} page list\n */\nexport let getAvailablePages = function() {\n    var generatedRoutes;\n    var viewModel;\n    return AwPromiseService.instance.all( [ cfgSvc.getCfg( 'workspace' ).then( function( workspaceCfg ) {\n        viewModel = _.cloneDeep( workspaceCfg );\n        return true;\n    } ), cfgSvc.getCfg( 'states' ).then( function( states ) {\n        generatedRoutes = states;\n        return true;\n    } ) ] ).then( function() {\n        var workspace = {};\n        workspace.pageList = [];\n        workspace.pageCount = 0;\n\n        if( viewModel ) {\n            _.forEach( viewModel, function( workspaceDefn ) {\n                var availablePages = [];\n                if( workspaceDefn.availablePages && workspaceValidationService.isExclusiveWorkspace( workspaceDefn ) ) {\n                    availablePages = workspaceDefn.availablePages;\n                } else if( !workspaceValidationService.isExclusiveWorkspace( workspaceDefn ) ) {\n                    availablePages = Object.keys( generatedRoutes );\n                }\n\n                availablePages.sort();\n\n                _.forEach( availablePages, function( availablePage ) {\n                    var pageObj = {};\n                    pageObj.props = {};\n                    pageObj.uid = availablePage;\n                    var viewProp = uwPropertySvc.createViewModelProperty( 'object_string', 'object_string',\n                        'string', availablePage, [ availablePage ] );\n                    pageObj.props[ viewProp.propertyName ] = viewProp;\n                    // Fake clearEditable States\n                    pageObj.clearEditiableStates = function() {\n                        return undefined;\n                    };\n                    if( _.has( generatedRoutes, availablePage ) ) {\n                        var routePageObject = generatedRoutes[ availablePage ];\n                        pageObj.cellHeader1 = availablePage;\n                        if( routePageObject.data ) {\n                            if( routePageObject.data.label ) {\n                                workspaceValidationService.getLocalizedText( routePageObject.data.label ).then(\n                                    function( result ) {\n                                        pageObj.cellHeader1 = result;\n                                    } );\n                            }\n                        }\n                        pageObj.cellHeader2 = availablePage;\n                        pageObj.modelType = 'pages';\n                        pageObj.typeIconURL = awIconService.getTypeIconFileUrl( pageObj );\n                        if( !routePageObject.abstract &&\n                            _.find( workspace.pageList, pageObj ) === undefined ) {\n                            workspace.pageList.push( pageObj );\n                        }\n                    }\n                } );\n            } );\n        }\n\n        workspace.pageCount = workspace.pageList.length;\n        return workspace;\n    } );\n};\n\n/**\n * Get localized text for multiple labels.\n *\n * @param {Array} labels - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {Promise} Which will resolve with map containing key to label mapping\n */\nexport let getMultipleLocalizedText = function( labels ) {\n    return AwPromiseService.instance( function( resolve ) {\n        _.defer( function() {\n            var promises = {};\n            _.forEach( labels, function( label ) {\n                if( typeof label === 'string' ) {\n                    // If the label is a string just return it\n                    promises[ label ] = AwPromiseService.instance.when( label );\n                } else {\n                    // Otherwise get the label from the localized file\n                    promises[ label.key ] = localeSvc.getLocalizedText( label.source,\n                        label.key );\n                }\n            } );\n\n            resolve( AwPromiseService.instance.all( promises ) );\n        } );\n    } );\n};\n\n/**\n * Load the column configuration\n *\n * @param {Object} dataprovider - the data provider\n */\nexport let loadColumns = function( dataprovider ) {\n    dataprovider.columnConfig = {\n        columns: [ {\n            name: 'object_string',\n            displayName: 'object_string',\n            typeName: 'WorkspaceObject',\n            width: 150,\n            pinnedLeft: true,\n            enableColumnMenu: false,\n            enableSorting: false,\n            enableFiltering: false\n        } ]\n    };\n};\n\nexports = {\n    getAllWorkspaces,\n    getFilteredWorkspaces,\n    getWorkspaceCommands,\n    getActiveWorkspaceCommands,\n    getAvailableContexts,\n    getAvailableNavigations,\n    getWorkspaces,\n    reloadPage,\n    getAvailablePages,\n    getMultipleLocalizedText,\n    loadColumns\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
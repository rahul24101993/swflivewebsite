{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Defines {@link NgServices.async} which provides a set of utilities for handling async methods\n *\n * @module js/async.service\n */import AwPromiseService from'js/awPromiseService';import AwTimeoutService from'js/awTimeoutService';import Debug from'debug';var trace=new Debug('async');/* eslint-disable-next-line valid-jsdoc*/let exports={};/**\n * Get an api capable of executing the given api async\n *\n * @param {Function<List<a>>} methodToExecute Method to call. Input will be a list of a where a is the input to the debounced method\n * @param {Number} debounceTime How long to debounce method calls\n * @param {Lock} lock A \"lock\" with a \"isUnlocked\" function. Allows external control of call on top of debounce\n * @returns {Function<a>} A debounced version of the method that supports individual calls\n */var debouncePromise=function(methodToExecute,debounceTime,lock){/**\n     * Promise tracking any currently active batch.\n     *\n     * Resolved once the method is actually executed.\n     */var deferred=null;/**\n     * The current active timer. If allowed to complete the method will be executed.\n     */var debounceTimer=null;/**\n     * Items to pass to the network\n     */var items=[];/**\n     * Flag tracking if the service was previously locked\n     */var wasLocked=false;/**\n     * Actually execute the action\n     *\n     * @returns {Promise} Promise resolved after execution\n     */var doAction=function(){// Clear the reference to current batch - set to null to prevent additions to current batch post timeout\nvar currentDefer=deferred;var currentItems=items;deferred=null;items=[];// Actually do the method\nreturn methodToExecute(currentItems);};/**\n     * Add a new item to batch\n     *\n     * Returns a promise resolved when the method is actually executed.\n     *\n     * @param {a} item The item to add\n     * @returns {Promise} Promise resolved when action is actually executed\n     */return function(item){// If a batch is not already active create a new one\nif(!deferred){deferred=AwPromiseService.instance.defer();}// If the timer is running cancel it\nif(debounceTimer){AwTimeoutService.instance.cancel(debounceTimer);}// Add item to batch and start a new timer\nitems.push(item);var timerComplete=function(){if(lock){if(lock.isUnlocked()){if(!wasLocked){trace('Debounce is unlocked doing action',debounceTime);// Debounce after unlock has finished, safe to do action\ndoAction();}else{trace('Debounce is unlocked restarting timer',debounceTime);wasLocked=false;// Unlock just happened, restart regular debounce\ndebounceTimer=AwTimeoutService.instance(timerComplete,debounceTime);}}else{trace('Debounce is locked',debounceTime);wasLocked=true;// Locked, reset timer and check again after debounce\ndebounceTimer=AwTimeoutService.instance(timerComplete,debounceTime);}}else{// No extra lock, just do the action\ndoAction();}};trace('New item added resetting timer',debounceTime,item);debounceTimer=AwTimeoutService.instance(timerComplete,debounceTime);// Return the \"shared\" promise\nreturn deferred.promise;};};export{debouncePromise};exports={debouncePromise};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* global San */\n\n/**\n * This is the analytics service. It manages enablement & logging of messages to a backend analytics logging server.\n *\n * For more information about Siemens Analytics:\n * <ul>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:user_information</li>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:devguide:javascript_client</li>\n * </ul>\n *\n * @module js/splmAnalyticsService\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport eventBus from 'js/eventBus';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awConfiguration from 'js/awConfiguration';\nimport AwStateService from 'js/awStateService';\n/**\n * This flag indicates if the user was authenticated in this page instead of re-using an authenication from a\n * previous page load.\n *\n * @type {boolean}\n * @private\n */\n\nvar _authenticated = false;\n/**\n * This array holds a list of event objects to be logged into the SAN server.\n *\n * @type {Array}\n * @private\n */\n\nvar _sanLogEventList = [];\n/**\n * Id of the user logged in to the current session.\n *\n * @type {string}\n * @private\n */\n\nvar _userId = '';\n/**\n * Vendor Id from the license.\n *\n * @type {string}\n * @private\n */\n\nvar _vendorId = '';\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type {boolean}\n * @private\n */\n\nvar _enabled = false;\n/**\n * The license level of the currently logged in user\n *\n * @type {string}\n * @private\n */\n\nvar _licenseLevel;\n\nvar _autoTestMode = false;\nvar trace = new Debug('splmAnalyticsService');\nvar exports = {};\nvar _themeWhiteList = [];\nvar _commandsWhitelist = [];\nvar _pageWhitelist = [];\n\nvar _useInternalServer;\n\nvar _isIdle = false;\nvar MAX_PARTIAL_ERROR_COUNT = 10;\n/**\n * @ignore\n */\n\nexport let setAutoTestMode = function () {\n  _autoTestMode = true;\n};\n/**\n * This is a test support method to reset the service to default values. It should not be used outside of unit\n * testing.\n * @ignore\n */\n\nexport let reset = function () {\n  _authenticated = false;\n  _enabled = false;\n};\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\n\nexport let authenticationSuccessful = function () {\n  _authenticated = true;\n};\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n */\n\nexport let setPreInitData = function (preInitData) {\n  _userId = preInitData.user_id;\n  _vendorId = preInitData.vendor_id;\n\n  if (preInitData.user_license_level) {\n    _licenseLevel = preInitData.user_license_level;\n  }\n};\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\n\nexport let enable = function (useInternalServer, repo) {\n  if (_autoTestMode) {\n    _enabled = false;\n    return undefined;\n  }\n\n  _useInternalServer = useInternalServer; // load Siemens Analytics (San)\n\n  /** revisitme Charu\n   * Added lib/piwik/analytics under src to resolve the path\n   */\n\n  return AwPromiseService.instance(function (resolve) {\n    import('../lib/piwik/analytics').then(function () {\n      if (_authenticated) {\n        var solution;\n        AwPromiseService.instance.all([cfgSvc.getCfg('OOTB_Verification').then(function (OOTB_Verification) {\n          _pageWhitelist = OOTB_Verification.locations;\n          _commandsWhitelist = OOTB_Verification.commands;\n          _themeWhiteList = OOTB_Verification.themes;\n        }), cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n          solution = solutionDef;\n        })]).then(function () {\n          cfgSvc.getCfg('versionConstants').then(function (versionConstants) {\n            // initialize San with solution id & client version\n            // - passing undefined if not using internal server based upon API contract from San\n            // The user id and the customer/vendor id has to be set before the San layer is initialized.\n            _initializeSan(useInternalServer, repo, solution, versionConstants);\n\n            _enabled = true;\n            localStorage.setItem('AW_SAN_OPTOUT', 'false');\n            localStorage.setItem('AW_SAN_DO_DISABLE', 'false'); // If Analytics was previously disabled, enabled it now.\n\n            San.disable(false); // Subscribe to other events for logging.\n\n            _subscribeForEvents('selectFilter');\n\n            _idleSetup();\n\n            eventBus.subscribe('idle', _getResolutionZoomInfo); // Log the SOA errors during Idle time only.\n            // This can be done only after the _idleSetup() call.\n\n            _subscribeForErrors();\n\n            eventBus.subscribe('idle', _logEventDataAtIdle);\n            resolve();\n          });\n        });\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\n\nexport let disable = function (useInternalServer, encVendId, repo) {\n  _enabled = false;\n\n  if (localStorage.getItem('AW_SAN_OPTOUT') === 'true') {\n    // If we know that the user opted out and we have already processed it.\n    // Nothing more to do.\n    return;\n  }\n  /** revisitme Charu\n   * Added lib/piwik/analytics under src to resolve the path\n   */\n\n\n  import('../lib/piwik/analytics').then(function () {\n    if (_authenticated) {\n      var solution;\n      cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n        solution = solutionDef;\n        return cfgSvc.getCfg('versionConstants');\n      }).then(function (versionConstants) {\n        // Initialize San with solution id & client version\n        _initializeSan(useInternalServer, repo, solution, versionConstants); // If Analytics was previously enabled, we will log one \"participating=false\" event.\n        // San.logEvent( \"participating=false\") call is not working if\n        // San.disable(true) is called right after the San.logEvent().\n        // So, we call San.disable(true), during the subsequent login.\n\n\n        var doDisable = localStorage.getItem('AW_SAN_DO_DISABLE');\n\n        if (doDisable === null || doDisable === 'false') {\n          var participatingProp = {\n            Participating: 'false'\n          };\n\n          if (encVendId) {\n            participatingProp.Site = encVendId;\n          }\n\n          _enabled = true;\n          San.disable(false);\n          exports.logEvent(solution.solutionName, participatingProp);\n          exports.logProductInfo('Participating', 'Opt-Out');\n          _enabled = false;\n          localStorage.setItem('AW_SAN_DO_DISABLE', 'true'); // San.disable( true );\n          // Calling San.disable(true) here prevents the above logEvent() call from going through.\n        } else if (doDisable === 'true') {\n          //\n          _enabled = false;\n          San.disable(true);\n          localStorage.setItem('AW_SAN_OPTOUT', 'true');\n          localStorage.setItem('AW_SAN_DO_DISABLE', 'false');\n        }\n      });\n    }\n  });\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logEvent = function (name, property) {\n  if (_enabled) {\n    var eventObject = _.isPlainObject(property) ? JSON.stringify(property) : property;\n    San.logEvent(name, eventObject);\n    trace('LogEvent', name, property);\n  }\n};\n/**\n * Log Page Load Events.\n *\n * @ignore\n */\n\nexport let logPageViewEvent = function () {\n  AwStateService.instance.transitionHooks.onSuccess({}, function (transition) {\n    if (_enabled) {\n      var toState = transition.to();\n      var targetPageName;\n      targetPageName = toState.name.substr(toState.name.lastIndexOf('_') + 1);\n      San.logPageView(targetPageName);\n      trace('Page View', targetPageName);\n    }\n  });\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logProductInfo = function (name, property) {\n  if (_enabled) {\n    var productObject = _.isPlainObject(property) ? JSON.stringify(property) : property;\n    San.addProductInfo(name, productObject);\n    trace('LogProductInfo', name, property);\n  }\n};\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logCommands = function (data) {\n  if (_enabled) {\n    cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n      var solutionName = solutionDef.solutionName.concat(' ').concat('Commands'); // Convert the \"san\" prefixed names to human readable names.\n\n      if (_.isPlainObject(data) && data.hasOwnProperty('sanCommandId')) {\n        var readableKeyData = {};\n\n        _.forEach(data, function (value, key) {\n          switch (key) {\n            case 'sanCommandId':\n              readableKeyData['Command Id'] = exports.publishableValue(value, 'COMMAND');\n              break;\n\n            case 'sanCommandTitle':\n              if (exports.publishableValue(data.sanCommandId, 'COMMAND') === data.sanCommandId) {\n                readableKeyData['Command Title'] = value;\n              } else {\n                readableKeyData['Command Title'] = exports.publishableValue(data.sanCommandId, 'COMMAND');\n              }\n\n              break;\n\n            case 'sanViewMode':\n              readableKeyData['View Mode'] = value;\n              break;\n\n            case 'sanPrimaryPercentage':\n              readableKeyData['Primary Percentage'] = value;\n              break;\n\n            case 'sanTileAction':\n              readableKeyData['Tile Action'] = value;\n              break;\n\n            case 'sanCmdLocation':\n              readableKeyData['Command Location'] = value;\n              break;\n\n            case 'sanPixelSize':\n              readableKeyData['Pixel Size'] = value;\n              break;\n\n            case 'sanWidth':\n              readableKeyData.width = value;\n              break;\n\n            case 'sanHeight':\n              readableKeyData.height = value;\n              break;\n\n            case 'sanCommandData':\n              readableKeyData.cmdData = value;\n              break;\n\n            default:\n              readableKeyData[key] = value;\n          }\n        });\n      }\n\n      if (_licenseLevel && readableKeyData) {\n        readableKeyData['User License Level'] = _licenseLevel;\n      } // Now, log the data.\n\n\n      var keyData = _.isPlainObject(readableKeyData) ? JSON.stringify(readableKeyData) : readableKeyData;\n      San.logEvent(solutionName, keyData);\n      trace(solutionName, readableKeyData);\n    });\n  }\n};\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\n\nexport let publishableValue = function (artifactName, artifactType) {\n  if (_useInternalServer) {\n    return artifactName;\n  }\n\n  if (artifactType.toUpperCase() === 'THEME') {\n    if (_themeWhiteList && _themeWhiteList.length > 0) {\n      if (_themeWhiteList.indexOf(artifactName) < 0) {\n        return 'Customer';\n      }\n    } else {\n      return 'Unknown';\n    }\n  } else if (artifactType.toUpperCase() === 'COMMAND') {\n    if (artifactName === 'Tile' || artifactName.startsWith('action_')) {\n      return artifactName;\n    }\n\n    if (_commandsWhitelist && _commandsWhitelist.length > 0) {\n      if (_commandsWhitelist.indexOf(artifactName) < 0) {\n        return 'Customer';\n      }\n    } else {\n      return 'Unknown';\n    }\n  } else if (artifactType.toUpperCase() === 'PAGE') {\n    if (_pageWhitelist && _pageWhitelist.length > 0) {\n      if (_pageWhitelist.indexOf(artifactName) < 0) {\n        return 'Customer';\n      }\n    } else {\n      return 'Unknown';\n    }\n  }\n\n  return artifactName;\n};\n/**\n * This method logs all the data stored by _sanLogEventList in FIFO during Idle time.\n *\n */\n\nfunction _logEventDataAtIdle() {\n  if (_enabled && _isIdle) {\n    while (_sanLogEventList.length > 0) {\n      var logEventData = _sanLogEventList.shift();\n\n      San.logEvent(logEventData.solutionName, logEventData.jsonData);\n      trace('Idle', logEventData.solutionName, logEventData.jsonData);\n    }\n  }\n}\n/**\n * This method should be used by the client to log Errors to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - Partial Error data from a SOA response.\n */\n\n\nfunction _logErrors(data) {\n  setTimeout(function () {\n    if (_enabled) {\n      var soaPartialError = data.sanPartialErrors;\n      var serviceName = 'unknown';\n      var operationName = 'unknown'; // teamcenter.com, awp0, ics1 are internal SOAs that we want to report.\n      // Customer SOAs use IDs with numerals > 3 - for these we are not reporting the names.\n\n      if (/teamcenter.com/i.test(data.sanQName)) {\n        serviceName = data.sanServiceName;\n        operationName = data.sanOperationName;\n      } else {\n        // Get the \"awp0\" from \"http://awp0.com/Schemas/Internal/AWS2/2016-03/...\"\n        // If that has a number > 3, it is a customer SOA.\n        var templatePrefix = /:\\/\\/(.*)\\..*\\//i.exec(data.sanQName);\n\n        if (templatePrefix.length > 1 && /[0123]/.test(templatePrefix[1])) {\n          serviceName = data.sanServiceName;\n          operationName = data.sanOperationName;\n        } else {\n          serviceName = 'Customer';\n          operationName = 'Customer';\n        }\n      }\n\n      cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n        var solutionName = solutionDef.solutionName.concat(' ').concat('Errors');\n        var partial_error_count = 0;\n        soaPartialError.forEach(function (error, errIdx) {\n          if (partial_error_count > MAX_PARTIAL_ERROR_COUNT) {\n            return;\n          }\n\n          error.errorValues.forEach(function (errorValue, evIdx) {\n            // Log only error level 3 and above.\n            // Error levels below 3 are info/warning categories.\n            if (errorValue.level < 3) {\n              return;\n            }\n\n            var errorData = {}; // Report error Code and Level as string values, instead of int.\n            // Analytics site to generate reports such as \"sum\", \"average\", etc. for int.\n            // Sending it as string ensures that we can count the number of occurrences of a particular error code, etc.\n\n            errorData.Code = String(errorValue.code);\n            errorData.Level = String(errorValue.level);\n            errorData['Stack Index'] = evIdx;\n            errorData['Error Set'] = errIdx;\n            errorData['Service Name'] = serviceName;\n            errorData['Operation Name'] = operationName;\n            errorData['Log Correlation ID'] = data.sanLogCorrelationID;\n            var LogEventData = {};\n            LogEventData.solutionName = solutionName;\n            LogEventData.jsonData = JSON.stringify(errorData);\n\n            _sanLogEventList.push(LogEventData);\n          });\n          partial_error_count++;\n        });\n      });\n    }\n  }, 0, data);\n  return;\n}\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n */\n\n\nfunction _subscribeForErrors() {\n  // Log the Search Filter events in the \"left side\" Navigation panel.\n  eventBus.subscribeOnChannel({\n    channel: 'SAN_Events',\n    topic: 'aw-command-logErrros',\n    callback: _logErrors\n  });\n}\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n * @param {String} eventName - name of an event to subscribe to.\n */\n\n\nfunction _subscribeForEvents(eventName) {\n  // Log the Search Filter events in the \"left side\" Navigation panel.\n  eventBus.subscribe(eventName, function (data) {\n    var property = {};\n\n    if (data.source && data.categoryName) {\n      property['Command Id'] = data.filterType;\n      property['Command Location'] = data.source; // If the user enables the filter in the filter panel,\n      // the \"filterSelected\" field is coming in as \"false\"\n\n      if (data.hasOwnProperty('filterSelected')) {\n        if (data.filterSelected === true) {\n          property['Command Location'] = data.source.concat(' OFF');\n        } else {\n          property['Command Location'] = data.source.concat(' ON');\n        }\n      }\n    }\n\n    if (!_.isEmpty(property)) {\n      exports.logCommands(property);\n    }\n  });\n}\n/**\n * Records resolution and zoom information and logs it to Siemens analytics\n *\n */\n\n\nfunction _getResolutionZoomInfo() {\n  var resolutionZoomData = JSON.parse(localStorage.getItem('sanResolutionZoom'));\n  var new_resolutionZoomData = {\n    sanCommandId: 'ResolutionZoomData',\n    sanCommandTitle: 'Resolution / Zoom Info',\n    width: parseInt(window.innerWidth),\n    height: parseInt(window.innerHeight),\n    zoom: Math.round(window.devicePixelRatio * 100)\n  }; // if we have a resolution from last time...\n\n  if (resolutionZoomData) {\n    // if the resolution has changed since the last time we reported it...\n    if (!(resolutionZoomData.width === new_resolutionZoomData.width && resolutionZoomData.height === new_resolutionZoomData.height && resolutionZoomData.zoom === new_resolutionZoomData.zoom)) {\n      localStorage.setItem('sanResolutionZoom', JSON.stringify(new_resolutionZoomData));\n      exports.logCommands(new_resolutionZoomData);\n    }\n  } else {\n    // this is the first time reporting this info, store it in localStorage and publish\n    localStorage.setItem('sanResolutionZoom', JSON.stringify(new_resolutionZoomData));\n    exports.logCommands(new_resolutionZoomData);\n  }\n}\n/**\n * This waits for either a \"progress.start\" or \"progress.end\" event to come in and once they do, it starts up an idle event publisher.\n */\n\n\nfunction _idleSetup() {\n  /**\n   * @param {String|null} endPoint - optional endPoint of the progress event\n   */\n  function processEvent(endPoint) {\n    if (!/\\/getUnreadMessages$/.test(endPoint)) {\n      _isIdle = false;\n      eventBus.unsubscribe(progressStartListener);\n      eventBus.unsubscribe(progressEndListener);\n\n      _startupIdleEventPublisher();\n    }\n  }\n\n  var progressStartListener = eventBus.subscribe('progress.start', processEvent);\n  var progressEndListener = eventBus.subscribe('progress.end', processEvent);\n}\n/**\n * Sets up an Idle event publisher. This publisher uses a burndown timer which checks how long it has been since a \"progress.end\" or \"progress.start\"\n * event has come in. If one of those events come in, the burndown timer is restarted. Once the burndown exceeds its timer it will fire a single \"idle\"\n * event and then resume listening for a \"progress.end\"/\"progress.start\" event.\n */\n\n\nfunction _startupIdleEventPublisher() {\n  var idleBurndown;\n  /**\n   */\n\n  function processEvent() {\n    _isIdle = false;\n    clearTimeout(idleBurndown);\n    idleBurndown = _setupBurndownTimer(progressStartListener, progressEndListener);\n  }\n\n  var progressStartListener = eventBus.subscribe('progress.start', processEvent);\n  var progressEndListener = eventBus.subscribe('progress.end', processEvent);\n  idleBurndown = _setupBurndownTimer(progressStartListener, progressEndListener);\n}\n/**\n * Creates the burndown timer\n *\n * @param {Object} progressStartListener - eventBus subscription handle\n * @param {Object} progressEndListener - eventBus subscription handle\n * @return {Number} A Number, representing the ID value of the timer that is set. Use this value with the clearTimeout() method to cancel the timer.\n */\n\n\nfunction _setupBurndownTimer(progressStartListener, progressEndListener) {\n  var idle_cutoff_seconds = 30;\n  return setTimeout(function () {\n    eventBus.publish('idle', {});\n\n    _idleSetup();\n\n    eventBus.unsubscribe(progressStartListener);\n    eventBus.unsubscribe(progressEndListener);\n  }, idle_cutoff_seconds * 1000);\n}\n/**\n * Initialize the SAN SDK\n *\n * @param {Boolean} useInternalServer - boolean indicating if the data should go to the internal site or external site\n * @param {String} repo - optional parameter which can be used to overwrite the predefined repo, used for redirecting to TcX repo\n * @param {Object} solution - solution object used to define the application name\n * @param {Object} versionConstants - object used to define the application version\n */\n\n\nfunction _initializeSan(useInternalServer, repo, solution, versionConstants) {\n  San.setUserIdentifier(_userId);\n  San.setCustomerIdentifier(_vendorId);\n  var solutionId = repo ? repo : solution.solutionId;\n  var fullVersion = versionConstants.name + '@' + versionConstants.version + ' (' + versionConstants.description + ')'; // pull language from awSession in localStorage and convert to the object that SAN is expecting.\n\n  var applicationLanguage = '';\n  var sanApplicationLanguage = '';\n\n  try {\n    applicationLanguage = JSON.parse(localStorage.getItem('awSession:/')).locale;\n  } catch (error) {\n    try {\n      applicationLanguage = localStorage.getItem('locale:/');\n    } catch (error) {\n      applicationLanguage = '';\n    }\n  } // Several AW locales like de are not in the format that SAN is expecting. This if block updates them to the proper format.\n\n\n  if (applicationLanguage && applicationLanguage.length === 5) {\n    sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase();\n  } else if (applicationLanguage && applicationLanguage.length === 2) {\n    sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase() + '_' + applicationLanguage.toUpperCase();\n  } else {\n    sanApplicationLanguage = 'applicationLanguageNone';\n  } // if for some reason, the language value lookup fails, default to None\n  // Languages which AW supports that SAN does not would be corrected here.\n\n\n  if (San[sanApplicationLanguage]) {\n    sanApplicationLanguage = San[sanApplicationLanguage];\n  } else {\n    sanApplicationLanguage = San.applicationLanguageNone;\n  } // status and err_message are left for debugger use, not to be displayed to customer via console, etc\n\n\n  let status = San.initialize(solutionId, versionConstants.version, fullVersion, sanApplicationLanguage, useInternalServer || undefined, awConfiguration.get('baseUrl') + '/lib/piwik/piwik.js');\n  let err_message = San.getLastErrorMessage();\n}\n\nexports = {\n  setAutoTestMode,\n  reset,\n  authenticationSuccessful,\n  setPreInitData,\n  enable,\n  disable,\n  logEvent,\n  logPageViewEvent,\n  logProductInfo,\n  logCommands,\n  publishableValue\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/splmAnalyticsService.js"],"names":["_authenticated","_sanLogEventList","_userId","_vendorId","_enabled","_autoTestMode","trace","exports","_themeWhiteList","_commandsWhitelist","_pageWhitelist","_isIdle","MAX_PARTIAL_ERROR_COUNT","setAutoTestMode","reset","authenticationSuccessful","setPreInitData","preInitData","_licenseLevel","enable","_useInternalServer","AwPromiseService","OOTB_Verification","solution","cfgSvc","_initializeSan","localStorage","San","_subscribeForEvents","_idleSetup","eventBus","_subscribeForErrors","resolve","disable","doDisable","participatingProp","Participating","logEvent","eventObject","_","JSON","logPageViewEvent","AwStateService","toState","transition","targetPageName","logProductInfo","productObject","logCommands","solutionName","solutionDef","data","readableKeyData","keyData","publishableValue","artifactType","artifactName","logEventData","setTimeout","soaPartialError","serviceName","operationName","templatePrefix","partial_error_count","error","errorValue","errorData","String","LogEventData","channel","topic","callback","_logErrors","property","resolutionZoomData","new_resolutionZoomData","sanCommandId","sanCommandTitle","width","parseInt","window","height","zoom","Math","_startupIdleEventPublisher","progressStartListener","progressEndListener","clearTimeout","idleBurndown","_setupBurndownTimer","idle_cutoff_seconds","solutionId","repo","fullVersion","versionConstants","applicationLanguage","sanApplicationLanguage","status","useInternalServer","awConfiguration","err_message"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/* global San */\n\n/**\n * This is the analytics service. It manages enablement & logging of messages to a backend analytics logging server.\n *\n * For more information about Siemens Analytics:\n * <ul>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:user_information</li>\n * <li>http://bitools.net.plm.eds.com/wiki/analytics:devguide:javascript_client</li>\n * </ul>\n *\n * @module js/splmAnalyticsService\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport eventBus from 'js/eventBus';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awConfiguration from 'js/awConfiguration';\nimport AwStateService from 'js/awStateService';\n/**\n * This flag indicates if the user was authenticated in this page instead of re-using an authenication from a\n * previous page load.\n *\n * @type {boolean}\n * @private\n */\nvar _authenticated = false;\n\n/**\n * This array holds a list of event objects to be logged into the SAN server.\n *\n * @type {Array}\n * @private\n */\nvar _sanLogEventList = [];\n\n/**\n * Id of the user logged in to the current session.\n *\n * @type {string}\n * @private\n */\nvar _userId = '';\n\n/**\n * Vendor Id from the license.\n *\n * @type {string}\n * @private\n */\nvar _vendorId = '';\n\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type {boolean}\n * @private\n */\nvar _enabled = false;\n\n/**\n * The license level of the currently logged in user\n *\n * @type {string}\n * @private\n */\nvar _licenseLevel;\n\nvar _autoTestMode = false;\n\nvar trace = new Debug( 'splmAnalyticsService' );\n\nvar exports = {};\n\nvar _themeWhiteList = [];\n\nvar _commandsWhitelist = [];\n\nvar _pageWhitelist = [];\n\nvar _useInternalServer;\n\nvar _isIdle = false;\n\nvar MAX_PARTIAL_ERROR_COUNT = 10;\n\n\n/**\n * @ignore\n */\nexport let setAutoTestMode = function() {\n    _autoTestMode = true;\n};\n\n/**\n * This is a test support method to reset the service to default values. It should not be used outside of unit\n * testing.\n * @ignore\n */\nexport let reset = function() {\n    _authenticated = false;\n    _enabled = false;\n};\n\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\nexport let authenticationSuccessful = function() {\n    _authenticated = true;\n};\n\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n */\nexport let setPreInitData = function( preInitData ) {\n    _userId = preInitData.user_id;\n    _vendorId = preInitData.vendor_id;\n    if( preInitData.user_license_level ) {\n        _licenseLevel = preInitData.user_license_level;\n    }\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\nexport let enable = function( useInternalServer, repo ) {\n    if( _autoTestMode ) {\n        _enabled = false;\n        return undefined;\n    }\n    _useInternalServer = useInternalServer;\n    // load Siemens Analytics (San)\n    /** revisitme Charu\n     * Added lib/piwik/analytics under src to resolve the path\n     */\n    return AwPromiseService.instance( function( resolve ) {\n        import( '../lib/piwik/analytics' ).then( function() {\n            if( _authenticated ) {\n                var solution;\n                AwPromiseService.instance.all( [\n                    cfgSvc.getCfg( 'OOTB_Verification' ).then( function( OOTB_Verification ) {\n                        _pageWhitelist = OOTB_Verification.locations;\n                        _commandsWhitelist = OOTB_Verification.commands;\n                        _themeWhiteList = OOTB_Verification.themes;\n                    } ),\n                    cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n                        solution = solutionDef;\n                    } )\n                ] ).then( function() {\n                    cfgSvc.getCfg( 'versionConstants' ).then( function( versionConstants ) {\n                        // initialize San with solution id & client version\n                        // - passing undefined if not using internal server based upon API contract from San\n                        // The user id and the customer/vendor id has to be set before the San layer is initialized.\n                        _initializeSan( useInternalServer, repo, solution, versionConstants );\n                        _enabled = true;\n                        localStorage.setItem( 'AW_SAN_OPTOUT', 'false' );\n                        localStorage.setItem( 'AW_SAN_DO_DISABLE', 'false' );\n\n                        // If Analytics was previously disabled, enabled it now.\n                        San.disable( false );\n\n                        // Subscribe to other events for logging.\n                        _subscribeForEvents( 'selectFilter' );\n\n                        _idleSetup();\n                        eventBus.subscribe( 'idle', _getResolutionZoomInfo );\n\n                        // Log the SOA errors during Idle time only.\n                        // This can be done only after the _idleSetup() call.\n                        _subscribeForErrors();\n                        eventBus.subscribe( 'idle', _logEventDataAtIdle );\n                        resolve();\n                    } );\n                } );\n            } else {\n                resolve();\n            }\n        } );\n    } );\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\nexport let disable = function( useInternalServer, encVendId, repo ) {\n    _enabled = false;\n\n    if( localStorage.getItem( 'AW_SAN_OPTOUT' ) === 'true' ) {\n        // If we know that the user opted out and we have already processed it.\n        // Nothing more to do.\n        return;\n    }\n\n    /** revisitme Charu\n     * Added lib/piwik/analytics under src to resolve the path\n     */\n    import( '../lib/piwik/analytics' ).then( function() {\n        if( _authenticated ) {\n            var solution;\n            cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n                solution = solutionDef;\n                return cfgSvc.getCfg( 'versionConstants' );\n            } ).then( function( versionConstants ) {\n                // Initialize San with solution id & client version\n                _initializeSan( useInternalServer, repo, solution, versionConstants );\n\n                // If Analytics was previously enabled, we will log one \"participating=false\" event.\n                // San.logEvent( \"participating=false\") call is not working if\n                // San.disable(true) is called right after the San.logEvent().\n                // So, we call San.disable(true), during the subsequent login.\n                var doDisable = localStorage.getItem( 'AW_SAN_DO_DISABLE' );\n                if( doDisable === null || doDisable === 'false' ) {\n                    var participatingProp = { Participating: 'false' };\n\n                    if( encVendId ) {\n                        participatingProp.Site = encVendId;\n                    }\n\n                    _enabled = true;\n                    San.disable( false );\n                    exports.logEvent( solution.solutionName, participatingProp );\n                    exports.logProductInfo( 'Participating', 'Opt-Out' );\n                    _enabled = false;\n                    localStorage.setItem( 'AW_SAN_DO_DISABLE', 'true' );\n                    // San.disable( true );\n                    // Calling San.disable(true) here prevents the above logEvent() call from going through.\n                } else if( doDisable === 'true' ) {\n                    //\n                    _enabled = false;\n                    San.disable( true );\n                    localStorage.setItem( 'AW_SAN_OPTOUT', 'true' );\n                    localStorage.setItem( 'AW_SAN_DO_DISABLE', 'false' );\n                }\n            } );\n        }\n    } );\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logEvent = function( name, property ) {\n    if( _enabled ) {\n        var eventObject = _.isPlainObject( property ) ? JSON.stringify( property ) : property;\n        San.logEvent( name, eventObject );\n        trace( 'LogEvent', name, property );\n    }\n};\n\n/**\n * Log Page Load Events.\n *\n * @ignore\n */\nexport let logPageViewEvent = function() {\n    AwStateService.instance.transitionHooks.onSuccess( {}, function( transition ) {\n        if( _enabled ) {\n            var toState = transition.to();\n            var targetPageName;\n            targetPageName = toState.name.substr( toState.name.lastIndexOf( '_' ) + 1 );\n            San.logPageView( targetPageName );\n            trace( 'Page View', targetPageName );\n        }\n    } );\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logProductInfo = function( name, property ) {\n    if( _enabled ) {\n        var productObject = _.isPlainObject( property ) ? JSON.stringify( property ) : property;\n        San.addProductInfo( name, productObject );\n        trace( 'LogProductInfo', name, property );\n    }\n};\n\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logCommands = function( data ) {\n    if( _enabled ) {\n        cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n            var solutionName = solutionDef.solutionName.concat( ' ' ).concat( 'Commands' );\n\n            // Convert the \"san\" prefixed names to human readable names.\n            if( _.isPlainObject( data ) && data.hasOwnProperty( 'sanCommandId' ) ) {\n                var readableKeyData = {};\n                _.forEach( data, function( value, key ) {\n                    switch ( key ) {\n                        case 'sanCommandId':\n                            readableKeyData[ 'Command Id' ] = exports.publishableValue( value, 'COMMAND' );\n                            break;\n                        case 'sanCommandTitle':\n                            if( exports.publishableValue( data.sanCommandId, 'COMMAND' ) === data.sanCommandId ) {\n                                readableKeyData[ 'Command Title' ] = value;\n                            } else {\n                                readableKeyData[ 'Command Title' ] = exports.publishableValue( data.sanCommandId, 'COMMAND' );\n                            }\n                            break;\n                        case 'sanViewMode':\n                            readableKeyData[ 'View Mode' ] = value;\n                            break;\n                        case 'sanPrimaryPercentage':\n                            readableKeyData[ 'Primary Percentage' ] = value;\n                            break;\n                        case 'sanTileAction':\n                            readableKeyData[ 'Tile Action' ] = value;\n                            break;\n                        case 'sanCmdLocation':\n                            readableKeyData[ 'Command Location' ] = value;\n                            break;\n                        case 'sanPixelSize':\n                            readableKeyData[ 'Pixel Size' ] = value;\n                            break;\n                        case 'sanWidth':\n                            readableKeyData.width = value;\n                            break;\n                        case 'sanHeight':\n                            readableKeyData.height = value;\n                            break;\n                        case 'sanCommandData':\n                            readableKeyData.cmdData = value;\n                            break;\n                        default:\n                            readableKeyData[ key ] = value;\n                    }\n                } );\n            }\n\n            if( _licenseLevel && readableKeyData ) {\n                readableKeyData[ 'User License Level' ] = _licenseLevel;\n            }\n            // Now, log the data.\n            var keyData = _.isPlainObject( readableKeyData ) ? JSON.stringify( readableKeyData ) : readableKeyData;\n            San.logEvent( solutionName, keyData );\n            trace( solutionName, readableKeyData );\n        } );\n    }\n};\n\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\nexport let publishableValue = function( artifactName, artifactType ) {\n    if( _useInternalServer ) {\n        return artifactName;\n    }\n    if( artifactType.toUpperCase() === 'THEME' ) {\n        if( _themeWhiteList && _themeWhiteList.length > 0 ) {\n            if( _themeWhiteList.indexOf( artifactName ) < 0 ) {\n                return 'Customer';\n            }\n        } else {\n            return 'Unknown';\n        }\n    } else if( artifactType.toUpperCase() === 'COMMAND' ) {\n        if( artifactName === 'Tile' || artifactName.startsWith( 'action_' ) ) {\n            return artifactName;\n        }\n        if( _commandsWhitelist && _commandsWhitelist.length > 0 ) {\n            if( _commandsWhitelist.indexOf( artifactName ) < 0 ) {\n                return 'Customer';\n            }\n        } else {\n            return 'Unknown';\n        }\n    } else if( artifactType.toUpperCase() === 'PAGE' ) {\n        if( _pageWhitelist && _pageWhitelist.length > 0 ) {\n            if( _pageWhitelist.indexOf( artifactName ) < 0 ) {\n                return 'Customer';\n            }\n        } else {\n            return 'Unknown';\n        }\n    }\n    return artifactName;\n};\n\n/**\n * This method logs all the data stored by _sanLogEventList in FIFO during Idle time.\n *\n */\nfunction _logEventDataAtIdle() {\n    if( _enabled && _isIdle ) {\n        while( _sanLogEventList.length > 0 ) {\n            var logEventData = _sanLogEventList.shift();\n            San.logEvent( logEventData.solutionName, logEventData.jsonData );\n            trace( 'Idle', logEventData.solutionName, logEventData.jsonData );\n        }\n    }\n}\n\n/**\n * This method should be used by the client to log Errors to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - Partial Error data from a SOA response.\n */\nfunction _logErrors( data ) {\n    setTimeout( function() {\n        if( _enabled ) {\n            var soaPartialError = data.sanPartialErrors;\n            var serviceName = 'unknown';\n            var operationName = 'unknown';\n\n            // teamcenter.com, awp0, ics1 are internal SOAs that we want to report.\n            // Customer SOAs use IDs with numerals > 3 - for these we are not reporting the names.\n            if( /teamcenter.com/i.test( data.sanQName ) ) {\n                serviceName = data.sanServiceName;\n                operationName = data.sanOperationName;\n            } else {\n                // Get the \"awp0\" from \"http://awp0.com/Schemas/Internal/AWS2/2016-03/...\"\n                // If that has a number > 3, it is a customer SOA.\n                var templatePrefix = /:\\/\\/(.*)\\..*\\//i.exec( data.sanQName );\n                if( templatePrefix.length > 1 && /[0123]/.test( templatePrefix[ 1 ] ) ) {\n                    serviceName = data.sanServiceName;\n                    operationName = data.sanOperationName;\n                } else {\n                    serviceName = 'Customer';\n                    operationName = 'Customer';\n                }\n            }\n\n            cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n                var solutionName = solutionDef.solutionName.concat( ' ' ).concat( 'Errors' );\n                var partial_error_count = 0;\n                soaPartialError.forEach( function( error, errIdx ) {\n                    if( partial_error_count > MAX_PARTIAL_ERROR_COUNT ) {\n                        return;\n                    }\n                    error.errorValues.forEach( function( errorValue, evIdx ) {\n                        // Log only error level 3 and above.\n                        // Error levels below 3 are info/warning categories.\n                        if( errorValue.level < 3 ) {\n                            return;\n                        }\n\n                        var errorData = {};\n                        // Report error Code and Level as string values, instead of int.\n                        // Analytics site to generate reports such as \"sum\", \"average\", etc. for int.\n                        // Sending it as string ensures that we can count the number of occurrences of a particular error code, etc.\n                        errorData.Code = String( errorValue.code );\n                        errorData.Level = String( errorValue.level );\n                        errorData[ 'Stack Index' ] = evIdx;\n                        errorData[ 'Error Set' ] = errIdx;\n                        errorData[ 'Service Name' ] = serviceName;\n                        errorData[ 'Operation Name' ] = operationName;\n                        errorData[ 'Log Correlation ID' ] = data.sanLogCorrelationID;\n\n                        var LogEventData = {};\n                        LogEventData.solutionName = solutionName;\n                        LogEventData.jsonData = JSON.stringify( errorData );\n                        _sanLogEventList.push( LogEventData );\n                    } );\n                    partial_error_count++;\n                } );\n            } );\n        }\n    }, 0, data );\n    return;\n}\n\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n */\nfunction _subscribeForErrors() {\n    // Log the Search Filter events in the \"left side\" Navigation panel.\n    eventBus.subscribeOnChannel( {\n        channel: 'SAN_Events',\n        topic: 'aw-command-logErrros',\n        callback: _logErrors\n    } );\n}\n\n/**\n * This method should be used by the client to subscribe to log as \"Command\" events to the Analytics server.\n * This method can be called only when Analytics is enabled.\n *\n * @param {String} eventName - name of an event to subscribe to.\n */\nfunction _subscribeForEvents( eventName ) {\n    // Log the Search Filter events in the \"left side\" Navigation panel.\n    eventBus.subscribe( eventName, function( data ) {\n        var property = {};\n        if( data.source && data.categoryName ) {\n            property[ 'Command Id' ] = data.filterType;\n            property[ 'Command Location' ] = data.source;\n\n            // If the user enables the filter in the filter panel,\n            // the \"filterSelected\" field is coming in as \"false\"\n            if( data.hasOwnProperty( 'filterSelected' ) ) {\n                if( data.filterSelected === true ) {\n                    property[ 'Command Location' ] = data.source.concat( ' OFF' );\n                } else {\n                    property[ 'Command Location' ] = data.source.concat( ' ON' );\n                }\n            }\n        }\n\n        if( !_.isEmpty( property ) ) {\n            exports.logCommands( property );\n        }\n    } );\n}\n\n/**\n * Records resolution and zoom information and logs it to Siemens analytics\n *\n */\nfunction _getResolutionZoomInfo() {\n    var resolutionZoomData = JSON.parse( localStorage.getItem( 'sanResolutionZoom' ) );\n    var new_resolutionZoomData = {\n        sanCommandId: 'ResolutionZoomData',\n        sanCommandTitle: 'Resolution / Zoom Info',\n        width: parseInt( window.innerWidth ),\n        height: parseInt( window.innerHeight ),\n        zoom: Math.round( window.devicePixelRatio * 100 )\n    };\n\n    // if we have a resolution from last time...\n    if( resolutionZoomData ) {\n        // if the resolution has changed since the last time we reported it...\n        if( !( resolutionZoomData.width === new_resolutionZoomData.width &&\n                resolutionZoomData.height === new_resolutionZoomData.height &&\n                resolutionZoomData.zoom === new_resolutionZoomData.zoom ) ) {\n            localStorage.setItem( 'sanResolutionZoom', JSON.stringify( new_resolutionZoomData ) );\n            exports.logCommands( new_resolutionZoomData );\n        }\n    } else {\n        // this is the first time reporting this info, store it in localStorage and publish\n        localStorage.setItem( 'sanResolutionZoom', JSON.stringify( new_resolutionZoomData ) );\n        exports.logCommands( new_resolutionZoomData );\n    }\n}\n\n/**\n * This waits for either a \"progress.start\" or \"progress.end\" event to come in and once they do, it starts up an idle event publisher.\n */\nfunction _idleSetup() {\n    /**\n     * @param {String|null} endPoint - optional endPoint of the progress event\n     */\n    function processEvent( endPoint ) {\n        if( !/\\/getUnreadMessages$/.test( endPoint ) ) {\n            _isIdle = false;\n            eventBus.unsubscribe( progressStartListener );\n            eventBus.unsubscribe( progressEndListener );\n            _startupIdleEventPublisher();\n        }\n    }\n\n    var progressStartListener = eventBus.subscribe( 'progress.start', processEvent );\n    var progressEndListener = eventBus.subscribe( 'progress.end', processEvent );\n}\n\n/**\n * Sets up an Idle event publisher. This publisher uses a burndown timer which checks how long it has been since a \"progress.end\" or \"progress.start\"\n * event has come in. If one of those events come in, the burndown timer is restarted. Once the burndown exceeds its timer it will fire a single \"idle\"\n * event and then resume listening for a \"progress.end\"/\"progress.start\" event.\n */\nfunction _startupIdleEventPublisher() {\n    var idleBurndown;\n\n    /**\n     */\n    function processEvent() {\n        _isIdle = false;\n        clearTimeout( idleBurndown );\n        idleBurndown = _setupBurndownTimer( progressStartListener, progressEndListener );\n    }\n\n    var progressStartListener = eventBus.subscribe( 'progress.start', processEvent );\n    var progressEndListener = eventBus.subscribe( 'progress.end', processEvent );\n\n    idleBurndown = _setupBurndownTimer( progressStartListener, progressEndListener );\n}\n\n/**\n * Creates the burndown timer\n *\n * @param {Object} progressStartListener - eventBus subscription handle\n * @param {Object} progressEndListener - eventBus subscription handle\n * @return {Number} A Number, representing the ID value of the timer that is set. Use this value with the clearTimeout() method to cancel the timer.\n */\nfunction _setupBurndownTimer( progressStartListener, progressEndListener ) {\n    var idle_cutoff_seconds = 30;\n    return setTimeout( function() {\n        eventBus.publish( 'idle', {} );\n        _idleSetup();\n        eventBus.unsubscribe( progressStartListener );\n        eventBus.unsubscribe( progressEndListener );\n    }, idle_cutoff_seconds * 1000 );\n}\n\n/**\n * Initialize the SAN SDK\n *\n * @param {Boolean} useInternalServer - boolean indicating if the data should go to the internal site or external site\n * @param {String} repo - optional parameter which can be used to overwrite the predefined repo, used for redirecting to TcX repo\n * @param {Object} solution - solution object used to define the application name\n * @param {Object} versionConstants - object used to define the application version\n */\nfunction _initializeSan( useInternalServer, repo, solution, versionConstants ) {\n    San.setUserIdentifier( _userId );\n    San.setCustomerIdentifier( _vendorId );\n    var solutionId = repo ? repo : solution.solutionId;\n    var fullVersion = versionConstants.name + '@' + versionConstants.version + ' (' + versionConstants.description + ')';\n    // pull language from awSession in localStorage and convert to the object that SAN is expecting.\n    var applicationLanguage = '';\n    var sanApplicationLanguage = '';\n    try {\n        applicationLanguage = JSON.parse( localStorage.getItem( 'awSession:/' ) ).locale;\n    } catch ( error ) {\n        try {\n            applicationLanguage = localStorage.getItem( 'locale:/' );\n        } catch ( error ) {\n            applicationLanguage = '';\n        }\n    }\n    // Several AW locales like de are not in the format that SAN is expecting. This if block updates them to the proper format.\n    if ( applicationLanguage && applicationLanguage.length === 5 ) {\n        sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase();\n    } else if( applicationLanguage && applicationLanguage.length === 2 ) {\n        sanApplicationLanguage = 'applicationLanguage_' + applicationLanguage.toUpperCase() + '_' + applicationLanguage.toUpperCase();\n    } else {\n        sanApplicationLanguage = 'applicationLanguageNone';\n    }\n    // if for some reason, the language value lookup fails, default to None\n    // Languages which AW supports that SAN does not would be corrected here.\n    if ( San[sanApplicationLanguage] ) {\n        sanApplicationLanguage = San[sanApplicationLanguage];\n    } else {\n        sanApplicationLanguage = San.applicationLanguageNone;\n    }\n    // status and err_message are left for debugger use, not to be displayed to customer via console, etc\n    let status = San.initialize(\n        solutionId,\n        versionConstants.version,\n        fullVersion,\n        sanApplicationLanguage,\n        useInternalServer || undefined,\n        awConfiguration.get( 'baseUrl' ) + '/lib/piwik/piwik.js'\n    );\n    let err_message = San.getLastErrorMessage();\n}\n\nexports = {\n    setAutoTestMode,\n    reset,\n    authenticationSuccessful,\n    setPreInitData,\n    enable,\n    disable,\n    logEvent,\n    logPageViewEvent,\n    logProductInfo,\n    logCommands,\n    publishableValue\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
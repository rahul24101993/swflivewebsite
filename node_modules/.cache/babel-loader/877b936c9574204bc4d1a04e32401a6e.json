{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Memory Processor\n *\n * @module js/splmStatsMemProcessor\n */\n\n/**\n * Instances of this class represent a profiler for Memory Usage\n *\n * @class SPLMStatsMemProcessor\n */\nfunction SPLMStatsMemProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _memoryCaptures = [];\n\n  const _reset = function () {\n    _memoryCaptures = [];\n  };\n\n  self.start = function () {\n    _startProcessorTime = window.performance.now();\n\n    _reset();\n\n    if (window.performance && window.performance.memory) {\n      _memoryCaptures.push({\n        _usedJSHeapSize: (window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100).toFixed(2) + '%',\n        _bytesUsed: window.performance.memory.usedJSHeapSize\n      });\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n\n    if (window.performance && window.performance.memory) {\n      _memoryCaptures.push({\n        _usedJSHeapSize: (window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100).toFixed(2) + '%',\n        _bytesUsed: window.performance.memory.usedJSHeapSize\n      });\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      MemProcessorOverhead: _time\n    };\n  };\n\n  self.getMetrics = function () {\n    if (window.performance && window.performance.memory) {\n      let memoryConsumption = _memoryCaptures[_memoryCaptures.length - 1]._bytesUsed - _memoryCaptures[0]._bytesUsed; //end minus beginning\n\n      return {\n        MemoryConsumption: memoryConsumption,\n        //Bytes base value\n        MemoryUsed: _memoryCaptures[_memoryCaptures.length - 1]._bytesUsed,\n        MemoryStart: _memoryCaptures[_memoryCaptures.length - 1]._bytesUsed,\n        MemoryEnd: _memoryCaptures[0]._bytesUsed\n      };\n    }\n\n    return {\n      MemoryConsumption: 0,\n      MemoryUsed: 0\n    };\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsMemProcessor;\n_c = SPLMStatsMemProcessor;\nexport default SPLMStatsMemProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsMemProcessor\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsMemProcessor\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsMemProcessor.js"],"names":["SPLMStatsMemProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_memoryCaptures","_reset","window","_usedJSHeapSize","_bytesUsed","usedJSHeapSize","_time","MemProcessorOverhead","memoryConsumption","MemoryConsumption","MemoryUsed","MemoryStart","MemoryEnd"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA,qBAAA,GAAiC;EAC7B,IAAIC,IAAI,GAAR,IAAA;EAEA,IAAIC,eAAe,GAAnB,CAAA;EAEA,IAAIC,mBAAmB,GAAvB,CAAA;EAEA,IAAIC,iBAAiB,GAArB,CAAA;EAEA,IAAIC,eAAe,GAAnB,EAAA;;EAEA,MAAMC,MAAM,GAAG,YAAW;IACtBD,eAAe,GAAfA,EAAAA;EADJ,CAAA;;EAIAJ,IAAI,CAAJA,KAAAA,GAAa,YAAW;IACpBE,mBAAmB,GAAGI,MAAM,CAANA,WAAAA,CAAtBJ,GAAsBI,EAAtBJ;;IACAG,MAAM;;IAEN,IAAIC,MAAM,CAANA,WAAAA,IAAsBA,MAAM,CAANA,WAAAA,CAA1B,MAAA,EAAsD;MAClDF,eAAe,CAAfA,IAAAA,CAAsB;QAClBG,eAAe,EAAE,CAAED,MAAM,CAANA,WAAAA,CAAAA,MAAAA,CAAAA,cAAAA,GAA2CA,MAAM,CAANA,WAAAA,CAAAA,MAAAA,CAA3CA,eAAAA,GAAF,GAAA,EAAA,OAAA,CAAA,CAAA,IADC,GAAA;QAElBE,UAAU,EAAEF,MAAM,CAANA,WAAAA,CAAAA,MAAAA,CAA0BG;MAFpB,CAAtBL;IAIH;;IAEDD,iBAAiB,GAAGG,MAAM,CAANA,WAAAA,CAApBH,GAAoBG,EAApBH;IACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;EAZJD,CAAAA;;EAeAA,IAAI,CAAJA,IAAAA,GAAY,YAAW;IACnBE,mBAAmB,GAAGI,MAAM,CAANA,WAAAA,CAAtBJ,GAAsBI,EAAtBJ;;IACA,IAAII,MAAM,CAANA,WAAAA,IAAsBA,MAAM,CAANA,WAAAA,CAA1B,MAAA,EAAsD;MAClDF,eAAe,CAAfA,IAAAA,CAAsB;QAClBG,eAAe,EAAE,CAAED,MAAM,CAANA,WAAAA,CAAAA,MAAAA,CAAAA,cAAAA,GAA2CA,MAAM,CAANA,WAAAA,CAAAA,MAAAA,CAA3CA,eAAAA,GAAF,GAAA,EAAA,OAAA,CAAA,CAAA,IADC,GAAA;QAElBE,UAAU,EAAEF,MAAM,CAANA,WAAAA,CAAAA,MAAAA,CAA0BG;MAFpB,CAAtBL;IAIH;;IACDD,iBAAiB,GAAGG,MAAM,CAANA,WAAAA,CAApBH,GAAoBG,EAApBH;IACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;EATJD,CAAAA;;EAYAA,IAAI,CAAJA,iBAAAA,GAAyB,YAAW;IAChC,MAAMU,KAAK,GAAX,eAAA;IACAT,eAAe,GAAfA,CAAAA;IACA,OAAO;MAAEU,oBAAoB,EAAED;IAAxB,CAAP;EAHJV,CAAAA;;EAMAA,IAAI,CAAJA,UAAAA,GAAkB,YAAW;IACzB,IAAIM,MAAM,CAANA,WAAAA,IAAsBA,MAAM,CAANA,WAAAA,CAA1B,MAAA,EAAsD;MAClD,IAAIM,iBAAiB,GAAGR,eAAe,CAAEA,eAAe,CAAfA,MAAAA,GAAjBA,CAAe,CAAfA,CAAAA,UAAAA,GAA2DA,eAAe,CAAfA,CAAe,CAAfA,CADjC,UAClD,CADkD,CACkE;;MACpH,OAAO;QACHS,iBAAiB,EADd,iBAAA;QACmC;QACtCC,UAAU,EAAEV,eAAe,CAAEA,eAAe,CAAfA,MAAAA,GAAjBA,CAAe,CAAfA,CAFT,UAAA;QAGHW,WAAW,EAAEX,eAAe,CAAEA,eAAe,CAAfA,MAAAA,GAAjBA,CAAe,CAAfA,CAHV,UAAA;QAIHY,SAAS,EAAEZ,eAAe,CAAfA,CAAe,CAAfA,CAAqBI;MAJ7B,CAAP;IAMH;;IACD,OAAO;MACHK,iBAAiB,EADd,CAAA;MAEHC,UAAU,EAAE;IAFT,CAAP;EAVJd,CAAAA;;EAgBA,OAAA,IAAA;AACH;;MAjED,qB;KAASD,qB;AAmET,eAAA,qBAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Memory Processor\n *\n * @module js/splmStatsMemProcessor\n */\n\n/**\n * Instances of this class represent a profiler for Memory Usage\n *\n * @class SPLMStatsMemProcessor\n */\nfunction SPLMStatsMemProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n\n    let _startProcessorTime = 0;\n\n    let _endProcessorTime = 0;\n\n    let _memoryCaptures = [];\n\n    const _reset = function() {\n        _memoryCaptures = [];\n    };\n\n    self.start = function() {\n        _startProcessorTime = window.performance.now();\n        _reset();\n\n        if( window.performance && window.performance.memory ) {\n            _memoryCaptures.push( {\n                _usedJSHeapSize: ( window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100 ).toFixed( 2 ) + '%',\n                _bytesUsed: window.performance.memory.usedJSHeapSize\n            } );\n        }\n\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        if( window.performance && window.performance.memory ) {\n            _memoryCaptures.push( {\n                _usedJSHeapSize: ( window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100 ).toFixed( 2 ) + '%',\n                _bytesUsed: window.performance.memory.usedJSHeapSize\n            } );\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { MemProcessorOverhead: _time };\n    };\n\n    self.getMetrics = function() {\n        if( window.performance && window.performance.memory ) {\n            let memoryConsumption = _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed - _memoryCaptures[ 0 ]._bytesUsed; //end minus beginning\n            return {\n                MemoryConsumption: memoryConsumption, //Bytes base value\n                MemoryUsed: _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed,\n                MemoryStart: _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed,\n                MemoryEnd: _memoryCaptures[ 0 ]._bytesUsed\n            };\n        }\n        return {\n            MemoryConsumption: 0,\n            MemoryUsed: 0\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsMemProcessor;\n"]},"metadata":{},"sourceType":"module"}
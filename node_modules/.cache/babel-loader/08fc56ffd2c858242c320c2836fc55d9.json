{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * Customizing and overriding functions from (jquery.noty.js)\n *\n * @module js/jquery.noty.customized\n */\nimport $ from 'jquery';\nimport 'noty/jquery.noty';\nimport wcagSvc from 'js/wcagService';\nimport localeSvc from 'js/localeService';\nimport { svgString as CmdPin } from \"image/cmdPin24.svg\";\nimport { svgString as UiClose } from \"image/uiClose12.svg\";\n$.noty.pinnedMessage = [];\n\nvar _iconSvc;\n/**\n * Brings focus on the element after tab press form keyboard\n * related to WCAG work\n * @param {popup} notification message popup\n */\n\n\nvar makeCloseButtonKeyboardAccessible = function (popup) {\n  let closeButton = popup.$closeButton;\n  closeButton.attr('tabindex', '0');\n  closeButton.attr('role', 'button');\n  localeSvc.getLocalizedText('NotyMessages', 'closeNotification').then(function (localizedVal) {\n    closeButton.attr('aria-label', localizedVal);\n    closeButton.attr('data-locator', localizedVal);\n  }).catch(() => {});\n  closeButton.keydown(function (evt) {\n    if (wcagSvc.isValidKeyPress(evt)) {\n      popup.stopPropagation(evt);\n      popup.close();\n    }\n  });\n};\n/**\n * Has user pressed click or enter key on noty message\n *\n * @param {event}\n */\n\n\nvar hasUserClickedOrPressesEnter = function (evt) {\n  return evt.type && evt.type === 'click' || evt.type === 'keydown' && wcagSvc.isValidKeyPress(evt);\n};\n/**\n * @param {Object} notification - notification\n * @returns {Object} notification\n */\n\n\nvar customizedShow = function (notification) {\n  var self = notification; // eslint-disable-line consistent-this\n\n  self.key = new Date().getTime(); // adding new css class if buttons are present\n\n  if (self.options.buttons) {\n    self.$bar.find('.noty_message').addClass('message_with_buttons');\n  }\n\n  self.options.custom ? self.options.custom.find(self.options.layout.container.selector).append(self.$bar) : $(self.options.layout.container.selector).append(self.$bar);\n\n  if (self.options.theme && self.options.theme.style) {\n    self.options.theme.style.apply(self);\n  }\n\n  $.type(self.options.layout.css) === 'function' ? notification.options.layout.css.apply(self.$bar) : self.$bar.css(notification.options.layout.css || {});\n  self.$bar.addClass(self.options.layout.addClass);\n\n  if (!self.options.custom) {\n    // Add the image to pin icon and hide the icon in the beginning\n    self.$closeButton.empty();\n    self.$closeButton.hide();\n\n    if ($.inArray('X', self.options.closeWith) > -1) {\n      self.$closeButton.append(UiClose);\n    } else {\n      self.$closeButton.append(CmdPin);\n    } // following WCAG\n\n\n    makeCloseButtonKeyboardAccessible(self);\n  }\n\n  self.options.layout.container.style.apply($(self.options.layout.container.selector));\n  self.showing = true;\n\n  if (self.options.theme && self.options.theme.style) {\n    self.options.theme.callback.onShow.apply(notification);\n  }\n\n  if ($.inArray('click', self.options.closeWith) > -1) {\n    self.$bar.css('cursor', 'pointer').one('click', function (evt) {\n      self.stopPropagation(evt);\n\n      if (self.options.callback.onCloseClick) {\n        self.options.callback.onCloseClick.apply(self);\n      }\n\n      self.close();\n    });\n  }\n\n  if ($.inArray('hover', self.options.closeWith) > -1) {\n    self.$bar.one('mouseenter', function () {\n      self.close();\n    });\n  }\n\n  if ($.inArray('button', self.options.closeWith) > -1 || $.inArray('X', self.options.closeWith) > -1) {\n    self.$closeButton.one('click', function (evt) {\n      self.stopPropagation(evt);\n      self.close();\n    });\n  } // feature which makes the popup to stay when user clicks on it\n\n\n  if ($.inArray('stayOnClick', self.options.closeWith) > -1) {\n    self.$bar.one('click keydown', function (evt) {\n      // If there is previously pinned message, clear it first\n\n      /* if( $.noty.pinnedMessage !== undefined ) {\n          $.noty.pinnedMessage.close();\n          $.noty.pinnedMessage = undefined;\n      }*/\n      if (hasUserClickedOrPressesEnter(evt)) {\n        $.noty.pinnedMessage.push(self.key);\n        self.stopPropagation(evt); // clear the auto-dismissal of the notifications.\n\n        clearTimeout(self.$timeout);\n        self.isTimeoutActive = false;\n        self.$closeButton.one('click', function (evt) {\n          self.stopPropagation(evt);\n          self.close();\n          var position = $.noty.pinnedMessage.indexOf(self.key); // remove from pinned array\n\n          if (position > -1) {\n            $.noty.pinnedMessage.splice(position, 1);\n          }\n        });\n      }\n    });\n  } // We want $closeButton to still be available because we are using 'stayOnClick' for closeWith option.\n  // When notifications are pinned, the only way to close them would be using the $closeButton click.\n  // Note that $closeButton is jQuery reference to div element with class '.noty_close' defined in the default template.\n  // See $.noty.defaults.template in jquery.noty.js; Override this behavior from default.\n\n\n  if ($.inArray('button', self.options.closeWith) === -1 && $.inArray('X', self.options.closeWith) === -1 && $.inArray('stayOnClick', self.options.closeWith) === -1) {\n    self.$closeButton.remove();\n  }\n\n  if (self.options.callback.onShow) {\n    self.options.callback.onShow.apply(self);\n  }\n\n  self.$bar.animate(self.options.animation.open, self.options.animation.speed, self.options.animation.easing, function () {\n    if (!self.options.custom) {\n      self.$closeButton.show();\n    }\n\n    if (self.options.callback.afterShow) {\n      self.options.callback.afterShow.apply(self);\n    }\n\n    self.showing = false;\n    self.shown = true;\n  }); // If noty is have a timeout option\n\n  if (self.options.timeout) {\n    self.$timeout = setTimeout(function () {\n      self.close();\n    }, self.options.timeout);\n    self.isTimeoutActive = true;\n  } //wcag region violation fix. role='alert' for notifications\n\n\n  let notyBar = self.$bar.find('.noty_bar');\n  notyBar.attr('role', 'alert');\n  notyBar.attr('tabindex', '0');\n  self.$bar.attr('aria-live', 'assertive');\n  notyBar.addClass('noty_msg');\n  let notyContainer = self.$bar[0].parentElement;\n  notyContainer.setAttribute('data-locator', 'noty_bottom_layout_container');\n  return notification;\n};\n/**\n * Create a new child scope based on the document's scope.\n * <P>\n * Note: We do not want to use the 'root' scope for inserting new elements into since it has been shown to not be\n * the one the API is eventually added to (it will be a child of it anyway).\n * <P>\n * Insert and compile directives into notification pop-up\n *\n * @param {Object} notification - notification\n */\n\n\nvar insertCustomElement = function (notification) {\n  if (!notification || !notification.options || !notification.options.messageData || !notification.options.messageData.isCustomElem) {\n    return;\n  }\n  /* revisitme - pengw\n  if( notification && notification.$bar && notification.options.text ) {\n      var docNgElement = ngModule.element( document.body );\n      var docScope = docNgElement.scope();\n       var parentScope = docScope.$new();\n       $( 'ul#noty_bottom_layout_container' ).data( '$scope', parentScope );\n       var parentElement = $( notification.$bar[ 0 ] ).find( 'span.noty_text' );\n       // Create an 'outer' <DIV> (to hold the given 'inner' HTML) and create the angular controller on it.\n      // <P>\n      // Remove any existing 'children' of the given 'parent'\n      // <P>\n      // Add this new element as a 'child' of the given 'parent'\n      var ctrlElement = ngModule.element( '<div class=\"aw-jswidgets-notyContainer\" ></div>' );\n       ctrlElement.html( notification.options.text );\n       if( parentElement ) {\n          $( parentElement ).empty();\n          $( parentElement ).append( ctrlElement );\n      }\n       parentScope.subPanelContext = notification.options.messageData;\n       ngUtils.include( parentElement, ctrlElement );\n  }\n  */\n\n};\n/**\n * Prepare an object like one for aw-popup-panel-2. This is consumed by wcag service to set focus on noty message just like the\n * popup for group commands\n * @param {*} notification\n * @param {parentElement} noty message's first focussable container\n */\n\n\nvar mimicPopupToMakeARefObject = function (parentElement) {\n  return {\n    panelEl: parentElement,\n    options: {\n      reference: parentElement\n    },\n    id: parentElement.id\n  };\n};\n/**\n * Determine if focus is inside the noty msg\n *\n * @param {notification} notification\n */\n\n\nvar isFocusInsideNotyMsg = function (notification) {\n  let msgHTMLcontent = notification.$bar && notification.$bar.parent();\n  let focusedElementsInsideNoty = msgHTMLcontent && msgHTMLcontent.find(document.activeElement);\n  return focusedElementsInsideNoty && focusedElementsInsideNoty.length !== 0;\n};\n/**\n * check if the interaction is happening via keyboard or mouse\n */\n\n\nvar isKeyboardAccessingDOM = function () {\n  return document.body.classList.contains('keyboard');\n};\n/**\n * As soon as noty msg opens up, it should get the focus\n *\n * @param {notification} notification\n */\n\n\nvar grabFocusOnNotyMsg = function (notification) {\n  let removeListeners = [];\n  let elementTriggeringNotyMsg = document.activeElement.parentElement;\n\n  var giveFocusBackToSourceElement = function () {\n    if (isFocusInsideNotyMsg(notification)) {\n      // If a child command trigerrs noty msg then elementTriggeringNotyMsg points to the child command\n      // But on popup closure the parent command gets the focus and hence should be used as elementTriggeringNotyMsg\n      let parentCommand = wcagSvc.getParentOfGroupCmds();\n\n      if (parentCommand) {\n        elementTriggeringNotyMsg = parentCommand;\n        wcagSvc.setParentOfGroupCmds(null);\n      }\n\n      if (isKeyboardAccessingDOM()) {\n        wcagSvc.skipToFirstFocusableElement(elementTriggeringNotyMsg);\n      }\n    }\n\n    removeListeners.forEach(listener => {\n      listener();\n    });\n  };\n\n  notification.options.callback.afterClose = giveFocusBackToSourceElement;\n  let notyParentElement = notification.$bar.parent();\n  wcagSvc.skipToFirstFocusableElement(notyParentElement[0]);\n  let popupRef = mimicPopupToMakeARefObject(notyParentElement[0]);\n  let handlers = wcagSvc.configureAutoFocus(notyParentElement[0], popupRef);\n  removeListeners.push(...handlers.removeHandlers);\n};\n/**\n * overriding show method of '$.notyRenderer'\n *\n * @param {Object} notification - notification\n */\n\n\nexport let show = function (notification) {\n  if (notification.options.modal) {\n    $.notyRenderer.createModalFor(notification);\n    $.notyRenderer.setModalCount(+1);\n  } // Where is the container?\n\n\n  if (notification.options.custom) {\n    if (notification.options.custom.find(notification.options.layout.container.selector).length === 0) {\n      notification.options.custom.append($(notification.options.layout.container.object).addClass('layoutContainer'));\n    } else {\n      notification.options.custom.find(notification.options.layout.container.selector).removeClass('layoutContainer');\n    }\n  } else {\n    if ($(notification.options.layout.container.selector).length === 0) {\n      $('body').append($(notification.options.layout.container.object).addClass('layoutContainer'));\n    } else {\n      $(notification.options.layout.container.selector).removeClass('layoutContainer');\n    }\n  }\n\n  $.notyRenderer.setLayoutCountFor(notification, +1); // customized show method\n\n  customizedShow(notification);\n  grabFocusOnNotyMsg(notification);\n  insertCustomElement(notification);\n};\n$.notyRenderer.show = show;\n/**\n * Fix for 'modal option with custom css theme', which is fixed in release 2.2.2.<br>\n * Remove this once upgraded to Noty 2.2.2\n *\n * @param {Object} notification - notification\n */\n\nexport let createModalFor = function (notification) {\n  if ($('.noty_modal').length === 0) {\n    var modal = $('<div></div>').addClass('noty_modal').addClass(notification.options.theme).data('noty_modal_count', 0);\n\n    if (notification.options.theme.modal && notification.options.theme.modal.css) {\n      modal.css(notification.options.theme.modal.css);\n    }\n\n    modal.prependTo($('body')).fadeIn('fast');\n  }\n};\n$.notyRenderer.createModalFor = createModalFor;\n/**\n * Sets the svg content for the icons - pin and unpin+\n *\n * @param {Object} iconSvc - icon service\n */\n\nexport let setIconService = function (iconSvc) {\n  _iconSvc = iconSvc;\n};\n$.notyRenderer.setIconService = setIconService;\n/**\n * Passthrough method for close.\n *\n */\n\nexport let close = function () {\n  $.noty.clearQueue();\n  $.each($.noty.store, function (id, noty) {\n    if ($.noty.pinnedMessage.indexOf(noty.key) <= -1) {\n      noty.close();\n    }\n  });\n};\n$.notyRenderer.close = close;\n/** **************************************************************************** */\n\n/** Customizing JavaScript for noty bottom layout (bottom.js) * */\n\n/** **************************************************************************** */\n\n$.noty.layouts.bottom = {\n  name: 'bottom',\n  options: {},\n  container: {\n    object: '<ul id=\"noty_bottom_layout_container\" ></ul>',\n    selector: 'ul#noty_bottom_layout_container',\n    style: function () {\n      $(this).css({//\n      });\n    }\n  },\n  parent: {\n    object: '<li ></li>',\n    selector: 'li',\n    css: {}\n  },\n  css: {\n    display: 'none'\n  },\n  addClass: ''\n};\nexport let init = $.notyRenderer.init;\nexport let render = $.notyRenderer.render;\nexport let getModalCount = $.notyRenderer.getModalCount;\nexport let setModalCount = $.notyRenderer.setModalCount;\nexport let getLayoutCountFor = $.notyRenderer.getLayoutCountFor;\nexport let setLayoutCountFor = $.notyRenderer.setLayoutCountFor;\nexport default $.notyRenderer;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/noty/src/js/jquery.noty.customized.js"],"names":["$","makeCloseButtonKeyboardAccessible","closeButton","popup","localeSvc","wcagSvc","hasUserClickedOrPressesEnter","evt","customizedShow","self","notification","clearTimeout","position","setTimeout","notyBar","notyContainer","insertCustomElement","mimicPopupToMakeARefObject","panelEl","options","reference","parentElement","id","isFocusInsideNotyMsg","msgHTMLcontent","focusedElementsInsideNoty","document","isKeyboardAccessingDOM","grabFocusOnNotyMsg","removeListeners","elementTriggeringNotyMsg","giveFocusBackToSourceElement","parentCommand","listener","notyParentElement","popupRef","handlers","show","createModalFor","modal","setIconService","_iconSvc","close","noty","name","container","object","selector","style","parent","css","display","addClass","init","render","getModalCount","setModalCount","getLayoutCountFor","setLayoutCountFor"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * Customizing and overriding functions from (jquery.noty.js)\n *\n * @module js/jquery.noty.customized\n */\nimport $ from 'jquery';\nimport 'noty/jquery.noty';\nimport wcagSvc from 'js/wcagService';\nimport localeSvc from 'js/localeService';\nimport { svgString as CmdPin } from 'image/cmdPin24.svg';\nimport { svgString as UiClose } from 'image/uiClose12.svg';\n$.noty.pinnedMessage = [];\n\nvar _iconSvc;\n\n/**\n * Brings focus on the element after tab press form keyboard\n * related to WCAG work\n * @param {popup} notification message popup\n */\nvar makeCloseButtonKeyboardAccessible = function( popup ) {\n    let closeButton = popup.$closeButton;\n    closeButton.attr( 'tabindex', '0' );\n    closeButton.attr( 'role', 'button' );\n    localeSvc.getLocalizedText( 'NotyMessages', 'closeNotification' ).then( function( localizedVal ) {\n        closeButton.attr( 'aria-label', localizedVal );\n        closeButton.attr( 'data-locator', localizedVal );\n    } ).catch( () => {} );\n    closeButton.keydown( function( evt ) {\n        if( wcagSvc.isValidKeyPress( evt ) ) {\n            popup.stopPropagation( evt );\n            popup.close();\n        }\n    } );\n};\n\n/**\n * Has user pressed click or enter key on noty message\n *\n * @param {event}\n */\nvar hasUserClickedOrPressesEnter = function( evt ) {\n    return evt.type &&\n        evt.type === 'click' ||\n        evt.type === 'keydown' && wcagSvc.isValidKeyPress( evt );\n};\n\n/**\n * @param {Object} notification - notification\n * @returns {Object} notification\n */\nvar customizedShow = function( notification ) {\n    var self = notification; // eslint-disable-line consistent-this\n    self.key = new Date().getTime();\n\n    // adding new css class if buttons are present\n    if( self.options.buttons ) {\n        self.$bar.find( '.noty_message' ).addClass( 'message_with_buttons' );\n    }\n\n    self.options.custom ? self.options.custom.find( self.options.layout.container.selector ).append( self.$bar ) : $( self.options.layout.container.selector ).append( self.$bar );\n\n    if( self.options.theme && self.options.theme.style ) {\n        self.options.theme.style.apply( self );\n    }\n\n    $.type( self.options.layout.css ) === 'function' ? notification.options.layout.css.apply( self.$bar ) : self.$bar.css( notification.options.layout.css || {} );\n\n    self.$bar.addClass( self.options.layout.addClass );\n    if( !self.options.custom ) {\n        // Add the image to pin icon and hide the icon in the beginning\n        self.$closeButton.empty();\n        self.$closeButton.hide();\n        if( $.inArray( 'X', self.options.closeWith ) > -1 ) {\n            self.$closeButton.append( UiClose );\n        } else {\n            self.$closeButton.append( CmdPin );\n        }\n        // following WCAG\n        makeCloseButtonKeyboardAccessible( self );\n    }\n\n    self.options.layout.container.style.apply( $( self.options.layout.container.selector ) );\n\n    self.showing = true;\n\n    if( self.options.theme && self.options.theme.style ) {\n        self.options.theme.callback.onShow.apply( notification );\n    }\n\n    if( $.inArray( 'click', self.options.closeWith ) > -1 ) {\n        self.$bar.css( 'cursor', 'pointer' ).one( 'click', function( evt ) {\n            self.stopPropagation( evt );\n            if( self.options.callback.onCloseClick ) {\n                self.options.callback.onCloseClick.apply( self );\n            }\n            self.close();\n        } );\n    }\n\n    if( $.inArray( 'hover', self.options.closeWith ) > -1 ) {\n        self.$bar.one( 'mouseenter', function() {\n            self.close();\n        } );\n    }\n\n    if( $.inArray( 'button', self.options.closeWith ) > -1 ||\n        $.inArray( 'X', self.options.closeWith ) > -1 ) {\n        self.$closeButton.one( 'click', function( evt ) {\n            self.stopPropagation( evt );\n            self.close();\n        } );\n    }\n\n    // feature which makes the popup to stay when user clicks on it\n    if( $.inArray( 'stayOnClick', self.options.closeWith ) > -1 ) {\n        self.$bar.one( 'click keydown', function( evt ) {\n            // If there is previously pinned message, clear it first\n            /* if( $.noty.pinnedMessage !== undefined ) {\n                $.noty.pinnedMessage.close();\n                $.noty.pinnedMessage = undefined;\n            }*/\n\n            if( hasUserClickedOrPressesEnter( evt ) ) {\n                $.noty.pinnedMessage.push( self.key );\n\n                self.stopPropagation( evt );\n\n                // clear the auto-dismissal of the notifications.\n                clearTimeout( self.$timeout );\n                self.isTimeoutActive = false;\n\n                self.$closeButton.one( 'click', function( evt ) {\n                    self.stopPropagation( evt );\n                    self.close();\n                    var position = $.noty.pinnedMessage.indexOf( self.key );\n                    // remove from pinned array\n                    if( position > -1 ) {\n                        $.noty.pinnedMessage.splice( position, 1 );\n                    }\n                } );\n            }\n        } );\n    }\n\n    // We want $closeButton to still be available because we are using 'stayOnClick' for closeWith option.\n    // When notifications are pinned, the only way to close them would be using the $closeButton click.\n    // Note that $closeButton is jQuery reference to div element with class '.noty_close' defined in the default template.\n    // See $.noty.defaults.template in jquery.noty.js; Override this behavior from default.\n    if( $.inArray( 'button', self.options.closeWith ) === -1 &&\n        $.inArray( 'X', self.options.closeWith ) === -1 &&\n        $.inArray( 'stayOnClick', self.options.closeWith ) === -1 ) {\n        self.$closeButton.remove();\n    }\n\n    if( self.options.callback.onShow ) {\n        self.options.callback.onShow.apply( self );\n    }\n\n    self.$bar.animate( self.options.animation.open, self.options.animation.speed, self.options.animation.easing,\n        function() {\n            if( !self.options.custom ) {\n                self.$closeButton.show();\n            }\n            if( self.options.callback.afterShow ) {\n                self.options.callback.afterShow.apply( self );\n            }\n            self.showing = false;\n            self.shown = true;\n        } );\n\n    // If noty is have a timeout option\n    if( self.options.timeout ) {\n        self.$timeout = setTimeout( function() {\n            self.close();\n        }, self.options.timeout );\n        self.isTimeoutActive = true;\n    }\n    //wcag region violation fix. role='alert' for notifications\n    let notyBar = self.$bar.find( '.noty_bar' );\n    notyBar.attr( 'role', 'alert' );\n    notyBar.attr( 'tabindex', '0' );\n    self.$bar.attr( 'aria-live', 'assertive' );\n    notyBar.addClass( 'noty_msg' );\n\n    let notyContainer = self.$bar[ 0 ].parentElement;\n    notyContainer.setAttribute( 'data-locator', 'noty_bottom_layout_container' );\n\n    return notification;\n};\n\n/**\n * Create a new child scope based on the document's scope.\n * <P>\n * Note: We do not want to use the 'root' scope for inserting new elements into since it has been shown to not be\n * the one the API is eventually added to (it will be a child of it anyway).\n * <P>\n * Insert and compile directives into notification pop-up\n *\n * @param {Object} notification - notification\n */\nvar insertCustomElement = function( notification ) {\n    if( !notification || !notification.options || !notification.options.messageData ||\n        !notification.options.messageData.isCustomElem ) {\n        return;\n    }\n\n    /* revisitme - pengw\n    if( notification && notification.$bar && notification.options.text ) {\n        var docNgElement = ngModule.element( document.body );\n        var docScope = docNgElement.scope();\n\n        var parentScope = docScope.$new();\n\n        $( 'ul#noty_bottom_layout_container' ).data( '$scope', parentScope );\n\n        var parentElement = $( notification.$bar[ 0 ] ).find( 'span.noty_text' );\n\n        // Create an 'outer' <DIV> (to hold the given 'inner' HTML) and create the angular controller on it.\n        // <P>\n        // Remove any existing 'children' of the given 'parent'\n        // <P>\n        // Add this new element as a 'child' of the given 'parent'\n        var ctrlElement = ngModule.element( '<div class=\"aw-jswidgets-notyContainer\" ></div>' );\n\n        ctrlElement.html( notification.options.text );\n\n        if( parentElement ) {\n            $( parentElement ).empty();\n            $( parentElement ).append( ctrlElement );\n        }\n\n        parentScope.subPanelContext = notification.options.messageData;\n\n        ngUtils.include( parentElement, ctrlElement );\n    }\n    */\n};\n/**\n * Prepare an object like one for aw-popup-panel-2. This is consumed by wcag service to set focus on noty message just like the\n * popup for group commands\n * @param {*} notification\n * @param {parentElement} noty message's first focussable container\n */\nvar mimicPopupToMakeARefObject = function( parentElement ) {\n    return {\n        panelEl: parentElement,\n        options: {\n            reference: parentElement\n        },\n        id: parentElement.id\n\n    };\n};\n\n/**\n * Determine if focus is inside the noty msg\n *\n * @param {notification} notification\n */\nvar isFocusInsideNotyMsg = function( notification ) {\n    let msgHTMLcontent = notification.$bar && notification.$bar.parent();\n    let focusedElementsInsideNoty = msgHTMLcontent && msgHTMLcontent.find( document.activeElement );\n    return focusedElementsInsideNoty && focusedElementsInsideNoty.length !== 0;\n};\n\n/**\n * check if the interaction is happening via keyboard or mouse\n */\nvar isKeyboardAccessingDOM = function() {\n    return document.body.classList.contains( 'keyboard' );\n};\n\n/**\n * As soon as noty msg opens up, it should get the focus\n *\n * @param {notification} notification\n */\nvar grabFocusOnNotyMsg = function( notification ) {\n    let removeListeners = [];\n    let elementTriggeringNotyMsg = document.activeElement.parentElement;\n\n    var giveFocusBackToSourceElement = function() {\n        if( isFocusInsideNotyMsg( notification ) ) {\n            // If a child command trigerrs noty msg then elementTriggeringNotyMsg points to the child command\n            // But on popup closure the parent command gets the focus and hence should be used as elementTriggeringNotyMsg\n            let parentCommand = wcagSvc.getParentOfGroupCmds();\n            if( parentCommand ) {\n                elementTriggeringNotyMsg = parentCommand;\n                wcagSvc.setParentOfGroupCmds( null );\n            }\n            if( isKeyboardAccessingDOM() ) {\n                wcagSvc.skipToFirstFocusableElement( elementTriggeringNotyMsg );\n            }\n        }\n        removeListeners.forEach( listener => {\n            listener();\n        } );\n    };\n    notification.options.callback.afterClose = giveFocusBackToSourceElement;\n\n    let notyParentElement = notification.$bar.parent();\n    wcagSvc.skipToFirstFocusableElement( notyParentElement[ 0 ] );\n\n    let popupRef = mimicPopupToMakeARefObject( notyParentElement[ 0 ] );\n    let handlers = wcagSvc.configureAutoFocus( notyParentElement[ 0 ], popupRef );\n    removeListeners.push( ...handlers.removeHandlers );\n};\n\n/**\n * overriding show method of '$.notyRenderer'\n *\n * @param {Object} notification - notification\n */\nexport let show = function( notification ) {\n    if( notification.options.modal ) {\n        $.notyRenderer.createModalFor( notification );\n        $.notyRenderer.setModalCount( +1 );\n    }\n\n    // Where is the container?\n    if( notification.options.custom ) {\n        if( notification.options.custom.find( notification.options.layout.container.selector ).length === 0 ) {\n            notification.options.custom.append( $( notification.options.layout.container.object ).addClass(\n                'layoutContainer' ) );\n        } else {\n            notification.options.custom.find( notification.options.layout.container.selector ).removeClass(\n                'layoutContainer' );\n        }\n    } else {\n        if( $( notification.options.layout.container.selector ).length === 0 ) {\n            $( 'body' ).append( $( notification.options.layout.container.object ).addClass( 'layoutContainer' ) );\n        } else {\n            $( notification.options.layout.container.selector ).removeClass( 'layoutContainer' );\n        }\n    }\n\n    $.notyRenderer.setLayoutCountFor( notification, +1 );\n\n    // customized show method\n    customizedShow( notification );\n    grabFocusOnNotyMsg( notification );\n    insertCustomElement( notification );\n};\n$.notyRenderer.show = show;\n\n/**\n * Fix for 'modal option with custom css theme', which is fixed in release 2.2.2.<br>\n * Remove this once upgraded to Noty 2.2.2\n *\n * @param {Object} notification - notification\n */\nexport let createModalFor = function( notification ) {\n    if( $( '.noty_modal' ).length === 0 ) {\n        var modal = $( '<div></div>' ).addClass( 'noty_modal' ).addClass( notification.options.theme ).data(\n            'noty_modal_count', 0 );\n\n        if( notification.options.theme.modal && notification.options.theme.modal.css ) {\n            modal.css( notification.options.theme.modal.css );\n        }\n\n        modal.prependTo( $( 'body' ) ).fadeIn( 'fast' );\n    }\n};\n$.notyRenderer.createModalFor = createModalFor;\n\n/**\n * Sets the svg content for the icons - pin and unpin+\n *\n * @param {Object} iconSvc - icon service\n */\nexport let setIconService = function( iconSvc ) {\n    _iconSvc = iconSvc;\n};\n$.notyRenderer.setIconService = setIconService;\n\n/**\n * Passthrough method for close.\n *\n */\nexport let close = function() {\n    $.noty.clearQueue();\n    $.each( $.noty.store, function( id, noty ) {\n        if( $.noty.pinnedMessage.indexOf( noty.key ) <= -1 ) {\n            noty.close();\n        }\n    } );\n};\n$.notyRenderer.close = close;\n\n/** **************************************************************************** */\n/** Customizing JavaScript for noty bottom layout (bottom.js) * */\n/** **************************************************************************** */\n$.noty.layouts.bottom = {\n    name: 'bottom',\n    options: {},\n    container: {\n        object: '<ul id=\"noty_bottom_layout_container\" ></ul>',\n\n        selector: 'ul#noty_bottom_layout_container',\n\n        style: function() {\n            $( this ).css( {\n                //\n            } );\n        }\n    },\n    parent: {\n        object: '<li ></li>',\n        selector: 'li',\n        css: {}\n    },\n    css: {\n        display: 'none'\n    },\n    addClass: ''\n};\n\nexport let init = $.notyRenderer.init;\nexport let render = $.notyRenderer.render;\n\nexport let getModalCount = $.notyRenderer.getModalCount;\nexport let setModalCount = $.notyRenderer.setModalCount;\n\nexport let getLayoutCountFor = $.notyRenderer.getLayoutCountFor;\nexport let setLayoutCountFor = $.notyRenderer.setLayoutCountFor;\n\nexport default $.notyRenderer;\n"]},"metadata":{},"sourceType":"module"}
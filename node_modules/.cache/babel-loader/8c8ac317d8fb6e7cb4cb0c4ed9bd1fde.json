{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmTableUtils\n */import _ from'lodash';import appCtxService from'js/appCtxService';import awTableStateService from'js/awTableStateService';import browserUtils from'js/browserUtils';import{unmountComponents}from'js/declReactUtils';import editEventsService from'js/editEventsService';import htmlUtils from'js/htmlUtils';import ngUtils from'js/ngUtils';import{getEvaluatedId}from'js/uwUtilService';import Const from'js/splmTableConstants';var exports={};/**\n * Locate the closest element including self\n * http://stackoverflow.com/a/24107550/888165\n *\n * @param {DOMElement} element element to start search\n *\n * @param {String} selector css selector to use in locating closest element\n *\n * @param {Int} maxLevelsUp the maximum levels up to search\n *\n * @returns {DOMElement} the closest element\n */exports.closestElement=function(element,selector,maxLevelsUp){return htmlUtils.closestElement(element,selector,maxLevelsUp);};/**\n * Returns the index of the node in its parent\n *\n * @param {DOMElement} node - The node to find the index of\n *\n * @return {Number} the index of the node\n */exports.getIndexInParent=function(node){var i=0;while(node.previousElementSibling){node=node.previousElementSibling;i++;}return i;};/**\n * Get all table content cell in specific column.\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {Number} columnIndex - The column index\n *\n * @return {Array} List of DOMElements for table content cells.\n */exports.getColumnContentCellElementsByIndex=function(tableElement,columnIndex){var returnCellElements=[];var cellElements=tableElement.getElementsByClassName(Const.CLASS_CELL);_.forEach(cellElements,function(cellElement){if(cellElement.columnDef){if(cellElement.columnDef.index===columnIndex){returnCellElements.push(cellElement);}}});return returnCellElements;};/**\n * Get property object/view model for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */exports.getPropertyByCellElement=function(cellElement){var rowElement=exports.closestElement(cellElement,'.'+Const.CLASS_ROW);if(rowElement.vmo&&rowElement.vmo.props){return rowElement.vmo.props[cellElement.columnDef.field];}return null;};/**\n * Get view model object for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */exports.getViewModelObjectByCellElement=function(cellElement){return cellElement.parentElement.vmo;};/**\n * Get cell element by object UID and property name\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {String} propertyName - The property name\n *\n * @param {String} vmoUid - The uid to view model object\n *\n * @return {DOMElement} The DOMElement to table content cell which presents specific property of the vmo.\n */exports.getCellElementsByPropertyAndUid=function(tableElement,propertyName,vmoUid){let returnCellElements=[];const rowElements=tableElement.getElementsByClassName(Const.CLASS_ROW);for(let i=0;i<rowElements.length;i++){if(rowElements[i].vmo&&getEvaluatedId(rowElements[i].vmo)===vmoUid){let cellElements=rowElements[i].getElementsByClassName(Const.CLASS_CELL);for(let j=0;j<cellElements.length;j++){if(cellElements[j].columnDef&&cellElements[j].columnDef.field===propertyName){returnCellElements.push(cellElements[j]);}}}}return returnCellElements;};/**\n * Cleans up react components used in table\n * @param {DOMElement} element The root node to cleanup components from\n */exports.cleanupComponents=function(element){// get the container elements that could potentially have a component\n// grid cell commands, tree expand/collapse icon, table editor cell\nconst selectors='.aw-splm-gridCellCommandsContainer, .aw-jswidgets-treeExpandCollapseCmd, .aw-jswidgets-tableEditContainer';unmountComponents(element,selectors);};/**\n * Create DOMElement based on AngularJS HTML Template for PL Table.\n * - Only single nest HTML description is supported.\n * - When use it inside a cell, it will be recycled automatically by row virtual rendering.\n * - When use it inside a table, it will be recycled when table is getting destroyed.\n *\n * @param {String} htmlContent - The HTML Content/AngularJS Template string needs to compile\n *\n * @param {DOMElement} parentElement - Parent DOMElement in PLTable as Context, could be direct parent or PL Table Element\n *            If parent DOMElement is not in table yet, please use table element.\n *\n * @param {Object} [scopeData] - Arbitrary object to be set as the primary '$scope' (i.e. 'context') of the new\n *            AngularJS controller.\n *\n\n * @param {DeclViewModel} [declViewModel] - The object to set as the 'data' property on the controller's '$scope'.\n *\n * @return {DOMElement} Compiled DOM Element from AngularJS HTML Template input\n */exports.createNgElement=function(htmlContent,parentElement,scopeData,declViewModel){return undefined;};/**\n * Destroys and removes the passed in angularJS DOMElement\n *\n * @param {DOMElement} element - DOMElement that has an angular scope\n * */exports.destroyElement=function(element){ngUtils.destroyElement(element);};/**\n * Destroys and removes the passed in DOMElements based under input DOM Element\n *\n * @param {DOMElement} element - DOMElement that has  DOM Elements as child elements\n * */exports.destroyChildElements=function(element){ngUtils.destroyChildElements(element,Const.CLASS_COMPILED_ELEMENT);};/**\n * revisitme\n * tstark - leave for refactor\n * remove angularism\n * Get AngularJS Scope Variable for Element compiled from AngularJS Template\n *\n * @param {DOMElement} element - DOMElement which is compiled from AngularJS Template.\n *\n * @param {Boolean} isIsolated - if true returns isolate scope.\n *\n * @return {Object} Scope object for specific AngularJS Element\n\nexports.getElementScope = function( element, isIsolated ) {\n    return ngUtils.getElementScope( element, isIsolated );\n};\n */ /**\n * Get width for element text content\n * https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript\n *\n * @param {DOMElement} element - DOMElement in table.\n *\n * @return {Number} Font size as number\n */exports.getElementTextWidth=function(element){var width=0;var cloneElem=element.cloneNode(true);cloneElem.style.position='absolute';cloneElem.style.visibility='hidden';cloneElem.style.height='auto';cloneElem.style.width='auto';cloneElem.style.whiteSpace='nowrap';if(element.parentElement){element.parentElement.appendChild(cloneElem);// Plus 10 blindly for possible container styling\nwidth=Math.round(cloneElem.clientWidth)+10;element.parentElement.removeChild(cloneElem);}return width;};/**\n * Create DOM Element with CSS Class Definitions\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */exports.createElement=function(){var elem=document.createElement(arguments[0]);for(var i=1;i<arguments.length;i++){elem.classList.add(arguments[i]);}return elem;};/**\n * Update attribute on DOM element\n *\n * @param {String} elem - DOMElement name.\n * @param {String} attribute -   attribute name.\n * @param {String} attrValue -   attribute value.\n * @return {DOMElement} updated DOMElement\n */exports.addAttributeToDOMElement=function(elem,attribute,attrValue){var att=document.createAttribute(attribute);att.value=attrValue;elem.setAttributeNode(att);return elem;};/**\n * Create Color Indicator Element based on vmo information\n *\n * @param {Object} vmo - View model object\n *\n * @return {DOMElement} created DOMElement\n */exports.createColorIndicatorElement=function(vmo){var colorIndicatorElement=null;// Create color indicator element with proper classes\nif(vmo.gridDecoratorStyle){colorIndicatorElement=exports.createElement('span',vmo.gridDecoratorStyle,Const.CLASS_AW_CELL_COLOR_INDICATOR,Const.CLASS_CELL_COLOR_INDICATOR);}else{colorIndicatorElement=exports.createElement('span',Const.CLASS_AW_CELL_COLOR_INDICATOR,Const.CLASS_CELL_COLOR_INDICATOR);}// Add title\nif(vmo.colorTitle){colorIndicatorElement.title=vmo.colorTitle;}return colorIndicatorElement;};/**\n * Create custom event. Mainly for IE\n *\n * @param {String} eventName - Name of the event\n *\n * @param {Object} eventDetail - Object for event detail\n *\n * @return {DOMElement} created DOMElement\n */exports.createCustomEvent=function(eventName,eventDetail){if(browserUtils.isNonEdgeIE){var evt=document.createEvent('CustomEvent');evt.initCustomEvent(eventName,false,false,eventDetail);return evt;}return new CustomEvent(eventName,{detail:eventDetail});};/**\n * Get Table Control Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */exports.getTableController=function(tableElement){return exports.getTableInstance(tableElement).controller;};/**\n * Get Menu Service from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Menu Utils object for current table.\n */exports.getTableMenuService=function(tableElement){return exports.getTableInstance(tableElement).menuService;};/**\n * Get Table Instance Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */exports.getTableInstance=function(tableElement){return tableElement._tableInstance;};/**\n * Returns the isBulkEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table is in bulk editing mode\n */exports.isBulkEditing=function(tableElement){return exports.getTableInstance(tableElement).isBulkEditing;};/**\n * Sets the isBulkEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isBulkEditing - the isBulkEditing value\n */exports.setIsBulkEditing=function(tableElement,isBulkEditing){exports.getTableInstance(tableElement).isBulkEditing=isBulkEditing;};/**\n * Returns the isCellEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table has cellEditing\n */exports.isCellEditing=function(tableElement){return exports.getTableInstance(tableElement).isCellEditing;};/**\n * Sets the isCellEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isCellEditing - the isCellEditing value\n */exports.setIsCellEditing=function(tableElement,isCellEditing){exports.getTableInstance(tableElement).isCellEditing=isCellEditing;};/**\n * Create objects with all arguments pass in. No use currently but put it here for a while\n * https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */exports.createObjectWithArgs=function(Something){return function(){var F=function(args){return Something.apply(this,args);};F.prototype=Something.prototype;return function(){return new F(arguments);};}();};exports.showHideElement=function(element,showElement){if(showElement){element.classList.remove('hiddenUtility');}else{element.classList.add('hiddenUtility');}};var getTableAttributes=function(gridOptions){var rowHeight=gridOptions.rowHeight;var headerHeight=gridOptions.headerHeight;var smallOversize=56;var mediumOversize=72;var largeOversize=88;var results={isOptionValid:false,rowHeight:null,headerHeight:null,iconCellRendererHeight:null,classes:null};switch(rowHeight){case'small oversize':case'LARGE':results.rowHeight=smallOversize;results.iconCellRendererHeight=48;results.isOptionValid=true;results.classes=rowHeight.split(' ');break;case'medium oversize':case'XLARGE':results.rowHeight=mediumOversize;results.iconCellRendererHeight=64;results.isOptionValid=true;results.classes=rowHeight.split(' ');break;case'large oversize':case'XXLARGE':results.rowHeight=largeOversize;results.iconCellRendererHeight=80;results.isOptionValid=true;results.classes=rowHeight.split(' ');break;}switch(headerHeight){case'small oversize':case'LARGE':results.headerHeight=smallOversize;break;case'medium oversize':case'XLARGE':results.headerHeight=mediumOversize;break;case'large oversize':case'XXLARGE':results.headerHeight=largeOversize;break;default:if(typeof headerHeight==='number'){// Custom header height\nresults.headerHeight=headerHeight;}else if(typeof headerHeight==='string'){let value=parseInt(headerHeight,10);if(!Number.isNaN(value)){results.headerHeight=value;}}}return results;};/**\n * This API accepts configured grid options and validates whether configured grid options are valid or not.\n * Returns true if they are valid and return false if they are not valid.\n * @param {*} gridOptions : grid options configured in splmtable json.\n */exports.validateRowHeightGridOption=function(gridOptions){var results=getTableAttributes(gridOptions);if(results.isOptionValid===true){return true;}return false;};/**\n * This API returns table row height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */exports.getTableRowHeight=function(gridOptions,defaultValue){var results=getTableAttributes(gridOptions);if(results.rowHeight===null){return defaultValue;}return results.rowHeight;};/**\n * This API returns table row height for icon cell renderer based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */exports.getTableRowHeightForIconCellRenderer=function(gridOptions,defaultValue){var results=getTableAttributes(gridOptions);if(results.iconCellRendererHeight===null){return defaultValue;}return results.iconCellRendererHeight;};/**\n * This API adds class to css class list of the element based on row height grid option.\n * @param {*} element elements in which we need to add css class.\n * @param {*} gridOptions grid options configured in json.\n */exports.addCSSClassForRowHeight=function(element,gridOptions){var results=getTableAttributes(gridOptions);if(results.isOptionValid){var classes=results.classes;for(var index=0;index<classes.length;index++){element.classList.add(classes[index].toLowerCase());}}};/**\n * Get number from string\n *\n * @param {String} prop - number string\n *\n * @return {Number} number parse from string\n */exports.numericProperty=function(prop){var value=!prop?undefined:parseInt(prop);return isNaN(value)?undefined:value;};/**\n *\n * Returns the String CSS class name for the passed in columnName based on the passed in sort criteria\n *\n * @param {Object} columnDef - columnDef object\n *\n * @param { Object } columnProvider - The column provider\n *\n * @return {Object} Object to define sort criteria\n */exports.getSortCriteria=function(columnDef,columnProvider){var sortCriteria=columnProvider.getSortCriteria();var foundCriteria=_.find(sortCriteria,function(o){return o.fieldName===columnDef.name||o.fieldName===columnDef.field;});if(foundCriteria){return foundCriteria;}return{};};/**\n *\n * Sets the sort criteria on the dataProvider columns\n *\n * @param { Object } columnProvider - The column provider\n *\n * @param { Object } dataProvider - The data provider\n */exports.setSortCriteriaOnColumns=function(columnProvider,dataProvider){columnProvider.sortCriteria=columnProvider.getSortCriteria();var _length=dataProvider.cols.length;for(var i=0;i<_length;i++){var columnDef=dataProvider.cols[i];dataProvider.cols[i].sortDirection=exports.getSortCriteria(columnDef,columnProvider).sortDirection;}};exports.getImgURL=function(vmo){var url='';if(vmo.hasThumbnail){url=vmo.thumbnailURL;}else if(vmo.typeIconURL){url=vmo.typeIconURL;}else if(vmo.iconURL){url=vmo.iconURL;}return url;};/**\n * Syncs the headers for the table to the given scroll left\n *\n * @param {DOMElement} tableElement The table element\n * @param {Boolean} isPin If pinned headers should by synced\n * @param {Number} scrollLeft The scroll left\n */exports.syncHeader=function(_trv,isPin,scrollLeft){let header=null;if(isPin===true){header=_trv.getPinHeaderElementFromTable();}else{header=_trv.getScrollHeaderElementFromTable();}header.style.marginLeft=String(scrollLeft*-1)+'px';};//----------------------------------------- Vertical Column Headers -----------------------------------------//\n/**\n * This API returns table header height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */exports.getTableHeaderHeight=function(gridOptions,defaultValue){var results=getTableAttributes(gridOptions);if(results.headerHeight===null){return defaultValue;}return results.headerHeight;};//-------------------------------- Expand Pagination In Edit Mode -----------------------------------------//\n/**\n * This API returns whether expand or pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */const isExpandOrPaginationAllowed=function(tableElem){if(!exports.isBulkEditing(tableElem)){return true;}return exports.isExpandOrPaginationAllowedInEdit(tableElem);};/**\n * This API returns whether pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */exports.isPaginationAllowed=function(tableElem){return isExpandOrPaginationAllowed(tableElem);};/**\n * This API returns whether expand is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */exports.isExpandAllowed=function(tableElem){return isExpandOrPaginationAllowed(tableElem);};/**\n * This API returns whether requestStartEdit should be called after pagination.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */exports.shouldRequestStartEditPagination=function(tableElem){return exports.isBulkEditing(tableElem);};/**\n * This API returns whether requestStartEdit should be called after props have been loaded.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */exports.shouldRequestStartEditPropsLoaded=function(tableElem){return exports.isBulkEditing(tableElem);};/**\n * This API returns whether requestStartEdit should be called after tree pagination.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */exports.shouldRequestStartEditTreePagination=function(tableElem,propertyProvider){return exports.isBulkEditing(tableElem)&&!propertyProvider;};/**\n * This API returns whether requestStartEdit should be called after tree expand.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} expandedNode : the node that was expanded\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */exports.shouldRequestStartEditTreeExpand=function(tableElem,expandedNode,propertyProvider){return(expandedNode.__expandState||!expandedNode.__expandState&&!propertyProvider)&&exports.isBulkEditing(tableElem);};/**\n * This API requests startEdit\n * Publishes the requestStartEdit events when the enableExpandAndPaginationInEdit gridOption is set (AW/Edit Handler)\n * or\n * Calls startEdit on dataProvider or declViewModel when editConfiguration exists (AFX/Edit Config)\n * @param {DOMElement} tableElem : the table element\n */exports.requestStartEdit=function(tableElem){const tableInstance=exports.getTableInstance(tableElem);const dataProvider=tableInstance.dataProvider;const declViewModel=tableInstance.declViewModel;if(tableInstance.gridOptions.enableExpandAndPaginationInEdit===true){editEventsService.publishStartEditRequested(dataProvider);}else if(dataProvider.getEditConfiguration()){const dataCtxNode={data:declViewModel,ctx:appCtxService.ctx};dataProvider.startEdit(dataCtxNode,declViewModel);}else if(declViewModel.getEditConfiguration()){declViewModel.startEdit();}};/**\n * This API returns whether expand or pagination is allowed in edit mode.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */exports.isExpandOrPaginationAllowedInEdit=function(tableElem){const tableInstance=exports.getTableInstance(tableElem);if(tableInstance.gridOptions.enableExpandAndPaginationInEdit===true){return true;}else if(tableInstance.dataProvider.getEditConfiguration()||tableInstance.declViewModel.getEditConfiguration()){return true;}return false;};/**\n * This API is a helper function for interacting with awTableStateService.\n * @param {String} action the action to perform\n * @return {Object} the result of the action\n */exports.performStateServiceAction=function(action,declViewModel,gridId,node){if(declViewModel.grids[gridId].gridOptions&&declViewModel.grids[gridId].gridOptions.enableExpansionStateCaching===false){return null;}switch(action){case'clearAllStates':return awTableStateService.clearAllStates(declViewModel,gridId);case'saveRowExpanded':return awTableStateService.saveRowExpanded(declViewModel,gridId,node);case'saveRowCollapsed':return awTableStateService.saveRowCollapsed(declViewModel,gridId,node);case'getTreeTableState':return awTableStateService.getTreeTableState(declViewModel,gridId);case'isNodeExpanded':{const treeTableState=awTableStateService.getTreeTableState(declViewModel,gridId);return awTableStateService.isNodeExpanded(treeTableState,node);}default:return null;}};/**\n * This API is a helper function to determine if auto save is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if auto save is enabled\n */exports.isAutoSaveEnabled=function(tableElem){const tableInstance=tableElem._tableInstance;if(tableInstance&&tableInstance.gridOptions&&tableInstance.gridOptions.forceAutoSave===true||appCtxService.getCtx('autoSave')&&appCtxService.getCtx('autoSave.dbValue')===true){return true;}return false;};/**\n * This API is a helper function to determine if prop edit is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if prop edit is enabled\n */exports.isPropEditEnabled=function(tableElem){const tableInstance=tableElem._tableInstance;if(tableInstance&&tableInstance.dataProvider&&tableInstance.dataProvider.isPropEditEnabled){return tableInstance.dataProvider.isPropEditEnabled(tableInstance.declViewModel);}return false;};/**\n * Checks to see if row/column header selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has header selection enabled\n */exports.isCellHeaderSelectionEnabled=function(tableElement){return exports.getTableInstance(tableElement).gridOptions.enableCellHeaderSelection;};/**\n * Checks to see if column selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has column selection enabled\n */exports.isColumnSelectionEnabled=function(tableElement){return exports.getTableInstance(tableElement).gridOptions.enableColumnSelection;};/**\n *\n * Get the column definition from the dataProvider based on column name\n *\n * @param { String } columnName - The column name\n * @param { Object } dataProvider - The data provider\n * @returns { Object } the column def found\n */exports.getColumnDef=function(columnName,dataProvider){let columnDef=null;for(let currentColumn of dataProvider.cols){if(currentColumn.field===columnName){columnDef=currentColumn;break;}}return columnDef;};export default exports;","map":null,"metadata":{},"sourceType":"module"}
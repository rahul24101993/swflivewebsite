{"ast":null,"code":"import { parseDate } from 'js/uwDirectiveDateTimeService';\nimport dateTimeSvc, { NULLDATE, isNullDate, getNormalizedTimeValue } from 'js/dateTimeService';\nexport let propTypeDate = prop => prop.type === 'DATE';\nexport let propTypeDateArray = prop => prop.type === 'DATEARRAY';\n\nclass DateTimeValues {\n  constructor(data) {\n    this.values = {\n      dateVal: data.dateVal,\n      timeVal: data.timeVal\n    };\n  }\n\n  get dateValue() {\n    return this.values.dateVal;\n  }\n\n  get timeValue() {\n    return this.values.timeVal;\n  }\n\n  cleanDateTimeValues() {\n    this.values.dateVal = null;\n    this.values.timeVal = null;\n  }\n\n}\n\nlet isDateEnabled = dateApi => dateApi.isDateEnabled;\n\nlet isTimeEnabled = dateApi => dateApi.isTimeEnabled;\n\nlet findDateObject = function (prop) {\n  let dbValue;\n  let dateObj;\n\n  if (propTypeDate(prop)) {\n    dbValue = prop.dbValue;\n  } else if (propTypeDateArray(prop)) {\n    dbValue = prop.dbValue[prop.dbValue.length - 1];\n  }\n\n  if (!isNullDate(dbValue)) {\n    dateObj = parseDate(dbValue);\n  } else if (dbValue === NULLDATE) {\n    dateObj = NULLDATE;\n  }\n\n  return dateObj;\n};\n\nlet findDateValue = function (_ref) {\n  let {\n    dateApi\n  } = _ref;\n  let dateVal = null;\n\n  if (isDateEnabled(dateApi)) {\n    dateVal = dateTimeSvc.formatSessionDate(dateApi.dateObject);\n  }\n\n  return dateVal;\n};\n\nlet findTimeValue = function (_ref2) {\n  let {\n    dateApi\n  } = _ref2;\n  let timeVal = null;\n\n  if (isTimeEnabled(dateApi)) {\n    timeVal = dateObject ? dateObject.timeValue : dateTimeSvc.formatTime(dateApi.dateObject);\n  }\n\n  return dateTimeSvc.getNormalizedTimeValue(timeVal);\n};\n\nlet dateObject = null;\nlet dateWithTime;\n/**\n * Sets data and time values and creates a new object\n * @param {Object} data - contains date and time values as keys\n */\n\nexport let setDateTimeValues = function (data) {\n  dateObject = new DateTimeValues(data);\n};\n/**\n * Cleas data and time values from the object\n * @param {Object} prop - ViewModelProperty\n */\n\nexport let clearDateTimeValues = function (prop) {\n  if (propTypeDate(prop) || propTypeDateArray(prop)) {\n    dateObject && dateObject.cleanDateTimeValues();\n    dateObject = null;\n  }\n};\n/**\n * Returns dbValue\n * @param {Object} prop - ViewModelProperty\n */\n\nexport let getDBValueForDate = function (prop) {\n  let dateApi = prop.dateApi;\n\n  if (isDateEnabled(dateApi)) {\n    let oldDateObject = !dateApi.dateValue ? dateTimeSvc.getDefaultDate(dateApi) : findDateObject(prop);\n    dateWithTime = dateTimeSvc.setTimeIntoDateModel(oldDateObject, getNormalizedTimeValue(dateObject.timeValue));\n  } else {\n    dateWithTime = dateTimeSvc.setTimeIntoDateModel(dateTimeSvc.getEpochDate(), getNormalizedTimeValue(dateObject.timeValue));\n  }\n\n  return dateWithTime.getTime();\n};\n/**\n * Returns uiValue\n * @param {Object} dateApi - dateApi object\n */\n\nexport let getUIValueForDate = function (dateApi) {\n  let uiValue;\n\n  if (isTimeEnabled(dateApi) && !isDateEnabled(dateApi)) {\n    uiValue = dateTimeSvc.formatSessionTime(dateWithTime);\n  } else {\n    uiValue = dateTimeSvc.formatSessionDateTime(dateWithTime);\n  }\n\n  return uiValue;\n};\n/**\n * Returns updated dateApi based on dbValue\n * @param {Object} vmProp - ViewModelProperty\n */\n\nexport let updateDateApi = function (vmProp) {\n  if (propTypeDate(vmProp) || propTypeDateArray(vmProp)) {\n    let dateApi = vmProp.dateApi;\n    dateApi.dateObject = findDateObject(vmProp);\n    dateApi.dateValue = findDateValue(vmProp);\n    dateApi.timeValue = findTimeValue(vmProp);\n  }\n};","map":{"version":3,"names":["parseDate","dateTimeSvc","NULLDATE","isNullDate","getNormalizedTimeValue","propTypeDate","prop","type","propTypeDateArray","DateTimeValues","constructor","data","values","dateVal","timeVal","dateValue","timeValue","cleanDateTimeValues","isDateEnabled","dateApi","isTimeEnabled","findDateObject","dbValue","dateObj","length","findDateValue","formatSessionDate","dateObject","findTimeValue","formatTime","dateWithTime","setDateTimeValues","clearDateTimeValues","getDBValueForDate","oldDateObject","getDefaultDate","setTimeIntoDateModel","getEpochDate","getTime","getUIValueForDate","uiValue","formatSessionTime","formatSessionDateTime","updateDateApi","vmProp"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/dateTimeProcessingService.js"],"sourcesContent":["import { parseDate } from 'js/uwDirectiveDateTimeService';\nimport dateTimeSvc, { NULLDATE, isNullDate, getNormalizedTimeValue } from 'js/dateTimeService';\n\nexport let propTypeDate = prop => prop.type === 'DATE';\n\nexport let propTypeDateArray = prop => prop.type === 'DATEARRAY';\n\nclass DateTimeValues {\n    constructor( data ) {\n        this.values = {\n            dateVal: data.dateVal,\n            timeVal: data.timeVal\n        };\n    }\n    get dateValue() {\n        return this.values.dateVal;\n    }\n    get timeValue() {\n        return this.values.timeVal;\n    }\n    cleanDateTimeValues() {\n        this.values.dateVal = null;\n        this.values.timeVal = null;\n    }\n}\n\nlet isDateEnabled = dateApi => dateApi.isDateEnabled;\n\nlet isTimeEnabled = dateApi => dateApi.isTimeEnabled;\n\nlet findDateObject = function( prop ) {\n    let dbValue;\n    let dateObj;\n    if( propTypeDate( prop ) ) {\n        dbValue = prop.dbValue;\n    } else if( propTypeDateArray( prop ) ) {\n        dbValue = prop.dbValue[ prop.dbValue.length - 1 ];\n    }\n    if( !isNullDate( dbValue ) ) {\n        dateObj = parseDate( dbValue );\n    } else if( dbValue === NULLDATE ) {\n        dateObj = NULLDATE;\n    }\n    return dateObj;\n};\n\nlet findDateValue = function( { dateApi } ) {\n    let dateVal = null;\n    if( isDateEnabled( dateApi ) ) {\n        dateVal = dateTimeSvc.formatSessionDate( dateApi.dateObject );\n    }\n    return dateVal;\n};\n\nlet findTimeValue = function( { dateApi } ) {\n    let timeVal = null;\n    if( isTimeEnabled( dateApi ) ) {\n        timeVal = dateObject ? dateObject.timeValue : dateTimeSvc.formatTime( dateApi.dateObject );\n    }\n    return dateTimeSvc.getNormalizedTimeValue( timeVal );\n};\n\nlet dateObject = null;\nlet dateWithTime;\n\n/**\n * Sets data and time values and creates a new object\n * @param {Object} data - contains date and time values as keys\n */\nexport let setDateTimeValues = function( data ) {\n    dateObject = new DateTimeValues( data );\n};\n\n/**\n * Cleas data and time values from the object\n * @param {Object} prop - ViewModelProperty\n */\nexport let clearDateTimeValues = function( prop ) {\n    if( propTypeDate( prop ) || propTypeDateArray( prop ) ) {\n        dateObject && dateObject.cleanDateTimeValues();\n        dateObject = null;\n    }\n};\n\n/**\n * Returns dbValue\n * @param {Object} prop - ViewModelProperty\n */\nexport let getDBValueForDate = function( prop ) {\n    let dateApi = prop.dateApi;\n    if( isDateEnabled( dateApi ) ) {\n        let oldDateObject = !dateApi.dateValue ? dateTimeSvc.getDefaultDate( dateApi ) : findDateObject( prop );\n        dateWithTime = dateTimeSvc.setTimeIntoDateModel( oldDateObject, getNormalizedTimeValue( dateObject.timeValue ) );\n    } else {\n        dateWithTime = dateTimeSvc.setTimeIntoDateModel( dateTimeSvc.getEpochDate(), getNormalizedTimeValue( dateObject.timeValue ) );\n    }\n    return dateWithTime.getTime();\n};\n\n/**\n * Returns uiValue\n * @param {Object} dateApi - dateApi object\n */\nexport let getUIValueForDate = function( dateApi ) {\n    let uiValue;\n    if( isTimeEnabled( dateApi ) && !isDateEnabled( dateApi ) ) {\n        uiValue = dateTimeSvc.formatSessionTime( dateWithTime );\n    } else {\n        uiValue = dateTimeSvc.formatSessionDateTime( dateWithTime );\n    }\n    return uiValue;\n};\n\n/**\n * Returns updated dateApi based on dbValue\n * @param {Object} vmProp - ViewModelProperty\n */\nexport let updateDateApi = function( vmProp ) {\n    if( propTypeDate( vmProp ) || propTypeDateArray( vmProp ) ) {\n        let dateApi = vmProp.dateApi;\n        dateApi.dateObject = findDateObject( vmProp );\n        dateApi.dateValue = findDateValue( vmProp );\n        dateApi.timeValue = findTimeValue( vmProp );\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
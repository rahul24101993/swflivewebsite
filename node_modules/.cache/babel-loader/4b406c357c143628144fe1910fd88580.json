{"ast":null,"code":"/* eslint-disable complexity */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides lov service in native.\n *\n * @module js/lovService\n */\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport soaSvc from 'soa/kernel/soaService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport clientMetaModel from 'soa/kernel/clientMetaModel';\nimport appCtxService from 'js/appCtxService';\nimport uwPropertyService from 'js/uwPropertyService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\nconst LOV_TYPES = {\n  EXHAUSTIVE_LOV: 1,\n  SUGGESTIVE_LOV: 2,\n  RANGE_LOV: 3\n}; // Services\n\nimport AwPromiseService from 'js/awPromiseService';\nimport { debugUpdateHandlerOnCommand } from 'js/debugService';\n/**\n * LOVEntry object\n *\n * @class LOVEntry\n *\n * @param {Array} lovRowValue - LOV Values.\n * @param {String} lovType - The type of the LOV. e.g. String, Integer etc. This has to be same as the property\n *            type.\n * @param {String} lovValueProp - LOV Value Property.\n * @param {String} lovDescProp - LOV Description Property.\n */\n\nvar LOVEntry = function (lovRowValue, lovType, lovValueProp, lovDescProp) {\n  var self = this;\n  self.lovRowValue = lovRowValue;\n  self.lovType = lovType;\n  self.lovDescProp = lovDescProp;\n  self.lovValueProp = lovValueProp;\n  self.propHasValidValues = true;\n\n  if (lovRowValue.propInternalValues) {\n    self.propInternalValue = lovRowValue.propInternalValues[lovValueProp][0];\n  } else {\n    self.propInternalValue = {};\n  }\n  /** property display description */\n\n  /**\n   * set flag 'propHasValidValues'\n   *\n   * @param {propHasValidValues} propHasValidValues - flag\n   */\n\n\n  self.setPropHasValidValues = function (propHasValidValues) {\n    self.propHasValidValues = propHasValidValues;\n  };\n  /**\n   * Concatenate property values array and returns property string\n   *\n   * @param {propValues} propValues - property values array\n   * @return {propVal} concatenated property value string\n   */\n\n\n  self.getPropertyString = function (propValues) {\n    var propVal = '';\n\n    if (propValues !== null && propValues.length > 0) {\n      propVal = propValues[0];\n\n      for (var i = 1; i < propValues.length; i++) {\n        if (propValues[i] !== null) {\n          propVal += propVal + ';' + propValues[i];\n        }\n      }\n    }\n\n    return propVal;\n  };\n  /**\n   * Concatenate property display values\n   *\n   * @return {propDisplayValue} concatenated property display values\n   */\n\n\n  self.getPropDisplayValues = function () {\n    var propDisplayValue;\n\n    if (self.lovRowValue && self.lovRowValue.propDisplayValues && self.lovRowValue.propDisplayValues[self.lovValueProp]) {\n      propDisplayValue = self.getPropertyString(self.lovRowValue.propDisplayValues[self.lovValueProp]);\n    }\n\n    return propDisplayValue;\n  };\n  /**\n   * Concatenate property display description values\n   *\n   * @return {propDisplayDescription} concatenated property display description values\n   */\n\n\n  self.getPropDisplayDescriptions = function () {\n    var propDisplayDescription;\n\n    if (self.lovRowValue && self.lovRowValue.propDisplayValues && self.lovRowValue.propDisplayValues[lovDescProp]) {\n      propDisplayDescription = self.getPropertyString(self.lovRowValue.propDisplayValues[lovDescProp]);\n    }\n\n    return propDisplayDescription;\n  };\n  /** property display value and decription */\n\n\n  if (self.lovRowValue.propDisplayValues) {\n    self.propDisplayValue = self.getPropDisplayValues();\n    self.propDisplayDescription = self.getPropDisplayDescriptions();\n  } else {\n    self.propDisplayValue = {};\n    self.propDisplayDescription = {};\n  }\n  /**\n   * Returns true/false whether the lovRowValue has children.\n   *\n   * @return {hasChildren} true/false\n   */\n\n\n  self.checkHasChildren = function () {\n    return self.lovRowValue.childRows && self.lovRowValue.childRows.length > 0;\n  };\n  /** checks whether lov has children */\n\n\n  self.hasChildren = self.checkHasChildren();\n  /**\n   * Get children lov, used for hierarical lovs\n   *\n   * @return {list} list array which contains child rows\n   */\n\n  self.getChildren = function () {\n    var lovEntries = [];\n\n    if (self.checkHasChildren()) {\n      for (var lovValue in self.lovRowValue.childRows) {\n        if (self.lovRowValue.childRows.hasOwnProperty(lovValue)) {\n          lovEntries.push(new LOVEntry(self.lovRowValue.childRows[lovValue], self.lovType, self.lovValueProp, self.lovDescProp));\n        }\n      }\n    }\n\n    return lovEntries;\n  };\n}; // LOVEntry\n\n/**\n * LOVDataValidationResult object\n *\n * @constructor\n */\n\n\n_c = LOVEntry;\n\nvar LOVDataValidationResult = function () {\n  var self = this;\n  self.updatedPropValueMap = {};\n  self.updatedPropDisplayValueMap = {};\n  /**\n   * The parent view model object\n   */\n\n  self.setViewModelObject = function (vmObj) {\n    self.viewModelObj = vmObj;\n  };\n  /**\n   * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n   */\n\n\n  self.addUpdatedPropertyValue = function (propName, propValues, propDisplayValues) {\n    self.updatedPropValueMap[propName] = propValues;\n    self.updatedPropDisplayValueMap[propName] = propDisplayValues;\n  };\n  /**\n   * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n   */\n\n\n  self.setValid = function (valid) {\n    self.valid = valid;\n  };\n  /**\n   * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n   */\n\n\n  self.setError = function (error) {\n    self.error = error;\n  };\n}; // LOVDataValidationResult\n\n/**\n * @param {ViewModelProperty} viewProp -view model Property\n * @param {filterString} filterString - filter string for lov's\n * @param {String} opName - operation Name\n * @param {ViewModelObject} viewModelObj -view model object\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\n\n\n_c2 = LOVDataValidationResult;\n\nvar createInitialData = function (viewProp, filterString, assert, operationName, viewModelObj, appCtxService, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid) {\n  var viewObject = viewModelObj;\n  var contextObject = appCtxService.getCtx('InitialLovDataAdditionalProps');\n  var tablePropObject = appCtxService.getCtx('InitialSaveDataAdditionalProps');\n  assert(viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name);\n  var initialData = {};\n  initialData.propertyName = uwPropertyService.getBasePropertyName(viewProp.propertyName);\n  initialData.filterData = {\n    filterString: filterString ? filterString : '',\n    maxResults: maxResults ? maxResults : 2000,\n    numberToReturn: lovPageSize ? lovPageSize : 25,\n    order: sortOrder ? sortOrder : 1,\n    sortPropertyName: sortPropertyName ? sortPropertyName : ''\n  };\n  initialData.lov = {\n    uid: '',\n    type: ''\n  };\n  let viewPropOwningType;\n\n  if (viewProp.srcObjectTypeName) {\n    let viewPropType = clientMetaModel.getType(viewProp.srcObjectTypeName);\n    viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n  } // For Dcp properties, use intermediate object's type, else use the type of the parent object.\n\n\n  var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n  operationName = exports.formatOperationName(operationName);\n  var sourceObjectUid = uwPropertyService.getSourceObjectUid(viewProp);\n  var owningObjectUid = owningObjUid || sourceObjectUid;\n  var modelObject = clientDataModel.getObject(owningObjectUid);\n\n  if (!modelObject) {\n    owningObjectUid = clientDataModel.NULL_UID;\n  }\n\n  initialData.lovInput = {\n    owningObject: {\n      uid: owningObjectUid,\n      type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n    },\n    operationName: operationName,\n    boName: objName,\n    propertyValues: {}\n  };\n\n  var modifiedProps = _.union(viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps());\n\n  if (modifiedProps && modifiedProps.length > 0) {\n    for (var prop in modifiedProps) {\n      if (modifiedProps.hasOwnProperty(prop)) {\n        var modifiedPropName = uwPropertyService.getBasePropertyName(modifiedProps[prop].name);\n        initialData.lovInput.propertyValues[modifiedPropName] = modifiedProps[prop].values;\n      }\n    }\n  }\n\n  if (tablePropObject) {\n    tablePropObject = _.isArray(tablePropObject) ? tablePropObject : [tablePropObject];\n\n    _.forEach(tablePropObject, function (value, key) {\n      _.forEach(value, function (nestedValue, nestedKey) {\n        delete initialData.lovInput.propertyValues[nestedKey];\n      });\n    });\n  }\n\n  if (contextObject) {\n    for (var addProp in contextObject) {\n      initialData.lovInput.propertyValues[addProp] = [contextObject[addProp]];\n    }\n  }\n\n  return initialData;\n};\n/**\n * Implementation of LOV Service (these api's are only compatible with Teamcenter 9)\n *\n * @param {module:scripts/services/notifyService} notifySvc -\n *\n * @param {module:js/dateTimeService} dateTimeSvc - SOA's LOV Access service\n *\n * @param {module:soa/kernel/clientDataModel} clientDataModel - SOA's clientDataModel service\n */\n\n\nlet exports;\n/**\n * Add the 'lovApi' function set object to the given ViewModelProperty\n *\n * @param {ViewModelProperty} viewProp -view model property\n *\n * @param {module:angular~Scope} scope - angular scope for the element\n *\n * @param {ViewModelObject} viewModelObj -view model Object\n *\n * @param {String} owningObjUid - The UID of owning object\n *\n */\n\nexport let initNativeCellLovApi = function (viewProp, scope, operationName, viewModelObj, owningObjUid) {\n  viewProp.lovApi = {}; //viewProp.isRequired = true;\n\n  viewProp.lovApi.operationName = operationName;\n\n  viewProp.lovApi.getInitialValues = function (filterStr, deferred, name, maxResults, lovPageSize, sortPropertyName, sortOrder) {\n    exports.getInitialValues(filterStr, deferred, viewProp, viewProp.lovApi.operationName, viewModelObj, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid);\n  };\n\n  viewProp.lovApi.getNextValues = function (deferred) {\n    exports.getNextValues(deferred, viewProp);\n  };\n\n  viewProp.lovApi.validateLOVValueSelections = function (lovEntries) {\n    return exports.validateLOVValueSelections(lovEntries, viewProp, viewProp.lovApi.operationName, viewModelObj, owningObjUid);\n  };\n\n  viewProp.owningObjUid = owningObjUid;\n};\n/**\n * This operation is invoked to query the data for a property having an LOV attachment. The results returned\n * from the server also take into consideration any filter string that is in the input. This method calls\n * 'getInitialLOVValues' and returns initial set of lov values. This is only compatible with 'Teamcenter 10'\n *\n * @param {filterString} filterString - The filter text for lov's\n * @param {deferred} deferred - $q object to resolve the 'promise' with a an array of LOVEntry objects.\n * @param {ViewModelProperty} viewProp - Property to aceess LOV values for.\n * @param {String} operationName - The operation being performed e.g. Edit, Create, Revise, Save As etc.\n * @param {ViewModelObject} viewModelObj - The view model object which LOV property is defined on.\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\n\nexport let getInitialValues = function (filterString, deferred, viewProp, operationName, viewModelObj, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid) {\n  var initialData = createInitialData(viewProp, filterString, assert, operationName, viewModelObj, appCtxService, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid);\n  var serviceInput = {\n    initialData: initialData\n  };\n  soaSvc.postUnchecked('Core-2013-05-LOV', 'getInitialLOVValues', serviceInput).then(function (responseData) {\n    //Object.assign( viewProp.searchResults, responseData );\n    //viewProp.searchResults = responseData; // using for LOV getNextLOVValues SOA call\n    //viewProp.lovApi.result = responseData; // using for validateLOVValuesSelections()\n    if (_.isArray(responseData.ServiceData.partialErrors)) {\n      //getInitialLOV  returns error when message/error has to be displayed\n      // if errorlevel >1 its legitimate error else it is message\n      for (const partialError of responseData.ServiceData.partialErrors) {\n        if (_.isArray(partialError.errorValues)) {\n          for (const errorValue of partialError.errorValues) {\n            if (errorValue.level > 1) {\n              deferred.reject(responseData.ServiceData.partialErrors);\n            }\n          }\n        }\n      }\n    }\n\n    let lovValues = exports.createLOVEntries(responseData, viewProp.type);\n    deferred.resolve({\n      responseData,\n      lovValues\n    });\n  }, function (reason) {\n    deferred.reject(reason);\n  });\n};\nexport let getListLOVValues = function (list) {\n  let lovEntries = list;\n  return {\n    lovEntries\n  };\n};\n/**\n *\n * @param {*} output\n * @param {*} declViewModel\n */\n\nexport let processLOVEntries = function (_ref) {\n  let {\n    responseData,\n    lovValues = {}\n  } = _ref;\n\n  if (lovValues && lovValues.hasOwnProperty('moreValuesExist')) {\n    let moreValuesExist = lovValues.moreValuesExist;\n    let newop = [...lovValues];\n    delete newop.moreValuesExist;\n    return {\n      lovEntries: newop,\n      moreValuesExist,\n      partialErrors: '',\n      level: '',\n      responseData,\n      lovUsage: lovValues.lovUsage\n    };\n  }\n\n  return {\n    lovEntries: [],\n    partialErrors: lovValues.cause,\n    level: lovValues.level,\n    moreValuesExist: false,\n    responseData,\n    lovUsage: lovValues.lovUsage\n  };\n};\nexport let getInitialLOVValues = function (viewModel, dataProviderName) {\n  let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[dataProviderName] : null;\n  const lovInfo = appCtxSvc.getCtx('aw.lovInfo');\n  let vmo;\n  let viewProp;\n  let filterString;\n  let owningObjUid;\n  let operationName;\n\n  if (dataProvider && dataProvider.resolvedLovConfig) {\n    const lovConfiguration = dataProvider.resolvedLovConfig;\n    vmo = lovConfiguration.viewModelObj;\n    viewProp = lovConfiguration.viewProp;\n    filterString = lovConfiguration.filterString;\n    owningObjUid = viewProp.owningObjUid;\n    operationName = lovConfiguration.operationName;\n  } else if (lovInfo) {\n    vmo = lovInfo.ctxLovPropVMO;\n    viewProp = vmo.props[lovInfo.ctxLovPropName];\n    filterString = viewProp.filterString;\n    owningObjUid = viewProp.owningObjUid;\n    operationName = vmo.operationName;\n  }\n\n  let deferred = AwPromiseService.instance.defer();\n  getInitialValues(filterString, deferred, viewProp, operationName, vmo, null, null, '', '', owningObjUid);\n  return deferred.promise.then(response => {\n    const responseBehaviorData = response.responseData && response.responseData.behaviorData;\n    viewProp.lovApi.behaviorData = {\n      dependendProps: responseBehaviorData && responseBehaviorData.dependendProps,\n      style: responseBehaviorData && responseBehaviorData.style\n    };\n    return response;\n  }).catch(error => error);\n};\n/**\n * This operation is invoked after a call to getInitialLOVValues if the moreValuesExist flag is true in the\n * LOVSearchResults output returned from a call to the getInitialLOVValues operation. The operation will\n * retrieve the next set of LOV values.\n *\n * @param {deferred} deferred - promise object\n * @param {ViewModelProperty} viewProp - Lov object value\n * @return {deferred.promise} promise object\n */\n\nexport let getNextValues = function (viewModel, dataProviderName) {\n  let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[dataProviderName] : null;\n  const lovInfo = appCtxSvc.getCtx('aw.lovInfo');\n  let lovDataInfo = viewModel.lovDataInfo;\n  let vmo;\n  let viewProp;\n\n  if (dataProvider && dataProvider.resolvedLovConfig) {\n    const lovConfiguration = dataProvider.resolvedLovConfig;\n    vmo = lovConfiguration.viewModelObj;\n    viewProp = lovConfiguration.viewProp;\n  } else if (lovDataInfo) {\n    vmo = lovInfo.ctxLovPropVMO;\n    viewProp = vmo.props[lovInfo.ctxLovPropName];\n  }\n\n  let lovEntries = [];\n\n  if (lovDataInfo && lovDataInfo.responseData) {\n    var serviceInput = {};\n    serviceInput.lovData = lovDataInfo.responseData.lovData;\n    return soaSvc.post('Core-2013-05-LOV', 'getNextLOVValues', serviceInput).then(responseData => {\n      const lovValues = exports.createLOVEntries(responseData, viewProp.type);\n      return {\n        lovValues,\n        responseData\n      };\n    });\n  }\n\n  return Promise.resolve(lovEntries);\n};\n/**\n * This is a reusable function to create LOV entries from SOA response\n *\n * @param {responseData} SOA response structure from LOV\n * @param {propertyType} Type of Property\n * @return {lovEntries} Array of LOV entry objects\n */\n\nexport let createLOVEntries = function (responseData, propertyType) {\n  var lovEntries = [];\n  var lovValueProp = responseData.behaviorData.columnNames.lovValueProp;\n  var lovDescProp = responseData.behaviorData.columnNames.lovDescrProp;\n  var lovUsage = responseData.behaviorData.lovUsage;\n\n  for (var lovValue in responseData.lovValues) {\n    if (responseData.lovValues.hasOwnProperty(lovValue)) {\n      lovEntries.push(new LOVEntry(responseData.lovValues[lovValue], propertyType, lovValueProp, lovDescProp));\n    }\n  } // push the moreValuesExist to the lovEntries. if it is true, then call getNextValues ; else not call getNextValues\n\n\n  if (responseData.moreValuesExist) {\n    lovEntries.moreValuesExist = responseData.moreValuesExist;\n  } else {\n    lovEntries.moreValuesExist = false;\n  }\n\n  lovEntries.lovUsage = 'EXHAUSTIVE_LOV';\n\n  if (lovUsage === LOV_TYPES.SUGGESTIVE_LOV) {\n    lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n  } // This is Workaround hack which will be removed when Fnd0NameValueDynLOV wil be converted to suggestive\n  //LCS-681145 - Change Fnd0DynLOVNameValuePairs LOV to suggestive\n\n\n  if (responseData.lovData && _.isArray(responseData.lovData.lovs) && responseData.lovData.lovs.length > 0 && responseData.lovData.lovs[0].type === 'Fnd0NameValueDynLOV') {\n    lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n  }\n\n  return lovEntries;\n};\n/**\n * This operation can be invoked after selecting a value from the LOV. Use this operation to do additional\n * validation to be done on server such as validating Range value, getting the dependent properties values in\n * case of interdependent LOV (resetting the dependendent property values), Coordinated LOVs ( populating\n * dependent property values ).\n *\n * @param {LovEntry[]} lovEntries - Array of LOV values selected\n *\n * @param {viewProp} viewProp - The property being modified\n *\n * @return {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc\n *\n * @return {ViewModelObject} viewModelObj The object for which property is being modified\n *\n * @param {String} owningObjUid - The UID of owning object\n */\n\nexport let validateLOVValueSelections = function (lovEntries, viewProp, operationName, viewModelObj, owningObjUid) {\n  var viewObject = viewModelObj;\n  var contextObject = appCtxService.getCtx('InitialLovDataAdditionalProps');\n  var tablePropObject = appCtxService.getCtx('InitialSaveDataAdditionalProps');\n  assert(viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name);\n  var lovValueProp = null;\n\n  if (viewProp.lovApi && viewProp.lovApi.result) {\n    lovValueProp = viewProp.lovApi.result.behaviorData.columnNames.lovValueProp;\n  }\n\n  var propName = uwPropertyService.getBasePropertyName(viewProp.propertyName);\n  let viewPropOwningType;\n\n  if (viewProp.srcObjectTypeName) {\n    let viewPropType = clientMetaModel.getType(viewProp.srcObjectTypeName);\n    viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n  }\n\n  var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n  var serviceInput = {};\n  var sourceObjectUid = uwPropertyService.getSourceObjectUid(viewProp);\n  var owningObjectUid = owningObjUid || sourceObjectUid;\n  var modelObject = clientDataModel.getObject(owningObjectUid);\n\n  if (!modelObject) {\n    owningObjectUid = clientDataModel.NULL_UID;\n  }\n\n  serviceInput.lovInput = {\n    owningObject: {\n      uid: owningObjectUid,\n      type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n    },\n    operationName: operationName,\n    boName: objName,\n    propertyValues: {}\n  };\n  serviceInput.propName = propName;\n  serviceInput.uidOfSelectedRows = [];\n  serviceInput.lovInput.propertyValues[propName] = []; // First add all the selected LOV entries\n\n  for (var ii = 0; ii < lovEntries.length; ii++) {\n    // account for simplified lov format\n    if ('propInternalValue' in lovEntries[ii]) {\n      serviceInput.lovInput.propertyValues[propName].push(String(lovEntries[ii].propInternalValue !== null ? lovEntries[ii].propInternalValue : ''));\n    } else if (lovValueProp && lovEntries[ii].lovRowValue) {\n      serviceInput.lovInput.propertyValues[propName].push(String(lovEntries[ii].lovRowValue.propInternalValues[lovValueProp][0]));\n    } //append selected row uid to fix dynamic LOV defect LCS-351651\n\n\n    if (lovEntries[ii].lovRowValue && !_.isEmpty(lovEntries[ii].lovRowValue.uid)) {\n      serviceInput.uidOfSelectedRows.push(String(lovEntries[ii].lovRowValue.uid));\n    }\n  } // Now populate all the other modified properties.\n\n\n  var modifiedProps = _.union(viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps());\n\n  if (modifiedProps && modifiedProps.length > 0) {\n    for (var prop in modifiedProps) {\n      if (modifiedProps.hasOwnProperty(prop)) {\n        var modifiedPropName = uwPropertyService.getBasePropertyName(modifiedProps[prop].name);\n\n        if (modifiedPropName !== propName) {\n          serviceInput.lovInput.propertyValues[modifiedPropName] = modifiedProps[prop].values;\n        }\n      }\n    }\n  }\n\n  if (tablePropObject) {\n    _.forEach(tablePropObject, function (value, key) {\n      delete serviceInput.lovInput.propertyValues[key];\n    });\n  }\n\n  if (contextObject) {\n    for (var addProp in contextObject) {\n      serviceInput.lovInput.propertyValues[addProp] = [contextObject[addProp]];\n    }\n  }\n\n  return soaSvc.post('Core-2013-05-LOV', 'validateLOVValueSelections', serviceInput).then(function (responseData) {\n    var validationResult = new LOVDataValidationResult();\n    validationResult.setValid(responseData.propHasValidValues);\n    validationResult.setViewModelObject(viewModelObj);\n    var updatedValues = responseData.updatedPropValues;\n\n    for (var propName in responseData.dependentPropNames) {\n      if (responseData.dependentPropNames.hasOwnProperty(propName)) {\n        var prop = responseData.dependentPropNames[propName];\n\n        if (updatedValues.propInternalValues.hasOwnProperty(prop)) {\n          validationResult.addUpdatedPropertyValue(prop, updatedValues.propInternalValues[prop], updatedValues.propDisplayValues[prop]);\n        }\n      }\n    }\n\n    return validationResult;\n  }, function (error) {\n    return error;\n  });\n};\n/**\n * Converts operation names to camel case.\n *\n * @param {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc.\n *\n * @return {String} operationName The operation formatted into camelCase.\n *\n */\n\nexport let formatOperationName = function (operationName) {\n  if (operationName.toUpperCase() === 'EDIT') {\n    operationName = 'Edit';\n  } else if (operationName.toUpperCase() === 'CREATE') {\n    operationName = 'Create';\n  } else if (operationName.toUpperCase() === 'REVISE') {\n    operationName = 'Revise';\n  } else if (operationName.toUpperCase() === 'SAVEAS') {\n    operationName = 'SaveAs';\n  }\n\n  return operationName;\n};\nexports = {\n  getListLOVValues,\n  initNativeCellLovApi,\n  getInitialValues,\n  getNextValues,\n  createLOVEntries,\n  validateLOVValueSelections,\n  formatOperationName,\n  getInitialLOVValues,\n  processLOVEntries\n};\nexport default exports;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LOVEntry\");\n$RefreshReg$(_c2, \"LOVDataValidationResult\");","map":{"version":3,"names":["assert","_","soaSvc","clientDataModel","clientMetaModel","appCtxService","uwPropertyService","dataProviderFactory","declDataProviderSvc","appCtxSvc","LOV_TYPES","EXHAUSTIVE_LOV","SUGGESTIVE_LOV","RANGE_LOV","AwPromiseService","debugUpdateHandlerOnCommand","LOVEntry","lovRowValue","lovType","lovValueProp","lovDescProp","self","propHasValidValues","propInternalValues","propInternalValue","setPropHasValidValues","getPropertyString","propValues","propVal","length","i","getPropDisplayValues","propDisplayValue","propDisplayValues","getPropDisplayDescriptions","propDisplayDescription","checkHasChildren","childRows","hasChildren","getChildren","lovEntries","lovValue","hasOwnProperty","push","LOVDataValidationResult","updatedPropValueMap","updatedPropDisplayValueMap","setViewModelObject","vmObj","viewModelObj","addUpdatedPropertyValue","propName","setValid","valid","setError","error","createInitialData","viewProp","filterString","operationName","maxResults","lovPageSize","sortPropertyName","sortOrder","owningObjUid","viewObject","contextObject","getCtx","tablePropObject","name","initialData","propertyName","getBasePropertyName","filterData","numberToReturn","order","lov","uid","type","viewPropOwningType","srcObjectTypeName","viewPropType","getType","owningType","objName","modelType","exports","formatOperationName","sourceObjectUid","getSourceObjectUid","owningObjectUid","modelObject","getObject","NULL_UID","lovInput","owningObject","boName","propertyValues","modifiedProps","union","getSaveableDirtyProps","getAutoAssignableProps","prop","modifiedPropName","values","isArray","forEach","value","key","nestedValue","nestedKey","addProp","initNativeCellLovApi","scope","lovApi","getInitialValues","filterStr","deferred","getNextValues","validateLOVValueSelections","serviceInput","postUnchecked","then","responseData","ServiceData","partialErrors","partialError","errorValues","errorValue","level","reject","lovValues","createLOVEntries","resolve","reason","getListLOVValues","list","processLOVEntries","moreValuesExist","newop","lovUsage","cause","getInitialLOVValues","viewModel","dataProviderName","dataProvider","dataProviders","lovInfo","vmo","resolvedLovConfig","lovConfiguration","ctxLovPropVMO","props","ctxLovPropName","instance","defer","promise","response","responseBehaviorData","behaviorData","dependendProps","style","catch","lovDataInfo","lovData","post","Promise","propertyType","columnNames","lovDescrProp","lovs","result","uidOfSelectedRows","ii","String","isEmpty","validationResult","updatedValues","updatedPropValues","dependentPropNames","toUpperCase"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/lovService.js"],"sourcesContent":["/* eslint-disable complexity */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides lov service in native.\n *\n * @module js/lovService\n */\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport soaSvc from 'soa/kernel/soaService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport clientMetaModel from 'soa/kernel/clientMetaModel';\nimport appCtxService from 'js/appCtxService';\nimport uwPropertyService from 'js/uwPropertyService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\n\nconst LOV_TYPES = { EXHAUSTIVE_LOV: 1, SUGGESTIVE_LOV: 2, RANGE_LOV: 3 };\n\n// Services\nimport AwPromiseService from 'js/awPromiseService';\nimport { debugUpdateHandlerOnCommand } from 'js/debugService';\n\n/**\n * LOVEntry object\n *\n * @class LOVEntry\n *\n * @param {Array} lovRowValue - LOV Values.\n * @param {String} lovType - The type of the LOV. e.g. String, Integer etc. This has to be same as the property\n *            type.\n * @param {String} lovValueProp - LOV Value Property.\n * @param {String} lovDescProp - LOV Description Property.\n */\nvar LOVEntry = function( lovRowValue, lovType, lovValueProp, lovDescProp ) {\n    var self = this;\n\n    self.lovRowValue = lovRowValue;\n    self.lovType = lovType;\n    self.lovDescProp = lovDescProp;\n    self.lovValueProp = lovValueProp;\n    self.propHasValidValues = true;\n    if( lovRowValue.propInternalValues ) {\n        self.propInternalValue = lovRowValue.propInternalValues[ lovValueProp ][ 0 ];\n    } else {\n        self.propInternalValue = {};\n    }\n\n    /** property display description */\n\n    /**\n     * set flag 'propHasValidValues'\n     *\n     * @param {propHasValidValues} propHasValidValues - flag\n     */\n    self.setPropHasValidValues = function( propHasValidValues ) {\n        self.propHasValidValues = propHasValidValues;\n    };\n\n    /**\n     * Concatenate property values array and returns property string\n     *\n     * @param {propValues} propValues - property values array\n     * @return {propVal} concatenated property value string\n     */\n    self.getPropertyString = function( propValues ) {\n        var propVal = '';\n        if( propValues !== null && propValues.length > 0 ) {\n            propVal = propValues[ 0 ];\n            for( var i = 1; i < propValues.length; i++ ) {\n                if( propValues[ i ] !== null ) {\n                    propVal += propVal + ';' + propValues[ i ];\n                }\n            }\n        }\n\n        return propVal;\n    };\n\n    /**\n     * Concatenate property display values\n     *\n     * @return {propDisplayValue} concatenated property display values\n     */\n    self.getPropDisplayValues = function() {\n        var propDisplayValue;\n        if( self.lovRowValue && self.lovRowValue.propDisplayValues &&\n            self.lovRowValue.propDisplayValues[ self.lovValueProp ] ) {\n            propDisplayValue = self.getPropertyString( self.lovRowValue.propDisplayValues[ self.lovValueProp ] );\n        }\n\n        return propDisplayValue;\n    };\n\n    /**\n     * Concatenate property display description values\n     *\n     * @return {propDisplayDescription} concatenated property display description values\n     */\n    self.getPropDisplayDescriptions = function() {\n        var propDisplayDescription;\n        if( self.lovRowValue && self.lovRowValue.propDisplayValues &&\n            self.lovRowValue.propDisplayValues[ lovDescProp ] ) {\n            propDisplayDescription = self.getPropertyString( self.lovRowValue.propDisplayValues[ lovDescProp ] );\n        }\n\n        return propDisplayDescription;\n    };\n\n    /** property display value and decription */\n    if( self.lovRowValue.propDisplayValues ) {\n        self.propDisplayValue = self.getPropDisplayValues();\n        self.propDisplayDescription = self.getPropDisplayDescriptions();\n    } else {\n        self.propDisplayValue = {};\n        self.propDisplayDescription = {};\n    }\n    /**\n     * Returns true/false whether the lovRowValue has children.\n     *\n     * @return {hasChildren} true/false\n     */\n    self.checkHasChildren = function() {\n        return self.lovRowValue.childRows && self.lovRowValue.childRows.length > 0;\n    };\n\n    /** checks whether lov has children */\n    self.hasChildren = self.checkHasChildren();\n\n    /**\n     * Get children lov, used for hierarical lovs\n     *\n     * @return {list} list array which contains child rows\n     */\n    self.getChildren = function() {\n        var lovEntries = [];\n        if( self.checkHasChildren() ) {\n            for( var lovValue in self.lovRowValue.childRows ) {\n                if( self.lovRowValue.childRows.hasOwnProperty( lovValue ) ) {\n                    lovEntries.push( new LOVEntry( self.lovRowValue.childRows[ lovValue ], self.lovType,\n                        self.lovValueProp, self.lovDescProp ) );\n                }\n            }\n        }\n\n        return lovEntries;\n    };\n}; // LOVEntry\n\n/**\n * LOVDataValidationResult object\n *\n * @constructor\n */\nvar LOVDataValidationResult = function() {\n    var self = this;\n\n    self.updatedPropValueMap = {};\n    self.updatedPropDisplayValueMap = {};\n\n    /**\n     * The parent view model object\n     */\n    self.setViewModelObject = function( vmObj ) {\n        self.viewModelObj = vmObj;\n    };\n\n    /**\n     * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n     */\n    self.addUpdatedPropertyValue = function( propName, propValues, propDisplayValues ) {\n        self.updatedPropValueMap[ propName ] = propValues;\n        self.updatedPropDisplayValueMap[ propName ] = propDisplayValues;\n    };\n\n    /**\n     * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n     */\n    self.setValid = function( valid ) {\n        self.valid = valid;\n    };\n\n    /**\n     * This structure contains the LOV results from the getInitialLOVValues or getNextLOVValues operations\n     */\n    self.setError = function( error ) {\n        self.error = error;\n    };\n}; // LOVDataValidationResult\n\n/**\n * @param {ViewModelProperty} viewProp -view model Property\n * @param {filterString} filterString - filter string for lov's\n * @param {String} opName - operation Name\n * @param {ViewModelObject} viewModelObj -view model object\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\nvar createInitialData = function( viewProp, filterString, assert, operationName, viewModelObj, appCtxService,\n    maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid ) {\n    var viewObject = viewModelObj;\n\n    var contextObject = appCtxService.getCtx( 'InitialLovDataAdditionalProps' );\n    var tablePropObject = appCtxService.getCtx( 'InitialSaveDataAdditionalProps' );\n\n    assert( viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name );\n\n    var initialData = {};\n\n    initialData.propertyName = uwPropertyService.getBasePropertyName( viewProp.propertyName );\n    initialData.filterData = {\n        filterString: filterString ? filterString : '',\n        maxResults: maxResults ? maxResults : 2000,\n        numberToReturn: lovPageSize ? lovPageSize : 25,\n        order: sortOrder ? sortOrder : 1,\n        sortPropertyName: sortPropertyName ? sortPropertyName : ''\n    };\n\n    initialData.lov = {\n        uid: '',\n        type: ''\n    };\n\n    let viewPropOwningType;\n    if( viewProp.srcObjectTypeName ) {\n        let viewPropType = clientMetaModel.getType( viewProp.srcObjectTypeName );\n        viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n    }\n    // For Dcp properties, use intermediate object's type, else use the type of the parent object.\n    var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n\n    operationName = exports.formatOperationName( operationName );\n\n    var sourceObjectUid = uwPropertyService.getSourceObjectUid( viewProp );\n\n    var owningObjectUid = owningObjUid || sourceObjectUid;\n    var modelObject = clientDataModel.getObject( owningObjectUid );\n    if( !modelObject ) {\n        owningObjectUid = clientDataModel.NULL_UID;\n    }\n\n    initialData.lovInput = {\n        owningObject: {\n            uid: owningObjectUid,\n            type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n        },\n        operationName: operationName,\n        boName: objName,\n        propertyValues: {}\n    };\n\n    var modifiedProps = _.union( viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps() );\n\n    if( modifiedProps && modifiedProps.length > 0 ) {\n        for( var prop in modifiedProps ) {\n            if( modifiedProps.hasOwnProperty( prop ) ) {\n                var modifiedPropName = uwPropertyService.getBasePropertyName( modifiedProps[ prop ].name );\n                initialData.lovInput.propertyValues[ modifiedPropName ] = modifiedProps[ prop ].values;\n            }\n        }\n    }\n\n    if( tablePropObject ) {\n        tablePropObject = _.isArray( tablePropObject ) ? tablePropObject : [ tablePropObject ];\n        _.forEach( tablePropObject, function( value, key ) {\n            _.forEach( value, function( nestedValue, nestedKey ) {\n                delete initialData.lovInput.propertyValues[ nestedKey ];\n            } );\n        } );\n    }\n\n    if( contextObject ) {\n        for( var addProp in contextObject ) {\n            initialData.lovInput.propertyValues[ addProp ] = [ contextObject[ addProp ] ];\n        }\n    }\n\n    return initialData;\n};\n\n/**\n * Implementation of LOV Service (these api's are only compatible with Teamcenter 9)\n *\n * @param {module:scripts/services/notifyService} notifySvc -\n *\n * @param {module:js/dateTimeService} dateTimeSvc - SOA's LOV Access service\n *\n * @param {module:soa/kernel/clientDataModel} clientDataModel - SOA's clientDataModel service\n */\nlet exports;\n\n/**\n * Add the 'lovApi' function set object to the given ViewModelProperty\n *\n * @param {ViewModelProperty} viewProp -view model property\n *\n * @param {module:angular~Scope} scope - angular scope for the element\n *\n * @param {ViewModelObject} viewModelObj -view model Object\n *\n * @param {String} owningObjUid - The UID of owning object\n *\n */\nexport let initNativeCellLovApi = function( viewProp, scope, operationName, viewModelObj, owningObjUid ) {\n    viewProp.lovApi = {};\n    //viewProp.isRequired = true;\n    viewProp.lovApi.operationName = operationName;\n    viewProp.lovApi.getInitialValues = function( filterStr, deferred, name, maxResults, lovPageSize,\n        sortPropertyName, sortOrder ) {\n        exports.getInitialValues( filterStr, deferred, viewProp, viewProp.lovApi.operationName, viewModelObj,\n            maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid );\n    };\n\n    viewProp.lovApi.getNextValues = function( deferred ) {\n        exports.getNextValues( deferred, viewProp );\n    };\n\n    viewProp.lovApi.validateLOVValueSelections = function( lovEntries ) {\n        return exports.validateLOVValueSelections( lovEntries, viewProp, viewProp.lovApi.operationName,\n            viewModelObj, owningObjUid );\n    };\n\n    viewProp.owningObjUid = owningObjUid;\n};\n\n/**\n * This operation is invoked to query the data for a property having an LOV attachment. The results returned\n * from the server also take into consideration any filter string that is in the input. This method calls\n * 'getInitialLOVValues' and returns initial set of lov values. This is only compatible with 'Teamcenter 10'\n *\n * @param {filterString} filterString - The filter text for lov's\n * @param {deferred} deferred - $q object to resolve the 'promise' with a an array of LOVEntry objects.\n * @param {ViewModelProperty} viewProp - Property to aceess LOV values for.\n * @param {String} operationName - The operation being performed e.g. Edit, Create, Revise, Save As etc.\n * @param {ViewModelObject} viewModelObj - The view model object which LOV property is defined on.\n * @param {Number} maxResults - Maximum no of results.\n * @param {Number} lovPageSize - The count of LOVs to be returned in a single server call.\n * @param {String} sortPropertyName - The property on which to sort LOV results on.\n * @param {String} sortOrder - Sort order.\n * @param {String} owningObjUid - The UID of owning object\n */\nexport let getInitialValues = function( filterString, deferred, viewProp, operationName, viewModelObj, maxResults,\n    lovPageSize, sortPropertyName, sortOrder, owningObjUid ) {\n    var initialData = createInitialData( viewProp, filterString, assert, operationName, viewModelObj,\n        appCtxService, maxResults, lovPageSize, sortPropertyName, sortOrder, owningObjUid );\n\n    var serviceInput = {\n        initialData: initialData\n    };\n\n    soaSvc.postUnchecked( 'Core-2013-05-LOV', 'getInitialLOVValues', serviceInput ).then( function( responseData ) {\n        //Object.assign( viewProp.searchResults, responseData );\n        //viewProp.searchResults = responseData; // using for LOV getNextLOVValues SOA call\n        //viewProp.lovApi.result = responseData; // using for validateLOVValuesSelections()\n        if( _.isArray( responseData.ServiceData.partialErrors ) ) {\n            //getInitialLOV  returns error when message/error has to be displayed\n            // if errorlevel >1 its legitimate error else it is message\n            for ( const partialError of responseData.ServiceData.partialErrors ) {\n                if(  _.isArray( partialError.errorValues ) ) {\n                    for ( const errorValue of partialError.errorValues ) {\n                        if( errorValue.level > 1 ) {\n                            deferred.reject( responseData.ServiceData.partialErrors );\n                        }\n                    }\n                }\n            }\n        }\n        let lovValues = exports.createLOVEntries( responseData, viewProp.type );\n        deferred.resolve( { responseData, lovValues } );\n    }, function( reason ) {\n        deferred.reject( reason );\n    } );\n};\n\nexport let getListLOVValues = function( list ) {\n    let lovEntries = list;\n    return { lovEntries };\n};\n\n/**\n *\n * @param {*} output\n * @param {*} declViewModel\n */\nexport let processLOVEntries = function( { responseData, lovValues = {} } ) {\n    if( lovValues && lovValues.hasOwnProperty( 'moreValuesExist' ) ) {\n        let moreValuesExist = lovValues.moreValuesExist;\n        let newop = [ ...lovValues ];\n        delete newop.moreValuesExist;\n        return {\n            lovEntries: newop,\n            moreValuesExist,\n            partialErrors: '',\n            level: '',\n            responseData,\n            lovUsage: lovValues.lovUsage\n        };\n    }\n    return {\n        lovEntries: [],\n        partialErrors: lovValues.cause,\n        level: lovValues.level,\n        moreValuesExist: false,\n        responseData,\n        lovUsage: lovValues.lovUsage\n    };\n};\n\nexport let getInitialLOVValues = function( viewModel, dataProviderName ) {\n    let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[ dataProviderName ] : null;\n    const lovInfo = appCtxSvc.getCtx( 'aw.lovInfo' );\n    let vmo;\n    let viewProp;\n    let filterString;\n    let owningObjUid;\n    let operationName;\n    if( dataProvider && dataProvider.resolvedLovConfig ) {\n        const lovConfiguration = dataProvider.resolvedLovConfig;\n        vmo = lovConfiguration.viewModelObj;\n        viewProp = lovConfiguration.viewProp;\n        filterString = lovConfiguration.filterString;\n        owningObjUid = viewProp.owningObjUid;\n        operationName = lovConfiguration.operationName;\n    } else if( lovInfo ) {\n        vmo = lovInfo.ctxLovPropVMO;\n        viewProp = vmo.props[ lovInfo.ctxLovPropName ];\n        filterString = viewProp.filterString;\n        owningObjUid = viewProp.owningObjUid;\n        operationName = vmo.operationName;\n    }\n\n    let deferred = AwPromiseService.instance.defer();\n    getInitialValues( filterString, deferred, viewProp, operationName, vmo, null, null, '', '', owningObjUid );\n    return deferred.promise.then( ( response ) => {\n        const responseBehaviorData = response.responseData && response.responseData.behaviorData;\n        viewProp.lovApi.behaviorData = {\n            dependendProps: responseBehaviorData && responseBehaviorData.dependendProps,\n            style: responseBehaviorData && responseBehaviorData.style\n        };\n        return response;\n    } ).catch( error => error );\n};\n\n/**\n * This operation is invoked after a call to getInitialLOVValues if the moreValuesExist flag is true in the\n * LOVSearchResults output returned from a call to the getInitialLOVValues operation. The operation will\n * retrieve the next set of LOV values.\n *\n * @param {deferred} deferred - promise object\n * @param {ViewModelProperty} viewProp - Lov object value\n * @return {deferred.promise} promise object\n */\nexport let getNextValues = function( viewModel, dataProviderName ) {\n    let dataProvider = viewModel.dataProviders ? viewModel.dataProviders[ dataProviderName ] : null;\n    const lovInfo = appCtxSvc.getCtx( 'aw.lovInfo' );\n    let lovDataInfo = viewModel.lovDataInfo;\n    let vmo;\n    let viewProp;\n    if( dataProvider && dataProvider.resolvedLovConfig ) {\n        const lovConfiguration = dataProvider.resolvedLovConfig;\n        vmo = lovConfiguration.viewModelObj;\n        viewProp = lovConfiguration.viewProp;\n    } else if( lovDataInfo ) {\n        vmo = lovInfo.ctxLovPropVMO;\n        viewProp = vmo.props[ lovInfo.ctxLovPropName ];\n    }\n    let lovEntries = [];\n    if( lovDataInfo && lovDataInfo.responseData ) {\n        var serviceInput = {};\n        serviceInput.lovData = lovDataInfo.responseData.lovData;\n        return soaSvc.post( 'Core-2013-05-LOV', 'getNextLOVValues', serviceInput ).then( responseData => {\n            const lovValues = exports.createLOVEntries( responseData, viewProp.type );\n            return { lovValues, responseData };\n        } );\n    }\n    return Promise.resolve( lovEntries );\n};\n\n/**\n * This is a reusable function to create LOV entries from SOA response\n *\n * @param {responseData} SOA response structure from LOV\n * @param {propertyType} Type of Property\n * @return {lovEntries} Array of LOV entry objects\n */\nexport let createLOVEntries = function( responseData, propertyType ) {\n    var lovEntries = [];\n    var lovValueProp = responseData.behaviorData.columnNames.lovValueProp;\n    var lovDescProp = responseData.behaviorData.columnNames.lovDescrProp;\n    var lovUsage = responseData.behaviorData.lovUsage;\n\n    for( var lovValue in responseData.lovValues ) {\n        if( responseData.lovValues.hasOwnProperty( lovValue ) ) {\n            lovEntries.push( new LOVEntry( responseData.lovValues[ lovValue ], propertyType, lovValueProp,\n                lovDescProp ) );\n        }\n    }\n    // push the moreValuesExist to the lovEntries. if it is true, then call getNextValues ; else not call getNextValues\n    if( responseData.moreValuesExist ) {\n        lovEntries.moreValuesExist = responseData.moreValuesExist;\n    } else {\n        lovEntries.moreValuesExist = false;\n    }\n    lovEntries.lovUsage = 'EXHAUSTIVE_LOV';\n    if( lovUsage === LOV_TYPES.SUGGESTIVE_LOV ) {\n        lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n    }\n\n    // This is Workaround hack which will be removed when Fnd0NameValueDynLOV wil be converted to suggestive\n    //LCS-681145 - Change Fnd0DynLOVNameValuePairs LOV to suggestive\n    if( responseData.lovData && _.isArray( responseData.lovData.lovs ) && responseData.lovData.lovs.length > 0 &&\n    responseData.lovData.lovs[0].type === 'Fnd0NameValueDynLOV' ) {\n        lovEntries.lovUsage = 'SUGGESTIVE_LOV';\n    }\n\n    return lovEntries;\n};\n\n/**\n * This operation can be invoked after selecting a value from the LOV. Use this operation to do additional\n * validation to be done on server such as validating Range value, getting the dependent properties values in\n * case of interdependent LOV (resetting the dependendent property values), Coordinated LOVs ( populating\n * dependent property values ).\n *\n * @param {LovEntry[]} lovEntries - Array of LOV values selected\n *\n * @param {viewProp} viewProp - The property being modified\n *\n * @return {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc\n *\n * @return {ViewModelObject} viewModelObj The object for which property is being modified\n *\n * @param {String} owningObjUid - The UID of owning object\n */\nexport let validateLOVValueSelections = function( lovEntries, viewProp, operationName, viewModelObj, owningObjUid ) {\n    var viewObject = viewModelObj;\n    var contextObject = appCtxService.getCtx( 'InitialLovDataAdditionalProps' );\n    var tablePropObject = appCtxService.getCtx( 'InitialSaveDataAdditionalProps' );\n\n    assert( viewObject, 'LOV property: Missing parent viewObject on viewProp: ' + viewProp.name );\n\n    var lovValueProp = null;\n    if( viewProp.lovApi && viewProp.lovApi.result ) {\n        lovValueProp = viewProp.lovApi.result.behaviorData.columnNames.lovValueProp;\n    }\n    var propName = uwPropertyService.getBasePropertyName( viewProp.propertyName );\n\n    let viewPropOwningType;\n    if( viewProp.srcObjectTypeName ) {\n        let viewPropType = clientMetaModel.getType( viewProp.srcObjectTypeName );\n        viewPropOwningType = viewPropType && viewPropType.owningType ? viewPropType.owningType : viewProp.srcObjectTypeName;\n    }\n    var objName = viewPropOwningType || viewObject.modelType.owningType || viewObject.modelType.name;\n\n    var serviceInput = {};\n\n    var sourceObjectUid = uwPropertyService.getSourceObjectUid( viewProp );\n\n    var owningObjectUid = owningObjUid || sourceObjectUid;\n    var modelObject = clientDataModel.getObject( owningObjectUid );\n    if( !modelObject ) {\n        owningObjectUid = clientDataModel.NULL_UID;\n    }\n\n    serviceInput.lovInput = {\n        owningObject: {\n            uid: owningObjectUid,\n            type: owningObjUid || sourceObjectUid ? objName : viewObject.type\n        },\n        operationName: operationName,\n        boName: objName,\n        propertyValues: {}\n    };\n\n    serviceInput.propName = propName;\n    serviceInput.uidOfSelectedRows = [];\n    serviceInput.lovInput.propertyValues[ propName ] = [];\n\n    // First add all the selected LOV entries\n    for( var ii = 0; ii < lovEntries.length; ii++ ) {\n        // account for simplified lov format\n        if( 'propInternalValue' in lovEntries[ ii ] ) {\n            serviceInput.lovInput.propertyValues[ propName ]\n                .push( String( lovEntries[ ii ].propInternalValue !== null ? lovEntries[ ii ].propInternalValue :\n                    '' ) );\n        } else if( lovValueProp && lovEntries[ ii ].lovRowValue ) {\n            serviceInput.lovInput.propertyValues[ propName ]\n                .push( String( lovEntries[ ii ].lovRowValue.propInternalValues[ lovValueProp ][ 0 ] ) );\n        }\n        //append selected row uid to fix dynamic LOV defect LCS-351651\n        if( lovEntries[ ii ].lovRowValue && !_.isEmpty( lovEntries[ ii ].lovRowValue.uid ) ) {\n            serviceInput.uidOfSelectedRows.push( String( lovEntries[ ii ].lovRowValue.uid ) );\n        }\n    }\n\n    // Now populate all the other modified properties.\n    var modifiedProps = _.union( viewObject.getSaveableDirtyProps(), viewObject.getAutoAssignableProps() );\n    if( modifiedProps && modifiedProps.length > 0 ) {\n        for( var prop in modifiedProps ) {\n            if( modifiedProps.hasOwnProperty( prop ) ) {\n                var modifiedPropName = uwPropertyService.getBasePropertyName( modifiedProps[ prop ].name );\n                if( modifiedPropName !== propName ) {\n                    serviceInput.lovInput.propertyValues[ modifiedPropName ] = modifiedProps[ prop ].values;\n                }\n            }\n        }\n    }\n\n    if( tablePropObject ) {\n        _.forEach( tablePropObject, function( value, key ) {\n            delete serviceInput.lovInput.propertyValues[ key ];\n        } );\n    }\n\n    if( contextObject ) {\n        for( var addProp in contextObject ) {\n            serviceInput.lovInput.propertyValues[ addProp ] = [ contextObject[ addProp ] ];\n        }\n    }\n    return soaSvc.post( 'Core-2013-05-LOV', 'validateLOVValueSelections', serviceInput ).then(\n        function( responseData ) {\n            var validationResult = new LOVDataValidationResult();\n            validationResult.setValid( responseData.propHasValidValues );\n            validationResult.setViewModelObject( viewModelObj );\n            var updatedValues = responseData.updatedPropValues;\n            for( var propName in responseData.dependentPropNames ) {\n                if( responseData.dependentPropNames.hasOwnProperty( propName ) ) {\n                    var prop = responseData.dependentPropNames[ propName ];\n                    if( updatedValues.propInternalValues.hasOwnProperty( prop ) ) {\n                        validationResult.addUpdatedPropertyValue( prop, updatedValues.propInternalValues[ prop ],\n                            updatedValues.propDisplayValues[ prop ] );\n                    }\n                }\n            }\n            return validationResult;\n        },\n        function( error ) {\n            return error;\n        } );\n};\n\n/**\n * Converts operation names to camel case.\n *\n * @param {String} operationName The operation being performed. e.g. Edit, Create, Revise, Save As etc.\n *\n * @return {String} operationName The operation formatted into camelCase.\n *\n */\nexport let formatOperationName = function( operationName ) {\n    if( operationName.toUpperCase() === 'EDIT' ) {\n        operationName = 'Edit';\n    } else if( operationName.toUpperCase() === 'CREATE' ) {\n        operationName = 'Create';\n    } else if( operationName.toUpperCase() === 'REVISE' ) {\n        operationName = 'Revise';\n    } else if( operationName.toUpperCase() === 'SAVEAS' ) {\n        operationName = 'SaveAs';\n    }\n    return operationName;\n};\n\nexports = {\n    getListLOVValues,\n    initNativeCellLovApi,\n    getInitialValues,\n    getNextValues,\n    createLOVEntries,\n    validateLOVValueSelections,\n    formatOperationName,\n    getInitialLOVValues,\n    processLOVEntries\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
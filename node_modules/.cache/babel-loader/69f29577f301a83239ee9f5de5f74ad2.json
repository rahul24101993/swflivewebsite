{"ast":null,"code":"import AwChip from'viewmodel/AwChipViewModel';import eventBus from'js/eventBus';import _ from'lodash';import{jsx as _jsx}from\"react/jsx-runtime\";export const awChipListRenderFunction=props=>{const{dataprovider,buttonType,action,uiIconAction,chipCondition,viewModel}=props;const{data}=viewModel;let vmCollectionObj=dataprovider.vmCollectionObj;let loadedVMO=vmCollectionObj&&vmCollectionObj.vmCollection.loadedVMObjects||[];if(_.isEmpty(loadedVMO)){return;}let subscriptions=data.subscriptions;let subscribedEventsStr=getEventSubscribtionsList(subscriptions);if(!subscribedEventsStr.includes(\"\".concat(dataprovider.name,\".reset\"))){data.subscriptions.push(eventBus.subscribe(\"\".concat(dataprovider.name,\".reset\"),()=>{initChipList(props);}));}return/*#__PURE__*/_jsx(\"div\",{className:\"aw-layout-flexbox aw-widgets-chipList\",children:loadedVMO.map((chipModel,index)=>{return/*#__PURE__*/_jsx(AwChip,{chip:chipModel,buttonType:buttonType,action:action,uiIconAction:uiIconAction,chipCondition:chipCondition},index);})});};export const initChipList=props=>{const{dataprovider}=props;if(dataprovider&&dataprovider.resetDataProvider){dataprovider.resetDataProvider();}};export const updateDefaultSelection=dataProvider=>{let selected=_.filter(dataProvider.vmCollectionObj.vmCollection.loadedVMObjects,{selected:true});dataProvider.selectionModel.setSelection(selected);};const getEventSubscribtionsList=subscriptions=>{let subscribedEventsStr=[];if(subscriptions.length!==0){subscriptions.map(eventSubscribed=>{subscribedEventsStr.push(eventSubscribed.topic);});}return subscribedEventsStr;};export const destroyIndicatorSubscription=subscriptions=>{if(subscriptions&&subscriptions.length>0){subscriptions.forEach(subscription=>{eventBus.unsubscribe(subscription);});}};","map":null,"metadata":{},"sourceType":"module"}
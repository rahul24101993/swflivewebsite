{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service is used to map the declarative resolve configuration to the ui router resolve state functionality.\n *\n\n * @module js/stateResolveService\n */import _ from'lodash';import moduleLoader from'js/moduleLoader';import AwPromiseService from'js/awPromiseService';import appCtxService from'js/appCtxService';import viewModelProcessingFactory from'js/viewModelProcessingFactory';import actionService from'js/actionService';/**\n * Filter parameters that are not set and build the new object.\n *\n * @param {Object} stateParams - Routing state params.\n * @return {Object} params - processed paramater object.\n */var processParameters=function(stateParams){return Object.keys(stateParams)// Filter parameters that are not set\n.filter(function(param){return stateParams[param];})// Build the new object\n.reduce(function(acc,nxt){acc[nxt]=stateParams[nxt];return acc;},{});};/**\n * Get the state params object with processed params.\n *\n * @param {Object} stateParams - Routing state params.\n * @return {Object} params - Object of original state params and processed params.\n */var getStateParamsObject=function(stateParams){return{params:stateParams,processed:processParameters(stateParams)};};/**\n * Create declarative functions from resolveAction object and set it on the state.resolve\n *\n * @param {Object} state - Routing state.\n * @returns {Array} returns array of the resolveActions\n */export const getResolvedActions=function(state){let resolveActions=[];_.forEach(state.resolveActions,function(action,actionName){resolveActions.push({token:\"\".concat(actionName,\"Response\"),deps:['$transition$'],resolveFn:transition=>{//execute declarative action here\nvar defer=AwPromiseService.instance.defer();var declarativeViewModelId='__stateResolveSvc';var declViewModel=viewModelProcessingFactory.createDeclViewModel({_viewModelId:declarativeViewModelId});var dataCtxNode={ctx:appCtxService.ctx,data:declViewModel};// Update the state params on app ctx.\ndataCtxNode.ctx.state=getStateParamsObject(transition.params());moduleLoader.loadDependentModule(action.deps).then(function(depModuleObj){actionService.executeAction(declViewModel,action,dataCtxNode,depModuleObj).then(function success(response){defer.resolve(response);},function reject(error){defer.reject(error);}).finally(function(){declViewModel._internal.destroy();});});return defer.promise;}});});if(state.resolve){resolveActions=Array.isArray(state.resolve)?state.resolve.concat(resolveActions):resolveActions;}return resolveActions;};","map":null,"metadata":{},"sourceType":"module"}
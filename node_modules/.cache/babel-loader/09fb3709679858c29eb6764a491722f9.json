{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/AwCommandBarService\n */import AwCommandList from'viewmodel/AwCommandListViewModel';import{getCommands}from'./command.service';import{getServerConditionUsage}from'./commandVisibilityService';import Debug from'debug';/**\n * Wrapper component to handle initialization of AwCommandBar\n *\n * @param {Object} param0 Declarative render context\n * @returns {JSX.Element} React component\n */import{jsx as _jsx}from\"react/jsx-runtime\";export const awCommandBarRenderFunction=_ref=>{let{alignment,visibilityLoader,context,anchor,showCommandLabels,viewModel:{data:{commandList=null,visibleServerCommands,trace}},className,overflow,hideMore,reverse}=_ref;//If a server visibility loader is configured do not display commands until the server visibility is loaded\nreturn commandList&&/*#__PURE__*/_jsx(AwCommandList,{alignment:alignment,anchor:anchor,commandContext:context,commandList:commandList,hideMore:hideMore,overflow:overflow,showCommandLabels:showCommandLabels,trace:trace,visibilityLoader:visibilityLoader,reverse:reverse,visibleServerCommands:visibleServerCommands});};/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @returns {List<CommandOverlay>} List of command data for the given anchor\n */export const awCommandBarInitFunction=async _ref2=>{let{anchor}=_ref2;if(!anchor){return[];}const trace=new Debug(\"command:AwCommandBar:\".concat(anchor));trace('Loading commands');return getCommands(anchor).then(list=>{trace('Loaded command list',list);return{commandList:list,trace};});};/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @param {Object} param0.commandList The list of commands to get server visibility for\n * @param {Object} param0.visibilityLoader The server visibility dataloader\n * @returns {Object} Current command visibility states\n */export const refreshServerVisibility=async _ref3=>{let{commandList,visibilityLoader,trace}=_ref3;if(!commandList||!visibilityLoader){return null;}const serverCommandIds=commandList.map(cmd=>{const x=getServerConditionUsage(cmd);cmd.trace('Server command visibility to be loaded',x);return x;}).reduce((acc,nxt)=>acc.concat(nxt),[]);trace('Loading server visibility',serverCommandIds,commandList);return visibilityLoader.loadMany(serverCommandIds).then(results=>results.reduce((acc,result,idx)=>{acc[serverCommandIds[idx]]=result;return acc;},{}));};","map":null,"metadata":{},"sourceType":"module"}
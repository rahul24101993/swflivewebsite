{"ast":null,"code":"var _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(); // Copyright (c) 2021 Siemens\n\n/**\n * @module js/gridProviderUtils\n */\n\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useInitHook, useReducer } from 'js/reactHelper';\nimport awColumnSvc from 'js/awColumnService';\n\nconst gridContextReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_VALUES':\n      return { ...state,\n        ...action\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useGridContext = prop => {\n  _s4();\n\n  _s();\n\n  const [gridContextPlaceholder, gridContextDispatcher] = useReducer(gridContextReducer, {\n    columnDef: null,\n    isBulkEditing: false,\n    columnConfig: undefined,\n    currentColumnIndex: -1,\n    popupRef: null,\n    editVmo: null,\n    editPropertyName: '',\n    contextVmo: [],\n    sortDirection: 'none',\n    newColumnIndex: -1,\n    defaultColumnPinIndex: -1,\n    pinColumnData: {},\n    dynamicRowHeightStatus: false\n  });\n\n  if (prop.gridContextDispatcher && prop.gridContextPlaceholder) {\n    return [prop.gridContextPlaceholder, prop.gridContextDispatcher];\n  }\n\n  return [gridContextPlaceholder, gridContextDispatcher];\n};\n\n_s4(useGridContext, \"KqNl9Wy2pI2EQ0paxmtcXa04bJs=\");\n\n_s(useGridContext, \"283H/4Tk67C5KsG3PCq8GGDNuhk=\");\n\nexport const processGrids = (gridDefs, viewModel, ctx) => {\n  // revisitme - need to be refactor maybe\n  // gridDefs = _.cloneDeep( gridDefs );\n  for (const gridDefKey in gridDefs) {\n    let gridInstance = gridDefs[gridDefKey];\n    const dataCtxNode = {\n      data: viewModel,\n      ctx\n    };\n\n    if (gridInstance.dataProvider) {\n      if (!gridInstance.gridOptions) {\n        gridInstance.gridOptions = {};\n      }\n    }\n\n    gridInstance.dataCtxNode = dataCtxNode;\n    gridInstance.gridid = gridDefKey;\n  }\n\n  return gridDefs;\n};\nexport const useGrid = (prop, panelId, gridContextPlaceholder, gridContextDispatcher, runActionWithViewModel) => {\n  _s5();\n\n  _s2();\n\n  let columns;\n  let gridContextColumns;\n  const tableCallbackRef = useRef();\n  let loadedVmObjects;\n  let sortDirection;\n  let newColumnIndex;\n  let currentColumnIndex;\n  let pinColumnData;\n  let dynamicRowHeightStatus;\n  let hideColumnField;\n  let columnFilterInfo;\n  let columnMenuData;\n  let columnArrangeData;\n  let selectedColumn = gridContextPlaceholder && gridContextPlaceholder.selectedColumn;\n\n  if (prop.gridid && panelId === 'AwSplmTable' && prop.reusable !== 'true') {\n    const {\n      vmCollectionObj,\n      columnConfig\n    } = prop.dataProviderInstance;\n    loadedVmObjects = vmCollectionObj.vmCollection.loadedVMObjects;\n\n    if (gridContextPlaceholder.columnConfig) {\n      gridContextColumns = gridContextPlaceholder.columnConfig.columns;\n    }\n\n    if (columnConfig !== undefined && columnConfig.columns) {\n      columns = columnConfig.columns;\n    }\n\n    if (gridContextPlaceholder) {\n      sortDirection = gridContextPlaceholder.sortDirection;\n      newColumnIndex = gridContextPlaceholder.newColumnIndex;\n      currentColumnIndex = gridContextPlaceholder.currentColumnIndex;\n      pinColumnData = gridContextPlaceholder.pinColumnData;\n      dynamicRowHeightStatus = gridContextPlaceholder.dynamicRowHeightStatus;\n      hideColumnField = gridContextPlaceholder.hideColumnField;\n      columnFilterInfo = gridContextPlaceholder.columnFilterInfo;\n      columnMenuData = gridContextPlaceholder.columnMenuData;\n      columnArrangeData = gridContextPlaceholder.columnArrangeData;\n    }\n\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateDeclGridObject(prop);\n    }\n  } //OnMount\n\n\n  useInitHook(() => {\n    if (prop.gridid && panelId === 'AwSplmTable') {\n      //Need to set gridContextDispatcher on dataProviderInstance for arrange reset\n      prop.dataProviderInstance.gridContextDispatcher = gridContextDispatcher;\n\n      if (prop.reusable !== 'true') {\n        const {\n          vmCollectionObj\n        } = prop.dataProviderInstance;\n        const element = prop.dataProviderInstance.getRootReference();\n        prop.dataCtxNode.i18n = prop.dataCtxNode.data.i18n;\n        prop.dataCtxNode.gridContextDispatcher = gridContextDispatcher;\n        prop.dataCtxNode.gridContextPlaceholder = gridContextPlaceholder;\n        import('js/awSPLMTableNativeService').then(awSPLMTableNativeService => {\n          tableCallbackRef.current = awSPLMTableNativeService.initializeTable(element.current, vmCollectionObj.vmCollection, prop.dataCtxNode, prop, runActionWithViewModel);\n        });\n      }\n    } //OnUnMount\n\n\n    return () => {\n      if (tableCallbackRef.current) {\n        tableCallbackRef.current.destroy();\n      }\n    };\n  }, prop.i18nLoaded === true);\n  const selectionModel = prop.dataProviderInstance && prop.dataProviderInstance.selectionModel;\n  const selectionModelActivated = selectionModel && selectionModel.isSelectionModelActivated();\n  useEffect(() => {\n    const updateTableContents = async () => {\n      if (tableCallbackRef.current) {\n        if (prop.dataProviderInstance.initializationComplete === false) {\n          await tableCallbackRef.current.completeInitialization();\n        }\n\n        tableCallbackRef.current.updateState(prop.dataCtxNode.data);\n        const {\n          vmCollectionObj\n        } = prop.dataProviderInstance;\n        tableCallbackRef.current.updateVmCollection(vmCollectionObj.vmCollection);\n      }\n    };\n\n    updateTableContents();\n  }, [loadedVmObjects]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateContentRowSelection();\n    }\n  }, [selectionModelActivated]);\n  useEffect(() => {\n    const updateTableColumns = async columns => {\n      if (tableCallbackRef.current) {\n        if (prop.dataProviderInstance.initializationComplete === false) {\n          await tableCallbackRef.current.completeInitialization();\n        } else {\n          tableCallbackRef.current.updateTableColumns(columns);\n        }\n      }\n    };\n\n    updateTableColumns(columns);\n  }, [columns]);\n  useEffect(() => {\n    if (prop.dataProviderInstance && prop.dataProviderInstance.columnConfig && gridContextColumns) {\n      prop.dataProviderInstance.columnConfig.columns = gridContextColumns;\n\n      if (tableCallbackRef.current) {\n        tableCallbackRef.current.updateTableColumns(gridContextColumns);\n      }\n    }\n  }, [gridContextColumns]); // Column selection with enableColumnSelection grid option\n\n  useEffect(() => {\n    if (tableCallbackRef.current && selectedColumn) {\n      if (selectionModel && selectedColumn.vmo) {\n        selectionModel.setSelection([selectedColumn.vmo]);\n        selectionModel.selectionData.update({\n          selected: [selectedColumn.vmo]\n        });\n      }\n\n      tableCallbackRef.current.selectTableColumn(selectedColumn);\n    }\n  }, [selectedColumn]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateSortDirection(currentColumnIndex, newColumnIndex, sortDirection);\n    }\n  }, [newColumnIndex, sortDirection]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateDynamicRowHeight(dynamicRowHeightStatus);\n    }\n  }, [dynamicRowHeightStatus]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updatePinColumn(pinColumnData.columnDef, pinColumnData.isFreezeAction, pinColumnData.defaultColumnPinIndex);\n    }\n  }, [pinColumnData]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.hideColumn(hideColumnField);\n    }\n  }, [hideColumnField]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.columnFilterApplied(columnFilterInfo);\n    }\n  }, [columnFilterInfo]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.columnsArranged(columnArrangeData);\n    }\n  }, [columnArrangeData]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateColumnMenuData(columnMenuData);\n    }\n  }, [columnMenuData]);\n};\n\n_s5(useGrid, \"kIVB7BdiocQv5AgazCK+0/Lrqq8=\", false, function () {\n  return [useInitHook];\n});\n\n_s2(useGrid, \"kIVB7BdiocQv5AgazCK+0/Lrqq8=\", false, function () {\n  return [useInitHook];\n});\n\nexport const useGrids = (grids, dataCtxNode, dataProviders, gridContextPlaceholder, gridContextDispatcher, declViewModel, getProps) => {\n  _s6();\n\n  _s3(); // Just to make sure the dp name order is same in every render.\n\n\n  const [gridNames] = useState(() => {\n    return grids !== undefined ? Object.keys(grids) : [];\n  });\n  gridNames.forEach(gridName => {\n    const dpInstance = dataProviders[grids[gridName].dataProvider];\n    grids[gridName].dataProviderInstance = dpInstance;\n    grids[gridName].i18n = dataCtxNode.data.i18n;\n    grids[gridName].gridContextPlaceholder = gridContextPlaceholder;\n    grids[gridName].gridContextDispatcher = gridContextDispatcher;\n    grids[gridName].propsCallback = getProps;\n\n    if (!grids[gridName].columnProviderInstance) {\n      grids[gridName].columnProviderInstance = awColumnSvc.createColumnProvider(declViewModel, dataCtxNode, dpInstance.commands, gridName, dpInstance.json.commandsAnchor);\n    }\n  });\n};\n\n_s6(useGrids, \"M5TlwkoIv1TlnVIBOu2O5g1bz94=\");\n\n_s3(useGrids, \"qZXjlXPw02lDYh+FhdE0Y+c4g1o=\");\n\nexport default {\n  processGrids,\n  useGrid,\n  useGrids,\n  useGridContext\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/gridProviderUtils.js"],"names":["gridContextReducer","action","useGridContext","prop","useReducer","columnDef","isBulkEditing","columnConfig","currentColumnIndex","popupRef","editVmo","editPropertyName","contextVmo","sortDirection","newColumnIndex","defaultColumnPinIndex","pinColumnData","dynamicRowHeightStatus","processGrids","gridInstance","gridDefs","dataCtxNode","data","ctx","useGrid","tableCallbackRef","useRef","selectedColumn","gridContextPlaceholder","panelId","loadedVmObjects","vmCollectionObj","gridContextColumns","columns","hideColumnField","columnFilterInfo","columnMenuData","columnArrangeData","useInitHook","element","awSPLMTableNativeService","selectionModel","selectionModelActivated","useEffect","updateTableContents","updateTableColumns","selected","useGrids","useState","grids","Object","gridNames","gridName","dpInstance","dataProviders","awColumnSvc"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/gridProviderUtils\n */\nimport { useState, useEffect, useRef } from 'react';\nimport { useInitHook, useReducer } from 'js/reactHelper';\nimport awColumnSvc from 'js/awColumnService';\n\nconst gridContextReducer = ( state, action ) => {\n    switch ( action.type ) {\n        case 'UPDATE_VALUES':\n            return {\n                ...state,\n                ...action\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useGridContext = ( prop ) => {\n    const [ gridContextPlaceholder, gridContextDispatcher ] = useReducer( gridContextReducer, {\n        columnDef: null,\n        isBulkEditing: false,\n        columnConfig: undefined,\n        currentColumnIndex: -1,\n        popupRef: null,\n        editVmo: null,\n        editPropertyName: '',\n        contextVmo: [],\n        sortDirection: 'none',\n        newColumnIndex: -1,\n        defaultColumnPinIndex: -1,\n        pinColumnData: {},\n        dynamicRowHeightStatus: false\n    } );\n\n    if( prop.gridContextDispatcher && prop.gridContextPlaceholder ) {\n        return [ prop.gridContextPlaceholder, prop.gridContextDispatcher ];\n    }\n\n    return [ gridContextPlaceholder, gridContextDispatcher ];\n};\n\nexport const processGrids = ( gridDefs, viewModel, ctx ) => {\n    // revisitme - need to be refactor maybe\n    // gridDefs = _.cloneDeep( gridDefs );\n\n    for( const gridDefKey in gridDefs ) {\n        let gridInstance = gridDefs[ gridDefKey ];\n        const dataCtxNode = {\n            data: viewModel,\n            ctx\n        };\n        if( gridInstance.dataProvider ) {\n            if( !gridInstance.gridOptions ) {\n                gridInstance.gridOptions = {};\n            }\n        }\n        gridInstance.dataCtxNode = dataCtxNode;\n        gridInstance.gridid = gridDefKey;\n    }\n    return gridDefs;\n};\n\nexport const useGrid = ( prop, panelId, gridContextPlaceholder, gridContextDispatcher, runActionWithViewModel ) => {\n    let columns;\n    let gridContextColumns;\n    const tableCallbackRef = useRef();\n    let loadedVmObjects;\n    let sortDirection;\n    let newColumnIndex;\n    let currentColumnIndex;\n    let pinColumnData;\n    let dynamicRowHeightStatus;\n    let hideColumnField;\n    let columnFilterInfo;\n    let columnMenuData;\n    let columnArrangeData;\n    let selectedColumn = gridContextPlaceholder && gridContextPlaceholder.selectedColumn;\n\n    if( prop.gridid && panelId === 'AwSplmTable' && prop.reusable !== 'true' ) {\n        const { vmCollectionObj, columnConfig } = prop.dataProviderInstance;\n        loadedVmObjects = vmCollectionObj.vmCollection.loadedVMObjects;\n        if( gridContextPlaceholder.columnConfig ) {\n            gridContextColumns = gridContextPlaceholder.columnConfig.columns;\n        }\n        if( columnConfig !== undefined && columnConfig.columns ) {\n            columns = columnConfig.columns;\n        }\n\n        if( gridContextPlaceholder ) {\n            sortDirection = gridContextPlaceholder.sortDirection;\n            newColumnIndex = gridContextPlaceholder.newColumnIndex;\n            currentColumnIndex = gridContextPlaceholder.currentColumnIndex;\n            pinColumnData = gridContextPlaceholder.pinColumnData;\n            dynamicRowHeightStatus = gridContextPlaceholder.dynamicRowHeightStatus;\n            hideColumnField = gridContextPlaceholder.hideColumnField;\n            columnFilterInfo = gridContextPlaceholder.columnFilterInfo;\n            columnMenuData = gridContextPlaceholder.columnMenuData;\n            columnArrangeData = gridContextPlaceholder.columnArrangeData;\n        }\n\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateDeclGridObject( prop );\n        }\n    }\n\n    //OnMount\n    useInitHook( () => {\n        if( prop.gridid && panelId === 'AwSplmTable' ) {\n            //Need to set gridContextDispatcher on dataProviderInstance for arrange reset\n            prop.dataProviderInstance.gridContextDispatcher = gridContextDispatcher;\n\n            if ( prop.reusable !== 'true' ) {\n                const { vmCollectionObj } = prop.dataProviderInstance;\n                const element = prop.dataProviderInstance.getRootReference();\n                prop.dataCtxNode.i18n = prop.dataCtxNode.data.i18n;\n                prop.dataCtxNode.gridContextDispatcher = gridContextDispatcher;\n                prop.dataCtxNode.gridContextPlaceholder = gridContextPlaceholder;\n                import( 'js/awSPLMTableNativeService' ).then( ( awSPLMTableNativeService ) => {\n                    tableCallbackRef.current = awSPLMTableNativeService.initializeTable( element.current, vmCollectionObj.vmCollection, prop.dataCtxNode, prop, runActionWithViewModel );\n                } );\n            }\n        }\n        //OnUnMount\n        return () => {\n            if( tableCallbackRef.current ) {\n                tableCallbackRef.current.destroy();\n            }\n        };\n    }, prop.i18nLoaded === true );\n\n    const selectionModel = prop.dataProviderInstance && prop.dataProviderInstance.selectionModel;\n    const selectionModelActivated = selectionModel && selectionModel.isSelectionModelActivated();\n\n    useEffect( () => {\n        const updateTableContents = async() => {\n            if( tableCallbackRef.current ) {\n                if( prop.dataProviderInstance.initializationComplete === false ) {\n                    await tableCallbackRef.current.completeInitialization();\n                }\n                tableCallbackRef.current.updateState( prop.dataCtxNode.data );\n                const { vmCollectionObj } = prop.dataProviderInstance;\n                tableCallbackRef.current.updateVmCollection( vmCollectionObj.vmCollection );\n            }\n        };\n        updateTableContents();\n    }, [ loadedVmObjects ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateContentRowSelection();\n        }\n    }, [ selectionModelActivated ] );\n\n    useEffect( () => {\n        const updateTableColumns = async( columns ) => {\n            if( tableCallbackRef.current ) {\n                if( prop.dataProviderInstance.initializationComplete === false ) {\n                    await tableCallbackRef.current.completeInitialization();\n                } else {\n                    tableCallbackRef.current.updateTableColumns( columns );\n                }\n            }\n        };\n        updateTableColumns( columns );\n    }, [ columns ] );\n\n    useEffect( () => {\n        if ( prop.dataProviderInstance && prop.dataProviderInstance.columnConfig && gridContextColumns ) {\n            prop.dataProviderInstance.columnConfig.columns = gridContextColumns;\n            if( tableCallbackRef.current ) {\n                tableCallbackRef.current.updateTableColumns( gridContextColumns );\n            }\n        }\n    }, [ gridContextColumns ] );\n\n    // Column selection with enableColumnSelection grid option\n    useEffect( () => {\n        if( tableCallbackRef.current && selectedColumn ) {\n            if( selectionModel && selectedColumn.vmo ) {\n                selectionModel.setSelection( [ selectedColumn.vmo ] );\n                selectionModel.selectionData.update( {\n                    selected: [ selectedColumn.vmo ]\n                } );\n            }\n            tableCallbackRef.current.selectTableColumn( selectedColumn );\n        }\n    }, [ selectedColumn ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateSortDirection( currentColumnIndex, newColumnIndex, sortDirection );\n        }\n    }, [ newColumnIndex, sortDirection ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateDynamicRowHeight( dynamicRowHeightStatus );\n        }\n    }, [ dynamicRowHeightStatus ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updatePinColumn( pinColumnData.columnDef, pinColumnData.isFreezeAction, pinColumnData.defaultColumnPinIndex );\n        }\n    }, [ pinColumnData ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.hideColumn( hideColumnField );\n        }\n    }, [ hideColumnField ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.columnFilterApplied( columnFilterInfo );\n        }\n    }, [ columnFilterInfo ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.columnsArranged( columnArrangeData );\n        }\n    }, [ columnArrangeData ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateColumnMenuData( columnMenuData );\n        }\n    }, [ columnMenuData ] );\n};\n\nexport const useGrids = ( grids, dataCtxNode, dataProviders, gridContextPlaceholder, gridContextDispatcher, declViewModel, getProps ) => {\n    // Just to make sure the dp name order is same in every render.\n    const [ gridNames ] = useState( () => {\n        return grids !== undefined ? Object.keys( grids ) : [];\n    } );\n    gridNames.forEach( ( gridName ) => {\n        const dpInstance = dataProviders[ grids[ gridName ].dataProvider ];\n        grids[ gridName ].dataProviderInstance = dpInstance;\n        grids[ gridName ].i18n = dataCtxNode.data.i18n;\n        grids[ gridName ].gridContextPlaceholder = gridContextPlaceholder;\n        grids[ gridName ].gridContextDispatcher = gridContextDispatcher;\n        grids[ gridName ].propsCallback = getProps;\n        if( !grids[ gridName ].columnProviderInstance ) {\n            grids[ gridName ].columnProviderInstance = awColumnSvc.createColumnProvider( declViewModel, dataCtxNode,\n                dpInstance.commands, gridName, dpInstance.json.commandsAnchor );\n        }\n    } );\n};\n\nexport default {\n    processGrids,\n    useGrid,\n    useGrids,\n    useGridContext\n};\n"]},"metadata":{},"sourceType":"module"}
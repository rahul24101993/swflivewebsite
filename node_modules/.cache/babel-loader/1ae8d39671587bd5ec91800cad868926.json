{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Dom Processor - Provides performance metrics in relation to the DOM\n * NOTE: this doesn't have full functionality as the afx version!\n *\n * @module js/splmStatsDOMProcessor\n */\nimport splmStatsUtils from 'js/splmStatsUtils';\n/**\n * Instances of this class represent a profiler for DOM Information\n *\n * @class SPLMStatsDomProcessor\n */\n\nfunction SPLMStatsDomProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  /**\n   * calculating Processing Time\n   */\n\n  function calculateProcessingTime() {\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  }\n\n  self.start = function () {\n    calculateProcessingTime();\n  };\n\n  self.stop = function () {\n    calculateProcessingTime();\n  };\n  /**\n   * @returns {Object} DOM Object contains element count on page, DOM Tree Depth, and # of costly widgets on page\n   * Definition of costly: N >= 6 depth OR N >= 50 watchers on the DOM structure ( element and children )\n   */\n\n\n  self.getMetrics = function () {\n    return {\n      DOM: {\n        elemCount: splmStatsUtils.getDomElementsCount(),\n        DOMTreeDepth: splmStatsUtils.getDomTreeDepth(document, 0)\n        /*\n        DOMCostlyWidgets: splmStatsUtils.getCostlyWidgets()\n        */\n\n      }\n    };\n  };\n  /**\n   * @returns {Object} Total processing time for DOM Metrics\n   */\n\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      DOMProcessorOverhead: _time\n    };\n  };\n\n  return self;\n}\n\n_c = SPLMStatsDomProcessor;\nexport default SPLMStatsDomProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsDomProcessor\");","map":{"version":3,"names":["splmStatsUtils","SPLMStatsDomProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","calculateProcessingTime","window","performance","now","start","stop","getMetrics","DOM","elemCount","getDomElementsCount","DOMTreeDepth","getDomTreeDepth","document","getProcessingTime","_time","DOMProcessorOverhead"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsDOMProcessor.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Dom Processor - Provides performance metrics in relation to the DOM\n * NOTE: this doesn't have full functionality as the afx version!\n *\n * @module js/splmStatsDOMProcessor\n */\nimport splmStatsUtils from 'js/splmStatsUtils';\n\n/**\n * Instances of this class represent a profiler for DOM Information\n *\n * @class SPLMStatsDomProcessor\n */\nfunction SPLMStatsDomProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n\n    let _startProcessorTime = 0;\n\n    let _endProcessorTime = 0;\n    /**\n     * calculating Processing Time\n     */\n    function calculateProcessingTime() {\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    }\n\n    self.start = function() {\n        calculateProcessingTime();\n    };\n    self.stop = function() {\n        calculateProcessingTime();\n    };\n\n    /**\n     * @returns {Object} DOM Object contains element count on page, DOM Tree Depth, and # of costly widgets on page\n     * Definition of costly: N >= 6 depth OR N >= 50 watchers on the DOM structure ( element and children )\n     */\n    self.getMetrics = function() {\n        return {\n            DOM: {\n                elemCount: splmStatsUtils.getDomElementsCount(),\n                DOMTreeDepth: splmStatsUtils.getDomTreeDepth( document, 0 )\n                /*\n                DOMCostlyWidgets: splmStatsUtils.getCostlyWidgets()\n                */\n            }\n        };\n    };\n\n    /**\n     * @returns {Object} Total processing time for DOM Metrics\n     */\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { DOMProcessorOverhead: _time };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsDomProcessor;\n"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,cAAP,MAA2B,mBAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,GAAiC;EAC7B,IAAIC,IAAI,GAAG,IAAX;EAEA,IAAIC,eAAe,GAAG,CAAtB;EAEA,IAAIC,mBAAmB,GAAG,CAA1B;EAEA,IAAIC,iBAAiB,GAAG,CAAxB;EACA;AACJ;AACA;;EACI,SAASC,uBAAT,GAAmC;IAC/BF,mBAAmB,GAAGG,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IACAJ,iBAAiB,GAAGE,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACAN,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH;;EAEDF,IAAI,CAACQ,KAAL,GAAa,YAAW;IACpBJ,uBAAuB;EAC1B,CAFD;;EAGAJ,IAAI,CAACS,IAAL,GAAY,YAAW;IACnBL,uBAAuB;EAC1B,CAFD;EAIA;AACJ;AACA;AACA;;;EACIJ,IAAI,CAACU,UAAL,GAAkB,YAAW;IACzB,OAAO;MACHC,GAAG,EAAE;QACDC,SAAS,EAAEd,cAAc,CAACe,mBAAf,EADV;QAEDC,YAAY,EAAEhB,cAAc,CAACiB,eAAf,CAAgCC,QAAhC,EAA0C,CAA1C;QACd;AAChB;AACA;;MALiB;IADF,CAAP;EASH,CAVD;EAYA;AACJ;AACA;;;EACIhB,IAAI,CAACiB,iBAAL,GAAyB,YAAW;IAChC,MAAMC,KAAK,GAAGjB,eAAd;IACAA,eAAe,GAAG,CAAlB;IACA,OAAO;MAAEkB,oBAAoB,EAAED;IAAxB,CAAP;EACH,CAJD;;EAMA,OAAOlB,IAAP;AACH;;KAlDQD,qB;AAoDT,eAAeA,qBAAf"},"metadata":{},"sourceType":"module"}
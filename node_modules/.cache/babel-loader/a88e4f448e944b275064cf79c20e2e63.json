{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/states\n */\nimport loadable from '@loadable/component';\nimport _ from 'lodash';\nimport { getResolvedActions } from 'js/stateResolveService';\nimport cfgSvc from 'js/configurationService';\nimport { loadDynModule, afxDynamicImport, includeComponent } from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nimport AwStateService from 'js/awStateService';\nlet routes = [];\n\nconst mapStatesToRoutes = states => _.forEach(states, (state, name) => routes.push(buildStates(state, name)));\n\nconst doLazyLoad = componentName => {\n  if (componentName === 'AwDefaultSublocation') {\n    // to use AwDefaultSublocation from states.json needs to pass subpanel context\n    return props => {\n      const stateData = AwStateService.instance.current.data; //Ui router sets the parent data in the prototype of child\n      //get the parent state data and pass it to the component\n\n      const parentData = Object.getPrototypeOf(stateData); //current state data should always take precedence over parent\n\n      return includeComponent(componentName, {\n        subPanelContext: { ...props.subPanelContext,\n          ...parentData,\n          ...stateData\n        }\n      });\n    };\n  }\n\n  return loadable(() => loadDynModule(`viewmodel/${componentName}ViewModel`));\n};\n\nconst buildStates = (state, name) => {\n  return { ...(state.url && {\n      url: state.url\n    }),\n    name: name,\n    ...(state.parent && {\n      parent: state.parent\n    }),\n    ...(state.params && {\n      params: state.params\n    }),\n    ...(state.data && {\n      data: state.data\n    }),\n    ...(state.visibleWhen && {\n      visibleWhen: state.visibleWhen\n    }),\n    resolve: getResolvedActions(state),\n    ...(state.noAuth && {\n      noAuth: state.noAuth\n    }),\n    ...(state.view && {\n      component: doLazyLoad(state.view)\n    }),\n    reloadOnSearch: state.hasOwnProperty('reloadOnSearch') ? state.reloadOnSearch : false,\n    dynamic: state.dynamic,\n    refresh: state.refresh,\n    notify: state.notify\n  };\n};\n\nexport const buildAndGetAllStates = contributionStates => {\n  var statesCfg = cfgSvc.getCfgCached('states');\n\n  var mergedRoutes = _.merge.apply(this, [statesCfg].concat(contributionStates)); // eslint-disable-line no-invalid-this\n  // Global parameters that apply to every route\n\n\n  var globalParameters = ['ah', // hosting enablement\n  'debugApp', // debug\n  'locale', // locale override\n  'logActionActivity', 'logEventBusActivity', 'logLevel', 'logLifeCycle']; // Parameters that should not be in the URL (runtime only)\n\n  var nonUrlParameters = ['validateDefaultRoutePath' // workspace validation\n  ];\n  /**\n   * Async load dependency for given state object.\n   *\n   * @param {Object} state - Object who's dependencies to load.\n   *\n   * @returns {Promise} Resolved when the dependencies are loaded.\n   */\n\n  function createLoad(state) {\n    return AwPromiseService.instance(resolve => {\n      return afxDynamicImport(state.dependencies, resolve);\n    });\n  }\n  /**\n   * Update given object with global parameters.\n   *\n   * @param {Object} state - Object to update.\n   */\n\n\n  function updateWithParameters(state) {\n    var params = globalParameters.slice(); // copy globalParameters\n\n    if (state.params) {\n      params = _.union(params, Object.keys(state.params));\n    }\n\n    if (state.parent) {\n      var parent = mergedRoutes[state.parent];\n\n      if (parent && parent.params) {\n        params = _.union(params, Object.keys(parent.params));\n      }\n    }\n\n    var urlParams = params.filter(function (p) {\n      return nonUrlParameters.indexOf(p) === -1;\n    });\n\n    if (urlParams.length > 0) {\n      var haveQueryParam = state.url.indexOf('?') !== -1;\n      state.url += (haveQueryParam ? '&' : '?') + urlParams.join('&');\n    }\n  }\n\n  _.forEach(mergedRoutes, function (route) {\n    // in angular dependencies was getting used for load the controller\n    // it's not needed\n    // if( route.dependencies ) {\n    // if( route.resolve ) {\n    //     route.resolve.push( {\n    //         token: 'load',\n    //         resolveFn: () => { createLoad( route ); }\n    //     } );\n    // } else {\n    //     route.resolve = [ {\n    //         token: 'load',\n    //         resolveFn: () => { createLoad( route ); }\n    //     } ];\n    // }\n    // }\n    if (route.url && !route.abstract) {\n      updateWithParameters(route);\n    }\n  });\n\n  mapStatesToRoutes(mergedRoutes);\n  return routes;\n};\nexport default {\n  buildAndGetAllStates\n};","map":{"version":3,"names":["loadable","_","getResolvedActions","cfgSvc","loadDynModule","afxDynamicImport","includeComponent","AwPromiseService","AwStateService","routes","mapStatesToRoutes","states","forEach","state","name","push","buildStates","doLazyLoad","componentName","props","stateData","instance","current","data","parentData","Object","getPrototypeOf","subPanelContext","url","parent","params","visibleWhen","resolve","noAuth","view","component","reloadOnSearch","hasOwnProperty","dynamic","refresh","notify","buildAndGetAllStates","contributionStates","statesCfg","getCfgCached","mergedRoutes","merge","apply","concat","globalParameters","nonUrlParameters","createLoad","dependencies","updateWithParameters","slice","union","keys","urlParams","filter","p","indexOf","length","haveQueryParam","join","route","abstract"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/config/src/js/states.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/states\n */\nimport loadable from '@loadable/component';\nimport _ from 'lodash';\nimport { getResolvedActions } from 'js/stateResolveService';\nimport cfgSvc from 'js/configurationService';\nimport { loadDynModule, afxDynamicImport, includeComponent } from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nimport AwStateService from 'js/awStateService';\nlet routes = [];\n\nconst mapStatesToRoutes = ( states ) =>\n    _.forEach( states, ( state, name ) => routes.push( buildStates( state, name ) ) );\n\nconst doLazyLoad = componentName => {\n    if( componentName === 'AwDefaultSublocation' ) {\n        // to use AwDefaultSublocation from states.json needs to pass subpanel context\n        return ( props ) => {\n            const stateData = AwStateService.instance.current.data;\n            //Ui router sets the parent data in the prototype of child\n            //get the parent state data and pass it to the component\n            const parentData = Object.getPrototypeOf( stateData );\n            //current state data should always take precedence over parent\n            return includeComponent( componentName, { subPanelContext: { ...props.subPanelContext, ...parentData, ...stateData } } );\n        };\n    }\n    return loadable( () => loadDynModule( `viewmodel/${componentName}ViewModel` ) );\n};\n\nconst buildStates = ( state, name ) => {\n    return {\n        ...state.url && { url: state.url },\n        name: name,\n        ...state.parent && { parent: state.parent },\n        ...state.params && { params: state.params },\n        ...state.data && { data: state.data },\n        ...state.visibleWhen && { visibleWhen: state.visibleWhen },\n        resolve: getResolvedActions( state ),\n        ...state.noAuth && { noAuth: state.noAuth },\n        ...state.view && { component: doLazyLoad( state.view ) },\n        reloadOnSearch: state.hasOwnProperty( 'reloadOnSearch' ) ? state.reloadOnSearch : false,\n        dynamic: state.dynamic,\n        refresh: state.refresh,\n        notify: state.notify\n    };\n};\n\nexport const buildAndGetAllStates = ( contributionStates ) => {\n    var statesCfg = cfgSvc.getCfgCached( 'states' );\n    var mergedRoutes = _.merge.apply( this, [ statesCfg ].concat( contributionStates ) ); // eslint-disable-line no-invalid-this\n\n    // Global parameters that apply to every route\n    var globalParameters = [\n        'ah', // hosting enablement\n        'debugApp', // debug\n        'locale', // locale override\n        'logActionActivity',\n        'logEventBusActivity',\n        'logLevel',\n        'logLifeCycle'\n    ];\n\n    // Parameters that should not be in the URL (runtime only)\n    var nonUrlParameters = [\n        'validateDefaultRoutePath' // workspace validation\n    ];\n\n    /**\n     * Async load dependency for given state object.\n     *\n     * @param {Object} state - Object who's dependencies to load.\n     *\n     * @returns {Promise} Resolved when the dependencies are loaded.\n     */\n    function createLoad( state ) {\n        return AwPromiseService.instance( ( resolve ) => {\n            return afxDynamicImport( state.dependencies, resolve );\n        } );\n    }\n\n    /**\n     * Update given object with global parameters.\n     *\n     * @param {Object} state - Object to update.\n     */\n    function updateWithParameters( state ) {\n        var params = globalParameters.slice(); // copy globalParameters\n\n        if( state.params ) {\n            params = _.union( params, Object.keys( state.params ) );\n        }\n\n        if( state.parent ) {\n            var parent = mergedRoutes[ state.parent ];\n            if( parent && parent.params ) {\n                params = _.union( params, Object.keys( parent.params ) );\n            }\n        }\n\n        var urlParams = params.filter( function( p ) {\n            return nonUrlParameters.indexOf( p ) === -1;\n        } );\n\n        if( urlParams.length > 0 ) {\n            var haveQueryParam = state.url.indexOf( '?' ) !== -1;\n            state.url += ( haveQueryParam ? '&' : '?' ) + urlParams.join( '&' );\n        }\n    }\n\n    _.forEach( mergedRoutes, function( route ) {\n        // in angular dependencies was getting used for load the controller\n        // it's not needed\n\n        // if( route.dependencies ) {\n        // if( route.resolve ) {\n        //     route.resolve.push( {\n        //         token: 'load',\n        //         resolveFn: () => { createLoad( route ); }\n        //     } );\n        // } else {\n        //     route.resolve = [ {\n        //         token: 'load',\n        //         resolveFn: () => { createLoad( route ); }\n        //     } ];\n        // }\n        // }\n\n        if( route.url && !route.abstract ) {\n            updateWithParameters( route );\n        }\n    } );\n\n    mapStatesToRoutes( mergedRoutes );\n\n    return routes;\n};\nexport default {\n    buildAndGetAllStates\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
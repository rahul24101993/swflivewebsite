{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/awDuiLocalizationService\n */import AwPromiseService from'js/awPromiseService';import localeSvc from'js/localeService';import _ from'lodash';import eventBus from'js/eventBus';/**\n * Cached reference to the angular $q or promise service\n *\n * @private\n */ /**\n * cached reference to the _locale service\n *\n * @private\n */ /**\n * cached reference to the processed i18n map\n *\n * @private\n */var _cachedI18nMap={};var exports={};/**\n * When notified that the i18n has changed clear out the cache.\n *\n * This will make any following calls to the i18n provider call the configuration service again\n */eventBus.subscribe('configurationChange.i18n',function(){_cachedI18nMap={};});/**\n * A helper method to attach a then(...) to provided promise\n *\n * @param {Object} i18n - The object holding i18n key object map\n * @param {String} key - The key into key map\n * @param {Promise} promise - AngularJS promise object\n */var then=function(i18n,key,promise){promise.then(function(localizedText){i18n[key]=localizedText;});};/**\n * Get a localized text for provided text from provided bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String} bundle - Bundle to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */var getLocalizedTextFromOneBundle=function(englishText,bundle,useNative){return localeSvc.getLocalizedText(bundle,englishText,useNative);};/**\n * Populate I18n map.\n *\n * @param {Object} i18nObjects - I18n data from ViewModel json\n * @param {String} cacheI18nKey - (Optional) Key value which refers to processed i18n in cached i18n Map.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} an angular promise\n */export let populateI18nMap=function(i18nObjects,cacheI18nKey,useNative){let PromiseObj=useNative?Promise:AwPromiseService.instance;if(!i18nObjects){PromiseObj.resolve();}var i18n={};var allPromises=[];return new PromiseObj((resolve,reject)=>{/**\n         * Only cache processed i18n, when there is a cacheI18nKey defined\n         */if(cacheI18nKey&&_.isString(cacheI18nKey)){if(!_cachedI18nMap[cacheI18nKey]){for(var key2 in i18nObjects){var promise2=getLocalizedText(key2,i18nObjects[key2],useNative);then(i18n,key2,promise2);allPromises.push(promise2);}PromiseObj.all(allPromises).then(function(){_cachedI18nMap[cacheI18nKey]=i18n;resolve(i18n);});}else{resolve(_cachedI18nMap[cacheI18nKey]);}}else{for(var key in i18nObjects){var promise=getLocalizedText(key,i18nObjects[key],useNative);then(i18n,key,promise);allPromises.push(promise);}PromiseObj.all(allPromises).then(function(){resolve(i18n);});}});};/**\n * Get a localized text for provided text from provided bundles, recursively if not found in previous bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} promise with localizedText\n */var getLocalizedTextFormBundlesRecursively=function(englishText,bundles,useNative){let PromiseObj=useNative?Promise:AwPromiseService.instance;if(bundles.length===0){return PromiseObj.resolve();}return getLocalizedTextFromOneBundle(englishText,bundles.shift(),useNative).then(function(localizedText){if(localizedText!==undefined){return localizedText;}return getLocalizedTextFormBundlesRecursively(englishText,bundles,useNative);});};/**\n * Get a localized text for provided text from provided bundles\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */var getLocalizedText=function(englishText,bundles,useNative){let PromiseObj=useNative?Promise:AwPromiseService.instance;if(_.isArray(bundles)){return getLocalizedTextFormBundlesRecursively(englishText,bundles.slice(0),useNative);}// to support inline localization text\nreturn PromiseObj.resolve(bundles);};exports={populateI18nMap};export default exports;","map":null,"metadata":{},"sourceType":"module"}
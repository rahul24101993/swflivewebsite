{"ast":null,"code":"// Copyright (c) 2022 Siemens\n\n/**\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/dataManagementService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport cdm from './kernel/clientDataModel';\nimport propPolicySvc from './kernel/propertyPolicyService';\nimport soaSvc from './kernel/soaService';\nimport prefSvc from './preferenceService';\nimport dateTimeSvc from '../dateTimeService';\nimport localeSvc from '../localeService';\nimport _ from 'lodash';\nimport assert from '../assert';\nimport eventBus from '../eventBus'; // Object to track which uids are currently being loaded such that loadObjects is not duplicated for the same uid\n\nlet _uidLoadInProgress = {};\nvar exports = {};\n/**\n * Create objects\n *\n * @param {ObjectArray} input - array of 'createObjects' input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createObjects = function (input) {\n  return soaSvc.post('Core-2008-06-DataManagement', 'createObjects', {\n    input: input\n  });\n};\n/**\n * Create Relation and Submit objects.\n *\n * @param {ObjectArray} inputs - array of create & submit object input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createRelateAndSubmitObjects = function (inputs) {\n  return soaSvc.post('Internal-Core-2012-10-DataManagement', 'createRelateAndSubmitObjects', {\n    inputs: inputs\n  });\n};\n/**\n * Create relations.\n *\n * @param {ObjectArray} inputs - array of create relation input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createRelations = function (inputs) {\n  return soaSvc.post('Core-2006-03-DataManagement', 'createRelations', {\n    input: inputs\n  });\n};\n/**\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getCurrentUserGateway = function () {\n  return soaSvc.post('Internal-AWS2-2012-10-DataManagement', 'getCurrentUserGateway', {});\n};\n/**\n * @param {String} typeName - type name\n * @param {String} propName - property name\n * @param {String} pattern - pattern\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getNextId = function (typeName, propName, pattern) {\n  return exports.getNextIds([{\n    typeName: typeName,\n    propName: propName,\n    pattern: pattern ? pattern : ''\n  }]);\n};\n/**\n * @param {Array} vInfoForNextId - array of type name, property name & pattern objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getNextIds = function (vInfoForNextId) {\n  return soaSvc.post('Core-2008-06-DataManagement', 'getNextIds', {\n    vInfoForNextId: vInfoForNextId\n  });\n};\n/**\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getTCSessionInfo = function (ignoreHost) {\n  return soaSvc.getTCSessionInfo(ignoreHost).then(function (response) {\n    if (response && response.extraInfoOut) {\n      // Capture the data time format from the server\n      var userSession = cdm.getUserSession();\n\n      var locale = _.get(userSession, 'props.fnd0locale.dbValues.0');\n\n      if (locale) {\n        locale = localeSvc.setLocale(locale);\n      }\n\n      if (response.extraInfoOut.DefaultDateFormat) {\n        dateTimeSvc.setSessionDateTimeFormat(response.extraInfoOut.DefaultDateFormat);\n      }\n\n      if (eventBus) {\n        eventBus.publish('sessionInfo.updated', response.extraInfoOut);\n      } // Preferences\n\n\n      var prefNames = [];\n\n      if (response.extraInfoOut.AWC_StartupPreferences) {\n        // The server should tell us what preferences we need to bulk cache upon login. This avoids unnecessary\n        // client-server chats.\n        prefNames = prefNames.concat(response.extraInfoOut.AWC_StartupPreferences.split(','));\n      }\n\n      return prefSvc.getMultiStringValues(prefNames, true).then(function () {\n        return response;\n      });\n    } // This should happen but should do it anyway to ensure serial processing.\n\n\n    return response;\n  });\n};\n/**\n * @param {Object} input - Array e.g. { inputData: [ { clientId: '', parentObj: { uid: 'QteVoUbsqd$DyB', type:\n *            'Awp0TileCollection' }, childrenObj: [ { uid: 'QzaVoUbsqd$DyB', type: 'Awp0Tile' } ], propertyName:\n *            'Awp0GatewayTileRel' } ]}\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let removeChildren = function (input) {\n  return soaSvc.post('Core-2014-10-DataManagement', 'removeChildren', {\n    inputData: input\n  });\n};\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let saveEdit = function (inputs) {\n  return soaSvc.post('Internal-AWS2-2012-10-DataManagement', 'saveEdit', {\n    inputs: inputs\n  });\n};\n/**\n * @param {Array} info - array of set property info objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let setProperties = function (info) {\n  return soaSvc.post('Core-2010-09-DataManagement', 'setProperties', {\n    info: info,\n    options: []\n  });\n};\n/**\n * @param {StringArray} uids - array of model object UIDs to load\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let loadObjects = async function (uids) {\n  var missingUids = [];\n\n  _.forEach(uids, function (uid) {\n    var modelObject = cdm.getObject(uid);\n\n    if (!modelObject || _.isEmpty(modelObject.props)) {\n      missingUids.push(uid);\n    }\n  });\n\n  if (missingUids.length > 0) {\n    const uidsToLoad = missingUids.filter(uid => {\n      if (!_uidLoadInProgress[uid]) {\n        return uid;\n      }\n    });\n    const currentUidsBeingLoadedPromises = missingUids.filter(uid => !uidsToLoad.includes(uid)).map(uid => {\n      if (_uidLoadInProgress[uid]) {\n        return _uidLoadInProgress[uid];\n      }\n    });\n    const newLoadPromises = [];\n\n    if (uidsToLoad.length > 0) {\n      const loadObjectsPromise = soaSvc.post('Core-2007-09-DataManagement', 'loadObjects', {\n        uids: uidsToLoad\n      });\n\n      for (const uid of uidsToLoad) {\n        _uidLoadInProgress[uid] = loadObjectsPromise;\n      }\n\n      newLoadPromises.push(loadObjectsPromise);\n    }\n\n    await Promise.all([...currentUidsBeingLoadedPromises, ...newLoadPromises]);\n\n    for (const uid of uidsToLoad) {\n      delete _uidLoadInProgress[uid];\n    }\n  } // no op\n\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * @param {ModelObject} target -\n *\n * @param {String} pasteProp - Relation type\n *\n * @param {String} typeName -\n *\n * @param {String} itemName -\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let createItem = function (target, pasteProp, typeName, itemName) {\n  var propName = 'item_id';\n  var revisionTypeName = typeName + 'Revision';\n  var revisionPropName = 'item_revision_id';\n  var itemRevision = {};\n  return exports.getNextIds([{\n    typeName: typeName,\n    propName: propName\n  }, {\n    typeName: revisionTypeName,\n    propName: revisionPropName\n  }]).then(function (response) {\n    return exports.createRelateAndSubmitObjects([{\n      createData: {\n        boName: typeName,\n        propertyNameValues: {\n          item_id: [response.nextIds[0]],\n          object_name: [itemName]\n        },\n        compoundCreateInput: {\n          revision: [{\n            boName: revisionTypeName,\n            propertyNameValues: {\n              item_revision_id: [response.nextIds[1]]\n            },\n            compoundCreateInput: {}\n          }]\n        }\n      }\n    }]);\n  }).then(function (response) {\n    itemRevision = cdm.getObject(response.output[0].objects[2].uid);\n    return exports.createRelations([{\n      relationType: pasteProp,\n      primaryObject: target,\n      secondaryObject: itemRevision\n    }]);\n  }).then(function () {\n    return itemRevision;\n  });\n};\n/**\n * Cache of promises for getProperties to \"reuse\" if the same request comes in before the first response has\n * completed.\n *\n * @private\n */\n\nvar _getPropertiesPromises = [];\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {StringArray} uids - array of model object UIDs\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getProperties = function (uids, propNames) {\n  var objects = [];\n  uids.sort();\n\n  _.forEach(_.uniq(uids, true), function (uid) {\n    var modelObject = cdm.getObject(uid);\n\n    if (modelObject) {\n      var modelObjAdded = false; // Cached model object\n\n      _.forEach(propNames, function (propName) {\n        if (modelObject.modelType.propertyDescriptorsMap.hasOwnProperty(propName) && (!modelObject.props || !modelObject.props.hasOwnProperty(propName))) {\n          if (!modelObjAdded) {\n            // Valid property for this model type AND property not cached\n            objects.push(modelObject);\n            modelObjAdded = true;\n          }\n        }\n      });\n    }\n  });\n\n  if (objects.length > 0) {\n    propPolicySvc.validatePropertyRegistration(objects, propNames);\n    return exports.getPropertiesUnchecked(objects, propNames);\n  }\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {ObjectArray} objects - array of model objects\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getPropertiesUnchecked = function (objects, propNames) {\n  var input = {\n    objects: objects,\n    attributes: propNames\n  };\n  var promise = null;\n\n  _.forEach(_getPropertiesPromises, function (promiseLp) {\n    if (!promise && _.isEqual(input.attributes, promiseLp.input.attributes)) {\n      if (objects.length === promiseLp.input.objects.length) {\n        promise = promiseLp; // assume a match\n\n        for (var ii = 0; ii < objects.length; ii++) {\n          if (objects[ii].uid !== promiseLp.input.objects[ii].uid) {\n            promise = null; // invalid assumption\n\n            break;\n          }\n        }\n      }\n    }\n  });\n\n  if (!promise) {\n    promise = soaSvc.post('Core-2006-03-DataManagement', 'getProperties', input).then(function (response) {\n      _getPropertiesPromises.splice(_getPropertiesPromises.indexOf(promise), 1);\n\n      return response;\n    });\n\n    _getPropertiesPromises.push(promise);\n\n    promise.input = input;\n  }\n\n  return promise;\n};\n/**\n * Convenience method for 'core' {@linkcode module:soa/dataManagementService.getStyleSheet|getStyleSheet} to handle\n * default values used in that service's request.\n *\n * @param {ModelObject} modelObject - The soa object to get the stylesheet for.\n * @param {String} styleSheetType - (Optional) The type of style sheet to return (Default: 'SUMMARY').\n * @param {Object} clientContext - (Optional) (Default: {'ActiveWorkspace:Location':\n *            'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'})\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let getStyleSheet = function (modelObject, styleSheetType, clientContext) {\n  assert(modelObject, 'getStyleSheet: No ModelObject specified');\n  var styleSheetTypeFinal = styleSheetType;\n  var clientContextFinal = clientContext;\n\n  if (!styleSheetTypeFinal) {\n    styleSheetTypeFinal = 'SUMMARY';\n  }\n\n  if (!clientContextFinal) {\n    clientContextFinal = {\n      'ActiveWorkspace:Location': 'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'\n    };\n  }\n\n  return soaSvc.post('Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', {\n    processEntireXRT: false,\n    input: [{\n      businessObject: modelObject,\n      styleSheetType: styleSheetTypeFinal,\n      clientContext: clientContextFinal\n    }]\n  });\n};\n/**\n * Post the input directly to getStyleSheet\n *\n * @param {Integer} input - The json request object. All necessary fields should already be filled\n *\n * @returns {Promise} Resolved when the style sheet information is returned from the SOA service.\n */\n\nexport let getStyleSheetPure = function (input) {\n  return soaSvc.post('Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', input);\n};\n/**\n * This function is used to create input structure for the loadViewModelForEditing SOA call. Consumer need to call\n * this function in loop for each ViewModelObject keeping the same input object.\n *\n * @param {Object} input - Structure containing the viewModelObj and its property names\n * @param {String} uid - ID of the model object that owns the properties\n * @param {StringArray} propertyNames - Props which we need to check the modifiable status\n *\n * @returns {Object} Input structure details.\n */\n\nexport let getLoadViewModelForEditingInput = function (input, uid, propertyNames) {\n  var modelObj = cdm.getObject(uid);\n\n  if (!input) {\n    input = {\n      inputs: []\n    };\n  }\n\n  var objs = [];\n  objs.push(modelObj);\n  input.inputs.push({\n    objs: objs,\n    propertyNames: propertyNames,\n    isPessimisticLock: false\n  });\n  return input;\n};\n/**\n * @param {Object} inputs - payload to the soa call.\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let loadViewModelForEditing2 = function (inputs) {\n  var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy(null, true);\n  return soaSvc.postUnchecked('Internal-AWS2-2017-12-DataManagement', 'loadViewModelForEditing2', {\n    inputs: inputs\n  }, selectedPropertyPolicy);\n};\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let saveViewModelEditAndSubmitWorkflow = function (inputs) {\n  var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy(null, true);\n  return soaSvc.postUnchecked('Internal-AWS2-2018-05-DataManagement', 'saveViewModelEditAndSubmitWorkflow2', {\n    inputs: inputs\n  }, selectedPropertyPolicy);\n};\n/**\n * This function is used to create the input data for saveViewModelEditAndSubmitWorkflow SOA. This SOA requires the\n * view Model properties which are modified and need to update in DB\n *\n * @param {Object} input - Structure containing the viewModelObj\n * @param {Object} viewModelProperty - viewModel prop object whose value has changed and need to commit.\n *\n */\n\nexport let pushViewModelProperty = function (input, viewModelProperty) {\n  if (!input.viewModelProperties) {\n    input.viewModelProperties = [];\n  }\n\n  var dbValues = [];\n  var uiValues = [];\n\n  if (viewModelProperty.isArray) {\n    dbValues = viewModelProperty.dbValue;\n    uiValues = viewModelProperty.newValue;\n  } else {\n    dbValues.push(viewModelProperty.dbValue);\n    uiValues.push(viewModelProperty.newValue);\n  } // Replace all the null values with empty string\n\n\n  for (var i = 0; i < dbValues.length; i++) {\n    if (viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY') {\n      dbValues[i] = dateTimeSvc.formatUTC(dbValues[i]);\n    } else {\n      dbValues[i] = dbValues[i] === null ? '' : String(dbValues[i]);\n    }\n  } // Replace all the null values with empty string\n\n\n  for (i = 0; i < uiValues.length; i++) {\n    if (viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY') {\n      uiValues[i] = dateTimeSvc.formatUTC(uiValues[i]);\n    } else {\n      uiValues[i] = uiValues[i] === null ? '' : String(uiValues[i]);\n    }\n  }\n\n  var vmProp = {\n    propertyName: viewModelProperty.propertyName,\n    dbValues: dbValues,\n    uiValues: uiValues,\n    intermediateObjectUids: viewModelProperty.intermediateObjectUids,\n    srcObjLsd: viewModelProperty.sourceObjectLastSavedDate,\n    isModifiable: viewModelProperty.isPropertyModifiable\n  };\n  input.viewModelProperties.push(vmProp);\n};\n/**\n * This utility function is used create the input pay load for SaveViewModelEditAndSubmitToWorkflowInput SAO.\n *\n * @param {Object} viewModelObject - viewModelObj whose properties has been modified.\n * @returns {Object} structure containing the modified viewModelobject.\n */\n\nexport let getSaveViewModelEditAndSubmitToWorkflowInput = function (viewModelObject) {\n  return {\n    obj: viewModelObject\n  };\n};\nexports = {\n  createObjects,\n  createRelateAndSubmitObjects,\n  createRelations,\n  getCurrentUserGateway,\n  getNextId,\n  getNextIds,\n  getTCSessionInfo,\n  removeChildren,\n  saveEdit,\n  setProperties,\n  loadObjects,\n  createItem,\n  getProperties,\n  getPropertiesUnchecked,\n  getStyleSheet,\n  getStyleSheetPure,\n  getLoadViewModelForEditingInput,\n  loadViewModelForEditing2,\n  saveViewModelEditAndSubmitWorkflow,\n  pushViewModelProperty,\n  getSaveViewModelEditAndSubmitToWorkflowInput\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","cdm","propPolicySvc","soaSvc","prefSvc","dateTimeSvc","localeSvc","_","assert","eventBus","_uidLoadInProgress","exports","createObjects","input","post","createRelateAndSubmitObjects","inputs","createRelations","getCurrentUserGateway","getNextId","typeName","propName","pattern","getNextIds","vInfoForNextId","getTCSessionInfo","ignoreHost","then","response","extraInfoOut","userSession","getUserSession","locale","get","setLocale","DefaultDateFormat","setSessionDateTimeFormat","publish","prefNames","AWC_StartupPreferences","concat","split","getMultiStringValues","removeChildren","inputData","saveEdit","setProperties","info","options","loadObjects","uids","missingUids","forEach","uid","modelObject","getObject","isEmpty","props","push","length","uidsToLoad","filter","currentUidsBeingLoadedPromises","includes","map","newLoadPromises","loadObjectsPromise","Promise","all","instance","resolve","createItem","target","pasteProp","itemName","revisionTypeName","revisionPropName","itemRevision","createData","boName","propertyNameValues","item_id","nextIds","object_name","compoundCreateInput","revision","item_revision_id","output","objects","relationType","primaryObject","secondaryObject","_getPropertiesPromises","getProperties","propNames","sort","uniq","modelObjAdded","modelType","propertyDescriptorsMap","hasOwnProperty","validatePropertyRegistration","getPropertiesUnchecked","attributes","promise","promiseLp","isEqual","ii","splice","indexOf","getStyleSheet","styleSheetType","clientContext","styleSheetTypeFinal","clientContextFinal","processEntireXRT","businessObject","getStyleSheetPure","getLoadViewModelForEditingInput","propertyNames","modelObj","objs","isPessimisticLock","loadViewModelForEditing2","selectedPropertyPolicy","getEffectivePolicy","postUnchecked","saveViewModelEditAndSubmitWorkflow","pushViewModelProperty","viewModelProperty","viewModelProperties","dbValues","uiValues","isArray","dbValue","newValue","i","type","formatUTC","String","vmProp","propertyName","intermediateObjectUids","srcObjLsd","sourceObjectLastSavedDate","isModifiable","isPropertyModifiable","getSaveViewModelEditAndSubmitToWorkflowInput","viewModelObject","obj"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/dataManagementService.js"],"sourcesContent":["// Copyright (c) 2022 Siemens\n\n/**\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/dataManagementService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport cdm from './kernel/clientDataModel';\nimport propPolicySvc from './kernel/propertyPolicyService';\nimport soaSvc from './kernel/soaService';\nimport prefSvc from './preferenceService';\nimport dateTimeSvc from '../dateTimeService';\nimport localeSvc from '../localeService';\nimport _ from 'lodash';\nimport assert from '../assert';\nimport eventBus from '../eventBus';\n\n// Object to track which uids are currently being loaded such that loadObjects is not duplicated for the same uid\nlet _uidLoadInProgress = {};\n\nvar exports = {};\n\n/**\n * Create objects\n *\n * @param {ObjectArray} input - array of 'createObjects' input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createObjects = function( input ) {\n    return soaSvc.post( 'Core-2008-06-DataManagement', 'createObjects', {\n        input: input\n    } );\n};\n\n/**\n * Create Relation and Submit objects.\n *\n * @param {ObjectArray} inputs - array of create & submit object input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createRelateAndSubmitObjects = function( inputs ) {\n    return soaSvc.post( 'Internal-Core-2012-10-DataManagement', 'createRelateAndSubmitObjects', {\n        inputs: inputs\n    } );\n};\n\n/**\n * Create relations.\n *\n * @param {ObjectArray} inputs - array of create relation input\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createRelations = function( inputs ) {\n    return soaSvc.post( 'Core-2006-03-DataManagement', 'createRelations', {\n        input: inputs\n    } );\n};\n\n/**\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getCurrentUserGateway = function() {\n    return soaSvc.post( 'Internal-AWS2-2012-10-DataManagement', 'getCurrentUserGateway', {} );\n};\n\n/**\n * @param {String} typeName - type name\n * @param {String} propName - property name\n * @param {String} pattern - pattern\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getNextId = function( typeName, propName, pattern ) {\n    return exports.getNextIds( [ {\n        typeName: typeName,\n        propName: propName,\n        pattern: pattern ? pattern : ''\n    } ] );\n};\n\n/**\n * @param {Array} vInfoForNextId - array of type name, property name & pattern objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getNextIds = function( vInfoForNextId ) {\n    return soaSvc.post( 'Core-2008-06-DataManagement', 'getNextIds', {\n        vInfoForNextId: vInfoForNextId\n    } );\n};\n\n/**\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getTCSessionInfo = function( ignoreHost ) {\n    return soaSvc.getTCSessionInfo( ignoreHost ).then( function( response ) {\n        if( response && response.extraInfoOut ) {\n            // Capture the data time format from the server\n            var userSession = cdm.getUserSession();\n            var locale = _.get( userSession, 'props.fnd0locale.dbValues.0' );\n            if( locale ) {\n                locale = localeSvc.setLocale( locale );\n            }\n\n            if( response.extraInfoOut.DefaultDateFormat ) {\n                dateTimeSvc.setSessionDateTimeFormat( response.extraInfoOut.DefaultDateFormat );\n            }\n\n            if( eventBus ) {\n                eventBus.publish( 'sessionInfo.updated', response.extraInfoOut );\n            }\n\n            // Preferences\n            var prefNames = [];\n            if( response.extraInfoOut.AWC_StartupPreferences ) {\n                // The server should tell us what preferences we need to bulk cache upon login. This avoids unnecessary\n                // client-server chats.\n                prefNames = prefNames.concat( response.extraInfoOut.AWC_StartupPreferences.split( ',' ) );\n            }\n\n            return prefSvc.getMultiStringValues( prefNames, true ).then( function() {\n                return response;\n            } );\n        }\n        // This should happen but should do it anyway to ensure serial processing.\n        return response;\n    } );\n};\n\n/**\n * @param {Object} input - Array e.g. { inputData: [ { clientId: '', parentObj: { uid: 'QteVoUbsqd$DyB', type:\n *            'Awp0TileCollection' }, childrenObj: [ { uid: 'QzaVoUbsqd$DyB', type: 'Awp0Tile' } ], propertyName:\n *            'Awp0GatewayTileRel' } ]}\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let removeChildren = function( input ) {\n    return soaSvc.post( 'Core-2014-10-DataManagement', 'removeChildren', {\n        inputData: input\n    } );\n};\n\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let saveEdit = function( inputs ) {\n    return soaSvc.post( 'Internal-AWS2-2012-10-DataManagement', 'saveEdit', {\n        inputs: inputs\n    } );\n};\n\n/**\n * @param {Array} info - array of set property info objects\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let setProperties = function( info ) {\n    return soaSvc.post( 'Core-2010-09-DataManagement', 'setProperties', {\n        info: info,\n        options: []\n    } );\n};\n\n/**\n * @param {StringArray} uids - array of model object UIDs to load\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let loadObjects = async function( uids ) {\n    var missingUids = [];\n    _.forEach( uids, function( uid ) {\n        var modelObject = cdm.getObject( uid );\n        if( !modelObject || _.isEmpty( modelObject.props ) ) {\n            missingUids.push( uid );\n        }\n    } );\n\n    if( missingUids.length > 0 ) {\n        const uidsToLoad = missingUids.filter( uid => {\n            if( !_uidLoadInProgress[ uid ] ) {\n                return uid;\n            }\n        } );\n\n        const currentUidsBeingLoadedPromises = missingUids.filter( uid => !uidsToLoad.includes( uid ) ).map( uid => {\n            if( _uidLoadInProgress[ uid ] ) {\n                return _uidLoadInProgress[ uid ];\n            }\n        } );\n\n        const newLoadPromises = [];\n\n        if( uidsToLoad.length > 0 ) {\n            const loadObjectsPromise = soaSvc.post( 'Core-2007-09-DataManagement', 'loadObjects', {\n                uids: uidsToLoad\n            } );\n\n            for( const uid of uidsToLoad ) {\n                _uidLoadInProgress[ uid ] = loadObjectsPromise;\n            }\n\n            newLoadPromises.push( loadObjectsPromise );\n        }\n\n        await Promise.all( [ ...currentUidsBeingLoadedPromises, ...newLoadPromises ] );\n\n        for( const uid of uidsToLoad ) {\n            delete _uidLoadInProgress[ uid ];\n        }\n    }\n\n    // no op\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * @param {ModelObject} target -\n *\n * @param {String} pasteProp - Relation type\n *\n * @param {String} typeName -\n *\n * @param {String} itemName -\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let createItem = function( target, pasteProp, typeName, itemName ) {\n    var propName = 'item_id';\n    var revisionTypeName = typeName + 'Revision';\n    var revisionPropName = 'item_revision_id';\n    var itemRevision = {};\n\n    return exports.getNextIds( [ {\n        typeName: typeName,\n        propName: propName\n    }, {\n        typeName: revisionTypeName,\n        propName: revisionPropName\n    } ] ).then( function( response ) {\n        return exports.createRelateAndSubmitObjects( [ {\n            createData: {\n                boName: typeName,\n                propertyNameValues: {\n                    item_id: [ response.nextIds[ 0 ] ],\n                    object_name: [ itemName ]\n                },\n                compoundCreateInput: {\n                    revision: [ {\n                        boName: revisionTypeName,\n                        propertyNameValues: {\n                            item_revision_id: [ response.nextIds[ 1 ] ]\n                        },\n                        compoundCreateInput: {}\n                    } ]\n                }\n            }\n        } ] );\n    } ).then( function( response ) {\n        itemRevision = cdm.getObject( response.output[ 0 ].objects[ 2 ].uid );\n        return exports.createRelations( [ {\n            relationType: pasteProp,\n            primaryObject: target,\n            secondaryObject: itemRevision\n        } ] );\n    } ).then( function() {\n        return itemRevision;\n    } );\n};\n\n/**\n * Cache of promises for getProperties to \"reuse\" if the same request comes in before the first response has\n * completed.\n *\n * @private\n */\nvar _getPropertiesPromises = [];\n\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {StringArray} uids - array of model object UIDs\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getProperties = function( uids, propNames ) {\n    var objects = [];\n    uids.sort();\n    _.forEach( _.uniq( uids, true ), function( uid ) {\n        var modelObject = cdm.getObject( uid );\n        if( modelObject ) {\n            var modelObjAdded = false;\n            // Cached model object\n            _.forEach( propNames, function( propName ) {\n                if( modelObject.modelType.propertyDescriptorsMap.hasOwnProperty( propName ) &&\n                    ( !modelObject.props || !modelObject.props.hasOwnProperty( propName ) ) ) {\n                    if( !modelObjAdded ) {\n                        // Valid property for this model type AND property not cached\n                        objects.push( modelObject );\n                        modelObjAdded = true;\n                    }\n                }\n            } );\n        }\n    } );\n\n    if( objects.length > 0 ) {\n        propPolicySvc.validatePropertyRegistration( objects, propNames );\n        return exports.getPropertiesUnchecked( objects, propNames );\n    }\n\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * Ensures that the specified properties are loaded into the cache. If they are not already loaded a server call is\n * made to load them.\n *\n * @param {ObjectArray} objects - array of model objects\n * @param {StringArray} propNames - array of property names\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getPropertiesUnchecked = function( objects, propNames ) {\n    var input = {\n        objects: objects,\n        attributes: propNames\n    };\n\n    var promise = null;\n    _.forEach( _getPropertiesPromises, function( promiseLp ) {\n        if( !promise && _.isEqual( input.attributes, promiseLp.input.attributes ) ) {\n            if( objects.length === promiseLp.input.objects.length ) {\n                promise = promiseLp; // assume a match\n                for( var ii = 0; ii < objects.length; ii++ ) {\n                    if( objects[ ii ].uid !== promiseLp.input.objects[ ii ].uid ) {\n                        promise = null; // invalid assumption\n                        break;\n                    }\n                }\n            }\n        }\n    } );\n\n    if( !promise ) {\n        promise = soaSvc.post( 'Core-2006-03-DataManagement', 'getProperties', input ).then( function( response ) {\n            _getPropertiesPromises.splice( _getPropertiesPromises.indexOf( promise ), 1 );\n            return response;\n        } );\n        _getPropertiesPromises.push( promise );\n        promise.input = input;\n    }\n    return promise;\n};\n\n/**\n * Convenience method for 'core' {@linkcode module:soa/dataManagementService.getStyleSheet|getStyleSheet} to handle\n * default values used in that service's request.\n *\n * @param {ModelObject} modelObject - The soa object to get the stylesheet for.\n * @param {String} styleSheetType - (Optional) The type of style sheet to return (Default: 'SUMMARY').\n * @param {Object} clientContext - (Optional) (Default: {'ActiveWorkspace:Location':\n *            'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'})\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let getStyleSheet = function( modelObject, styleSheetType, clientContext ) {\n    assert( modelObject, 'getStyleSheet: No ModelObject specified' );\n\n    var styleSheetTypeFinal = styleSheetType;\n    var clientContextFinal = clientContext;\n\n    if( !styleSheetTypeFinal ) {\n        styleSheetTypeFinal = 'SUMMARY';\n    }\n\n    if( !clientContextFinal ) {\n        clientContextFinal = {\n            'ActiveWorkspace:Location': 'com.siemens.splm.clientfx.tcui.xrt.showObjectLocation'\n        };\n    }\n    return soaSvc.post( 'Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', {\n        processEntireXRT: false,\n        input: [ {\n            businessObject: modelObject,\n            styleSheetType: styleSheetTypeFinal,\n            clientContext: clientContextFinal\n        } ]\n    } );\n};\n\n/**\n * Post the input directly to getStyleSheet\n *\n * @param {Integer} input - The json request object. All necessary fields should already be filled\n *\n * @returns {Promise} Resolved when the style sheet information is returned from the SOA service.\n */\nexport let getStyleSheetPure = function( input ) {\n    return soaSvc.post( 'Internal-AWS2-2016-04-DataManagement', 'getStyleSheet', input );\n};\n\n/**\n * This function is used to create input structure for the loadViewModelForEditing SOA call. Consumer need to call\n * this function in loop for each ViewModelObject keeping the same input object.\n *\n * @param {Object} input - Structure containing the viewModelObj and its property names\n * @param {String} uid - ID of the model object that owns the properties\n * @param {StringArray} propertyNames - Props which we need to check the modifiable status\n *\n * @returns {Object} Input structure details.\n */\nexport let getLoadViewModelForEditingInput = function( input, uid, propertyNames ) {\n    var modelObj = cdm.getObject( uid );\n    if( !input ) {\n        input = {\n            inputs: []\n        };\n    }\n    var objs = [];\n    objs.push( modelObj );\n    input.inputs.push( {\n        objs: objs,\n        propertyNames: propertyNames,\n        isPessimisticLock: false\n    } );\n    return input;\n};\n\n/**\n * @param {Object} inputs - payload to the soa call.\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let loadViewModelForEditing2 = function( inputs ) {\n    var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy( null, true );\n    return soaSvc.postUnchecked( 'Internal-AWS2-2017-12-DataManagement', 'loadViewModelForEditing2', {\n        inputs: inputs\n    }, selectedPropertyPolicy );\n};\n\n/**\n * @param {Object} inputs -\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let saveViewModelEditAndSubmitWorkflow = function( inputs ) {\n    var selectedPropertyPolicy = propPolicySvc.getEffectivePolicy( null, true );\n    return soaSvc.postUnchecked( 'Internal-AWS2-2018-05-DataManagement', 'saveViewModelEditAndSubmitWorkflow2', {\n        inputs: inputs\n    }, selectedPropertyPolicy );\n};\n\n/**\n * This function is used to create the input data for saveViewModelEditAndSubmitWorkflow SOA. This SOA requires the\n * view Model properties which are modified and need to update in DB\n *\n * @param {Object} input - Structure containing the viewModelObj\n * @param {Object} viewModelProperty - viewModel prop object whose value has changed and need to commit.\n *\n */\n\nexport let pushViewModelProperty = function( input, viewModelProperty ) {\n    if( !input.viewModelProperties ) {\n        input.viewModelProperties = [];\n    }\n\n    var dbValues = [];\n    var uiValues = [];\n    if( viewModelProperty.isArray ) {\n        dbValues = viewModelProperty.dbValue;\n        uiValues = viewModelProperty.newValue;\n    } else {\n        dbValues.push( viewModelProperty.dbValue );\n        uiValues.push( viewModelProperty.newValue );\n    }\n\n    // Replace all the null values with empty string\n    for( var i = 0; i < dbValues.length; i++ ) {\n        if( viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY' ) {\n            dbValues[ i ] = dateTimeSvc.formatUTC( dbValues[ i ] );\n        } else {\n            dbValues[ i ] = dbValues[ i ] === null ? '' : String( dbValues[ i ] );\n        }\n    }\n\n    // Replace all the null values with empty string\n    for( i = 0; i < uiValues.length; i++ ) {\n        if( viewModelProperty.type === 'DATE' || viewModelProperty.type === 'DATEARRAY' ) {\n            uiValues[ i ] = dateTimeSvc.formatUTC( uiValues[ i ] );\n        } else {\n            uiValues[ i ] = uiValues[ i ] === null ? '' : String( uiValues[ i ] );\n        }\n    }\n\n    var vmProp = {\n        propertyName: viewModelProperty.propertyName,\n        dbValues: dbValues,\n        uiValues: uiValues,\n        intermediateObjectUids: viewModelProperty.intermediateObjectUids,\n        srcObjLsd: viewModelProperty.sourceObjectLastSavedDate,\n        isModifiable: viewModelProperty.isPropertyModifiable\n    };\n\n    input.viewModelProperties.push( vmProp );\n};\n\n/**\n * This utility function is used create the input pay load for SaveViewModelEditAndSubmitToWorkflowInput SAO.\n *\n * @param {Object} viewModelObject - viewModelObj whose properties has been modified.\n * @returns {Object} structure containing the modified viewModelobject.\n */\n\nexport let getSaveViewModelEditAndSubmitToWorkflowInput = function( viewModelObject ) {\n    return {\n        obj: viewModelObject\n    };\n};\n\nexports = {\n    createObjects,\n    createRelateAndSubmitObjects,\n    createRelations,\n    getCurrentUserGateway,\n    getNextId,\n    getNextIds,\n    getTCSessionInfo,\n    removeChildren,\n    saveEdit,\n    setProperties,\n    loadObjects,\n    createItem,\n    getProperties,\n    getPropertiesUnchecked,\n    getStyleSheet,\n    getStyleSheetPure,\n    getLoadViewModelForEditingInput,\n    loadViewModelForEditing2,\n    saveViewModelEditAndSubmitWorkflow,\n    pushViewModelProperty,\n    getSaveViewModelEditAndSubmitToWorkflowInput\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB,C,CAEA;;AACA,IAAIC,kBAAkB,GAAG,EAAzB;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAkB;EACzC,OAAOV,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,eAA5C,EAA6D;IAChED,KAAK,EAAEA;EADyD,CAA7D,CAAP;AAGH,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,4BAA4B,GAAG,UAAUC,MAAV,EAAmB;EACzD,OAAOb,MAAM,CAACW,IAAP,CAAa,sCAAb,EAAqD,8BAArD,EAAqF;IACxFE,MAAM,EAAEA;EADgF,CAArF,CAAP;AAGH,CAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUD,MAAV,EAAmB;EAC5C,OAAOb,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,iBAA5C,EAA+D;IAClED,KAAK,EAAEG;EAD2D,CAA/D,CAAP;AAGH,CAJM;AAMP;AACA;AACA;AACA;;AACA,OAAO,IAAIE,qBAAqB,GAAG,YAAW;EAC1C,OAAOf,MAAM,CAACW,IAAP,CAAa,sCAAb,EAAqD,uBAArD,EAA8E,EAA9E,CAAP;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIK,SAAS,GAAG,UAAUC,QAAV,EAAoBC,QAApB,EAA8BC,OAA9B,EAAwC;EAC3D,OAAOX,OAAO,CAACY,UAAR,CAAoB,CAAE;IACzBH,QAAQ,EAAEA,QADe;IAEzBC,QAAQ,EAAEA,QAFe;IAGzBC,OAAO,EAAEA,OAAO,GAAGA,OAAH,GAAa;EAHJ,CAAF,CAApB,CAAP;AAKH,CANM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAU,GAAG,UAAUC,cAAV,EAA2B;EAC/C,OAAOrB,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,YAA5C,EAA0D;IAC7DU,cAAc,EAAEA;EAD6C,CAA1D,CAAP;AAGH,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAUC,UAAV,EAAuB;EACjD,OAAOvB,MAAM,CAACsB,gBAAP,CAAyBC,UAAzB,EAAsCC,IAAtC,CAA4C,UAAUC,QAAV,EAAqB;IACpE,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,YAAzB,EAAwC;MACpC;MACA,IAAIC,WAAW,GAAG7B,GAAG,CAAC8B,cAAJ,EAAlB;;MACA,IAAIC,MAAM,GAAGzB,CAAC,CAAC0B,GAAF,CAAOH,WAAP,EAAoB,6BAApB,CAAb;;MACA,IAAIE,MAAJ,EAAa;QACTA,MAAM,GAAG1B,SAAS,CAAC4B,SAAV,CAAqBF,MAArB,CAAT;MACH;;MAED,IAAIJ,QAAQ,CAACC,YAAT,CAAsBM,iBAA1B,EAA8C;QAC1C9B,WAAW,CAAC+B,wBAAZ,CAAsCR,QAAQ,CAACC,YAAT,CAAsBM,iBAA5D;MACH;;MAED,IAAI1B,QAAJ,EAAe;QACXA,QAAQ,CAAC4B,OAAT,CAAkB,qBAAlB,EAAyCT,QAAQ,CAACC,YAAlD;MACH,CAdmC,CAgBpC;;;MACA,IAAIS,SAAS,GAAG,EAAhB;;MACA,IAAIV,QAAQ,CAACC,YAAT,CAAsBU,sBAA1B,EAAmD;QAC/C;QACA;QACAD,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAkBZ,QAAQ,CAACC,YAAT,CAAsBU,sBAAtB,CAA6CE,KAA7C,CAAoD,GAApD,CAAlB,CAAZ;MACH;;MAED,OAAOrC,OAAO,CAACsC,oBAAR,CAA8BJ,SAA9B,EAAyC,IAAzC,EAAgDX,IAAhD,CAAsD,YAAW;QACpE,OAAOC,QAAP;MACH,CAFM,CAAP;IAGH,CA5BmE,CA6BpE;;;IACA,OAAOA,QAAP;EACH,CA/BM,CAAP;AAgCH,CAjCM;AAmCP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIe,cAAc,GAAG,UAAU9B,KAAV,EAAkB;EAC1C,OAAOV,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,gBAA5C,EAA8D;IACjE8B,SAAS,EAAE/B;EADsD,CAA9D,CAAP;AAGH,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgC,QAAQ,GAAG,UAAU7B,MAAV,EAAmB;EACrC,OAAOb,MAAM,CAACW,IAAP,CAAa,sCAAb,EAAqD,UAArD,EAAiE;IACpEE,MAAM,EAAEA;EAD4D,CAAjE,CAAP;AAGH,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI8B,aAAa,GAAG,UAAUC,IAAV,EAAiB;EACxC,OAAO5C,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,eAA5C,EAA6D;IAChEiC,IAAI,EAAEA,IAD0D;IAEhEC,OAAO,EAAE;EAFuD,CAA7D,CAAP;AAIH,CALM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,gBAAgBC,IAAhB,EAAuB;EAC5C,IAAIC,WAAW,GAAG,EAAlB;;EACA5C,CAAC,CAAC6C,OAAF,CAAWF,IAAX,EAAiB,UAAUG,GAAV,EAAgB;IAC7B,IAAIC,WAAW,GAAGrD,GAAG,CAACsD,SAAJ,CAAeF,GAAf,CAAlB;;IACA,IAAI,CAACC,WAAD,IAAgB/C,CAAC,CAACiD,OAAF,CAAWF,WAAW,CAACG,KAAvB,CAApB,EAAqD;MACjDN,WAAW,CAACO,IAAZ,CAAkBL,GAAlB;IACH;EACJ,CALD;;EAOA,IAAIF,WAAW,CAACQ,MAAZ,GAAqB,CAAzB,EAA6B;IACzB,MAAMC,UAAU,GAAGT,WAAW,CAACU,MAAZ,CAAoBR,GAAG,IAAI;MAC1C,IAAI,CAAC3C,kBAAkB,CAAE2C,GAAF,CAAvB,EAAiC;QAC7B,OAAOA,GAAP;MACH;IACJ,CAJkB,CAAnB;IAMA,MAAMS,8BAA8B,GAAGX,WAAW,CAACU,MAAZ,CAAoBR,GAAG,IAAI,CAACO,UAAU,CAACG,QAAX,CAAqBV,GAArB,CAA5B,EAAyDW,GAAzD,CAA8DX,GAAG,IAAI;MACxG,IAAI3C,kBAAkB,CAAE2C,GAAF,CAAtB,EAAgC;QAC5B,OAAO3C,kBAAkB,CAAE2C,GAAF,CAAzB;MACH;IACJ,CAJsC,CAAvC;IAMA,MAAMY,eAAe,GAAG,EAAxB;;IAEA,IAAIL,UAAU,CAACD,MAAX,GAAoB,CAAxB,EAA4B;MACxB,MAAMO,kBAAkB,GAAG/D,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,aAA5C,EAA2D;QAClFoC,IAAI,EAAEU;MAD4E,CAA3D,CAA3B;;MAIA,KAAK,MAAMP,GAAX,IAAkBO,UAAlB,EAA+B;QAC3BlD,kBAAkB,CAAE2C,GAAF,CAAlB,GAA4Ba,kBAA5B;MACH;;MAEDD,eAAe,CAACP,IAAhB,CAAsBQ,kBAAtB;IACH;;IAED,MAAMC,OAAO,CAACC,GAAR,CAAa,CAAE,GAAGN,8BAAL,EAAqC,GAAGG,eAAxC,CAAb,CAAN;;IAEA,KAAK,MAAMZ,GAAX,IAAkBO,UAAlB,EAA+B;MAC3B,OAAOlD,kBAAkB,CAAE2C,GAAF,CAAzB;IACH;EACJ,CAzC2C,CA2C5C;;;EACA,OAAOrD,gBAAgB,CAACqE,QAAjB,CAA0BC,OAA1B,EAAP;AACH,CA7CM;AA+CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAU,GAAG,UAAUC,MAAV,EAAkBC,SAAlB,EAA6BrD,QAA7B,EAAuCsD,QAAvC,EAAkD;EACtE,IAAIrD,QAAQ,GAAG,SAAf;EACA,IAAIsD,gBAAgB,GAAGvD,QAAQ,GAAG,UAAlC;EACA,IAAIwD,gBAAgB,GAAG,kBAAvB;EACA,IAAIC,YAAY,GAAG,EAAnB;EAEA,OAAOlE,OAAO,CAACY,UAAR,CAAoB,CAAE;IACzBH,QAAQ,EAAEA,QADe;IAEzBC,QAAQ,EAAEA;EAFe,CAAF,EAGxB;IACCD,QAAQ,EAAEuD,gBADX;IAECtD,QAAQ,EAAEuD;EAFX,CAHwB,CAApB,EAMDjD,IANC,CAMK,UAAUC,QAAV,EAAqB;IAC7B,OAAOjB,OAAO,CAACI,4BAAR,CAAsC,CAAE;MAC3C+D,UAAU,EAAE;QACRC,MAAM,EAAE3D,QADA;QAER4D,kBAAkB,EAAE;UAChBC,OAAO,EAAE,CAAErD,QAAQ,CAACsD,OAAT,CAAkB,CAAlB,CAAF,CADO;UAEhBC,WAAW,EAAE,CAAET,QAAF;QAFG,CAFZ;QAMRU,mBAAmB,EAAE;UACjBC,QAAQ,EAAE,CAAE;YACRN,MAAM,EAAEJ,gBADA;YAERK,kBAAkB,EAAE;cAChBM,gBAAgB,EAAE,CAAE1D,QAAQ,CAACsD,OAAT,CAAkB,CAAlB,CAAF;YADF,CAFZ;YAKRE,mBAAmB,EAAE;UALb,CAAF;QADO;MANb;IAD+B,CAAF,CAAtC,CAAP;EAkBH,CAzBM,EAyBHzD,IAzBG,CAyBG,UAAUC,QAAV,EAAqB;IAC3BiD,YAAY,GAAG5E,GAAG,CAACsD,SAAJ,CAAe3B,QAAQ,CAAC2D,MAAT,CAAiB,CAAjB,EAAqBC,OAArB,CAA8B,CAA9B,EAAkCnC,GAAjD,CAAf;IACA,OAAO1C,OAAO,CAACM,eAAR,CAAyB,CAAE;MAC9BwE,YAAY,EAAEhB,SADgB;MAE9BiB,aAAa,EAAElB,MAFe;MAG9BmB,eAAe,EAAEd;IAHa,CAAF,CAAzB,CAAP;EAKH,CAhCM,EAgCHlD,IAhCG,CAgCG,YAAW;IACjB,OAAOkD,YAAP;EACH,CAlCM,CAAP;AAmCH,CAzCM;AA2CP;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIe,sBAAsB,GAAG,EAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAU3C,IAAV,EAAgB4C,SAAhB,EAA4B;EACnD,IAAIN,OAAO,GAAG,EAAd;EACAtC,IAAI,CAAC6C,IAAL;;EACAxF,CAAC,CAAC6C,OAAF,CAAW7C,CAAC,CAACyF,IAAF,CAAQ9C,IAAR,EAAc,IAAd,CAAX,EAAiC,UAAUG,GAAV,EAAgB;IAC7C,IAAIC,WAAW,GAAGrD,GAAG,CAACsD,SAAJ,CAAeF,GAAf,CAAlB;;IACA,IAAIC,WAAJ,EAAkB;MACd,IAAI2C,aAAa,GAAG,KAApB,CADc,CAEd;;MACA1F,CAAC,CAAC6C,OAAF,CAAW0C,SAAX,EAAsB,UAAUzE,QAAV,EAAqB;QACvC,IAAIiC,WAAW,CAAC4C,SAAZ,CAAsBC,sBAAtB,CAA6CC,cAA7C,CAA6D/E,QAA7D,MACE,CAACiC,WAAW,CAACG,KAAb,IAAsB,CAACH,WAAW,CAACG,KAAZ,CAAkB2C,cAAlB,CAAkC/E,QAAlC,CADzB,CAAJ,EAC8E;UAC1E,IAAI,CAAC4E,aAAL,EAAqB;YACjB;YACAT,OAAO,CAAC9B,IAAR,CAAcJ,WAAd;YACA2C,aAAa,GAAG,IAAhB;UACH;QACJ;MACJ,CATD;IAUH;EACJ,CAhBD;;EAkBA,IAAIT,OAAO,CAAC7B,MAAR,GAAiB,CAArB,EAAyB;IACrBzD,aAAa,CAACmG,4BAAd,CAA4Cb,OAA5C,EAAqDM,SAArD;IACA,OAAOnF,OAAO,CAAC2F,sBAAR,CAAgCd,OAAhC,EAAyCM,SAAzC,CAAP;EACH;;EAED,OAAO9F,gBAAgB,CAACqE,QAAjB,CAA0BC,OAA1B,EAAP;AACH,CA3BM;AA6BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgC,sBAAsB,GAAG,UAAUd,OAAV,EAAmBM,SAAnB,EAA+B;EAC/D,IAAIjF,KAAK,GAAG;IACR2E,OAAO,EAAEA,OADD;IAERe,UAAU,EAAET;EAFJ,CAAZ;EAKA,IAAIU,OAAO,GAAG,IAAd;;EACAjG,CAAC,CAAC6C,OAAF,CAAWwC,sBAAX,EAAmC,UAAUa,SAAV,EAAsB;IACrD,IAAI,CAACD,OAAD,IAAYjG,CAAC,CAACmG,OAAF,CAAW7F,KAAK,CAAC0F,UAAjB,EAA6BE,SAAS,CAAC5F,KAAV,CAAgB0F,UAA7C,CAAhB,EAA4E;MACxE,IAAIf,OAAO,CAAC7B,MAAR,KAAmB8C,SAAS,CAAC5F,KAAV,CAAgB2E,OAAhB,CAAwB7B,MAA/C,EAAwD;QACpD6C,OAAO,GAAGC,SAAV,CADoD,CAC/B;;QACrB,KAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGnB,OAAO,CAAC7B,MAA9B,EAAsCgD,EAAE,EAAxC,EAA6C;UACzC,IAAInB,OAAO,CAAEmB,EAAF,CAAP,CAActD,GAAd,KAAsBoD,SAAS,CAAC5F,KAAV,CAAgB2E,OAAhB,CAAyBmB,EAAzB,EAA8BtD,GAAxD,EAA8D;YAC1DmD,OAAO,GAAG,IAAV,CAD0D,CAC1C;;YAChB;UACH;QACJ;MACJ;IACJ;EACJ,CAZD;;EAcA,IAAI,CAACA,OAAL,EAAe;IACXA,OAAO,GAAGrG,MAAM,CAACW,IAAP,CAAa,6BAAb,EAA4C,eAA5C,EAA6DD,KAA7D,EAAqEc,IAArE,CAA2E,UAAUC,QAAV,EAAqB;MACtGgE,sBAAsB,CAACgB,MAAvB,CAA+BhB,sBAAsB,CAACiB,OAAvB,CAAgCL,OAAhC,CAA/B,EAA0E,CAA1E;;MACA,OAAO5E,QAAP;IACH,CAHS,CAAV;;IAIAgE,sBAAsB,CAAClC,IAAvB,CAA6B8C,OAA7B;;IACAA,OAAO,CAAC3F,KAAR,GAAgBA,KAAhB;EACH;;EACD,OAAO2F,OAAP;AACH,CA9BM;AAgCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,aAAa,GAAG,UAAUxD,WAAV,EAAuByD,cAAvB,EAAuCC,aAAvC,EAAuD;EAC9ExG,MAAM,CAAE8C,WAAF,EAAe,yCAAf,CAAN;EAEA,IAAI2D,mBAAmB,GAAGF,cAA1B;EACA,IAAIG,kBAAkB,GAAGF,aAAzB;;EAEA,IAAI,CAACC,mBAAL,EAA2B;IACvBA,mBAAmB,GAAG,SAAtB;EACH;;EAED,IAAI,CAACC,kBAAL,EAA0B;IACtBA,kBAAkB,GAAG;MACjB,4BAA4B;IADX,CAArB;EAGH;;EACD,OAAO/G,MAAM,CAACW,IAAP,CAAa,sCAAb,EAAqD,eAArD,EAAsE;IACzEqG,gBAAgB,EAAE,KADuD;IAEzEtG,KAAK,EAAE,CAAE;MACLuG,cAAc,EAAE9D,WADX;MAELyD,cAAc,EAAEE,mBAFX;MAGLD,aAAa,EAAEE;IAHV,CAAF;EAFkE,CAAtE,CAAP;AAQH,CAvBM;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,iBAAiB,GAAG,UAAUxG,KAAV,EAAkB;EAC7C,OAAOV,MAAM,CAACW,IAAP,CAAa,sCAAb,EAAqD,eAArD,EAAsED,KAAtE,CAAP;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIyG,+BAA+B,GAAG,UAAUzG,KAAV,EAAiBwC,GAAjB,EAAsBkE,aAAtB,EAAsC;EAC/E,IAAIC,QAAQ,GAAGvH,GAAG,CAACsD,SAAJ,CAAeF,GAAf,CAAf;;EACA,IAAI,CAACxC,KAAL,EAAa;IACTA,KAAK,GAAG;MACJG,MAAM,EAAE;IADJ,CAAR;EAGH;;EACD,IAAIyG,IAAI,GAAG,EAAX;EACAA,IAAI,CAAC/D,IAAL,CAAW8D,QAAX;EACA3G,KAAK,CAACG,MAAN,CAAa0C,IAAb,CAAmB;IACf+D,IAAI,EAAEA,IADS;IAEfF,aAAa,EAAEA,aAFA;IAGfG,iBAAiB,EAAE;EAHJ,CAAnB;EAKA,OAAO7G,KAAP;AACH,CAfM;AAiBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI8G,wBAAwB,GAAG,UAAU3G,MAAV,EAAmB;EACrD,IAAI4G,sBAAsB,GAAG1H,aAAa,CAAC2H,kBAAd,CAAkC,IAAlC,EAAwC,IAAxC,CAA7B;EACA,OAAO1H,MAAM,CAAC2H,aAAP,CAAsB,sCAAtB,EAA8D,0BAA9D,EAA0F;IAC7F9G,MAAM,EAAEA;EADqF,CAA1F,EAEJ4G,sBAFI,CAAP;AAGH,CALM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,kCAAkC,GAAG,UAAU/G,MAAV,EAAmB;EAC/D,IAAI4G,sBAAsB,GAAG1H,aAAa,CAAC2H,kBAAd,CAAkC,IAAlC,EAAwC,IAAxC,CAA7B;EACA,OAAO1H,MAAM,CAAC2H,aAAP,CAAsB,sCAAtB,EAA8D,qCAA9D,EAAqG;IACxG9G,MAAM,EAAEA;EADgG,CAArG,EAEJ4G,sBAFI,CAAP;AAGH,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAII,qBAAqB,GAAG,UAAUnH,KAAV,EAAiBoH,iBAAjB,EAAqC;EACpE,IAAI,CAACpH,KAAK,CAACqH,mBAAX,EAAiC;IAC7BrH,KAAK,CAACqH,mBAAN,GAA4B,EAA5B;EACH;;EAED,IAAIC,QAAQ,GAAG,EAAf;EACA,IAAIC,QAAQ,GAAG,EAAf;;EACA,IAAIH,iBAAiB,CAACI,OAAtB,EAAgC;IAC5BF,QAAQ,GAAGF,iBAAiB,CAACK,OAA7B;IACAF,QAAQ,GAAGH,iBAAiB,CAACM,QAA7B;EACH,CAHD,MAGO;IACHJ,QAAQ,CAACzE,IAAT,CAAeuE,iBAAiB,CAACK,OAAjC;IACAF,QAAQ,CAAC1E,IAAT,CAAeuE,iBAAiB,CAACM,QAAjC;EACH,CAbmE,CAepE;;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACxE,MAA7B,EAAqC6E,CAAC,EAAtC,EAA2C;IACvC,IAAIP,iBAAiB,CAACQ,IAAlB,KAA2B,MAA3B,IAAqCR,iBAAiB,CAACQ,IAAlB,KAA2B,WAApE,EAAkF;MAC9EN,QAAQ,CAAEK,CAAF,CAAR,GAAgBnI,WAAW,CAACqI,SAAZ,CAAuBP,QAAQ,CAAEK,CAAF,CAA/B,CAAhB;IACH,CAFD,MAEO;MACHL,QAAQ,CAAEK,CAAF,CAAR,GAAgBL,QAAQ,CAAEK,CAAF,CAAR,KAAkB,IAAlB,GAAyB,EAAzB,GAA8BG,MAAM,CAAER,QAAQ,CAAEK,CAAF,CAAV,CAApD;IACH;EACJ,CAtBmE,CAwBpE;;;EACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,QAAQ,CAACzE,MAAzB,EAAiC6E,CAAC,EAAlC,EAAuC;IACnC,IAAIP,iBAAiB,CAACQ,IAAlB,KAA2B,MAA3B,IAAqCR,iBAAiB,CAACQ,IAAlB,KAA2B,WAApE,EAAkF;MAC9EL,QAAQ,CAAEI,CAAF,CAAR,GAAgBnI,WAAW,CAACqI,SAAZ,CAAuBN,QAAQ,CAAEI,CAAF,CAA/B,CAAhB;IACH,CAFD,MAEO;MACHJ,QAAQ,CAAEI,CAAF,CAAR,GAAgBJ,QAAQ,CAAEI,CAAF,CAAR,KAAkB,IAAlB,GAAyB,EAAzB,GAA8BG,MAAM,CAAEP,QAAQ,CAAEI,CAAF,CAAV,CAApD;IACH;EACJ;;EAED,IAAII,MAAM,GAAG;IACTC,YAAY,EAAEZ,iBAAiB,CAACY,YADvB;IAETV,QAAQ,EAAEA,QAFD;IAGTC,QAAQ,EAAEA,QAHD;IAITU,sBAAsB,EAAEb,iBAAiB,CAACa,sBAJjC;IAKTC,SAAS,EAAEd,iBAAiB,CAACe,yBALpB;IAMTC,YAAY,EAAEhB,iBAAiB,CAACiB;EANvB,CAAb;EASArI,KAAK,CAACqH,mBAAN,CAA0BxE,IAA1B,CAAgCkF,MAAhC;AACH,CA3CM;AA6CP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIO,4CAA4C,GAAG,UAAUC,eAAV,EAA4B;EAClF,OAAO;IACHC,GAAG,EAAED;EADF,CAAP;AAGH,CAJM;AAMPzI,OAAO,GAAG;EACNC,aADM;EAENG,4BAFM;EAGNE,eAHM;EAINC,qBAJM;EAKNC,SALM;EAMNI,UANM;EAONE,gBAPM;EAQNkB,cARM;EASNE,QATM;EAUNC,aAVM;EAWNG,WAXM;EAYNsB,UAZM;EAaNsB,aAbM;EAcNS,sBAdM;EAeNQ,aAfM;EAgBNO,iBAhBM;EAiBNC,+BAjBM;EAkBNK,wBAlBM;EAmBNI,kCAnBM;EAoBNC,qBApBM;EAqBNmB;AArBM,CAAV;AAuBA,eAAexI,OAAf"},"metadata":{},"sourceType":"module"}
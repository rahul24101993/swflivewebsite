{"ast":null,"code":"// Compiler result to JSON file\nimport{createComponent}from'js/declViewModelService';import{registerDynImportEntry}from'js/moduleLoader';import AwParseService from'js/awParseService';import AwFilterService from'js/awFilterService';import{getField}from'js/utils';import{Fragment}from'react';let filterSer=AwFilterService.instance;import AwBaseSublocation from'viewmodel/AwBaseSublocationViewModel';import AwWorkarea from'viewmodel/AwWorkareaViewModel';import{ExistWhen}from'js/hocCollection';const AwBaseSublocationExistWhen=ExistWhen(AwBaseSublocation);/*\nctx imports\n*/import{getContext as context}from'js/awDefaultSublocationService';import{jsx as _jsx}from\"react/jsx-runtime\";const ctxImportObj={context};/*\ndynamic import\n */registerDynImportEntry('js/awDefaultSublocationService',()=>import('js/awDefaultSublocationService'));;/*\nview model\n */const declViewModelJson={\"schemaVersion\":\"1.0.0\",\"data\":{},\"ctx\":{\"context\":{\"parser\":{\"method\":\"getContext\",\"deps\":\"js/awDefaultSublocationService\"}}},\"props\":{\"sub-panel-context\":{\"type\":\"object\"},\"base-selection\":{\"type\":\"object\"},\"selection-model\":{\"type\":\"object\"},\"selection-data\":{\"type\":\"object\"},\"sublocation-state\":{\"type\":\"object\"}},\"actions\":{\"initializeSublocation\":{\"actionType\":\"batchJob\",\"steps\":[{\"action\":\"initializeDefaultSublocation\"}]},\"initializeDefaultSublocation\":{\"actionType\":\"JSFunction\",\"method\":\"initializeDefaultSublocation\",\"inputData\":{\"subPanelContext\":\"{{props.subPanelContext}}\"},\"deps\":\"js/awDefaultSublocationService\"},\"cleanUp\":{\"actionType\":\"JSFunction\",\"method\":\"cleanUp\",\"deps\":\"js/awDefaultSublocationService\"}},\"lifecycleHooks\":{\"onUnmount\":\"cleanUp\",\"onMount\":\"initializeSublocation\"},\"_viewModelId\":\"AwDefaultSublocationInternal\",\"_uniqueViewModelId\":\"AwDefaultSublocationInternal\"};/*\n<aw-base-sublocation exist-when=\"subPanelContext\"\n    provider=\"props.ctx.context[0].providerForBaseSublocation\"\n    base-selection=\"props.baseSelection\"\n    sub-panel-context='props.ctx.context[0].subPanelContextForBaseSublocation'>\n    <aw-workarea base-selection=\"props.baseSelection\" selection-model=\"props.selectionModel\"\n        selection-data=\"props.selectionData\"\n        is-horizontal-orientation=\"subPanelContext.awSubLocationPref.orientation==='HORIZONTAL'\"\n        sub-panel-context=\"props.ctx.context[0].subPanelContextForAwWorkarea\">\n    </aw-workarea>\n</aw-base-sublocation>\n\n*/const renderFn=props=>{let subPanelContext=props.subPanelContext;let{viewModel:{data,dataProviders,dispatch,conditions,selectionModels,editHandlers,chartProviders,ports},grids,ctx,actions,fields,messages,i18n,formProp,viewPath}=props;data={...data,dataProviders};if(subPanelContext&&subPanelContext.fields){fields={...fields,...subPanelContext.fields};}let $index=null;return/*#__PURE__*/_jsx(AwBaseSublocationExistWhen,{provider:AwParseService.instance(\"props.ctx.context[0].providerForBaseSublocation\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),baseSelection:AwParseService.instance(\"props.baseSelection\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),subPanelContext:AwParseService.instance(\"props.ctx.context[0].subPanelContextForBaseSublocation\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),existWhen:AwParseService.instance(\"subPanelContext\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),children:/*#__PURE__*/_jsx(AwWorkarea,{baseSelection:AwParseService.instance(\"props.baseSelection\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),selectionModel:AwParseService.instance(\"props.selectionModel\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),selectionData:AwParseService.instance(\"props.selectionData\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),isHorizontalOrientation:AwParseService.instance(\"subPanelContext.awSubLocationPref.orientation==='HORIZONTAL'\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports}),subPanelContext:AwParseService.instance(\"props.ctx.context[0].subPanelContextForAwWorkarea\")({props,data,fields,dataProviders,ctx,i18n,actions,subPanelContext,viewPath,conditions,formProp,dispatch,selectionModels,editHandlers,chartProviders,ports})})});};/*\ndefine component\n*/const Component=createComponent(declViewModelJson,renderFn,undefined,ctxImportObj);export default Component;","map":null,"metadata":{},"sourceType":"module"}
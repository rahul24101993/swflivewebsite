{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwTextBoxValService.js\";\n// Copyright (c) 2021 Siemens\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n/**\n * render function for AwTextBoxVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awTextBoxValRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    ...prop\n  } = props;\n  const {\n    onChange,\n    onSwChange\n  } = prop;\n  let filteredAttrs = sanitizer.sanitizeHTMLTagProps(prop, 'input');\n  delete filteredAttrs.maxLength;\n  const inputClass = getValClass(prop); // use simple non-edit val if not editing\n\n  if (!prop.fielddata.isEditable) {\n    return /*#__PURE__*/_jsxDEV(AwPropertyNonEditVal, { ...prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n\n  var keyPressed = (event, props) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      event.target.value = event.target.value.trim();\n      changeHandler(event, true);\n      event.target.value = '';\n      event.persist();\n      return props && props.action && props.action(event);\n    } //handle maxLength\n\n\n    const textLength = (event.target.value + event.key).trim().length;\n\n    if (textLength > prop.maxLength) {\n      event.preventDefault();\n    }\n  };\n\n  const changeHandler = function (event) {\n    let immediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    // provide callback handler which application can hook, with parameters: current value, old value\n    onSwChange && onSwChange(event.target.value, prop.value, immediate); // at last\n\n    onChange(event);\n  };\n\n  const handleBlur = (event, props) => {\n    event.target.value = event.target.value.trim(); // why call changeHandler onBlur? this breaks ACE's aw-list-filter in an aw-include in an aw-link-with-popup\n\n    if (prop.typex === 'STRINGARRAY') {\n      changeHandler(event, true); //clear value after update\n\n      event.target.value = '';\n      event.persist();\n    }\n\n    if (props && props.blurAction) {\n      event.persist();\n      return props.blurAction(event);\n    }\n  };\n\n  if (prop.typex === 'STRINGARRAY') {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      \"data-locator\": prop.label,\n      \"aria-required\": prop.isRequired,\n      placeholder: prop.placeholder,\n      className: inputClass,\n      onBlur: handleBlur,\n      onKeyPress: keyPressed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", { ...filteredAttrs,\n    type: prop.inputType ? prop.inputType : 'text',\n    \"aria-label\": prop.name,\n    className: inputClass,\n    onChange: changeHandler,\n    onKeyPress: e => keyPressed(e, props),\n    value: filteredAttrs.value || '',\n    onBlur: e => handleBlur(e, props),\n    autoComplete: \"off\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["AwPropertyNonEditVal","sanitizer","getValClass","awTextBoxValRenderFunction","props","viewModel","ctxMin","actions","i18n","fields","grids","formProp","messages","prop","onChange","onSwChange","filteredAttrs","sanitizeHTMLTagProps","maxLength","inputClass","fielddata","isEditable","keyPressed","event","key","preventDefault","target","value","trim","changeHandler","persist","action","textLength","length","immediate","handleBlur","typex","blurAction","label","isRequired","placeholder","inputType","name","e"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwTextBoxValService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n\n/**\n * render function for AwTextBoxVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awTextBoxValRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        ...prop\n    } = props;\n    const { onChange, onSwChange } = prop;\n\n    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'input' );\n    delete filteredAttrs.maxLength;\n    const inputClass = getValClass( prop );\n\n    // use simple non-edit val if not editing\n    if( !prop.fielddata.isEditable ) {\n        return (\n            <AwPropertyNonEditVal {...prop}></AwPropertyNonEditVal>\n        );\n    }\n\n    var keyPressed = ( event, props ) => {\n        if( event.key === 'Enter' ) {\n            event.preventDefault();\n            event.target.value = event.target.value.trim();\n            changeHandler( event, true );\n            event.target.value = '';\n            event.persist();\n            return props && props.action && props.action( event );\n        }\n        //handle maxLength\n        const textLength = ( event.target.value + event.key ).trim().length;\n        if( textLength > prop.maxLength ) {\n            event.preventDefault();\n        }\n    };\n\n    const changeHandler = ( event, immediate = false ) => {\n        // provide callback handler which application can hook, with parameters: current value, old value\n        onSwChange && onSwChange( event.target.value, prop.value, immediate );\n\n        // at last\n        onChange( event );\n    };\n\n    const handleBlur = ( event, props ) => {\n        event.target.value = event.target.value.trim();\n        // why call changeHandler onBlur? this breaks ACE's aw-list-filter in an aw-include in an aw-link-with-popup\n        if( prop.typex === 'STRINGARRAY' ) {\n            changeHandler( event, true );\n            //clear value after update\n            event.target.value = '';\n            event.persist();\n        }\n\n        if( props && props.blurAction ) {\n            event.persist();\n            return props.blurAction( event );\n        }\n    };\n\n    if( prop.typex === 'STRINGARRAY' ) {\n        return (\n            <input type='text' data-locator={prop.label} aria-required={prop.isRequired} placeholder={prop.placeholder} className={inputClass} onBlur={handleBlur} onKeyPress={keyPressed}/>\n        );\n    }\n\n    return (\n        <input {...filteredAttrs}\n            type={prop.inputType ? prop.inputType : 'text'}\n            aria-label={prop.name}\n            className={inputClass}\n            onChange={changeHandler}\n            onKeyPress={( e )=>keyPressed( e, props )}\n            value={filteredAttrs.value || ''}\n            onBlur={( e )=>handleBlur( e, props )}\n            autoComplete='off'\n        />\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
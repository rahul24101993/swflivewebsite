{"ast":null,"code":"/* eslint-disable no-unused-vars */ // Copyright (c) 2020 Siemens\n/**\n * This module provides a way for declarative framework to do debugging.\n *\n * @module js/debugService\n *\n * @namespace debugService\n */import logger from'js/logger';import _ from'lodash';import breakpointSvc from'js/breakpointService';export let debugActionStart=function(action,declViewModel,inputData){if(!logger.isDeclarativeLogEnabled()||action.actionType==='Event'){return;}// action, declViewModel, $scope, inputData\nvar declTraceObject={type:'action',operation:'start',name:action.actionId,payload:{viewModel:declViewModel._internal.panelId,def:action,resolvedInput:inputData}};logger.declarativeLog('DECLARATIVE TRACE - Action start : %O ',declTraceObject);};/** revisitme yogesh\n * No usage of context aka scope, refactor callers and get rid\n */export let debugEventPub=function(action,event,declViewModel,context,eventDataToPublish){// action, event, declViewModel, $scope, eventDataToPublish\nif(logger.isDeclarativeLogEnabled()){var viewModelName=declViewModel._internal?declViewModel._internal.panelId:declViewModel.panelId;var declTraceObject={type:'event',operation:'publish',name:event.name,payload:{viewModel:viewModelName,def:action,resolvedInput:eventDataToPublish&&eventDataToPublish.scope?{}:eventDataToPublish}};logger.declarativeLog('DECLARATIVE TRACE - Event publish : %O ',declTraceObject);}};export let debugEventSub=function(eventDef,declViewModel,context,condition){// eventObj, declViewModel, context, isEventExecutable\nvar declTraceObject={type:'event',operation:'subscribe',name:eventDef.eventId,payload:{viewModel:declViewModel._internal.panelId,def:eventDef,condition:condition/** revisitme\n             input: {\n                context: context && context.scope ? {} : context\n            }\n             */}};if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - Event subscribe : %O ',declTraceObject);}};export let debugActionEnd=function(action,declViewModel,resolvedAssignments){if(!logger.isDeclarativeLogEnabled()){return;}// action, declViewModel, dataCtxNode, actionResponseObj\nvar declTraceObject={type:'action',operation:'complete',name:action.actionId,payload:{viewModel:declViewModel._internal.panelId,def:action,resolvedOutput:resolvedAssignments}};logger.declarativeLog('DECLARATIVE TRACE - Action end: %O ',declTraceObject);};export let debugMessages=function(message,declViewModel,context){//\nvar declTraceObject={type:'message',payload:{viewModel:declViewModel._internal.panelId,def:message.messageDefn,resolvedOutput:{localizedMessage:message.localizedMessage,messageData:message.messageData}/*input: {\n               context: context //LCS-585902 - Exceptions occurring when trying to pop a message via declaratively defined actionMessage Logging context gives infinite loop as context has complex structure\n             } */}};if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - Messages: %O ',declTraceObject);}};export let debugLifecyleHooks=function(hookname,viewModel){let observerObjs=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var declTraceObject={type:'lifecycleHook',operation:hookname,payload:{viewModel:viewModel._internal.panelId}};if(hookname==='onUpdate'){let lifecycleHooks={...viewModel.declViewModelJson.lifecycleHooks.onUpdate};if(lifecycleHooks.observers){let observerMap={};lifecycleHooks.observers.forEach((observer,indx)=>{observerMap[observer]=observerObjs&&observerObjs.length?observerObjs[indx]:null;});declTraceObject.payload.observers=observerMap;}}if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - Lifecycle Hook: %O ',declTraceObject);}};export let debugViewAndViewModel=function(operation,viewName,declViewModel,subpanelContext){/*\n     * type is 'contentUnloaded' // when view and VM destroy\n     * type is 'contentLoaded' // when view and VM rendered\n     */var declTraceObject={type:'viewAndViewModel',operation:operation,payload:{viewModel:viewName,input:{subPanelContext:subpanelContext}}};if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - View and ViewModel '+operation+': %O ',declTraceObject);}};export let debugGetCommandsForAnchor=function(uiAnchor,commands){if(uiAnchor&&logger.isDeclarativeLogEnabled()){var declTraceObject={type:'command',operation:'contributedCommands',payload:{viewModel:'commandsViewModel',anchorName:uiAnchor,commandsOnAchor:commands}};logger.declarativeLog('DECLARATIVE TRACE - All commands against anchor : %O ',declTraceObject);}};export let debugUpdateHandlerOnCommand=function(commandId,handler){if(logger.isDeclarativeLogEnabled()&&commandId&&handler&&!_.isEmpty(handler)){var declTraceObject={type:'command',operation:'activeHandler',payload:{viewModel:'commandsViewModel',commandId:commandId,handler:handler}};logger.declarativeLog('DECLARATIVE TRACE - Update Handler : %O ',declTraceObject);}};export let debugCommandRender=function(command,result){if(logger.isDeclarativeLogEnabled()&&command&&result&&!_.isEmpty(command)&&!_.isEmpty(result)){var declTraceObject={type:'command',operation:'commandRender',payload:{viewModel:'commandsViewModel',commandId:command.id,command:command,renderResult:result}};logger.declarativeLog('DECLARATIVE TRACE - Command Render : %O ',declTraceObject);}};export let debugPreProcessingDataParser=function(sourceObj,declViewModel,dataParserDef,dataCtxNode){if(logger.isDeclarativeLogEnabled()){var declTraceObject={type:'dataParser',operation:'preProcessing',payload:{viewModel:declViewModel._internal.panelId,def:dataParserDef}};logger.declarativeLog('DECLARATIVE TRACE - Pre processing of DataParser: %O ',declTraceObject);}};export let debugPostProcessingDataParser=function(processedSourceObj,declViewModel,dataParserDef,dataCtxNode){if(logger.isDeclarativeLogEnabled()){var declTraceObject={type:'dataParser',operation:'postProcessing',payload:{viewModel:declViewModel._internal.panelId,def:dataParserDef,resolvedIput:processedSourceObj}};logger.declarativeLog('DECLARATIVE TRACE - post processing of DataParser: %O ',declTraceObject);}};export let debugDataProviderInitialize=function(dataProvider,dataProvierAction,dataProviderDef,context,requestObjectForAction,resolvedInput){if(logger.isDeclarativeLogEnabled()){var declTraceObject={type:'dataProvider',operation:'Initialize',name:dataProvider.name,payload:{/** revisitme\n                viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n                */def:dataProviderDef,action:dataProvierAction,resolvedIput:resolvedInput}};logger.declarativeLog('DECLARATIVE TRACE - Initialize of Dataprovider: %O ',declTraceObject);}};export let debugDataProviderNextPage=function(dataProvider,dataProvierAction,dataProviderDef,context,requestObjectForAction){if(logger.isDeclarativeLogEnabled()){var declTraceObject={type:'dataProvider',operation:'NextPage',name:dataProvider.name,payload:{/** revisitme\n                viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n                */def:dataProviderDef,action:dataProvierAction}};logger.declarativeLog('DECLARATIVE TRACE - NextPage of Dataprovider: %O ',declTraceObject);}};export let debugConditions=function(conditionName,conditionState,conditionExp,declViewModel){var declTraceObject={type:'conditions',payload:{viewModel:declViewModel,conditionName:conditionName,expression:conditionExp,conditionState:conditionState}};if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - Conditions: %O ',declTraceObject);}};/**\n *\n * @param {*} arguments[0] type of the breakpoint\n *\n */export let debug=function(){try{if(!logger.isDeclarativeLogEnabled()){return;}let brkPointType=arguments[0];if(breakpointSvc.hasConditionSatisfied(brkPointType,arguments[1],arguments[2],arguments[3])){// eslint-disable-next-line no-debugger\ndebugger;}if(brkPointType==='actions'){switch(arguments[3]){case'pre':debugActionStart(arguments[4],arguments[5],arguments[6]);break;case'post':debugActionEnd(arguments[4],arguments[5],arguments[6]);break;case'default'://do nothing\nbreak;}}// eslint-disable-next-line no-empty\n}catch(e){}};let printData=result=>{result.map(entry=>{entry.children.map(child=>{child.handlers.map(handler=>{logger.declarativeLog(' '+'~'+entry.anchor+'~'+entry.id+'~'+entry.type+'~'+child.id+'~'+handler.id+'~'+handler.activeWhen+'~'+handler.visibleWhen);});});if(entry.children.length===0){entry.handlers.map(handler=>{logger.declarativeLog(' '+'~'+entry.anchor+'~'+entry.id+'~'+entry.type+'~'+undefined+'~'+handler.id+'~'+handler.activeWhen+'~'+handler.visibleWhen);});}});};const procesHandler=handler=>{let singleHandler={};singleHandler.id=handler.id;if(handler.activeWhen){if(_.isObject(handler.activeWhen.expression)){singleHandler.activeWhen=JSON.stringify(handler.activeWhen.expression);}else{singleHandler.activeWhen=handler.activeWhen.expression;}}if(handler.visibleWhen){if(_.isObject(handler.visibleWhen.expression)){singleHandler.visibleWhen=JSON.stringify(handler.visibleWhen.expression);}else{singleHandler.visibleWhen=handler.visibleWhen.expression;}}return singleHandler;};export const reduceData=(anchor,data)=>{if(logger.isDeclarativeLogEnabled()){let result=[];data.map(obj=>{let singleResult={anchor,id:'',type:'',children:[],handlers:[]};for(let key in obj){if(key==='id'){singleResult.id=obj.id;}if(key==='type'){singleResult.type=obj.type;}if(key==='children'){obj.children.map(child=>{let singleChild={id:'',handlers:[]};singleChild.id=child.id;child.handlers.map(handler=>{singleChild.handlers.push(procesHandler(handler));});singleResult.children.push(singleChild);});}if(key==='handlers'){obj.handlers.map(handler=>{singleResult.handlers.push(procesHandler(handler));});}}result.push(singleResult);});printData(result);}};export default{debugActionStart,debugEventPub,debugEventSub,debugActionEnd,debugMessages,debugLifecyleHooks,debugViewAndViewModel,debugGetCommandsForAnchor,debugCommandRender,debugUpdateHandlerOnCommand,debugPreProcessingDataParser,debugPostProcessingDataParser,debugDataProviderNextPage,debugDataProviderInitialize,debugConditions,debug,reduceData};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/editEventsService\n */\nimport eventBus from 'js/eventBus';\nimport editHandlerService from 'js/editHandlerService';\nimport appCtxService from 'js/appCtxService';\nimport localeService from 'js/localeService';\nimport messagingService from 'js/messagingService';\nconst startEditRequestedEventName = 'startEditForNewVmosRequested';\nconst saveEditsRequestedEventName = 'saveEditsRequested';\n/**\n * Publishes saveEditsRequested via eventBus.\n *\n */\n\nexport const publishSaveEditsRequested = function () {\n  eventBus.publish(saveEditsRequestedEventName);\n};\n/**\n * Keydown event listener for saveEdits.\n * On \"ctrl + s\", publishes saveEditsRequested via eventBus or saves the edit\n * handler directly if it is passed in.\n *\n * @param {Object} editHandler - the edit handler\n * @param {Function} removeSaveListener - the callback to remove savelistener on save\n * @return {Function} save listener function\n */\n\nexport const saveEditsListener = function (editHandler, removeSaveListener) {\n  return function (event) {\n    if (event.ctrlKey && (event.key === 's' || event.key === 'S')) {\n      if (editHandler) {\n        // Save the edit handler directly if it was passed in\n        editHandler.saveEdits();\n      } else {\n        publishSaveEditsRequested();\n      }\n\n      event.preventDefault();\n      removeSaveListener();\n    }\n  };\n};\n/**\n * Helper function for starting edit.\n * Call editHandler.startEdit to handle pagination/expand cases\n *\n * @param {String} editContext - the edit context for the edit handler\n */\n\nexport const startEditForNewVmos = function (editContext) {\n  const editHandler = editHandlerService.getEditHandler(editContext);\n\n  if (editHandler.editInProgress()) {\n    editHandler.startEdit();\n  }\n};\n/**\n * Publishes dataProviderName.startEditRequested  via eventBus.\n *\n * @param {object} dataProvider - the dataProvider\n */\n\nexport const publishStartEditRequested = function (dataProvider) {\n  if (dataProvider && dataProvider.name) {\n    eventBus.publish(dataProvider.name + '.' + startEditRequestedEventName);\n  }\n};\nexport default {\n  saveEditsListener,\n  startEditForNewVmos,\n  publishStartEditRequested,\n  publishSaveEditsRequested\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/editEventsService.js"],"names":["startEditRequestedEventName","saveEditsRequestedEventName","publishSaveEditsRequested","eventBus","saveEditsListener","event","editHandler","removeSaveListener","startEditForNewVmos","editHandlerService","publishStartEditRequested","dataProvider"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,kBAAA,MAAA,uBAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AAEA,MAAMA,2BAA2B,GAAjC,8BAAA;AACA,MAAMC,2BAA2B,GAAjC,oBAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,YAAW;EAChDC,QAAQ,CAARA,OAAAA,CAAAA,2BAAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,iBAAiB,GAAG,UAAA,WAAA,EAAA,kBAAA,EAA4C;EACzE,OAAO,UAAA,KAAA,EAAkB;IACrB,IAAIC,KAAK,CAALA,OAAAA,KAAmBA,KAAK,CAALA,GAAAA,KAAAA,GAAAA,IAAqBA,KAAK,CAALA,GAAAA,KAA5C,GAAIA,CAAJ,EAAkE;MAC9D,IAAA,WAAA,EAAkB;QACd;QACAC,WAAW,CAAXA,SAAAA;MAFJ,CAAA,MAGO;QACHJ,yBAAyB;MAC5B;;MACDG,KAAK,CAALA,cAAAA;MACAE,kBAAkB;IACrB;EAVL,CAAA;AADG,CAAA;AAeP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAmB,GAAG,UAAA,WAAA,EAAwB;EACvD,MAAMF,WAAW,GAAGG,kBAAkB,CAAlBA,cAAAA,CAApB,WAAoBA,CAApB;;EACA,IAAIH,WAAW,CAAf,cAAIA,EAAJ,EAAmC;IAC/BA,WAAW,CAAXA,SAAAA;EACH;AAJE,CAAA;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,yBAAyB,GAAG,UAAA,YAAA,EAAyB;EAC9D,IAAIC,YAAY,IAAIA,YAAY,CAAhC,IAAA,EAAwC;IACpCR,QAAQ,CAARA,OAAAA,CAAkBQ,YAAY,CAAZA,IAAAA,GAAAA,GAAAA,GAAlBR,2BAAAA;EACH;AAHE,CAAA;AAMP,eAAe;EAAA,iBAAA;EAAA,mBAAA;EAAA,yBAAA;EAIXD;AAJW,CAAf","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/editEventsService\n */\nimport eventBus from 'js/eventBus';\nimport editHandlerService from 'js/editHandlerService';\nimport appCtxService from 'js/appCtxService';\nimport localeService from 'js/localeService';\nimport messagingService from 'js/messagingService';\n\nconst startEditRequestedEventName = 'startEditForNewVmosRequested';\nconst saveEditsRequestedEventName = 'saveEditsRequested';\n\n/**\n * Publishes saveEditsRequested via eventBus.\n *\n */\nexport const publishSaveEditsRequested = function() {\n    eventBus.publish( saveEditsRequestedEventName );\n};\n\n/**\n * Keydown event listener for saveEdits.\n * On \"ctrl + s\", publishes saveEditsRequested via eventBus or saves the edit\n * handler directly if it is passed in.\n *\n * @param {Object} editHandler - the edit handler\n * @param {Function} removeSaveListener - the callback to remove savelistener on save\n * @return {Function} save listener function\n */\nexport const saveEditsListener = function( editHandler, removeSaveListener ) {\n    return function( event ) {\n        if( event.ctrlKey && ( event.key === 's' || event.key === 'S' ) ) {\n            if( editHandler ) {\n                // Save the edit handler directly if it was passed in\n                editHandler.saveEdits();\n            } else {\n                publishSaveEditsRequested();\n            }\n            event.preventDefault();\n            removeSaveListener();\n        }\n    };\n};\n\n/**\n * Helper function for starting edit.\n * Call editHandler.startEdit to handle pagination/expand cases\n *\n * @param {String} editContext - the edit context for the edit handler\n */\nexport const startEditForNewVmos = function( editContext ) {\n    const editHandler = editHandlerService.getEditHandler( editContext );\n    if( editHandler.editInProgress() ) {\n        editHandler.startEdit();\n    }\n};\n\n/**\n * Publishes dataProviderName.startEditRequested  via eventBus.\n *\n * @param {object} dataProvider - the dataProvider\n */\nexport const publishStartEditRequested = function( dataProvider ) {\n    if( dataProvider && dataProvider.name ) {\n        eventBus.publish( dataProvider.name + '.' + startEditRequestedEventName );\n    }\n};\n\nexport default {\n    saveEditsListener,\n    startEditForNewVmos,\n    publishStartEditRequested,\n    publishSaveEditsRequested\n};\n"]},"metadata":{},"sourceType":"module"}
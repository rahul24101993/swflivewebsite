{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service provides useful APIs for the date and Time formatting. It allows to se the default date and time format for the session.\n *\n * @module js/dateTimeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport localeSvc from 'js/localeService';\nimport cfgSvc from 'js/configurationService';\nimport AwFilterService from 'js/awFilterService';\nimport { isMatch } from 'date-fns';\nimport logger from 'js/logger';\n/**revisitme\n * Hint: config path is mocked one. we need to tune build and alias for config from assets folder\n * so we can use like, import 'config/localeDateTime'\n */\n\nimport 'config/localeDateTime'; // Beyond angular: for some untility service which is:\n// - heavily used\n// - init function is not rich\n// put them to bootstrap for now for better code design\n\nexport const FLATPICKR_ID = 'div.flatpickr-calendar';\n/**\n * Default locale specific date/time values used until login is complete.\n */\n\nvar _dateTimeLocaleInfo = {\n  is12HrFormat: false,\n  sessionDateTimeFormat: 'd-M-Y HH:mm',\n  sessionDateFormat: 'd-M-Y',\n  sessionTimeFormat: 'HH:mm'\n};\n/** Regular expression that matches a number between 0 and 59 */\n\nvar _regMinSec = /([0-5]?\\d)/;\n/**\n * @private\n */\n\nvar _englishDateTimeFormat = {\n  dateFilterFormat: 'd-M-Y HH:mm',\n  datePickerFormat: 'd-M-Y',\n  datePlaceholder: 'DD-MMM-YYYY',\n  timePlaceholder: 'HH:MM',\n  monthAfterYear: false,\n  dayOfWeekAfterDay: false\n};\n/**\n * @private\n */\n\nvar _englishDateFormat = {\n  dateFilterFormat: 'd-M-Y',\n  datePickerFormat: 'd-M-Y',\n  datePlaceholder: 'DD-MMM-YYYY',\n  timePlaceholder: '',\n  monthAfterYear: false,\n  dayOfWeekAfterDay: false\n};\n/**\n * @private\n */\n\nvar _englishTimeFormat = {\n  dateFilterFormat: 'HH:mm',\n  datePickerFormat: '',\n  datePlaceholder: '',\n  timePlaceholder: 'HH:MM',\n  monthAfterYear: false,\n  dayOfWeekAfterDay: false\n};\n/**\n * @private\n */\n\nvar _i18n_anteMeridiem = 'AM';\n/**\n * @private\n */\n\nvar _i18n_postMeridiem = 'PM';\n/**\n * Regular expression value to extract segments of a 12 hour time entry\n *\n * @private\n */\n\nvar _regPattern12 = null;\n/**\n * Regular expression value to extract segments of a 24 hour time entry\n *\n * @private\n */\n\nvar _regPattern24 = null;\n/**\n * @private\n */\n\nvar _localePlaceholders = {};\n/**\n * @private\n */\n\nvar _datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n/**\n * @private\n */\n\nvar _datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n/**\n * TRUE if the i18N requires the month to be shown after the year in the JQuery datePicker.\n *\n * @private\n */\n\nvar _showMonthAfterYear = _englishDateTimeFormat.showMonthAfterYear;\n/**\n * @private\n */\n\nvar _timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n/**\n * List of 24 hour time selections (in current 12/24 hour format).\n *\n * @private\n */\n\nvar _timeLovEntries = null;\n/**\n * @private\n */\n\nvar _dateFilterFormat = _englishDateFormat.dateFilterFormat;\n/**\n * Function to build the list of time values in the drop down list of (aw-property-time-val) UI.\n *\n * @private\n *\n * @returns {LovEntry[]} An array of 'lovEntry' populated with the internal an display values.\n */\n\nvar _buildTimeLovEntries = function () {\n  var lovEntries = [];\n\n  var _pad = function (number) {\n    if (number < 10) {\n      return '0' + number;\n    }\n\n    return number;\n  };\n\n  var msHr = 1000 * 60 * 60;\n  var msLimit = msHr * 24;\n  var msInc = 1000 * 60 * 30;\n\n  for (var msTime = 0; msTime < msLimit; msTime += msInc) {\n    var date = new Date(msTime);\n    var utcHours = date.getUTCHours();\n    var utcMinutes = date.getUTCMinutes();\n    var mer;\n    var disp;\n\n    if (_dateTimeLocaleInfo.is12HrFormat) {\n      if (utcHours < 12) {\n        if (utcHours === 0) {\n          utcHours += 12;\n        }\n\n        mer = _i18n_anteMeridiem;\n      } else {\n        if (utcHours > 12) {\n          utcHours -= 12;\n        }\n\n        mer = _i18n_postMeridiem;\n      }\n\n      disp = _pad(utcHours) + ':' + _pad(utcMinutes) + ' ' + mer;\n    } else {\n      disp = _pad(utcHours) + ':' + _pad(utcMinutes);\n    }\n\n    var lovEntry = {\n      propInternalValue: msTime,\n      propDisplayValue: disp\n    };\n    lovEntries.push(lovEntry);\n  }\n\n  return lovEntries;\n};\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 12 hours, optional\n *         minutes, optional seconds and optional meridiem.\n */\n\n\nvar _getTimePattern12Hr = function () {\n  if (!_regPattern12) {\n    var _regHr12 = /(1[012]|0\\d|\\d)/;\n    var _regGap = /\\s*/;\n\n    var _regMeridiem = new RegExp('(' + _i18n_anteMeridiem + //\n    '|' + _i18n_postMeridiem + '|a|p|am|pm' + ')?');\n    /** hh:mm:ss a */\n\n\n    var _reg12HrMnSec = new RegExp('(^' + _regHr12.source + //\n    ':' + _regMinSec.source + ':' + _regMinSec.source + //\n    _regGap.source + _regMeridiem.source + '$)');\n    /** hh:mm a */\n\n\n    var _reg12HrMin = new RegExp('(^' + _regHr12.source + //\n    ':' + _regMinSec.source + _regGap.source + //\n    _regMeridiem.source + '$)');\n    /** hh a */\n\n\n    var _reg12Hr = new RegExp('(^' + _regHr12.source + //\n    _regGap.source + _regMeridiem.source + '$)'); // aggregate of all sub expressions\n\n\n    _regPattern12 = new RegExp(_reg12HrMnSec.source + //\n    '|' + _reg12HrMin.source + '|' + _reg12Hr.source);\n  }\n\n  return _regPattern12;\n};\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 24 hours, optional minutes\n *         and optional seconds.\n */\n\n\nvar _getTimePattern24Hr = function () {\n  if (!_regPattern24) {\n    var _regHr24 = /([0-1]?\\d|2[0-3])/;\n    /** HH:mm:ss : https://regex101.com/ */\n\n    var _reg24HrMnSec = new RegExp('(^' + _regHr24.source + //\n    ':' + _regMinSec.source + ':' + _regMinSec.source + '$)');\n    /** HH:mms */\n\n\n    var _reg24HrMin = new RegExp('(^' + _regHr24.source + //\n    ':' + _regMinSec.source + '$)');\n    /** HH */\n\n\n    var _reg24Hr = new RegExp('(^' + _regHr24.source + '$)'); // aggregate of all sub expressions\n\n\n    _regPattern24 = new RegExp(_reg24HrMnSec.source + //\n    '|' + _reg24HrMin.source + '|' + _reg24Hr.source);\n  }\n\n  return _regPattern24;\n};\n/**\n * Function to validate normalized time\n *\n * @private\n *\n * @param {String} normalizedTimeString - normalized time string\n *\n * @return {Boolean}\n */\n\n\nvar isNormalizedTimeValid = function (normalizedTimeString) {\n  let timeString = normalizedTimeString;\n\n  if (!timeString.includes(':') || !isMatch(timeString, getTimeFilterFormat())) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Function to tokenize the time input.\n *\n * @private\n *\n * @param {String} timeString - Time string to tokenize in 'hh:mmm:ss a' format.\n *\n * @return {Number[]} Array of integers representing extracted hours, minutes and seconds.\n */\n\n\nvar _tokenizeTime = function (timeString) {\n  if (!isNormalizedTimeValid(timeString)) {\n    return null;\n  }\n\n  var time_AmPm = timeString.split(' ');\n  var hour_minuteArray = time_AmPm[0].split(/[:aApP\\s]+/);\n  var hour = 0;\n\n  if (hour_minuteArray.length > 0) {\n    hour = parseInt(hour_minuteArray[0], 10);\n\n    if (_dateTimeLocaleInfo.is12HrFormat) {\n      if (time_AmPm[1] === _i18n_postMeridiem) {\n        hour += 12;\n\n        if (hour >= 24) {\n          hour = 0;\n        }\n      }\n    }\n\n    if (hour > 23) {\n      hour = 23;\n    }\n  }\n\n  var minute = 0;\n\n  if (hour_minuteArray.length > 1) {\n    minute = parseInt(hour_minuteArray[1], 10);\n\n    if (minute > 59) {\n      minute = 59;\n    }\n  }\n\n  var second = 0;\n\n  if (hour_minuteArray.length > 2) {\n    second = parseInt(hour_minuteArray[2], 10);\n\n    if (isNaN(second)) {\n      second = 0;\n    }\n\n    if (second > 59) {\n      second = 59;\n    }\n  }\n\n  var splitTimeData = [];\n  splitTimeData[0] = hour;\n  splitTimeData[1] = minute;\n  splitTimeData[2] = second;\n  return splitTimeData;\n};\n/**\n * @param {String} dateFormat - The string from the TextServer used to construct the return date and/or time Format.\n *\n * @param {Boolea} includeDate - TRUE if date should be included in the format\n *\n * @param {Boolean} includeTime - TRUE if time should be included in the format\n *\n * @return {Object} An object with properties:<br>\n *         'dateFilterFormat' set with the converted pattern compatible with AngularJS \"$filter('date')\"\n *         <p>\n *         'datePickerFormat' set with the converted pattern compatible with the 'dateFormat' property (in the\n *         'options' object) and 'formatDate' and 'parseDate' functions of JQueryUI's 'datePicker'.\n *         <p>\n *         'datePlaceholder' set with i18N text to display in an empty date input field.\n *         <p>\n *         'timePlaceholder' set with i18N text to display in an empty time input field.\n *         <p>\n *         'monthAfterYear' set with TRUE if the i18N requires the month to be shown after the year in the JQuery\n *         datePicker.\n */\n\n\nvar _getDateFormatByServerString = function (dateFormat, includeDate, includeTime) {\n  // eslint-disable-line complexity\n  var dateFilterFormat = '';\n  var datePickerFormat = '';\n  var datePlaceholder = '';\n  var timePlaceholder = '';\n\n  var localePlaceHolder = _localePlaceholders[localeSvc.getLocale()] || _localePlaceholders.en_US;\n\n  var monthAfterYear = localePlaceHolder.monthAfterYear;\n  _dateTimeLocaleInfo.is12HrFormat = false;\n\n  if (dateFormat && dateFormat.length > 0) {\n    var containsSeconds = dateFormat.indexOf('%S') !== -1;\n    var format = dateFormat.trim();\n    var formatLength = format.length;\n\n    for (var i = 0; i < formatLength; i++) {\n      var c = format.charAt(i);\n\n      switch (c) {\n        case '%':\n          // ignore printf-specific char\n          break;\n\n        case 'd':\n          if (includeDate) {\n            // d: day of the month(0-31) -> dd: day in month (two digits)\n            dateFilterFormat = dateFilterFormat.concat('dd');\n            datePickerFormat = datePickerFormat.concat('d');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.day);\n          }\n\n          break;\n\n        case 'b':\n          if (includeDate) {\n            // b: abbreviated month name -> MMM: month in year (full month name) not supported by Java.\n            dateFilterFormat = dateFilterFormat.concat('MMM');\n            datePickerFormat = datePickerFormat.concat('M');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.month_3);\n          }\n\n          break;\n\n        case 'B':\n          if (includeDate) {\n            // B: full month name -> MMMMM: month in year (full month name)\n            dateFilterFormat = dateFilterFormat.concat('MMMM');\n            datePickerFormat = datePickerFormat.concat('M');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.month_4);\n          }\n\n          break;\n\n        case 'm':\n          if (includeDate) {\n            // m: month(01-12) -> MM: month in year (two digits)\n            dateFilterFormat = dateFilterFormat.concat('MM');\n            datePickerFormat = datePickerFormat.concat('m');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.month_2);\n          }\n\n          break;\n\n        case 'y':\n          if (includeDate) {\n            // y: year without century(00-99) -> yy: year (two digits).\n            dateFilterFormat = dateFilterFormat.concat('yy');\n            datePickerFormat = datePickerFormat.concat('y');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.year_2);\n          }\n\n          break;\n\n        case 'Y':\n          if (includeDate) {\n            // Y: year with century(1970-2069) ->yyyy: year (four digits)\n            dateFilterFormat = dateFilterFormat.concat('yyyy');\n            datePickerFormat = datePickerFormat.concat('yy');\n            datePlaceholder = datePlaceholder.concat(localePlaceHolder.year_4);\n          }\n\n          break;\n\n        case 'H':\n          if (includeTime) {\n            // H: hour(24-hour clock)(00-23) ->HH: hour in day (0~23) (two digits)\n            dateFilterFormat = dateFilterFormat.concat('HH');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.hours);\n          }\n\n          break;\n\n        case 'I':\n          if (includeTime) {\n            _dateTimeLocaleInfo.is12HrFormat = true; // I: hour(12-hour clock)(01-12) ->hh: hour in am/pm (1~12) (two digits)\n\n            dateFilterFormat = dateFilterFormat.concat('hh');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.hours);\n          }\n\n          break;\n\n        case 'M':\n          if (includeTime) {\n            // M: minute(00-59) -> mm: minute in hour (two digits)\n            dateFilterFormat = dateFilterFormat.concat('mm');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.minutes);\n            /**\n             * Note: This is a little 'odd' but the placeholder has to have 'seconds' in it even if the\n             * general display for time does not.\n             */\n\n            if (!containsSeconds) {\n              timePlaceholder = timePlaceholder.concat(':' + localePlaceHolder.seconds);\n            }\n          }\n\n          break;\n\n        case 'S':\n          if (includeTime) {\n            // S: second(00-59) -> ss: second in minute (two digits)\n            dateFilterFormat = dateFilterFormat.concat('ss');\n            timePlaceholder = timePlaceholder.concat(localePlaceHolder.seconds);\n          }\n\n          break;\n\n        default:\n          // If \":\" exists in the format, assume it must be a separator for time.\n          if (!includeTime && c === ':') {\n            break;\n          } // If \"-\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === '-') {\n            break;\n          } // If \".\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === '.') {\n            break;\n          } // If \"/\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === '/') {\n            break;\n          } // If \",\" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === ',') {\n            break;\n          } // If \" \" exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && c === ' ') {\n            break;\n          } // If \"年\" (year) \"月\" (month) or \"日\" (day) exists in the format, assume it must be a separator for date.\n\n\n          if (!includeDate && (c === '年' || c === '月' || c === '日')) {\n            break;\n          }\n\n          dateFilterFormat += c;\n\n          if (c === ':') {\n            timePlaceholder += c;\n          }\n\n          if (c === '-' || c === '.' || c === '/' || c === ',' || c === ' ') {\n            datePickerFormat += c;\n            datePlaceholder += c;\n          }\n\n          break;\n      }\n    }\n  } else {\n    if (includeDate) {\n      if (includeTime) {\n        dateFilterFormat = _englishDateTimeFormat.dateFilterFormat;\n        datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n        datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n        timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n        monthAfterYear = _englishDateTimeFormat.monthAfterYear;\n      } else {\n        dateFilterFormat = _englishDateFormat.dateFilterFormat;\n        datePickerFormat = _englishDateFormat.datePickerFormat;\n        datePlaceholder = _englishDateFormat.datePlaceholder;\n        timePlaceholder = _englishDateFormat.timePlaceholder;\n        monthAfterYear = _englishDateFormat.monthAfterYear;\n      }\n    } else if (includeTime) {\n      dateFilterFormat = _englishTimeFormat.dateFilterFormat;\n      datePickerFormat = _englishTimeFormat.datePickerFormat;\n      datePlaceholder = _englishTimeFormat.datePlaceholder;\n      timePlaceholder = _englishTimeFormat.timePlaceholder;\n      monthAfterYear = _englishTimeFormat.monthAfterYear;\n    }\n  }\n  /**\n   * Insert AM/PM indicator (if necessary)<BR>\n   * If so: Insert it after either seconds, minutes or hours.\n   */\n\n\n  if (_dateTimeLocaleInfo.is12HrFormat && includeTime) {\n    var ndx = dateFilterFormat.lastIndexOf('ss');\n\n    if (ndx !== -1) {\n      dateFilterFormat = dateFilterFormat.substring(0, ndx + 2) + ' a' + dateFilterFormat.substring(ndx + 2);\n    } else {\n      ndx = dateFilterFormat.lastIndexOf('mm');\n\n      if (ndx !== -1) {\n        dateFilterFormat = dateFilterFormat.substring(0, ndx + 2) + ' a' + dateFilterFormat.substring(ndx + 2);\n      } else {\n        ndx = dateFilterFormat.lastIndexOf('hh');\n\n        if (ndx !== -1) {\n          dateFilterFormat = dateFilterFormat.substring(0, ndx + 2) + ' a' + dateFilterFormat.substring(ndx + 2);\n        }\n      }\n    }\n  }\n\n  return {\n    dateFilterFormat: dateFilterFormat.trim(),\n    datePickerFormat: datePickerFormat.trim(),\n    datePlaceholder: datePlaceholder.trim(),\n    timePlaceholder: timePlaceholder.trim(),\n    monthAfterYear: monthAfterYear\n  };\n};\n\nlet exports;\n\nvar _setupDateTimeLocaleInfo = function () {\n  let filter = AwFilterService.instance;\n\n  if (!_nullLocalDateString) {\n    _nullLocalDateString = filter('date')(_nullLocalDate, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ');\n  }\n\n  localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages').then(textBundle => {\n    if (!textBundle) {\n      logger.info('Unable to load dateTimeServiceMessages textBundle');\n      return;\n    }\n\n    _i18n_anteMeridiem = textBundle.anteMeridiem;\n    _i18n_postMeridiem = textBundle.postMeridiem; //revisitme: AwLocaleService is not available\n    // let locale = AwLocaleService.instance;\n\n    let locale;\n\n    if (locale) {\n      locale.id = localeSvc.getLocale();\n      locale.DATETIME_FORMATS.AMPMS = [textBundle.anteMeridiem, textBundle.postMeridiem];\n      locale.DATETIME_FORMATS.DAY = [textBundle.dayName_01, textBundle.dayName_02, textBundle.dayName_03, textBundle.dayName_04, textBundle.dayName_05, textBundle.dayName_06, textBundle.dayName_07];\n      locale.DATETIME_FORMATS.MONTH = [textBundle.monthName_01, textBundle.monthName_02, textBundle.monthName_03, textBundle.monthName_04, textBundle.monthName_05, textBundle.monthName_06, textBundle.monthName_07, textBundle.monthName_08, textBundle.monthName_09, textBundle.monthName_10, textBundle.monthName_11, textBundle.monthName_12];\n      locale.DATETIME_FORMATS.SHORTDAY = [textBundle.dayNameShort_01, textBundle.dayNameShort_02, textBundle.dayNameShort_03, textBundle.dayNameShort_04, textBundle.dayNameShort_05, textBundle.dayNameShort_06, textBundle.dayNameShort_07];\n      locale.DATETIME_FORMATS.SHORTMONTH = [textBundle.monthNameShort_01, textBundle.monthNameShort_02, textBundle.monthNameShort_03, textBundle.monthNameShort_04, textBundle.monthNameShort_05, textBundle.monthNameShort_06, textBundle.monthNameShort_07, textBundle.monthNameShort_08, textBundle.monthNameShort_09, textBundle.monthNameShort_10, textBundle.monthNameShort_11, textBundle.monthNameShort_12];\n    }\n\n    eventBus.publish('dateTime.changed', _dateTimeLocaleInfo);\n  }).catch(err => {\n    logger.error(err);\n  });\n  localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.anteMeridiem').then(result => {\n    _i18n_anteMeridiem = result;\n    eventBus.publish('dateTime.changed', _dateTimeLocaleInfo);\n  });\n  localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.postMeridiem').then(result => {\n    _i18n_postMeridiem = result;\n    eventBus.publish('dateTime.changed', _dateTimeLocaleInfo);\n  });\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {Number} The numeric value corresponding to the time for the given date according to universal time.\n */\n\n\nvar _getDateTime = function (dateToFormat) {\n  var dateTime;\n\n  if (!dateToFormat) {\n    return dateTime;\n  }\n\n  if (_.isString(dateToFormat) || _.isNumber(dateToFormat)) {\n    dateTime = dateToFormat;\n  } else {\n    dateTime = dateToFormat.getTime();\n  }\n\n  return dateTime;\n};\n/**\n * {String} Null date/time string for 1 Jan, 0001 at midnight GMT.\n * @ignore\n */\n\n\nexport let NULLDATE = '0001-01-01T00:00:00+00:00';\n/**\n * Definition of 'null' or 'not yet set' date time.\n * <P>\n * Same value as AW's IDateService.getNullLocalDate().\n *\n * @private\n */\n\nvar _nullGmtDate = new Date(NULLDATE);\n/**\n * @private\n */\n\n\nvar offset = _nullGmtDate.getTimezoneOffset();\n/**\n * @private\n */\n\n\nvar _nullGmtTime = _getDateTime(_nullGmtDate);\n/**\n * @private\n */\n\n\nvar _nullLocalDateString;\n/**\n   * @private\n   */\n\n\nvar _nullLocalDate = new Date(_nullGmtTime + offset * 60 * 1000);\n/**\n   */\n\n/**\n * @private\n */\n\n\nvar _epochDate = new Date(0);\n/**\n * ************************************<BR>\n * ***** Define service API <BR>\n * ************************************<BR>\n */\n\n/**\n * @return {Promise} TODO\n *\n *@ignore\n */\n\n\nexport let getJQueryDatePickerTextBundle = async function () {\n  await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.');\n  return {\n    closeText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.closeText'),\n    prevText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.prevText'),\n    nextText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.nextText'),\n    currentText: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.currentText'),\n    monthNames: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_07'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_08'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_09'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_10'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_11'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthName_12')],\n    monthNamesShort: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_07'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_08'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_09'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_10'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_11'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.monthNameShort_12')],\n    dayNames: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayName_07')],\n    dayNamesShort: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameShort_07')],\n    dayNamesMin: [await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_01'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_02'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_03'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_04'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_05'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_06'), await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.dayNameMin_07')],\n    weekHeader: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.weekHeader'),\n    dateFormat: _datePickerFormat,\n    firstDay: 1,\n    isRTL: false,\n    showMonthAfterYear: _showMonthAfterYear,\n    yearSuffix: await localeSvc.getLocalizedTextFromKey('dateTimeServiceMessages.yearSuffix')\n  };\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date of the given Date object formatted according to current user session format.\n */\n\nexport let formatDate = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getDateFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to current user session\n *          format.\n */\n\nexport let formatDateTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getDateTimeFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format.\n */\n\nexport let formatTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getTimeFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format\n *          and meant for display in an lovEntry (i.e. without 'seconds').\n * @ignore\n */\n\nexport let formatTimeLovEntry = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, exports.getTimeLovEntryFilterFormat());\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatSessionDateTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var formattedDate = '';\n\n    var dateValue = _getDateTime(dateToFormat);\n\n    if (_.isNumber(dateValue) || _.isString(dateValue)) {\n      formattedDate = filter('date')(dateValue, exports.getSessionDateTimeFormat());\n    } else if (_.isDate(dateValue)) {\n      formattedDate = filter('date')(_getDateTime(dateValue), exports.getSessionDateTimeFormat());\n    }\n\n    return formattedDate.toString().trim();\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatSessionDate = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var format = exports.getSessionDateFormat();\n\n    if (format.length > 0) {\n      return filter('date')(dateValue, exports.getSessionDateFormat());\n    }\n\n    return '';\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The time portion of the given Date object formatted according to current user session format.\n */\n\nexport let formatSessionTime = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var format = exports.getSessionTimeFormat();\n\n    if (format.length > 0) {\n      return filter('date')(dateValue, exports.getSessionTimeFormat());\n    }\n\n    return '';\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: Tuesday-Sep 27\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date of the given Date object formatted according to current user session format.\n */\n\nexport let formatWeekdayMonthAndDayOfMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var dayOfWeek = filter('date')(dateValue, 'EEEE');\n    var month = exports.formatAbbreviatedMonth(dateValue);\n    var dayOfMonth = exports.formatFullDayOfMonth(dateValue);\n    var locale = localeSvc.getLocale();\n\n    if (_localePlaceholders[locale].dayOfWeekAfterDay) {\n      return month + _localePlaceholders[locale].monthDaySeparator + dayOfMonth + _localePlaceholders[locale].dayOfWeekSeparator + dayOfWeek;\n    }\n\n    return dayOfWeek + _localePlaceholders[locale].dayOfWeekSeparator + month + _localePlaceholders[locale].monthDaySeparator + dayOfMonth;\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: 27\n * <P>\n * Note: In some locales (i.e. ja_JP) there are extra symbols added to this number. This function will handle this\n * case.\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatFullDayOfMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    var dayOfMonth = filter('date')(dateValue, 'dd');\n    var locale = localeSvc.getLocale();\n\n    if (_localePlaceholders[locale].fullDayOfMonth) {\n      dayOfMonth += _localePlaceholders[locale].day;\n    }\n\n    return dayOfMonth;\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatAbbreviatedMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, 'MMM');\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\n\nexport let formatFullMonth = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, 'MMMM');\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to UTC format.\n */\n\nexport let formatUTC = function (dateToFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ');\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @param {String} dateFormat - format. This is a EWI data collection object time stamp format.\n *\n * @returns {String} The date & time of the given Date object formatted according to the input dateFormat.\n */\n\nexport let formatNonStandardDate = function (dateToFormat, dateFormat) {\n  if (exports.isNullDate(dateToFormat)) {\n    return '';\n  }\n\n  let filter = AwFilterService.instance;\n\n  if (filter) {\n    var dateValue = _getDateTime(dateToFormat);\n\n    return filter('date')(dateValue, dateFormat);\n  }\n\n  return dateToFormat.toString();\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\n\nexport let getDateFilterFormat = function () {\n  return _dateFilterFormat;\n};\n/**\n * Format compatible with the 'dateFormat' property (in the 'options' object) and 'formatDate' and 'parseDate'\n * functions of JQueryUI's 'datePicker'.\n * <P>\n * Examples: <BR>\n * Format 'd-M-yy' would return \"01-Apr-2016\"<BR>\n * Format 'mm.dd.yy' would return \"04.01.2016\"<BR>\n *\n * @return {String} Date entry format for use in JQueryUI's datepicker API.\n */\n\nexport let getDateFormat = function () {\n  return _datePickerFormat;\n};\n/**\n * @return {String} User oriented text used to indicate the required format of the date entry (i.e. \"yy.mm.dd\",\n *         \"day-month-year\", etc.).\n */\n\nexport let getDateFormatPlaceholder = function () {\n  return _datePlaceholder;\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\n\nexport let getDateTimeFilterFormat = function () {\n  return exports.getDateFilterFormat() + _localePlaceholders[localeSvc.getLocale()].dateTimeSeparator + exports.getTimeFilterFormat();\n};\n/**\n * @param {DateTimeApi} dateApi - Object containing the current date/time context.\n *\n * @return {Date} Date object set to either 'today' or to 'minDate' or 'maxDate' if 'today' is outside those ranges.\n *         The 'minDate' or 'maxDate' will be chosen based on which of those values 'today' is closer to.\n * @ignore\n */\n\nexport let getDefaultDate = function (dateApi) {\n  var defaultDate;\n  var limitDate;\n\n  if (dateApi.isTimeEnabled) {\n    if (dateApi.isDateEnabled) {\n      /**\n       * Deal with date & time\n       *\n       * @private\n       */\n      defaultDate = new Date();\n      defaultDate.setHours(0);\n      defaultDate.setMinutes(0);\n      defaultDate.setSeconds(0);\n\n      if (dateApi.minDate && defaultDate < dateApi.minDate) {\n        return dateApi.minDate;\n      }\n\n      if (dateApi.maxDate && defaultDate > dateApi.maxDate) {\n        return dateApi.maxDate;\n      }\n    } else {\n      /**\n       * Deal with time only. Set to 'epoch' and then set hours/mins/secs\n       * @private\n       */\n      defaultDate = new Date(0);\n      defaultDate.setHours(0);\n      defaultDate.setMinutes(0);\n      defaultDate.setSeconds(0);\n\n      if (dateApi.minDate) {\n        limitDate = new Date(0);\n        var jsMinDate = exports.getJSDate(dateApi.minDate);\n        limitDate.setHours(jsMinDate.getHours());\n        limitDate.setMinutes(jsMinDate.getMinutes());\n        limitDate.setSeconds(jsMinDate.getSeconds());\n\n        if (defaultDate < limitDate) {\n          return limitDate;\n        }\n      }\n\n      if (dateApi.maxDate) {\n        limitDate = new Date(0);\n        var jsMaxDate = exports.getJSDate(dateApi.maxDate);\n        limitDate.setHours(jsMaxDate.getHours());\n        limitDate.setMinutes(jsMaxDate.getMinutes());\n        limitDate.setSeconds(jsMaxDate.getSeconds());\n\n        if (defaultDate > limitDate) {\n          return limitDate;\n        }\n      }\n    }\n  } else {\n    if (dateApi.isDateEnabled) {\n      /**\n       * Deal with date only. Set to hours/mins/secs to midnight local time.\n       *\n       * @private\n       */\n      defaultDate = new Date();\n      defaultDate.setHours(0);\n      defaultDate.setMinutes(0);\n      defaultDate.setSeconds(0);\n\n      if (dateApi.minDate) {\n        limitDate = exports.getJSDate(dateApi.minDate);\n        limitDate.setHours(0);\n        limitDate.setMinutes(0);\n        limitDate.setSeconds(0);\n\n        if (defaultDate < limitDate) {\n          return limitDate;\n        }\n      }\n\n      if (dateApi.maxDate) {\n        limitDate = exports.getJSDate(dateApi.maxDate);\n        limitDate.setHours(0);\n        limitDate.setMinutes(0);\n        limitDate.setSeconds(0);\n\n        if (defaultDate > limitDate) {\n          return limitDate;\n        }\n      }\n    } else {\n      defaultDate = exports.getNullDate();\n    }\n  }\n\n  return defaultDate;\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n * @ignore\n */\n\nexport let getEnglishDateTimeFormat = function () {\n  return _englishDateTimeFormat.dateFilterFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n * @ignore\n */\n\nexport let getEnglishDateFormat = function () {\n  return _englishDateFormat.dateFilterFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n * @ignore\n */\n\nexport let getEnglishTimeFormat = function () {\n  return _englishTimeFormat.dateFilterFormat;\n};\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'epoch' or '1-Jan-1970 00:00:00\n *         GMT' value.\n * @ignore\n */\n\nexport let getEpochDate = function () {\n  return _epochDate;\n};\n/**\n * @param {Number} timeValue - Milliseconds since unix 'epoch'.\n *\n * @returns {Date} The given string value converted into a time on 'January 1, 0001' (or NULL if the string contains\n *          an invalid time format).\n */\n\nexport let getDateFromTimeValue = function (timeValue) {\n  if (!timeValue) {\n    return exports.getNullDate();\n  }\n\n  var trim = timeValue.trim();\n  /**\n   * Remove any trailing ':' before trying to match the pattern\n   */\n\n  if (trim.length > 0 && trim.charAt(trim.length - 1) === ':') {\n    trim = trim.substring(0, trim.length - 1);\n  }\n\n  var pattern = _dateTimeLocaleInfo.is12HrFormat ? _getTimePattern12Hr() : _getTimePattern24Hr();\n  var matches = trim.match(pattern);\n\n  if (matches) {\n    var fields = {};\n\n    if (_dateTimeLocaleInfo.is12HrFormat) {\n      if (matches[1]) {\n        fields.disp = matches[1];\n        fields.hr = matches[2];\n        fields.min = matches[3];\n        fields.sec = matches[4];\n        fields.mer = matches[5];\n      } else if (matches[6]) {\n        fields.disp = matches[6];\n        fields.hr = matches[7];\n        fields.min = matches[8];\n        fields.mer = matches[9];\n        fields.sec = '0';\n      } else if (matches[10]) {\n        fields.disp = matches[10];\n        fields.hr = matches[11];\n        fields.min = '0';\n        fields.sec = '0';\n        fields.mer = matches[12];\n      }\n      /**\n       * If no meridiem, assume PM\n       */\n\n\n      if (!fields.mer) {\n        fields.mer = _i18n_postMeridiem;\n      }\n\n      fields.mer = fields.mer.toLowerCase();\n\n      if (fields.mer === _i18n_postMeridiem.toLowerCase() || fields.mer === 'p' || fields.mer === 'pm') {\n        fields.hr = parseInt(fields.hr, 10) + 12;\n\n        if (fields.hr >= 24) {\n          fields.hr = '0';\n        } else {\n          fields.hr = fields.hr.toString();\n        }\n      }\n    } else {\n      if (matches[1]) {\n        fields.disp = matches[1];\n        fields.hr = matches[2];\n        fields.min = matches[3];\n        fields.sec = matches[4];\n      } else if (matches[5]) {\n        fields.disp = matches[5];\n        fields.hr = matches[6];\n        fields.min = matches[7];\n        fields.sec = '0';\n      } else if (matches[8]) {\n        fields.disp = matches[0];\n        fields.hr = matches[8];\n        fields.min = '0';\n        fields.sec = '0';\n      }\n    }\n\n    if (fields.hr) {\n      return new Date('0001', 0, 1, fields.hr, fields.min, fields.sec);\n    }\n  }\n\n  return null;\n};\n/**\n * @param {String} timeValue - in HH:MM:SS format\n * @returns coverted time from a HH:MM:SS format to ms\n */\n\nlet getTimeInMs = function (timeValue) {\n  if (timeValue === null) {\n    return null;\n  }\n\n  let hourInMSec = timeValue[0] * 60 * 60 * 1000;\n  let minInMSec = timeValue[1] * 60 * 1000;\n  let mSec = timeValue[2] * 1000;\n  return hourInMSec + minInMSec + mSec;\n};\n/**\n * @param {*} timeValue - 'x' or 'x:y' or 'x:y:z' format\n * @returns coverted time from a string to ms\n */\n\n\nexport let getTimeInMilliSec = timeValue => {\n  if (!_.isString(timeValue) || timeValue === '') {\n    return timeValue;\n  }\n\n  let normalizedTime = normalizeTimeString(timeValue);\n  return getTimeInMs(_tokenizeTime(normalizedTime));\n};\n/**\n * Returns a new Date object based on the given Date object or value.\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser. The 'null date' used in AW\n * did not always create a valid Date object.\n *\n * @param {Object} dateToTest - Object that MAY be a JS Date or MAY be the number of milliseconds since 'epoch'.\n *\n * @return {Date} A new JS Date object based on the given object (or 'null' date if no other JS date possible).\n * @ignore\n */\n\nexport let getJSDate = function (dateToTest) {\n  /**\n   * D-24274: Date Array LOV fails to clear field<BR>\n   * On Firefox, When the 'dateToTest' has the 'null' date value, the 'new Date()' constructor creates an invalid\n   * Date object. This causes 'NaN' problems later when we try to get a formatted string from this invalid Date.\n   * <P>\n   * We check here for that case and create a date based on the 'null' date time value.\n   */\n  if (exports.isNullDate(dateToTest)) {\n    return new Date(_getDateTime(_nullLocalDate));\n  }\n\n  var jsDate = null;\n\n  try {\n    jsDate = new Date(dateToTest);\n  } finally {\n    if (!jsDate) {\n      jsDate = new Date(_getDateTime(_nullLocalDate));\n    }\n  }\n\n  return jsDate;\n};\n/**\n * @param {String} timeValue - String value to test.\n *\n * @returns {String} The given string value now cleaned of any invalid characters.\n * @ignore\n */\n\nexport let getNormalizedTimeValue = function (timeValue) {\n  if (isMatch(timeValue, 'dd-MMM-yyyy HH:mm')) {\n    return '';\n  }\n\n  var nDate = exports.getDateFromTimeValue(timeValue);\n\n  if (nDate) {\n    return exports.formatTime(nDate);\n  }\n\n  return timeValue;\n};\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'null' or 'not yet set' value.\n */\n\nexport let getNullDate = function () {\n  return _nullLocalDate;\n};\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\n\nexport let getSessionDateTimeFormat = function () {\n  return _dateTimeLocaleInfo.sessionDateTimeFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n */\n\nexport let getSessionDateFormat = function () {\n  return _dateTimeLocaleInfo.sessionDateFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\n\nexport let getSessionTimeFormat = function () {\n  return _dateTimeLocaleInfo.sessionTimeFormat;\n};\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\n\nexport let getTimeFilterFormat = function () {\n  if (_dateTimeLocaleInfo.is12HrFormat) {\n    return 'hh:mm:ss a';\n  }\n\n  return 'HH:mm:ss';\n};\n/**\n * @return {String} AngularJS $filter format to display a time lovEntry in.\n * @ignore\n */\n\nexport let getTimeLovEntryFilterFormat = function () {\n  if (_dateTimeLocaleInfo.is12HrFormat) {\n    return 'hh:mm a';\n  }\n\n  return 'HH:mm';\n};\n/**\n * @return {String} User oriented text used to indicate the required format of the time entry (i.e. \"12:00 AM\",\n *         \"Hours:Minutes\", etc.).\n */\n\nexport let getTimeFormatPlaceholder = function () {\n  var timePlaceholder = _timePlaceholder;\n\n  if (_dateTimeLocaleInfo.is12HrFormat) {\n    timePlaceholder = timePlaceholder.concat(' ' + _i18n_anteMeridiem + '/' + _i18n_postMeridiem);\n  }\n\n  return timePlaceholder;\n};\n/**\n * @returns {LovEntry[]} current list of time slots.\n * @ignore\n */\n\nexport let getTimeLovEntries = function () {\n  if (!_timeLovEntries) {\n    _timeLovEntries = _buildTimeLovEntries();\n  }\n\n  let objectValue = {};\n  objectValue.timeList = _timeLovEntries;\n  return objectValue;\n};\n/**\n * @param {Object} dateToTest - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @return {Boolean} TRUE if the given test object represents the same date/time as the special 'null' or 'not yet\n *         set' value.\n */\n\nexport let isNullDate = function (dateToTest) {\n  if (!dateToTest) {\n    return true;\n  }\n\n  var dateTime;\n\n  if (_.isString(dateToTest)) {\n    dateTime = dateToTest;\n    return dateTime === _nullLocalDateString || dateTime === exports.NULLDATE;\n  }\n\n  if (_.isNumber(dateToTest)) {\n    dateTime = dateToTest;\n  } else {\n    dateTime = _getDateTime(dateToTest);\n  }\n\n  return dateTime === _getDateTime(_nullLocalDate) || dateTime === _nullGmtTime;\n};\n/**\n * @param {Date} date1 - 1st date to compare.\n *\n * @param {Date} date2 - 2nd date to compare.\n *\n * @return {Number} The value <code>0</code> if the 'date2' is equal to 'date1'; a value less than <code>0</code>\n *         if 'date1' is less than 'date2'; and a value greater than <code>0</code> if 'date1' is greater than\n *         'date2'.\n */\n\nexport let compare = function (date1, date2) {\n  var date1Final = date1; // Note: Current dbValue could be a JavaUtil class from GWT\n\n  if (date1Final && date1Final.constructor !== Date) {\n    date1Final = new Date(date1);\n  }\n\n  if (exports.isNullDate(date1Final)) {\n    if (date2 && !exports.isNullDate(date2)) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  if (exports.isNullDate(date2)) {\n    return 1;\n  }\n\n  var diff = _getDateTime(date1Final) - _getDateTime(date2);\n\n  if (diff === 0) {\n    return 0;\n  }\n\n  if (diff > 0) {\n    return 1;\n  }\n\n  return -1;\n};\n/**\n * @param {String} timeString -\n *\n * @return {String} The input string normalized for display.\n */\n\nexport let normalizeTimeString = function (timeString) {\n  if (timeString && timeString !== '') {\n    return exports.getNormalizedTimeValue(timeString);\n  }\n\n  return '';\n};\n/**\n * @param {Date} dateInput - Date Object to modify\n *\n * @param {String} timeString - Time string that has been 'normalized' in 'HH:mm:ss' (24hr) or 'hh:mm:ss a' (12hr)\n *            format.\n *\n * @return {Date} The input Date object modified and set with the given timeString input.\n */\n\nexport let setTimeIntoDateModel = function (dateInput, timeString) {\n  if (timeString !== '' && !isMatch(timeString, getTimeFilterFormat())) {\n    return dateInput;\n  }\n\n  if (timeString && timeString !== '') {\n    var time = _tokenizeTime(timeString);\n\n    dateInput.setHours(time[0]);\n    dateInput.setMinutes(time[1]);\n    dateInput.setSeconds(time[2]);\n  } else {\n    dateInput.setHours(0);\n    dateInput.setMinutes(0);\n    dateInput.setSeconds(0);\n  }\n\n  return dateInput;\n};\n/**\n * Set the user session specific locale and date/time format.\n *\n * @param {String} pattern - String returned as the \"DefaultDateFormat\" parameter supplied by the server during\n *            login (e.g. \"%d-%b-%Y %H:%M\").\n *            <P>\n *            Note: This pattern is not directly compatible with the {@link DateTimeFormat} class and must be\n *            converted into a compatible string before it is used with that class.\n */\n\nexport let setSessionDateTimeFormat = function (pattern) {\n  // Test pattern for simulating a server with a 4-digit year, 2-digit month & 12hr time format and slightly different date pattern\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%Y-%b-%d %I:%M:%S\";\n  //\n  // Test pattern for simulating a server with a 2-digit month & year (in German placement order) and 24hr time format w/o/ seconds\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%d.%m.%y %H:%M\";\n  //\n  // Test pattern for simulating a server with a full month, day & 4-digit year and no time format\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%B %d, %Y\";\n  //\n  // Test pattern for simulating a server with a 2-digit month & year (in English placement order) and 24hr time format w/o/ seconds\n  // Uncomment this line to use....Very handy *** do not delete ***\n  // pattern = \"%m-%d-%Y %H:%M\";\n  var patternDateTime = _getDateFormatByServerString(pattern, true, true);\n\n  var patternDate = _getDateFormatByServerString(pattern, true, false);\n\n  var patternTime = _getDateFormatByServerString(pattern, false, true);\n\n  _dateTimeLocaleInfo.sessionDateTimeFormat = patternDateTime.dateFilterFormat;\n  _dateTimeLocaleInfo.sessionDateFormat = patternDate.dateFilterFormat;\n  _dateTimeLocaleInfo.sessionTimeFormat = patternTime.dateFilterFormat;\n  _dateFilterFormat = patternDate.dateFilterFormat;\n  _datePickerFormat = patternDate.datePickerFormat;\n  _datePlaceholder = patternDate.datePlaceholder;\n  _timePlaceholder = patternTime.timePlaceholder;\n  _showMonthAfterYear = patternDate.monthAfterYear;\n  eventBus.publish('dateTime.sessionChanged', _dateTimeLocaleInfo);\n};\n/**\n * Initialize the dateTimeService\n */\n\nexport let init = function () {\n  /**\n   * Set locale and a default format now that the 'localeService' is valid.\n   */\n  _localePlaceholders = cfgSvc.getCfgCached('localeDateTime');\n  exports.setSessionDateTimeFormat('%d-%b-%Y %H:%M');\n  /**\n   * Now that we have the localService, use its current value to init dateTime stuff.\n   */\n\n  _setupDateTimeLocaleInfo();\n  /**\n   * Setup to listen to changes in locale.\n   *\n   * @param {String} locale - String with the updated locale value.\n   */\n\n\n  eventBus.subscribe('locale.changed', function () {\n    _setupDateTimeLocaleInfo();\n  }, 'dateTimeService');\n};\nexports = {\n  NULLDATE,\n  getTimeInMilliSec,\n  getJQueryDatePickerTextBundle,\n  formatDate,\n  formatDateTime,\n  formatTime,\n  formatTimeLovEntry,\n  formatSessionDateTime,\n  formatSessionDate,\n  formatSessionTime,\n  formatWeekdayMonthAndDayOfMonth,\n  formatFullDayOfMonth,\n  formatAbbreviatedMonth,\n  formatFullMonth,\n  formatUTC,\n  formatNonStandardDate,\n  getDateFilterFormat,\n  getDateFormat,\n  getDateFormatPlaceholder,\n  getDateTimeFilterFormat,\n  getDefaultDate,\n  getEnglishDateTimeFormat,\n  getEnglishDateFormat,\n  getEnglishTimeFormat,\n  getEpochDate,\n  getDateFromTimeValue,\n  getJSDate,\n  getNormalizedTimeValue,\n  getNullDate,\n  getSessionDateTimeFormat,\n  getSessionDateFormat,\n  getSessionTimeFormat,\n  getTimeFilterFormat,\n  getTimeLovEntryFilterFormat,\n  getTimeFormatPlaceholder,\n  getTimeLovEntries,\n  isNullDate,\n  compare,\n  normalizeTimeString,\n  setTimeIntoDateModel,\n  setSessionDateTimeFormat,\n  init\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/dateTimeService.js"],"names":["FLATPICKR_ID","_dateTimeLocaleInfo","is12HrFormat","sessionDateTimeFormat","sessionDateFormat","sessionTimeFormat","_regMinSec","_englishDateTimeFormat","dateFilterFormat","datePickerFormat","datePlaceholder","timePlaceholder","monthAfterYear","dayOfWeekAfterDay","_englishDateFormat","_englishTimeFormat","_i18n_anteMeridiem","_i18n_postMeridiem","_regPattern12","_regPattern24","_localePlaceholders","_datePickerFormat","_datePlaceholder","_showMonthAfterYear","_timePlaceholder","_timeLovEntries","_dateFilterFormat","_buildTimeLovEntries","lovEntries","_pad","number","msHr","msLimit","msInc","msTime","date","utcHours","utcMinutes","mer","disp","lovEntry","propInternalValue","propDisplayValue","_getTimePattern12Hr","_regHr12","_regGap","_regMeridiem","_reg12HrMnSec","_reg12HrMin","_reg12Hr","_getTimePattern24Hr","_regHr24","_reg24HrMnSec","_reg24HrMin","_reg24Hr","isNormalizedTimeValid","timeString","isMatch","getTimeFilterFormat","_tokenizeTime","time_AmPm","hour_minuteArray","hour","parseInt","minute","second","isNaN","splitTimeData","_getDateFormatByServerString","localePlaceHolder","localeSvc","dateFormat","containsSeconds","format","formatLength","i","c","ndx","_setupDateTimeLocaleInfo","filter","AwFilterService","_nullLocalDateString","textBundle","logger","locale","eventBus","err","result","_getDateTime","_","dateTime","dateToFormat","NULLDATE","_nullGmtDate","offset","_nullGmtTime","_nullLocalDate","_epochDate","getJQueryDatePickerTextBundle","closeText","prevText","nextText","currentText","monthNames","monthNamesShort","dayNames","dayNamesShort","dayNamesMin","weekHeader","firstDay","isRTL","showMonthAfterYear","yearSuffix","formatDate","exports","dateValue","formatDateTime","formatTime","formatTimeLovEntry","formatSessionDateTime","formattedDate","formatSessionDate","formatSessionTime","formatWeekdayMonthAndDayOfMonth","dayOfWeek","month","dayOfMonth","formatFullDayOfMonth","formatAbbreviatedMonth","formatFullMonth","formatUTC","formatNonStandardDate","getDateFilterFormat","getDateFormat","getDateFormatPlaceholder","getDateTimeFilterFormat","getDefaultDate","dateApi","defaultDate","limitDate","jsMinDate","jsMaxDate","getEnglishDateTimeFormat","getEnglishDateFormat","getEnglishTimeFormat","getEpochDate","getDateFromTimeValue","trim","timeValue","pattern","matches","fields","getTimeInMs","hourInMSec","minInMSec","mSec","getTimeInMilliSec","normalizedTime","normalizeTimeString","getJSDate","jsDate","getNormalizedTimeValue","nDate","getNullDate","getSessionDateTimeFormat","getSessionDateFormat","getSessionTimeFormat","getTimeLovEntryFilterFormat","getTimeFormatPlaceholder","getTimeLovEntries","objectValue","isNullDate","compare","date1Final","date2","diff","setTimeIntoDateModel","time","dateInput","setSessionDateTimeFormat","patternDateTime","patternDate","patternTime","init","cfgSvc"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service provides useful APIs for the date and Time formatting. It allows to se the default date and time format for the session.\n *\n * @module js/dateTimeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport localeSvc from 'js/localeService';\nimport cfgSvc from 'js/configurationService';\nimport AwFilterService from 'js/awFilterService';\nimport { isMatch } from 'date-fns';\nimport logger from 'js/logger';\n\n/**revisitme\n * Hint: config path is mocked one. we need to tune build and alias for config from assets folder\n * so we can use like, import 'config/localeDateTime'\n */\nimport 'config/localeDateTime';\n\n// Beyond angular: for some untility service which is:\n// - heavily used\n// - init function is not rich\n// put them to bootstrap for now for better code design\n\nexport const FLATPICKR_ID = 'div.flatpickr-calendar';\n\n/**\n * Default locale specific date/time values used until login is complete.\n */\nvar _dateTimeLocaleInfo = {\n    is12HrFormat: false,\n    sessionDateTimeFormat: 'd-M-Y HH:mm',\n    sessionDateFormat: 'd-M-Y',\n    sessionTimeFormat: 'HH:mm'\n};\n\n/** Regular expression that matches a number between 0 and 59 */\nvar _regMinSec = /([0-5]?\\d)/;\n\n/**\n * @private\n */\nvar _englishDateTimeFormat = {\n    dateFilterFormat: 'd-M-Y HH:mm',\n    datePickerFormat: 'd-M-Y',\n    datePlaceholder: 'DD-MMM-YYYY',\n    timePlaceholder: 'HH:MM',\n    monthAfterYear: false,\n    dayOfWeekAfterDay: false\n};\n\n/**\n * @private\n */\nvar _englishDateFormat = {\n    dateFilterFormat: 'd-M-Y',\n    datePickerFormat: 'd-M-Y',\n    datePlaceholder: 'DD-MMM-YYYY',\n    timePlaceholder: '',\n    monthAfterYear: false,\n    dayOfWeekAfterDay: false\n};\n\n/**\n * @private\n */\nvar _englishTimeFormat = {\n    dateFilterFormat: 'HH:mm',\n    datePickerFormat: '',\n    datePlaceholder: '',\n    timePlaceholder: 'HH:MM',\n    monthAfterYear: false,\n    dayOfWeekAfterDay: false\n};\n\n/**\n * @private\n */\nvar _i18n_anteMeridiem = 'AM';\n\n/**\n * @private\n */\nvar _i18n_postMeridiem = 'PM';\n\n/**\n * Regular expression value to extract segments of a 12 hour time entry\n *\n * @private\n */\nvar _regPattern12 = null;\n\n/**\n * Regular expression value to extract segments of a 24 hour time entry\n *\n * @private\n */\nvar _regPattern24 = null;\n\n/**\n * @private\n */\nvar _localePlaceholders = {};\n\n/**\n * @private\n */\nvar _datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n\n/**\n * @private\n */\nvar _datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n\n/**\n * TRUE if the i18N requires the month to be shown after the year in the JQuery datePicker.\n *\n * @private\n */\nvar _showMonthAfterYear = _englishDateTimeFormat.showMonthAfterYear;\n\n/**\n * @private\n */\nvar _timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n\n/**\n * List of 24 hour time selections (in current 12/24 hour format).\n *\n * @private\n */\nvar _timeLovEntries = null;\n\n/**\n * @private\n */\nvar _dateFilterFormat = _englishDateFormat.dateFilterFormat;\n\n/**\n * Function to build the list of time values in the drop down list of (aw-property-time-val) UI.\n *\n * @private\n *\n * @returns {LovEntry[]} An array of 'lovEntry' populated with the internal an display values.\n */\nvar _buildTimeLovEntries = function() {\n    var lovEntries = [];\n\n    var _pad = function( number ) {\n        if( number < 10 ) {\n            return '0' + number;\n        }\n        return number;\n    };\n\n    var msHr = 1000 * 60 * 60;\n    var msLimit = msHr * 24;\n    var msInc = 1000 * 60 * 30;\n\n    for( var msTime = 0; msTime < msLimit; msTime += msInc ) {\n        var date = new Date( msTime );\n\n        var utcHours = date.getUTCHours();\n        var utcMinutes = date.getUTCMinutes();\n        var mer;\n        var disp;\n\n        if( _dateTimeLocaleInfo.is12HrFormat ) {\n            if( utcHours < 12 ) {\n                if( utcHours === 0 ) {\n                    utcHours += 12;\n                }\n                mer = _i18n_anteMeridiem;\n            } else {\n                if( utcHours > 12 ) {\n                    utcHours -= 12;\n                }\n                mer = _i18n_postMeridiem;\n            }\n\n            disp = _pad( utcHours ) + ':' + _pad( utcMinutes ) + ' ' + mer;\n        } else {\n            disp = _pad( utcHours ) + ':' + _pad( utcMinutes );\n        }\n\n        var lovEntry = {\n            propInternalValue: msTime,\n            propDisplayValue: disp\n        };\n\n        lovEntries.push( lovEntry );\n    }\n\n    return lovEntries;\n};\n\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 12 hours, optional\n *         minutes, optional seconds and optional meridiem.\n */\nvar _getTimePattern12Hr = function() {\n    if( !_regPattern12 ) {\n        var _regHr12 = /(1[012]|0\\d|\\d)/;\n\n        var _regGap = /\\s*/;\n\n        var _regMeridiem = new RegExp( '(' + _i18n_anteMeridiem + //\n            '|' + _i18n_postMeridiem + '|a|p|am|pm' + ')?' );\n\n        /** hh:mm:ss a */\n        var _reg12HrMnSec = new RegExp( '(^' + _regHr12.source + //\n            ':' + _regMinSec.source + ':' + _regMinSec.source + //\n            _regGap.source + _regMeridiem.source + '$)' );\n\n        /** hh:mm a */\n        var _reg12HrMin = new RegExp( '(^' + _regHr12.source + //\n            ':' + _regMinSec.source + _regGap.source + //\n            _regMeridiem.source + '$)' );\n\n        /** hh a */\n        var _reg12Hr = new RegExp( '(^' + _regHr12.source + //\n            _regGap.source + _regMeridiem.source + '$)' );\n\n        // aggregate of all sub expressions\n        _regPattern12 = new RegExp( _reg12HrMnSec.source + //\n            '|' + _reg12HrMin.source + '|' + _reg12Hr.source );\n    }\n\n    return _regPattern12;\n};\n\n/**\n * @private\n *\n * @returns {String} Regular expression that matches segments of a user's input string for 24 hours, optional minutes\n *         and optional seconds.\n */\nvar _getTimePattern24Hr = function() {\n    if( !_regPattern24 ) {\n        var _regHr24 = /([0-1]?\\d|2[0-3])/;\n\n        /** HH:mm:ss : https://regex101.com/ */\n        var _reg24HrMnSec = new RegExp( '(^' + _regHr24.source + //\n            ':' + _regMinSec.source + ':' + _regMinSec.source + '$)' );\n\n        /** HH:mms */\n        var _reg24HrMin = new RegExp( '(^' + _regHr24.source + //\n            ':' + _regMinSec.source + '$)' );\n\n        /** HH */\n        var _reg24Hr = new RegExp( '(^' + _regHr24.source + '$)' );\n\n        // aggregate of all sub expressions\n        _regPattern24 = new RegExp( _reg24HrMnSec.source + //\n            '|' + _reg24HrMin.source + '|' + _reg24Hr.source );\n    }\n\n    return _regPattern24;\n};\n\n/**\n * Function to validate normalized time\n *\n * @private\n *\n * @param {String} normalizedTimeString - normalized time string\n *\n * @return {Boolean}\n */\nvar isNormalizedTimeValid = function( normalizedTimeString ) {\n    let timeString = normalizedTimeString;\n    if( !timeString.includes( ':' ) || !isMatch( timeString, getTimeFilterFormat() ) ) {\n        return false;\n    }\n    return true;\n};\n\n/**\n * Function to tokenize the time input.\n *\n * @private\n *\n * @param {String} timeString - Time string to tokenize in 'hh:mmm:ss a' format.\n *\n * @return {Number[]} Array of integers representing extracted hours, minutes and seconds.\n */\nvar _tokenizeTime = function( timeString ) {\n    if( !isNormalizedTimeValid( timeString ) ) {\n        return null;\n    }\n\n    var time_AmPm = timeString.split( ' ' );\n\n    var hour_minuteArray = time_AmPm[ 0 ].split( /[:aApP\\s]+/ );\n\n    var hour = 0;\n\n    if( hour_minuteArray.length > 0 ) {\n        hour = parseInt( hour_minuteArray[ 0 ], 10 );\n\n        if( _dateTimeLocaleInfo.is12HrFormat ) {\n            if( time_AmPm[ 1 ] === _i18n_postMeridiem ) {\n                hour += 12;\n\n                if( hour >= 24 ) {\n                    hour = 0;\n                }\n            }\n        }\n\n        if( hour > 23 ) {\n            hour = 23;\n        }\n    }\n\n    var minute = 0;\n\n    if( hour_minuteArray.length > 1 ) {\n        minute = parseInt( hour_minuteArray[ 1 ], 10 );\n\n        if( minute > 59 ) {\n            minute = 59;\n        }\n    }\n\n    var second = 0;\n\n    if( hour_minuteArray.length > 2 ) {\n        second = parseInt( hour_minuteArray[ 2 ], 10 );\n\n        if( isNaN( second ) ) {\n            second = 0;\n        }\n\n        if( second > 59 ) {\n            second = 59;\n        }\n    }\n\n    var splitTimeData = [];\n\n    splitTimeData[ 0 ] = hour;\n    splitTimeData[ 1 ] = minute;\n    splitTimeData[ 2 ] = second;\n\n    return splitTimeData;\n};\n\n/**\n * @param {String} dateFormat - The string from the TextServer used to construct the return date and/or time Format.\n *\n * @param {Boolea} includeDate - TRUE if date should be included in the format\n *\n * @param {Boolean} includeTime - TRUE if time should be included in the format\n *\n * @return {Object} An object with properties:<br>\n *         'dateFilterFormat' set with the converted pattern compatible with AngularJS \"$filter('date')\"\n *         <p>\n *         'datePickerFormat' set with the converted pattern compatible with the 'dateFormat' property (in the\n *         'options' object) and 'formatDate' and 'parseDate' functions of JQueryUI's 'datePicker'.\n *         <p>\n *         'datePlaceholder' set with i18N text to display in an empty date input field.\n *         <p>\n *         'timePlaceholder' set with i18N text to display in an empty time input field.\n *         <p>\n *         'monthAfterYear' set with TRUE if the i18N requires the month to be shown after the year in the JQuery\n *         datePicker.\n */\nvar _getDateFormatByServerString = function( dateFormat, includeDate, includeTime ) { // eslint-disable-line complexity\n    var dateFilterFormat = '';\n    var datePickerFormat = '';\n    var datePlaceholder = '';\n    var timePlaceholder = '';\n\n    var localePlaceHolder = _localePlaceholders[ localeSvc.getLocale() ] || _localePlaceholders.en_US;\n    var monthAfterYear = localePlaceHolder.monthAfterYear;\n\n    _dateTimeLocaleInfo.is12HrFormat = false;\n    if( dateFormat && dateFormat.length > 0 ) {\n        var containsSeconds = dateFormat.indexOf( '%S' ) !== -1;\n\n        var format = dateFormat.trim();\n\n        var formatLength = format.length;\n\n        for( var i = 0; i < formatLength; i++ ) {\n            var c = format.charAt( i );\n\n            switch ( c ) {\n                case '%':\n                    // ignore printf-specific char\n                    break;\n\n                case 'd':\n                    if( includeDate ) {\n                        // d: day of the month(0-31) -> dd: day in month (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'dd' );\n                        datePickerFormat = datePickerFormat.concat( 'd' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.day );\n                    }\n                    break;\n\n                case 'b':\n                    if( includeDate ) {\n                        // b: abbreviated month name -> MMM: month in year (full month name) not supported by Java.\n                        dateFilterFormat = dateFilterFormat.concat( 'MMM' );\n                        datePickerFormat = datePickerFormat.concat( 'M' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.month_3 );\n                    }\n                    break;\n\n                case 'B':\n                    if( includeDate ) {\n                        // B: full month name -> MMMMM: month in year (full month name)\n                        dateFilterFormat = dateFilterFormat.concat( 'MMMM' );\n                        datePickerFormat = datePickerFormat.concat( 'M' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.month_4 );\n                    }\n                    break;\n\n                case 'm':\n                    if( includeDate ) {\n                        // m: month(01-12) -> MM: month in year (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'MM' );\n                        datePickerFormat = datePickerFormat.concat( 'm' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.month_2 );\n                    }\n                    break;\n\n                case 'y':\n                    if( includeDate ) {\n                        // y: year without century(00-99) -> yy: year (two digits).\n                        dateFilterFormat = dateFilterFormat.concat( 'yy' );\n                        datePickerFormat = datePickerFormat.concat( 'y' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.year_2 );\n                    }\n                    break;\n\n                case 'Y':\n                    if( includeDate ) {\n                        // Y: year with century(1970-2069) ->yyyy: year (four digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'yyyy' );\n                        datePickerFormat = datePickerFormat.concat( 'yy' );\n                        datePlaceholder = datePlaceholder.concat( localePlaceHolder.year_4 );\n                    }\n                    break;\n\n                case 'H':\n                    if( includeTime ) {\n                        // H: hour(24-hour clock)(00-23) ->HH: hour in day (0~23) (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'HH' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.hours );\n                    }\n                    break;\n\n                case 'I':\n                    if( includeTime ) {\n                        _dateTimeLocaleInfo.is12HrFormat = true;\n\n                        // I: hour(12-hour clock)(01-12) ->hh: hour in am/pm (1~12) (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'hh' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.hours );\n                    }\n                    break;\n\n                case 'M':\n                    if( includeTime ) {\n                        // M: minute(00-59) -> mm: minute in hour (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'mm' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.minutes );\n\n                        /**\n                         * Note: This is a little 'odd' but the placeholder has to have 'seconds' in it even if the\n                         * general display for time does not.\n                         */\n                        if( !containsSeconds ) {\n                            timePlaceholder = timePlaceholder.concat( ':' + localePlaceHolder.seconds );\n                        }\n                    }\n                    break;\n\n                case 'S':\n                    if( includeTime ) {\n                        // S: second(00-59) -> ss: second in minute (two digits)\n                        dateFilterFormat = dateFilterFormat.concat( 'ss' );\n                        timePlaceholder = timePlaceholder.concat( localePlaceHolder.seconds );\n                    }\n                    break;\n\n                default:\n                    // If \":\" exists in the format, assume it must be a separator for time.\n                    if( !includeTime && c === ':' ) {\n                        break;\n                    }\n\n                    // If \"-\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === '-' ) {\n                        break;\n                    }\n\n                    // If \".\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === '.' ) {\n                        break;\n                    }\n\n                    // If \"/\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === '/' ) {\n                        break;\n                    }\n\n                    // If \",\" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === ',' ) {\n                        break;\n                    }\n\n                    // If \" \" exists in the format, assume it must be a separator for date.\n                    if( !includeDate && c === ' ' ) {\n                        break;\n                    }\n\n                    // If \"年\" (year) \"月\" (month) or \"日\" (day) exists in the format, assume it must be a separator for date.\n                    if( !includeDate && ( c === '年' || c === '月' || c === '日' ) ) {\n                        break;\n                    }\n\n                    dateFilterFormat += c;\n\n                    if( c === ':' ) {\n                        timePlaceholder += c;\n                    }\n\n                    if( c === '-' || c === '.' || c === '/' || c === ',' || c === ' ' ) {\n                        datePickerFormat += c;\n                        datePlaceholder += c;\n                    }\n\n                    break;\n            }\n        }\n    } else {\n        if( includeDate ) {\n            if( includeTime ) {\n                dateFilterFormat = _englishDateTimeFormat.dateFilterFormat;\n                datePickerFormat = _englishDateTimeFormat.datePickerFormat;\n                datePlaceholder = _englishDateTimeFormat.datePlaceholder;\n                timePlaceholder = _englishDateTimeFormat.timePlaceholder;\n                monthAfterYear = _englishDateTimeFormat.monthAfterYear;\n            } else {\n                dateFilterFormat = _englishDateFormat.dateFilterFormat;\n                datePickerFormat = _englishDateFormat.datePickerFormat;\n                datePlaceholder = _englishDateFormat.datePlaceholder;\n                timePlaceholder = _englishDateFormat.timePlaceholder;\n                monthAfterYear = _englishDateFormat.monthAfterYear;\n            }\n        } else if( includeTime ) {\n            dateFilterFormat = _englishTimeFormat.dateFilterFormat;\n            datePickerFormat = _englishTimeFormat.datePickerFormat;\n            datePlaceholder = _englishTimeFormat.datePlaceholder;\n            timePlaceholder = _englishTimeFormat.timePlaceholder;\n            monthAfterYear = _englishTimeFormat.monthAfterYear;\n        }\n    }\n\n    /**\n     * Insert AM/PM indicator (if necessary)<BR>\n     * If so: Insert it after either seconds, minutes or hours.\n     */\n    if( _dateTimeLocaleInfo.is12HrFormat && includeTime ) {\n        var ndx = dateFilterFormat.lastIndexOf( 'ss' );\n\n        if( ndx !== -1 ) {\n            dateFilterFormat = dateFilterFormat.substring( 0, ndx + 2 ) + ' a' +\n                dateFilterFormat.substring( ndx + 2 );\n        } else {\n            ndx = dateFilterFormat.lastIndexOf( 'mm' );\n\n            if( ndx !== -1 ) {\n                dateFilterFormat = dateFilterFormat.substring( 0, ndx + 2 ) + ' a' +\n                    dateFilterFormat.substring( ndx + 2 );\n            } else {\n                ndx = dateFilterFormat.lastIndexOf( 'hh' );\n\n                if( ndx !== -1 ) {\n                    dateFilterFormat = dateFilterFormat.substring( 0, ndx + 2 ) + ' a' +\n                        dateFilterFormat.substring( ndx + 2 );\n                }\n            }\n        }\n    }\n\n    return {\n        dateFilterFormat: dateFilterFormat.trim(),\n        datePickerFormat: datePickerFormat.trim(),\n        datePlaceholder: datePlaceholder.trim(),\n        timePlaceholder: timePlaceholder.trim(),\n        monthAfterYear: monthAfterYear\n    };\n};\n\nlet exports;\nvar _setupDateTimeLocaleInfo = function() {\n    let filter = AwFilterService.instance;\n    if( !_nullLocalDateString ) {\n        _nullLocalDateString = filter( 'date' )( _nullLocalDate, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ' );\n    }\n\n    localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages' ).then( textBundle => {\n        if( !textBundle ) {\n            logger.info( 'Unable to load dateTimeServiceMessages textBundle' );\n            return;\n        }\n\n        _i18n_anteMeridiem = textBundle.anteMeridiem;\n        _i18n_postMeridiem = textBundle.postMeridiem;\n        //revisitme: AwLocaleService is not available\n        // let locale = AwLocaleService.instance;\n        let locale;\n        if( locale ) {\n            locale.id = localeSvc.getLocale();\n\n            locale.DATETIME_FORMATS.AMPMS = [ textBundle.anteMeridiem, textBundle.postMeridiem ];\n\n            locale.DATETIME_FORMATS.DAY = [ textBundle.dayName_01, textBundle.dayName_02,\n                textBundle.dayName_03, textBundle.dayName_04, textBundle.dayName_05, textBundle.dayName_06,\n                textBundle.dayName_07\n            ];\n\n            locale.DATETIME_FORMATS.MONTH = [ textBundle.monthName_01, textBundle.monthName_02,\n                textBundle.monthName_03, textBundle.monthName_04, textBundle.monthName_05,\n                textBundle.monthName_06, textBundle.monthName_07, textBundle.monthName_08,\n                textBundle.monthName_09, textBundle.monthName_10, textBundle.monthName_11,\n                textBundle.monthName_12\n            ];\n\n            locale.DATETIME_FORMATS.SHORTDAY = [ textBundle.dayNameShort_01, textBundle.dayNameShort_02,\n                textBundle.dayNameShort_03, textBundle.dayNameShort_04, textBundle.dayNameShort_05,\n                textBundle.dayNameShort_06, textBundle.dayNameShort_07\n            ];\n\n            locale.DATETIME_FORMATS.SHORTMONTH = [ textBundle.monthNameShort_01,\n                textBundle.monthNameShort_02, textBundle.monthNameShort_03, textBundle.monthNameShort_04,\n                textBundle.monthNameShort_05, textBundle.monthNameShort_06, textBundle.monthNameShort_07,\n                textBundle.monthNameShort_08, textBundle.monthNameShort_09, textBundle.monthNameShort_10,\n                textBundle.monthNameShort_11, textBundle.monthNameShort_12\n            ];\n        }\n        eventBus.publish( 'dateTime.changed', _dateTimeLocaleInfo );\n    } ).catch( err => {\n        logger.error( err );\n    } );\n\n    localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.anteMeridiem' ).then( result => {\n        _i18n_anteMeridiem = result;\n        eventBus.publish( 'dateTime.changed', _dateTimeLocaleInfo );\n    } );\n    localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.postMeridiem' ).then( result => {\n        _i18n_postMeridiem = result;\n        eventBus.publish( 'dateTime.changed', _dateTimeLocaleInfo );\n    } );\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {Number} The numeric value corresponding to the time for the given date according to universal time.\n */\nvar _getDateTime = function( dateToFormat ) {\n    var dateTime;\n\n    if( !dateToFormat ) {\n        return dateTime;\n    }\n\n    if( _.isString( dateToFormat ) || _.isNumber( dateToFormat ) ) {\n        dateTime = dateToFormat;\n    } else {\n        dateTime = dateToFormat.getTime();\n    }\n    return dateTime;\n};\n\n/**\n * {String} Null date/time string for 1 Jan, 0001 at midnight GMT.\n * @ignore\n */\nexport let NULLDATE = '0001-01-01T00:00:00+00:00';\n\n/**\n * Definition of 'null' or 'not yet set' date time.\n * <P>\n * Same value as AW's IDateService.getNullLocalDate().\n *\n * @private\n */\nvar _nullGmtDate = new Date( NULLDATE );\n\n/**\n * @private\n */\nvar offset = _nullGmtDate.getTimezoneOffset();\n\n/**\n * @private\n */\nvar _nullGmtTime = _getDateTime( _nullGmtDate );\n\n/**\n * @private\n */\nvar _nullLocalDateString;\n\n/**\n   * @private\n   */\nvar _nullLocalDate = new Date( _nullGmtTime + offset * 60 * 1000 );\n/**\n   */\n/**\n * @private\n */\nvar _epochDate = new Date( 0 );\n\n/**\n * ************************************<BR>\n * ***** Define service API <BR>\n * ************************************<BR>\n */\n\n/**\n * @return {Promise} TODO\n *\n *@ignore\n */\nexport let getJQueryDatePickerTextBundle = async function() {\n    await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.' );\n    return {\n        closeText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.closeText' ),\n        prevText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.prevText' ),\n        nextText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.nextText' ),\n        currentText: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.currentText' ),\n        monthNames: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_07' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_08' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_09' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_10' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_11' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthName_12' )\n        ],\n        monthNamesShort: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_07' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_08' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_09' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_10' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_11' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.monthNameShort_12' )\n        ],\n        dayNames: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayName_07' )\n        ],\n        dayNamesShort: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameShort_07' )\n        ],\n        dayNamesMin: [\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_01' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_02' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_03' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_04' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_05' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_06' ),\n            await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.dayNameMin_07' )\n        ],\n        weekHeader: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.weekHeader' ),\n        dateFormat: _datePickerFormat,\n        firstDay: 1,\n        isRTL: false,\n        showMonthAfterYear: _showMonthAfterYear,\n        yearSuffix: await localeSvc.getLocalizedTextFromKey( 'dateTimeServiceMessages.yearSuffix' )\n    };\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date of the given Date object formatted according to current user session format.\n */\nexport let formatDate = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getDateFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to current user session\n *          format.\n */\nexport let formatDateTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getDateTimeFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format.\n */\nexport let formatTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getTimeFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted time of the given Date object formatted according to current user session format\n *          and meant for display in an lovEntry (i.e. without 'seconds').\n * @ignore\n */\nexport let formatTimeLovEntry = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, exports.getTimeLovEntryFilterFormat() );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatSessionDateTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var formattedDate = '';\n\n        var dateValue = _getDateTime( dateToFormat );\n\n        if( _.isNumber( dateValue ) || _.isString( dateValue ) ) {\n            formattedDate = filter( 'date' )( dateValue, exports.getSessionDateTimeFormat() );\n        } else if( _.isDate( dateValue ) ) {\n            formattedDate = filter( 'date' )( _getDateTime( dateValue ), exports.getSessionDateTimeFormat() );\n        }\n\n        return formattedDate.toString().trim();\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatSessionDate = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var format = exports.getSessionDateFormat();\n\n        if( format.length > 0 ) {\n            return filter( 'date' )( dateValue, exports.getSessionDateFormat() );\n        }\n\n        return '';\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The time portion of the given Date object formatted according to current user session format.\n */\nexport let formatSessionTime = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var format = exports.getSessionTimeFormat();\n\n        if( format.length > 0 ) {\n            return filter( 'date' )( dateValue, exports.getSessionTimeFormat() );\n        }\n        return '';\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: Tuesday-Sep 27\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date of the given Date object formatted according to current user session format.\n */\nexport let formatWeekdayMonthAndDayOfMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var dayOfWeek = filter( 'date' )( dateValue, 'EEEE' );\n        var month = exports.formatAbbreviatedMonth( dateValue );\n        var dayOfMonth = exports.formatFullDayOfMonth( dateValue );\n\n        var locale = localeSvc.getLocale();\n        if( _localePlaceholders[ locale ].dayOfWeekAfterDay ) {\n            return month + _localePlaceholders[ locale ].monthDaySeparator + dayOfMonth +\n                _localePlaceholders[ locale ].dayOfWeekSeparator + dayOfWeek;\n        }\n\n        return dayOfWeek + _localePlaceholders[ locale ].dayOfWeekSeparator + month +\n            _localePlaceholders[ locale ].monthDaySeparator + dayOfMonth;\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: 27\n * <P>\n * Note: In some locales (i.e. ja_JP) there are extra symbols added to this number. This function will handle this\n * case.\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatFullDayOfMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        var dayOfMonth = filter( 'date' )( dateValue, 'dd' );\n\n        var locale = localeSvc.getLocale();\n        if( _localePlaceholders[ locale ].fullDayOfMonth ) {\n            dayOfMonth += _localePlaceholders[ locale ].day;\n        }\n\n        return dayOfMonth;\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatAbbreviatedMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, 'MMM' );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * Example: September\n *\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The date & time of the given Date object formatted according to current user session format.\n */\nexport let formatFullMonth = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, 'MMMM' );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @returns {String} The formatted date & time of the given Date object formatted according to UTC format.\n */\nexport let formatUTC = function( dateToFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, 'yyyy-MM-dd\\'T\\'HH:mm:ssZ' );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @param {Number|Date} dateToFormat - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @param {String} dateFormat - format. This is a EWI data collection object time stamp format.\n *\n * @returns {String} The date & time of the given Date object formatted according to the input dateFormat.\n */\nexport let formatNonStandardDate = function( dateToFormat, dateFormat ) {\n    if( exports.isNullDate( dateToFormat ) ) {\n        return '';\n    }\n\n    let filter = AwFilterService.instance;\n    if( filter ) {\n        var dateValue = _getDateTime( dateToFormat );\n\n        return filter( 'date' )( dateValue, dateFormat );\n    }\n\n    return dateToFormat.toString();\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\nexport let getDateFilterFormat = function() {\n    return _dateFilterFormat;\n};\n\n/**\n * Format compatible with the 'dateFormat' property (in the 'options' object) and 'formatDate' and 'parseDate'\n * functions of JQueryUI's 'datePicker'.\n * <P>\n * Examples: <BR>\n * Format 'd-M-yy' would return \"01-Apr-2016\"<BR>\n * Format 'mm.dd.yy' would return \"04.01.2016\"<BR>\n *\n * @return {String} Date entry format for use in JQueryUI's datepicker API.\n */\nexport let getDateFormat = function() {\n    return _datePickerFormat;\n};\n\n/**\n * @return {String} User oriented text used to indicate the required format of the date entry (i.e. \"yy.mm.dd\",\n *         \"day-month-year\", etc.).\n */\nexport let getDateFormatPlaceholder = function() {\n    return _datePlaceholder;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\nexport let getDateTimeFilterFormat = function() {\n    return exports.getDateFilterFormat() + _localePlaceholders[ localeSvc.getLocale() ].dateTimeSeparator +\n        exports.getTimeFilterFormat();\n};\n\n/**\n * @param {DateTimeApi} dateApi - Object containing the current date/time context.\n *\n * @return {Date} Date object set to either 'today' or to 'minDate' or 'maxDate' if 'today' is outside those ranges.\n *         The 'minDate' or 'maxDate' will be chosen based on which of those values 'today' is closer to.\n * @ignore\n */\nexport let getDefaultDate = function( dateApi ) {\n    var defaultDate;\n\n    var limitDate;\n\n    if( dateApi.isTimeEnabled ) {\n        if( dateApi.isDateEnabled ) {\n            /**\n             * Deal with date & time\n             *\n             * @private\n             */\n            defaultDate = new Date();\n\n            defaultDate.setHours( 0 );\n            defaultDate.setMinutes( 0 );\n            defaultDate.setSeconds( 0 );\n\n            if( dateApi.minDate && defaultDate < dateApi.minDate ) {\n                return dateApi.minDate;\n            }\n\n            if( dateApi.maxDate && defaultDate > dateApi.maxDate ) {\n                return dateApi.maxDate;\n            }\n        } else {\n            /**\n             * Deal with time only. Set to 'epoch' and then set hours/mins/secs\n             * @private\n             */\n            defaultDate = new Date( 0 );\n\n            defaultDate.setHours( 0 );\n            defaultDate.setMinutes( 0 );\n            defaultDate.setSeconds( 0 );\n\n            if( dateApi.minDate ) {\n                limitDate = new Date( 0 );\n\n                var jsMinDate = exports.getJSDate( dateApi.minDate );\n\n                limitDate.setHours( jsMinDate.getHours() );\n                limitDate.setMinutes( jsMinDate.getMinutes() );\n                limitDate.setSeconds( jsMinDate.getSeconds() );\n\n                if( defaultDate < limitDate ) {\n                    return limitDate;\n                }\n            }\n\n            if( dateApi.maxDate ) {\n                limitDate = new Date( 0 );\n\n                var jsMaxDate = exports.getJSDate( dateApi.maxDate );\n\n                limitDate.setHours( jsMaxDate.getHours() );\n                limitDate.setMinutes( jsMaxDate.getMinutes() );\n                limitDate.setSeconds( jsMaxDate.getSeconds() );\n\n                if( defaultDate > limitDate ) {\n                    return limitDate;\n                }\n            }\n        }\n    } else {\n        if( dateApi.isDateEnabled ) {\n            /**\n             * Deal with date only. Set to hours/mins/secs to midnight local time.\n             *\n             * @private\n             */\n            defaultDate = new Date();\n\n            defaultDate.setHours( 0 );\n            defaultDate.setMinutes( 0 );\n            defaultDate.setSeconds( 0 );\n\n            if( dateApi.minDate ) {\n                limitDate = exports.getJSDate( dateApi.minDate );\n                limitDate.setHours( 0 );\n                limitDate.setMinutes( 0 );\n                limitDate.setSeconds( 0 );\n\n                if( defaultDate < limitDate ) {\n                    return limitDate;\n                }\n            }\n\n            if( dateApi.maxDate ) {\n                limitDate = exports.getJSDate( dateApi.maxDate );\n                limitDate.setHours( 0 );\n                limitDate.setMinutes( 0 );\n                limitDate.setSeconds( 0 );\n\n                if( defaultDate > limitDate ) {\n                    return limitDate;\n                }\n            }\n        } else {\n            defaultDate = exports.getNullDate();\n        }\n    }\n\n    return defaultDate;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n * @ignore\n */\nexport let getEnglishDateTimeFormat = function() {\n    return _englishDateTimeFormat.dateFilterFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n * @ignore\n */\nexport let getEnglishDateFormat = function() {\n    return _englishDateFormat.dateFilterFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n * @ignore\n */\nexport let getEnglishTimeFormat = function() {\n    return _englishTimeFormat.dateFilterFormat;\n};\n\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'epoch' or '1-Jan-1970 00:00:00\n *         GMT' value.\n * @ignore\n */\nexport let getEpochDate = function() {\n    return _epochDate;\n};\n\n/**\n * @param {Number} timeValue - Milliseconds since unix 'epoch'.\n *\n * @returns {Date} The given string value converted into a time on 'January 1, 0001' (or NULL if the string contains\n *          an invalid time format).\n */\nexport let getDateFromTimeValue = function( timeValue ) {\n    if( !timeValue ) {\n        return exports.getNullDate();\n    }\n\n    var trim = timeValue.trim();\n\n    /**\n     * Remove any trailing ':' before trying to match the pattern\n     */\n    if( trim.length > 0 && trim.charAt( trim.length - 1 ) === ':' ) {\n        trim = trim.substring( 0, trim.length - 1 );\n    }\n\n    var pattern = _dateTimeLocaleInfo.is12HrFormat ? _getTimePattern12Hr() : _getTimePattern24Hr();\n\n    var matches = trim.match( pattern );\n\n    if( matches ) {\n        var fields = {};\n\n        if( _dateTimeLocaleInfo.is12HrFormat ) {\n            if( matches[ 1 ] ) {\n                fields.disp = matches[ 1 ];\n                fields.hr = matches[ 2 ];\n                fields.min = matches[ 3 ];\n                fields.sec = matches[ 4 ];\n                fields.mer = matches[ 5 ];\n            } else if( matches[ 6 ] ) {\n                fields.disp = matches[ 6 ];\n                fields.hr = matches[ 7 ];\n                fields.min = matches[ 8 ];\n                fields.mer = matches[ 9 ];\n                fields.sec = '0';\n            } else if( matches[ 10 ] ) {\n                fields.disp = matches[ 10 ];\n                fields.hr = matches[ 11 ];\n                fields.min = '0';\n                fields.sec = '0';\n                fields.mer = matches[ 12 ];\n            }\n\n            /**\n             * If no meridiem, assume PM\n             */\n            if( !fields.mer ) {\n                fields.mer = _i18n_postMeridiem;\n            }\n\n            fields.mer = fields.mer.toLowerCase();\n\n            if( fields.mer === _i18n_postMeridiem.toLowerCase() || fields.mer === 'p' || fields.mer === 'pm' ) {\n                fields.hr = parseInt( fields.hr, 10 ) + 12;\n\n                if( fields.hr >= 24 ) {\n                    fields.hr = '0';\n                } else {\n                    fields.hr = fields.hr.toString();\n                }\n            }\n        } else {\n            if( matches[ 1 ] ) {\n                fields.disp = matches[ 1 ];\n                fields.hr = matches[ 2 ];\n                fields.min = matches[ 3 ];\n                fields.sec = matches[ 4 ];\n            } else if( matches[ 5 ] ) {\n                fields.disp = matches[ 5 ];\n                fields.hr = matches[ 6 ];\n                fields.min = matches[ 7 ];\n                fields.sec = '0';\n            } else if( matches[ 8 ] ) {\n                fields.disp = matches[ 0 ];\n                fields.hr = matches[ 8 ];\n                fields.min = '0';\n                fields.sec = '0';\n            }\n        }\n\n        if( fields.hr ) {\n            return new Date( '0001', 0, 1, fields.hr, fields.min, fields.sec );\n        }\n    }\n\n    return null;\n};\n\n/**\n * @param {String} timeValue - in HH:MM:SS format\n * @returns coverted time from a HH:MM:SS format to ms\n */\nlet getTimeInMs = function( timeValue ) {\n    if( timeValue === null ) {\n        return null;\n    }\n    let hourInMSec = timeValue[ 0 ] * 60 * 60 * 1000;\n    let minInMSec = timeValue[ 1 ] * 60 * 1000;\n    let mSec = timeValue[ 2 ] * 1000;\n    return hourInMSec + minInMSec + mSec;\n};\n\n/**\n * @param {*} timeValue - 'x' or 'x:y' or 'x:y:z' format\n * @returns coverted time from a string to ms\n */\nexport let getTimeInMilliSec = ( timeValue ) => {\n    if( !_.isString( timeValue ) || timeValue === '' ) {\n        return timeValue;\n    }\n    let normalizedTime = normalizeTimeString( timeValue );\n    return getTimeInMs( _tokenizeTime( normalizedTime ) );\n};\n\n/**\n * Returns a new Date object based on the given Date object or value.\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser. The 'null date' used in AW\n * did not always create a valid Date object.\n *\n * @param {Object} dateToTest - Object that MAY be a JS Date or MAY be the number of milliseconds since 'epoch'.\n *\n * @return {Date} A new JS Date object based on the given object (or 'null' date if no other JS date possible).\n * @ignore\n */\nexport let getJSDate = function( dateToTest ) {\n    /**\n     * D-24274: Date Array LOV fails to clear field<BR>\n     * On Firefox, When the 'dateToTest' has the 'null' date value, the 'new Date()' constructor creates an invalid\n     * Date object. This causes 'NaN' problems later when we try to get a formatted string from this invalid Date.\n     * <P>\n     * We check here for that case and create a date based on the 'null' date time value.\n     */\n    if( exports.isNullDate( dateToTest ) ) {\n        return new Date( _getDateTime( _nullLocalDate ) );\n    }\n\n    var jsDate = null;\n\n    try {\n        jsDate = new Date( dateToTest );\n    } finally {\n        if( !jsDate ) {\n            jsDate = new Date( _getDateTime( _nullLocalDate ) );\n        }\n    }\n\n    return jsDate;\n};\n\n/**\n * @param {String} timeValue - String value to test.\n *\n * @returns {String} The given string value now cleaned of any invalid characters.\n * @ignore\n */\nexport let getNormalizedTimeValue = function( timeValue ) {\n    if( isMatch( timeValue, 'dd-MMM-yyyy HH:mm' ) ) {\n        return '';\n    }\n    var nDate = exports.getDateFromTimeValue( timeValue );\n\n    if( nDate ) {\n        return exports.formatTime( nDate );\n    }\n    return timeValue;\n};\n\n/**\n * @return {Date} The cached Date object set with the same date/time as the special 'null' or 'not yet set' value.\n */\nexport let getNullDate = function() {\n    return _nullLocalDate;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date & time entry in.\n */\nexport let getSessionDateTimeFormat = function() {\n    return _dateTimeLocaleInfo.sessionDateTimeFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a date entry in.\n */\nexport let getSessionDateFormat = function() {\n    return _dateTimeLocaleInfo.sessionDateFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\nexport let getSessionTimeFormat = function() {\n    return _dateTimeLocaleInfo.sessionTimeFormat;\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time entry in.\n */\nexport let getTimeFilterFormat = function() {\n    if( _dateTimeLocaleInfo.is12HrFormat ) {\n        return 'hh:mm:ss a';\n    }\n\n    return 'HH:mm:ss';\n};\n\n/**\n * @return {String} AngularJS $filter format to display a time lovEntry in.\n * @ignore\n */\nexport let getTimeLovEntryFilterFormat = function() {\n    if( _dateTimeLocaleInfo.is12HrFormat ) {\n        return 'hh:mm a';\n    }\n\n    return 'HH:mm';\n};\n\n/**\n * @return {String} User oriented text used to indicate the required format of the time entry (i.e. \"12:00 AM\",\n *         \"Hours:Minutes\", etc.).\n */\nexport let getTimeFormatPlaceholder = function() {\n    var timePlaceholder = _timePlaceholder;\n\n    if( _dateTimeLocaleInfo.is12HrFormat ) {\n        timePlaceholder = timePlaceholder.concat( ' ' + _i18n_anteMeridiem + '/' + _i18n_postMeridiem );\n    }\n\n    return timePlaceholder;\n};\n\n/**\n * @returns {LovEntry[]} current list of time slots.\n * @ignore\n */\nexport let getTimeLovEntries = function() {\n    if( !_timeLovEntries ) {\n        _timeLovEntries = _buildTimeLovEntries();\n    }\n    let objectValue = {};\n    objectValue.timeList = _timeLovEntries;\n    return objectValue;\n};\n\n/**\n * @param {Object} dateToTest - A {Number} or {Date} or any other object that its 'valueOf' will result in a\n *            {Number} that represents MS since UNIX epoch.\n *\n * @return {Boolean} TRUE if the given test object represents the same date/time as the special 'null' or 'not yet\n *         set' value.\n */\nexport let isNullDate = function( dateToTest ) {\n    if( !dateToTest ) {\n        return true;\n    }\n\n    var dateTime;\n\n    if( _.isString( dateToTest ) ) {\n        dateTime = dateToTest;\n        return dateTime === _nullLocalDateString || dateTime === exports.NULLDATE;\n    }\n\n    if( _.isNumber( dateToTest ) ) {\n        dateTime = dateToTest;\n    } else {\n        dateTime = _getDateTime( dateToTest );\n    }\n\n    return dateTime === _getDateTime( _nullLocalDate ) || dateTime === _nullGmtTime;\n};\n\n/**\n * @param {Date} date1 - 1st date to compare.\n *\n * @param {Date} date2 - 2nd date to compare.\n *\n * @return {Number} The value <code>0</code> if the 'date2' is equal to 'date1'; a value less than <code>0</code>\n *         if 'date1' is less than 'date2'; and a value greater than <code>0</code> if 'date1' is greater than\n *         'date2'.\n */\nexport let compare = function( date1, date2 ) {\n    var date1Final = date1;\n\n    // Note: Current dbValue could be a JavaUtil class from GWT\n    if( date1Final && date1Final.constructor !== Date ) {\n        date1Final = new Date( date1 );\n    }\n\n    if( exports.isNullDate( date1Final ) ) {\n        if( date2 && !exports.isNullDate( date2 ) ) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    if( exports.isNullDate( date2 ) ) {\n        return 1;\n    }\n\n    var diff = _getDateTime( date1Final ) - _getDateTime( date2 );\n\n    if( diff === 0 ) {\n        return 0;\n    }\n    if( diff > 0 ) {\n        return 1;\n    }\n    return -1;\n};\n\n/**\n * @param {String} timeString -\n *\n * @return {String} The input string normalized for display.\n */\nexport let normalizeTimeString = function( timeString ) {\n    if( timeString && timeString !== '' ) {\n        return exports.getNormalizedTimeValue( timeString );\n    }\n\n    return '';\n};\n\n/**\n * @param {Date} dateInput - Date Object to modify\n *\n * @param {String} timeString - Time string that has been 'normalized' in 'HH:mm:ss' (24hr) or 'hh:mm:ss a' (12hr)\n *            format.\n *\n * @return {Date} The input Date object modified and set with the given timeString input.\n */\nexport let setTimeIntoDateModel = function( dateInput, timeString ) {\n    if( timeString !== '' && !isMatch( timeString, getTimeFilterFormat() ) ) {\n        return dateInput;\n    }\n    if( timeString && timeString !== '' ) {\n        var time = _tokenizeTime( timeString );\n\n        dateInput.setHours( time[ 0 ] );\n        dateInput.setMinutes( time[ 1 ] );\n        dateInput.setSeconds( time[ 2 ] );\n    } else {\n        dateInput.setHours( 0 );\n        dateInput.setMinutes( 0 );\n        dateInput.setSeconds( 0 );\n    }\n\n    return dateInput;\n};\n\n/**\n * Set the user session specific locale and date/time format.\n *\n * @param {String} pattern - String returned as the \"DefaultDateFormat\" parameter supplied by the server during\n *            login (e.g. \"%d-%b-%Y %H:%M\").\n *            <P>\n *            Note: This pattern is not directly compatible with the {@link DateTimeFormat} class and must be\n *            converted into a compatible string before it is used with that class.\n */\nexport let setSessionDateTimeFormat = function( pattern ) {\n    // Test pattern for simulating a server with a 4-digit year, 2-digit month & 12hr time format and slightly different date pattern\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%Y-%b-%d %I:%M:%S\";\n    //\n    // Test pattern for simulating a server with a 2-digit month & year (in German placement order) and 24hr time format w/o/ seconds\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%d.%m.%y %H:%M\";\n    //\n    // Test pattern for simulating a server with a full month, day & 4-digit year and no time format\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%B %d, %Y\";\n    //\n    // Test pattern for simulating a server with a 2-digit month & year (in English placement order) and 24hr time format w/o/ seconds\n    // Uncomment this line to use....Very handy *** do not delete ***\n    // pattern = \"%m-%d-%Y %H:%M\";\n    var patternDateTime = _getDateFormatByServerString( pattern, true, true );\n    var patternDate = _getDateFormatByServerString( pattern, true, false );\n    var patternTime = _getDateFormatByServerString( pattern, false, true );\n\n    _dateTimeLocaleInfo.sessionDateTimeFormat = patternDateTime.dateFilterFormat;\n    _dateTimeLocaleInfo.sessionDateFormat = patternDate.dateFilterFormat;\n    _dateTimeLocaleInfo.sessionTimeFormat = patternTime.dateFilterFormat;\n\n    _dateFilterFormat = patternDate.dateFilterFormat;\n    _datePickerFormat = patternDate.datePickerFormat;\n\n    _datePlaceholder = patternDate.datePlaceholder;\n    _timePlaceholder = patternTime.timePlaceholder;\n\n    _showMonthAfterYear = patternDate.monthAfterYear;\n\n    eventBus.publish( 'dateTime.sessionChanged', _dateTimeLocaleInfo );\n};\n\n/**\n * Initialize the dateTimeService\n */\nexport let init = function() {\n    /**\n     * Set locale and a default format now that the 'localeService' is valid.\n     */\n    _localePlaceholders = cfgSvc.getCfgCached( 'localeDateTime' );\n\n    exports.setSessionDateTimeFormat( '%d-%b-%Y %H:%M' );\n\n    /**\n     * Now that we have the localService, use its current value to init dateTime stuff.\n     */\n    _setupDateTimeLocaleInfo();\n\n    /**\n     * Setup to listen to changes in locale.\n     *\n     * @param {String} locale - String with the updated locale value.\n     */\n    eventBus.subscribe( 'locale.changed', function() {\n        _setupDateTimeLocaleInfo();\n    }, 'dateTimeService' );\n};\n\nexports = {\n    NULLDATE,\n    getTimeInMilliSec,\n    getJQueryDatePickerTextBundle,\n    formatDate,\n    formatDateTime,\n    formatTime,\n    formatTimeLovEntry,\n    formatSessionDateTime,\n    formatSessionDate,\n    formatSessionTime,\n    formatWeekdayMonthAndDayOfMonth,\n    formatFullDayOfMonth,\n    formatAbbreviatedMonth,\n    formatFullMonth,\n    formatUTC,\n    formatNonStandardDate,\n    getDateFilterFormat,\n    getDateFormat,\n    getDateFormatPlaceholder,\n    getDateTimeFilterFormat,\n    getDefaultDate,\n    getEnglishDateTimeFormat,\n    getEnglishDateFormat,\n    getEnglishTimeFormat,\n    getEpochDate,\n    getDateFromTimeValue,\n    getJSDate,\n    getNormalizedTimeValue,\n    getNullDate,\n    getSessionDateTimeFormat,\n    getSessionDateFormat,\n    getSessionTimeFormat,\n    getTimeFilterFormat,\n    getTimeLovEntryFilterFormat,\n    getTimeFormatPlaceholder,\n    getTimeLovEntries,\n    isNullDate,\n    compare,\n    normalizeTimeString,\n    setTimeIntoDateModel,\n    setSessionDateTimeFormat,\n    init\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-obtaining-images|Solution configuration for obtaining images}\n *\n * @module js/iconService\n *\n * @publishedApolloService\n *\n */\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport httpIconProviderService from 'js/httpIconProviderService';\nvar exports = {};\n/**\n * Reference IconService\n */\n\nvar _iconServiceProvider;\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\n\nexport let getTypeIcon = function (typeName) {\n  return _iconServiceProvider.getTypeIcon(typeName);\n};\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTypeIconFileTag = function (typeName, typeIconFileName) {\n  return _iconServiceProvider.getTypeIconFileTag(typeName, typeIconFileName);\n};\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTypeIconFileUrl = function (typeIconFileName) {\n  return _iconServiceProvider.getTypeIconFileUrl(typeIconFileName);\n};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTypeIconURL = function (typeName) {\n  return _iconServiceProvider.getTypeIconURL(typeName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTileIcon = async function (name) {\n  return await _iconServiceProvider.getTileIcon(name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getMiscIcon = async function (name) {\n  return await _iconServiceProvider.getMiscIcon(name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getCmdIcon = async function (name) {\n  return await _iconServiceProvider.getCmdIcon(name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getAwIcon = async function (iconName) {\n  return await _iconServiceProvider.getAwIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getIcon = async function (iconName) {\n  return await _iconServiceProvider.getIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getIndicatorIcon = async function (iconName) {\n  return await _iconServiceProvider.getIndicatorIcon(iconName);\n};\n/**\n * Initialize icon service provider.\n */\n\nexport let initializeIconServiceProvider = function () {\n  switch (iconRepositoryService.getIconFetchMethod()) {\n    case iconRepositoryService.GET:\n      _iconServiceProvider = httpIconProviderService;\n      break;\n\n    case iconRepositoryService.DEFAULT:\n    default:\n      _iconServiceProvider = defaultIconProviderService;\n  }\n};\nexports = {\n  getTypeIcon,\n  getTypeIconFileTag,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTileIcon,\n  getMiscIcon,\n  getCmdIcon,\n  getAwIcon,\n  getIcon,\n  getIndicatorIcon,\n  initializeIconServiceProvider\n};\nexport default exports;\ninitializeIconServiceProvider();","map":{"version":3,"names":["iconRepositoryService","defaultIconProviderService","httpIconProviderService","exports","_iconServiceProvider","getTypeIcon","typeName","getTypeIconFileTag","typeIconFileName","getTypeIconFileUrl","getTypeIconURL","getTileIcon","name","getMiscIcon","getCmdIcon","getAwIcon","iconName","getIcon","getIndicatorIcon","initializeIconServiceProvider","getIconFetchMethod","GET","DEFAULT"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/iconService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-obtaining-images|Solution configuration for obtaining images}\n *\n * @module js/iconService\n *\n * @publishedApolloService\n *\n */\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport httpIconProviderService from 'js/httpIconProviderService';\n\nvar exports = {};\n\n/**\n * Reference IconService\n */\nvar _iconServiceProvider;\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIcon = function( typeName ) {\n    return _iconServiceProvider.getTypeIcon( typeName );\n};\n\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIconFileTag = function( typeName, typeIconFileName ) {\n    return _iconServiceProvider.getTypeIconFileTag( typeName, typeIconFileName );\n};\n\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIconFileUrl = function( typeIconFileName ) {\n    return _iconServiceProvider.getTypeIconFileUrl( typeIconFileName );\n};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIconURL = function( typeName ) {\n    return _iconServiceProvider.getTypeIconURL( typeName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTileIcon = async function( name ) {\n    return await _iconServiceProvider.getTileIcon( name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getMiscIcon = async function( name ) {\n    return await _iconServiceProvider.getMiscIcon( name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getCmdIcon = async function( name ) {\n    return await _iconServiceProvider.getCmdIcon( name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getAwIcon = async function( iconName ) {\n    return await _iconServiceProvider.getAwIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getIcon = async function( iconName ) {\n    return await _iconServiceProvider.getIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getIndicatorIcon = async function( iconName ) {\n    return await _iconServiceProvider.getIndicatorIcon( iconName );\n};\n\n/**\n * Initialize icon service provider.\n */\nexport let initializeIconServiceProvider = function() {\n    switch ( iconRepositoryService.getIconFetchMethod() ) {\n        case iconRepositoryService.GET:\n            _iconServiceProvider = httpIconProviderService;\n            break;\n        case iconRepositoryService.DEFAULT:\n        default:\n            _iconServiceProvider = defaultIconProviderService;\n    }\n};\n\nexports = {\n    getTypeIcon,\n    getTypeIconFileTag,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTileIcon,\n    getMiscIcon,\n    getCmdIcon,\n    getAwIcon,\n    getIcon,\n    getIndicatorIcon,\n    initializeIconServiceProvider\n};\nexport default exports;\n\ninitializeIconServiceProvider();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2022 Siemens\n\n/* eslint-disable sonarjs/cognitive-complexity */\n\n/**\n * This is the Teamcenter SOA Service. It's the central pipeline for invoking JSON SOA APIs & FMS APIs from the client.\n *\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/kernel/soaService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport AwHttpService from 'js/awHttpService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport propPolicySvc from 'soa/kernel/propertyPolicyService';\nimport appCtxSvc from 'js/appCtxService';\nimport typeCacheSvc from 'soa/kernel/typeCacheService';\nimport configSvc from 'js/configurationService';\nimport _ from 'lodash';\nimport assert from 'assert';\nimport Debug from 'debug';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport localStrg from 'js/localStorage';\n/**\n * Boolean to indicate if we're signed into the server. This is just an observer state. True signin state is\n * managed by the Session Manager.\n *\n * @private\n */\n\nlet _signedIn = false;\n/**\n * Date/Time of the last progress 'start'. This is used to compute the amount of time a single SOA post takes.\n *\n * @private\n */\n\nconst _lastStartDate = {};\n/**\n * List of type names which have been deemed invalid based upon the previous server responses.\n *\n * @private\n */\n\nlet _invalidTypeNames = ['contents'];\n/**\n * Types that need loaded if available.\n * On AW startup.\n * @private\n */\n\nlet _awStartupPreferences;\n/**\n * Types cache timestamp\n *\n * @private\n */\n\n\nlet _typeCacheLMD;\n/**\n * Regular expression used to test if a string ends with \"[]\"\n */\n\n\nconst REGEX_ARRAY_SUFFIX = /\\[\\]$/i;\n/**\n * Constant for operation name used for get TC Session Info\n *\n * @type {string}\n */\n\nconst GET_SESSION_INFO = {\n  serviceName: 'Internal-AWS2-2017-12-DataManagement',\n  operationName: 'getTCSessionAnalyticsInfo'\n};\n/**\n * SOA redirect\n */\n\nlet _redirectSoaSvc;\n\nexport const setSoaRedirect = function (redirect) {\n  _redirectSoaSvc = redirect;\n};\n/** Debug trace function */\n\nconst trace = new Debug('soaService');\n/** Object to track which types are currently being loaded such that getTypeDescriptions2 is not duplicated for the same type */\n\nconst _typeLoadInProgress = {};\n/** client ID used in SOA header */\n\nlet _clientId = 'ActiveWorkspaceClient';\n/** timeout to allow polling SOA calls to be made after last non-polling call */\n\nlet _pollingTimeout = 15 * 60; // 15 minutes default\n\n\nlet pendingRequests = 0;\n/**\n * Initialize 'bodyElement[key]' based on given information.\n *\n * @private\n *\n * @param {Object} state - state object\n * @param {String} typeName - type name\n * @param {Object} bodyElement - body element\n * @param {String} key - key\n * @param {Boolean} deleted - was the key just deleted?\n */\n\nfunction initializeField(state, typeName, bodyElement, key, deleted) {\n  switch (typeName) {\n    case 'String':\n    case 'Date':\n      bodyElement[key] = '';\n      break;\n\n    case 'int':\n    case 'float':\n    case 'double':\n      bodyElement[key] = 0;\n      break;\n\n    case 'boolean':\n      bodyElement[key] = false;\n      break;\n\n    case 'ModelObj':\n    case 'ModelObject':\n      bodyElement[key] = {\n        uid: deleted ? cdm.NULL_UID : '',\n        type: deleted ? 'unknownType' : ''\n      };\n      break;\n\n    default:\n      if (REGEX_ARRAY_SUFFIX.test(typeName)) {\n        // Array\n        bodyElement[key] = [];\n      } else if (state.schemaService.hasOwnProperty(typeName) && _.isArray(state.schemaService[typeName])) {\n        // Enum support... default to first entry\n        bodyElement[key] = state.schemaService[typeName][0];\n      } else {\n        // Object or map\n        bodyElement[key] = {};\n      }\n\n  }\n}\n/**\n * TRUE if the given element is in the schema.\n *\n * @private\n *\n * @param {Object} state - state object\n * @param {Object} schemaElement - schema element to evaluate to determine if element should be a map\n *\n * @returns {Boolean} TRUE if the given element is in the schema.\n */\n\n\nfunction isMap(state, schemaElement) {\n  if (Object.keys(schemaElement).length === 2 && schemaElement.hasOwnProperty('key') && schemaElement.hasOwnProperty('value') && !state.schemaService.hasOwnProperty(schemaElement.key)) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Validate element type & recurse if non-trivial type.\n *\n * @private\n *\n * @param {Object} state - state object\n * @param {String} typeName - type name\n * @param {Object} bodyElement - body element\n * @returns {Object} ...\n */\n\n\nfunction validateElementType(state, typeName, bodyElement) {\n  // eslint-disable-line complexity\n  switch (typeName) {\n    case 'String':\n    case 'Date':\n      if (!_.isString(bodyElement)) {\n        state.issues.push('INVALID FIELD: Expected string, not ' + typeof bodyElement + ' --' + state.stack.join('.'));\n      }\n\n      break;\n\n    case 'int':\n    case 'float':\n    case 'double':\n      if (!_.isNumber(bodyElement)) {\n        state.issues.push('INVALID FIELD: Expected number, not ' + typeof bodyElement + ' --' + state.stack.join('.'));\n      }\n\n      break;\n\n    case 'boolean':\n      if (!_.isBoolean(bodyElement)) {\n        state.issues.push('INVALID FIELD: Expected boolean, not ' + typeof bodyElement + ' --' + state.stack.join('.'));\n      }\n\n      break;\n\n    case 'ModelObj':\n    case 'ModelObject':\n      if (!bodyElement || !bodyElement.uid || !bodyElement.type) {\n        return {\n          uid: !bodyElement || !bodyElement.uid ? cdm.NULL_UID : bodyElement.uid,\n          type: !bodyElement || !bodyElement.type ? 'unknownType' : bodyElement.type\n        };\n      }\n\n      if (Object.keys(bodyElement).length !== 2) {\n        // replace with new object if it's not already uid & type only\n        return {\n          uid: bodyElement.uid,\n          type: bodyElement.type\n        };\n      }\n\n      break;\n\n    case 'ICreateInput':\n      if (!bodyElement || !bodyElement.boName || !_.isString(bodyElement.boName)) {\n        state.issues.push('INVALID FIELD VALUE: Expect type of ICreateInput');\n      }\n\n      break;\n\n    default:\n      if (state.schemaService.hasOwnProperty(typeName)) {\n        if (_.isArray(state.schemaService[typeName])) {\n          // Enum\n          if (state.schemaService[typeName].indexOf(bodyElement) === -1) {\n            state.issues.push('INVALID FIELD VALUE: Not valid enum value ' + typeName + ' expected ' + state.schemaService[typeName].toString() + ' --' + state.stack.join('.'));\n          }\n        } else {\n          // Object processing\n          defaultAndValidateElementRecurse(state, state.schemaService[typeName], bodyElement);\n        }\n      } else if (REGEX_ARRAY_SUFFIX.test(typeName)) {\n        // Array processing\n        if (!_.isArray(bodyElement)) {\n          state.issues.push('INVALID FIELD: Expected array, not ' + typeof bodyElement + ' --' + state.stack.join('.'));\n          return undefined;\n        }\n\n        const typeName2 = typeName.substring(0, typeName.length - 2);\n        let replacementArray = null;\n\n        for (let ii = bodyElement.length - 1; ii >= 0; ii--) {\n          state.stack.push(ii);\n          const replacement = validateElementType(state, typeName2, bodyElement[ii]);\n\n          if (replacement) {\n            if (!replacementArray) {\n              // we should probably replace the array in case caller is using for something else...\n              replacementArray = bodyElement.slice(0);\n            }\n\n            replacementArray[ii] = replacement;\n          }\n\n          state.stack.pop();\n        }\n\n        if (replacementArray) {\n          return replacementArray;\n        }\n      } else if (/^(String|Int|Bool|Double|Float|Date|Tag)(|Vector)Map/.test(typeName)) {\n        // Map processing\n        let typeName2;\n\n        if (typeName.indexOf('String') === 0) {\n          typeName2 = 'String';\n        } else if (typeName.indexOf('Date') === 0) {\n          typeName2 = 'Date';\n        } else if (typeName.indexOf('Int') === 0) {\n          typeName2 = 'int';\n        } else if (typeName.indexOf('Float') === 0) {\n          typeName2 = 'float';\n        } else if (typeName.indexOf('Double') === 0) {\n          typeName2 = 'double';\n        } else if (typeName.indexOf('Bool') === 0) {\n          typeName2 = 'boolean';\n        } else if (typeName.indexOf('Tag') === 0) {\n          typeName2 = 'ModelObject';\n        }\n\n        if (/VectorMap/g.test(typeName)) {\n          typeName2 += '[]';\n        }\n\n        _.forEach(bodyElement, function (value, key) {\n          let valueFinal = value;\n\n          if (!_.isString(key)) {\n            state.issues.push('INVALID FIELD: Expected string, not ' + typeof key + ' --' + state.stack.join('.'));\n            return;\n          }\n\n          if (typeName2) {\n            if (!bodyElement[key]) {\n              initializeField(state, typeName2, bodyElement, key, false);\n              valueFinal = bodyElement[key];\n            }\n\n            if (typeName2) {\n              if (!bodyElement[key]) {\n                initializeField(state, typeName2, bodyElement, key, false);\n                valueFinal = bodyElement[key];\n              }\n\n              state.stack.push(key);\n              const replacement = validateElementType(state, typeName2, valueFinal);\n\n              if (replacement) {\n                bodyElement[key] = replacement;\n              }\n\n              state.stack.pop();\n            } else {\n              state.issues.push('INVALID FIELD: Unsupported map type of ' + typeName + ' --' + state.stack.join('.'));\n            }\n\n            state.stack.pop();\n          } else {\n            state.issues.push('INVALID FIELD: Unsupported map type of ' + typeName + ' --' + state.stack.join('.'));\n          }\n        });\n      } else {\n        state.issues.push('INVALID FIELD: Unsupported type of ' + typeName + ' --' + state.stack.join('.'));\n      }\n\n  }\n}\n/**\n * Recursive method for default & validate SOA operation body.\n *\n * @param {Object} state - state object\n * @param {Object} schemaElement - schema element/cursor for the walk\n * @param {Object} bodyElement - body element/cursor for the walk\n * @private\n */\n\n\nfunction defaultAndValidateElementRecurse(state, schemaElement, bodyElement) {\n  // Walk schema to add any missing fields\n  const isMapLcl = isMap(state, schemaElement);\n\n  if (!isMapLcl) {\n    _.forEach(schemaElement, function (typeName, key2) {\n      let deleted = false;\n\n      if (bodyElement.hasOwnProperty(key2) && bodyElement[key2] === null) {\n        delete bodyElement[key2];\n        deleted = true;\n      }\n\n      if (!bodyElement.hasOwnProperty(key2) || !bodyElement[key2]) {\n        initializeField(state, typeName, bodyElement, key2, deleted);\n      }\n    });\n  } // Walk body element to validate against schema & recurse\n\n\n  let replacement = null;\n\n  _.forEach(bodyElement, function forEachdefaultAndValidateElementRecurse(value, key2) {\n    if (isMapLcl) {\n      if (_.isArray(bodyElement)) {\n        for (let ii = 0; ii < bodyElement[0].length; ii++) {\n          state.stack.push(ii);\n          replacement = validateElementType(state, schemaElement.key, bodyElement[0][ii]);\n\n          if (replacement) {\n            bodyElement[0][ii] = replacement;\n          }\n\n          replacement = validateElementType(state, schemaElement.value, bodyElement[1][ii]);\n\n          if (replacement) {\n            bodyElement[1][ii] = replacement;\n          }\n\n          state.stack.pop();\n        }\n      } else {\n        for (const mapKey in bodyElement) {\n          if (bodyElement.hasOwnProperty(key2)) {\n            state.stack.push(key2);\n            replacement = validateElementType(state, schemaElement.key, mapKey);\n\n            if (replacement) {\n              const oldValue = bodyElement[mapKey];\n              delete bodyElement[mapKey];\n              bodyElement[replacement] = oldValue;\n            }\n\n            replacement = validateElementType(state, schemaElement.value, bodyElement[mapKey]);\n\n            if (replacement) {\n              bodyElement[mapKey] = replacement;\n            }\n\n            state.stack.pop();\n          }\n        }\n      }\n    } else if (schemaElement.hasOwnProperty(key2)) {\n      state.stack.push(key2);\n      replacement = validateElementType(state, schemaElement[key2], value);\n\n      if (replacement) {\n        bodyElement[key2] = replacement;\n      }\n\n      state.stack.pop();\n    } else {\n      state.issues.push('INVALID FIELD: Unexpected type of ' + state.stack.join('.') + '.' + key2);\n      delete bodyElement[key2];\n    }\n  });\n}\n/**\n * Default & validate SOA operation body.\n *\n * @param {Object} schemaService - schema for service\n * @param {String} serviceName - service name\n * @param {String} operationName - operation name\n * @param {Object} body - request body\n * @returns {Object} request body with defaulting & validation complete\n * @private\n */\n\n\nfunction defaultAndValidateElement(schemaService, serviceName, operationName, body) {\n  const state = {\n    // If caller has passed null, they've indicated that there's an empty body.\n    body: body ? body : {},\n    serviceName: serviceName,\n    operationName: operationName,\n    schemaService: schemaService,\n    issues: [],\n    stack: []\n  };\n\n  if (state.schemaService) {\n    state.operation = state.schemaService[state.operationName];\n\n    if (state.operation) {\n      // Walk body make sure it aligns to the schema\n      defaultAndValidateElementRecurse(state, state.operation, state.body);\n\n      if (state.issues.length > 0) {\n        logger.error('Invalid SOA request body!\\n' + state.issues.join('\\n') + '\\n\\nInput body:', state.body);\n      }\n    } else {\n      logger.error('No SOA operation for ' + state.serviceName + ' ' + state.operationName + '! Skipping validation & default of SOA input.');\n    }\n  } else {\n    logger.error('No SOA service for ' + state.serviceName + '! Skipping validation & default of SOA input.');\n  }\n\n  return state.body;\n} // Response processing\n\n/**\n * Process an array of objects to create a single string of messages.\n *\n * @param {Object} messages - array of objects containing message fields\n * @param {Object} msgObj - message object with message value & level\n */\n\n\nfunction getMessageString(messages, msgObj) {\n  _.forEach(messages, function (object) {\n    if (msgObj.msg.length > 0) {\n      msgObj.msg += '\\n';\n    }\n\n    msgObj.msg += object.message;\n    msgObj.level = _.max([msgObj.level, object.level]);\n  });\n}\n/**\n * Return a reference to a new 'error' object set with the given error information.\n *\n * @param {Object} errIn - error in\n *\n * @returns {Object} - JavaScript Error object\n */\n\n\nexport const createError = function (errIn) {\n  const msgObj = {\n    msg: '',\n    level: 0\n  };\n\n  if (errIn.message) {\n    msgObj.msg = errIn.message;\n  } else if (errIn.status || errIn.statusText) {\n    msgObj.msg = errIn.status + ' ' + errIn.statusText;\n  } else if (errIn.PartialErrors) {\n    _.forEach(errIn.PartialErrors, function (partialError) {\n      getMessageString(partialError.errorValues, msgObj);\n    });\n  } else if (errIn.partialErrors) {\n    _.forEach(errIn.partialErrors, function (partialError) {\n      getMessageString(partialError.errorValues, msgObj);\n    });\n  } else if (errIn.messages) {\n    getMessageString(errIn.messages, msgObj);\n  } else {\n    msgObj.msg = errIn.toString();\n  }\n\n  if (errIn.data && errIn.data.messages) {\n    getMessageString(errIn.data.messages, msgObj);\n  }\n\n  const error = new Error(msgObj.msg);\n  error.cause = errIn;\n  error.level = msgObj.level;\n  return error;\n};\n/**\n * @param {Object} response - response\n * @return {Object|null} service data\n */\n\nfunction getServiceData(response) {\n  if (response.hasOwnProperty('.QName') && /\\.ServiceData$/.test(response['.QName'])) {\n    return response;\n  } else if (response.ServiceData) {\n    // If the service data is a member field, update the service data reference\n    return response.ServiceData;\n  }\n}\n/**\n * Process SOA partial exceptions in response.\n *\n * @param {Object} response JSON response data\n * @param {String} serviceName - service name\n * @param {String} operationName - operation name\n * @return {Object} response JSON response data\n */\n\n\nfunction processExceptions(response, serviceName, operationName) {\n  const serviceData = getServiceData(response);\n\n  if (serviceData && serviceData.partialErrors || response.PartialErrors && !_.isEmpty(response.PartialErrors)) {\n    // Publish SAN event to log the SOA errors to analytics\n    let qName = 'unknown';\n\n    if (response.hasOwnProperty('.QName')) {\n      qName = response['.QName'];\n    }\n\n    eventBus.publishOnChannel({\n      channel: 'SAN_Events',\n      topic: 'aw-command-logErrros',\n      data: {\n        sanQName: qName,\n        sanPartialErrors: serviceData && serviceData.partialErrors || response,\n        sanServiceName: serviceName,\n        sanOperationName: operationName,\n        sanLogCorrelationID: logger.getCorrelationID()\n      }\n    });\n  } // Should we search for 'Exception' in QName?\n\n\n  if (response && response.hasOwnProperty('.QName')) {\n    if (/InvalidUserException$/.test(response['.QName'])) {\n      if (operationName === GET_SESSION_INFO.operationName) {\n        // This is the trivial case of initial connection to the server.\n        throw exports.createError(response);\n      } // hit the InvalidUserException during a non-login related SOA call.\n      // this is a session time-out situation.\n\n\n      eventBus.publish('session.stale', {});\n      console.log('Encountered Session timeout. SOA Request for service: ' + serviceName + ', ' + // eslint-disable-line no-console\n      operationName + '  Will refresh the page in order to re-Authenticate.'); // assumption is that we've timed out, so need to \"reAuthenticate\".\n      // Legacy GWT logic would call the session manager to reauthenticate(), but that\n      // pattern is no longer used.  In general we just will reload the page and\n      // that will update the authentication state and trigger reauthentication.\n\n      location.reload(false); // trigger a page refresh, that will reload and authenticate again.\n    } // FIXME this should be conditioned with a QName check...\n\n\n    if (/Exception$/.test(response['.QName'])) {\n      throw exports.createError(response);\n    }\n  }\n\n  return response;\n}\n/**\n * @private\n * @param {Object} parent - parent element\n * @param {Array} modelObjs - Array of {ModelObject} found in response\n * @param {Object} typeNames - array of referenced type names\n */\n\n\nfunction extractModelObjAndTypeFromResponse(parent, modelObjs, typeNames) {\n  _.forEach(parent, function (child, key) {\n    if (_.isPlainObject(child)) {\n      if (child.hasOwnProperty('uid') && child.hasOwnProperty('type')) {\n        if (child.uid && child.uid !== cdm.NULL_UID) {\n          if (modelObjs) {\n            modelObjs.push(child);\n          } else {\n            const modelObj = cdm.getObject(child.uid);\n\n            if (modelObj) {\n              parent[key] = modelObj;\n            }\n          }\n        }\n\n        if (typeNames && child.type && child.type !== 'unknownType') {\n          typeNames[child.type.toString()] = null;\n        }\n      } else {\n        extractModelObjAndTypeFromResponse(child, modelObjs, typeNames);\n      }\n    } else if (_.isArray(child)) {\n      extractModelObjAndTypeFromResponse(child, modelObjs, typeNames);\n    }\n  });\n}\n/**\n * @private\n * @param {Object} response - Response from SOA service.\n * @param {Array} modelObjs - Array of {ModelObject} from SOA service.\n * @returns {Object} Response from SOA service.\n */\n\n\nfunction processResponseObjects(response, modelObjs) {\n  const serviceData = getServiceData(response);\n  let updatedObjs = [];\n\n  if (modelObjs && modelObjs.length > 0) {\n    // Add objects to CDM\n    cdm.cacheObjects(modelObjs);\n    updatedObjs = modelObjs; // To support the anti-pattern of code pulling the modelObject from the response, we need to update the response serviceData.\n\n    extractModelObjAndTypeFromResponse(response);\n  }\n\n  if (serviceData) {\n    if (serviceData.created) {\n      const createdObjects = [];\n\n      _.forEach(serviceData.created, function (uid) {\n        const createdObject = cdm.getObject(uid);\n\n        if (createdObject) {\n          createdObjects.push(createdObject);\n        }\n      });\n\n      if (createdObjects.length) {\n        eventBus.publish('cdm.created', {\n          createdObjects: createdObjects\n        });\n      }\n    }\n\n    if (serviceData.updated) {\n      const updatedObjects = [];\n\n      _.forEach(serviceData.updated, function (uid) {\n        if (!cmm.isTypeUid(uid)) {\n          const updatedObject = cdm.getObject(uid);\n\n          if (updatedObject) {\n            updatedObjects.push(updatedObject);\n          }\n        }\n      });\n\n      if (updatedObjects.length) {\n        eventBus.publish('cdm.updated', {\n          updatedObjects: updatedObjects\n        });\n      }\n    }\n\n    if (serviceData.deleted) {\n      // Remove objects from CDM\n      cdm.removeObjects(serviceData.deleted);\n    }\n  }\n\n  const currentStore = appCtxSvc.getCtx('vmo') || {};\n  let timeNow = Date.now();\n  let values = {};\n\n  if (updatedObjs.length) {\n    for (const mo of updatedObjs) {\n      let refUid = getRefUid(mo);\n      let uidVal = mo.uid;\n      currentStore[uidVal] = {\n        type: mo.type,\n        time: timeNow,\n        ref: refUid\n      };\n\n      if (uidVal) {\n        values[uidVal] = true;\n      }\n    }\n\n    const storeValues = Object.entries(currentStore);\n\n    if (!_.isEmpty(values)) {\n      for (const [uid, {\n        type,\n        ref\n      }] of storeValues) {\n        if (values[ref]) {\n          currentStore[uid] = {\n            type: type,\n            time: timeNow,\n            ref: ref\n          };\n        }\n      }\n    }\n\n    appCtxSvc.registerCtx('vmo', currentStore);\n  }\n\n  return response;\n}\n\nconst getRefUid = mo => {\n  if (mo.type === 'Awp0XRTObjectSetRow' && mo.props && mo.props.awp0Target) {\n    return mo.props.awp0Target.dbValues[0];\n  }\n\n  return null;\n};\n/**\n * Process service data in HTTP response.\n *\n * @param {Object} response - JSON response data\n * @param {String} operationName - operation name\n * @return {Promise} Promise resolved once types are loaded\n */\n\n\nfunction processResponseTypes(response, operationName) {\n  if (response) {\n    const modelObjs = [];\n    const typeNamesObj = {};\n    const qName = response['.QName'];\n\n    if (qName !== 'http://teamcenter.com/Schemas/Soa/2011-06/MetaModel.TypeSchema') {\n      extractModelObjAndTypeFromResponse(response, modelObjs, typeNamesObj);\n    }\n\n    const typeNames = Object.keys(typeNamesObj);\n\n    if (operationName === GET_SESSION_INFO.operationName && response.extraInfoOut) {\n      if (response.extraInfoOut.AWC_StartupTypes) {\n        _typeCacheLMD = response.extraInfoOut.typeCacheLMD;\n        _awStartupPreferences = response.extraInfoOut.AWC_StartupTypes.split(','); // Always include TC_Project even if not in the start up preference\n\n        if (!_.includes(_awStartupPreferences, 'TC_Project')) {\n          _awStartupPreferences.push('TC_Project');\n        } // Always include ListOfValuesString even if not in the start up preference\n\n\n        if (!_.includes(_awStartupPreferences, 'ListOfValuesString')) {\n          _awStartupPreferences.push('ListOfValuesString');\n        }\n      }\n\n      const loadedTypes = typeCacheSvc.getLocalTypes(_typeCacheLMD);\n      cmm.cacheTypes(loadedTypes);\n    }\n\n    return exports.ensureModelTypesLoaded(typeNames).then(function () {\n      // Just in case we have more types, let's go get them...\n      return processResponseObjects(response, modelObjs);\n    });\n  }\n\n  return AwPromiseService.instance.resolve();\n}\n/**\n *\n * Gets the effective property policy\n *\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {boolean} isSelectedPropertyPolicy - boolean which indicates whether the selected property is required\n *            or not.\n * @returns {Object} request body with defaulting & validation complete\n * @private\n */\n\n\nfunction getEffectivePropertyPolicy(propertyPolicyOverride, isSelectedPropertyPolicy) {\n  if (_.isString(propertyPolicyOverride)) {\n    return JSON.parse(propertyPolicyOverride);\n  }\n\n  if (_.isObject(propertyPolicyOverride)) {\n    // No need to pass a property policy for this call.\n    return propertyPolicyOverride;\n  }\n\n  return propPolicySvc.getEffectivePolicy(exports, isSelectedPropertyPolicy);\n}\n/**\n * @param {String} clientId - client ID used in SOA header\n */\n\n\nexport const setClientIdHeader = function (clientId) {\n  _clientId = clientId;\n};\n/**\n * @return {String} client ID used in SOA header\n */\n\nexport const getClientIdHeader = function () {\n  return _clientId;\n};\n/**\n * @param {Number} pollingTimeout - timeout to allow polling SOA calls to be made after last non-polling call (minutes)\n */\n\nexport const setPollingTimeout = function (pollingTimeout) {\n  if (pollingTimeout) {\n    _pollingTimeout = pollingTimeout * 60;\n  }\n};\n/**\n * Teamcenter SOA request.\n *\n * @param {String} serviceName - SOA service name\n * @param {String} operationName - SOA operation name\n * @param {String} body - JSON body\n *\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {Bool} ignoreHost - Flag to say ignore hosting when making soa call.\n * @param {Object|String} headerStateOverride - SOA header state override (or NULL)\n * @param {Boolean} checkPartialErrors - check for partial errors in the response\n * @param {Boolean} polling - true if this is a polling call\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport const request = function (serviceName, operationName, body) {\n  let {\n    propertyPolicyOverride,\n    ignoreHost = false,\n    headerStateOverride = false,\n    checkPartialErrors = false,\n    polling = false\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  assert(serviceName, 'Service name not provided!');\n  assert(operationName, 'Operation name not provided!'); // Support polling SOA calls to have a timeout. This stops an idle client\n  // browser from making polling calls.This is required because the TC web\n  // tier needs to be able to allow it's session to timeout.\n\n  if (_pollingTimeout > 0) {\n    if (polling) {\n      // Determine when last call was made.\n      const timeOfLastCall = _.toNumber(localStrg.get('soaService.timeOfLastCall'));\n\n      if (timeOfLastCall) {\n        const secsSinceLastCall = (Date.now() - timeOfLastCall) / 1000; // If longer than polling timeout, avoid call.\n\n        if (secsSinceLastCall > _pollingTimeout) {\n          return AwPromiseService.instance.reject(new Error('Polling call skipped due to client inactivity.'));\n        }\n      }\n    } else {\n      // localStorage is being used because SOA calls from other\n      // browsers tabs allow this tab to make the polling call.\n      localStrg.publish('soaService.timeOfLastCall', Date.now());\n    }\n  }\n\n  let isSelectedPropertyPolicy = false;\n  let endPt;\n  let promise;\n\n  if (GET_SESSION_INFO.serviceName === serviceName && GET_SESSION_INFO.operationName === operationName) {\n    // avoid loading schema for get session info call\n    const schemaService = {};\n    schemaService[GET_SESSION_INFO.operationName] = {}; // extraInfoIn: \"String[]\"\n\n    promise = AwPromiseService.instance.resolve(schemaService);\n  } else {\n    promise = configSvc.getCfg('schema.' + serviceName).then(function (schemaService) {\n      return schemaService;\n    }, function () {\n      // none found\n      logger.warn('No SOA schema definition found!');\n      return {};\n    });\n  }\n\n  return promise.then(function (schemaService) {\n    if (appCtxSvc.ctx.aw_hosting_enabled && !appCtxSvc.ctx.aw_hosting_soa_support_checked) {\n      appCtxSvc.ctx.aw_hosting_soa_support_checked = true;\n    }\n\n    if (body) {\n      isSelectedPropertyPolicy = propPolicySvc.checkForSelectedObject(body);\n    }\n\n    const jsonData = {\n      header: {\n        state: {\n          clientVersion: '10000.1.2',\n\n          /**\n           * Correlation ID for logging purposes (debug).\n           */\n          logCorrelationID: logger.getCorrelationID(),\n\n          /**\n           * Permanent ID/recipes are used for the runtime business object’s (BOMLine objects) opaque UIDs\n           * in requests/responses.\n           * <p>\n           * If the unloadObjects key is not in the request headers, all business objects are unloaded at\n           * the top of each request; see the processTagManager ITK for more information.\n           */\n          stateless: true,\n\n          /**\n           * If true, All business objects are unloaded at the top of each request; see the\n           * processTagManager ITK for more information. Previously controlled through the stateless flag.\n           * <p>\n           * When is stateless=true mode this value must be explicitly set to false to keep objects\n           * loaded.\n           */\n          unloadObjects: true,\n\n          /**\n           * If true, process server-session state key/value pairs found in the request headers. This\n           * turns all session state into client-session data. The standalone AW client should set this to\n           * true, while the hosted AW client should set it false (or not send it at all).\n           */\n          enableServerStateHeaders: !_redirectSoaSvc,\n\n          /**\n           */\n          formatProperties: true\n        },\n        policy: getEffectivePropertyPolicy(propertyPolicyOverride, isSelectedPropertyPolicy)\n      },\n      body: defaultAndValidateElement(schemaService, serviceName, operationName, body)\n    };\n    mergeHeaderState(jsonData.header.state, headerStateOverride);\n\n    if (appCtxSvc && appCtxSvc.getCtx('objectQuotaContext.useObjectQuota')) {\n      /**\n       * If true, All business objects are unloaded at the top of each request. Applications might want to\n       * rely on object quota based unload. In such cases they can use \"objectQuotaContext\" to override this\n       * behavior and reset this flag to avail this feature\n       */\n      jsonData.header.state.unloadObjects = false;\n    }\n\n    if (!_redirectSoaSvc && _clientId !== '') {\n      jsonData.header.state.clientID = _clientId;\n    }\n\n    const headers = {\n      // Only US-ASCII characters are allowed in HTTP headers\n      // http://stackoverflow.com/questions/34670413/regexp-to-validate-a-http-header-value/34710882#34710882\n      'Log-Correlation-ID': jsonData.header.state.logCorrelationID.replace(/[^\\x20-\\x7E]+/g, '')\n    };\n\n    if (GET_SESSION_INFO.serviceName === serviceName && GET_SESSION_INFO.operationName === operationName) {\n      headers.clientIP = 'browser-client';\n    }\n\n    let awSession = localStrg.get('awSession');\n\n    if (awSession) {\n      try {\n        awSession = JSON.parse(awSession);\n\n        if (!appCtxSvc.ctx.aw_hosting_enabled) {\n          if (awSession.groupMemberUID) {\n            jsonData.header.state.groupMember = awSession.groupMemberUID;\n          }\n\n          if (awSession.roleName) {\n            jsonData.header.state.role = awSession.roleName;\n          }\n        }\n\n        if (awSession.locale) {\n          jsonData.header.state.locale = awSession.locale;\n        }\n      } catch (err) {\n        logger.debug(err);\n        localStrg.removeItem('awSession');\n      }\n    }\n\n    endPt = serviceName + '/' + operationName;\n\n    if (logger.isTraceEnabled()) {\n      logger.trace('\\n' + 'soaService.post to ' + endPt, jsonData);\n    }\n\n    pendingRequests++;\n    eventBus.publish('progress.start', {\n      endPoint: endPt\n    });\n    /**\n     * Check if there is a 'host' process that is handling SOA processing<BR>\n     * If so: Send the 'endPt' and data to that service.\n     */\n    // The only case the client will make its own login call when hosted would be when it needs credentials.\n    // If such a call is made, we should not make it through the host. This is the only case when AW talks directly to the server.\n    // This will allow Viewer to show up in hosts.\n\n    if (_redirectSoaSvc && !ignoreHost) {\n      return _redirectSoaSvc.post(serviceName, operationName, jsonData);\n    }\n\n    const $http = AwHttpService.instance;\n    trace('HTTP call start', serviceName, operationName);\n    return $http.post(browserUtils.getBaseURL() + 'tc/JsonRestServices/' + endPt, jsonData, {\n      headers: headers\n    }).then(function (response) {\n      trace('HTTP call complete', serviceName, operationName);\n      assert(response, 'No response given for ' + endPt);\n      const body2 = response.data;\n      assert(typeof body2 !== 'string' || body2.indexOf('<?xml version') === -1, 'Unexpected response body for: ' + endPt);\n      return body2;\n    });\n  }).then(function (response) {\n    pendingRequests--;\n    eventBus.publish('progress.end', {\n      endPoint: endPt\n    });\n\n    if (logger.isTraceEnabled()) {\n      logger.trace('endPt=' + endPt, response);\n    }\n\n    return processExceptions(response, serviceName, operationName);\n  }, function (err) {\n    pendingRequests--;\n    eventBus.publish('progress.end', {\n      endPoint: endPt\n    });\n    throw exports.createError(err);\n  }).then(function (response) {\n    if (!propertyPolicyOverride && !isSelectedPropertyPolicy) {\n      loadPropertiesIfRequired(response);\n    }\n\n    return processResponseTypes(response, operationName);\n  }).then(function (response) {\n    if (checkPartialErrors && response) {\n      if (response.PartialErrors) {\n        throw exports.createError(response.PartialErrors);\n      }\n\n      const serviceData = getServiceData(response);\n\n      if (serviceData && serviceData.partialErrors) {\n        throw exports.createError(serviceData);\n      }\n    }\n\n    return response;\n  });\n};\n/**\n * Merge default header state with the given overrides\n *\n * @param {Object|String} defaultHeaderState - SOA header state default (or NULL)\n * @param {Object|String} headerStateOverride - SOA header state override (or NULL)\n */\n\nfunction mergeHeaderState(defaultHeaderState, headerStateOverride) {\n  const keys = headerStateOverride ? Object.keys(headerStateOverride) : [];\n\n  for (let i = 0; i < keys.length; ++i) {\n    defaultHeaderState[keys[i]] = headerStateOverride[keys[i]];\n  }\n}\n/**\n * Calls getProperties Soa to load additional properties if required.\n *\n * @param {Object} response - JSON response data\n */\n\n\nfunction loadPropertiesIfRequired(response) {\n  if (response) {\n    const serviceData = getServiceData(response);\n\n    if (serviceData) {\n      const responseObjects = [];\n\n      if (serviceData.updated) {\n        for (let ii2 = 0; ii2 < serviceData.updated.length; ii2++) {\n          const updatedUid = serviceData.updated[ii2];\n\n          if (!cmm.isTypeUid(updatedUid)) {\n            const updatedObject = cdm.getObject(updatedUid);\n\n            if (updatedObject) {\n              responseObjects.push(updatedObject);\n            }\n          }\n        }\n      }\n\n      if (serviceData.created) {\n        for (let ii = 0; ii < serviceData.created.length; ii++) {\n          const createdObject = cdm.getObject(serviceData.created[ii]);\n\n          if (createdObject) {\n            responseObjects.push(createdObject);\n          }\n        }\n      }\n\n      if (responseObjects.length > 0 && propPolicySvc.checkForSelectedObject(null, responseObjects)) {\n        exports.request('Core-2006-03-DataManagement', 'getProperties', {\n          objects: responseObjects,\n          attributes: []\n        }, {\n          propertyPolicyOverride: propPolicySvc.getEffectivePolicy(null, true)\n        });\n      }\n    }\n  }\n}\n/**\n * SOA post unchecked.\n *\n * @param {String} serviceName - SOA service name\n * @param {String} operationName - SOA operation name\n * @param {String} body - JSON body\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {Bool} ignoreHost - Flag to say ignore hosting when making soa call.\n * @param {Object|String} headerStateOverride - SOA header state override (or NULL)\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\n\nexport const postUnchecked = function (serviceName, operationName, body, propertyPolicyOverride, ignoreHost, headerStateOverride) {\n  return exports.request(serviceName, operationName, body, {\n    propertyPolicyOverride,\n    ignoreHost,\n    headerStateOverride\n  });\n};\n/**\n * SOA post.\n *\n * If the response contains partial errors, it will be treated as an exception & thrown. If this isn't desired,\n * use postUnchecked.\n *\n * @param {String} serviceName - SOA service name\n * @param {String} operationName - SOA operation name\n * @param {String} body - JSON body\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport const post = function (serviceName, operationName, body, propertyPolicyOverride, ignoreHost) {\n  return exports.request(serviceName, operationName, body, {\n    propertyPolicyOverride,\n    ignoreHost,\n    checkPartialErrors: true\n  });\n};\n/**\n * Set session information into local storage (if needed)\n *\n * @param {Boolean} signOut - sign out\n */\n\nexport const setSessionInfo = function (signOut) {\n  if (!signOut) {\n    const userSession = cdm.getUserSession();\n\n    if (userSession) {\n      // Store all the required fields to support the SOA header\n      const awSession = {\n        groupMemberUID: _.get(userSession, 'props.fnd0groupmember.dbValues.0'),\n        locale: _.get(userSession, 'props.fnd0locale.dbValues.0'),\n        roleName: _.get(userSession, 'props.role_name.dbValues.0')\n      };\n      localStrg.publish('awSession', JSON.stringify(awSession));\n    }\n  } else {\n    localStrg.removeItem('awSession');\n  }\n};\n/**\n * Perform an async get of current Teamcenter session information.\n *\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport const getTCSessionInfo = function (ignoreHost) {\n  // Ensure we have the required properties for the UserSession.\n  const policyId = propPolicySvc.register({\n    types: [{\n      name: 'UserSession',\n      properties: [{\n        name: 'awp0RevRule',\n        modifiers: [{\n          name: 'includeIsModifiable',\n          Value: 'true'\n        }]\n      }, {\n        name: 'user',\n        modifiers: [{\n          name: 'withProperties',\n          Value: 'true'\n        }]\n      }, {\n        name: 'user_id'\n      }, {\n        name: 'group',\n        modifiers: [{\n          name: 'withProperties',\n          Value: 'true'\n        }]\n      }, {\n        name: 'group_name'\n      }, {\n        name: 'project'\n      }, {\n        name: 'role'\n      }, {\n        name: 'role_name'\n      }, {\n        name: 'fnd0locale'\n      }, {\n        name: 'fnd0LocationCode'\n      }, {\n        name: 'fnd0groupmember'\n      }]\n    }, {\n      name: 'Group',\n      properties: [{\n        name: 'privilege'\n      }]\n    }, {\n      name: 'User',\n      properties: [{\n        name: 'home_folder'\n      }]\n    }]\n  });\n  return exports.request(GET_SESSION_INFO.serviceName, GET_SESSION_INFO.operationName, {}, {\n    ignoreHost,\n    checkPartialErrors: true\n  }).then(function (response) {\n    propPolicySvc.unregister(policyId);\n    exports.setSessionInfo();\n    return response;\n  }).catch(function (err) {\n    propPolicySvc.unregister(policyId); // Since we have no session, clear the session from localStorage to ensure we don't try to use it.\n\n    localStrg.removeItem('awSession');\n    throw err;\n  });\n};\n/**\n * Get Type Descriptions from server.\n *\n * Note, this is hidden in this file to avoid anyone else directly calling this.\n *\n * @private\n *\n * @param {StringArray} typeNames - Array of type names\n *\n * @return {Promise} Promise who's resolution is the result of the SOA 'getTypeDescriptions2' operation.\n */\n\nasync function getTypeDescriptions(typeNames) {\n  assert(typeNames && typeNames.length > 0, 'No type names provided!');\n  typeNames.sort();\n\n  const typeNamesFinal = _.uniq(typeNames, true);\n\n  const typesToLoad = typeNamesFinal.filter(type => {\n    if (!_typeLoadInProgress[type]) {\n      return type;\n    }\n  });\n  const currentTypesBeingLoadedPromises = typeNamesFinal.filter(type => !typesToLoad.includes(type)).map(type => {\n    if (_typeLoadInProgress[type]) {\n      return _typeLoadInProgress[type];\n    }\n  });\n  const newLoadPromises = [];\n\n  if (typesToLoad.length > 0) {\n    const loadTypesPromise = exports.request('Core-2015-10-Session', 'getTypeDescriptions2', {\n      typeNames: typesToLoad,\n      options: {\n        PropertyExclusions: ['LovReferences', 'NamingRules', 'RendererReferences'],\n        TypeExclusions: ['DirectChildTypesInfo', 'RevisionNamingRules', 'ToolInfo']\n      }\n    }, {\n      propertyPolicyOverride: {}\n    });\n\n    for (const type of typesToLoad) {\n      _typeLoadInProgress[type] = loadTypesPromise;\n    }\n\n    newLoadPromises.push(loadTypesPromise);\n  }\n\n  const response = await Promise.all([...currentTypesBeingLoadedPromises, ...newLoadPromises]);\n\n  for (const type of typesToLoad) {\n    delete _typeLoadInProgress[type];\n  }\n\n  return response;\n}\n/**\n * Verify async that the given model types are loaded into the client's meta model.\n *\n * @param {StringArray} typeNames - An array of type names to ensure are cached.\n *\n * @return {Promise} Promise who's resolution is a 'null' value since the types are now loaded into the cache.\n *         This 'null' result is required because the GWT-side wrapper requires an AsyncCallback<Void> callback\n *         (not AsyncCallback<IJsAarray>).\n */\n\n\nexport const ensureModelTypesLoaded = function (typeNames) {\n  /**\n   * Handle trivial case\n   */\n  if (!typeNames) {\n    return AwPromiseService.instance.reject('Invalid type name array specified');\n  }\n  /**\n   * From the input list of type names, get a list of unique type names not in the CMM already.\n   */\n\n\n  const missingTypeNames = [];\n\n  _.forEach(typeNames, function (typeName) {\n    if (!cmm.containsType(typeName) && _invalidTypeNames.indexOf(typeName) === -1) {\n      missingTypeNames.push(typeName);\n    }\n  });\n  /**\n   * Check if we have any missing.\n   */\n\n\n  if (missingTypeNames.length > 0) {\n    // logger.info( \"Missing Types: \" + JSON.stringify( missingTypeNames ) );\n    return getTypeDescriptions(missingTypeNames).then(function (responseGetTypeDescriptions) {\n      for (const response of responseGetTypeDescriptions) {\n        if (response && response.types) {\n          const modelTypes = response.types;\n          const modelTypes2 = [];\n\n          _.forEach(modelTypes, function (typeName) {\n            if (!cmm.containsType(typeName)) {\n              modelTypes2.push(typeName);\n            }\n          });\n\n          if (modelTypes2.length > 0) {\n            cmm.cacheTypes(modelTypes2); // Cache the types in localStorage.\n\n            typeCacheSvc.setLocalTypes(modelTypes2, _awStartupPreferences, _typeCacheLMD, true);\n          }\n        } // Capture invalid type names\n\n\n        _.forEach(missingTypeNames, function (typeName) {\n          if (!cmm.containsType(typeName)) {\n            // add empty type to avoid future server calls\n            _invalidTypeNames.push(typeName);\n\n            _invalidTypeNames.sort();\n\n            _invalidTypeNames = _.uniq(_invalidTypeNames, true);\n          }\n        });\n      }\n\n      return null;\n    });\n  }\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * Setup to log all events fired on the 'soajs' eventBus event channel.\n */\n\nif (logger && logger.isTraceEnabled()) {\n  eventBus.subscribe('#', function (data, envelope) {\n    let msg = 'eventBus: ' + envelope.topic + ' @ ' + envelope.timeStamp;\n\n    if (data && data.endPoint) {\n      if (envelope.topic === 'progress.start') {\n        _lastStartDate[data.endPoint] = envelope.timeStamp;\n      } else if (envelope.topic === 'progress.end' && _lastStartDate[data.endPoint]) {\n        const msDelta = envelope.timeStamp.getTime() - _lastStartDate[data.endPoint].getTime();\n\n        msg = msg + '\\n' + '          Time: ' + msDelta + 'ms' + '    ' + data.endPoint;\n        _lastStartDate[data.endPoint] = null;\n      }\n    }\n\n    if (logger.isTraceEnabled()) {\n      // Just print, using logger.trace causes infinite recursion\n      console.debug(msg, envelope); // eslint-disable-line no-console\n    }\n  }, 'soa_kernel_soaService');\n}\n/**\n * Determine if the user is currently signed in.\n *\n * @return {boolean} is signed in?\n */\n\n\nexport const isSignedIn = function () {\n  return _signedIn;\n};\nexport const getPendingRequestsCount = function () {\n  return pendingRequests;\n};\n/**\n * Subscribe to listen when we are signed in/out. Just tracking state locally. NOTE - for non User/PW\n * authentication, this state may not be 100% accurate.\n */\n\neventBus.subscribe('session.signIn', function () {\n  _signedIn = true;\n}, 'soa_kernel_soaService');\neventBus.subscribe('session.signOut', function () {\n  _signedIn = false;\n}, 'soa_kernel_soaService');\nconst exports = {\n  createError,\n  postUnchecked,\n  post,\n  request,\n  setSessionInfo,\n  getTCSessionInfo,\n  ensureModelTypesLoaded,\n  isSignedIn,\n  setClientIdHeader,\n  getClientIdHeader,\n  setPollingTimeout,\n  setSoaRedirect,\n  getPendingRequestsCount\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","AwHttpService","cdm","cmm","propPolicySvc","appCtxSvc","typeCacheSvc","configSvc","_","assert","Debug","logger","eventBus","browserUtils","localStrg","_signedIn","_lastStartDate","_invalidTypeNames","_awStartupPreferences","_typeCacheLMD","REGEX_ARRAY_SUFFIX","GET_SESSION_INFO","serviceName","operationName","_redirectSoaSvc","setSoaRedirect","redirect","trace","_typeLoadInProgress","_clientId","_pollingTimeout","pendingRequests","initializeField","state","typeName","bodyElement","key","deleted","uid","NULL_UID","type","test","schemaService","hasOwnProperty","isArray","isMap","schemaElement","Object","keys","length","validateElementType","isString","issues","push","stack","join","isNumber","isBoolean","boName","indexOf","toString","defaultAndValidateElementRecurse","undefined","typeName2","substring","replacementArray","ii","replacement","slice","pop","forEach","value","valueFinal","isMapLcl","key2","forEachdefaultAndValidateElementRecurse","mapKey","oldValue","defaultAndValidateElement","body","operation","error","getMessageString","messages","msgObj","object","msg","message","level","max","createError","errIn","status","statusText","PartialErrors","partialError","errorValues","partialErrors","data","Error","cause","getServiceData","response","ServiceData","processExceptions","serviceData","isEmpty","qName","publishOnChannel","channel","topic","sanQName","sanPartialErrors","sanServiceName","sanOperationName","sanLogCorrelationID","getCorrelationID","exports","publish","console","log","location","reload","extractModelObjAndTypeFromResponse","parent","modelObjs","typeNames","child","isPlainObject","modelObj","getObject","processResponseObjects","updatedObjs","cacheObjects","created","createdObjects","createdObject","updated","updatedObjects","isTypeUid","updatedObject","removeObjects","currentStore","getCtx","timeNow","Date","now","values","mo","refUid","getRefUid","uidVal","time","ref","storeValues","entries","registerCtx","props","awp0Target","dbValues","processResponseTypes","typeNamesObj","extraInfoOut","AWC_StartupTypes","typeCacheLMD","split","includes","loadedTypes","getLocalTypes","cacheTypes","ensureModelTypesLoaded","then","instance","resolve","getEffectivePropertyPolicy","propertyPolicyOverride","isSelectedPropertyPolicy","JSON","parse","isObject","getEffectivePolicy","setClientIdHeader","clientId","getClientIdHeader","setPollingTimeout","pollingTimeout","request","ignoreHost","headerStateOverride","checkPartialErrors","polling","timeOfLastCall","toNumber","get","secsSinceLastCall","reject","endPt","promise","getCfg","warn","ctx","aw_hosting_enabled","aw_hosting_soa_support_checked","checkForSelectedObject","jsonData","header","clientVersion","logCorrelationID","stateless","unloadObjects","enableServerStateHeaders","formatProperties","policy","mergeHeaderState","clientID","headers","replace","clientIP","awSession","groupMemberUID","groupMember","roleName","role","locale","err","debug","removeItem","isTraceEnabled","endPoint","post","$http","getBaseURL","body2","loadPropertiesIfRequired","defaultHeaderState","i","responseObjects","ii2","updatedUid","objects","attributes","postUnchecked","setSessionInfo","signOut","userSession","getUserSession","stringify","getTCSessionInfo","policyId","register","types","name","properties","modifiers","Value","unregister","catch","getTypeDescriptions","sort","typeNamesFinal","uniq","typesToLoad","filter","currentTypesBeingLoadedPromises","map","newLoadPromises","loadTypesPromise","options","PropertyExclusions","TypeExclusions","Promise","all","missingTypeNames","containsType","responseGetTypeDescriptions","modelTypes","modelTypes2","setLocalTypes","subscribe","envelope","timeStamp","msDelta","getTime","isSignedIn","getPendingRequestsCount"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/kernel/soaService.js"],"sourcesContent":["// Copyright (c) 2022 Siemens\n/* eslint-disable sonarjs/cognitive-complexity */\n\n/**\n * This is the Teamcenter SOA Service. It's the central pipeline for invoking JSON SOA APIs & FMS APIs from the client.\n *\n * Note: Many of the the functions defined in this module return a {@linkcode module:angujar~Promise|Promise} object.\n * The caller should provide callback function(s) to the 'then' method of this returned object (e.g. successCallback,\n * [errorCallback, [notifyCallback]]). These methods will be invoked when the associated service result is known.\n *\n * @module soa/kernel/soaService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport AwHttpService from 'js/awHttpService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport propPolicySvc from 'soa/kernel/propertyPolicyService';\nimport appCtxSvc from 'js/appCtxService';\nimport typeCacheSvc from 'soa/kernel/typeCacheService';\nimport configSvc from 'js/configurationService';\nimport _ from 'lodash';\nimport assert from 'assert';\nimport Debug from 'debug';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport localStrg from 'js/localStorage';\n\n/**\n * Boolean to indicate if we're signed into the server. This is just an observer state. True signin state is\n * managed by the Session Manager.\n *\n * @private\n */\nlet _signedIn = false;\n\n/**\n * Date/Time of the last progress 'start'. This is used to compute the amount of time a single SOA post takes.\n *\n * @private\n */\nconst _lastStartDate = {};\n\n/**\n * List of type names which have been deemed invalid based upon the previous server responses.\n *\n * @private\n */\nlet _invalidTypeNames = [ 'contents' ];\n\n/**\n * Types that need loaded if available.\n * On AW startup.\n * @private\n */\nlet _awStartupPreferences;\n\n/**\n * Types cache timestamp\n *\n * @private\n */\nlet _typeCacheLMD;\n\n/**\n * Regular expression used to test if a string ends with \"[]\"\n */\nconst REGEX_ARRAY_SUFFIX = /\\[\\]$/i;\n\n/**\n * Constant for operation name used for get TC Session Info\n *\n * @type {string}\n */\nconst GET_SESSION_INFO = {\n    serviceName: 'Internal-AWS2-2017-12-DataManagement',\n    operationName: 'getTCSessionAnalyticsInfo'\n};\n\n/**\n * SOA redirect\n */\nlet _redirectSoaSvc;\n\nexport const setSoaRedirect = function( redirect ) { _redirectSoaSvc = redirect; };\n\n/** Debug trace function */\nconst trace = new Debug( 'soaService' );\n\n/** Object to track which types are currently being loaded such that getTypeDescriptions2 is not duplicated for the same type */\nconst _typeLoadInProgress = {};\n\n/** client ID used in SOA header */\nlet _clientId = 'ActiveWorkspaceClient';\n\n/** timeout to allow polling SOA calls to be made after last non-polling call */\nlet _pollingTimeout = 15 * 60; // 15 minutes default\n\nlet pendingRequests = 0;\n\n/**\n * Initialize 'bodyElement[key]' based on given information.\n *\n * @private\n *\n * @param {Object} state - state object\n * @param {String} typeName - type name\n * @param {Object} bodyElement - body element\n * @param {String} key - key\n * @param {Boolean} deleted - was the key just deleted?\n */\nfunction initializeField( state, typeName, bodyElement, key, deleted ) {\n    switch ( typeName ) {\n        case 'String':\n        case 'Date':\n            bodyElement[ key ] = '';\n            break;\n        case 'int':\n        case 'float':\n        case 'double':\n            bodyElement[ key ] = 0;\n            break;\n        case 'boolean':\n            bodyElement[ key ] = false;\n            break;\n        case 'ModelObj':\n        case 'ModelObject':\n            bodyElement[ key ] = {\n                uid: deleted ? cdm.NULL_UID : '',\n                type: deleted ? 'unknownType' : ''\n            };\n            break;\n        default:\n            if( REGEX_ARRAY_SUFFIX.test( typeName ) ) {\n                // Array\n                bodyElement[ key ] = [];\n            } else if( state.schemaService.hasOwnProperty( typeName ) && _.isArray( state.schemaService[ typeName ] ) ) {\n                // Enum support... default to first entry\n                bodyElement[ key ] = state.schemaService[ typeName ][ 0 ];\n            } else {\n                // Object or map\n                bodyElement[ key ] = {};\n            }\n    }\n}\n\n/**\n * TRUE if the given element is in the schema.\n *\n * @private\n *\n * @param {Object} state - state object\n * @param {Object} schemaElement - schema element to evaluate to determine if element should be a map\n *\n * @returns {Boolean} TRUE if the given element is in the schema.\n */\nfunction isMap( state, schemaElement ) {\n    if( Object.keys( schemaElement ).length === 2 &&\n        schemaElement.hasOwnProperty( 'key' ) &&\n        schemaElement.hasOwnProperty( 'value' ) &&\n        !state.schemaService.hasOwnProperty( schemaElement.key ) ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Validate element type & recurse if non-trivial type.\n *\n * @private\n *\n * @param {Object} state - state object\n * @param {String} typeName - type name\n * @param {Object} bodyElement - body element\n * @returns {Object} ...\n */\nfunction validateElementType( state, typeName, bodyElement ) { // eslint-disable-line complexity\n    switch ( typeName ) {\n        case 'String':\n        case 'Date':\n            if( !_.isString( bodyElement ) ) {\n                state.issues.push( 'INVALID FIELD: Expected string, not ' + typeof bodyElement + ' --' +\n                    state.stack.join( '.' ) );\n            }\n            break;\n        case 'int':\n        case 'float':\n        case 'double':\n            if( !_.isNumber( bodyElement ) ) {\n                state.issues.push( 'INVALID FIELD: Expected number, not ' + typeof bodyElement + ' --' +\n                    state.stack.join( '.' ) );\n            }\n            break;\n        case 'boolean':\n            if( !_.isBoolean( bodyElement ) ) {\n                state.issues.push( 'INVALID FIELD: Expected boolean, not ' + typeof bodyElement + ' --' +\n                    state.stack.join( '.' ) );\n            }\n            break;\n        case 'ModelObj':\n        case 'ModelObject':\n            if( !bodyElement || !bodyElement.uid || !bodyElement.type ) {\n                return {\n                    uid: !bodyElement || !bodyElement.uid ? cdm.NULL_UID : bodyElement.uid,\n                    type: !bodyElement || !bodyElement.type ? 'unknownType' : bodyElement.type\n                };\n            }\n            if( Object.keys( bodyElement ).length !== 2 ) {\n                // replace with new object if it's not already uid & type only\n                return {\n                    uid: bodyElement.uid,\n                    type: bodyElement.type\n                };\n            }\n            break;\n        case 'ICreateInput':\n            if( !bodyElement || !bodyElement.boName || !_.isString( bodyElement.boName ) ) {\n                state.issues.push( 'INVALID FIELD VALUE: Expect type of ICreateInput' );\n            }\n            break;\n        default:\n            if( state.schemaService.hasOwnProperty( typeName ) ) {\n                if( _.isArray( state.schemaService[ typeName ] ) ) {\n                    // Enum\n                    if( state.schemaService[ typeName ].indexOf( bodyElement ) === -1 ) {\n                        state.issues.push( 'INVALID FIELD VALUE: Not valid enum value ' + typeName + ' expected ' +\n                            state.schemaService[ typeName ].toString() + ' --' + state.stack.join( '.' ) );\n                    }\n                } else {\n                    // Object processing\n                    defaultAndValidateElementRecurse( state, state.schemaService[ typeName ], bodyElement );\n                }\n            } else if( REGEX_ARRAY_SUFFIX.test( typeName ) ) {\n                // Array processing\n                if( !_.isArray( bodyElement ) ) {\n                    state.issues.push( 'INVALID FIELD: Expected array, not ' + typeof bodyElement + ' --' +\n                        state.stack.join( '.' ) );\n                    return undefined;\n                }\n                const typeName2 = typeName.substring( 0, typeName.length - 2 );\n                let replacementArray = null;\n                for( let ii = bodyElement.length - 1; ii >= 0; ii-- ) {\n                    state.stack.push( ii );\n                    const replacement = validateElementType( state, typeName2, bodyElement[ ii ] );\n                    if( replacement ) {\n                        if( !replacementArray ) {\n                            // we should probably replace the array in case caller is using for something else...\n                            replacementArray = bodyElement.slice( 0 );\n                        }\n                        replacementArray[ ii ] = replacement;\n                    }\n                    state.stack.pop();\n                }\n                if( replacementArray ) {\n                    return replacementArray;\n                }\n            } else if( /^(String|Int|Bool|Double|Float|Date|Tag)(|Vector)Map/.test( typeName ) ) {\n                // Map processing\n                let typeName2;\n                if( typeName.indexOf( 'String' ) === 0 ) {\n                    typeName2 = 'String';\n                } else if( typeName.indexOf( 'Date' ) === 0 ) {\n                    typeName2 = 'Date';\n                } else if( typeName.indexOf( 'Int' ) === 0 ) {\n                    typeName2 = 'int';\n                } else if( typeName.indexOf( 'Float' ) === 0 ) {\n                    typeName2 = 'float';\n                } else if( typeName.indexOf( 'Double' ) === 0 ) {\n                    typeName2 = 'double';\n                } else if( typeName.indexOf( 'Bool' ) === 0 ) {\n                    typeName2 = 'boolean';\n                } else if( typeName.indexOf( 'Tag' ) === 0 ) {\n                    typeName2 = 'ModelObject';\n                }\n                if( /VectorMap/g.test( typeName ) ) {\n                    typeName2 += '[]';\n                }\n                _.forEach( bodyElement, function( value, key ) {\n                    let valueFinal = value;\n\n                    if( !_.isString( key ) ) {\n                        state.issues.push( 'INVALID FIELD: Expected string, not ' + typeof key + ' --' +\n                            state.stack.join( '.' ) );\n                        return;\n                    }\n                    if( typeName2 ) {\n                        if( !bodyElement[ key ] ) {\n                            initializeField( state, typeName2, bodyElement, key, false );\n                            valueFinal = bodyElement[ key ];\n                        }\n                        if( typeName2 ) {\n                            if( !bodyElement[ key ] ) {\n                                initializeField( state, typeName2, bodyElement, key, false );\n                                valueFinal = bodyElement[ key ];\n                            }\n                            state.stack.push( key );\n                            const replacement = validateElementType( state, typeName2, valueFinal );\n                            if( replacement ) {\n                                bodyElement[ key ] = replacement;\n                            }\n                            state.stack.pop();\n                        } else {\n                            state.issues.push( 'INVALID FIELD: Unsupported map type of ' + typeName + ' --' +\n                                state.stack.join( '.' ) );\n                        }\n                        state.stack.pop();\n                    } else {\n                        state.issues.push( 'INVALID FIELD: Unsupported map type of ' + typeName + ' --' +\n                            state.stack.join( '.' ) );\n                    }\n                } );\n            } else {\n                state.issues.push( 'INVALID FIELD: Unsupported type of ' + typeName + ' --' +\n                    state.stack.join( '.' ) );\n            }\n    }\n}\n\n/**\n * Recursive method for default & validate SOA operation body.\n *\n * @param {Object} state - state object\n * @param {Object} schemaElement - schema element/cursor for the walk\n * @param {Object} bodyElement - body element/cursor for the walk\n * @private\n */\nfunction defaultAndValidateElementRecurse( state, schemaElement, bodyElement ) {\n    // Walk schema to add any missing fields\n    const isMapLcl = isMap( state, schemaElement );\n\n    if( !isMapLcl ) {\n        _.forEach( schemaElement, function( typeName, key2 ) {\n            let deleted = false;\n            if( bodyElement.hasOwnProperty( key2 ) &&\n                bodyElement[ key2 ] === null ) {\n                delete bodyElement[ key2 ];\n                deleted = true;\n            }\n\n            if( !bodyElement.hasOwnProperty( key2 ) || !bodyElement[ key2 ] ) {\n                initializeField( state, typeName, bodyElement, key2, deleted );\n            }\n        } );\n    }\n\n    // Walk body element to validate against schema & recurse\n    let replacement = null;\n\n    _.forEach( bodyElement, function forEachdefaultAndValidateElementRecurse( value, key2 ) {\n        if( isMapLcl ) {\n            if( _.isArray( bodyElement ) ) {\n                for( let ii = 0; ii < bodyElement[ 0 ].length; ii++ ) {\n                    state.stack.push( ii );\n                    replacement = validateElementType( state, schemaElement.key, bodyElement[ 0 ][ ii ] );\n                    if( replacement ) {\n                        bodyElement[ 0 ][ ii ] = replacement;\n                    }\n                    replacement = validateElementType( state, schemaElement.value, bodyElement[ 1 ][ ii ] );\n                    if( replacement ) {\n                        bodyElement[ 1 ][ ii ] = replacement;\n                    }\n                    state.stack.pop();\n                }\n            } else {\n                for( const mapKey in bodyElement ) {\n                    if( bodyElement.hasOwnProperty( key2 ) ) {\n                        state.stack.push( key2 );\n                        replacement = validateElementType( state, schemaElement.key, mapKey );\n                        if( replacement ) {\n                            const oldValue = bodyElement[ mapKey ];\n                            delete bodyElement[ mapKey ];\n                            bodyElement[ replacement ] = oldValue;\n                        }\n                        replacement = validateElementType( state, schemaElement.value, bodyElement[ mapKey ] );\n                        if( replacement ) {\n                            bodyElement[ mapKey ] = replacement;\n                        }\n                        state.stack.pop();\n                    }\n                }\n            }\n        } else if( schemaElement.hasOwnProperty( key2 ) ) {\n            state.stack.push( key2 );\n            replacement = validateElementType( state, schemaElement[ key2 ], value );\n            if( replacement ) {\n                bodyElement[ key2 ] = replacement;\n            }\n            state.stack.pop();\n        } else {\n            state.issues.push( 'INVALID FIELD: Unexpected type of ' + state.stack.join( '.' ) + '.' + key2 );\n            delete bodyElement[ key2 ];\n        }\n    } );\n}\n\n/**\n * Default & validate SOA operation body.\n *\n * @param {Object} schemaService - schema for service\n * @param {String} serviceName - service name\n * @param {String} operationName - operation name\n * @param {Object} body - request body\n * @returns {Object} request body with defaulting & validation complete\n * @private\n */\nfunction defaultAndValidateElement( schemaService, serviceName, operationName, body ) {\n    const state = {\n        // If caller has passed null, they've indicated that there's an empty body.\n        body: body ? body : {},\n        serviceName: serviceName,\n        operationName: operationName,\n        schemaService: schemaService,\n        issues: [],\n        stack: []\n    };\n\n    if( state.schemaService ) {\n        state.operation = state.schemaService[ state.operationName ];\n        if( state.operation ) {\n            // Walk body make sure it aligns to the schema\n            defaultAndValidateElementRecurse( state, state.operation, state.body );\n\n            if( state.issues.length > 0 ) {\n                logger.error( 'Invalid SOA request body!\\n' + state.issues.join( '\\n' ) + '\\n\\nInput body:',\n                    state.body );\n            }\n        } else {\n            logger.error( 'No SOA operation for ' + state.serviceName + ' ' + state.operationName +\n                '! Skipping validation & default of SOA input.' );\n        }\n    } else {\n        logger.error( 'No SOA service for ' + state.serviceName +\n            '! Skipping validation & default of SOA input.' );\n    }\n    return state.body;\n}\n\n// Response processing\n\n/**\n * Process an array of objects to create a single string of messages.\n *\n * @param {Object} messages - array of objects containing message fields\n * @param {Object} msgObj - message object with message value & level\n */\nfunction getMessageString( messages, msgObj ) {\n    _.forEach( messages, function( object ) {\n        if( msgObj.msg.length > 0 ) {\n            msgObj.msg += '\\n';\n        }\n        msgObj.msg += object.message;\n        msgObj.level = _.max( [ msgObj.level, object.level ] );\n    } );\n}\n\n/**\n * Return a reference to a new 'error' object set with the given error information.\n *\n * @param {Object} errIn - error in\n *\n * @returns {Object} - JavaScript Error object\n */\nexport const createError = function( errIn ) {\n    const msgObj = {\n        msg: '',\n        level: 0\n    };\n    if( errIn.message ) {\n        msgObj.msg = errIn.message;\n    } else if( errIn.status || errIn.statusText ) {\n        msgObj.msg = errIn.status + ' ' + errIn.statusText;\n    } else if( errIn.PartialErrors ) {\n        _.forEach( errIn.PartialErrors, function( partialError ) {\n            getMessageString( partialError.errorValues, msgObj );\n        } );\n    } else if( errIn.partialErrors ) {\n        _.forEach( errIn.partialErrors, function( partialError ) {\n            getMessageString( partialError.errorValues, msgObj );\n        } );\n    } else if( errIn.messages ) {\n        getMessageString( errIn.messages, msgObj );\n    } else {\n        msgObj.msg = errIn.toString();\n    }\n    if( errIn.data && errIn.data.messages ) {\n        getMessageString( errIn.data.messages, msgObj );\n    }\n    const error = new Error( msgObj.msg );\n    error.cause = errIn;\n    error.level = msgObj.level;\n    return error;\n};\n\n/**\n * @param {Object} response - response\n * @return {Object|null} service data\n */\nfunction getServiceData( response ) {\n    if( response.hasOwnProperty( '.QName' ) && /\\.ServiceData$/.test( response[ '.QName' ] ) ) {\n        return response;\n    } else if( response.ServiceData ) {\n        // If the service data is a member field, update the service data reference\n        return response.ServiceData;\n    }\n}\n\n/**\n * Process SOA partial exceptions in response.\n *\n * @param {Object} response JSON response data\n * @param {String} serviceName - service name\n * @param {String} operationName - operation name\n * @return {Object} response JSON response data\n */\nfunction processExceptions( response, serviceName, operationName ) {\n    const serviceData = getServiceData( response );\n    if( serviceData && serviceData.partialErrors ||\n        response.PartialErrors && !_.isEmpty( response.PartialErrors ) ) {\n        // Publish SAN event to log the SOA errors to analytics\n        let qName = 'unknown';\n        if( response.hasOwnProperty( '.QName' ) ) {\n            qName = response[ '.QName' ];\n        }\n\n        eventBus.publishOnChannel( {\n            channel: 'SAN_Events',\n            topic: 'aw-command-logErrros',\n            data: {\n                sanQName: qName,\n                sanPartialErrors: serviceData && serviceData.partialErrors || response,\n                sanServiceName: serviceName,\n                sanOperationName: operationName,\n                sanLogCorrelationID: logger.getCorrelationID()\n            }\n        } );\n    }\n\n    // Should we search for 'Exception' in QName?\n    if( response && response.hasOwnProperty( '.QName' ) ) {\n        if( /InvalidUserException$/.test( response[ '.QName' ] ) ) {\n            if( operationName === GET_SESSION_INFO.operationName ) {\n                // This is the trivial case of initial connection to the server.\n                throw exports.createError( response );\n            }\n\n            // hit the InvalidUserException during a non-login related SOA call.\n            // this is a session time-out situation.\n            eventBus.publish( 'session.stale', {} );\n\n            console.log( 'Encountered Session timeout. SOA Request for service: ' + serviceName + ', ' + // eslint-disable-line no-console\n                operationName + '  Will refresh the page in order to re-Authenticate.' );\n            // assumption is that we've timed out, so need to \"reAuthenticate\".\n            // Legacy GWT logic would call the session manager to reauthenticate(), but that\n            // pattern is no longer used.  In general we just will reload the page and\n            // that will update the authentication state and trigger reauthentication.\n            location.reload( false ); // trigger a page refresh, that will reload and authenticate again.\n        }\n        // FIXME this should be conditioned with a QName check...\n        if( /Exception$/.test( response[ '.QName' ] ) ) {\n            throw exports.createError( response );\n        }\n    }\n\n    return response;\n}\n\n/**\n * @private\n * @param {Object} parent - parent element\n * @param {Array} modelObjs - Array of {ModelObject} found in response\n * @param {Object} typeNames - array of referenced type names\n */\nfunction extractModelObjAndTypeFromResponse( parent, modelObjs, typeNames ) {\n    _.forEach( parent, function( child, key ) {\n        if( _.isPlainObject( child ) ) {\n            if( child.hasOwnProperty( 'uid' ) && child.hasOwnProperty( 'type' ) ) {\n                if( child.uid && child.uid !== cdm.NULL_UID ) {\n                    if( modelObjs ) {\n                        modelObjs.push( child );\n                    } else {\n                        const modelObj = cdm.getObject( child.uid );\n                        if( modelObj ) {\n                            parent[ key ] = modelObj;\n                        }\n                    }\n                }\n                if( typeNames && child.type && child.type !== 'unknownType' ) {\n                    typeNames[ child.type.toString() ] = null;\n                }\n            } else {\n                extractModelObjAndTypeFromResponse( child, modelObjs, typeNames );\n            }\n        } else if( _.isArray( child ) ) {\n            extractModelObjAndTypeFromResponse( child, modelObjs, typeNames );\n        }\n    } );\n}\n\n/**\n * @private\n * @param {Object} response - Response from SOA service.\n * @param {Array} modelObjs - Array of {ModelObject} from SOA service.\n * @returns {Object} Response from SOA service.\n */\nfunction processResponseObjects( response, modelObjs ) {\n    const serviceData = getServiceData( response );\n    let updatedObjs = [];\n    if( modelObjs && modelObjs.length > 0 ) {\n        // Add objects to CDM\n        cdm.cacheObjects( modelObjs );\n        updatedObjs = modelObjs;\n\n        // To support the anti-pattern of code pulling the modelObject from the response, we need to update the response serviceData.\n        extractModelObjAndTypeFromResponse( response );\n    }\n    if( serviceData ) {\n        if( serviceData.created ) {\n            const createdObjects = [];\n            _.forEach( serviceData.created, function( uid ) {\n                const createdObject = cdm.getObject( uid );\n                if( createdObject ) {\n                    createdObjects.push( createdObject );\n                }\n            } );\n            if( createdObjects.length ) {\n                eventBus.publish( 'cdm.created', {\n                    createdObjects: createdObjects\n                } );\n            }\n        }\n        if( serviceData.updated ) {\n            const updatedObjects = [];\n            _.forEach( serviceData.updated, function( uid ) {\n                if( !cmm.isTypeUid( uid ) ) {\n                    const updatedObject = cdm.getObject( uid );\n                    if( updatedObject ) {\n                        updatedObjects.push( updatedObject );\n                    }\n                }\n            } );\n            if( updatedObjects.length ) {\n                eventBus.publish( 'cdm.updated', {\n                    updatedObjects: updatedObjects\n                } );\n            }\n        }\n        if( serviceData.deleted ) {\n            // Remove objects from CDM\n            cdm.removeObjects( serviceData.deleted );\n        }\n    }\n    const currentStore = appCtxSvc.getCtx( 'vmo' ) || {};\n    let timeNow = Date.now();\n    let values = {};\n    if( updatedObjs.length ) {\n        for( const mo of updatedObjs ) {\n            let refUid = getRefUid( mo );\n            let uidVal = mo.uid;\n            currentStore[ uidVal ] = {\n                type: mo.type,\n                time: timeNow,\n                ref: refUid\n            };\n            if( uidVal ) {\n                values[ uidVal ] = true;\n            }\n        }\n        const storeValues = Object.entries( currentStore );\n        if( !_.isEmpty( values ) ) {\n            for( const [ uid, { type, ref } ] of storeValues ) {\n                if( values[ ref ] ) {\n                    currentStore[ uid ] = {\n                        type: type,\n                        time: timeNow,\n                        ref: ref\n                    };\n                }\n            }\n        }\n        appCtxSvc.registerCtx( 'vmo', currentStore );\n    }\n    return response;\n}\n\nconst getRefUid = mo => {\n    if( mo.type === 'Awp0XRTObjectSetRow' && mo.props && mo.props.awp0Target ) {\n        return mo.props.awp0Target.dbValues[ 0 ];\n    }\n    return null;\n};\n\n/**\n * Process service data in HTTP response.\n *\n * @param {Object} response - JSON response data\n * @param {String} operationName - operation name\n * @return {Promise} Promise resolved once types are loaded\n */\nfunction processResponseTypes( response, operationName ) {\n    if( response ) {\n        const modelObjs = [];\n        const typeNamesObj = {};\n\n        const qName = response[ '.QName' ];\n        if( qName !== 'http://teamcenter.com/Schemas/Soa/2011-06/MetaModel.TypeSchema' ) {\n            extractModelObjAndTypeFromResponse( response, modelObjs, typeNamesObj );\n        }\n\n        const typeNames = Object.keys( typeNamesObj );\n\n        if( operationName === GET_SESSION_INFO.operationName && response.extraInfoOut ) {\n            if( response.extraInfoOut.AWC_StartupTypes ) {\n                _typeCacheLMD = response.extraInfoOut.typeCacheLMD;\n                _awStartupPreferences = response.extraInfoOut.AWC_StartupTypes.split( ',' );\n\n                // Always include TC_Project even if not in the start up preference\n                if( !_.includes( _awStartupPreferences, 'TC_Project' ) ) {\n                    _awStartupPreferences.push( 'TC_Project' );\n                }\n\n                // Always include ListOfValuesString even if not in the start up preference\n                if( !_.includes( _awStartupPreferences, 'ListOfValuesString' ) ) {\n                    _awStartupPreferences.push( 'ListOfValuesString' );\n                }\n            }\n            const loadedTypes = typeCacheSvc.getLocalTypes( _typeCacheLMD );\n            cmm.cacheTypes( loadedTypes );\n        }\n\n        return exports.ensureModelTypesLoaded( typeNames ).then( function() {\n            // Just in case we have more types, let's go get them...\n            return processResponseObjects( response, modelObjs );\n        } );\n    }\n\n    return AwPromiseService.instance.resolve();\n}\n\n/**\n *\n * Gets the effective property policy\n *\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {boolean} isSelectedPropertyPolicy - boolean which indicates whether the selected property is required\n *            or not.\n * @returns {Object} request body with defaulting & validation complete\n * @private\n */\nfunction getEffectivePropertyPolicy( propertyPolicyOverride, isSelectedPropertyPolicy ) {\n    if( _.isString( propertyPolicyOverride ) ) {\n        return JSON.parse( propertyPolicyOverride );\n    }\n    if( _.isObject( propertyPolicyOverride ) ) {\n        // No need to pass a property policy for this call.\n        return propertyPolicyOverride;\n    }\n    return propPolicySvc.getEffectivePolicy( exports, isSelectedPropertyPolicy );\n}\n\n/**\n * @param {String} clientId - client ID used in SOA header\n */\nexport const setClientIdHeader = function( clientId ) {\n    _clientId = clientId;\n};\n\n/**\n * @return {String} client ID used in SOA header\n */\nexport const getClientIdHeader = function() {\n    return _clientId;\n};\n\n/**\n * @param {Number} pollingTimeout - timeout to allow polling SOA calls to be made after last non-polling call (minutes)\n */\nexport const setPollingTimeout = function( pollingTimeout ) {\n    if( pollingTimeout ) {\n        _pollingTimeout = pollingTimeout * 60;\n    }\n};\n\n/**\n * Teamcenter SOA request.\n *\n * @param {String} serviceName - SOA service name\n * @param {String} operationName - SOA operation name\n * @param {String} body - JSON body\n *\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {Bool} ignoreHost - Flag to say ignore hosting when making soa call.\n * @param {Object|String} headerStateOverride - SOA header state override (or NULL)\n * @param {Boolean} checkPartialErrors - check for partial errors in the response\n * @param {Boolean} polling - true if this is a polling call\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport const request = function( serviceName, operationName, body, {\n    propertyPolicyOverride,\n    ignoreHost = false,\n    headerStateOverride = false,\n    checkPartialErrors = false,\n    polling = false\n} = {} ) {\n    assert( serviceName, 'Service name not provided!' );\n    assert( operationName, 'Operation name not provided!' );\n\n    // Support polling SOA calls to have a timeout. This stops an idle client\n    // browser from making polling calls.This is required because the TC web\n    // tier needs to be able to allow it's session to timeout.\n    if( _pollingTimeout > 0 ) {\n        if( polling ) {\n            // Determine when last call was made.\n            const timeOfLastCall = _.toNumber( localStrg.get( 'soaService.timeOfLastCall' ) );\n            if( timeOfLastCall ) {\n                const secsSinceLastCall = ( Date.now() - timeOfLastCall ) / 1000;\n                // If longer than polling timeout, avoid call.\n                if( secsSinceLastCall > _pollingTimeout ) {\n                    return AwPromiseService.instance.reject( new Error( 'Polling call skipped due to client inactivity.' ) );\n                }\n            }\n        } else {\n            // localStorage is being used because SOA calls from other\n            // browsers tabs allow this tab to make the polling call.\n            localStrg.publish( 'soaService.timeOfLastCall', Date.now() );\n        }\n    }\n\n    let isSelectedPropertyPolicy = false;\n\n    let endPt;\n\n    let promise;\n    if( GET_SESSION_INFO.serviceName === serviceName && GET_SESSION_INFO.operationName === operationName ) {\n        // avoid loading schema for get session info call\n        const schemaService = {};\n        schemaService[ GET_SESSION_INFO.operationName ] = {}; // extraInfoIn: \"String[]\"\n        promise = AwPromiseService.instance.resolve( schemaService );\n    } else {\n        promise = configSvc.getCfg( 'schema.' + serviceName ).then( function( schemaService ) {\n            return schemaService;\n        }, function() {\n            // none found\n            logger.warn( 'No SOA schema definition found!' );\n            return {};\n        } );\n    }\n\n    return promise.then( function( schemaService ) {\n        if( appCtxSvc.ctx.aw_hosting_enabled && !appCtxSvc.ctx.aw_hosting_soa_support_checked ) {\n            appCtxSvc.ctx.aw_hosting_soa_support_checked = true;\n        }\n\n        if( body ) {\n            isSelectedPropertyPolicy = propPolicySvc.checkForSelectedObject( body );\n        }\n\n        const jsonData = {\n            header: {\n                state: {\n                    clientVersion: '10000.1.2',\n                    /**\n                     * Correlation ID for logging purposes (debug).\n                     */\n                    logCorrelationID: logger.getCorrelationID(),\n                    /**\n                     * Permanent ID/recipes are used for the runtime business object’s (BOMLine objects) opaque UIDs\n                     * in requests/responses.\n                     * <p>\n                     * If the unloadObjects key is not in the request headers, all business objects are unloaded at\n                     * the top of each request; see the processTagManager ITK for more information.\n                     */\n                    stateless: true,\n                    /**\n                     * If true, All business objects are unloaded at the top of each request; see the\n                     * processTagManager ITK for more information. Previously controlled through the stateless flag.\n                     * <p>\n                     * When is stateless=true mode this value must be explicitly set to false to keep objects\n                     * loaded.\n                     */\n                    unloadObjects: true,\n                    /**\n                     * If true, process server-session state key/value pairs found in the request headers. This\n                     * turns all session state into client-session data. The standalone AW client should set this to\n                     * true, while the hosted AW client should set it false (or not send it at all).\n                     */\n                    enableServerStateHeaders: !_redirectSoaSvc,\n                    /**\n                     */\n                    formatProperties: true\n                },\n                policy: getEffectivePropertyPolicy( propertyPolicyOverride, isSelectedPropertyPolicy )\n            },\n            body: defaultAndValidateElement( schemaService, serviceName, operationName, body )\n        };\n\n        mergeHeaderState( jsonData.header.state, headerStateOverride );\n\n        if( appCtxSvc && appCtxSvc.getCtx( 'objectQuotaContext.useObjectQuota' ) ) {\n            /**\n             * If true, All business objects are unloaded at the top of each request. Applications might want to\n             * rely on object quota based unload. In such cases they can use \"objectQuotaContext\" to override this\n             * behavior and reset this flag to avail this feature\n             */\n            jsonData.header.state.unloadObjects = false;\n        }\n\n        if( !_redirectSoaSvc && _clientId !== '' ) {\n            jsonData.header.state.clientID = _clientId;\n        }\n\n        const headers = {\n            // Only US-ASCII characters are allowed in HTTP headers\n            // http://stackoverflow.com/questions/34670413/regexp-to-validate-a-http-header-value/34710882#34710882\n            'Log-Correlation-ID': jsonData.header.state.logCorrelationID.replace( /[^\\x20-\\x7E]+/g, '' )\n        };\n\n        if( GET_SESSION_INFO.serviceName === serviceName && GET_SESSION_INFO.operationName === operationName ) {\n            headers.clientIP = 'browser-client';\n        }\n\n        let awSession = localStrg.get( 'awSession' );\n        if( awSession ) {\n            try {\n                awSession = JSON.parse( awSession );\n                if( !appCtxSvc.ctx.aw_hosting_enabled ) {\n                    if( awSession.groupMemberUID ) { jsonData.header.state.groupMember = awSession.groupMemberUID; }\n                    if( awSession.roleName ) { jsonData.header.state.role = awSession.roleName; }\n                }\n                if( awSession.locale ) { jsonData.header.state.locale = awSession.locale; }\n            } catch ( err ) {\n                logger.debug( err );\n                localStrg.removeItem( 'awSession' );\n            }\n        }\n\n        endPt = serviceName + '/' + operationName;\n\n        if( logger.isTraceEnabled() ) {\n            logger.trace( '\\n' + 'soaService.post to ' + endPt, jsonData );\n        }\n\n        pendingRequests++;\n        eventBus.publish( 'progress.start', {\n            endPoint: endPt\n        } );\n\n        /**\n         * Check if there is a 'host' process that is handling SOA processing<BR>\n         * If so: Send the 'endPt' and data to that service.\n         */\n\n        // The only case the client will make its own login call when hosted would be when it needs credentials.\n        // If such a call is made, we should not make it through the host. This is the only case when AW talks directly to the server.\n        // This will allow Viewer to show up in hosts.\n        if( _redirectSoaSvc && !ignoreHost ) {\n            return _redirectSoaSvc.post( serviceName, operationName, jsonData );\n        }\n\n        const $http = AwHttpService.instance;\n\n        trace( 'HTTP call start', serviceName, operationName );\n        return $http.post( browserUtils.getBaseURL() + 'tc/JsonRestServices/' + endPt, jsonData, {\n            headers: headers\n        } ).then( function( response ) {\n            trace( 'HTTP call complete', serviceName, operationName );\n            assert( response, 'No response given for ' + endPt );\n\n            const body2 = response.data;\n\n            assert( typeof body2 !== 'string' || body2.indexOf( '<?xml version' ) === -1,\n                'Unexpected response body for: ' + endPt );\n\n            return body2;\n        } );\n    } ).then( function( response ) {\n        pendingRequests--;\n        eventBus.publish( 'progress.end', {\n            endPoint: endPt\n        } );\n        if( logger.isTraceEnabled() ) {\n            logger.trace( 'endPt=' + endPt, response );\n        }\n        return processExceptions( response, serviceName, operationName );\n    }, function( err ) {\n        pendingRequests--;\n        eventBus.publish( 'progress.end', {\n            endPoint: endPt\n        } );\n        throw exports.createError( err );\n    } ).then( function( response ) {\n        if( !propertyPolicyOverride && !isSelectedPropertyPolicy ) {\n            loadPropertiesIfRequired( response );\n        }\n        return processResponseTypes( response, operationName );\n    } ).then( function( response ) {\n        if( checkPartialErrors && response ) {\n            if( response.PartialErrors ) {\n                throw exports.createError( response.PartialErrors );\n            }\n            const serviceData = getServiceData( response );\n            if( serviceData && serviceData.partialErrors ) {\n                throw exports.createError( serviceData );\n            }\n        }\n        return response;\n    } );\n};\n\n/**\n * Merge default header state with the given overrides\n *\n * @param {Object|String} defaultHeaderState - SOA header state default (or NULL)\n * @param {Object|String} headerStateOverride - SOA header state override (or NULL)\n */\nfunction mergeHeaderState( defaultHeaderState, headerStateOverride ) {\n    const keys = headerStateOverride ? Object.keys( headerStateOverride ) : [];\n    for( let i = 0; i < keys.length; ++i ) {\n        defaultHeaderState[ keys[ i ] ] = headerStateOverride[ keys[ i ] ];\n    }\n}\n\n/**\n * Calls getProperties Soa to load additional properties if required.\n *\n * @param {Object} response - JSON response data\n */\nfunction loadPropertiesIfRequired( response ) {\n    if( response ) {\n        const serviceData = getServiceData( response );\n        if( serviceData ) {\n            const responseObjects = [];\n            if( serviceData.updated ) {\n                for( let ii2 = 0; ii2 < serviceData.updated.length; ii2++ ) {\n                    const updatedUid = serviceData.updated[ ii2 ];\n                    if( !cmm.isTypeUid( updatedUid ) ) {\n                        const updatedObject = cdm.getObject( updatedUid );\n                        if( updatedObject ) {\n                            responseObjects.push( updatedObject );\n                        }\n                    }\n                }\n            }\n            if( serviceData.created ) {\n                for( let ii = 0; ii < serviceData.created.length; ii++ ) {\n                    const createdObject = cdm.getObject( serviceData.created[ ii ] );\n                    if( createdObject ) {\n                        responseObjects.push( createdObject );\n                    }\n                }\n            }\n\n            if( responseObjects.length > 0 &&\n                propPolicySvc.checkForSelectedObject( null, responseObjects ) ) {\n                exports.request( 'Core-2006-03-DataManagement', 'getProperties', {\n                    objects: responseObjects,\n                    attributes: []\n                }, {\n                    propertyPolicyOverride: propPolicySvc.getEffectivePolicy( null, true )\n                } );\n            }\n        }\n    }\n}\n\n/**\n * SOA post unchecked.\n *\n * @param {String} serviceName - SOA service name\n * @param {String} operationName - SOA operation name\n * @param {String} body - JSON body\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {Bool} ignoreHost - Flag to say ignore hosting when making soa call.\n * @param {Object|String} headerStateOverride - SOA header state override (or NULL)\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport const postUnchecked = function( serviceName, operationName, body, propertyPolicyOverride, ignoreHost, headerStateOverride ) {\n    return exports.request( serviceName, operationName, body, {\n        propertyPolicyOverride,\n        ignoreHost,\n        headerStateOverride\n    } );\n};\n\n/**\n * SOA post.\n *\n * If the response contains partial errors, it will be treated as an exception & thrown. If this isn't desired,\n * use postUnchecked.\n *\n * @param {String} serviceName - SOA service name\n * @param {String} operationName - SOA operation name\n * @param {String} body - JSON body\n * @param {Object|String} propertyPolicyOverride - SOA property policy override (or NULL)\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport const post = function( serviceName, operationName, body, propertyPolicyOverride, ignoreHost ) {\n    return exports.request( serviceName, operationName, body, {\n        propertyPolicyOverride,\n        ignoreHost,\n        checkPartialErrors: true\n    } );\n};\n\n\n/**\n * Set session information into local storage (if needed)\n *\n * @param {Boolean} signOut - sign out\n */\nexport const setSessionInfo = function( signOut ) {\n    if( !signOut ) {\n        const userSession = cdm.getUserSession();\n        if( userSession ) {\n            // Store all the required fields to support the SOA header\n            const awSession = {\n                groupMemberUID: _.get( userSession, 'props.fnd0groupmember.dbValues.0' ),\n                locale: _.get( userSession, 'props.fnd0locale.dbValues.0' ),\n                roleName: _.get( userSession, 'props.role_name.dbValues.0' )\n            };\n            localStrg.publish( 'awSession', JSON.stringify( awSession ) );\n        }\n    } else {\n        localStrg.removeItem( 'awSession' );\n    }\n};\n\n/**\n * Perform an async get of current Teamcenter session information.\n *\n * @param {Boolean} ignoreHost - ignore SOA tunnel by host?\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport const getTCSessionInfo = function( ignoreHost ) {\n    // Ensure we have the required properties for the UserSession.\n    const policyId = propPolicySvc.register( {\n        types: [ {\n            name: 'UserSession',\n            properties: [ {\n                name: 'awp0RevRule',\n                modifiers: [ {\n                    name: 'includeIsModifiable',\n                    Value: 'true'\n                } ]\n            }, {\n                name: 'user',\n                modifiers: [ {\n                    name: 'withProperties',\n                    Value: 'true'\n                } ]\n            }, {\n                name: 'user_id'\n            }, {\n                name: 'group',\n                modifiers: [ {\n                    name: 'withProperties',\n                    Value: 'true'\n                } ]\n            }, {\n                name: 'group_name'\n            }, {\n                name: 'project'\n            }, {\n                name: 'role'\n            }, {\n                name: 'role_name'\n            }, {\n                name: 'fnd0locale'\n            }, {\n                name: 'fnd0LocationCode'\n            }, {\n                name: 'fnd0groupmember'\n            } ]\n        }, {\n            name: 'Group',\n            properties: [ {\n                name: 'privilege'\n            } ]\n        }, {\n            name: 'User',\n            properties: [ {\n                name: 'home_folder'\n            } ]\n        } ]\n    } );\n    return exports.request( GET_SESSION_INFO.serviceName, GET_SESSION_INFO.operationName, {}, {\n        ignoreHost,\n        checkPartialErrors: true\n    } ).then( function( response ) {\n        propPolicySvc.unregister( policyId );\n        exports.setSessionInfo();\n        return response;\n    } ).catch( function( err ) {\n        propPolicySvc.unregister( policyId );\n\n        // Since we have no session, clear the session from localStorage to ensure we don't try to use it.\n        localStrg.removeItem( 'awSession' );\n\n        throw err;\n    } );\n};\n\n/**\n * Get Type Descriptions from server.\n *\n * Note, this is hidden in this file to avoid anyone else directly calling this.\n *\n * @private\n *\n * @param {StringArray} typeNames - Array of type names\n *\n * @return {Promise} Promise who's resolution is the result of the SOA 'getTypeDescriptions2' operation.\n */\nasync function getTypeDescriptions( typeNames ) {\n    assert( typeNames && typeNames.length > 0, 'No type names provided!' );\n    typeNames.sort();\n    const typeNamesFinal = _.uniq( typeNames, true );\n\n    const typesToLoad = typeNamesFinal.filter( type => {\n        if( !_typeLoadInProgress[ type ] ) {\n            return type;\n        }\n    } );\n\n    const currentTypesBeingLoadedPromises = typeNamesFinal.filter( type => !typesToLoad.includes( type ) ).map( type => {\n        if( _typeLoadInProgress[ type ] ) {\n            return _typeLoadInProgress[ type ];\n        }\n    } );\n\n    const newLoadPromises = [];\n\n    if( typesToLoad.length > 0 ) {\n        const loadTypesPromise = exports.request( 'Core-2015-10-Session', 'getTypeDescriptions2', {\n            typeNames: typesToLoad,\n            options: {\n                PropertyExclusions: [\n                    'LovReferences',\n                    'NamingRules',\n                    'RendererReferences'\n                ],\n                TypeExclusions: [\n                    'DirectChildTypesInfo',\n                    'RevisionNamingRules',\n                    'ToolInfo'\n                ]\n            }\n        }, {\n            propertyPolicyOverride: {}\n        } );\n\n        for( const type of typesToLoad ) {\n            _typeLoadInProgress[ type ] = loadTypesPromise;\n        }\n\n        newLoadPromises.push( loadTypesPromise );\n    }\n\n    const response = await Promise.all( [ ...currentTypesBeingLoadedPromises, ...newLoadPromises ] );\n\n    for( const type of typesToLoad ) {\n        delete _typeLoadInProgress[ type ];\n    }\n\n    return response;\n}\n\n/**\n * Verify async that the given model types are loaded into the client's meta model.\n *\n * @param {StringArray} typeNames - An array of type names to ensure are cached.\n *\n * @return {Promise} Promise who's resolution is a 'null' value since the types are now loaded into the cache.\n *         This 'null' result is required because the GWT-side wrapper requires an AsyncCallback<Void> callback\n *         (not AsyncCallback<IJsAarray>).\n */\nexport const ensureModelTypesLoaded = function( typeNames ) {\n    /**\n     * Handle trivial case\n     */\n    if( !typeNames ) {\n        return AwPromiseService.instance.reject( 'Invalid type name array specified' );\n    }\n\n    /**\n     * From the input list of type names, get a list of unique type names not in the CMM already.\n     */\n    const missingTypeNames = [];\n\n    _.forEach( typeNames, function( typeName ) {\n        if( !cmm.containsType( typeName ) && _invalidTypeNames.indexOf( typeName ) === -1 ) {\n            missingTypeNames.push( typeName );\n        }\n    } );\n\n    /**\n     * Check if we have any missing.\n     */\n    if( missingTypeNames.length > 0 ) {\n        // logger.info( \"Missing Types: \" + JSON.stringify( missingTypeNames ) );\n\n        return getTypeDescriptions( missingTypeNames ).then( function( responseGetTypeDescriptions ) {\n            for( const response of responseGetTypeDescriptions ) {\n                if( response && response.types ) {\n                    const modelTypes = response.types;\n                    const modelTypes2 = [];\n\n                    _.forEach( modelTypes, function( typeName ) {\n                        if( !cmm.containsType( typeName ) ) {\n                            modelTypes2.push( typeName );\n                        }\n                    } );\n\n                    if( modelTypes2.length > 0 ) {\n                        cmm.cacheTypes( modelTypes2 );\n                        // Cache the types in localStorage.\n                        typeCacheSvc.setLocalTypes( modelTypes2, _awStartupPreferences, _typeCacheLMD, true );\n                    }\n                }\n\n                // Capture invalid type names\n                _.forEach( missingTypeNames, function( typeName ) {\n                    if( !cmm.containsType( typeName ) ) {\n                        // add empty type to avoid future server calls\n                        _invalidTypeNames.push( typeName );\n                        _invalidTypeNames.sort();\n                        _invalidTypeNames = _.uniq( _invalidTypeNames, true );\n                    }\n                } );\n            }\n            return null;\n        } );\n    }\n\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * Setup to log all events fired on the 'soajs' eventBus event channel.\n */\nif( logger && logger.isTraceEnabled() ) {\n    eventBus.subscribe( '#', function( data, envelope ) {\n        let msg = 'eventBus: ' + envelope.topic + ' @ ' + envelope.timeStamp;\n\n        if( data && data.endPoint ) {\n            if( envelope.topic === 'progress.start' ) {\n                _lastStartDate[ data.endPoint ] = envelope.timeStamp;\n            } else if( envelope.topic === 'progress.end' && _lastStartDate[ data.endPoint ] ) {\n                const msDelta = envelope.timeStamp.getTime() - _lastStartDate[ data.endPoint ].getTime();\n\n                msg = msg + '\\n' + '          Time: ' + msDelta + 'ms' + '    ' + data.endPoint;\n\n                _lastStartDate[ data.endPoint ] = null;\n            }\n        }\n\n        if( logger.isTraceEnabled() ) {\n            // Just print, using logger.trace causes infinite recursion\n            console.debug( msg, envelope ); // eslint-disable-line no-console\n        }\n    }, 'soa_kernel_soaService' );\n}\n\n/**\n * Determine if the user is currently signed in.\n *\n * @return {boolean} is signed in?\n */\nexport const isSignedIn = function() {\n    return _signedIn;\n};\n\nexport const getPendingRequestsCount = function() {\n    return pendingRequests;\n};\n\n/**\n * Subscribe to listen when we are signed in/out. Just tracking state locally. NOTE - for non User/PW\n * authentication, this state may not be 100% accurate.\n */\neventBus.subscribe( 'session.signIn', function() {\n    _signedIn = true;\n}, 'soa_kernel_soaService' );\n\neventBus.subscribe( 'session.signOut', function() {\n    _signedIn = false;\n}, 'soa_kernel_soaService' );\n\nconst exports = {\n    createError,\n    postUnchecked,\n    post,\n    request,\n    setSessionInfo,\n    getTCSessionInfo,\n    ensureModelTypesLoaded,\n    isSignedIn,\n    setClientIdHeader,\n    getClientIdHeader,\n    setPollingTimeout,\n    setSoaRedirect,\n    getPendingRequestsCount\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
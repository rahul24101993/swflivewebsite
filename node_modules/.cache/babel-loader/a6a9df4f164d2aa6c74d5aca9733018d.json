{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /**\n * This represents the Location Navigation and tracking\n *\n * @module js/locationNavigation.service\n */ // module\nimport eventBus from'js/eventBus';import logger from'js/logger';import appCtxService from'js/appCtxService';// service\nimport AwBaseService from'js/awBaseService';import AwStateService from'js/awStateService';import AwUrlMatcherFactoryService from'js/awUrlMatcherFactoryService';import localeService from'js/localeService';import debugService from'js/debugService';import _ from'lodash';export default class LocationNavigationService extends AwBaseService{// Only for unit test purpose\nstatic reset(){// leavePlaceSvc.reset();\nAwBaseService.reset.apply(this);AwStateService.reset();}constructor(){super();// service and module references\nthis._state=AwStateService.instance;// members\nthis._stateStackNames=null;this._stateStack=null;this._popState=null;this._goBackInProgress=false;this._xrtShowObjectState=['com_siemens_splm_clientfx_tcui_xrt_showObject','com_siemens_splm_clientfx_tcui_xrt_showMultiObject'];/**\n         * {Integer} The number of previous states that will be persisted for navigation from back button.\n         * If the number of states exceeds this count, the earliest state will be forgotten.\n         */this._persistentStatesCount=24;this.init();eventBus.subscribe('locationChangeSuccess',_ref=>{let{event,oldUrl,newUrl}=_ref;var newLocation=this.parseUrl(newUrl);var oldLocation=this.parseUrl(oldUrl);/*\n             * Several location changes are made during show object location as query parameters are added do not\n             * want to check changes until toLocation are valid locations\n             */if(newLocation.params&&newLocation.params.uid){if(oldLocation.params){if(oldLocation.params.uid&&newLocation.params.uid!==oldLocation.params.uid||newLocation.params.uid===oldLocation.params.uid&&newLocation.state.name!==oldLocation.state.name){this.routeStateChangeSuccess(newLocation.state,newLocation.params,oldLocation.state,oldLocation.params);}}else{this.routeStateChangeSuccess(newLocation.state,newLocation.params,oldLocation.state,oldLocation.params);}}if(this._goBackInProgress===true){this._goBackInProgress=false;}eventBus.publish('$locationChangeSuccess',{event,newUrl,oldUrl});logger.trace('#### locationChangeSuccess changed! new: '+newUrl+', oldUrl: '+oldUrl);});window.addEventListener('resize',()=>{eventBus.publish('aw.windowResize');});}/**\n     * Initializes the previous routes and route names if they are present in sessionStorage\n     */init(){this._stateStack=[];this._stateStackNames=[];try{if(sessionStorage.getItem('STATES_ARRAY_NAMES')&&sessionStorage.getItem('STATES_ARRAY')){this._stateStackNames=JSON.parse(sessionStorage.getItem('STATES_ARRAY_NAMES'));this._stateStack=JSON.parse(sessionStorage.getItem('STATES_ARRAY'));}}catch(e){logger.trace('Error in location initiation',e);}}/**\n     * Function parses a URL and returns an object consisting of state and params\n     * @param {string} url url input as string\n     * @returns {object} URL object with parse result\n     */parseUrl(url){let urlMatcherFactory=AwUrlMatcherFactoryService.instance;var stateStart=url.lastIndexOf('#');var paramsStart=url.lastIndexOf('?');var state=url.substring(stateStart+1);var paramsStr='';var params={};if(paramsStart>-1){state=url.substring(stateStart+1,paramsStart);paramsStr=url.substr(paramsStart+1);var paramPairs=paramsStr.split('&');for(var i=0;i<paramPairs.length;i++){var keyValue=paramPairs[i].split('=');if(keyValue.length===2){params[keyValue[0]]=urlMatcherFactory.type('string').decode(decodeURIComponent(keyValue[1]));}}}if(state==='/com.siemens.splm.clientfx.tcui.xrt.showObject'){state=this._xrtShowObjectState[0];}else if(state==='/com.siemens.splm.clientfx.tcui.xrt.showMultiObject'){state=this._xrtShowObjectState[1];}else if(state.charAt(0)==='/'){state=state.substring(1);}return{state:{name:state.split('/').slice(-1)[0]},params:params,url:url};}/**\n     * goBack function wired to the goBack Button\n     */goBack(){this._popState=this._stateStack.pop();sessionStorage.setItem('STATES_ARRAY',JSON.stringify(this._stateStack));this._stateStackNames.pop();sessionStorage.setItem('STATES_ARRAY_NAMES',JSON.stringify(this._stateStackNames));appCtxService.registerCtx('previousLocationDisplayName',this.getGoBackLocation());if(this._popState&&this._popState.state){logger.trace('&&&&& go pop state'+this._popState.state.name);this._goBackInProgress=true;this._state.go(this._popState.state.name,this._popState.params,{inherit:false});}}peekLastState(){if(this._stateStack&&this._stateStack.length>0){return this._stateStack[this._stateStack.length-1];}return undefined;}getGoBackLocation(){if(this._stateStackNames&&this._stateStackNames.length>0){return this._stateStackNames[this._stateStackNames.length-1];}return localeService.getLoadedTextFromKey('UIMessages.noPreviousLocation');}updateCurrentDisplayName(){var title=document.title;if(this._stateStackNames&&this._stateStackNames.length>0){let stackNameLen=this._stateStackNames.length;title!==''?this._stateStackNames[stackNameLen-1]=title.substr(title.indexOf('-')+1):this._stateStackNames[stackNameLen-1]=this._stateStackNames[stackNameLen-1].substr(this._stateStackNames[stackNameLen-1].indexOf('-')+1);sessionStorage.setItem('STATES_ARRAY',JSON.stringify(this._stateStack));}if(this._stateStackNames&&this._stateStackNames.length===0&&!_.isEmpty(title)){this._stateStackNames[0]=title.substr(title.indexOf('-')+1);sessionStorage.setItem('STATES_ARRAY',JSON.stringify(this._stateStack));}return undefined;}ifCurrentDisplayNameToBeUpdated(fromState,toState){// following conditions when to update the current display name:\n// a. When current page is refreshed\n// b. When this fn is invoked from routeChangeHandler\n// c. When this fn invoked from locationChangeSuccess however previous state and nextState is same\nif(fromState.name===''&&fromState.url==='^'||fromState.parent&&toState.parent||!toState.parent&&toState.name===fromState.name){this.updateCurrentDisplayName();}}/**\n     * Invoked when the state change was successful from UI router\n     * @param {object} event event body\n     * @param {object} toState state object transit to\n     * @param {object} toParams paramters for toState\n     * @param {object} fromState state object transit from\n     * @param {object} fromParams parameters for fromState\n     */routeStateChangeSuccess(toState,toParams,fromState,fromParams){debugService.debug('routes',fromState.name,toState.name);if(fromState&&fromState.name!=='checkAuthentication'){if(this._popState&&this._popState.state.name===toState.name&&this._goBackInProgress===true){this._popState=null;return;// revisitme- ported as it is during rebase in uirouter react there are no events\n// This condition needed to restrict to save state on stack once user clicked on back button more than once\n// and state name is different (Reference defect -LCS-462441)\n// if( !( event.name === '$locationChangeSuccess' && fromState.name !== toState.name ) ) {\n//     this._popState = null;\n// }\n// return;\n}// the below check is required in afx-next to restrict locationChangeSuccess code to\n// invoke the state persisting logic down below during a goBack operation; During a goBack\n// operation, routeChangeHandler triggers routeStateChangeSuccess to persist the state information;\n// we do not want the locationChangeSuccess to invoke this fn again in turn saving the goback\n// state as a new state again in turn causing the goBack command to navigate in circles between 2 locations\nif(this._goBackInProgress===true&&this._popState===null){this._goBackInProgress=false;return;}if(toState&&toState.parent&&fromState&&fromState.parent&&toState.parent===fromState.parent){return;}let title=_.isEmpty(document.title)?localeService.getLoadedTextFromKey('UIMessages.noPreviousLocation'):document.title;var newState={state:fromState,params:fromParams,displayName:title};if(this._stateStack.length>0){var lastState=this.peekLastState();if(lastState.state.name!==newState.state.name&&newState.state.name!==''){this._stateStack.push(newState);this._stateStackNames.push(newState.displayName);logger.trace('^^^^1 pushing newState '+newState.state.name);}else if(newState.state.name!==''&&lastState.params.uid!==newState.params.uid&&(newState.params.uid!==toParams.uid||newState.state.name!==toState.name)){this._stateStack.push(newState);this._stateStackNames.push(newState.displayName);logger.trace('^^^^2 pushing newState '+newState.state.name);}}else if(!newState.state.abstract){this._stateStack.push(newState);this._stateStackNames.push(newState.displayName);logger.trace('^^^^3 pushing newState '+newState.state.name);}// If persisted states count exceeds allowed count, remove earliest state\nif(this._stateStack.length>this._persistentStatesCount){this._stateStack.shift();this._stateStackNames.shift();}sessionStorage.setItem('STATES_ARRAY_NAMES',JSON.stringify(this._stateStackNames));sessionStorage.setItem('STATES_ARRAY',JSON.stringify(this._stateStack));this.ifCurrentDisplayNameToBeUpdated(fromState,toState);}// Once location is changed, fix focus navigation starting point ( check solution )\n//https://sarahmhigley.com/writing/focus-navigation-start-point/#assistive-tech-support\nlet eleToFocus=document.querySelector('.aw-skip-to-main-container');if(eleToFocus!==null){eleToFocus.focus();}appCtxService.registerCtx('previousLocationDisplayName',this.getGoBackLocation());}/**\n     * Function to update the state parameter\n     * @param {string} paramName parameter name\n     * @param {string} paramValue parameter value\n     */updateStateParameter(paramName,paramValue){this._state.params[paramName]=paramValue;this._state.go('.',this._state.params,{inherit:true});}/**\n     * Function to transition to a new state\n     * @param {string} transitionTo URL that transit to\n     * @param {object} toParams parameter for transitionTo\n     * @param {object} options transition options\n     */go(transitionTo,toParams,options){this._state.go(transitionTo,toParams,options);}}","map":null,"metadata":{},"sourceType":"module"}
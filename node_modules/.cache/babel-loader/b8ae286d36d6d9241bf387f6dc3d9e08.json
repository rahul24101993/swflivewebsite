{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Service to define for populating the dynamic data in view model format in panel.\n *\n * @module js/dynamicPropertyService\n */\nimport modelPropertySvc from 'js/modelPropertyService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport parsingUtils from 'js/parsingUtils';\n/**\n * Define the 'operator' that separate the 'operands' of an expression.\n */\n\nvar _operators = /\\=\\=|!=|:|&&|>|>=|<|<=/;\n/**\n * Returns the individual fields\n *\n * @param {Object}objectData - Model object\n * @param {String}condName - Nested Property structure\n * @return {ObjectArray} output - Nested output structure\n */\n\nfunction _getInputData(objectData, condName) {\n  var output;\n\n  if (condName === 'dateApi') {\n    var dobj = _.get(objectData, condName);\n\n    var dval = null;\n\n    if (dobj.dateObject) {\n      dval = dateTimeSvc.formatUTC(dobj.dateObject);\n    }\n\n    output = dval;\n  } else {\n    output = _.get(objectData, condName);\n  }\n\n  return output;\n}\n/**\n * Check the nested structure and returns the field.\n *\n * @param {Object}objectIndex - Index in array objects\n * @param {String}arrayObjs - Model object\n * @param {String}inArray - JSON string\n * @return {Object} Nested output structure\n */\n\n\nfunction _constructOutputData(objectIndex, arrayObjs, inArray) {\n  var output = [];\n\n  for (var i in inArray) {\n    var f = Object.getOwnPropertyNames(inArray[i]);\n\n    if (f[0] === 'structName') {\n      var functionName = _.get(inArray[i], f[0]);\n\n      var t = _.get(inArray[i], f[1]);\n\n      var k = _prepareObject(objectIndex, arrayObjs, t);\n\n      output[functionName] = _.assign({}, k);\n    } else {\n      var t2 = _.get(inArray[i], f[1]);\n\n      var condName = _.get(inArray[i], f[0]);\n\n      output[condName] = _getInputData(arrayObjs[objectIndex], t2);\n    }\n  }\n\n  if (output.dateValue) {\n    output.value = 0;\n  }\n\n  return output;\n}\n/**\n * Return the display string from the object\n *\n * @param {Object }objectData - Input Object\n * @param {String} prop - Property string\n * @param {String} dataInput - If any specific string or property define in the Input\n * @return {String} dispName - Display String\n *\n */\n\n\nfunction _getDisplayName(objectData, prop, dataInput) {\n  var dispName;\n\n  if (dataInput) {\n    var objUid = _.get(objectData, dataInput);\n\n    var mObject = cdm.getObject(objUid);\n    dispName = _.get(mObject, prop);\n  } else {\n    dispName = _.get(objectData, prop);\n  }\n\n  return dispName;\n}\n/**\n * Evaluate condition expression\n *\n * @param {String} expression - Expression {note: currently supporting ==,!=,&&,>,>=,<,<=}\n * @param {Object} evaluationEnv - The data environment for expression evaluation\n * @param {ObjectArray} objectData - The array of function objects which can be used in expression evaluation\n *\n * @return {Object} The evaluated condition result\n */\n\n\nfunction _evaluateCondition(expression, evaluationEnv, objectData) {\n  var operands = expression.split(_operators);\n  var reValue = false;\n\n  var tempType = _.get(objectData, operands[0]);\n\n  if (tempType === operands[1]) {\n    reValue = evaluationEnv;\n  }\n\n  return reValue;\n}\n/**\n * Evaluate the condition and return the value\n *\n * @param {Object}objectData - Model object\n * @param {String}types - Property name\n *\n * @return {Object} Supported type for the declarative\n */\n\n\nfunction getPropertyValue(objectData, types) {\n  var returnVal = '';\n\n  for (var i in types) {\n    var f = Object.getOwnPropertyNames(types[i]);\n\n    var condName = _.get(types[i], f[0]);\n\n    var condVal = _.get(types[i], f[1]);\n\n    var val = _evaluateCondition(condName, condVal, objectData);\n\n    if (val) {\n      returnVal = val;\n    }\n  }\n\n  return returnVal;\n}\n/**\n * Evaluate expression\n *\n * @param {String} expression - expression {note: currently supporting ==,!=,&&,>,>=,<,<=}\n * @return {ObjectArray} operands - Array of the string objects\n */\n\n\nfunction _getOperands(expression) {\n  return expression.split(_operators);\n}\n/**\n * Returns the nested property\n *\n * @param {Object}objectIndex - Index in array objects\n * @param {String}arrayObjs - Model object\n * @param {String}inArray - JSON string\n * @return {ObjectArray} output - Nested output structure\n */\n\n\nfunction _prepareObject(objectIndex, arrayObjs, inArray) {\n  var output = [];\n  var objectData = arrayObjs[objectIndex];\n\n  for (var i in inArray) {\n    var f = Object.getOwnPropertyNames(inArray[i]);\n\n    var condName = _.get(inArray[i], f[0]);\n\n    var condValue = _.get(inArray[i], f[1]);\n\n    if (f[0] === 'structName') {\n      output[condName] = _constructOutputData(objectIndex, arrayObjs, condValue);\n    } else {\n      output[condName] = _getInputData(objectData, condValue);\n    }\n  }\n\n  return output;\n}\n\nvar exports = {};\n/**\n * Get the view model property using the SOA input\n *\n * @param {String} arrayObjs - SOA response\n * @param {String} n - viewModel property\n * @return {ObjectArray} output - A ViewModel property object array\n */\n\nexport let createDynProperty = function (arrayObjs, n) {\n  var output = [];\n\n  if (n.viewModelPropValues) {\n    for (var i in arrayObjs) {\n      var g = n.viewModelPropValues;\n      var d = Object.getOwnPropertyNames(n.viewModelPropValues);\n      var dispName = null;\n      var ptype = null;\n      var dbValue = null;\n\n      for (var k in d) {\n        if (d[k] === 'displayName') {\n          dispName = _getDisplayName(arrayObjs[i], g[d[k]], n.dataInput);\n        }\n\n        if (d[k] === 'type') {\n          ptype = getPropertyValue(arrayObjs[i], g[d[k]]);\n        }\n\n        if (d[k] === 'dbValue') {\n          dbValue = getPropertyValue(arrayObjs[i], g[d[k]]);\n        }\n      }\n\n      var propAttrHolder = {\n        displayName: dispName,\n        type: ptype,\n        isRequired: '',\n        isEditable: '',\n        dbValue: dbValue,\n        dispValue: '',\n        labelPosition: ''\n      };\n      var viewProp = modelPropertySvc.createViewModelProperty(propAttrHolder);\n\n      if (d[k] === 'propMisc') {\n        var z = g[d[k]];\n\n        for (var h in z) {\n          var pName = z[h].propName;\n          var pValue = z[h].value;\n\n          var objUid = _.get(arrayObjs[i], pValue);\n\n          viewProp[pName] = objUid;\n        }\n      }\n\n      output.push(viewProp);\n    }\n  }\n\n  return output;\n};\n/**\n * prepare the SOA input using the JSON data for dynamic properties\n *\n * @param {Array} arrayObjs - ViewModelProperty Array\n * @param {Array} inArray - JSON array from data.\n *\n * @return {ObjectArray} Output array\n */\n\nexport let createSoaInput = function (arrayObjs, inArray) {\n  var modelOutput = [];\n\n  for (var obj in arrayObjs) {\n    var output = _constructOutputData(obj, arrayObjs, inArray);\n\n    modelOutput.push(_.assign({}, output));\n  }\n\n  return modelOutput;\n};\n/**\n * prepare the SOA input using the JSON data for dynamic properties\n *\n * @param {objectArray} dynmData - JSON array from data.\n * @param {objectArray} data - ViewModelProperty Array\n * @param {objectArray} response - response object\n *\n * @return {ObjectArray} Output array\n */\n\nexport let processDataParseDefination = function (dynmData, data, response) {\n  var arrayObjs = response;\n  var parseData = null;\n\n  if (dynmData.outputFormat) {\n    var val = parsingUtils.parentGet(data, dynmData.dataInput);\n    return exports.createSoaInput(val, dynmData.outputFormat);\n  }\n\n  if (dynmData.dataFilter) {\n    var filterStr = dynmData.dataFilter[0];\n    var filterKeys = Object.getOwnPropertyNames(filterStr);\n    var filterVal = filterStr[filterKeys];\n    arrayObjs = exports.filterObjects(response, filterKeys, dynmData.path, filterVal, dynmData.dataInput);\n    parseData = arrayObjs;\n  }\n\n  if (dynmData.outputFormatType && dynmData.outputFormatType === 'ViewModelObject') {\n    var modelObjUid = parsingUtils.parentGet(response, dynmData.dataInput);\n    var operationType = 'Edit';\n\n    if (dynmData.operationType) {\n      operationType = dynmData.operationType;\n    }\n\n    var viewModelObj = viewModelObjectSvc.createViewModelObject(modelObjUid, operationType);\n\n    if (viewModelObj) {\n      var propertyNames = _.keys(viewModelObj.props).sort();\n\n      viewModelObj.sortedPropNames = propertyNames;\n    }\n\n    return viewModelObj;\n  }\n\n  if (dynmData.viewModelPropValues) {\n    var parseTempData = exports.createDynProperty(arrayObjs, dynmData);\n    parseData = parseTempData;\n  }\n\n  return parseData;\n};\n/**\n * Filter the Inputs based on some condition\n *\n * @param {Object} response -Response from server\n * @param {String} filterProperty - any filter condition\n * @param {String} path - Traversal path in output\n * @param {String} expectedValue - If any condition to check\n * @param {string} filterInput - any extra parameter to check\n *\n * @return {ObjectArray} Filtered objects from source array\n */\n\nexport let filterObjects = function (response, filterProperty, path, expectedValue, filterInput) {\n  var modelObjects = [];\n\n  var modelObjectsArray = _.get(response, path);\n\n  for (var i in modelObjectsArray) {\n    var operands = _getOperands(expectedValue);\n\n    var tempObj = _.get(modelObjectsArray[i], operands[0]);\n\n    if (!tempObj && filterInput) {\n      var objUid = _.get(modelObjectsArray[i], filterInput);\n\n      var mObject = cdm.getObject(objUid);\n      tempObj = _.get(mObject, operands[0]);\n    }\n\n    if (tempObj === operands[1]) {\n      modelObjects.push(modelObjectsArray[i]);\n    }\n  }\n\n  return modelObjects;\n};\nexports = {\n  createDynProperty,\n  createSoaInput,\n  processDataParseDefination,\n  filterObjects\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dynamicPropertyService.js"],"names":["_operators","condName","dobj","_","dval","dateTimeSvc","output","f","Object","inArray","functionName","t","k","_prepareObject","t2","_getInputData","arrayObjs","objUid","mObject","cdm","dispName","operands","expression","reValue","tempType","returnVal","types","condVal","val","_evaluateCondition","objectData","condValue","_constructOutputData","exports","createDynProperty","n","g","d","ptype","dbValue","_getDisplayName","getPropertyValue","propAttrHolder","displayName","type","isRequired","isEditable","dispValue","labelPosition","viewProp","modelPropertySvc","z","pName","pValue","createSoaInput","modelOutput","processDataParseDefination","parseData","dynmData","parsingUtils","filterStr","filterKeys","filterVal","modelObjUid","operationType","viewModelObj","viewModelObjectSvc","propertyNames","parseTempData","filterObjects","modelObjects","modelObjectsArray","_getOperands","tempObj"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Service to define for populating the dynamic data in view model format in panel.\n *\n * @module js/dynamicPropertyService\n */\nimport modelPropertySvc from 'js/modelPropertyService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport parsingUtils from 'js/parsingUtils';\n\n/**\n * Define the 'operator' that separate the 'operands' of an expression.\n */\nvar _operators = /\\=\\=|!=|:|&&|>|>=|<|<=/;\n\n/**\n * Returns the individual fields\n *\n * @param {Object}objectData - Model object\n * @param {String}condName - Nested Property structure\n * @return {ObjectArray} output - Nested output structure\n */\nfunction _getInputData( objectData, condName ) {\n    var output;\n    if( condName === 'dateApi' ) {\n        var dobj = _.get( objectData, condName );\n        var dval = null;\n\n        if( dobj.dateObject ) {\n            dval = dateTimeSvc.formatUTC( dobj.dateObject );\n        }\n        output = dval;\n    } else {\n        output = _.get( objectData, condName );\n    }\n    return output;\n}\n\n/**\n * Check the nested structure and returns the field.\n *\n * @param {Object}objectIndex - Index in array objects\n * @param {String}arrayObjs - Model object\n * @param {String}inArray - JSON string\n * @return {Object} Nested output structure\n */\nfunction _constructOutputData( objectIndex, arrayObjs, inArray ) {\n    var output = [];\n\n    for( var i in inArray ) {\n        var f = Object.getOwnPropertyNames( inArray[ i ] );\n        if( f[ 0 ] === 'structName' ) {\n            var functionName = _.get( inArray[ i ], f[ 0 ] );\n            var t = _.get( inArray[ i ], f[ 1 ] );\n            var k = _prepareObject( objectIndex, arrayObjs, t );\n\n            output[ functionName ] = _.assign( {}, k );\n        } else {\n            var t2 = _.get( inArray[ i ], f[ 1 ] );\n            var condName = _.get( inArray[ i ], f[ 0 ] );\n\n            output[ condName ] = _getInputData( arrayObjs[ objectIndex ], t2 );\n        }\n    }\n\n    if( output.dateValue ) {\n        output.value = 0;\n    }\n\n    return output;\n}\n\n/**\n * Return the display string from the object\n *\n * @param {Object }objectData - Input Object\n * @param {String} prop - Property string\n * @param {String} dataInput - If any specific string or property define in the Input\n * @return {String} dispName - Display String\n *\n */\nfunction _getDisplayName( objectData, prop, dataInput ) {\n    var dispName;\n    if( dataInput ) {\n        var objUid = _.get( objectData, dataInput );\n        var mObject = cdm.getObject( objUid );\n        dispName = _.get( mObject, prop );\n    } else {\n        dispName = _.get( objectData, prop );\n    }\n    return dispName;\n}\n\n/**\n * Evaluate condition expression\n *\n * @param {String} expression - Expression {note: currently supporting ==,!=,&&,>,>=,<,<=}\n * @param {Object} evaluationEnv - The data environment for expression evaluation\n * @param {ObjectArray} objectData - The array of function objects which can be used in expression evaluation\n *\n * @return {Object} The evaluated condition result\n */\nfunction _evaluateCondition( expression, evaluationEnv, objectData ) {\n    var operands = expression.split( _operators );\n\n    var reValue = false;\n\n    var tempType = _.get( objectData, operands[ 0 ] );\n\n    if( tempType === operands[ 1 ] ) {\n        reValue = evaluationEnv;\n    }\n\n    return reValue;\n}\n\n/**\n * Evaluate the condition and return the value\n *\n * @param {Object}objectData - Model object\n * @param {String}types - Property name\n *\n * @return {Object} Supported type for the declarative\n */\nfunction getPropertyValue( objectData, types ) {\n    var returnVal = '';\n\n    for( var i in types ) {\n        var f = Object.getOwnPropertyNames( types[ i ] );\n        var condName = _.get( types[ i ], f[ 0 ] );\n        var condVal = _.get( types[ i ], f[ 1 ] );\n        var val = _evaluateCondition( condName, condVal, objectData );\n        if( val ) {\n            returnVal = val;\n        }\n    }\n\n    return returnVal;\n}\n\n/**\n * Evaluate expression\n *\n * @param {String} expression - expression {note: currently supporting ==,!=,&&,>,>=,<,<=}\n * @return {ObjectArray} operands - Array of the string objects\n */\nfunction _getOperands( expression ) {\n    return expression.split( _operators );\n}\n\n/**\n * Returns the nested property\n *\n * @param {Object}objectIndex - Index in array objects\n * @param {String}arrayObjs - Model object\n * @param {String}inArray - JSON string\n * @return {ObjectArray} output - Nested output structure\n */\nfunction _prepareObject( objectIndex, arrayObjs, inArray ) {\n    var output = [];\n    var objectData = arrayObjs[ objectIndex ];\n\n    for( var i in inArray ) {\n        var f = Object.getOwnPropertyNames( inArray[ i ] );\n\n        var condName = _.get( inArray[ i ], f[ 0 ] );\n        var condValue = _.get( inArray[ i ], f[ 1 ] );\n\n        if( f[ 0 ] === 'structName' ) {\n            output[ condName ] = _constructOutputData( objectIndex, arrayObjs, condValue );\n        } else {\n            output[ condName ] = _getInputData( objectData, condValue );\n        }\n    }\n    return output;\n}\n\nvar exports = {};\n\n/**\n * Get the view model property using the SOA input\n *\n * @param {String} arrayObjs - SOA response\n * @param {String} n - viewModel property\n * @return {ObjectArray} output - A ViewModel property object array\n */\nexport let createDynProperty = function( arrayObjs, n ) {\n    var output = [];\n\n    if( n.viewModelPropValues ) {\n        for( var i in arrayObjs ) {\n            var g = n.viewModelPropValues;\n            var d = Object.getOwnPropertyNames( n.viewModelPropValues );\n\n            var dispName = null;\n            var ptype = null;\n            var dbValue = null;\n\n            for( var k in d ) {\n                if( d[ k ] === 'displayName' ) {\n                    dispName = _getDisplayName( arrayObjs[ i ], g[ d[ k ] ], n.dataInput );\n                }\n                if( d[ k ] === 'type' ) {\n                    ptype = getPropertyValue( arrayObjs[ i ], g[ d[ k ] ] );\n                }\n                if( d[ k ] === 'dbValue' ) {\n                    dbValue = getPropertyValue( arrayObjs[ i ], g[ d[ k ] ] );\n                }\n            }\n\n            var propAttrHolder = {\n                displayName: dispName,\n                type: ptype,\n                isRequired: '',\n                isEditable: '',\n                dbValue: dbValue,\n                dispValue: '',\n                labelPosition: ''\n            };\n            var viewProp = modelPropertySvc.createViewModelProperty( propAttrHolder );\n\n            if( d[ k ] === 'propMisc' ) {\n                var z = g[ d[ k ] ];\n\n                for( var h in z ) {\n                    var pName = z[ h ].propName;\n                    var pValue = z[ h ].value;\n                    var objUid = _.get( arrayObjs[ i ], pValue );\n                    viewProp[ pName ] = objUid;\n                }\n            }\n            output.push( viewProp );\n        }\n    }\n\n    return output;\n};\n\n/**\n * prepare the SOA input using the JSON data for dynamic properties\n *\n * @param {Array} arrayObjs - ViewModelProperty Array\n * @param {Array} inArray - JSON array from data.\n *\n * @return {ObjectArray} Output array\n */\nexport let createSoaInput = function( arrayObjs, inArray ) {\n    var modelOutput = [];\n\n    for( var obj in arrayObjs ) {\n        var output = _constructOutputData( obj, arrayObjs, inArray );\n\n        modelOutput.push( _.assign( {}, output ) );\n    }\n\n    return modelOutput;\n};\n\n/**\n * prepare the SOA input using the JSON data for dynamic properties\n *\n * @param {objectArray} dynmData - JSON array from data.\n * @param {objectArray} data - ViewModelProperty Array\n * @param {objectArray} response - response object\n *\n * @return {ObjectArray} Output array\n */\nexport let processDataParseDefination = function( dynmData, data, response ) {\n    var arrayObjs = response;\n    var parseData = null;\n\n    if( dynmData.outputFormat ) {\n        var val = parsingUtils.parentGet( data, dynmData.dataInput );\n        return exports.createSoaInput( val, dynmData.outputFormat );\n    }\n\n    if( dynmData.dataFilter ) {\n        var filterStr = dynmData.dataFilter[ 0 ];\n        var filterKeys = Object.getOwnPropertyNames( filterStr );\n        var filterVal = filterStr[ filterKeys ];\n        arrayObjs = exports.filterObjects( response, filterKeys, dynmData.path, filterVal, dynmData.dataInput );\n        parseData = arrayObjs;\n    }\n\n    if( dynmData.outputFormatType && dynmData.outputFormatType === 'ViewModelObject' ) {\n        var modelObjUid = parsingUtils.parentGet( response, dynmData.dataInput );\n        var operationType = 'Edit';\n        if( dynmData.operationType ) {\n            operationType = dynmData.operationType;\n        }\n\n        var viewModelObj = viewModelObjectSvc.createViewModelObject( modelObjUid, operationType );\n        if( viewModelObj ) {\n            var propertyNames = _.keys( viewModelObj.props ).sort();\n            viewModelObj.sortedPropNames = propertyNames;\n        }\n\n        return viewModelObj;\n    }\n\n    if( dynmData.viewModelPropValues ) {\n        var parseTempData = exports.createDynProperty( arrayObjs, dynmData );\n        parseData = parseTempData;\n    }\n\n    return parseData;\n};\n\n/**\n * Filter the Inputs based on some condition\n *\n * @param {Object} response -Response from server\n * @param {String} filterProperty - any filter condition\n * @param {String} path - Traversal path in output\n * @param {String} expectedValue - If any condition to check\n * @param {string} filterInput - any extra parameter to check\n *\n * @return {ObjectArray} Filtered objects from source array\n */\nexport let filterObjects = function( response, filterProperty, path, expectedValue, filterInput ) {\n    var modelObjects = [];\n    var modelObjectsArray = _.get( response, path );\n\n    for( var i in modelObjectsArray ) {\n        var operands = _getOperands( expectedValue );\n        var tempObj = _.get( modelObjectsArray[ i ], operands[ 0 ] );\n\n        if( !tempObj && filterInput ) {\n            var objUid = _.get( modelObjectsArray[ i ], filterInput );\n            var mObject = cdm.getObject( objUid );\n            tempObj = _.get( mObject, operands[ 0 ] );\n        }\n\n        if( tempObj === operands[ 1 ] ) {\n            modelObjects.push( modelObjectsArray[ i ] );\n        }\n    }\n\n    return modelObjects;\n};\n\nexports = {\n    createDynProperty,\n    createSoaInput,\n    processDataParseDefination,\n    filterObjects\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
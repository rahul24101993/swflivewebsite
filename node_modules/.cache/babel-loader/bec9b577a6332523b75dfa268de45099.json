{"ast":null,"code":"/* eslint-disable require-jsdoc */\n// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * This module provides the native implementation of the cacheFactory.\n *\n * @module js/awCacheFactoryService\n */\nimport _ from 'lodash';\nlet caches = {};\n\nfunction cacheFactory(cacheId) {\n  if (cacheId in caches) {\n    throw new Error(`awCacheFactory, CacheId ${cacheId} is already taken!`);\n  }\n\n  var size = 0;\n  var stats = Object.assign({}, {\n    id: cacheId\n  });\n  var data = createMap();\n  /**\n   * A cache object used to store and retrieve data\n   */\n\n  return caches[cacheId] = {\n    /**\n     * Inserts a named entry into the cache object to be\n     * retrieved later, and incrementing the size of the cache if the key was not already\n     * present in the cache.\n     *\n     * It will not insert undefined values into the cache.\n     *\n     * @param {string} key the key under which the cached data is stored.\n     * @param {*} value the value to store alongside the key. If it is undefined, the key\n     *    will not be stored.\n     * @returns {*} the value stored.\n     */\n    put: function (key, value) {\n      if (isUndefined(value)) {\n        return;\n      }\n\n      if (!(key in data)) {\n        size++;\n      }\n\n      data[key] = value;\n      return value;\n    },\n\n    /**\n     * Retrieves named data stored in the cache object.\n     *\n     * @param {string} key the key of the data to be retrieved\n     * @returns {*} the value stored.\n     */\n    get: function (key) {\n      return data[key];\n    },\n\n    /**\n     * Removes an entry from the cache object.\n     *\n     * @param {string} key the key of the entry to be removed\n     */\n    remove: function (key) {\n      if (!(key in data)) {\n        return;\n      }\n\n      delete data[key];\n      size--;\n    },\n\n    /**\n     * Clears the cache object of any entries.\n     */\n    removeAll: function () {\n      data = createMap();\n      size = 0;\n    },\n\n    /**\n     * Destroys the cache object entirely,\n     * removing it from the cacheFactory set.\n     */\n    destroy: function () {\n      data = null;\n      stats = null;\n      delete caches[cacheId];\n    },\n\n    /**\n     * Retrieve information regarding a particular cache\n     *\n     * @returns {object} an object with the id, size properties\n     */\n    info: function () {\n      return Object.assign({}, stats, {\n        size: size\n      });\n    }\n  };\n}\n\nfunction createMap() {\n  return Object.create(null);\n}\n/**\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.\n */\n\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n/**\n * Get information about all the caches that have been created\n *\n * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`\n */\n\n\ncacheFactory.info = function () {\n  var info = {};\n\n  _.forEach(caches, function (cache, cacheId) {\n    info[cacheId] = cache.info();\n  });\n\n  return info;\n};\n/**\n * Get access to a cache object by the `cacheId` used when it was created.\n *\n * @param {string} cacheId Name or id of a cache to access.\n * @returns {object} Cache object identified by the cacheId or undefined if no such cache.\n */\n\n\ncacheFactory.get = function (cacheId) {\n  return caches[cacheId];\n};\n\nexport let instance = cacheFactory;\nexport default {\n  instance\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awCacheFactoryService.js"],"names":["caches","cacheId","size","stats","id","data","createMap","put","isUndefined","key","get","remove","removeAll","destroy","info","Object","cacheFactory","_","cache","instance"],"mappings":"AAAA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,IAAIA,MAAM,GAAV,EAAA;;AAEA,SAAA,YAAA,CAAA,OAAA,EAAiC;EAC7B,IAAIC,OAAO,IAAX,MAAA,EAAwB;IACpB,MAAM,IAAA,KAAA,CAAY,2BAA0BA,OAA5C,oBAAM,CAAN;EACH;;EAED,IAAIC,IAAI,GAAR,CAAA;EACA,IAAIC,KAAK,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAmB;IAAEC,EAAE,EAAEH;EAAN,CAAnB,CAAZ;EACA,IAAII,IAAI,GAAGC,SAAX,EAAA;EAEA;AACJ;AACA;;EACI,OAAON,MAAM,CAANA,OAAM,CAANA,GAAoB;IAEvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQO,GAAG,EAAE,UAAA,GAAA,EAAA,KAAA,EAAuB;MACxB,IAAIC,WAAW,CAAf,KAAe,CAAf,EAA2B;QAAE;MAAS;;MACtC,IAAI,EAAGC,GAAG,IAAV,IAAI,CAAJ,EAAuB;QAAEP,IAAI;MAAK;;MAClCG,IAAI,CAAJA,GAAI,CAAJA,GAAAA,KAAAA;MACA,OAAA,KAAA;IAlBmB,CAAA;;IAqBvB;AACR;AACA;AACA;AACA;AACA;IACQK,GAAG,EAAE,UAAA,GAAA,EAAgB;MACjB,OAAOL,IAAI,CAAX,GAAW,CAAX;IA5BmB,CAAA;;IA+BvB;AACR;AACA;AACA;AACA;IACQM,MAAM,EAAE,UAAA,GAAA,EAAgB;MACpB,IAAI,EAAGF,GAAG,IAAV,IAAI,CAAJ,EAAuB;QAAE;MAAS;;MAClC,OAAOJ,IAAI,CAAX,GAAW,CAAX;MACAH,IAAI;IAvCe,CAAA;;IA0CvB;AACR;AACA;IACQU,SAAS,EAAE,YAAW;MAClBP,IAAI,GAAGC,SAAPD,EAAAA;MACAH,IAAI,GAAJA,CAAAA;IA/CmB,CAAA;;IAkDvB;AACR;AACA;AACA;IACQW,OAAO,EAAE,YAAW;MAChBR,IAAI,GAAJA,IAAAA;MACAF,KAAK,GAALA,IAAAA;MACA,OAAOH,MAAM,CAAb,OAAa,CAAb;IAzDmB,CAAA;;IA4DvB;AACR;AACA;AACA;AACA;IACQc,IAAI,EAAE,YAAW;MACb,OAAO,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,KAAA,EAA0B;QAAEZ,IAAI,EAAEA;MAAR,CAA1B,CAAP;IACH;EAnEsB,CAA3B;AAqEH;;AAED,SAAA,SAAA,GAAqB;EACjB,OAAOa,MAAM,CAANA,MAAAA,CAAP,IAAOA,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,WAAA,CAAA,KAAA,EAA8B;EAC1B,OAAO,OAAA,KAAA,KAAP,WAAA;AACH;AAED;AACA;AACA;AACA;AACA;;;AACAC,YAAY,CAAZA,IAAAA,GAAoB,YAAW;EAC3B,IAAIF,IAAI,GAAR,EAAA;;EACAG,CAAC,CAADA,OAAAA,CAAAA,MAAAA,EAAmB,UAAA,KAAA,EAAA,OAAA,EAA2B;IAC1CH,IAAI,CAAJA,OAAI,CAAJA,GAAkBI,KAAK,CAAvBJ,IAAkBI,EAAlBJ;EADJG,CAAAA;;EAGA,OAAA,IAAA;AALJD,CAAAA;AAQA;AACA;AACA;AACA;AACA;AACA;;;AACAA,YAAY,CAAZA,GAAAA,GAAmB,UAAA,OAAA,EAAoB;EACnC,OAAOhB,MAAM,CAAb,OAAa,CAAb;AADJgB,CAAAA;;AAIA,OAAO,IAAIG,QAAQ,GAAZ,YAAA;AAEP,eAAe;EACXA;AADW,CAAf","sourcesContent":["/* eslint-disable require-jsdoc */\n// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * This module provides the native implementation of the cacheFactory.\n *\n * @module js/awCacheFactoryService\n */\nimport _ from 'lodash';\n\nlet caches = {};\n\nfunction cacheFactory( cacheId ) {\n    if( cacheId in caches ) {\n        throw new Error( `awCacheFactory, CacheId ${cacheId} is already taken!` );\n    }\n\n    var size = 0;\n    var stats = Object.assign( {}, { id: cacheId } );\n    var data = createMap();\n\n    /**\n     * A cache object used to store and retrieve data\n     */\n    return caches[ cacheId ] = {\n\n        /**\n         * Inserts a named entry into the cache object to be\n         * retrieved later, and incrementing the size of the cache if the key was not already\n         * present in the cache.\n         *\n         * It will not insert undefined values into the cache.\n         *\n         * @param {string} key the key under which the cached data is stored.\n         * @param {*} value the value to store alongside the key. If it is undefined, the key\n         *    will not be stored.\n         * @returns {*} the value stored.\n         */\n        put: function( key, value ) {\n            if( isUndefined( value ) ) { return; }\n            if( !( key in data ) ) { size++; }\n            data[ key ] = value;\n            return value;\n        },\n\n        /**\n         * Retrieves named data stored in the cache object.\n         *\n         * @param {string} key the key of the data to be retrieved\n         * @returns {*} the value stored.\n         */\n        get: function( key ) {\n            return data[ key ];\n        },\n\n        /**\n         * Removes an entry from the cache object.\n         *\n         * @param {string} key the key of the entry to be removed\n         */\n        remove: function( key ) {\n            if( !( key in data ) ) { return; }\n            delete data[ key ];\n            size--;\n        },\n\n        /**\n         * Clears the cache object of any entries.\n         */\n        removeAll: function() {\n            data = createMap();\n            size = 0;\n        },\n\n        /**\n         * Destroys the cache object entirely,\n         * removing it from the cacheFactory set.\n         */\n        destroy: function() {\n            data = null;\n            stats = null;\n            delete caches[ cacheId ];\n        },\n\n        /**\n         * Retrieve information regarding a particular cache\n         *\n         * @returns {object} an object with the id, size properties\n         */\n        info: function() {\n            return Object.assign( {}, stats, { size: size } );\n        }\n    };\n}\n\nfunction createMap() {\n    return Object.create( null );\n}\n\n/**\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.\n */\nfunction isUndefined( value ) {\n    return typeof value === 'undefined';\n}\n\n/**\n * Get information about all the caches that have been created\n *\n * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`\n */\ncacheFactory.info = function() {\n    var info = {};\n    _.forEach( caches, function( cache, cacheId ) {\n        info[ cacheId ] = cache.info();\n    } );\n    return info;\n};\n\n/**\n * Get access to a cache object by the `cacheId` used when it was created.\n *\n * @param {string} cacheId Name or id of a cache to access.\n * @returns {object} Cache object identified by the cacheId or undefined if no such cache.\n */\ncacheFactory.get = function( cacheId ) {\n    return caches[ cacheId ];\n};\n\nexport let instance = cacheFactory;\n\nexport default {\n    instance\n};\n"]},"metadata":{},"sourceType":"module"}
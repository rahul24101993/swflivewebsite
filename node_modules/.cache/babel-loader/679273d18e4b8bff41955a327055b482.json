{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\searchcore\\\\src\\\\js\\\\AwSearchBreadcrumbChipsService.js\";\nimport AwChip from 'viewmodel/AwChipViewModel';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport resizeObserverSvc from 'js/resizeObserver.service';\nimport AwSearchBreadcrumbChipsUtils from 'js/AwSearchBreadcrumbChipsUtils';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let doNothing = () => {//NO OP\n};\nexport const attachResizeObserver = (viewModel, elementRefList) => {\n  const ref = elementRefList.get('chiplist');\n  const {\n    dispatch\n  } = viewModel;\n\n  const addResizeObserver = () => {\n    if (resizeObserverSvc.supportsResizeObserver()) {\n      const callback = _.debounce(() => {\n        if (ref && ref.current && ref.current.parentElement && ref.current.parentElement.parentElement) {\n          const data = viewModel.getData();\n          var overflowReturn = AwSearchBreadcrumbChipsUtils.calculateOverflow(elementRefList, data.visibleChipArea, data.visibleHeightChipArea, data.breadcrumbChips, data.overflowConfig.overflownChips, data.displayBreadcrumbChips, data.inHeader, data.searchFilterCategoryExpandMore, false);\n          var overflowConfig = {\n            overflownChips: overflowReturn.overflownChips,\n            hideMore: true\n          };\n          dispatch && dispatch({\n            path: 'data',\n            value: {\n              displayBreadcrumbChips: overflowReturn.displayChips,\n              displayOverflowButton: overflowReturn.displayOverflowButton,\n              overflowConfig: overflowConfig\n            }\n          });\n        }\n      }, 5, {\n        maxWait: 50,\n        trailing: true,\n        leading: false\n      });\n\n      ref.current.resizeObserver = resizeObserverSvc.observe(ref.current.parentElement.parentElement, callback);\n    }\n  };\n\n  addResizeObserver();\n};\nexport const onUnMount = elementRefList => {\n  if (elementRefList) {\n    const ref = elementRefList.get('chiplist');\n    ref.current && ref.current.resizeObserver && ref.current.resizeObserver();\n  }\n};\nexport const AwSearchBreadcrumbChipsRenderFunction = props => {\n  const {\n    viewModel,\n    actions,\n    elementRefList\n  } = props;\n  const {\n    data,\n    i18n\n  } = viewModel;\n  let {\n    chipOverflowPopup\n  } = actions;\n  let chiplistRef = elementRefList.get('chiplist').current;\n  const chipCondition = {\n    conditions: {}\n  };\n\n  const openOverflow = () => {\n    if (!chipOverflowPopup.open) {\n      chipOverflowPopup.show({\n        width: 'auto',\n        height: 'auto'\n      });\n    }\n  };\n\n  const closePopup = () => {\n    chipOverflowPopup.hide();\n  };\n\n  let loadedVMO = data.displayBreadcrumbChips;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: data.inHeader ? 'aw-search-breadcrumb-chips' : 'aw-search-breadcrumb-chipsPanel',\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'aw-layout-flexbox ' + (data.inHeader ? 'aw-widgets-chipList' : 'aw-widgets-chipListPanel'),\n      ref: elementRefList.get('chiplist'),\n      children: [data.displayBreadcrumbChips && data.displayBreadcrumbChips.length > 0 && loadedVMO.map((chipModel, index) => {\n        return /*#__PURE__*/_jsxDEV(AwChip, {\n          chip: chipModel,\n          action: doNothing(),\n          uiIconAction: actions.removeFilterAction,\n          chipCondition: chipCondition,\n          children: chipModel.children && chipModel.children.map((chipChildModel, childIndex) => {\n            return /*#__PURE__*/_jsxDEV(AwChip, {\n              chip: chipChildModel,\n              action: doNothing(),\n              uiIconAction: actions.removeFilterAction,\n              chipCondition: chipCondition\n            }, childIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }, this);\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this);\n      }), data.overflowConfig.overflownChips && data.overflowConfig.overflownChips.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: data.inHeader ? 'sw-chip-overflowContainer' : 'sw-chip-overflowContainerPanel',\n        ref: chipOverflowPopup.reference,\n        children: [/*#__PURE__*/_jsxDEV(AwButton, {\n          className: data.inHeader ? 'sw-chip-overflowButton' : 'sw-chip-overflowButtonPanel',\n          action: openOverflow,\n          closeAction: closePopup,\n          buttonType: \"chromeless\",\n          label: data.displayOverflowButton,\n          children: data.displayOverflowButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...chipOverflowPopup.options,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'aw-layout-flexbox sw-column aw-search-overflow ' + (data.inHeader ? 'aw-widgets-overflow-chipList' : 'aw-widgets-overflow-chipListPanel'),\n            children: data.overflowConfig.overflownChips.map((chipModel, overflowIndex) => {\n              return /*#__PURE__*/_jsxDEV(AwChip, {\n                chip: chipModel,\n                action: doNothing(),\n                uiIconAction: actions.removeFilterAction,\n                chipCondition: chipCondition,\n                children: chipModel.children && chipModel.children.map((chipChildModel, childOverflowIndex) => {\n                  return /*#__PURE__*/_jsxDEV(AwChip, {\n                    chip: chipChildModel,\n                    action: doNothing(),\n                    uiIconAction: actions.removeFilterAction,\n                    chipCondition: chipCondition\n                  }, childOverflowIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, overflowIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), data.breadcrumbChips && data.breadcrumbChips.length > 0 && /*#__PURE__*/_jsxDEV(AwButton, {\n        className: \"aw-search-clearAll\",\n        buttonType: \"chromeless\",\n        action: actions.clearAllAction,\n        label: i18n.clear,\n        children: i18n.clear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_c2 = AwSearchBreadcrumbChipsRenderFunction;\n_c = AwSearchBreadcrumbChipsRenderFunction;\n\nvar _c;\n\n$RefreshReg$(_c, \"AwSearchBreadcrumbChipsRenderFunction\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"AwSearchBreadcrumbChipsRenderFunction\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/AwSearchBreadcrumbChipsService.js"],"names":["doNothing","attachResizeObserver","ref","elementRefList","dispatch","addResizeObserver","resizeObserverSvc","callback","data","viewModel","overflowReturn","AwSearchBreadcrumbChipsUtils","overflowConfig","overflownChips","hideMore","path","value","displayBreadcrumbChips","displayOverflowButton","maxWait","trailing","leading","onUnMount","AwSearchBreadcrumbChipsRenderFunction","props","i18n","chipOverflowPopup","chiplistRef","chipCondition","conditions","openOverflow","width","height","closePopup","loadedVMO","actions","chipModel","clear"],"mappings":"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","sourcesContent":["import AwChip from 'viewmodel/AwChipViewModel';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport resizeObserverSvc from 'js/resizeObserver.service';\nimport AwSearchBreadcrumbChipsUtils from 'js/AwSearchBreadcrumbChipsUtils';\nimport _ from 'lodash';\n\nexport let doNothing = () => {\n    //NO OP\n};\n\nexport const attachResizeObserver = ( viewModel, elementRefList ) => {\n    const ref = elementRefList.get( 'chiplist' );\n    const { dispatch } = viewModel;\n\n    const addResizeObserver = () => {\n        if( resizeObserverSvc.supportsResizeObserver() ) {\n            const callback = _.debounce( () => {\n                if( ref && ref.current && ref.current.parentElement && ref.current.parentElement.parentElement ) {\n                    const data = viewModel.getData();\n                    var overflowReturn = AwSearchBreadcrumbChipsUtils.calculateOverflow( elementRefList, data.visibleChipArea, data.visibleHeightChipArea, data.breadcrumbChips,\n                        data.overflowConfig.overflownChips, data.displayBreadcrumbChips, data.inHeader, data.searchFilterCategoryExpandMore, false );\n                    var overflowConfig = {\n                        overflownChips: overflowReturn.overflownChips,\n                        hideMore: true\n                    };\n                    dispatch && dispatch( { path: 'data', value:\n                    { displayBreadcrumbChips: overflowReturn.displayChips, displayOverflowButton: overflowReturn.displayOverflowButton, overflowConfig: overflowConfig } } );\n                }\n            }, 5, {\n                maxWait: 50,\n                trailing: true,\n                leading: false\n            } );\n            ref.current.resizeObserver = resizeObserverSvc.observe( ref.current.parentElement.parentElement, callback );\n        }\n    };\n    addResizeObserver();\n};\n\nexport const onUnMount = ( elementRefList ) => {\n    if( elementRefList ) {\n        const ref = elementRefList.get( 'chiplist' );\n        ref.current && ref.current.resizeObserver && ref.current.resizeObserver();\n    }\n};\n\nexport const AwSearchBreadcrumbChipsRenderFunction = ( props ) => {\n    const { viewModel, actions, elementRefList } = props;\n    const { data, i18n } = viewModel;\n    let { chipOverflowPopup } = actions;\n    let chiplistRef = elementRefList.get( 'chiplist' ).current;\n    const chipCondition = {\n        conditions: {\n        }\n    };\n\n    const openOverflow = () => {\n        if( !chipOverflowPopup.open ) {\n            chipOverflowPopup.show( {\n                width: 'auto',\n                height: 'auto'\n            } );\n        }\n    };\n\n    const closePopup = () => {\n        chipOverflowPopup.hide();\n    };\n\n    let loadedVMO = data.displayBreadcrumbChips;\n    return (\n        <div className={ data.inHeader ? 'aw-search-breadcrumb-chips' : 'aw-search-breadcrumb-chipsPanel' }>\n            <div className={'aw-layout-flexbox ' + ( data.inHeader ? 'aw-widgets-chipList' : 'aw-widgets-chipListPanel' )} ref={elementRefList.get( 'chiplist' )}>\n                { data.displayBreadcrumbChips && data.displayBreadcrumbChips.length > 0 && loadedVMO.map( ( chipModel, index ) => {\n                    return (\n                        <AwChip\n                            chip={chipModel}\n                            action={doNothing()}\n                            uiIconAction={actions.removeFilterAction}\n                            key={index}\n                            chipCondition={chipCondition}>\n                            { chipModel.children && chipModel.children.map( ( chipChildModel, childIndex ) => {\n                                return (\n                                    <AwChip\n                                        chip={chipChildModel}\n                                        action={doNothing()}\n                                        uiIconAction={actions.removeFilterAction}\n                                        key={childIndex}\n                                        chipCondition={chipCondition}>\n                                    </AwChip>\n                                );\n                            } )}\n                        </AwChip>\n                    );\n                } )}\n                {data.overflowConfig.overflownChips && data.overflowConfig.overflownChips.length > 0 &&\n                    <div className={ data.inHeader ? 'sw-chip-overflowContainer' : 'sw-chip-overflowContainerPanel' } ref={chipOverflowPopup.reference}>\n                    <AwButton\n                        className={ data.inHeader ? 'sw-chip-overflowButton' : 'sw-chip-overflowButtonPanel' }\n                        action={openOverflow}\n                        closeAction={closePopup}\n                        buttonType='chromeless'\n                        label= {data.displayOverflowButton}>\n                        {data.displayOverflowButton}\n                    </AwButton>\n                    <AwPopup {...chipOverflowPopup.options}>\n                        <div className={'aw-layout-flexbox sw-column aw-search-overflow ' + ( data.inHeader ? 'aw-widgets-overflow-chipList' : 'aw-widgets-overflow-chipListPanel' )}>\n                            { data.overflowConfig.overflownChips.map( ( chipModel, overflowIndex ) => {\n                                return (\n                                    <AwChip\n                                        chip={chipModel}\n                                        action={doNothing()}\n                                        uiIconAction={actions.removeFilterAction}\n                                        key={overflowIndex}\n                                        chipCondition={chipCondition}>\n                                        { chipModel.children && chipModel.children.map( ( chipChildModel, childOverflowIndex ) => {\n                                            return (\n                                                <AwChip\n                                                    chip={chipChildModel}\n                                                    action={doNothing()}\n                                                    uiIconAction={actions.removeFilterAction}\n                                                    key={childOverflowIndex}\n                                                    chipCondition={chipCondition}>\n                                                </AwChip>\n                                            );\n                                        } )}\n                                    </AwChip>\n                                );\n                            } )}\n                        </div>\n                    </AwPopup>\n                </div>\n                }\n                {data.breadcrumbChips && data.breadcrumbChips.length > 0 &&\n                    <AwButton className='aw-search-clearAll' buttonType='chromeless' action={actions.clearAllAction} label={i18n.clear}>{i18n.clear}</AwButton>\n                }\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
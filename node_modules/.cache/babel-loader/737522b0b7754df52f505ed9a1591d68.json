{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service creates 'UwDataProvider' objects used for lists, grids and other collections).\n *\n * @module js/dataSourceService\n */\nimport uwPropertyService from 'js/uwPropertyService';\nimport policySvc from 'soa/kernel/propertyPolicyService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\n\nvar DataSourceService = function (dataSource) {\n  var _self = this; // eslint-disable-line consistent-this\n\n\n  var _dataProvider = null;\n  var _declViewModel = null;\n\n  var _setdataSourceService = function (dataSource) {\n    if (dataSource.declViewModel) {\n      _declViewModel = dataSource.declViewModel;\n    } else if (dataSource.dataProvider) {\n      _dataProvider = dataSource.dataProvider;\n    }\n  };\n\n  _self.getDataProvider = function () {\n    return _dataProvider;\n  };\n\n  _self.getDeclViewModel = function () {\n    return _declViewModel;\n  };\n\n  _self.getSourceObject = function () {\n    if (_dataProvider) {\n      return _dataProvider;\n    }\n\n    return _declViewModel;\n  };\n\n  _self.getContextVMO = function () {\n    if (_declViewModel) {\n      return _declViewModel.baseselection ? _declViewModel.baseselection : _declViewModel.vmo;\n    }\n\n    return null;\n  };\n\n  _self.hasxrtBasedViewModel = function () {\n    var hasxrtBasedVM = false;\n\n    var srcObj = _self.getSourceObject();\n\n    if (srcObj.xrtType === 'INFO' && !_.isEmpty(srcObj.xrtData) && !_.isEmpty(srcObj.xrtData.xrtViewModel)) {\n      hasxrtBasedVM = true;\n    } else {\n      hasxrtBasedVM = srcObj.gwtPresenters && srcObj.gwtPresenters.length > 0;\n    }\n\n    return hasxrtBasedVM;\n  };\n  /**\n   * This returns all the HTML Panels ids currently present in the View.\n   *\n   * @returns {ObjectArray} - Panel IDs\n   */\n\n\n  _self.getGwtHTMLPanelIds = function () {\n    var srcObj = _self.getSourceObject();\n\n    if (srcObj.gwtPresenters) {\n      return srcObj.gwtPresenters;\n    }\n\n    return [];\n  };\n  /**\n   * This returns all the HTML Panels ids currently present in the View.\n   *\n   * @returns {ObjectArray} - Panel IDs\n   */\n\n\n  _self.getGwtVMs = function () {\n    var srcObj = _self.getSourceObject();\n\n    if (srcObj.gwtVieModel) {\n      return srcObj.gwtVieModel;\n    }\n\n    return [];\n  };\n  /**\n   * Get all the loaded view modle objects\n   *\n   * @return {ObjectArray} Array of loaded view model objects\n   */\n\n\n  _self.getLoadedViewModelObjects = function (allowDuplicates) {\n    var loadedViewModelObjects = [];\n\n    if (_dataProvider && _dataProvider.viewModelCollection) {\n      loadedViewModelObjects = _dataProvider.getEditableObjects();\n    } else if (_declViewModel) {\n      if (_declViewModel.vmo) {\n        if (_declViewModel.data && _declViewModel.data.objects) {\n          for (let key in _declViewModel.data.objects) {\n            if (_declViewModel.data.objects[key].uid === _declViewModel.vmo.uid) {\n              loadedViewModelObjects.push(_declViewModel.data.objects[key]);\n              break;\n            }\n          }\n        } else {\n          loadedViewModelObjects.push(_declViewModel.vmo);\n        }\n      } else if (_declViewModel.getAtomicData) {\n        if (_declViewModel.getAtomicData().xrtVMO) {\n          loadedViewModelObjects.push(_declViewModel.getAtomicData().xrtVMO);\n        }\n\n        if (_declViewModel.getAtomicData().dpRef && _declViewModel.getAtomicData().dpRef.current) {\n          _.forEach(_declViewModel.getAtomicData().dpRef.current.dataProviders, function (vmCollection) {\n            if (vmCollection) {\n              loadedViewModelObjects = loadedViewModelObjects.concat(vmCollection());\n            }\n          });\n        }\n      }\n\n      if (_declViewModel.dataProviders) {\n        _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n          if (dataProvider && dataProvider.viewModelCollection) {\n            loadedViewModelObjects = loadedViewModelObjects.concat(dataProvider.viewModelCollection.getLoadedViewModelObjects());\n          }\n        });\n      }\n\n      if (_declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection) {\n        loadedViewModelObjects = loadedViewModelObjects.concat(_declViewModel.customPanel.viewModelCollection);\n      }\n    } // Weed out the duplicate ones\n\n\n    if (!allowDuplicates) {\n      loadedViewModelObjects = _.uniq(loadedViewModelObjects, false, function (vmo) {\n        return vmo.uid;\n      });\n    }\n\n    return loadedViewModelObjects;\n  };\n  /**\n   * Get all the collections in the view model.\n   *\n   * @return {ObjectArray} Array of collections.\n   */\n\n\n  _self.getAllCollectionsAndPropertyNames = function () {\n    var collections = [];\n\n    if (_declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        if (dataProvider && dataProvider.viewModelCollection) {\n          var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n          var properties = [];\n\n          _.forEach(dataProvider.cols, function (col) {\n            properties.push(col.name);\n          });\n\n          var collectionData = {\n            collection: collection,\n            properties: properties\n          };\n          collections = collections.concat(collectionData);\n        }\n      });\n    }\n\n    if (_declViewModel && _declViewModel.vmo) {\n      collections.push({\n        collection: [_declViewModel.vmo],\n        properties: []\n      });\n    }\n\n    return collections;\n  };\n  /**\n   * Get all the collection keys from the view model\n   *\n   * @returns {StringArray} - Keys.\n   */\n\n\n  _self.getCollectionKeys = function () {\n    var collectionKeys = [];\n\n    if (_declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        collectionKeys.push(dataProvider.name);\n      });\n    }\n\n    return collectionKeys;\n  };\n  /**\n   * Get all the collections in the view model.\n   *\n   * @param {String} dataBindValue - The data bind value.\n   *\n   * @return {ObjectArray} Array of collections.\n   */\n\n\n  _self.getCollectionAndPropertyNames = function (dataBindValue) {\n    var collData = {};\n\n    if (_declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        if (dataProvider && dataProvider.name === dataBindValue && dataProvider.viewModelCollection) {\n          var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n          var properties = [];\n\n          _.forEach(dataProvider.cols, function (col) {\n            properties.push(col.name);\n          });\n\n          collData.collection = collection;\n          collData.properties = properties;\n          return;\n        }\n      });\n    } else if (dataBindValue === '' && _declViewModel) {\n      var properties = [];\n\n      _.forEach(_declViewModel.vmo.props, function (prop) {\n        properties.push(prop.propertyName);\n      });\n\n      collData.properties = properties;\n      collData.collection = [_declViewModel.vmo];\n    }\n\n    return collData;\n  };\n\n  _self.setSelectionEnabled = function (isEnabled) {\n    if (_dataProvider && _dataProvider.selectionModel) {\n      _dataProvider.setSelectionEnabled(isEnabled);\n    } else if (_declViewModel && _declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        if (dataProvider && dataProvider.selectionModel) {\n          dataProvider.setSelectionEnabled(isEnabled);\n        }\n      });\n    }\n  };\n\n  _self.getPropertyMap = function () {\n    var uidtoPropNameMap = {};\n    var loadedViewModelObjs = viewModelObjectService.getVmosNotInEdit(_self.getLoadedViewModelObjects());\n\n    if (_dataProvider && _dataProvider.viewModelCollection) {\n      var propNames = _dataProvider.getPropertyNames();\n\n      _.forEach(loadedViewModelObjs, function (vmObjects) {\n        uidtoPropNameMap[vmObjects.uid] = propNames;\n      });\n    } else if (_declViewModel) {\n      var customPanelUids = []; // For custom panels, include underlying objects in uidtoPropNameMap\n\n      if (_declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection) {\n        _declViewModel.customPanel.viewModelCollection.map(function (obj) {\n          if (obj && obj.props) {\n            customPanelUids.push(obj.uid);\n\n            _.forEach(obj.props, function (prop) {\n              if (prop.parentUid !== obj.uid) {\n                customPanelUids.push(prop.parentUid);\n              }\n            });\n          }\n        });\n      }\n\n      _.forEach(loadedViewModelObjs, function (vmObjects) {\n        fetchPropNamesFromVMO(vmObjects, uidtoPropNameMap, customPanelUids);\n      });\n    }\n\n    return uidtoPropNameMap;\n  };\n  /**\n   * This function generates the uid to propertyName map\n   *\n   * @param {ViewModelObject} vmo - Object to access.\n   *\n   * @param {StringToStringMap} uidtoPropNameMap - ID Map.\n   *\n   * @param {Array} customPanelUids - array of custom panel uids (also includes parentUid of\n   *   properties if they are different)\n   */\n\n\n  function fetchPropNamesFromVMO(vmo, uidtoPropNameMap, customPanelUids) {\n    _.forEach(vmo.props, function (props) {\n      var uid = props.parentUid ? props.parentUid : vmo.uid;\n      var propNames = uidtoPropNameMap[uid] ? uidtoPropNameMap[uid] : [];\n\n      if (props && props.type) {\n        propNames.push(props.propertyName);\n      }\n\n      if (uid === vmo.uid || _.includes(customPanelUids, uid)) {\n        uidtoPropNameMap[uid] = propNames;\n      }\n    });\n  }\n\n  _self.checkEditableOnProperties = function () {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      vmo.setEditableStates(true, true, true);\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.updatePartialEditState = function (failureUids, modifiedPropsMap) {\n    const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      if (!_.includes(failureUids, vmo.uid)) {\n        vmo.setEditableStates(false, true, true);\n\n        if (modifiedPropsMap[vmo.uid]) {\n          var propsToReset = modifiedPropsMap[vmo.uid].viewModelProps;\n\n          _.forEach(propsToReset, function (prop) {\n            uwPropertyService.resetProperty(prop);\n          });\n        }\n      }\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.getAllEditableProperties = function () {\n    var allEditableProperties = [];\n\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (prop && prop.isEditable) {\n          allEditableProperties.push(prop);\n        }\n      });\n    });\n\n    return allEditableProperties;\n  };\n\n  _self.getAllModifiedProperties = function () {\n    const allModifiedProperties = [];\n    const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (uwPropertyService.isModified(prop)) {\n          allModifiedProperties.push(prop);\n        }\n      });\n    });\n\n    return allModifiedProperties;\n  };\n\n  _self.getAllAutoAssignableProperties = function () {\n    var allAutoAssignableProperties = [];\n\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (prop.isAutoAssignable) {\n          allAutoAssignableProperties.push(prop);\n        }\n      });\n    });\n\n    return allAutoAssignableProperties;\n  };\n\n  _self.resetUpdates = function () {\n    var modifiedProps = _self.getAllModifiedProperties();\n\n    _.forEach(modifiedProps, function (prop) {\n      uwPropertyService.resetUpdates(prop, false);\n    });\n  };\n\n  _self.replaceValuesWithNewValues = function (propArr) {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        let filteredProps = propArr.filter(function (propObj) {\n          if (propObj && propObj.propertyName === prop.propertyName) {\n            return propObj;\n          }\n\n          return undefined;\n        });\n        filteredProps.forEach(filteredProp => {\n          uwPropertyService.copyModelData(prop, filteredProp);\n          prop.dbValue = filteredProp.dbValue;\n          prop.newValue = filteredProp.newValue; // mark updated values as dirty\n\n          prop.valueUpdated = true;\n        });\n      });\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().atomicData.update(newXrtState);\n    }\n  };\n\n  _self.updateObjects = function (viewModelPropsArray) {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        viewModelPropsArray.filter(function (vmProp) {\n          if (vmProp) {\n            vmo.props[vmProp.propertyName] = { ...vmProp\n            };\n          }\n        });\n      });\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.getAllModifiedPropertiesWithVMO = function () {\n    var allModifiedProperties = [];\n\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      var modifiedPropArray = [];\n\n      _.forEach(vmo.props, function (prop) {\n        if (uwPropertyService.isModified(prop)) {\n          modifiedPropArray.push(prop);\n        }\n      });\n\n      if (modifiedPropArray.length > 0) {\n        allModifiedProperties.push({\n          viewModelProps: modifiedPropArray,\n          viewModelObject: vmo\n        });\n      }\n    });\n\n    return allModifiedProperties;\n  };\n  /**\n   * Returns an object of this structure: { 'uid': { 'viewModelObject': ViewModelObject, 'viewModelProps': [\n   * ViewModelProperty1, ViewModelProperty2, ... ] } }\n   *\n   * @param {ObjectArray} modifiedViewModelProperties - Array of modified View Model Properties\n   * @return {Object} Map\n   */\n\n\n  _self.getModifiedPropertiesMap = function (modifiedViewModelProperties) {\n    const loadedViewModelObjs = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n    var modifiedValuesMap = {};\n\n    if (modifiedViewModelProperties && modifiedViewModelProperties.length > 0) {\n      _.forEach(modifiedViewModelProperties, function (modifiedProp) {\n        var parentUid = modifiedProp.parentUid;\n\n        if (parentUid) {\n          var vmo = getVMOFromUid(parentUid, loadedViewModelObjs);\n\n          if (!vmo) {\n            vmo = viewModelObjectService.createViewModelObject(parentUid, 'EDIT');\n          }\n\n          var vmoToPropMap = _.get(modifiedValuesMap, [parentUid]);\n\n          if (vmoToPropMap) {\n            if (vmoToPropMap.viewModelProps) {\n              vmoToPropMap.viewModelProps.push(modifiedProp);\n            }\n          } else {\n            var newVmoToPropMap = {};\n            newVmoToPropMap.viewModelObject = vmo;\n            newVmoToPropMap.viewModelProps = [modifiedProp];\n\n            _.set(modifiedValuesMap, [parentUid], newVmoToPropMap);\n          }\n        } else {\n          logger.info('Info: no parentUid found on ViewModelProperty: ' + modifiedProp.getId());\n        }\n      });\n    }\n\n    return modifiedValuesMap;\n  };\n  /**\n   * @param {String} targetUID - UID\n   * @param {ViewModelObjectArray} loadedViewModelObjs - Loaded VMOs.\n   *\n   * @return {ViewModelObject} VMO Associated with given input.\n   */\n\n\n  function getVMOFromUid(targetUID, loadedViewModelObjs) {\n    var targetVMO = null;\n\n    if (loadedViewModelObjs && loadedViewModelObjs.length > 0) {\n      _.forEach(loadedViewModelObjs, function (vmo) {\n        var uid = vmo.uid;\n\n        if (uid === targetUID) {\n          targetVMO = vmo;\n          return false;\n        }\n\n        return undefined;\n      });\n    }\n\n    return targetVMO;\n  }\n  /**\n   * Reset all 'editable' status properties from the underlying object.\n   */\n\n\n  _self.saveEditiableStates = function () {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      vmo.setEditableStates(false, true, true);\n    });\n\n    var modifiedPropsArr = _self.getAllModifiedProperties();\n\n    _.forEach(modifiedPropsArr, function (prop) {\n      uwPropertyService.resetProperty(prop);\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.resetEditiableStates = function () {\n    var loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      vmo.clearEditiableStates(true);\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.registerPropPolicy = function () {\n    var dataProvider = _self.getDataProvider();\n\n    var declViewModelObj = _self.getDeclViewModel();\n\n    var policy = null;\n\n    if (dataProvider && !_.isUndefined(dataProvider.policy)) {\n      policy = _.clone(dataProvider.policy, true);\n      updatePropPolicyForEditing(policy, 'true', dataProvider);\n      dataProvider.editPolicyId = policySvc.register(policy);\n    } else if (declViewModelObj) {\n      policy = {\n        types: []\n      };\n\n      if (!_.isUndefined(declViewModelObj.propertyPolicyRetrieved)) {\n        var policyType = {\n          properties: []\n        };\n        policyType.name = declViewModelObj.vmo.type;\n        policyType.properties = _.clone(declViewModelObj.propertyPolicyRetrieved);\n        policy.types.push(policyType);\n      }\n\n      if (declViewModelObj._policy && declViewModelObj._policy.types) {\n        _.forEach(declViewModelObj._policy.types, function (policyType) {\n          policy.types = policy.types.concat(_.clone(policyType));\n        });\n      }\n\n      var viewModelObjs = _self.getLoadedViewModelObjects();\n\n      _.forEach(viewModelObjs, function (viewModelObj) {\n        _.forEach(viewModelObj.props, function (prop) {\n          var modelObj = uwPropertyService.getSourceModelObject(prop);\n\n          if (modelObj) {\n            var typeName = modelObj.type;\n            var policyType = policy.types.filter(function (polType) {\n              if (polType && polType.name === typeName) {\n                return true;\n              }\n\n              return undefined;\n            })[0];\n\n            if (!policyType) {\n              policyType = {\n                properties: []\n              };\n              policy.types.push(policyType);\n            }\n\n            policyType.name = typeName;\n            var propName = uwPropertyService.getBasePropertyName(prop.propertyName);\n            var propRegistered = policyType.properties.filter(function (prop) {\n              return prop && prop.name === propName;\n            })[0];\n\n            if (!propRegistered) {\n              policyType.properties.push({\n                name: propName\n              });\n            }\n          }\n        });\n      });\n\n      updatePropPolicyForEditing(policy, 'true', declViewModelObj);\n      declViewModelObj.editPolicyId = policySvc.register(policy);\n    }\n  };\n\n  _self.unregisterPropPolicy = function () {\n    var dataProvider = _self.getDataProvider();\n\n    if (dataProvider && dataProvider.editPolicyId) {\n      policySvc.unregister(dataProvider.editPolicyId);\n      delete dataProvider.editPolicyId;\n    }\n\n    var declViewModelObj = _self.getDeclViewModel();\n\n    if (declViewModelObj && declViewModelObj.editPolicyId) {\n      policySvc.unregister(declViewModelObj.editPolicyId);\n      delete declViewModelObj.editPolicyId;\n    }\n  };\n  /**\n   * Can we start editing?\n   *\n   * @return {Boolean} true if we can start editing\n   */\n\n\n  _self.canStartEdit = function () {\n    var canStartEdit = false;\n    var viewModelObjectList;\n\n    var declVM = _self.getDeclViewModel();\n\n    if (declVM && declVM.vmo) {\n      viewModelObjectList = [declVM.vmo];\n    } else if (_self.getDataProvider()) {\n      viewModelObjectList = _self.getLoadedViewModelObjects(true);\n    } else if (declVM && declVM.getAtomicData) {\n      if (declVM.getAtomicData() && declVM.getAtomicData().xrtVMO) {\n        viewModelObjectList = [declVM.getAtomicData().xrtVMO];\n      }\n\n      if (declVM.getAtomicData() && declVM.getAtomicData().dpRef && declVM.getAtomicData().dpRef.current) {\n        _.forEach(declVM.getAtomicData().dpRef.current.dataProviders, function (vmCollection) {\n          if (vmCollection && viewModelObjectList) {\n            viewModelObjectList = viewModelObjectList.concat(vmCollection());\n          }\n        });\n      }\n    }\n\n    if (viewModelObjectList) {\n      for (var ndx = 0, len = viewModelObjectList.length; ndx < len; ndx++) {\n        // check 'is_modifiable' flag for modelObject\n        if (isModifiable(viewModelObjectList[ndx])) {\n          canStartEdit = true;\n          break;\n        }\n      }\n    }\n\n    return canStartEdit;\n  };\n  /**\n   * Check to see if the view model object is editable\n   *\n   * @param {ViewModelObject} viewModelObject - VMO to test.\n   *\n   * @return {Boolean} true if it's editable\n   */\n\n\n  function isModifiable(viewModelObject) {\n    return viewModelObject && viewModelObject.props && //\n    viewModelObject.props.is_modifiable && //\n    viewModelObject.props.is_modifiable.dbValues && //\n    viewModelObject.props.is_modifiable.dbValue === true;\n  }\n  /**\n   * Update the policy for editing\n   *\n   * @param {Object} policy - the policy to be updated for editing\n   * @param {String} newValue - the newValue\n   * @param {Object} dataProvider - the dataProvider\n   */\n\n\n  function updatePropPolicyForEditing(policy, newValue, dataProvider) {\n    if (dataProvider && policy.types) {\n      _.forEach(policy.types, function (policyType) {\n        if (dataProvider.cols) {\n          _.forEach(dataProvider.cols, function (col) {\n            if (col && col.typeName && col.typeName === policyType.name) {\n              var modifier = locateOrCreateModifier(policyType, 'includeIsModifiable');\n              modifier.Value = newValue;\n            }\n          });\n        } else {\n          var modifier = locateOrCreateModifier(policyType, 'includeIsModifiable');\n          modifier.Value = newValue;\n        }\n      });\n    }\n  }\n  /**\n   * Locate or create the property modifier\n   *\n   * @param {Object} policyType - the policy\n   * @param {String} name - the modifier to be created or found\n   *\n   * @returns {Object} Property modifier.\n   */\n\n\n  function locateOrCreateModifier(policyType, name) {\n    var modifier = null;\n\n    if (policyType.modifiers) {\n      for (var ii = 0; ii < policyType.modifiers.length; ii++) {\n        modifier = policyType.modifiers[ii];\n\n        if (name === modifier.name) {\n          return modifier;\n        }\n      }\n    } else {\n      policyType.modifiers = [];\n    }\n\n    modifier = {\n      name: name\n    };\n    policyType.modifiers.push(modifier);\n    return modifier;\n  }\n\n  _setdataSourceService(dataSource);\n};\n\n_c = DataSourceService;\nexport let createNewDataSource = function (dataSource) {\n  return new DataSourceService(dataSource);\n};\nconst exports = {\n  createNewDataSource\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataSourceService\");","map":{"version":3,"names":["uwPropertyService","policySvc","viewModelObjectService","_","logger","DataSourceService","dataSource","_self","_dataProvider","_declViewModel","_setdataSourceService","declViewModel","dataProvider","getDataProvider","getDeclViewModel","getSourceObject","getContextVMO","baseselection","vmo","hasxrtBasedViewModel","hasxrtBasedVM","srcObj","xrtType","isEmpty","xrtData","xrtViewModel","gwtPresenters","length","getGwtHTMLPanelIds","getGwtVMs","gwtVieModel","getLoadedViewModelObjects","allowDuplicates","loadedViewModelObjects","viewModelCollection","getEditableObjects","data","objects","key","uid","push","getAtomicData","xrtVMO","dpRef","current","forEach","dataProviders","vmCollection","concat","customPanel","uniq","getAllCollectionsAndPropertyNames","collections","collection","properties","cols","col","name","collectionData","getCollectionKeys","collectionKeys","getCollectionAndPropertyNames","dataBindValue","collData","props","prop","propertyName","setSelectionEnabled","isEnabled","selectionModel","getPropertyMap","uidtoPropNameMap","loadedViewModelObjs","getVmosNotInEdit","propNames","getPropertyNames","vmObjects","customPanelUids","map","obj","parentUid","fetchPropNamesFromVMO","type","includes","checkEditableOnProperties","loadedVMObjects","setEditableStates","setAtomicData","newXrtState","updatePartialEditState","failureUids","modifiedPropsMap","getLoadedAndCachedViewModelObjects","propsToReset","viewModelProps","resetProperty","getAllEditableProperties","allEditableProperties","isEditable","getAllModifiedProperties","allModifiedProperties","isModified","getAllAutoAssignableProperties","allAutoAssignableProperties","isAutoAssignable","resetUpdates","modifiedProps","replaceValuesWithNewValues","propArr","filteredProps","filter","propObj","undefined","filteredProp","copyModelData","dbValue","newValue","valueUpdated","atomicData","update","updateObjects","viewModelPropsArray","vmProp","getAllModifiedPropertiesWithVMO","modifiedPropArray","viewModelObject","getModifiedPropertiesMap","modifiedViewModelProperties","modifiedValuesMap","modifiedProp","getVMOFromUid","createViewModelObject","vmoToPropMap","get","newVmoToPropMap","set","info","getId","targetUID","targetVMO","saveEditiableStates","modifiedPropsArr","resetEditiableStates","clearEditiableStates","registerPropPolicy","declViewModelObj","policy","isUndefined","clone","updatePropPolicyForEditing","editPolicyId","register","types","propertyPolicyRetrieved","policyType","_policy","viewModelObjs","viewModelObj","modelObj","getSourceModelObject","typeName","polType","propName","getBasePropertyName","propRegistered","unregisterPropPolicy","unregister","canStartEdit","viewModelObjectList","declVM","ndx","len","isModifiable","is_modifiable","dbValues","modifier","locateOrCreateModifier","Value","modifiers","ii","createNewDataSource","exports"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dataSourceService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service creates 'UwDataProvider' objects used for lists, grids and other collections).\n *\n * @module js/dataSourceService\n */\nimport uwPropertyService from 'js/uwPropertyService';\nimport policySvc from 'soa/kernel/propertyPolicyService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\n\nvar DataSourceService = function( dataSource ) {\n    var _self = this; // eslint-disable-line consistent-this\n\n    var _dataProvider = null;\n    var _declViewModel = null;\n\n    var _setdataSourceService = function( dataSource ) {\n        if( dataSource.declViewModel ) {\n            _declViewModel = dataSource.declViewModel;\n        } else if( dataSource.dataProvider ) {\n            _dataProvider = dataSource.dataProvider;\n        }\n    };\n\n    _self.getDataProvider = function() {\n        return _dataProvider;\n    };\n\n    _self.getDeclViewModel = function() {\n        return _declViewModel;\n    };\n\n    _self.getSourceObject = function() {\n        if( _dataProvider ) {\n            return _dataProvider;\n        }\n        return _declViewModel;\n    };\n\n    _self.getContextVMO = function() {\n        if( _declViewModel ) {\n            return _declViewModel.baseselection ? _declViewModel.baseselection : _declViewModel.vmo;\n        }\n        return null;\n    };\n\n    _self.hasxrtBasedViewModel = function() {\n        var hasxrtBasedVM = false;\n        var srcObj = _self.getSourceObject();\n        if( srcObj.xrtType === 'INFO' && !_.isEmpty( srcObj.xrtData ) &&\n            !_.isEmpty( srcObj.xrtData.xrtViewModel ) ) {\n            hasxrtBasedVM = true;\n        } else {\n            hasxrtBasedVM = srcObj.gwtPresenters && srcObj.gwtPresenters.length > 0;\n        }\n        return hasxrtBasedVM;\n    };\n\n    /**\n     * This returns all the HTML Panels ids currently present in the View.\n     *\n     * @returns {ObjectArray} - Panel IDs\n     */\n    _self.getGwtHTMLPanelIds = function() {\n        var srcObj = _self.getSourceObject();\n        if( srcObj.gwtPresenters ) {\n            return srcObj.gwtPresenters;\n        }\n        return [];\n    };\n\n    /**\n     * This returns all the HTML Panels ids currently present in the View.\n     *\n     * @returns {ObjectArray} - Panel IDs\n     */\n    _self.getGwtVMs = function() {\n        var srcObj = _self.getSourceObject();\n        if( srcObj.gwtVieModel ) {\n            return srcObj.gwtVieModel;\n        }\n        return [];\n    };\n\n    /**\n     * Get all the loaded view modle objects\n     *\n     * @return {ObjectArray} Array of loaded view model objects\n     */\n    _self.getLoadedViewModelObjects = function( allowDuplicates ) {\n        var loadedViewModelObjects = [];\n\n        if( _dataProvider && _dataProvider.viewModelCollection ) {\n            loadedViewModelObjects = _dataProvider.getEditableObjects();\n        } else if( _declViewModel ) {\n            if( _declViewModel.vmo ) {\n                if( _declViewModel.data && _declViewModel.data.objects ) {\n                    for( let key in _declViewModel.data.objects ) {\n                        if( _declViewModel.data.objects[ key ].uid === _declViewModel.vmo.uid ) {\n                            loadedViewModelObjects.push( _declViewModel.data.objects[ key ] );\n                            break;\n                        }\n                    }\n                } else {\n                    loadedViewModelObjects.push( _declViewModel.vmo );\n                }\n            } else if( _declViewModel.getAtomicData ) {\n                if( _declViewModel.getAtomicData().xrtVMO ) {\n                    loadedViewModelObjects.push( _declViewModel.getAtomicData().xrtVMO );\n                }\n\n\n                if( _declViewModel.getAtomicData().dpRef && _declViewModel.getAtomicData().dpRef.current ) {\n                    _.forEach( _declViewModel.getAtomicData().dpRef.current.dataProviders, function( vmCollection ) {\n                        if( vmCollection ) {\n                            loadedViewModelObjects = loadedViewModelObjects.concat( vmCollection() );\n                        }\n                    } );\n                }\n            }\n\n            if( _declViewModel.dataProviders ) {\n                _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                    if( dataProvider && dataProvider.viewModelCollection ) {\n                        loadedViewModelObjects = loadedViewModelObjects\n                            .concat( dataProvider.viewModelCollection.getLoadedViewModelObjects() );\n                    }\n                } );\n            }\n\n            if( _declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection ) {\n                loadedViewModelObjects = loadedViewModelObjects\n                    .concat( _declViewModel.customPanel.viewModelCollection );\n            }\n        }\n\n        // Weed out the duplicate ones\n        if( !allowDuplicates ) {\n            loadedViewModelObjects = _.uniq( loadedViewModelObjects, false, function( vmo ) {\n                return vmo.uid;\n            } );\n        }\n\n        return loadedViewModelObjects;\n    };\n\n    /**\n     * Get all the collections in the view model.\n     *\n     * @return {ObjectArray} Array of collections.\n     */\n    _self.getAllCollectionsAndPropertyNames = function() {\n        var collections = [];\n\n        if( _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                if( dataProvider && dataProvider.viewModelCollection ) {\n                    var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                    var properties = [];\n                    _.forEach( dataProvider.cols, function( col ) {\n                        properties.push( col.name );\n                    } );\n\n                    var collectionData = {\n                        collection: collection,\n                        properties: properties\n                    };\n                    collections = collections.concat( collectionData );\n                }\n            } );\n        }\n\n        if( _declViewModel && _declViewModel.vmo ) {\n            collections.push( {\n                collection: [ _declViewModel.vmo ],\n                properties: []\n            } );\n        }\n\n        return collections;\n    };\n\n    /**\n     * Get all the collection keys from the view model\n     *\n     * @returns {StringArray} - Keys.\n     */\n    _self.getCollectionKeys = function() {\n        var collectionKeys = [];\n        if( _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                collectionKeys.push( dataProvider.name );\n            } );\n        }\n        return collectionKeys;\n    };\n\n    /**\n     * Get all the collections in the view model.\n     *\n     * @param {String} dataBindValue - The data bind value.\n     *\n     * @return {ObjectArray} Array of collections.\n     */\n    _self.getCollectionAndPropertyNames = function( dataBindValue ) {\n        var collData = {};\n\n        if( _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                if( dataProvider && dataProvider.name === dataBindValue && dataProvider.viewModelCollection ) {\n                    var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                    var properties = [];\n                    _.forEach( dataProvider.cols, function( col ) {\n                        properties.push( col.name );\n                    } );\n\n                    collData.collection = collection;\n                    collData.properties = properties;\n                    return;\n                }\n            } );\n        } else if( dataBindValue === '' && _declViewModel ) {\n            var properties = [];\n            _.forEach( _declViewModel.vmo.props, function( prop ) {\n                properties.push( prop.propertyName );\n            } );\n\n            collData.properties = properties;\n            collData.collection = [ _declViewModel.vmo ];\n        }\n\n        return collData;\n    };\n\n    _self.setSelectionEnabled = function( isEnabled ) {\n        if( _dataProvider && _dataProvider.selectionModel ) {\n            _dataProvider.setSelectionEnabled( isEnabled );\n        } else if( _declViewModel && _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                if( dataProvider && dataProvider.selectionModel ) {\n                    dataProvider.setSelectionEnabled( isEnabled );\n                }\n            } );\n        }\n    };\n\n    _self.getPropertyMap = function() {\n        var uidtoPropNameMap = {};\n        var loadedViewModelObjs = viewModelObjectService.getVmosNotInEdit( _self.getLoadedViewModelObjects() );\n        if( _dataProvider && _dataProvider.viewModelCollection ) {\n            var propNames = _dataProvider.getPropertyNames();\n            _.forEach( loadedViewModelObjs, function( vmObjects ) {\n                uidtoPropNameMap[ vmObjects.uid ] = propNames;\n            } );\n        } else if( _declViewModel ) {\n            var customPanelUids = [];\n            // For custom panels, include underlying objects in uidtoPropNameMap\n            if( _declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection ) {\n                _declViewModel.customPanel.viewModelCollection.map( function( obj ) {\n                    if( obj && obj.props ) {\n                        customPanelUids.push( obj.uid );\n                        _.forEach( obj.props, function( prop ) {\n                            if( prop.parentUid !== obj.uid ) {\n                                customPanelUids.push( prop.parentUid );\n                            }\n                        } );\n                    }\n                } );\n            }\n\n            _.forEach( loadedViewModelObjs, function( vmObjects ) {\n                fetchPropNamesFromVMO( vmObjects, uidtoPropNameMap, customPanelUids );\n            } );\n        }\n\n        return uidtoPropNameMap;\n    };\n\n    /**\n     * This function generates the uid to propertyName map\n     *\n     * @param {ViewModelObject} vmo - Object to access.\n     *\n     * @param {StringToStringMap} uidtoPropNameMap - ID Map.\n     *\n     * @param {Array} customPanelUids - array of custom panel uids (also includes parentUid of\n     *   properties if they are different)\n     */\n    function fetchPropNamesFromVMO( vmo, uidtoPropNameMap, customPanelUids ) {\n        _.forEach( vmo.props, function( props ) {\n            var uid = props.parentUid ? props.parentUid : vmo.uid;\n            var propNames = uidtoPropNameMap[ uid ] ? uidtoPropNameMap[ uid ] : [];\n            if( props && props.type ) {\n                propNames.push( props.propertyName );\n            }\n            if( uid === vmo.uid || _.includes( customPanelUids, uid ) ) {\n                uidtoPropNameMap[ uid ] = propNames;\n            }\n        } );\n    }\n\n    _self.checkEditableOnProperties = function() {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            vmo.setEditableStates( true, true, true );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.updatePartialEditState = function( failureUids, modifiedPropsMap ) {\n        const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        _.forEach( loadedVMObjects, function( vmo ) {\n            if( !_.includes( failureUids, vmo.uid ) ) {\n                vmo.setEditableStates( false, true, true );\n                if( modifiedPropsMap[ vmo.uid ] ) {\n                    var propsToReset = modifiedPropsMap[ vmo.uid ].viewModelProps;\n                    _.forEach( propsToReset, function( prop ) {\n                        uwPropertyService.resetProperty( prop );\n                    } );\n                }\n            }\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.getAllEditableProperties = function() {\n        var allEditableProperties = [];\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( prop && prop.isEditable ) {\n                    allEditableProperties.push( prop );\n                }\n            } );\n        } );\n        return allEditableProperties;\n    };\n\n    _self.getAllModifiedProperties = function() {\n        const allModifiedProperties = [];\n        const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( uwPropertyService.isModified( prop ) ) {\n                    allModifiedProperties.push( prop );\n                }\n            } );\n        } );\n        return allModifiedProperties;\n    };\n\n    _self.getAllAutoAssignableProperties = function() {\n        var allAutoAssignableProperties = [];\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( prop.isAutoAssignable ) {\n                    allAutoAssignableProperties.push( prop );\n                }\n            } );\n        } );\n\n        return allAutoAssignableProperties;\n    };\n\n    _self.resetUpdates = function() {\n        var modifiedProps = _self.getAllModifiedProperties();\n        _.forEach( modifiedProps, function( prop ) {\n            uwPropertyService.resetUpdates( prop, false );\n        } );\n    };\n\n    _self.replaceValuesWithNewValues = function( propArr ) {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                let filteredProps = propArr.filter( function( propObj ) {\n                    if( propObj && propObj.propertyName === prop.propertyName ) {\n                        return propObj;\n                    }\n                    return undefined;\n                } );\n\n                filteredProps.forEach( filteredProp => {\n                    uwPropertyService.copyModelData( prop, filteredProp );\n                    prop.dbValue = filteredProp.dbValue;\n                    prop.newValue = filteredProp.newValue;\n                    // mark updated values as dirty\n                    prop.valueUpdated = true;\n                } );\n            } );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().atomicData.update( newXrtState );\n        }\n    };\n\n    _self.updateObjects = function( viewModelPropsArray ) {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                viewModelPropsArray.filter( function( vmProp ) {\n                    if( vmProp ) {\n                        vmo.props[ vmProp.propertyName ] = { ...vmProp };\n                    }\n                } );\n            } );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.getAllModifiedPropertiesWithVMO = function() {\n        var allModifiedProperties = [];\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            var modifiedPropArray = [];\n            _.forEach( vmo.props, function( prop ) {\n                if( uwPropertyService.isModified( prop ) ) {\n                    modifiedPropArray.push( prop );\n                }\n            } );\n            if( modifiedPropArray.length > 0 ) {\n                allModifiedProperties.push( {\n                    viewModelProps: modifiedPropArray,\n                    viewModelObject: vmo\n                } );\n            }\n        } );\n\n        return allModifiedProperties;\n    };\n\n    /**\n     * Returns an object of this structure: { 'uid': { 'viewModelObject': ViewModelObject, 'viewModelProps': [\n     * ViewModelProperty1, ViewModelProperty2, ... ] } }\n     *\n     * @param {ObjectArray} modifiedViewModelProperties - Array of modified View Model Properties\n     * @return {Object} Map\n     */\n    _self.getModifiedPropertiesMap = function( modifiedViewModelProperties ) {\n        const loadedViewModelObjs = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        var modifiedValuesMap = {};\n        if( modifiedViewModelProperties && modifiedViewModelProperties.length > 0 ) {\n            _.forEach( modifiedViewModelProperties, function( modifiedProp ) {\n                var parentUid = modifiedProp.parentUid;\n                if( parentUid ) {\n                    var vmo = getVMOFromUid( parentUid, loadedViewModelObjs );\n                    if( !vmo ) {\n                        vmo = viewModelObjectService.createViewModelObject( parentUid, 'EDIT' );\n                    }\n                    var vmoToPropMap = _.get( modifiedValuesMap, [ parentUid ] );\n                    if( vmoToPropMap ) {\n                        if( vmoToPropMap.viewModelProps ) {\n                            vmoToPropMap.viewModelProps.push( modifiedProp );\n                        }\n                    } else {\n                        var newVmoToPropMap = {};\n                        newVmoToPropMap.viewModelObject = vmo;\n                        newVmoToPropMap.viewModelProps = [ modifiedProp ];\n                        _.set( modifiedValuesMap, [ parentUid ], newVmoToPropMap );\n                    }\n                } else {\n                    logger.info( 'Info: no parentUid found on ViewModelProperty: ' + modifiedProp.getId() );\n                }\n            } );\n        }\n        return modifiedValuesMap;\n    };\n\n    /**\n     * @param {String} targetUID - UID\n     * @param {ViewModelObjectArray} loadedViewModelObjs - Loaded VMOs.\n     *\n     * @return {ViewModelObject} VMO Associated with given input.\n     */\n    function getVMOFromUid( targetUID, loadedViewModelObjs ) {\n        var targetVMO = null;\n        if( loadedViewModelObjs && loadedViewModelObjs.length > 0 ) {\n            _.forEach( loadedViewModelObjs, function( vmo ) {\n                var uid = vmo.uid;\n                if( uid === targetUID ) {\n                    targetVMO = vmo;\n                    return false;\n                }\n                return undefined;\n            } );\n        }\n        return targetVMO;\n    }\n\n    /**\n     * Reset all 'editable' status properties from the underlying object.\n     */\n    _self.saveEditiableStates = function() {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            vmo.setEditableStates( false, true, true );\n        } );\n\n        var modifiedPropsArr = _self.getAllModifiedProperties();\n\n        _.forEach( modifiedPropsArr, function( prop ) {\n            uwPropertyService.resetProperty( prop );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.resetEditiableStates = function() {\n        var loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        _.forEach( loadedVMObjects, function( vmo ) {\n            vmo.clearEditiableStates( true );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.registerPropPolicy = function() {\n        var dataProvider = _self.getDataProvider();\n        var declViewModelObj = _self.getDeclViewModel();\n        var policy = null;\n        if( dataProvider && !_.isUndefined( dataProvider.policy ) ) {\n            policy = _.clone( dataProvider.policy, true );\n            updatePropPolicyForEditing( policy, 'true', dataProvider );\n            dataProvider.editPolicyId = policySvc.register( policy );\n        } else if( declViewModelObj ) {\n            policy = {\n                types: []\n            };\n\n            if( !_.isUndefined( declViewModelObj.propertyPolicyRetrieved ) ) {\n                var policyType = {\n                    properties: []\n                };\n                policyType.name = declViewModelObj.vmo.type;\n                policyType.properties = _.clone( declViewModelObj.propertyPolicyRetrieved );\n                policy.types.push( policyType );\n            }\n            if( declViewModelObj._policy && declViewModelObj._policy.types ) {\n                _.forEach( declViewModelObj._policy.types, function( policyType ) {\n                    policy.types = policy.types.concat( _.clone( policyType ) );\n                } );\n            }\n\n            var viewModelObjs = _self.getLoadedViewModelObjects();\n            _.forEach( viewModelObjs, function( viewModelObj ) {\n                _.forEach( viewModelObj.props, function( prop ) {\n                    var modelObj = uwPropertyService.getSourceModelObject( prop );\n                    if( modelObj ) {\n                        var typeName = modelObj.type;\n                        var policyType = policy.types.filter( function( polType ) {\n                            if( polType && polType.name === typeName ) {\n                                return true;\n                            }\n                            return undefined;\n                        } )[ 0 ];\n\n                        if( !policyType ) {\n                            policyType = {\n                                properties: []\n                            };\n                            policy.types.push( policyType );\n                        }\n\n                        policyType.name = typeName;\n                        var propName = uwPropertyService.getBasePropertyName( prop.propertyName );\n\n                        var propRegistered = policyType.properties.filter( function( prop ) {\n                            return prop && prop.name === propName;\n                        } )[ 0 ];\n\n                        if( !propRegistered ) {\n                            policyType.properties.push( {\n                                name: propName\n                            } );\n                        }\n                    }\n                } );\n            } );\n            updatePropPolicyForEditing( policy, 'true', declViewModelObj );\n            declViewModelObj.editPolicyId = policySvc.register( policy );\n        }\n    };\n\n    _self.unregisterPropPolicy = function() {\n        var dataProvider = _self.getDataProvider();\n        if( dataProvider && dataProvider.editPolicyId ) {\n            policySvc.unregister( dataProvider.editPolicyId );\n            delete dataProvider.editPolicyId;\n        }\n\n        var declViewModelObj = _self.getDeclViewModel();\n        if( declViewModelObj && declViewModelObj.editPolicyId ) {\n            policySvc.unregister( declViewModelObj.editPolicyId );\n            delete declViewModelObj.editPolicyId;\n        }\n    };\n\n    /**\n     * Can we start editing?\n     *\n     * @return {Boolean} true if we can start editing\n     */\n    _self.canStartEdit = function() {\n        var canStartEdit = false;\n        var viewModelObjectList;\n        var declVM = _self.getDeclViewModel();\n        if( declVM && declVM.vmo ) {\n            viewModelObjectList = [ declVM.vmo ];\n        } else if( _self.getDataProvider() ) {\n            viewModelObjectList = _self.getLoadedViewModelObjects( true );\n        } else if( declVM && declVM.getAtomicData ) {\n            if( declVM.getAtomicData() && declVM.getAtomicData().xrtVMO ) {\n                viewModelObjectList = [ declVM.getAtomicData().xrtVMO ];\n            }\n\n            if( declVM.getAtomicData() && declVM.getAtomicData().dpRef && declVM.getAtomicData().dpRef.current ) {\n                _.forEach( declVM.getAtomicData().dpRef.current.dataProviders, function( vmCollection ) {\n                    if( vmCollection && viewModelObjectList ) {\n                        viewModelObjectList = viewModelObjectList.concat( vmCollection() );\n                    }\n                } );\n            }\n        }\n\n        if( viewModelObjectList ) {\n            for( var ndx = 0, len = viewModelObjectList.length; ndx < len; ndx++ ) {\n                // check 'is_modifiable' flag for modelObject\n                if( isModifiable( viewModelObjectList[ ndx ] ) ) {\n                    canStartEdit = true;\n                    break;\n                }\n            }\n        }\n        return canStartEdit;\n    };\n\n    /**\n     * Check to see if the view model object is editable\n     *\n     * @param {ViewModelObject} viewModelObject - VMO to test.\n     *\n     * @return {Boolean} true if it's editable\n     */\n    function isModifiable( viewModelObject ) {\n        return viewModelObject && viewModelObject.props && //\n            viewModelObject.props.is_modifiable && //\n            viewModelObject.props.is_modifiable.dbValues && //\n            viewModelObject.props.is_modifiable.dbValue === true;\n    }\n\n    /**\n     * Update the policy for editing\n     *\n     * @param {Object} policy - the policy to be updated for editing\n     * @param {String} newValue - the newValue\n     * @param {Object} dataProvider - the dataProvider\n     */\n    function updatePropPolicyForEditing( policy, newValue, dataProvider ) {\n        if( dataProvider && policy.types ) {\n            _.forEach( policy.types, function( policyType ) {\n                if( dataProvider.cols ) {\n                    _.forEach( dataProvider.cols, function( col ) {\n                        if( col && col.typeName && col.typeName === policyType.name ) {\n                            var modifier = locateOrCreateModifier( policyType, 'includeIsModifiable' );\n                            modifier.Value = newValue;\n                        }\n                    } );\n                } else {\n                    var modifier = locateOrCreateModifier( policyType, 'includeIsModifiable' );\n                    modifier.Value = newValue;\n                }\n            } );\n        }\n    }\n\n    /**\n     * Locate or create the property modifier\n     *\n     * @param {Object} policyType - the policy\n     * @param {String} name - the modifier to be created or found\n     *\n     * @returns {Object} Property modifier.\n     */\n    function locateOrCreateModifier( policyType, name ) {\n        var modifier = null;\n\n        if( policyType.modifiers ) {\n            for( var ii = 0; ii < policyType.modifiers.length; ii++ ) {\n                modifier = policyType.modifiers[ ii ];\n                if( name === modifier.name ) {\n                    return modifier;\n                }\n            }\n        } else {\n            policyType.modifiers = [];\n        }\n\n        modifier = {\n            name: name\n        };\n\n        policyType.modifiers.push( modifier );\n\n        return modifier;\n    }\n\n    _setdataSourceService( dataSource );\n};\n\nexport let createNewDataSource = function( dataSource ) {\n    return new DataSourceService( dataSource );\n};\n\nconst exports = {\n    createNewDataSource\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable no-await-in-loop */\n// Copyright (c) 2022 Siemens\n\n/**\n * Defines {@link NgServices.commandHighlightService} which manages highlighting commands.\n *\n * @module js/commandHighlightService\n *\n * @namespace commandHighlightService\n */\nimport configurationService from 'js/configurationService';\nimport _ from 'lodash';\nimport AwTimeoutService from 'js/awTimeoutService';\nimport wcagSvc from 'js/wcagService';\nimport htmlUtils from 'js/htmlUtils';\nlet exports;\nconst notInFooterButton = 'not(aw-footer button)';\nconst notInFooterLi = 'not(aw-footer li)';\nconst retryMaxCount = 10;\nconst idleTimeMs = 50;\n/**\n * Delay the execution for a given ms\n *\n * @function delay\n * @param {Number} ms - amount of milliseconds to wait\n * @return {Promise} promise - resolved after x amount of milliseconds\n */\n\nconst delay = function (ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n/**\n * Click a command with the given name. Differs from original step def as it will also locate the command within a\n * group if necessary.\n *\n * @function getCommandPlacements\n * @param {String} commandId - ID of the command to check for\n * @param {Object} placementInfo - Object with \"anchors\" and \"groups\" properties\n */\n\n\nexport const getCommandPlacements = async function (commandId) {\n  const commandsViewModel = await configurationService.getCfg('commandsViewModel');\n\n  const placements = _.filter(commandsViewModel.commandPlacements, placement => commandId === placement.id);\n\n  const placementInfo = placements.reduce((acc, nxt) => {\n    if (nxt.parentGroupId) {\n      acc.groups[nxt.parentGroupId] = true;\n    } else {\n      acc.anchors[nxt.uiAnchor] = true;\n    }\n\n    return acc;\n  }, {\n    anchors: {},\n    groups: {}\n  });\n  placementInfo.anchors = Object.keys(placementInfo.anchors);\n  placementInfo.groups = Object.keys(placementInfo.groups);\n  return placementInfo;\n};\n/**\n * Poll the popup until it populates with a given command ID\n *\n * @function getCommandInPopup\n * @param {String} commandId - the ID to search the page for\n * @return {Element} popupCmdElement - command element in the popup\n */\n\nexport const getCommandInPopup = async function (commandId) {\n  let retryCounter = 0;\n  let popupCmdElement;\n  let loadingElement;\n  setTimeout(function () {\n    retryCounter = retryMaxCount; // After 10 seconds just quit\n  }, 10000);\n\n  while (retryCounter < retryMaxCount) {\n    loadingElement = htmlUtils.getElementByXpath('//div[contains(@class, \\'aw-popup-command-bar\\')]//div[contains(@class,\\'aw-jswidgets-loading\\')]', document.body);\n\n    if (!loadingElement) {\n      popupCmdElement = htmlUtils.getElementByXpath(`//li[@command-id='${commandId}']`, document.body);\n\n      if (popupCmdElement) {\n        return popupCmdElement;\n      }\n\n      retryCounter++;\n    }\n\n    await delay(idleTimeMs);\n  }\n};\n/**\n * Check if the group command has a given command ID inside it\n *\n * @function checkGroupForElement\n * @param {String} commandId - the ID to search the popup for\n * @param {String} groupCommandLocation - groupCommand element to click\n * @return {Element} commandElement - the command element with ID we were looking for\n */\n\nexport const checkGroupForElement = async function (commandId, groupCommandLocation) {\n  let $timeout = AwTimeoutService.instance; // Slight delay as the overflow loading is not instant\n\n  if (groupCommandLocation) {\n    await $timeout(() => {\n      groupCommandLocation.click();\n    }, 500, false);\n    const commandElement = await exports.getCommandInPopup(commandId);\n\n    if (commandElement) {\n      return commandElement;\n    }\n  }\n};\n/**\n * Clicks an element if it exists\n *\n * @function clickElement\n * @param {String} element - the element to click\n */\n\nconst clickElement = function (element) {\n  if (element) {\n    element.click();\n  }\n};\n/**\n * Click the commandOverflow and check if the command is in the popup\n *\n * @function clickCommandOverflowAndCheckPopup\n * @param {Element} element - the aw-command element\n * @param {Element} commandOverflow - the command-overflow element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\n\n\nexport const clickCommandOverflowAndCheckPopup = async function (element, commandOverflow, commandId, checkPopupForCmd) {\n  let $timeout = AwTimeoutService.instance;\n  await $timeout(() => {\n    clickElement(commandOverflow);\n  }, 100, false);\n\n  if (checkPopupForCmd) {\n    const elementInPopup = await getCommandInPopup(commandId);\n\n    if (elementInPopup) {\n      return elementInPopup;\n    }\n  }\n};\n/**\n * Click the overflow button ie '...' or 'More' and then get the command ID element in that popup\n *\n * @function clickOverflowAndGetCommand\n * @param {Element} element - the aw-command element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\n\nexport const clickOverflowAndGetCommand = async function (element, commandId) {\n  let checkPopupForCmd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let commandOverflow;\n  let toolbar = element.closest('.aw-toolbar-layout');\n\n  if (toolbar) {\n    let childCommandBars = toolbar.querySelectorAll('.aw-command-bar');\n\n    for (const commandBar of childCommandBars) {\n      const anchor = commandBar.getAttribute('anchor');\n      commandOverflow = htmlUtils.getElementByXpath(`//div[@anchor='${anchor}']//div[contains(@class, 'aw-commands-moreButton')]//button`, document.body);\n\n      if (commandOverflow) {\n        return exports.clickCommandOverflowAndCheckPopup(element, commandOverflow, commandId, checkPopupForCmd);\n      }\n    }\n\n    if (!commandOverflow) {\n      //look in toolbar\n      commandOverflow = toolbar.querySelector('.aw-commands-moreButton button');\n\n      if (commandOverflow) {\n        return exports.clickCommandOverflowAndCheckPopup(element, commandOverflow, commandId, checkPopupForCmd);\n      }\n    }\n  }\n\n  let commandBar = element.closest('.aw-command-bar');\n\n  if (commandBar) {\n    const anchor = commandBar.getAttribute('anchor');\n    commandOverflow = htmlUtils.getElementByXpath(`//div[@anchor='${anchor}']//div[contains(@class, 'aw-command-overflowIcon')]//button`, document.body);\n    return exports.clickCommandOverflowAndCheckPopup(element, commandOverflow, commandId, checkPopupForCmd);\n  }\n};\n/**\n * Get the correct HTML element for a given command ID\n *\n * @function getCommandElement\n * @param {String} commandId - the ID to search the page for\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} element - the command element\n */\n\nexport const getCommandElement = async function (commandId, xPath, grpCmdAnchor) {\n  let element = htmlUtils.getElementByXpath(xPath, document.body);\n\n  if (element) {\n    const tabIndex = element.getAttribute('tabindex');\n\n    if (tabIndex && parseInt(tabIndex) < 0) {\n      //overflow\n      return await exports.clickOverflowAndGetCommand(element, commandId);\n    }\n\n    return element;\n  }\n\n  const commandPlacements = await exports.getCommandPlacements(commandId);\n\n  for (const groupId of commandPlacements.groups) {\n    let groupCommandLocation = htmlUtils.getElementByXpath(`//div[@anchor='${grpCmdAnchor}']//button[@command-id='${groupId}']`, document.body);\n\n    if (groupCommandLocation) {\n      const tabIndex = groupCommandLocation.getAttribute('tabindex');\n\n      if (tabIndex && parseInt(tabIndex) < 0) {\n        // overflow\n        let groupCommandElement = await exports.clickOverflowAndGetCommand(groupCommandLocation, groupId);\n        let commandElement = await exports.checkGroupForElement(commandId, groupCommandElement);\n\n        if (commandElement) {\n          return commandElement;\n        }\n      }\n\n      let commandElement = await exports.checkGroupForElement(commandId, groupCommandLocation);\n\n      if (commandElement) {\n        return commandElement;\n      }\n    }\n  }\n};\n/**\n * Highlight a given command ID in the LHN/PWA/Right wall\n *\n * @function highlightCommand\n * @param {String} commandId - command ID to highlight\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} commandElement - the command element with ID we were looking for\n */\n\nexport const highlightCommand = async function (commandId, xPath, grpCmdAnchor) {\n  let commandElement = await exports.getCommandElement(commandId, xPath, grpCmdAnchor);\n\n  if (commandElement) {\n    wcagSvc.afxFocusElement(commandElement);\n  }\n\n  return commandElement;\n};\n/**\n * Click on a given command ID\n *\n * @function clickOnCommand\n * @param {String} commandId - command ID to click on\n * @param {String} xPath - xPath of the command in the DOM\n * @return {Element} commandElement - the command element with ID we were looking for\n */\n\nexport const clickOnCommand = async function (commandId, xPath) {\n  let commandElement = await exports.getCommandElement(commandId, xPath);\n\n  if (commandElement) {\n    commandElement.click();\n  }\n};\nexports = {\n  getCommandPlacements,\n  getCommandInPopup,\n  checkGroupForElement,\n  clickCommandOverflowAndCheckPopup,\n  clickOverflowAndGetCommand,\n  getCommandElement,\n  highlightCommand,\n  clickOnCommand\n};\nexport default exports;","map":{"version":3,"names":["configurationService","_","AwTimeoutService","wcagSvc","htmlUtils","exports","notInFooterButton","notInFooterLi","retryMaxCount","idleTimeMs","delay","ms","Promise","resolve","setTimeout","getCommandPlacements","commandId","commandsViewModel","getCfg","placements","filter","commandPlacements","placement","id","placementInfo","reduce","acc","nxt","parentGroupId","groups","anchors","uiAnchor","Object","keys","getCommandInPopup","retryCounter","popupCmdElement","loadingElement","getElementByXpath","document","body","checkGroupForElement","groupCommandLocation","$timeout","instance","click","commandElement","clickElement","element","clickCommandOverflowAndCheckPopup","commandOverflow","checkPopupForCmd","elementInPopup","clickOverflowAndGetCommand","toolbar","closest","childCommandBars","querySelectorAll","commandBar","anchor","getAttribute","querySelector","getCommandElement","xPath","grpCmdAnchor","tabIndex","parseInt","groupId","groupCommandElement","highlightCommand","afxFocusElement","clickOnCommand"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/commandHighlightService.js"],"sourcesContent":["/* eslint-disable no-await-in-loop */\n// Copyright (c) 2022 Siemens\n\n/**\n * Defines {@link NgServices.commandHighlightService} which manages highlighting commands.\n *\n * @module js/commandHighlightService\n *\n * @namespace commandHighlightService\n */\nimport configurationService from 'js/configurationService';\nimport _ from 'lodash';\nimport AwTimeoutService from 'js/awTimeoutService';\nimport wcagSvc from 'js/wcagService';\nimport htmlUtils from 'js/htmlUtils';\n\nlet exports;\n\nconst notInFooterButton = 'not(aw-footer button)';\n\nconst notInFooterLi = 'not(aw-footer li)';\n\nconst retryMaxCount = 10;\n\nconst idleTimeMs = 50;\n\n/**\n * Delay the execution for a given ms\n *\n * @function delay\n * @param {Number} ms - amount of milliseconds to wait\n * @return {Promise} promise - resolved after x amount of milliseconds\n */\nconst delay = function( ms ) {\n    return new Promise( resolve => setTimeout( resolve, ms ) );\n};\n\n/**\n * Click a command with the given name. Differs from original step def as it will also locate the command within a\n * group if necessary.\n *\n * @function getCommandPlacements\n * @param {String} commandId - ID of the command to check for\n * @param {Object} placementInfo - Object with \"anchors\" and \"groups\" properties\n */\nexport const getCommandPlacements = async function( commandId ) {\n    const commandsViewModel = await configurationService.getCfg( 'commandsViewModel' );\n\n    const placements = _.filter( commandsViewModel.commandPlacements, placement => commandId === placement.id );\n\n    const placementInfo = placements.reduce( ( acc, nxt ) => {\n        if( nxt.parentGroupId ) {\n            acc.groups[ nxt.parentGroupId ] = true;\n        } else {\n            acc.anchors[ nxt.uiAnchor ] = true;\n        }\n        return acc;\n    }, {\n        anchors: {},\n        groups: {}\n    } );\n\n    placementInfo.anchors = Object.keys( placementInfo.anchors );\n    placementInfo.groups = Object.keys( placementInfo.groups );\n    return placementInfo;\n};\n\n/**\n * Poll the popup until it populates with a given command ID\n *\n * @function getCommandInPopup\n * @param {String} commandId - the ID to search the page for\n * @return {Element} popupCmdElement - command element in the popup\n */\nexport const getCommandInPopup = async function( commandId ) {\n    let retryCounter = 0;\n    let popupCmdElement;\n    let loadingElement;\n\n    setTimeout( function() {\n        retryCounter = retryMaxCount; // After 10 seconds just quit\n    }, 10000 );\n\n    while( retryCounter < retryMaxCount ) {\n        loadingElement = htmlUtils.getElementByXpath( '//div[contains(@class, \\'aw-popup-command-bar\\')]//div[contains(@class,\\'aw-jswidgets-loading\\')]', document.body );\n        if( !loadingElement ) {\n            popupCmdElement = htmlUtils.getElementByXpath( `//li[@command-id='${commandId}']`, document.body );\n            if( popupCmdElement ) {\n                return popupCmdElement;\n            }\n            retryCounter++;\n        }\n        await delay( idleTimeMs );\n    }\n};\n\n/**\n * Check if the group command has a given command ID inside it\n *\n * @function checkGroupForElement\n * @param {String} commandId - the ID to search the popup for\n * @param {String} groupCommandLocation - groupCommand element to click\n * @return {Element} commandElement - the command element with ID we were looking for\n */\nexport const checkGroupForElement = async function( commandId, groupCommandLocation ) {\n    let $timeout = AwTimeoutService.instance;\n    // Slight delay as the overflow loading is not instant\n    if( groupCommandLocation ) {\n        await $timeout( () => {\n            groupCommandLocation.click();\n        }, 500, false );\n\n        const commandElement = await exports.getCommandInPopup( commandId );\n\n        if( commandElement ) {\n            return commandElement;\n        }\n    }\n};\n\n/**\n * Clicks an element if it exists\n *\n * @function clickElement\n * @param {String} element - the element to click\n */\nconst clickElement = function( element ) {\n    if( element ) {\n        element.click();\n    }\n};\n\n/**\n * Click the commandOverflow and check if the command is in the popup\n *\n * @function clickCommandOverflowAndCheckPopup\n * @param {Element} element - the aw-command element\n * @param {Element} commandOverflow - the command-overflow element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\nexport const clickCommandOverflowAndCheckPopup = async function( element, commandOverflow, commandId, checkPopupForCmd ) {\n    let $timeout = AwTimeoutService.instance;\n    await $timeout( () => {\n        clickElement( commandOverflow );\n    }, 100, false );\n    if( checkPopupForCmd ) {\n        const elementInPopup = await getCommandInPopup( commandId );\n        if( elementInPopup ) {\n            return elementInPopup;\n        }\n    }\n};\n\n/**\n * Click the overflow button ie '...' or 'More' and then get the command ID element in that popup\n *\n * @function clickOverflowAndGetCommand\n * @param {Element} element - the aw-command element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\nexport const clickOverflowAndGetCommand = async function( element, commandId, checkPopupForCmd = true ) {\n    let commandOverflow;\n    let toolbar = element.closest( '.aw-toolbar-layout' );\n    if( toolbar ) {\n        let childCommandBars = toolbar.querySelectorAll( '.aw-command-bar' );\n        for( const commandBar of childCommandBars ) {\n            const anchor = commandBar.getAttribute( 'anchor' );\n            commandOverflow = htmlUtils.getElementByXpath( `//div[@anchor='${anchor}']//div[contains(@class, 'aw-commands-moreButton')]//button`, document.body );\n            if( commandOverflow ) {\n                return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );\n            }\n        }\n        if( !commandOverflow ) {\n            //look in toolbar\n            commandOverflow = toolbar.querySelector( '.aw-commands-moreButton button' );\n            if( commandOverflow ) {\n                return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );\n            }\n        }\n    }\n    let commandBar = element.closest( '.aw-command-bar' );\n    if( commandBar ) {\n        const anchor = commandBar.getAttribute( 'anchor' );\n        commandOverflow = htmlUtils.getElementByXpath( `//div[@anchor='${anchor}']//div[contains(@class, 'aw-command-overflowIcon')]//button`, document.body );\n        return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );\n    }\n};\n\n/**\n * Get the correct HTML element for a given command ID\n *\n * @function getCommandElement\n * @param {String} commandId - the ID to search the page for\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} element - the command element\n */\nexport const getCommandElement = async function( commandId, xPath, grpCmdAnchor ) {\n    let element = htmlUtils.getElementByXpath( xPath, document.body );\n\n    if( element ) {\n        const tabIndex = element.getAttribute( 'tabindex' );\n        if( tabIndex && parseInt( tabIndex ) < 0 ) {\n            //overflow\n            return await exports.clickOverflowAndGetCommand( element, commandId );\n        }\n        return element;\n    }\n    const commandPlacements = await exports.getCommandPlacements( commandId );\n\n    for( const groupId of commandPlacements.groups ) {\n        let groupCommandLocation = htmlUtils.getElementByXpath( `//div[@anchor='${grpCmdAnchor}']//button[@command-id='${groupId}']`, document.body );\n        if( groupCommandLocation ) {\n            const tabIndex = groupCommandLocation.getAttribute( 'tabindex' );\n            if( tabIndex && parseInt( tabIndex ) < 0 ) {\n                // overflow\n                let groupCommandElement = await exports.clickOverflowAndGetCommand( groupCommandLocation, groupId );\n                let commandElement = await exports.checkGroupForElement( commandId, groupCommandElement );\n                if( commandElement ) {\n                    return commandElement;\n                }\n            }\n            let commandElement = await exports.checkGroupForElement( commandId, groupCommandLocation );\n            if( commandElement ) {\n                return commandElement;\n            }\n        }\n    }\n};\n\n/**\n * Highlight a given command ID in the LHN/PWA/Right wall\n *\n * @function highlightCommand\n * @param {String} commandId - command ID to highlight\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} commandElement - the command element with ID we were looking for\n */\nexport const highlightCommand = async function( commandId, xPath, grpCmdAnchor ) {\n    let commandElement = await exports.getCommandElement( commandId, xPath, grpCmdAnchor );\n    if( commandElement ) {\n        wcagSvc.afxFocusElement( commandElement );\n    }\n    return commandElement;\n};\n\n/**\n * Click on a given command ID\n *\n * @function clickOnCommand\n * @param {String} commandId - command ID to click on\n * @param {String} xPath - xPath of the command in the DOM\n * @return {Element} commandElement - the command element with ID we were looking for\n */\nexport const clickOnCommand = async function( commandId, xPath ) {\n    let commandElement = await exports.getCommandElement( commandId, xPath );\n    if( commandElement ) {\n        commandElement.click();\n    }\n};\n\nexports = {\n    getCommandPlacements,\n    getCommandInPopup,\n    checkGroupForElement,\n    clickCommandOverflowAndCheckPopup,\n    clickOverflowAndGetCommand,\n    getCommandElement,\n    highlightCommand,\n    clickOnCommand\n};\n\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
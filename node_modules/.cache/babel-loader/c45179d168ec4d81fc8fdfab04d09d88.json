{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-disable new-cap */\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/Apollo-Analytics|Apollo-Analytics}\n *\n * @module js/analyticsService\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport moduleLoader from 'js/moduleLoader';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type { {Array.<string>}}\n * @private\n */\n\nvar exports = {};\n\nvar _$q = AwPromiseService.instance.defer();\n\nvar _delegateService;\n\nvar _delegatePredictiveService;\n\nvar eventsToInclude = [];\n/**\n * This API populates the eventsToInclude array based on the passed analytics config.\n * @param {JSON} analyticsJson - The Analytics JSON configuration.\n * @ignore\n */\n\nfunction _populateEventsToPublish(analyticsJson) {\n  if (analyticsJson && analyticsJson.events) {\n    let analyticsEvents = analyticsJson.events;\n\n    if (analyticsEvents.include && analyticsEvents.include.length) {\n      _.forEach(analyticsEvents.include, function (toInclude) {\n        eventsToInclude.push(toInclude.toLowerCase());\n      });\n    }\n  }\n}\n/**\n * This API returns true if publishAll events is enabled.\n * @returns {Boolean} true if publishAll is enabled, false otherwise.\n * @ignore\n */\n\n\nfunction _isPublishAllEnabled() {\n  return eventsToInclude.length === 0;\n}\n/**\n * This API checks if the passed eventType should be published or not.\n * @param {String} eventType - The analytics event type to check.\n * @returns {Boolean} true if event needs to be published, false otherwise.\n * @ignore\n */\n\n\nfunction _shouldPublishEvent(eventType) {\n  if (_isPublishAllEnabled() || eventType === undefined) {\n    return true;\n  }\n\n  if (eventsToInclude.length && eventsToInclude.includes(eventType.toLowerCase())) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * responsible for choosing the appropriate analyticsService logic to be used. resolve the promise with the\n * appropriate analyticsService.\n *\n * @return {Promise} returns a promise to be resolved once the correct analyticsService is chosen.\n */\n\n\nfunction _pickAnalyticsService() {\n  if (_delegateService) {\n    // if an analyticsService is already set, just use it.\n    return _$q.resolve(_delegateService);\n  }\n\n  var solution = cfgSvc.getCfgCached('solutionDef');\n\n  if (!solution) {\n    return new Promise(function (resolve, reject) {\n      _.defer(function () {\n        _pickAnalyticsService().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  var name = solution.analytics;\n\n  if (name) {\n    var deferred = AwPromiseService.instance.defer();\n    cfgSvc.getCfg('analytics').then(analyticsProviders => {\n      moduleLoader.loadDependentModule(analyticsProviders[name].dep).then(function (depModuleObj) {\n        if (!depModuleObj) {\n          logger.error('Could not load the analytics module ' + depModuleObj);\n        }\n\n        _populateEventsToPublish(analyticsProviders[name]);\n\n        _delegateService = depModuleObj;\n        deferred.resolve(_delegateService);\n      });\n    });\n    return deferred.promise;\n  }\n\n  return _$q.reject();\n}\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\n\n\nexport let authenticationSuccessful = function () {\n  if (_delegateService) {\n    _delegateService.authenticationSuccessful();\n  } else {\n    _pickAnalyticsService().then(function (_delegateService) {\n      _delegateService.authenticationSuccessful();\n    });\n  }\n};\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable.\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n * @return {Promise} promise\n */\n\nexport let setPreInitData = function (preInitData) {\n  // Vendor ID is used to hash the user ID, so if we don't have the vendor ID we shouldnt be sending the user ID.\n  if (!preInitData.vendor_id) {\n    preInitData.user_id = '';\n  }\n\n  if (_delegateService) {\n    return _$q.resolve(_delegateService.setPreInitData(preInitData));\n  }\n\n  return _pickAnalyticsService().then(function (_delegateService) {\n    _delegateService.setPreInitData(preInitData);\n  });\n};\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\n\nexport let enable = function (useInternalServer, repo) {\n  if (_delegateService) {\n    return _delegateService.enable(useInternalServer, repo).then(function () {\n      exports.logPageViewEvent();\n    });\n  }\n\n  return _pickAnalyticsService().then(function (_delegateService) {\n    return _delegateService.enable(useInternalServer, repo).then(function () {\n      exports.logPageViewEvent();\n    });\n  });\n};\n/**\n * responsible for choosing the appropriate prediction utils logic to be used, resolves the promise with the\n * appropriate PredictionUtils.\n *\n * @return {Promise} returns a promise to be resolved once the correct PredictionUtils is chosen.\n */\n\nexport let pickPredictionService = function () {\n  if (_delegatePredictiveService) {\n    // if an analyticsService is already set, just use it.\n    return _$q.resolve(_delegatePredictiveService);\n  }\n\n  var deferred = AwPromiseService.instance.defer();\n  cfgSvc.getCfg('predictiveui').then(predictiveUiProviders => {\n    if (predictiveUiProviders && predictiveUiProviders.predictiveUtils) {\n      moduleLoader.loadDependentModule(predictiveUiProviders.predictiveUtils.dep).then(function (depModuleObj) {\n        if (depModuleObj) {\n          _delegatePredictiveService = depModuleObj;\n          deferred.resolve(_delegatePredictiveService);\n        } else {\n          deferred.resolve();\n        }\n      });\n    } else {\n      deferred.resolve();\n    }\n  });\n  return deferred.promise;\n};\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logCommands = function (data) {\n  if (_delegateService) {\n    var analyticsType = data && data.sanAnalyticsType;\n\n    if (_shouldPublishEvent(analyticsType)) {\n      _delegateService.logCommands(data);\n    }\n  }\n}; // Log Predictive Commands\n\nexport let logPredictionData = function (data) {\n  if (_delegatePredictiveService) {\n    _delegatePredictiveService.assignEventlistener(data);\n  } else {\n    pickPredictionService().then(function (_delegatePredictiveService) {\n      if (_delegatePredictiveService) {\n        _delegatePredictiveService.assignEventlistener(data);\n      }\n    });\n  }\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\n\nexport let logAnalyticsEvent = function (name, property) {\n  if (_delegateService) {\n    var analyticsType = property && property.sanAnalyticsType;\n\n    if (_shouldPublishEvent(analyticsType)) {\n      _delegateService.logEvent(name, property);\n    }\n  }\n};\n/**\n * This method should be used to log Page Load data.\n * @param {Object} data The data to be Logged\n */\n\nexport let logPageViewEvent = function (data) {\n  if (_delegateService) {\n    if (_shouldPublishEvent('Page Views')) {\n      _delegateService.logPageViewEvent(data);\n    }\n  }\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logEvent = function (name, property) {\n  if (_delegateService) {\n    _delegateService.logEvent(name, property);\n  }\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\n\nexport let logProductInfo = function (name, property) {\n  if (_delegateService) {\n    _delegateService.logProductInfo(name, property);\n  }\n};\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\n\nexport let disable = function (useInternalServer, encVendId, repo) {\n  if (_delegateService) {\n    _delegateService.disable(useInternalServer, encVendId, repo);\n  }\n};\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\n\nexport let publishableValue = function (artifactName, artifactType) {\n  if (_delegateService) {\n    return _delegateService.publishableValue(artifactName, artifactType);\n  }\n\n  return undefined;\n};\nexports = {\n  authenticationSuccessful,\n  setPreInitData,\n  enable,\n  pickPredictionService,\n  logCommands,\n  logPredictionData,\n  logAnalyticsEvent,\n  logPageViewEvent,\n  logEvent,\n  logProductInfo,\n  disable,\n  publishableValue\n};\nexport default exports;","map":{"version":3,"names":["_","logger","moduleLoader","cfgSvc","AwPromiseService","exports","_$q","instance","defer","_delegateService","_delegatePredictiveService","eventsToInclude","_populateEventsToPublish","analyticsJson","events","analyticsEvents","include","length","forEach","toInclude","push","toLowerCase","_isPublishAllEnabled","_shouldPublishEvent","eventType","undefined","includes","_pickAnalyticsService","resolve","solution","getCfgCached","Promise","reject","then","catch","name","analytics","deferred","getCfg","analyticsProviders","loadDependentModule","dep","depModuleObj","error","promise","authenticationSuccessful","setPreInitData","preInitData","vendor_id","user_id","enable","useInternalServer","repo","logPageViewEvent","pickPredictionService","predictiveUiProviders","predictiveUtils","logCommands","data","analyticsType","sanAnalyticsType","logPredictionData","assignEventlistener","logAnalyticsEvent","property","logEvent","logProductInfo","disable","encVendId","publishableValue","artifactName","artifactType"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/analyticsService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/* eslint-disable new-cap */\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/Apollo-Analytics|Apollo-Analytics}\n *\n * @module js/analyticsService\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport moduleLoader from 'js/moduleLoader';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type { {Array.<string>}}\n * @private\n */\nvar exports = {};\nvar _$q = AwPromiseService.instance.defer();\n\nvar _delegateService;\nvar _delegatePredictiveService;\n\nvar eventsToInclude = [];\n\n/**\n * This API populates the eventsToInclude array based on the passed analytics config.\n * @param {JSON} analyticsJson - The Analytics JSON configuration.\n * @ignore\n */\nfunction _populateEventsToPublish( analyticsJson ) {\n    if( analyticsJson && analyticsJson.events ) {\n        let analyticsEvents = analyticsJson.events;\n        if( analyticsEvents.include && analyticsEvents.include.length ) {\n            _.forEach( analyticsEvents.include, function( toInclude ) {\n                eventsToInclude.push( toInclude.toLowerCase() );\n            } );\n        }\n    }\n}\n\n/**\n * This API returns true if publishAll events is enabled.\n * @returns {Boolean} true if publishAll is enabled, false otherwise.\n * @ignore\n */\nfunction _isPublishAllEnabled() {\n    return eventsToInclude.length === 0;\n}\n\n/**\n * This API checks if the passed eventType should be published or not.\n * @param {String} eventType - The analytics event type to check.\n * @returns {Boolean} true if event needs to be published, false otherwise.\n * @ignore\n */\nfunction _shouldPublishEvent( eventType ) {\n    if( _isPublishAllEnabled() || eventType === undefined ) {\n        return true;\n    }\n    if( eventsToInclude.length && eventsToInclude.includes( eventType.toLowerCase() ) ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * responsible for choosing the appropriate analyticsService logic to be used. resolve the promise with the\n * appropriate analyticsService.\n *\n * @return {Promise} returns a promise to be resolved once the correct analyticsService is chosen.\n */\nfunction _pickAnalyticsService() {\n    if( _delegateService ) {\n        // if an analyticsService is already set, just use it.\n        return _$q.resolve( _delegateService );\n    }\n    var solution = cfgSvc.getCfgCached( 'solutionDef' );\n    if( !solution ) {\n        return new Promise( function( resolve, reject ) {\n            _.defer( function() {\n                _pickAnalyticsService().then( resolve ).catch( reject );\n            } );\n        } );\n    }\n    var name = solution.analytics;\n    if( name ) {\n        var deferred = AwPromiseService.instance.defer();\n        cfgSvc.getCfg( 'analytics' ).then( ( analyticsProviders ) => {\n            moduleLoader.loadDependentModule( analyticsProviders[ name ].dep ).then( function( depModuleObj ) {\n                if( !depModuleObj ) {\n                    logger.error( 'Could not load the analytics module ' + depModuleObj );\n                }\n                _populateEventsToPublish( analyticsProviders[ name ] );\n                _delegateService = depModuleObj;\n                deferred.resolve( _delegateService );\n            } );\n        } );\n\n        return deferred.promise;\n    }\n    return _$q.reject();\n}\n\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\nexport let authenticationSuccessful = function() {\n    if( _delegateService ) {\n        _delegateService.authenticationSuccessful();\n    } else {\n        _pickAnalyticsService().then( function( _delegateService ) {\n            _delegateService.authenticationSuccessful();\n        } );\n    }\n};\n\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable.\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n * @return {Promise} promise\n */\nexport let setPreInitData = function( preInitData ) {\n    // Vendor ID is used to hash the user ID, so if we don't have the vendor ID we shouldnt be sending the user ID.\n    if( !preInitData.vendor_id ) {\n        preInitData.user_id = '';\n    }\n    if( _delegateService ) {\n        return _$q.resolve( _delegateService.setPreInitData( preInitData ) );\n    }\n    return _pickAnalyticsService().then( function( _delegateService ) {\n        _delegateService.setPreInitData( preInitData );\n    } );\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\nexport let enable = function( useInternalServer, repo ) {\n    if( _delegateService ) {\n        return _delegateService.enable( useInternalServer, repo ).then( function() {\n            exports.logPageViewEvent();\n        } );\n    }\n    return _pickAnalyticsService().then( function( _delegateService ) {\n        return _delegateService.enable( useInternalServer, repo ).then( function() {\n            exports.logPageViewEvent();\n        } );\n    } );\n};\n\n/**\n * responsible for choosing the appropriate prediction utils logic to be used, resolves the promise with the\n * appropriate PredictionUtils.\n *\n * @return {Promise} returns a promise to be resolved once the correct PredictionUtils is chosen.\n */\nexport let pickPredictionService = function() {\n    if( _delegatePredictiveService ) {\n        // if an analyticsService is already set, just use it.\n        return _$q.resolve( _delegatePredictiveService );\n    }\n    var deferred = AwPromiseService.instance.defer();\n    cfgSvc.getCfg( 'predictiveui' ).then( ( predictiveUiProviders ) => {\n        if( predictiveUiProviders && predictiveUiProviders.predictiveUtils ) {\n            moduleLoader.loadDependentModule( predictiveUiProviders.predictiveUtils.dep ).then( function( depModuleObj ) {\n                if( depModuleObj ) {\n                    _delegatePredictiveService = depModuleObj;\n                    deferred.resolve( _delegatePredictiveService );\n                } else {\n                    deferred.resolve();\n                }\n            } );\n        } else {\n            deferred.resolve();\n        }\n    } );\n\n    return deferred.promise;\n};\n\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logCommands = function( data ) {\n    if( _delegateService ) {\n        var analyticsType = data && data.sanAnalyticsType;\n        if( _shouldPublishEvent( analyticsType ) ) {\n            _delegateService.logCommands( data );\n        }\n    }\n};\n// Log Predictive Commands\nexport let logPredictionData = function( data ) {\n    if( _delegatePredictiveService ) {\n        _delegatePredictiveService.assignEventlistener( data );\n    } else {\n        pickPredictionService().then( function( _delegatePredictiveService ) {\n            if( _delegatePredictiveService ) {\n                _delegatePredictiveService.assignEventlistener( data );\n            }\n        } );\n    }\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\nexport let logAnalyticsEvent = function( name, property ) {\n    if( _delegateService ) {\n        var analyticsType = property && property.sanAnalyticsType;\n        if( _shouldPublishEvent( analyticsType ) ) {\n            _delegateService.logEvent( name, property );\n        }\n    }\n};\n\n/**\n * This method should be used to log Page Load data.\n * @param {Object} data The data to be Logged\n */\nexport let logPageViewEvent = function( data ) {\n    if( _delegateService ) {\n        if( _shouldPublishEvent( 'Page Views' ) ) {\n            _delegateService.logPageViewEvent( data );\n        }\n    }\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logEvent = function( name, property ) {\n    if( _delegateService ) {\n        _delegateService.logEvent( name, property );\n    }\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\nexport let logProductInfo = function( name, property ) {\n    if( _delegateService ) {\n        _delegateService.logProductInfo( name, property );\n    }\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\nexport let disable = function( useInternalServer, encVendId, repo  ) {\n    if( _delegateService ) {\n        _delegateService.disable( useInternalServer, encVendId, repo );\n    }\n};\n\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\nexport let publishableValue = function( artifactName, artifactType ) {\n    if( _delegateService ) {\n        return _delegateService.publishableValue( artifactName, artifactType );\n    }\n    return undefined;\n};\n\nexports = {\n    authenticationSuccessful,\n    setPreInitData,\n    enable,\n    pickPredictionService,\n    logCommands,\n    logPredictionData,\n    logAnalyticsEvent,\n    logPageViewEvent,\n    logEvent,\n    logProductInfo,\n    disable,\n    publishableValue\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
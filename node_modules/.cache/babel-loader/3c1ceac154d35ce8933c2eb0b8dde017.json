{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-disable no-console */ /**\n * This service is used to announce various level logging events to the console.\n * <p>\n * Expected URL patterns:<br>\n * (1) http://localhost:3000?logLevel=ERROR<br>\n * (2) http://localhost:3000?logLevel=ERROR&locale=fr<br>\n * (3) http://localhost:8080/?logLevel=ERROR#/Declarative%20Building%20Blocks/Elements/aw-autofocus\n *\n * APIs :\n * (1) isDebugEnabled(): Checks whether this Logger is enabled for the DEBUG Level. Returns: true if debug output is enabled.\n * (2) isErrorEnabled(): Checks whether this Logger is enabled for the ERROR Level. Returns: true if error output is enabled.\n * (3) isInfoEnabled(): Checks whether this Logger is enabled for the INFO Level. Returns: true if info output is enabled.\n * (4) isTraceEnabled(): Checks whether this Logger is enabled for the TRACE Level. Returns: true if trace output is enabled.\n * (5) isWarnEnabled(): Checks whether this Logger is enabled for the WARN Level. Returns: true if warning output is enabled.\n * (6) debug(): Displays a message in the console. You pass one or more objects to this method, each of which are evaluated and concatenated into a space-delimited string.\n * The first parameter you pass may contain format specifiers, a string token composed of the percent sign (%) followed by a letter that indicates the formatting to be applied.\n * (7) info(): Identical to debug()\n * (8) error(): Similar to info() but also includes a stack trace from where the method was called.\n * (9) warn(): This API is like info() but also displays a yellow warning icon along with the logged message.\n * (10) trace(): Prints a stack trace from the point where the method was called, including links to the specific lines in the JavaScript source.\n *\n * @module js/logger\n * @publishedApolloService\n */import browserUtils from'js/browserUtils';var exports={};/** Log correlation ID. */var _logCorrelationID='';/** How many times the log correlation id has been updated */var _logCorrelationIDUpdates=0;/** Random base for log correlation id to help prevent collisions */var _logCorrelationBase=Math.random().toString(36).substring(2);/** Event Bus */var _eventBus;/** Logger output level. */var _level;switch(browserUtils.getUrlAttributes().logLevel){case'OFF':_level=0;break;case'ERROR':case'SEVERE':_level=1;break;case'WARN':case'WARNING':_level=2;break;case'INFO':case'CONFIG':_level=3;break;case'DEBUG':case'FINE':_level=4;break;case'TRACE':case'FINER':case'FINEST':_level=5;break;case'ALL':_level=6;break;default:_level=3;break;}/**\n * Support Node.js usage of this service. window isn't defined & it's missing console.debug & console.warn.\n */if(!console.error){console.error=console.log;}if(!console.warn){console.warn=console.log;}if(!console.info){console.info=console.log;}if(!console.debug){console.debug=console.log;}if(!console.trace){console.trace=console.log;}/**\n * @param {String} levelIn - log level\n * @param {output} output string\n */var postLog=function(levelIn,output){if(_eventBus&&_eventBus.publish){_eventBus.publish('log',{level:levelIn,output:output});}};/**\n * @return {String} log correlation ID\n */export let getCorrelationID=function(){return _logCorrelationID+':'+_logCorrelationBase+'.'+Date.now();};/**\n * @return {String} log correlation ID\n */function getCorrelationIDPrefix(){return _logCorrelationID?_logCorrelationID+'\\n':'';}/**\n * @param {String} prefix log correlation ID prefix\n */export let updateCorrelationID=function(prefix){if(prefix){_logCorrelationIDUpdates++;_logCorrelationID=prefix+'/'+_logCorrelationIDUpdates;if(exports.isTraceEnabled()){exports.trace('CorrelationID changed: '+_logCorrelationID);}}else{_logCorrelationID=Date.now().toString();}};/**\n * Checks whether this Logger is enabled for the ERROR Level.\n *\n * @returns {boolean} true if error output is enabled.\n */export let isErrorEnabled=function(){return _level>=1;};/**\n * Checks whether this Logger is enabled for the WARN Level.\n *\n * @returns {boolean} true if warning output is enabled.\n */export let isWarnEnabled=function(){return _level>=2;};/**\n * Checks whether this Logger is enabled for the INFO Level.\n *\n * @returns {boolean} true if info output is enabled.\n */export let isInfoEnabled=function(){return _level>=3;};/**\n * Checks whether this Logger is enabled for the DEBUG Level.\n *\n * @returns {boolean} true if debug output is enabled.\n */export let isDebugEnabled=function(){return _level>=4;};/**\n * Checks whether this Logger is enabled for the TRACE Level.\n *\n * @returns {boolean} true if trace output is enabled.\n */export let isTraceEnabled=function(){return _level>=5;};/**\n * Handle argument processing to support IE short coming.\n *\n * @return {Array} arguments to console function\n */function handleArg(){var args=[getCorrelationIDPrefix()];for(var ii=0;ii<arguments.length;ii++){args.push(arguments[ii]);}return args;}/**\n * Similar to info() but also includes a stack trace from where the method was called.\n */export let error=function(){if(exports.isErrorEnabled()){console.error.apply(console,handleArg.apply(this,arguments));postLog('SEVERE',Array.prototype.join.call(arguments,' '));}};/**\n * This method is like info() but also displays a yellow warning icon along with the logged message.\n */export let warn=function(){if(exports.isWarnEnabled()){console.warn.apply(console,handleArg.apply(this,arguments));postLog('WARNING',Array.prototype.join.call(arguments,' '));}};/**\n * This method is identical to debug() except for log level = 'CONFIG'.\n */export let info=function(){if(exports.isInfoEnabled()){console.info.apply(console,handleArg.apply(this,arguments));postLog('CONFIG',Array.prototype.join.call(arguments,' '));}};export let success=info;/**\n * Displays a message in the console. You pass one or more objects to this method, each of which are evaluated and\n * concatenated into a space-delimited string. The first parameter you pass may contain format specifiers, a string\n * token composed of the percent sign (%) followed by a letter that indicates the formatting to be applied.\n */export let debug=function(){if(exports.isDebugEnabled()){console.debug.apply(console,handleArg.apply(this,arguments));postLog('FINE',Array.prototype.join.call(arguments,' '));}};/**\n * Prints a stack trace from the point where the method was called, including links to the specific lines in the\n * JavaScript source.\n */export let trace=function(){if(exports.isTraceEnabled()){console.debug.apply(console,handleArg.apply(this,arguments));postLog('FINER',Array.prototype.join.call(arguments,' '));}};/**\n * The method assumes there would be a 'declarativeLog' method on console and it routes logs to the method.\n * 'console.declarativeLog' can be used by devTools to record the logs. The method takes one parameter as a 'string'.\n */export let declarativeLog=function(){if(console.declarativeLog){console.declarativeLog.apply(console,handleArg.apply(this,arguments));}};/**\n * Check if 'declarative logging' is enabled.\n *\n * @return {Boolean} TRUE if declarative debug logging is curently enabled.\n */export let isDeclarativeLogEnabled=function(){return Boolean(console.declarativeLog);};/**\n * Set event bus.\n *\n * @param {Object} eventBus - The event bus API object.\n */export let setEventBus=function(eventBus){_eventBus=eventBus;};exports={getCorrelationID,updateCorrelationID,isErrorEnabled,isWarnEnabled,isInfoEnabled,isDebugEnabled,isTraceEnabled,error,warn,info,success,debug,trace,declarativeLog,isDeclarativeLogEnabled,setEventBus};export default exports;","map":null,"metadata":{},"sourceType":"module"}
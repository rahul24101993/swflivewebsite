{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to the saveHandler object based on configuration.\n *\n * @module js/saveHandlerService\n */\nimport adapterParser from 'js/adapterParserService';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport cfgSvc from 'js/configurationService';\nvar exports = {};\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Array} evaluationContext - additional evaluation context needs to be passed to saveHandlers configuration\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */\n\nexport let getSaveServiceHandlers = async function (sourceObjects, evaluationContext) {\n  sourceObjects.push(appCtxService.ctx);\n\n  if (evaluationContext) {\n    sourceObjects.push(evaluationContext);\n  }\n\n  return await cfgSvc.getCfg('saveHandlers').then(function (saveHandlers) {\n    return adapterParser.getAdaptedObjects(sourceObjects, saveHandlers).then(function (adaptedObjects) {\n      _.forEach(sourceObjects, function (n) {\n        adaptedObjects = _.without(adaptedObjects, n);\n      });\n\n      return adaptedObjects;\n    });\n  });\n};\nexports = {\n  getSaveServiceHandlers\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/saveHandlerService.js"],"names":["exports","getSaveServiceHandlers","sourceObjects","appCtxService","_","adaptedObjects"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,aAAA,MAAA,yBAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,MAAA,MAAA,yBAAA;AAEA,IAAIA,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,sBAAsB,GAAG,gBAAA,aAAA,EAAA,iBAAA,EAAmD;EACnFC,aAAa,CAAbA,IAAAA,CAAoBC,aAAa,CAAjCD,GAAAA;;EACA,IAAA,iBAAA,EAAwB;IACpBA,aAAa,CAAbA,IAAAA,CAAAA,iBAAAA;EACH;;EACD,OAAO,MAAM,MAAM,CAAN,MAAA,CAAA,cAAA,EAAA,IAAA,CAAsC,UAAA,YAAA,EAAyB;IACxE,OAAO,aAAa,CAAb,iBAAA,CAAA,aAAA,EAAA,YAAA,EAAA,IAAA,CACH,UAAA,cAAA,EAA2B;MACvBE,CAAC,CAADA,OAAAA,CAAAA,aAAAA,EAA0B,UAAA,CAAA,EAAc;QACpCC,cAAc,GAAGD,CAAC,CAADA,OAAAA,CAAAA,cAAAA,EAAjBC,CAAiBD,CAAjBC;MADJD,CAAAA;;MAGA,OAAA,cAAA;IALR,CAAO,CAAP;EADJ,CAAa,CAAb;AALG,CAAA;AAgBPJ,OAAO,GAAG;EACNC;AADM,CAAVD;AAGA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to the saveHandler object based on configuration.\n *\n * @module js/saveHandlerService\n */\nimport adapterParser from 'js/adapterParserService';\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nimport cfgSvc from 'js/configurationService';\n\nvar exports = {};\n\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Array} evaluationContext - additional evaluation context needs to be passed to saveHandlers configuration\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */\nexport let getSaveServiceHandlers = async function( sourceObjects, evaluationContext ) {\n    sourceObjects.push( appCtxService.ctx );\n    if( evaluationContext ) {\n        sourceObjects.push( evaluationContext );\n    }\n    return await cfgSvc.getCfg( 'saveHandlers' ).then( function( saveHandlers ) {\n        return adapterParser.getAdaptedObjects( sourceObjects, saveHandlers ).then(\n            function( adaptedObjects ) {\n                _.forEach( sourceObjects, function( n ) {\n                    adaptedObjects = _.without( adaptedObjects, n );\n                } );\n                return adaptedObjects;\n            } );\n    } );\n};\n\nexports = {\n    getSaveServiceHandlers\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwListCommandService.js\";\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport conditionService from 'js/conditionService';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport wcagSvc from 'js/wcagService';\nimport { noop } from 'js/declUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst setDisplayOption = displayOption => {\n  let options = {};\n\n  switch (displayOption) {\n    case 'ON_HOVER':\n      options.showOnHover = true;\n      break;\n\n    case 'ON_HOVER_AND_SELECTION':\n      options.showOnHover = true;\n      options.showOnSelection = true;\n      break;\n\n    case 'ON_SELECTION':\n      options.showOnSelection = true;\n      break;\n\n    case 'ALWAYS':\n      options.showAlways = true;\n      break;\n\n    default:\n      options.showOnHover = true;\n      options.showOnSelection = true;\n      break;\n  }\n\n  return options;\n};\n\nconst setPosition = position => {\n  // unify\n  position = (position || 'TOP_RIGHT').toLowerCase().replace(/_(.)/, (match, key1) => key1.toUpperCase());\n  let input = 'topRight';\n\n  if (['topRight', 'middleRight', 'bottomRight', 'topLeft', 'middleLeft', 'bottomLeft'].indexOf(position) !== -1) {\n    input = position;\n  }\n\n  let firstChar = input[0];\n  input = input.replace(firstChar, firstChar.toUpperCase());\n  return `aw-commands-cellCommand${input}`;\n};\n\nexport const awListCommandRenderFunction = props => {\n  const {\n    viewModel,\n    ctx,\n    elementRefList,\n    command,\n    vmo,\n    itemOptions\n  } = props;\n  let cmdElement = elementRefList.get('cmdElement');\n  let {\n    data\n  } = viewModel;\n  let commandContext = {\n    vmo\n  };\n  let $scope = {\n    command,\n    vmo,\n    parameters: commandContext\n  };\n  var position = null;\n  var displayOption = null;\n\n  if (command && vmo) {\n    $scope.cellCommandVisiblilty = true;\n    position = $scope.command.position;\n    displayOption = $scope.command.displayOption;\n\n    if (command.handler && command.handler.setCommandContext) {\n      command.handler.setCommandContext($scope.vmo, $scope);\n    }\n\n    if (command.action && command.condition) {\n      const evaluationEnvironment = {\n        ctx,\n        data\n      };\n      $scope.cellCommandVisiblilty = conditionService.evaluateCondition(data, command.condition, evaluationEnvironment);\n    }\n  }\n\n  $scope.positionClass = setPosition(position);\n  Object.assign($scope, setDisplayOption(displayOption));\n\n  const executeCommand = event => {\n    event.stopPropagation();\n\n    if (command.handler && command.handler.execute) {\n      command.handler.execute(vmo, $scope);\n    } else if (command.action) {\n      const dataCtxNode = {\n        commandContext,\n        data: viewModel,\n        ctx: ctx,\n        ports: viewModel.ports\n      };\n\n      if (itemOptions.actions && itemOptions.actions[command.action]) {\n        itemOptions.actions[command.action](null, {\n          vmo\n        });\n      }\n    }\n  };\n\n  let getClassName = () => {\n    let result = `${$scope.positionClass} `;\n\n    if (!$scope.cellCommandVisiblilty || $scope.showOnSelection && !vmo.selected) {\n      result += 'hiddenCell ';\n    }\n\n    if ($scope.cellCommandVisiblilty && $scope.showOnHover && !vmo.selected) {\n      result += 'aw-widgets-cellListCellCommandHover ';\n    }\n\n    if ($scope.showAlways || $scope.showOnSelection && vmo.selected) {\n      result += 'visible ';\n    }\n\n    return result.trim();\n  };\n\n  const handleKeyDown = event => {\n    if (wcagSvc.isValidKeyPress(event)) {\n      executeCommand(event);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    href: noop,\n    role: \"button\",\n    tabIndex: \"0\",\n    onClick: executeCommand,\n    onKeyDown: e => handleKeyDown(e),\n    className: `sw-aria-border aw-commands-cellCommandCommon ${getClassName()}`,\n    title: command.title && command.title.value ? command.title.value : command.title,\n    \"aria-label\": command.title && command.title.value ? command.title.value : command.title,\n    ref: cmdElement,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-commands-svg\",\n      children: /*#__PURE__*/_jsxDEV(AwIcon, {\n        iconId: command.iconId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: cmdElement,\n      extendedTooltipOptions: null,\n      extendedTooltipContext: command,\n      extendedTooltip: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwListCommandService.js"],"names":["setDisplayOption","displayOption","options","setPosition","position","key1","input","firstChar","awListCommandRenderFunction","props","itemOptions","cmdElement","elementRefList","data","commandContext","vmo","$scope","parameters","command","evaluationEnvironment","conditionService","Object","executeCommand","event","dataCtxNode","ctx","ports","viewModel","getClassName","result","positionClass","handleKeyDown","wcagSvc","e","iconId"],"mappings":"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","sourcesContent":["import AwIcon from 'viewmodel/AwIconViewModel';\nimport conditionService from 'js/conditionService';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport wcagSvc from 'js/wcagService';\nimport { noop } from 'js/declUtils';\n\nconst setDisplayOption = ( displayOption ) => {\n    let options = {};\n    switch ( displayOption ) {\n        case 'ON_HOVER':\n            options.showOnHover = true;\n            break;\n        case 'ON_HOVER_AND_SELECTION':\n            options.showOnHover = true;\n            options.showOnSelection = true;\n            break;\n        case 'ON_SELECTION':\n            options.showOnSelection = true;\n            break;\n        case 'ALWAYS':\n            options.showAlways = true;\n            break;\n        default:\n            options.showOnHover = true;\n            options.showOnSelection = true;\n            break;\n    }\n    return options;\n};\n\nconst setPosition = ( position ) => {\n    // unify\n    position = ( position || 'TOP_RIGHT' ).toLowerCase().replace( /_(.)/, ( match, key1 ) => key1.toUpperCase() );\n    let input = 'topRight';\n    if( [ 'topRight', 'middleRight', 'bottomRight',\n        'topLeft', 'middleLeft', 'bottomLeft'\n    ].indexOf( position ) !== -1 ) {\n        input = position;\n    }\n    let firstChar = input[ 0 ];\n    input = input.replace( firstChar, firstChar.toUpperCase() );\n    return `aw-commands-cellCommand${input}`;\n};\n\nexport const awListCommandRenderFunction = ( props ) => {\n    const { viewModel, ctx, elementRefList, command, vmo, itemOptions } = props;\n    let cmdElement = elementRefList.get( 'cmdElement' );\n    let { data } = viewModel;\n    let commandContext = { vmo };\n    let $scope = { command, vmo, parameters: commandContext };\n\n    var position = null;\n    var displayOption = null;\n    if( command && vmo ) {\n        $scope.cellCommandVisiblilty = true;\n        position = $scope.command.position;\n        displayOption = $scope.command.displayOption;\n        if( command.handler && command.handler.setCommandContext ) {\n            command.handler.setCommandContext( $scope.vmo, $scope );\n        }\n\n        if( command.action && command.condition ) {\n            const evaluationEnvironment = { ctx, data };\n            $scope.cellCommandVisiblilty = conditionService.evaluateCondition( data, command.condition, evaluationEnvironment );\n        }\n    }\n    $scope.positionClass = setPosition( position );\n    Object.assign( $scope, setDisplayOption( displayOption ) );\n\n    const executeCommand = ( event ) => {\n        event.stopPropagation();\n\n        if( command.handler && command.handler.execute ) {\n            command.handler.execute( vmo, $scope );\n        } else if( command.action ) {\n            const dataCtxNode = {\n                commandContext,\n                data: viewModel,\n                ctx: ctx,\n                ports: viewModel.ports\n            };\n            if( itemOptions.actions && itemOptions.actions[ command.action ] ) {\n                itemOptions.actions[ command.action ]( null, { vmo } );\n            }\n        }\n    };\n\n    let getClassName = () => {\n        let result = `${$scope.positionClass} `;\n        if( !$scope.cellCommandVisiblilty || $scope.showOnSelection && !vmo.selected ) {\n            result += 'hiddenCell ';\n        }\n        if( $scope.cellCommandVisiblilty && $scope.showOnHover && !vmo.selected ) {\n            result += 'aw-widgets-cellListCellCommandHover ';\n        }\n        if( $scope.showAlways || $scope.showOnSelection && vmo.selected ) {\n            result += 'visible ';\n        }\n        return result.trim();\n    };\n\n    const handleKeyDown = ( event ) => {\n        if( wcagSvc.isValidKeyPress( event ) ) {\n            executeCommand( event );\n        }\n    };\n\n    return (\n        <a href={noop} role='button' tabIndex='0' onClick={executeCommand} onKeyDown={( e )=> handleKeyDown( e )} className={`sw-aria-border aw-commands-cellCommandCommon ${getClassName()}`}\n            title={command.title && command.title.value ? command.title.value : command.title}\n            aria-label={command.title && command.title.value ? command.title.value : command.title}\n            ref={cmdElement}>\n            <div className='aw-commands-svg'>\n                <AwIcon iconId={command.iconId}></AwIcon>\n            </div>\n\n            <AwExtendedTooltip\n                reference={cmdElement}\n                extendedTooltipOptions={null}\n                extendedTooltipContext={command}\n                extendedTooltip={null} >\n            </AwExtendedTooltip>\n        </a>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
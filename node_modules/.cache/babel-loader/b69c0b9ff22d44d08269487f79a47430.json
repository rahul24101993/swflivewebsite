{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwToggleButtonValService.js\"; // Copyright (c) 2021 Siemens\n\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n/**\n * render function for AwToggleButtonVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet onChangeActionHandler = undefined;\nlet getAriaChecked = undefined;\nexport const awToggleButtonValRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    ...prop\n  } = props;\n  let filteredAttrs = sanitizer.sanitizeHTMLTagProps(prop, 'input');\n  const inputClass = getValClass(prop);\n\n  const doAction = ev => {\n    prop.onChange(ev);\n    return prop.action ? prop.action(ev) : '';\n  };\n\n  const onKeyPress = (event, prop) => {\n    if (prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.length > 0) {\n      for (let index = 0; index < prop.fielddata.displayValsModel.length; index++) {\n        if (prop.fielddata.displayValsModel[index].isInEditMode) {\n          event.updateArray = true;\n          event.index = index;\n          break;\n        }\n      }\n    }\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      prop.onChange(event);\n    }\n  };\n\n  if (prop.typex === 'BOOLEANARRAY') {\n    let ariaChecked = getAriaChecked === undefined ? false : getAriaChecked();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-toggle-val-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-toggle-val\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: prop.value,\n          \"data-locator\": prop.label,\n          \"aria-checked\": ariaChecked,\n          onChange: onChangeActionHandler,\n          onKeyPress: event => onKeyPress(event, prop)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"slider round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"sw-toggle-val\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...filteredAttrs,\n      type: \"checkbox\",\n      \"aria-checked\": prop.value,\n      onChange: doAction,\n      className: inputClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"slider round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\nexport const initialize = (props, _ref) => {\n  let {\n    dispatch,\n    dirty\n  } = _ref;\n  let currentVal = undefined;\n\n  if (props.typex === 'BOOLEANARRAY') {\n    onChangeActionHandler = event => {\n      currentVal = event === undefined ? false : event.target.checked;\n      dispatch({\n        path: 'data.dirty',\n        value: dirty++\n      });\n      return () => {\n        return currentVal;\n      };\n    };\n\n    getAriaChecked = onChangeActionHandler();\n  }\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwToggleButtonValService.js"],"names":["onChangeActionHandler","getAriaChecked","awToggleButtonValRenderFunction","props","prop","filteredAttrs","sanitizer","inputClass","getValClass","doAction","ev","onKeyPress","index","event","ariaChecked","initialize","dirty","currentVal","dispatch","path","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n\n/**\n * render function for AwToggleButtonVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nlet onChangeActionHandler = undefined;\nlet getAriaChecked = undefined;\nexport const awToggleButtonValRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        ...prop\n    } = props;\n\n    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'input' );\n    const inputClass = getValClass( prop );\n\n    const doAction = ( ev ) => {\n        prop.onChange( ev );\n        return prop.action ? prop.action( ev ) : '';\n    };\n\n    const onKeyPress = ( event, prop ) => {\n        if( prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.length > 0 ) {\n            for( let index = 0; index < prop.fielddata.displayValsModel.length; index++ ) {\n                if( prop.fielddata.displayValsModel[ index ].isInEditMode ) {\n                    event.updateArray = true;\n                    event.index = index;\n                    break;\n                }\n            }\n        }\n\n        if( event.key === 'Enter' ) {\n            event.preventDefault();\n            prop.onChange( event );\n        }\n    };\n\n    if( prop.typex === 'BOOLEANARRAY' ) {\n        let ariaChecked = getAriaChecked === undefined ? false : getAriaChecked();\n        return (\n            <div className='sw-toggle-val-container'>\n                <div className='sw-toggle-val'>\n                    <input type='checkbox' value={prop.value} data-locator={prop.label} aria-checked={ariaChecked}\n                        onChange={onChangeActionHandler} onKeyPress={( event ) => onKeyPress( event, prop )}/>\n                    <span className='slider round'></span>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <span className='sw-toggle-val'>\n            <input {...filteredAttrs} type='checkbox' aria-checked={prop.value} onChange={doAction} className={inputClass}>\n            </input>\n            <span className='slider round'></span>\n        </span>\n    );\n};\n\nexport  const initialize = ( props, { dispatch, dirty } )=>{\n    let currentVal = undefined;\n    if( props.typex === 'BOOLEANARRAY' ) {\n        onChangeActionHandler = ( event ) =>{\n            currentVal = event === undefined ? false : event.target.checked;\n            dispatch( { path: 'data.dirty', value: dirty++ } );\n            return ()=>{\n                return currentVal;\n            };\n        };\n        getAriaChecked = onChangeActionHandler();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import{parseDate}from'js/uwDirectiveDateTimeService';import dateTimeSvc,{NULLDATE,isNullDate,getNormalizedTimeValue}from'js/dateTimeService';export let propTypeDate=prop=>prop.type==='DATE';export let propTypeDateArray=prop=>prop.type==='DATEARRAY';class DateTimeValues{constructor(data){this.values={dateVal:data.dateVal,timeVal:data.timeVal};}get dateValue(){return this.values.dateVal;}get timeValue(){return this.values.timeVal;}cleanDateTimeValues(){this.values.dateVal=null;this.values.timeVal=null;}}let isDateEnabled=dateApi=>dateApi.isDateEnabled;let isTimeEnabled=dateApi=>dateApi.isTimeEnabled;let findDateObject=function(prop){let dbValue;let dateObj;if(propTypeDate(prop)){dbValue=prop.dbValue;}else if(propTypeDateArray(prop)){dbValue=prop.dbValue[prop.dbValue.length-1];}if(!isNullDate(dbValue)){dateObj=parseDate(dbValue);}else if(dbValue===NULLDATE){dateObj=NULLDATE;}return dateObj;};let findDateValue=function(_ref){let{dateApi}=_ref;let dateVal=null;if(isDateEnabled(dateApi)){dateVal=dateTimeSvc.formatSessionDate(dateApi.dateObject);}return dateVal;};let findTimeValue=function(_ref2){let{dateApi}=_ref2;let timeVal=null;if(isTimeEnabled(dateApi)){timeVal=dateObject?dateObject.timeValue:dateTimeSvc.formatTime(dateApi.dateObject);}return dateTimeSvc.getNormalizedTimeValue(timeVal);};let dateObject=null;let dateWithTime;/**\n * Sets data and time values and creates a new object\n * @param {Object} data - contains date and time values as keys\n */export let setDateTimeValues=function(data){dateObject=new DateTimeValues(data);};/**\n * Cleas data and time values from the object\n * @param {Object} prop - ViewModelProperty\n */export let clearDateTimeValues=function(prop){if(propTypeDate(prop)||propTypeDateArray(prop)){dateObject&&dateObject.cleanDateTimeValues();dateObject=null;}};/**\n * Returns dbValue\n * @param {Object} prop - ViewModelProperty\n */export let getDBValueForDate=function(prop){let dateApi=prop.dateApi;if(isDateEnabled(dateApi)){let oldDateObject=!dateApi.dateValue?dateTimeSvc.getDefaultDate(dateApi):findDateObject(prop);dateWithTime=dateTimeSvc.setTimeIntoDateModel(oldDateObject,getNormalizedTimeValue(dateObject.timeValue));}else{dateWithTime=dateTimeSvc.setTimeIntoDateModel(dateTimeSvc.getEpochDate(),getNormalizedTimeValue(dateObject.timeValue));}return dateWithTime.getTime();};/**\n * Returns uiValue\n * @param {Object} dateApi - dateApi object\n */export let getUIValueForDate=function(dateApi){let uiValue;if(isTimeEnabled(dateApi)&&!isDateEnabled(dateApi)){uiValue=dateTimeSvc.formatSessionTime(dateWithTime);}else{uiValue=dateTimeSvc.formatSessionDateTime(dateWithTime);}return uiValue;};/**\n * Returns updated dateApi based on dbValue\n * @param {Object} vmProp - ViewModelProperty\n */export let updateDateApi=function(vmProp){if(propTypeDate(vmProp)||propTypeDateArray(vmProp)){let dateApi=vmProp.dateApi;dateApi.dateObject=findDateObject(vmProp);dateApi.dateValue=findDateValue(vmProp);dateApi.timeValue=findTimeValue(vmProp);}};","map":null,"metadata":{},"sourceType":"module"}
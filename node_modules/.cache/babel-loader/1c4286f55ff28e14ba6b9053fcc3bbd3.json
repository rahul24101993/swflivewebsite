{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * {@httpIconProviderService} icon provider prepares &lt;img&gt; tag is requires based on configuration provided in\n * solution definition. It uses {@defaultIconProviderService} to use build time prepared cache.\n *\n * @module js/httpIconProviderService\n */\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport iconRepositoryService from 'js/iconRepositoryService';\nvar exports = {};\n/**\n * Returns the &lt;img&gt; tag for the given icon name\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;img&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\n\nfunction _getIMGTag(name) {\n  if (!name) {\n    return null;\n  }\n\n  var iconUrl = iconRepositoryService.getIconFileUrl(name + '.svg');\n\n  if (iconUrl) {\n    return '<img class=\"aw-base-icon\" src=\"' + iconUrl + '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + name + '\" />';\n  }\n\n  return null;\n}\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name.\n */\n\n\nexport let getTypeIcon = function (typeName) {\n  var icon = defaultIconProviderService.getTypeIcon(typeName);\n\n  if (!icon) {\n    icon = _getIMGTag(typeName);\n  }\n\n  return icon;\n};\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\n\nexport let getTypeIconFileTag = function (typeName, typeIconFileName) {\n  if (!typeIconFileName) {\n    return null;\n  }\n\n  var iconUrl = iconRepositoryService.getIconFileUrl(typeIconFileName);\n\n  if (iconUrl) {\n    return '<img class=\"aw-base-icon\" src=\"' + iconUrl + '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + typeName + '\" />';\n  }\n\n  return null;\n};\n/**\n * Returns URL.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\n\nexport let getTypeIconFileUrl = function (typeIconFileName) {\n  return iconRepositoryService.getIconFileUrl(typeIconFileName);\n};\n/**\n * Returns URL.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server\n */\n\nexport let getTypeIconURL = function (typeName) {\n  var iconUrl = defaultIconProviderService.getTypeIconURL(typeName);\n\n  if (!iconUrl) {\n    iconUrl = iconRepositoryService.getIconFileUrl(typeName + '.svg');\n  }\n\n  return iconUrl;\n};\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\n\nexport let getTileIcon = async function (name) {\n  var icon = await defaultIconProviderService.getTileIcon(name);\n\n  if (!icon) {\n    icon = _getIMGTag('home' + name);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\n\nexport let getMiscIcon = async function (name) {\n  var icon = await defaultIconProviderService.getMiscIcon(name);\n\n  if (!icon) {\n    icon = _getIMGTag('misc' + name);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} name - The icon name.\n *\n * @return {String} SVG definition string for the icon\n */\n\nexport let getCmdIcon = async function (name) {\n  var icon = await defaultIconProviderService.getCmdIcon(name);\n\n  if (!icon) {\n    icon = _getIMGTag('cmd' + name);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\n\nexport let getAwIcon = async function (iconName) {\n  var icon = await defaultIconProviderService.getAwIcon(iconName);\n\n  if (!icon) {\n    icon = _getIMGTag(iconName);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String}Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\n\nexport let getIndicatorIcon = async function (iconName) {\n  var icon = await defaultIconProviderService.getIndicatorIcon(iconName);\n\n  if (!icon) {\n    icon = _getIMGTag('indicator' + iconName);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string or img tag .\n */\n\nexport let getIcon = async function (iconName) {\n  var icon = await defaultIconProviderService.getIcon(iconName);\n\n  if (!icon) {\n    icon = _getIMGTag(iconName);\n  }\n\n  return icon;\n};\nexports = {\n  getTypeIcon,\n  getTypeIconFileTag,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTileIcon,\n  getMiscIcon,\n  getCmdIcon,\n  getAwIcon,\n  getIndicatorIcon,\n  getIcon\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/httpIconProviderService.js"],"names":["exports","iconUrl","iconRepositoryService","name","getTypeIcon","icon","defaultIconProviderService","_getIMGTag","getTypeIconFileTag","getTypeIconFileUrl","getTypeIconURL","typeName","getTileIcon","getMiscIcon","getCmdIcon","getAwIcon","getIndicatorIcon","getIcon"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * {@httpIconProviderService} icon provider prepares &lt;img&gt; tag is requires based on configuration provided in\n * solution definition. It uses {@defaultIconProviderService} to use build time prepared cache.\n *\n * @module js/httpIconProviderService\n */\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport iconRepositoryService from 'js/iconRepositoryService';\n\nvar exports = {};\n/**\n * Returns the &lt;img&gt; tag for the given icon name\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;img&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\nfunction _getIMGTag( name ) {\n    if( !name ) {\n        return null;\n    }\n    var iconUrl = iconRepositoryService.getIconFileUrl( name + '.svg' );\n    if( iconUrl ) {\n        return '<img class=\"aw-base-icon\" src=\"' + iconUrl +\n            '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + name + '\" />';\n    }\n    return null;\n}\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name.\n */\nexport let getTypeIcon = function( typeName ) {\n    var icon = defaultIconProviderService.getTypeIcon( typeName );\n    if( !icon ) {\n        icon = _getIMGTag( typeName );\n    }\n    return icon;\n};\n\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\nexport let getTypeIconFileTag = function( typeName, typeIconFileName ) {\n    if( !typeIconFileName ) {\n        return null;\n    }\n    var iconUrl = iconRepositoryService.getIconFileUrl( typeIconFileName );\n    if( iconUrl ) {\n        return '<img class=\"aw-base-icon\" src=\"' + iconUrl +\n            '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + typeName + '\" />';\n    }\n    return null;\n};\n\n/**\n * Returns URL.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\nexport let getTypeIconFileUrl = function( typeIconFileName ) {\n    return iconRepositoryService.getIconFileUrl( typeIconFileName );\n};\n\n/**\n * Returns URL.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server\n */\nexport let getTypeIconURL = function( typeName ) {\n    var iconUrl = defaultIconProviderService.getTypeIconURL( typeName );\n    if( !iconUrl ) {\n        iconUrl = iconRepositoryService.getIconFileUrl( typeName + '.svg' );\n    }\n    return iconUrl;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\nexport let getTileIcon = async function( name ) {\n    var icon = await defaultIconProviderService.getTileIcon( name );\n    if( !icon ) {\n        icon = _getIMGTag( 'home' + name );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\nexport let getMiscIcon = async function( name ) {\n    var icon = await defaultIconProviderService.getMiscIcon( name );\n    if( !icon ) {\n        icon = _getIMGTag( 'misc' + name );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} name - The icon name.\n *\n * @return {String} SVG definition string for the icon\n */\nexport let getCmdIcon = async function( name ) {\n    var icon = await defaultIconProviderService.getCmdIcon( name );\n    if( !icon ) {\n        icon = _getIMGTag( 'cmd' + name );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\nexport let getAwIcon = async function( iconName ) {\n    var icon = await defaultIconProviderService.getAwIcon( iconName );\n    if( !icon ) {\n        icon = _getIMGTag( iconName );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String}Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\nexport let getIndicatorIcon = async function( iconName ) {\n    var icon = await defaultIconProviderService.getIndicatorIcon( iconName );\n    if( !icon ) {\n        icon = _getIMGTag( 'indicator' + iconName );\n    }\n    return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string or img tag .\n */\nexport let getIcon = async function( iconName ) {\n    var icon = await defaultIconProviderService.getIcon( iconName );\n    if( !icon ) {\n        icon = _getIMGTag( iconName );\n    }\n    return icon;\n};\n\nexports = {\n    getTypeIcon,\n    getTypeIconFileTag,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTileIcon,\n    getMiscIcon,\n    getCmdIcon,\n    getAwIcon,\n    getIndicatorIcon,\n    getIcon\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /* eslint-disable class-methods-use-this */ /**\n * This service provides core angularJS $q/promise service abstraction.\n * https://github.com/angular/angular.js/blob/master/src/ng/q.js\n *\n * @module js/awPromiseService\n */import _ from'lodash';/**\n * static resolve function\n * @param {*} resolveFunc resolver\n * @param {*} val value\n * @returns {Promise} promise with resolved result\n */function resolveInternal(resolveFunc,val){return resolveFunc?resolveFunc(val):Promise.resolve(val);}/**\n * static reject function\n * @param {*} rejectFunc rejecter\n * @param {*} val value\n * @returns {Promise} promise with resolved result\n */function rejectInternal(rejectFunc,val){return rejectFunc?rejectFunc(val):Promise.reject(val);}/**\n * instance function for AwPromiseService\n * @param {fn} callback as function( resolve, reject )\n * @returns {Promise} promise object\n */function createPromise(callback){return new Promise((resolve,reject)=>{const resolveWrapper=value=>{return resolveInternal(resolve,value);};const rejectWrapper=value=>{return rejectInternal(reject,value);};callback?callback(resolveWrapper,rejectWrapper):resolve();});}// Decorate instance\ncreatePromise.resolve=resolveInternal.bind(null,undefined);createPromise.reject=rejectInternal.bind(null,undefined);createPromise.defer=()=>{let deferred={};deferred.promise=new Promise((resolve,reject)=>{deferred.resolve=resolve;deferred.reject=reject;});return deferred;};createPromise.all=promises=>{let isPromisesArray=Array.isArray(promises);let result=isPromisesArray?promises:[];//Angular use cases support- promises could be object\nif(!isPromisesArray){_.forEach(promises,(promise,key)=>{result.push(promise.then(data=>{return{[key]:data};}));});//resolve promise as a object, bydefault promise.all resolves promise as a array\nreturn Promise.all(result).then(arrayData=>{let responseObj={};_.forEach(arrayData,obj=>{_.forEach(obj,(val,key)=>{responseObj[key]=val;});});return responseObj;});}return Promise.all(result);};createPromise.when=value=>{return Promise.resolve(value);};createPromise.race=promises=>{return Promise.race(promises);};const getNativeInstance=()=>createPromise;export default{getNativeInstance,get instance(){return createPromise;}};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Selection helper service which handles single and multi selections for table.\n *\n * @module js/selectionHelper\n */\nlet exports = {};\n/**\n * Handles table single selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\n\nexport let handleSingleSelect = function (selectedObject, selectionModel) {\n  if (!selectedObject.selected) {\n    selectionModel.setSelection(selectedObject);\n  } else {\n    selectionModel.setSelection([]);\n  }\n};\n/**\n * Handles table multi-selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\n\nexport let handleMultiSelect = function (selectedObject, selectionModel) {\n  selectionModel.toggleSelection(selectedObject);\n};\n/**\n * Handles multi-selection with the shift key down for cell list\n *\n * @param {ModelObject[]} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n * @param {Object} loadedVMObjects - Loaded VMObjects\n */\n\nexport let handleListShiftMultiSelect = function (selectedObject, selectionModel, loadedVMObjects) {\n  // If object is already selected ignore shift and just deselect\n  if (selectionModel.isSelected(selectedObject)) {\n    selectionModel.removeFromSelection(selectedObject);\n  } else {\n    var uid = selectedObject.alternateID ? selectedObject.alternateID : selectedObject.uid;\n    var allLoadedObjects = loadedVMObjects.getLoadedViewModelObjects(); // Get the index of the object that matches uid\n\n    var start = allLoadedObjects.indexOf(allLoadedObjects.filter(function (vmo) {\n      return vmo.alternateID ? vmo.alternateID === uid : vmo.uid === uid;\n    })[0]); // Get the index of the object that matches last selected uid\n\n    var end = allLoadedObjects.indexOf(allLoadedObjects.filter(function (vmo) {\n      return selectionModel.getSelectedIndex(vmo) === selectionModel.getCurrentSelectedCount() - 1;\n    })[0]); // Select everything in between\n\n    if (start !== -1 && end !== -1) {\n      changeObjectsSelection(start, end, true, selectionModel, allLoadedObjects);\n    }\n  }\n};\n/**\n * Change the selection range\n *\n * @param {Number} start - String index in collection to add/remove/toggle.\n * @param {Number} end -  Ending index in collection to add/remove/toggle.\n * @param {Boolean} select - (Optional) TRUE, 'select'...FALSE, 'unselect'...UNDEFINED, 'toggle'.\n * @param {Object} selectionModel - The Selection Model instance\n * @param {Object} loadedVMOs - LoadedVMOs\n */\n\nconst changeObjectsSelection = (start, end, select, selectionModel, loadedVMOs) => {\n  var e = start > end ? start : end;\n  var s = start > end ? end : start;\n  var objects = loadedVMOs.slice(s, e + 1);\n\n  if (select === true) {\n    if (selectionModel.isMultiSelectionEnabled() || objects.length > 1) {\n      selectionModel.addToSelection(objects);\n    } else {\n      selectionModel.setSelection(objects);\n    }\n  } else if (select === false) {\n    selectionModel.removeFromSelection(objects);\n  } else {\n    selectionModel.toggleSelection(objects);\n  }\n};\n/**\n * Handle a event that should trigger a selection change\n *\n * @param {ModelObject[]} selectedObjects - selected objects\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - The event\n * @param {Object} loadedVMObjects - The currently loaded viewModelObjects\n */\n\n\nexport let handleSelectionEvent = function (selectedObjects, selectionModel, event, loadedVMObjects) {\n  // Event is optional so default\n  event = event ? event : {}; // If the model supports multiple selection\n\n  if (selectionModel.getMode() === 'multiple') {\n    // If shift key and something is selected do range selection\n    if (event.shiftKey && selectionModel.getCurrentSelectedCount() > 0) {\n      /**\n       * Note: This handling is specific to list as ui-grid has handling for shift select built in - see\n       * rowSelectionChangedBatch.\n       */\n      exports.handleListShiftMultiSelect(selectedObjects[0], selectionModel, loadedVMObjects);\n    } else {\n      // If right click or ctrl click (also implies single object clicked)\n      // event.which =1 is for long press on touch devices & event.which=3 is for right click on desktop devices\n      //right click should setSelect instead of  toggleSelection\n      if (event.ctrlKey || event.metaKey && window.navigator.platform.toUpperCase().indexOf('MAC') !== -1 || event.srcElement && event.type === 'pointerdown' && event.which === 1 || selectionModel.isMultiSelectionEnabled() && event.which === 3 || event.shiftKey) {\n        // If object is already selected\n        selectionModel.toggleSelection(selectedObjects[0]);\n      } else if (selectionModel.isMultiSelectionEnabled()) {\n        if (!selectionModel.isSelected(selectedObjects[0])) {\n          selectionModel.addToSelection(selectedObjects[0]);\n        } else {\n          selectionModel.removeFromSelection(selectedObjects[0]);\n        }\n      } else {\n        let isSelected = selectionModel.isSelected(selectedObjects[0]);\n        let currentSelectedCount = selectionModel.getCurrentSelectedCount();\n\n        if (!isSelected || currentSelectedCount > 1) {\n          selectionModel.setSelection(selectedObjects[0]);\n        } else {\n          selectionModel.setSelection([]);\n        }\n      }\n    }\n  } else {\n    exports.handleSingleSelect(selectedObjects[0], selectionModel);\n  }\n};\nexport let handleSelectAllOrSelectNone = function (eventData, selectionModel, selectedObjects) {\n  if (eventData.selectAll) {\n    selectionModel.setSelection(selectedObjects[0]);\n  } else {\n    selectionModel.setSelection([]);\n  }\n};\nexports = {\n  handleSingleSelect,\n  handleMultiSelect,\n  handleListShiftMultiSelect,\n  handleSelectionEvent,\n  handleSelectAllOrSelectNone\n};\nexport default exports;","map":{"version":3,"names":["exports","handleSingleSelect","selectedObject","selectionModel","selected","setSelection","handleMultiSelect","toggleSelection","handleListShiftMultiSelect","loadedVMObjects","isSelected","removeFromSelection","uid","alternateID","allLoadedObjects","getLoadedViewModelObjects","start","indexOf","filter","vmo","end","getSelectedIndex","getCurrentSelectedCount","changeObjectsSelection","select","loadedVMOs","e","s","objects","slice","isMultiSelectionEnabled","length","addToSelection","handleSelectionEvent","selectedObjects","event","getMode","shiftKey","ctrlKey","metaKey","window","navigator","platform","toUpperCase","srcElement","type","which","currentSelectedCount","handleSelectAllOrSelectNone","eventData","selectAll"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/selectionHelper.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Selection helper service which handles single and multi selections for table.\n *\n * @module js/selectionHelper\n */\n\nlet exports = {};\n\n/**\n * Handles table single selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\nexport let handleSingleSelect = function( selectedObject, selectionModel ) {\n    if( !selectedObject.selected ) {\n        selectionModel.setSelection( selectedObject );\n    } else {\n        selectionModel.setSelection( [] );\n    }\n};\n\n/**\n * Handles table multi-selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\nexport let handleMultiSelect = function( selectedObject, selectionModel ) {\n    selectionModel.toggleSelection( selectedObject );\n};\n\n/**\n * Handles multi-selection with the shift key down for cell list\n *\n * @param {ModelObject[]} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n * @param {Object} loadedVMObjects - Loaded VMObjects\n */\nexport let handleListShiftMultiSelect = function( selectedObject, selectionModel, loadedVMObjects ) {\n    // If object is already selected ignore shift and just deselect\n    if( selectionModel.isSelected( selectedObject ) ) {\n        selectionModel.removeFromSelection( selectedObject );\n    } else {\n        var uid = selectedObject.alternateID ? selectedObject.alternateID : selectedObject.uid;\n        var allLoadedObjects = loadedVMObjects.getLoadedViewModelObjects();\n\n        // Get the index of the object that matches uid\n        var start = allLoadedObjects.indexOf( allLoadedObjects.filter( function( vmo ) {\n            return vmo.alternateID ? vmo.alternateID === uid : vmo.uid === uid;\n        } )[ 0 ] );\n\n        // Get the index of the object that matches last selected uid\n        var end = allLoadedObjects.indexOf( allLoadedObjects.filter( function( vmo ) {\n            return selectionModel.getSelectedIndex( vmo ) === selectionModel.getCurrentSelectedCount() - 1;\n        } )[ 0 ] );\n\n        // Select everything in between\n        if( start !== -1 && end !== -1 ) {\n            changeObjectsSelection( start, end, true, selectionModel, allLoadedObjects );\n        }\n    }\n};\n\n/**\n * Change the selection range\n *\n * @param {Number} start - String index in collection to add/remove/toggle.\n * @param {Number} end -  Ending index in collection to add/remove/toggle.\n * @param {Boolean} select - (Optional) TRUE, 'select'...FALSE, 'unselect'...UNDEFINED, 'toggle'.\n * @param {Object} selectionModel - The Selection Model instance\n * @param {Object} loadedVMOs - LoadedVMOs\n */\nconst changeObjectsSelection = ( start, end, select, selectionModel, loadedVMOs ) => {\n    var e = start > end ? start : end;\n    var s = start > end ? end : start;\n\n    var objects = loadedVMOs.slice( s, e + 1 );\n    if( select === true ) {\n        if( selectionModel.isMultiSelectionEnabled() || objects.length > 1 ) {\n            selectionModel.addToSelection( objects );\n        } else {\n            selectionModel.setSelection( objects );\n        }\n    } else if( select === false ) {\n        selectionModel.removeFromSelection( objects );\n    } else {\n        selectionModel.toggleSelection( objects );\n    }\n};\n\n/**\n * Handle a event that should trigger a selection change\n *\n * @param {ModelObject[]} selectedObjects - selected objects\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - The event\n * @param {Object} loadedVMObjects - The currently loaded viewModelObjects\n */\nexport let handleSelectionEvent = function( selectedObjects, selectionModel, event, loadedVMObjects ) {\n    // Event is optional so default\n    event = event ? event : {};\n\n    // If the model supports multiple selection\n    if( selectionModel.getMode() === 'multiple' ) {\n        // If shift key and something is selected do range selection\n        if( event.shiftKey && selectionModel.getCurrentSelectedCount() > 0 ) {\n            /**\n             * Note: This handling is specific to list as ui-grid has handling for shift select built in - see\n             * rowSelectionChangedBatch.\n             */\n            exports.handleListShiftMultiSelect( selectedObjects[ 0 ], selectionModel, loadedVMObjects );\n        } else {\n            // If right click or ctrl click (also implies single object clicked)\n            // event.which =1 is for long press on touch devices & event.which=3 is for right click on desktop devices\n            //right click should setSelect instead of  toggleSelection\n            if( event.ctrlKey ||\n                event.metaKey &&\n                window.navigator.platform.toUpperCase().indexOf( 'MAC' ) !== -1 ||\n                event.srcElement && event.type === 'pointerdown' && event.which === 1 ||\n                selectionModel.isMultiSelectionEnabled() && event.which === 3 || event.shiftKey ) {\n                // If object is already selected\n                selectionModel.toggleSelection( selectedObjects[ 0 ] );\n            } else if( selectionModel.isMultiSelectionEnabled() ) {\n                if( !selectionModel.isSelected( selectedObjects[ 0 ] ) ) {\n                    selectionModel.addToSelection( selectedObjects[ 0 ] );\n                } else {\n                    selectionModel.removeFromSelection( selectedObjects[ 0 ] );\n                }\n            } else {\n                let isSelected = selectionModel.isSelected( selectedObjects[ 0 ] );\n                let currentSelectedCount = selectionModel.getCurrentSelectedCount();\n                if( !isSelected || currentSelectedCount > 1 ) {\n                    selectionModel.setSelection( selectedObjects[ 0 ] );\n                } else {\n                    selectionModel.setSelection( [] );\n                }\n            }\n        }\n    } else {\n        exports.handleSingleSelect( selectedObjects[ 0 ], selectionModel );\n    }\n};\n\nexport let handleSelectAllOrSelectNone = function( eventData, selectionModel, selectedObjects ) {\n    if( eventData.selectAll ) {\n        selectionModel.setSelection( selectedObjects[ 0 ] );\n    } else {\n        selectionModel.setSelection( [] );\n    }\n};\n\nexports = {\n    handleSingleSelect,\n    handleMultiSelect,\n    handleListShiftMultiSelect,\n    handleSelectionEvent,\n    handleSelectAllOrSelectNone\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used for simpletabe as Column Filter Utility\n *\n * @module js/awColumnFilterUtility\n *\n */\nimport _ from 'lodash';\nvar exports = {};\nexport let OPERATION_TYPE = {\n  RANGE: 'range',\n  GREATER: 'gt',\n  GREATER_EQUALS: 'gte',\n  LESS: 'lt',\n  LESS_EQUALS: 'lte',\n  EQUALS: 'equals',\n  CASE_SENSITIVE_EQUALS: 'caseSensitiveEquals',\n  NOT_EQUALS: 'notEquals',\n  CASE_SENSITIVE_NOT_EQUALS: 'caseSensitiveNotEquals',\n  CONTAINS: 'contains',\n  NOT_CONTAINS: 'notContains',\n  STARTS_WITH: 'startsWith',\n  ENDS_WITH: 'endsWith'\n};\nexport let FILTER_VIEW = {\n  NUMERIC: 'splmTableNumericColumnMenu',\n  DATE: 'splmTableDateColumnMenu',\n  TEXT: 'splmTableTextColumnMenu'\n};\n/**\n * Adds the new column filter tot he columnFilters input.\n *\n * @param {Array} columnFilters - Collection of all the column filters\n * @param {Object} newColumnFilters - The new column filter to apply\n * @returns {Array} columnFilters\n */\n\nexport let addOrReplaceColumnFilter = function (columnFilters, newColumnFilters) {\n  columnFilters = columnFilters || [];\n\n  if (_.isArray(newColumnFilters) && newColumnFilters.length) {\n    exports.removeColumnFilter(columnFilters, newColumnFilters[0].columnName);\n    columnFilters = columnFilters.concat(newColumnFilters);\n  }\n\n  return columnFilters;\n};\n/**\n * Removes the column filters that are applied to the column by name.\n *\n * @param {Array} columnFilters - Collection of all the column filters\n * @param {String} columnName - The name of the column\n * @returns {Boolean} whether a filter was removed or not\n */\n\nexport let removeColumnFilter = function (columnFilters, columnName) {\n  var isFilterRemoved = false;\n\n  if (columnFilters && columnFilters.length && columnName) {\n    _.remove(columnFilters, function (currentFilter) {\n      if (currentFilter.columnName === columnName) {\n        isFilterRemoved = true;\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  return isFilterRemoved;\n};\n/**\n * Builds a basic column filter used for all filter types.\n *\n * @param {String} columnName - Column name the filter is applied to\n * @param {Array} values - Filter values\n *\n * @returns {Object} filter object\n */\n\nexport let createBasicColumnFilter = function (columnName, values) {\n  var returnFilter = {\n    columnName: columnName\n  };\n  var filterValues = [];\n\n  _.forEach(values, function (currentValue) {\n    var stringValue = _(currentValue).toString();\n\n    filterValues.push(stringValue);\n  });\n\n  returnFilter.values = filterValues;\n  return returnFilter;\n};\n/**\n * Create a filter based on the operation and values.\n *\n * @param {String} operation - operation name of the filter\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createFilter = function (operation, columnName, values) {\n  var columnFilter = exports.createBasicColumnFilter(columnName, values);\n  columnFilter.operation = operation;\n  return columnFilter;\n};\n/**\n * Create a 'Contains' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createContainsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.CONTAINS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Does not contain' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createNotContainsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.NOT_CONTAINS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Range' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createRangeFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.RANGE;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Less Than or Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createLessThanEqualsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.LESS_EQUALS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Less Than' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createLessThanFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.LESS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Greater Than Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createGreaterThanEqualsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.GREATER_EQUALS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Greater Than' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createGreaterThanFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.GREATER;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createEqualsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.EQUALS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a case sensitive 'Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createCaseSensitiveEqualsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.CASE_SENSITIVE_EQUALS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Not Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createNotEqualsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.NOT_EQUALS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a case sensitive 'Not Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createCaseSensitiveNotEqualsFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Starts With' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createStartsWithFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.STARTS_WITH;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Create a 'Starts With' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\n\nexport let createEndsWithFilter = function (columnName, values) {\n  var operation = exports.OPERATION_TYPE.ENDS_WITH;\n  return exports.createFilter(operation, columnName, values);\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Range'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidRangeColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 2 && columnFilter.operation === exports.OPERATION_TYPE.RANGE;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Contains'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidContainsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.CONTAINS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Does not contain'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidNotContainsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.NOT_CONTAINS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidEqualsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.EQUALS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for case sensitive 'Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidCaseSensitiveEqualsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.CASE_SENSITIVE_EQUALS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Not Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidNotEqualsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.NOT_EQUALS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for case sensitive 'Not Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidCaseSensitiveNotEqualsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Less Than'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidLessThanColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.LESS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Less Than or Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidLessThanEqualsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.LESS_EQUALS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Greater Than'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidGreaterThanColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.GREATER;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Greater Than or Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidGreaterThanEqualsColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.GREATER_EQUALS;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Begins with'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidStartsWithColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.STARTS_WITH;\n};\n/**\n * Test the column filter object to make sure it has the valid information for 'Ends with'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\n\nexport let isValidEndsWithColumnFilter = function (columnFilter) {\n  return columnFilter && columnFilter.values && columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.ENDS_WITH;\n};\nexports = {\n  OPERATION_TYPE,\n  FILTER_VIEW,\n  addOrReplaceColumnFilter,\n  removeColumnFilter,\n  createBasicColumnFilter,\n  createFilter,\n  createContainsFilter,\n  createNotContainsFilter,\n  createRangeFilter,\n  createLessThanEqualsFilter,\n  createLessThanFilter,\n  createGreaterThanEqualsFilter,\n  createGreaterThanFilter,\n  createEqualsFilter,\n  createCaseSensitiveEqualsFilter,\n  createNotEqualsFilter,\n  createCaseSensitiveNotEqualsFilter,\n  createStartsWithFilter,\n  createEndsWithFilter,\n  isValidRangeColumnFilter,\n  isValidContainsColumnFilter,\n  isValidNotContainsColumnFilter,\n  isValidEqualsColumnFilter,\n  isValidCaseSensitiveEqualsColumnFilter,\n  isValidNotEqualsColumnFilter,\n  isValidCaseSensitiveNotEqualsColumnFilter,\n  isValidLessThanColumnFilter,\n  isValidLessThanEqualsColumnFilter,\n  isValidGreaterThanColumnFilter,\n  isValidGreaterThanEqualsColumnFilter,\n  isValidStartsWithColumnFilter,\n  isValidEndsWithColumnFilter\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/awColumnFilterUtility.js"],"names":["exports","OPERATION_TYPE","RANGE","GREATER","GREATER_EQUALS","LESS","LESS_EQUALS","EQUALS","CASE_SENSITIVE_EQUALS","NOT_EQUALS","CASE_SENSITIVE_NOT_EQUALS","CONTAINS","NOT_CONTAINS","STARTS_WITH","ENDS_WITH","FILTER_VIEW","NUMERIC","DATE","TEXT","addOrReplaceColumnFilter","columnFilters","_","newColumnFilters","removeColumnFilter","isFilterRemoved","currentFilter","createBasicColumnFilter","returnFilter","columnName","filterValues","stringValue","createFilter","columnFilter","createContainsFilter","operation","createNotContainsFilter","createRangeFilter","createLessThanEqualsFilter","createLessThanFilter","createGreaterThanEqualsFilter","createGreaterThanFilter","createEqualsFilter","createCaseSensitiveEqualsFilter","createNotEqualsFilter","createCaseSensitiveNotEqualsFilter","createStartsWithFilter","createEndsWithFilter","isValidRangeColumnFilter","isValidContainsColumnFilter","isValidNotContainsColumnFilter","isValidEqualsColumnFilter","isValidCaseSensitiveEqualsColumnFilter","isValidNotEqualsColumnFilter","isValidCaseSensitiveNotEqualsColumnFilter","isValidLessThanColumnFilter","isValidLessThanEqualsColumnFilter","isValidGreaterThanColumnFilter","isValidGreaterThanEqualsColumnFilter","isValidStartsWithColumnFilter","isValidEndsWithColumnFilter"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used for simpletabe as Column Filter Utility\n *\n * @module js/awColumnFilterUtility\n *\n */\nimport _ from 'lodash';\n\nvar exports = {};\n\nexport let OPERATION_TYPE = {\n    RANGE: 'range',\n    GREATER: 'gt',\n    GREATER_EQUALS: 'gte',\n    LESS: 'lt',\n    LESS_EQUALS: 'lte',\n    EQUALS: 'equals',\n    CASE_SENSITIVE_EQUALS: 'caseSensitiveEquals',\n    NOT_EQUALS: 'notEquals',\n    CASE_SENSITIVE_NOT_EQUALS: 'caseSensitiveNotEquals',\n    CONTAINS: 'contains',\n    NOT_CONTAINS: 'notContains',\n    STARTS_WITH: 'startsWith',\n    ENDS_WITH: 'endsWith'\n};\n\nexport let FILTER_VIEW = {\n    NUMERIC: 'splmTableNumericColumnMenu',\n    DATE: 'splmTableDateColumnMenu',\n    TEXT: 'splmTableTextColumnMenu'\n};\n\n/**\n * Adds the new column filter tot he columnFilters input.\n *\n * @param {Array} columnFilters - Collection of all the column filters\n * @param {Object} newColumnFilters - The new column filter to apply\n * @returns {Array} columnFilters\n */\nexport let addOrReplaceColumnFilter = function( columnFilters, newColumnFilters ) {\n    columnFilters = columnFilters || [];\n\n    if( _.isArray( newColumnFilters ) && newColumnFilters.length ) {\n        exports.removeColumnFilter( columnFilters, newColumnFilters[ 0 ].columnName );\n        columnFilters = columnFilters.concat( newColumnFilters );\n    }\n\n    return columnFilters;\n};\n\n/**\n * Removes the column filters that are applied to the column by name.\n *\n * @param {Array} columnFilters - Collection of all the column filters\n * @param {String} columnName - The name of the column\n * @returns {Boolean} whether a filter was removed or not\n */\nexport let removeColumnFilter = function( columnFilters, columnName ) {\n    var isFilterRemoved = false;\n    if( columnFilters && columnFilters.length && columnName ) {\n        _.remove( columnFilters, function( currentFilter ) {\n            if( currentFilter.columnName === columnName ) {\n                isFilterRemoved = true;\n                return true;\n            }\n            return false;\n        } );\n    }\n    return isFilterRemoved;\n};\n\n/**\n * Builds a basic column filter used for all filter types.\n *\n * @param {String} columnName - Column name the filter is applied to\n * @param {Array} values - Filter values\n *\n * @returns {Object} filter object\n */\nexport let createBasicColumnFilter = function( columnName, values ) {\n    var returnFilter = {\n        columnName: columnName\n    };\n\n    var filterValues = [];\n    _.forEach( values, function( currentValue ) {\n        var stringValue = _( currentValue ).toString();\n        filterValues.push( stringValue );\n    } );\n    returnFilter.values = filterValues;\n\n    return returnFilter;\n};\n\n/**\n * Create a filter based on the operation and values.\n *\n * @param {String} operation - operation name of the filter\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createFilter = function( operation, columnName, values ) {\n    var columnFilter = exports.createBasicColumnFilter( columnName, values );\n    columnFilter.operation = operation;\n    return columnFilter;\n};\n\n/**\n * Create a 'Contains' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createContainsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.CONTAINS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Does not contain' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createNotContainsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.NOT_CONTAINS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Range' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createRangeFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.RANGE;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Less Than or Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createLessThanEqualsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.LESS_EQUALS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Less Than' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createLessThanFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.LESS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Greater Than Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createGreaterThanEqualsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.GREATER_EQUALS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Greater Than' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createGreaterThanFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.GREATER;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createEqualsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.EQUALS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a case sensitive 'Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createCaseSensitiveEqualsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.CASE_SENSITIVE_EQUALS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Not Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createNotEqualsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.NOT_EQUALS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a case sensitive 'Not Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createCaseSensitiveNotEqualsFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Starts With' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createStartsWithFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.STARTS_WITH;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Create a 'Starts With' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */\nexport let createEndsWithFilter = function( columnName, values ) {\n    var operation = exports.OPERATION_TYPE.ENDS_WITH;\n    return exports.createFilter( operation, columnName, values );\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Range'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidRangeColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 2 &&\n        columnFilter.operation === exports.OPERATION_TYPE.RANGE;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Contains'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidContainsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.CONTAINS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Does not contain'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidNotContainsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.NOT_CONTAINS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidEqualsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.EQUALS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for case sensitive 'Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidCaseSensitiveEqualsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.CASE_SENSITIVE_EQUALS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Not Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidNotEqualsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.NOT_EQUALS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for case sensitive 'Not Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidCaseSensitiveNotEqualsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Less Than'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidLessThanColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.LESS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Less Than or Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidLessThanEqualsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.LESS_EQUALS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Greater Than'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidGreaterThanColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 && columnFilter.operation === exports.OPERATION_TYPE.GREATER;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Greater Than or Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidGreaterThanEqualsColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.GREATER_EQUALS;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Begins with'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidStartsWithColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.STARTS_WITH;\n};\n\n/**\n * Test the column filter object to make sure it has the valid information for 'Ends with'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */\nexport let isValidEndsWithColumnFilter = function( columnFilter ) {\n    return columnFilter &&\n        columnFilter.values &&\n        columnFilter.values.length === 1 &&\n        columnFilter.operation === exports.OPERATION_TYPE.ENDS_WITH;\n};\n\nexports = {\n    OPERATION_TYPE,\n    FILTER_VIEW,\n    addOrReplaceColumnFilter,\n    removeColumnFilter,\n    createBasicColumnFilter,\n    createFilter,\n    createContainsFilter,\n    createNotContainsFilter,\n    createRangeFilter,\n    createLessThanEqualsFilter,\n    createLessThanFilter,\n    createGreaterThanEqualsFilter,\n    createGreaterThanFilter,\n    createEqualsFilter,\n    createCaseSensitiveEqualsFilter,\n    createNotEqualsFilter,\n    createCaseSensitiveNotEqualsFilter,\n    createStartsWithFilter,\n    createEndsWithFilter,\n    isValidRangeColumnFilter,\n    isValidContainsColumnFilter,\n    isValidNotContainsColumnFilter,\n    isValidEqualsColumnFilter,\n    isValidCaseSensitiveEqualsColumnFilter,\n    isValidNotEqualsColumnFilter,\n    isValidCaseSensitiveNotEqualsColumnFilter,\n    isValidLessThanColumnFilter,\n    isValidLessThanEqualsColumnFilter,\n    isValidGreaterThanColumnFilter,\n    isValidGreaterThanEqualsColumnFilter,\n    isValidStartsWithColumnFilter,\n    isValidEndsWithColumnFilter\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
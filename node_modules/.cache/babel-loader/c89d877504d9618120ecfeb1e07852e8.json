{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwPatternService.js\";\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport modelPropertyService from 'js/modelPropertyService';\nimport uwPropertyService from 'js/uwPropertyService';\nimport localeService from 'js/localeService';\nimport logger from 'js/logger';\nimport { noop } from 'js/declUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialize = (elementRefList, prop) => {\n  let assignBtnTitle = null;\n  let isSinglePattern = false;\n  let isMultiplePattern = false;\n  let patternProp = null;\n  let selectedPattern = null;\n\n  if (prop.patterns && _.isArray(prop.patterns)) {\n    if (prop.patterns.length === 1) {\n      isSinglePattern = true;\n    } else if (prop.patterns.length > 1) {\n      isMultiplePattern = true; // Create a view model property for the patterns drop down\n\n      var listBoxProp = {\n        type: 'STRING'\n      };\n      patternProp = modelPropertyService.createViewModelProperty(listBoxProp); // Set the default value on the view model prop\n\n      if (prop.preferredPattern && prop.patterns.indexOf(prop.preferredPattern) !== -1) {\n        patternProp.dbValue = prop.preferredPattern;\n      } else {\n        patternProp.dbValue = prop.patterns[0];\n      }\n\n      selectedPattern = patternProp.dbValue;\n    }\n  } else if (prop.patternAutoAssignFlags && !_.isUndefined(prop.preferredPattern)) {\n    selectedPattern = prop.preferredPattern;\n  }\n\n  let p1 = localeService.getLocalizedText('awAddDirectiveMessages', 'assignButtonTitle').then(function (result) {\n    assignBtnTitle = result;\n  });\n  return Promise.all([p1]).then(() => {\n    return {\n      patternProp,\n      selectedPattern,\n      isSinglePattern,\n      isMultiplePattern,\n      assignBtnTitle\n    };\n  });\n};\n\nconst updatePatternState = (dispatch, value, data) => {\n  let updateValue = {\n    selectedPattern: value,\n    patternProp: { ...data._states.patternProp,\n      dbValue: value\n    }\n  };\n  dispatch({\n    path: 'data._states',\n    value: { ...data._states,\n      ...updateValue\n    }\n  });\n};\n/**\n * render function for awPattern\n * @returns {JSX.Element} react component\n */\n\n\nexport const awPatternRenderFunction = _ref => {\n  let {\n    prop,\n    actions,\n    viewModel,\n    elementRefList\n  } = _ref;\n  let {\n    dropDown\n  } = actions;\n  let {\n    data,\n    dispatch\n  } = viewModel;\n  let {\n    patternProp,\n    selectedPattern,\n    isSinglePattern,\n    isMultiplePattern,\n    assignBtnTitle\n  } = data ? data._states || {} : {};\n\n  if (!prop) {\n    logger.warn('AwPattern prop is undefined.');\n    return;\n  }\n\n  let autoAssign = prop.fielddata && prop.fielddata.isAutoAssign === false && prop.fielddata.patternAutoAssignFlags && prop.fielddata.patternAutoAssignFlags[selectedPattern] === true || isSinglePattern && prop.fielddata && prop.fielddata.patternAutoAssignFlags && prop.fielddata.patternAutoAssignFlags[prop.fielddata.patterns[0]] === true; // onClick handler\n\n  const setSelectedPatternHandler = function (event, pattern) {\n    if (event.key && event.key !== 'Enter') {\n      return;\n    } // case click or enter\n\n\n    let newValue = pattern;\n    let oldValue = patternProp && patternProp.dbValue;\n\n    if (!_.isUndefined(newValue) && newValue !== oldValue && prop.fielddata.patterns.indexOf(newValue) > -1 && newValue !== selectedPattern) {\n      updatePatternState(dispatch, newValue, data);\n\n      if (prop.fielddata.isAutoAssign === undefined || prop.fielddata.isAutoAssign === true || prop.fielddata.isAutoAssignable === true) {\n        const publishData = {\n          prop: prop,\n          newPattern: newValue\n        };\n        eventBus.publish('awPattern.newPatternSelected', publishData);\n\n        if (prop && prop.fielddata && prop.fielddata.action) {\n          // defer is added to let the render cycle complete\n          _.defer(function () {\n            prop.fielddata.action(publishData);\n          });\n        }\n\n        if (prop.onChange) {\n          event.target.value = newValue;\n          prop.onChange(event);\n        }\n      } else {\n        uwPropertyService.setValue(prop, '');\n      }\n    }\n\n    dropDown.hide();\n  };\n\n  const toggleDropdown = function (event) {\n    if (event.key && event.key !== 'Enter') {\n      return;\n    } // case click or enter\n\n\n    dropDown.show({\n      reference: elementRefList.get('input').current,\n      width: elementRefList.get('input').current.offsetWidth\n    });\n  }; // The function will read the pattern from patternProp and will publish an event which will generate the next value as per the pattern\n\n\n  const autoAssignIDs = function () {\n    var pattern = prop.fielddata.preferredPattern;\n\n    if (patternProp && patternProp.dbValue) {\n      pattern = patternProp.dbValue;\n    }\n\n    const publishData = {\n      prop,\n      newPattern: pattern\n    };\n    eventBus.publish('awPattern.newPatternSelected', publishData);\n\n    if (prop && prop.fielddata && prop.fielddata.action) {\n      // defer is added to let the render cycle complete\n      _.defer(function () {\n        prop.fielddata.action(publishData);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aw-widgets-namingRuleGroup\",\n    children: [isSinglePattern && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-widgets-propertylabel\",\n      children: prop.fielddata.patterns[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 30\n    }, this), isMultiplePattern && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-layout-flexRowContainer aw-widget-iconParent\",\n      onClick: toggleDropdown,\n      role: \"button\",\n      tabIndex: \"0\",\n      onKeyPress: toggleDropdown,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: elementRefList.get('input'),\n        type: \"text\",\n        value: patternProp && patternProp.dbValue,\n        onChange: noop,\n        className: dropDown.open ? 'aw-jswidgets-choice aw-jswidgets-expanded' : 'aw-jswidgets-choice'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AwIcon, {\n        iconId: \"miscChevronDown\",\n        className: \"aw-widget-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 32\n    }, this), autoAssign && /*#__PURE__*/_jsxDEV(AwButton, {\n      className: \"aw-widgets-assignIdButton\",\n      action: autoAssignIDs,\n      children: assignBtnTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 24\n    }, this), dropDown.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...dropDown.options,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-base-scrollPanel\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          role: \"listbox\",\n          tabIndex: 0,\n          className: \"sw-column\",\n          children: prop.fielddata.patterns.map(pattern => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sw-aria-border aw-widgets-cellListItem aw-widgets-cellTop\",\n                onClick: event => setSelectedPatternHandler(event, pattern),\n                role: \"button\",\n                tabIndex: \"0\",\n                onKeyPress: event => setSelectedPatternHandler(event, pattern),\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"sw-row\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"sw-cell-valName\",\n                    title: pattern,\n                    children: pattern\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 180,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 29\n              }, this)\n            }, pattern, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 12\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwPatternService.js"],"names":["initialize","assignBtnTitle","isSinglePattern","isMultiplePattern","patternProp","selectedPattern","prop","_","listBoxProp","type","modelPropertyService","p1","updatePatternState","updateValue","data","dbValue","value","dispatch","path","awPatternRenderFunction","elementRefList","dropDown","logger","autoAssign","setSelectedPatternHandler","event","newValue","oldValue","publishData","newPattern","eventBus","uwPropertyService","toggleDropdown","reference","width","offsetWidth","autoAssignIDs","pattern"],"mappings":"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","sourcesContent":["import AwIcon from 'viewmodel/AwIconViewModel';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport modelPropertyService from 'js/modelPropertyService';\nimport uwPropertyService from 'js/uwPropertyService';\nimport localeService from 'js/localeService';\nimport logger from 'js/logger';\nimport { noop } from 'js/declUtils';\n\nexport const initialize = ( elementRefList, prop ) => {\n    let assignBtnTitle = null;\n    let isSinglePattern = false;\n    let isMultiplePattern = false;\n    let patternProp = null;\n    let selectedPattern = null;\n\n    if( prop.patterns && _.isArray( prop.patterns ) ) {\n        if( prop.patterns.length === 1 ) {\n            isSinglePattern = true;\n        } else if( prop.patterns.length > 1 ) {\n            isMultiplePattern = true;\n\n            // Create a view model property for the patterns drop down\n            var listBoxProp = {\n                type: 'STRING'\n            };\n\n            patternProp = modelPropertyService.createViewModelProperty( listBoxProp );\n\n            // Set the default value on the view model prop\n            if( prop.preferredPattern &&\n                prop.patterns.indexOf( prop.preferredPattern ) !== -1 ) {\n                patternProp.dbValue = prop.preferredPattern;\n            } else {\n                patternProp.dbValue = prop.patterns[ 0 ];\n            }\n            selectedPattern = patternProp.dbValue;\n        }\n    } else if( prop.patternAutoAssignFlags && !_.isUndefined( prop.preferredPattern ) ) {\n        selectedPattern = prop.preferredPattern;\n    }\n\n    let p1 = localeService.getLocalizedText( 'awAddDirectiveMessages', 'assignButtonTitle' ).then( function( result ) {\n        assignBtnTitle = result;\n    } );\n\n    return Promise.all( [ p1 ] ).then( () => {\n        return {\n            patternProp,\n            selectedPattern,\n            isSinglePattern,\n            isMultiplePattern,\n            assignBtnTitle\n        };\n    } );\n};\n\nconst updatePatternState = ( dispatch, value, data ) => {\n    let updateValue = {\n        selectedPattern: value,\n        patternProp: { ...data._states.patternProp, dbValue: value }\n    };\n    dispatch( { path: 'data._states', value: { ...data._states, ...updateValue } } );\n};\n\n/**\n * render function for awPattern\n * @returns {JSX.Element} react component\n */\nexport const awPatternRenderFunction = ( { prop, actions, viewModel, elementRefList } ) => {\n    let { dropDown } = actions;\n    let { data, dispatch } = viewModel;\n    let {\n        patternProp,\n        selectedPattern,\n        isSinglePattern,\n        isMultiplePattern,\n        assignBtnTitle\n    } = data ? data._states || {} : {};\n\n    if( !prop ) {\n        logger.warn( 'AwPattern prop is undefined.' );\n        return;\n    }\n\n    let autoAssign = prop.fielddata && prop.fielddata.isAutoAssign === false && prop.fielddata.patternAutoAssignFlags && prop.fielddata.patternAutoAssignFlags[ selectedPattern ] === true ||\n        isSinglePattern && prop.fielddata && prop.fielddata.patternAutoAssignFlags && prop.fielddata.patternAutoAssignFlags[ prop.fielddata.patterns[ 0 ] ] === true;\n\n    // onClick handler\n    const setSelectedPatternHandler = function( event, pattern ) {\n        if( event.key && event.key !== 'Enter' ) {\n            return;\n        }\n\n        // case click or enter\n        let newValue = pattern;\n        let oldValue = patternProp && patternProp.dbValue;\n        if( !_.isUndefined( newValue ) && newValue !== oldValue &&\n            prop.fielddata.patterns.indexOf( newValue ) > -1 &&\n            newValue !== selectedPattern ) {\n            updatePatternState( dispatch, newValue, data );\n            if( prop.fielddata.isAutoAssign === undefined || prop.fielddata.isAutoAssign === true || prop.fielddata.isAutoAssignable === true ) {\n                const publishData = {\n                    prop: prop,\n                    newPattern: newValue\n                };\n                eventBus.publish( 'awPattern.newPatternSelected', publishData );\n                if( prop && prop.fielddata && prop.fielddata.action ) {\n                    // defer is added to let the render cycle complete\n                    _.defer( function() {\n                        prop.fielddata.action( publishData );\n                    } );\n                }\n                if( prop.onChange ) {\n                    event.target.value = newValue;\n                    prop.onChange( event );\n                }\n            } else {\n                uwPropertyService.setValue( prop, '' );\n            }\n        }\n\n        dropDown.hide();\n    };\n    const toggleDropdown = function( event ) {\n        if( event.key && event.key !== 'Enter' ) {\n            return;\n        }\n\n        // case click or enter\n        dropDown.show( {\n            reference: elementRefList.get( 'input' ).current,\n            width: elementRefList.get( 'input' ).current.offsetWidth\n        } );\n    };\n\n    // The function will read the pattern from patternProp and will publish an event which will generate the next value as per the pattern\n    const autoAssignIDs = function() {\n        var pattern = prop.fielddata.preferredPattern;\n        if( patternProp && patternProp.dbValue ) {\n            pattern = patternProp.dbValue;\n        }\n        const publishData = {\n            prop,\n            newPattern: pattern\n        };\n        eventBus.publish( 'awPattern.newPatternSelected', publishData );\n        if( prop && prop.fielddata && prop.fielddata.action ) {\n            // defer is added to let the render cycle complete\n            _.defer( function() {\n                prop.fielddata.action( publishData );\n            } );\n        }\n    };\n\n    return <div className='aw-widgets-namingRuleGroup'>\n        { isSinglePattern && <div className='aw-widgets-propertylabel'>{prop.fielddata.patterns[0]}</div>}\n        { isMultiplePattern && <div className='aw-layout-flexRowContainer aw-widget-iconParent' onClick={toggleDropdown} role='button'\n            tabIndex='0' onKeyPress={toggleDropdown}>\n            <input ref={elementRefList.get( 'input' )}\n                type='text'\n                value={patternProp && patternProp.dbValue}\n                onChange={noop}\n                className={dropDown.open ? 'aw-jswidgets-choice aw-jswidgets-expanded' : 'aw-jswidgets-choice'}/>\n            <AwIcon iconId='miscChevronDown' className='aw-widget-icon'></AwIcon>\n        </div>}\n\n        {autoAssign && <AwButton className='aw-widgets-assignIdButton' action={autoAssignIDs}>{ assignBtnTitle }</AwButton> }\n\n        {dropDown.open && <AwPopup {...dropDown.options}>\n            <div className='aw-base-scrollPanel'>\n                <ul role='listbox' tabIndex={0}  className='sw-column'>\n                    {prop.fielddata.patterns.map( ( pattern )=>{\n                        return <li key={pattern}>\n                            <div className='sw-aria-border aw-widgets-cellListItem aw-widgets-cellTop' onClick={( event )=>setSelectedPatternHandler( event, pattern )} role='button'\n                                tabIndex='0' onKeyPress={( event )=>setSelectedPatternHandler( event, pattern )}>\n                                <div className='sw-row'>\n                                    <div className='sw-cell-valName' title={pattern}>{pattern}</div>\n                                </div>\n                            </div>\n                        </li>;\n                    } )}\n                </ul>\n            </div>\n        </AwPopup>}\n    </div>;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\pltable\\\\src\\\\js\\\\AwSplmTableService.js\";\n// Copyright (c) 2021 Siemens\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport { AwServerVisibilityPopupCommandBar } from 'js/AwServerVisibilityCommandBarService';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport SplmTableCellEditor from 'viewmodel/SplmTableCellEditorViewModel';\nimport awSPLMTableNativeService from 'js/awSPLMTableNativeService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getColumnMenuName = gridContextPlaceholder => {\n  let columnMenuName = 'splmTableTextColumnMenu';\n\n  if (gridContextPlaceholder.columnDef && gridContextPlaceholder.columnDef.filter && gridContextPlaceholder.columnDef.filter.view) {\n    columnMenuName = gridContextPlaceholder.columnDef.filter.view;\n  }\n\n  return columnMenuName;\n};\n\nexport const initializeTable = (elemRefList, props) => {\n  if (props.reusable === 'true') {\n    var dataCtxNode = props.dataCtxNode; //updating dataCtxNode with props\n\n    if (props.propsCallback) {\n      dataCtxNode.props = props.propsCallback();\n      dataCtxNode.getProps = props.propsCallback;\n    }\n\n    return awSPLMTableNativeService.initializeTable(elemRefList.get('tableElem').current, props.dataProviderInstance.vmCollectionObj.vmCollection, dataCtxNode, props);\n  }\n};\nexport const updateTableData = (tableCallbacks, vmCollection, props) => {\n  if (tableCallbacks && props.reusable === 'true') {\n    tableCallbacks.updateVmCollection(vmCollection);\n  }\n};\nexport const updateSortDirection = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateSortDirection(props.gridContextPlaceholder.currentColumnIndex, props.gridContextPlaceholder.newColumnIndex, props.gridContextPlaceholder.sortDirection);\n  }\n};\nexport const updatePinColumn = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updatePinColumn(props.gridContextPlaceholder.pinColumnData.columnDef, props.gridContextPlaceholder.pinColumnData.isFreezeAction, props.gridContextPlaceholder.pinColumnData.defaultColumnPinIndex);\n  }\n};\nexport const updateDynamicRowHeightStatus = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateDynamicRowHeight(props.gridContextPlaceholder.dynamicRowHeightStatus);\n  }\n};\nexport const hideColumn = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.hideColumn(props.gridContextPlaceholder.hideColumnField);\n  }\n};\nexport const columnFilterApplied = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.columnFilterApplied(props.gridContextPlaceholder.columnFilterInfo);\n  }\n};\nexport const columnsArranged = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.columnsArranged(props.gridContextPlaceholder.columnArrangeData);\n  }\n};\nexport const updateColumnMenuData = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateColumnMenuData(props.gridContextPlaceholder.columnMenuData);\n  }\n};\nexport const updateEditState = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateEditState(props);\n  }\n};\nexport const updateTableColumns = (tableCallbacks, props) => {\n  if (tableCallbacks) {\n    tableCallbacks.updateTableColumns(props.dataProviderInstance.columnConfig.columns);\n  }\n};\nexport const editStateUpdated = tableCallbacks => {\n  if (tableCallbacks) {\n    tableCallbacks.editStateUpdated();\n  }\n};\nexport const destroyTable = (tableCallbacks, props) => {\n  if (tableCallbacks && props.reusable === 'true') {\n    tableCallbacks.destroy();\n  }\n};\nexport const setMultiSelectionEnabledInTable = props => {\n  if (props && props.dataProviderInstance) {\n    if (props.showCheckBox) {\n      props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(true);\n    } else {\n      props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(false);\n    }\n  }\n};\nexport const refreshTable = tableCallbacks => {\n  if (tableCallbacks) {\n    tableCallbacks.refreshTable();\n  }\n};\nexport const updateGridOptions = (tableCallbacks, props) => {\n  if (tableCallbacks && props) {\n    tableCallbacks.updateGridOptionsForTableInstance(props);\n  }\n};\nexport const handleSelectionChange = (tableCallbacks, props) => {\n  if (tableCallbacks && props && props.reusable === 'true' && props.selectionData) {\n    tableCallbacks.updateContentRowSelection();\n  }\n};\nexport const selectRows = (tableCallbacks, props) => {\n  if (tableCallbacks && props && props.reusable === 'true' && props.selectionData && props.dataProviderInstance && props.dataProviderInstance.selectionModel) {\n    let resetSelectRows = false;\n\n    if (props.tableContext && props.tableContext.selectRows && props.tableContext.selectRows.value === 'all') {\n      props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(true);\n      props.dataProviderInstance.selectAll();\n      resetSelectRows = true;\n      tableCallbacks.updateContentRowSelection();\n    } else if (props.tableContext && props.tableContext.selectRows && props.tableContext.selectRows.value === 'none') {\n      // When we do de-selectAll and also showCheckBoxes are still opened, we should not reset multiSelection to false.\n      // MultiSelection should be set to false when checkBoxes are not shown and when selections are cleared.\n      if (props.showCheckBox !== true) {\n        props.dataProviderInstance.selectionModel.setMultiSelectionEnabled(false);\n      }\n\n      props.dataProviderInstance.selectNone();\n      resetSelectRows = true;\n      tableCallbacks.updateContentRowSelection();\n    } // Reset selectRows State. This is needed when the table goes for re-render for some state updates, we should not be doing all or none again.\n\n\n    if (resetSelectRows) {\n      let newSelectRows = { ...props.tableContext.selectRows.getValue()\n      };\n      newSelectRows.value = '';\n      props.tableContext.selectRows.update(newSelectRows);\n    }\n  }\n};\n/**\n * render function for AwSplmTable\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nexport const awSplmTableRenderFunction = props => {\n  const {\n    columnProviderInstance,\n    dataProviderInstance,\n    gridid,\n    gridOptions,\n    actions,\n    gridContextPlaceholder,\n    dataCtxNode,\n    ctx,\n    commandContext = {},\n    elementRefList,\n    gridContextDispatcher\n  } = props;\n  const element = props.reusable === 'true' ? elementRefList.get('tableElem') : dataProviderInstance.getRootReference();\n  const commandOverrides = dataProviderInstance.getCommandOverrides(); // Add popups to gridOptions so table can call popup.show()/popup.hide()\n\n  gridOptions.popupContext = {\n    columnMenuPopup: actions.columnMenuPopup,\n    gridMenuPopup: actions.gridMenuPopup,\n    contextMenuPopup: actions.contextMenuPopup,\n    editArrayPopup: actions.editArrayPopup\n  }; // add support for vmo\n\n  const isArrangeSupported = columnProviderInstance.isArrangeSupported();\n  const isNarrowMode = narrowModeService.isNarrowMode();\n  const gridMenuContext = {\n    anchor: commandOverrides.gridMenuCommandsAnchor ? commandOverrides.gridMenuCommandsAnchor : 'aw_gridMenu',\n    dataProvider: dataProviderInstance,\n    columnProvider: columnProviderInstance,\n    gridId: gridid,\n    gridOptions: gridOptions,\n    isArrangeSupported: isArrangeSupported,\n    isNarrowMode: isNarrowMode,\n    isColumnFilterApplied: dataProviderInstance.isColumnFilterApplied,\n    gridContextDispatcher: gridContextDispatcher,\n    gridContext: gridContextPlaceholder,\n    ...commandContext\n  }; //commandContext should have information about selected vmo. This is needed for application command condition use-case.\n  //Pass the currently selected object from table to the context menu command bar context instead of relying on ctx.mselected.\n\n  commandContext.selected = gridContextPlaceholder.contextVmo && gridContextPlaceholder.contextVmo.length ? gridContextPlaceholder.contextVmo : ctx.mselected;\n  const contextAnchor = commandOverrides.contextMenuCommandsAnchor ? commandOverrides.contextMenuCommandsAnchor : 'aw_contextMenu2';\n  const contextMenuContext = {\n    anchor: contextAnchor,\n    dataProvider: dataProviderInstance,\n    columnProvider: columnProviderInstance,\n    gridId: gridid,\n    gridOptions: gridOptions,\n    gridContext: gridContextPlaceholder,\n    ...commandContext\n  };\n  const isPinningEnabled = gridOptions.enablePinning !== false;\n\n  const getFilterFacetsAction = async filterFacetInput => {\n    return await dataProviderInstance.getFilterFacets(dataCtxNode.data, filterFacetInput);\n  }; //commandContext should have information about selected columnDef. This is needed for application command condition use-case.\n\n\n  commandContext.columnDef = gridContextPlaceholder.columnDef;\n  const columnMenuContext = {\n    anchor: commandOverrides.columnMenuCommandsAnchor ? commandOverrides.columnMenuCommandsAnchor : 'aw_splmTable_columnMenu',\n    dataProvider: dataProviderInstance,\n    columnProvider: columnProviderInstance,\n    gridId: gridid,\n    gridContext: gridContextPlaceholder,\n    gridContextDispatcher: gridContextDispatcher,\n    menuId: gridid + '_menu',\n    menuContainerId: gridid + '_menuContainer',\n    gridOptions: gridOptions,\n    isArrangeSupported: isArrangeSupported,\n    isPinningEnabled: isPinningEnabled,\n    sortCriteria: columnProviderInstance.getSortCriteria(),\n    hasFilterFacetAction: dataProviderInstance.getFilterFacets && dataProviderInstance.filterFacetAction,\n    getFilterFacetsAction: getFilterFacetsAction,\n    existingColumnFilters: columnProviderInstance.getColumnFilters(),\n    ...dataCtxNode.data.subPanelContext,\n    ...commandContext\n  };\n\n  const childCommandCLickCallback = function (hasPopup) {\n    if (hasPopup) {\n      return;\n    }\n\n    actions.contextMenuPopup.hide();\n  };\n\n  const columnMenuName = getColumnMenuName(gridContextPlaceholder);\n  return /*#__PURE__*/_jsxDEV(\"aw-splm-table\", {\n    ref: element,\n    children: [actions.columnMenuPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.columnMenuPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: columnMenuName,\n        subPanelContext: columnMenuContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 95\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 49\n    }, this), \" \", actions.gridMenuPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.gridMenuPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwPopupCommandBar, {\n        anchor: gridMenuContext.anchor,\n        context: gridMenuContext,\n        childCommandClickCallback: actions.gridMenuPopup.hide,\n        class: \"grid-menu-command\",\n        alignment: \"HORIZONTAL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 47\n    }, this), \" \", actions.contextMenuPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.contextMenuPopup.options,\n      children: /*#__PURE__*/_jsxDEV(AwServerVisibilityPopupCommandBar, {\n        anchor: contextAnchor,\n        context: contextMenuContext,\n        childCommandClickCallback: childCommandCLickCallback,\n        mselected: commandContext.selected,\n        pselected: ctx.pselected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 50\n    }, this), \" \", actions.editArrayPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...actions.editArrayPopup.options,\n      children: /*#__PURE__*/_jsxDEV(SplmTableCellEditor, {\n        vmo: gridContextPlaceholder.editVmo,\n        name: gridContextPlaceholder.editPropertyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"names":["AwPopup","AwPopupCommandBar","AwServerVisibilityPopupCommandBar","AwInclude","narrowModeService","SplmTableCellEditor","awSPLMTableNativeService","getColumnMenuName","gridContextPlaceholder","columnMenuName","columnDef","filter","view","initializeTable","elemRefList","props","reusable","dataCtxNode","propsCallback","getProps","get","current","dataProviderInstance","vmCollectionObj","vmCollection","updateTableData","tableCallbacks","updateVmCollection","updateSortDirection","currentColumnIndex","newColumnIndex","sortDirection","updatePinColumn","pinColumnData","isFreezeAction","defaultColumnPinIndex","updateDynamicRowHeightStatus","updateDynamicRowHeight","dynamicRowHeightStatus","hideColumn","hideColumnField","columnFilterApplied","columnFilterInfo","columnsArranged","columnArrangeData","updateColumnMenuData","columnMenuData","updateEditState","updateTableColumns","columnConfig","columns","editStateUpdated","destroyTable","destroy","setMultiSelectionEnabledInTable","showCheckBox","selectionModel","setMultiSelectionEnabled","refreshTable","updateGridOptions","updateGridOptionsForTableInstance","handleSelectionChange","selectionData","updateContentRowSelection","selectRows","resetSelectRows","tableContext","value","selectAll","selectNone","newSelectRows","getValue","update","awSplmTableRenderFunction","columnProviderInstance","gridid","gridOptions","actions","ctx","commandContext","elementRefList","gridContextDispatcher","element","getRootReference","commandOverrides","getCommandOverrides","popupContext","columnMenuPopup","gridMenuPopup","contextMenuPopup","editArrayPopup","isArrangeSupported","isNarrowMode","gridMenuContext","anchor","gridMenuCommandsAnchor","dataProvider","columnProvider","gridId","isColumnFilterApplied","gridContext","selected","contextVmo","length","mselected","contextAnchor","contextMenuCommandsAnchor","contextMenuContext","isPinningEnabled","enablePinning","getFilterFacetsAction","filterFacetInput","getFilterFacets","data","columnMenuContext","columnMenuCommandsAnchor","menuId","menuContainerId","sortCriteria","getSortCriteria","hasFilterFacetAction","filterFacetAction","existingColumnFilters","getColumnFilters","subPanelContext","childCommandCLickCallback","hasPopup","hide","open","options","pselected","editVmo","editPropertyName"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/AwSplmTableService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport { AwServerVisibilityPopupCommandBar } from 'js/AwServerVisibilityCommandBarService';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport SplmTableCellEditor from 'viewmodel/SplmTableCellEditorViewModel';\nimport awSPLMTableNativeService from 'js/awSPLMTableNativeService';\n\nconst getColumnMenuName = ( gridContextPlaceholder ) => {\n    let columnMenuName = 'splmTableTextColumnMenu';\n    if( gridContextPlaceholder.columnDef && gridContextPlaceholder.columnDef.filter && gridContextPlaceholder.columnDef.filter.view ) {\n        columnMenuName = gridContextPlaceholder.columnDef.filter.view;\n    }\n    return columnMenuName;\n};\n\nexport const initializeTable = ( elemRefList, props ) => {\n    if( props.reusable === 'true' ) {\n        var dataCtxNode = props.dataCtxNode;\n        //updating dataCtxNode with props\n        if( props.propsCallback ) {\n            dataCtxNode.props = props.propsCallback();\n            dataCtxNode.getProps = props.propsCallback;\n        }\n        return awSPLMTableNativeService.initializeTable( elemRefList.get( 'tableElem' ).current,\n            props.dataProviderInstance.vmCollectionObj.vmCollection, dataCtxNode, props );\n    }\n};\n\nexport const updateTableData = ( tableCallbacks, vmCollection, props ) => {\n    if( tableCallbacks && props.reusable === 'true' ) {\n        tableCallbacks.updateVmCollection( vmCollection );\n    }\n};\n\nexport const updateSortDirection = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateSortDirection( props.gridContextPlaceholder.currentColumnIndex, props.gridContextPlaceholder.newColumnIndex, props.gridContextPlaceholder.sortDirection );\n    }\n};\n\nexport const updatePinColumn = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updatePinColumn( props.gridContextPlaceholder.pinColumnData.columnDef, props.gridContextPlaceholder.pinColumnData.isFreezeAction,\n            props.gridContextPlaceholder.pinColumnData.defaultColumnPinIndex );\n    }\n};\n\nexport const updateDynamicRowHeightStatus = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateDynamicRowHeight( props.gridContextPlaceholder.dynamicRowHeightStatus );\n    }\n};\n\nexport const hideColumn = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.hideColumn( props.gridContextPlaceholder.hideColumnField );\n    }\n};\n\nexport const columnFilterApplied = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.columnFilterApplied( props.gridContextPlaceholder.columnFilterInfo );\n    }\n};\n\nexport const columnsArranged = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.columnsArranged( props.gridContextPlaceholder.columnArrangeData );\n    }\n};\n\nexport const updateColumnMenuData = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateColumnMenuData( props.gridContextPlaceholder.columnMenuData );\n    }\n};\n\nexport const updateEditState = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateEditState( props );\n    }\n};\n\nexport const updateTableColumns = ( tableCallbacks, props ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.updateTableColumns( props.dataProviderInstance.columnConfig.columns );\n    }\n};\n\nexport const editStateUpdated = ( tableCallbacks ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.editStateUpdated();\n    }\n};\n\nexport const destroyTable = ( tableCallbacks, props ) => {\n    if( tableCallbacks && props.reusable === 'true' ) {\n        tableCallbacks.destroy();\n    }\n};\n\nexport const setMultiSelectionEnabledInTable = ( props ) => {\n    if( props && props.dataProviderInstance ) {\n        if( props.showCheckBox ) {\n            props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( true );\n        } else {\n            props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( false );\n        }\n    }\n};\n\nexport const refreshTable = ( tableCallbacks ) => {\n    if( tableCallbacks ) {\n        tableCallbacks.refreshTable();\n    }\n};\n\nexport const updateGridOptions = ( tableCallbacks, props ) => {\n    if( tableCallbacks && props ) {\n        tableCallbacks.updateGridOptionsForTableInstance( props );\n    }\n};\n\nexport const handleSelectionChange = ( tableCallbacks, props ) => {\n    if( tableCallbacks && props && props.reusable === 'true' && props.selectionData ) {\n        tableCallbacks.updateContentRowSelection();\n    }\n};\n\nexport const selectRows = ( tableCallbacks, props ) => {\n    if ( tableCallbacks && props && props.reusable === 'true' && props.selectionData && props.dataProviderInstance &&\n             props.dataProviderInstance.selectionModel ) {\n        let resetSelectRows = false;\n        if ( props.tableContext && props.tableContext.selectRows &&  props.tableContext.selectRows.value === 'all'  ) {\n            props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( true );\n            props.dataProviderInstance.selectAll();\n            resetSelectRows = true;\n            tableCallbacks.updateContentRowSelection();\n        }else if( props.tableContext && props.tableContext.selectRows && props.tableContext.selectRows.value === 'none' ) {\n            // When we do de-selectAll and also showCheckBoxes are still opened, we should not reset multiSelection to false.\n            // MultiSelection should be set to false when checkBoxes are not shown and when selections are cleared.\n            if ( props.showCheckBox !== true ) {\n                props.dataProviderInstance.selectionModel.setMultiSelectionEnabled( false );\n            }\n            props.dataProviderInstance.selectNone();\n            resetSelectRows = true;\n            tableCallbacks.updateContentRowSelection();\n        }\n        // Reset selectRows State. This is needed when the table goes for re-render for some state updates, we should not be doing all or none again.\n        if ( resetSelectRows ) {\n            let newSelectRows = { ...props.tableContext.selectRows.getValue() };\n            newSelectRows.value = '';\n            props.tableContext.selectRows.update( newSelectRows );\n        }\n    }\n};\n\n/**\n * render function for AwSplmTable\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awSplmTableRenderFunction = ( props ) => {\n    const { columnProviderInstance, dataProviderInstance, gridid, gridOptions, actions, gridContextPlaceholder, dataCtxNode, ctx, commandContext = {},\n        elementRefList, gridContextDispatcher } = props;\n    const element = props.reusable === 'true' ? elementRefList.get( 'tableElem' ) : dataProviderInstance.getRootReference();\n    const commandOverrides = dataProviderInstance.getCommandOverrides();\n\n    // Add popups to gridOptions so table can call popup.show()/popup.hide()\n    gridOptions.popupContext = {\n        columnMenuPopup: actions.columnMenuPopup,\n        gridMenuPopup: actions.gridMenuPopup,\n        contextMenuPopup: actions.contextMenuPopup,\n        editArrayPopup: actions.editArrayPopup\n    };\n    // add support for vmo\n    const isArrangeSupported = columnProviderInstance.isArrangeSupported();\n    const isNarrowMode = narrowModeService.isNarrowMode();\n    const gridMenuContext = {\n        anchor: commandOverrides.gridMenuCommandsAnchor ? commandOverrides.gridMenuCommandsAnchor : 'aw_gridMenu',\n        dataProvider: dataProviderInstance,\n        columnProvider: columnProviderInstance,\n        gridId: gridid,\n        gridOptions: gridOptions,\n        isArrangeSupported: isArrangeSupported,\n        isNarrowMode: isNarrowMode,\n        isColumnFilterApplied: dataProviderInstance.isColumnFilterApplied,\n        gridContextDispatcher: gridContextDispatcher,\n        gridContext: gridContextPlaceholder,\n        ...commandContext\n    };\n    //commandContext should have information about selected vmo. This is needed for application command condition use-case.\n    //Pass the currently selected object from table to the context menu command bar context instead of relying on ctx.mselected.\n    commandContext.selected = gridContextPlaceholder.contextVmo && gridContextPlaceholder.contextVmo.length ? gridContextPlaceholder.contextVmo : ctx.mselected;\n    const contextAnchor = commandOverrides.contextMenuCommandsAnchor ? commandOverrides.contextMenuCommandsAnchor : 'aw_contextMenu2';\n    const contextMenuContext = {\n        anchor: contextAnchor,\n        dataProvider: dataProviderInstance,\n        columnProvider: columnProviderInstance,\n        gridId: gridid,\n        gridOptions: gridOptions,\n        gridContext: gridContextPlaceholder,\n        ...commandContext\n    };\n\n\n    const isPinningEnabled = gridOptions.enablePinning !== false;\n    const getFilterFacetsAction = async( filterFacetInput ) => {\n        return await dataProviderInstance.getFilterFacets( dataCtxNode.data, filterFacetInput );\n    };\n    //commandContext should have information about selected columnDef. This is needed for application command condition use-case.\n    commandContext.columnDef = gridContextPlaceholder.columnDef;\n    const columnMenuContext = {\n        anchor: commandOverrides.columnMenuCommandsAnchor ? commandOverrides.columnMenuCommandsAnchor : 'aw_splmTable_columnMenu',\n        dataProvider: dataProviderInstance,\n        columnProvider: columnProviderInstance,\n        gridId: gridid,\n        gridContext: gridContextPlaceholder,\n        gridContextDispatcher: gridContextDispatcher,\n        menuId: gridid + '_menu',\n        menuContainerId: gridid + '_menuContainer',\n        gridOptions: gridOptions,\n        isArrangeSupported: isArrangeSupported,\n        isPinningEnabled: isPinningEnabled,\n        sortCriteria: columnProviderInstance.getSortCriteria(),\n        hasFilterFacetAction: dataProviderInstance.getFilterFacets && dataProviderInstance.filterFacetAction,\n        getFilterFacetsAction: getFilterFacetsAction,\n        existingColumnFilters: columnProviderInstance.getColumnFilters(),\n        ...dataCtxNode.data.subPanelContext,\n        ...commandContext\n    };\n\n    const childCommandCLickCallback = function( hasPopup ) {\n        if( hasPopup ) {\n            return;\n        }\n        actions.contextMenuPopup.hide();\n    };\n\n    const columnMenuName = getColumnMenuName( gridContextPlaceholder );\n    return (\n        <aw-splm-table ref={element}>\n            {\n                actions.columnMenuPopup.open && <AwPopup {...actions.columnMenuPopup.options}><AwInclude name={ columnMenuName } subPanelContext={ columnMenuContext } /></AwPopup>\n            } {\n                actions.gridMenuPopup.open && <AwPopup {...actions.gridMenuPopup.options}>\n                    <AwPopupCommandBar\n                        anchor={ gridMenuContext.anchor }\n                        context={ gridMenuContext }\n                        childCommandClickCallback={actions.gridMenuPopup.hide}\n                        class='grid-menu-command'\n                        alignment='HORIZONTAL'\n                    ></AwPopupCommandBar>\n                </AwPopup>\n            } {\n                actions.contextMenuPopup.open && <AwPopup {...actions.contextMenuPopup.options}>\n                    <AwServerVisibilityPopupCommandBar\n                        anchor={ contextAnchor }\n                        context={ contextMenuContext }\n                        childCommandClickCallback={childCommandCLickCallback}\n                        mselected={ commandContext.selected }\n                        pselected={ctx.pselected}>\n                    </AwServerVisibilityPopupCommandBar>\n                </AwPopup>\n            } {\n                actions.editArrayPopup.open && <AwPopup {...actions.editArrayPopup.options}>\n                    <SplmTableCellEditor vmo={ gridContextPlaceholder.editVmo } name={ gridContextPlaceholder.editPropertyName }></SplmTableCellEditor>\n                </AwPopup>\n            }\n        </aw-splm-table>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
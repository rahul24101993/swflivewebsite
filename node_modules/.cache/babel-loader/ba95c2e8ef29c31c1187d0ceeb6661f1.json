{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmTableUtils\n */\nimport _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport awTableStateService from 'js/awTableStateService';\nimport browserUtils from 'js/browserUtils';\nimport { unmountComponents } from 'js/declReactUtils';\nimport editEventsService from 'js/editEventsService';\nimport htmlUtils from 'js/htmlUtils';\nimport ngUtils from 'js/ngUtils';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport Const from 'js/splmTableConstants';\nvar exports = {};\n/**\n * Locate the closest element including self\n * http://stackoverflow.com/a/24107550/888165\n *\n * @param {DOMElement} element element to start search\n *\n * @param {String} selector css selector to use in locating closest element\n *\n * @param {Int} maxLevelsUp the maximum levels up to search\n *\n * @returns {DOMElement} the closest element\n */\n\nexports.closestElement = function (element, selector, maxLevelsUp) {\n  return htmlUtils.closestElement(element, selector, maxLevelsUp);\n};\n/**\n * Returns the index of the node in its parent\n *\n * @param {DOMElement} node - The node to find the index of\n *\n * @return {Number} the index of the node\n */\n\n\nexports.getIndexInParent = function (node) {\n  var i = 0;\n\n  while (node.previousElementSibling) {\n    node = node.previousElementSibling;\n    i++;\n  }\n\n  return i;\n};\n/**\n * Get all table content cell in specific column.\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {Number} columnIndex - The column index\n *\n * @return {Array} List of DOMElements for table content cells.\n */\n\n\nexports.getColumnContentCellElementsByIndex = function (tableElement, columnIndex) {\n  var returnCellElements = [];\n  var cellElements = tableElement.getElementsByClassName(Const.CLASS_CELL);\n\n  _.forEach(cellElements, function (cellElement) {\n    if (cellElement.columnDef) {\n      if (cellElement.columnDef.index === columnIndex) {\n        returnCellElements.push(cellElement);\n      }\n    }\n  });\n\n  return returnCellElements;\n};\n/**\n * Get property object/view model for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\n\n\nexports.getPropertyByCellElement = function (cellElement) {\n  var rowElement = exports.closestElement(cellElement, '.' + Const.CLASS_ROW);\n\n  if (rowElement.vmo && rowElement.vmo.props) {\n    return rowElement.vmo.props[cellElement.columnDef.field];\n  }\n\n  return null;\n};\n/**\n * Get view model object for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\n\n\nexports.getViewModelObjectByCellElement = function (cellElement) {\n  return cellElement.parentElement.vmo;\n};\n/**\n * Get cell element by object UID and property name\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {String} propertyName - The property name\n *\n * @param {String} vmoUid - The uid to view model object\n *\n * @return {DOMElement} The DOMElement to table content cell which presents specific property of the vmo.\n */\n\n\nexports.getCellElementsByPropertyAndUid = function (tableElement, propertyName, vmoUid) {\n  let returnCellElements = [];\n  const rowElements = tableElement.getElementsByClassName(Const.CLASS_ROW);\n\n  for (let i = 0; i < rowElements.length; i++) {\n    if (rowElements[i].vmo && getEvaluatedId(rowElements[i].vmo) === vmoUid) {\n      let cellElements = rowElements[i].getElementsByClassName(Const.CLASS_CELL);\n\n      for (let j = 0; j < cellElements.length; j++) {\n        if (cellElements[j].columnDef && cellElements[j].columnDef.field === propertyName) {\n          returnCellElements.push(cellElements[j]);\n        }\n      }\n    }\n  }\n\n  return returnCellElements;\n};\n/**\n * Cleans up react components used in table\n * @param {DOMElement} element The root node to cleanup components from\n */\n\n\nexports.cleanupComponents = function (element) {\n  // get the container elements that could potentially have a component\n  // grid cell commands, tree expand/collapse icon, table editor cell\n  const selectors = '.aw-splm-gridCellCommandsContainer, .aw-jswidgets-treeExpandCollapseCmd, .aw-jswidgets-tableEditContainer';\n  unmountComponents(element, selectors);\n};\n/**\n * Create DOMElement based on AngularJS HTML Template for PL Table.\n * - Only single nest HTML description is supported.\n * - When use it inside a cell, it will be recycled automatically by row virtual rendering.\n * - When use it inside a table, it will be recycled when table is getting destroyed.\n *\n * @param {String} htmlContent - The HTML Content/AngularJS Template string needs to compile\n *\n * @param {DOMElement} parentElement - Parent DOMElement in PLTable as Context, could be direct parent or PL Table Element\n *            If parent DOMElement is not in table yet, please use table element.\n *\n * @param {Object} [scopeData] - Arbitrary object to be set as the primary '$scope' (i.e. 'context') of the new\n *            AngularJS controller.\n *\n\n * @param {DeclViewModel} [declViewModel] - The object to set as the 'data' property on the controller's '$scope'.\n *\n * @return {DOMElement} Compiled DOM Element from AngularJS HTML Template input\n */\n\n\nexports.createNgElement = function (htmlContent, parentElement, scopeData, declViewModel) {\n  return undefined;\n};\n/**\n * Destroys and removes the passed in angularJS DOMElement\n *\n * @param {DOMElement} element - DOMElement that has an angular scope\n * */\n\n\nexports.destroyElement = function (element) {\n  ngUtils.destroyElement(element);\n};\n/**\n * Destroys and removes the passed in DOMElements based under input DOM Element\n *\n * @param {DOMElement} element - DOMElement that has  DOM Elements as child elements\n * */\n\n\nexports.destroyChildElements = function (element) {\n  ngUtils.destroyChildElements(element, Const.CLASS_COMPILED_ELEMENT);\n};\n/**\n * revisitme\n * tstark - leave for refactor\n * remove angularism\n * Get AngularJS Scope Variable for Element compiled from AngularJS Template\n *\n * @param {DOMElement} element - DOMElement which is compiled from AngularJS Template.\n *\n * @param {Boolean} isIsolated - if true returns isolate scope.\n *\n * @return {Object} Scope object for specific AngularJS Element\n\nexports.getElementScope = function( element, isIsolated ) {\n    return ngUtils.getElementScope( element, isIsolated );\n};\n */\n\n/**\n * Get width for element text content\n * https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript\n *\n * @param {DOMElement} element - DOMElement in table.\n *\n * @return {Number} Font size as number\n */\n\n\nexports.getElementTextWidth = function (element) {\n  var width = 0;\n  var cloneElem = element.cloneNode(true);\n  cloneElem.style.position = 'absolute';\n  cloneElem.style.visibility = 'hidden';\n  cloneElem.style.height = 'auto';\n  cloneElem.style.width = 'auto';\n  cloneElem.style.whiteSpace = 'nowrap';\n\n  if (element.parentElement) {\n    element.parentElement.appendChild(cloneElem); // Plus 10 blindly for possible container styling\n\n    width = Math.round(cloneElem.clientWidth) + 10;\n    element.parentElement.removeChild(cloneElem);\n  }\n\n  return width;\n};\n/**\n * Create DOM Element with CSS Class Definitions\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createElement = function () {\n  var elem = document.createElement(arguments[0]);\n\n  for (var i = 1; i < arguments.length; i++) {\n    elem.classList.add(arguments[i]);\n  }\n\n  return elem;\n};\n/**\n * Update attribute on DOM element\n *\n * @param {String} elem - DOMElement name.\n * @param {String} attribute -   attribute name.\n * @param {String} attrValue -   attribute value.\n * @return {DOMElement} updated DOMElement\n */\n\n\nexports.addAttributeToDOMElement = function (elem, attribute, attrValue) {\n  var att = document.createAttribute(attribute);\n  att.value = attrValue;\n  elem.setAttributeNode(att);\n  return elem;\n};\n/**\n * Create Color Indicator Element based on vmo information\n *\n * @param {Object} vmo - View model object\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createColorIndicatorElement = function (vmo) {\n  var colorIndicatorElement = null; // Create color indicator element with proper classes\n\n  if (vmo.gridDecoratorStyle) {\n    colorIndicatorElement = exports.createElement('span', vmo.gridDecoratorStyle, Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR);\n  } else {\n    colorIndicatorElement = exports.createElement('span', Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR);\n  } // Add title\n\n\n  if (vmo.colorTitle) {\n    colorIndicatorElement.title = vmo.colorTitle;\n  }\n\n  return colorIndicatorElement;\n};\n/**\n * Create custom event. Mainly for IE\n *\n * @param {String} eventName - Name of the event\n *\n * @param {Object} eventDetail - Object for event detail\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createCustomEvent = function (eventName, eventDetail) {\n  if (browserUtils.isNonEdgeIE) {\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(eventName, false, false, eventDetail);\n    return evt;\n  }\n\n  return new CustomEvent(eventName, {\n    detail: eventDetail\n  });\n};\n/**\n * Get Table Control Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\n\n\nexports.getTableController = function (tableElement) {\n  return exports.getTableInstance(tableElement).controller;\n};\n/**\n * Get Menu Service from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Menu Utils object for current table.\n */\n\n\nexports.getTableMenuService = function (tableElement) {\n  return exports.getTableInstance(tableElement).menuService;\n};\n/**\n * Get Table Instance Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\n\n\nexports.getTableInstance = function (tableElement) {\n  return tableElement._tableInstance;\n};\n/**\n * Returns the isBulkEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table is in bulk editing mode\n */\n\n\nexports.isBulkEditing = function (tableElement) {\n  return exports.getTableInstance(tableElement).isBulkEditing;\n};\n/**\n * Sets the isBulkEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isBulkEditing - the isBulkEditing value\n */\n\n\nexports.setIsBulkEditing = function (tableElement, isBulkEditing) {\n  exports.getTableInstance(tableElement).isBulkEditing = isBulkEditing;\n};\n/**\n * Returns the isCellEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table has cellEditing\n */\n\n\nexports.isCellEditing = function (tableElement) {\n  return exports.getTableInstance(tableElement).isCellEditing;\n};\n/**\n * Sets the isCellEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isCellEditing - the isCellEditing value\n */\n\n\nexports.setIsCellEditing = function (tableElement, isCellEditing) {\n  exports.getTableInstance(tableElement).isCellEditing = isCellEditing;\n};\n/**\n * Create objects with all arguments pass in. No use currently but put it here for a while\n * https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\n\n\nexports.createObjectWithArgs = function (Something) {\n  return function () {\n    var F = function (args) {\n      return Something.apply(this, args);\n    };\n\n    F.prototype = Something.prototype;\n    return function () {\n      return new F(arguments);\n    };\n  }();\n};\n\nexports.showHideElement = function (element, showElement) {\n  if (showElement) {\n    element.classList.remove('hiddenUtility');\n  } else {\n    element.classList.add('hiddenUtility');\n  }\n};\n\nvar getTableAttributes = function (gridOptions) {\n  var rowHeight = gridOptions.rowHeight;\n  var headerHeight = gridOptions.headerHeight;\n  var smallOversize = 56;\n  var mediumOversize = 72;\n  var largeOversize = 88;\n  var results = {\n    isOptionValid: false,\n    rowHeight: null,\n    headerHeight: null,\n    iconCellRendererHeight: null,\n    classes: null\n  };\n\n  switch (rowHeight) {\n    case 'small oversize':\n    case 'LARGE':\n      results.rowHeight = smallOversize;\n      results.iconCellRendererHeight = 48;\n      results.isOptionValid = true;\n      results.classes = rowHeight.split(' ');\n      break;\n\n    case 'medium oversize':\n    case 'XLARGE':\n      results.rowHeight = mediumOversize;\n      results.iconCellRendererHeight = 64;\n      results.isOptionValid = true;\n      results.classes = rowHeight.split(' ');\n      break;\n\n    case 'large oversize':\n    case 'XXLARGE':\n      results.rowHeight = largeOversize;\n      results.iconCellRendererHeight = 80;\n      results.isOptionValid = true;\n      results.classes = rowHeight.split(' ');\n      break;\n  }\n\n  switch (headerHeight) {\n    case 'small oversize':\n    case 'LARGE':\n      results.headerHeight = smallOversize;\n      break;\n\n    case 'medium oversize':\n    case 'XLARGE':\n      results.headerHeight = mediumOversize;\n      break;\n\n    case 'large oversize':\n    case 'XXLARGE':\n      results.headerHeight = largeOversize;\n      break;\n\n    default:\n      if (typeof headerHeight === 'number') {\n        // Custom header height\n        results.headerHeight = headerHeight;\n      } else if (typeof headerHeight === 'string') {\n        let value = parseInt(headerHeight, 10);\n\n        if (!Number.isNaN(value)) {\n          results.headerHeight = value;\n        }\n      }\n\n  }\n\n  return results;\n};\n/**\n * This API accepts configured grid options and validates whether configured grid options are valid or not.\n * Returns true if they are valid and return false if they are not valid.\n * @param {*} gridOptions : grid options configured in splmtable json.\n */\n\n\nexports.validateRowHeightGridOption = function (gridOptions) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.isOptionValid === true) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * This API returns table row height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\n\n\nexports.getTableRowHeight = function (gridOptions, defaultValue) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.rowHeight === null) {\n    return defaultValue;\n  }\n\n  return results.rowHeight;\n};\n/**\n * This API returns table row height for icon cell renderer based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\n\n\nexports.getTableRowHeightForIconCellRenderer = function (gridOptions, defaultValue) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.iconCellRendererHeight === null) {\n    return defaultValue;\n  }\n\n  return results.iconCellRendererHeight;\n};\n/**\n * This API adds class to css class list of the element based on row height grid option.\n * @param {*} element elements in which we need to add css class.\n * @param {*} gridOptions grid options configured in json.\n */\n\n\nexports.addCSSClassForRowHeight = function (element, gridOptions) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.isOptionValid) {\n    var classes = results.classes;\n\n    for (var index = 0; index < classes.length; index++) {\n      element.classList.add(classes[index].toLowerCase());\n    }\n  }\n};\n/**\n * Get number from string\n *\n * @param {String} prop - number string\n *\n * @return {Number} number parse from string\n */\n\n\nexports.numericProperty = function (prop) {\n  var value = !prop ? undefined : parseInt(prop);\n  return isNaN(value) ? undefined : value;\n};\n/**\n *\n * Returns the String CSS class name for the passed in columnName based on the passed in sort criteria\n *\n * @param {Object} columnDef - columnDef object\n *\n * @param { Object } columnProvider - The column provider\n *\n * @return {Object} Object to define sort criteria\n */\n\n\nexports.getSortCriteria = function (columnDef, columnProvider) {\n  var sortCriteria = columnProvider.getSortCriteria();\n\n  var foundCriteria = _.find(sortCriteria, function (o) {\n    return o.fieldName === columnDef.name || o.fieldName === columnDef.field;\n  });\n\n  if (foundCriteria) {\n    return foundCriteria;\n  }\n\n  return {};\n};\n/**\n *\n * Sets the sort criteria on the dataProvider columns\n *\n * @param { Object } columnProvider - The column provider\n *\n * @param { Object } dataProvider - The data provider\n */\n\n\nexports.setSortCriteriaOnColumns = function (columnProvider, dataProvider) {\n  columnProvider.sortCriteria = columnProvider.getSortCriteria();\n  var _length = dataProvider.cols.length;\n\n  for (var i = 0; i < _length; i++) {\n    var columnDef = dataProvider.cols[i];\n    dataProvider.cols[i].sortDirection = exports.getSortCriteria(columnDef, columnProvider).sortDirection;\n  }\n};\n\nexports.getImgURL = function (vmo) {\n  var url = '';\n\n  if (vmo.hasThumbnail) {\n    url = vmo.thumbnailURL;\n  } else if (vmo.typeIconURL) {\n    url = vmo.typeIconURL;\n  } else if (vmo.iconURL) {\n    url = vmo.iconURL;\n  }\n\n  return url;\n};\n/**\n * Syncs the headers for the table to the given scroll left\n *\n * @param {DOMElement} tableElement The table element\n * @param {Boolean} isPin If pinned headers should by synced\n * @param {Number} scrollLeft The scroll left\n */\n\n\nexports.syncHeader = function (_trv, isPin, scrollLeft) {\n  let header = null;\n\n  if (isPin === true) {\n    header = _trv.getPinHeaderElementFromTable();\n  } else {\n    header = _trv.getScrollHeaderElementFromTable();\n  }\n\n  header.style.marginLeft = String(scrollLeft * -1) + 'px';\n}; //----------------------------------------- Vertical Column Headers -----------------------------------------//\n\n/**\n * This API returns table header height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\n\n\nexports.getTableHeaderHeight = function (gridOptions, defaultValue) {\n  var results = getTableAttributes(gridOptions);\n\n  if (results.headerHeight === null) {\n    return defaultValue;\n  }\n\n  return results.headerHeight;\n}; //-------------------------------- Expand Pagination In Edit Mode -----------------------------------------//\n\n/**\n * This API returns whether expand or pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nconst isExpandOrPaginationAllowed = function (tableElem) {\n  if (!exports.isBulkEditing(tableElem)) {\n    return true;\n  }\n\n  return exports.isExpandOrPaginationAllowedInEdit(tableElem);\n};\n/**\n * This API returns whether pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nexports.isPaginationAllowed = function (tableElem) {\n  return isExpandOrPaginationAllowed(tableElem);\n};\n/**\n * This API returns whether expand is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nexports.isExpandAllowed = function (tableElem) {\n  return isExpandOrPaginationAllowed(tableElem);\n};\n/**\n * This API returns whether requestStartEdit should be called after pagination.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditPagination = function (tableElem) {\n  return exports.isBulkEditing(tableElem);\n};\n/**\n * This API returns whether requestStartEdit should be called after props have been loaded.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditPropsLoaded = function (tableElem) {\n  return exports.isBulkEditing(tableElem);\n};\n/**\n * This API returns whether requestStartEdit should be called after tree pagination.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditTreePagination = function (tableElem, propertyProvider) {\n  return exports.isBulkEditing(tableElem) && !propertyProvider;\n};\n/**\n * This API returns whether requestStartEdit should be called after tree expand.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} expandedNode : the node that was expanded\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\n\n\nexports.shouldRequestStartEditTreeExpand = function (tableElem, expandedNode, propertyProvider) {\n  return (expandedNode.__expandState || !expandedNode.__expandState && !propertyProvider) && exports.isBulkEditing(tableElem);\n};\n/**\n * This API requests startEdit\n * Publishes the requestStartEdit events when the enableExpandAndPaginationInEdit gridOption is set (AW/Edit Handler)\n * or\n * Calls startEdit on dataProvider or declViewModel when editConfiguration exists (AFX/Edit Config)\n * @param {DOMElement} tableElem : the table element\n */\n\n\nexports.requestStartEdit = function (tableElem) {\n  const tableInstance = exports.getTableInstance(tableElem);\n  const dataProvider = tableInstance.dataProvider;\n  const declViewModel = tableInstance.declViewModel;\n\n  if (tableInstance.gridOptions.enableExpandAndPaginationInEdit === true) {\n    editEventsService.publishStartEditRequested(dataProvider);\n  } else if (dataProvider.getEditConfiguration()) {\n    const dataCtxNode = {\n      data: declViewModel,\n      ctx: appCtxService.ctx\n    };\n    dataProvider.startEdit(dataCtxNode, declViewModel);\n  } else if (declViewModel.getEditConfiguration()) {\n    declViewModel.startEdit();\n  }\n};\n/**\n * This API returns whether expand or pagination is allowed in edit mode.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\n\n\nexports.isExpandOrPaginationAllowedInEdit = function (tableElem) {\n  const tableInstance = exports.getTableInstance(tableElem);\n\n  if (tableInstance.gridOptions.enableExpandAndPaginationInEdit === true) {\n    return true;\n  } else if (tableInstance.dataProvider.getEditConfiguration() || tableInstance.declViewModel.getEditConfiguration()) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * This API is a helper function for interacting with awTableStateService.\n * @param {String} action the action to perform\n * @return {Object} the result of the action\n */\n\n\nexports.performStateServiceAction = function (action, declViewModel, gridId, node) {\n  if (declViewModel.grids[gridId].gridOptions && declViewModel.grids[gridId].gridOptions.enableExpansionStateCaching === false) {\n    return null;\n  }\n\n  switch (action) {\n    case 'clearAllStates':\n      return awTableStateService.clearAllStates(declViewModel, gridId);\n\n    case 'saveRowExpanded':\n      return awTableStateService.saveRowExpanded(declViewModel, gridId, node);\n\n    case 'saveRowCollapsed':\n      return awTableStateService.saveRowCollapsed(declViewModel, gridId, node);\n\n    case 'getTreeTableState':\n      return awTableStateService.getTreeTableState(declViewModel, gridId);\n\n    case 'isNodeExpanded':\n      {\n        const treeTableState = awTableStateService.getTreeTableState(declViewModel, gridId);\n        return awTableStateService.isNodeExpanded(treeTableState, node);\n      }\n\n    default:\n      return null;\n  }\n};\n/**\n * This API is a helper function to determine if auto save is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if auto save is enabled\n */\n\n\nexports.isAutoSaveEnabled = function (tableElem) {\n  const tableInstance = tableElem._tableInstance;\n\n  if (tableInstance && tableInstance.gridOptions && tableInstance.gridOptions.forceAutoSave === true || appCtxService.getCtx('autoSave') && appCtxService.getCtx('autoSave.dbValue') === true) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * This API is a helper function to determine if prop edit is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if prop edit is enabled\n */\n\n\nexports.isPropEditEnabled = function (tableElem) {\n  const tableInstance = tableElem._tableInstance;\n\n  if (tableInstance && tableInstance.dataProvider && tableInstance.dataProvider.isPropEditEnabled) {\n    return tableInstance.dataProvider.isPropEditEnabled(tableInstance.declViewModel);\n  }\n\n  return false;\n};\n/**\n * Checks to see if row/column header selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has header selection enabled\n */\n\n\nexports.isCellHeaderSelectionEnabled = function (tableElement) {\n  return exports.getTableInstance(tableElement).gridOptions.enableCellHeaderSelection;\n};\n/**\n * Checks to see if column selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has column selection enabled\n */\n\n\nexports.isColumnSelectionEnabled = function (tableElement) {\n  return exports.getTableInstance(tableElement).gridOptions.enableColumnSelection;\n};\n/**\n *\n * Get the column definition from the dataProvider based on column name\n *\n * @param { String } columnName - The column name\n * @param { Object } dataProvider - The data provider\n * @returns { Object } the column def found\n */\n\n\nexports.getColumnDef = function (columnName, dataProvider) {\n  let columnDef = null;\n\n  for (let currentColumn of dataProvider.cols) {\n    if (currentColumn.field === columnName) {\n      columnDef = currentColumn;\n      break;\n    }\n  }\n\n  return columnDef;\n};\n\nexport default exports;","map":{"version":3,"names":["_","appCtxService","awTableStateService","browserUtils","unmountComponents","editEventsService","htmlUtils","ngUtils","getEvaluatedId","Const","exports","closestElement","element","selector","maxLevelsUp","getIndexInParent","node","i","previousElementSibling","getColumnContentCellElementsByIndex","tableElement","columnIndex","returnCellElements","cellElements","getElementsByClassName","CLASS_CELL","forEach","cellElement","columnDef","index","push","getPropertyByCellElement","rowElement","CLASS_ROW","vmo","props","field","getViewModelObjectByCellElement","parentElement","getCellElementsByPropertyAndUid","propertyName","vmoUid","rowElements","length","j","cleanupComponents","selectors","createNgElement","htmlContent","scopeData","declViewModel","undefined","destroyElement","destroyChildElements","CLASS_COMPILED_ELEMENT","getElementTextWidth","width","cloneElem","cloneNode","style","position","visibility","height","whiteSpace","appendChild","Math","round","clientWidth","removeChild","createElement","elem","document","arguments","classList","add","addAttributeToDOMElement","attribute","attrValue","att","createAttribute","value","setAttributeNode","createColorIndicatorElement","colorIndicatorElement","gridDecoratorStyle","CLASS_AW_CELL_COLOR_INDICATOR","CLASS_CELL_COLOR_INDICATOR","colorTitle","title","createCustomEvent","eventName","eventDetail","isNonEdgeIE","evt","createEvent","initCustomEvent","CustomEvent","detail","getTableController","getTableInstance","controller","getTableMenuService","menuService","_tableInstance","isBulkEditing","setIsBulkEditing","isCellEditing","setIsCellEditing","createObjectWithArgs","Something","F","args","apply","prototype","showHideElement","showElement","remove","getTableAttributes","gridOptions","rowHeight","headerHeight","smallOversize","mediumOversize","largeOversize","results","isOptionValid","iconCellRendererHeight","classes","split","parseInt","Number","isNaN","validateRowHeightGridOption","getTableRowHeight","defaultValue","getTableRowHeightForIconCellRenderer","addCSSClassForRowHeight","toLowerCase","numericProperty","prop","getSortCriteria","columnProvider","sortCriteria","foundCriteria","find","o","fieldName","name","setSortCriteriaOnColumns","dataProvider","_length","cols","sortDirection","getImgURL","url","hasThumbnail","thumbnailURL","typeIconURL","iconURL","syncHeader","_trv","isPin","scrollLeft","header","getPinHeaderElementFromTable","getScrollHeaderElementFromTable","marginLeft","String","getTableHeaderHeight","isExpandOrPaginationAllowed","tableElem","isExpandOrPaginationAllowedInEdit","isPaginationAllowed","isExpandAllowed","shouldRequestStartEditPagination","shouldRequestStartEditPropsLoaded","shouldRequestStartEditTreePagination","propertyProvider","shouldRequestStartEditTreeExpand","expandedNode","__expandState","requestStartEdit","tableInstance","enableExpandAndPaginationInEdit","publishStartEditRequested","getEditConfiguration","dataCtxNode","data","ctx","startEdit","performStateServiceAction","action","gridId","grids","enableExpansionStateCaching","clearAllStates","saveRowExpanded","saveRowCollapsed","getTreeTableState","treeTableState","isNodeExpanded","isAutoSaveEnabled","forceAutoSave","getCtx","isPropEditEnabled","isCellHeaderSelectionEnabled","enableCellHeaderSelection","isColumnSelectionEnabled","enableColumnSelection","getColumnDef","columnName","currentColumn"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableUtils.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmTableUtils\n */\n\nimport _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport awTableStateService from 'js/awTableStateService';\nimport browserUtils from 'js/browserUtils';\nimport { unmountComponents } from 'js/declReactUtils';\nimport editEventsService from 'js/editEventsService';\nimport htmlUtils from 'js/htmlUtils';\nimport ngUtils from 'js/ngUtils';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport Const from 'js/splmTableConstants';\n\nvar exports = {};\n\n/**\n * Locate the closest element including self\n * http://stackoverflow.com/a/24107550/888165\n *\n * @param {DOMElement} element element to start search\n *\n * @param {String} selector css selector to use in locating closest element\n *\n * @param {Int} maxLevelsUp the maximum levels up to search\n *\n * @returns {DOMElement} the closest element\n */\nexports.closestElement = function( element, selector, maxLevelsUp ) {\n    return htmlUtils.closestElement( element, selector, maxLevelsUp );\n};\n\n/**\n * Returns the index of the node in its parent\n *\n * @param {DOMElement} node - The node to find the index of\n *\n * @return {Number} the index of the node\n */\nexports.getIndexInParent = function( node ) {\n    var i = 0;\n    while( node.previousElementSibling ) {\n        node = node.previousElementSibling;\n        i++;\n    }\n    return i;\n};\n\n/**\n * Get all table content cell in specific column.\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {Number} columnIndex - The column index\n *\n * @return {Array} List of DOMElements for table content cells.\n */\nexports.getColumnContentCellElementsByIndex = function( tableElement, columnIndex ) {\n    var returnCellElements = [];\n    var cellElements = tableElement.getElementsByClassName( Const.CLASS_CELL );\n    _.forEach( cellElements, function( cellElement ) {\n        if( cellElement.columnDef ) {\n            if( cellElement.columnDef.index === columnIndex ) {\n                returnCellElements.push( cellElement );\n            }\n        }\n    } );\n\n    return returnCellElements;\n};\n\n/**\n * Get property object/view model for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\nexports.getPropertyByCellElement = function( cellElement ) {\n    var rowElement = exports.closestElement( cellElement, '.' + Const.CLASS_ROW );\n    if( rowElement.vmo && rowElement.vmo.props ) {\n        return rowElement.vmo.props[ cellElement.columnDef.field ];\n    }\n    return null;\n};\n\n/**\n * Get view model object for specific table content cell element\n *\n * @param {DOMElement} cellElement - The table content cell element\n *\n * @return {Object} The property object to this cell.\n */\nexports.getViewModelObjectByCellElement = function( cellElement ) {\n    return cellElement.parentElement.vmo;\n};\n\n/**\n * Get cell element by object UID and property name\n *\n * @param {DOMElement} tableElement - The DOMElement for table\n *\n * @param {String} propertyName - The property name\n *\n * @param {String} vmoUid - The uid to view model object\n *\n * @return {DOMElement} The DOMElement to table content cell which presents specific property of the vmo.\n */\nexports.getCellElementsByPropertyAndUid = function( tableElement, propertyName, vmoUid ) {\n    let returnCellElements = [];\n    const rowElements = tableElement.getElementsByClassName( Const.CLASS_ROW );\n    for( let i = 0; i < rowElements.length; i++ ) {\n        if( rowElements[ i ].vmo && getEvaluatedId( rowElements[ i ].vmo ) === vmoUid ) {\n            let cellElements = rowElements[ i ].getElementsByClassName( Const.CLASS_CELL );\n            for( let j = 0; j < cellElements.length; j++ ) {\n                if( cellElements[ j ].columnDef && cellElements[ j ].columnDef.field === propertyName ) {\n                    returnCellElements.push( cellElements[ j ] );\n                }\n            }\n        }\n    }\n\n    return returnCellElements;\n};\n\n/**\n * Cleans up react components used in table\n * @param {DOMElement} element The root node to cleanup components from\n */\nexports.cleanupComponents = function( element ) {\n    // get the container elements that could potentially have a component\n    // grid cell commands, tree expand/collapse icon, table editor cell\n    const selectors = '.aw-splm-gridCellCommandsContainer, .aw-jswidgets-treeExpandCollapseCmd, .aw-jswidgets-tableEditContainer';\n    unmountComponents( element, selectors );\n};\n\n/**\n * Create DOMElement based on AngularJS HTML Template for PL Table.\n * - Only single nest HTML description is supported.\n * - When use it inside a cell, it will be recycled automatically by row virtual rendering.\n * - When use it inside a table, it will be recycled when table is getting destroyed.\n *\n * @param {String} htmlContent - The HTML Content/AngularJS Template string needs to compile\n *\n * @param {DOMElement} parentElement - Parent DOMElement in PLTable as Context, could be direct parent or PL Table Element\n *            If parent DOMElement is not in table yet, please use table element.\n *\n * @param {Object} [scopeData] - Arbitrary object to be set as the primary '$scope' (i.e. 'context') of the new\n *            AngularJS controller.\n *\n\n * @param {DeclViewModel} [declViewModel] - The object to set as the 'data' property on the controller's '$scope'.\n *\n * @return {DOMElement} Compiled DOM Element from AngularJS HTML Template input\n */\nexports.createNgElement = function( htmlContent, parentElement, scopeData, declViewModel ) {\n    return undefined;\n};\n\n/**\n * Destroys and removes the passed in angularJS DOMElement\n *\n * @param {DOMElement} element - DOMElement that has an angular scope\n * */\nexports.destroyElement = function( element ) {\n    ngUtils.destroyElement( element );\n};\n\n/**\n * Destroys and removes the passed in DOMElements based under input DOM Element\n *\n * @param {DOMElement} element - DOMElement that has  DOM Elements as child elements\n * */\nexports.destroyChildElements = function( element ) {\n    ngUtils.destroyChildElements( element, Const.CLASS_COMPILED_ELEMENT );\n};\n\n/**\n * revisitme\n * tstark - leave for refactor\n * remove angularism\n * Get AngularJS Scope Variable for Element compiled from AngularJS Template\n *\n * @param {DOMElement} element - DOMElement which is compiled from AngularJS Template.\n *\n * @param {Boolean} isIsolated - if true returns isolate scope.\n *\n * @return {Object} Scope object for specific AngularJS Element\n\nexports.getElementScope = function( element, isIsolated ) {\n    return ngUtils.getElementScope( element, isIsolated );\n};\n */\n\n/**\n * Get width for element text content\n * https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript\n *\n * @param {DOMElement} element - DOMElement in table.\n *\n * @return {Number} Font size as number\n */\nexports.getElementTextWidth = function( element ) {\n    var width = 0;\n    var cloneElem = element.cloneNode( true );\n    cloneElem.style.position = 'absolute';\n    cloneElem.style.visibility = 'hidden';\n    cloneElem.style.height = 'auto';\n    cloneElem.style.width = 'auto';\n    cloneElem.style.whiteSpace = 'nowrap';\n    if( element.parentElement ) {\n        element.parentElement.appendChild( cloneElem );\n        // Plus 10 blindly for possible container styling\n        width = Math.round( cloneElem.clientWidth ) + 10;\n        element.parentElement.removeChild( cloneElem );\n    }\n    return width;\n};\n\n/**\n * Create DOM Element with CSS Class Definitions\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createElement = function() {\n    var elem = document.createElement( arguments[ 0 ] );\n\n    for( var i = 1; i < arguments.length; i++ ) {\n        elem.classList.add( arguments[ i ] );\n    }\n    return elem;\n};\n\n/**\n * Update attribute on DOM element\n *\n * @param {String} elem - DOMElement name.\n * @param {String} attribute -   attribute name.\n * @param {String} attrValue -   attribute value.\n * @return {DOMElement} updated DOMElement\n */\nexports.addAttributeToDOMElement = function( elem, attribute, attrValue ) {\n    var att = document.createAttribute( attribute );\n    att.value = attrValue;\n    elem.setAttributeNode( att );\n    return elem;\n};\n\n/**\n * Create Color Indicator Element based on vmo information\n *\n * @param {Object} vmo - View model object\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createColorIndicatorElement = function( vmo ) {\n    var colorIndicatorElement = null;\n\n    // Create color indicator element with proper classes\n    if( vmo.gridDecoratorStyle ) {\n        colorIndicatorElement = exports.createElement( 'span', vmo.gridDecoratorStyle, Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR );\n    } else {\n        colorIndicatorElement = exports.createElement( 'span', Const.CLASS_AW_CELL_COLOR_INDICATOR, Const.CLASS_CELL_COLOR_INDICATOR );\n    }\n\n    // Add title\n    if( vmo.colorTitle ) {\n        colorIndicatorElement.title = vmo.colorTitle;\n    }\n\n    return colorIndicatorElement;\n};\n\n/**\n * Create custom event. Mainly for IE\n *\n * @param {String} eventName - Name of the event\n *\n * @param {Object} eventDetail - Object for event detail\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createCustomEvent = function( eventName, eventDetail ) {\n    if( browserUtils.isNonEdgeIE ) {\n        var evt = document.createEvent( 'CustomEvent' );\n        evt.initCustomEvent( eventName, false, false, eventDetail );\n        return evt;\n    }\n    return new CustomEvent( eventName, {\n        detail: eventDetail\n    } );\n};\n\n/**\n * Get Table Control Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\nexports.getTableController = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).controller;\n};\n\n/**\n * Get Menu Service from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Menu Utils object for current table.\n */\nexports.getTableMenuService = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).menuService;\n};\n\n/**\n * Get Table Instance Object from Table Element. A Simple Encapsulation\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Object} Controller object for current table.\n */\nexports.getTableInstance = function( tableElement ) {\n    return tableElement._tableInstance;\n};\n\n/**\n * Returns the isBulkEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table is in bulk editing mode\n */\nexports.isBulkEditing = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).isBulkEditing;\n};\n\n/**\n * Sets the isBulkEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isBulkEditing - the isBulkEditing value\n */\nexports.setIsBulkEditing = function( tableElement, isBulkEditing ) {\n    exports.getTableInstance( tableElement ).isBulkEditing = isBulkEditing;\n};\n\n/**\n * Returns the isCellEditing value for the given table.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @return {Boolean} True if table has cellEditing\n */\nexports.isCellEditing = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).isCellEditing;\n};\n\n/**\n * Sets the isCellEditing value for the given table's instance.\n *\n * @param {DOMElement} tableElement - Table DomElement.\n *\n * @param {Boolean} isCellEditing - the isCellEditing value\n */\nexports.setIsCellEditing = function( tableElement, isCellEditing ) {\n    exports.getTableInstance( tableElement ).isCellEditing = isCellEditing;\n};\n\n/**\n * Create objects with all arguments pass in. No use currently but put it here for a while\n * https://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible\n *\n * @param {String} elementName - DOMElement name.\n *\n * @param {...String} var_args - CSS Class Names.\n *\n * @return {DOMElement} created DOMElement\n */\nexports.createObjectWithArgs = function( Something ) {\n    return ( function() {\n        var F = function( args ) {\n            return Something.apply( this, args );\n        };\n\n        F.prototype = Something.prototype;\n\n        return function() {\n            return new F( arguments );\n        };\n    } )();\n};\n\nexports.showHideElement = function( element, showElement ) {\n    if( showElement ) {\n        element.classList.remove( 'hiddenUtility' );\n    } else {\n        element.classList.add( 'hiddenUtility' );\n    }\n};\n\nvar getTableAttributes = function( gridOptions ) {\n    var rowHeight = gridOptions.rowHeight;\n    var headerHeight = gridOptions.headerHeight;\n    var smallOversize = 56;\n    var mediumOversize = 72;\n    var largeOversize = 88;\n    var results = {\n        isOptionValid: false,\n        rowHeight: null,\n        headerHeight: null,\n        iconCellRendererHeight: null,\n        classes: null\n    };\n    switch ( rowHeight ) {\n        case 'small oversize':\n        case 'LARGE':\n            results.rowHeight = smallOversize;\n            results.iconCellRendererHeight = 48;\n            results.isOptionValid = true;\n            results.classes = rowHeight.split( ' ' );\n            break;\n        case 'medium oversize':\n        case 'XLARGE':\n            results.rowHeight = mediumOversize;\n            results.iconCellRendererHeight = 64;\n            results.isOptionValid = true;\n            results.classes = rowHeight.split( ' ' );\n            break;\n        case 'large oversize':\n        case 'XXLARGE':\n            results.rowHeight = largeOversize;\n            results.iconCellRendererHeight = 80;\n            results.isOptionValid = true;\n            results.classes = rowHeight.split( ' ' );\n            break;\n    }\n\n    switch ( headerHeight ) {\n        case 'small oversize':\n        case 'LARGE':\n            results.headerHeight = smallOversize;\n            break;\n        case 'medium oversize':\n        case 'XLARGE':\n            results.headerHeight = mediumOversize;\n            break;\n        case 'large oversize':\n        case 'XXLARGE':\n            results.headerHeight = largeOversize;\n            break;\n        default:\n            if( typeof headerHeight === 'number' ) {\n                // Custom header height\n                results.headerHeight = headerHeight;\n            } else if( typeof headerHeight === 'string' ) {\n                let value = parseInt( headerHeight, 10 );\n                if( !Number.isNaN( value ) ) {\n                    results.headerHeight = value;\n                }\n            }\n    }\n    return results;\n};\n\n/**\n * This API accepts configured grid options and validates whether configured grid options are valid or not.\n * Returns true if they are valid and return false if they are not valid.\n * @param {*} gridOptions : grid options configured in splmtable json.\n */\nexports.validateRowHeightGridOption = function( gridOptions ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.isOptionValid === true ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * This API returns table row height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\nexports.getTableRowHeight = function( gridOptions, defaultValue ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.rowHeight === null ) {\n        return defaultValue;\n    }\n    return results.rowHeight;\n};\n/**\n * This API returns table row height for icon cell renderer based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\nexports.getTableRowHeightForIconCellRenderer = function( gridOptions, defaultValue ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.iconCellRendererHeight === null ) {\n        return defaultValue;\n    }\n    return results.iconCellRendererHeight;\n};\n\n/**\n * This API adds class to css class list of the element based on row height grid option.\n * @param {*} element elements in which we need to add css class.\n * @param {*} gridOptions grid options configured in json.\n */\nexports.addCSSClassForRowHeight = function( element, gridOptions ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.isOptionValid ) {\n        var classes = results.classes;\n        for( var index = 0; index < classes.length; index++ ) {\n            element.classList.add( classes[ index ].toLowerCase() );\n        }\n    }\n};\n/**\n * Get number from string\n *\n * @param {String} prop - number string\n *\n * @return {Number} number parse from string\n */\nexports.numericProperty = function( prop ) {\n    var value = !prop ? undefined : parseInt( prop );\n    return isNaN( value ) ? undefined : value;\n};\n\n/**\n *\n * Returns the String CSS class name for the passed in columnName based on the passed in sort criteria\n *\n * @param {Object} columnDef - columnDef object\n *\n * @param { Object } columnProvider - The column provider\n *\n * @return {Object} Object to define sort criteria\n */\nexports.getSortCriteria = function( columnDef, columnProvider ) {\n    var sortCriteria = columnProvider.getSortCriteria();\n    var foundCriteria = _.find( sortCriteria, function( o ) {\n        return o.fieldName === columnDef.name || o.fieldName === columnDef.field;\n    } );\n    if( foundCriteria ) {\n        return foundCriteria;\n    }\n    return {};\n};\n\n/**\n *\n * Sets the sort criteria on the dataProvider columns\n *\n * @param { Object } columnProvider - The column provider\n *\n * @param { Object } dataProvider - The data provider\n */\nexports.setSortCriteriaOnColumns = function( columnProvider, dataProvider ) {\n    columnProvider.sortCriteria = columnProvider.getSortCriteria();\n    var _length = dataProvider.cols.length;\n    for( var i = 0; i < _length; i++ ) {\n        var columnDef = dataProvider.cols[ i ];\n        dataProvider.cols[ i ].sortDirection = exports.getSortCriteria( columnDef, columnProvider ).sortDirection;\n    }\n};\n\nexports.getImgURL = function( vmo ) {\n    var url = '';\n    if( vmo.hasThumbnail ) {\n        url = vmo.thumbnailURL;\n    } else if( vmo.typeIconURL ) {\n        url = vmo.typeIconURL;\n    } else if( vmo.iconURL ) {\n        url = vmo.iconURL;\n    }\n\n    return url;\n};\n\n/**\n * Syncs the headers for the table to the given scroll left\n *\n * @param {DOMElement} tableElement The table element\n * @param {Boolean} isPin If pinned headers should by synced\n * @param {Number} scrollLeft The scroll left\n */\nexports.syncHeader = function( _trv, isPin, scrollLeft ) {\n    let header = null;\n    if( isPin === true ) {\n        header = _trv.getPinHeaderElementFromTable();\n    } else {\n        header = _trv.getScrollHeaderElementFromTable();\n    }\n    header.style.marginLeft = String( scrollLeft * -1 ) + 'px';\n};\n\n//----------------------------------------- Vertical Column Headers -----------------------------------------//\n/**\n * This API returns table header height based on configured grid option.\n * @param {*} gridOptions : grid options configured in splm table json.\n * @param {*} defaultValue : default value which will be return if grid options does not have any predefined height.\n */\nexports.getTableHeaderHeight = function( gridOptions, defaultValue ) {\n    var results = getTableAttributes( gridOptions );\n    if( results.headerHeight === null ) {\n        return defaultValue;\n    }\n    return results.headerHeight;\n};\n\n//-------------------------------- Expand Pagination In Edit Mode -----------------------------------------//\n/**\n * This API returns whether expand or pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nconst isExpandOrPaginationAllowed = function( tableElem ) {\n    if( !exports.isBulkEditing( tableElem ) ) {\n        return true;\n    }\n    return exports.isExpandOrPaginationAllowedInEdit( tableElem );\n};\n\n/**\n * This API returns whether pagination is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nexports.isPaginationAllowed = function( tableElem ) {\n    return isExpandOrPaginationAllowed( tableElem );\n};\n\n/**\n * This API returns whether expand is allowed.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nexports.isExpandAllowed = function( tableElem ) {\n    return isExpandOrPaginationAllowed( tableElem );\n};\n\n/**\n * This API returns whether requestStartEdit should be called after pagination.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditPagination = function( tableElem ) {\n    return exports.isBulkEditing( tableElem );\n};\n\n/**\n * This API returns whether requestStartEdit should be called after props have been loaded.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditPropsLoaded = function( tableElem ) {\n    return exports.isBulkEditing( tableElem );\n};\n\n/**\n * This API returns whether requestStartEdit should be called after tree pagination.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditTreePagination = function( tableElem, propertyProvider ) {\n    return exports.isBulkEditing( tableElem ) && !propertyProvider;\n};\n\n/**\n * This API returns whether requestStartEdit should be called after tree expand.\n * @param {DOMElement} tableElem : the table element\n * @param {Object} expandedNode : the node that was expanded\n * @param {Object} propertyProvider : the property provider\n * @return {Boolean} true if requestStartEdit should be called\n */\nexports.shouldRequestStartEditTreeExpand = function( tableElem, expandedNode, propertyProvider ) {\n    return ( expandedNode.__expandState || !expandedNode.__expandState && !propertyProvider ) && exports.isBulkEditing( tableElem );\n};\n\n/**\n * This API requests startEdit\n * Publishes the requestStartEdit events when the enableExpandAndPaginationInEdit gridOption is set (AW/Edit Handler)\n * or\n * Calls startEdit on dataProvider or declViewModel when editConfiguration exists (AFX/Edit Config)\n * @param {DOMElement} tableElem : the table element\n */\nexports.requestStartEdit = function( tableElem ) {\n    const tableInstance = exports.getTableInstance( tableElem );\n    const dataProvider = tableInstance.dataProvider;\n    const declViewModel = tableInstance.declViewModel;\n    if( tableInstance.gridOptions.enableExpandAndPaginationInEdit === true ) {\n        editEventsService.publishStartEditRequested( dataProvider );\n    } else if( dataProvider.getEditConfiguration() ) {\n        const dataCtxNode = {\n            data: declViewModel,\n            ctx: appCtxService.ctx\n        };\n        dataProvider.startEdit( dataCtxNode, declViewModel );\n    } else if( declViewModel.getEditConfiguration() ) {\n        declViewModel.startEdit();\n    }\n};\n\n/**\n * This API returns whether expand or pagination is allowed in edit mode.\n * @param {DOMElement} tableElem : the table element\n * @return {Boolean} is Allowed\n */\nexports.isExpandOrPaginationAllowedInEdit = function( tableElem ) {\n    const tableInstance = exports.getTableInstance( tableElem );\n    if( tableInstance.gridOptions.enableExpandAndPaginationInEdit === true ) {\n        return true;\n    } else if( tableInstance.dataProvider.getEditConfiguration() || tableInstance.declViewModel.getEditConfiguration() ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * This API is a helper function for interacting with awTableStateService.\n * @param {String} action the action to perform\n * @return {Object} the result of the action\n */\nexports.performStateServiceAction = function( action, declViewModel, gridId, node ) {\n    if( declViewModel.grids[ gridId ].gridOptions && declViewModel.grids[ gridId ].gridOptions.enableExpansionStateCaching === false ) {\n        return null;\n    }\n\n    switch ( action ) {\n        case 'clearAllStates':\n            return awTableStateService.clearAllStates( declViewModel, gridId );\n        case 'saveRowExpanded':\n            return awTableStateService.saveRowExpanded( declViewModel, gridId, node );\n        case 'saveRowCollapsed':\n            return awTableStateService.saveRowCollapsed( declViewModel, gridId, node );\n        case 'getTreeTableState':\n            return awTableStateService.getTreeTableState( declViewModel, gridId );\n        case 'isNodeExpanded': {\n            const treeTableState = awTableStateService.getTreeTableState( declViewModel, gridId );\n            return awTableStateService.isNodeExpanded( treeTableState, node );\n        }\n        default:\n            return null;\n    }\n};\n\n/**\n * This API is a helper function to determine if auto save is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if auto save is enabled\n */\nexports.isAutoSaveEnabled = function( tableElem ) {\n    const tableInstance = tableElem._tableInstance;\n    if( tableInstance && tableInstance.gridOptions && tableInstance.gridOptions.forceAutoSave === true || appCtxService.getCtx( 'autoSave' ) && appCtxService.getCtx( 'autoSave.dbValue' ) === true ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * This API is a helper function to determine if prop edit is enabled\n * @param {DOMElement} tableElem the table element\n * @return {Boolean} true if prop edit is enabled\n */\nexports.isPropEditEnabled = function( tableElem ) {\n    const tableInstance = tableElem._tableInstance;\n    if( tableInstance && tableInstance.dataProvider && tableInstance.dataProvider.isPropEditEnabled ) {\n        return tableInstance.dataProvider.isPropEditEnabled( tableInstance.declViewModel );\n    }\n    return false;\n};\n\n/**\n * Checks to see if row/column header selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has header selection enabled\n */\nexports.isCellHeaderSelectionEnabled = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).gridOptions.enableCellHeaderSelection;\n};\n\n/**\n * Checks to see if column selection is enabled\n * @param {DOMElement} tableElement the table element\n * @returns {Boolean} true if table has column selection enabled\n */\nexports.isColumnSelectionEnabled = function( tableElement ) {\n    return exports.getTableInstance( tableElement ).gridOptions.enableColumnSelection;\n};\n\n/**\n *\n * Get the column definition from the dataProvider based on column name\n *\n * @param { String } columnName - The column name\n * @param { Object } dataProvider - The data provider\n * @returns { Object } the column def found\n */\nexports.getColumnDef = function( columnName, dataProvider ) {\n    let columnDef = null;\n    for( let currentColumn of dataProvider.cols ) {\n        if( currentColumn.field === columnName ) {\n            columnDef = currentColumn;\n            break;\n        }\n    }\n    return columnDef;\n};\n\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
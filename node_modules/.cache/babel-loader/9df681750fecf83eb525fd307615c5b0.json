{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwCommandBarService.js\"; // Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandBarService\n */\n\nimport AwCommandList from 'viewmodel/AwCommandListViewModel';\nimport { getCommands } from './command.service';\nimport { getServerConditionUsage } from './commandVisibilityService';\nimport Debug from 'debug';\n/**\n * Wrapper component to handle initialization of AwCommandBar\n *\n * @param {Object} param0 Declarative render context\n * @returns {JSX.Element} React component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awCommandBarRenderFunction = _ref => {\n  let {\n    alignment,\n    visibilityLoader,\n    context,\n    anchor,\n    showCommandLabels,\n    viewModel: {\n      data: {\n        commandList = null,\n        visibleServerCommands,\n        trace\n      }\n    },\n    className,\n    overflow,\n    hideMore,\n    reverse\n  } = _ref; //If a server visibility loader is configured do not display commands until the server visibility is loaded\n\n  return commandList && /*#__PURE__*/_jsxDEV(AwCommandList, {\n    alignment: alignment,\n    anchor: anchor,\n    commandContext: context,\n    commandList: commandList,\n    hideMore: hideMore,\n    overflow: overflow,\n    showCommandLabels: showCommandLabels,\n    trace: trace,\n    visibilityLoader: visibilityLoader,\n    reverse: reverse,\n    visibleServerCommands: visibleServerCommands\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @returns {List<CommandOverlay>} List of command data for the given anchor\n */\n\nexport const awCommandBarInitFunction = async _ref2 => {\n  let {\n    anchor\n  } = _ref2;\n\n  if (!anchor) {\n    return [];\n  }\n\n  const trace = new Debug(`command:AwCommandBar:${anchor}`);\n  trace('Loading commands');\n  return getCommands(anchor).then(list => {\n    trace('Loaded command list', list);\n    return {\n      commandList: list,\n      trace\n    };\n  });\n};\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @param {Object} param0.commandList The list of commands to get server visibility for\n * @param {Object} param0.visibilityLoader The server visibility dataloader\n * @returns {Object} Current command visibility states\n */\n\nexport const refreshServerVisibility = async _ref3 => {\n  let {\n    commandList,\n    visibilityLoader,\n    trace\n  } = _ref3;\n\n  if (!commandList || !visibilityLoader) {\n    return null;\n  }\n\n  const serverCommandIds = commandList.map(cmd => {\n    const x = getServerConditionUsage(cmd);\n    cmd.trace('Server command visibility to be loaded', x);\n    return x;\n  }).reduce((acc, nxt) => acc.concat(nxt), []);\n  trace('Loading server visibility', serverCommandIds, commandList);\n  return visibilityLoader.loadMany(serverCommandIds).then(results => results.reduce((acc, result, idx) => {\n    acc[serverCommandIds[idx]] = result;\n    return acc;\n  }, {}));\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwCommandBarService.js"],"names":["awCommandBarRenderFunction","viewModel","data","commandList","trace","reverse","visibleServerCommands","awCommandBarInitFunction","anchor","list","refreshServerVisibility","serverCommandIds","cmd","x","getServerConditionUsage","acc","results"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandBarService\n */\nimport AwCommandList from 'viewmodel/AwCommandListViewModel';\nimport { getCommands } from './command.service';\nimport { getServerConditionUsage } from './commandVisibilityService';\nimport Debug from 'debug';\n\n/**\n * Wrapper component to handle initialization of AwCommandBar\n *\n * @param {Object} param0 Declarative render context\n * @returns {JSX.Element} React component\n */\nexport const awCommandBarRenderFunction = ( { alignment, visibilityLoader, context, anchor, showCommandLabels,\n    viewModel: { data: { commandList = null, visibleServerCommands, trace } }, className, overflow, hideMore, reverse } ) => {\n    //If a server visibility loader is configured do not display commands until the server visibility is loaded\n    return  commandList &&\n        <AwCommandList\n            alignment={ alignment }\n            anchor={ anchor }\n            commandContext={ context }\n            commandList={ commandList }\n            hideMore={hideMore}\n            overflow={ overflow }\n            showCommandLabels={ showCommandLabels }\n            trace={trace}\n            visibilityLoader={ visibilityLoader }\n            reverse={reverse}\n            visibleServerCommands={ visibleServerCommands }>\n        </AwCommandList>;\n};\n\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @returns {List<CommandOverlay>} List of command data for the given anchor\n */\nexport const awCommandBarInitFunction = async( {\n    anchor\n} ) => {\n    if( !anchor ) {\n        return [];\n    }\n    const trace = new Debug( `command:AwCommandBar:${anchor}` );\n    trace( 'Loading commands' );\n    return getCommands( anchor )\n        .then( list => {\n            trace( 'Loaded command list', list );\n            return {\n                commandList: list,\n                trace\n            };\n        } );\n};\n\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @param {Object} param0.commandList The list of commands to get server visibility for\n * @param {Object} param0.visibilityLoader The server visibility dataloader\n * @returns {Object} Current command visibility states\n */\nexport const refreshServerVisibility = async( {\n    commandList,\n    visibilityLoader,\n    trace\n} ) => {\n    if( !commandList || !visibilityLoader ) {\n        return null;\n    }\n    const serverCommandIds = commandList.map( cmd => {\n        const x = getServerConditionUsage( cmd );\n        cmd.trace( 'Server command visibility to be loaded', x );\n        return x;\n    } ).reduce( ( acc, nxt ) => acc.concat( nxt ), [] );\n    trace( 'Loading server visibility', serverCommandIds, commandList );\n    return visibilityLoader.loadMany( serverCommandIds )\n        .then( results => results.reduce( ( acc, result, idx ) => {\n            acc[ serverCommandIds[ idx ] ] = result;\n            return acc;\n        }, {} ) );\n};\n"]},"metadata":{},"sourceType":"module"}
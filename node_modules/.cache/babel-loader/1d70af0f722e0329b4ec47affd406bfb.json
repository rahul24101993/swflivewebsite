{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * View model collection factory\n * This factory creates ViewModelCollection instances which maintain the loaded ViewModelObjects and exposes APIs to\n * access the information of collection.\n *\n * @module js/viewModelCollectionFactory\n */\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport browserUtils from 'js/browserUtils'; // eslint-disable-next-line valid-jsdoc\n\n/**\n * {Number} The debug ID of the 'next' instance of a certain class.\n */\n\nvar _debug_nextId = {\n  viewModelCollection: 0\n};\n/**\n * {Number} The current number of 'active' instances of a certain class.\n */\n\nvar _debug_currentCount = {\n  viewModelCollection: 0\n};\n/**\n * {Boolean} TRUE if create/destroy events should be logged for all non-dataProvider objects from this\n * service.\n */\n\nvar _debug_logMiscModelLifeCycle = false;\n/**\n * Based on the given uid this function retrieves the IModelObject instance from the ClientDataModel and\n * creates a new instance of a ViewModelObject based on the model object passed in.\n *\n * @param {String} uid - ID of the new ViewModelObject.\n *\n * @return {ViewModelObject} New ViewModelObject (or NULL if no match was found in the ClientDataModel).\n */\n\nfunction _createViewModelObject(uid) {\n  if (uid) {\n    return viewModelObjectSvc.createViewModelObject(uid, 'EDIT');\n  }\n\n  return null;\n}\n/**\n * Class used to maintain data for various DataProviders.\n *\n * @param {String} name of the viewModelCollection\n * @constructor ViewModelCollection\n */\n\n\nvar ViewModelCollection = function (name) {\n  var self = this;\n  /**\n   * Name of this view model collection (usually the same as the dataprovider name)\n   */\n\n  self.name = name;\n  /**\n   * Array of ViewModelObjects currently being managed in this 'virtual' collection.\n   */\n\n  self.loadedVMObjects = [];\n  /**\n   * The number of ViewModelObjects currently in this 'virtual' collection (should be same as length of\n   * 'loadedVMObjects').\n   */\n\n  self.totalObjectsLoaded = 0;\n  /**\n   * The number of ViewModelObjects possible in this 'virtual' collection.\n   */\n\n  self.totalFound = 0;\n  /**\n   * {SubDefArray} Collection of eventBus subscription definitions.\n   */\n\n  var _eventBusSubDefs = [];\n  /**\n   * {String} Topic to publish for each 'cdm.new' event.\n   */\n\n  var _eventTopicNew = 'vmc.new.' + self.name;\n  /**\n   * {String} Topic to publish for each 'cdm.modified.' event.\n   */\n\n\n  var _eventTopicModified = 'vmc.modified.' + self.name;\n  /**\n   * {Object} Cached (shared) data object to publish for 'vmc.new.xxx' events.\n   */\n\n\n  var _eventDataNew = {\n    vmc: self,\n    newObjects: null\n  };\n  /**\n   * {Object} Cached (shared) data object to publish for 'vmc.modified.xxx' events.\n   */\n\n  var _eventDataModified = {\n    vmc: self,\n    modifiedObjects: null\n  };\n  /**\n   * Updates the loaded objects array and total objects loaded counter.\n   *\n   * @param {Array} results - Array of model objects or objects\n   *\n   * @param {String} uidInResponse - if response object doesn't have uid at top level, then this attribute\n   *            should specify the level where uid is available. Example:\n   *\n   * <pre>\n   *    responseObject: {\n   *        test: {\n   *            uid: 'AAAAAAAA'\n   *        }\n   *    },\n   *    uidInResponse: 'test.uid'\n   * </pre>\n   *\n   * @param {Boolean} preSelection - if the objects should inherit 'selected' status\n   *\n   * @param {Boolean} prepend - Insert Before current start index. (optional)\n   *\n   * @memberof ViewModelCollection\n   */\n\n  self.updateModelObjects = function (results, uidInResponse, preSelection, prepend) {\n    var actualResults = results.objects || results;\n\n    if (!_.isEmpty(actualResults)) {\n      var preprendVMObjects = [];\n\n      _.forEach(actualResults, function (object) {\n        var vmObject = null;\n        var uid = null;\n\n        if (results.objects) {\n          uid = object.uid;\n          vmObject = viewModelObjectSvc.createViewModelObject(uid, 'EDIT', null, object);\n        } else if (object.uid) {\n          // Retrieve object's UID\n          uid = object.uid;\n          var modelObj = cdm.getObject(uid); // If object is there in the CDM, convert it to VM object\n\n          if (modelObj) {\n            if (viewModelObjectSvc.isViewModelObject(object) || object.dataMapper) {\n              // if VMObject is passed, use it directly instead of creating again\n              vmObject = object;\n            } else {\n              // Get underlying target object's UID if 'awp0Target' property exists\n              if (modelObj.props && modelObj.props.awp0Target) {\n                uid = modelObj.props.awp0Target.dbValues[0];\n              }\n\n              vmObject = _createViewModelObject(uid);\n            }\n          } else {\n            // If object is not there in the CDM, it is a VM object\n            vmObject = object;\n          }\n        } else if (uidInResponse) {\n          // if object doesn't have any UID, then retrieve the UID from the structure provided\n          uid = _.get(object, uidInResponse);\n          vmObject = _createViewModelObject(uid);\n        } else {\n          // for static objects\n          vmObject = object;\n        }\n\n        if (vmObject && !prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          self.loadedVMObjects.push(vmObject);\n        }\n\n        if (vmObject && prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          preprendVMObjects.push(vmObject);\n        } // update total count for loaded objects\n\n\n        self.totalObjectsLoaded++;\n      });\n\n      if (!_.isEmpty(preprendVMObjects)) {\n        self.loadedVMObjects = preprendVMObjects.concat(self.loadedVMObjects);\n      } // if moreValuesExist of the LOV results,\n\n\n      if (actualResults.moreValuesExist) {\n        self.moreValuesExist = actualResults.moreValuesExist;\n      }\n    }\n  };\n\n  self.createModelObjects = function (results, uidInResponse, preSelection, prepend) {\n    let actualResults = results.objects || results;\n    let loadedVMObjects = [];\n\n    if (!_.isEmpty(actualResults)) {\n      var preprendVMObjects = [];\n\n      _.forEach(actualResults, function (object) {\n        let vmObject = null;\n        let uid = null;\n\n        if (results.objects) {\n          uid = object.uid;\n          vmObject = viewModelObjectSvc.createViewModelObject(uid, 'EDIT', null, object);\n        } else if (object.uid) {\n          // Retrieve object's UID\n          uid = object.uid;\n          let modelObj = cdm.getObject(uid); // If object is there in the CDM, convert it to VM object\n\n          if (modelObj) {\n            if (viewModelObjectSvc.isViewModelObject(object) || object.dataMapper) {\n              // if VMObject is passed, use it directly instead of creating again\n              vmObject = object;\n            } else {\n              // Get underlying target object's UID if 'awp0Target' property exists\n              if (modelObj.props && modelObj.props.awp0Target) {\n                uid = modelObj.props.awp0Target.dbValues[0];\n              }\n\n              vmObject = _createViewModelObject(uid);\n            }\n          } else {\n            // If object is not there in the CDM, it is a VM object\n            vmObject = object;\n          }\n        } else if (uidInResponse) {\n          // if object doesn't have any UID, then retrieve the UID from the structure provided\n          uid = _.get(object, uidInResponse);\n          vmObject = _createViewModelObject(uid);\n        } else {\n          // for static objects\n          vmObject = object;\n        }\n\n        if (vmObject && !prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          loadedVMObjects.push(vmObject);\n        }\n\n        if (vmObject && prepend) {\n          if (preSelection && !_.isUndefined(object.selected)) {\n            vmObject.selected = object.selected;\n          }\n\n          preprendVMObjects.push(vmObject);\n        }\n      });\n\n      if (!_.isEmpty(preprendVMObjects)) {\n        loadedVMObjects = preprendVMObjects.concat(self.loadedVMObjects);\n      } // if moreValuesExist of the LOV results,\n\n\n      if (actualResults.moreValuesExist) {\n        self.moreValuesExist = actualResults.moreValuesExist;\n      }\n    }\n\n    return loadedVMObjects;\n  };\n  /**\n   * @param {ObjectArray} viewModelObjects - The array to set as the currently loaded view model objects\n   *            being managed within this viewModelCollection.\n   */\n\n\n  self.setViewModelObjects = function (viewModelObjects) {\n    self.totalObjectsLoaded = viewModelObjects.length; //create a new reference to trigger update.\n\n    self.loadedVMObjects = [...viewModelObjects];\n  };\n  /**\n   * Returns view model object at specified index.\n   *\n   * @param {Number} index - specified index\n   * @return {Object} Null or object at given index\n   * @memberof ViewModelCollection\n   */\n\n\n  self.getViewModelObject = function (index) {\n    if (self.loadedVMObjects) {\n      return self.loadedVMObjects[index];\n    }\n\n    return null;\n  };\n  /**\n   * Returns view model objects with the specified id (can be uid).\n   *\n   * @param {String} id - specific id of the view model object\n   * @return {Array} Empty or with view model objects found\n   * @memberof ViewModelCollection\n   */\n\n\n  self.getViewModelObjects = function (id) {\n    var returnViewModelObjects = [];\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      if (id === vmo.getId()) {\n        returnViewModelObjects.push(vmo);\n      }\n    });\n\n    return returnViewModelObjects;\n  };\n  /**\n   * Set total objects found\n   *\n   * @param {Number} totalFound - total found\n   * @memberof ViewModelCollection\n   */\n\n\n  self.setTotalObjectsFound = function (totalFound) {\n    self.totalFound = totalFound;\n  };\n  /**\n   * Return total objects found\n   *\n   * @memberof ViewModelCollection\n   *\n   * @returns {Number} Total objects found.\n   */\n\n\n  self.getTotalObjectsFound = function () {\n    return self.totalFound;\n  };\n  /**\n   * Return total unique objects found, unique by id.\n   *\n   * @memberof ViewModelCollection\n   *\n   * @returns {Number} Total unique objects found, unique by id.\n   */\n\n\n  self.getTotalUniqueObjectsLoaded = function () {\n    var uniqueUids = {};\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      if (vmo.getId) {\n        uniqueUids[vmo.getId()] = null;\n      } else if (vmo.uid) {\n        //This is the case of ViewModelTreeNode which doesn't contain getId method as its not a VMO. getId is added when the props are loaded.\n        uniqueUids[vmo.uid] = null;\n      }\n    }); // return totalObjectsLoaded if no ids were found on the objects\n\n\n    return Object.keys(uniqueUids).length || self.totalObjectsLoaded;\n  };\n  /**\n   * Return True/False if there are more objects to be loaded.\n   *\n   * @memberof ViewModelCollection\n   *\n   * @return {Boolean} True/False if there are more objects to be loaded.\n   */\n\n\n  self.hasMoreObjectsToLoad = function () {\n    return self.getTotalUniqueObjectsLoaded() < self.getTotalObjectsFound();\n  };\n  /**\n   * To support infinite scroll, if total found are greater than loaded objects then return\n   * totalObjectsLoaded + 3 else return total objects loaded\n   *\n   * @memberof ViewModelCollection\n   *\n   * @return {Number} Total objects loaded\n   */\n\n\n  self.getVirtualLength = function () {\n    var retValue = self.totalObjectsLoaded;\n\n    if (self.totalObjectsLoaded > 0 && self.hasMoreObjectsToLoad()) {\n      retValue += 3;\n    }\n\n    return retValue;\n  };\n  /**\n   * Returns total objects loaded\n   *\n   * @memberof ViewModelCollection\n   *\n   * @return {Number} total objects loaded\n   */\n\n\n  self.getTotalObjectsLoaded = function () {\n    return self.totalObjectsLoaded;\n  };\n  /**\n   * Reset loaded objects array and total objects loaded counter\n   *\n   * @memberof ViewModelCollection\n   */\n\n\n  self.clear = function () {\n    self.loadedVMObjects = [];\n    self.totalObjectsLoaded = 0;\n    self.totalFound = 0;\n  };\n  /**\n   * Return loaded view model objects\n   *\n   * @memberof ViewModelCollection\n   * @return {Array} loaded view model objects\n   */\n\n\n  self.getLoadedViewModelObjects = function () {\n    return self.loadedVMObjects;\n  };\n  /**\n   * Get all the editable properties\n   *\n   * @return {ViewModelPropertyArray} Collection of editable properties.\n   */\n\n\n  self.getAllEditableProperties = function () {\n    var allEditableProperties = [];\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (prop.isEditable) {\n          allEditableProperties.push(prop);\n        }\n      });\n    });\n\n    return allEditableProperties;\n  };\n  /**\n   * Get all the modified properties\n   *\n   * @return {ViewModelPropertyArray} Collection of modified properties.\n   */\n\n\n  self.getAllModifiedProperties = function () {\n    var allModifiedProperties = [];\n\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (uwPropertySvc.isModified(prop)) {\n          allModifiedProperties.push({\n            property: prop,\n            viewModelObject: vmo\n          });\n        }\n      });\n    });\n\n    return allModifiedProperties;\n  };\n  /**\n   * Check editability on all properties\n   */\n\n\n  self.checkEditableOnProperties = function () {\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      viewModelObjectSvc.updateVMOProperties(vmo);\n    });\n  };\n  /**\n   * Reset all 'editable' status properties from the underlying object.\n   */\n\n\n  self.clearEditiableStates = function () {\n    _.forEach(self.loadedVMObjects, function (vmo) {\n      vmo.clearEditiableStates(true);\n    });\n    /** revisitme billa\n     * HINT: We don't need this now\n     * uwPropertySvc.triggerDigestCycle();\n     */\n\n  };\n  /**\n   * Returns 1st ViewModelObject index in the collection whose 'id' (or 'uid') matches specified value.\n   *\n   * @memberof ViewModelCollection\n   *\n   * @param {String} idToFind - The ID (or UID) of the ViewModelObject to find.\n   * @return {Number} Index in the ViewModelSelection of the ViewModelObject found (or -1 if not found).\n   */\n\n\n  self.findViewModelObjectById = function (idToFind) {\n    for (var ndx = 0; ndx < self.loadedVMObjects.length; ndx++) {\n      var vmo = self.loadedVMObjects[ndx];\n\n      if (vmo.alternateID && vmo.alternateID === idToFind) {\n        return ndx;\n      }\n\n      if (vmo.id && vmo.id === idToFind) {\n        return ndx;\n      }\n\n      if (vmo.uid && vmo.uid === idToFind) {\n        return ndx;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * Remove the passed in objects (array of viewModelTreeNodes)\n   *\n   * @param {Array} objectsToRemove an array of viewModelTreeNodes keyed by uid\n   */\n\n\n  self.removeLoadedObjects = function (objectsToRemove) {\n    if (objectsToRemove && objectsToRemove.length > 0) {\n      _.remove(self.loadedVMObjects, function (treeNode) {\n        var i = 0;\n        var doRemove = false;\n\n        while (i < objectsToRemove.length && !doRemove) {\n          if (treeNode.uid === objectsToRemove[i].uid) {\n            doRemove = true;\n          }\n\n          i++;\n        }\n\n        return doRemove;\n      });\n    }\n  };\n  /**\n   * Free up all resources held/managed by this object.\n   * <P>\n   * Note: After this function, no API call should be considered valid. This function is intended to be\n   * called when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a\n   * GC event), any objects managed by this class may be considered a 'memory leak'.\n   */\n\n\n  self.destroy = function () {\n    self._isDestroyed = true;\n    _debug_currentCount.viewModelCollection--;\n\n    if (_debug_logMiscModelLifeCycle) {\n      logger.info('Destroying ViewModelCollection: ' + self._modelId + ' # Remaining:' + _debug_currentCount.viewModelCollection);\n    }\n\n    _.forEach(_eventBusSubDefs, function (subDef) {\n      eventBus.unsubscribe(subDef);\n    });\n\n    _eventBusSubDefs = null;\n    self.clear();\n  };\n  /**\n   * ---------------------------------------------------------------------------<BR>\n   * Property & Function definition complete....Finish initialization. <BR>\n   * ---------------------------------------------------------------------------<BR>\n   */\n\n\n  self._modelId = _debug_nextId.viewModelCollection++;\n  _debug_currentCount.viewModelCollection++;\n\n  if (_debug_logMiscModelLifeCycle) {\n    logger.info('Created ViewModelCollection: ' + self._modelId);\n  }\n\n  _eventBusSubDefs.push(eventBus.subscribe('cdm.new', function (event) {\n    _eventDataNew.newObjects = event.newObjects;\n    eventBus.publish(_eventTopicNew, _eventDataNew);\n  }));\n\n  _eventBusSubDefs.push(eventBus.subscribe('cdm.modified', function (event) {\n    _eventDataModified.modifiedObjects = event.modifiedObjects;\n    eventBus.publish(_eventTopicModified, _eventDataModified);\n    /**\n     * Post process cdm event to update any of the reported objects that may be loaded in this\n     * viewModelCollection.\n     */\n\n    viewModelObjectSvc.updateViewModelObjectCollection(self.loadedVMObjects, event.modifiedObjects);\n  })); // Listen for CDM Deleted events (will be unregistered onDestroy)\n\n\n  _eventBusSubDefs.push(eventBus.subscribe('cdm.deleted', function (event) {\n    /**\n     * Post process cdm deleted event to remove any deleted objects from viewModelCollection collection\n     * of loadedVMObjects and then set the totalObjectsLoaded count.\n     */\n    let updateRequired = false;\n\n    if (event.deletedObjectUids && event.deletedObjectUids.length > 0) {\n      _.forEach(event.deletedObjectUids, function (deletedUid) {\n        // remove the found object by uid from the collection of loadedVMObjects\n        _.remove(self.loadedVMObjects, function (vmo) {\n          if (vmo.uid === deletedUid) {\n            updateRequired = true;\n            return true;\n          }\n        });\n      });\n\n      if (updateRequired) {\n        self.update(self.loadedVMObjects, self.loadedVMObjects.length);\n      }\n    }\n  }));\n};\n\n_c = ViewModelCollection;\n_debug_logMiscModelLifeCycle = browserUtils.getUrlAttributes().logMiscModelLifeCycle === '';\nvar exports = {};\n/**\n * Create new instance of view model collection\n *\n * @param {String} name - name of the ViewModelCollection\n * @return {ViewModelCollection} Returns view model collection object\n */\n\nexport let createViewModelCollection = function (name) {\n  return new ViewModelCollection(name);\n};\nexports = {\n  createViewModelCollection\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewModelCollection\");","map":{"version":3,"names":["cdm","viewModelObjectSvc","uwPropertySvc","_","eventBus","logger","browserUtils","_debug_nextId","viewModelCollection","_debug_currentCount","_debug_logMiscModelLifeCycle","_createViewModelObject","uid","createViewModelObject","ViewModelCollection","name","self","loadedVMObjects","totalObjectsLoaded","totalFound","_eventBusSubDefs","_eventTopicNew","_eventTopicModified","_eventDataNew","vmc","newObjects","_eventDataModified","modifiedObjects","updateModelObjects","results","uidInResponse","preSelection","prepend","actualResults","objects","isEmpty","preprendVMObjects","forEach","object","vmObject","modelObj","getObject","isViewModelObject","dataMapper","props","awp0Target","dbValues","get","isUndefined","selected","push","concat","moreValuesExist","createModelObjects","setViewModelObjects","viewModelObjects","length","getViewModelObject","index","getViewModelObjects","id","returnViewModelObjects","vmo","getId","setTotalObjectsFound","getTotalObjectsFound","getTotalUniqueObjectsLoaded","uniqueUids","Object","keys","hasMoreObjectsToLoad","getVirtualLength","retValue","getTotalObjectsLoaded","clear","getLoadedViewModelObjects","getAllEditableProperties","allEditableProperties","prop","isEditable","getAllModifiedProperties","allModifiedProperties","isModified","property","viewModelObject","checkEditableOnProperties","updateVMOProperties","clearEditiableStates","findViewModelObjectById","idToFind","ndx","alternateID","removeLoadedObjects","objectsToRemove","remove","treeNode","i","doRemove","destroy","_isDestroyed","info","_modelId","subDef","unsubscribe","subscribe","event","publish","updateViewModelObjectCollection","updateRequired","deletedObjectUids","deletedUid","update","getUrlAttributes","logMiscModelLifeCycle","exports","createViewModelCollection"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/viewModelCollectionFactory.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * View model collection factory\n * This factory creates ViewModelCollection instances which maintain the loaded ViewModelObjects and exposes APIs to\n * access the information of collection.\n *\n * @module js/viewModelCollectionFactory\n */\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSvc from 'js/viewModelObjectService';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport browserUtils from 'js/browserUtils';\n\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * {Number} The debug ID of the 'next' instance of a certain class.\n */\nvar _debug_nextId = {\n    viewModelCollection: 0\n};\n\n/**\n * {Number} The current number of 'active' instances of a certain class.\n */\nvar _debug_currentCount = {\n    viewModelCollection: 0\n};\n\n/**\n * {Boolean} TRUE if create/destroy events should be logged for all non-dataProvider objects from this\n * service.\n */\nvar _debug_logMiscModelLifeCycle = false;\n\n/**\n * Based on the given uid this function retrieves the IModelObject instance from the ClientDataModel and\n * creates a new instance of a ViewModelObject based on the model object passed in.\n *\n * @param {String} uid - ID of the new ViewModelObject.\n *\n * @return {ViewModelObject} New ViewModelObject (or NULL if no match was found in the ClientDataModel).\n */\nfunction _createViewModelObject( uid ) {\n    if( uid ) {\n        return viewModelObjectSvc.createViewModelObject( uid, 'EDIT' );\n    }\n\n    return null;\n}\n\n/**\n * Class used to maintain data for various DataProviders.\n *\n * @param {String} name of the viewModelCollection\n * @constructor ViewModelCollection\n */\nvar ViewModelCollection = function( name ) {\n    var self = this;\n\n    /**\n     * Name of this view model collection (usually the same as the dataprovider name)\n     */\n    self.name = name;\n\n    /**\n     * Array of ViewModelObjects currently being managed in this 'virtual' collection.\n     */\n    self.loadedVMObjects = [];\n\n    /**\n     * The number of ViewModelObjects currently in this 'virtual' collection (should be same as length of\n     * 'loadedVMObjects').\n     */\n    self.totalObjectsLoaded = 0;\n\n    /**\n     * The number of ViewModelObjects possible in this 'virtual' collection.\n     */\n    self.totalFound = 0;\n\n    /**\n     * {SubDefArray} Collection of eventBus subscription definitions.\n     */\n    var _eventBusSubDefs = [];\n\n    /**\n     * {String} Topic to publish for each 'cdm.new' event.\n     */\n    var _eventTopicNew = 'vmc.new.' + self.name;\n\n    /**\n     * {String} Topic to publish for each 'cdm.modified.' event.\n     */\n    var _eventTopicModified = 'vmc.modified.' + self.name;\n\n    /**\n     * {Object} Cached (shared) data object to publish for 'vmc.new.xxx' events.\n     */\n    var _eventDataNew = {\n        vmc: self,\n        newObjects: null\n    };\n\n    /**\n     * {Object} Cached (shared) data object to publish for 'vmc.modified.xxx' events.\n     */\n    var _eventDataModified = {\n        vmc: self,\n        modifiedObjects: null\n    };\n\n    /**\n     * Updates the loaded objects array and total objects loaded counter.\n     *\n     * @param {Array} results - Array of model objects or objects\n     *\n     * @param {String} uidInResponse - if response object doesn't have uid at top level, then this attribute\n     *            should specify the level where uid is available. Example:\n     *\n     * <pre>\n     *    responseObject: {\n     *        test: {\n     *            uid: 'AAAAAAAA'\n     *        }\n     *    },\n     *    uidInResponse: 'test.uid'\n     * </pre>\n     *\n     * @param {Boolean} preSelection - if the objects should inherit 'selected' status\n     *\n     * @param {Boolean} prepend - Insert Before current start index. (optional)\n     *\n     * @memberof ViewModelCollection\n     */\n    self.updateModelObjects = function( results, uidInResponse, preSelection, prepend ) {\n        var actualResults = results.objects || results;\n\n        if( !_.isEmpty( actualResults ) ) {\n            var preprendVMObjects = [];\n\n            _.forEach( actualResults, function( object ) {\n                var vmObject = null;\n                var uid = null;\n\n                if( results.objects ) {\n                    uid = object.uid;\n                    vmObject = viewModelObjectSvc.createViewModelObject( uid, 'EDIT', null, object );\n                } else if( object.uid ) { // Retrieve object's UID\n                    uid = object.uid;\n\n                    var modelObj = cdm.getObject( uid );\n\n                    // If object is there in the CDM, convert it to VM object\n                    if( modelObj ) {\n                        if( viewModelObjectSvc.isViewModelObject( object ) || object.dataMapper ) {\n                            // if VMObject is passed, use it directly instead of creating again\n                            vmObject = object;\n                        } else {\n                            // Get underlying target object's UID if 'awp0Target' property exists\n                            if( modelObj.props && modelObj.props.awp0Target ) {\n                                uid = modelObj.props.awp0Target.dbValues[ 0 ];\n                            }\n\n                            vmObject = _createViewModelObject( uid );\n                        }\n                    } else {\n                        // If object is not there in the CDM, it is a VM object\n                        vmObject = object;\n                    }\n                } else if( uidInResponse ) { // if object doesn't have any UID, then retrieve the UID from the structure provided\n                    uid = _.get( object, uidInResponse );\n\n                    vmObject = _createViewModelObject( uid );\n                } else { // for static objects\n                    vmObject = object;\n                }\n\n                if( vmObject && !prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    self.loadedVMObjects.push( vmObject );\n                }\n\n                if( vmObject && prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    preprendVMObjects.push( vmObject );\n                }\n\n                // update total count for loaded objects\n                self.totalObjectsLoaded++;\n            } );\n\n            if( !_.isEmpty( preprendVMObjects ) ) {\n                self.loadedVMObjects = preprendVMObjects.concat( self.loadedVMObjects );\n            }\n\n            // if moreValuesExist of the LOV results,\n            if( actualResults.moreValuesExist ) {\n                self.moreValuesExist = actualResults.moreValuesExist;\n            }\n        }\n    };\n\n    self.createModelObjects = function( results, uidInResponse, preSelection, prepend ) {\n        let actualResults = results.objects || results;\n        let loadedVMObjects = [];\n        if( !_.isEmpty( actualResults ) ) {\n            var preprendVMObjects = [];\n\n            _.forEach( actualResults, function( object ) {\n                let vmObject = null;\n                let uid = null;\n\n                if( results.objects ) {\n                    uid = object.uid;\n                    vmObject = viewModelObjectSvc.createViewModelObject( uid, 'EDIT', null, object );\n                } else if( object.uid ) { // Retrieve object's UID\n                    uid = object.uid;\n\n                    let modelObj = cdm.getObject( uid );\n\n                    // If object is there in the CDM, convert it to VM object\n                    if( modelObj ) {\n                        if( viewModelObjectSvc.isViewModelObject( object ) || object.dataMapper ) {\n                            // if VMObject is passed, use it directly instead of creating again\n                            vmObject = object;\n                        } else {\n                            // Get underlying target object's UID if 'awp0Target' property exists\n                            if( modelObj.props && modelObj.props.awp0Target ) {\n                                uid = modelObj.props.awp0Target.dbValues[ 0 ];\n                            }\n\n                            vmObject = _createViewModelObject( uid );\n                        }\n                    } else {\n                        // If object is not there in the CDM, it is a VM object\n                        vmObject = object;\n                    }\n                } else if( uidInResponse ) { // if object doesn't have any UID, then retrieve the UID from the structure provided\n                    uid = _.get( object, uidInResponse );\n\n                    vmObject = _createViewModelObject( uid );\n                } else { // for static objects\n                    vmObject = object;\n                }\n\n                if( vmObject && !prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    loadedVMObjects.push( vmObject );\n                }\n\n                if( vmObject && prepend ) {\n                    if( preSelection && !_.isUndefined( object.selected ) ) {\n                        vmObject.selected = object.selected;\n                    }\n\n                    preprendVMObjects.push( vmObject );\n                }\n            } );\n\n            if( !_.isEmpty( preprendVMObjects ) ) {\n                loadedVMObjects = preprendVMObjects.concat( self.loadedVMObjects );\n            }\n            // if moreValuesExist of the LOV results,\n            if( actualResults.moreValuesExist ) {\n                self.moreValuesExist = actualResults.moreValuesExist;\n            }\n        }\n        return loadedVMObjects;\n    };\n\n    /**\n     * @param {ObjectArray} viewModelObjects - The array to set as the currently loaded view model objects\n     *            being managed within this viewModelCollection.\n     */\n    self.setViewModelObjects = function( viewModelObjects ) {\n        self.totalObjectsLoaded = viewModelObjects.length;\n        //create a new reference to trigger update.\n        self.loadedVMObjects = [ ...viewModelObjects ];\n    };\n\n    /**\n     * Returns view model object at specified index.\n     *\n     * @param {Number} index - specified index\n     * @return {Object} Null or object at given index\n     * @memberof ViewModelCollection\n     */\n    self.getViewModelObject = function( index ) {\n        if( self.loadedVMObjects ) {\n            return self.loadedVMObjects[ index ];\n        }\n        return null;\n    };\n\n    /**\n     * Returns view model objects with the specified id (can be uid).\n     *\n     * @param {String} id - specific id of the view model object\n     * @return {Array} Empty or with view model objects found\n     * @memberof ViewModelCollection\n     */\n    self.getViewModelObjects = function( id ) {\n        var returnViewModelObjects = [];\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            if( id === vmo.getId() ) {\n                returnViewModelObjects.push( vmo );\n            }\n        } );\n\n        return returnViewModelObjects;\n    };\n\n    /**\n     * Set total objects found\n     *\n     * @param {Number} totalFound - total found\n     * @memberof ViewModelCollection\n     */\n    self.setTotalObjectsFound = function( totalFound ) {\n        self.totalFound = totalFound;\n    };\n\n    /**\n     * Return total objects found\n     *\n     * @memberof ViewModelCollection\n     *\n     * @returns {Number} Total objects found.\n     */\n    self.getTotalObjectsFound = function() {\n        return self.totalFound;\n    };\n\n    /**\n     * Return total unique objects found, unique by id.\n     *\n     * @memberof ViewModelCollection\n     *\n     * @returns {Number} Total unique objects found, unique by id.\n     */\n    self.getTotalUniqueObjectsLoaded = function() {\n        var uniqueUids = {};\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            if( vmo.getId ) {\n                uniqueUids[ vmo.getId() ] = null;\n            } else if( vmo.uid ) { //This is the case of ViewModelTreeNode which doesn't contain getId method as its not a VMO. getId is added when the props are loaded.\n                uniqueUids[ vmo.uid ] = null;\n            }\n        } );\n        // return totalObjectsLoaded if no ids were found on the objects\n        return Object.keys( uniqueUids ).length || self.totalObjectsLoaded;\n    };\n\n    /**\n     * Return True/False if there are more objects to be loaded.\n     *\n     * @memberof ViewModelCollection\n     *\n     * @return {Boolean} True/False if there are more objects to be loaded.\n     */\n    self.hasMoreObjectsToLoad = function() {\n        return self.getTotalUniqueObjectsLoaded() < self.getTotalObjectsFound();\n    };\n\n    /**\n     * To support infinite scroll, if total found are greater than loaded objects then return\n     * totalObjectsLoaded + 3 else return total objects loaded\n     *\n     * @memberof ViewModelCollection\n     *\n     * @return {Number} Total objects loaded\n     */\n    self.getVirtualLength = function() {\n        var retValue = self.totalObjectsLoaded;\n\n        if( self.totalObjectsLoaded > 0 && self.hasMoreObjectsToLoad() ) {\n            retValue += 3;\n        }\n\n        return retValue;\n    };\n\n    /**\n     * Returns total objects loaded\n     *\n     * @memberof ViewModelCollection\n     *\n     * @return {Number} total objects loaded\n     */\n    self.getTotalObjectsLoaded = function() {\n        return self.totalObjectsLoaded;\n    };\n\n    /**\n     * Reset loaded objects array and total objects loaded counter\n     *\n     * @memberof ViewModelCollection\n     */\n    self.clear = function() {\n        self.loadedVMObjects = [];\n        self.totalObjectsLoaded = 0;\n        self.totalFound = 0;\n    };\n\n    /**\n     * Return loaded view model objects\n     *\n     * @memberof ViewModelCollection\n     * @return {Array} loaded view model objects\n     */\n    self.getLoadedViewModelObjects = function() {\n        return self.loadedVMObjects;\n    };\n\n    /**\n     * Get all the editable properties\n     *\n     * @return {ViewModelPropertyArray} Collection of editable properties.\n     */\n    self.getAllEditableProperties = function() {\n        var allEditableProperties = [];\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( prop.isEditable ) {\n                    allEditableProperties.push( prop );\n                }\n            } );\n        } );\n\n        return allEditableProperties;\n    };\n\n    /**\n     * Get all the modified properties\n     *\n     * @return {ViewModelPropertyArray} Collection of modified properties.\n     */\n    self.getAllModifiedProperties = function() {\n        var allModifiedProperties = [];\n\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( uwPropertySvc.isModified( prop ) ) {\n                    allModifiedProperties.push( {\n                        property: prop,\n                        viewModelObject: vmo\n                    } );\n                }\n            } );\n        } );\n\n        return allModifiedProperties;\n    };\n\n    /**\n     * Check editability on all properties\n     */\n    self.checkEditableOnProperties = function() {\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            viewModelObjectSvc.updateVMOProperties( vmo );\n        } );\n    };\n\n    /**\n     * Reset all 'editable' status properties from the underlying object.\n     */\n    self.clearEditiableStates = function() {\n        _.forEach( self.loadedVMObjects, function( vmo ) {\n            vmo.clearEditiableStates( true );\n        } );\n\n        /** revisitme billa\n         * HINT: We don't need this now\n         * uwPropertySvc.triggerDigestCycle();\n         */\n    };\n\n    /**\n     * Returns 1st ViewModelObject index in the collection whose 'id' (or 'uid') matches specified value.\n     *\n     * @memberof ViewModelCollection\n     *\n     * @param {String} idToFind - The ID (or UID) of the ViewModelObject to find.\n     * @return {Number} Index in the ViewModelSelection of the ViewModelObject found (or -1 if not found).\n     */\n    self.findViewModelObjectById = function( idToFind ) {\n        for( var ndx = 0; ndx < self.loadedVMObjects.length; ndx++ ) {\n            var vmo = self.loadedVMObjects[ ndx ];\n\n            if( vmo.alternateID && vmo.alternateID === idToFind ) {\n                return ndx;\n            }\n\n            if( vmo.id && vmo.id === idToFind ) {\n                return ndx;\n            }\n\n            if( vmo.uid && vmo.uid === idToFind ) {\n                return ndx;\n            }\n        }\n\n        return -1;\n    };\n\n    /**\n     * Remove the passed in objects (array of viewModelTreeNodes)\n     *\n     * @param {Array} objectsToRemove an array of viewModelTreeNodes keyed by uid\n     */\n    self.removeLoadedObjects = function( objectsToRemove ) {\n        if( objectsToRemove && objectsToRemove.length > 0 ) {\n            _.remove( self.loadedVMObjects, function( treeNode ) {\n                var i = 0;\n                var doRemove = false;\n\n                while( i < objectsToRemove.length && !doRemove ) {\n                    if( treeNode.uid === objectsToRemove[ i ].uid ) {\n                        doRemove = true;\n                    }\n                    i++;\n                }\n                return doRemove;\n            } );\n        }\n    };\n\n    /**\n     * Free up all resources held/managed by this object.\n     * <P>\n     * Note: After this function, no API call should be considered valid. This function is intended to be\n     * called when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a\n     * GC event), any objects managed by this class may be considered a 'memory leak'.\n     */\n    self.destroy = function() {\n        self._isDestroyed = true;\n\n        _debug_currentCount.viewModelCollection--;\n\n        if( _debug_logMiscModelLifeCycle ) {\n            logger.info( 'Destroying ViewModelCollection: ' + self._modelId + ' # Remaining:' +\n                _debug_currentCount.viewModelCollection );\n        }\n\n        _.forEach( _eventBusSubDefs, function( subDef ) {\n            eventBus.unsubscribe( subDef );\n        } );\n\n        _eventBusSubDefs = null;\n\n        self.clear();\n    };\n\n    /**\n     * ---------------------------------------------------------------------------<BR>\n     * Property & Function definition complete....Finish initialization. <BR>\n     * ---------------------------------------------------------------------------<BR>\n     */\n\n    self._modelId = _debug_nextId.viewModelCollection++;\n\n    _debug_currentCount.viewModelCollection++;\n\n    if( _debug_logMiscModelLifeCycle ) {\n        logger.info( 'Created ViewModelCollection: ' + self._modelId );\n    }\n\n    _eventBusSubDefs.push( eventBus.subscribe( 'cdm.new', function( event ) {\n        _eventDataNew.newObjects = event.newObjects;\n        eventBus.publish( _eventTopicNew, _eventDataNew );\n    } ) );\n\n    _eventBusSubDefs.push( eventBus.subscribe( 'cdm.modified', function( event ) {\n        _eventDataModified.modifiedObjects = event.modifiedObjects;\n\n        eventBus.publish( _eventTopicModified, _eventDataModified );\n\n        /**\n         * Post process cdm event to update any of the reported objects that may be loaded in this\n         * viewModelCollection.\n         */\n        viewModelObjectSvc.updateViewModelObjectCollection( self.loadedVMObjects, event.modifiedObjects );\n    } ) );\n\n    // Listen for CDM Deleted events (will be unregistered onDestroy)\n    _eventBusSubDefs.push( eventBus.subscribe( 'cdm.deleted', function( event ) {\n        /**\n         * Post process cdm deleted event to remove any deleted objects from viewModelCollection collection\n         * of loadedVMObjects and then set the totalObjectsLoaded count.\n         */\n        let updateRequired = false;\n        if( event.deletedObjectUids && event.deletedObjectUids.length > 0 ) {\n            _.forEach( event.deletedObjectUids, function( deletedUid ) {\n                // remove the found object by uid from the collection of loadedVMObjects\n                _.remove( self.loadedVMObjects, function( vmo ) {\n                    if( vmo.uid === deletedUid ) {\n                        updateRequired = true;\n                        return true;\n                    }\n                } );\n            } );\n\n            if( updateRequired ) {\n                self.update( self.loadedVMObjects, self.loadedVMObjects.length );\n            }\n        }\n    } ) );\n};\n\n_debug_logMiscModelLifeCycle = browserUtils.getUrlAttributes().logMiscModelLifeCycle === '';\n\nvar exports = {};\n\n/**\n * Create new instance of view model collection\n *\n * @param {String} name - name of the ViewModelCollection\n * @return {ViewModelCollection} Returns view model collection object\n */\nexport let createViewModelCollection = function( name ) {\n    return new ViewModelCollection( name );\n};\n\nexports = {\n    createViewModelCollection\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
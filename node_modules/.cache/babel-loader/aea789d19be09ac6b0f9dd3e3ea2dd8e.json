{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwTabSetService.js\";\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport conditionService from 'js/conditionService';\nimport AwTabContainer from 'viewmodel/AwTabContainerViewModel';\nimport AwCommandSubPanel from 'viewmodel/AwCommandSubPanelViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport { ShowWhen } from 'js/hocCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AwShowWhenProvider = ShowWhen(AwCommandSubPanel);\n/**\n * Method to publish analytics to server\n * @param {Number} tabModelId - id of the clicked tab\n * @param {String} tabModelName - name of the clicked tab\n */\n\n_c = AwShowWhenProvider;\n\nconst publishAnalytics = (tabModelId, tabModelName) => {\n  let sanEventData = {\n    sanAnalyticsType: 'Tab',\n    sanCommandId: tabModelId,\n    sanCommandTitle: tabModelName\n  };\n  analyticsSvc.logCommands(sanEventData);\n};\n\nconst evaluateTabConditions = (tab, conditions, evaluationEnvironment, expName) => {\n  if (typeof tab[expName] === 'object') {\n    const conditionName = tab[expName].condition.slice(11);\n    return conditions[conditionName];\n  }\n\n  return conditionService.parseExpression({}, tab[expName], evaluationEnvironment);\n};\n\nconst createTabsModel = (tabs, conditions, evaluationEnvironment, manullySelectedTabId) => {\n  return tabs.map(tab => {\n    //Assuming name will be unique\n    tab.pageId = tab.tabKey || tab.pageId || tab.panelId || tab.name;\n    tab.displayTab = true;\n\n    if (manullySelectedTabId) {\n      tab.selectedTab = manullySelectedTabId === tab.pageId || false;\n    } else {\n      tab.selectedTab = tab.selectedTab === true || false;\n      tab.autoSelectTabOnLoad = tab.selectedTab === true || false;\n    }\n\n    if (tab.visibleWhen && !evaluateTabConditions(tab, conditions, evaluationEnvironment, 'visibleWhen')) {\n      tab.displayTab = false;\n    }\n\n    if (!manullySelectedTabId && tab.selectWhen) {\n      if (evaluateTabConditions(tab, conditions, evaluationEnvironment, 'selectWhen')) {\n        tab.selectedTab = true;\n      } else {\n        tab.selectedTab = false;\n      }\n    }\n\n    return tab;\n  });\n};\n\nexport const updateTabSelection = declViewModel => {\n  const {\n    data,\n    dispatch,\n    eventData\n  } = declViewModel;\n\n  const tabToSelect = _.find(data.tabsModel, tab => {\n    return tab.tabKey && eventData && tab.tabKey === eventData.tabKey || tab.pageId && tab.pageId === eventData.pageId || tab.panelId && tab.panelId === eventData.panelId;\n  });\n\n  if (tabToSelect && data.manullySelectedTabId !== tabToSelect.pageId) {\n    data.tabsModel = data.tabsModel.map(tab => {\n      if (tab.pageId === tabToSelect.pageId) {\n        tab.selectedTab = true;\n      } else {\n        tab.selectedTab = false;\n      }\n\n      return tab;\n    });\n    dispatch({\n      path: 'data',\n      value: { ...data\n      }\n    });\n  }\n};\nexport const awTabSetRenderFunction = props => {\n  const {\n    tabs,\n    updateHook,\n    action,\n    closeAction,\n    subPanelContext,\n    viewModel,\n    ctx\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  const {\n    conditions\n  } = updateHook;\n  const evaluationEnvironment = {\n    ctx: ctx,\n    data: updateHook.data\n  };\n\n  const loadSubPanels = props => {\n    const {\n      ctx,\n      ctxMin,\n      viewModel,\n      actions,\n      i18n,\n      fields,\n      grids,\n      formProp,\n      messages,\n      ...prop\n    } = props;\n    let pData = updateHook.data;\n\n    if (!action && pData) {\n      let selectedTab = pData.selectedTab || {};\n      return data.tabsModel.map(subPanel => {\n        let panelId = subPanel.panelId;\n\n        if (panelId) {\n          let reCreatePanel = subPanel.recreatePanel || false;\n          let condition = reCreatePanel ? selectedTab.panelId === panelId : true; //const currentPanel = subPanelContext.pData.activeView !== panelId ? subPanelContext.pData.activeView : currentPanel;\n\n          return condition && /*#__PURE__*/_jsxDEV(AwShowWhenProvider, {\n            showWhen: selectedTab.panelId === panelId,\n            panelId: panelId,\n            ...prop\n          }, panelId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 38\n          }, this);\n        }\n      });\n    }\n  };\n\n  const selectTab = (pageId, pageName) => {\n    let tabToSelect = data.tabsModel.find(tab => tab.pageId === pageId);\n\n    if (tabToSelect && (!updateHook.data.selectedTab || updateHook.data.selectedTab && !_.isEqual(updateHook.data.selectedTab.pageId, pageId))) {\n      tabToSelect.selectedTab = true;\n      updateHook.data.selectedTab = tabToSelect;\n      updateHook.data.pageId = tabToSelect.pageId;\n      updateHook.data.tabTitle = tabToSelect.name;\n      updateHook.data.manullySelectedTabId = tabToSelect.pageId;\n      updateHook.dispatch({\n        path: 'data',\n        value: { ...updateHook.data\n        }\n      });\n\n      if (action) {\n        //Component updating the parent, is an anti-pattern but needed for backward compatibility\n        //Revisit: This event used to pass $scope as eventData, what is the replacement for the same\n        props.action();\n      }\n\n      publishAnalytics(tabToSelect.pageId, tabToSelect.name);\n      eventBus.publish('awTab.selected', {//scope: $scope\n      });\n    }\n  };\n\n  const compareTabSelections = oriTabs => {\n    let isEqual = true;\n\n    for (let oriTab of origTabs) {\n      if (oriTab.selectedTab === undefined) {\n        isEqual = false;\n        break;\n      }\n    }\n\n    return isEqual;\n  };\n\n  const onTabClose = async closedTab => {\n    if (closeAction) {\n      closeAction({\n        closedTab: closedTab\n      });\n    }\n  };\n\n  let origTabs = _.cloneDeep(tabs);\n\n  data.tabsModel = createTabsModel(tabs, conditions, evaluationEnvironment, data.manullySelectedTabId);\n\n  if (!compareTabSelections(origTabs)) {\n    dispatch({\n      path: 'data',\n      value: { ...data\n      }\n    });\n  }\n\n  data.manullySelectedTabId = null;\n  const visibleTabs = data.tabsModel.filter(tab => tab.displayTab === true);\n  const cmdSubPanelBased = data.tabsModel.filter(tab => tab.hasOwnProperty('panelId')).length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-column sw-tabSet\",\n    children: [/*#__PURE__*/_jsxDEV(AwTabContainer, {\n      tabsModel: visibleTabs,\n      callback: selectTab,\n      tabSetId: props.tabSetId ? props.tabSetId : null,\n      onTabClose: onTabClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-jswidget-tabPage sw-column vw-100\",\n        children: [props.children, cmdSubPanelBased && loadSubPanels(props)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AwShowWhenProvider\");","map":{"version":3,"names":["_","eventBus","conditionService","AwTabContainer","AwCommandSubPanel","analyticsSvc","ShowWhen","AwShowWhenProvider","publishAnalytics","tabModelId","tabModelName","sanEventData","sanAnalyticsType","sanCommandId","sanCommandTitle","logCommands","evaluateTabConditions","tab","conditions","evaluationEnvironment","expName","conditionName","condition","slice","parseExpression","createTabsModel","tabs","manullySelectedTabId","map","pageId","tabKey","panelId","name","displayTab","selectedTab","autoSelectTabOnLoad","visibleWhen","selectWhen","updateTabSelection","declViewModel","data","dispatch","eventData","tabToSelect","find","tabsModel","path","value","awTabSetRenderFunction","props","updateHook","action","closeAction","subPanelContext","viewModel","ctx","loadSubPanels","ctxMin","actions","i18n","fields","grids","formProp","messages","prop","pData","subPanel","reCreatePanel","recreatePanel","selectTab","pageName","isEqual","tabTitle","publish","compareTabSelections","oriTabs","oriTab","origTabs","undefined","onTabClose","closedTab","cloneDeep","visibleTabs","filter","cmdSubPanelBased","hasOwnProperty","length","tabSetId","children"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwTabSetService.js"],"sourcesContent":["import _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport conditionService from 'js/conditionService';\nimport AwTabContainer from 'viewmodel/AwTabContainerViewModel';\nimport AwCommandSubPanel from 'viewmodel/AwCommandSubPanelViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport { ShowWhen } from 'js/hocCollection';\n\nconst AwShowWhenProvider = ShowWhen( AwCommandSubPanel );\n\n/**\n * Method to publish analytics to server\n * @param {Number} tabModelId - id of the clicked tab\n * @param {String} tabModelName - name of the clicked tab\n */\nconst publishAnalytics = ( tabModelId, tabModelName ) => {\n    let sanEventData = {\n        sanAnalyticsType: 'Tab',\n        sanCommandId: tabModelId,\n        sanCommandTitle: tabModelName\n    };\n    analyticsSvc.logCommands( sanEventData );\n};\n\nconst evaluateTabConditions = ( tab, conditions, evaluationEnvironment, expName ) => {\n    if( typeof tab[ expName ] === 'object' ) {\n        const conditionName = tab[ expName ].condition.slice( 11 );\n        return conditions[ conditionName ];\n    }\n    return conditionService.parseExpression( {}, tab[ expName ], evaluationEnvironment );\n};\n\nconst createTabsModel = ( tabs, conditions, evaluationEnvironment, manullySelectedTabId ) => {\n    return tabs.map( tab => {\n        //Assuming name will be unique\n        tab.pageId = tab.tabKey || tab.pageId || tab.panelId || tab.name;\n        tab.displayTab = true;\n        if( manullySelectedTabId ) {\n            tab.selectedTab = manullySelectedTabId === tab.pageId || false;\n        } else {\n            tab.selectedTab = tab.selectedTab === true || false;\n            tab.autoSelectTabOnLoad = tab.selectedTab === true || false;\n        }\n        if( tab.visibleWhen && !evaluateTabConditions( tab, conditions, evaluationEnvironment, 'visibleWhen' ) ) {\n            tab.displayTab = false;\n        }\n        if( !manullySelectedTabId && tab.selectWhen ) {\n            if( evaluateTabConditions( tab, conditions, evaluationEnvironment, 'selectWhen' ) ) {\n                tab.selectedTab = true;\n            } else {\n                tab.selectedTab = false;\n            }\n        }\n        return tab;\n    } );\n};\n\nexport const updateTabSelection = ( declViewModel ) => {\n    const { data, dispatch, eventData } = declViewModel;\n    const tabToSelect = _.find( data.tabsModel, ( tab ) => {\n        return tab.tabKey && eventData && tab.tabKey === eventData.tabKey || tab.pageId &&\n            tab.pageId === eventData.pageId || tab.panelId &&\n            tab.panelId === eventData.panelId;\n    } );\n\n    if( tabToSelect && data.manullySelectedTabId !== tabToSelect.pageId ) {\n        data.tabsModel = data.tabsModel.map( ( tab ) => {\n            if( tab.pageId === tabToSelect.pageId ) {\n                tab.selectedTab = true;\n            } else {\n                tab.selectedTab = false;\n            }\n            return tab;\n        } );\n        dispatch( { path: 'data', value: { ...data } } );\n    }\n};\n\nexport const awTabSetRenderFunction = ( props ) => {\n    const { tabs, updateHook, action, closeAction, subPanelContext, viewModel, ctx } = props;\n    const { data, dispatch } = viewModel;\n    const { conditions } = updateHook;\n    const evaluationEnvironment = {\n        ctx: ctx,\n        data: updateHook.data\n    };\n\n    const loadSubPanels = ( props ) => {\n        const { ctx, ctxMin, viewModel, actions, i18n, fields, grids, formProp, messages, ...prop } = props;\n        let pData = updateHook.data;\n        if( !action && pData ) {\n            let selectedTab = pData.selectedTab || {};\n            return data.tabsModel.map( ( subPanel ) => {\n                let panelId = subPanel.panelId;\n                if( panelId ) {\n                    let reCreatePanel = subPanel.recreatePanel || false;\n                    let condition = reCreatePanel ? selectedTab.panelId === panelId : true;\n                    //const currentPanel = subPanelContext.pData.activeView !== panelId ? subPanelContext.pData.activeView : currentPanel;\n                    return (\n                        condition && <AwShowWhenProvider\n                            showWhen= {selectedTab.panelId === panelId}\n                            key={panelId}\n                            panelId = {panelId}\n                            {...prop}>\n                        </AwShowWhenProvider>\n                    );\n                }\n            } );\n        }\n    };\n\n    const selectTab = ( pageId, pageName ) => {\n        let tabToSelect = data.tabsModel.find( tab => tab.pageId === pageId );\n\n        if(  tabToSelect && ( !updateHook.data.selectedTab || updateHook.data.selectedTab && !_.isEqual( updateHook.data.selectedTab.pageId, pageId ) ) ) {\n            tabToSelect.selectedTab = true;\n            updateHook.data.selectedTab = tabToSelect;\n            updateHook.data.pageId = tabToSelect.pageId;\n            updateHook.data.tabTitle = tabToSelect.name;\n            updateHook.data.manullySelectedTabId = tabToSelect.pageId;\n            updateHook.dispatch( { path: 'data', value: { ...updateHook.data } } );\n            if( action ) {\n                //Component updating the parent, is an anti-pattern but needed for backward compatibility\n                //Revisit: This event used to pass $scope as eventData, what is the replacement for the same\n                props.action();\n            }\n            publishAnalytics( tabToSelect.pageId, tabToSelect.name );\n            eventBus.publish( 'awTab.selected', {\n                //scope: $scope\n            } );\n        }\n    };\n\n    const compareTabSelections = ( oriTabs ) => {\n        let isEqual = true;\n        for( let oriTab of origTabs ) {\n            if( oriTab.selectedTab === undefined ) {\n                isEqual = false;\n                break;\n            }\n        }\n        return isEqual;\n    };\n\n    const onTabClose = async( closedTab ) => {\n        if( closeAction ) {\n            closeAction( { closedTab: closedTab } );\n        }\n    };\n\n    let origTabs = _.cloneDeep( tabs );\n\n    data.tabsModel = createTabsModel( tabs, conditions, evaluationEnvironment, data.manullySelectedTabId );\n\n    if( !compareTabSelections( origTabs ) ) {\n        dispatch( { path: 'data', value: { ...data } } );\n    }\n\n    data.manullySelectedTabId = null;\n    const visibleTabs = data.tabsModel.filter( tab => tab.displayTab === true );\n    const cmdSubPanelBased = data.tabsModel.filter( tab => tab.hasOwnProperty( 'panelId' ) ).length > 0;\n\n    return (\n        <div className='sw-column sw-tabSet'>\n            <AwTabContainer tabsModel={visibleTabs} callback={selectTab} tabSetId={props.tabSetId ? props.tabSetId : null} onTabClose={onTabClose}></AwTabContainer>\n            <div className='sw-row'>\n                <div className='aw-jswidget-tabPage sw-column vw-100'>\n                    {props.children}\n                    {cmdSubPanelBased && loadSubPanels( props )}\n                </div>\n            </div>\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsJsProcessor\n */\nimport { addProc, removeProc } from 'js/splmStatsJsService';\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsJsProcessor\n */\n\nfunction SPLMStatsJsProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _scriptJournals = [];\n  /**\n   * @returns {Float} Total scripting time for angular events\n   */\n\n  const _processScriptTime = function () {\n    _startProcessorTime = window.performance.now();\n    let totalTime = 0;\n\n    _scriptJournals.forEach(function (obj) {\n      totalTime += obj.endTime - obj.startTime;\n    });\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return totalTime;\n  };\n  /**\n   *\n   * @param {Object} data - startTime, endTime, name of process to track scripting time\n   */\n\n\n  let _proc = {\n    start: () => {},\n    done: function (data) {\n      _startProcessorTime = window.performance.now();\n\n      _scriptJournals.push(data);\n\n      _endProcessorTime = window.performance.now();\n      _processingTime += _endProcessorTime - _startProcessorTime;\n    }\n  };\n\n  const _reset = function () {\n    _scriptJournals = [];\n  };\n\n  self.start = function () {\n    _startProcessorTime = window.performance.now();\n\n    _reset();\n\n    addProc(_proc);\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n    removeProc(_proc);\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      JsProcessorOverhead: _time\n    };\n  };\n  /**\n   * @returns {Object} Object containg Total Scripting Time\n   */\n\n\n  self.getMetrics = function () {\n    return {\n      scriptTime: _processScriptTime()\n    };\n  };\n\n  return self;\n}\n\n_c = SPLMStatsJsProcessor;\nexport default SPLMStatsJsProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsJsProcessor\");","map":{"version":3,"names":["addProc","removeProc","SPLMStatsJsProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_scriptJournals","_processScriptTime","window","performance","now","totalTime","forEach","obj","endTime","startTime","_proc","start","done","data","push","_reset","stop","getProcessingTime","_time","JsProcessorOverhead","getMetrics","scriptTime"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsJsProcessor.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsJsProcessor\n */\nimport { addProc, removeProc } from 'js/splmStatsJsService';\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsJsProcessor\n */\nfunction SPLMStatsJsProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n    let _startProcessorTime = 0;\n    let _endProcessorTime = 0;\n\n    let _scriptJournals = [];\n\n    /**\n     * @returns {Float} Total scripting time for angular events\n     */\n    const _processScriptTime = function() {\n        _startProcessorTime = window.performance.now();\n\n        let totalTime = 0;\n        _scriptJournals.forEach( function( obj ) {\n            totalTime += obj.endTime - obj.startTime;\n        } );\n\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return totalTime;\n    };\n\n    /**\n     *\n     * @param {Object} data - startTime, endTime, name of process to track scripting time\n     */\n    let _proc = {\n        start: () => {},\n        done: function( data ) {\n            _startProcessorTime = window.performance.now();\n            _scriptJournals.push( data );\n            _endProcessorTime = window.performance.now();\n            _processingTime += _endProcessorTime - _startProcessorTime;\n        }\n    };\n\n    const _reset = function() {\n        _scriptJournals = [];\n    };\n\n    self.start = function() {\n        _startProcessorTime = window.performance.now();\n        _reset();\n        addProc( _proc );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        removeProc( _proc );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { JsProcessorOverhead: _time };\n    };\n    /**\n     * @returns {Object} Object containg Total Scripting Time\n     */\n    self.getMetrics = function() {\n        return {\n            scriptTime: _processScriptTime()\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsJsProcessor;\n"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,UAAlB,QAAoC,uBAApC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,GAAgC;EAC5B,IAAIC,IAAI,GAAG,IAAX;EAEA,IAAIC,eAAe,GAAG,CAAtB;EACA,IAAIC,mBAAmB,GAAG,CAA1B;EACA,IAAIC,iBAAiB,GAAG,CAAxB;EAEA,IAAIC,eAAe,GAAG,EAAtB;EAEA;AACJ;AACA;;EACI,MAAMC,kBAAkB,GAAG,YAAW;IAClCH,mBAAmB,GAAGI,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IAEA,IAAIC,SAAS,GAAG,CAAhB;;IACAL,eAAe,CAACM,OAAhB,CAAyB,UAAUC,GAAV,EAAgB;MACrCF,SAAS,IAAIE,GAAG,CAACC,OAAJ,GAAcD,GAAG,CAACE,SAA/B;IACH,CAFD;;IAIAV,iBAAiB,GAAGG,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACAP,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;IACA,OAAOO,SAAP;EACH,CAXD;EAaA;AACJ;AACA;AACA;;;EACI,IAAIK,KAAK,GAAG;IACRC,KAAK,EAAE,MAAM,CAAE,CADP;IAERC,IAAI,EAAE,UAAUC,IAAV,EAAiB;MACnBf,mBAAmB,GAAGI,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;;MACAJ,eAAe,CAACc,IAAhB,CAAsBD,IAAtB;;MACAd,iBAAiB,GAAGG,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;MACAP,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;IACH;EAPO,CAAZ;;EAUA,MAAMiB,MAAM,GAAG,YAAW;IACtBf,eAAe,GAAG,EAAlB;EACH,CAFD;;EAIAJ,IAAI,CAACe,KAAL,GAAa,YAAW;IACpBb,mBAAmB,GAAGI,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;;IACAW,MAAM;;IACNtB,OAAO,CAAEiB,KAAF,CAAP;IACAX,iBAAiB,GAAGG,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACAP,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH,CAND;;EAQAF,IAAI,CAACoB,IAAL,GAAY,YAAW;IACnBlB,mBAAmB,GAAGI,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAtB;IACAV,UAAU,CAAEgB,KAAF,CAAV;IACAX,iBAAiB,GAAGG,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAApB;IACAP,eAAe,IAAIE,iBAAiB,GAAGD,mBAAvC;EACH,CALD;;EAOAF,IAAI,CAACqB,iBAAL,GAAyB,YAAW;IAChC,MAAMC,KAAK,GAAGrB,eAAd;IACAA,eAAe,GAAG,CAAlB;IACA,OAAO;MAAEsB,mBAAmB,EAAED;IAAvB,CAAP;EACH,CAJD;EAKA;AACJ;AACA;;;EACItB,IAAI,CAACwB,UAAL,GAAkB,YAAW;IACzB,OAAO;MACHC,UAAU,EAAEpB,kBAAkB;IAD3B,CAAP;EAGH,CAJD;;EAMA,OAAOL,IAAP;AACH;;KAzEQD,oB;AA2ET,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}
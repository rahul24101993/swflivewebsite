{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This is the primary service used to create, test and manage the internal properties of CommandHandler Objects used in\n * AW.\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/commandHandlerService\n */import AwPromiseService from'js/awPromiseService';import appCtxService from'js/appCtxService';import _ from'lodash';import eventBus from'js/eventBus';/**\n * Define the base object used to provide all of this module's external API.\n *\n * @private\n */let exports;/**\n * Hide the command panel if the handler is active\n *\n * @param {CommandHandler} commandHdlr - The command handler\n */var hideIfActive=function(commandHdlr){var activeCommandContexts=['activeNavigationCommand','activeToolsAndInfoCommand','sidenavCommandId'];var commandIdArray=[];activeCommandContexts.forEach(function(ctx){// Zero compile commands share visibility which means the \"open\" command will only have same commandId\nvar isCommandOpen=appCtxService.getCtx(ctx+'.commandId')&&appCtxService.getCtx(ctx+'.commandId')===commandHdlr.commandId||appCtxService.getCtx(ctx)&&appCtxService.getCtx(ctx)===commandHdlr.commandId;if(isCommandOpen){var commandId=appCtxService.getCtx(ctx+'.commandId')===commandHdlr.commandId?appCtxService.getCtx(ctx+'.commandId'):appCtxService.getCtx(ctx);if(!commandIdArray.includes(commandId)){var id=null;if(ctx==='activeNavigationCommand'){id='aw_navigation';}else if(ctx==='activeToolsAndInfoCommand'){id='aw_toolsAndInfo';}eventBus.publish('awsidenav.openClose',{id:id,commandId:commandId});commandIdArray.push(commandId);}}});};/**\n * Change the icon of a command handler\n *\n * @param {CommandHandler} commandHdlr Handler to update\n * @param {String} iconId Icon id\n */export let setIcon=function(commandHdlr,iconId){commandHdlr.iconId=iconId;};/**\n * Set 'isVisible' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isVisible - is visible flag\n */export let setIsVisible=function(commandHdlr,isVisible){if(commandHdlr.visible!==isVisible){commandHdlr.visible=isVisible;if(!commandHdlr.visible){hideIfActive(commandHdlr);}}};/**\n * Set 'isEnabled' state of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} isEnabled - is enabled flag\n */export let setIsEnabled=function(commandHdlr,isEnabled){if(commandHdlr.enabled!==isEnabled){commandHdlr.enabled=isEnabled;if(!commandHdlr.enabled){hideIfActive(commandHdlr);}}};/**\n * Set 'isSelected' state of the command\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {boolean} isSelected - is selected flag\n */export let setSelected=function(commandHdlr,isSelected){commandHdlr.isSelected=isSelected;};/**\n * Set 'isGroupCommand' of command handler\n *\n * @param {CommandHandler} commandHdlr - command handler object that will be updated\n * @param {Boolean} nameToken - is group command flag\n * @returns {Promise} Promise resolved when done\n */export let getPanelLifeCycleClose=function(commandHdlr,nameToken){var deferred=AwPromiseService.instance.defer();commandHdlr.callbackApi.getPanelLifeCycleClose(nameToken,deferred);return deferred.promise;};/**\n * Do any setup the command handler requires before creating the view\n *\n * @param {CommandHandler} commandHdlr - The command handler\n *\n * @return {Promise} A promise resolved when done\n */export let setupDeclarativeView=function(commandHdlr){var deferred=AwPromiseService.instance.defer();commandHdlr.setupDeclarativeView(deferred);return deferred.promise;};/* eslint-disable-next-line valid-jsdoc*/exports={setIcon,setIsVisible,setIsEnabled,setSelected,getPanelLifeCycleClose,setupDeclarativeView};export default exports;","map":null,"metadata":{},"sourceType":"module"}
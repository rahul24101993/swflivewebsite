{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwListCheckboxItemService.js\";\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\nimport _ from 'lodash';\nimport uwPropertySvc from 'js/uwPropertyService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awListCheckboxItemRenderFunction = props => {\n  let {\n    viewModel,\n    actions,\n    item,\n    vmo,\n    index,\n    tabIndex,\n    isSelected,\n    children\n  } = props;\n\n  if (!item) {\n    item = vmo;\n  }\n\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  let options = props.options || {};\n  let checked = data._state || false;\n\n  if (item && (item.newValue === false || item.newValue === true)) {\n    checked = item.newValue;\n  } // case dataProvider takes control\n\n\n  if (options.applySelection !== false) {\n    checked = isSelected;\n  }\n\n  let getLabel = () => {\n    return item.cellHeader1 || item.propertyDisplayName || item.Title || _.uniqueId('Checkbox ');\n  };\n\n  let value = children ? children : item.propertyDisplayName;\n\n  const callAction = event => {\n    // case dataProvider takes control,\n    // the check box is just as a indicator, we don't process any\n    if (options.applySelection !== false) {\n      return;\n    } // other cases\n    // toggle state\n\n\n    let newState = !checked;\n    uwPropertySvc.setValue(props.item, newState);\n    dispatch({\n      path: 'data._state',\n      value: newState\n    }); // execute action - standard decl action\n\n    return props.action ? props.action({\n      checked: newState,\n      item,\n      index\n    }) : '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-property sw-component sw-row\",\n    onClick: callAction,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sw-checkbox-val\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checked,\n        \"aria-checked\": checked,\n        index: index,\n        tabIndex: tabIndex || 0,\n        \"aria-label\": getLabel(),\n        value: checked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sw-checkbox-pseudo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), value]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwListCheckboxItemService.js"],"names":["awListCheckboxItemRenderFunction","props","children","item","dispatch","options","checked","data","getLabel","_","value","callAction","event","newState","uwPropertySvc","path","index","tabIndex"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport _ from 'lodash';\nimport uwPropertySvc from 'js/uwPropertyService';\n\nexport const awListCheckboxItemRenderFunction = ( props ) => {\n    let {\n        viewModel,\n        actions,\n        item,\n        vmo,\n        index,\n        tabIndex,\n        isSelected,\n        children\n    } = props;\n\n    if( !item ) { item = vmo; }\n\n    const { data, dispatch } = viewModel;\n\n    let options = props.options || {};\n    let checked = data._state || false;\n    if ( item && ( item.newValue === false || item.newValue === true ) ) {\n        checked = item.newValue;\n    }\n    // case dataProvider takes control\n    if( options.applySelection !== false ) {\n        checked = isSelected;\n    }\n\n    let getLabel = () => {\n        return item.cellHeader1 || item.propertyDisplayName || item.Title || _.uniqueId( 'Checkbox ' );\n    };\n\n    let value = children ? children : item.propertyDisplayName;\n    const callAction = ( event ) => {\n        // case dataProvider takes control,\n        // the check box is just as a indicator, we don't process any\n        if( options.applySelection !== false ) { return; }\n\n        // other cases\n        // toggle state\n        let newState = !checked;\n        uwPropertySvc.setValue( props.item, newState );\n        dispatch( { path: 'data._state', value: newState } );\n\n        // execute action - standard decl action\n        return props.action ? props.action( { checked: newState, item, index } ) : '';\n    };\n\n    return (\n        <div className='sw-property sw-component sw-row' onClick={callAction}>\n            <span className='sw-checkbox-val'>\n                <input type='checkbox'\n                    checked={checked}\n                    aria-checked={checked}\n                    index={index}\n                    tabIndex={tabIndex || 0}\n                    aria-label={getLabel()}\n                    value={checked}\n                ></input>\n                <span className='sw-checkbox-pseudo'></span>\n            </span>\n            {value}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
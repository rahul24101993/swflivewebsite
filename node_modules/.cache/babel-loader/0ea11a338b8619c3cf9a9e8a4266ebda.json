{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is purely a Require module. It will get called on the initial flow path and state is checked during route\n * transitions. It will do an on demand load of the session manager service.\n *\n * @module js/sessionState\n */\nimport logger from 'js/logger';\nimport AwStateService from 'js/awStateService';\nimport AwPromiseService from 'js/awPromiseService';\nvar exports = {};\nvar _isSessionAuthenticated = false;\nvar _authInProgress = false;\nexport let setAuthStatus = function (isAuth) {\n  _isSessionAuthenticated = isAuth;\n};\nexport let getIsAuthenticated = function () {\n  return _isSessionAuthenticated;\n};\nexport let isAuthenticationInProgress = function () {\n  return _authInProgress;\n};\nexport let setAuthenticationInProgress = function (val) {\n  _authInProgress = val;\n};\nexport let forceNavigation = function (toState, toParams) {\n  // try to put an async \"gap\" around the state.go - much like the sessionmgr interaction..\n  import('js/sessionManager.service').then(function () {\n    try {\n      AwStateService.instance.go(toState, toParams);\n    } catch (e) {// For aligning with former code flow, do nothing and not error out\n    }\n  });\n};\n/**\n * this is the wrapper around the checkSessionValid() api. this is the defer point at which we can async load.\n */\n\nexport let performValidSessionCheck = function (targetNavDetails) {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  import('js/sessionManager.service').then(function (sessionManagerService) {\n    sessionManagerService.checkSessionValid(targetNavDetails);\n  });\n};\nexport let runPostLoginStages = function () {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  import('js/sessionManager.service').then(function (sessionManagerService) {\n    sessionManagerService.runPostLoginBlocking().then(function () {\n      sessionManagerService.runNavToState();\n    }, function () {\n      if (logger.isTraceEnabled()) {\n        logger.trace('SM: end runPostLoginBlocking Stage - but ERROR');\n      }\n\n      sessionManagerService.runNavToState();\n    });\n  });\n};\n/**\n * wrapper around the session manager api. load upon request and invoke session manager.\n *\n * @param {Object} $q\n * @return {Promise} promise\n */\n\nexport let pickAuthenticator = function () {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  return AwPromiseService.instance(function (resolve) {\n    import('js/sessionManager.service').then(function (sessionManagerService) {\n      resolve(sessionManagerService.pickAuthenticator());\n    });\n  });\n};\n/**\n * Invoked when the state change was successful from UI router\n */\n\nexport let routeStateChangeSuccess = function (toState, toParams, fromState, fromParams) {\n  // this is the break point for our dependency load.  on demand load of the session manager service.\n  import('js/locationNavigation.service').then(function (dep) {\n    let locationNavigationSvc = dep.default.instance;\n    locationNavigationSvc.routeStateChangeSuccess(toState, toParams, fromState, fromParams);\n  });\n};\nexports = {\n  setAuthStatus,\n  getIsAuthenticated,\n  isAuthenticationInProgress,\n  setAuthenticationInProgress,\n  forceNavigation,\n  performValidSessionCheck,\n  runPostLoginStages,\n  pickAuthenticator,\n  routeStateChangeSuccess\n};\nexport default exports;","map":{"version":3,"names":["logger","AwStateService","AwPromiseService","exports","_isSessionAuthenticated","_authInProgress","setAuthStatus","isAuth","getIsAuthenticated","isAuthenticationInProgress","setAuthenticationInProgress","val","forceNavigation","toState","toParams","then","instance","go","e","performValidSessionCheck","targetNavDetails","sessionManagerService","checkSessionValid","runPostLoginStages","runPostLoginBlocking","runNavToState","isTraceEnabled","trace","pickAuthenticator","resolve","routeStateChangeSuccess","fromState","fromParams","dep","locationNavigationSvc","default"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/sessionState.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is purely a Require module. It will get called on the initial flow path and state is checked during route\n * transitions. It will do an on demand load of the session manager service.\n *\n * @module js/sessionState\n */\nimport logger from 'js/logger';\nimport AwStateService from 'js/awStateService';\nimport AwPromiseService from 'js/awPromiseService';\n\nvar exports = {};\n\nvar _isSessionAuthenticated = false;\nvar _authInProgress = false;\n\nexport let setAuthStatus = function( isAuth ) {\n    _isSessionAuthenticated = isAuth;\n};\n\nexport let getIsAuthenticated = function() {\n    return _isSessionAuthenticated;\n};\n\nexport let isAuthenticationInProgress = function() {\n    return _authInProgress;\n};\n\nexport let setAuthenticationInProgress = function( val ) {\n    _authInProgress = val;\n};\n\nexport let forceNavigation = function( toState, toParams ) {\n    // try to put an async \"gap\" around the state.go - much like the sessionmgr interaction..\n    import( 'js/sessionManager.service' ).then( function() {\n        try {\n            AwStateService.instance.go( toState, toParams );\n        } catch ( e ) {\n            // For aligning with former code flow, do nothing and not error out\n        }\n    } );\n};\n/**\n * this is the wrapper around the checkSessionValid() api. this is the defer point at which we can async load.\n */\nexport let performValidSessionCheck = function( targetNavDetails ) {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    import( 'js/sessionManager.service' ).then( function( sessionManagerService ) {\n        sessionManagerService.checkSessionValid( targetNavDetails );\n    } );\n};\n\nexport let runPostLoginStages = function() {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    import( 'js/sessionManager.service' ).then( function( sessionManagerService ) {\n        sessionManagerService.runPostLoginBlocking().then( function() {\n            sessionManagerService.runNavToState();\n        }, function() {\n            if( logger.isTraceEnabled() ) {\n                logger.trace( 'SM: end runPostLoginBlocking Stage - but ERROR' );\n            }\n            sessionManagerService.runNavToState();\n        } );\n    } );\n};\n\n/**\n * wrapper around the session manager api. load upon request and invoke session manager.\n *\n * @param {Object} $q\n * @return {Promise} promise\n */\nexport let pickAuthenticator = function() {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    return AwPromiseService.instance( function( resolve ) {\n        import( 'js/sessionManager.service' ).then( function( sessionManagerService ) {\n            resolve( sessionManagerService.pickAuthenticator() );\n        } );\n    } );\n};\n\n/**\n * Invoked when the state change was successful from UI router\n */\nexport let routeStateChangeSuccess = function( toState, toParams, fromState, fromParams ) {\n    // this is the break point for our dependency load.  on demand load of the session manager service.\n    import( 'js/locationNavigation.service' ).then( function( dep ) {\n        let locationNavigationSvc = dep.default.instance;\n        locationNavigationSvc.routeStateChangeSuccess( toState, toParams, fromState, fromParams );\n    } );\n};\n\nexports = {\n    setAuthStatus,\n    getIsAuthenticated,\n    isAuthenticationInProgress,\n    setAuthenticationInProgress,\n    forceNavigation,\n    performValidSessionCheck,\n    runPostLoginStages,\n    pickAuthenticator,\n    routeStateChangeSuccess\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA,IAAIC,uBAAuB,GAAG,KAA9B;AACA,IAAIC,eAAe,GAAG,KAAtB;AAEA,OAAO,IAAIC,aAAa,GAAG,UAAUC,MAAV,EAAmB;EAC1CH,uBAAuB,GAAGG,MAA1B;AACH,CAFM;AAIP,OAAO,IAAIC,kBAAkB,GAAG,YAAW;EACvC,OAAOJ,uBAAP;AACH,CAFM;AAIP,OAAO,IAAIK,0BAA0B,GAAG,YAAW;EAC/C,OAAOJ,eAAP;AACH,CAFM;AAIP,OAAO,IAAIK,2BAA2B,GAAG,UAAUC,GAAV,EAAgB;EACrDN,eAAe,GAAGM,GAAlB;AACH,CAFM;AAIP,OAAO,IAAIC,eAAe,GAAG,UAAUC,OAAV,EAAmBC,QAAnB,EAA8B;EACvD;EACA,OAAQ,2BAAR,EAAsCC,IAAtC,CAA4C,YAAW;IACnD,IAAI;MACAd,cAAc,CAACe,QAAf,CAAwBC,EAAxB,CAA4BJ,OAA5B,EAAqCC,QAArC;IACH,CAFD,CAEE,OAAQI,CAAR,EAAY,CACV;IACH;EACJ,CAND;AAOH,CATM;AAUP;AACA;AACA;;AACA,OAAO,IAAIC,wBAAwB,GAAG,UAAUC,gBAAV,EAA6B;EAC/D;EACA,OAAQ,2BAAR,EAAsCL,IAAtC,CAA4C,UAAUM,qBAAV,EAAkC;IAC1EA,qBAAqB,CAACC,iBAAtB,CAAyCF,gBAAzC;EACH,CAFD;AAGH,CALM;AAOP,OAAO,IAAIG,kBAAkB,GAAG,YAAW;EACvC;EACA,OAAQ,2BAAR,EAAsCR,IAAtC,CAA4C,UAAUM,qBAAV,EAAkC;IAC1EA,qBAAqB,CAACG,oBAAtB,GAA6CT,IAA7C,CAAmD,YAAW;MAC1DM,qBAAqB,CAACI,aAAtB;IACH,CAFD,EAEG,YAAW;MACV,IAAIzB,MAAM,CAAC0B,cAAP,EAAJ,EAA8B;QAC1B1B,MAAM,CAAC2B,KAAP,CAAc,gDAAd;MACH;;MACDN,qBAAqB,CAACI,aAAtB;IACH,CAPD;EAQH,CATD;AAUH,CAZM;AAcP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,iBAAiB,GAAG,YAAW;EACtC;EACA,OAAO1B,gBAAgB,CAACc,QAAjB,CAA2B,UAAUa,OAAV,EAAoB;IAClD,OAAQ,2BAAR,EAAsCd,IAAtC,CAA4C,UAAUM,qBAAV,EAAkC;MAC1EQ,OAAO,CAAER,qBAAqB,CAACO,iBAAtB,EAAF,CAAP;IACH,CAFD;EAGH,CAJM,CAAP;AAKH,CAPM;AASP;AACA;AACA;;AACA,OAAO,IAAIE,uBAAuB,GAAG,UAAUjB,OAAV,EAAmBC,QAAnB,EAA6BiB,SAA7B,EAAwCC,UAAxC,EAAqD;EACtF;EACA,OAAQ,+BAAR,EAA0CjB,IAA1C,CAAgD,UAAUkB,GAAV,EAAgB;IAC5D,IAAIC,qBAAqB,GAAGD,GAAG,CAACE,OAAJ,CAAYnB,QAAxC;IACAkB,qBAAqB,CAACJ,uBAAtB,CAA+CjB,OAA/C,EAAwDC,QAAxD,EAAkEiB,SAAlE,EAA6EC,UAA7E;EACH,CAHD;AAIH,CANM;AAQP7B,OAAO,GAAG;EACNG,aADM;EAENE,kBAFM;EAGNC,0BAHM;EAINC,2BAJM;EAKNE,eALM;EAMNO,wBANM;EAONI,kBAPM;EAQNK,iBARM;EASNE;AATM,CAAV;AAWA,eAAe3B,OAAf"},"metadata":{},"sourceType":"module"}
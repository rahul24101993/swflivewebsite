{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwToolbarInternalService.js\";\nimport AwCommand from 'viewmodel/AwCommandViewModel';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';\nimport { getCommandStates } from 'js/command.service';\nimport { getCompClass } from 'js/componentUtils';\n/**\n * Configuration for the overflow popup\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst overflowPopupOptions = {\n  advancePositioning: true,\n  autoFocus: true,\n  clickOutsideToClose: true,\n  closeWhenEsc: true,\n  flipBehavior: 'opposite',\n  resizeContainer: 'div.aw-layout-popup',\n  selectedElementCSS: '.aw-state-selected',\n  toggleMode: true,\n  whenParentScrolls: 'follow',\n  forceCloseOthers: false\n};\n/**\n * Get any class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */\n\nconst getCommandLabelClass = showCommandLabels => {\n  if (showCommandLabels === false) {\n    return 'aw-commands-noLabel';\n  }\n\n  if (showCommandLabels === true) {\n    return 'aw-commands-showIconLabel';\n  }\n\n  return '';\n};\n\nexport const awToolbarInternalRenderFunction = _ref => {\n  let {\n    alignment,\n    visibilityLoader,\n    commandContext,\n    firstAnchor,\n    secondAnchor,\n    ctxMin: {\n      firstCommandDisplays: fcd,\n      secondCommandDisplays: scd\n    },\n    className,\n    showCommandLabels,\n    elementRefList,\n    overflow,\n    hideMore,\n    trace = () => null,\n    reverse = false,\n    reverseSecond = false,\n    actions: {\n      overflowPopup\n    },\n    i18n,\n    viewModel: {\n      _observer,\n      _overflownCommands\n    }\n  } = _ref; //Reverse the second cmd displays for backward compibility with ng\n\n  scd = scd.reverse();\n  const firstCommandDisplays = reverse ? fcd.reverse() : fcd;\n  let secondCommandDisplays = reverseSecond ? scd.reverse() : scd;\n  const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';\n  const commandLabelsClass = getCommandLabelClass(showCommandLabels);\n  const commandBarMain = elementRefList.get('commandBarMain');\n\n  const childCommandClickCallback = hasPopup => {\n    if (hasPopup) {\n      return;\n    }\n\n    overflowPopup.hide();\n  }; // give vertical toolbar a default background color\n\n\n  const orientationCls = alignment === 'VERTICAL' ? ' aw-toolbar-vertical aw-layout-infoCommandbar' : ' aw-toolbar-horizontal';\n\n  const renderCommand = command => {\n    return /*#__PURE__*/_jsxDEV(AwCommand, {\n      commandContext: commandContext,\n      command: command,\n      alignment: alignment,\n      visibilityLoader: visibilityLoader,\n      commandObserver: _observer,\n      overflow: _overflownCommands[command.id] ? true : null\n    }, command && command.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  };\n\n  const isVisible = command => command && command.visible;\n\n  const renderVerticalContent = (alignmentCls, secondBarClass, firstAnchor, secondAnchor, renderOverflowButton, overflownCommandsCount) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-commandBars aw-commandBar-vertical\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `aw-command-bar ${alignmentCls}`,\n          anchor: firstAnchor,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`,\n            children: renderOverflowButton ? _observer && firstCommandDisplays.filter(isVisible).map(renderCommand) : firstCommandDisplays.filter(isVisible).map(renderCommand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-row aw-bottom-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `aw-command-bar ${alignmentCls} ${secondBarClass}`,\n          anchor: secondAnchor,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`,\n            children: renderOverflowButton ? _observer && secondCommandDisplays.filter(isVisible).map(renderCommand) : secondCommandDisplays.filter(isVisible).map(renderCommand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), renderOverflowButton && overflownCommandsCount ? renderOverflowButton() : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderWithOverflow = () => {\n    let overflownCommandsCount = 0;\n\n    const isVisibleCmd = cmd => {\n      if (cmd && cmd.visible) {\n        _overflownCommands[cmd.id] && overflownCommandsCount++;\n        return true;\n      }\n\n      return null;\n    };\n\n    const secondBarClass = alignment === 'VERTICAL' ? 'aw-second-barVertical' : 'aw-second-barHorizontal';\n    const firstVisibleCommands = firstCommandDisplays.filter(isVisibleCmd);\n    const secondVisibleCommands = secondCommandDisplays.filter(isVisibleCmd);\n    const visibleCommandCount = firstVisibleCommands.length + secondVisibleCommands.length;\n    trace(`${visibleCommandCount} commands are visible, computing command overflow`);\n\n    const overflowClickHandler = e => {\n      e.stopPropagation();\n\n      if (overflowPopup.open) {\n        overflowPopup.hide();\n      } else {\n        overflowPopup.show({ ...overflowPopupOptions,\n          placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'\n        });\n      }\n    };\n\n    const getOverflownCommands = () => {\n      let firstOverflownCmds = [];\n      let secondOverflownCmds = [];\n\n      for (const cmdId in _overflownCommands) {\n        let overflownCmd = firstVisibleCommands.find(command => command && command.id === cmdId);\n\n        if (!overflownCmd) {\n          overflownCmd = secondVisibleCommands.find(command => command && command.id === cmdId);\n          overflownCmd && secondOverflownCmds.unshift(overflownCmd);\n        } else {\n          firstOverflownCmds.unshift(overflownCmd);\n        }\n      }\n\n      return firstOverflownCmds.concat(secondOverflownCmds);\n    };\n\n    const renderOverflowPopup = () => {\n      return overflowPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...overflowPopup.options,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-popup-command-bar\",\n          children: getOverflownCommands().map(command => /*#__PURE__*/_jsxDEV(AwPopupCommandCell, {\n            commandContext: commandContext,\n            command: command,\n            alignment: alignment,\n            visibilityLoader: visibilityLoader,\n            overflow: true,\n            childCommandClickCallback: childCommandClickCallback\n          }, command && command.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 42\n      }, this);\n    };\n\n    const renderOverflowButton = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'aw-toolbarIcon aw-commands-moreButton aw-command-overflowIcon',\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: `aw-commands-commandToolbarIconButton ${overflowPopup.open ? 'aw-state-selected' : ''}`,\n          \"aria-label\": i18n.MORE_BUTTON_TITLE,\n          onClick: overflowClickHandler,\n          ref: overflowPopup.reference,\n          children: /*#__PURE__*/_jsxDEV(AwIcon, {\n            iconId: \"cmdMore\",\n            className: \"aw-commands-svg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n          reference: overflowPopup.reference,\n          extendedTooltipContext: {\n            title: i18n.MORE_BUTTON_TITLE\n          },\n          extendedTooltipOptions: {\n            isCommand: true,\n            placement: 'left'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 20\n      }, this);\n    };\n\n    const renderHorizontalContent = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-commandBars aw-commandBar-horizontal\",\n        children: [firstVisibleCommands.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `aw-command-bar aw-use-commandOverflow ${alignmentCls}`,\n          anchor: firstAnchor,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`,\n            children: _observer && firstVisibleCommands.map(renderCommand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 49\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commandBars aw-commandBar-horizontal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 26\n        }, this), secondVisibleCommands.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `aw-command-bar aw-use-commandOverflow ${alignmentCls} ${secondBarClass}`,\n          anchor: secondAnchor,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`,\n            children: _observer && secondVisibleCommands.map(renderCommand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 50\n        }, this) : null, overflownCommandsCount ? renderOverflowButton() : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 20\n      }, this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCompClass('aw-toolbar-layout', {\n        className\n      }) + ' ' + orientationCls,\n      ref: commandBarMain,\n      children: [alignment === 'VERTICAL' ? renderVerticalContent(alignmentCls, secondBarClass, firstAnchor, secondAnchor, renderOverflowButton, overflownCommandsCount) : renderHorizontalContent(), renderOverflowPopup()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 16\n    }, this);\n  };\n\n  const renderToolbarNoOverflow = () => {\n    const cmdBarOrientationCls = alignment === 'VERTICAL' ? 'aw-commandBar-vertical' : 'aw-commandBar-horizontal';\n    const secondBarClass = alignment === 'VERTICAL' ? 'aw-second-barVertical' : 'aw-second-barHorizontal';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getCompClass('aw-toolbar-layout aw-toolbar-nooverflow', {\n        className\n      }) + ' ' + orientationCls,\n      ref: commandBarMain,\n      children: alignment === 'VERTICAL' ? renderVerticalContent(alignmentCls, secondBarClass, firstAnchor, secondAnchor, null) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'aw-commandBars ' + cmdBarOrientationCls,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `aw-command-bar ${alignmentCls} `,\n          anchor: firstAnchor,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`,\n            children: firstCommandDisplays.filter(isVisible).map(renderCommand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `aw-command-bar ${alignmentCls}  ${secondBarClass}`,\n          anchor: secondAnchor,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`,\n            children: secondCommandDisplays.filter(isVisible).map(renderCommand)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 134\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this);\n  };\n\n  if (overflow && overflow !== 'false') {\n    return renderWithOverflow();\n  }\n\n  return renderToolbarNoOverflow();\n};\n/**\n * Derived state config for first set of CommandOverlay\n *\n * @param {*} vmDef vmDef\n * @param {*} param1 param1\n * @returns {[DerivedStateResult]} result\n */\n\nexport const getFirstCommandStates = (vmDef, _ref2) => {\n  let {\n    firstCommandList = [],\n    commandContext = {},\n    visibleServerCommands = {}\n  } = _ref2;\n  return getCommandStates(vmDef, {\n    commandList: firstCommandList,\n    commandContext,\n    visibleServerCommands\n  });\n};\n/**\n * Derived state config for second set of CommandOverlay\n *\n * @param {*} vmDef vmDef\n * @param {*} param1 param1\n * @returns {[DerivedStateResult]} result\n */\n\nexport const getSecondCommandStates = (vmDef, _ref3) => {\n  let {\n    secondCommandList = [],\n    commandContext = {},\n    visibleServerCommands = {}\n  } = _ref3;\n  return getCommandStates(vmDef, {\n    commandList: secondCommandList,\n    commandContext,\n    visibleServerCommands\n  });\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwToolbarInternalService.js"],"names":["overflowPopupOptions","advancePositioning","autoFocus","clickOutsideToClose","closeWhenEsc","flipBehavior","resizeContainer","selectedElementCSS","toggleMode","whenParentScrolls","forceCloseOthers","getCommandLabelClass","showCommandLabels","awToolbarInternalRenderFunction","ctxMin","firstCommandDisplays","secondCommandDisplays","scd","trace","reverse","reverseSecond","actions","overflowPopup","viewModel","_overflownCommands","fcd","alignmentCls","alignment","commandLabelsClass","commandBarMain","elementRefList","childCommandClickCallback","hasPopup","orientationCls","renderCommand","command","isVisible","renderVerticalContent","renderOverflowButton","_observer","secondBarClass","renderWithOverflow","overflownCommandsCount","isVisibleCmd","cmd","firstVisibleCommands","secondVisibleCommands","visibleCommandCount","overflowClickHandler","e","placement","getOverflownCommands","firstOverflownCmds","secondOverflownCmds","overflownCmd","renderOverflowPopup","i18n","title","MORE_BUTTON_TITLE","isCommand","renderHorizontalContent","className","renderToolbarNoOverflow","cmdBarOrientationCls","overflow","getFirstCommandStates","firstCommandList","commandContext","visibleServerCommands","getCommandStates","commandList","getSecondCommandStates","secondCommandList"],"mappings":"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","sourcesContent":["import AwCommand from 'viewmodel/AwCommandViewModel';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';\nimport { getCommandStates } from 'js/command.service';\nimport { getCompClass } from 'js/componentUtils';\n\n/**\n * Configuration for the overflow popup\n */\nconst overflowPopupOptions = {\n    advancePositioning: true,\n    autoFocus: true,\n    clickOutsideToClose: true,\n    closeWhenEsc: true,\n    flipBehavior: 'opposite',\n    resizeContainer: 'div.aw-layout-popup',\n    selectedElementCSS: '.aw-state-selected',\n    toggleMode: true,\n    whenParentScrolls: 'follow',\n    forceCloseOthers: false\n};\n\n/**\n * Get any class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */\nconst getCommandLabelClass = ( showCommandLabels ) => {\n    if( showCommandLabels === false ) {\n        return 'aw-commands-noLabel';\n    }\n    if( showCommandLabels === true ) {\n        return 'aw-commands-showIconLabel';\n    }\n    return '';\n};\n\nexport const awToolbarInternalRenderFunction = ( { alignment, visibilityLoader, commandContext, firstAnchor, secondAnchor, ctxMin: { firstCommandDisplays: fcd, secondCommandDisplays: scd },\n    className, showCommandLabels, elementRefList, overflow, hideMore, trace = () => null, reverse = false, reverseSecond = false,\n    actions: { overflowPopup }, i18n, viewModel: { _observer, _overflownCommands  } } ) => {\n    //Reverse the second cmd displays for backward compibility with ng\n    scd = scd.reverse();\n    const firstCommandDisplays = reverse ? fcd.reverse() : fcd;\n    let secondCommandDisplays = reverseSecond ? scd.reverse() : scd;\n\n    const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';\n    const commandLabelsClass = getCommandLabelClass( showCommandLabels );\n    const commandBarMain = elementRefList.get( 'commandBarMain' );\n\n    const childCommandClickCallback = ( hasPopup ) => {\n        if( hasPopup ) {\n            return;\n        }\n        overflowPopup.hide();\n    };\n\n    // give vertical toolbar a default background color\n    const orientationCls = alignment === 'VERTICAL' ? ' aw-toolbar-vertical aw-layout-infoCommandbar' : ' aw-toolbar-horizontal';\n    const renderCommand =  command => {\n        return <AwCommand commandContext={commandContext}\n            key={command && command.id}\n            command={command}\n            alignment={alignment}\n            visibilityLoader={visibilityLoader}\n            commandObserver={_observer}\n            overflow={_overflownCommands[ command.id ] ? true : null}></AwCommand>;\n    };\n    const isVisible = command => command && command.visible;\n\n    const renderVerticalContent = ( alignmentCls, secondBarClass, firstAnchor, secondAnchor, renderOverflowButton, overflownCommandsCount ) => {\n        return <div className='aw-commandBars aw-commandBar-vertical'>\n            <div className='sw-row'>\n                <div className={`aw-command-bar ${alignmentCls}` } anchor={firstAnchor}>\n                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>\n                        { renderOverflowButton ? _observer && firstCommandDisplays.filter( isVisible ).map( renderCommand ) : firstCommandDisplays.filter( isVisible ).map( renderCommand ) }\n                    </div>\n                </div>\n            </div>\n            <div className='sw-row aw-bottom-bar'>\n                <div className={`aw-command-bar ${alignmentCls} ${secondBarClass}` } anchor={secondAnchor}>\n                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>\n                        { renderOverflowButton ? _observer && secondCommandDisplays.filter( isVisible ).map( renderCommand ) : secondCommandDisplays.filter( isVisible ).map( renderCommand ) }\n                    </div>\n                </div>\n            </div>\n            {/* Overflow button */}\n            { renderOverflowButton && overflownCommandsCount ? renderOverflowButton() : null }\n        </div>;\n    };\n\n    const renderWithOverflow = () => {\n        let overflownCommandsCount = 0;\n        const isVisibleCmd = cmd => {\n            if( cmd && cmd.visible ) {\n                _overflownCommands[ cmd.id ] && overflownCommandsCount++;\n                return true;\n            }\n            return null;\n        };\n\n        const secondBarClass = alignment === 'VERTICAL' ? 'aw-second-barVertical' : 'aw-second-barHorizontal';\n        const firstVisibleCommands = firstCommandDisplays.filter( isVisibleCmd );\n        const secondVisibleCommands = secondCommandDisplays.filter( isVisibleCmd );\n        const visibleCommandCount = firstVisibleCommands.length + secondVisibleCommands.length;\n        trace( `${visibleCommandCount} commands are visible, computing command overflow` );\n\n        const overflowClickHandler = ( e ) => {\n            e.stopPropagation();\n            if( overflowPopup.open ) {\n                overflowPopup.hide();\n            } else {\n                overflowPopup.show( {\n                    ...overflowPopupOptions,\n                    placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'\n                } );\n            }\n        };\n\n        const getOverflownCommands = () => {\n            let firstOverflownCmds = [];\n            let secondOverflownCmds = [];\n\n            for( const cmdId in _overflownCommands ) {\n                let overflownCmd = firstVisibleCommands.find( command =>  command && command.id === cmdId );\n                if( !overflownCmd ) {\n                    overflownCmd = secondVisibleCommands.find( command =>  command && command.id === cmdId );\n                    overflownCmd && secondOverflownCmds.unshift( overflownCmd );\n                } else {\n                    firstOverflownCmds.unshift( overflownCmd );\n                }\n            }\n            return firstOverflownCmds.concat( secondOverflownCmds );\n        };\n\n        const renderOverflowPopup = () => {\n            return overflowPopup.open && <AwPopup {...overflowPopup.options}>\n                <div className='aw-popup-command-bar'>\n                    { getOverflownCommands().map( command =>\n                        <AwPopupCommandCell commandContext={commandContext} key={command && command.id}\n                            command={command} alignment={alignment} visibilityLoader={visibilityLoader}\n                            overflow={true} childCommandClickCallback={childCommandClickCallback}></AwPopupCommandCell> )}\n                </div>\n            </AwPopup>;\n        };\n\n        const renderOverflowButton = () => {\n            return <div className={'aw-toolbarIcon aw-commands-moreButton aw-command-overflowIcon'}>\n                <button type='button'\n                    className={`aw-commands-commandToolbarIconButton ${ overflowPopup.open ? 'aw-state-selected' : '' }`}\n                    aria-label={i18n.MORE_BUTTON_TITLE}\n                    onClick={overflowClickHandler}\n                    ref={overflowPopup.reference}>\n                    <AwIcon iconId='cmdMore' className='aw-commands-svg'></AwIcon>\n                </button>\n                <AwExtendedTooltip\n                    reference={overflowPopup.reference}\n                    extendedTooltipContext={{ title: i18n.MORE_BUTTON_TITLE }}\n                    extendedTooltipOptions={{ isCommand: true, placement : 'left' }}>\n                </AwExtendedTooltip>\n            </div>;\n        };\n\n        const renderHorizontalContent = () => {\n            return <div className='aw-commandBars aw-commandBar-horizontal'>\n                { firstVisibleCommands.length ? <div className={`aw-command-bar aw-use-commandOverflow ${alignmentCls}` } anchor={firstAnchor}>\n                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>\n                        { _observer && firstVisibleCommands.map( renderCommand )}\n                    </div>\n                </div> : <div className='aw-commandBars aw-commandBar-horizontal'></div> }\n                { secondVisibleCommands.length ? <div className={`aw-command-bar aw-use-commandOverflow ${alignmentCls} ${secondBarClass}` } anchor={secondAnchor}>\n                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>\n                        { _observer && secondVisibleCommands.map( renderCommand )}\n                    </div>\n                </div> : null }\n                {/* Overflow button */}\n                { overflownCommandsCount ? renderOverflowButton() : null }\n            </div>;\n        };\n\n        return <div className={ getCompClass( 'aw-toolbar-layout', { className } ) + ' ' + orientationCls} ref={commandBarMain}>\n            {/* Non overflow commands */}\n            { alignment === 'VERTICAL' ? renderVerticalContent( alignmentCls, secondBarClass, firstAnchor, secondAnchor, renderOverflowButton, overflownCommandsCount ) : renderHorizontalContent() }\n            {/* Overflow popup */}\n            { renderOverflowPopup() }\n        </div>;\n    };\n\n    const renderToolbarNoOverflow = () => {\n        const cmdBarOrientationCls = alignment === 'VERTICAL' ? 'aw-commandBar-vertical' : 'aw-commandBar-horizontal';\n        const secondBarClass = alignment === 'VERTICAL' ? 'aw-second-barVertical' : 'aw-second-barHorizontal';\n\n        return (\n            <div className={ getCompClass( 'aw-toolbar-layout aw-toolbar-nooverflow', { className } ) + ' ' + orientationCls} ref={commandBarMain}>\n                {alignment === 'VERTICAL' ? renderVerticalContent( alignmentCls, secondBarClass, firstAnchor, secondAnchor, null ) : <div className={'aw-commandBars ' + cmdBarOrientationCls}>\n                    <div className={`aw-command-bar ${alignmentCls} ` } anchor={firstAnchor}>\n                        <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>\n                            { firstCommandDisplays.filter( isVisible ).map( renderCommand )}\n                        </div>\n                    </div>\n                    <div className={`aw-command-bar ${alignmentCls}  ${secondBarClass}` } anchor={secondAnchor}>\n                        <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>\n                            { secondCommandDisplays.filter( isVisible ).map( renderCommand )}\n                        </div>\n                    </div>\n                </div>}\n            </div>\n\n        );\n    };\n\n    if( overflow && overflow !== 'false' ) {\n        return renderWithOverflow();\n    }\n    return renderToolbarNoOverflow();\n};\n\n/**\n * Derived state config for first set of CommandOverlay\n *\n * @param {*} vmDef vmDef\n * @param {*} param1 param1\n * @returns {[DerivedStateResult]} result\n */\nexport const getFirstCommandStates = ( vmDef, { firstCommandList = [], commandContext = {}, visibleServerCommands = {} } ) => {\n    return getCommandStates( vmDef, { commandList: firstCommandList,  commandContext, visibleServerCommands } );\n};\n\n/**\n * Derived state config for second set of CommandOverlay\n *\n * @param {*} vmDef vmDef\n * @param {*} param1 param1\n * @returns {[DerivedStateResult]} result\n */\nexport const getSecondCommandStates = ( vmDef, { secondCommandList = [], commandContext = {}, visibleServerCommands = {} } ) => {\n    return getCommandStates( vmDef, { commandList: secondCommandList,  commandContext, visibleServerCommands } );\n};\n"]},"metadata":{},"sourceType":"module"}
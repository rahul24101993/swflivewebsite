{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwCommandPanelService.js\";\nimport AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport eventBus from 'js/eventBus';\nimport AwNavigatePanel from 'viewmodel/AwNavigatePanelViewModel';\nimport { ShowWhen } from 'js/hocCollection';\nimport _ from 'lodash';\nimport appCtxSvc from 'js/appCtxService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AwShowWhenProvider = ShowWhen(AwNavigatePanel);\n_c = AwShowWhenProvider;\nexport const awCommandPanelRenderFunction = props => {\n  const {\n    attributes,\n    onSubmit,\n    submitAction,\n    subPanelContext = {},\n    updateActiveView = {},\n    viewModel\n  } = props;\n  const {\n    data\n  } = viewModel;\n  const {\n    activeView = null\n  } = updateActiveView;\n  let previousView = null;\n  let rootNode = data.panelNavTree || null;\n\n  if (rootNode && activeView) {\n    let currentPanelNode = findNode(activeView, rootNode);\n\n    if (currentPanelNode) {\n      previousView = currentPanelNode.getParentNode().getNodeName();\n    }\n  }\n\n  const loadSubPanels = () => {\n    let dynamicSubPanels = data.dynamicSubPanels || [];\n    let hierarchy = findHierarchy(activeView, rootNode);\n    return dynamicSubPanels.map(subPanel => {\n      let panelId = subPanel.destPanelId;\n      let reCreatePanel = subPanel.hasOwnProperty('recreatePanel') ? subPanel.recreatePanel === true : false;\n      let condition = reCreatePanel ? activeView === panelId : true;\n\n      if (!condition) {\n        //When move from panel in higher order, we dont destroy it immediately but destroy and recreate on revisit to panel based on recreatePanel flag\n        if (hierarchy.indexOf(activeView) > hierarchy.indexOf(panelId)) {\n          condition = true; // DO NOT DESTROY\n        }\n      }\n\n      return condition && /*#__PURE__*/_jsxDEV(AwShowWhenProvider, {\n        showWhen: activeView === panelId,\n        destPanelId: panelId,\n        prePanelId: previousView,\n        updateActiveView: updateActiveView,\n        subPanelContext: subPanel.subPanelContext,\n        title: subPanel.title\n      }, panelId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 30\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", { ...attributes,\n    onSubmit: event => {\n      onSubmit && onSubmit(event, submitAction);\n    },\n    className: \"sw-column flex-auto aw-panel sw-command-panel align-self-stretch afx-content-background\",\n    children: [!props.hideTitle ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-layout-panelTitle sw-row justify-justified\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: (props.caption ? '' : 'hidden ') + 'aw-panel-caption align-self-stretch',\n        children: props.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-row align-center justify-right flex-shrink sw-panel-bar\",\n        children: [/*#__PURE__*/_jsxDEV(AwCommandBar, {\n          className: \"aw-layout-workareaCommandbar\",\n          anchor: props.anchor,\n          alignment: \"HORIZONTAL\",\n          context: props.context\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AwCommandBar, {\n          context: props.context,\n          class: \"aw-layout-workareaCommandbar\",\n          anchor: \"aw_commandPanel\",\n          alignment: \"HORIZONTAL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 34\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-command-panelContent sw-column flex-auto\",\n      children: [props.children, loadSubPanels()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"aw-hide-form-button\",\n      disabled: true,\n      \"aria-hidden\": \"true\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\nexport const executeReveal = function (revealAction, subPanels) {\n  if (_.isFunction(revealAction)) {\n    revealAction();\n  } // preloadedPanels are the panels which are statically declared inside command -panel child as command-sub-panel.\n\n\n  let preLoadedCommandSubPanels = [];\n\n  if (subPanels) {\n    let children = _.isArray(subPanels) ? subPanels : [subPanels];\n    preLoadedCommandSubPanels = children.map(child => {\n      return child.props && child.props.panelId ? child.props.panelId : '';\n    }).filter(child => child !== '');\n  }\n\n  eventBus.publish('awPanel.reveal', {});\n  return preLoadedCommandSubPanels;\n};\n/**\n * @param {*} subPanelContext\n */\n\nexport const navigatePanel = (eventData, updateActiveView, panelNavTree, dynamicSubPanels, staticCommandSubPanels) => {\n  let activeView = updateActiveView.activeView;\n  const pDispatch = updateActiveView.dispatch;\n\n  if (pDispatch && activeView) {\n    appCtxSvc.updateCtx('panelContext', eventData); // If the incoming sub-panel is not yet registered with dynamicSubPanels state, It must be a getting loaded newly.\n\n    const isAlreadyLoadedDynPanel = dynamicSubPanels.findIndex(loadedPanel => loadedPanel.destPanelId === eventData.destPanelId) !== -1;\n    const isStaticCommandPanel = staticCommandSubPanels.findIndex(staticCommandSubPanel => staticCommandSubPanel === eventData.destPanelId) !== -1;\n    /**\n     *  isNewNavigationSystemEnabled\n     *  BA Specific case\n     * ----------------------------------------------------------------------------------------------------\n     *  In BA , user might use a component directly inside a command-panel and later do navigation from the\n     *  <aw-command-panel><aw-info show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n     *  In these cases, when navigating back, user need to specify \"backNavigation\" as true as part of \"aw.navigate\" eventdata.\n     *  isNewNavigationSystemEnabled will be enabled when \"backNavigation\" is set as true in the event data.\n     *\n     *  In other cases ( same as ng-afx)\n     * -----------------------------------------------------------------------------------------------------------\n     *  <aw-command-panel><aw-command-sub-panel panel-id='awInfo' show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n     *  User need not required to define backNavigation as true as part of eventdata amd should work as ng-afx worked.       *\n     *\n     *  If the incoming new panel is not part of dynamicSubPanels and staticCommandSubPanel, then only add it to dynamicSubPanels.\n     *  Otherwise it means the incoming panel( specified destPanelId in eventData) is already loaded and not a new one.\n     */\n\n    let isNewNavigationSystemEnabled = false;\n    let backNavigation = false;\n\n    if (eventData.hasOwnProperty('backNavigation')) {\n      isNewNavigationSystemEnabled = true;\n\n      if (eventData.backNavigation) {\n        backNavigation = true;\n      }\n    }\n\n    if (isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !backNavigation) {\n      dynamicSubPanels.push(eventData);\n    }\n\n    if (!isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !isStaticCommandPanel) {\n      dynamicSubPanels.push(eventData);\n    }\n\n    dynamicSubPanels = dynamicSubPanels.map(subPanel => subPanel.destPanelId === eventData.destPanelId ? eventData : subPanel); // The current view will be evetually becomes the previousView\n\n    let previousView = null; // The Panel name came from event will become the activeView eventually\n    //let activeView = null;\n\n    let rootNode = panelNavTree || new Node('root');\n\n    if (activeView !== eventData.destPanelId) {\n      previousView = activeView;\n      activeView = eventData.destPanelId;\n      let prevPanelNode = findNode(previousView, rootNode); // If the current panel is not found in tree, then this is the first\n\n      if (!prevPanelNode) {\n        let prevNode = new Node(previousView);\n        rootNode.addChildNodes(prevNode);\n        prevNode.addChildNodes(new Node(activeView));\n      } else {\n        // If the new Panel( suppose to load) is found in the Tree, then no need to add it.\n        // probably the navigation already happened.\n        if (!findNode(activeView, rootNode)) {\n          prevPanelNode.addChildNodes(new Node(activeView));\n        }\n      }\n    }\n\n    return {\n      panelNavTree: { ...rootNode\n      },\n      dynamicSubPanels: [...dynamicSubPanels],\n      currentView: activeView\n    };\n  }\n};\nexport const dispatchActiveView = (updateActiveView, currentView) => {\n  const pDispatch = updateActiveView.dispatch;\n\n  if (pDispatch && currentView) {\n    pDispatch({\n      value: {\n        'data.activeView': currentView\n      }\n    });\n  }\n};\n/**\n * Simple Data Structure to hold the Panel Navigation sequence.\n * @param {*} name\n * @param {*} pNode\n * @param {*} cNode\n */\n\nconst Node = function (name) {\n  let nodeName = name;\n  let parentNode = null;\n  const childNodes = [];\n\n  this.getNodeName = () => nodeName;\n\n  this.setNodeName = name => nodeName = name;\n\n  this.getParentNode = () => parentNode;\n\n  this.setParentNode = pNode => parentNode = pNode;\n\n  this.getChildNodes = () => childNodes;\n\n  this.addChildNodes = childNode => {\n    let _self = this;\n\n    let hasChildNode = childNodes.filter(cNode => cNode.getNodeName() === childNode.getNodeName());\n\n    if (hasChildNode.length === 0) {\n      childNodes.push(childNode);\n      childNode.setParentNode(_self);\n    }\n  };\n};\n\n_c2 = Node;\n\nconst findHierarchy = (name, rootNode) => {\n  let order = [];\n\n  if (rootNode === null || rootNode.getNodeName() === name) {\n    return ['root'];\n  }\n\n  let traverseHierarchy = function (rootNode) {\n    _.forEach(rootNode.getChildNodes(), Node => {\n      order.push(Node.getNodeName());\n      return traverseHierarchy(Node);\n    });\n  };\n\n  traverseHierarchy(rootNode);\n  return order;\n};\n\nconst findNode = (name, rootNode) => {\n  if (rootNode.getNodeName() === name) {\n    return rootNode;\n  }\n\n  let visitedNode = null;\n\n  let inOrderTraversal = function (rootNode) {\n    _.forEach(rootNode.getChildNodes(), Node => {\n      if (Node && Node.getNodeName() === name) {\n        visitedNode = Node;\n        return;\n      }\n\n      return inOrderTraversal(Node);\n    });\n  };\n\n  inOrderTraversal(rootNode);\n  return visitedNode;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AwShowWhenProvider\");\n$RefreshReg$(_c2, \"Node\");","map":{"version":3,"names":["AwCommandBar","eventBus","AwNavigatePanel","ShowWhen","_","appCtxSvc","AwShowWhenProvider","awCommandPanelRenderFunction","props","attributes","onSubmit","submitAction","subPanelContext","updateActiveView","viewModel","data","activeView","previousView","rootNode","panelNavTree","currentPanelNode","findNode","getParentNode","getNodeName","loadSubPanels","dynamicSubPanels","hierarchy","findHierarchy","map","subPanel","panelId","destPanelId","reCreatePanel","hasOwnProperty","recreatePanel","condition","indexOf","title","event","hideTitle","caption","anchor","context","children","executeReveal","revealAction","subPanels","isFunction","preLoadedCommandSubPanels","isArray","child","filter","publish","navigatePanel","eventData","staticCommandSubPanels","pDispatch","dispatch","updateCtx","isAlreadyLoadedDynPanel","findIndex","loadedPanel","isStaticCommandPanel","staticCommandSubPanel","isNewNavigationSystemEnabled","backNavigation","push","Node","prevPanelNode","prevNode","addChildNodes","currentView","dispatchActiveView","value","name","nodeName","parentNode","childNodes","setNodeName","setParentNode","pNode","getChildNodes","childNode","_self","hasChildNode","cNode","length","order","traverseHierarchy","forEach","visitedNode","inOrderTraversal"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwCommandPanelService.js"],"sourcesContent":["import AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport eventBus from 'js/eventBus';\nimport AwNavigatePanel from 'viewmodel/AwNavigatePanelViewModel';\nimport { ShowWhen } from 'js/hocCollection';\nimport _ from 'lodash';\nimport appCtxSvc from 'js/appCtxService';\n\nconst AwShowWhenProvider = ShowWhen( AwNavigatePanel );\nexport const awCommandPanelRenderFunction = ( props ) => {\n    const { attributes, onSubmit, submitAction, subPanelContext = {}, updateActiveView = {}, viewModel } = props;\n    const { data } = viewModel;\n    const { activeView = null } = updateActiveView;\n    let previousView = null;\n    let rootNode = data.panelNavTree || null;\n    if( rootNode && activeView ) {\n        let currentPanelNode = findNode( activeView, rootNode );\n        if( currentPanelNode ) {\n            previousView = currentPanelNode.getParentNode().getNodeName();\n        }\n    }\n\n    const loadSubPanels = () => {\n        let dynamicSubPanels = data.dynamicSubPanels || [];\n        let hierarchy = findHierarchy( activeView, rootNode );\n        return dynamicSubPanels.map( ( subPanel ) => {\n            let panelId = subPanel.destPanelId;\n            let reCreatePanel = subPanel.hasOwnProperty( 'recreatePanel' ) ? subPanel.recreatePanel === true : false;\n            let condition = reCreatePanel ? activeView === panelId : true;\n            if( !condition ) {\n                //When move from panel in higher order, we dont destroy it immediately but destroy and recreate on revisit to panel based on recreatePanel flag\n                if( hierarchy.indexOf( activeView ) > hierarchy.indexOf( panelId ) ) {\n                    condition = true; // DO NOT DESTROY\n                }\n            }\n\n            return (\n                condition && <AwShowWhenProvider\n                    showWhen={activeView === panelId}\n                    key={panelId}\n                    destPanelId = {panelId}\n                    prePanelId={previousView}\n                    updateActiveView={updateActiveView}\n                    subPanelContext={subPanel.subPanelContext}\n                    title={subPanel.title}>\n                </AwShowWhenProvider>\n            );\n        } );\n    };\n    return (\n        <form { ...attributes }\n            onSubmit = { event => { onSubmit && onSubmit( event, submitAction ); } }\n            className = 'sw-column flex-auto aw-panel sw-command-panel align-self-stretch afx-content-background'>\n            { !props.hideTitle ? <div className='aw-layout-panelTitle sw-row justify-justified'>\n                <div className={( props.caption ? '' : 'hidden ' ) + 'aw-panel-caption align-self-stretch'}>\n                    { props.caption }\n                </div>\n                <div className='sw-row align-center justify-right flex-shrink sw-panel-bar'>\n                    {/* revisitMe: Jignesh to add map for icon buttons */}\n                    {/* <aw-icon-button class='aw-layout-right' command='command' visible-when='{{command.condition}}' ng-repeat='command in commands'></aw-icon-button> */}\n                    <AwCommandBar\n                        className='aw-layout-workareaCommandbar'\n                        anchor={ props.anchor }\n                        alignment='HORIZONTAL'\n                        context={ props.context}>\n                    </AwCommandBar>\n                    <AwCommandBar\n                        context={ props.context }\n                        class='aw-layout-workareaCommandbar'\n                        anchor='aw_commandPanel'\n                        alignment='HORIZONTAL'>\n                    </AwCommandBar>\n                </div>\n            </div>\n                : '' }\n            <div className='sw-command-panelContent sw-column flex-auto'>\n                { props.children }\n                { loadSubPanels()}\n            </div>\n            <button type='submit' className='aw-hide-form-button' disabled={true} aria-hidden='true'></button>\n        </form>\n    );\n};\n\nexport const executeReveal = function( revealAction, subPanels ) {\n    if( _.isFunction( revealAction ) ) {\n        revealAction();\n    }\n    // preloadedPanels are the panels which are statically declared inside command -panel child as command-sub-panel.\n    let preLoadedCommandSubPanels = [];\n    if( subPanels ) {\n        let children = _.isArray( subPanels ) ? subPanels : [ subPanels ];\n        preLoadedCommandSubPanels = children.map( ( child ) => {\n            return child.props && child.props.panelId ? child.props.panelId : '';\n        } ).filter( ( child ) => child !== '' );\n    }\n    eventBus.publish( 'awPanel.reveal', {} );\n    return preLoadedCommandSubPanels;\n};\n\n/**\n * @param {*} subPanelContext\n */\nexport const navigatePanel = ( eventData, updateActiveView, panelNavTree, dynamicSubPanels, staticCommandSubPanels ) => {\n    let activeView = updateActiveView.activeView;\n    const pDispatch = updateActiveView.dispatch;\n    if( pDispatch && activeView ) {\n        appCtxSvc.updateCtx( 'panelContext', eventData );\n\n        // If the incoming sub-panel is not yet registered with dynamicSubPanels state, It must be a getting loaded newly.\n        const isAlreadyLoadedDynPanel = dynamicSubPanels.findIndex( ( loadedPanel ) => loadedPanel.destPanelId === eventData.destPanelId ) !== -1;\n        const isStaticCommandPanel = staticCommandSubPanels.findIndex( ( staticCommandSubPanel ) => staticCommandSubPanel === eventData.destPanelId ) !== -1;\n        /**\n         *  isNewNavigationSystemEnabled\n         *  BA Specific case\n         * ----------------------------------------------------------------------------------------------------\n         *  In BA , user might use a component directly inside a command-panel and later do navigation from the\n         *  <aw-command-panel><aw-info show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n         *  In these cases, when navigating back, user need to specify \"backNavigation\" as true as part of \"aw.navigate\" eventdata.\n         *  isNewNavigationSystemEnabled will be enabled when \"backNavigation\" is set as true in the event data.\n         *\n         *  In other cases ( same as ng-afx)\n         * -----------------------------------------------------------------------------------------------------------\n         *  <aw-command-panel><aw-command-sub-panel panel-id='awInfo' show-when=\"data.activeView==='awInfo'\"/><aw-command-panel>\n         *  User need not required to define backNavigation as true as part of eventdata amd should work as ng-afx worked.       *\n         *\n         *  If the incoming new panel is not part of dynamicSubPanels and staticCommandSubPanel, then only add it to dynamicSubPanels.\n         *  Otherwise it means the incoming panel( specified destPanelId in eventData) is already loaded and not a new one.\n         */\n        let isNewNavigationSystemEnabled = false;\n        let backNavigation = false;\n        if( eventData.hasOwnProperty( 'backNavigation' ) ) {\n            isNewNavigationSystemEnabled = true;\n            if( eventData.backNavigation ) {\n                backNavigation = true;\n            }\n        }\n        if( isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !backNavigation ) {\n            dynamicSubPanels.push( eventData );\n        }\n        if( !isNewNavigationSystemEnabled && !isAlreadyLoadedDynPanel && !isStaticCommandPanel ) {\n            dynamicSubPanels.push( eventData );\n        }\n        dynamicSubPanels = dynamicSubPanels.map( ( subPanel ) => subPanel.destPanelId === eventData.destPanelId ? eventData : subPanel );\n        // The current view will be evetually becomes the previousView\n        let previousView = null;\n        // The Panel name came from event will become the activeView eventually\n        //let activeView = null;\n        let rootNode = panelNavTree || new Node( 'root' );\n        if( activeView !== eventData.destPanelId ) {\n            previousView = activeView;\n            activeView = eventData.destPanelId;\n            let prevPanelNode = findNode( previousView, rootNode );\n            // If the current panel is not found in tree, then this is the first\n            if( !prevPanelNode ) {\n                let prevNode = new Node( previousView );\n                rootNode.addChildNodes( prevNode );\n                prevNode.addChildNodes( new Node( activeView ) );\n            } else {\n                // If the new Panel( suppose to load) is found in the Tree, then no need to add it.\n                // probably the navigation already happened.\n                if( !findNode( activeView, rootNode ) ) {\n                    prevPanelNode.addChildNodes( new Node( activeView ) );\n                }\n            }\n        }\n        return {\n            panelNavTree: { ...rootNode },\n            dynamicSubPanels: [ ...dynamicSubPanels ],\n            currentView: activeView\n        };\n    }\n};\n\nexport const dispatchActiveView = ( updateActiveView, currentView ) => {\n    const pDispatch = updateActiveView.dispatch;\n    if( pDispatch && currentView ) {\n        pDispatch( { value: { 'data.activeView': currentView } } );\n    }\n};\n\n/**\n * Simple Data Structure to hold the Panel Navigation sequence.\n * @param {*} name\n * @param {*} pNode\n * @param {*} cNode\n */\nconst Node = function( name ) {\n    let nodeName = name;\n    let parentNode = null;\n    const childNodes = [];\n\n    this.getNodeName = () => nodeName;\n    this.setNodeName = ( name ) => nodeName = name;\n\n    this.getParentNode = () => parentNode;\n    this.setParentNode = ( pNode ) => parentNode = pNode;\n\n    this.getChildNodes = () => childNodes;\n    this.addChildNodes = ( childNode ) => {\n        let _self = this;\n        let hasChildNode = childNodes.filter( ( cNode ) => cNode.getNodeName() === childNode.getNodeName() );\n        if( hasChildNode.length === 0 ) {\n            childNodes.push( childNode );\n            childNode.setParentNode( _self );\n        }\n    };\n};\n\nconst findHierarchy = ( name, rootNode ) => {\n    let order = [];\n    if( rootNode === null || rootNode.getNodeName() === name ) {\n        return [ 'root' ];\n    }\n    let traverseHierarchy = function( rootNode ) {\n        _.forEach( rootNode.getChildNodes(), ( Node ) => {\n            order.push( Node.getNodeName() );\n            return traverseHierarchy( Node );\n        } );\n    };\n    traverseHierarchy( rootNode );\n    return order;\n};\n\nconst findNode = ( name, rootNode ) => {\n    if( rootNode.getNodeName() === name ) {\n        return rootNode;\n    }\n    let visitedNode = null;\n    let inOrderTraversal = function( rootNode ) {\n        _.forEach( rootNode.getChildNodes(), ( Node ) => {\n            if( Node && Node.getNodeName() === name ) {\n                visitedNode = Node;\n                return;\n            }\n            return inOrderTraversal( Node );\n        } );\n    };\n    inOrderTraversal( rootNode );\n    return visitedNode;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceValidationService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport workspaceInitService from 'js/workspaceInitService';\nimport cfgSvc from 'js/configurationService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport awConfiguration from 'js/awConfiguration'; // Service\n\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} Page ID\n */\n\nexport let isValidPageAsync = function (pageId) {\n  var workspaceDefinition = appCtxSvc.getCtx('workspace');\n  var isWorkspaceChange = workspaceInitService.getisWorkspaceChange();\n\n  if (workspaceDefinition && !isWorkspaceChange) {\n    let awPromiseVariable = AwPromiseService.instance;\n    return awPromiseVariable.resolve(exports.isValidPage(pageId));\n  }\n\n  return exports.setWorkspaceId().then(function () {\n    return exports.isValidPage(pageId);\n  });\n};\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} pageId - Page ID\n * @return {Boolean} is valid page?\n */\n\nexport let isValidPage = function (pageId) {\n  var validPage = true;\n  var workspaceDefinition = appCtxSvc.getCtx('workspace');\n\n  if (workspaceDefinition && workspaceDefinition.availablePages) {\n    // Check the validity of the page only if it is exclusive workspace. For inclusive\n    // workspace, all pages are valid pages\n    if (exports.isExclusiveWorkspace(workspaceDefinition)) {\n      validPage = _.includes(workspaceDefinition.availablePages, pageId);\n    }\n  }\n\n  return validPage;\n};\n/**\n * Check whether the passed workspace is an exclusive workspace\n *\n * @param {Object} workspaceDefinition - Workspace definition\n * @return {Boolean} true for exclusive workspace, false otherwise\n */\n\nexport let isExclusiveWorkspace = function (workspaceDefinition) {\n  return workspaceDefinition ? workspaceDefinition.workspaceType === 'Exclusive' : false;\n};\n/**\n * Set the workspace ID\n *\n * @return {Promise} promise\n */\n\nexport let setWorkspaceId = function () {\n  var totalWorkspaceCount = workspaceInitService.getTotalWorkspaceCount();\n  var solution;\n  var workspaceId;\n  return cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n    solution = solutionDef;\n    workspaceId = workspaceInitService.getWorkspaceId(); // If server has no workspace entry, set the default workspace and increment the workspace count\n    // by 1 so that visibility of the WS link can be controlled correctly.\n\n    if (!workspaceId && solution.defaultWorkspace) {\n      workspaceId = solution.defaultWorkspace;\n      totalWorkspaceCount++;\n    }\n\n    return cfgSvc.getCfg('workspace');\n  }).then(function (workspaceCfg) {\n    var allWorkspaceDefn = _.cloneDeep(workspaceCfg);\n\n    var workspaceDefn = allWorkspaceDefn[workspaceId]; // If the workspace ID returned by server is not a valid one, revert the workspace increment. (This is a\n    // very corner usecase and should never happen but adding a preventive check.)\n\n    if (!workspaceDefn) {\n      workspaceDefn = allWorkspaceDefn[solution.defaultWorkspace];\n      totalWorkspaceCount--;\n    }\n\n    appCtxSvc.registerCtx('totalWorkspaceCount', totalWorkspaceCount);\n    appCtxSvc.registerCtx('workspace', workspaceDefn);\n    exports.getLocalizedText(workspaceDefn.workspaceName).then(function (result) {\n      workspaceDefn.workspaceName = result;\n      appCtxSvc.updateCtx('workspace', workspaceDefn);\n    });\n    var defaultRoutePath = awConfiguration.get('defaultRoutePath');\n\n    if (defaultRoutePath !== workspaceDefn.defaultPage) {\n      // set the value\n      awConfiguration.set('defaultRoutePath', workspaceDefn.defaultPage);\n      appCtxSvc.registerCtx('defaultRoutePath', workspaceDefn.defaultPage);\n    }\n\n    return workspaceDefn;\n  });\n};\n/**\n * Get localized text.\n *\n * @param {Object} label - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {String} localized text\n */\n\nexport let getLocalizedText = function (label) {\n  if (_.isString(label)) {\n    // If the label is a string just return it\n    return AwPromiseService.instance.resolve(label);\n  } // Otherwise get the label from the localized file\n\n\n  return localeSvc.getLocalizedText(label.source, label.key);\n};\nconst exports = {\n  isValidPageAsync,\n  isValidPage,\n  isExclusiveWorkspace,\n  setWorkspaceId,\n  getLocalizedText\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/workspaceValidationService.js"],"names":["isValidPageAsync","workspaceDefinition","appCtxSvc","isWorkspaceChange","workspaceInitService","awPromiseVariable","AwPromiseService","exports","isValidPage","validPage","_","isExclusiveWorkspace","setWorkspaceId","totalWorkspaceCount","solution","workspaceId","cfgSvc","allWorkspaceDefn","workspaceDefn","defaultRoutePath","awConfiguration","getLocalizedText","localeSvc","label"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceValidationService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport workspaceInitService from 'js/workspaceInitService';\nimport cfgSvc from 'js/configurationService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport awConfiguration from 'js/awConfiguration';\n\n// Service\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} Page ID\n */\nexport let isValidPageAsync = function( pageId ) {\n    var workspaceDefinition = appCtxSvc.getCtx( 'workspace' );\n    var isWorkspaceChange = workspaceInitService.getisWorkspaceChange();\n\n    if( workspaceDefinition && !isWorkspaceChange ) {\n        let awPromiseVariable = AwPromiseService.instance;\n        return awPromiseVariable.resolve( exports.isValidPage( pageId ) );\n    }\n\n    return exports.setWorkspaceId().then( function() {\n        return exports.isValidPage( pageId );\n    } );\n};\n\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} pageId - Page ID\n * @return {Boolean} is valid page?\n */\nexport let isValidPage = function( pageId ) {\n    var validPage = true;\n    var workspaceDefinition = appCtxSvc.getCtx( 'workspace' );\n    if( workspaceDefinition && workspaceDefinition.availablePages ) {\n        // Check the validity of the page only if it is exclusive workspace. For inclusive\n        // workspace, all pages are valid pages\n        if( exports.isExclusiveWorkspace( workspaceDefinition ) ) {\n            validPage = _.includes( workspaceDefinition.availablePages, pageId );\n        }\n    }\n    return validPage;\n};\n\n/**\n * Check whether the passed workspace is an exclusive workspace\n *\n * @param {Object} workspaceDefinition - Workspace definition\n * @return {Boolean} true for exclusive workspace, false otherwise\n */\nexport let isExclusiveWorkspace = function( workspaceDefinition ) {\n    return workspaceDefinition ? workspaceDefinition.workspaceType === 'Exclusive' : false;\n};\n\n/**\n * Set the workspace ID\n *\n * @return {Promise} promise\n */\nexport let setWorkspaceId = function() {\n    var totalWorkspaceCount = workspaceInitService.getTotalWorkspaceCount();\n    var solution;\n    var workspaceId;\n    return cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n        solution = solutionDef;\n        workspaceId = workspaceInitService.getWorkspaceId();\n        // If server has no workspace entry, set the default workspace and increment the workspace count\n        // by 1 so that visibility of the WS link can be controlled correctly.\n        if( !workspaceId && solution.defaultWorkspace ) {\n            workspaceId = solution.defaultWorkspace;\n            totalWorkspaceCount++;\n        }\n        return cfgSvc.getCfg( 'workspace' );\n    } ).then( function( workspaceCfg ) {\n        var allWorkspaceDefn = _.cloneDeep( workspaceCfg );\n\n        var workspaceDefn = allWorkspaceDefn[ workspaceId ];\n        // If the workspace ID returned by server is not a valid one, revert the workspace increment. (This is a\n        // very corner usecase and should never happen but adding a preventive check.)\n        if( !workspaceDefn ) {\n            workspaceDefn = allWorkspaceDefn[ solution.defaultWorkspace ];\n            totalWorkspaceCount--;\n        }\n        appCtxSvc.registerCtx( 'totalWorkspaceCount', totalWorkspaceCount );\n        appCtxSvc.registerCtx( 'workspace', workspaceDefn );\n        exports.getLocalizedText( workspaceDefn.workspaceName ).then( function( result ) {\n            workspaceDefn.workspaceName = result;\n            appCtxSvc.updateCtx( 'workspace', workspaceDefn );\n        } );\n        var defaultRoutePath = awConfiguration.get( 'defaultRoutePath' );\n        if( defaultRoutePath !== workspaceDefn.defaultPage ) {\n            // set the value\n            awConfiguration.set( 'defaultRoutePath', workspaceDefn.defaultPage );\n            appCtxSvc.registerCtx( 'defaultRoutePath', workspaceDefn.defaultPage );\n        }\n        return workspaceDefn;\n    } );\n};\n\n/**\n * Get localized text.\n *\n * @param {Object} label - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {String} localized text\n */\nexport let getLocalizedText = function( label ) {\n    if( _.isString( label ) ) {\n        // If the label is a string just return it\n        return AwPromiseService.instance.resolve( label );\n    }\n\n    // Otherwise get the label from the localized file\n    return localeSvc.getLocalizedText( label.source, label.key );\n};\n\nconst exports = {\n    isValidPageAsync,\n    isValidPage,\n    isExclusiveWorkspace,\n    setWorkspaceId,\n    getLocalizedText\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
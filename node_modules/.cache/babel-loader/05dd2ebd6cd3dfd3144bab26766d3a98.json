{"ast":null,"code":"import AwStateService from'js/awStateService';import keyboardService from'js/keyboardService';import appCtxService from'js/appCtxService';import localeService from'js/localeService';import AwPromiseService from'js/awPromiseService';import propertyPolicyService from'soa/kernel/propertyPolicyService';import preferenceService from'soa/preferenceService';import logger from'js/logger';let _locationContext='locationContext';let _contextName='location.titles';let _contextProperties=['browserTitle','browserSubTitle','headerTitle','showsearchbox'];let _context;let exports;const populateContextProperties=()=>{let contextProps={};var promises=[];_contextProperties.forEach(function(key){var property=AwStateService.instance.current.data[key];if(property){if(typeof property==='string'){contextProps[key]=property;promises.push(AwPromiseService.instance.when(contextProps));}else{promises.push(localeService.getLocalizedText(property.source,property.key).then(function(result){contextProps[key]=result;return contextProps;}));}}});return AwPromiseService.instance.all(promises).then(function(){appCtxService.updateCtx(_contextName,contextProps);return contextProps;});};/**\n * The policy is unregistered when the location is removed.\n */const unregisterPropertyPolicy=propertyPolicyId=>{if(propertyPolicyId){propertyPolicyService.unregister(propertyPolicyId);}};export const initializePage=async(locationPanelStyle,overriddenHeaderTitle)=>{//let subLocationTabs = []; // revisitMe\n_context=AwStateService.instance.current.parent.replace(/_/g,'.');keyboardService.registerKeyDownEvent();appCtxService.registerCtx(_locationContext,{'ActiveWorkspace:Location':_context});let prefs=(await preferenceService.queryAll())||[];return populateContextProperties().then(contextProps=>{/**\n         * The property policy for this location. Extracted from the state data. The policy can be embedded\n         * directly as an object or it can be a string path to the json file. The policy is registered when the\n         * location is activated and unregistered when the location is removed.\n         */var propertyPolicy=AwStateService.instance.current.data.propertyPolicy;if(propertyPolicy){return propertyPolicyService.registerPolicyAsync(propertyPolicy).then(function(propertyPolicyId){return{pageContext:Object.assign(contextProps,{propertyPolicyId:propertyPolicyId,prefs,locationPanelStyle,overriddenHeaderTitle})};});}return Promise.resolve({pageContext:{...contextProps,prefs,locationPanelStyle,overriddenHeaderTitle}});});};export const cleanupPage=propertyPolicyId=>{appCtxService.unRegisterCtx(_locationContext);appCtxService.unRegisterCtx(_contextName);keyboardService.unRegisterKeyDownEvent();unregisterPropertyPolicy(propertyPolicyId);};export const updateContextProperties=(data,eventData)=>{let updatedContextProps={browserTitle:data.browserTitle,browserSubTitle:data.browserSubTitle,headerTitle:data.headerTitle};_contextProperties.forEach(function(prop){if(eventData.value[prop]){updatedContextProps[prop]=eventData.value[prop];}});return updatedContextProps;};export const getSublocationTabsAndApi=sublocationTabs=>{return{sublocationTabs:sublocationTabs.filter(tab=>tab.displayTab===true),tabCallbackApi:tabCallbackApi};};const tabCallbackApi=(pageId,tabTitle,sublocationTabs)=>{var tabToSelect;if(tabTitle){tabToSelect=sublocationTabs.filter(function(tab){return tab.name===tabTitle;})[0];}else{// Should only happen when api is called before tapTitle is loaded from i18n file\ntabToSelect=sublocationTabs.filter(function(tab){return tab.pageId===pageId;})[0];}if(tabToSelect){// When the tab widget is forced to update after the state has already changed it will still trigger callback\nif(tabToSelect.state!==AwStateService.instance.current.name){// Switch to the new state\nif(tabToSelect.params){AwStateService.instance.go(tabToSelect.state,tabToSelect.params);}else{AwStateService.instance.go(tabToSelect.state);}}}else{logger.error('Missing tab was selected: '+tabTitle);}};export const handleStateChange=sublocationTabs=>{const activeTab=sublocationTabs.filter(tab=>tab.selectedTab)[0];if(activeTab&&activeTab.state!==AwStateService.instance.current.name){return sublocationTabs.map(tab=>{if(tab.state===AwStateService.instance.current.name){tab.selectedTab=true;}else{tab.selectedTab=false;}return tab;});}return sublocationTabs;};exports={initializePage,cleanupPage,updateContextProperties,getSublocationTabsAndApi,handleStateChange};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/states\n */\nimport loadable from '@loadable/component';\nimport _ from 'lodash';\nimport { getResolvedActions } from 'js/stateResolveService';\nimport cfgSvc from 'js/configurationService';\nimport { loadDynModule, afxDynamicImport, includeComponent } from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nimport AwStateService from 'js/awStateService';\nlet routes = [];\n\nconst mapStatesToRoutes = states => _.forEach(states, (state, name) => routes.push(buildStates(state, name)));\n\nconst doLazyLoad = componentName => {\n  if (componentName === 'AwDefaultSublocation') {\n    // to use AwDefaultSublocation from states.json needs to pass subpanel context\n    return props => {\n      const stateData = AwStateService.instance.current.data; //Ui router sets the parent data in the prototype of child\n      //get the parent state data and pass it to the component\n\n      const parentData = Object.getPrototypeOf(stateData); //current state data should always take precedence over parent\n\n      return includeComponent(componentName, {\n        subPanelContext: { ...props.subPanelContext,\n          ...parentData,\n          ...stateData\n        }\n      });\n    };\n  }\n\n  return loadable(() => loadDynModule(`viewmodel/${componentName}ViewModel`));\n};\n\nconst buildStates = (state, name) => {\n  return { ...(state.url && {\n      url: state.url\n    }),\n    name: name,\n    ...(state.parent && {\n      parent: state.parent\n    }),\n    ...(state.params && {\n      params: state.params\n    }),\n    ...(state.data && {\n      data: state.data\n    }),\n    ...(state.visibleWhen && {\n      visibleWhen: state.visibleWhen\n    }),\n    resolve: getResolvedActions(state),\n    ...(state.noAuth && {\n      noAuth: state.noAuth\n    }),\n    ...(state.view && {\n      component: doLazyLoad(state.view)\n    }),\n    reloadOnSearch: state.hasOwnProperty('reloadOnSearch') ? state.reloadOnSearch : false,\n    dynamic: state.dynamic,\n    refresh: state.refresh,\n    notify: state.notify\n  };\n};\n\nexport const buildAndGetAllStates = contributionStates => {\n  var statesCfg = cfgSvc.getCfgCached('states');\n\n  var mergedRoutes = _.merge.apply(this, [statesCfg].concat(contributionStates)); // eslint-disable-line no-invalid-this\n  // Global parameters that apply to every route\n\n\n  var globalParameters = ['ah', // hosting enablement\n  'debugApp', // debug\n  'locale', // locale override\n  'logActionActivity', 'logEventBusActivity', 'logLevel', 'logLifeCycle']; // Parameters that should not be in the URL (runtime only)\n\n  var nonUrlParameters = ['validateDefaultRoutePath' // workspace validation\n  ];\n  /**\n   * Async load dependency for given state object.\n   *\n   * @param {Object} state - Object who's dependencies to load.\n   *\n   * @returns {Promise} Resolved when the dependencies are loaded.\n   */\n\n  function createLoad(state) {\n    return AwPromiseService.instance(resolve => {\n      return afxDynamicImport(state.dependencies, resolve);\n    });\n  }\n  /**\n   * Update given object with global parameters.\n   *\n   * @param {Object} state - Object to update.\n   */\n\n\n  function updateWithParameters(state) {\n    var params = globalParameters.slice(); // copy globalParameters\n\n    if (state.params) {\n      params = _.union(params, Object.keys(state.params));\n    }\n\n    if (state.parent) {\n      var parent = mergedRoutes[state.parent];\n\n      if (parent && parent.params) {\n        params = _.union(params, Object.keys(parent.params));\n      }\n    }\n\n    var urlParams = params.filter(function (p) {\n      return nonUrlParameters.indexOf(p) === -1;\n    });\n\n    if (urlParams.length > 0) {\n      var haveQueryParam = state.url.indexOf('?') !== -1;\n      state.url += (haveQueryParam ? '&' : '?') + urlParams.join('&');\n    }\n  }\n\n  _.forEach(mergedRoutes, function (route) {\n    // in angular dependencies was getting used for load the controller\n    // it's not needed\n    // if( route.dependencies ) {\n    // if( route.resolve ) {\n    //     route.resolve.push( {\n    //         token: 'load',\n    //         resolveFn: () => { createLoad( route ); }\n    //     } );\n    // } else {\n    //     route.resolve = [ {\n    //         token: 'load',\n    //         resolveFn: () => { createLoad( route ); }\n    //     } ];\n    // }\n    // }\n    if (route.url && !route.abstract) {\n      updateWithParameters(route);\n    }\n  });\n\n  mapStatesToRoutes(mergedRoutes);\n  return routes;\n};\nexport default {\n  buildAndGetAllStates\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/config/src/js/states.js"],"names":["routes","mapStatesToRoutes","states","_","buildStates","doLazyLoad","componentName","props","stateData","AwStateService","parentData","Object","includeComponent","subPanelContext","loadable","loadDynModule","state","url","name","parent","params","data","visibleWhen","resolve","getResolvedActions","noAuth","component","reloadOnSearch","dynamic","refresh","notify","buildAndGetAllStates","contributionStates","statesCfg","cfgSvc","mergedRoutes","globalParameters","nonUrlParameters","afxDynamicImport","urlParams","haveQueryParam","route","updateWithParameters"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/states\n */\nimport loadable from '@loadable/component';\nimport _ from 'lodash';\nimport { getResolvedActions } from 'js/stateResolveService';\nimport cfgSvc from 'js/configurationService';\nimport { loadDynModule, afxDynamicImport, includeComponent } from 'js/moduleLoader';\nimport AwPromiseService from 'js/awPromiseService';\nimport AwStateService from 'js/awStateService';\nlet routes = [];\n\nconst mapStatesToRoutes = ( states ) =>\n    _.forEach( states, ( state, name ) => routes.push( buildStates( state, name ) ) );\n\nconst doLazyLoad = componentName => {\n    if( componentName === 'AwDefaultSublocation' ) {\n        // to use AwDefaultSublocation from states.json needs to pass subpanel context\n        return ( props ) => {\n            const stateData = AwStateService.instance.current.data;\n            //Ui router sets the parent data in the prototype of child\n            //get the parent state data and pass it to the component\n            const parentData = Object.getPrototypeOf( stateData );\n            //current state data should always take precedence over parent\n            return includeComponent( componentName, { subPanelContext: { ...props.subPanelContext, ...parentData, ...stateData } } );\n        };\n    }\n    return loadable( () => loadDynModule( `viewmodel/${componentName}ViewModel` ) );\n};\n\nconst buildStates = ( state, name ) => {\n    return {\n        ...state.url && { url: state.url },\n        name: name,\n        ...state.parent && { parent: state.parent },\n        ...state.params && { params: state.params },\n        ...state.data && { data: state.data },\n        ...state.visibleWhen && { visibleWhen: state.visibleWhen },\n        resolve: getResolvedActions( state ),\n        ...state.noAuth && { noAuth: state.noAuth },\n        ...state.view && { component: doLazyLoad( state.view ) },\n        reloadOnSearch: state.hasOwnProperty( 'reloadOnSearch' ) ? state.reloadOnSearch : false,\n        dynamic: state.dynamic,\n        refresh: state.refresh,\n        notify: state.notify\n    };\n};\n\nexport const buildAndGetAllStates = ( contributionStates ) => {\n    var statesCfg = cfgSvc.getCfgCached( 'states' );\n    var mergedRoutes = _.merge.apply( this, [ statesCfg ].concat( contributionStates ) ); // eslint-disable-line no-invalid-this\n\n    // Global parameters that apply to every route\n    var globalParameters = [\n        'ah', // hosting enablement\n        'debugApp', // debug\n        'locale', // locale override\n        'logActionActivity',\n        'logEventBusActivity',\n        'logLevel',\n        'logLifeCycle'\n    ];\n\n    // Parameters that should not be in the URL (runtime only)\n    var nonUrlParameters = [\n        'validateDefaultRoutePath' // workspace validation\n    ];\n\n    /**\n     * Async load dependency for given state object.\n     *\n     * @param {Object} state - Object who's dependencies to load.\n     *\n     * @returns {Promise} Resolved when the dependencies are loaded.\n     */\n    function createLoad( state ) {\n        return AwPromiseService.instance( ( resolve ) => {\n            return afxDynamicImport( state.dependencies, resolve );\n        } );\n    }\n\n    /**\n     * Update given object with global parameters.\n     *\n     * @param {Object} state - Object to update.\n     */\n    function updateWithParameters( state ) {\n        var params = globalParameters.slice(); // copy globalParameters\n\n        if( state.params ) {\n            params = _.union( params, Object.keys( state.params ) );\n        }\n\n        if( state.parent ) {\n            var parent = mergedRoutes[ state.parent ];\n            if( parent && parent.params ) {\n                params = _.union( params, Object.keys( parent.params ) );\n            }\n        }\n\n        var urlParams = params.filter( function( p ) {\n            return nonUrlParameters.indexOf( p ) === -1;\n        } );\n\n        if( urlParams.length > 0 ) {\n            var haveQueryParam = state.url.indexOf( '?' ) !== -1;\n            state.url += ( haveQueryParam ? '&' : '?' ) + urlParams.join( '&' );\n        }\n    }\n\n    _.forEach( mergedRoutes, function( route ) {\n        // in angular dependencies was getting used for load the controller\n        // it's not needed\n\n        // if( route.dependencies ) {\n        // if( route.resolve ) {\n        //     route.resolve.push( {\n        //         token: 'load',\n        //         resolveFn: () => { createLoad( route ); }\n        //     } );\n        // } else {\n        //     route.resolve = [ {\n        //         token: 'load',\n        //         resolveFn: () => { createLoad( route ); }\n        //     } ];\n        // }\n        // }\n\n        if( route.url && !route.abstract ) {\n            updateWithParameters( route );\n        }\n    } );\n\n    mapStatesToRoutes( mergedRoutes );\n\n    return routes;\n};\nexport default {\n    buildAndGetAllStates\n};\n"]},"metadata":{},"sourceType":"module"}
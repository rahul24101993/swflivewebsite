{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwProgressIndicatorService.js\";\nimport eventBus from 'js/eventBus';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awProgressIndicatorRenderFunction = props => {\n  let showProgressBar = props.viewModel.data.progressIndicatorStatus;\n  let progressBarCss = showProgressBar ? 'aw-layout-progressBar' : 'aw-layout-progressBar hide';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aw-layout-progressBarContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: progressBarCss,\n      role: \"progressbar\",\n      \"aria-label\": props.i18n.LOADING_TEXT,\n      \"aria-busy\": showProgressBar,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-layout-progressBarCylon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\nexport const registerEvents = function (name, viewModel, progressIndicatorRef) {\n  progressIndicatorRef.current = {\n    count: 0,\n    progressIndicatorStatus: false\n  };\n  let subscriptions = subscribeToEvents(name, viewModel);\n  return {\n    subscriptions,\n    progressIndicatorRef\n  };\n};\n/**\n * Subscribe to custom Events\n * @param {Object} props object\n */\n\nconst subscribeToEvents = (name, data) => {\n  let startEventName = name ? name + '-progress.start' : 'progress.start';\n  let endEventName = name ? name + '-progress.end' : 'progress.end';\n  let subscriptions = [];\n  subscriptions.push(eventBus.subscribe(startEventName, () => {\n    startProgressIndicator(data);\n  }));\n  subscriptions.push(eventBus.subscribe(endEventName, () => {\n    stopProgressIndicator(data);\n  }));\n  return subscriptions;\n};\n\nconst animationTimer = 1000;\n\nconst startIndicator = _.debounce(viewModel => {\n  let data = viewModel.getData();\n  let progressIndicatorRef = data.progressIndicatorRef;\n  let count = progressIndicatorRef.current.count;\n\n  if (count > 0) {\n    viewModel.dispatch({\n      path: 'data.progressIndicatorStatus',\n      value: true\n    });\n  }\n}, animationTimer, false);\n/**\n * Start the progress Indicator\n * @param {Object} viewModel object\n */\n\n\nexport const startProgressIndicator = viewModel => {\n  let data = viewModel.getData();\n  let progressIndicatorRef = data.progressIndicatorRef;\n  let count = progressIndicatorRef.current.count;\n  count += 1;\n  progressIndicatorRef.current = {\n    count,\n    progressIndicatorStatus: true\n  };\n\n  if (!data.progressIndicatorStatus) {\n    startIndicator(viewModel);\n  }\n};\n/**\n * Stop the progress Indicator\n * @param {Object} viewModel objects\n */\n\nexport const stopProgressIndicator = viewModel => {\n  let data = viewModel.getData();\n  let progressIndicatorRef = data.progressIndicatorRef;\n  let count = progressIndicatorRef.current.count;\n  count -= 1;\n  progressIndicatorRef.current = {\n    count: count <= 0 ? 0 : count,\n    progressIndicatorStatus: false\n  };\n\n  if (count <= 0) {\n    viewModel.dispatch({\n      path: 'data.progressIndicatorStatus',\n      value: false\n    });\n  }\n};\nexport const destroyIndicatorSubscription = subscriptions => {\n  if (subscriptions && subscriptions.length > 0) {\n    subscriptions.forEach(subscription => {\n      eventBus.unsubscribe(subscription);\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwProgressIndicatorService.js"],"names":["awProgressIndicatorRenderFunction","props","showProgressBar","progressBarCss","registerEvents","progressIndicatorRef","count","progressIndicatorStatus","subscriptions","subscribeToEvents","startEventName","name","endEventName","startProgressIndicator","stopProgressIndicator","animationTimer","startIndicator","viewModel","data","path","value","destroyIndicatorSubscription","subscription","eventBus"],"mappings":"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","sourcesContent":["import eventBus from 'js/eventBus';\nimport _ from 'lodash';\n\nexport const awProgressIndicatorRenderFunction = ( props ) => {\n    let showProgressBar = props.viewModel.data.progressIndicatorStatus;\n    let progressBarCss = showProgressBar ? 'aw-layout-progressBar' : 'aw-layout-progressBar hide';\n    return (\n        <div className='aw-layout-progressBarContainer' >\n            <div className={progressBarCss} role='progressbar' aria-label={props.i18n.LOADING_TEXT} aria-busy={showProgressBar} >\n                <div className='aw-layout-progressBarCylon'></div>\n            </div>\n        </div>\n    );\n};\n\nexport const registerEvents = function( name, viewModel, progressIndicatorRef ) {\n    progressIndicatorRef.current = {\n        count: 0,\n        progressIndicatorStatus: false\n    };\n    let subscriptions = subscribeToEvents( name, viewModel );\n    return {\n        subscriptions,\n        progressIndicatorRef\n    };\n};\n\n/**\n * Subscribe to custom Events\n * @param {Object} props object\n */\nconst subscribeToEvents = ( name, data ) => {\n    let startEventName = name ? name + '-progress.start' : 'progress.start';\n    let endEventName = name ? name + '-progress.end' : 'progress.end';\n    let subscriptions = [];\n    subscriptions.push( eventBus.subscribe( startEventName, () => {\n        startProgressIndicator( data );\n    } ) );\n\n    subscriptions.push( eventBus.subscribe( endEventName, () => {\n        stopProgressIndicator( data );\n    } ) );\n    return subscriptions;\n};\n\nconst animationTimer = 1000;\nconst startIndicator = _.debounce( ( viewModel ) => {\n    let data = viewModel.getData();\n    let progressIndicatorRef = data.progressIndicatorRef;\n    let count = progressIndicatorRef.current.count;\n    if( count > 0 ) {\n        viewModel.dispatch( { path: 'data.progressIndicatorStatus', value: true } );\n    }\n}, animationTimer, false );\n\n/**\n * Start the progress Indicator\n * @param {Object} viewModel object\n */\nexport const startProgressIndicator = ( viewModel ) => {\n    let data = viewModel.getData();\n    let progressIndicatorRef = data.progressIndicatorRef;\n    let count = progressIndicatorRef.current.count;\n    count += 1;\n    progressIndicatorRef.current = {\n        count,\n        progressIndicatorStatus: true\n    };\n    if( !data.progressIndicatorStatus ) {\n        startIndicator( viewModel );\n    }\n};\n\n/**\n * Stop the progress Indicator\n * @param {Object} viewModel objects\n */\nexport const stopProgressIndicator = ( viewModel ) => {\n    let data = viewModel.getData();\n    let progressIndicatorRef = data.progressIndicatorRef;\n    let count = progressIndicatorRef.current.count;\n    count -= 1;\n    progressIndicatorRef.current = {\n        count: count <= 0 ? 0 : count,\n        progressIndicatorStatus: false\n    };\n    if( count <= 0 ) {\n        viewModel.dispatch( { path: 'data.progressIndicatorStatus', value: false } );\n    }\n};\n\nexport const destroyIndicatorSubscription = ( subscriptions ) => {\n    if( subscriptions && subscriptions.length > 0 ) {\n        subscriptions.forEach( subscription => {\n            eventBus.unsubscribe( subscription );\n        } );\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
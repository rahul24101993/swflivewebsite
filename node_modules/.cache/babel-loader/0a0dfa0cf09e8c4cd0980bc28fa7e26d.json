{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides DeclViewModel processing functionalities.\n *\n * @module js/viewModelProcessingFactory\n *\n * @namespace viewModelProcessingFactory\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport modelPropertySvc from 'js/modelPropertyService';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport sanitizer from 'js/sanitizer';\nimport declModelRegistrySvc from 'js/declModelRegistryService';\nimport editUtilsService from 'js/editUtilsService';\nimport messagingService from 'js/messagingService';\nimport mockModeService from 'js/mockModeService';\nimport AwInterpolateService from 'js/awInterpolateService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport parsingUtils from 'js/parsingUtils';\nimport declUtils from 'js/declUtils';\nimport logger from 'js/logger';\nimport Debug from 'debug';\nimport debugService from 'js/debugService';\nimport editHandlerService from 'js/editHandlerService';\nimport cfgSvc from 'js/configurationService';\nimport commandsSvc from 'js/command.service';\nimport { loadDynModule } from 'js/moduleLoader';\n/** revisitme\n  * Hint: editHandlerFactory not ported yet\n import editHandlerFactory from 'js/editHandlerFactory';\n */\n\n/** revisitme Shaishav\n  * Hint: Condition service is not used anywhere. Remove this\n import 'js/conditionService';\n */\n\nvar tokenTrace = new Debug('viewModel:token');\n/**\n  * Cached reference to AngularJS & AW services\n  */\n\n/** List of attributes would be considered for sanitization */\n\nvar propertiesToSanitize = {\n  dbValue: true,\n  dbValues: true,\n  displayValues: true,\n  error: true,\n  propertyDisplayName: true,\n  propertyName: true,\n  propertyRadioFalseText: true,\n  propertyRadioText: true,\n  uiValue: true,\n  uiValues: true,\n  value: true\n};\nvar _compoundPropNameDelimiter = '__';\nvar _compoundPropValueDelimiter = ':';\n/**\n  * Perform the given 'action'.\n  *\n  * @param {Object} jsonData - Object loaded from the DeclViewModel JSON file\n  * @param {Object} jsonDataProvider - A specific dataProvider's definition within 'jsonData'.\n  * @param {String} dpName - The name of the 'declDataProvider' where the action is defined.\n  * @param {String} actionName - The name of the action to look for in the 'jsonData'\n  * @param {StringMap} actionMap - Map of action name to the action object from a declViewModel's JSON definition\n  *            to be updated by this function.\n  */\n\nfunction _processAction(jsonData, jsonDataProvider, dpName, actionName, actionMap) {\n  var actionRef = jsonDataProvider[actionName];\n\n  if (actionRef) {\n    if (jsonData.actions) {\n      actionMap[actionName] = jsonData.actions[actionRef];\n    }\n\n    if (!actionMap[actionName]) {\n      logger.error('DataProvider ' + dpName + ' references a missing action: ' + actionName + '...continuing');\n    }\n  }\n} // _processAction\n\n/**\n  * Define the base object used to provide all of this module's external API on.\n  *\n  * @private\n  */\n\n\nvar exports = {};\n/**\n  * Evaluate dataProviders from JSON, load any dependencies and set on the given 'declViewModel'.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {DeclViewModel} declViewModel - The 'DeclViewModel' to populate with the dataProvider properties of\n  *            the given JSON object.\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise is resolved with the given 'declViewModel' once any data provider dependencies\n  *         are all resolved.\n  */\n\nvar _populateDataProviders = function (declViewModelJson, declViewModel, subPanelContext) {\n  var jsonData = declViewModelJson;\n  var promises = [];\n  const dataProviderActions = ['action', 'initializeAction', 'nextAction', 'previousAction', 'focusAction', 'expandAction', 'validateAction', 'filterFacetAction', 'preferredChoicesAction'];\n\n  if (jsonData.dataProviders && !_.isEmpty(jsonData.dataProviders)) {\n    if (!declViewModel.dataProviders) {\n      declViewModel.dataProviders = {};\n    }\n\n    let dataProvidersClone = _.cloneDeep(jsonData.dataProviders);\n\n    let mockedDataProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.dataProviders;\n    exports.initViewModel(dataProvidersClone, subPanelContext); // Short term fix to support editSupportParamKeys on subPanelContext.provider\n    // Long term approach is to have this information directly on subPanelContext\n    // This will be cleaned up with the tech debt story for cleanup of AwStandardPrimaryWorkarea\n\n    let editSupportParamKeys;\n\n    if (subPanelContext) {\n      if (subPanelContext.editSupportParamKeys) {\n        editSupportParamKeys = subPanelContext.editSupportParamKeys;\n      } else if (subPanelContext.provider && subPanelContext.provider.editSupportParamKeys) {\n        editSupportParamKeys = subPanelContext.provider.editSupportParamKeys;\n      } else {\n        editSupportParamKeys = subPanelContext.selectionQueryParamKey && [subPanelContext.selectionQueryParamKey];\n      }\n    }\n\n    let index = 0;\n\n    _.forEach(dataProvidersClone, (jsonDataProvider, dpName) => {\n      let resolvedLOVConfig = jsonDataProvider.lovConfiguration; // TcLOV is a data-provider property.\n      // If we declare any data-provider as TCLOV it would start using the standard SOA calls available for teamcenter\n      // to populate and validate LOV i.e getInitialLOVVAlue, getNextLOVValue and ValidateLOV.\n      // It can be used with any data-provider which is used with widgets like i.e aw-link-with-popup, aw-widget.\n      // User has option to supply its own parameters (VMO and ViewModel Prop) through \"lovConfiguration\" setting defined in the LOV dataprovider.\n      // Imp: If the dataprovider has action defined then data-provider type \"tcLOV\" setting is ignored.\n\n      let isTcLOV = !(jsonDataProvider.action || jsonDataProvider.initializeAction) && jsonDataProvider.dataProviderType === 'TcLOV';\n\n      if (isTcLOV) {\n        const lovDataProviderJSON = _.cloneDeep(cfgSvc.getCfgCached('lovDataProvider'));\n\n        _.forEach(dataProviderActions, actionName => {\n          const actName = lovDataProviderJSON.dataProviders.tcDataprovider[actionName];\n\n          if (actName) {\n            // A new action Name, which shouldn't conflict with exiting action name.\n            let newActionName = actName + '_tcLOV_' + index;\n            jsonDataProvider[actionName] = newActionName;\n            jsonData.actions[newActionName] = lovDataProviderJSON.actions[actName];\n            jsonData.actions[newActionName].inputData.dataProviderName = dpName;\n          }\n        });\n\n        jsonDataProvider.response = lovDataProviderJSON.dataProviders.tcDataprovider.response;\n        jsonDataProvider.moreValuesExist = lovDataProviderJSON.dataProviders.tcDataprovider.moreValuesExist; // Reverting back the lovConfiguration to the pristine state, as it would be evaluated multiple times\n        // in declDataProviderService. If we store the evaluated lovConfiguration further evaluations becomes\n        // very costly and might run into a infinite loop.\n\n        jsonDataProvider.lovConfiguration = _.cloneDeep(declViewModelJson.dataProviders[dpName].lovConfiguration);\n      }\n\n      index++;\n      var actionMap = {};\n\n      if (mockedDataProvider && mockedDataProvider[dpName]) {\n        jsonDataProvider = mockedDataProvider[dpName];\n      }\n\n      _.forEach(dataProviderActions, actionName => {\n        _processAction(jsonData, jsonDataProvider, dpName, actionName, actionMap);\n      });\n      /**\n        * Create the DeclDataProvider based on the JSON data.\n        */\n\n\n      declViewModel.dataProviders[dpName] = dataProviderFactory.createDataProvider(jsonDataProvider, actionMap.action, dpName, declDataProviderSvc, actionMap);\n      declViewModel.dataProviders[dpName].origJson = jsonData.dataProviders[dpName];\n      declViewModel.dataProviders[dpName].inputDataExpressions = getInputDataExpression(jsonData.dataProviders[dpName].inputData);\n\n      if (isTcLOV) {\n        declViewModel.dataProviders[dpName].resolvedLovConfig = resolvedLOVConfig;\n      }\n\n      if (jsonDataProvider.uidInResponse) {\n        declViewModel.dataProviders[dpName].uidInResponse = jsonDataProvider.uidInResponse;\n      }\n\n      if (!declUtils.isNil(jsonDataProvider.preSelection)) {\n        declViewModel.dataProviders[dpName].preSelection = jsonDataProvider.preSelection;\n      } else {\n        declViewModel.dataProviders[dpName].preSelection = true;\n      }\n\n      if (declViewModel.objectSetSource && declViewModel.objectSetSource[dpName]) {\n        declViewModel.dataProviders[dpName].setValidSourceTypes(declViewModel.objectSetSource[dpName]);\n      }\n\n      if (editSupportParamKeys) {\n        if (!jsonDataProvider.inputData) {\n          jsonDataProvider.inputData = {};\n        }\n\n        if (!jsonDataProvider.inputData.editSupportParamKeys) {\n          jsonDataProvider.inputData.editSupportParamKeys = editSupportParamKeys;\n          declViewModel.dataProviders[dpName].editSupportParamKeys = editSupportParamKeys;\n        }\n      }\n      /**\n        * Process cell commands\n        */\n\n\n      if (jsonDataProvider.commands) {\n        declViewModel.dataProviders[dpName].commands = [];\n\n        _.forEach(jsonDataProvider.commands, function (command, cmdId) {\n          if (jsonDataProvider.commandsAnchor) {\n            logger.error('Commands in dataProviders are not supported when using commandsAnchor.' + '\\n' + 'cmdId=' + cmdId + '\\n' + 'commandsAnchor=' + jsonDataProvider.commandsAnchor);\n          } else {\n            if (command.dependencies && command.dependencies.length > 0) {\n              var cmdOverlay;\n              var promise = loadDynModule(command.dependencies).then(function (handlers) {\n                cmdOverlay = {\n                  position: command.position,\n                  displayOption: command.displayOption,\n                  handler: handlers,\n                  condition: command.condition\n                };\n                declViewModel.dataProviders[dpName].commands.push(cmdOverlay);\n                return commandsSvc.getCommand(cmdId);\n              }).then(function (commandOverlay) {\n                /**\n                  * Update the icon and title once the command overlay is\n                  * returned\n                  */\n                if (commandOverlay) {\n                  cmdOverlay.iconId = commandOverlay.iconId || command.id;\n                  cmdOverlay.title = commandOverlay.title || command.title;\n                }\n\n                return cmdOverlay; // Include return to assure async\n              });\n              promises.push(promise);\n            } else if (command.action) {\n              command.iconId = command.id;\n              declViewModel.dataProviders[dpName].commands.push(command);\n            }\n          }\n        });\n      }\n\n      if (jsonDataProvider.editContext) {\n        declViewModel.dataProviders[dpName].editContext = jsonDataProvider.editContext;\n      }\n    });\n  } // return AwPromiseService.instance.all( promises ).then( function() {\n\n\n  return declViewModel; // } );\n};\n\nvar sharedViewModelToken = 0;\n/**\n  * Token for tracking execution within the view model\n  */\n\nvar DeclViewModelToken = function () {\n  var activeActionCount = 0;\n\n  this.addAction = function (action) {\n    tokenTrace('Action started', action);\n    activeActionCount++;\n    sharedViewModelToken++;\n  };\n\n  this.removeAction = function (action) {\n    tokenTrace('Action completed', action);\n    activeActionCount--;\n    sharedViewModelToken = sharedViewModelToken <= 1 ? 0 : sharedViewModelToken - 1;\n  };\n\n  this.isActive = function () {\n    return activeActionCount !== 0;\n  };\n};\n/**\n  * Creates a new instance of this class.\n  *\n  * @class DeclViewModel\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  */\n\n\n_c3 = DeclViewModelToken;\n_c = DeclViewModelToken;\n\nvar DeclViewModel = function (declViewModelJson) {\n  var vmSelf = this; // eslint-disable-line consistent-this\n\n  /**\n    * This object is used to hold properties and states that are not intended to be exposed to the\n    * 'dataCtxTree'.\n    */\n\n  vmSelf._internal = {\n    /**\n      * Token for tracking execution within the view model\n      */\n    token: new DeclViewModelToken(),\n\n    /**\n      * {Number} An increasing number assigned to this declViewModel when created and use to identify it\n      * (only for debug purposes).\n      */\n    modelId: -1,\n\n    /**\n      * {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n      */\n    panelId: 'undefined',\n\n    /**\n      * {String} The unique Id to identify the view\n      */\n    viewId: 'undefined',\n\n    /**\n      * {Boolean} TRUE if 'destroy' has been invoked on this instance.\n      */\n    isDestroyed: false,\n\n    /**\n      * {EventSubscriptionArray} Array of 'eventSubscriptions' currently registerd against this\n      * 'declViewModel'.\n      */\n    eventSubscriptions: [],\n\n    /**\n      * {SubPanelId2EventSubscriptionsMap} a map of <subPanelId,EventSubscriptions>.\n      */\n    subPanelId2EventSubscriptionsMap: {},\n\n    /**\n      * {DeclViewModelJson} The object returned from loading the JSON resource for this 'declViewModel'.\n      */\n    origDeclViewModelJson: null,\n\n    /**\n      * {Object} A map of a 'conditionName' property to its current true/false state.\n      */\n    conditionStates: {},\n\n    /**\n      * {Object} A map of a 'conditionExpressions' property to its current vaule.\n      */\n    conditionExpressions: {},\n\n    /**\n      * Ref to: conditions\n      */\n    conditions: null,\n\n    /**\n      * Ref to: jasonData.actions\n      */\n    actions: null,\n\n    /**\n      * Ref to: jasonData.dataParseDefinitions\n      */\n    dataParseDefinitions: null,\n\n    /**\n      * Ref to: jasonData.functions\n      */\n    functions: null,\n\n    /**\n      * Ref to: jasonData.messages\n      */\n    messages: null,\n\n    /**\n      * Ref to: jasonData.onEvent\n      */\n    onEvent: null,\n\n    /**\n      * Ref to: jasonData.onEvent\n      */\n    grids: null,\n\n    /**\n      * Ref to: jasonData.onEvent\n      */\n    chartProviders: null,\n\n    /**\n      * {StringArray} The array of sub-panel IDs that have been 'merged' into this 'target' 'declViewModel'.\n      */\n    subPanels: null,\n\n    /**\n      * {ObjectArray} An array of data objects that specify the propertyValue/propertyPath of all non-action\n      * properties in the original declViewModel JSON definition that are 'data bound' to any changes in the\n      * appContext state (e.g. propValue = {{ctx.selected}}, etc.).\n      */\n    declViewModelJsonBoundProps: null,\n\n    /**\n      * {ObjectMap} Map of appContext changes that have been collected since this declViewModel was created\n      * or after the last 'update debound' was processed.\n      */\n    pendingContextChanges: null,\n\n    /**\n      * edit configuration map. This holds the configuration for start/cancel/save edit actions\n      */\n    editConfig: null,\n\n    /**\n      * ports for sync strategy\n      */\n    ports: null,\n\n    /**\n      * Edit handlers\n      */\n    editHandlers: null,\n\n    /**\n      * This function will be called then the 'dataCtxNode' ( aka '$scope' ) this 'declViewModel'\n      * is placed on is destroyed.\n      *\n      * @param {Boolean} destroyDataProviders - TRUE if all associated dataProviders should have their 'destroy' method called.\n      */\n    destroy: function (destroyDataProviders) {\n      vmSelf._internal.isDestroyed = true; // Any active actions or messages are going to be cut off, force clear out token\n\n      while (vmSelf._internal.token.isActive()) {\n        vmSelf._internal.token.removeAction(null);\n      }\n\n      declModelRegistrySvc.unregisterModel('DeclViewModel', vmSelf, '_internal.panelId', '_internal.modelId');\n\n      _.forEach(this.eventSubscriptions, function (subDef) {\n        eventBus.unsubscribe(subDef);\n      });\n\n      _.forEach(this.subPanelId2EventSubscriptionsMap, function (subDefs) {\n        _.forEach(subDefs, function (subDef) {\n          eventBus.unsubscribe(subDef);\n        });\n      });\n\n      this.eventSubscriptions = [];\n      this.subPanelId2EventSubscriptionsMap = {};\n      /**\n        * Stop debounce for ctx change events.\n        */\n\n      if (vmSelf._internal.pingUpdateViewModel && vmSelf._internal.pingUpdateViewModel.cancel) {\n        vmSelf._internal.pingUpdateViewModel.cancel();\n\n        vmSelf._internal.pingUpdateViewModel = null;\n      }\n      /**\n        * Clean up all dataProviders\n        */\n\n\n      if (destroyDataProviders) {\n        _.forEach(vmSelf.dataProviders, function (uwDataProvider, dpName) {\n          uwDataProvider.destroy();\n          vmSelf.dataProviders[dpName] = null;\n        });\n\n        _.forEach(vmSelf.grids, function (currentGrid) {\n          if (currentGrid.columnProviderInstance) {\n            currentGrid.columnProviderInstance.destroy();\n            currentGrid.columnProviderInstance = null;\n          }\n        });\n      }\n      /**\n        * Clean up all subPanels\n        */\n\n\n      _.forEach(vmSelf._internal.subPanels, function (subPanel) {\n        declModelRegistrySvc.unregisterModel('SubPanel', subPanel, 'panelId', 'id');\n      });\n\n      vmSelf._internal.subPanels = null;\n      vmSelf._internal.declViewModelJsonBoundProps = null;\n      vmSelf._internal.pendingContextChanges = null;\n      /**\n        * Clean up edit config\n        */\n\n      if (vmSelf._internal.editConfig) {\n        editUtilsService._removeListeners(vmSelf._internal.editConfig.sourceModel);\n      }\n\n      vmSelf._internal.editConfig = null;\n      /**\n        * Clean up edit handler\n        */\n\n      if (vmSelf._internal.editContext) {\n        editHandlerService.removeEditHandler(vmSelf._internal.editContext);\n      }\n      /**\n        * Clean up references to external resources\n        */\n\n\n      vmSelf._internal.origCtxNode = null;\n      vmSelf.vmo = null;\n      vmSelf.objects = null;\n    },\n\n    /**\n      * Based on the value of the 'skipClone' property of the given JSON object, clone a copy of the given\n      * JSON object (if necessary) and save it in a local property.\n      *\n      * @param {DeclViewModelJson} declViewModelJsonIn - The object returned from loading the JSON resource for\n      *            this 'declViewModel'.\n      */\n    setViewModelJson: function (declViewModelJsonIn) {\n      vmSelf._internal.origDeclViewModelJson = declViewModelJsonIn;\n\n      if (declViewModelJsonIn._viewModelId) {\n        vmSelf._internal.panelId = declViewModelJsonIn._viewModelId;\n      } else {\n        /**\n          * revisitme\n          * logger.error( 'setViewModelJson: No panelId given' );\n          */\n      }\n\n      if (declViewModelJsonIn._uniqueViewModelId) {\n        vmSelf._internal.viewId = declViewModelJsonIn._uniqueViewModelId;\n      }\n    },\n\n    /**\n      * Set all the properties in this object to all the valid corresponding properties in the given\n      * 'jsonData' object.\n      *\n      * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n      *            JSON resource for this 'declViewModel'.\n      */\n    setJsonData: function (jsonData) {\n      if (jsonData.actions) {\n        /**\n          * Note: For debug purposes ONLY...Include the name of the action in the action object as the\n          * 'actionId' property.\n          */\n        _.forEach(jsonData.actions, function (value, name) {\n          value.actionId = name;\n        });\n\n        vmSelf._internal.actions = jsonData.actions;\n      }\n\n      if (jsonData.conditions) {\n        vmSelf._internal.conditions = jsonData.conditions;\n      }\n\n      if (jsonData.ports) {\n        vmSelf._internal.ports = jsonData.ports;\n      }\n\n      if (jsonData.dataParseDefinitions) {\n        vmSelf._internal.dataParseDefinitions = jsonData.dataParseDefinitions;\n      }\n\n      if (jsonData.functions) {\n        vmSelf._internal.functions = jsonData.functions;\n      }\n\n      if (jsonData.messages) {\n        vmSelf._internal.messages = jsonData.messages;\n      }\n\n      if (jsonData.onEvent) {\n        vmSelf._internal.onEvent = jsonData.onEvent;\n      }\n\n      if (jsonData.grids) {\n        vmSelf._internal.grids = jsonData.grids;\n      }\n\n      if (jsonData.chartProviders) {\n        vmSelf._internal.chartProviders = jsonData.chartProviders;\n      }\n\n      if (jsonData.editConfig) {\n        vmSelf._internal.editConfig = jsonData.editConfig;\n      }\n\n      if (jsonData.lifecycleHooks) {\n        vmSelf._internal.lifecycleHooks = jsonData.lifecycleHooks;\n      }\n\n      if (jsonData.editContext) {\n        vmSelf._internal.editContext = jsonData.editContext;\n      }\n\n      if (jsonData.selectionModels) {\n        vmSelf._internal.selectionModels = jsonData.selectionModels;\n      }\n\n      if (jsonData.editHandlers) {\n        vmSelf._internal.editHandlers = jsonData.editHandlers;\n      }\n    },\n\n    /**\n      * Consolidate (i.e. merge) all the properties in this object to all the valid corresponding properties\n      * in the given 'jsonData' object.\n      *\n      * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n      *            JSON resource for this 'declViewModel'.\n      */\n    consolidateJsonData: function (jsonData) {\n      vmSelf._internal.actions = declUtils.consolidateObjects(vmSelf._internal.actions, jsonData.actions);\n      vmSelf._internal.dataParseDefinitions = declUtils.consolidateObjects(vmSelf._internal.dataParseDefinitions, jsonData.dataParseDefinitions);\n      vmSelf._internal.conditions = declUtils.consolidateObjects(vmSelf._internal.conditions, jsonData.conditions);\n      vmSelf._internal.functions = declUtils.consolidateObjects(vmSelf._internal.functions, jsonData.functions);\n      vmSelf._internal.messages = declUtils.consolidateObjects(vmSelf._internal.messages, jsonData.messages);\n      vmSelf._internal.onEvent = declUtils.consolidateObjects(vmSelf._internal.onEvent, jsonData.onEvent);\n      vmSelf._internal.grids = declUtils.consolidateObjects(vmSelf._internal.grids, jsonData.grids);\n      vmSelf._internal.chartProviders = declUtils.consolidateObjects(vmSelf._internal.chartProviders, jsonData.chartProviders);\n      vmSelf._internal.editConfig = declUtils.consolidateObjects(vmSelf._internal.editConfig, jsonData.editConfig);\n\n      if (jsonData.ports) {\n        vmSelf._internal.ports = declUtils.consolidateObjects(vmSelf._internal.ports, jsonData.ports);\n      }\n\n      vmSelf._internal.lifecycleHooks = declUtils.consolidateObjects(vmSelf._internal.lifecycleHooks, jsonData.lifecycleHooks);\n\n      if (jsonData.selectionModels) {\n        vmSelf._internal.selectionModels = declUtils.consolidateObjects(vmSelf._internal.selectionModels, jsonData.selectionModels);\n      }\n    }\n  };\n  /**\n    * ----------------------------------------------------<br>\n    * Define public API <BR>\n    * ----------------------------------------------------<br>\n    */\n\n  /**\n    * Override the default implementation to return more helpful information.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {String} Text used to identify the ID of the DeclViewModel (e.g. 'modelId' + an optional 'url').\n    */\n\n  vmSelf.toString = function () {\n    if (vmSelf.getPanelId()) {\n      return vmSelf._internal.modelId + '  modelName: ' + vmSelf.getPanelId();\n    }\n\n    return vmSelf._internal.modelId + '  modelName: ' + '???';\n  };\n  /**\n    * Get the tracking token for the view model\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {DeclViewModelToken} token\n    */\n\n\n  vmSelf.getToken = function () {\n    return vmSelf._internal.token;\n  };\n  /**\n    * Get ID/Name of this declViewModel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n    */\n\n\n  vmSelf.getPanelId = function () {\n    return vmSelf._internal.panelId;\n  };\n  /**\n    * Get ID of this declViewModel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {String} The ID used for unique with aw-include\n    */\n\n\n  vmSelf.getViewId = function () {\n    return vmSelf._internal.viewId;\n  };\n  /**\n    * Get DeclAction with the given ID.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} actionId - The ID of the DeclAction to return.\n    * @return {DeclAction} The DeclAction with the given ID (or FALSEY if not found);\n    */\n\n\n  vmSelf.getAction = function (actionId) {\n    return vmSelf._internal.actions[actionId];\n  };\n  /**\n    * Get port's obj with the given name.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} portName - The name of the port.\n    * @return {Object} The port's sync object and action.\n    */\n\n\n  vmSelf.getPortById = function (portName) {\n    return vmSelf._internal.ports[portName];\n  };\n  /**\n    * Get the DataParseDefinition in the DeclViewModel\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @param {String} id - The ID of the DataParseDefinition to return.\n    * @return {Object} The dataParseDefinition\n    */\n\n\n  vmSelf.getDataParseDefinition = function (id) {\n    return vmSelf._internal.dataParseDefinitions[id];\n  };\n  /**\n    * Get the functions in the DeclViewModel\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} The functions\n    */\n\n\n  vmSelf.getFunctions = function () {\n    return vmSelf._internal.functions;\n  };\n  /**\n    * Get array of any subPanels defined.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {ObjectArray} The array of sub-panel that have been 'merged' into this 'target' 'declViewModel'\n    *         (or NULL if no panels have been added).\n    */\n\n\n  vmSelf.getSubPanels = function () {\n    return vmSelf._internal.subPanels;\n  };\n  /**\n    * Get sub panel of the given panel ID\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel\n    * @return {Object} The sub-panel state object\n    */\n\n\n  vmSelf.getSubPanel = function (subPanelId) {\n    return _.find(vmSelf._internal.subPanels, {\n      panelId: subPanelId\n    });\n  };\n  /**\n    * Gets the edit configuration object\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @return {Object} The edit configuration object\n    */\n\n\n  vmSelf.getEditConfiguration = function () {\n    return vmSelf._internal.editConfig;\n  };\n  /**\n    * Get lifecycle hooks\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} The lifecycle hooks\n    */\n\n\n  vmSelf.getLifecycleHooks = function () {\n    return vmSelf._internal.lifecycleHooks;\n  };\n  /**\n    * Get selection models\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} The selection models\n    */\n\n\n  vmSelf.getSelectionModels = function () {\n    return vmSelf._internal.selectionModels;\n  };\n  /**\n    * Add a sub-panel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel that has been 'merged' into this 'target'\n    *            'declViewModel'.\n    */\n\n\n  vmSelf.addSubPanel = function (subPanelId) {\n    if (!vmSelf._internal.subPanels) {\n      vmSelf._internal.subPanels = [];\n    } // remove the old panel with the input ID if exist\n\n\n    if (vmSelf.getSubPanel(subPanelId)) {\n      vmSelf.removeSubPanel(subPanelId);\n    }\n\n    var subPanel = {\n      panelId: subPanelId,\n      contextChanged: false\n    };\n\n    if (logger.isDeclarativeLogEnabled()) {\n      logger.declarativeLog('DECLARATIVE TRACE - Add Subpanel ' + subPanelId);\n    }\n\n    declModelRegistrySvc.registerModel('SubPanel', subPanel, 'panelId', 'id');\n\n    vmSelf._internal.subPanels.push(subPanel);\n  };\n  /**\n    * Remove specified sub panel\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel\n    */\n\n\n  vmSelf.removeSubPanel = function (subPanelId) {\n    if (logger.isDeclarativeLogEnabled()) {\n      logger.declarativeLog('DECLARATIVE TRACE - Remove Subpanel ' + subPanelId);\n    } // un-subscribe events for the sub-panel\n\n\n    var subscriptions = vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];\n\n    _.forEach(subscriptions, function (subDef) {\n      eventBus.unsubscribe(subDef);\n    });\n\n    delete vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];\n\n    _.remove(vmSelf._internal.subPanels, function (subPanel) {\n      if (subPanel.panelId === subPanelId) {\n        declModelRegistrySvc.unregisterModel('SubPanel', subPanel, 'panelId', 'id');\n        return true;\n      }\n\n      return false;\n    });\n  };\n  /**\n    * Add the given event subscription to the collection of event subscriptions for a given subPanel ID.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel\n    * @param {Object} subDef - The event subscription to add\n    */\n\n\n  vmSelf.addSubPanelEventSubscription = function (subPanelId, subDef) {\n    var subDefs = vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];\n\n    if (!subDefs) {\n      subDefs = [];\n      vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId] = subDefs;\n    }\n\n    subDefs.push(subDef);\n  };\n  /**\n    * ----------------------------------------------------<br>\n    * ----------------------------------------------------<br>\n    */\n\n  /**\n    * Get current condition states map.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} A map of a 'conditionName' property to its current true/false state.\n    */\n\n\n  vmSelf.getConditionStates = function () {\n    if (vmSelf._internal.conditionStates) {\n      return vmSelf._internal.conditionStates;\n    }\n\n    return {};\n  };\n  /**\n    * This method subscribes CDM update/modify event in declViewModelObject and also register corresponding\n    * handler to that.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    */\n\n\n  vmSelf.attachEvents = function () {\n    var handler = function (data) {\n      var objs = data.updatedObjects;\n\n      if (!objs) {\n        objs = data.modifiedObjects;\n      }\n\n      var operationName = null;\n\n      if (vmSelf && vmSelf.vmo) {\n        operationName = vmSelf.vmo.operationName;\n      }\n\n      _.forEach(objs, function (object) {\n        if (object && vmSelf.objects) {\n          const newVmo = viewModelObjectSrv.createViewModelObject(object.uid, operationName);\n          viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(newVmo, vmSelf.objects);\n        }\n      });\n    };\n\n    var cdmUpdateEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.updated'];\n\n    if (!cdmUpdateEventDef) {\n      vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.updated'] = [eventBus.subscribe('cdm.updated', handler)];\n    }\n\n    var cdmModifiedEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.modified'];\n\n    if (!cdmModifiedEventDef) {\n      vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.modified'] = [eventBus.subscribe('cdm.modified', handler)];\n    }\n  };\n  /**\n    * Attach a model object to this DeclViewModel. All the properties of the model object will be consolidated\n    * to DeclViewModel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} uid - The UID of model object to attach\n    * @param {String} operationName - The operation being performed on model object\n    * @param {String} owningObjUid - The UID of owning object\n    * @param {Object} serverVMO - The VMO which was returned from the server.\n    *\n    * @returns {ViewModelObject} The object created to wrap the IModelObject specified by the given model information.\n    */\n\n\n  vmSelf.attachModelObject = function (uid, operationName, owningObjUid, serverVMO) {\n    if (uid) {\n      // Build the vmo.\n      var vmo = viewModelObjectSrv.createViewModelObject(uid, operationName, owningObjUid, serverVMO);\n\n      if (vmo) {\n        vmo.operationName = operationName;\n        vmSelf.attachEvents(); // Update the underlying object properties.\n\n        if (vmo.type === 'Awp0XRTObjectSetRow') {\n          // Get underlying target object's UID if 'awp0Target' property exists\n          if (vmo.props && vmo.props.awp0Target) {\n            var targetUID = vmo.props.awp0Target.dbValue;\n            var targetMO = clientDataModel.getObject(targetUID);\n\n            if (targetMO) {\n              var targetVMO = viewModelObjectSrv.constructViewModelObjectFromModelObject(targetMO, operationName, null, null, true);\n              var props = targetVMO.props;\n\n              _.forEach(props, function (prop) {\n                if (prop && !vmo.props.hasOwnProperty(prop.propertyName)) {\n                  if (prop.intermediateObjectUids) {\n                    prop.intermediateObjectUids.push(targetUID);\n                  } else {\n                    prop.intermediateObjectUids = [targetUID];\n                  }\n\n                  vmo.props[prop.propertyName] = prop;\n                }\n              });\n            }\n          }\n        }\n      }\n\n      return vmo;\n    }\n\n    return undefined;\n  }; // ======================== Edit Handler Interface ===================================================//\n\n\n  if (!vmSelf._internal.eventTopicEditInProgress) {\n    vmSelf._internal.eventTopicEditInProgress = declViewModelJson && declViewModelJson._viewModelId ? declViewModelJson._viewModelId + '_editInProgress' : '_editInProgress';\n  }\n  /**\n    * @param {*} dvmSelf declViewModel instance\n    * @param {*} isEnabled true/false\n    */\n\n\n  var setSelectionEnabled = function (dvmSelf, isEnabled) {\n    var dataProviders = dvmSelf.dataProviders;\n\n    _.forOwn(dataProviders, function (dataProvider) {\n      dataProvider.setSelectionEnabled(isEnabled);\n    });\n  };\n  /**\n    * @param {*} stateName edit handler state name\n    * @param {*} dvmSelf declViewModel itself\n    */\n\n\n  var _notifyEditStateChange = function (stateName, dvmSelf) {\n    dvmSelf._editingState = stateName;\n    dvmSelf._editing = stateName === 'starting';\n    setSelectionEnabled(dvmSelf, dvmSelf._editing); // Add to the appCtx about the editing state\n\n    appCtxSvc.updateCtx(dvmSelf._internal.eventTopicEditInProgress, dvmSelf._editing);\n    eventBus.publish(dvmSelf._internal.eventTopicEditInProgress, vmSelf._editing);\n  }; // Revisitme - This should ideally be done inside destroy. Commenting it out till we get a use case to fix it properly.\n  // appCtxSvc.unRegisterCtx( vmSelf._internal.eventTopicEditInProgress );\n\n  /**\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @param {*} dvmSelf declViewModel instance\n    * @returns {*} viewModelCollection view model collection as array\n    */\n\n\n  var collectViewModelObjects = function (dvmSelf) {\n    var dataProviders = dvmSelf.dataProviders;\n    var viewModelCollection = [];\n\n    _.forOwn(dataProviders, function (dataProvider) {\n      viewModelCollection = viewModelCollection.concat(dataProvider.viewModelCollection.getLoadedViewModelObjects());\n    });\n\n    return viewModelCollection;\n  };\n  /**\n    * isDirty implementation of edit-handler interface\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.isDirty = function () {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    return editUtilsService._isDirty(viewModelCollection);\n  };\n  /**\n    *This function implements the start edit function edit handler interface\n    *@memberof viewModelProcessingFactory.DeclViewModel\n    *@param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n    *@returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.startEdit = function (editOptions) {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    var editConfig = vmSelf.getEditConfiguration();\n    editConfig.sourceModel = vmSelf.getViewId();\n    var dataCtxNode = {\n      data: vmSelf,\n      ctx: appCtxSvc.ctx\n    };\n\n    const saveEditStateChangeCallback = function () {\n      _notifyEditStateChange('saved', vmSelf);\n    };\n\n    return editUtilsService._startEdit(dataCtxNode, vmSelf, viewModelCollection, editConfig, saveEditStateChangeCallback, editOptions).then(function () {\n      if (!editOptions) {\n        _notifyEditStateChange('starting', vmSelf);\n      }\n    });\n  };\n  /**\n    * This is the cancel edits implementation of edit-handler interface.\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.cancelEdits = function () {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    var dataCtxNode = {\n      data: vmSelf,\n      ctx: appCtxSvc.ctx\n    };\n    var editConfig = vmSelf.getEditConfiguration();\n    return editUtilsService._cancelEdits(dataCtxNode, vmSelf, viewModelCollection, editConfig).then(function () {\n      _notifyEditStateChange('canceling', vmSelf);\n    });\n  };\n  /**\n    * This function implements the save edits function edit handler interface\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.saveEdits = function () {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    var editConfig = vmSelf.getEditConfiguration();\n    var dataCtxNode = {\n      data: vmSelf,\n      ctx: appCtxSvc.ctx\n    };\n    return editUtilsService._saveEdits(dataCtxNode, vmSelf, viewModelCollection, editConfig).then(function () {\n      _notifyEditStateChange('saved', vmSelf);\n    });\n  };\n  /**\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @return {*} boolean\n    */\n\n\n  vmSelf.editInProgress = function () {\n    return vmSelf._editing;\n  }; // ======================== End of Edit Handler Interface ===================================================//\n\n  /**\n    * Check if this 'declViewModel' is 'destroyed' and should not be used.\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @return {Boolean} TRUE if this DeclViewModel has had it's 'destroy' method called and should no longer be\n    *         used or accessed for any purpose.\n    */\n\n\n  vmSelf.isDestroyed = function () {\n    return vmSelf._internal.isDestroyed;\n  };\n  /**\n    * ---------------------------------------------------------------------------<BR>\n    * Property & Function definition complete....Finish initialization. <BR>\n    * ---------------------------------------------------------------------------<BR>\n    */\n\n\n  if (declViewModelJson) {\n    vmSelf._internal.setJsonData(declViewModelJson);\n\n    vmSelf._internal.setViewModelJson(declViewModelJson);\n  }\n\n  declModelRegistrySvc.registerModel('DeclViewModel', vmSelf, '_internal.panelId', '_internal.modelId');\n}; // DeclViewModel\n\n/**\n  * Update the property in the 'target' object with the same value as the 'source' object based on the given\n  * 'path' to that property.\n  * <P>\n  * Note: This function handles the 'special' property names used in the 'attrHolder' object used by the\n  * 'modelPropertyService' during the initial property creation.\n  *\n  * @param {String} dataPath - The path to the property in the original 'declViewModelJson' 'data' object used as\n  *            the basis of the property in the 'source' & 'target' to be updated.\n  *\n  * @param {ViewModelObject} sourceObject - The 'source' object of the value to apply.\n  *\n  * @param {ViewModelObject} targetObject - The 'target' object the value will be applies to.\n  *\n  * @return {Boolean} TRUE if the updated value requires i18n processing.\n  */\n\n\n_c4 = DeclViewModel;\n_c2 = DeclViewModel;\nexport let updateDataProperty = function (dataPath, sourceObject, targetObject) {\n  /**\n    * Check if it is a 'special' name that should use the mapped property name.\n    */\n  var lastDotNdx = dataPath.lastIndexOf('.');\n  var leafPropName = dataPath.substring(lastDotNdx + 1);\n\n  if (declUtils.attrHolderPropName.indexOf(leafPropName) > -1) {\n    var parentPath = dataPath.substring(0, lastDotNdx);\n    modelPropertySvc.updateProperty(parentPath, leafPropName, sourceObject, targetObject);\n    return false;\n  }\n\n  var newValue = _.get(sourceObject, dataPath);\n\n  _.set(targetObject, dataPath, newValue);\n\n  return _.isString(newValue) && /^{{i18n\\./.test(newValue) || _.isObject(newValue) && /^{{i18n\\./.test(newValue.text);\n};\n/**\n  * Return a new instance of a {DeclVideModel} initialized based on the given information.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  *\n  * @return {DeclViewModel} A newly created DeclViewModel object with all properties set to their default values\n  *         other than those set via any given JSON object..\n  */\n\nexport let createDeclViewModel = function (declViewModelJson) {\n  return new DeclViewModel(declViewModelJson);\n};\n/**\n  * Resolve value of ctx and subPanelContext\n  * @param {String} propValue - Prop Value like {{ctx.title}} or {{subPanelContext.title}}.\n  * @param {String} propName - Prop name of element.\n  * @param {Object} dataObj - data object which will have ctx obj or subcontext.\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  */\n\nfunction resolvePropValue(propValue, propName, dataObj, parentJsonObject) {\n  var newVal = parsingUtils.getStringBetweenDoubleMustaches(propValue);\n\n  var val = _.get(dataObj, newVal);\n\n  if (val) {\n    parentJsonObject[propName] = val;\n  } else {\n    val = AwInterpolateService.instance(propValue)(dataObj);\n\n    if (val) {\n      parentJsonObject[propName] = val;\n    } else {\n      parentJsonObject[propName] = '';\n    }\n  }\n}\n/**\n  * Recursively initialize the property values of the given JSON data object with the current value of any bound\n  * appContext properties (bound via {{ctx.*}}).\n  * <P>\n  * Note: While on the 'exports' object, this API is only meant for internal/testing use.\n  *\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  */\n\n\nexport let initViewModel = function (parentJsonObject, subPanelContext, props) {\n  _.forEach(parentJsonObject, function (propValue, propName) {\n    // Check if starts with '{{ctx.' and ends with '}}'\n    if (_.isString(propValue) && /^{{ctx\\..*}}$/.test(propValue)) {\n      resolvePropValue(propValue, propName, appCtxSvc, parentJsonObject);\n    } else if (_.isString(propValue) && /^{{subPanelContext\\..*}}$/.test(propValue)) {\n      // Check if starts with '{{subPanelContext.' and ends with '}}'\n      resolvePropValue(propValue, propName, {\n        subPanelContext: subPanelContext\n      }, parentJsonObject);\n    } else if (_.isString(propValue) && /^{{props\\..*}}$/.test(propValue) && props) {\n      // Check if starts with '{{props.' and ends with '}}'\n      resolvePropValue(propValue, propName, {\n        props: props\n      }, parentJsonObject);\n    } else if (_.isObject(propValue)) {\n      exports.initViewModel(propValue, subPanelContext, props);\n    }\n  });\n};\n/**\n  * Sanitize String properties of viewModelProperty.\n  *\n  * @param {Object} viewModelProperty - Object to check.\n  *\n  * @return {ViewModelProperty} sanitized viewModelProperty.\n  */\n\nfunction _sanitize(viewModelProperty) {\n  _.forOwn(viewModelProperty, function (value, key) {\n    if (propertiesToSanitize[key]) {\n      if (_.isString(value)) {\n        viewModelProperty[key] = sanitizer.sanitizeHtmlValue(value);\n      } else if (_.isArray(value)) {\n        viewModelProperty[key] = sanitizer.sanitizeHtmlValues(value);\n      }\n    }\n  });\n\n  return viewModelProperty;\n}\n/**\n  * Process JSON data, create 'ViewModelProperty' object and fill in data for further processing.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise will be resolved with a new 'declViewModel' object populated with information\n  *         from the given 'declViewModelJson'.\n  */\n\n\nexport let processViewModel = function (declViewModelJson, subPanelContext, props) {\n  var jsonData = declViewModelJson;\n  debugService.debug('lifeCycles', declViewModelJson._viewModelId, 'init');\n  var newDeclViewModel = exports.createDeclViewModel(declViewModelJson);\n  /**\n    * Check if we have any 'data' objects we need to apply appContext to.\n    */\n\n  if (!_.isEmpty(jsonData.data)) {\n    /**\n      * Since 'initViewModel' changes the object given to it, make a clone now to leave the original JSON\n      * object untouched.\n      */\n    var dataClone = _.cloneDeep(jsonData.data);\n\n    exports.initViewModel(dataClone, subPanelContext, props);\n    /**\n      *\n      */\n\n    var compoundObjectMap = {};\n    var compoundViewModelObjectMap = {}; // If 'uid' is given in view model data, attach the model object to this DeclViewModel\n\n    if (dataClone.uid) {\n      newDeclViewModel.vmo = newDeclViewModel.attachModelObject(dataClone.uid, dataClone.operationName, dataClone.owningObjUid);\n      newDeclViewModel.uid = dataClone.uid;\n    }\n\n    _.forEach(dataClone, function (dataProp, propName) {\n      // eslint-disable-line complexity\n\n      /**\n        * We do not want model objects as declViewModelObjects, so do not allow this 'marker' property on\n        * the new object. This case was already handled above.\n        */\n      if (propName === 'uid') {\n        return;\n      }\n      /**\n        * Do not process properties beginning with underscore as view model properties.\n        */\n\n\n      if (_.startsWith(propName, '_')) {\n        newDeclViewModel[propName] = dataProp;\n        return;\n      }\n\n      if (propName === 'objects') {\n        if (!newDeclViewModel.objects) {\n          newDeclViewModel.objects = {};\n        }\n\n        _.forEach(dataProp, function (dataPropValues, dataPropName) {\n          var vmos = [];\n          dataPropValues.forEach(function (dataPropValue) {\n            var viewModelObject = newDeclViewModel.attachModelObject(dataPropValue.uid, dataClone.operationName, dataClone.owningObjUid, dataPropValue);\n\n            if (dataPropValue.selected) {\n              newDeclViewModel.vmo = viewModelObject;\n            }\n\n            vmos.push(viewModelObject);\n          }); // same uid may map to multiple vmo\n\n          if (vmos.length > 1) {\n            newDeclViewModel.objects[dataPropName] = vmos;\n          } else {\n            newDeclViewModel.objects[dataPropName] = vmos[0];\n          }\n        });\n\n        return;\n      }\n      /**\n        * Create a new viewModelProperty based on the JSON data's 'data' properties\n        */\n\n\n      let propAttrHolder = declUtils.buildPropHolder(dataProp); // If this is not a view model prop, just save the object to the data.\n\n      if (_.isEmpty(propAttrHolder)) {\n        newDeclViewModel[propName] = dataProp;\n        return;\n      }\n      /**\n        * Make sure we have a 'propName' set.\n        */\n\n\n      if (!propAttrHolder.propName) {\n        propAttrHolder.propName = propName;\n      } // process compound property, like revision:item_revision_id\n\n\n      var isCompoundProp = false;\n      var vmProp = null;\n\n      if (propName.indexOf(_compoundPropNameDelimiter) > 0 && propAttrHolder.dbValue.indexOf(_compoundPropValueDelimiter) > 0) {\n        var compoundProps = propAttrHolder.dbValue.split(_compoundPropValueDelimiter);\n\n        var objectRefProp = _.get(newDeclViewModel, compoundProps[0]);\n\n        if (objectRefProp.type === 'OBJECT' || objectRefProp.type === 'OBJECTARRAY') {\n          isCompoundProp = true;\n          var modelObject = null;\n          var childFullPropertyName = '';\n          var i = 0;\n\n          for (i = 0; i < compoundProps.length - 1; i++) {\n            if (i === 0) {\n              modelObject = clientDataModel.getObject(objectRefProp.dbValues[0]);\n            } else if (modelObject) {\n              childFullPropertyName += '__';\n              objectRefProp = _.get(modelObject.props, compoundProps[i]);\n              modelObject = clientDataModel.getObject(objectRefProp.dbValues[0]);\n            }\n\n            childFullPropertyName += compoundProps[i];\n\n            if (!compoundObjectMap.hasOwnProperty(childFullPropertyName)) {\n              _.set(compoundObjectMap, childFullPropertyName, modelObject);\n            }\n          }\n\n          var compoundViewModelObject = _.get(compoundViewModelObjectMap, childFullPropertyName);\n\n          if (!compoundViewModelObject && modelObject) {\n            compoundViewModelObject = viewModelObjectSrv.createViewModelObject(modelObject.uid, dataClone.operationName);\n\n            _.set(compoundViewModelObjectMap, childFullPropertyName, compoundViewModelObject);\n          }\n\n          if (compoundViewModelObject) {\n            vmProp = _.get(compoundViewModelObject.props, compoundProps[i]);\n\n            if (!vmProp) {\n              // skip this view model property when the compound property doesn't exist in referenced object\n              return;\n            }\n\n            _.set(vmProp, 'intermediateCompoundObjects', compoundObjectMap);\n          }\n        }\n      }\n\n      if (!vmProp) {\n        vmProp = modelPropertySvc.createViewModelProperty(propAttrHolder);\n      } // other properties\n\n\n      if (!isCompoundProp && !declUtils.isNil(dataProp.dbValue)) {\n        vmProp.dbValue = dataProp.dbValue;\n      }\n\n      if (dataProp.dataProvider) {\n        // we have an lov, but the api is defined using the dataProvider\n        vmProp.dataProvider = dataProp.dataProvider; // initialize lovApi here? we could if we had the prop scope...\n        // instead, postpone till first expand\n\n        vmProp.hasLov = true; // allow empty LOV entry\n\n        vmProp.emptyLOVEntry = dataProp.emptyLOVEntry;\n      }\n\n      if (!declUtils.isNil(dataProp.uiValue)) {\n        vmProp.uiValue = dataProp.uiValue;\n      }\n\n      if (!declUtils.isNil(dataProp.propertyLabelDisplay)) {\n        vmProp.propertyLabelDisplay = dataProp.propertyLabelDisplay;\n      } // attach method for accessing the viewModel\n\n\n      vmProp.getViewModel = function () {\n        return newDeclViewModel;\n      };\n      /* revisitme Shaishav\n       * Hint: Sanitization failes some examples. Need to investigate.\n       newDeclViewModel[ propName ] = _sanitize( vmProp );\n       */\n\n\n      newDeclViewModel[propName] = vmProp;\n    });\n  }\n\n  if (jsonData.grids) {\n    newDeclViewModel.grids = _.cloneDeep(jsonData.grids);\n    exports.initViewModel(newDeclViewModel.grids, subPanelContext);\n  }\n\n  if (jsonData.columnProviders) {\n    newDeclViewModel.columnProviders = {};\n    var mockedColumnProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.columnProviders;\n\n    _.forEach(jsonData.columnProviders, function (jsonColumnProvider, cpName) {\n      if (mockedColumnProvider && mockedColumnProvider[cpName]) {\n        jsonColumnProvider = mockedColumnProvider[cpName];\n      }\n\n      newDeclViewModel.columnProviders[cpName] = jsonColumnProvider;\n    });\n  }\n\n  if (jsonData.chartProviders) {\n    if (!newDeclViewModel.chartProviders) {\n      newDeclViewModel.chartProviders = {};\n    }\n\n    newDeclViewModel.chartProviders = jsonData.chartProviders;\n    exports.initViewModel(newDeclViewModel.chartProviders, subPanelContext, props);\n\n    _.forEach(newDeclViewModel.chartProviders, function (jsonChartProvider, chartProviderName) {\n      newDeclViewModel.chartProviders[chartProviderName].name = chartProviderName;\n    });\n  }\n\n  if (jsonData.commands) {\n    newDeclViewModel.commands = _.cloneDeep(jsonData.commands);\n    exports.initViewModel(newDeclViewModel.commands);\n  }\n\n  if (jsonData.commandHandlers) {\n    newDeclViewModel.commandHandlers = jsonData.commandHandlers;\n  }\n\n  if (jsonData.commandPlacements) {\n    newDeclViewModel.commandPlacements = jsonData.commandPlacements;\n  }\n\n  if (jsonData.objectSetSource) {\n    newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n  }\n\n  if (jsonData.objectSetSource) {\n    newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n  }\n\n  if (jsonData.editContext) {\n    /**\n         * revisitme\n         * editHandlerFactory is not ported yet\n             editHandlerService.setEditHandler( editHandlerFactory.createEditHandler( dataSourceService\n                .createNewDataSource( {\n                    declViewModel: newDeclViewModel\n                } ) ), jsonData.editContext );\n          */\n    // set this handler active\n    editHandlerService.setActiveEditHandlerContext(jsonData.editContext);\n  }\n\n  if (jsonData.editHandlers) {\n    newDeclViewModel.editHandlers = jsonData.editHandlers;\n  }\n\n  return _populateDataProviders(declViewModelJson, newDeclViewModel, subPanelContext);\n};\n/**\n  * Update localization texts on the properties created based on data section\n  *\n  * @param {DeclViewModel} objectRoot - The 'declViewModel' to scan for possible I18n string replacements and the\n  *            model to apply those replacements to.\n  *\n  * @param {Object} i18nValueMap - Context to search the input string from.\n  *            <P>\n  *            Note: All property names in this object are possible to be used as string replacements. However,\n  *            most uses of this service will use 'i18n.' as the prefix in their text 'path'. Therefore, the\n  *            'i18n' property of this object is the most important property.\n  *\n  * @param {Number} level - Level in the recursive walk of the i18n properties.\n  *\n  * @param {StringMap} paramValues -\n  */\n\nexport let updateI18nTexts = function (objectRoot, i18nValueMap, level, paramValues) {\n  _.forEach(objectRoot, function (propValue, propName) {\n    /**\n      * Check if <BR>\n      * There is NO property value OR <BR>\n      * It is a property that is 'reserved' (scope, ctx, data) OR<BR>\n      * It is known to be invalid to traverse (propertyDescriptor*, props, modelType, etc.)\n      * <P>\n      * Note: We are doing this to avoid cyclic traversals and data known to not contains i18n bindings.\n      */\n    if (!propValue || propValue.propertyDescriptor || /^(scope|ctx|data|props|eventData|eventMap|propertyDescriptor(|s|sMaps)|modelType|_internal|\\$.*)$/.test(propName) || _.isFunction(propValue) || _.isNumber(propValue) || _.isBoolean(propValue) || level === 1 && propName === 'action') {\n      return true;\n    }\n    /**\n      * Skip binding to any '_internal' properties or those starting with '$' or those with 'null' values, or\n      * properties from a model object\n      */\n\n\n    if (_.isString(propValue)) {\n      if (/^{{i18n\\./.test(propValue)) {\n        var results = propValue.match(parsingUtils.REGEX_DATABINDING);\n\n        if (results && results.length === 4) {\n          var textPath = results[2];\n\n          var val = _.get(i18nValueMap, textPath);\n\n          if (paramValues && !_.isEmpty(paramValues)) {\n            val = messagingService.applyMessageParamsWithoutContext(val, paramValues);\n          }\n\n          if (val) {\n            objectRoot[propName] = val;\n          } else {\n            // use i18n key as fall back if no i18n text found, slice the leading 'i18n.' in textPath to get key\n            objectRoot[propName] = textPath.slice(5);\n          }\n        }\n      }\n    } else if (_.isObject(propValue) && propValue.text && propValue.params) {\n      objectRoot[propName] = propValue.text;\n      exports.updateI18nTexts(objectRoot, i18nValueMap, nextLevel, propValue.params);\n    } else {\n      if (!_.isEmpty(propValue)) {\n        var nextLevel = level + 1;\n\n        if (propName === 'dataProviders') {\n          /**\n            * Resolve any i18n bindings in dataProvider command titles.\n            */\n          _.forEach(propValue, function (propValue2) {\n            if (propValue2 && propValue2.commands) {\n              exports.updateI18nTexts(propValue2.commands, i18nValueMap, nextLevel);\n            }\n          });\n        } else {\n          exports.updateI18nTexts(propValue, i18nValueMap, nextLevel);\n        }\n      }\n    }\n\n    return undefined;\n  });\n};\n\nconst reduceParentJsonObject = function (parentJsonObject, resolvedData, propNameArg) {\n  _.forEach(parentJsonObject, function (propValue, propName) {\n    if (_.isString(propValue) && /^{{subPanelContext\\..*}}$/.test(propValue) && propNameArg) {\n      _.set(resolvedData, propNameArg + '.' + propName, propValue);\n    } else if (_.isObject(propValue)) {\n      let propNameArg2 = propNameArg ? propNameArg + '.' + propName : propName;\n      reduceParentJsonObject(propValue, resolvedData, propNameArg2);\n    }\n  });\n};\n\nexport let resolveSubPanelContext = function (parentJsonObject, subPanelContext, resolvedData) {\n  reduceParentJsonObject(parentJsonObject, resolvedData);\n  exports.initViewModel(resolvedData, subPanelContext);\n};\nexport let getInputDataExpression = function (jsonObject) {\n  let expressionPaths = [];\n\n  _.forEach(jsonObject, function (propValue, propName) {\n    if (_.isString(propValue) && _.startsWith(propValue, '{{') && propName) {\n      let path = parsingUtils.getStringBetweenDoubleMustaches(propValue);\n      expressionPaths.push({\n        [propName]: path\n      });\n    } else if (_.isObject(propValue)) {\n      expressionPaths.push(...getInputDataExpression(propValue));\n    }\n  });\n\n  return expressionPaths;\n};\nexport let shouldCreateViewModelProperty = function (dataProp) {\n  var propAttrHolder = {};\n\n  _.forEach(dataProp, function (dataPropValue, dataPropName) {\n    if (declUtils.attrHolderPropName.indexOf(dataPropName) > -1) {\n      propAttrHolder[dataPropName] = dataPropValue;\n    }\n  });\n\n  return !_.isEmpty(propAttrHolder);\n};\n/**\n  * Check if any view model on the page is currently active\n  *\n  * @returns {Boolean} true if active\n  */\n\nexport let isAnyViewModelActive = function () {\n  return sharedViewModelToken !== 0;\n};\nexports = {\n  updateDataProperty,\n  createDeclViewModel,\n  initViewModel,\n  processViewModel,\n  updateI18nTexts,\n  isAnyViewModelActive,\n  resolveSubPanelContext,\n  shouldCreateViewModelProperty\n};\nexport default exports;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DeclViewModelToken\");\n$RefreshReg$(_c2, \"DeclViewModel\");\n\nvar _c3, _c4;\n\n$RefreshReg$(_c3, \"DeclViewModelToken\");\n$RefreshReg$(_c4, \"DeclViewModel\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/viewModelProcessingFactory.js"],"names":["tokenTrace","propertiesToSanitize","dbValue","dbValues","displayValues","error","propertyDisplayName","propertyName","propertyRadioFalseText","propertyRadioText","uiValue","uiValues","value","_compoundPropNameDelimiter","_compoundPropValueDelimiter","actionRef","jsonDataProvider","jsonData","actionMap","logger","exports","_populateDataProviders","promises","dataProviderActions","_","declViewModel","dataProvidersClone","mockedDataProvider","mockModeService","subPanelContext","editSupportParamKeys","index","resolvedLOVConfig","isTcLOV","lovDataProviderJSON","cfgSvc","actionName","actName","newActionName","declViewModelJson","_processAction","dataProviderFactory","getInputDataExpression","declUtils","command","promise","cmdOverlay","position","displayOption","handler","condition","commandsSvc","commandOverlay","sharedViewModelToken","DeclViewModelToken","activeActionCount","DeclViewModel","vmSelf","token","modelId","panelId","viewId","isDestroyed","eventSubscriptions","subPanelId2EventSubscriptionsMap","origDeclViewModelJson","conditionStates","conditionExpressions","conditions","actions","dataParseDefinitions","functions","messages","onEvent","grids","chartProviders","subPanels","declViewModelJsonBoundProps","pendingContextChanges","editConfig","ports","editHandlers","destroy","declModelRegistrySvc","eventBus","uwDataProvider","currentGrid","editUtilsService","editHandlerService","setViewModelJson","declViewModelJsonIn","setJsonData","consolidateJsonData","subPanelId","subPanel","contextChanged","subscriptions","subDefs","objs","data","operationName","object","newVmo","viewModelObjectSrv","cdmUpdateEventDef","cdmModifiedEventDef","vmo","targetUID","targetMO","clientDataModel","targetVMO","props","prop","setSelectionEnabled","dataProviders","dvmSelf","dataProvider","_notifyEditStateChange","stateName","appCtxSvc","collectViewModelObjects","viewModelCollection","dataCtxNode","ctx","saveEditStateChangeCallback","updateDataProperty","lastDotNdx","dataPath","leafPropName","parentPath","modelPropertySvc","newValue","createDeclViewModel","newVal","parsingUtils","val","parentJsonObject","AwInterpolateService","initViewModel","resolvePropValue","viewModelProperty","sanitizer","processViewModel","debugService","newDeclViewModel","dataClone","compoundObjectMap","compoundViewModelObjectMap","propName","vmos","dataPropValues","viewModelObject","dataPropValue","propAttrHolder","isCompoundProp","vmProp","compoundProps","objectRefProp","modelObject","childFullPropertyName","i","compoundViewModelObject","dataProp","mockedColumnProvider","jsonColumnProvider","updateI18nTexts","propValue","level","results","textPath","paramValues","messagingService","objectRoot","nextLevel","propValue2","reduceParentJsonObject","propNameArg","propNameArg2","resolveSubPanelContext","expressionPaths","path","shouldCreateViewModelProperty","isAnyViewModelActive"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides DeclViewModel processing functionalities.\n *\n * @module js/viewModelProcessingFactory\n *\n * @namespace viewModelProcessingFactory\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport modelPropertySvc from 'js/modelPropertyService';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport sanitizer from 'js/sanitizer';\nimport declModelRegistrySvc from 'js/declModelRegistryService';\nimport editUtilsService from 'js/editUtilsService';\nimport messagingService from 'js/messagingService';\nimport mockModeService from 'js/mockModeService';\nimport AwInterpolateService from 'js/awInterpolateService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport parsingUtils from 'js/parsingUtils';\nimport declUtils from 'js/declUtils';\nimport logger from 'js/logger';\nimport Debug from 'debug';\nimport debugService from 'js/debugService';\nimport editHandlerService from 'js/editHandlerService';\nimport cfgSvc from 'js/configurationService';\n\nimport commandsSvc from 'js/command.service';\nimport { loadDynModule } from 'js/moduleLoader';\n\n/** revisitme\n  * Hint: editHandlerFactory not ported yet\n import editHandlerFactory from 'js/editHandlerFactory';\n */\n/** revisitme Shaishav\n  * Hint: Condition service is not used anywhere. Remove this\n import 'js/conditionService';\n */\n\nvar tokenTrace = new Debug( 'viewModel:token' );\n\n/**\n  * Cached reference to AngularJS & AW services\n  */\n\n/** List of attributes would be considered for sanitization */\nvar propertiesToSanitize = {\n    dbValue: true,\n    dbValues: true,\n    displayValues: true,\n    error: true,\n    propertyDisplayName: true,\n    propertyName: true,\n    propertyRadioFalseText: true,\n    propertyRadioText: true,\n    uiValue: true,\n    uiValues: true,\n    value: true\n};\n\nvar _compoundPropNameDelimiter = '__';\nvar _compoundPropValueDelimiter = ':';\n\n/**\n  * Perform the given 'action'.\n  *\n  * @param {Object} jsonData - Object loaded from the DeclViewModel JSON file\n  * @param {Object} jsonDataProvider - A specific dataProvider's definition within 'jsonData'.\n  * @param {String} dpName - The name of the 'declDataProvider' where the action is defined.\n  * @param {String} actionName - The name of the action to look for in the 'jsonData'\n  * @param {StringMap} actionMap - Map of action name to the action object from a declViewModel's JSON definition\n  *            to be updated by this function.\n  */\nfunction _processAction( jsonData, jsonDataProvider, dpName, actionName, actionMap ) {\n    var actionRef = jsonDataProvider[ actionName ];\n\n    if( actionRef ) {\n        if( jsonData.actions ) {\n            actionMap[ actionName ] = jsonData.actions[ actionRef ];\n        }\n\n        if( !actionMap[ actionName ] ) {\n            logger.error( 'DataProvider ' + dpName + ' references a missing action: ' + actionName +\n                 '...continuing' );\n        }\n    }\n} // _processAction\n\n/**\n  * Define the base object used to provide all of this module's external API on.\n  *\n  * @private\n  */\nvar exports = {};\n\n/**\n  * Evaluate dataProviders from JSON, load any dependencies and set on the given 'declViewModel'.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {DeclViewModel} declViewModel - The 'DeclViewModel' to populate with the dataProvider properties of\n  *            the given JSON object.\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise is resolved with the given 'declViewModel' once any data provider dependencies\n  *         are all resolved.\n  */\nvar _populateDataProviders = function( declViewModelJson, declViewModel, subPanelContext ) {\n    var jsonData = declViewModelJson;\n    var promises = [];\n    const dataProviderActions = [\n        'action',\n        'initializeAction',\n        'nextAction',\n        'previousAction',\n        'focusAction',\n        'expandAction',\n        'validateAction',\n        'filterFacetAction',\n        'preferredChoicesAction'\n    ];\n\n    if( jsonData.dataProviders && !_.isEmpty( jsonData.dataProviders ) ) {\n        if( !declViewModel.dataProviders ) {\n            declViewModel.dataProviders = {};\n        }\n\n        let dataProvidersClone = _.cloneDeep( jsonData.dataProviders );\n        let mockedDataProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.dataProviders;\n        exports.initViewModel( dataProvidersClone, subPanelContext );\n        // Short term fix to support editSupportParamKeys on subPanelContext.provider\n        // Long term approach is to have this information directly on subPanelContext\n        // This will be cleaned up with the tech debt story for cleanup of AwStandardPrimaryWorkarea\n        let editSupportParamKeys;\n        if( subPanelContext ) {\n            if( subPanelContext.editSupportParamKeys ) {\n                editSupportParamKeys = subPanelContext.editSupportParamKeys;\n            } else if( subPanelContext.provider && subPanelContext.provider.editSupportParamKeys ) {\n                editSupportParamKeys = subPanelContext.provider.editSupportParamKeys;\n            } else {\n                editSupportParamKeys = subPanelContext.selectionQueryParamKey && [ subPanelContext.selectionQueryParamKey ];\n            }\n        }\n        let index = 0;\n        _.forEach( dataProvidersClone, ( jsonDataProvider, dpName ) => {\n            let resolvedLOVConfig = jsonDataProvider.lovConfiguration;\n            // TcLOV is a data-provider property.\n            // If we declare any data-provider as TCLOV it would start using the standard SOA calls available for teamcenter\n            // to populate and validate LOV i.e getInitialLOVVAlue, getNextLOVValue and ValidateLOV.\n            // It can be used with any data-provider which is used with widgets like i.e aw-link-with-popup, aw-widget.\n            // User has option to supply its own parameters (VMO and ViewModel Prop) through \"lovConfiguration\" setting defined in the LOV dataprovider.\n            // Imp: If the dataprovider has action defined then data-provider type \"tcLOV\" setting is ignored.\n            let isTcLOV = !( jsonDataProvider.action || jsonDataProvider.initializeAction ) && jsonDataProvider.dataProviderType === 'TcLOV';\n            if( isTcLOV ) {\n                const lovDataProviderJSON = _.cloneDeep( cfgSvc.getCfgCached( 'lovDataProvider' ) );\n                _.forEach( dataProviderActions, actionName => {\n                    const actName = lovDataProviderJSON.dataProviders.tcDataprovider[ actionName ];\n                    if( actName ) {\n                        // A new action Name, which shouldn't conflict with exiting action name.\n                        let newActionName = actName + '_tcLOV_' + index;\n                        jsonDataProvider[ actionName ] = newActionName;\n                        jsonData.actions[ newActionName ] = lovDataProviderJSON.actions[ actName ];\n                        jsonData.actions[ newActionName ].inputData.dataProviderName = dpName;\n                    }\n                } );\n                jsonDataProvider.response = lovDataProviderJSON.dataProviders.tcDataprovider.response;\n                jsonDataProvider.moreValuesExist = lovDataProviderJSON.dataProviders.tcDataprovider.moreValuesExist;\n                // Reverting back the lovConfiguration to the pristine state, as it would be evaluated multiple times\n                // in declDataProviderService. If we store the evaluated lovConfiguration further evaluations becomes\n                // very costly and might run into a infinite loop.\n                jsonDataProvider.lovConfiguration = _.cloneDeep( declViewModelJson.dataProviders[ dpName ].lovConfiguration );\n            }\n            index++;\n            var actionMap = {};\n\n            if( mockedDataProvider && mockedDataProvider[ dpName ] ) {\n                jsonDataProvider = mockedDataProvider[ dpName ];\n            }\n            _.forEach( dataProviderActions, actionName => {\n                _processAction( jsonData, jsonDataProvider, dpName, actionName, actionMap );\n            } );\n            /**\n              * Create the DeclDataProvider based on the JSON data.\n              */\n            declViewModel.dataProviders[ dpName ] = dataProviderFactory.createDataProvider( jsonDataProvider, actionMap.action, dpName, declDataProviderSvc, actionMap );\n            declViewModel.dataProviders[ dpName ].origJson = jsonData.dataProviders[ dpName ];\n            declViewModel.dataProviders[ dpName ].inputDataExpressions = getInputDataExpression( jsonData.dataProviders[ dpName ].inputData );\n            if( isTcLOV ) {\n                declViewModel.dataProviders[ dpName ].resolvedLovConfig = resolvedLOVConfig;\n            }\n\n            if( jsonDataProvider.uidInResponse ) {\n                declViewModel.dataProviders[ dpName ].uidInResponse = jsonDataProvider.uidInResponse;\n            }\n\n            if( !declUtils.isNil( jsonDataProvider.preSelection ) ) {\n                declViewModel.dataProviders[ dpName ].preSelection = jsonDataProvider.preSelection;\n            } else {\n                declViewModel.dataProviders[ dpName ].preSelection = true;\n            }\n\n            if( declViewModel.objectSetSource && declViewModel.objectSetSource[ dpName ] ) {\n                declViewModel.dataProviders[ dpName ]\n                    .setValidSourceTypes( declViewModel.objectSetSource[ dpName ] );\n            }\n            if( editSupportParamKeys ) {\n                if( !jsonDataProvider.inputData ) {\n                    jsonDataProvider.inputData = {};\n                }\n                if( !jsonDataProvider.inputData.editSupportParamKeys ) {\n                    jsonDataProvider.inputData.editSupportParamKeys = editSupportParamKeys;\n                    declViewModel.dataProviders[ dpName ].editSupportParamKeys = editSupportParamKeys;\n                }\n            }\n            /**\n              * Process cell commands\n              */\n            if( jsonDataProvider.commands ) {\n                declViewModel.dataProviders[ dpName ].commands = [];\n\n                _.forEach( jsonDataProvider.commands, function( command, cmdId ) {\n                    if( jsonDataProvider.commandsAnchor ) {\n                        logger.error( 'Commands in dataProviders are not supported when using commandsAnchor.' + '\\n' +\n                             'cmdId=' + cmdId + '\\n' +\n                             'commandsAnchor=' + jsonDataProvider.commandsAnchor );\n                    } else {\n                        if( command.dependencies && command.dependencies.length > 0 ) {\n                            var cmdOverlay;\n                            var promise = loadDynModule( command.dependencies )\n                                .then(\n                                    function( handlers ) {\n                                        cmdOverlay = {\n                                            position: command.position,\n                                            displayOption: command.displayOption,\n                                            handler: handlers,\n                                            condition: command.condition\n                                        };\n\n                                        declViewModel.dataProviders[ dpName ].commands\n                                            .push( cmdOverlay );\n\n                                        return commandsSvc.getCommand( cmdId );\n                                    } ).then(\n                                    function( commandOverlay ) {\n                                        /**\n                                          * Update the icon and title once the command overlay is\n                                          * returned\n                                          */\n                                        if( commandOverlay ) {\n                                            cmdOverlay.iconId = commandOverlay.iconId || command.id;\n                                            cmdOverlay.title = commandOverlay.title || command.title;\n                                        }\n                                        return cmdOverlay; // Include return to assure async\n                                    } );\n\n                            promises.push( promise );\n                        } else if( command.action ) {\n                            command.iconId = command.id;\n                            declViewModel.dataProviders[ dpName ].commands.push( command );\n                        }\n                    }\n                } );\n            }\n\n            if( jsonDataProvider.editContext ) {\n                declViewModel.dataProviders[ dpName ].editContext = jsonDataProvider.editContext;\n            }\n        } );\n    }\n\n    // return AwPromiseService.instance.all( promises ).then( function() {\n    return declViewModel;\n    // } );\n};\n\nvar sharedViewModelToken = 0;\n\n/**\n  * Token for tracking execution within the view model\n  */\nvar DeclViewModelToken = function() {\n    var activeActionCount = 0;\n\n    this.addAction = function( action ) {\n        tokenTrace( 'Action started', action );\n        activeActionCount++;\n        sharedViewModelToken++;\n    };\n\n    this.removeAction = function( action ) {\n        tokenTrace( 'Action completed', action );\n        activeActionCount--;\n        sharedViewModelToken = sharedViewModelToken <= 1 ? 0 : sharedViewModelToken - 1;\n    };\n\n    this.isActive = function() {\n        return activeActionCount !== 0;\n    };\n};\n\n/**\n  * Creates a new instance of this class.\n  *\n  * @class DeclViewModel\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  */\nvar DeclViewModel = function( declViewModelJson ) {\n    var vmSelf = this; // eslint-disable-line consistent-this\n\n    /**\n      * This object is used to hold properties and states that are not intended to be exposed to the\n      * 'dataCtxTree'.\n      */\n    vmSelf._internal = {\n\n        /**\n          * Token for tracking execution within the view model\n          */\n        token: new DeclViewModelToken(),\n\n        /**\n          * {Number} An increasing number assigned to this declViewModel when created and use to identify it\n          * (only for debug purposes).\n          */\n        modelId: -1,\n\n        /**\n          * {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n          */\n        panelId: 'undefined',\n\n        /**\n          * {String} The unique Id to identify the view\n          */\n        viewId: 'undefined',\n\n        /**\n          * {Boolean} TRUE if 'destroy' has been invoked on this instance.\n          */\n        isDestroyed: false,\n\n        /**\n          * {EventSubscriptionArray} Array of 'eventSubscriptions' currently registerd against this\n          * 'declViewModel'.\n          */\n        eventSubscriptions: [],\n\n        /**\n          * {SubPanelId2EventSubscriptionsMap} a map of <subPanelId,EventSubscriptions>.\n          */\n        subPanelId2EventSubscriptionsMap: {},\n\n        /**\n          * {DeclViewModelJson} The object returned from loading the JSON resource for this 'declViewModel'.\n          */\n        origDeclViewModelJson: null,\n\n        /**\n          * {Object} A map of a 'conditionName' property to its current true/false state.\n          */\n        conditionStates: {},\n\n        /**\n          * {Object} A map of a 'conditionExpressions' property to its current vaule.\n          */\n        conditionExpressions: {},\n\n        /**\n          * Ref to: conditions\n          */\n        conditions: null,\n\n        /**\n          * Ref to: jasonData.actions\n          */\n        actions: null,\n\n        /**\n          * Ref to: jasonData.dataParseDefinitions\n          */\n        dataParseDefinitions: null,\n\n        /**\n          * Ref to: jasonData.functions\n          */\n        functions: null,\n\n        /**\n          * Ref to: jasonData.messages\n          */\n        messages: null,\n\n        /**\n          * Ref to: jasonData.onEvent\n          */\n        onEvent: null,\n\n        /**\n          * Ref to: jasonData.onEvent\n          */\n        grids: null,\n\n        /**\n          * Ref to: jasonData.onEvent\n          */\n        chartProviders: null,\n\n        /**\n          * {StringArray} The array of sub-panel IDs that have been 'merged' into this 'target' 'declViewModel'.\n          */\n        subPanels: null,\n\n        /**\n          * {ObjectArray} An array of data objects that specify the propertyValue/propertyPath of all non-action\n          * properties in the original declViewModel JSON definition that are 'data bound' to any changes in the\n          * appContext state (e.g. propValue = {{ctx.selected}}, etc.).\n          */\n        declViewModelJsonBoundProps: null,\n\n        /**\n          * {ObjectMap} Map of appContext changes that have been collected since this declViewModel was created\n          * or after the last 'update debound' was processed.\n          */\n        pendingContextChanges: null,\n\n        /**\n          * edit configuration map. This holds the configuration for start/cancel/save edit actions\n          */\n        editConfig: null,\n\n        /**\n          * ports for sync strategy\n          */\n        ports: null,\n\n        /**\n          * Edit handlers\n          */\n        editHandlers: null,\n\n        /**\n          * This function will be called then the 'dataCtxNode' ( aka '$scope' ) this 'declViewModel'\n          * is placed on is destroyed.\n          *\n          * @param {Boolean} destroyDataProviders - TRUE if all associated dataProviders should have their 'destroy' method called.\n          */\n        destroy: function( destroyDataProviders ) {\n            vmSelf._internal.isDestroyed = true;\n            // Any active actions or messages are going to be cut off, force clear out token\n            while( vmSelf._internal.token.isActive() ) {\n                vmSelf._internal.token.removeAction( null );\n            }\n\n            declModelRegistrySvc.unregisterModel( 'DeclViewModel', vmSelf, '_internal.panelId',\n                '_internal.modelId' );\n\n            _.forEach( this.eventSubscriptions, function( subDef ) {\n                eventBus.unsubscribe( subDef );\n            } );\n\n            _.forEach( this.subPanelId2EventSubscriptionsMap, function( subDefs ) {\n                _.forEach( subDefs, function( subDef ) {\n                    eventBus.unsubscribe( subDef );\n                } );\n            } );\n\n            this.eventSubscriptions = [];\n            this.subPanelId2EventSubscriptionsMap = {};\n\n            /**\n              * Stop debounce for ctx change events.\n              */\n            if( vmSelf._internal.pingUpdateViewModel && vmSelf._internal.pingUpdateViewModel.cancel ) {\n                vmSelf._internal.pingUpdateViewModel.cancel();\n                vmSelf._internal.pingUpdateViewModel = null;\n            }\n\n            /**\n              * Clean up all dataProviders\n              */\n            if( destroyDataProviders ) {\n                _.forEach( vmSelf.dataProviders, function( uwDataProvider, dpName ) {\n                    uwDataProvider.destroy();\n                    vmSelf.dataProviders[ dpName ] = null;\n                } );\n\n                _.forEach( vmSelf.grids, function( currentGrid ) {\n                    if( currentGrid.columnProviderInstance ) {\n                        currentGrid.columnProviderInstance.destroy();\n                        currentGrid.columnProviderInstance = null;\n                    }\n                } );\n            }\n\n            /**\n              * Clean up all subPanels\n              */\n            _.forEach( vmSelf._internal.subPanels, function( subPanel ) {\n                declModelRegistrySvc.unregisterModel( 'SubPanel', subPanel, 'panelId', 'id' );\n            } );\n\n            vmSelf._internal.subPanels = null;\n            vmSelf._internal.declViewModelJsonBoundProps = null;\n            vmSelf._internal.pendingContextChanges = null;\n\n            /**\n              * Clean up edit config\n              */\n            if( vmSelf._internal.editConfig ) {\n                editUtilsService._removeListeners( vmSelf._internal.editConfig.sourceModel );\n            }\n            vmSelf._internal.editConfig = null;\n\n            /**\n              * Clean up edit handler\n              */\n            if( vmSelf._internal.editContext ) {\n                editHandlerService.removeEditHandler( vmSelf._internal.editContext );\n            }\n\n            /**\n              * Clean up references to external resources\n              */\n            vmSelf._internal.origCtxNode = null;\n            vmSelf.vmo = null;\n            vmSelf.objects = null;\n        },\n\n        /**\n          * Based on the value of the 'skipClone' property of the given JSON object, clone a copy of the given\n          * JSON object (if necessary) and save it in a local property.\n          *\n          * @param {DeclViewModelJson} declViewModelJsonIn - The object returned from loading the JSON resource for\n          *            this 'declViewModel'.\n          */\n        setViewModelJson: function( declViewModelJsonIn ) {\n            vmSelf._internal.origDeclViewModelJson = declViewModelJsonIn;\n\n            if( declViewModelJsonIn._viewModelId ) {\n                vmSelf._internal.panelId = declViewModelJsonIn._viewModelId;\n            } else {\n                /**\n                  * revisitme\n                  * logger.error( 'setViewModelJson: No panelId given' );\n                  */\n            }\n\n            if( declViewModelJsonIn._uniqueViewModelId ) {\n                vmSelf._internal.viewId = declViewModelJsonIn._uniqueViewModelId;\n            }\n        },\n\n        /**\n          * Set all the properties in this object to all the valid corresponding properties in the given\n          * 'jsonData' object.\n          *\n          * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n          *            JSON resource for this 'declViewModel'.\n          */\n        setJsonData: function( jsonData ) {\n            if( jsonData.actions ) {\n                /**\n                  * Note: For debug purposes ONLY...Include the name of the action in the action object as the\n                  * 'actionId' property.\n                  */\n                _.forEach( jsonData.actions, function( value, name ) {\n                    value.actionId = name;\n                } );\n\n                vmSelf._internal.actions = jsonData.actions;\n            }\n\n            if( jsonData.conditions ) {\n                vmSelf._internal.conditions = jsonData.conditions;\n            }\n\n            if( jsonData.ports ) {\n                vmSelf._internal.ports = jsonData.ports;\n            }\n\n            if( jsonData.dataParseDefinitions ) {\n                vmSelf._internal.dataParseDefinitions = jsonData.dataParseDefinitions;\n            }\n\n            if( jsonData.functions ) {\n                vmSelf._internal.functions = jsonData.functions;\n            }\n\n            if( jsonData.messages ) {\n                vmSelf._internal.messages = jsonData.messages;\n            }\n\n            if( jsonData.onEvent ) {\n                vmSelf._internal.onEvent = jsonData.onEvent;\n            }\n\n            if( jsonData.grids ) {\n                vmSelf._internal.grids = jsonData.grids;\n            }\n\n            if( jsonData.chartProviders ) {\n                vmSelf._internal.chartProviders = jsonData.chartProviders;\n            }\n\n            if( jsonData.editConfig ) {\n                vmSelf._internal.editConfig = jsonData.editConfig;\n            }\n\n            if( jsonData.lifecycleHooks ) {\n                vmSelf._internal.lifecycleHooks = jsonData.lifecycleHooks;\n            }\n\n            if( jsonData.editContext ) {\n                vmSelf._internal.editContext = jsonData.editContext;\n            }\n\n            if( jsonData.selectionModels ) {\n                vmSelf._internal.selectionModels = jsonData.selectionModels;\n            }\n\n            if( jsonData.editHandlers ) {\n                vmSelf._internal.editHandlers = jsonData.editHandlers;\n            }\n        },\n        /**\n          * Consolidate (i.e. merge) all the properties in this object to all the valid corresponding properties\n          * in the given 'jsonData' object.\n          *\n          * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n          *            JSON resource for this 'declViewModel'.\n          */\n        consolidateJsonData: function( jsonData ) {\n            vmSelf._internal.actions = declUtils\n                .consolidateObjects( vmSelf._internal.actions, jsonData.actions );\n\n            vmSelf._internal.dataParseDefinitions = declUtils.consolidateObjects(\n                vmSelf._internal.dataParseDefinitions, jsonData.dataParseDefinitions );\n\n            vmSelf._internal.conditions = declUtils.consolidateObjects( vmSelf._internal.conditions,\n                jsonData.conditions );\n\n            vmSelf._internal.functions = declUtils.consolidateObjects( vmSelf._internal.functions,\n                jsonData.functions );\n\n            vmSelf._internal.messages = declUtils.consolidateObjects( vmSelf._internal.messages,\n                jsonData.messages );\n\n            vmSelf._internal.onEvent = declUtils\n                .consolidateObjects( vmSelf._internal.onEvent, jsonData.onEvent );\n\n            vmSelf._internal.grids = declUtils.consolidateObjects( vmSelf._internal.grids, jsonData.grids );\n\n            vmSelf._internal.chartProviders = declUtils.consolidateObjects( vmSelf._internal.chartProviders, jsonData.chartProviders );\n\n            vmSelf._internal.editConfig = declUtils.consolidateObjects( vmSelf._internal.editConfig, jsonData.editConfig );\n\n            if( jsonData.ports ) {\n                vmSelf._internal.ports = declUtils.consolidateObjects( vmSelf._internal.ports, jsonData.ports );\n            }\n\n            vmSelf._internal.lifecycleHooks = declUtils.consolidateObjects( vmSelf._internal.lifecycleHooks, jsonData.lifecycleHooks );\n\n            if( jsonData.selectionModels ) {\n                vmSelf._internal.selectionModels = declUtils.consolidateObjects( vmSelf._internal.selectionModels, jsonData.selectionModels );\n            }\n        }\n    };\n\n    /**\n      * ----------------------------------------------------<br>\n      * Define public API <BR>\n      * ----------------------------------------------------<br>\n      */\n    /**\n      * Override the default implementation to return more helpful information.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} Text used to identify the ID of the DeclViewModel (e.g. 'modelId' + an optional 'url').\n      */\n    vmSelf.toString = function() {\n        if( vmSelf.getPanelId() ) {\n            return vmSelf._internal.modelId + '  modelName: ' + vmSelf.getPanelId();\n        }\n\n        return vmSelf._internal.modelId + '  modelName: ' + '???';\n    };\n\n    /**\n      * Get the tracking token for the view model\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {DeclViewModelToken} token\n      */\n    vmSelf.getToken = function() {\n        return vmSelf._internal.token;\n    };\n\n    /**\n      * Get ID/Name of this declViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n      */\n    vmSelf.getPanelId = function() {\n        return vmSelf._internal.panelId;\n    };\n\n    /**\n      * Get ID of this declViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} The ID used for unique with aw-include\n      */\n    vmSelf.getViewId = function() {\n        return vmSelf._internal.viewId;\n    };\n\n    /**\n      * Get DeclAction with the given ID.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} actionId - The ID of the DeclAction to return.\n      * @return {DeclAction} The DeclAction with the given ID (or FALSEY if not found);\n      */\n    vmSelf.getAction = function( actionId ) {\n        return vmSelf._internal.actions[ actionId ];\n    };\n\n    /**\n      * Get port's obj with the given name.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} portName - The name of the port.\n      * @return {Object} The port's sync object and action.\n      */\n    vmSelf.getPortById = function( portName ) {\n        return vmSelf._internal.ports[ portName ];\n    };\n\n    /**\n      * Get the DataParseDefinition in the DeclViewModel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @param {String} id - The ID of the DataParseDefinition to return.\n      * @return {Object} The dataParseDefinition\n      */\n    vmSelf.getDataParseDefinition = function( id ) {\n        return vmSelf._internal.dataParseDefinitions[ id ];\n    };\n\n    /**\n      * Get the functions in the DeclViewModel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The functions\n      */\n    vmSelf.getFunctions = function() {\n        return vmSelf._internal.functions;\n    };\n\n    /**\n      * Get array of any subPanels defined.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {ObjectArray} The array of sub-panel that have been 'merged' into this 'target' 'declViewModel'\n      *         (or NULL if no panels have been added).\n      */\n    vmSelf.getSubPanels = function() {\n        return vmSelf._internal.subPanels;\n    };\n\n    /**\n      * Get sub panel of the given panel ID\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      * @return {Object} The sub-panel state object\n      */\n    vmSelf.getSubPanel = function( subPanelId ) {\n        return _.find( vmSelf._internal.subPanels, {\n            panelId: subPanelId\n        } );\n    };\n\n    /**\n      * Gets the edit configuration object\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {Object} The edit configuration object\n      */\n    vmSelf.getEditConfiguration = function() {\n        return vmSelf._internal.editConfig;\n    };\n\n    /**\n      * Get lifecycle hooks\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The lifecycle hooks\n      */\n    vmSelf.getLifecycleHooks = function() {\n        return vmSelf._internal.lifecycleHooks;\n    };\n\n    /**\n      * Get selection models\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The selection models\n      */\n    vmSelf.getSelectionModels = function() {\n        return vmSelf._internal.selectionModels;\n    };\n\n    /**\n      * Add a sub-panel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel that has been 'merged' into this 'target'\n      *            'declViewModel'.\n      */\n    vmSelf.addSubPanel = function( subPanelId ) {\n        if( !vmSelf._internal.subPanels ) {\n            vmSelf._internal.subPanels = [];\n        }\n\n        // remove the old panel with the input ID if exist\n        if( vmSelf.getSubPanel( subPanelId ) ) {\n            vmSelf.removeSubPanel( subPanelId );\n        }\n\n        var subPanel = {\n            panelId: subPanelId,\n            contextChanged: false\n        };\n\n        if( logger.isDeclarativeLogEnabled() ) {\n            logger.declarativeLog( 'DECLARATIVE TRACE - Add Subpanel ' + subPanelId );\n        }\n\n        declModelRegistrySvc.registerModel( 'SubPanel', subPanel, 'panelId', 'id' );\n\n        vmSelf._internal.subPanels.push( subPanel );\n    };\n\n    /**\n      * Remove specified sub panel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      */\n    vmSelf.removeSubPanel = function( subPanelId ) {\n        if( logger.isDeclarativeLogEnabled() ) {\n            logger.declarativeLog( 'DECLARATIVE TRACE - Remove Subpanel ' + subPanelId );\n        }\n\n        // un-subscribe events for the sub-panel\n        var subscriptions = vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ];\n\n        _.forEach( subscriptions, function( subDef ) {\n            eventBus.unsubscribe( subDef );\n        } );\n\n        delete vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ];\n\n        _.remove( vmSelf._internal.subPanels, function( subPanel ) {\n            if( subPanel.panelId === subPanelId ) {\n                declModelRegistrySvc.unregisterModel( 'SubPanel', subPanel, 'panelId', 'id' );\n\n                return true;\n            }\n\n            return false;\n        } );\n    };\n\n    /**\n      * Add the given event subscription to the collection of event subscriptions for a given subPanel ID.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      * @param {Object} subDef - The event subscription to add\n      */\n    vmSelf.addSubPanelEventSubscription = function( subPanelId, subDef ) {\n        var subDefs = vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ];\n\n        if( !subDefs ) {\n            subDefs = [];\n\n            vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ] = subDefs;\n        }\n\n        subDefs.push( subDef );\n    };\n\n    /**\n      * ----------------------------------------------------<br>\n      * ----------------------------------------------------<br>\n      */\n\n    /**\n      * Get current condition states map.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} A map of a 'conditionName' property to its current true/false state.\n      */\n    vmSelf.getConditionStates = function() {\n        if( vmSelf._internal.conditionStates ) {\n            return vmSelf._internal.conditionStates;\n        }\n\n        return {};\n    };\n\n    /**\n      * This method subscribes CDM update/modify event in declViewModelObject and also register corresponding\n      * handler to that.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      */\n    vmSelf.attachEvents = function() {\n        var handler = function( data ) {\n            var objs = data.updatedObjects;\n            if( !objs ) {\n                objs = data.modifiedObjects;\n            }\n\n            var operationName = null;\n            if( vmSelf && vmSelf.vmo ) {\n                operationName = vmSelf.vmo.operationName;\n            }\n\n            _.forEach( objs, function( object ) {\n                if( object && vmSelf.objects ) {\n                    const newVmo = viewModelObjectSrv.createViewModelObject( object.uid, operationName );\n                    viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject( newVmo,\n                        vmSelf.objects );\n                }\n            } );\n        };\n\n        var cdmUpdateEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.updated' ];\n        if( !cdmUpdateEventDef ) {\n            vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.updated' ] = [ eventBus.subscribe(\n                'cdm.updated', handler ) ];\n        }\n        var cdmModifiedEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.modified' ];\n        if( !cdmModifiedEventDef ) {\n            vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.modified' ] = [ eventBus.subscribe(\n                'cdm.modified', handler ) ];\n        }\n    };\n\n    /**\n      * Attach a model object to this DeclViewModel. All the properties of the model object will be consolidated\n      * to DeclViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} uid - The UID of model object to attach\n      * @param {String} operationName - The operation being performed on model object\n      * @param {String} owningObjUid - The UID of owning object\n      * @param {Object} serverVMO - The VMO which was returned from the server.\n      *\n      * @returns {ViewModelObject} The object created to wrap the IModelObject specified by the given model information.\n      */\n    vmSelf.attachModelObject = function( uid, operationName, owningObjUid, serverVMO ) {\n        if( uid ) {\n            // Build the vmo.\n            var vmo = viewModelObjectSrv.createViewModelObject( uid, operationName, owningObjUid, serverVMO );\n            if( vmo ) {\n                vmo.operationName = operationName;\n                vmSelf.attachEvents();\n\n                // Update the underlying object properties.\n                if( vmo.type === 'Awp0XRTObjectSetRow' ) {\n                    // Get underlying target object's UID if 'awp0Target' property exists\n                    if( vmo.props && vmo.props.awp0Target ) {\n                        var targetUID = vmo.props.awp0Target.dbValue;\n                        var targetMO = clientDataModel.getObject( targetUID );\n                        if( targetMO ) {\n                            var targetVMO = viewModelObjectSrv.constructViewModelObjectFromModelObject( targetMO, operationName, null, null, true );\n                            var props = targetVMO.props;\n                            _.forEach( props, function( prop ) {\n                                if( prop && !vmo.props.hasOwnProperty( prop.propertyName ) ) {\n                                    if( prop.intermediateObjectUids ) {\n                                        prop.intermediateObjectUids.push( targetUID );\n                                    } else {\n                                        prop.intermediateObjectUids = [ targetUID ];\n                                    }\n                                    vmo.props[ prop.propertyName ] = prop;\n                                }\n                            } );\n                        }\n                    }\n                }\n            }\n\n            return vmo;\n        }\n        return undefined;\n    };\n\n    // ======================== Edit Handler Interface ===================================================//\n\n    if( !vmSelf._internal.eventTopicEditInProgress ) {\n        vmSelf._internal.eventTopicEditInProgress = declViewModelJson && declViewModelJson._viewModelId ?\n            declViewModelJson._viewModelId + '_editInProgress' : '_editInProgress';\n    }\n    /**\n      * @param {*} dvmSelf declViewModel instance\n      * @param {*} isEnabled true/false\n      */\n    var setSelectionEnabled = function( dvmSelf, isEnabled ) {\n        var dataProviders = dvmSelf.dataProviders;\n        _.forOwn( dataProviders, function( dataProvider ) {\n            dataProvider.setSelectionEnabled( isEnabled );\n        } );\n    };\n    /**\n      * @param {*} stateName edit handler state name\n      * @param {*} dvmSelf declViewModel itself\n      */\n    var _notifyEditStateChange = function( stateName, dvmSelf ) {\n        dvmSelf._editingState = stateName;\n        dvmSelf._editing = stateName === 'starting';\n\n        setSelectionEnabled( dvmSelf, dvmSelf._editing );\n\n        // Add to the appCtx about the editing state\n        appCtxSvc.updateCtx( dvmSelf._internal.eventTopicEditInProgress, dvmSelf._editing );\n\n        eventBus.publish( dvmSelf._internal.eventTopicEditInProgress, vmSelf._editing );\n    };\n\n    // Revisitme - This should ideally be done inside destroy. Commenting it out till we get a use case to fix it properly.\n    // appCtxSvc.unRegisterCtx( vmSelf._internal.eventTopicEditInProgress );\n\n    /**\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @param {*} dvmSelf declViewModel instance\n      * @returns {*} viewModelCollection view model collection as array\n      */\n    var collectViewModelObjects = function( dvmSelf ) {\n        var dataProviders = dvmSelf.dataProviders;\n        var viewModelCollection = [];\n        _.forOwn( dataProviders, function( dataProvider ) {\n            viewModelCollection = viewModelCollection.concat( dataProvider.viewModelCollection.getLoadedViewModelObjects() );\n        } );\n        return viewModelCollection;\n    };\n\n    /**\n      * isDirty implementation of edit-handler interface\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.isDirty = function() {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        return editUtilsService._isDirty( viewModelCollection );\n    };\n\n    /**\n      *This function implements the start edit function edit handler interface\n      *@memberof viewModelProcessingFactory.DeclViewModel\n      *@param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n      *@returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.startEdit = function( editOptions ) {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        var editConfig = vmSelf.getEditConfiguration();\n        editConfig.sourceModel = vmSelf.getViewId();\n        var dataCtxNode = {\n            data: vmSelf,\n            ctx: appCtxSvc.ctx\n        };\n        const saveEditStateChangeCallback = function() {\n            _notifyEditStateChange( 'saved', vmSelf );\n        };\n        return editUtilsService._startEdit( dataCtxNode, vmSelf, viewModelCollection, editConfig, saveEditStateChangeCallback, editOptions ).then( function() {\n            if( !editOptions ) {\n                _notifyEditStateChange( 'starting', vmSelf );\n            }\n        } );\n    };\n\n    /**\n      * This is the cancel edits implementation of edit-handler interface.\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.cancelEdits = function() {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        var dataCtxNode = {\n            data: vmSelf,\n            ctx: appCtxSvc.ctx\n        };\n        var editConfig = vmSelf.getEditConfiguration();\n        return editUtilsService._cancelEdits( dataCtxNode, vmSelf, viewModelCollection, editConfig ).then( function() {\n            _notifyEditStateChange( 'canceling', vmSelf );\n        } );\n    };\n\n    /**\n      * This function implements the save edits function edit handler interface\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.saveEdits = function() {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        var editConfig = vmSelf.getEditConfiguration();\n        var dataCtxNode = {\n            data: vmSelf,\n            ctx: appCtxSvc.ctx\n        };\n        return editUtilsService._saveEdits( dataCtxNode, vmSelf, viewModelCollection, editConfig ).then( function() {\n            _notifyEditStateChange( 'saved', vmSelf );\n        } );\n    };\n\n    /**\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {*} boolean\n      */\n    vmSelf.editInProgress = function() {\n        return vmSelf._editing;\n    };\n\n    // ======================== End of Edit Handler Interface ===================================================//\n\n    /**\n      * Check if this 'declViewModel' is 'destroyed' and should not be used.\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {Boolean} TRUE if this DeclViewModel has had it's 'destroy' method called and should no longer be\n      *         used or accessed for any purpose.\n      */\n    vmSelf.isDestroyed = function() {\n        return vmSelf._internal.isDestroyed;\n    };\n\n    /**\n      * ---------------------------------------------------------------------------<BR>\n      * Property & Function definition complete....Finish initialization. <BR>\n      * ---------------------------------------------------------------------------<BR>\n      */\n    if( declViewModelJson ) {\n        vmSelf._internal.setJsonData( declViewModelJson );\n        vmSelf._internal.setViewModelJson( declViewModelJson );\n    }\n\n    declModelRegistrySvc.registerModel( 'DeclViewModel', vmSelf, '_internal.panelId', '_internal.modelId' );\n}; // DeclViewModel\n\n/**\n  * Update the property in the 'target' object with the same value as the 'source' object based on the given\n  * 'path' to that property.\n  * <P>\n  * Note: This function handles the 'special' property names used in the 'attrHolder' object used by the\n  * 'modelPropertyService' during the initial property creation.\n  *\n  * @param {String} dataPath - The path to the property in the original 'declViewModelJson' 'data' object used as\n  *            the basis of the property in the 'source' & 'target' to be updated.\n  *\n  * @param {ViewModelObject} sourceObject - The 'source' object of the value to apply.\n  *\n  * @param {ViewModelObject} targetObject - The 'target' object the value will be applies to.\n  *\n  * @return {Boolean} TRUE if the updated value requires i18n processing.\n  */\nexport let updateDataProperty = function( dataPath, sourceObject, targetObject ) {\n    /**\n      * Check if it is a 'special' name that should use the mapped property name.\n      */\n    var lastDotNdx = dataPath.lastIndexOf( '.' );\n\n    var leafPropName = dataPath.substring( lastDotNdx + 1 );\n\n    if( declUtils.attrHolderPropName.indexOf( leafPropName ) > -1 ) {\n        var parentPath = dataPath.substring( 0, lastDotNdx );\n\n        modelPropertySvc.updateProperty( parentPath, leafPropName, sourceObject, targetObject );\n\n        return false;\n    }\n\n    var newValue = _.get( sourceObject, dataPath );\n\n    _.set( targetObject, dataPath, newValue );\n\n    return _.isString( newValue ) && /^{{i18n\\./.test( newValue ) || _.isObject( newValue ) && /^{{i18n\\./.test( newValue.text );\n};\n\n/**\n  * Return a new instance of a {DeclVideModel} initialized based on the given information.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  *\n  * @return {DeclViewModel} A newly created DeclViewModel object with all properties set to their default values\n  *         other than those set via any given JSON object..\n  */\nexport let createDeclViewModel = function( declViewModelJson ) {\n    return new DeclViewModel( declViewModelJson );\n};\n\n/**\n  * Resolve value of ctx and subPanelContext\n  * @param {String} propValue - Prop Value like {{ctx.title}} or {{subPanelContext.title}}.\n  * @param {String} propName - Prop name of element.\n  * @param {Object} dataObj - data object which will have ctx obj or subcontext.\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  */\nfunction resolvePropValue( propValue, propName, dataObj, parentJsonObject ) {\n    var newVal = parsingUtils.getStringBetweenDoubleMustaches( propValue );\n    var val = _.get( dataObj, newVal );\n    if( val ) {\n        parentJsonObject[ propName ] = val;\n    } else {\n        val = AwInterpolateService.instance( propValue )( dataObj );\n        if( val ) {\n            parentJsonObject[ propName ] = val;\n        } else {\n            parentJsonObject[ propName ] = '';\n        }\n    }\n}\n\n/**\n  * Recursively initialize the property values of the given JSON data object with the current value of any bound\n  * appContext properties (bound via {{ctx.*}}).\n  * <P>\n  * Note: While on the 'exports' object, this API is only meant for internal/testing use.\n  *\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  */\nexport let initViewModel = function( parentJsonObject, subPanelContext, props ) {\n    _.forEach( parentJsonObject, function( propValue, propName ) {\n        // Check if starts with '{{ctx.' and ends with '}}'\n        if( _.isString( propValue ) && /^{{ctx\\..*}}$/.test( propValue ) ) {\n            resolvePropValue( propValue, propName, appCtxSvc, parentJsonObject );\n        } else if( _.isString( propValue ) && /^{{subPanelContext\\..*}}$/.test( propValue ) ) {\n            // Check if starts with '{{subPanelContext.' and ends with '}}'\n            resolvePropValue( propValue, propName, { subPanelContext: subPanelContext }, parentJsonObject );\n        } else if( _.isString( propValue ) && /^{{props\\..*}}$/.test( propValue ) && props ) {\n            // Check if starts with '{{props.' and ends with '}}'\n            resolvePropValue( propValue, propName, { props: props }, parentJsonObject );\n        } else if( _.isObject( propValue ) ) {\n            exports.initViewModel( propValue, subPanelContext, props );\n        }\n    } );\n};\n\n/**\n  * Sanitize String properties of viewModelProperty.\n  *\n  * @param {Object} viewModelProperty - Object to check.\n  *\n  * @return {ViewModelProperty} sanitized viewModelProperty.\n  */\nfunction _sanitize( viewModelProperty ) {\n    _.forOwn( viewModelProperty, function( value, key ) {\n        if( propertiesToSanitize[ key ] ) {\n            if( _.isString( value ) ) {\n                viewModelProperty[ key ] = sanitizer.sanitizeHtmlValue( value );\n            } else if( _.isArray( value ) ) {\n                viewModelProperty[ key ] = sanitizer.sanitizeHtmlValues( value );\n            }\n        }\n    } );\n\n    return viewModelProperty;\n}\n/**\n  * Process JSON data, create 'ViewModelProperty' object and fill in data for further processing.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise will be resolved with a new 'declViewModel' object populated with information\n  *         from the given 'declViewModelJson'.\n  */\nexport let processViewModel = function( declViewModelJson, subPanelContext, props ) {\n    var jsonData = declViewModelJson;\n\n    debugService.debug( 'lifeCycles', declViewModelJson._viewModelId, 'init' );\n\n    var newDeclViewModel = exports.createDeclViewModel( declViewModelJson );\n\n    /**\n      * Check if we have any 'data' objects we need to apply appContext to.\n      */\n    if( !_.isEmpty( jsonData.data ) ) {\n        /**\n          * Since 'initViewModel' changes the object given to it, make a clone now to leave the original JSON\n          * object untouched.\n          */\n        var dataClone = _.cloneDeep( jsonData.data );\n\n        exports.initViewModel( dataClone, subPanelContext, props );\n\n        /**\n          *\n          */\n        var compoundObjectMap = {};\n        var compoundViewModelObjectMap = {};\n\n        // If 'uid' is given in view model data, attach the model object to this DeclViewModel\n        if( dataClone.uid ) {\n            newDeclViewModel.vmo = newDeclViewModel.attachModelObject( dataClone.uid, dataClone.operationName,\n                dataClone.owningObjUid );\n            newDeclViewModel.uid = dataClone.uid;\n        }\n\n        _.forEach( dataClone, function( dataProp, propName ) { // eslint-disable-line complexity\n            /**\n              * We do not want model objects as declViewModelObjects, so do not allow this 'marker' property on\n              * the new object. This case was already handled above.\n              */\n            if( propName === 'uid' ) {\n                return;\n            }\n\n            /**\n              * Do not process properties beginning with underscore as view model properties.\n              */\n            if( _.startsWith( propName, '_' ) ) {\n                newDeclViewModel[ propName ] = dataProp;\n                return;\n            }\n\n            if( propName === 'objects' ) {\n                if( !newDeclViewModel.objects ) {\n                    newDeclViewModel.objects = {};\n                }\n\n                _.forEach( dataProp, function( dataPropValues, dataPropName ) {\n                    var vmos = [];\n                    dataPropValues.forEach( function( dataPropValue ) {\n                        var viewModelObject = newDeclViewModel.attachModelObject( dataPropValue.uid,\n                            dataClone.operationName, dataClone.owningObjUid, dataPropValue );\n\n                        if( dataPropValue.selected ) {\n                            newDeclViewModel.vmo = viewModelObject;\n                        }\n                        vmos.push( viewModelObject );\n                    } );\n\n                    // same uid may map to multiple vmo\n                    if( vmos.length > 1 ) {\n                        newDeclViewModel.objects[ dataPropName ] = vmos;\n                    } else {\n                        newDeclViewModel.objects[ dataPropName ] = vmos[ 0 ];\n                    }\n                } );\n\n                return;\n            }\n\n            /**\n              * Create a new viewModelProperty based on the JSON data's 'data' properties\n              */\n\n            let propAttrHolder = declUtils.buildPropHolder( dataProp );\n\n            // If this is not a view model prop, just save the object to the data.\n            if( _.isEmpty( propAttrHolder ) ) {\n                newDeclViewModel[ propName ] = dataProp;\n                return;\n            }\n\n            /**\n              * Make sure we have a 'propName' set.\n              */\n            if( !propAttrHolder.propName ) {\n                propAttrHolder.propName = propName;\n            }\n\n            // process compound property, like revision:item_revision_id\n            var isCompoundProp = false;\n\n            var vmProp = null;\n\n            if( propName.indexOf( _compoundPropNameDelimiter ) > 0 &&\n                 propAttrHolder.dbValue.indexOf( _compoundPropValueDelimiter ) > 0 ) {\n                var compoundProps = propAttrHolder.dbValue.split( _compoundPropValueDelimiter );\n\n                var objectRefProp = _.get( newDeclViewModel, compoundProps[ 0 ] );\n\n                if( objectRefProp.type === 'OBJECT' || objectRefProp.type === 'OBJECTARRAY' ) {\n                    isCompoundProp = true;\n\n                    var modelObject = null;\n                    var childFullPropertyName = '';\n                    var i = 0;\n\n                    for( i = 0; i < compoundProps.length - 1; i++ ) {\n                        if( i === 0 ) {\n                            modelObject = clientDataModel.getObject( objectRefProp.dbValues[ 0 ] );\n                        } else if( modelObject ) {\n                            childFullPropertyName += '__';\n                            objectRefProp = _.get( modelObject.props, compoundProps[ i ] );\n                            modelObject = clientDataModel.getObject( objectRefProp.dbValues[ 0 ] );\n                        }\n                        childFullPropertyName += compoundProps[ i ];\n\n                        if( !compoundObjectMap.hasOwnProperty( childFullPropertyName ) ) {\n                            _.set( compoundObjectMap, childFullPropertyName, modelObject );\n                        }\n                    }\n\n                    var compoundViewModelObject = _.get( compoundViewModelObjectMap, childFullPropertyName );\n\n                    if( !compoundViewModelObject && modelObject ) {\n                        compoundViewModelObject = viewModelObjectSrv.createViewModelObject( modelObject.uid,\n                            dataClone.operationName );\n                        _.set( compoundViewModelObjectMap, childFullPropertyName, compoundViewModelObject );\n                    }\n\n                    if( compoundViewModelObject ) {\n                        vmProp = _.get( compoundViewModelObject.props, compoundProps[ i ] );\n                        if( !vmProp ) {\n                            // skip this view model property when the compound property doesn't exist in referenced object\n                            return;\n                        }\n\n                        _.set( vmProp, 'intermediateCompoundObjects', compoundObjectMap );\n                    }\n                }\n            }\n\n            if( !vmProp ) {\n                vmProp = modelPropertySvc.createViewModelProperty( propAttrHolder );\n            }\n\n            // other properties\n            if( !isCompoundProp && !declUtils.isNil( dataProp.dbValue ) ) {\n                vmProp.dbValue = dataProp.dbValue;\n            }\n\n            if( dataProp.dataProvider ) {\n                // we have an lov, but the api is defined using the dataProvider\n                vmProp.dataProvider = dataProp.dataProvider;\n                // initialize lovApi here? we could if we had the prop scope...\n                // instead, postpone till first expand\n                vmProp.hasLov = true;\n                // allow empty LOV entry\n                vmProp.emptyLOVEntry = dataProp.emptyLOVEntry;\n            }\n\n            if( !declUtils.isNil( dataProp.uiValue ) ) {\n                vmProp.uiValue = dataProp.uiValue;\n            }\n\n            if( !declUtils.isNil( dataProp.propertyLabelDisplay ) ) {\n                vmProp.propertyLabelDisplay = dataProp.propertyLabelDisplay;\n            }\n\n            // attach method for accessing the viewModel\n            vmProp.getViewModel = function() {\n                return newDeclViewModel;\n            };\n\n            /* revisitme Shaishav\n             * Hint: Sanitization failes some examples. Need to investigate.\n             newDeclViewModel[ propName ] = _sanitize( vmProp );\n             */\n            newDeclViewModel[ propName ] = vmProp;\n        } );\n    }\n\n    if( jsonData.grids ) {\n        newDeclViewModel.grids = _.cloneDeep( jsonData.grids );\n        exports.initViewModel( newDeclViewModel.grids, subPanelContext );\n    }\n\n    if( jsonData.columnProviders ) {\n        newDeclViewModel.columnProviders = {};\n        var mockedColumnProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.columnProviders;\n        _.forEach(\n            jsonData.columnProviders,\n            function( jsonColumnProvider, cpName ) {\n                if( mockedColumnProvider && mockedColumnProvider[ cpName ] ) {\n                    jsonColumnProvider = mockedColumnProvider[ cpName ];\n                }\n                newDeclViewModel.columnProviders[ cpName ] = jsonColumnProvider;\n            } );\n    }\n\n    if( jsonData.chartProviders ) {\n        if( !newDeclViewModel.chartProviders ) {\n            newDeclViewModel.chartProviders = {};\n        }\n        newDeclViewModel.chartProviders = jsonData.chartProviders;\n        exports.initViewModel( newDeclViewModel.chartProviders, subPanelContext, props );\n\n        _.forEach( newDeclViewModel.chartProviders, function( jsonChartProvider, chartProviderName ) {\n            newDeclViewModel.chartProviders[ chartProviderName ].name = chartProviderName;\n        } );\n    }\n\n    if( jsonData.commands ) {\n        newDeclViewModel.commands = _.cloneDeep( jsonData.commands );\n\n        exports.initViewModel( newDeclViewModel.commands );\n    }\n\n    if( jsonData.commandHandlers ) {\n        newDeclViewModel.commandHandlers = jsonData.commandHandlers;\n    }\n\n    if( jsonData.commandPlacements ) {\n        newDeclViewModel.commandPlacements = jsonData.commandPlacements;\n    }\n\n    if( jsonData.objectSetSource ) {\n        newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n    }\n\n    if( jsonData.objectSetSource ) {\n        newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n    }\n\n    if( jsonData.editContext ) {\n        /**\n             * revisitme\n             * editHandlerFactory is not ported yet\n\n                editHandlerService.setEditHandler( editHandlerFactory.createEditHandler( dataSourceService\n                    .createNewDataSource( {\n                        declViewModel: newDeclViewModel\n                    } ) ), jsonData.editContext );\n\n             */\n        // set this handler active\n        editHandlerService.setActiveEditHandlerContext( jsonData.editContext );\n    }\n\n    if( jsonData.editHandlers ) {\n        newDeclViewModel.editHandlers = jsonData.editHandlers;\n    }\n    return _populateDataProviders( declViewModelJson, newDeclViewModel, subPanelContext );\n};\n\n/**\n  * Update localization texts on the properties created based on data section\n  *\n  * @param {DeclViewModel} objectRoot - The 'declViewModel' to scan for possible I18n string replacements and the\n  *            model to apply those replacements to.\n  *\n  * @param {Object} i18nValueMap - Context to search the input string from.\n  *            <P>\n  *            Note: All property names in this object are possible to be used as string replacements. However,\n  *            most uses of this service will use 'i18n.' as the prefix in their text 'path'. Therefore, the\n  *            'i18n' property of this object is the most important property.\n  *\n  * @param {Number} level - Level in the recursive walk of the i18n properties.\n  *\n  * @param {StringMap} paramValues -\n  */\nexport let updateI18nTexts = function( objectRoot, i18nValueMap, level, paramValues ) {\n    _.forEach( objectRoot, function( propValue, propName ) {\n        /**\n          * Check if <BR>\n          * There is NO property value OR <BR>\n          * It is a property that is 'reserved' (scope, ctx, data) OR<BR>\n          * It is known to be invalid to traverse (propertyDescriptor*, props, modelType, etc.)\n          * <P>\n          * Note: We are doing this to avoid cyclic traversals and data known to not contains i18n bindings.\n          */\n        if( !propValue || propValue.propertyDescriptor ||\n             /^(scope|ctx|data|props|eventData|eventMap|propertyDescriptor(|s|sMaps)|modelType|_internal|\\$.*)$/.test( propName ) ||\n             _.isFunction( propValue ) || _.isNumber( propValue ) || _.isBoolean( propValue ) ||\n             level === 1 && propName === 'action' ) {\n            return true;\n        }\n\n        /**\n          * Skip binding to any '_internal' properties or those starting with '$' or those with 'null' values, or\n          * properties from a model object\n          */\n        if( _.isString( propValue ) ) {\n            if( /^{{i18n\\./.test( propValue ) ) {\n                var results = propValue.match( parsingUtils.REGEX_DATABINDING );\n\n                if( results && results.length === 4 ) {\n                    var textPath = results[ 2 ];\n\n                    var val = _.get( i18nValueMap, textPath );\n\n                    if( paramValues && !_.isEmpty( paramValues ) ) {\n                        val = messagingService.applyMessageParamsWithoutContext( val, paramValues );\n                    }\n\n                    if( val ) {\n                        objectRoot[ propName ] = val;\n                    } else {\n                        // use i18n key as fall back if no i18n text found, slice the leading 'i18n.' in textPath to get key\n                        objectRoot[ propName ] = textPath.slice( 5 );\n                    }\n                }\n            }\n        } else if( _.isObject( propValue ) && propValue.text && propValue.params ) {\n            objectRoot[ propName ] = propValue.text;\n            exports.updateI18nTexts( objectRoot, i18nValueMap, nextLevel, propValue.params );\n        } else {\n            if( !_.isEmpty( propValue ) ) {\n                var nextLevel = level + 1;\n\n                if( propName === 'dataProviders' ) {\n                    /**\n                      * Resolve any i18n bindings in dataProvider command titles.\n                      */\n                    _.forEach( propValue, function( propValue2 ) {\n                        if( propValue2 && propValue2.commands ) {\n                            exports.updateI18nTexts( propValue2.commands, i18nValueMap, nextLevel );\n                        }\n                    } );\n                } else {\n                    exports.updateI18nTexts( propValue, i18nValueMap, nextLevel );\n                }\n            }\n        }\n        return undefined;\n    } );\n};\n\nconst reduceParentJsonObject = function( parentJsonObject, resolvedData, propNameArg ) {\n    _.forEach( parentJsonObject, function( propValue, propName ) {\n        if( _.isString( propValue ) && /^{{subPanelContext\\..*}}$/.test( propValue ) && propNameArg ) {\n            _.set( resolvedData, propNameArg + '.' + propName, propValue );\n        } else if( _.isObject( propValue ) ) {\n            let propNameArg2 = propNameArg ? propNameArg + '.' + propName : propName;\n            reduceParentJsonObject( propValue, resolvedData, propNameArg2 );\n        }\n    } );\n};\n\nexport let resolveSubPanelContext = function( parentJsonObject, subPanelContext, resolvedData ) {\n    reduceParentJsonObject( parentJsonObject, resolvedData );\n    exports.initViewModel( resolvedData, subPanelContext );\n};\n\nexport let getInputDataExpression = function( jsonObject ) {\n    let expressionPaths = [];\n    _.forEach( jsonObject, function( propValue, propName ) {\n        if( _.isString( propValue ) && _.startsWith( propValue, '{{' ) && propName ) {\n            let path = parsingUtils.getStringBetweenDoubleMustaches( propValue );\n            expressionPaths.push( {\n                [ propName ]: path\n            } );\n        } else if( _.isObject( propValue ) ) {\n            expressionPaths.push( ...getInputDataExpression( propValue ) );\n        }\n    } );\n    return expressionPaths;\n};\n\nexport let shouldCreateViewModelProperty = function( dataProp ) {\n    var propAttrHolder = {};\n    _.forEach( dataProp, function( dataPropValue, dataPropName ) {\n        if( declUtils.attrHolderPropName.indexOf( dataPropName ) > -1 ) {\n            propAttrHolder[ dataPropName ] = dataPropValue;\n        }\n    } );\n    return !_.isEmpty( propAttrHolder );\n};\n\n/**\n  * Check if any view model on the page is currently active\n  *\n  * @returns {Boolean} true if active\n  */\nexport let isAnyViewModelActive = function() {\n    return sharedViewModelToken !== 0;\n};\n\nexports = {\n    updateDataProperty,\n    createDeclViewModel,\n    initViewModel,\n    processViewModel,\n    updateI18nTexts,\n    isAnyViewModelActive,\n    resolveSubPanelContext,\n    shouldCreateViewModelProperty\n};\nexport default exports;\n\n"]},"metadata":{},"sourceType":"module"}
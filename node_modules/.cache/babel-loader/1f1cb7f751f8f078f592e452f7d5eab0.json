{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/iconMapService\n */\nimport _ from 'lodash';\nimport cfgSvc from 'js/configurationService';\nlet exports;\n\nlet _typeFiles;\n\nlet _aliasRegistry;\n/**\n * Check if the given iconName is an alias name for the actual icon filename.\n *\n * @param {String} iconName - The name of the icon to any final iconName for.\n * @return {String} Final icon file name.\n */\n\n\nexport let resolveIconName = function (iconName) {\n  var key = iconName;\n\n  if (iconName && _aliasRegistry) {\n    key = _aliasRegistry[iconName];\n\n    if (!key) {\n      key = iconName;\n    }\n  }\n\n  return key;\n};\n/**\n * Return the name of the (SVG) file associated with the given type name (or NULL if the file is not cached).\n *\n * @param {String} typeName - Name of the type to return an icon filename for.\n * @return {String} The filename that contains the description of the icon defined for the given type.\n */\n\nexport let getTypeFileName = function (typeName) {\n  if (_typeFiles) {\n    var key = exports.resolveIconName('type' + typeName);\n\n    if (_.indexOf(_typeFiles, key, true) > -1) {\n      return key + '.svg';\n    } // If alias doesn't indicate the number try adding it.\n\n\n    key += '48';\n\n    if (_.indexOf(_typeFiles, key, true) > -1) {\n      return key + '.svg';\n    }\n  }\n\n  return null;\n};\nexport let loadConfiguration = async function () {\n  await cfgSvc.getCfg('typeFiles', false, true).then(typeFiles => {\n    _typeFiles = typeFiles;\n  });\n  await cfgSvc.getCfg('aliasRegistry', false, true).then(aliasRegistry => {\n    _aliasRegistry = aliasRegistry;\n  });\n};\nexports = {\n  resolveIconName,\n  getTypeFileName,\n  loadConfiguration\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"names":["_","cfgSvc","exports","_typeFiles","_aliasRegistry","resolveIconName","iconName","key","getTypeFileName","typeName","indexOf","loadConfiguration","getCfg","then","typeFiles","aliasRegistry"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/iconMapService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/iconMapService\n */\nimport _ from 'lodash';\nimport cfgSvc from 'js/configurationService';\n\nlet exports;\n\nlet _typeFiles;\n\nlet _aliasRegistry;\n\n/**\n * Check if the given iconName is an alias name for the actual icon filename.\n *\n * @param {String} iconName - The name of the icon to any final iconName for.\n * @return {String} Final icon file name.\n */\nexport let resolveIconName = function( iconName ) {\n    var key = iconName;\n    if( iconName && _aliasRegistry ) {\n        key = _aliasRegistry[ iconName ];\n        if( !key ) {\n            key = iconName;\n        }\n    }\n    return key;\n};\n\n/**\n * Return the name of the (SVG) file associated with the given type name (or NULL if the file is not cached).\n *\n * @param {String} typeName - Name of the type to return an icon filename for.\n * @return {String} The filename that contains the description of the icon defined for the given type.\n */\nexport let getTypeFileName = function( typeName ) {\n    if( _typeFiles ) {\n        var key = exports.resolveIconName( 'type' + typeName );\n        if( _.indexOf( _typeFiles, key, true ) > -1 ) {\n            return key + '.svg';\n        }\n\n        // If alias doesn't indicate the number try adding it.\n        key += '48';\n        if( _.indexOf( _typeFiles, key, true ) > -1 ) {\n            return key + '.svg';\n        }\n    }\n    return null;\n};\n\nexport let loadConfiguration = async function() {\n    await cfgSvc.getCfg( 'typeFiles', false, true ).then( ( typeFiles ) => {\n        _typeFiles = typeFiles;\n    } );\n\n    await cfgSvc.getCfg( 'aliasRegistry', false, true ).then( ( aliasRegistry ) => {\n        _aliasRegistry = aliasRegistry;\n    } );\n};\n\nexports = {\n    resolveIconName,\n    getTypeFileName,\n    loadConfiguration\n};\nexport default exports;\n\nloadConfiguration();\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,IAAIC,OAAJ;;AAEA,IAAIC,UAAJ;;AAEA,IAAIC,cAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,QAAV,EAAqB;EAC9C,IAAIC,GAAG,GAAGD,QAAV;;EACA,IAAIA,QAAQ,IAAIF,cAAhB,EAAiC;IAC7BG,GAAG,GAAGH,cAAc,CAAEE,QAAF,CAApB;;IACA,IAAI,CAACC,GAAL,EAAW;MACPA,GAAG,GAAGD,QAAN;IACH;EACJ;;EACD,OAAOC,GAAP;AACH,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,UAAUC,QAAV,EAAqB;EAC9C,IAAIN,UAAJ,EAAiB;IACb,IAAII,GAAG,GAAGL,OAAO,CAACG,eAAR,CAAyB,SAASI,QAAlC,CAAV;;IACA,IAAIT,CAAC,CAACU,OAAF,CAAWP,UAAX,EAAuBI,GAAvB,EAA4B,IAA5B,IAAqC,CAAC,CAA1C,EAA8C;MAC1C,OAAOA,GAAG,GAAG,MAAb;IACH,CAJY,CAMb;;;IACAA,GAAG,IAAI,IAAP;;IACA,IAAIP,CAAC,CAACU,OAAF,CAAWP,UAAX,EAAuBI,GAAvB,EAA4B,IAA5B,IAAqC,CAAC,CAA1C,EAA8C;MAC1C,OAAOA,GAAG,GAAG,MAAb;IACH;EACJ;;EACD,OAAO,IAAP;AACH,CAdM;AAgBP,OAAO,IAAII,iBAAiB,GAAG,kBAAiB;EAC5C,MAAMV,MAAM,CAACW,MAAP,CAAe,WAAf,EAA4B,KAA5B,EAAmC,IAAnC,EAA0CC,IAA1C,CAAkDC,SAAF,IAAiB;IACnEX,UAAU,GAAGW,SAAb;EACH,CAFK,CAAN;EAIA,MAAMb,MAAM,CAACW,MAAP,CAAe,eAAf,EAAgC,KAAhC,EAAuC,IAAvC,EAA8CC,IAA9C,CAAsDE,aAAF,IAAqB;IAC3EX,cAAc,GAAGW,aAAjB;EACH,CAFK,CAAN;AAGH,CARM;AAUPb,OAAO,GAAG;EACNG,eADM;EAENG,eAFM;EAGNG;AAHM,CAAV;AAKA,eAAeT,OAAf;AAEAS,iBAAiB"},"metadata":{},"sourceType":"module"}
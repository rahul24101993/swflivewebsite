{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Montior\n *\n * @module js/splmStatsPerformance\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport { STATE } from 'js/splmStatsProfiler';\n/**\n * Instances of this class represent a Monitor\n *\n * @class SPLMStatsPerformance\n */\n\nfunction SPLMStatsPerformance(profilerFactory) {\n  let self = this;\n  let _listeners = [];\n  let _benchmark = null;\n\n  self.addListener = function (listener) {\n    _listeners.push(listener);\n  };\n\n  self.setBenchmark = function (benchmark) {\n    _benchmark = benchmark;\n  };\n\n  self.addReporter = function (reporter) {\n    if (_benchmark) {\n      _benchmark.addReporter(reporter);\n    }\n  };\n\n  self.setTitle = function (title) {\n    _benchmark.setTitle(title);\n  };\n  /**\n   * Starts the monitoring -> Starts each profiler, then waits for the page to be completely settled (Ng, DOM, Network)\n   * Then promise resolves, and we report the data for each reporter attached\n   */\n\n\n  self.run = function () {\n    if (!self._profiler || self._profiler.state === STATE.DONE) {\n      _benchmark.start();\n\n      self._profiler = profilerFactory.createProfiler();\n\n      self._profiler.profile().then(elapsed => {\n        _benchmark.stop();\n\n        _benchmark.report(elapsed);\n      });\n    } else {\n      self._profiler.resetWait();\n    }\n  };\n\n  self.enable = function () {\n    _.forEach(_listeners, function (listener) {\n      listener.start(self);\n    });\n  };\n\n  self.disable = function () {\n    _.forEach(_listeners, function (listener) {\n      listener.stop(self);\n    });\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsPerformance;\n_c = SPLMStatsPerformance;\nexport default SPLMStatsPerformance;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsPerformance\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsPerformance\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsPerformance.js"],"names":["SPLMStatsPerformance","self","_listeners","_benchmark","STATE","profilerFactory","elapsed","_","listener"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,SAAA,KAAA,QAAA,sBAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,oBAAA,CAAA,eAAA,EAAiD;EAC7C,IAAIC,IAAI,GAAR,IAAA;EAEA,IAAIC,UAAU,GAAd,EAAA;EAEA,IAAIC,UAAU,GAAd,IAAA;;EAEAF,IAAI,CAAJA,WAAAA,GAAmB,UAAA,QAAA,EAAqB;IACpCC,UAAU,CAAVA,IAAAA,CAAAA,QAAAA;EADJD,CAAAA;;EAIAA,IAAI,CAAJA,YAAAA,GAAoB,UAAA,SAAA,EAAsB;IACtCE,UAAU,GAAVA,SAAAA;EADJF,CAAAA;;EAIAA,IAAI,CAAJA,WAAAA,GAAmB,UAAA,QAAA,EAAqB;IACpC,IAAA,UAAA,EAAiB;MACbE,UAAU,CAAVA,WAAAA,CAAAA,QAAAA;IACH;EAHLF,CAAAA;;EAMAA,IAAI,CAAJA,QAAAA,GAAgB,UAAA,KAAA,EAAkB;IAC9BE,UAAU,CAAVA,QAAAA,CAAAA,KAAAA;EADJF,CAAAA;EAIA;AACJ;AACA;AACA;;;EACIA,IAAI,CAAJA,GAAAA,GAAW,YAAW;IAClB,IAAI,CAACA,IAAI,CAAL,SAAA,IAAmBA,IAAI,CAAJA,SAAAA,CAAAA,KAAAA,KAAyBG,KAAK,CAArD,IAAA,EAA6D;MACzDD,UAAU,CAAVA,KAAAA;;MACAF,IAAI,CAAJA,SAAAA,GAAiBI,eAAe,CAAhCJ,cAAiBI,EAAjBJ;;MACAA,IAAI,CAAJA,SAAAA,CAAAA,OAAAA,GAAAA,IAAAA,CAAiCK,OAAF,IAAe;QAC1CH,UAAU,CAAVA,IAAAA;;QACAA,UAAU,CAAVA,MAAAA,CAAAA,OAAAA;MAFJF,CAAAA;IAHJ,CAAA,MAOO;MACHA,IAAI,CAAJA,SAAAA,CAAAA,SAAAA;IACH;EAVLA,CAAAA;;EAaAA,IAAI,CAAJA,MAAAA,GAAc,YAAW;IACrBM,CAAC,CAADA,OAAAA,CAAAA,UAAAA,EAAuB,UAAA,QAAA,EAAqB;MACxCC,QAAQ,CAARA,KAAAA,CAAAA,IAAAA;IADJD,CAAAA;EADJN,CAAAA;;EAMAA,IAAI,CAAJA,OAAAA,GAAe,YAAW;IACtBM,CAAC,CAADA,OAAAA,CAAAA,UAAAA,EAAuB,UAAA,QAAA,EAAqB;MACxCC,QAAQ,CAARA,IAAAA,CAAAA,IAAAA;IADJD,CAAAA;EADJN,CAAAA;;EAKA,OAAA,IAAA;AACH;;MAtDD,oB;KAASD,oB;AAwDT,eAAA,oBAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Montior\n *\n * @module js/splmStatsPerformance\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport { STATE } from 'js/splmStatsProfiler';\n\n/**\n * Instances of this class represent a Monitor\n *\n * @class SPLMStatsPerformance\n */\nfunction SPLMStatsPerformance( profilerFactory ) {\n    let self = this;\n\n    let _listeners = [];\n\n    let _benchmark = null;\n\n    self.addListener = function( listener ) {\n        _listeners.push( listener );\n    };\n\n    self.setBenchmark = function( benchmark ) {\n        _benchmark = benchmark;\n    };\n\n    self.addReporter = function( reporter ) {\n        if( _benchmark ) {\n            _benchmark.addReporter( reporter );\n        }\n    };\n\n    self.setTitle = function( title ) {\n        _benchmark.setTitle( title );\n    };\n\n    /**\n     * Starts the monitoring -> Starts each profiler, then waits for the page to be completely settled (Ng, DOM, Network)\n     * Then promise resolves, and we report the data for each reporter attached\n     */\n    self.run = function() {\n        if( !self._profiler || self._profiler.state === STATE.DONE ) {\n            _benchmark.start();\n            self._profiler = profilerFactory.createProfiler();\n            self._profiler.profile().then( ( elapsed ) => {\n                _benchmark.stop();\n                _benchmark.report( elapsed );\n            } );\n        } else {\n            self._profiler.resetWait();\n        }\n    };\n\n    self.enable = function() {\n        _.forEach( _listeners, function( listener ) {\n            listener.start( self );\n        } );\n    };\n\n    self.disable = function() {\n        _.forEach( _listeners, function( listener ) {\n            listener.stop( self );\n        } );\n    };\n    return self;\n}\n\nexport default SPLMStatsPerformance;\n"]},"metadata":{},"sourceType":"module"}
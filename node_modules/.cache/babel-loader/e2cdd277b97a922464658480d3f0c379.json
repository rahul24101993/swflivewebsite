{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This module includes the various AngularJS directives that present and control date and/or time entry widgets to the\n * user.\n * <P>\n * Note: We include 'jqueryui' as a parameter to be sure it finished loading before we get here.\n *\n * @module js/uwDirectiveDateTimeService\n */import dateTimeSvc from'js/dateTimeService';import localeSvc from'js/localeService';import eventBus from'js/eventBus';import Debug from'debug';import flatpickr from'flatpickr';var trace=new Debug('uwDirectiveDateTimeService');var _checked=false;let exports;/**\n * Set (if necessary) the locale specific properties of the JQueryUI date picker based on the currently set\n * locale.\n */export let assureDateTimeLocale=function(){if(!_checked){_checked=true;var promise=dateTimeSvc.getJQueryDatePickerTextBundle();if(promise){promise.then(function(jqTextBundle){if(jqTextBundle){//TODO: Map this to Flatpickr's localize (need to import it's bundles)\n// https://flatpickr.js.org/localization/#using-modules\n// $.datepicker.regional[ localeSvc.getLanguageCode() ] = jqTextBundle;\n// $.datepicker.setDefaults( jqTextBundle );\n}});}}};/**\n * Returns a new Date object based on the given Date value and the current format string using JQuery UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {String} dateString - the date string to be converted to a date object\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {Date} A new JS Date object based on the given object.\n */export let parseDate=function(dateString,format){if(!format){format=dateTimeSvc.getDateFormat();}return flatpickr.parseDate(dateString,format);};/**\n * Returns a new Date string value based on the given Date Object and the current format string using JQuery\n * UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {Object} dateTime - the Date object to be formatted\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {String} formatted date\n */export let formatDate=function(dateTime,format){if(!format){format=dateTimeSvc.getDateFormat();}return flatpickr.formatDate(dateTime,format);};/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */export let convertDateToMsec=function(queryVal){if(typeof queryVal!=='number'){try{queryVal=new Date(queryVal).getTime();}catch(e){trace('Invalid Date format',e);}}return queryVal>0?queryVal:Infinity;};exports={assureDateTimeLocale,parseDate,formatDate,convertDateToMsec};export default exports;/**\n * Setup to listen to changes in locale.\n *\n * @param {Object} localeInfo - Updated locale info\n *\n * @return {Void}\n */eventBus.subscribe('dateTime.changed',function(localeInfo){// eslint-disable-line no-unused-vars\n_checked=false;exports.assureDateTimeLocale();},'uwDirectiveDateTimeService');","map":null,"metadata":{},"sourceType":"module"}
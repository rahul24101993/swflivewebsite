{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsComponentProcessor\n */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsComponentProcessor\n */\nfunction SPLMStatsComponentProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _startComponentRenderTime = 0;\n  let _endComponentRenderTime = 0;\n  let componentMap = {};\n\n  const _reset = function () {\n    componentMap = {};\n  };\n\n  self.startComponentRenderTime = function () {\n    _startProcessorTime = window.performance.now();\n    _startComponentRenderTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.endComponentRenderTime = function () {\n    _startProcessorTime = window.performance.now();\n    _endComponentRenderTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.addComponent = function (componentName) {\n    _startProcessorTime = window.performance.now();\n\n    if (typeof componentMap[componentName] === 'undefined') {\n      componentMap[componentName] = {};\n      componentMap[componentName].renders = 1;\n    } else {\n      ++componentMap[componentName].renders;\n    }\n\n    if (typeof componentMap[componentName].time === 'undefined') {\n      componentMap[componentName].time = _endComponentRenderTime - _startComponentRenderTime;\n    } else {\n      componentMap[componentName].time += _endComponentRenderTime - _startComponentRenderTime;\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.start = function () {\n    _reset();\n\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      ComponentOverhead: _time\n    };\n  };\n\n  self.getMetrics = function () {\n    _startProcessorTime = window.performance.now();\n    let componentDetails = [];\n    let uniqueComponents = 0;\n    let componentRenders = 0;\n    let componentsRenderTime = 0;\n    Object.keys(componentMap).forEach(key => {\n      componentsRenderTime += componentMap[key].time;\n      componentDetails.push({\n        name: key,\n        renders: componentMap[key].renders,\n        estimatedRenderTime: componentMap[key].time.toFixed(3) + 'ms'\n      });\n      uniqueComponents++;\n      componentRenders += componentMap[key].renders;\n    });\n    componentDetails.sort((a, b) => {\n      return b.renders - a.renders;\n    });\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n    return {\n      Component: {\n        uniqueComponents,\n        componentRenders,\n        componentDetails,\n        componentsRenderTime\n      }\n    };\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsComponentProcessor;\n_c = SPLMStatsComponentProcessor;\nexport default SPLMStatsComponentProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsComponentProcessor\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsComponentProcessor\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsComponentProcessor.js"],"names":["SPLMStatsComponentProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_startComponentRenderTime","_endComponentRenderTime","componentMap","_reset","window","_time","ComponentOverhead","componentDetails","uniqueComponents","componentRenders","componentsRenderTime","Object","key","name","renders","estimatedRenderTime","b","a","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsComponentProcessor\n */\n\n/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsComponentProcessor\n */\nfunction SPLMStatsComponentProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n    let _startProcessorTime = 0;\n    let _endProcessorTime = 0;\n    let _startComponentRenderTime = 0;\n    let _endComponentRenderTime = 0;\n    let componentMap = {};\n\n    const _reset = function() {\n        componentMap = {};\n    };\n\n    self.startComponentRenderTime = function() {\n        _startProcessorTime = window.performance.now();\n        _startComponentRenderTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.endComponentRenderTime = function() {\n        _startProcessorTime = window.performance.now();\n        _endComponentRenderTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.addComponent = function( componentName ) {\n        _startProcessorTime = window.performance.now();\n        if ( typeof componentMap[componentName] === 'undefined' ) {\n            componentMap[componentName] = {};\n            componentMap[componentName].renders = 1;\n        } else {\n            ++componentMap[componentName].renders;\n        }\n\n        if ( typeof componentMap[componentName].time === 'undefined' ) {\n            componentMap[componentName].time = _endComponentRenderTime - _startComponentRenderTime;\n        } else  {\n            componentMap[componentName].time += _endComponentRenderTime - _startComponentRenderTime;\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.start = function() {\n        _reset();\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { ComponentOverhead: _time };\n    };\n\n    self.getMetrics = function() {\n        _startProcessorTime = window.performance.now();\n        let componentDetails = [];\n        let uniqueComponents = 0;\n        let componentRenders = 0;\n        let componentsRenderTime = 0;\n        Object.keys( componentMap ).forEach( key => {\n            componentsRenderTime += componentMap[key].time;\n            componentDetails.push( {\n                name: key,\n                renders: componentMap[key].renders,\n                estimatedRenderTime: componentMap[key].time.toFixed( 3 ) + 'ms'\n            } );\n            uniqueComponents++;\n            componentRenders += componentMap[key].renders;\n        } );\n        componentDetails.sort( ( a, b ) => {\n            return b.renders - a.renders;\n        } );\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n        return {\n            Component: {\n                uniqueComponents,\n                componentRenders,\n                componentDetails,\n                componentsRenderTime\n            }\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsComponentProcessor;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmStatsUtils\n */\nlet _reportAnalytics = false;\nlet _locationInformation = null;\n/**\n * @returns {Integer} Number of DOM elements on the page\n */\n\nexport function getDomElementsCount() {\n  return document.body.getElementsByTagName('*').length;\n}\n/**\n * Gets now\n * @returns {DOMHighResTimeStamp} performance.now()\n */\n\nexport function now() {\n  if (window.performance) {\n    return window.performance.now();\n  }\n\n  return Date.now();\n}\n/**\n * Checks to see if splmAnalytics are enabled or not\n * @returns {Boolean} Analytics disabled?\n */\n\nexport function isAnalyticsDisabled() {\n  const optOut = localStorage.getItem('AW_SAN_OPTOUT');\n  const doDisable = localStorage.getItem('AW_SAN_DO_DISABLE');\n  return !(optOut === 'false' && doDisable === 'false');\n} // simple impl for logger\n\nexport const logger = {\n  // eslint-disable-next-line no-console\n  log: console.log,\n  // eslint-disable-next-line no-console\n  warn: console.warn,\n  // eslint-disable-next-line no-console\n  error: console.error\n};\n/**\n * Checks if browser is IE. TRUE if browser is IE\n */\n\nexport const isIE = window.navigator.userAgent.search(/(trident|edge)/i) > -1;\n/**\n * Returns the browser type and the version of that browser as a string\n *\n * https://stackoverflow.com/questions/2400935/browser-detection-in-javascript\n */\n\nexport const getBrowserType = function () {\n  let ua = navigator.userAgent;\n  let tem = null;\n  let M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n\n  if (/trident/i.test(M[1])) {\n    tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n    return 'IE ' + (tem[1] || '');\n  }\n\n  if (M[1] === 'Chrome') {\n    tem = ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n\n    if (tem !== null) {\n      return tem.slice(1).join(' ').replace('OPR', 'Opera');\n    }\n  }\n\n  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\n\n  if ((tem = ua.match(/version\\/(\\d+)/i)) !== null) {\n    M.splice(1, 1, tem[1]);\n  }\n\n  return M.join(' ');\n};\n/**\n * Recursive function to find the greatest depth for a given element\n *\n * @param {HTMLElement} elem - Element we want to traverse to find the biggest DOM Depth underneath\n * @param {Integer} level - Current level we are at\n *\n * @returns {Integer} Max depth under a given element\n */\n\nexport const getDomTreeDepth = function (elem, level) {\n  if (!elem.children || elem.children.length === 0) {\n    return level;\n  }\n\n  let max = 0;\n\n  for (let currentChild of elem.children) {\n    let temp = getDomTreeDepth(currentChild, level + 1);\n\n    if (max < temp) {\n      max = temp;\n    }\n  }\n\n  return max;\n};\nexport const getReportAnalytics = function () {\n  return _reportAnalytics;\n};\nexport const setReportAnalytics = function (val) {\n  _reportAnalytics = val;\n};\nexport const setLocationInformation = function (val) {\n  _locationInformation = val;\n};\nexport const getLocationInformation = function () {\n  return _locationInformation;\n};\nexport default {\n  getDomElementsCount,\n  now,\n  isAnalyticsDisabled,\n  logger,\n  isIE,\n  getBrowserType,\n  getDomTreeDepth,\n  getReportAnalytics,\n  setReportAnalytics,\n  setLocationInformation,\n  getLocationInformation\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsUtils.js"],"names":["_reportAnalytics","_locationInformation","document","window","Date","optOut","localStorage","doDisable","logger","log","console","warn","error","isIE","getBrowserType","ua","navigator","tem","M","getDomTreeDepth","elem","max","temp","level","getReportAnalytics","setReportAnalytics","setLocationInformation","getLocationInformation"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmStatsUtils\n */\n\nlet _reportAnalytics = false;\nlet _locationInformation = null;\n\n/**\n * @returns {Integer} Number of DOM elements on the page\n */\nexport function getDomElementsCount() {\n    return document.body.getElementsByTagName( '*' ).length;\n}\n\n/**\n * Gets now\n * @returns {DOMHighResTimeStamp} performance.now()\n */\nexport function now() {\n    if( window.performance ) {\n        return window.performance.now();\n    }\n    return Date.now();\n}\n\n/**\n * Checks to see if splmAnalytics are enabled or not\n * @returns {Boolean} Analytics disabled?\n */\nexport function isAnalyticsDisabled() {\n    const optOut = localStorage.getItem( 'AW_SAN_OPTOUT' );\n    const doDisable = localStorage.getItem( 'AW_SAN_DO_DISABLE' );\n    return !( optOut === 'false' && doDisable === 'false' );\n}\n\n// simple impl for logger\nexport const logger = {\n    // eslint-disable-next-line no-console\n    log: console.log,\n    // eslint-disable-next-line no-console\n    warn: console.warn,\n    // eslint-disable-next-line no-console\n    error: console.error\n};\n\n/**\n * Checks if browser is IE. TRUE if browser is IE\n */\nexport const isIE = window.navigator.userAgent.search( /(trident|edge)/i ) > -1;\n\n/**\n * Returns the browser type and the version of that browser as a string\n *\n * https://stackoverflow.com/questions/2400935/browser-detection-in-javascript\n */\nexport const getBrowserType = function() {\n    let ua = navigator.userAgent;\n    let tem = null;\n    let M = ua.match( /(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i ) || [];\n    if( /trident/i.test( M[ 1 ] ) ) {\n        tem = /\\brv[ :]+(\\d+)/g.exec( ua ) || [];\n        return 'IE ' + ( tem[ 1 ] || '' );\n    }\n    if( M[ 1 ] === 'Chrome' ) {\n        tem = ua.match( /\\b(OPR|Edge)\\/(\\d+)/ );\n        if( tem !== null ) {\n            return tem.slice( 1 ).join( ' ' ).replace( 'OPR', 'Opera' );\n        }\n    }\n    M = M[ 2 ] ? [ M[ 1 ], M[ 2 ] ] : [ navigator.appName, navigator.appVersion, '-?' ];\n    if( ( tem = ua.match( /version\\/(\\d+)/i ) ) !== null ) {\n        M.splice( 1, 1, tem[ 1 ] );\n    }\n    return M.join( ' ' );\n};\n\n/**\n * Recursive function to find the greatest depth for a given element\n *\n * @param {HTMLElement} elem - Element we want to traverse to find the biggest DOM Depth underneath\n * @param {Integer} level - Current level we are at\n *\n * @returns {Integer} Max depth under a given element\n */\nexport const getDomTreeDepth = function( elem, level ) {\n    if( !elem.children || elem.children.length === 0 ) {\n        return level;\n    }\n    let max = 0;\n    for( let currentChild of elem.children ) {\n        let temp = getDomTreeDepth( currentChild, level + 1 );\n        if( max < temp ) {\n            max = temp;\n        }\n    }\n    return max;\n};\n\nexport const getReportAnalytics = function() {\n    return _reportAnalytics;\n};\n\nexport const setReportAnalytics = function( val ) {\n    _reportAnalytics = val;\n};\n\nexport const setLocationInformation = function( val ) {\n    _locationInformation = val;\n};\n\nexport const getLocationInformation = function() {\n    return _locationInformation;\n};\n\nexport default {\n    getDomElementsCount,\n    now,\n    isAnalyticsDisabled,\n    logger,\n    isIE,\n    getBrowserType,\n    getDomTreeDepth,\n    getReportAnalytics,\n    setReportAnalytics,\n    setLocationInformation,\n    getLocationInformation\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service manages the subscription and publishing of the events. It is based on the 'PostalJS' API.\n * <P>\n * For more details, see: {@link https://github.com/postaljs/postal.js|PostalJS}\n * <P>\n *\n * @module js/eventBus\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport postal from 'postal';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\n/**\n * {Boolean} TRUE if subscribe/unsubscribe activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusActivity' attribute in the current document's\n * URL.\n */\n\nvar _logActivity = false;\n/**\n * {Boolean} TRUE if the 'soa.getVisibleCommands' topic (a particularly high volume of subscribe/unsubscribe events)\n * should be logged to the console. FALSE if they should not be logged to allow lower volume issues to be more\n * easily traced.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusCommandVisibility' attribute in the current\n * document's URL.\n */\n\nvar _logCommandVisibility = false;\n/**\n * {Boolean} TRUE if 'publish' activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logPublishActivity' attribute in the current document's\n * URL.\n * <P>\n * Note: If the attribute has NO value, all publish event topic will be logged. If it has a value it is interpreted\n * as a comma separated list of topics to limit logging to.\n */\n\nvar _logPublishActivity;\n/**\n * {Boolean} TRUE if 'publish' activity from the client data model (cdm) should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logCdmPublishActivity' attribute in the current document's\n * URL.\n */\n\n\nvar _logCdmPublishActivity;\n/**\n * {StringArray} Topic names to limit logging to.\n */\n\n\nvar _logPublishActivityKeys;\n/**\n * {Map} Map of topic-to-active-topic-subcription-count (used only when _logActivity is TRUE).\n */\n\n\nvar _topic2CountMap = {};\n/**\n * {Map} Map of topic-to-published-count (used only when _logActivity is TRUE).\n */\n\nvar _topic2PublishCountMap = {};\n/**\n * Set debug options based on URL attributes.\n */\n\nvar urlAttrs = browserUtils.getUrlAttributes();\n_logActivity = urlAttrs.logEventBusActivity !== undefined;\n_logCommandVisibility = urlAttrs.logEventBusCommandVisibility !== undefined;\n\nif (urlAttrs.logPublishActivity !== undefined) {\n  _logPublishActivity = true;\n\n  if (!_.isEmpty(urlAttrs.logPublishActivity)) {\n    _logPublishActivityKeys = urlAttrs.logPublishActivity.split(',');\n  }\n}\n\n_logCdmPublishActivity = urlAttrs.logCdmPublishActivity !== undefined;\n/**\n * Add modeule objects to the given array.\n *\n * @param {String} msg - Message to append information to.\n * @param {ViewModelObjectArray} modelObjects - Array of modelObjects to append info for.\n *\n * @returns {String} A message string with new information lines appended.\n */\n\nfunction _appendModelObjects(msg, modelObjects) {\n  if (!_.isEmpty(modelObjects)) {\n    _.forEach(modelObjects, function (mo, ndx) {\n      var begLength = msg.length;\n      msg += '\\n';\n      msg += '  [';\n      msg += ndx;\n      msg += ']: type: ';\n      msg += mo.type;\n\n      for (var char = msg.length - begLength; char < 40; char++) {\n        msg += ' ';\n      }\n\n      msg += ' uid: ';\n      msg += mo.uid;\n    });\n  } else {\n    msg += '  (empty)';\n  }\n\n  return msg;\n} // _appendModelObjects\n\n/**\n * Increment/decrement count of subsriptions to the given topic.\n *\n * @param {String} topic -\n * @param {Number} increment -\n *\n * @returns {Number} Updated count for the given topic.\n */\n\n\nfunction _changeTopicSubscriptionCount(topic, increment) {\n  var count = _topic2CountMap[topic];\n\n  if (!count) {\n    count = 0;\n  }\n\n  var newCount = count + increment;\n  _topic2CountMap[topic] = newCount;\n  return newCount;\n}\n/**\n * Define public API\n * @ignore\n */\n\n\nvar exports = {};\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listeneing for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\n\nexport let subscribePostal = function (options) {\n  return exports.subscribeOnChannel(options);\n};\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listening for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\n\nexport let subscribeOnChannel = function (options) {\n  return postal.subscribe(options);\n};\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\n\nexport let publishPostal = function (envelope, cb) {\n  exports.publishOnChannel(envelope, cb);\n};\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\n\nexport let publishOnChannel = function (envelope, cb) {\n  postal.publish(envelope, cb);\n};\n/**\n * Subscribe to the given 'topic' on the event channel. When the event is published, the given function will\n * be invoked and passed the 'eventData'.\n *\n * @param {String} topic - Topic to subscribe to. A '#' character is interpreted as a wildcard.\n *\n * @param {Function} callbackFn - Function to be invoked and passed 'eventData' when the event is published.\n *\n * @param {String} subId - An optional ID to associate with this subscription.\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object. Needed while unsuscribing the event topic using {@link module:js/eventBus.unsubscribe|unsubscribe}.\n */\n\nexport let subscribe = function (topic, callbackFn, subId) {\n  var subDef = postal.subscribe({\n    channel: 'soajs',\n    topic: topic,\n    callback: callbackFn\n  });\n\n  if (_logActivity || _logPublishActivity) {\n    var count = _changeTopicSubscriptionCount(subDef.topic, 1);\n\n    if (_logActivity && (_logCommandVisibility || topic !== 'soa.getVisibleCommands')) {\n      if (subId) {\n        console.log('Subscribe Topic: \"' + topic + '\" count: ' + count + ' id: ' + subId); // eslint-disable-line no-console\n\n        subDef.id = subId;\n      } else {\n        console.log('Subscribe Topic: \"' + topic + '\" count: ' + count); // eslint-disable-line no-console\n      }\n    }\n  }\n\n  return subDef;\n};\n/**\n * Publish the given 'topic' on the event channel. The given 'eventData' will be passed to each subscribers\n * callback function.\n *\n * @param {String} topic - Topic to publish.\n * @param {Object} eventData - Optional data to pass to the subscribed callback functions.\n * @param {Boolean} isCustomEvent - true if event stated in *viewModel.json\n */\n\nexport let publish = function (topic, eventData, isCustomEvent) {\n  debugService.debug('globalEvents', topic);\n  var doLogging = false;\n\n  if (_logPublishActivity) {\n    if (_logCommandVisibility) {\n      doLogging = !/^(log|progress.start|progress.end|StartSaveAutoBookmarkEvent)$/.test(topic);\n    } else {\n      doLogging = !/^(log|progress.start|progress.end|soa.getVisibleCommands|StartSaveAutoBookmarkEvent)$/.test(topic);\n    }\n  }\n  /**\n   * Check if we are listing ALL or just a select few topics (and this topic is one)\n   */\n\n\n  if (doLogging && (!_logPublishActivityKeys || _.indexOf(_logPublishActivityKeys, topic) !== -1)) {\n    var msg = 'Publish Topic: ';\n    var nListeners = _topic2CountMap[topic] ? _topic2CountMap[topic] : 0;\n\n    if (nListeners === 0) {\n      msg += ' (!) ';\n    }\n\n    msg += topic;\n\n    if (eventData) {\n      if (eventData.name === 'state') {\n        msg += '  event: ';\n        msg += JSON.stringify(eventData, ['name', 'target']);\n        msg += ' value: ';\n\n        _.forEach(eventData.value.params, function (value, name) {\n          if (value) {\n            var msg2 = '';\n            msg2 += '\\n';\n            msg2 += name;\n\n            while (msg2.length < 15) {\n              msg2 += ' ';\n            }\n\n            msg2 += ' = ';\n            msg2 += '\"';\n            msg2 += value;\n            msg2 += '\"';\n            msg += msg2;\n          }\n        });\n\n        msg += '\\n';\n      } else if (eventData.name === 'selected' || eventData.name === 'pselected') {\n        msg += '  event: ';\n        msg += JSON.stringify(eventData, ['name', 'target']);\n        msg += '  selected: ';\n        msg += eventData.value;\n      } else if (_logCdmPublishActivity) {\n        if (topic === 'cdm.new') {\n          msg = _appendModelObjects(msg, eventData.newObjects);\n        } else if (topic === 'cdm.modified') {\n          msg = _appendModelObjects(msg, eventData.modifiedObjects);\n        } else if (topic === 'cdm.updated' || topic === 'cdm.modified') {\n          msg = _appendModelObjects(msg, eventData.updatedObjects);\n        }\n      } else if (topic === 'primaryWorkArea.selectionChangeEvent') {\n        msg += '  selection: ';\n        msg += JSON.stringify(eventData.selectionModel.getSelection());\n      } else {\n        msg += '  event: ';\n        msg += JSON.stringify(eventData, ['name', 'target']);\n      }\n    }\n\n    if (nListeners > 0) {\n      msg += '  nListeners: ';\n      msg += nListeners;\n    }\n\n    if (_topic2PublishCountMap[topic]) {\n      _topic2PublishCountMap[topic]++;\n    } else {\n      _topic2PublishCountMap[topic] = 1;\n    }\n\n    msg += '  totalCount: ';\n    msg += _topic2PublishCountMap[topic];\n    console.log(msg); // eslint-disable-line no-console\n  }\n\n  if (!isCustomEvent && logger.isDeclarativeLogEnabled()) {\n    debugService.debugEventPub({}, {\n      name: topic\n    }, {\n      panelId: 'SystemEvent'\n    }, {}, eventData);\n  }\n\n  postal.publish({\n    channel: 'soajs',\n    topic: topic,\n    data: eventData\n  });\n};\n/**\n * Removes the given subscription from the event channel so that the callback will no longer be invoked.\n *\n * @param {Object} subDef - A 'PostalJS' SubscriptionDefinition object returned by {@link module:js/eventBus.subscribe|subscribe}\n */\n\nexport let unsubscribe = function (subDef) {\n  if (_logActivity || _logPublishActivity) {\n    var count = _changeTopicSubscriptionCount(subDef.topic, -1);\n\n    if (_logActivity && (_logCommandVisibility || subDef.topic !== 'soa.getVisibleCommands')) {\n      if (subDef.id) {\n        console.log('   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count + // eslint-disable-line no-console\n        ' id: ' + subDef.id);\n      } else {\n        console.log('   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count); // eslint-disable-line no-console\n      }\n    }\n  }\n\n  postal.unsubscribe(subDef);\n};\nlogger.setEventBus(exports);\nexports = {\n  subscribePostal,\n  subscribeOnChannel,\n  publishPostal,\n  publishOnChannel,\n  subscribe,\n  publish,\n  unsubscribe\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/eventBus.js"],"names":["_logActivity","_logCommandVisibility","_topic2CountMap","_topic2PublishCountMap","urlAttrs","browserUtils","_logPublishActivity","_","_logPublishActivityKeys","_logCdmPublishActivity","begLength","msg","mo","char","count","newCount","exports","subscribePostal","subscribeOnChannel","postal","publishPostal","publishOnChannel","subscribe","subDef","channel","topic","callback","callbackFn","_changeTopicSubscriptionCount","console","publish","debugService","doLogging","nListeners","eventData","JSON","msg2","_appendModelObjects","logger","name","panelId","data","unsubscribe"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service manages the subscription and publishing of the events. It is based on the 'PostalJS' API.\n * <P>\n * For more details, see: {@link https://github.com/postaljs/postal.js|PostalJS}\n * <P>\n *\n * @module js/eventBus\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport postal from 'postal';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\n\n/**\n * {Boolean} TRUE if subscribe/unsubscribe activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusActivity' attribute in the current document's\n * URL.\n */\nvar _logActivity = false;\n\n/**\n * {Boolean} TRUE if the 'soa.getVisibleCommands' topic (a particularly high volume of subscribe/unsubscribe events)\n * should be logged to the console. FALSE if they should not be logged to allow lower volume issues to be more\n * easily traced.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusCommandVisibility' attribute in the current\n * document's URL.\n */\nvar _logCommandVisibility = false;\n\n/**\n * {Boolean} TRUE if 'publish' activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logPublishActivity' attribute in the current document's\n * URL.\n * <P>\n * Note: If the attribute has NO value, all publish event topic will be logged. If it has a value it is interpreted\n * as a comma separated list of topics to limit logging to.\n */\nvar _logPublishActivity;\n\n/**\n * {Boolean} TRUE if 'publish' activity from the client data model (cdm) should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logCdmPublishActivity' attribute in the current document's\n * URL.\n */\nvar _logCdmPublishActivity;\n\n/**\n * {StringArray} Topic names to limit logging to.\n */\nvar _logPublishActivityKeys;\n\n/**\n * {Map} Map of topic-to-active-topic-subcription-count (used only when _logActivity is TRUE).\n */\nvar _topic2CountMap = {};\n\n/**\n * {Map} Map of topic-to-published-count (used only when _logActivity is TRUE).\n */\nvar _topic2PublishCountMap = {};\n\n/**\n * Set debug options based on URL attributes.\n */\nvar urlAttrs = browserUtils.getUrlAttributes();\n\n_logActivity = urlAttrs.logEventBusActivity !== undefined;\n\n_logCommandVisibility = urlAttrs.logEventBusCommandVisibility !== undefined;\n\nif( urlAttrs.logPublishActivity !== undefined ) {\n    _logPublishActivity = true;\n\n    if( !_.isEmpty( urlAttrs.logPublishActivity ) ) {\n        _logPublishActivityKeys = urlAttrs.logPublishActivity.split( ',' );\n    }\n}\n\n_logCdmPublishActivity = urlAttrs.logCdmPublishActivity !== undefined;\n\n/**\n * Add modeule objects to the given array.\n *\n * @param {String} msg - Message to append information to.\n * @param {ViewModelObjectArray} modelObjects - Array of modelObjects to append info for.\n *\n * @returns {String} A message string with new information lines appended.\n */\nfunction _appendModelObjects( msg, modelObjects ) {\n    if( !_.isEmpty( modelObjects ) ) {\n        _.forEach( modelObjects, function( mo, ndx ) {\n            var begLength = msg.length;\n\n            msg += '\\n';\n            msg += '  [';\n            msg += ndx;\n            msg += ']: type: ';\n            msg += mo.type;\n\n            for( var char = msg.length - begLength; char < 40; char++ ) {\n                msg += ' ';\n            }\n\n            msg += ' uid: ';\n            msg += mo.uid;\n        } );\n    } else {\n        msg += '  (empty)';\n    }\n\n    return msg;\n} // _appendModelObjects\n\n/**\n * Increment/decrement count of subsriptions to the given topic.\n *\n * @param {String} topic -\n * @param {Number} increment -\n *\n * @returns {Number} Updated count for the given topic.\n */\nfunction _changeTopicSubscriptionCount( topic, increment ) {\n    var count = _topic2CountMap[ topic ];\n\n    if( !count ) {\n        count = 0;\n    }\n\n    var newCount = count + increment;\n\n    _topic2CountMap[ topic ] = newCount;\n\n    return newCount;\n}\n\n/**\n * Define public API\n * @ignore\n */\nvar exports = {};\n\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listeneing for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\nexport let subscribePostal = function( options ) {\n    return exports.subscribeOnChannel( options );\n};\n\n/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listening for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */\nexport let subscribeOnChannel = function( options ) {\n    return postal.subscribe( options );\n};\n\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\nexport let publishPostal = function( envelope, cb ) {\n    exports.publishOnChannel( envelope, cb );\n};\n\n/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */\nexport let publishOnChannel = function( envelope, cb ) {\n    postal.publish( envelope, cb );\n};\n\n/**\n * Subscribe to the given 'topic' on the event channel. When the event is published, the given function will\n * be invoked and passed the 'eventData'.\n *\n * @param {String} topic - Topic to subscribe to. A '#' character is interpreted as a wildcard.\n *\n * @param {Function} callbackFn - Function to be invoked and passed 'eventData' when the event is published.\n *\n * @param {String} subId - An optional ID to associate with this subscription.\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object. Needed while unsuscribing the event topic using {@link module:js/eventBus.unsubscribe|unsubscribe}.\n */\nexport let subscribe = function( topic, callbackFn, subId ) {\n    var subDef = postal.subscribe( {\n        channel: 'soajs',\n        topic: topic,\n        callback: callbackFn\n    } );\n\n    if( _logActivity || _logPublishActivity ) {\n        var count = _changeTopicSubscriptionCount( subDef.topic, 1 );\n\n        if( _logActivity && ( _logCommandVisibility || topic !== 'soa.getVisibleCommands' ) ) {\n            if( subId ) {\n                console.log( 'Subscribe Topic: \"' + topic + '\" count: ' + count + ' id: ' + subId ); // eslint-disable-line no-console\n                subDef.id = subId;\n            } else {\n                console.log( 'Subscribe Topic: \"' + topic + '\" count: ' + count ); // eslint-disable-line no-console\n            }\n        }\n    }\n\n    return subDef;\n};\n\n/**\n * Publish the given 'topic' on the event channel. The given 'eventData' will be passed to each subscribers\n * callback function.\n *\n * @param {String} topic - Topic to publish.\n * @param {Object} eventData - Optional data to pass to the subscribed callback functions.\n * @param {Boolean} isCustomEvent - true if event stated in *viewModel.json\n */\nexport let publish = function( topic, eventData, isCustomEvent ) {\n    debugService.debug( 'globalEvents', topic );\n    var doLogging = false;\n\n    if( _logPublishActivity ) {\n        if( _logCommandVisibility ) {\n            doLogging = !/^(log|progress.start|progress.end|StartSaveAutoBookmarkEvent)$/.test( topic );\n        } else {\n            doLogging = !/^(log|progress.start|progress.end|soa.getVisibleCommands|StartSaveAutoBookmarkEvent)$/.test( topic );\n        }\n    }\n\n    /**\n     * Check if we are listing ALL or just a select few topics (and this topic is one)\n     */\n    if( doLogging && ( !_logPublishActivityKeys || _.indexOf( _logPublishActivityKeys, topic ) !== -1 ) ) {\n        var msg = 'Publish Topic: ';\n\n        var nListeners = _topic2CountMap[ topic ] ? _topic2CountMap[ topic ] : 0;\n\n        if( nListeners === 0 ) {\n            msg += ' (!) ';\n        }\n\n        msg += topic;\n\n        if( eventData ) {\n            if( eventData.name === 'state' ) {\n                msg += '  event: ';\n                msg += JSON.stringify( eventData, [ 'name', 'target' ] );\n\n                msg += ' value: ';\n\n                _.forEach( eventData.value.params, function( value, name ) {\n                    if( value ) {\n                        var msg2 = '';\n\n                        msg2 += '\\n';\n                        msg2 += name;\n\n                        while( msg2.length < 15 ) {\n                            msg2 += ' ';\n                        }\n\n                        msg2 += ' = ';\n\n                        msg2 += '\"';\n                        msg2 += value;\n                        msg2 += '\"';\n\n                        msg += msg2;\n                    }\n                } );\n\n                msg += '\\n';\n            } else if( eventData.name === 'selected' || eventData.name === 'pselected' ) {\n                msg += '  event: ';\n                msg += JSON.stringify( eventData, [ 'name', 'target' ] );\n\n                msg += '  selected: ';\n                msg += eventData.value;\n            } else if( _logCdmPublishActivity ) {\n                if( topic === 'cdm.new' ) {\n                    msg = _appendModelObjects( msg, eventData.newObjects );\n                } else if( topic === 'cdm.modified' ) {\n                    msg = _appendModelObjects( msg, eventData.modifiedObjects );\n                } else if( topic === 'cdm.updated' || topic === 'cdm.modified' ) {\n                    msg = _appendModelObjects( msg, eventData.updatedObjects );\n                }\n            } else if( topic === 'primaryWorkArea.selectionChangeEvent' ) {\n                msg += '  selection: ';\n                msg += JSON.stringify( eventData.selectionModel.getSelection() );\n            } else {\n                msg += '  event: ';\n                msg += JSON.stringify( eventData, [ 'name', 'target' ] );\n            }\n        }\n\n        if( nListeners > 0 ) {\n            msg += '  nListeners: ';\n            msg += nListeners;\n        }\n\n        if( _topic2PublishCountMap[ topic ] ) {\n            _topic2PublishCountMap[ topic ]++;\n        } else {\n            _topic2PublishCountMap[ topic ] = 1;\n        }\n\n        msg += '  totalCount: ';\n        msg += _topic2PublishCountMap[ topic ];\n\n        console.log( msg ); // eslint-disable-line no-console\n    }\n\n    if( !isCustomEvent && logger.isDeclarativeLogEnabled() ) {\n        debugService.debugEventPub( {}, { name: topic }, { panelId: 'SystemEvent' }, {}, eventData );\n    }\n    postal.publish( {\n        channel: 'soajs',\n        topic: topic,\n        data: eventData\n    } );\n};\n\n/**\n * Removes the given subscription from the event channel so that the callback will no longer be invoked.\n *\n * @param {Object} subDef - A 'PostalJS' SubscriptionDefinition object returned by {@link module:js/eventBus.subscribe|subscribe}\n */\nexport let unsubscribe = function( subDef ) {\n    if( _logActivity || _logPublishActivity ) {\n        var count = _changeTopicSubscriptionCount( subDef.topic, -1 );\n\n        if( _logActivity && ( _logCommandVisibility || subDef.topic !== 'soa.getVisibleCommands' ) ) {\n            if( subDef.id ) {\n                console.log( '   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count + // eslint-disable-line no-console\n                    ' id: ' + subDef.id );\n            } else {\n                console.log( '   Unsubscribe Topic: \"' + subDef.topic + '\" count: ' + count ); // eslint-disable-line no-console\n            }\n        }\n    }\n    postal.unsubscribe( subDef );\n};\n\nlogger.setEventBus( exports );\n\nexports = {\n    subscribePostal,\n    subscribeOnChannel,\n    publishPostal,\n    publishOnChannel,\n    subscribe,\n    publish,\n    unsubscribe\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
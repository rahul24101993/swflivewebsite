{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/viewModeManagementService\n */\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\nimport viewModeService from 'js/viewMode.service';\nimport editHandlerSvc from 'js/editHandlerService';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport AwPromiseService from 'js/awPromiseService';\nexport const populateSupportedViewModes = viewModes => {\n  let supportedViewModes = viewModes ? viewModes : {\n    SummaryView: {\n      primaryWorkArea: 'list',\n      secondaryWorkArea: true\n    },\n    TableSummaryView: {\n      primaryWorkArea: 'table',\n      secondaryWorkArea: true\n    },\n    ListView: {\n      primaryWorkArea: 'list',\n      secondaryWorkArea: false\n    },\n    TableView: {\n      primaryWorkArea: 'table',\n      secondaryWorkArea: false\n    },\n    ImageView: {\n      primaryWorkArea: 'image',\n      secondaryWorkArea: false\n    }\n  };\n  viewModeService.setAvailableViewModes(Object.keys(supportedViewModes));\n  return supportedViewModes;\n};\n\nconst updateViewMode = (viewModeKey, viewModeValue) => {\n  const getViewMode = () => {\n    //var shouldBroadcastUpdate = $scope.view !== newViewMode.primaryWorkArea;\n    //Reset selection back to base when SWA is hidden\n    // if( !viewModeValue.secondaryWorkArea ) {\n    //     $scope.updateSecondarySelection( [], null );\n    // }\n    // if( shouldBroadcastUpdate ) {\n    //     $scope.$broadcast( 'viewModeChanged', newViewMode );\n    // }\n    return {\n      viewSuffix: viewModeValue.primaryWorkArea,\n      showSecondaryWorkArea: viewModeValue.secondaryWorkArea\n    };\n  };\n\n  const editHandler = editHandlerSvc.getActiveEditHandler();\n\n  if (editHandler && !editHandler.editInProgress()) {\n    return AwPromiseService.instance.resolve(getViewMode());\n  }\n\n  return editHandlerSvc.leaveConfirmation().then(() => {\n    return getViewMode();\n  });\n};\n\nconst getViewModePref = nameToken => {\n  return 'AW_SubLocation_' + (nameToken.indexOf(':') !== -1 ? nameToken.split(':')[1] : 'Generic') + '_ViewMode';\n};\n\nconst getViewModeFromPref = nameToken => {\n  let viewModePref = appCtxService.getCtx('preferences.' + getViewModePref(nameToken));\n\n  if (viewModePref) {\n    return viewModePref[0];\n  }\n\n  return viewModePref;\n};\n\nconst setViewModeToPref = (viewModeKey, nameToken) => {\n  appCtxService.updatePartialCtx('preferences.' + getViewModePref(nameToken), [viewModeKey]);\n};\n\nexport const handleViewModechange = (supportedViewModes, provider, viewModeKey) => {\n  if (supportedViewModes) {\n    var viewModeValue = supportedViewModes[viewModeKey];\n\n    if (!viewModeValue) {\n      viewModeKey = provider.defaultDisplayMode ? provider.defaultDisplayMode : Object.keys(supportedViewModes)[0];\n      logger.warn('Unknown view mode, defaulting to', viewModeKey);\n      viewModeValue = supportedViewModes[viewModeKey];\n    } //This is an existing tech debt in ng-afx, fixing this is a big change and not a priority right now\n\n\n    const hasTcSessionData = appCtxService.getCtx('tcSessionData');\n\n    if (getViewModeFromPref(provider.nameToken) !== viewModeKey && hasTcSessionData) {\n      setViewModeToPref(viewModeKey, provider.nameToken);\n    }\n\n    return updateViewMode(viewModeKey, viewModeValue);\n  }\n};\nexport const setViewMode = (viewModes, _ref) => {\n  let {\n    defaultDisplayMode,\n    nameToken\n  } = _ref;\n  let viewMode = nameToken && getViewModeFromPref(nameToken);\n\n  if (defaultDisplayMode && (!viewMode || !viewModes[viewMode])) {\n    viewModeService.changeViewMode(defaultDisplayMode);\n  } else {\n    if (narrowModeService.isNarrowMode()) {\n      let newViewMode = viewModes.hasOwnProperty(defaultDisplayMode) ? viewModes[defaultDisplayMode] : {\n        primaryWorkArea: 'list',\n        secondaryWorkArea: true\n      };\n      return updateViewMode(null, newViewMode);\n    }\n\n    viewMode = nameToken && getViewModeFromPref(nameToken);\n\n    if (viewMode) {\n      viewModeService.changeViewMode(viewMode);\n    } else if (viewModes.hasOwnProperty('SummaryView')) {\n      viewModeService.changeViewMode('SummaryView');\n    } else {\n      viewModeService.changeViewMode(Object.keys(viewModes)[0]);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/viewModeManagementService.js"],"names":["populateSupportedViewModes","viewModes","supportedViewModes","SummaryView","primaryWorkArea","secondaryWorkArea","TableSummaryView","ListView","TableView","ImageView","viewModeService","Object","updateViewMode","getViewMode","viewSuffix","viewModeValue","showSecondaryWorkArea","editHandler","editHandlerSvc","AwPromiseService","getViewModePref","nameToken","getViewModeFromPref","viewModePref","appCtxService","setViewModeToPref","handleViewModechange","viewModeKey","provider","logger","hasTcSessionData","setViewMode","viewMode","defaultDisplayMode","narrowModeService","newViewMode"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/viewModeManagementService\n */\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\nimport viewModeService from 'js/viewMode.service';\nimport editHandlerSvc from 'js/editHandlerService';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport AwPromiseService from 'js/awPromiseService';\n\nexport const populateSupportedViewModes = viewModes => {\n    let supportedViewModes = viewModes ? viewModes : {\n        SummaryView: {\n            primaryWorkArea: 'list',\n            secondaryWorkArea: true\n        },\n        TableSummaryView: {\n            primaryWorkArea: 'table',\n            secondaryWorkArea: true\n        },\n        ListView: {\n            primaryWorkArea: 'list',\n            secondaryWorkArea: false\n        },\n        TableView: {\n            primaryWorkArea: 'table',\n            secondaryWorkArea: false\n        },\n        ImageView: {\n            primaryWorkArea: 'image',\n            secondaryWorkArea: false\n        }\n    };\n    viewModeService.setAvailableViewModes( Object.keys( supportedViewModes ) );\n    return supportedViewModes;\n};\n\nconst updateViewMode = ( viewModeKey, viewModeValue ) => {\n    const getViewMode = () => {\n        //var shouldBroadcastUpdate = $scope.view !== newViewMode.primaryWorkArea;\n\n        //Reset selection back to base when SWA is hidden\n        // if( !viewModeValue.secondaryWorkArea ) {\n        //     $scope.updateSecondarySelection( [], null );\n        // }\n\n        // if( shouldBroadcastUpdate ) {\n        //     $scope.$broadcast( 'viewModeChanged', newViewMode );\n        // }\n        return {\n            viewSuffix: viewModeValue.primaryWorkArea,\n            showSecondaryWorkArea: viewModeValue.secondaryWorkArea\n        };\n    };\n    const editHandler = editHandlerSvc.getActiveEditHandler();\n    if( editHandler && !editHandler.editInProgress() ) {\n        return AwPromiseService.instance.resolve( getViewMode() );\n    }\n    return editHandlerSvc.leaveConfirmation().then( () => {\n        return getViewMode();\n    } );\n};\n\nconst getViewModePref = nameToken => {\n    return 'AW_SubLocation_' + ( nameToken.indexOf( ':' ) !== -1 ? nameToken.split( ':' )[ 1 ] : 'Generic' ) + '_ViewMode';\n};\n\nconst getViewModeFromPref = nameToken => {\n    let viewModePref = appCtxService.getCtx( 'preferences.' + getViewModePref( nameToken ) );\n    if( viewModePref ) {\n        return viewModePref[ 0 ];\n    }\n    return viewModePref;\n};\n\nconst setViewModeToPref = ( viewModeKey, nameToken ) => {\n    appCtxService.updatePartialCtx( 'preferences.' + getViewModePref( nameToken ), [ viewModeKey ] );\n};\n\nexport const handleViewModechange = ( supportedViewModes, provider, viewModeKey ) => {\n    if( supportedViewModes ) {\n        var viewModeValue = supportedViewModes[ viewModeKey ];\n        if( !viewModeValue ) {\n            viewModeKey = provider.defaultDisplayMode ? provider.defaultDisplayMode : Object.keys( supportedViewModes )[ 0 ];\n            logger.warn( 'Unknown view mode, defaulting to', viewModeKey );\n            viewModeValue = supportedViewModes[ viewModeKey ];\n        }\n\n        //This is an existing tech debt in ng-afx, fixing this is a big change and not a priority right now\n        const hasTcSessionData = appCtxService.getCtx( 'tcSessionData' );\n        if( getViewModeFromPref( provider.nameToken ) !== viewModeKey && hasTcSessionData ) {\n            setViewModeToPref( viewModeKey, provider.nameToken );\n        }\n        return updateViewMode( viewModeKey, viewModeValue );\n    }\n};\n\nexport const setViewMode = ( viewModes, { defaultDisplayMode, nameToken } ) => {\n    let viewMode = nameToken && getViewModeFromPref( nameToken );\n    if( defaultDisplayMode && ( !viewMode || !viewModes[ viewMode ] ) ) {\n        viewModeService.changeViewMode( defaultDisplayMode );\n    } else {\n        if( narrowModeService.isNarrowMode() ) {\n            let newViewMode = viewModes.hasOwnProperty( defaultDisplayMode ) ? viewModes[defaultDisplayMode] : {\n                primaryWorkArea: 'list',\n                secondaryWorkArea: true\n            };\n            return updateViewMode( null, newViewMode );\n        }\n        viewMode = nameToken && getViewModeFromPref( nameToken );\n        if( viewMode ) {\n            viewModeService.changeViewMode( viewMode );\n        } else if( viewModes.hasOwnProperty( 'SummaryView' ) ) {\n            viewModeService.changeViewMode( 'SummaryView' );\n        } else {\n            viewModeService.changeViewMode( Object.keys( viewModes )[0] );\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * This service provides helpful APIs to register/unregister/update context variables used to hold application state.\n *\n * @module js/appCtxService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport debugService from 'js/debugService';\n/**\n * delegate object with 2 API: fetch and dispatch\n * Still put a 'default value' for testability\n */\n\nlet _ctxObj = {\n  _ctx: {},\n  fetch: path => path ? _.get(_ctxObj._ctx, path) : _ctxObj._ctx,\n  dispatch: _ref => {\n    let {\n      path,\n      value\n    } = _ref;\n    return value === undefined ? _.unset(_ctxObj._ctx, path) : _.set(_ctxObj._ctx, path, value);\n  }\n};\n/**\n * Init appCtxService\n * @param {object} state state object which has getValue and setValue API\n */\n\nexport function init(state) {\n  _ctxObj = state;\n}\n/**\n * Register application context variable\n *\n * @param {String} name - The name of context variable\n * @param {Object} value - The value of context variable\n */\n\nexport let registerCtx = function (path, value) {\n  debugService.debug('ctx', path, 'register');\n\n  _ctxObj.dispatch({\n    path,\n    value\n  }); // Announce app context registration\n\n\n  eventBus.publish('appCtx.register', {\n    name: path,\n    value: value\n  });\n};\n/**\n * Register part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\n\nexport let registerPartialCtx = function (path, value) {\n  debugService.debug('ctx', path, 'register');\n\n  _ctxObj.dispatch({\n    path,\n    value\n  }); // Announce app context registration\n\n\n  var splitPath = path.split('.');\n  var context = splitPath.shift();\n  eventBus.publish('appCtx.register', {\n    name: context,\n    target: splitPath.join('.'),\n    value: value\n  });\n};\n/**\n * Unregister application context variable\n *\n * @param {String} path - The name of context variable\n */\n\nexport let unRegisterCtx = function (path) {\n  debugService.debug('ctx', path, 'unregister');\n\n  _ctxObj.dispatch({\n    path,\n    value: undefined\n  }); // Announce app context un-registration\n\n\n  eventBus.publish('appCtx.register', {\n    name: path\n  });\n};\n/**\n * Update application context and Announce app context update by publishing an {@link module:js/eventBus|event}\n * 'appCtx.update' with eventData as {\"name\": ctxVariableName, \"value\": ctxVariableValue}\n *\n * @param {String} path - The name of context variable\n * @param {Object} value - The value of context variable\n */\n\nexport let updateCtx = function (path, value) {\n  debugService.debug('ctx', path, 'modify');\n\n  _ctxObj.dispatch({\n    path,\n    value\n  }); // Announce app context update\n\n\n  eventBus.publish('appCtx.update', {\n    name: path,\n    value: value\n  });\n};\n/**\n * Get application context variable value\n *\n * @param {String} path - Path to the context\n * @returns {Object} Value (if any) at the indicated context path location.\n */\n\nexport let getCtx = function (path) {\n  return _ctxObj.fetch(path);\n};\n/**\n * Update part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\n\nexport let updatePartialCtx = function (path, value) {\n  debugService.debug('ctx', path, 'modify');\n\n  var currValue = _ctxObj.fetch(path); // This will typically be done using angular binding, so we don't want an event potentially every $digest\n\n\n  if (value !== currValue) {\n    _ctxObj.dispatch({\n      path,\n      value\n    }); // Announce update\n\n\n    var splitPath = path.split('.');\n    var context = splitPath.shift();\n    eventBus.publish('appCtx.update', {\n      name: context,\n      value: _ctxObj.fetch(),\n      target: splitPath.join('.')\n    });\n  }\n};\n/**\n * Update app context from object\n *\n * @param {Object} ctxObject - The source context objeect containing properties that need to be update on global ctx\n */\n\nexport let updateCtxFromObject = function (ctxObject) {\n  if (ctxObject) {\n    _.forEach(ctxObject, function (value, name) {\n      exports.updateCtx(name, value);\n    });\n  }\n};\nconst exports = {\n  get ctx() {\n    return _ctxObj.fetch();\n  },\n\n  registerCtx,\n  registerPartialCtx,\n  updateCtx,\n  updatePartialCtx,\n  unRegisterCtx,\n  getCtx,\n  updateCtxFromObject\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/appCtxService.js"],"names":["_ctxObj","_ctx","fetch","path","_","dispatch","value","registerCtx","debugService","eventBus","name","registerPartialCtx","splitPath","context","target","unRegisterCtx","undefined","updateCtx","getCtx","updatePartialCtx","currValue","updateCtxFromObject","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * This service provides helpful APIs to register/unregister/update context variables used to hold application state.\n *\n * @module js/appCtxService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport debugService from 'js/debugService';\n\n/**\n * delegate object with 2 API: fetch and dispatch\n * Still put a 'default value' for testability\n */\nlet _ctxObj = {\n    _ctx: {},\n    fetch: path => path ? _.get( _ctxObj._ctx, path ) : _ctxObj._ctx,\n    dispatch: ( { path, value } ) => value === undefined ? _.unset( _ctxObj._ctx, path ) : _.set( _ctxObj._ctx, path, value )\n};\n\n/**\n * Init appCtxService\n * @param {object} state state object which has getValue and setValue API\n */\nexport function init( state ) {\n    _ctxObj = state;\n}\n\n/**\n * Register application context variable\n *\n * @param {String} name - The name of context variable\n * @param {Object} value - The value of context variable\n */\nexport let registerCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'register' );\n    _ctxObj.dispatch( { path, value } );\n\n    // Announce app context registration\n    eventBus.publish( 'appCtx.register', {\n        name: path,\n        value: value\n    } );\n};\n\n/**\n * Register part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\nexport let registerPartialCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'register' );\n\n    _ctxObj.dispatch( { path, value } );\n\n    // Announce app context registration\n    var splitPath = path.split( '.' );\n    var context = splitPath.shift();\n    eventBus.publish( 'appCtx.register', {\n        name: context,\n        target: splitPath.join( '.' ),\n        value: value\n    } );\n};\n\n/**\n * Unregister application context variable\n *\n * @param {String} path - The name of context variable\n */\nexport let unRegisterCtx = function( path ) {\n    debugService.debug( 'ctx', path, 'unregister' );\n    _ctxObj.dispatch( { path, value: undefined } );\n\n    // Announce app context un-registration\n    eventBus.publish( 'appCtx.register', {\n        name: path\n    } );\n};\n\n/**\n * Update application context and Announce app context update by publishing an {@link module:js/eventBus|event}\n * 'appCtx.update' with eventData as {\"name\": ctxVariableName, \"value\": ctxVariableValue}\n *\n * @param {String} path - The name of context variable\n * @param {Object} value - The value of context variable\n */\nexport let updateCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'modify' );\n    _ctxObj.dispatch( { path, value } );\n\n    // Announce app context update\n    eventBus.publish( 'appCtx.update', {\n        name: path,\n        value: value\n    } );\n};\n\n/**\n * Get application context variable value\n *\n * @param {String} path - Path to the context\n * @returns {Object} Value (if any) at the indicated context path location.\n */\nexport let getCtx = function( path ) {\n    return _ctxObj.fetch( path );\n};\n\n/**\n * Update part of a context\n *\n * @param {String} path - Path to the context\n * @param {Object} value - The value of context variable\n * @ignore\n */\nexport let updatePartialCtx = function( path, value ) {\n    debugService.debug( 'ctx', path, 'modify' );\n\n    var currValue = _ctxObj.fetch( path );\n\n    // This will typically be done using angular binding, so we don't want an event potentially every $digest\n    if( value !== currValue ) {\n        _ctxObj.dispatch( { path, value } );\n\n        // Announce update\n        var splitPath = path.split( '.' );\n        var context = splitPath.shift();\n        eventBus.publish( 'appCtx.update', {\n            name: context,\n            value: _ctxObj.fetch(),\n            target: splitPath.join( '.' )\n        } );\n    }\n};\n\n/**\n * Update app context from object\n *\n * @param {Object} ctxObject - The source context objeect containing properties that need to be update on global ctx\n */\nexport let updateCtxFromObject = function( ctxObject ) {\n    if( ctxObject ) {\n        _.forEach( ctxObject, function( value, name ) {\n            exports.updateCtx( name, value );\n        } );\n    }\n};\n\nconst exports = {\n    get ctx() {\n        return _ctxObj.fetch();\n    },\n    registerCtx,\n    registerPartialCtx,\n    updateCtx,\n    updatePartialCtx,\n    unRegisterCtx,\n    getCtx,\n    updateCtxFromObject\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
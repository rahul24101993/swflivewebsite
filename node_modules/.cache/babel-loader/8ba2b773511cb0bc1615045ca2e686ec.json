{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Used for handling PL Table menus\n *\n * @module js/splmTableMenuService\n *\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport appCtxService from 'js/appCtxService';\nimport { svgString as cmdSettings } from \"image/cmdSettings24.svg\";\nimport Trv from 'js/splmTableTraversal';\nimport util from 'js/splmTableUtils';\nimport Const from 'js/splmTableConstants';\n\nvar SPLMTableMenuService = function (table, directiveElement, tableInstance, gridContextDispatcher) {\n  var self = this;\n  var _table = table;\n  var _tableInstance = tableInstance;\n  var _dataProvider = _tableInstance.dataProvider;\n  var _gridOptions = _tableInstance.gridOptions;\n  var _splmTableMessages = _tableInstance.messages;\n\n  var _trv = new Trv(table);\n\n  var _keyboardService = tableInstance.keyboardService;\n  var _selectionHelper = null;\n  var _columnMenuSubscriptions = []; // Add menu service to table instance\n\n  _tableInstance.menuService = self;\n\n  const focusElementOnClose = function (focusElem, isEditDisable) {\n    setTimeout(function () {\n      const isDisabledDuringEdit = isEditDisable && util.isBulkEditing(_table);\n\n      if (focusElem && document.activeElement && document.activeElement.tagName === 'BODY' && !isDisabledDuringEdit) {\n        focusElem.focus();\n      }\n    }, 150);\n  };\n\n  var loadGridMenuItems = function () {\n    var settingsCommandElement = _table.getElementsByClassName('aw-splm-tableMenuButton')[0];\n\n    var loadGridMenu = function (event, focusOnCloseElem) {\n      gridContextDispatcher({\n        type: 'UPDATE_VALUES',\n        isBulkEditing: _tableInstance.isBulkEditing,\n        dynamicRowHeightStatus: _tableInstance.dynamicRowHeightStatus\n      });\n      event.preventDefault();\n      let gridMenuPopup = _gridOptions.popupContext.gridMenuPopup;\n\n      if (gridMenuPopup) {\n        if (!self.gridMenuPopupRef) {\n          const popupOptions = {\n            forceCloseOthers: false,\n            whenParentScrolls: 'close',\n            reference: settingsCommandElement,\n            placement: 'bottom-end',\n            hasArrow: true,\n            autoFocus: true,\n            innerClassName: 'aw-popup-gridMenu',\n            padding: {\n              x: 4,\n              y: 4\n            },\n            hooks: {\n              whenClosed: () => {\n                self.gridMenuPopupRef = null;\n                focusElementOnClose(focusOnCloseElem);\n              }\n            }\n          };\n          gridMenuPopup.show(popupOptions).then(popupRef => {\n            self.gridMenuPopupRef = popupRef;\n          });\n        } else {\n          self.ensureTableMenuDismissed();\n        }\n      }\n    };\n\n    settingsCommandElement.addEventListener('click', loadGridMenu);\n    settingsCommandElement.addEventListener('keydown', function (event) {\n      if (wcagService.isValidKeyPress(event)) {\n        loadGridMenu(event, settingsCommandElement);\n      }\n    });\n  };\n\n  self.addGridMenu = function () {\n    const localeGridMenuText = _splmTableMessages.gridMenu;\n    const html = '' + '<div class=\"aw-commands-svg\">' + '<button type=\"button\" class=\"aw-commands-commandIconButton icon-override\" tabindex=\"-1\" title=\"' + localeGridMenuText + '\" aria-label=\"' + localeGridMenuText + '\" >' + cmdSettings + '</button>' + '</div>';\n    let menu = util.createElement('div', 'aw-splm-tableMenuButton');\n    menu.innerHTML = html;\n    let btn = menu.querySelector('button');\n\n    _keyboardService.setOnFocusAndBlur(btn);\n\n    _table.insertBefore(menu, _table.children[0]);\n\n    loadGridMenuItems();\n  }; // ////////////////////////////////////////////////\n  // Context Menu\n  // ////////////////////////////////////////////////\n\n\n  var _handleContextMenuSingleSelect = function (rowVmoArray, selectionModel, event, dataProvider) {\n    var currentMode = selectionModel.mode;\n    selectionModel.setMode('single');\n\n    _selectionHelper.handleSelectionEvent(rowVmoArray, selectionModel, event, dataProvider);\n\n    selectionModel.setMode(currentMode);\n  };\n\n  self.setContextSelectionHelper = function (selectionHelper) {\n    _selectionHelper = selectionHelper;\n  };\n\n  self.contextSelectionHandler = function (event) {\n    if (event.target.tagName.toLowerCase() === 'a' && event.target.href !== '') {\n      return;\n    }\n\n    if (_gridOptions.showContextMenu !== true) {\n      return;\n    }\n\n    event.preventDefault();\n    event.cancelBubble = true;\n    let focusOnCloseElem = util.closestElement(event.target, '.' + Const.CLASS_CELL);\n    let contextMenuPopup = _gridOptions.popupContext.contextMenuPopup;\n\n    if (contextMenuPopup) {\n      const popupOptions = {\n        whenParentScrolls: 'close',\n        resizeToClose: true,\n        targetEvent: event,\n        reference: event.target,\n        autoFocus: true,\n        forceCloseOthers: false,\n        hooks: {\n          whenClosed: () => {\n            focusElementOnClose(focusOnCloseElem, true);\n          }\n        }\n      }; //Hiding a popup before showing it in order to re-position it on selected vmo.\n\n      contextMenuPopup.hide().then(() => {\n        contextMenuPopup.show(popupOptions);\n      });\n    }\n\n    var rowElement = event.currentTarget;\n    let rowVmoArray = [rowElement.vmo];\n    gridContextDispatcher({\n      type: 'UPDATE_VALUES',\n      contextVmo: rowVmoArray\n    });\n    /* if (right or left) click inside row we already have selected, we dont want to do another SOA call since commands already loaded,\n    just move panel with to mouse location */\n\n    if (rowElement.classList.contains('aw-state-selected') || rowElement.classList.contains('ui-grid-row-selected')) {\n      return;\n    }\n\n    while (_table.getElementsByClassName('aw-state-selected').length > 0) {\n      _table.getElementsByClassName('aw-state-selected')[0].classList.remove('aw-state-selected');\n\n      _table.getElementsByClassName('ui-grid-row-selected')[0].classList.remove('ui-grid-row-selected');\n    }\n\n    var selectionModel = _dataProvider.selectionModel;\n\n    _handleContextMenuSingleSelect(rowVmoArray, selectionModel, event);\n  };\n\n  var getLargestFrozenColumnIndex = function (columns) {\n    var largestFrozenIndex = 0;\n\n    for (var i = 0; i < columns.length; i++) {\n      // Check if frozen and for index of frozen column\n      if (columns[i].index > largestFrozenIndex && columns[i].pinnedLeft) {\n        largestFrozenIndex = columns[i].index;\n      }\n    }\n\n    return largestFrozenIndex;\n  };\n\n  self.loadDefaultColumnMenus = function () {\n    // Make default frozen column the highest index that is pinnedLeft from column config\n    // Or default to 0/1 depending on icon column\n    var columns = _dataProvider.cols;\n    var largestFrozenIndex = getLargestFrozenColumnIndex(columns); // Set default frozen index to 1 or 0 based on if icon column is present\n\n    var defaultFrozenIndex = _gridOptions.addIconColumn ? 1 : 0; // Use pinnedLeft if provided\n\n    if (largestFrozenIndex > 0) {\n      defaultFrozenIndex = largestFrozenIndex;\n    }\n\n    if (gridContextDispatcher) {\n      gridContextDispatcher({\n        type: 'UPDATE_VALUES',\n        defaultColumnPinIndex: defaultFrozenIndex\n      });\n    }\n  };\n\n  self.ensureAllTableMenusDismissed = function () {\n    self.ensureColumnMenuDismissed();\n    self.ensureTableMenuDismissed();\n  };\n\n  self.ensureTableMenuDismissed = function () {\n    self.gridMenuPopupRef && _gridOptions.popupContext.gridMenuPopup.hide();\n    self.gridMenuPopupRef = null;\n  }; // ////////////////////////////////////////////////\n  // Column Menu\n  // ////////////////////////////////////////////////\n\n\n  self.ensureColumnMenuDismissed = function () {\n    self.columnMenuPopupRef && _gridOptions.popupContext.columnMenuPopup.hide();\n    self.columnMenuPopupRef = null;\n  };\n\n  self.createColumnMenuElement = function () {\n    var menu = document.createElement('div');\n    menu.id = _table.id + '_menu';\n    menu.classList.add(Const.CLASS_TABLE_MENU);\n    menu.classList.add(Const.CLASS_TABLE_MENU_POPUP);\n    menu.setAttribute('role', 'menu');\n    var menuContainer = document.createElement('div');\n    menuContainer.id = _table.id + '_menuContainer';\n    menuContainer.classList.add(Const.CLASS_TABLE_MENU_CONTAINER); // since this is inserted into the DOM outside of the content area, need to re-apply the content class\n\n    menuContainer.classList.add('afx-content-background');\n    menuContainer.classList.add('aw-widgets-groupCommandStack');\n    menuContainer.appendChild(menu);\n    return menuContainer;\n  };\n\n  self.menuElements = [];\n\n  const isTargetPopupOpen = function (target) {\n    return target && target.dataset && target.dataset.popupId && target.dataset.popupId !== 'null';\n  };\n\n  const showColumnMenuPopup = function (target, menuContainer, isFocused, focusOnClose) {\n    const getPadding = () => {\n      // getCellCenter\n      const cell = target;\n      const {\n        width,\n        height\n      } = cell.getBoundingClientRect();\n      return {\n        x: -width / 2,\n        y: -height / 2\n      };\n    };\n\n    let columnMenuPopup = _gridOptions.popupContext.columnMenuPopup;\n\n    if (columnMenuPopup) {\n      const popupOptions = {\n        whenParentScrolls: 'close',\n        ignoreReferenceClick: true,\n        ignoreClicksFrom: ['.flatpickr-calendar'],\n        reference: target,\n        placement: 'right',\n        adaptiveShift: true,\n        autoFocus: true,\n        selectedElementCSS: '.aw-state-selected',\n        innerClassName: 'sw-table-menu-tooltip',\n        // Passing placeholder class for table menu tooltip, if any styling is required in the future, this class can be used\n        hasArrow: true,\n        forceCloseOthers: false,\n        padding: getPadding(),\n        width: '185px',\n        arrowOptions: {\n          alignment: 'center',\n          offset: 5,\n          shift: 15\n        },\n        hooks: {\n          whenClosed: () => {\n            appCtxService.unRegisterCtx('columnMenuContext');\n\n            if (_columnMenuSubscriptions.length) {\n              _.forEach(_columnMenuSubscriptions, function (subscription) {\n                eventBus.unsubscribe(subscription);\n              });\n\n              _columnMenuSubscriptions.length = 0;\n            }\n\n            focusElementOnClose(focusOnClose);\n          }\n        }\n      };\n      appCtxService.registerCtx('columnMenuContext', {});\n      columnMenuPopup.hide().then(() => {\n        columnMenuPopup.show(popupOptions).then(popupRef => {\n          self.columnMenuPopupRef = popupRef;\n          gridContextDispatcher({\n            type: 'UPDATE_VALUES',\n            popupRef: popupRef\n          });\n        });\n      });\n    }\n  };\n\n  const isColumnMenuDisabled = function (columnDef) {\n    return util.isBulkEditing(_table) || columnDef.enableColumnMenu === false || util.isCellEditing(_table);\n  };\n\n  self.columnMenuHandler = function (columnElem, isFocused) {\n    var columnDef = columnElem.columnDef;\n    return function (event) {\n      if (isColumnMenuDisabled(columnDef)) {\n        return;\n      }\n\n      event.preventDefault();\n      const menuContainer = util.closestElement(_table, '.' + Const.CLASS_TABLE_MENU_CONTAINER);\n\n      if (isTargetPopupOpen(event.currentTarget) && self.columnMenuPopupRef) {\n        self.ensureColumnMenuDismissed();\n      } else {\n        showColumnMenuPopup(event.currentTarget, menuContainer, isFocused, columnElem.parentElement);\n        tableInstance.columnMenuLoaded = true;\n      }\n    };\n  };\n\n  self.setFilterDisability = function (isDisabled) {\n    var tableMenuElem = _trv.queryTableMenu(_table.id).getElement();\n\n    var filterButtonElement = tableMenuElem.getElementsByClassName('filter-button')[0];\n\n    if (filterButtonElement) {\n      if (isDisabled) {\n        filterButtonElement.classList.add('disabled');\n      } else {\n        filterButtonElement.classList.remove('disabled');\n      }\n    }\n  };\n\n  return self;\n};\n\n_c2 = SPLMTableMenuService;\n_c = SPLMTableMenuService;\nexport default SPLMTableMenuService;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMTableMenuService\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMTableMenuService\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableMenuService.js"],"names":["SPLMTableMenuService","self","_table","_tableInstance","_dataProvider","_gridOptions","_splmTableMessages","_trv","_keyboardService","tableInstance","_selectionHelper","_columnMenuSubscriptions","focusElementOnClose","setTimeout","isDisabledDuringEdit","isEditDisable","util","focusElem","document","loadGridMenuItems","settingsCommandElement","loadGridMenu","gridContextDispatcher","type","isBulkEditing","dynamicRowHeightStatus","event","gridMenuPopup","popupOptions","forceCloseOthers","whenParentScrolls","reference","placement","hasArrow","autoFocus","innerClassName","padding","x","y","hooks","whenClosed","popupRef","wcagService","localeGridMenuText","html","menu","btn","_handleContextMenuSingleSelect","currentMode","selectionModel","focusOnCloseElem","Const","contextMenuPopup","resizeToClose","targetEvent","rowElement","rowVmoArray","contextVmo","getLargestFrozenColumnIndex","largestFrozenIndex","i","columns","defaultFrozenIndex","defaultColumnPinIndex","menuContainer","isTargetPopupOpen","target","showColumnMenuPopup","getPadding","cell","height","columnMenuPopup","ignoreReferenceClick","ignoreClicksFrom","adaptiveShift","selectedElementCSS","width","arrowOptions","alignment","offset","shift","appCtxService","_","eventBus","isColumnMenuDisabled","columnDef","columnElem","tableMenuElem","filterButtonElement"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Used for handling PL Table menus\n *\n * @module js/splmTableMenuService\n *\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport appCtxService from 'js/appCtxService';\nimport { svgString as cmdSettings } from 'image/cmdSettings24.svg';\nimport Trv from 'js/splmTableTraversal';\nimport util from 'js/splmTableUtils';\nimport Const from 'js/splmTableConstants';\n\n\nvar SPLMTableMenuService = function( table, directiveElement, tableInstance, gridContextDispatcher ) {\n    var self = this;\n    var _table = table;\n    var _tableInstance = tableInstance;\n    var _dataProvider = _tableInstance.dataProvider;\n    var _gridOptions = _tableInstance.gridOptions;\n    var _splmTableMessages = _tableInstance.messages;\n    var _trv = new Trv( table );\n    var _keyboardService = tableInstance.keyboardService;\n    var _selectionHelper = null;\n    var _columnMenuSubscriptions = [];\n    // Add menu service to table instance\n    _tableInstance.menuService = self;\n\n    const focusElementOnClose = function( focusElem, isEditDisable ) {\n        setTimeout( function() {\n            const isDisabledDuringEdit = isEditDisable && util.isBulkEditing( _table );\n            if( focusElem && document.activeElement && document.activeElement.tagName === 'BODY' && !isDisabledDuringEdit ) {\n                focusElem.focus();\n            }\n        }, 150 );\n    };\n\n    var loadGridMenuItems = function() {\n        var settingsCommandElement = _table.getElementsByClassName( 'aw-splm-tableMenuButton' )[ 0 ];\n\n        var loadGridMenu = function( event, focusOnCloseElem ) {\n            gridContextDispatcher( {\n                type: 'UPDATE_VALUES',\n                isBulkEditing: _tableInstance.isBulkEditing,\n                dynamicRowHeightStatus: _tableInstance.dynamicRowHeightStatus\n            } );\n            event.preventDefault();\n            let gridMenuPopup = _gridOptions.popupContext.gridMenuPopup;\n            if( gridMenuPopup ) {\n                if( !self.gridMenuPopupRef ) {\n                    const popupOptions = {\n                        forceCloseOthers: false,\n                        whenParentScrolls: 'close',\n                        reference: settingsCommandElement,\n                        placement: 'bottom-end',\n                        hasArrow: true,\n                        autoFocus: true,\n                        innerClassName: 'aw-popup-gridMenu',\n                        padding: { x: 4, y: 4 },\n                        hooks: {\n                            whenClosed: () => {\n                                self.gridMenuPopupRef = null;\n                                focusElementOnClose( focusOnCloseElem );\n                            }\n                        }\n                    };\n                    gridMenuPopup.show( popupOptions ).then( ( popupRef ) => {\n                        self.gridMenuPopupRef = popupRef;\n                    } );\n                } else {\n                    self.ensureTableMenuDismissed();\n                }\n            }\n        };\n\n        settingsCommandElement.addEventListener( 'click', loadGridMenu );\n        settingsCommandElement.addEventListener( 'keydown', function( event ) {\n            if( wcagService.isValidKeyPress( event ) ) {\n                loadGridMenu( event, settingsCommandElement );\n            }\n        } );\n    };\n\n    self.addGridMenu = function() {\n        const localeGridMenuText = _splmTableMessages.gridMenu;\n        const html = '' +\n            '<div class=\"aw-commands-svg\">' +\n            '<button type=\"button\" class=\"aw-commands-commandIconButton icon-override\" tabindex=\"-1\" title=\"' + localeGridMenuText + '\" aria-label=\"' + localeGridMenuText + '\" >' +\n            cmdSettings +\n            '</button>' +\n            '</div>';\n        let menu = util.createElement( 'div', 'aw-splm-tableMenuButton' );\n        menu.innerHTML = html;\n        let btn = menu.querySelector( 'button' );\n        _keyboardService.setOnFocusAndBlur( btn );\n        _table.insertBefore( menu, _table.children[ 0 ] );\n        loadGridMenuItems();\n    };\n\n    // ////////////////////////////////////////////////\n    // Context Menu\n    // ////////////////////////////////////////////////\n\n    var _handleContextMenuSingleSelect = function( rowVmoArray, selectionModel, event, dataProvider ) {\n        var currentMode = selectionModel.mode;\n        selectionModel.setMode( 'single' );\n        _selectionHelper.handleSelectionEvent( rowVmoArray, selectionModel, event, dataProvider );\n        selectionModel.setMode( currentMode );\n    };\n\n    self.setContextSelectionHelper = function( selectionHelper ) {\n        _selectionHelper = selectionHelper;\n    };\n\n    self.contextSelectionHandler = function( event ) {\n        if( event.target.tagName.toLowerCase() === 'a' && event.target.href !== '' ) {\n            return;\n        }\n        if( _gridOptions.showContextMenu !== true ) {\n            return;\n        }\n        event.preventDefault();\n        event.cancelBubble = true;\n\n        let focusOnCloseElem = util.closestElement( event.target, '.' + Const.CLASS_CELL );\n\n        let contextMenuPopup = _gridOptions.popupContext.contextMenuPopup;\n        if( contextMenuPopup ) {\n            const popupOptions = {\n                whenParentScrolls: 'close',\n                resizeToClose: true,\n                targetEvent: event,\n                reference: event.target,\n                autoFocus: true,\n                forceCloseOthers: false,\n                hooks: {\n                    whenClosed: () => {\n                        focusElementOnClose( focusOnCloseElem, true );\n                    }\n                }\n            };\n            //Hiding a popup before showing it in order to re-position it on selected vmo.\n            contextMenuPopup.hide().then( () => {\n                contextMenuPopup.show( popupOptions );\n            } );\n        }\n\n        var rowElement = event.currentTarget;\n        let rowVmoArray = [ rowElement.vmo ];\n\n        gridContextDispatcher( {\n            type: 'UPDATE_VALUES',\n            contextVmo: rowVmoArray\n        } );\n\n        /* if (right or left) click inside row we already have selected, we dont want to do another SOA call since commands already loaded,\n        just move panel with to mouse location */\n        if( rowElement.classList.contains( 'aw-state-selected' ) || rowElement.classList.contains( 'ui-grid-row-selected' ) ) {\n            return;\n        }\n\n        while( _table.getElementsByClassName( 'aw-state-selected' ).length > 0 ) {\n            _table.getElementsByClassName( 'aw-state-selected' )[ 0 ].classList.remove( 'aw-state-selected' );\n            _table.getElementsByClassName( 'ui-grid-row-selected' )[ 0 ].classList.remove( 'ui-grid-row-selected' );\n        }\n\n        var selectionModel = _dataProvider.selectionModel;\n\n        _handleContextMenuSingleSelect( rowVmoArray, selectionModel, event );\n    };\n\n    var getLargestFrozenColumnIndex = function( columns ) {\n        var largestFrozenIndex = 0;\n        for( var i = 0; i < columns.length; i++ ) {\n            // Check if frozen and for index of frozen column\n            if( columns[ i ].index > largestFrozenIndex && columns[ i ].pinnedLeft ) {\n                largestFrozenIndex = columns[ i ].index;\n            }\n        }\n        return largestFrozenIndex;\n    };\n\n    self.loadDefaultColumnMenus = function() {\n        // Make default frozen column the highest index that is pinnedLeft from column config\n        // Or default to 0/1 depending on icon column\n        var columns = _dataProvider.cols;\n        var largestFrozenIndex = getLargestFrozenColumnIndex( columns );\n\n        // Set default frozen index to 1 or 0 based on if icon column is present\n        var defaultFrozenIndex = _gridOptions.addIconColumn ? 1 : 0;\n\n        // Use pinnedLeft if provided\n        if( largestFrozenIndex > 0 ) {\n            defaultFrozenIndex = largestFrozenIndex;\n        }\n        if( gridContextDispatcher ) {\n            gridContextDispatcher( {\n                type: 'UPDATE_VALUES',\n                defaultColumnPinIndex: defaultFrozenIndex\n            } );\n        }\n    };\n\n    self.ensureAllTableMenusDismissed = function() {\n        self.ensureColumnMenuDismissed();\n        self.ensureTableMenuDismissed();\n    };\n\n    self.ensureTableMenuDismissed = function() {\n        self.gridMenuPopupRef && _gridOptions.popupContext.gridMenuPopup.hide();\n        self.gridMenuPopupRef = null;\n    };\n\n    // ////////////////////////////////////////////////\n    // Column Menu\n    // ////////////////////////////////////////////////\n    self.ensureColumnMenuDismissed = function() {\n        self.columnMenuPopupRef && _gridOptions.popupContext.columnMenuPopup.hide();\n        self.columnMenuPopupRef = null;\n    };\n\n    self.createColumnMenuElement = function() {\n        var menu = document.createElement( 'div' );\n        menu.id = _table.id + '_menu';\n        menu.classList.add( Const.CLASS_TABLE_MENU );\n        menu.classList.add( Const.CLASS_TABLE_MENU_POPUP );\n        menu.setAttribute( 'role', 'menu' );\n\n        var menuContainer = document.createElement( 'div' );\n        menuContainer.id = _table.id + '_menuContainer';\n        menuContainer.classList.add( Const.CLASS_TABLE_MENU_CONTAINER );\n        // since this is inserted into the DOM outside of the content area, need to re-apply the content class\n        menuContainer.classList.add( 'afx-content-background' );\n        menuContainer.classList.add( 'aw-widgets-groupCommandStack' );\n        menuContainer.appendChild( menu );\n\n        return menuContainer;\n    };\n\n    self.menuElements = [];\n\n    const isTargetPopupOpen = function( target ) {\n        return target && target.dataset && target.dataset.popupId && target.dataset.popupId !== 'null';\n    };\n\n    const showColumnMenuPopup = function( target, menuContainer, isFocused, focusOnClose ) {\n        const getPadding = () => {\n            // getCellCenter\n            const cell = target;\n            const { width, height } = cell.getBoundingClientRect();\n            return { x: -width / 2, y: -height / 2 };\n        };\n\n        let columnMenuPopup = _gridOptions.popupContext.columnMenuPopup;\n        if( columnMenuPopup ) {\n            const popupOptions = {\n                whenParentScrolls: 'close',\n                ignoreReferenceClick: true,\n                ignoreClicksFrom: [ '.flatpickr-calendar' ],\n                reference: target,\n                placement: 'right',\n                adaptiveShift: true,\n                autoFocus: true,\n                selectedElementCSS: '.aw-state-selected',\n                innerClassName: 'sw-table-menu-tooltip', // Passing placeholder class for table menu tooltip, if any styling is required in the future, this class can be used\n                hasArrow: true,\n                forceCloseOthers: false,\n                padding: getPadding(),\n                width: '185px',\n                arrowOptions: {\n                    alignment: 'center',\n                    offset: 5,\n                    shift: 15\n                },\n                hooks: {\n                    whenClosed: () => {\n                        appCtxService.unRegisterCtx( 'columnMenuContext' );\n                        if( _columnMenuSubscriptions.length ) {\n                            _.forEach( _columnMenuSubscriptions, function( subscription ) {\n                                eventBus.unsubscribe( subscription );\n                            } );\n                            _columnMenuSubscriptions.length = 0;\n                        }\n                        focusElementOnClose( focusOnClose );\n                    }\n                }\n            };\n            appCtxService.registerCtx( 'columnMenuContext', {} );\n            columnMenuPopup.hide().then( () => {\n                columnMenuPopup.show( popupOptions ).then( ( popupRef ) => {\n                    self.columnMenuPopupRef = popupRef;\n                    gridContextDispatcher( {\n                        type: 'UPDATE_VALUES',\n                        popupRef: popupRef\n                    } );\n                } );\n            } );\n        }\n    };\n\n    const isColumnMenuDisabled = function( columnDef ) {\n        return util.isBulkEditing( _table ) || columnDef.enableColumnMenu === false || util.isCellEditing( _table );\n    };\n\n    self.columnMenuHandler = function( columnElem, isFocused ) {\n        var columnDef = columnElem.columnDef;\n        return function( event ) {\n            if( isColumnMenuDisabled( columnDef ) ) {\n                return;\n            }\n            event.preventDefault();\n\n            const menuContainer = util.closestElement( _table, '.' + Const.CLASS_TABLE_MENU_CONTAINER );\n\n            if( isTargetPopupOpen( event.currentTarget ) && self.columnMenuPopupRef ) {\n                self.ensureColumnMenuDismissed();\n            } else {\n                showColumnMenuPopup( event.currentTarget, menuContainer, isFocused, columnElem.parentElement );\n                tableInstance.columnMenuLoaded = true;\n            }\n        };\n    };\n\n    self.setFilterDisability = function( isDisabled ) {\n        var tableMenuElem = _trv.queryTableMenu( _table.id ).getElement();\n        var filterButtonElement = tableMenuElem.getElementsByClassName( 'filter-button' )[ 0 ];\n\n        if( filterButtonElement ) {\n            if( isDisabled ) {\n                filterButtonElement.classList.add( 'disabled' );\n            } else {\n                filterButtonElement.classList.remove( 'disabled' );\n            }\n        }\n    };\n\n    return self;\n};\n\nexport default SPLMTableMenuService;\n"]},"metadata":{},"sourceType":"module"}
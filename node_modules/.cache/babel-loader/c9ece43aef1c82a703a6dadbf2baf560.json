{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file provides helper functions for table selection\n *\n * @module js/splmTableSelectionHelper\n */\nimport awSPLMTableCellRendererFactory from 'js/awSPLMTableCellRendererFactory';\nimport eventBus from 'js/eventBus';\nimport selectionHelper from 'js/selectionHelper';\nimport _ from 'lodash';\nimport Const from 'js/splmTableConstants';\nimport util from 'js/splmTableUtils';\nimport Trv from 'js/splmTableTraversal';\n/**\n *\n * Handles other select through selection handler\n *\n * @param {Object} rowVmoArray - array of VMOs to select\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - event from the tap/click action\n * @param {Object} dataProvider - declarative dataProvider\n */\n\nconst handleNonContextMenuSelect = function (rowVmoArray, selectionModel, event, dataProvider) {\n  selectionHelper.handleSelectionEvent(rowVmoArray, selectionModel, event, dataProvider.viewModelCollection);\n};\n\nconst selectCell = function (cell, gridOptions, columnDefs, idx, cellRenderer, selectionModel, pinElem, rowElem, table) {\n  cell.classList.add(Const.CLASS_CELL_SELECTED);\n\n  if (gridOptions.transpose === true) {\n    cell.classList.add('ui-grid-columnSelected');\n    return;\n  }\n\n  const isCommandNeeded = columnDefs[idx].isTableCommand || columnDefs[idx].isTreeNavigation;\n\n  if (!isCommandNeeded) {\n    return;\n  }\n\n  let cellTop = cell.children[0];\n\n  if (columnDefs[idx].isTreeNavigation && cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer').length > 0) {\n    cellTop = cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer')[0];\n  }\n\n  cellRenderer.resetHoverCommandElement(); // process OOTB cmd cell\n\n  if (cellTop.lastChild && cellTop.lastChild.classList && cellTop.lastChild.classList.contains(Const.CLASS_NATIVE_CELL_COMMANDS)) {\n    util.destroyElement(cellTop.lastChild);\n  } // process customize cmd cell\n\n\n  if (cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length !== 0) {\n    if (selectionModel.multiSelectEnabled) {\n      cellTop.lastChild.style.display = 'none';\n    }\n  } // set checkbox when item is selected\n\n\n  if (pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON).length > 0) {\n    pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON)[0].checked = true;\n  }\n\n  if (rowElem.vmo.props) {\n    if (cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length === 0) {\n      if (!selectionModel.multiSelectEnabled && selectionModel.getCurrentSelectedCount() === 1) {\n        const markElem = awSPLMTableCellRendererFactory.createCellCommandElement(columnDefs[idx], rowElem.vmo, table, true);\n        cellTop.appendChild(markElem);\n      }\n    }\n\n    if (cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length >= 1) {\n      if (selectionModel.mode === 'multiple' && selectionModel.getCurrentSelectedCount() > 1) {\n        removeCellCommandContainer(cellTop);\n      }\n    }\n  }\n};\n\nconst deselectCell = function (cell, gridOptions, columnDefs, idx, cellRenderer, pinElem, selectionModel) {\n  if (gridOptions.enableColumnSelection && cell.classList.contains(Const.CLASS_COLUMN_SELECTED)) {\n    return;\n  }\n\n  if (cell.classList.contains(Const.CLASS_CELL_SELECTED)) {\n    cell.classList.remove(Const.CLASS_CELL_SELECTED);\n  }\n\n  if (gridOptions.transpose === true) {\n    cell.classList.remove('ui-grid-columSelected');\n    return;\n  }\n\n  if (columnDefs[idx].isTableCommand || columnDefs[idx].isTreeNavigation) {\n    let cellTop = cell.children[0];\n\n    if (columnDefs[idx].isTreeNavigation && cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer').length > 0) {\n      cellTop = cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer')[0];\n    } // Process OOTB cmd cell\n\n\n    if (cellTop.lastChild && cellTop.lastChild.classList && cellTop.lastChild.classList.contains(Const.CLASS_NATIVE_CELL_COMMANDS)) {\n      util.destroyElement(cellTop.lastChild);\n      cellRenderer.destroyHoverCommandElement();\n    } // unset checkbox when item is not selected.\n\n\n    if (pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON).length > 0) {\n      pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON)[0].checked = false;\n    } // Process customize cmd cell\n\n\n    if (cellTop.lastChild && cellTop.lastChild.classList && cellTop.lastChild.classList.contains(Const.CLASS_AW_CELL_COMMANDS)) {\n      if (selectionModel.multiSelectEnabled) {\n        cellTop.lastChild.style.display = 'none';\n      } else {\n        cellTop.lastChild.style.removeProperty('display');\n      }\n    }\n\n    removeCellCommandContainer(cellTop);\n  }\n};\n\nconst removeCellCommandContainer = function (cellTop) {\n  const cellCommandContainer = cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER)[0];\n\n  if (cellCommandContainer && cellCommandContainer.parentElement) {\n    util.cleanupComponents(cellTop);\n\n    if (cellCommandContainer.parentElement) {\n      cellCommandContainer.parentElement.removeChild(cellCommandContainer);\n    }\n\n    util.destroyElement(cellCommandContainer);\n  }\n};\n\nconst updateCellSelectedClass = (rowCells, gridOptions, pinElem, rowElem, table, columnDefs, selectionModel) => {\n  // Add cell selected class to each cell\n  _.forEach(rowCells, function (cell, idx) {\n    const vmo = gridOptions.transpose === true ? cell.columnDef.vmo : rowElem.vmo;\n    const cellRenderer = table._tableInstance.cellRenderer;\n\n    if (vmo && selectionModel.isSelected(vmo)) {\n      selectCell(cell, gridOptions, columnDefs, idx, cellRenderer, selectionModel, pinElem, rowElem, table);\n    } else {\n      deselectCell(cell, gridOptions, columnDefs, idx, cellRenderer, pinElem, selectionModel);\n    }\n  });\n};\n\nconst clearCellHeaderAndColumnSelection = function (tableElem) {\n  let headerCells = tableElem.querySelectorAll(`.${Const.CLASS_COLUMN_DEF}`);\n\n  let selectedHeader = _.find(headerCells, {\n    columnDef: {\n      colSelected: true\n    }\n  });\n\n  if (selectedHeader) {\n    delete selectedHeader.columnDef.colSelected;\n\n    if (tableElem._tableInstance && tableElem._tableInstance.dataProvider && tableElem._tableInstance.dataProvider.gridContextDispatcher) {\n      tableElem._tableInstance.dataProvider.gridContextDispatcher({\n        type: 'UPDATE_VALUES',\n        selectedColumn: null\n      });\n    }\n  }\n\n  let cells = tableElem.querySelectorAll(`.${Const.CLASS_HEADER_CELL_SELECTED}, .${Const.CLASS_COLUMN_SELECTED}`);\n\n  for (let k = 0; k < cells.length; k++) {\n    cells[k].classList.remove(Const.CLASS_HEADER_CELL_SELECTED, Const.CLASS_CELL_SELECTED, Const.CLASS_COLUMN_SELECTED);\n  }\n};\n\nexport const setCellHeaderSelection = function (selection, table) {\n  clearCellHeaderAndColumnSelection(table);\n\n  if (selection && selection.propName) {\n    const columnProp = selection.propName;\n    let headerCells = table.querySelectorAll(`.${Const.CLASS_COLUMN_DEF}`);\n\n    let foundCol = _.find(headerCells, {\n      columnDef: {\n        field: columnProp\n      }\n    });\n\n    if (foundCol && foundCol.parentElement) {\n      // parent element to get the whole header cell\n      foundCol.parentElement.classList.add(Const.CLASS_HEADER_CELL_SELECTED);\n    }\n  }\n};\nexport const selectColumnCells = function (table, columnName) {\n  // First set the header selection\n  setCellHeaderSelection({\n    propName: columnName\n  }, table);\n  let headerCells = table.querySelectorAll(`.${Const.CLASS_COLUMN_DEF}`);\n\n  let selectedHeader = _.find(headerCells, {\n    columnDef: {\n      field: columnName\n    }\n  });\n\n  if (selectedHeader && selectedHeader.columnDef) {\n    selectedHeader.columnDef.colSelected = true;\n  } // Now select all cells in column\n\n\n  const allCells = table.querySelectorAll(`.${Const.CLASS_CELL}`);\n\n  const foundCells = _.filter(allCells, {\n    propName: columnName\n  });\n\n  for (let i = 0; i < foundCells.length; i++) {\n    foundCells[i].classList.add(Const.CLASS_COLUMN_SELECTED, Const.CLASS_CELL_SELECTED);\n  }\n};\nexport const setCellColumnSelection = function (dataProvider, columnDef) {\n  // Clear any selection\n  dataProvider.selectNone();\n  dataProvider.gridContextDispatcher && dataProvider.gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    selectedColumn: columnDef\n  });\n}; // LCS-145673 - Make 'Show Children' command visible in table rows\n// We need to make the selection code be compatible with:\n// 1. When cellRenderer contains command cell by default\n// 2. When cellRenderer does not contains command cell\n// Code in this method work for both as design above\n\nexport const updateContentRowSelection = function (selectionModel, columnDefs, pinRowElements, scrollRowElements, table) {\n  const cnt = pinRowElements.length;\n  const gridOptions = table._tableInstance.gridOptions;\n\n  if (gridOptions.transpose === true) {\n    const trv = new Trv(table);\n    const headerElements = trv.getHeaderCellElementsFromTable();\n\n    for (let i = 0; i < headerElements.length; i++) {\n      const headerElement = headerElements[i];\n      const columnDefElement = headerElements[i].getElementsByClassName(Const.CLASS_COLUMN_DEF)[0];\n\n      if (columnDefElement && columnDefElement.columnDef.vmo && selectionModel.isSelected(columnDefElement.columnDef.vmo)) {\n        headerElement.classList.add(Const.CLASS_HEADER_CELL_SELECTED);\n      } else {\n        headerElement.classList.remove(Const.CLASS_HEADER_CELL_SELECTED);\n      }\n    }\n  }\n\n  for (let i = 0; i < cnt; i++) {\n    const rowElem = scrollRowElements[i];\n    const pinElem = pinRowElements[i];\n    let rowCells = Array.prototype.slice.call(pinElem.getElementsByClassName(Const.CLASS_CELL));\n    rowCells = rowCells.concat(Array.prototype.slice.call(rowElem.getElementsByClassName(Const.CLASS_CELL)));\n\n    if (!rowElem.vmo) {\n      rowElem.classList.remove(Const.CLASS_ROW_SELECTED);\n      rowElem.classList.remove(Const.CLASS_STATE_SELECTED);\n      rowElem.classList.remove(Const.CLASS_ROW_INACTIVATED);\n      pinElem.classList.remove(Const.CLASS_ROW_SELECTED);\n      pinElem.classList.remove(Const.CLASS_STATE_SELECTED);\n      pinElem.classList.remove(Const.CLASS_ROW_INACTIVATED); // remove cell selected class to each cell\n\n      _.forEach(rowCells, function (cell) {\n        cell.classList.remove(Const.CLASS_CELL_SELECTED);\n      });\n\n      continue;\n    }\n\n    if (selectionModel.isSelected(rowElem.vmo)) {\n      if (!selectionModel.isSelectionModelActivated()) {\n        rowElem.classList.add(Const.CLASS_ROW_INACTIVATED);\n        pinElem.classList.add(Const.CLASS_ROW_INACTIVATED);\n\n        table._tableInstance.editor.removeAllCellSelection();\n      } else if (rowElem.classList.contains(Const.CLASS_ROW_INACTIVATED)) {\n        rowElem.classList.remove(Const.CLASS_ROW_INACTIVATED);\n        pinElem.classList.remove(Const.CLASS_ROW_INACTIVATED);\n      }\n\n      rowElem.classList.add(Const.CLASS_ROW_SELECTED);\n      rowElem.classList.add(Const.CLASS_STATE_SELECTED);\n      rowElem.setAttribute('aria-selected', 'true');\n      pinElem.classList.add(Const.CLASS_ROW_SELECTED);\n      pinElem.classList.add(Const.CLASS_STATE_SELECTED);\n      pinElem.setAttribute('aria-selected', 'true');\n      updateCellSelectedClass(rowCells, gridOptions, pinElem, rowElem, table, columnDefs, selectionModel);\n      continue;\n    }\n\n    if (rowElem.classList.contains(Const.CLASS_ROW_SELECTED) || rowElem.classList.contains(Const.CLASS_STATE_SELECTED)) {\n      rowElem.classList.remove(Const.CLASS_ROW_SELECTED);\n      rowElem.classList.remove(Const.CLASS_STATE_SELECTED);\n      rowElem.classList.remove(Const.CLASS_ROW_INACTIVATED);\n\n      if (rowElem.hasAttribute('aria-selected')) {\n        rowElem.removeAttribute('aria-selected');\n      }\n    }\n\n    if (pinElem.classList.contains(Const.CLASS_ROW_SELECTED) || pinElem.classList.contains(Const.CLASS_STATE_SELECTED)) {\n      pinElem.classList.remove(Const.CLASS_ROW_SELECTED);\n      pinElem.classList.remove(Const.CLASS_STATE_SELECTED);\n      pinElem.classList.remove(Const.CLASS_ROW_INACTIVATED);\n\n      if (pinElem.hasAttribute('aria-selected')) {\n        pinElem.removeAttribute('aria-selected');\n      }\n    }\n\n    updateCellSelectedClass(rowCells, gridOptions, pinElem, rowElem, table, columnDefs, selectionModel);\n  }\n};\n\nconst handleSelect = function (selectedVmo, event, selectionModel, dataProvider, tableElem) {\n  handleNonContextMenuSelect([selectedVmo], selectionModel, event, dataProvider);\n  /**\n   * If we already have row selected, then ctrl + select the same row, we need to update selected row to provide checkmark\n   * Dataprovider watcher evaluates by checking if currently selected has changed. This wont catch for selecting same row in multi\n   * instead of single\n   */\n\n  if (event.ctrlKey) {\n    // event obj basically same as regular selectionChangeEvent\n    let eventObj = {\n      selectedObjects: dataProvider.getSelectedObjects(),\n      selectedUids: selectionModel.getSelection(),\n      selectionModel: selectionModel,\n      selected: dataProvider.getSelectedObjects(),\n      dataProviderName: dataProvider.name,\n      dataProvider: dataProvider\n    }; // Publish event as it doesn't get published with ctrl key\n\n    eventBus.publish(`${dataProvider.name}.selectionChangeEvent`, eventObj);\n  } // This event is used to denote a selection performed by user click on a row.\n\n\n  const gridId = tableElem._tableInstance.gridId;\n  eventBus.publish(gridId + '.gridSelection', {\n    selectedObjects: dataProvider.getSelectedObjects()\n  });\n};\n\nconst getLatestVmo = function (currentVmo, dataProvider) {\n  let id = currentVmo.alternateID || currentVmo.uid;\n  let idx = dataProvider.viewModelCollection.findViewModelObjectById(id);\n  return dataProvider.viewModelCollection.loadedVMObjects[idx];\n};\n/**\n *\n * Callback method when a table row gets selected/clicked\n *\n * @param {DOMElement} tableElem - the table element\n * @param {Event} [keyboardTargetElement] - the destination of keyboard event (Optional)\n * @return {function} selection handler function\n */\n\n\nexport const selectionChanged = function (tableElem, keyboardTargetElement) {\n  return function (event) {\n    const target = keyboardTargetElement || event.target; // Do not trigger selection if clicking on link\n\n    if (target.tagName.toLowerCase() === 'a' && target.href !== '') {\n      return;\n    } // Do not trigger selection if clicking on tree expand/collapse icon\n\n\n    if (util.closestElement(target, `.${Const.CLASS_TREE_ROW_HEADER_BUTTONS}`)) {\n      return;\n    } // Do not trigger selection if clicking on a cell command\n\n\n    if (util.closestElement(target, '.aw-command')) {\n      return;\n    }\n\n    const dataProvider = tableElem._tableInstance.dataProvider; // Get target vmo that was selected\n\n    let selectedRow = util.closestElement(target, '.' + Const.CLASS_ROW);\n    let selectedVmo = selectedRow && selectedRow.vmo && getLatestVmo(selectedRow.vmo, dataProvider);\n    let selectedCell = util.closestElement(target, '.' + Const.CLASS_CELL);\n\n    if (!selectedCell && event.currentTarget.columnDef) {\n      selectedCell = event.currentTarget;\n    }\n\n    const gridOptions = tableElem._tableInstance.gridOptions;\n\n    if (gridOptions.transpose === true) {\n      if (selectedCell && selectedCell.columnDef && selectedCell.columnDef.vmo) {\n        selectedVmo = selectedCell.columnDef.vmo;\n      } else {\n        return;\n      }\n    }\n\n    const selectionModel = dataProvider.selectionModel;\n\n    if (selectionModel && selectedVmo && selectedVmo.props) {\n      // Valid Selections Use Cases:\n      // 1. Selecting vmo that is not selected\n      const vmoNotSelected = !selectedVmo.selected; // 2. Selecting row selection checkbox\n\n      const selectedRowCheckbox = util.closestElement(event.target, '.' + Const.CLASS_CELL_CHECKBOX); // 3. Deselecting vmo with Ctrl key\n\n      const deselectingVmo = selectedVmo.selected && event.ctrlKey; // 4. Selecting already selected vmo when other selections are present and multiselection mode is off\n\n      const selectedLength = dataProvider.getSelectedObjects().length;\n      const keepVmoSelectedButDeselectOthers = selectedVmo.selected && selectedLength > 1 && !selectionModel.multiSelectEnabled;\n\n      if (vmoNotSelected || selectedRowCheckbox || deselectingVmo || keepVmoSelectedButDeselectOthers) {\n        handleSelect(selectedVmo, event, selectionModel, dataProvider, tableElem);\n      } else if (selectionModel.getSelection()[0] === selectedVmo.uid || selectedVmo.alternateID && selectedVmo.alternateID === selectionModel.getSelection()[0]) {\n        dataProvider.selectionModel.setSelectionModelActivated(true);\n        let selectData = dataProvider.selectionModel.selectionData;\n        selectData && selectData.update({ ...selectData.value,\n          selected: dataProvider.getSelectedObjects()\n        });\n      }\n    }\n  };\n};\nexport default {\n  selectionChanged,\n  updateContentRowSelection,\n  setCellHeaderSelection,\n  setCellColumnSelection,\n  selectColumnCells\n};","map":{"version":3,"names":["awSPLMTableCellRendererFactory","eventBus","selectionHelper","_","Const","util","Trv","handleNonContextMenuSelect","rowVmoArray","selectionModel","event","dataProvider","handleSelectionEvent","viewModelCollection","selectCell","cell","gridOptions","columnDefs","idx","cellRenderer","pinElem","rowElem","table","classList","add","CLASS_CELL_SELECTED","transpose","isCommandNeeded","isTableCommand","isTreeNavigation","cellTop","children","getElementsByClassName","length","resetHoverCommandElement","lastChild","contains","CLASS_NATIVE_CELL_COMMANDS","destroyElement","CLASS_AW_CELL_COMMANDS_CONTAINER","multiSelectEnabled","style","display","CLASS_CELL_CHECKBOX_BUTTON","checked","vmo","props","getCurrentSelectedCount","markElem","createCellCommandElement","appendChild","mode","removeCellCommandContainer","deselectCell","enableColumnSelection","CLASS_COLUMN_SELECTED","remove","destroyHoverCommandElement","CLASS_AW_CELL_COMMANDS","removeProperty","cellCommandContainer","parentElement","cleanupComponents","removeChild","updateCellSelectedClass","rowCells","forEach","columnDef","_tableInstance","isSelected","clearCellHeaderAndColumnSelection","tableElem","headerCells","querySelectorAll","CLASS_COLUMN_DEF","selectedHeader","find","colSelected","gridContextDispatcher","type","selectedColumn","cells","CLASS_HEADER_CELL_SELECTED","k","setCellHeaderSelection","selection","propName","columnProp","foundCol","field","selectColumnCells","columnName","allCells","CLASS_CELL","foundCells","filter","i","setCellColumnSelection","selectNone","updateContentRowSelection","pinRowElements","scrollRowElements","cnt","trv","headerElements","getHeaderCellElementsFromTable","headerElement","columnDefElement","Array","prototype","slice","call","concat","CLASS_ROW_SELECTED","CLASS_STATE_SELECTED","CLASS_ROW_INACTIVATED","isSelectionModelActivated","editor","removeAllCellSelection","setAttribute","hasAttribute","removeAttribute","handleSelect","selectedVmo","ctrlKey","eventObj","selectedObjects","getSelectedObjects","selectedUids","getSelection","selected","dataProviderName","name","publish","gridId","getLatestVmo","currentVmo","id","alternateID","uid","findViewModelObjectById","loadedVMObjects","selectionChanged","keyboardTargetElement","target","tagName","toLowerCase","href","closestElement","CLASS_TREE_ROW_HEADER_BUTTONS","selectedRow","CLASS_ROW","selectedCell","currentTarget","vmoNotSelected","selectedRowCheckbox","CLASS_CELL_CHECKBOX","deselectingVmo","selectedLength","keepVmoSelectedButDeselectOthers","setSelectionModelActivated","selectData","selectionData","update","value"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableSelectionHelper.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file provides helper functions for table selection\n *\n * @module js/splmTableSelectionHelper\n */\nimport awSPLMTableCellRendererFactory from 'js/awSPLMTableCellRendererFactory';\nimport eventBus from 'js/eventBus';\nimport selectionHelper from 'js/selectionHelper';\nimport _ from 'lodash';\nimport Const from 'js/splmTableConstants';\nimport util from 'js/splmTableUtils';\nimport Trv from 'js/splmTableTraversal';\n\n/**\n *\n * Handles other select through selection handler\n *\n * @param {Object} rowVmoArray - array of VMOs to select\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - event from the tap/click action\n * @param {Object} dataProvider - declarative dataProvider\n */\nconst handleNonContextMenuSelect = function( rowVmoArray, selectionModel, event, dataProvider ) {\n    selectionHelper.handleSelectionEvent( rowVmoArray, selectionModel, event, dataProvider.viewModelCollection );\n};\n\nconst selectCell = function( cell, gridOptions, columnDefs, idx, cellRenderer, selectionModel, pinElem, rowElem, table ) {\n    cell.classList.add( Const.CLASS_CELL_SELECTED );\n    if( gridOptions.transpose === true ) {\n        cell.classList.add( 'ui-grid-columnSelected' );\n        return;\n    }\n    const isCommandNeeded = columnDefs[ idx ].isTableCommand || columnDefs[ idx ].isTreeNavigation;\n    if( !isCommandNeeded ) {\n        return;\n    }\n\n    let cellTop = cell.children[ 0 ];\n    if( columnDefs[ idx ].isTreeNavigation && cell.getElementsByClassName( 'aw-jswidgets-tableNonEditContainer' ).length > 0 ) {\n        cellTop = cell.getElementsByClassName( 'aw-jswidgets-tableNonEditContainer' )[ 0 ];\n    }\n    cellRenderer.resetHoverCommandElement();\n    // process OOTB cmd cell\n    if( cellTop.lastChild && cellTop.lastChild.classList && cellTop.lastChild.classList.contains( Const.CLASS_NATIVE_CELL_COMMANDS ) ) {\n        util.destroyElement( cellTop.lastChild );\n    }\n\n    // process customize cmd cell\n    if( cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER ).length !== 0 ) {\n        if( selectionModel.multiSelectEnabled ) {\n            cellTop.lastChild.style.display = 'none';\n        }\n    }\n    // set checkbox when item is selected\n    if( pinElem.getElementsByClassName( Const.CLASS_CELL_CHECKBOX_BUTTON ).length > 0 ) {\n        pinElem.getElementsByClassName( Const.CLASS_CELL_CHECKBOX_BUTTON )[ 0 ].checked = true;\n    }\n\n    if( rowElem.vmo.props ) {\n        if( cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER ).length === 0 ) {\n            if( !selectionModel.multiSelectEnabled && selectionModel.getCurrentSelectedCount() === 1 ) {\n                const markElem = awSPLMTableCellRendererFactory.createCellCommandElement( columnDefs[ idx ], rowElem.vmo, table, true );\n                cellTop.appendChild( markElem );\n            }\n        }\n\n        if( cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER ).length >= 1 ) {\n            if( selectionModel.mode === 'multiple' && selectionModel.getCurrentSelectedCount() > 1 ) {\n                removeCellCommandContainer( cellTop );\n            }\n        }\n    }\n};\n\nconst deselectCell = function( cell, gridOptions, columnDefs, idx, cellRenderer, pinElem, selectionModel ) {\n    if( gridOptions.enableColumnSelection && cell.classList.contains( Const.CLASS_COLUMN_SELECTED ) ) {\n        return;\n    }\n\n    if( cell.classList.contains( Const.CLASS_CELL_SELECTED ) ) {\n        cell.classList.remove( Const.CLASS_CELL_SELECTED );\n    }\n    if( gridOptions.transpose === true ) {\n        cell.classList.remove( 'ui-grid-columSelected' );\n        return;\n    }\n\n    if( columnDefs[ idx ].isTableCommand || columnDefs[ idx ].isTreeNavigation ) {\n        let cellTop = cell.children[ 0 ];\n        if( columnDefs[ idx ].isTreeNavigation && cell.getElementsByClassName( 'aw-jswidgets-tableNonEditContainer' ).length > 0 ) {\n            cellTop = cell.getElementsByClassName( 'aw-jswidgets-tableNonEditContainer' )[ 0 ];\n        }\n        // Process OOTB cmd cell\n        if( cellTop.lastChild && cellTop.lastChild.classList &&\n            cellTop.lastChild.classList.contains( Const.CLASS_NATIVE_CELL_COMMANDS ) ) {\n            util.destroyElement( cellTop.lastChild );\n            cellRenderer.destroyHoverCommandElement();\n        }\n        // unset checkbox when item is not selected.\n        if( pinElem.getElementsByClassName( Const.CLASS_CELL_CHECKBOX_BUTTON ).length > 0 ) {\n            pinElem.getElementsByClassName( Const.CLASS_CELL_CHECKBOX_BUTTON )[ 0 ].checked = false;\n        }\n\n        // Process customize cmd cell\n        if( cellTop.lastChild && cellTop.lastChild.classList &&\n            cellTop.lastChild.classList.contains( Const.CLASS_AW_CELL_COMMANDS ) ) {\n            if( selectionModel.multiSelectEnabled ) {\n                cellTop.lastChild.style.display = 'none';\n            } else {\n                cellTop.lastChild.style.removeProperty( 'display' );\n            }\n        }\n\n        removeCellCommandContainer( cellTop );\n    }\n};\n\nconst removeCellCommandContainer = function( cellTop ) {\n    const cellCommandContainer = cellTop.getElementsByClassName( Const.CLASS_AW_CELL_COMMANDS_CONTAINER )[ 0 ];\n    if( cellCommandContainer && cellCommandContainer.parentElement ) {\n        util.cleanupComponents( cellTop );\n        if( cellCommandContainer.parentElement ) {\n            cellCommandContainer.parentElement.removeChild( cellCommandContainer );\n        }\n        util.destroyElement( cellCommandContainer );\n    }\n};\n\nconst updateCellSelectedClass = ( rowCells, gridOptions, pinElem, rowElem, table, columnDefs, selectionModel ) => {\n    // Add cell selected class to each cell\n    _.forEach( rowCells, function( cell, idx ) {\n        const vmo = gridOptions.transpose === true ? cell.columnDef.vmo : rowElem.vmo;\n        const cellRenderer = table._tableInstance.cellRenderer;\n        if( vmo && selectionModel.isSelected( vmo ) ) {\n            selectCell( cell, gridOptions, columnDefs, idx, cellRenderer, selectionModel, pinElem, rowElem, table );\n        } else {\n            deselectCell( cell, gridOptions, columnDefs, idx, cellRenderer, pinElem, selectionModel );\n        }\n    } );\n};\n\nconst clearCellHeaderAndColumnSelection = function( tableElem ) {\n    let headerCells = tableElem.querySelectorAll( `.${Const.CLASS_COLUMN_DEF}` );\n    let selectedHeader = _.find( headerCells, { columnDef: { colSelected: true } } );\n    if( selectedHeader ) {\n        delete selectedHeader.columnDef.colSelected;\n        if( tableElem._tableInstance && tableElem._tableInstance.dataProvider && tableElem._tableInstance.dataProvider.gridContextDispatcher ) {\n            tableElem._tableInstance.dataProvider.gridContextDispatcher( {\n                type: 'UPDATE_VALUES',\n                selectedColumn: null\n            } );\n        }\n    }\n    let cells = tableElem.querySelectorAll( `.${Const.CLASS_HEADER_CELL_SELECTED}, .${Const.CLASS_COLUMN_SELECTED}` );\n    for( let k = 0; k < cells.length; k++ ) {\n        cells[ k ].classList.remove( Const.CLASS_HEADER_CELL_SELECTED, Const.CLASS_CELL_SELECTED, Const.CLASS_COLUMN_SELECTED );\n    }\n};\n\nexport const setCellHeaderSelection = function( selection, table ) {\n    clearCellHeaderAndColumnSelection( table );\n\n    if( selection && selection.propName ) {\n        const columnProp = selection.propName;\n        let headerCells = table.querySelectorAll( `.${Const.CLASS_COLUMN_DEF}` );\n        let foundCol = _.find( headerCells, { columnDef: { field: columnProp } } );\n        if( foundCol && foundCol.parentElement ) {\n            // parent element to get the whole header cell\n            foundCol.parentElement.classList.add( Const.CLASS_HEADER_CELL_SELECTED );\n        }\n    }\n};\n\nexport const selectColumnCells = function( table, columnName ) {\n    // First set the header selection\n    setCellHeaderSelection( { propName: columnName }, table );\n\n    let headerCells = table.querySelectorAll( `.${Const.CLASS_COLUMN_DEF}` );\n    let selectedHeader = _.find( headerCells, { columnDef: { field: columnName } } );\n    if( selectedHeader && selectedHeader.columnDef ) {\n        selectedHeader.columnDef.colSelected = true;\n    }\n\n    // Now select all cells in column\n    const allCells = table.querySelectorAll( `.${Const.CLASS_CELL}` );\n    const foundCells = _.filter( allCells, { propName: columnName } );\n    for( let i = 0; i < foundCells.length; i++ ) {\n        foundCells[ i ].classList.add( Const.CLASS_COLUMN_SELECTED, Const.CLASS_CELL_SELECTED );\n    }\n};\n\nexport const setCellColumnSelection = function( dataProvider, columnDef ) {\n    // Clear any selection\n    dataProvider.selectNone();\n    dataProvider.gridContextDispatcher && dataProvider.gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        selectedColumn: columnDef\n    } );\n};\n\n// LCS-145673 - Make 'Show Children' command visible in table rows\n// We need to make the selection code be compatible with:\n// 1. When cellRenderer contains command cell by default\n// 2. When cellRenderer does not contains command cell\n// Code in this method work for both as design above\nexport const updateContentRowSelection = function( selectionModel, columnDefs, pinRowElements, scrollRowElements, table ) {\n    const cnt = pinRowElements.length;\n    const gridOptions = table._tableInstance.gridOptions;\n\n    if( gridOptions.transpose === true ) {\n        const trv = new Trv( table );\n        const headerElements = trv.getHeaderCellElementsFromTable();\n        for( let i = 0; i < headerElements.length; i++ ) {\n            const headerElement = headerElements[ i ];\n            const columnDefElement = headerElements[ i ].getElementsByClassName( Const.CLASS_COLUMN_DEF )[ 0 ];\n            if( columnDefElement && columnDefElement.columnDef.vmo && selectionModel.isSelected( columnDefElement.columnDef.vmo ) ) {\n                headerElement.classList.add( Const.CLASS_HEADER_CELL_SELECTED );\n            } else {\n                headerElement.classList.remove( Const.CLASS_HEADER_CELL_SELECTED );\n            }\n        }\n    }\n\n    for( let i = 0; i < cnt; i++ ) {\n        const rowElem = scrollRowElements[ i ];\n        const pinElem = pinRowElements[ i ];\n        let rowCells = Array.prototype.slice.call( pinElem.getElementsByClassName( Const.CLASS_CELL ) );\n        rowCells = rowCells.concat( Array.prototype.slice.call( rowElem.getElementsByClassName( Const.CLASS_CELL ) ) );\n\n        if( !rowElem.vmo ) {\n            rowElem.classList.remove( Const.CLASS_ROW_SELECTED );\n            rowElem.classList.remove( Const.CLASS_STATE_SELECTED );\n            rowElem.classList.remove( Const.CLASS_ROW_INACTIVATED );\n            pinElem.classList.remove( Const.CLASS_ROW_SELECTED );\n            pinElem.classList.remove( Const.CLASS_STATE_SELECTED );\n            pinElem.classList.remove( Const.CLASS_ROW_INACTIVATED );\n\n            // remove cell selected class to each cell\n            _.forEach( rowCells, function( cell ) {\n                cell.classList.remove( Const.CLASS_CELL_SELECTED );\n            } );\n            continue;\n        }\n\n        if( selectionModel.isSelected( rowElem.vmo ) ) {\n            if( !selectionModel.isSelectionModelActivated() ) {\n                rowElem.classList.add( Const.CLASS_ROW_INACTIVATED );\n                pinElem.classList.add( Const.CLASS_ROW_INACTIVATED );\n                table._tableInstance.editor.removeAllCellSelection();\n            } else if( rowElem.classList.contains( Const.CLASS_ROW_INACTIVATED ) ) {\n                rowElem.classList.remove( Const.CLASS_ROW_INACTIVATED );\n                pinElem.classList.remove( Const.CLASS_ROW_INACTIVATED );\n            }\n            rowElem.classList.add( Const.CLASS_ROW_SELECTED );\n            rowElem.classList.add( Const.CLASS_STATE_SELECTED );\n            rowElem.setAttribute( 'aria-selected', 'true' );\n            pinElem.classList.add( Const.CLASS_ROW_SELECTED );\n            pinElem.classList.add( Const.CLASS_STATE_SELECTED );\n            pinElem.setAttribute( 'aria-selected', 'true' );\n            updateCellSelectedClass( rowCells, gridOptions,\n                pinElem, rowElem, table, columnDefs, selectionModel );\n            continue;\n        }\n\n        if( rowElem.classList.contains( Const.CLASS_ROW_SELECTED ) || rowElem.classList.contains( Const.CLASS_STATE_SELECTED ) ) {\n            rowElem.classList.remove( Const.CLASS_ROW_SELECTED );\n            rowElem.classList.remove( Const.CLASS_STATE_SELECTED );\n            rowElem.classList.remove( Const.CLASS_ROW_INACTIVATED );\n            if( rowElem.hasAttribute( 'aria-selected' ) ) {\n                rowElem.removeAttribute( 'aria-selected' );\n            }\n        }\n\n        if( pinElem.classList.contains( Const.CLASS_ROW_SELECTED ) || pinElem.classList.contains( Const.CLASS_STATE_SELECTED ) ) {\n            pinElem.classList.remove( Const.CLASS_ROW_SELECTED );\n            pinElem.classList.remove( Const.CLASS_STATE_SELECTED );\n            pinElem.classList.remove( Const.CLASS_ROW_INACTIVATED );\n            if( pinElem.hasAttribute( 'aria-selected' ) ) {\n                pinElem.removeAttribute( 'aria-selected' );\n            }\n        }\n        updateCellSelectedClass( rowCells, gridOptions, pinElem, rowElem, table, columnDefs, selectionModel );\n    }\n};\n\nconst handleSelect = function( selectedVmo, event, selectionModel, dataProvider, tableElem ) {\n    handleNonContextMenuSelect( [ selectedVmo ], selectionModel, event, dataProvider );\n    /**\n     * If we already have row selected, then ctrl + select the same row, we need to update selected row to provide checkmark\n     * Dataprovider watcher evaluates by checking if currently selected has changed. This wont catch for selecting same row in multi\n     * instead of single\n     */\n    if( event.ctrlKey ) {\n        // event obj basically same as regular selectionChangeEvent\n        let eventObj = {\n            selectedObjects: dataProvider.getSelectedObjects(),\n            selectedUids: selectionModel.getSelection(),\n            selectionModel: selectionModel,\n            selected: dataProvider.getSelectedObjects(),\n            dataProviderName: dataProvider.name,\n            dataProvider: dataProvider\n        };\n        // Publish event as it doesn't get published with ctrl key\n        eventBus.publish( `${dataProvider.name}.selectionChangeEvent`, eventObj );\n    }\n\n    // This event is used to denote a selection performed by user click on a row.\n    const gridId = tableElem._tableInstance.gridId;\n    eventBus.publish( gridId + '.gridSelection', {\n        selectedObjects: dataProvider.getSelectedObjects()\n    } );\n};\n\nconst getLatestVmo = function( currentVmo, dataProvider ) {\n    let id = currentVmo.alternateID || currentVmo.uid;\n    let idx = dataProvider.viewModelCollection.findViewModelObjectById( id );\n    return dataProvider.viewModelCollection.loadedVMObjects[ idx ];\n};\n\n/**\n *\n * Callback method when a table row gets selected/clicked\n *\n * @param {DOMElement} tableElem - the table element\n * @param {Event} [keyboardTargetElement] - the destination of keyboard event (Optional)\n * @return {function} selection handler function\n */\nexport const selectionChanged = function( tableElem, keyboardTargetElement ) {\n    return function( event ) {\n        const target = keyboardTargetElement || event.target;\n\n        // Do not trigger selection if clicking on link\n        if( target.tagName.toLowerCase() === 'a' && target.href !== '' ) {\n            return;\n        }\n\n        // Do not trigger selection if clicking on tree expand/collapse icon\n        if( util.closestElement( target, `.${Const.CLASS_TREE_ROW_HEADER_BUTTONS}` ) ) {\n            return;\n        }\n\n        // Do not trigger selection if clicking on a cell command\n        if( util.closestElement( target, '.aw-command' ) ) {\n            return;\n        }\n        const dataProvider = tableElem._tableInstance.dataProvider;\n\n        // Get target vmo that was selected\n        let selectedRow = util.closestElement( target, '.' + Const.CLASS_ROW );\n        let selectedVmo = selectedRow && selectedRow.vmo && getLatestVmo( selectedRow.vmo, dataProvider );\n        let selectedCell = util.closestElement( target, '.' + Const.CLASS_CELL );\n        if( !selectedCell && event.currentTarget.columnDef ) {\n            selectedCell = event.currentTarget;\n        }\n        const gridOptions = tableElem._tableInstance.gridOptions;\n        if( gridOptions.transpose === true ) {\n            if( selectedCell && selectedCell.columnDef && selectedCell.columnDef.vmo ) {\n                selectedVmo = selectedCell.columnDef.vmo;\n            } else {\n                return;\n            }\n        }\n\n        const selectionModel = dataProvider.selectionModel;\n        if( selectionModel && selectedVmo && selectedVmo.props ) {\n            // Valid Selections Use Cases:\n            // 1. Selecting vmo that is not selected\n            const vmoNotSelected = !selectedVmo.selected;\n            // 2. Selecting row selection checkbox\n            const selectedRowCheckbox = util.closestElement( event.target, '.' + Const.CLASS_CELL_CHECKBOX );\n            // 3. Deselecting vmo with Ctrl key\n            const deselectingVmo = selectedVmo.selected && event.ctrlKey;\n            // 4. Selecting already selected vmo when other selections are present and multiselection mode is off\n            const selectedLength = dataProvider.getSelectedObjects().length;\n            const keepVmoSelectedButDeselectOthers = selectedVmo.selected && selectedLength > 1 && !selectionModel.multiSelectEnabled;\n\n            if( vmoNotSelected || selectedRowCheckbox || deselectingVmo || keepVmoSelectedButDeselectOthers ) {\n                handleSelect( selectedVmo, event, selectionModel, dataProvider, tableElem );\n            } else if( selectionModel.getSelection()[ 0 ] === selectedVmo.uid || selectedVmo.alternateID && selectedVmo.alternateID === selectionModel.getSelection()[ 0 ] ) {\n                dataProvider.selectionModel.setSelectionModelActivated( true );\n                let selectData = dataProvider.selectionModel.selectionData;\n                selectData && selectData.update( { ...selectData.value, selected: dataProvider.getSelectedObjects() } );\n            }\n        }\n    };\n};\n\nexport default {\n    selectionChanged,\n    updateContentRowSelection,\n    setCellHeaderSelection,\n    setCellColumnSelection,\n    selectColumnCells\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-obtaining-images|Solution configuration for obtaining images}\n *\n * @module js/iconService\n *\n * @publishedApolloService\n *\n */\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport httpIconProviderService from 'js/httpIconProviderService';\nvar exports = {};\n/**\n * Reference IconService\n */\n\nvar _iconServiceProvider;\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\n\nexport let getTypeIcon = function (typeName) {\n  return _iconServiceProvider.getTypeIcon(typeName);\n};\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTypeIconFileTag = function (typeName, typeIconFileName) {\n  return _iconServiceProvider.getTypeIconFileTag(typeName, typeIconFileName);\n};\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTypeIconFileUrl = function (typeIconFileName) {\n  return _iconServiceProvider.getTypeIconFileUrl(typeIconFileName);\n};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTypeIconURL = function (typeName) {\n  return _iconServiceProvider.getTypeIconURL(typeName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getTileIcon = async function (name) {\n  return await _iconServiceProvider.getTileIcon(name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getMiscIcon = async function (name) {\n  return await _iconServiceProvider.getMiscIcon(name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getCmdIcon = async function (name) {\n  return await _iconServiceProvider.getCmdIcon(name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getAwIcon = async function (iconName) {\n  return await _iconServiceProvider.getAwIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getIcon = async function (iconName) {\n  return await _iconServiceProvider.getIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\n\nexport let getIndicatorIcon = async function (iconName) {\n  return await _iconServiceProvider.getIndicatorIcon(iconName);\n};\n/**\n * Initialize icon service provider.\n */\n\nexport let initializeIconServiceProvider = function () {\n  switch (iconRepositoryService.getIconFetchMethod()) {\n    case iconRepositoryService.GET:\n      _iconServiceProvider = httpIconProviderService;\n      break;\n\n    case iconRepositoryService.DEFAULT:\n    default:\n      _iconServiceProvider = defaultIconProviderService;\n  }\n};\nexports = {\n  getTypeIcon,\n  getTypeIconFileTag,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTileIcon,\n  getMiscIcon,\n  getCmdIcon,\n  getAwIcon,\n  getIcon,\n  getIndicatorIcon,\n  initializeIconServiceProvider\n};\nexport default exports;\ninitializeIconServiceProvider();","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/iconService.js"],"names":["exports","getTypeIcon","_iconServiceProvider","getTypeIconFileTag","getTypeIconFileUrl","getTypeIconURL","getTileIcon","getMiscIcon","getCmdIcon","getAwIcon","getIcon","getIndicatorIcon","initializeIconServiceProvider","iconRepositoryService"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-obtaining-images|Solution configuration for obtaining images}\n *\n * @module js/iconService\n *\n * @publishedApolloService\n *\n */\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport httpIconProviderService from 'js/httpIconProviderService';\n\nvar exports = {};\n\n/**\n * Reference IconService\n */\nvar _iconServiceProvider;\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIcon = function( typeName ) {\n    return _iconServiceProvider.getTypeIcon( typeName );\n};\n\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIconFileTag = function( typeName, typeIconFileName ) {\n    return _iconServiceProvider.getTypeIconFileTag( typeName, typeIconFileName );\n};\n\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIconFileUrl = function( typeIconFileName ) {\n    return _iconServiceProvider.getTypeIconFileUrl( typeIconFileName );\n};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTypeIconURL = function( typeName ) {\n    return _iconServiceProvider.getTypeIconURL( typeName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getTileIcon = async function( name ) {\n    return await _iconServiceProvider.getTileIcon( name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getMiscIcon = async function( name ) {\n    return await _iconServiceProvider.getMiscIcon( name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getCmdIcon = async function( name ) {\n    return await _iconServiceProvider.getCmdIcon( name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getAwIcon = async function( iconName ) {\n    return await _iconServiceProvider.getAwIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getIcon = async function( iconName ) {\n    return await _iconServiceProvider.getIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */\nexport let getIndicatorIcon = async function( iconName ) {\n    return await _iconServiceProvider.getIndicatorIcon( iconName );\n};\n\n/**\n * Initialize icon service provider.\n */\nexport let initializeIconServiceProvider = function() {\n    switch ( iconRepositoryService.getIconFetchMethod() ) {\n        case iconRepositoryService.GET:\n            _iconServiceProvider = httpIconProviderService;\n            break;\n        case iconRepositoryService.DEFAULT:\n        default:\n            _iconServiceProvider = defaultIconProviderService;\n    }\n};\n\nexports = {\n    getTypeIcon,\n    getTypeIconFileTag,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTileIcon,\n    getMiscIcon,\n    getCmdIcon,\n    getAwIcon,\n    getIcon,\n    getIndicatorIcon,\n    initializeIconServiceProvider\n};\nexport default exports;\n\ninitializeIconServiceProvider();\n"]},"metadata":{},"sourceType":"module"}
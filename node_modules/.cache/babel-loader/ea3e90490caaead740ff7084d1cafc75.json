{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwDoubleValService.js\"; // Copyright (c) 2021 Siemens\n\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awDoubleValRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    ...prop\n  } = props; // use simple non-edit val if not editing\n\n  if (!prop.fielddata.isEditable) {\n    return /*#__PURE__*/_jsxDEV(AwPropertyNonEditVal, { ...prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n\n  let sanitizedProps = sanitizer.sanitizeHTMLTagProps(prop, 'input');\n  const inputClass = getValClass(props);\n\n  var handleChange = event => {\n    if (prop.typex === 'DOUBLEARRAY') {\n      let newVal = event.target.value.replace(/[^\\+|\\-|0-9\\.|e]/g, '');\n      event.target.value = newVal;\n    }\n  };\n\n  var keyPressed = event => {\n    if (event.key === 'Enter' || event.type === 'blur' && prop.typex === 'DOUBLEARRAY') {\n      event.preventDefault();\n      prop.onChange(event);\n      event.target.value = '';\n    }\n  };\n\n  if (prop.fielddata.renderingHint === 'label') {\n    return /*#__PURE__*/_jsxDEV(AwPropertyNonEditVal, { ...prop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  } else if (!prop.fielddata.renderingHint && prop.fielddata.hasLov) {\n    return /*#__PURE__*/_jsxDEV(AwPropertyLovVal, { ...prop,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  } else if (prop.typex === 'DOUBLEARRAY') {\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      maxLength: prop.maxLength,\n      \"data-locator\": prop.label,\n      \"aria-required\": prop.isRequired,\n      placeholder: prop.placeholder,\n      className: inputClass,\n      onChange: handleChange,\n      onKeyPress: keyPressed,\n      onBlur: keyPressed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", { ...sanitizedProps,\n    className: inputClass,\n    type: \"text\",\n    autoComplete: \"off\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwDoubleValService.js"],"names":["awDoubleValRenderFunction","props","prop","sanitizedProps","sanitizer","inputClass","getValClass","handleChange","event","newVal","keyPressed"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n\nexport const awDoubleValRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        ...prop\n    } = props;\n    // use simple non-edit val if not editing\n    if( !prop.fielddata.isEditable ) {\n        return (\n            <AwPropertyNonEditVal {...prop}></AwPropertyNonEditVal>\n        );\n    }\n\n    let sanitizedProps = sanitizer.sanitizeHTMLTagProps( prop, 'input' );\n    const inputClass = getValClass( props );\n\n    var handleChange = ( event ) => {\n        if( prop.typex === 'DOUBLEARRAY' ) {\n            let newVal = event.target.value.replace( /[^\\+|\\-|0-9\\.|e]/g, '' );\n            event.target.value = newVal;\n        }\n    };\n    var keyPressed = ( event ) => {\n        if( event.key === 'Enter' || event.type === 'blur' && prop.typex === 'DOUBLEARRAY' ) {\n            event.preventDefault();\n            prop.onChange( event );\n            event.target.value = '';\n        }\n    };\n    if( prop.fielddata.renderingHint === 'label' ) {\n        return (\n            <AwPropertyNonEditVal {...prop} ></AwPropertyNonEditVal>\n        );\n    } else if( !prop.fielddata.renderingHint && prop.fielddata.hasLov ) {\n        return (\n            <AwPropertyLovVal {...prop} onChange={handleChange}></AwPropertyLovVal>\n        );\n    } else if( prop.typex === 'DOUBLEARRAY' ) {\n        return (\n            <input type='text' maxLength={prop.maxLength} data-locator={prop.label} aria-required={prop.isRequired} placeholder={prop.placeholder} className={inputClass} onChange={handleChange} onKeyPress={keyPressed} onBlur={keyPressed}/>\n        );\n    }\n    return (\n        <input {...sanitizedProps} className={inputClass} type='text' autoComplete='off'/>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Reports performance metrics to Tcanalytics\n *\n * @module js/splmStatsAnalyticsReporter\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport { ANALYTICS_EVENT_NAME } from 'js/splmStatsConstants';\nimport splmAnalyticsService from 'js/splmAnalyticsService';\nimport splmStatsUtils from 'js/splmStatsUtils';\nimport appCtxService from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport eventBus from 'js/eventBus';\nimport { getReportAnalytics, setReportAnalytics, setLocationInformation } from 'js/splmStatsUtils';\n/**\n * Instances of this class represent reporter for sending performance metrics to Tcanalytics\n *\n * @class SPLMStatsAnalyticsReporter\n */\n\nfunction SPLMStatsAnalyticsReporter() {\n  let self = this;\n  let _analyticsContext = null;\n  /**\n   * Gets the key from the application context service and formats it as the context configuration ( enableCtxInfo object ) dictates\n   *\n   * @param {String} key - One of the objects in enableCtxInfo.appCtxKeys array\n   * @param {Object} ctx - Current application context queried from appCtxService\n   *\n   * @return {String} The result string after filtering/formatting the raw value form appCtxService\n   */\n\n  const _processCtxKey = function (key, ctx) {\n    let notFound = false;\n\n    for (let i = 0; i < key.searchPaths.length; i++) {\n      let currentPath = key.searchPaths[i];\n      let tempCtx = ctx;\n\n      for (let j = 0; j < currentPath.length; j++) {\n        if (tempCtx[currentPath[j]]) {\n          tempCtx = tempCtx[currentPath[j]];\n        } else {\n          notFound = true;\n          break;\n        }\n      }\n\n      if (notFound) {\n        break;\n      }\n\n      if (tempCtx !== ctx) {\n        return tempCtx;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Hook point to set the context object used for filtering/formatting context information.\n   *\n   * @param {Object} obj - Context configuration object to set\n   */\n\n\n  self.setAnalyticsContext = function (obj) {\n    _analyticsContext = obj;\n  };\n  /**\n   * Gets context data from appCtxService and formats it with _processCtxKey\n   *\n   * @return {Object} Processed context object to be sent to Tcanalytics\n   */\n\n\n  const _getContextData = function () {\n    let ctxObj = null;\n\n    if (!_analyticsContext) {\n      _analyticsContext = cfgSvc.getCfgCached('analytics.splmStatsConfiguration');\n    }\n\n    ctxObj = {};\n    let ctx = appCtxService.ctx;\n\n    if (_analyticsContext && _analyticsContext.appCtxKeys) {\n      for (let i = 0; i < _analyticsContext.appCtxKeys.length; i++) {\n        let k = _analyticsContext.appCtxKeys[i];\n\n        let value = _processCtxKey(k, ctx);\n\n        if (value) {\n          ctxObj[k.name] = value;\n        }\n      }\n    }\n\n    return ctxObj;\n  };\n  /**\n   * Formats a string on the context object to remove unecessary characters specific in the configuration object\n   *\n   * @param {String} ctxString - Unformatted context string\n   *\n   * @return {String} Processed context object to be sent to Tcanalytics\n   */\n\n\n  const _processCtxString = function (ctxString) {\n    ctxString = ctxString.replace(/[\\w\\.:]+[\\.:]+(\\w+)/, '$1');\n\n    if (_analyticsContext.appCtxValueFilters) {\n      for (let i = 0; i < _analyticsContext.appCtxValueFilters.length; i++) {\n        while (ctxString.indexOf(_analyticsContext.appCtxValueFilters[i]) !== -1) {\n          ctxString = ctxString.replace(_analyticsContext.appCtxValueFilters[i], '');\n        }\n      }\n    }\n\n    if (ctxString === 'SummaryView') {\n      ctxString = 'ListSummaryView';\n    }\n\n    return ctxString;\n  };\n  /**\n   * Checks to see if analytics are enabled, if so then log the performance object\n   *\n   * @param {Object} obj - Formatted performance object\n   */\n\n\n  const _logAnalyticsEvent = function (obj) {\n    if (getReportAnalytics() && !splmStatsUtils.isAnalyticsDisabled()) {\n      let eventName = _analyticsContext && _analyticsContext.name ? _analyticsContext.name : ANALYTICS_EVENT_NAME;\n      splmAnalyticsService.logEvent('Performance::' + eventName, obj);\n    }\n  };\n  /**\n   * Formats and sends our raw performance object data to the analytics logging function\n   *\n   * @param {Object} performanceObject - Raw/Unformatted performance object\n   */\n\n\n  self.report = function (performanceObject) {\n    let ctxResult = _getContextData();\n\n    let locationInformation = {};\n\n    if (_analyticsContext && _analyticsContext.appCtxKeys) {\n      _.forEach(_analyticsContext.appCtxKeys, function (key) {\n        if (key.name && ctxResult[key.name]) {\n          locationInformation['plstats' + key.name] = _processCtxString(ctxResult[key.name]);\n        }\n      });\n    }\n\n    setLocationInformation(locationInformation);\n\n    _logAnalyticsEvent(_.assign({\n      sanAnalyticsType: 'Performance',\n      plstatsTTI: parseFloat((performanceObject.TTI / 1000).toFixed(3)),\n      // Seconds\n      plstatsScriptingTime: parseFloat(parseFloat(performanceObject.scriptTime / 1000).toFixed(3)),\n      // Seconds\n      plstatsMemoryUsed: parseFloat((performanceObject.MemoryUsed / 1000000).toFixed(3)) || 0,\n      //MB\n      plstatsSoaRequestCount: performanceObject.Network.SoaDetails.filter(function (networkCall) {\n        return networkCall.logCorrelationID !== 0;\n      }).length,\n      plstatsTotalNetworkTime: parseFloat((performanceObject.totalNetworkTime / 1000).toFixed(3)),\n      // Seconds\n      plstatsNetworkRequestSize: performanceObject.Network.requestSize,\n      plstatsNetworkResponseSize: performanceObject.Network.responseSize,\n      plstatsElemCount: performanceObject.DOM.elemCount,\n      plstatsBrowserType: performanceObject.BrowserType,\n      plstatsHttpRequestCount: performanceObject.Network.totalHttpRequests,\n      plstatsComponentRenders: performanceObject.Component.componentRenders,\n      plstatsUniqueComponents: performanceObject.Component.uniqueComponents\n    }, locationInformation));\n\n    setReportAnalytics(false);\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsAnalyticsReporter;\n_c = SPLMStatsAnalyticsReporter;\nexport default SPLMStatsAnalyticsReporter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsAnalyticsReporter\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsAnalyticsReporter\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsAnalyticsReporter.js"],"names":["SPLMStatsAnalyticsReporter","self","_analyticsContext","_processCtxKey","notFound","i","key","currentPath","tempCtx","j","_getContextData","ctxObj","cfgSvc","ctx","appCtxService","k","value","_processCtxString","ctxString","_logAnalyticsEvent","getReportAnalytics","splmStatsUtils","eventName","splmAnalyticsService","ctxResult","locationInformation","_","setLocationInformation","sanAnalyticsType","plstatsTTI","parseFloat","performanceObject","plstatsScriptingTime","plstatsMemoryUsed","plstatsSoaRequestCount","networkCall","plstatsTotalNetworkTime","plstatsNetworkRequestSize","plstatsNetworkResponseSize","plstatsElemCount","plstatsBrowserType","plstatsHttpRequestCount","plstatsComponentRenders","plstatsUniqueComponents","uniqueComponents","setReportAnalytics"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Reports performance metrics to Tcanalytics\n *\n * @module js/splmStatsAnalyticsReporter\n * @publishedApolloService\n */\nimport _ from 'lodash';\n\nimport { ANALYTICS_EVENT_NAME } from 'js/splmStatsConstants';\nimport splmAnalyticsService from 'js/splmAnalyticsService';\nimport splmStatsUtils from 'js/splmStatsUtils';\n\nimport appCtxService from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport eventBus from 'js/eventBus';\nimport { getReportAnalytics, setReportAnalytics, setLocationInformation } from 'js/splmStatsUtils';\n\n/**\n * Instances of this class represent reporter for sending performance metrics to Tcanalytics\n *\n * @class SPLMStatsAnalyticsReporter\n */\nfunction SPLMStatsAnalyticsReporter() {\n    let self = this;\n\n    let _analyticsContext = null;\n\n    /**\n     * Gets the key from the application context service and formats it as the context configuration ( enableCtxInfo object ) dictates\n     *\n     * @param {String} key - One of the objects in enableCtxInfo.appCtxKeys array\n     * @param {Object} ctx - Current application context queried from appCtxService\n     *\n     * @return {String} The result string after filtering/formatting the raw value form appCtxService\n     */\n    const _processCtxKey = function( key, ctx ) {\n        let notFound = false;\n        for( let i = 0; i < key.searchPaths.length; i++ ) {\n            let currentPath = key.searchPaths[ i ];\n            let tempCtx = ctx;\n            for( let j = 0; j < currentPath.length; j++ ) {\n                if( tempCtx[ currentPath[ j ] ] ) {\n                    tempCtx = tempCtx[ currentPath[ j ] ];\n                } else {\n                    notFound = true;\n                    break;\n                }\n            }\n            if( notFound ) {\n                break;\n            }\n            if( tempCtx !== ctx ) {\n                return tempCtx;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Hook point to set the context object used for filtering/formatting context information.\n     *\n     * @param {Object} obj - Context configuration object to set\n     */\n    self.setAnalyticsContext = function( obj ) {\n        _analyticsContext = obj;\n    };\n\n    /**\n     * Gets context data from appCtxService and formats it with _processCtxKey\n     *\n     * @return {Object} Processed context object to be sent to Tcanalytics\n     */\n    const _getContextData = function() {\n        let ctxObj = null;\n        if( !_analyticsContext ) {\n            _analyticsContext = cfgSvc.getCfgCached( 'analytics.splmStatsConfiguration' );\n        }\n        ctxObj = {};\n        let ctx = appCtxService.ctx;\n        if( _analyticsContext && _analyticsContext.appCtxKeys ) {\n            for( let i = 0; i < _analyticsContext.appCtxKeys.length; i++ ) {\n                let k = _analyticsContext.appCtxKeys[ i ];\n                let value = _processCtxKey( k, ctx );\n                if( value ) {\n                    ctxObj[ k.name ] = value;\n                }\n            }\n        }\n        return ctxObj;\n    };\n\n    /**\n     * Formats a string on the context object to remove unecessary characters specific in the configuration object\n     *\n     * @param {String} ctxString - Unformatted context string\n     *\n     * @return {String} Processed context object to be sent to Tcanalytics\n     */\n    const _processCtxString = function( ctxString ) {\n        ctxString = ctxString.replace( /[\\w\\.:]+[\\.:]+(\\w+)/, '$1' );\n        if( _analyticsContext.appCtxValueFilters ) {\n            for( let i = 0; i < _analyticsContext.appCtxValueFilters.length; i++ ) {\n                while( ctxString.indexOf( _analyticsContext.appCtxValueFilters[ i ] ) !== -1 ) {\n                    ctxString = ctxString.replace( _analyticsContext.appCtxValueFilters[ i ], '' );\n                }\n            }\n        }\n        if( ctxString === 'SummaryView' ) {\n            ctxString = 'ListSummaryView';\n        }\n        return ctxString;\n    };\n\n    /**\n     * Checks to see if analytics are enabled, if so then log the performance object\n     *\n     * @param {Object} obj - Formatted performance object\n     */\n    const _logAnalyticsEvent = function( obj ) {\n        if( getReportAnalytics() && !splmStatsUtils.isAnalyticsDisabled() ) {\n            let eventName = _analyticsContext && _analyticsContext.name ? _analyticsContext.name : ANALYTICS_EVENT_NAME;\n            splmAnalyticsService.logEvent( 'Performance::' + eventName, obj );\n        }\n    };\n\n    /**\n     * Formats and sends our raw performance object data to the analytics logging function\n     *\n     * @param {Object} performanceObject - Raw/Unformatted performance object\n     */\n    self.report = function( performanceObject ) {\n        let ctxResult = _getContextData();\n\n        let locationInformation = {};\n        if( _analyticsContext && _analyticsContext.appCtxKeys ) {\n            _.forEach( _analyticsContext.appCtxKeys, function( key ) {\n                if( key.name && ctxResult[ key.name ] ) {\n                    locationInformation[ 'plstats' + key.name ] = _processCtxString( ctxResult[ key.name ] );\n                }\n            } );\n        }\n        setLocationInformation( locationInformation );\n        _logAnalyticsEvent( _.assign( {\n            sanAnalyticsType: 'Performance',\n            plstatsTTI: parseFloat( ( performanceObject.TTI / 1000 ).toFixed( 3 ) ), // Seconds\n            plstatsScriptingTime: parseFloat( parseFloat( performanceObject.scriptTime / 1000 ).toFixed( 3 ) ), // Seconds\n            plstatsMemoryUsed: parseFloat( ( performanceObject.MemoryUsed / 1000000 ).toFixed( 3 ) ) || 0, //MB\n            plstatsSoaRequestCount: performanceObject.Network.SoaDetails.filter( function( networkCall ) {\n                return networkCall.logCorrelationID !== 0;\n            } ).length,\n            plstatsTotalNetworkTime: parseFloat( ( performanceObject.totalNetworkTime / 1000 ).toFixed( 3 ) ), // Seconds\n            plstatsNetworkRequestSize: performanceObject.Network.requestSize,\n            plstatsNetworkResponseSize: performanceObject.Network.responseSize,\n            plstatsElemCount: performanceObject.DOM.elemCount,\n            plstatsBrowserType: performanceObject.BrowserType,\n            plstatsHttpRequestCount: performanceObject.Network.totalHttpRequests,\n            plstatsComponentRenders: performanceObject.Component.componentRenders,\n            plstatsUniqueComponents: performanceObject.Component.uniqueComponents\n        }, locationInformation ) );\n\n        setReportAnalytics( false );\n    };\n\n    return self;\n}\n\nexport default SPLMStatsAnalyticsReporter;\n"]},"metadata":{},"sourceType":"module"}
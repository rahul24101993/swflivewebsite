{"ast":null,"code":"// Copyright (c) 2022 Siemens\n\n/**\n * This service manages the gateway functionality.\n *\n * @module js/tileService\n */\nimport { getBaseUrlPath } from 'app';\nimport commandSvc from 'js/command.service';\nimport localeSvc from 'js/localeService';\nimport navigationSvc from 'js/navigationService';\nimport viewModelService from 'js/viewModelService';\nimport declDataProviderService from 'js/declDataProviderService';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport * as cas from 'js/centralAggregationService';\nimport analyticsSvc from 'js/analyticsService';\nimport browserUtils from 'js/browserUtils';\nconst COMMANDARGS_DELIMITER = '&';\nconst LOCALE_TOKEN = '${locale}';\n/**\n * Process concatenated command argument string, splits it based off delimiter '&' and returns an array\n *\n * @param {String} cmdArgString - concatenated command argument string\n * @return {Array} Array of command arguments after splitting them based off '&'\n */\n\nfunction processCommandArgs(cmdArgString) {\n  let cmdArgArray = [];\n\n  if (cmdArgString) {\n    cmdArgArray = cmdArgString.split(COMMANDARGS_DELIMITER);\n  }\n\n  return cmdArgArray;\n}\n/**\n * Decode action parameters value\n *\n * @param {Object} actionParams - tile action parameters\n * @return {Object} action parameters after decoding them\n */\n\n\nfunction decodeActionParams(actionParams) {\n  const actionParamsIn = {};\n\n  if (actionParams) {\n    _.forEach(actionParams, function (value, key) {\n      /**\n       * GWT uses a non-standard encoding with + instead of %20.\n       * TODO: This should be removed once server side URL building is removed or updated\n       */\n      value = value.replace(/\\+/g, '%20'); // Custom decoding from GWT - double encoded, '=' replaced with \\2\n\n      actionParamsIn[key] = decodeURIComponent(decodeURIComponent(value)).replace(/\\\\2/g, '=');\n    });\n  }\n\n  return actionParamsIn;\n}\n/**\n *  Construct url with query parameters for tile\n * @param {String} url - URL of tile action\n * @param {Object} actionParams  - tile action parameters\n * @return {String} constructed full URL\n */\n\n\nconst _constructActionURL = function (url, actionParams) {\n  let fullUrl = url;\n  const decodedActionParams = decodeActionParams(actionParams);\n  const param = $.param(decodedActionParams);\n\n  if (param && param.length > 0) {\n    fullUrl += '?' + param;\n  }\n\n  return fullUrl;\n};\n/**\n * Process all action types which are related to url i.e.\n * <br> 0 - Default <br>\n * <br> 1 - External Url <br>\n * <br> 2 - Static Resource <br>\n *\n * @param {Object} tileAction - tile action object\n */\n\n\nfunction processUrlAction(tileAction) {\n  if (tileAction) {\n    const action = {\n      actionType: 'Navigate'\n    };\n\n    if (tileAction.actionType === 1) {\n      // External URL\n      if (tileAction.url.indexOf('http') === 0) {\n        window.open(_constructActionURL(tileAction.url, tileAction.actionParams), '', '');\n      } else {\n        window.open(_constructActionURL(browserUtils.getBaseURL() + tileAction.url, tileAction.actionParams), '', '');\n      }\n    } else if (tileAction.actionType === 2) {\n      // Static resource\n      const locale = localeSvc.getLocale(); // Get the relative path for the resource. Replace the locale token if present.\n\n      const relativeUrlPath = '/' + tileAction.url.replace(LOCALE_TOKEN, locale);\n\n      if (_.endsWith(tileAction.url, '.pdf')) {\n        action.navigateTo = 'com_siemens_splm_clientfx_pdfjs_showPdfFileSubLocation';\n        navigationSvc.navigate(action, decodeActionParams({\n          file: relativeUrlPath,\n          uid: ''\n        }));\n      } else {\n        // Prepend the module path\n        const staticResourceLocation = getBaseUrlPath() + relativeUrlPath; // Open the link provided for the tile in a new tab in the same window\n        // Pass in empty string for name. This will open the link in another tab in the same window.\n\n        action.navigateIn = 'newTab';\n        action.navigateTo = staticResourceLocation;\n        navigationSvc.navigate(action);\n      }\n    } else {\n      // default\n      const REGEX_DOT = /\\./g;\n      let urlIn = tileAction.url;\n\n      if (REGEX_DOT.test(tileAction.url)) {\n        urlIn = tileAction.url.replace(REGEX_DOT, '_');\n      }\n\n      action.navigateTo = urlIn;\n      navigationSvc.navigate(action, decodeActionParams(tileAction.actionParams));\n    }\n  }\n}\n/**\n * Process command action type i.e.\n * <br> 3 - Command <br>\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\n\n\nfunction processCommandAction(tileAction, context, runActionWithViewModel) {\n  if (tileAction) {\n    let cmdArgs;\n\n    if (context) {\n      context.commandContext = context.commandContext || {};\n    }\n\n    if (tileAction.actionParams) {\n      cmdArgs = processCommandArgs(tileAction.actionParams.cmdArg);\n\n      if (context) {\n        context.commandContext.cmdArgs = cmdArgs;\n        context.commandContext.cmdId = tileAction.actionParams.cmdId;\n      }\n    }\n\n    commandSvc.executeCommand(tileAction.commandId, cmdArgs, context, context.commandContext, runActionWithViewModel);\n  }\n}\n/**\n * Perform operation for gateway tile after clicking it, according to its action Type\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\n\n\nfunction performAction(tileAction, context, runActionWithViewModel) {\n  let sanTileActionCmdId = '';\n\n  if (tileAction) {\n    if (tileAction.url) {\n      processUrlAction(tileAction);\n      sanTileActionCmdId = 'URL';\n    } else if (tileAction.commandId) {\n      processCommandAction(tileAction, context, runActionWithViewModel);\n      sanTileActionCmdId = tileAction.commandId;\n    } else {\n      const declViewModel = viewModelService.getViewModel(context, true);\n\n      if (declViewModel) {\n        declDataProviderService.executeLoadAction(tileAction, declViewModel._internal.origDeclViewModelJson, context);\n      }\n    }\n  }\n\n  const sanTileData = {};\n  sanTileData.sanAnalyticsType = 'Tile';\n  sanTileData.sanCommandId = 'Tile';\n\n  if (context && context.tile && context.tile.displayName) {\n    sanTileData.sanCommandTitle = context.tile.displayName;\n  }\n\n  sanTileData.sanTileAction = sanTileActionCmdId;\n  analyticsSvc.logCommands(sanTileData);\n  cas.notify({\n    widgetInfo: {\n      sanCommandId: 'Tile',\n      commandAnchor: 'Tile',\n      tileInfo: context.tile\n    },\n    userGesture: 'Tile',\n    subject: {}\n  });\n}\n\nexport default {\n  processCommandArgs,\n  decodeActionParams,\n  processUrlAction,\n  processCommandAction,\n  performAction\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/tile/src/js/tileService.js"],"names":["COMMANDARGS_DELIMITER","LOCALE_TOKEN","cmdArgArray","cmdArgString","actionParamsIn","_","value","decodeURIComponent","_constructActionURL","fullUrl","decodedActionParams","decodeActionParams","param","$","action","actionType","tileAction","window","browserUtils","locale","localeSvc","relativeUrlPath","navigationSvc","file","uid","staticResourceLocation","getBaseUrlPath","REGEX_DOT","urlIn","context","cmdArgs","processCommandArgs","commandSvc","sanTileActionCmdId","processUrlAction","processCommandAction","declViewModel","viewModelService","declDataProviderService","sanTileData","analyticsSvc","cas","widgetInfo","sanCommandId","commandAnchor","tileInfo","tile","userGesture","subject","performAction"],"mappings":"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","sourcesContent":["// Copyright (c) 2022 Siemens\n\n/**\n * This service manages the gateway functionality.\n *\n * @module js/tileService\n */\nimport { getBaseUrlPath } from 'app';\nimport commandSvc from 'js/command.service';\nimport localeSvc from 'js/localeService';\nimport navigationSvc from 'js/navigationService';\nimport viewModelService from 'js/viewModelService';\nimport declDataProviderService from 'js/declDataProviderService';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport * as cas from 'js/centralAggregationService';\nimport analyticsSvc from 'js/analyticsService';\nimport browserUtils from 'js/browserUtils';\n\nconst COMMANDARGS_DELIMITER = '&';\nconst LOCALE_TOKEN = '${locale}';\n\n/**\n * Process concatenated command argument string, splits it based off delimiter '&' and returns an array\n *\n * @param {String} cmdArgString - concatenated command argument string\n * @return {Array} Array of command arguments after splitting them based off '&'\n */\nfunction processCommandArgs( cmdArgString ) {\n    let cmdArgArray = [];\n    if( cmdArgString ) {\n        cmdArgArray = cmdArgString.split( COMMANDARGS_DELIMITER );\n    }\n\n    return cmdArgArray;\n}\n\n/**\n * Decode action parameters value\n *\n * @param {Object} actionParams - tile action parameters\n * @return {Object} action parameters after decoding them\n */\nfunction decodeActionParams( actionParams ) {\n    const actionParamsIn = {};\n    if( actionParams ) {\n        _.forEach( actionParams, function( value, key ) {\n            /**\n             * GWT uses a non-standard encoding with + instead of %20.\n             * TODO: This should be removed once server side URL building is removed or updated\n             */\n            value = value.replace( /\\+/g, '%20' );\n            // Custom decoding from GWT - double encoded, '=' replaced with \\2\n            actionParamsIn[ key ] = decodeURIComponent(\n                decodeURIComponent( value ) ).replace( /\\\\2/g, '=' );\n        } );\n    }\n\n    return actionParamsIn;\n}\n\n/**\n *  Construct url with query parameters for tile\n * @param {String} url - URL of tile action\n * @param {Object} actionParams  - tile action parameters\n * @return {String} constructed full URL\n */\nconst _constructActionURL = function( url, actionParams ) {\n    let fullUrl = url;\n    const decodedActionParams = decodeActionParams( actionParams );\n    const param = $.param( decodedActionParams );\n    if( param && param.length > 0 ) {\n        fullUrl += '?' + param;\n    }\n    return fullUrl;\n};\n\n/**\n * Process all action types which are related to url i.e.\n * <br> 0 - Default <br>\n * <br> 1 - External Url <br>\n * <br> 2 - Static Resource <br>\n *\n * @param {Object} tileAction - tile action object\n */\nfunction processUrlAction( tileAction ) {\n    if( tileAction ) {\n        const action = { actionType: 'Navigate' };\n\n        if( tileAction.actionType === 1 ) { // External URL\n            if( tileAction.url.indexOf( 'http' ) === 0 ) {\n                window.open( _constructActionURL( tileAction.url, tileAction.actionParams ), '', '' );\n            } else {\n                window.open( _constructActionURL( browserUtils.getBaseURL() + tileAction.url, tileAction.actionParams ), '', '' );\n            }\n        } else if( tileAction.actionType === 2 ) { // Static resource\n            const locale = localeSvc.getLocale();\n            // Get the relative path for the resource. Replace the locale token if present.\n            const relativeUrlPath = '/' + tileAction.url.replace( LOCALE_TOKEN, locale );\n\n            if( _.endsWith( tileAction.url, '.pdf' ) ) {\n                action.navigateTo = 'com_siemens_splm_clientfx_pdfjs_showPdfFileSubLocation';\n                navigationSvc.navigate( action, decodeActionParams( {\n                    file: relativeUrlPath,\n                    uid: ''\n                } ) );\n            } else {\n                // Prepend the module path\n                const staticResourceLocation = getBaseUrlPath() + relativeUrlPath;\n                // Open the link provided for the tile in a new tab in the same window\n                // Pass in empty string for name. This will open the link in another tab in the same window.\n                action.navigateIn = 'newTab';\n                action.navigateTo = staticResourceLocation;\n                navigationSvc.navigate( action );\n            }\n        } else { // default\n            const REGEX_DOT = /\\./g;\n            let urlIn = tileAction.url;\n\n            if( REGEX_DOT.test( tileAction.url ) ) {\n                urlIn = tileAction.url.replace( REGEX_DOT, '_' );\n            }\n\n            action.navigateTo = urlIn;\n            navigationSvc.navigate( action, decodeActionParams( tileAction.actionParams ) );\n        }\n    }\n}\n\n/**\n * Process command action type i.e.\n * <br> 3 - Command <br>\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\nfunction processCommandAction( tileAction, context, runActionWithViewModel ) {\n    if( tileAction ) {\n        let cmdArgs;\n\n        if( context ) {\n            context.commandContext = context.commandContext || {};\n        }\n\n        if( tileAction.actionParams ) {\n            cmdArgs = processCommandArgs( tileAction.actionParams.cmdArg );\n            if( context ) {\n                context.commandContext.cmdArgs = cmdArgs;\n                context.commandContext.cmdId = tileAction.actionParams.cmdId;\n            }\n        }\n\n        commandSvc.executeCommand( tileAction.commandId, cmdArgs, context, context.commandContext, runActionWithViewModel );\n    }\n}\n\n/**\n * Perform operation for gateway tile after clicking it, according to its action Type\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\nfunction performAction( tileAction, context, runActionWithViewModel ) {\n    let sanTileActionCmdId = '';\n    if( tileAction ) {\n        if( tileAction.url ) {\n            processUrlAction( tileAction );\n            sanTileActionCmdId = 'URL';\n        } else if( tileAction.commandId ) {\n            processCommandAction( tileAction, context, runActionWithViewModel );\n            sanTileActionCmdId = tileAction.commandId;\n        } else {\n            const declViewModel = viewModelService.getViewModel( context, true );\n            if( declViewModel ) {\n                declDataProviderService.executeLoadAction( tileAction, declViewModel._internal.origDeclViewModelJson, context );\n            }\n        }\n    }\n\n    const sanTileData = {};\n    sanTileData.sanAnalyticsType = 'Tile';\n    sanTileData.sanCommandId = 'Tile';\n    if( context && context.tile && context.tile.displayName ) {\n        sanTileData.sanCommandTitle = context.tile.displayName;\n    }\n    sanTileData.sanTileAction = sanTileActionCmdId;\n    analyticsSvc.logCommands( sanTileData );\n    cas.notify( {\n        widgetInfo: {\n            sanCommandId: 'Tile',\n            commandAnchor: 'Tile',\n            tileInfo: context.tile\n        },\n        userGesture: 'Tile',\n        subject: {}\n    } );\n}\n\nexport default {\n    processCommandArgs,\n    decodeActionParams,\n    processUrlAction,\n    processCommandAction,\n    performAction\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module provides cell renderer customization mechanism in PL Table.\n *\n * - Below is the cell renderer pattern:\n *   {\n *       action: function( columnDef, vmo, tableElement ) {\n *           // return DOMStructure\n *       },\n *       condition: function( columnDef, vmo, tableElement ) {\n *           // return true to enable this renderer\n *       }\n *   }\n *\n * - Best practice is to make condition to be unique for your case.\n * - If the requirement is overlapping default behavior, just overlap the condition.\n * - If decoration to cell is needed, just write action, do your work without return\n *   value, but the decoration will only happens before OOTB cell renderer, not after.\n *\n * @module js/splmTableCellRenderer\n *\n */\nimport _ from 'lodash';\nimport uwPropertyService from 'js/uwPropertyService';\nimport splmTableConstants from 'js/splmTableConstants';\nimport splmTableUtils from 'js/splmTableUtils';\nvar exports = {};\nexport let updateCellChangedClass = function (prop, element) {\n  if (element) {\n    if (uwPropertyService.isModified(prop)) {\n      prop.dirty = true;\n      element.classList.add(splmTableConstants.CLASS_CELL_CHANGED);\n    } else {\n      prop.dirty = false;\n      element.classList.remove(splmTableConstants.CLASS_CELL_CHANGED);\n    }\n  }\n};\n/**\n * Creates and returns a DOMElement for the propertyCell of the passed in view model object (vmo) which defines the row\n * and the given column (columnInfo )\n * @param {Object} column - Declarative columnInfo object\n * @param {Object} vmo - Declarative view model object (e.g. row)\n * @param {DOMElement} tableElem - Table DOMElement\n * @param {DOMElement} rowElem - Row DOMElement\n * @param {Boolean} dynamicRowHeightEnabled - if dynamic row height is enabled\n * @return {DOMElement} The newly created DOMElement for the property cell content\n */\n\nexport let createElement = function (column, vmo, tableElem, rowElem) {\n  var contentElem = null;\n\n  _.forEach(column.cellRenderers, function (renderer) {\n    if (!renderer.processing && renderer.condition(column, vmo, tableElem, rowElem)) {\n      // NOTE: When ASync rendering happens, this processing mechanism may have issue.\n      // But for now the whole PL Table dosen't support ASync Rendering yet.\n      renderer.processing = true;\n      contentElem = renderer.action(column, vmo, tableElem, rowElem);\n      delete renderer.processing;\n    }\n\n    return !contentElem;\n  }); // Default cell renderer for PLTable\n\n\n  if (!contentElem) {\n    contentElem = document.createElement('div');\n    contentElem.classList.add(splmTableConstants.CLASS_TABLE_CELL_TOP);\n\n    if (vmo.props && vmo.props[column.field] && !vmo.props[column.field].isArray && vmo.props[column.field].uiValue) {\n      contentElem.title = vmo.props[column.field].uiValue;\n    }\n\n    if (tableElem && tableElem._tableInstance.dynamicRowHeightStatus) {\n      contentElem.classList.add(splmTableConstants.CLASS_TABLE_CELL_TOP_DYNAMIC);\n    }\n\n    const textContent = vmo.props && vmo.props[column.field] ? vmo.props[column.field].uiValue : '';\n\n    if (textContent || !vmo.props || Object.keys(vmo.props).length === 0) {\n      var gridCellText = document.createElement('span');\n      gridCellText.classList.add(splmTableConstants.CLASS_WIDGET_TABLE_CELL_TEXT);\n      gridCellText.textContent = textContent;\n      contentElem.appendChild(gridCellText);\n    }\n  } // isDirty update\n\n\n  if (contentElem && vmo.props && vmo.props[column.field]) {\n    updateCellChangedClass(vmo.props[column.field], contentElem);\n  }\n\n  return contentElem;\n};\nexport let createHeaderElement = function (column, tableElem) {\n  var contentElem = null;\n\n  _.forEach(column.headerRenderers, function (renderer) {\n    if (!renderer.processing && renderer.condition(column, tableElem)) {\n      // NOTE: When ASync rendering happens, this processing mechanism may have issue.\n      // But for now the whole PL Table dosen't support ASync Rendering yet.\n      renderer.processing = true;\n      contentElem = renderer.action(column, tableElem);\n      delete renderer.processing;\n    }\n\n    return !contentElem;\n  });\n\n  return contentElem;\n};\nexport const addDynamicCellHeight = function (vmo, cell) {\n  const dynamicCellText = cell.getElementsByClassName(splmTableConstants.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC)[0];\n\n  if (dynamicCellText) {\n    dynamicCellText.style.maxHeight = String(vmo.rowHeight) + 'px';\n  }\n};\nexport const updateCell = function (cellElem, rowElem, table, tableEditor) {\n  // If cell is in edit we don't need to update as it is databound and will have latest value\n  if (cellElem.isElementInEdit) {\n    return;\n  }\n\n  var oldCellTop = cellElem.children[0];\n  var newCellTop = createElement(cellElem.columnDef, rowElem.vmo, table, rowElem);\n\n  if (table._tableInstance.dynamicRowHeightStatus === true) {\n    addDynamicCellHeight(rowElem.vmo, newCellTop);\n  } // LCS-145046 - Launch workflow for schedule Task - Item selected does not show open cell command\n  // Move command cell to new cell if present\n  //\n  // LCS-164398 - ACE - adding child item in table mode, shows two show children icon\n  // For the case, which custom cell renderer complies its own command WITH CONDITION, there is\n  // a practice:\n  // 1. Select item which dose not match the CONDITION. In this case, we will compile a native cell\n  //    command for it. It will be dummy since the condition is not match in common case, but the DOM\n  //    structure is there.\n  // 2. After applying something (Add a child in ACE case), the CONDITION in custom cell renderer becomes\n  //    true. Then the custom cell renderer will generate the cell.\n  // 3. So for logic below, in this practice, we should not bring the old command - we should use the command\n  //    In custom cell.\n  // The only 2 cases which is going to have problem is select and hover for now - both of the should be fine\n  // here.\n  //\n  // LCS-166330 Regression caused by Fix for LCS-164398\n  // Be careful that all the DOM data structure are not OOTB JS type - in this case the classList is not array\n  // but DOMTokenList. so we can't use put empty array as default value and assume it has '.contains'.\n  //\n\n\n  var currentCellLastChildClassList = null;\n  var newCellCommandParentElem = null;\n  var oldCellCommandParentElem = null;\n\n  if (cellElem.columnDef.isTreeNavigation === true) {\n    newCellCommandParentElem = newCellTop.getElementsByClassName(splmTableConstants.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER)[0];\n    oldCellCommandParentElem = oldCellTop.getElementsByClassName(splmTableConstants.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER)[0];\n  } else {\n    newCellCommandParentElem = newCellTop;\n    oldCellCommandParentElem = oldCellTop;\n  }\n\n  currentCellLastChildClassList = newCellCommandParentElem.lastChild && newCellCommandParentElem.lastChild.classList ? newCellCommandParentElem.lastChild.classList : undefined;\n\n  if (!(currentCellLastChildClassList && currentCellLastChildClassList.contains(splmTableConstants.CLASS_AW_CELL_COMMANDS_CONTAINER)) && oldCellCommandParentElem.lastChild && oldCellCommandParentElem.lastChild.classList && oldCellCommandParentElem.lastChild.classList.contains(splmTableConstants.CLASS_NATIVE_CELL_COMMANDS)) {\n    newCellCommandParentElem.appendChild(oldCellCommandParentElem.lastChild);\n  } // cleanup cell commands and tree commands & expand/collapse icon components if exist\n\n\n  splmTableUtils.cleanupComponents(oldCellTop);\n  cellElem.replaceChild(newCellTop, oldCellTop);\n  tableEditor.updateEditStatusForCell(cellElem);\n};\nexports = {\n  createElement,\n  createHeaderElement,\n  addDynamicCellHeight,\n  updateCell,\n  updateCellChangedClass\n};\nexport default exports;","map":{"version":3,"names":["_","uwPropertyService","splmTableConstants","splmTableUtils","exports","updateCellChangedClass","prop","element","isModified","dirty","classList","add","CLASS_CELL_CHANGED","remove","createElement","column","vmo","tableElem","rowElem","contentElem","forEach","cellRenderers","renderer","processing","condition","action","document","CLASS_TABLE_CELL_TOP","props","field","isArray","uiValue","title","_tableInstance","dynamicRowHeightStatus","CLASS_TABLE_CELL_TOP_DYNAMIC","textContent","Object","keys","length","gridCellText","CLASS_WIDGET_TABLE_CELL_TEXT","appendChild","createHeaderElement","headerRenderers","addDynamicCellHeight","cell","dynamicCellText","getElementsByClassName","CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC","style","maxHeight","String","rowHeight","updateCell","cellElem","table","tableEditor","isElementInEdit","oldCellTop","children","newCellTop","columnDef","currentCellLastChildClassList","newCellCommandParentElem","oldCellCommandParentElem","isTreeNavigation","CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER","lastChild","undefined","contains","CLASS_AW_CELL_COMMANDS_CONTAINER","CLASS_NATIVE_CELL_COMMANDS","cleanupComponents","replaceChild","updateEditStatusForCell"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableCellRenderer.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module provides cell renderer customization mechanism in PL Table.\n *\n * - Below is the cell renderer pattern:\n *   {\n *       action: function( columnDef, vmo, tableElement ) {\n *           // return DOMStructure\n *       },\n *       condition: function( columnDef, vmo, tableElement ) {\n *           // return true to enable this renderer\n *       }\n *   }\n *\n * - Best practice is to make condition to be unique for your case.\n * - If the requirement is overlapping default behavior, just overlap the condition.\n * - If decoration to cell is needed, just write action, do your work without return\n *   value, but the decoration will only happens before OOTB cell renderer, not after.\n *\n * @module js/splmTableCellRenderer\n *\n */\nimport _ from 'lodash';\nimport uwPropertyService from 'js/uwPropertyService';\nimport splmTableConstants from 'js/splmTableConstants';\nimport splmTableUtils from 'js/splmTableUtils';\n\nvar exports = {};\n\nexport let updateCellChangedClass = function( prop, element ) {\n    if( element ) {\n        if( uwPropertyService.isModified( prop ) ) {\n            prop.dirty = true;\n            element.classList.add( splmTableConstants.CLASS_CELL_CHANGED );\n        } else {\n            prop.dirty = false;\n            element.classList.remove( splmTableConstants.CLASS_CELL_CHANGED );\n        }\n    }\n};\n\n/**\n * Creates and returns a DOMElement for the propertyCell of the passed in view model object (vmo) which defines the row\n * and the given column (columnInfo )\n * @param {Object} column - Declarative columnInfo object\n * @param {Object} vmo - Declarative view model object (e.g. row)\n * @param {DOMElement} tableElem - Table DOMElement\n * @param {DOMElement} rowElem - Row DOMElement\n * @param {Boolean} dynamicRowHeightEnabled - if dynamic row height is enabled\n * @return {DOMElement} The newly created DOMElement for the property cell content\n */\nexport let createElement = function( column, vmo, tableElem, rowElem ) {\n    var contentElem = null;\n    _.forEach( column.cellRenderers, function( renderer ) {\n        if( !renderer.processing && renderer.condition( column, vmo, tableElem, rowElem ) ) {\n            // NOTE: When ASync rendering happens, this processing mechanism may have issue.\n            // But for now the whole PL Table dosen't support ASync Rendering yet.\n            renderer.processing = true;\n            contentElem = renderer.action( column, vmo, tableElem, rowElem );\n            delete renderer.processing;\n        }\n        return !contentElem;\n    } );\n\n    // Default cell renderer for PLTable\n    if( !contentElem ) {\n        contentElem = document.createElement( 'div' );\n        contentElem.classList.add( splmTableConstants.CLASS_TABLE_CELL_TOP );\n        if( vmo.props && vmo.props[ column.field ] && !vmo.props[ column.field ].isArray && vmo.props[ column.field ].uiValue ) {\n            contentElem.title = vmo.props[ column.field ].uiValue;\n        }\n\n        if( tableElem && tableElem._tableInstance.dynamicRowHeightStatus ) {\n            contentElem.classList.add( splmTableConstants.CLASS_TABLE_CELL_TOP_DYNAMIC );\n        }\n\n        const textContent = vmo.props && vmo.props[ column.field ] ? vmo.props[ column.field ].uiValue : '';\n        if( textContent || !vmo.props || Object.keys( vmo.props ).length === 0 ) {\n            var gridCellText = document.createElement( 'span' );\n            gridCellText.classList.add( splmTableConstants.CLASS_WIDGET_TABLE_CELL_TEXT );\n            gridCellText.textContent = textContent;\n\n            contentElem.appendChild( gridCellText );\n        }\n    }\n\n    // isDirty update\n    if( contentElem && vmo.props && vmo.props[ column.field ] ) {\n        updateCellChangedClass( vmo.props[ column.field ], contentElem );\n    }\n\n    return contentElem;\n};\n\nexport let createHeaderElement = function( column, tableElem ) {\n    var contentElem = null;\n    _.forEach( column.headerRenderers, function( renderer ) {\n        if( !renderer.processing && renderer.condition( column, tableElem ) ) {\n            // NOTE: When ASync rendering happens, this processing mechanism may have issue.\n            // But for now the whole PL Table dosen't support ASync Rendering yet.\n            renderer.processing = true;\n            contentElem = renderer.action( column, tableElem );\n            delete renderer.processing;\n        }\n        return !contentElem;\n    } );\n\n    return contentElem;\n};\n\nexport const addDynamicCellHeight = function( vmo, cell ) {\n    const dynamicCellText = cell.getElementsByClassName( splmTableConstants.CLASS_WIDGET_TABLE_CELL_TEXT_DYNAMIC )[ 0 ];\n    if( dynamicCellText ) {\n        dynamicCellText.style.maxHeight = String( vmo.rowHeight ) + 'px';\n    }\n};\n\nexport const updateCell = function( cellElem, rowElem, table, tableEditor ) {\n    // If cell is in edit we don't need to update as it is databound and will have latest value\n    if( cellElem.isElementInEdit ) {\n        return;\n    }\n    var oldCellTop = cellElem.children[ 0 ];\n    var newCellTop = createElement( cellElem.columnDef, rowElem.vmo, table, rowElem );\n    if( table._tableInstance.dynamicRowHeightStatus === true ) {\n        addDynamicCellHeight( rowElem.vmo, newCellTop );\n    }\n\n    // LCS-145046 - Launch workflow for schedule Task - Item selected does not show open cell command\n    // Move command cell to new cell if present\n    //\n    // LCS-164398 - ACE - adding child item in table mode, shows two show children icon\n    // For the case, which custom cell renderer complies its own command WITH CONDITION, there is\n    // a practice:\n    // 1. Select item which dose not match the CONDITION. In this case, we will compile a native cell\n    //    command for it. It will be dummy since the condition is not match in common case, but the DOM\n    //    structure is there.\n    // 2. After applying something (Add a child in ACE case), the CONDITION in custom cell renderer becomes\n    //    true. Then the custom cell renderer will generate the cell.\n    // 3. So for logic below, in this practice, we should not bring the old command - we should use the command\n    //    In custom cell.\n    // The only 2 cases which is going to have problem is select and hover for now - both of the should be fine\n    // here.\n    //\n    // LCS-166330 Regression caused by Fix for LCS-164398\n    // Be careful that all the DOM data structure are not OOTB JS type - in this case the classList is not array\n    // but DOMTokenList. so we can't use put empty array as default value and assume it has '.contains'.\n    //\n    var currentCellLastChildClassList = null;\n    var newCellCommandParentElem = null;\n    var oldCellCommandParentElem = null;\n    if( cellElem.columnDef.isTreeNavigation === true ) {\n        newCellCommandParentElem = newCellTop.getElementsByClassName( splmTableConstants.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER )[ 0 ];\n        oldCellCommandParentElem = oldCellTop.getElementsByClassName( splmTableConstants.CLASS_WIDGET_TABLE_NON_EDIT_CONTAINER )[ 0 ];\n    } else {\n        newCellCommandParentElem = newCellTop;\n        oldCellCommandParentElem = oldCellTop;\n    }\n\n    currentCellLastChildClassList = newCellCommandParentElem.lastChild && newCellCommandParentElem.lastChild.classList ?\n        newCellCommandParentElem.lastChild.classList : undefined;\n\n    if( !( currentCellLastChildClassList && currentCellLastChildClassList.contains( splmTableConstants.CLASS_AW_CELL_COMMANDS_CONTAINER ) ) &&\n        oldCellCommandParentElem.lastChild && oldCellCommandParentElem.lastChild.classList &&\n        oldCellCommandParentElem.lastChild.classList.contains( splmTableConstants.CLASS_NATIVE_CELL_COMMANDS ) ) {\n        newCellCommandParentElem.appendChild( oldCellCommandParentElem.lastChild );\n    }\n\n    // cleanup cell commands and tree commands & expand/collapse icon components if exist\n    splmTableUtils.cleanupComponents( oldCellTop );\n    cellElem.replaceChild( newCellTop, oldCellTop );\n    tableEditor.updateEditStatusForCell( cellElem );\n};\n\nexports = {\n    createElement,\n    createHeaderElement,\n    addDynamicCellHeight,\n    updateCell,\n    updateCellChangedClass\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
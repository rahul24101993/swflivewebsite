{"ast":null,"code":"import _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nimport AwStateService from 'js/awStateService';\nimport selectionService from 'js/selection.service';\nimport propertyPolicyService from 'soa/kernel/propertyPolicyService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nconst SUBLOCATION_CONSTANTS = {\n  sublocation: 'sublocation',\n  taiCmd: 'activeToolsAndInfoCommand',\n  navCmd: 'activeNavigationCommand',\n  sidenavCmd: 'sidenavCommandId'\n};\n\nconst registerSubLocationContext = provider => {\n  var contextConstants = {\n    location: 'locationContext',\n    sublocationInLocation: 'ActiveWorkspace:SubLocation',\n    ...SUBLOCATION_CONSTANTS\n  }; // Update the location context\n\n  var locationContext = appCtxService.getCtx(contextConstants.location) || {};\n  locationContext[contextConstants.sublocationInLocation] = provider && provider.name.replace(/_/g, '.');\n  appCtxService.registerCtx(contextConstants.location, locationContext); // Update the sublocation context\n\n  var initialContext = {\n    clientScopeURI: provider.clientScopeURI,\n    historyNameToken: provider.name,\n    label: provider.label,\n    nameToken: provider.nameToken\n  };\n  appCtxService.registerCtx(contextConstants.sublocation, initialContext);\n  appCtxService.registerCtx('sublocationTitleErrorMessage', null);\n};\n/**\n * Register any predefined context that is in the state data\n */\n\n\nconst registerStateContext = provider => {\n  if (provider.context) {\n    const stateContexts = Object.keys(provider.context); // Register the state contexts\n\n    stateContexts.forEach(function (key) {\n      const newContext = provider.context[key];\n      const existingContext = appCtxService.getCtx(key);\n\n      if (!(newContext instanceof Array) && typeof newContext !== 'string' && existingContext) {\n        appCtxService.registerCtx(key, { ...existingContext,\n          ..._.cloneDeep(newContext)\n        });\n      } else {\n        appCtxService.registerCtx(key, _.cloneDeep(newContext));\n      }\n    });\n    return stateContexts;\n  }\n\n  return null;\n};\n\nexport const handleCompleteEvent = eventData => {\n  let id = eventData.id;\n  let commandId = appCtxService.getCtx('sidenavCommandId');\n\n  if (eventData.source === 'toolAndInfoPanel') {\n    var toolsAndInfoCommand = appCtxService.getCtx('activeToolsAndInfoCommand');\n\n    if (toolsAndInfoCommand) {\n      id = 'aw_toolsAndInfo';\n      commandId = toolsAndInfoCommand.commandId;\n    }\n\n    appCtxService.unRegisterCtx('activeToolsAndInfoCommand');\n  } else if (eventData.source === 'navigationPanel') {\n    var navigationCommand = appCtxService.getCtx('activeNavigationCommand');\n\n    if (navigationCommand) {\n      id = 'aw_navigation';\n      commandId = navigationCommand.commandId;\n    }\n\n    appCtxService.unRegisterCtx('activeNavigationCommand');\n  }\n\n  if (commandId) {\n    eventBus.publish('awsidenav.openClose', {\n      id: id,\n      commandId: commandId\n    });\n  }\n};\nexport const updateBaseSelection = function (baseSelection, parentSelectionData) {\n  let selectionQueryParamKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 's_uid';\n\n  if (baseSelection && !AwStateService.instance.params[selectionQueryParamKey]) {\n    selectionService.updateSelection([baseSelection], baseSelection);\n    parentSelectionData && parentSelectionData.update({\n      selected: [baseSelection],\n      pselected: baseSelection,\n      source: 'base'\n    });\n  }\n};\nexport const initializePage = async (provider, baseSelection) => {\n  if (!provider) {\n    provider = AwStateService.instance.current.data ? AwStateService.instance.current.data : {};\n  }\n\n  provider.name = provider.name ? provider.name : AwStateService.instance.current.name;\n  provider.parentStateName = provider.parentStateName ? provider.parentStateName : AwStateService.instance.current.parent;\n  registerSubLocationContext(provider);\n  const stateContext = registerStateContext(provider); //set base selection\n\n  selectionService.updateSelection(baseSelection ? [baseSelection] : undefined, baseSelection);\n  const propertyPolicyId = provider.policy && (await propertyPolicyService.registerPolicyAsync(provider.policy));\n  return {\n    subLocationPreference: provider.awSubLocationPref || provider.context || {},\n    stateContext,\n    propertyPolicyId\n  };\n};\nexport const cleanupPage = (stateContext, propertyPolicyId) => {\n  if (stateContext && stateContext.length > 0) {\n    stateContext.forEach(appCtxService.unRegisterCtx);\n  }\n\n  Object.keys(SUBLOCATION_CONSTANTS).forEach(appCtxService.unRegisterCtx); //clear selectiona\n\n  selectionService.updateSelection(undefined, undefined);\n  propertyPolicyService.unregister(propertyPolicyId);\n};\nexport const getContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.provider, props.subPanelContext],\n    compute: () => {\n      return {\n        provider: props.provider,\n        ...props.subPanelContext\n      };\n    }\n  })];\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/AwBaseSublocationService.js"],"names":["SUBLOCATION_CONSTANTS","sublocation","taiCmd","navCmd","sidenavCmd","registerSubLocationContext","provider","contextConstants","location","sublocationInLocation","locationContext","appCtxService","initialContext","clientScopeURI","historyNameToken","label","nameToken","registerStateContext","stateContexts","Object","newContext","existingContext","_","handleCompleteEvent","eventData","id","commandId","toolsAndInfoCommand","navigationCommand","eventBus","updateBaseSelection","selectionQueryParamKey","baseSelection","AwStateService","selectionService","parentSelectionData","selected","pselected","source","initializePage","stateContext","propertyPolicyId","propertyPolicyService","subLocationPreference","cleanupPage","getContext","ctxParameters","additionalParameters","props","compute","subPanelContext"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport appCtxService from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nimport AwStateService from 'js/awStateService';\nimport selectionService from 'js/selection.service';\nimport propertyPolicyService from 'soa/kernel/propertyPolicyService';\nimport { DerivedStateResult } from 'js/derivedContextService';\n\nconst SUBLOCATION_CONSTANTS = {\n    sublocation: 'sublocation',\n    taiCmd: 'activeToolsAndInfoCommand',\n    navCmd: 'activeNavigationCommand',\n    sidenavCmd: 'sidenavCommandId'\n};\n\nconst registerSubLocationContext = provider => {\n    var contextConstants = {\n        location: 'locationContext',\n        sublocationInLocation: 'ActiveWorkspace:SubLocation',\n        ...SUBLOCATION_CONSTANTS\n    };\n\n    // Update the location context\n    var locationContext = appCtxService.getCtx( contextConstants.location ) || {};\n    locationContext[ contextConstants.sublocationInLocation ] = provider && provider.name.replace( /_/g, '.' );\n    appCtxService.registerCtx( contextConstants.location, locationContext );\n\n    // Update the sublocation context\n    var initialContext = {\n        clientScopeURI: provider.clientScopeURI,\n        historyNameToken: provider.name,\n        label: provider.label,\n        nameToken: provider.nameToken\n    };\n    appCtxService.registerCtx( contextConstants.sublocation, initialContext );\n    appCtxService.registerCtx( 'sublocationTitleErrorMessage', null );\n};\n\n/**\n * Register any predefined context that is in the state data\n */\nconst registerStateContext = provider => {\n    if( provider.context ) {\n        const stateContexts = Object.keys( provider.context );\n        // Register the state contexts\n        stateContexts.forEach( function( key ) {\n            const newContext = provider.context[ key ];\n            const existingContext = appCtxService.getCtx( key );\n            if( !( newContext instanceof Array ) && typeof newContext !== 'string' && existingContext ) {\n                appCtxService.registerCtx( key, { ...existingContext, ..._.cloneDeep( newContext ) } );\n            } else {\n                appCtxService.registerCtx( key, _.cloneDeep( newContext ) );\n            }\n        } );\n        return stateContexts;\n    }\n    return null;\n};\n\nexport const handleCompleteEvent = ( eventData ) => {\n    let id = eventData.id;\n    let commandId = appCtxService.getCtx( 'sidenavCommandId' );\n    if( eventData.source === 'toolAndInfoPanel' ) {\n        var toolsAndInfoCommand = appCtxService.getCtx( 'activeToolsAndInfoCommand' );\n        if( toolsAndInfoCommand ) {\n            id = 'aw_toolsAndInfo';\n            commandId = toolsAndInfoCommand.commandId;\n        }\n        appCtxService.unRegisterCtx( 'activeToolsAndInfoCommand' );\n    } else if( eventData.source === 'navigationPanel' ) {\n        var navigationCommand = appCtxService.getCtx( 'activeNavigationCommand' );\n        if( navigationCommand ) {\n            id = 'aw_navigation';\n            commandId = navigationCommand.commandId;\n        }\n        appCtxService.unRegisterCtx( 'activeNavigationCommand' );\n    }\n    if( commandId ) {\n        eventBus.publish( 'awsidenav.openClose', {\n            id: id,\n            commandId: commandId\n        } );\n    }\n};\n\nexport const updateBaseSelection = ( baseSelection, parentSelectionData, selectionQueryParamKey = 's_uid' ) => {\n    if( baseSelection && !AwStateService.instance.params[ selectionQueryParamKey ] ) {\n        selectionService.updateSelection( [ baseSelection ], baseSelection );\n        parentSelectionData && parentSelectionData.update( {\n            selected: [ baseSelection ],\n            pselected: baseSelection,\n            source: 'base'\n        } );\n    }\n};\n\nexport const initializePage = async( provider, baseSelection ) => {\n    if( !provider ) {\n        provider = AwStateService.instance.current.data ? AwStateService.instance.current.data : {};\n    }\n    provider.name = provider.name ? provider.name : AwStateService.instance.current.name;\n    provider.parentStateName = provider.parentStateName ? provider.parentStateName : AwStateService.instance.current.parent;\n    registerSubLocationContext( provider );\n    const stateContext = registerStateContext( provider );\n    //set base selection\n    selectionService.updateSelection( baseSelection ? [ baseSelection ] : undefined, baseSelection );\n    const propertyPolicyId = provider.policy && await propertyPolicyService.registerPolicyAsync( provider.policy );\n    return {\n        subLocationPreference: provider.awSubLocationPref || provider.context || {},\n        stateContext,\n        propertyPolicyId\n    };\n};\n\nexport const cleanupPage = ( stateContext, propertyPolicyId ) => {\n    if( stateContext && stateContext.length > 0 ) {\n        stateContext.forEach( appCtxService.unRegisterCtx );\n    }\n    Object.keys( SUBLOCATION_CONSTANTS ).forEach( appCtxService.unRegisterCtx );\n    //clear selectiona\n    selectionService.updateSelection( undefined, undefined );\n    propertyPolicyService.unregister( propertyPolicyId );\n};\n\nexport const getContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.provider, props.subPanelContext ],\n        compute: () => {\n            return {\n                provider: props.provider,\n                ...props.subPanelContext\n            };\n        }\n    } ) ];\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-disable complexity */\n\n/**\n * This module provides access to service APIs that help to convert the model object to view model object\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/viewModelObjectService\n */\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport lovService from 'js/lovService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\nimport colorDecoratorSvc from 'js/colorDecoratorService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport awIconSvc from 'js/awIconService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport eventBus from 'js/eventBus';\nvar exports = {};\n/**\n * This is added to handle relational property specified in objectset. prop specified as \"relName.relProp\", need to\n * extract the actual prop name to extract value from the refModel Object\n *\n * @param {Object} prop - The IViewModelPropObject of an IViewModelObject (from serverVMO or modelObject property)\n * @param {String} propName - The property name\n * @param {IModelObject} refModelObject - The actual IModelObject for which we are creating ViewModelObject\n *\n * @return {ModelObjectProperty|null} The Result.\n */\n\nvar getSourceObjectProp = function (prop, propName, refModelObject) {\n  var srcObj = null;\n\n  if (!_.isEmpty(prop.intermediateObjectUids)) {\n    srcObj = cdm.getObject(prop.intermediateObjectUids[prop.intermediateObjectUids.length - 1]);\n  } else {\n    srcObj = refModelObject;\n  }\n\n  var srcObjProp = srcObj ? srcObj.props[propName] : null;\n\n  if (!srcObjProp && /\\./.test(propName)) {\n    var actualPropName = uwPropertySvc.getBasePropertyName(propName);\n    srcObjProp = srcObj ? srcObj.props[actualPropName] : null;\n  }\n\n  return srcObjProp;\n};\n\nvar getPropValue = function (uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted) {\n  uw_displayValue[0] = _.isString(prop.displayValue[0]) ? prop.displayValue[0] : new String(prop.displayValue[0]);\n\n  if (propType === 'DATE') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value[0]).getTime();\n    uw_displayValue[0] = isDateAdjusted ? dateTimeSvc.formatDate(new Date(prop.displayValue[0]).getTime()) : prop.displayValue[0];\n  } else if (propType === 'DATETIME') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value[0]).getTime();\n    uw_displayValue[0] = dateTimeSvc.formatSessionDateTime(new Date(prop.displayValue[0]).getTime());\n  } else if ((propType === 'DOUBLE' || propType === 'INTEGER') && prop.value[0]) {\n    uw_dbValue = Number(prop.value[0]);\n  } else if (propType === 'CHAR' && prop.displayValue[0]) {\n    uw_dbValue = prop.displayValue[0];\n  } else {\n    uw_dbValue = prop.value[0];\n  }\n\n  return uw_dbValue;\n};\n\nvar getPropValueOnArray = function (uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted) {\n  uw_dbValue = [];\n\n  for (var i = 0; i < prop.value.length; i++) {\n    var isCharArray = false;\n    /**\n     * For character data types, TC server returns character ASCII values as the property internal\n     * value. Since AW doesn't differentiate between character and string types, the property object\n     * needs to created with display values as internal values. So passing the UI values as internal\n     * value.\n     */\n\n    if (propType === 'STRINGARRAY' && prop.isCharArray) {\n      isCharArray = true;\n    }\n\n    uw_displayValue[i] = prop.displayValue[i];\n\n    if (propType === 'DATEARRAY') {\n      uw_dbValue[i] = new Date(prop.value[i]).getTime();\n      uw_displayValue[i] = isDateAdjusted ? dateTimeSvc.formatDate(new Date(prop.displayValue[i]).getTime()) : prop.displayValue[i];\n    } else if (propType === 'DATETIMEARRAY') {\n      uw_dbValue[i] = new Date(prop.value[i]).getTime();\n      uw_displayValue[i] = dateTimeSvc.formatSessionDateTime(new Date(prop.displayValue[i]).getTime());\n    } else if ((propType === 'DOUBLEARRAY' || propType === 'INTEGERARRAY') && prop.value[i]) {\n      uw_dbValue[i] = Number(prop.value[i]);\n    } else if (isCharArray && prop.displayValue[i]) {\n      uw_dbValue[i] = prop.displayValue[i];\n    } else {\n      uw_dbValue[i] = prop.value[i];\n    }\n  }\n\n  return uw_dbValue;\n};\n\nvar getPropValueNotArray = function (prop, uw_displayValue, propType, uw_dbValue) {\n  if (_.isNil(prop.displayValue[0])) {\n    uw_displayValue[0] = '';\n  } else {\n    var tempDisplayValue = new String(prop.displayValue[0]);\n    uw_displayValue[0] = _.isString(prop.displayValue[0]) ? prop.displayValue[0] : tempDisplayValue;\n  }\n\n  if (propType === 'DATE') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value).getTime();\n    uw_displayValue[0] = dateTimeSvc.formatDate(new Date(prop.displayValue[0]).getTime());\n  } else if (propType === 'DATETIME') {\n    // eslint-disable-line no-lonely-if\n    uw_dbValue = new Date(prop.value[0]).getTime();\n    uw_displayValue[0] = dateTimeSvc.formatSessionDateTime(new Date(prop.displayValue[0]).getTime());\n  } else if ((propType === 'DOUBLE' || propType === 'INTEGER') && prop.value && isFinite(prop.value) && prop.value !== null && prop.value !== '' && !_.isArray(prop.value)) {\n    uw_dbValue = Number(prop.value);\n  } else if (propType === 'CHAR' && prop.value) {\n    uw_dbValue = prop.displayValue[0];\n  } else {\n    uw_dbValue = prop.value;\n  }\n\n  return uw_dbValue;\n};\n/**\n *\n * @param {String} propType - The property type\n * @param {*} prop - The property value as defined in definition\n * @param {boolean} isDateAdjusted - isDateAdjusted\n * @returns {Object} - Object containing value and display value\n */\n\n\nvar getPropertyValues = function (propType, prop, isDateAdjusted) {\n  var uw_dbValue = null;\n  var uw_displayValue = null;\n\n  if (!_.isUndefined(prop.value) && !_.isNull(prop.value)) {\n    uw_displayValue = [];\n\n    if (prop.isArray) {\n      uw_dbValue = getPropValueOnArray(uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted);\n    } else if (_.isArray(prop.value) && prop.value.length > 0) {\n      uw_dbValue = getPropValue(uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted);\n    } else {\n      uw_dbValue = getPropValueNotArray(prop, uw_displayValue, propType, uw_dbValue);\n    }\n  } else if (!prop.value && propType === 'BOOLEAN') {\n    uw_displayValue = [];\n\n    if (_.isNil(prop.displayValue[0])) {\n      uw_displayValue[0] = '';\n    } else {\n      var tempDisplayValue = new String(prop.displayValue[0]);\n      uw_displayValue[0] = _.isString(prop.displayValue[0]) ? prop.displayValue[0] : tempDisplayValue;\n    }\n\n    uw_dbValue = prop.value;\n  } else {\n    uw_displayValue = prop.displayValue;\n  }\n\n  return {\n    value: uw_dbValue,\n    displayValue: uw_displayValue\n  };\n};\n/**\n * format serverVMO/modelObject property as par consistent API schema\n *\n * @constructor\n *\n * @param {propObject} prop - The IModelObject to create a ViewModelObject for.\n * @param {string} propName - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} serverVMO - The IModelObject to create a ViewModelObject for.\n * @param {string} operationName - operationName\n */\n\n\nvar formatProperties = function (prop, propName, modelObject, serverVMO, operationName) {\n  var propValue = prop instanceof Object ? Object.assign({}, prop) : new Object();\n  var hasServerVMO = serverVMO && serverVMO.props && serverVMO.props.hasOwnProperty(propName);\n  var initialValue = '';\n  var inputDbValues = null;\n  var displayValues = null;\n  var propDesc = prop.propertyDescriptor;\n  propValue.isModifiable = false;\n\n  if (!declUtils.isNil(prop.hasLOV)) {\n    propValue.hasLOV = prop.hasLOV;\n  } else {\n    propValue.hasLOV = propDesc && propDesc.lovCategory > 0;\n  }\n\n  if (hasServerVMO) {\n    propValue.propType = exports.getClientPropertyType(prop.type, prop.isArray === true);\n    propValue.isRequired = prop.isRequired === true;\n    propValue.displayName = prop.propertyDisplayName ? prop.propertyDisplayName : null;\n    propValue.referenceTypeName = prop.ReferencedTypeName ? prop.ReferencedTypeName : '';\n    propValue.isModifiable = prop.isModifiable === true;\n    propValue.isCharArray = prop.type === 1;\n    initialValue = prop.initialValue ? prop.initialValue : null;\n\n    if (prop.hasRevRuleAttached) {\n      propValue.hasRevRuleAttached = prop.hasRevRuleAttached === true;\n    }\n\n    if (propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY') {\n      let propFromServerVMO = serverVMO.props[propName]; //for date type property, set default value false to isTimeEnabled\n\n      propValue.isTimeEnabled = false;\n\n      if (propFromServerVMO) {\n        propValue.isTimeEnabled = _.isUndefined(propFromServerVMO.isTimeEnabled) ? false : propFromServerVMO.isTimeEnabled;\n      }\n    }\n  } else {\n    var constantsMap;\n\n    if (propDesc) {\n      propValue.isArray = propDesc.anArray;\n      propValue.propType = exports.getClientPropertyType(propDesc.valueType, propValue.isArray);\n      propValue.isCharArray = propDesc.valueType === 1;\n      propValue.displayName = propDesc.displayName;\n      propValue.maxLength = propDesc.maxLength;\n      propValue.maxArraySize = propDesc.maxArraySize ? propDesc.maxArraySize : -1;\n      constantsMap = propDesc.constantsMap;\n    }\n\n    if (constantsMap) {\n      initialValue = constantsMap.initialValue;\n      propValue.initialValue = constantsMap.initialValue;\n      propValue.isEditable = constantsMap.editable === '1';\n      propValue.isRequired = constantsMap.required === '1';\n      propValue.isAutoAssignable = constantsMap.autoassignable === '1';\n      propValue.isRichText = constantsMap.Fnd0RichText === '1';\n      propValue.isEnabled = constantsMap.editable ? constantsMap.editable === '1' : true;\n      propValue.referenceTypeName = constantsMap.ReferencedTypeName || '';\n\n      if (propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY') {\n        //from SOA getTypeDescriptions2, timeEnabled is undefined when Fnd0EnableTimeForDateProperty is default false.\n        propValue.isTimeEnabled = _.isUndefined(constantsMap.timeEnabled) ? false : constantsMap.timeEnabled === '1';\n      } // If isModifiable is false on the modelObject, use that first over propertyDescriptor's constantsMap default value\n\n\n      if (modelObject && modelObject.props && modelObject.props.is_modifiable && modelObject.props.is_modifiable.dbValues && modelObject.props.is_modifiable.dbValues[0] === '0') {\n        propValue.isModifiable = false;\n      } else {\n        propValue.isModifiable = constantsMap.modifiable === '1';\n      }\n    }\n  }\n\n  if (_.isNil(propValue.isModifiable)) {\n    propValue.isModifiable = false;\n  }\n\n  if (operationName && _.isString(operationName)) {\n    if (/^(EDIT|REVISE|SAVEAS|CREATE)$/i.test(operationName)) {\n      if (hasServerVMO) {\n        propValue.isEditable = prop.isModifiable === true;\n      } else {\n        propValue.isEditable = prop.modifiable === true;\n      }\n    } // Set isEnabled flag to 'true' for all properties for SaveAs ,Revise and Create operations.\n    // <P>\n    // Note: Create panel would require the below change when its converted to declarative.\n\n\n    if (/^(REVISE|SAVEAS|CREATE)$/i.test(operationName)) {\n      propValue.isEnabled = true;\n    }\n  }\n\n  if (propValue.isDCP) {\n    inputDbValues = prop && prop.dbValues || [];\n    displayValues = prop && prop.uiValues || [];\n\n    if (propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY') {\n      //For DCP property, replace displayValues with the date formatted dbValues value\n      var tempDisplayValues = [];\n\n      for (var indx = 0; indx < inputDbValues.length; indx++) {\n        if (propValue.isTimeEnabled === false) {\n          tempDisplayValues.push(dateTimeSvc.formatSessionDate(inputDbValues[indx]));\n        } else {\n          tempDisplayValues.push(dateTimeSvc.formatSessionDateTime(inputDbValues[indx]));\n        }\n      }\n\n      if (tempDisplayValues.length > 0) {\n        displayValues = tempDisplayValues;\n      }\n    }\n  } else {\n    var srcObjProp = getSourceObjectProp(prop, propName, modelObject);\n    inputDbValues = srcObjProp && srcObjProp.dbValues || [];\n    displayValues = srcObjProp && srcObjProp.uiValues || [];\n  }\n\n  propValue.dbValues = inputDbValues;\n\n  if (inputDbValues && inputDbValues.length > 0) {\n    propValue.value = inputDbValues;\n  } else if (initialValue !== '') {\n    propValue.value = initialValue;\n  } else {\n    propValue.value = null;\n  }\n\n  propValue.displayValue = displayValues;\n  return propValue;\n};\n/**\n * Processing and assigning modelObject and serverVMO property on ViewModelObject\n * It is post processing.\n *\n * @constructor\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {IModelObject} viewModelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} owningObjUid - The intended purpose for the new ViewModelOject (e.g. 'edit').\n */\n\n\nvar alignPropertiesOnVMO = function (modelObject, viewModelObject, owningObjUid) {\n  _.forOwn(modelObject.props, function (propValue, propName) {\n    var propDesc = propValue.propertyDescriptor;\n\n    if (propDesc) {\n      viewModelObject.propertyDescriptors[propName] = propDesc;\n    }\n\n    viewModelObject.props[propName].propertyDescriptor = propValue.propertyDescriptor;\n    viewModelObject.props[propName].intermediateObjectUids = propValue.intermediateObjectUids;\n    viewModelObject.props[propName].isDCP = propValue.isDCP || false;\n\n    if (!viewModelObject.props[propName].lovApi && viewModelObject.props[propName].hasLov) {\n      lovService.initNativeCellLovApi(viewModelObject.props[propName], null, viewModelObject.operationName, viewModelObject, owningObjUid);\n    }\n  });\n\n  if (modelObject.type === 'Awp0XRTObjectSetRow' && modelObject.props.awp0Target) {\n    const target = cdm.getObject(modelObject.props.awp0Target.dbValues[0]);\n\n    if (target) {\n      for (const prop of Object.values(modelObject.props)) {\n        if (!prop.propertyDescriptor && target.props[prop.propertyName]) {\n          prop.propertyDescriptor = target.props[prop.propertyName].propertyDescriptor;\n        }\n      }\n\n      for (const prop of Object.values(viewModelObject.props)) {\n        if (!prop.propertyDescriptor && target.props[prop.propertyName]) {\n          prop.propertyDescriptor = target.props[prop.propertyName].propertyDescriptor;\n        }\n      }\n    }\n  }\n\n  return viewModelObject;\n};\n/**\n * Update this model object's awp cell properties which are stored as key/value inside an array property\n * awp0CellProperties.\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\n\n\nvar updateCellProperties = function (viewModelObject) {\n  /**\n   * Pull any cell properties out of their encoded string and have them as 1st class properties of the\n   * ViewModelObject.\n   */\n  if (viewModelObject.props && viewModelObject.props.awp0CellProperties) {\n    // We should look up for dbValue always,'dbValues' is redundant and need to cleanup any dependency on that\n    // dbValue could be array or string based on the mode object\n    var dbValue = viewModelObject.props.awp0CellProperties.dbValue;\n    viewModelObject.cellProperties = {};\n\n    for (var ii = 0; ii < dbValue.length; ii++) {\n      var keyValue = dbValue[ii].split('\\\\:');\n      var value = keyValue[1] || '';\n      value = value.replace('{__UTC_DATE_TIME}', '');\n\n      if (ii === 0) {\n        viewModelObject.cellHeader1 = value;\n      } else if (ii === 1) {\n        viewModelObject.cellHeader2 = value;\n      } else if (value) {\n        var key = keyValue[0];\n        viewModelObject.cellProperties[key] = {\n          key: key,\n          value: value\n        };\n      }\n    }\n  }\n};\n/**\n * Update this model object's Thumbnail URL based on the FMS ticket stored in the awp0ThumbnailImageTicket property\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\n\n\nvar updateIcons = function (viewModelObject) {\n  if (viewModelObject && viewModelObject.props) {\n    viewModelObject.thumbnailURL = awIconSvc.getThumbnailFileUrl(viewModelObject);\n    viewModelObject.typeIconURL = awIconSvc.getTypeIconFileUrl(viewModelObject);\n\n    if (viewModelObject.thumbnailURL) {\n      viewModelObject.hasThumbnail = true;\n    } else {\n      viewModelObject.hasThumbnail = false;\n    }\n  }\n};\n/**\n * Get Model object from uid\n * @param {String} uid - The UID of the object whose Model object is required\n * @returns {modelObj} modelObject\n */\n\n\nvar getModelObject = function (uid) {\n  return cdm.getObject(uid);\n};\n/**\n * Update this model object's status indicators\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\n\n\nvar updateStatusIndicators = function (viewModelObject) {\n  if (viewModelObject.props) {\n    // Since we dont want to add another dependency in visualIndicatorSvc on cdm, we are passing callback here\n    // This will be called from visualIndicatorSvc when there is a need to get model object from UID.\n    var getObjCb = getModelObject;\n    var adaptedVmo = viewModelObject;\n\n    if (viewModelObject.type === 'Awp0XRTObjectSetRow') {\n      // Get underlying target object's UID if 'awp0Target' property exists\n      if (viewModelObject.props && viewModelObject.props.awp0Target) {\n        var targetUID = viewModelObject.props.awp0Target.dbValue;\n        var targetMO = cdm.getObject(targetUID);\n\n        if (targetMO) {\n          adaptedVmo = exports.constructViewModelObjectFromModelObject(targetMO, 'edit', null, null, true);\n        }\n      }\n    }\n\n    var indicators = visualIndicatorSvc.getVisualIndicators(adaptedVmo, getObjCb);\n    viewModelObject.indicators = indicators;\n  }\n};\n/**\n * Update this model object's status indicators\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - The object(s) to update properties on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\n\n\nvar updateColorDecorators = function (vmoIn, skipEvent) {\n  colorDecoratorSvc.setDecoratorStyles(vmoIn, skipEvent);\n};\n/**\n * Method to construct VMO from serverVMO and modelObject\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} operationName - The intended purpose for the new ViewModelOject (e.g. 'edit').\n * @param {String} owningObjUid - The UID of owning object.\n * @param {Object} serverVMO - (Optional) A property map from the server with values to include on the returned VMO.\n * @param {boolean}  skipIconUpdate - to udpate values\n */\n\n\nexport let constructViewModelObjectFromModelObject = function (modelObject, operationName, owningObjUid, serverVMO, skipIconUpdate) {\n  var basicVMO = {};\n  basicVMO.props = {};\n  basicVMO.propertyDescriptors = {};\n\n  if (modelObject) {\n    if (serverVMO) {\n      basicVMO.uid = serverVMO.uid || modelObject.uid;\n\n      if (serverVMO.alternateID || modelObject.alternateID) {\n        basicVMO.alternateID = serverVMO.alternateID || modelObject.alternateID;\n      }\n\n      basicVMO.type = serverVMO.type || modelObject.type;\n      basicVMO.modelType = serverVMO.modelType || modelObject.modelType;\n\n      if (!basicVMO.modelType) {\n        basicVMO.modelType = cmm.getType(basicVMO.type);\n      }\n\n      if (serverVMO.rowStatus) {\n        basicVMO.rowStatus = serverVMO.rowStatus;\n      }\n\n      var vmoProps = serverVMO.props;\n      var moProps = modelObject.props;\n\n      _.forEach(moProps, function (propValue, propName) {\n        if (propValue) {\n          if (vmoProps[propName]) {\n            var moPropValueClone = _.clone(propValue);\n\n            _.merge(moPropValueClone, vmoProps[propName]);\n\n            basicVMO.props[propName] = formatProperties(moPropValueClone, propName, modelObject, serverVMO, operationName);\n          } else {\n            basicVMO.props[propName] = formatProperties(propValue, propName, modelObject, serverVMO, operationName);\n          }\n        }\n      });\n      /**\n       * Check for the case of the serverVMO having a property NOT currently in the modelObject.\n       * <P>\n       * Note: Not sure when this could happen, but need to handle it.\n       */\n\n\n      _.forEach(vmoProps, function (propValue, propName) {\n        if (propValue && !moProps[propName]) {\n          basicVMO.props[propName] = formatProperties(propValue, propName, modelObject, serverVMO, operationName);\n        }\n      });\n    } else {\n      basicVMO.uid = modelObject.uid;\n\n      if (modelObject.alternateID) {\n        basicVMO.alternateID = modelObject.alternateID;\n      }\n\n      basicVMO.type = modelObject.type;\n      basicVMO.modelType = modelObject.modelType;\n\n      if (!basicVMO.modelType) {\n        basicVMO.modelType = cmm.getType(basicVMO.type);\n      }\n\n      basicVMO.props = {};\n\n      _.forEach(modelObject.props, function (propValue, propName) {\n        if (propValue) {\n          basicVMO.props[propName] = formatProperties(propValue, propName, modelObject, serverVMO, operationName);\n        }\n      });\n    }\n  }\n\n  var vmo = exports.constructViewModelObject(basicVMO, false);\n  vmo.operationName = operationName;\n\n  if (basicVMO.rowStatus) {\n    vmo.rowStatus = basicVMO.rowStatus;\n  }\n\n  var updateVMO = alignPropertiesOnVMO(basicVMO, vmo, owningObjUid);\n  updateCellProperties(updateVMO);\n\n  if (!skipIconUpdate) {\n    updateIcons(updateVMO);\n    updateStatusIndicators(updateVMO);\n    updateColorDecorators(updateVMO, true);\n  }\n\n  return updateVMO;\n};\n/**\n * Update this model object's status indicators\n * @param {prop} prop - The object(s) to update properties on.\n * @param {ViewModelProperty} viewProp - if true will skip event.\n * @param {type} propType - if true will skip event.\n */\n\nvar populateViewModelProperty = function (prop, viewProp, propType) {\n  if (!declUtils.isNil(prop.autofocus)) {\n    uwPropertySvc.setAutoFocus(viewProp, prop.autofocus);\n  }\n\n  if (prop.labelPosition) {\n    uwPropertySvc.setPropertyLabelDisplay(viewProp, prop.labelPosition, true);\n\n    if (prop.labelPosition === 'PROPERTY_LABEL_AT_SIDE') {\n      viewProp.editLayoutSide = true;\n    }\n  }\n\n  if (prop.renderingStyle) {\n    uwPropertySvc.setPropertyLabelDisplay(viewProp, prop.renderingStyle, true);\n  } // Add pattern information\n\n\n  if (prop.patterns) {\n    viewProp.patterns = prop.patterns;\n\n    if (prop.condition) {\n      viewProp.condition = prop.condition;\n    }\n  } // Add preferredPattern information\n\n\n  viewProp.preferredPattern = prop.preferredPattern; // Add patternAutoAssignFlags information\n\n  if (prop.patternAutoAssignFlags) {\n    viewProp.patternAutoAssignFlags = prop.patternAutoAssignFlags;\n  }\n\n  if (prop.validationCriteria) {\n    viewProp.validationCriteria = prop.validationCriteria;\n  }\n\n  if (!_.isUndefined(prop.oldValue)) {\n    viewProp.oldValue = prop.oldValue;\n  } else if (prop.oldValues) {\n    viewProp.oldValues = prop.oldValues;\n  }\n\n  if (prop.vertical) {\n    viewProp.vertical = prop.vertical;\n  }\n\n  if (!viewProp.propApi) {\n    viewProp.propApi = {};\n  }\n\n  if (propType === 'BOOLEAN' && prop.propertyRadioTrueText && prop.propertyRadioFalseText) {\n    viewProp.propertyRadioTrueText = prop.propertyRadioTrueText;\n    viewProp.propertyRadioFalseText = prop.propertyRadioFalseText;\n  }\n};\n/**\n * @param {Object} prop -\n * @param {String} propName -\n * @param {Object} owningObj -\n * @param {boolean} isDateAdjusted -\n *\n * @returns {ViewModelProperty} New object initialized with the given data.\n */\n\n\nexport let constructViewModelProperty = function (prop, propName, // eslint-disable-line\nowningObj, isDateAdjusted) {\n  var isArray = prop.isArray;\n  var propType = prop.propType;\n  var displayName = '';\n\n  if (prop.displayName) {\n    displayName = prop.displayName;\n  } else if (prop.propertyDisplayName) {\n    displayName = prop.propertyDisplayName;\n  }\n\n  var isEditable = _.isUndefined(prop.isEditable) ? false : prop.isEditable;\n  var isModifiable = _.isUndefined(prop.isModifiable) ? true : prop.isModifiable;\n  var isRequired = prop.isRequired === true;\n  var isAutoAssign = prop.isAutoAssign === true;\n  var isAutoAssignable = prop.isAutoAssignable === true;\n  var isRichText = prop.isRichText === true;\n  var isEnabled = _.isUndefined(prop.isEnabled) ? true : prop.isEnabled !== false; // default value\n\n  var referenceTypeName = prop.referenceTypeName ? prop.referenceTypeName : '';\n  var maxLength = _.isUndefined(prop.maxLength) ? 0 : prop.maxLength;\n  var maxArraySize = prop.maxArraySize ? prop.maxArraySize : -1;\n  var hasLov = prop.hasLOV === true;\n  var isLocalizable = prop.isLocalizable === true;\n  var isNull = false;\n  var error = null;\n  var renderingHint = prop.renderingHint ? prop.renderingHint : '';\n  var numberOfCharacters = -1;\n  var numberOfLines = prop.numberOfLines ? prop.numberOfLines : -1;\n  var isSelectOnly = false;\n  var requiredText = prop.requiredText;\n  var isTimeEnabled = prop.isTimeEnabled !== false;\n  var values = getPropertyValues(propType, prop, isDateAdjusted);\n\n  if (propType === 'CHAR' || propType === 'STRINGARRAY' && prop.isCharArray) {\n    maxLength = 1;\n  }\n\n  if (propType && propType === 'DATETIME') {\n    propType = 'DATE';\n  }\n\n  var viewProp = uwPropertySvc.createViewModelProperty(propName, displayName, propType, values.value, values.displayValue);\n\n  if (propType === 'STRING' || propType === 'STRINGARRAY') {\n    viewProp.inputType = 'text';\n  }\n\n  if (requiredText) {\n    uwPropertySvc.setPlaceHolderText(viewProp, requiredText); // need to add in VMO\n  }\n\n  isSelectOnly = _.isUndefined(prop.isSelectOnly) ? true : prop.isSelectOnly;\n  uwPropertySvc.setIsSelectOnly(viewProp, isSelectOnly, true);\n\n  if (prop.hasRevRuleAttached) {\n    viewProp.hasRevRuleAttached = true;\n  }\n\n  populateViewModelProperty(prop, viewProp, propType);\n  uwPropertySvc.setHasLov(viewProp, hasLov);\n  uwPropertySvc.setIsRequired(viewProp, isRequired);\n  uwPropertySvc.setIsArray(viewProp, isArray);\n  uwPropertySvc.setIsAutoAssign(viewProp, isAutoAssign);\n  uwPropertySvc.setIsAutoAssignable(viewProp, isAutoAssignable);\n  uwPropertySvc.setIsEditable(viewProp, isEditable);\n  uwPropertySvc.setIsRichText(viewProp, isRichText);\n  uwPropertySvc.setIsEnabled(viewProp, isEnabled);\n  uwPropertySvc.setIsLocalizable(viewProp, isLocalizable);\n  uwPropertySvc.setIsNull(viewProp, isNull);\n  uwPropertySvc.setLength(viewProp, maxLength);\n  uwPropertySvc.setRenderingHint(viewProp, renderingHint);\n  uwPropertySvc.setError(viewProp, error);\n  uwPropertySvc.setNumberOfCharacters(viewProp, numberOfCharacters);\n  uwPropertySvc.setNumberOfLines(viewProp, numberOfLines);\n  uwPropertySvc.setArrayLength(viewProp, maxArraySize);\n  uwPropertySvc.setIsPropertyModifiable(viewProp, isModifiable);\n  uwPropertySvc.setReferenceType(viewProp, referenceTypeName);\n  uwPropertySvc.setTimeEnabled(viewProp, isTimeEnabled);\n  viewProp.initialize = false;\n  viewProp.parentUid = owningObj ? owningObj.uid : '';\n  viewProp.dbValues = prop.dbValues ? prop.dbValues : prop.value;\n  viewProp.uiValues = values.displayValue;\n  viewProp.uiValue = uwPropertySvc.getUiValue(viewProp.uiValues);\n  viewProp.sourceObjectLastSavedDate = prop.srcObjLsd;\n  viewProp.srcObjectTypeName = prop.srcObjectTypeName;\n  viewProp.iconName = prop.iconName;\n  viewProp.iconSource = prop.iconSource;\n  viewProp.action = prop.action;\n  viewProp.tooltip = prop.tooltip;\n  return viewProp;\n}; // constructViewModelProperty\n\n/**\n * Class used to help view specific state information.\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {boolean} isDateAdjusted - isDateAdjusted\n */\n\nvar ViewModelObject = function (modelObject, isDateAdjusted) {\n  // eslint-disable-line complexity\n  var self = this;\n  self.props = {};\n  self.propertyDescriptors = {};\n  self.visible = true;\n  self.uid = modelObject.uid;\n  self.type = modelObject.type;\n  self.modelType = modelObject.modelType;\n\n  if (modelObject.alternateID) {\n    self.alternateID = modelObject.alternateID;\n  }\n\n  _.forOwn(modelObject.props, function (propValue, propName) {\n    if (propValue) {\n      self.props[propName] = exports.constructViewModelProperty(propValue, propName, self, isDateAdjusted);\n    }\n  });\n};\n/**\n * @return {String|Object} Displayable 'id' of this ViewModelObject (if possible, else the UID or '???' is\n *         returned).\n */\n\n\n_c = ViewModelObject;\n\nViewModelObject.prototype.toString = function () {\n  if (this.cellHeader1) {\n    return this.cellHeader1;\n  } else if (this.props.object_string && this.props.object_string.uiValues[0]) {\n    return this.props.object_string.uiValues[0];\n  } else if (this.uid) {\n    return this.uid;\n  }\n\n  return '???';\n};\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified.\n *\n * @return {StringArray} Array of property names.\n */\n\n\nViewModelObject.prototype.getDirtyProps = function () {\n  var propertyNameValues = [];\n\n  for (var prop in this.props) {\n    if (this.props.hasOwnProperty(prop)) {\n      if (uwPropertySvc.isModified(this.props[prop])) {\n        var propNameValue = {};\n        propNameValue.name = prop;\n        propNameValue.values = uwPropertySvc.getValueStrings(this.props[prop]);\n        propertyNameValues.push(propNameValue);\n      }\n    }\n  }\n\n  return propertyNameValues;\n};\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\n\n\nViewModelObject.prototype.getSaveableDirtyProps = function () {\n  var propertyNameValues = this.getDirtyProps();\n\n  _.forEach(propertyNameValues, function (propObject) {\n    var propVals = propObject.values;\n\n    for (var i = 0; i < propVals.length; i++) {\n      propVals[i] = String(propVals[i]);\n    }\n  });\n\n  return propertyNameValues;\n};\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\n\n\nViewModelObject.prototype.getAutoAssignableProps = function () {\n  var propertyNameValues = [];\n\n  for (var prop in this.props) {\n    if (this.props.hasOwnProperty(prop) && this.props[prop].isAutoAssignable) {\n      var propNameValue = {};\n      propNameValue.name = prop;\n      propNameValue.values = uwPropertySvc.getValueStrings(this.props[prop]);\n      propertyNameValues.push(propNameValue);\n    }\n  }\n\n  _.forEach(propertyNameValues, function (propObject) {\n    var propVals = propObject.values;\n\n    for (var i = 0; i < propVals.length; i++) {\n      propVals[i] = String(propVals[i]);\n    }\n  });\n\n  return propertyNameValues;\n};\n/**\n * This function sets the vmo edit state\n * @param {Object} vmo the view model object.\n * @param {Boolean} editState the edit state.\n */\n\n\nexport const setEditState = function (vmo, editState) {\n  vmo.isEditing = editState;\n};\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Object} vmo - the view model object\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\n\nexport const clearEditableStates = function (vmo, skipDigest) {\n  setEditState(vmo, false);\n\n  _.forEach(vmo.props, function (prop2) {\n    uwPropertySvc.resetUpdates(prop2);\n    uwPropertySvc.setIsEditable(prop2, false);\n  });\n};\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\n\nViewModelObject.prototype.clearEditiableStates = function (skipDigest) {\n  clearEditableStates(this, skipDigest);\n};\n/**\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n *\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n */\n\n\nViewModelObject.prototype.setEditableStates = function (editable, override, skipDigest) {\n  exports.setEditableStates(this, editable, override, skipDigest);\n};\n/**\n * Retrieves the id of the object, currently set to uid.\n *\n * Could change in future if each vmo (with cardinality) has their own unique id instead of 'uid'.\n *\n * @returns {String} The ID.\n */\n\n\nViewModelObject.prototype.getId = function () {\n  return this.uid;\n};\n/**\n\n * Retrieve the ViewModelProperty object with the same basePropertyName and sourceObjectUid as the parameters.\n\n *\n\n * @param {String} basePropertyName - the base property name trying to be matched\n\n * @param {String} uid - unique id\n\n *\n\n * @returns {ViewModelProperty} The found property.\n\n */\n\n\nViewModelObject.prototype.retrievePropertyWithBasePropertyName = function (basePropertyName, uid) {\n  var foundProperty = null;\n\n  _.forEach(this.props, function (currentProperty, key) {\n    var currentBasePropertyName = uwPropertySvc.getBasePropertyName(key);\n\n    if (currentBasePropertyName === basePropertyName) {\n      var sourceObjectUid = uwPropertySvc.getSourceObjectUid(currentProperty);\n\n      if (sourceObjectUid === uid) {\n        foundProperty = currentProperty;\n        return false;\n      }\n    }\n  });\n\n  return foundProperty;\n};\n/**\n\n * create VMO API for all interface such as dataParser , viewModelCollection\n\n *\n\n * @constructor\n\n *\n\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n\n * @param {boolean} isDateAdjusted isDateAdjusted\n\n */\n\n\nexport let constructViewModelObject = function (modelObject, isDateAdjusted) {\n  return new ViewModelObject(modelObject, isDateAdjusted);\n};\n/**\n\n * Get view model property type based on the value type and array flag.\n\n *\n\n * @param {Integer} valueType - The valueType for this property\n\n * @param {Boolean} isArray - array flag\n\n *\n\n * @return {propertyType} propertyType based off the integer value of valueType (String/Double/char etc.)\n\n */\n\nexport let getClientPropertyType = function (valueType, isArray) {\n  // eslint-disable-line complexity\n  var propertyType;\n\n  switch (valueType) {\n    case 1:\n      if (isArray) {\n        propertyType = 'STRINGARRAY';\n      } else {\n        propertyType = 'CHAR';\n      }\n\n      break;\n\n    case 2:\n      if (isArray) {\n        propertyType = 'DATEARRAY';\n      } else {\n        propertyType = 'DATE';\n      }\n\n      break;\n\n    case 3:\n    case 4:\n      if (isArray) {\n        propertyType = 'DOUBLEARRAY';\n      } else {\n        propertyType = 'DOUBLE';\n      }\n\n      break;\n\n    case 5:\n      if (isArray) {\n        propertyType = 'INTEGERARRAY';\n      } else {\n        propertyType = 'INTEGER';\n      }\n\n      break;\n\n    case 6:\n      if (isArray) {\n        propertyType = 'BOOLEANARRAY';\n      } else {\n        propertyType = 'BOOLEAN';\n      }\n\n      break;\n\n    case 7:\n      if (isArray) {\n        propertyType = 'INTEGERARRAY';\n      } else {\n        propertyType = 'SHORT';\n      }\n\n      break;\n\n    case 8:\n      if (isArray) {\n        propertyType = 'STRINGARRAY';\n      } else {\n        propertyType = 'STRING';\n      }\n\n      break;\n\n    case 9:\n    case 10:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n      if (isArray) {\n        propertyType = 'OBJECTARRAY';\n      } else {\n        propertyType = 'OBJECT';\n      }\n\n      break;\n\n    default:\n      propertyType = 'UNKNOWN';\n      break;\n  }\n\n  return propertyType;\n};\n/**\n\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n\n *\n\n * @param {ViewModelObject} vmo - The viewModelObject containing the 'props' to be checked.\n\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n\n *            different than the desired state.\n\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n\n */\n\nexport let setEditableStates = function (vmo, editable, override, skipDigest) {\n  setEditState(vmo, editable);\n  var modelObject = cdm.getObject(vmo.uid);\n  var isEditableNil = declUtils.isNil(editable);\n\n  _.forEach(vmo.props, function (propValue, propName) {\n    if (propValue) {\n      if (isEditableNil) {\n        var modelProp = modelObject.props[propName];\n\n        if (modelProp) {\n          propValue.isEditable = modelProp.modifiable;\n          uwPropertySvc.setEditable(propValue, modelProp.modifiable);\n          /**\n            * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n            * uwPropertySvc.setEditState instead. No need to set viewProp.editableInViewModel separately as it\n            * will be taken care by setEditStates method. This change is done as part of handling upload\n            * dataset use case.\n            */\n\n          uwPropertySvc.setEditState(propValue, modelProp.modifiable, true);\n        }\n      } else {\n        propValue.isEditable = editable;\n        uwPropertySvc.setEditable(propValue, editable);\n        /**\n          * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n          * uwPropertySvc.setEditState instead . No need to set viewProp.editableInViewModel separately as it\n          * will be taken care by setEditStates method. This changes is done as part of handling upload\n          * dataset use case.\n          */\n\n        uwPropertySvc.setEditState(propValue, editable, override, true);\n      }\n    }\n  });\n};\n/**\n\n/**\n\n * @param {String|Object} input - UID of the ModelObject to create a ViewModelObject wrapper for OR model object\n\n * @param {String} operationName - if \"EDIT\", then the VMO is modifiable. (null is acceptable)\n\n * @param {String} owningObjUid - The UID of owning object\n\n * @param {ViewModelObject} serverVMO -\n\n *\n\n * @return {ViewModelObject} Newly created ViewModelObject wrapper initialized with properties from the given\n\n *         inputs.\n\n */\n\nexport let createViewModelObject = function (input, operationName, owningObjUid, serverVMO) {\n  var modelObject = input;\n\n  if (_.isString(input)) {\n    modelObject = cdm.getObject(input);\n  } else if (input && input.uid && !serverVMO) {\n    modelObject = cdm.getObject(input.uid);\n  }\n\n  if (!modelObject) {\n    logger.error('viewModelObject.createViewModelObject: ' + 'Unable to locate ModelObject in the clientDataModel with UID=' + input);\n    return null;\n  }\n\n  return exports.constructViewModelObjectFromModelObject(modelObject, operationName, owningObjUid, serverVMO);\n};\n/**\n\n * This is a preProcessor to 'updateSourceObjectPropertiesByViewModelObject' to trivially ignore updating existing\n\n * (loaded) VMOs in the given collection.\n\n *\n\n * @param {ViewModelObjectArray} loadedVMOs - Collection of viewModelObjects to consider for updating.\n\n *\n\n * @param {IModelObjectArray} updatedCDMObjects - CDM Objects that have been reported as updated or modified.\n\n */\n\nexport let updateViewModelObjectCollection = function (loadedVMOs, updatedCDMObjects) {\n  /**\n    * Check if there is nothing to work on or with.\n    */\n  if (_.isEmpty(loadedVMOs) || _.isEmpty(updatedCDMObjects)) {\n    return;\n  }\n  /**\n    * Create a map containing the unique UID of all the loaded viewModelObjects so that we can trivially ignore any\n    * changed CDM objects NOT in this viewModelCollection.\n    * <P>\n    * Note: The map needs to consider all the different UIDs a modified object could be referenced by it. The UID\n    * checks mirror the check made in 'updateSourceObjectPropertiesByViewModelObject'.\n    */\n\n\n  var vmoMap = {};\n\n  _.forEach(loadedVMOs, function cdmHandlerCheck(vmo) {\n    if (vmo.uid) {\n      vmoMap[vmo.uid] = true;\n\n      if (!_.isEmpty(vmo.props)) {\n        if (vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target && vmo.props.awp0Target.dbValue) {\n          vmoMap[vmo.props.awp0Target.dbValue] = true;\n        }\n\n        _.forEach(vmo.props, function (vmProp) {\n          var sourceObjectUid = uwPropertySvc.getSourceObjectUid(vmProp);\n\n          if (sourceObjectUid) {\n            vmoMap[sourceObjectUid] = true;\n          }\n\n          if (vmProp.parentUid) {\n            vmoMap[vmProp.parentUid] = true;\n          }\n        });\n      }\n    }\n  });\n  /**\n    * Check if we ended up with NO viewModelObjects.\n    */\n\n\n  if (_.isEmpty(vmoMap)) {\n    return;\n  }\n  /**\n    * Loop for each modified object and update any VMOs effected by it.\n    */\n\n\n  _.forEach(updatedCDMObjects, function _updateViewModelCollection(updatedObj) {\n    if (updatedObj.uid && vmoMap[updatedObj.uid]) {\n      var updatedVmo = exports.createViewModelObject(updatedObj, 'EDIT');\n\n      if (updatedVmo && updatedVmo.props) {\n        exports.updateSourceObjectPropertiesByViewModelObject(updatedVmo, loadedVMOs);\n      }\n    }\n  });\n};\n/**\n\n * Updates all the viewModelObjects with the updatedVMO, depending on the property's sourceUid.\n\n *\n\n * @param {ViewModelObject} updatedVMO - view model object with updated information\n\n * @param {ViewModelObjectArray} origVMOs - all the view model objects that need to be updated\n\n */\n\nexport let updateSourceObjectPropertiesByViewModelObject = function (updatedVMO, origVMOs, propsToUpdate) {\n  if (updatedVMO && updatedVMO.props && origVMOs) {\n    var updatedUid = updatedVMO.uid;\n    var updatedProps = {};\n\n    _.forEach(origVMOs, function (vmo) {\n      if (vmo && vmo.props) {\n        var vmoChanged = false;\n\n        if (vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target && vmo.props.awp0Target.dbValue === updatedUid) {\n          _.forEach(vmo.props, function (vmProp, key) {\n            // If this is not one of the props we want to update, continue\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(key) === -1) {\n              return true;\n            }\n\n            var updatedProp = updatedVMO.props[key];\n\n            if (updatedProp) {\n              uwPropertySvc.copyModelData(vmProp, updatedProp);\n\n              if (updatedProps[vmo.uid] === undefined) {\n                updatedProps[vmo.uid] = [];\n              }\n\n              updatedProps[vmo.uid].push(vmProp.propertyName);\n              vmoChanged = true;\n            }\n          });\n        }\n\n        _.forEach(vmo.props, function (vmProp) {\n          var sourceObjectUid = uwPropertySvc.getSourceObjectUid(vmProp); // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n          // original object containing the property\n\n          if (sourceObjectUid === updatedUid || vmProp.parentUid === updatedUid) {\n            var propertyNameLookup = vmProp.propertyName;\n\n            if (sourceObjectUid === updatedUid && sourceObjectUid !== vmProp.parentUid) {\n              propertyNameLookup = uwPropertySvc.getBasePropertyName(propertyNameLookup);\n            } // If this is not one of the props we want to update, continue\n\n\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(propertyNameLookup) === -1) {\n              return true;\n            }\n\n            var updatedProp = updatedVMO.props[propertyNameLookup];\n\n            if (updatedProp) {\n              var updatedPropSourceUid = uwPropertySvc.getSourceObjectUid(updatedProp);\n\n              if (sourceObjectUid === updatedPropSourceUid) {\n                uwPropertySvc.copyModelData(vmProp, updatedProp);\n\n                if (updatedProps[vmo.uid] === undefined) {\n                  updatedProps[vmo.uid] = [];\n                }\n\n                updatedProps[vmo.uid].push(vmProp.propertyName);\n                vmoChanged = true;\n              }\n            }\n          }\n        });\n\n        _.forEach(updatedVMO.props, function (updatedVmProp) {\n          var updatedVmPropSourceUid = uwPropertySvc.getSourceObjectUid(updatedVmProp); // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n          // original object containing the property\n\n          if (vmo.uid === updatedVmPropSourceUid || updatedVmProp.parentUid === vmo.uid) {\n            var updatedPropNameLookup = updatedVmProp.propertyName;\n\n            if (updatedVmPropSourceUid === vmo.uid && updatedVmPropSourceUid !== updatedVmProp.parentUid) {\n              updatedPropNameLookup = uwPropertySvc.getBasePropertyName(updatedPropNameLookup);\n            } // If this is not one of the props we want to update, continue\n\n\n            if (propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf(updatedPropNameLookup) === -1) {\n              return true;\n            }\n\n            if (!vmo.props[updatedPropNameLookup]) {\n              vmo.props[updatedPropNameLookup] = updatedVmProp;\n\n              if (updatedProps[vmo.uid] === undefined) {\n                updatedProps[vmo.uid] = [];\n              }\n\n              updatedProps[vmo.uid].push(updatedPropNameLookup);\n              vmoChanged = true;\n            }\n          }\n        });\n\n        if (vmoChanged) {\n          updateCellProperties(vmo);\n          updateStatusIndicators(vmo);\n          updateColorDecorators(vmo);\n          updateIcons(vmo);\n        }\n      }\n    });\n\n    eventBus.publish('viewModelObject.propsUpdated', updatedProps);\n  }\n};\n/**\n\n * Update all existing VMO properties from the underlying CDM object's property value (with the same name).\n\n *\n\n * <pre>\n\n * </pre>\n\n *\n\n * @param {Object} vmo view model object\n\n */\n\nexport let updateVMOProperties = function (vmo) {\n  if (!vmo.uid) {\n    return;\n  }\n\n  var modelObj = cdm.getObject(vmo.uid);\n\n  if (!modelObj || !modelObj.props) {\n    return;\n  }\n\n  _.forEach(vmo.props, function (vmoProp, propName) {\n    if (modelObj.props.hasOwnProperty(propName)) {\n      var moProp = modelObj.props[propName];\n      vmoProp.dbValues = moProp.dbValues;\n      vmoProp.uiValues = moProp.uiValues;\n      vmoProp.uiValue = moProp.getDisplayValue();\n\n      if (moProp.uiValues) {\n        vmoProp.displayValues = moProp.uiValues;\n      } else {\n        vmoProp.displayValues = [];\n      }\n\n      vmoProp.isEditable = moProp.propertyDescriptor.constantsMap.editable === '1' && moProp.modifiable;\n      vmoProp.isLocalizable = moProp.propertyDescriptor.constantsMap.localizable === '1';\n    }\n  });\n\n  updateCellProperties(vmo);\n  updateStatusIndicators(vmo);\n  updateColorDecorators(vmo);\n  updateIcons(vmo);\n};\n/**\n\n * Test if the given object 'is-a' TreeLoadInput created by this service.\n\n *\n\n * @param {Object} objectToTest - Object to check prototype history of.\n\n * @return {Boolean} TRUE if the given object is a TreeLoadInput.\n\n */\n\nexport let isViewModelObject = function (objectToTest) {\n  return objectToTest instanceof ViewModelObject;\n};\n/**\n * This recursive function returns the given vmos and their cached children if present\n * @param {* } vmObjects the view model objects.\n * @param {* } vmObjectsAcc the accumulation of the view model objects and their cached children.\n * @returns {* } vmObjects and any cached children.\n */\n\nexport const getLoadedAndCachedViewModelObjects = function (vmObjects, vmObjectsAcc) {\n  if (!vmObjectsAcc) {\n    vmObjectsAcc = [];\n  }\n\n  _.forEach(vmObjects, vmo => {\n    vmObjectsAcc.push(vmo);\n\n    if (vmo.__expandState) {\n      getLoadedAndCachedViewModelObjects(vmo.__expandState.expandedNodes, vmObjectsAcc);\n    }\n  });\n\n  return vmObjectsAcc;\n};\n/**\n * This function gets the vmos that are not in edit\n * @param {* } vmObjects the view model objects.\n * @returns {* } vmObjects that are not in edit.\n */\n\nexport const getVmosNotInEdit = function (vmObjects) {\n  return vmObjects.filter(vmObject => {\n    return !vmObject.isEditing;\n  });\n};\nexports = {\n  constructViewModelProperty,\n  constructViewModelObject,\n  getClientPropertyType,\n  setEditableStates,\n  clearEditableStates,\n  constructViewModelObjectFromModelObject,\n  createViewModelObject,\n  updateViewModelObjectCollection,\n  updateSourceObjectPropertiesByViewModelObject,\n  updateVMOProperties,\n  isViewModelObject,\n  getLoadedAndCachedViewModelObjects,\n  getVmosNotInEdit,\n  setEditState\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewModelObject\");","map":{"version":3,"names":["uwPropertySvc","cdm","lovService","visualIndicatorSvc","colorDecoratorSvc","cmm","awIconSvc","dateTimeSvc","_","logger","declUtils","eventBus","exports","getSourceObjectProp","prop","propName","refModelObject","srcObj","isEmpty","intermediateObjectUids","getObject","length","srcObjProp","props","test","actualPropName","getBasePropertyName","getPropValue","uw_displayValue","propType","uw_dbValue","isDateAdjusted","isString","displayValue","String","Date","value","getTime","formatDate","formatSessionDateTime","Number","getPropValueOnArray","i","isCharArray","getPropValueNotArray","isNil","tempDisplayValue","isFinite","isArray","getPropertyValues","isUndefined","isNull","formatProperties","modelObject","serverVMO","operationName","propValue","Object","assign","hasServerVMO","hasOwnProperty","initialValue","inputDbValues","displayValues","propDesc","propertyDescriptor","isModifiable","hasLOV","lovCategory","getClientPropertyType","type","isRequired","displayName","propertyDisplayName","referenceTypeName","ReferencedTypeName","hasRevRuleAttached","propFromServerVMO","isTimeEnabled","constantsMap","anArray","valueType","maxLength","maxArraySize","isEditable","editable","required","isAutoAssignable","autoassignable","isRichText","Fnd0RichText","isEnabled","timeEnabled","is_modifiable","dbValues","modifiable","isDCP","uiValues","tempDisplayValues","indx","push","formatSessionDate","alignPropertiesOnVMO","viewModelObject","owningObjUid","forOwn","propertyDescriptors","lovApi","hasLov","initNativeCellLovApi","awp0Target","target","values","propertyName","updateCellProperties","awp0CellProperties","dbValue","cellProperties","ii","keyValue","split","replace","cellHeader1","cellHeader2","key","updateIcons","thumbnailURL","getThumbnailFileUrl","typeIconURL","getTypeIconFileUrl","hasThumbnail","getModelObject","uid","updateStatusIndicators","getObjCb","adaptedVmo","targetUID","targetMO","constructViewModelObjectFromModelObject","indicators","getVisualIndicators","updateColorDecorators","vmoIn","skipEvent","setDecoratorStyles","skipIconUpdate","basicVMO","alternateID","modelType","getType","rowStatus","vmoProps","moProps","forEach","moPropValueClone","clone","merge","vmo","constructViewModelObject","updateVMO","populateViewModelProperty","viewProp","autofocus","setAutoFocus","labelPosition","setPropertyLabelDisplay","editLayoutSide","renderingStyle","patterns","condition","preferredPattern","patternAutoAssignFlags","validationCriteria","oldValue","oldValues","vertical","propApi","propertyRadioTrueText","propertyRadioFalseText","constructViewModelProperty","owningObj","isAutoAssign","isLocalizable","error","renderingHint","numberOfCharacters","numberOfLines","isSelectOnly","requiredText","createViewModelProperty","inputType","setPlaceHolderText","setIsSelectOnly","setHasLov","setIsRequired","setIsArray","setIsAutoAssign","setIsAutoAssignable","setIsEditable","setIsRichText","setIsEnabled","setIsLocalizable","setIsNull","setLength","setRenderingHint","setError","setNumberOfCharacters","setNumberOfLines","setArrayLength","setIsPropertyModifiable","setReferenceType","setTimeEnabled","initialize","parentUid","uiValue","getUiValue","sourceObjectLastSavedDate","srcObjLsd","srcObjectTypeName","iconName","iconSource","action","tooltip","ViewModelObject","self","visible","prototype","toString","object_string","getDirtyProps","propertyNameValues","isModified","propNameValue","name","getValueStrings","getSaveableDirtyProps","propObject","propVals","getAutoAssignableProps","setEditState","editState","isEditing","clearEditableStates","skipDigest","prop2","resetUpdates","clearEditiableStates","setEditableStates","override","getId","retrievePropertyWithBasePropertyName","basePropertyName","foundProperty","currentProperty","currentBasePropertyName","sourceObjectUid","getSourceObjectUid","propertyType","isEditableNil","modelProp","setEditable","createViewModelObject","input","updateViewModelObjectCollection","loadedVMOs","updatedCDMObjects","vmoMap","cdmHandlerCheck","vmProp","_updateViewModelCollection","updatedObj","updatedVmo","updateSourceObjectPropertiesByViewModelObject","updatedVMO","origVMOs","propsToUpdate","updatedUid","updatedProps","vmoChanged","indexOf","updatedProp","copyModelData","undefined","propertyNameLookup","updatedPropSourceUid","updatedVmProp","updatedVmPropSourceUid","updatedPropNameLookup","publish","updateVMOProperties","modelObj","vmoProp","moProp","getDisplayValue","localizable","isViewModelObject","objectToTest","getLoadedAndCachedViewModelObjects","vmObjects","vmObjectsAcc","__expandState","expandedNodes","getVmosNotInEdit","filter","vmObject"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/viewModelObjectService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-disable complexity */\n\n/**\n * This module provides access to service APIs that help to convert the model object to view model object\n * <P>\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/viewModelObjectService\n */\nimport uwPropertySvc from 'js/uwPropertyService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport lovService from 'js/lovService';\nimport visualIndicatorSvc from 'js/visualIndicatorService';\nimport colorDecoratorSvc from 'js/colorDecoratorService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport awIconSvc from 'js/awIconService';\nimport dateTimeSvc from 'js/dateTimeService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport eventBus from 'js/eventBus';\n\nvar exports = {};\n\n/**\n * This is added to handle relational property specified in objectset. prop specified as \"relName.relProp\", need to\n * extract the actual prop name to extract value from the refModel Object\n *\n * @param {Object} prop - The IViewModelPropObject of an IViewModelObject (from serverVMO or modelObject property)\n * @param {String} propName - The property name\n * @param {IModelObject} refModelObject - The actual IModelObject for which we are creating ViewModelObject\n *\n * @return {ModelObjectProperty|null} The Result.\n */\nvar getSourceObjectProp = function( prop, propName, refModelObject ) {\n    var srcObj = null;\n\n    if( !_.isEmpty( prop.intermediateObjectUids ) ) {\n        srcObj = cdm.getObject( prop.intermediateObjectUids[ prop.intermediateObjectUids.length - 1 ] );\n    } else {\n        srcObj = refModelObject;\n    }\n\n    var srcObjProp = srcObj ? srcObj.props[ propName ] : null;\n\n    if( !srcObjProp && /\\./.test( propName ) ) {\n        var actualPropName = uwPropertySvc.getBasePropertyName( propName );\n\n        srcObjProp = srcObj ? srcObj.props[ actualPropName ] : null;\n    }\n\n    return srcObjProp;\n};\n\nvar getPropValue = function( uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted ) {\n    uw_displayValue[ 0 ] = _.isString( prop.displayValue[ 0 ] ) ? prop.displayValue[ 0 ] : new String( prop.displayValue[ 0 ] );\n    if( propType === 'DATE' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value[ 0 ] ).getTime();\n        uw_displayValue[ 0 ] = isDateAdjusted ? dateTimeSvc.formatDate( new Date( prop.displayValue[ 0 ] ).getTime() ) : prop.displayValue[ 0 ];\n    } else if( propType === 'DATETIME' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value[ 0 ] ).getTime();\n        uw_displayValue[ 0 ] = dateTimeSvc.formatSessionDateTime( new Date( prop.displayValue[ 0 ] ).getTime() );\n    } else if( ( propType === 'DOUBLE' || propType === 'INTEGER' ) && prop.value[ 0 ] ) {\n        uw_dbValue = Number( prop.value[ 0 ] );\n    } else if( propType === 'CHAR' && prop.displayValue[ 0 ] ) {\n        uw_dbValue = prop.displayValue[ 0 ];\n    } else {\n        uw_dbValue = prop.value[ 0 ];\n    }\n    return uw_dbValue;\n};\n\nvar getPropValueOnArray = function( uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted ) {\n    uw_dbValue = [];\n    for( var i = 0; i < prop.value.length; i++ ) {\n        var isCharArray = false;\n        /**\n         * For character data types, TC server returns character ASCII values as the property internal\n         * value. Since AW doesn't differentiate between character and string types, the property object\n         * needs to created with display values as internal values. So passing the UI values as internal\n         * value.\n         */\n        if( propType === 'STRINGARRAY' && prop.isCharArray ) {\n            isCharArray = true;\n        }\n        uw_displayValue[ i ] = prop.displayValue[ i ];\n        if( propType === 'DATEARRAY' ) {\n            uw_dbValue[ i ] = new Date( prop.value[ i ] ).getTime();\n            uw_displayValue[ i ] = isDateAdjusted ? dateTimeSvc.formatDate( new Date( prop.displayValue[ i ] ).getTime() ) : prop.displayValue[ i ];\n        } else if( propType === 'DATETIMEARRAY' ) {\n            uw_dbValue[ i ] = new Date( prop.value[ i ] ).getTime();\n            uw_displayValue[ i ] = dateTimeSvc.formatSessionDateTime( new Date( prop.displayValue[ i ] ).getTime() );\n        } else if( ( propType === 'DOUBLEARRAY' || propType === 'INTEGERARRAY' ) && prop.value[ i ] ) {\n            uw_dbValue[ i ] = Number( prop.value[ i ] );\n        } else if( isCharArray && prop.displayValue[ i ] ) {\n            uw_dbValue[ i ] = prop.displayValue[ i ];\n        } else {\n            uw_dbValue[ i ] = prop.value[ i ];\n        }\n    }\n    return uw_dbValue;\n};\n\nvar getPropValueNotArray = function( prop, uw_displayValue, propType, uw_dbValue ) {\n    if( _.isNil( prop.displayValue[ 0 ] ) ) {\n        uw_displayValue[ 0 ] = '';\n    } else {\n        var tempDisplayValue = new String( prop.displayValue[ 0 ] );\n        uw_displayValue[ 0 ] = _.isString( prop.displayValue[ 0 ] ) ? prop.displayValue[ 0 ] : tempDisplayValue;\n    }\n    if( propType === 'DATE' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value ).getTime();\n        uw_displayValue[ 0 ] = dateTimeSvc.formatDate( new Date( prop.displayValue[ 0 ] ).getTime() );\n    } else if( propType === 'DATETIME' ) { // eslint-disable-line no-lonely-if\n        uw_dbValue = new Date( prop.value[ 0 ] ).getTime();\n        uw_displayValue[ 0 ] = dateTimeSvc.formatSessionDateTime( new Date( prop.displayValue[ 0 ] ).getTime() );\n    } else if( ( propType === 'DOUBLE' || propType === 'INTEGER' ) && prop.value && isFinite( prop.value ) && prop.value !== null && prop.value !== '' && !_.isArray( prop.value ) ) {\n        uw_dbValue = Number( prop.value );\n    } else if( propType === 'CHAR' && prop.value ) {\n        uw_dbValue = prop.displayValue[ 0 ];\n    } else {\n        uw_dbValue = prop.value;\n    }\n    return uw_dbValue;\n};\n\n/**\n *\n * @param {String} propType - The property type\n * @param {*} prop - The property value as defined in definition\n * @param {boolean} isDateAdjusted - isDateAdjusted\n * @returns {Object} - Object containing value and display value\n */\nvar getPropertyValues = function( propType, prop, isDateAdjusted ) {\n    var uw_dbValue = null;\n    var uw_displayValue = null;\n\n    if( !_.isUndefined( prop.value ) && !_.isNull( prop.value ) ) {\n        uw_displayValue = [];\n        if( prop.isArray ) {\n            uw_dbValue = getPropValueOnArray( uw_dbValue, prop, propType, uw_displayValue, isDateAdjusted );\n        } else if( _.isArray( prop.value ) && prop.value.length > 0 ) {\n            uw_dbValue = getPropValue( uw_displayValue, prop, propType, uw_dbValue, isDateAdjusted );\n        } else {\n            uw_dbValue = getPropValueNotArray( prop, uw_displayValue, propType, uw_dbValue );\n        }\n    } else if( !prop.value && propType === 'BOOLEAN' ) {\n        uw_displayValue = [];\n        if( _.isNil( prop.displayValue[ 0 ] ) ) {\n            uw_displayValue[ 0 ] = '';\n        } else {\n            var tempDisplayValue = new String( prop.displayValue[ 0 ] );\n            uw_displayValue[ 0 ] = _.isString( prop.displayValue[ 0 ] ) ? prop.displayValue[ 0 ] : tempDisplayValue;\n        }\n        uw_dbValue = prop.value;\n    } else {\n        uw_displayValue = prop.displayValue;\n    }\n\n    return {\n        value: uw_dbValue,\n        displayValue: uw_displayValue\n    };\n};\n\n/**\n * format serverVMO/modelObject property as par consistent API schema\n *\n * @constructor\n *\n * @param {propObject} prop - The IModelObject to create a ViewModelObject for.\n * @param {string} propName - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {serverVMO} serverVMO - The IModelObject to create a ViewModelObject for.\n * @param {string} operationName - operationName\n */\nvar formatProperties = function( prop, propName, modelObject, serverVMO, operationName ) {\n    var propValue = prop instanceof Object ? Object.assign( {}, prop ) : new Object();\n    var hasServerVMO = serverVMO && serverVMO.props && serverVMO.props.hasOwnProperty( propName );\n    var initialValue = '';\n    var inputDbValues = null;\n    var displayValues = null;\n    var propDesc = prop.propertyDescriptor;\n    propValue.isModifiable = false;\n    if( !declUtils.isNil( prop.hasLOV ) ) {\n        propValue.hasLOV = prop.hasLOV;\n    } else {\n        propValue.hasLOV = propDesc && propDesc.lovCategory > 0;\n    }\n    if( hasServerVMO ) {\n        propValue.propType = exports.getClientPropertyType( prop.type, prop.isArray === true );\n        propValue.isRequired = prop.isRequired === true;\n        propValue.displayName = prop.propertyDisplayName ? prop.propertyDisplayName : null;\n        propValue.referenceTypeName = prop.ReferencedTypeName ? prop.ReferencedTypeName : '';\n        propValue.isModifiable = prop.isModifiable === true;\n        propValue.isCharArray = prop.type === 1;\n        initialValue = prop.initialValue ? prop.initialValue : null;\n        if( prop.hasRevRuleAttached ) {\n            propValue.hasRevRuleAttached = prop.hasRevRuleAttached === true;\n        }\n        if( propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY' ) {\n            let propFromServerVMO = serverVMO.props[ propName ];\n            //for date type property, set default value false to isTimeEnabled\n            propValue.isTimeEnabled = false;\n            if( propFromServerVMO ) {\n                propValue.isTimeEnabled = _.isUndefined( propFromServerVMO.isTimeEnabled ) ? false : propFromServerVMO.isTimeEnabled;\n            }\n        }\n    } else {\n        var constantsMap;\n        if( propDesc ) {\n            propValue.isArray = propDesc.anArray;\n            propValue.propType = exports.getClientPropertyType( propDesc.valueType, propValue.isArray );\n            propValue.isCharArray = propDesc.valueType === 1;\n            propValue.displayName = propDesc.displayName;\n            propValue.maxLength = propDesc.maxLength;\n            propValue.maxArraySize = propDesc.maxArraySize ? propDesc.maxArraySize : -1;\n            constantsMap = propDesc.constantsMap;\n        }\n        if( constantsMap ) {\n            initialValue = constantsMap.initialValue;\n            propValue.initialValue = constantsMap.initialValue;\n            propValue.isEditable = constantsMap.editable === '1';\n            propValue.isRequired = constantsMap.required === '1';\n            propValue.isAutoAssignable = constantsMap.autoassignable === '1';\n            propValue.isRichText = constantsMap.Fnd0RichText === '1';\n            propValue.isEnabled = constantsMap.editable ? constantsMap.editable === '1' : true;\n            propValue.referenceTypeName = constantsMap.ReferencedTypeName || '';\n            if( propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY' ) {\n                //from SOA getTypeDescriptions2, timeEnabled is undefined when Fnd0EnableTimeForDateProperty is default false.\n                propValue.isTimeEnabled = _.isUndefined( constantsMap.timeEnabled ) ? false : constantsMap.timeEnabled === '1';\n            }\n            // If isModifiable is false on the modelObject, use that first over propertyDescriptor's constantsMap default value\n            if( modelObject && modelObject.props &&\n                modelObject.props.is_modifiable &&\n                modelObject.props.is_modifiable.dbValues &&\n                modelObject.props.is_modifiable.dbValues[ 0 ] === '0' ) {\n                propValue.isModifiable = false;\n            } else {\n                propValue.isModifiable = constantsMap.modifiable === '1';\n            }\n        }\n    }\n    if( _.isNil( propValue.isModifiable ) ) {\n        propValue.isModifiable = false;\n    }\n    if( operationName && _.isString( operationName ) ) {\n        if( /^(EDIT|REVISE|SAVEAS|CREATE)$/i.test( operationName ) ) {\n            if( hasServerVMO ) {\n                propValue.isEditable = prop.isModifiable === true;\n            } else {\n                propValue.isEditable = prop.modifiable === true;\n            }\n        }\n        // Set isEnabled flag to 'true' for all properties for SaveAs ,Revise and Create operations.\n        // <P>\n        // Note: Create panel would require the below change when its converted to declarative.\n        if( /^(REVISE|SAVEAS|CREATE)$/i.test( operationName ) ) {\n            propValue.isEnabled = true;\n        }\n    }\n    if( propValue.isDCP ) {\n        inputDbValues = prop && prop.dbValues || [];\n        displayValues = prop && prop.uiValues || [];\n        if( propValue.propType === 'DATE' || propValue.propType === 'DATEARRAY' ) {\n            //For DCP property, replace displayValues with the date formatted dbValues value\n            var tempDisplayValues = [];\n            for( var indx = 0; indx < inputDbValues.length; indx++ ) {\n                if( propValue.isTimeEnabled === false ) {\n                    tempDisplayValues.push( dateTimeSvc.formatSessionDate( inputDbValues[ indx ] ) );\n                } else {\n                    tempDisplayValues.push( dateTimeSvc.formatSessionDateTime( inputDbValues[ indx ] ) );\n                }\n            }\n            if( tempDisplayValues.length > 0 ) {\n                displayValues = tempDisplayValues;\n            }\n        }\n    } else {\n        var srcObjProp = getSourceObjectProp( prop, propName, modelObject );\n        inputDbValues = srcObjProp && srcObjProp.dbValues || [];\n        displayValues = srcObjProp && srcObjProp.uiValues || [];\n    }\n    propValue.dbValues = inputDbValues;\n    if( inputDbValues && inputDbValues.length > 0 ) {\n        propValue.value = inputDbValues;\n    } else if( initialValue !== '' ) {\n        propValue.value = initialValue;\n    } else {\n        propValue.value = null;\n    }\n    propValue.displayValue = displayValues;\n    return propValue;\n};\n\n/**\n * Processing and assigning modelObject and serverVMO property on ViewModelObject\n * It is post processing.\n *\n * @constructor\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {IModelObject} viewModelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} owningObjUid - The intended purpose for the new ViewModelOject (e.g. 'edit').\n */\nvar alignPropertiesOnVMO = function( modelObject, viewModelObject, owningObjUid ) {\n    _.forOwn( modelObject.props, function( propValue, propName ) {\n        var propDesc = propValue.propertyDescriptor;\n        if( propDesc ) {\n            viewModelObject.propertyDescriptors[ propName ] = propDesc;\n        }\n        viewModelObject.props[ propName ].propertyDescriptor = propValue.propertyDescriptor;\n        viewModelObject.props[ propName ].intermediateObjectUids = propValue.intermediateObjectUids;\n        viewModelObject.props[ propName ].isDCP = propValue.isDCP || false;\n        if( !viewModelObject.props[ propName ].lovApi && viewModelObject.props[ propName ].hasLov ) {\n            lovService.initNativeCellLovApi( viewModelObject.props[ propName ], null, viewModelObject.operationName, viewModelObject, owningObjUid );\n        }\n    } );\n    if( modelObject.type === 'Awp0XRTObjectSetRow' && modelObject.props.awp0Target ) {\n        const target = cdm.getObject( modelObject.props.awp0Target.dbValues[ 0 ] );\n        if( target ) {\n            for( const prop of Object.values( modelObject.props ) ) {\n                if( !prop.propertyDescriptor && target.props[ prop.propertyName ] ) {\n                    prop.propertyDescriptor = target.props[ prop.propertyName ].propertyDescriptor;\n                }\n            }\n            for( const prop of Object.values( viewModelObject.props ) ) {\n                if( !prop.propertyDescriptor && target.props[ prop.propertyName ] ) {\n                    prop.propertyDescriptor = target.props[ prop.propertyName ].propertyDescriptor;\n                }\n            }\n        }\n    }\n    return viewModelObject;\n};\n\n/**\n * Update this model object's awp cell properties which are stored as key/value inside an array property\n * awp0CellProperties.\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\nvar updateCellProperties = function( viewModelObject ) {\n    /**\n     * Pull any cell properties out of their encoded string and have them as 1st class properties of the\n     * ViewModelObject.\n     */\n    if( viewModelObject.props && viewModelObject.props.awp0CellProperties ) {\n        // We should look up for dbValue always,'dbValues' is redundant and need to cleanup any dependency on that\n        // dbValue could be array or string based on the mode object\n        var dbValue = viewModelObject.props.awp0CellProperties.dbValue;\n        viewModelObject.cellProperties = {};\n        for( var ii = 0; ii < dbValue.length; ii++ ) {\n            var keyValue = dbValue[ ii ].split( '\\\\:' );\n\n            var value = keyValue[ 1 ] || '';\n\n            value = value.replace( '{__UTC_DATE_TIME}', '' );\n\n            if( ii === 0 ) {\n                viewModelObject.cellHeader1 = value;\n            } else if( ii === 1 ) {\n                viewModelObject.cellHeader2 = value;\n            } else if( value ) {\n                var key = keyValue[ 0 ];\n\n                viewModelObject.cellProperties[ key ] = {\n                    key: key,\n                    value: value\n                };\n            }\n        }\n    }\n};\n\n/**\n * Update this model object's Thumbnail URL based on the FMS ticket stored in the awp0ThumbnailImageTicket property\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\nvar updateIcons = function( viewModelObject ) {\n    if( viewModelObject && viewModelObject.props ) {\n        viewModelObject.thumbnailURL = awIconSvc.getThumbnailFileUrl( viewModelObject );\n        viewModelObject.typeIconURL = awIconSvc.getTypeIconFileUrl( viewModelObject );\n\n        if( viewModelObject.thumbnailURL ) {\n            viewModelObject.hasThumbnail = true;\n        } else {\n            viewModelObject.hasThumbnail = false;\n        }\n    }\n};\n\n/**\n * Get Model object from uid\n * @param {String} uid - The UID of the object whose Model object is required\n * @returns {modelObj} modelObject\n */\nvar getModelObject = function( uid ) {\n    return cdm.getObject( uid );\n};\n\n/**\n * Update this model object's status indicators\n *\n * @param {ViewModelObject} viewModelObject - The object to update properties on.\n */\nvar updateStatusIndicators = function( viewModelObject ) {\n    if( viewModelObject.props ) {\n        // Since we dont want to add another dependency in visualIndicatorSvc on cdm, we are passing callback here\n        // This will be called from visualIndicatorSvc when there is a need to get model object from UID.\n        var getObjCb = getModelObject;\n        var adaptedVmo = viewModelObject;\n\n        if( viewModelObject.type === 'Awp0XRTObjectSetRow' ) {\n            // Get underlying target object's UID if 'awp0Target' property exists\n            if( viewModelObject.props && viewModelObject.props.awp0Target ) {\n                var targetUID = viewModelObject.props.awp0Target.dbValue;\n                var targetMO = cdm.getObject( targetUID );\n                if( targetMO ) {\n                    adaptedVmo = exports.constructViewModelObjectFromModelObject( targetMO, 'edit', null, null, true );\n                }\n            }\n        }\n\n        var indicators = visualIndicatorSvc.getVisualIndicators( adaptedVmo, getObjCb );\n\n        viewModelObject.indicators = indicators;\n    }\n};\n\n/**\n * Update this model object's status indicators\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - The object(s) to update properties on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\nvar updateColorDecorators = function( vmoIn, skipEvent ) {\n    colorDecoratorSvc.setDecoratorStyles( vmoIn, skipEvent );\n};\n\n/**\n * Method to construct VMO from serverVMO and modelObject\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {String} operationName - The intended purpose for the new ViewModelOject (e.g. 'edit').\n * @param {String} owningObjUid - The UID of owning object.\n * @param {Object} serverVMO - (Optional) A property map from the server with values to include on the returned VMO.\n * @param {boolean}  skipIconUpdate - to udpate values\n */\nexport let constructViewModelObjectFromModelObject = function( modelObject, operationName, owningObjUid, serverVMO, skipIconUpdate ) {\n    var basicVMO = {};\n    basicVMO.props = {};\n    basicVMO.propertyDescriptors = {};\n    if( modelObject ) {\n        if( serverVMO ) {\n            basicVMO.uid = serverVMO.uid || modelObject.uid;\n            if( serverVMO.alternateID || modelObject.alternateID ) {\n                basicVMO.alternateID = serverVMO.alternateID || modelObject.alternateID;\n            }\n            basicVMO.type = serverVMO.type || modelObject.type;\n            basicVMO.modelType = serverVMO.modelType || modelObject.modelType;\n            if( !basicVMO.modelType ) {\n                basicVMO.modelType = cmm.getType( basicVMO.type );\n            }\n            if( serverVMO.rowStatus ) {\n                basicVMO.rowStatus = serverVMO.rowStatus;\n            }\n            var vmoProps = serverVMO.props;\n            var moProps = modelObject.props;\n            _.forEach( moProps, function( propValue, propName ) {\n                if( propValue ) {\n                    if( vmoProps[ propName ] ) {\n                        var moPropValueClone = _.clone( propValue );\n\n                        _.merge( moPropValueClone, vmoProps[ propName ] );\n\n                        basicVMO.props[ propName ] = formatProperties( moPropValueClone, propName, modelObject, serverVMO, operationName );\n                    } else {\n                        basicVMO.props[ propName ] = formatProperties( propValue, propName, modelObject, serverVMO, operationName );\n                    }\n                }\n            } );\n            /**\n             * Check for the case of the serverVMO having a property NOT currently in the modelObject.\n             * <P>\n             * Note: Not sure when this could happen, but need to handle it.\n             */\n            _.forEach( vmoProps, function( propValue, propName ) {\n                if( propValue && !moProps[ propName ] ) {\n                    basicVMO.props[ propName ] = formatProperties( propValue, propName, modelObject, serverVMO, operationName );\n                }\n            } );\n        } else {\n            basicVMO.uid = modelObject.uid;\n            if( modelObject.alternateID ) {\n                basicVMO.alternateID = modelObject.alternateID;\n            }\n            basicVMO.type = modelObject.type;\n            basicVMO.modelType = modelObject.modelType;\n            if( !basicVMO.modelType ) {\n                basicVMO.modelType = cmm.getType( basicVMO.type );\n            }\n            basicVMO.props = {};\n            _.forEach( modelObject.props, function( propValue, propName ) {\n                if( propValue ) {\n                    basicVMO.props[ propName ] = formatProperties( propValue, propName, modelObject, serverVMO, operationName );\n                }\n            } );\n        }\n    }\n    var vmo = exports.constructViewModelObject( basicVMO, false );\n    vmo.operationName = operationName;\n    if( basicVMO.rowStatus ) {\n        vmo.rowStatus = basicVMO.rowStatus;\n    }\n    var updateVMO = alignPropertiesOnVMO( basicVMO, vmo, owningObjUid );\n    updateCellProperties( updateVMO );\n    if( !skipIconUpdate ) {\n        updateIcons( updateVMO );\n        updateStatusIndicators( updateVMO );\n        updateColorDecorators( updateVMO, true );\n    }\n    return updateVMO;\n};\n\n/**\n * Update this model object's status indicators\n * @param {prop} prop - The object(s) to update properties on.\n * @param {ViewModelProperty} viewProp - if true will skip event.\n * @param {type} propType - if true will skip event.\n */\nvar populateViewModelProperty = function( prop, viewProp, propType ) {\n    if( !declUtils.isNil( prop.autofocus ) ) {\n        uwPropertySvc.setAutoFocus( viewProp, prop.autofocus );\n    }\n    if( prop.labelPosition ) {\n        uwPropertySvc.setPropertyLabelDisplay( viewProp, prop.labelPosition, true );\n        if( prop.labelPosition === 'PROPERTY_LABEL_AT_SIDE' ) {\n            viewProp.editLayoutSide = true;\n        }\n    }\n    if( prop.renderingStyle ) {\n        uwPropertySvc.setPropertyLabelDisplay( viewProp, prop.renderingStyle, true );\n    }\n    // Add pattern information\n    if( prop.patterns ) {\n        viewProp.patterns = prop.patterns;\n        if( prop.condition ) {\n            viewProp.condition = prop.condition;\n        }\n    }\n    // Add preferredPattern information\n    viewProp.preferredPattern = prop.preferredPattern;\n    // Add patternAutoAssignFlags information\n    if( prop.patternAutoAssignFlags ) {\n        viewProp.patternAutoAssignFlags = prop.patternAutoAssignFlags;\n    }\n    if( prop.validationCriteria ) {\n        viewProp.validationCriteria = prop.validationCriteria;\n    }\n    if( !_.isUndefined( prop.oldValue ) ) {\n        viewProp.oldValue = prop.oldValue;\n    } else if( prop.oldValues ) {\n        viewProp.oldValues = prop.oldValues;\n    }\n    if( prop.vertical ) {\n        viewProp.vertical = prop.vertical;\n    }\n    if( !viewProp.propApi ) {\n        viewProp.propApi = {};\n    }\n    if( propType === 'BOOLEAN' && prop.propertyRadioTrueText &&\n        prop.propertyRadioFalseText ) {\n        viewProp.propertyRadioTrueText = prop.propertyRadioTrueText;\n        viewProp.propertyRadioFalseText = prop.propertyRadioFalseText;\n    }\n};\n\n/**\n * @param {Object} prop -\n * @param {String} propName -\n * @param {Object} owningObj -\n * @param {boolean} isDateAdjusted -\n *\n * @returns {ViewModelProperty} New object initialized with the given data.\n */\nexport let constructViewModelProperty = function( prop, propName, // eslint-disable-line\n    owningObj, isDateAdjusted ) {\n    var isArray = prop.isArray;\n    var propType = prop.propType;\n    var displayName = '';\n    if( prop.displayName ) {\n        displayName = prop.displayName;\n    } else if( prop.propertyDisplayName ) {\n        displayName = prop.propertyDisplayName;\n    }\n    var isEditable = _.isUndefined( prop.isEditable ) ? false : prop.isEditable;\n    var isModifiable = _.isUndefined( prop.isModifiable ) ? true : prop.isModifiable;\n    var isRequired = prop.isRequired === true;\n    var isAutoAssign = prop.isAutoAssign === true;\n    var isAutoAssignable = prop.isAutoAssignable === true;\n    var isRichText = prop.isRichText === true;\n    var isEnabled = _.isUndefined( prop.isEnabled ) ? true : prop.isEnabled !== false; // default value\n    var referenceTypeName = prop.referenceTypeName ? prop.referenceTypeName : '';\n    var maxLength = _.isUndefined( prop.maxLength ) ? 0 : prop.maxLength;\n    var maxArraySize = prop.maxArraySize ? prop.maxArraySize : -1;\n    var hasLov = prop.hasLOV === true;\n    var isLocalizable = prop.isLocalizable === true;\n    var isNull = false;\n    var error = null;\n    var renderingHint = prop.renderingHint ? prop.renderingHint : '';\n    var numberOfCharacters = -1;\n    var numberOfLines = prop.numberOfLines ? prop.numberOfLines : -1;\n    var isSelectOnly = false;\n    var requiredText = prop.requiredText;\n    var isTimeEnabled = prop.isTimeEnabled !== false;\n\n    var values = getPropertyValues( propType, prop, isDateAdjusted );\n    if( propType === 'CHAR' || propType === 'STRINGARRAY' && prop.isCharArray ) {\n        maxLength = 1;\n    }\n    if( propType && propType === 'DATETIME' ) {\n        propType = 'DATE';\n    }\n    var viewProp = uwPropertySvc.createViewModelProperty( propName, displayName, propType, values.value,\n        values.displayValue );\n    if( propType === 'STRING' || propType === 'STRINGARRAY' ) {\n        viewProp.inputType = 'text';\n    }\n\n    if( requiredText ) {\n        uwPropertySvc.setPlaceHolderText( viewProp, requiredText ); // need to add in VMO\n    }\n\n    isSelectOnly = _.isUndefined( prop.isSelectOnly ) ? true : prop.isSelectOnly;\n    uwPropertySvc.setIsSelectOnly( viewProp, isSelectOnly, true );\n\n    if( prop.hasRevRuleAttached ) {\n        viewProp.hasRevRuleAttached = true;\n    }\n\n    populateViewModelProperty( prop, viewProp, propType );\n\n    uwPropertySvc.setHasLov( viewProp, hasLov );\n    uwPropertySvc.setIsRequired( viewProp, isRequired );\n    uwPropertySvc.setIsArray( viewProp, isArray );\n    uwPropertySvc.setIsAutoAssign( viewProp, isAutoAssign );\n    uwPropertySvc.setIsAutoAssignable( viewProp, isAutoAssignable );\n    uwPropertySvc.setIsEditable( viewProp, isEditable );\n    uwPropertySvc.setIsRichText( viewProp, isRichText );\n    uwPropertySvc.setIsEnabled( viewProp, isEnabled );\n    uwPropertySvc.setIsLocalizable( viewProp, isLocalizable );\n    uwPropertySvc.setIsNull( viewProp, isNull );\n    uwPropertySvc.setLength( viewProp, maxLength );\n    uwPropertySvc.setRenderingHint( viewProp, renderingHint );\n    uwPropertySvc.setError( viewProp, error );\n    uwPropertySvc.setNumberOfCharacters( viewProp, numberOfCharacters );\n    uwPropertySvc.setNumberOfLines( viewProp, numberOfLines );\n    uwPropertySvc.setArrayLength( viewProp, maxArraySize );\n    uwPropertySvc.setIsPropertyModifiable( viewProp, isModifiable );\n    uwPropertySvc.setReferenceType( viewProp, referenceTypeName );\n    uwPropertySvc.setTimeEnabled( viewProp, isTimeEnabled );\n    viewProp.initialize = false;\n    viewProp.parentUid = owningObj ? owningObj.uid : '';\n    viewProp.dbValues = prop.dbValues ? prop.dbValues : prop.value;\n    viewProp.uiValues = values.displayValue;\n    viewProp.uiValue = uwPropertySvc.getUiValue( viewProp.uiValues );\n    viewProp.sourceObjectLastSavedDate = prop.srcObjLsd;\n    viewProp.srcObjectTypeName = prop.srcObjectTypeName;\n    viewProp.iconName = prop.iconName;\n    viewProp.iconSource = prop.iconSource;\n    viewProp.action = prop.action;\n    viewProp.tooltip = prop.tooltip;\n    return viewProp;\n}; // constructViewModelProperty\n\n/**\n * Class used to help view specific state information.\n *\n * @constructor\n *\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n * @param {boolean} isDateAdjusted - isDateAdjusted\n */\nvar ViewModelObject = function( modelObject, isDateAdjusted ) { // eslint-disable-line complexity\n    var self = this;\n    self.props = {};\n    self.propertyDescriptors = {};\n    self.visible = true;\n    self.uid = modelObject.uid;\n    self.type = modelObject.type;\n    self.modelType = modelObject.modelType;\n\n    if( modelObject.alternateID ) {\n        self.alternateID = modelObject.alternateID;\n    }\n\n    _.forOwn( modelObject.props, function( propValue, propName ) {\n        if( propValue ) {\n            self.props[ propName ] = exports.constructViewModelProperty( propValue, propName, self, isDateAdjusted );\n        }\n    } );\n};\n\n/**\n * @return {String|Object} Displayable 'id' of this ViewModelObject (if possible, else the UID or '???' is\n *         returned).\n */\nViewModelObject.prototype.toString = function() {\n    if( this.cellHeader1 ) {\n        return this.cellHeader1;\n    } else if( this.props.object_string && this.props.object_string.uiValues[ 0 ] ) {\n        return this.props.object_string.uiValues[ 0 ];\n    } else if( this.uid ) {\n        return this.uid;\n    }\n\n    return '???';\n};\n\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified.\n *\n * @return {StringArray} Array of property names.\n */\nViewModelObject.prototype.getDirtyProps = function() {\n    var propertyNameValues = [];\n\n    for( var prop in this.props ) {\n        if( this.props.hasOwnProperty( prop ) ) {\n            if( uwPropertySvc.isModified( this.props[ prop ] ) ) {\n                var propNameValue = {};\n\n                propNameValue.name = prop;\n                propNameValue.values = uwPropertySvc.getValueStrings( this.props[ prop ] );\n                propertyNameValues.push( propNameValue );\n            }\n        }\n    }\n    return propertyNameValues;\n};\n\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\nViewModelObject.prototype.getSaveableDirtyProps = function() {\n    var propertyNameValues = this.getDirtyProps();\n\n    _.forEach( propertyNameValues, function( propObject ) {\n        var propVals = propObject.values;\n        for( var i = 0; i < propVals.length; i++ ) {\n            propVals[ i ] = String( propVals[ i ] );\n        }\n    } );\n\n    return propertyNameValues;\n};\n\n/**\n * Return array propertyNameValue objects (property name + real prop values) of the properties that have been\n * modified. The return objects can be passed to SOA without any further conversion.\n *\n * @return {StringArray} Array of property names.\n */\nViewModelObject.prototype.getAutoAssignableProps = function() {\n    var propertyNameValues = [];\n\n    for( var prop in this.props ) {\n        if( this.props.hasOwnProperty( prop ) && this.props[ prop ].isAutoAssignable ) {\n            var propNameValue = {};\n\n            propNameValue.name = prop;\n            propNameValue.values = uwPropertySvc.getValueStrings( this.props[ prop ] );\n            propertyNameValues.push( propNameValue );\n        }\n    }\n\n    _.forEach( propertyNameValues, function( propObject ) {\n        var propVals = propObject.values;\n        for( var i = 0; i < propVals.length; i++ ) {\n            propVals[ i ] = String( propVals[ i ] );\n        }\n    } );\n\n    return propertyNameValues;\n};\n\n/**\n * This function sets the vmo edit state\n * @param {Object} vmo the view model object.\n * @param {Boolean} editState the edit state.\n */\nexport const setEditState = function( vmo, editState ) {\n    vmo.isEditing = editState;\n};\n\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Object} vmo - the view model object\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\nexport const clearEditableStates = function( vmo, skipDigest ) {\n    setEditState( vmo, false );\n    _.forEach( vmo.props, function( prop2 ) {\n        uwPropertySvc.resetUpdates( prop2 );\n        uwPropertySvc.setIsEditable( prop2, false );\n    } );\n};\n\n/**\n * Resets the 'isEditable' on the view model (and 'modifiable' flags on the backing model object) for all view\n * properties.\n *\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called<BR> FALSE\n *            if it SHOULD be called when there is a value change.\n */\nViewModelObject.prototype.clearEditiableStates = function( skipDigest ) {\n    clearEditableStates( this, skipDigest );\n};\n\n/**\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n *\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n *            different than the desired state.\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n */\nViewModelObject.prototype.setEditableStates = function( editable, override, skipDigest ) {\n    exports.setEditableStates( this, editable, override, skipDigest );\n};\n\n/**\n * Retrieves the id of the object, currently set to uid.\n *\n * Could change in future if each vmo (with cardinality) has their own unique id instead of 'uid'.\n *\n * @returns {String} The ID.\n */\nViewModelObject.prototype.getId = function() {\n    return this.uid;\n};\n\n/**\n\n * Retrieve the ViewModelProperty object with the same basePropertyName and sourceObjectUid as the parameters.\n\n *\n\n * @param {String} basePropertyName - the base property name trying to be matched\n\n * @param {String} uid - unique id\n\n *\n\n * @returns {ViewModelProperty} The found property.\n\n */\n\nViewModelObject.prototype.retrievePropertyWithBasePropertyName = function( basePropertyName, uid ) {\n    var foundProperty = null;\n\n    _.forEach( this.props, function( currentProperty, key ) {\n        var currentBasePropertyName = uwPropertySvc.getBasePropertyName( key );\n\n        if( currentBasePropertyName === basePropertyName ) {\n            var sourceObjectUid = uwPropertySvc.getSourceObjectUid( currentProperty );\n\n            if( sourceObjectUid === uid ) {\n                foundProperty = currentProperty;\n\n                return false;\n            }\n        }\n    } );\n\n    return foundProperty;\n};\n\n/**\n\n * create VMO API for all interface such as dataParser , viewModelCollection\n\n *\n\n * @constructor\n\n *\n\n * @param {IModelObject} modelObject - The IModelObject to create a ViewModelObject for.\n\n * @param {boolean} isDateAdjusted isDateAdjusted\n\n */\n\nexport let constructViewModelObject = function( modelObject, isDateAdjusted ) {\n    return new ViewModelObject( modelObject, isDateAdjusted );\n};\n\n/**\n\n * Get view model property type based on the value type and array flag.\n\n *\n\n * @param {Integer} valueType - The valueType for this property\n\n * @param {Boolean} isArray - array flag\n\n *\n\n * @return {propertyType} propertyType based off the integer value of valueType (String/Double/char etc.)\n\n */\n\nexport let getClientPropertyType = function( valueType, isArray ) { // eslint-disable-line complexity\n    var propertyType;\n\n    switch ( valueType ) {\n        case 1:\n\n            if( isArray ) {\n                propertyType = 'STRINGARRAY';\n            } else {\n                propertyType = 'CHAR';\n            }\n\n            break;\n\n        case 2:\n\n            if( isArray ) {\n                propertyType = 'DATEARRAY';\n            } else {\n                propertyType = 'DATE';\n            }\n\n            break;\n\n        case 3:\n        case 4:\n\n            if( isArray ) {\n                propertyType = 'DOUBLEARRAY';\n            } else {\n                propertyType = 'DOUBLE';\n            }\n\n            break;\n\n        case 5:\n\n            if( isArray ) {\n                propertyType = 'INTEGERARRAY';\n            } else {\n                propertyType = 'INTEGER';\n            }\n\n            break;\n\n        case 6:\n\n            if( isArray ) {\n                propertyType = 'BOOLEANARRAY';\n            } else {\n                propertyType = 'BOOLEAN';\n            }\n\n            break;\n\n        case 7:\n\n            if( isArray ) {\n                propertyType = 'INTEGERARRAY';\n            } else {\n                propertyType = 'SHORT';\n            }\n\n            break;\n\n        case 8:\n\n            if( isArray ) {\n                propertyType = 'STRINGARRAY';\n            } else {\n                propertyType = 'STRING';\n            }\n\n            break;\n\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n\n            if( isArray ) {\n                propertyType = 'OBJECTARRAY';\n            } else {\n                propertyType = 'OBJECT';\n            }\n\n            break;\n\n        default:\n\n            propertyType = 'UNKNOWN';\n\n            break;\n    }\n\n    return propertyType;\n};\n\n/**\n\n * Sets the 'isEditable' of viewModelProperties if property in the associated IModelObject can be modified.\n\n *\n\n * @param {ViewModelObject} vmo - The viewModelObject containing the 'props' to be checked.\n\n * @param {Boolean} editable - TRUE if the properties are to be marked as 'editable'.\n\n * @param {Boolean} override - TRUE if the editing state should be updated an announced even if not currently\n\n *            different than the desired state.\n\n * @param {Boolean} skipDigest - (Optional) TRUE if the 'triggerDigestCycle' function should NOT be called.\n\n */\n\nexport let setEditableStates = function( vmo, editable, override, skipDigest ) {\n    setEditState( vmo, editable );\n    var modelObject = cdm.getObject( vmo.uid );\n\n    var isEditableNil = declUtils.isNil( editable );\n\n    _.forEach( vmo.props, function( propValue, propName ) {\n        if( propValue ) {\n            if( isEditableNil ) {\n                var modelProp = modelObject.props[ propName ];\n\n                if( modelProp ) {\n                    propValue.isEditable = modelProp.modifiable;\n\n                    uwPropertySvc.setEditable( propValue, modelProp.modifiable );\n\n                    /**\n\n                     * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n\n                     * uwPropertySvc.setEditState instead. No need to set viewProp.editableInViewModel separately as it\n\n                     * will be taken care by setEditStates method. This change is done as part of handling upload\n\n                     * dataset use case.\n\n                     */\n\n                    uwPropertySvc.setEditState( propValue, modelProp.modifiable, true );\n                }\n            } else {\n                propValue.isEditable = editable;\n\n                uwPropertySvc.setEditable( propValue, editable );\n\n                /**\n\n                 * Note : uwPropertySvc.setEditable method does not fire any property change event, Calling\n\n                 * uwPropertySvc.setEditState instead . No need to set viewProp.editableInViewModel separately as it\n\n                 * will be taken care by setEditStates method. This changes is done as part of handling upload\n\n                 * dataset use case.\n\n                 */\n\n                uwPropertySvc.setEditState( propValue, editable, override, true );\n            }\n        }\n    } );\n};\n\n/**\n\n/**\n\n * @param {String|Object} input - UID of the ModelObject to create a ViewModelObject wrapper for OR model object\n\n * @param {String} operationName - if \"EDIT\", then the VMO is modifiable. (null is acceptable)\n\n * @param {String} owningObjUid - The UID of owning object\n\n * @param {ViewModelObject} serverVMO -\n\n *\n\n * @return {ViewModelObject} Newly created ViewModelObject wrapper initialized with properties from the given\n\n *         inputs.\n\n */\n\nexport let createViewModelObject = function( input, operationName, owningObjUid, serverVMO ) {\n    var modelObject = input;\n\n    if( _.isString( input ) ) {\n        modelObject = cdm.getObject( input );\n    } else if( input && input.uid && !serverVMO ) {\n        modelObject = cdm.getObject( input.uid );\n    }\n\n    if( !modelObject ) {\n        logger.error( 'viewModelObject.createViewModelObject: ' +\n\n            'Unable to locate ModelObject in the clientDataModel with UID=' + input );\n\n        return null;\n    }\n\n    return exports.constructViewModelObjectFromModelObject( modelObject, operationName, owningObjUid, serverVMO );\n};\n\n/**\n\n * This is a preProcessor to 'updateSourceObjectPropertiesByViewModelObject' to trivially ignore updating existing\n\n * (loaded) VMOs in the given collection.\n\n *\n\n * @param {ViewModelObjectArray} loadedVMOs - Collection of viewModelObjects to consider for updating.\n\n *\n\n * @param {IModelObjectArray} updatedCDMObjects - CDM Objects that have been reported as updated or modified.\n\n */\n\nexport let updateViewModelObjectCollection = function( loadedVMOs, updatedCDMObjects ) {\n    /**\n\n     * Check if there is nothing to work on or with.\n\n     */\n\n    if( _.isEmpty( loadedVMOs ) || _.isEmpty( updatedCDMObjects ) ) {\n        return;\n    }\n\n    /**\n\n     * Create a map containing the unique UID of all the loaded viewModelObjects so that we can trivially ignore any\n\n     * changed CDM objects NOT in this viewModelCollection.\n\n     * <P>\n\n     * Note: The map needs to consider all the different UIDs a modified object could be referenced by it. The UID\n\n     * checks mirror the check made in 'updateSourceObjectPropertiesByViewModelObject'.\n\n     */\n\n    var vmoMap = {};\n\n    _.forEach( loadedVMOs,\n\n        function cdmHandlerCheck( vmo ) {\n            if( vmo.uid ) {\n                vmoMap[ vmo.uid ] = true;\n\n                if( !_.isEmpty( vmo.props ) ) {\n                    if( vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target &&\n\n                        vmo.props.awp0Target.dbValue ) {\n                        vmoMap[ vmo.props.awp0Target.dbValue ] = true;\n                    }\n\n                    _.forEach( vmo.props, function( vmProp ) {\n                        var sourceObjectUid = uwPropertySvc.getSourceObjectUid( vmProp );\n\n                        if( sourceObjectUid ) {\n                            vmoMap[ sourceObjectUid ] = true;\n                        }\n\n                        if( vmProp.parentUid ) {\n                            vmoMap[ vmProp.parentUid ] = true;\n                        }\n                    } );\n                }\n            }\n        } );\n\n    /**\n\n     * Check if we ended up with NO viewModelObjects.\n\n     */\n\n    if( _.isEmpty( vmoMap ) ) {\n        return;\n    }\n\n    /**\n\n     * Loop for each modified object and update any VMOs effected by it.\n\n     */\n\n    _.forEach( updatedCDMObjects, function _updateViewModelCollection( updatedObj ) {\n        if( updatedObj.uid && vmoMap[ updatedObj.uid ] ) {\n            var updatedVmo = exports.createViewModelObject( updatedObj, 'EDIT' );\n\n            if( updatedVmo && updatedVmo.props ) {\n                exports.updateSourceObjectPropertiesByViewModelObject( updatedVmo, loadedVMOs );\n            }\n        }\n    } );\n};\n\n/**\n\n * Updates all the viewModelObjects with the updatedVMO, depending on the property's sourceUid.\n\n *\n\n * @param {ViewModelObject} updatedVMO - view model object with updated information\n\n * @param {ViewModelObjectArray} origVMOs - all the view model objects that need to be updated\n\n */\n\nexport let updateSourceObjectPropertiesByViewModelObject = function( updatedVMO, origVMOs, propsToUpdate ) {\n    if( updatedVMO && updatedVMO.props && origVMOs ) {\n        var updatedUid = updatedVMO.uid;\n\n        var updatedProps = {};\n\n        _.forEach( origVMOs, function( vmo ) {\n            if( vmo && vmo.props ) {\n                var vmoChanged = false;\n\n                if( vmo.type === 'Awp0XRTObjectSetRow' && vmo.props.awp0Target &&\n\n                    vmo.props.awp0Target.dbValue === updatedUid ) {\n                    _.forEach( vmo.props, function( vmProp, key ) {\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( key ) === -1 ) {\n                            return true;\n                        }\n                        var updatedProp = updatedVMO.props[ key ];\n\n                        if( updatedProp ) {\n                            uwPropertySvc.copyModelData( vmProp, updatedProp );\n\n                            if( updatedProps[ vmo.uid ] === undefined ) {\n                                updatedProps[ vmo.uid ] = [];\n                            }\n\n                            updatedProps[ vmo.uid ].push( vmProp.propertyName );\n\n                            vmoChanged = true;\n                        }\n                    } );\n                }\n\n                _.forEach( vmo.props, function( vmProp ) {\n                    var sourceObjectUid = uwPropertySvc.getSourceObjectUid( vmProp );\n\n                    // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n                    // original object containing the property\n                    if( sourceObjectUid === updatedUid || vmProp.parentUid === updatedUid ) {\n                        var propertyNameLookup = vmProp.propertyName;\n                        if( sourceObjectUid === updatedUid && sourceObjectUid !== vmProp.parentUid ) {\n                            propertyNameLookup = uwPropertySvc.getBasePropertyName( propertyNameLookup );\n                        }\n\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( propertyNameLookup ) === -1 ) {\n                            return true;\n                        }\n\n                        var updatedProp = updatedVMO.props[ propertyNameLookup ];\n                        if( updatedProp ) {\n                            var updatedPropSourceUid = uwPropertySvc.getSourceObjectUid( updatedProp );\n                            if( sourceObjectUid === updatedPropSourceUid ) {\n                                uwPropertySvc.copyModelData( vmProp, updatedProp );\n\n                                if( updatedProps[ vmo.uid ] === undefined ) {\n                                    updatedProps[ vmo.uid ] = [];\n                                }\n                                updatedProps[ vmo.uid ].push( vmProp.propertyName );\n                                vmoChanged = true;\n                            }\n                        }\n                    }\n                } );\n\n                _.forEach( updatedVMO.props, function( updatedVmProp ) {\n                    var updatedVmPropSourceUid = uwPropertySvc.getSourceObjectUid( updatedVmProp );\n\n                    // Need to handle both situations, where a DCP property is passed through the DCP object, or the\n                    // original object containing the property\n                    if( vmo.uid === updatedVmPropSourceUid || updatedVmProp.parentUid === vmo.uid ) {\n                        var updatedPropNameLookup = updatedVmProp.propertyName;\n                        if( updatedVmPropSourceUid === vmo.uid && updatedVmPropSourceUid !== updatedVmProp.parentUid ) {\n                            updatedPropNameLookup = uwPropertySvc.getBasePropertyName( updatedPropNameLookup );\n                        }\n\n                        // If this is not one of the props we want to update, continue\n                        if( propsToUpdate && propsToUpdate.length > 0 && propsToUpdate.indexOf( updatedPropNameLookup ) === -1 ) {\n                            return true;\n                        }\n\n                        if( !vmo.props[ updatedPropNameLookup ] ) {\n                            vmo.props[ updatedPropNameLookup ] = updatedVmProp;\n\n                            if( updatedProps[ vmo.uid ] === undefined ) {\n                                updatedProps[ vmo.uid ] = [];\n                            }\n                            updatedProps[ vmo.uid ].push( updatedPropNameLookup );\n                            vmoChanged = true;\n                        }\n                    }\n                } );\n\n                if( vmoChanged ) {\n                    updateCellProperties( vmo );\n\n                    updateStatusIndicators( vmo );\n\n                    updateColorDecorators( vmo );\n\n                    updateIcons( vmo );\n                }\n            }\n        } );\n\n        eventBus.publish( 'viewModelObject.propsUpdated', updatedProps );\n    }\n};\n\n/**\n\n * Update all existing VMO properties from the underlying CDM object's property value (with the same name).\n\n *\n\n * <pre>\n\n * </pre>\n\n *\n\n * @param {Object} vmo view model object\n\n */\n\nexport let updateVMOProperties = function( vmo ) {\n    if( !vmo.uid ) {\n        return;\n    }\n\n    var modelObj = cdm.getObject( vmo.uid );\n\n    if( !modelObj || !modelObj.props ) {\n        return;\n    }\n\n    _.forEach( vmo.props, function( vmoProp, propName ) {\n        if( modelObj.props.hasOwnProperty( propName ) ) {\n            var moProp = modelObj.props[ propName ];\n\n            vmoProp.dbValues = moProp.dbValues;\n\n            vmoProp.uiValues = moProp.uiValues;\n\n            vmoProp.uiValue = moProp.getDisplayValue();\n\n            if( moProp.uiValues ) {\n                vmoProp.displayValues = moProp.uiValues;\n            } else {\n                vmoProp.displayValues = [];\n            }\n\n            vmoProp.isEditable = moProp.propertyDescriptor.constantsMap.editable === '1' && moProp.modifiable;\n            vmoProp.isLocalizable = moProp.propertyDescriptor.constantsMap.localizable === '1';\n        }\n    } );\n\n    updateCellProperties( vmo );\n\n    updateStatusIndicators( vmo );\n\n    updateColorDecorators( vmo );\n\n    updateIcons( vmo );\n};\n\n/**\n\n * Test if the given object 'is-a' TreeLoadInput created by this service.\n\n *\n\n * @param {Object} objectToTest - Object to check prototype history of.\n\n * @return {Boolean} TRUE if the given object is a TreeLoadInput.\n\n */\n\nexport let isViewModelObject = function( objectToTest ) {\n    return objectToTest instanceof ViewModelObject;\n};\n\n/**\n * This recursive function returns the given vmos and their cached children if present\n * @param {* } vmObjects the view model objects.\n * @param {* } vmObjectsAcc the accumulation of the view model objects and their cached children.\n * @returns {* } vmObjects and any cached children.\n */\nexport const getLoadedAndCachedViewModelObjects = function( vmObjects, vmObjectsAcc ) {\n    if( !vmObjectsAcc ) {\n        vmObjectsAcc = [];\n    }\n\n    _.forEach( vmObjects, ( vmo ) => {\n        vmObjectsAcc.push( vmo );\n        if( vmo.__expandState ) {\n            getLoadedAndCachedViewModelObjects( vmo.__expandState.expandedNodes, vmObjectsAcc );\n        }\n    } );\n\n    return vmObjectsAcc;\n};\n\n/**\n * This function gets the vmos that are not in edit\n * @param {* } vmObjects the view model objects.\n * @returns {* } vmObjects that are not in edit.\n */\nexport const getVmosNotInEdit = function( vmObjects ) {\n    return vmObjects.filter( ( vmObject ) => {\n        return !vmObject.isEditing;\n    } );\n};\n\nexports = {\n    constructViewModelProperty,\n    constructViewModelObject,\n    getClientPropertyType,\n    setEditableStates,\n    clearEditableStates,\n    constructViewModelObjectFromModelObject,\n    createViewModelObject,\n    updateViewModelObjectCollection,\n    updateSourceObjectPropertiesByViewModelObject,\n    updateVMOProperties,\n    isViewModelObject,\n    getLoadedAndCachedViewModelObjects,\n    getVmosNotInEdit,\n    setEditState\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/editHandlerService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxSvc from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nvar exports = {}; // Map the context to the edit handler info\n\nvar m_context2EditHandlerInfo = {};\n/** The last edit handler context activated */\n\nvar m_activeEditHandlerContext = {};\n/**\n * Set the current edit handler\n *\n * @param {Object} handler - current edit handler\n * @param {Object} editHandlerContext - context\n */\n\nexport let setEditHandler = function (handler, editHandlerContext) {\n  if (!handler || !editHandlerContext) {\n    return;\n  }\n\n  var info = m_context2EditHandlerInfo[editHandlerContext];\n  appCtxSvc.ctx[editHandlerContext] = handler;\n\n  if (!info || handler !== info.editHandler) {\n    if (!info) {\n      info = {};\n    }\n\n    info.editHandler = handler;\n    info.enable = true;\n    m_context2EditHandlerInfo[editHandlerContext] = info;\n\n    if (handler.hasOwnProperty('hasWrapper')) {\n      handler.addListener(this);\n    }\n\n    eventBus.publish('aw.setEditHandler', {});\n  }\n};\n/**\n * Get the default edit handler\n *\n * @param {String} editHandlerContext - edit handler context\n * @return the default edit handler\n */\n\nexport let getEditHandler = function (editHandlerContext) {\n  var info = m_context2EditHandlerInfo[editHandlerContext];\n\n  if (!info) {\n    return null;\n  }\n\n  return info.editHandler;\n};\n/**\n * Set the edit handler enabled/disabled\n *\n * @param enabled is enabled?\n * @param editHandlerContext is enabled?\n * @returns true if enabled changed, false otherwise\n */\n\nexport let setEditHandlerEnabled = function (enabled, editHandlerContext) {\n  var info = m_context2EditHandlerInfo[editHandlerContext];\n\n  if (info && info.enable !== enabled) {\n    info.enable = enabled;\n    m_context2EditHandlerInfo[editHandlerContext] = info;\n    return true;\n  }\n\n  return false;\n};\n/**\n * Get the current state of the edit handler, enabled/disabled\n *\n * @return True if edit is enabled, False otherwise\n */\n\nexport let isEditEnabled = function (editHandlerContext) {\n  var info = m_context2EditHandlerInfo[editHandlerContext];\n\n  if (!info) {\n    return false;\n  }\n\n  return info.enable;\n};\n/**\n * Remove an edit handler\n *\n * @param editHandlerContext context associated with the edit handler\n */\n\nexport let removeEditHandler = function (editHandlerContext) {\n  appCtxSvc.unRegisterCtx(editHandlerContext);\n  var info = m_context2EditHandlerInfo[editHandlerContext];\n\n  if (info && info.editHandler && info.editHandler.destroy) {\n    info.editHandler.destroy();\n  }\n\n  delete m_context2EditHandlerInfo[editHandlerContext];\n};\n/**\n * Get all of the current edit handlers\n *\n * @return All of the current edit handlers\n */\n\nexport let getAllEditHandlers = function () {\n  var editHandlers = [];\n\n  for (var i in m_context2EditHandlerInfo) {\n    var info = m_context2EditHandlerInfo[i];\n\n    if (info && info.editHandler !== null) {\n      editHandlers.push(info.editHandler);\n    }\n  }\n\n  return editHandlers;\n};\nexport let setActiveEditHandlerContext = function (context) {\n  m_activeEditHandlerContext = context;\n};\nexport let getActiveEditHandler = function () {\n  if (m_context2EditHandlerInfo[m_activeEditHandlerContext] && m_context2EditHandlerInfo[m_activeEditHandlerContext].editHandler) {\n    return m_context2EditHandlerInfo[m_activeEditHandlerContext].editHandler;\n  }\n\n  return null;\n};\nexport let getActiveEditHandlerContext = function () {\n  return m_activeEditHandlerContext;\n};\n/**\n * Check for dirty edits\n *\n * @return {Object} with a boolean flag isDirty, TRUE if there is an activeEditHandler and dirty edits for it\n */\n\nexport let isDirty = function () {\n  var activeEditHandler = exports.getActiveEditHandler();\n\n  if (activeEditHandler && activeEditHandler.isNative) {\n    return activeEditHandler.isDirty().then(function (isDirty) {\n      return {\n        isDirty: isDirty\n      };\n    });\n  } else if (activeEditHandler) {\n    return AwPromiseService.instance.when({\n      isDirty: activeEditHandler.isDirty()\n    });\n  }\n\n  return AwPromiseService.instance.when({\n    isDirty: false\n  });\n};\n/**\n * Check for edit in progress\n *\n * @return {Object} with a boolean flag editInProgress, TRUE if there is an activeEditHandler and edit in progress\n */\n\nexport let editInProgress = function () {\n  var activeEditHandler = exports.getActiveEditHandler();\n\n  if (activeEditHandler) {\n    return {\n      editInProgress: activeEditHandler.editInProgress()\n    };\n  }\n\n  return {\n    editInProgress: false\n  };\n};\n/**\n * Start edits\n *\n * @param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n * @return {Promise} A promise object\n */\n\nexport let startEdit = function (editOptions) {\n  var activeEditHandler = exports.getActiveEditHandler();\n\n  if (activeEditHandler) {\n    return activeEditHandler.startEdit(editOptions);\n  }\n\n  return AwPromiseService.instance.reject('No active EditHandler');\n};\n/**\n * Save edits\n *\n * @param {String} context - parameter for getting commandHandler (Optional)\n * @param {Boolean} isPartialSaveDisabled - flag to determine if partial save is disabled (Optional)\n * @param {Boolean} isAutoSave - flag to determine if this is an auto save (Optional)\n * @return {Promise} A promise object\n */\n\nexport let saveEdits = function (context, isPartialSaveDisabled, isAutoSave) {\n  var activeEditHandler;\n\n  if (context) {\n    activeEditHandler = exports.getEditHandler(context);\n  } else {\n    activeEditHandler = exports.getActiveEditHandler();\n  }\n\n  if (activeEditHandler) {\n    return activeEditHandler.saveEdits(isPartialSaveDisabled, isAutoSave);\n  }\n\n  return AwPromiseService.instance.reject('No active EditHandler');\n};\n/**\n * Perform the actions post Save Edit\n *\n * @param {Boolean} saveSuccess - Whether the save edit was successful or not\n */\n\nexport let saveEditsPostActions = function (saveSuccess) {\n  var activeEditHandler = exports.getActiveEditHandler();\n\n  if (activeEditHandler) {\n    activeEditHandler.saveEditsPostActions(saveSuccess);\n  }\n};\n/**\n * Cancel edits\n */\n\nexport let cancelEdits = function () {\n  var activeEditHandler = exports.getActiveEditHandler();\n\n  if (activeEditHandler) {\n    activeEditHandler.cancelEdits();\n  }\n};\n/**\n * Leave confirmation. Returns a promise that is resolved when it is ok to leave.\n */\n\nexport let leaveConfirmation = function () {\n  var activeEditHandler = exports.getActiveEditHandler();\n\n  if (activeEditHandler) {\n    return AwPromiseService.instance(function (resolve) {\n      activeEditHandler.leaveConfirmation(resolve);\n    });\n  }\n\n  return AwPromiseService.instance.resolve();\n};\n/**\n * Update states\n * @param {Object} viewModel - viewModel the editHandler is associated with\n */\n\nexport let updateStates = function (editHandler, context) {\n  if (m_context2EditHandlerInfo && m_context2EditHandlerInfo[context]) {\n    var info = m_context2EditHandlerInfo[context];\n\n    if (info && info.editHandler) {\n      info.editHandler.canEdit = info.editHandler.canStartEdit();\n      editHandler.canEdit = info.editHandler.canStartEdit();\n    }\n  }\n};\n/**\n * Update states\n * @param {Object} viewModel - viewModel the editHandler is associated with\n */\n\nexport let updateStates2 = function (viewModel) {\n  if (m_context2EditHandlerInfo) {\n    for (var i in m_context2EditHandlerInfo) {\n      var info = m_context2EditHandlerInfo[i];\n\n      if (info && info.editHandler) {\n        const dataSource = info.editHandler.getDataSource();\n        const dataProvider = dataSource.getDataProvider();\n        const declViewModel = dataSource.getDeclViewModel();\n        let isEditHandlerOfViewModel = false;\n\n        if (dataProvider) {\n          for (const dataProviderName in viewModel.dataProviders) {\n            if (dataProvider === viewModel.dataProviders[dataProviderName]) {\n              isEditHandlerOfViewModel = true;\n              break;\n            }\n          }\n        } else if (declViewModel === viewModel) {\n          isEditHandlerOfViewModel = true;\n        }\n\n        if (isEditHandlerOfViewModel) {\n          info.editHandler.canEdit = info.editHandler.canStartEdit();\n        }\n      }\n    }\n  }\n};\nexports = {\n  setEditHandler,\n  getEditHandler,\n  setEditHandlerEnabled,\n  isEditEnabled,\n  removeEditHandler,\n  getAllEditHandlers,\n  setActiveEditHandlerContext,\n  getActiveEditHandler,\n  getActiveEditHandlerContext,\n  isDirty,\n  editInProgress,\n  startEdit,\n  saveEdits,\n  saveEditsPostActions,\n  cancelEdits,\n  leaveConfirmation,\n  updateStates,\n  updateStates2\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/editHandlerService.js"],"names":["exports","m_context2EditHandlerInfo","m_activeEditHandlerContext","setEditHandler","info","appCtxSvc","handler","eventBus","getEditHandler","setEditHandlerEnabled","isEditEnabled","removeEditHandler","getAllEditHandlers","editHandlers","setActiveEditHandlerContext","getActiveEditHandler","getActiveEditHandlerContext","isDirty","activeEditHandler","editInProgress","startEdit","AwPromiseService","saveEdits","saveEditsPostActions","cancelEdits","leaveConfirmation","updateStates","editHandler","updateStates2","dataSource","dataProvider","declViewModel","isEditHandlerOfViewModel","viewModel"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/editHandlerService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxSvc from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\n\nvar exports = {};\n\n// Map the context to the edit handler info\nvar m_context2EditHandlerInfo = {};\n\n/** The last edit handler context activated */\nvar m_activeEditHandlerContext = {};\n\n/**\n * Set the current edit handler\n *\n * @param {Object} handler - current edit handler\n * @param {Object} editHandlerContext - context\n */\nexport let setEditHandler = function( handler, editHandlerContext ) {\n    if( !handler || !editHandlerContext ) {\n        return;\n    }\n    var info = m_context2EditHandlerInfo[ editHandlerContext ];\n    appCtxSvc.ctx[ editHandlerContext ] = handler;\n    if( !info || handler !== info.editHandler ) {\n        if( !info ) {\n            info = {};\n        }\n        info.editHandler = handler;\n        info.enable = true;\n        m_context2EditHandlerInfo[ editHandlerContext ] = info;\n        if( handler.hasOwnProperty( 'hasWrapper' ) ) {\n            handler.addListener( this );\n        }\n        eventBus.publish( 'aw.setEditHandler', {} );\n    }\n};\n\n/**\n * Get the default edit handler\n *\n * @param {String} editHandlerContext - edit handler context\n * @return the default edit handler\n */\nexport let getEditHandler = function( editHandlerContext ) {\n    var info = m_context2EditHandlerInfo[ editHandlerContext ];\n    if( !info ) {\n        return null;\n    }\n\n    return info.editHandler;\n};\n\n/**\n * Set the edit handler enabled/disabled\n *\n * @param enabled is enabled?\n * @param editHandlerContext is enabled?\n * @returns true if enabled changed, false otherwise\n */\nexport let setEditHandlerEnabled = function( enabled, editHandlerContext ) {\n    var info = m_context2EditHandlerInfo[ editHandlerContext ];\n    if( info && info.enable !== enabled ) {\n        info.enable = enabled;\n        m_context2EditHandlerInfo[ editHandlerContext ] = info;\n        return true;\n    }\n\n    return false;\n};\n\n/**\n * Get the current state of the edit handler, enabled/disabled\n *\n * @return True if edit is enabled, False otherwise\n */\nexport let isEditEnabled = function( editHandlerContext ) {\n    var info = m_context2EditHandlerInfo[ editHandlerContext ];\n    if( !info ) {\n        return false;\n    }\n    return info.enable;\n};\n\n/**\n * Remove an edit handler\n *\n * @param editHandlerContext context associated with the edit handler\n */\nexport let removeEditHandler = function( editHandlerContext ) {\n    appCtxSvc.unRegisterCtx( editHandlerContext );\n    var info = m_context2EditHandlerInfo[ editHandlerContext ];\n    if( info && info.editHandler && info.editHandler.destroy ) {\n        info.editHandler.destroy();\n    }\n    delete m_context2EditHandlerInfo[ editHandlerContext ];\n};\n\n/**\n * Get all of the current edit handlers\n *\n * @return All of the current edit handlers\n */\nexport let getAllEditHandlers = function() {\n    var editHandlers = [];\n    for( var i in m_context2EditHandlerInfo ) {\n        var info = m_context2EditHandlerInfo[ i ];\n        if( info && info.editHandler !== null ) {\n            editHandlers.push( info.editHandler );\n        }\n    }\n    return editHandlers;\n};\n\nexport let setActiveEditHandlerContext = function( context ) {\n    m_activeEditHandlerContext = context;\n};\n\nexport let getActiveEditHandler = function() {\n    if( m_context2EditHandlerInfo[ m_activeEditHandlerContext ] &&\n        m_context2EditHandlerInfo[ m_activeEditHandlerContext ].editHandler ) {\n        return m_context2EditHandlerInfo[ m_activeEditHandlerContext ].editHandler;\n    }\n    return null;\n};\n\nexport let getActiveEditHandlerContext = function() {\n    return m_activeEditHandlerContext;\n};\n\n/**\n * Check for dirty edits\n *\n * @return {Object} with a boolean flag isDirty, TRUE if there is an activeEditHandler and dirty edits for it\n */\nexport let isDirty = function() {\n    var activeEditHandler = exports.getActiveEditHandler();\n    if( activeEditHandler && activeEditHandler.isNative ) {\n        return activeEditHandler.isDirty().then( function( isDirty ) {\n            return {\n                isDirty: isDirty\n            };\n        } );\n    } else if( activeEditHandler ) {\n        return AwPromiseService.instance.when( {\n            isDirty: activeEditHandler.isDirty()\n        } );\n    }\n    return AwPromiseService.instance.when( {\n        isDirty: false\n    } );\n};\n\n/**\n * Check for edit in progress\n *\n * @return {Object} with a boolean flag editInProgress, TRUE if there is an activeEditHandler and edit in progress\n */\nexport let editInProgress = function() {\n    var activeEditHandler = exports.getActiveEditHandler();\n    if( activeEditHandler ) {\n        return {\n            editInProgress: activeEditHandler.editInProgress()\n        };\n    }\n    return {\n        editInProgress: false\n    };\n};\n\n/**\n * Start edits\n *\n * @param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n * @return {Promise} A promise object\n */\nexport let startEdit = function( editOptions ) {\n    var activeEditHandler = exports.getActiveEditHandler();\n    if( activeEditHandler ) {\n        return activeEditHandler.startEdit( editOptions );\n    }\n    return AwPromiseService.instance.reject( 'No active EditHandler' );\n};\n\n/**\n * Save edits\n *\n * @param {String} context - parameter for getting commandHandler (Optional)\n * @param {Boolean} isPartialSaveDisabled - flag to determine if partial save is disabled (Optional)\n * @param {Boolean} isAutoSave - flag to determine if this is an auto save (Optional)\n * @return {Promise} A promise object\n */\nexport let saveEdits = function( context, isPartialSaveDisabled, isAutoSave  ) {\n    var activeEditHandler;\n    if( context ) {\n        activeEditHandler = exports.getEditHandler( context );\n    } else {\n        activeEditHandler = exports.getActiveEditHandler();\n    }\n    if( activeEditHandler ) {\n        return activeEditHandler.saveEdits( isPartialSaveDisabled, isAutoSave );\n    }\n\n    return AwPromiseService.instance.reject( 'No active EditHandler' );\n};\n\n/**\n * Perform the actions post Save Edit\n *\n * @param {Boolean} saveSuccess - Whether the save edit was successful or not\n */\nexport let saveEditsPostActions = function( saveSuccess ) {\n    var activeEditHandler = exports.getActiveEditHandler();\n    if( activeEditHandler ) {\n        activeEditHandler.saveEditsPostActions( saveSuccess );\n    }\n};\n\n/**\n * Cancel edits\n */\nexport let cancelEdits = function() {\n    var activeEditHandler = exports.getActiveEditHandler();\n    if( activeEditHandler ) {\n        activeEditHandler.cancelEdits();\n    }\n};\n\n/**\n * Leave confirmation. Returns a promise that is resolved when it is ok to leave.\n */\nexport let leaveConfirmation = function() {\n    var activeEditHandler = exports.getActiveEditHandler();\n    if( activeEditHandler ) {\n        return AwPromiseService.instance( function( resolve ) {\n            activeEditHandler.leaveConfirmation( resolve );\n        } );\n    }\n\n    return AwPromiseService.instance.resolve();\n};\n\n/**\n * Update states\n * @param {Object} viewModel - viewModel the editHandler is associated with\n */\nexport let updateStates = function( editHandler, context ) {\n    if ( m_context2EditHandlerInfo && m_context2EditHandlerInfo[ context ] ) {\n        var info = m_context2EditHandlerInfo[ context ];\n        if ( info && info.editHandler ) {\n            info.editHandler.canEdit = info.editHandler.canStartEdit();\n            editHandler.canEdit = info.editHandler.canStartEdit();\n        }\n    }\n};\n\n/**\n * Update states\n * @param {Object} viewModel - viewModel the editHandler is associated with\n */\nexport let updateStates2 = function( viewModel ) {\n    if ( m_context2EditHandlerInfo ) {\n        for ( var i in m_context2EditHandlerInfo ) {\n            var info = m_context2EditHandlerInfo[i];\n            if ( info && info.editHandler ) {\n                const dataSource = info.editHandler.getDataSource();\n                const dataProvider = dataSource.getDataProvider();\n                const declViewModel = dataSource.getDeclViewModel();\n\n                let isEditHandlerOfViewModel = false;\n                if ( dataProvider ) {\n                    for( const dataProviderName in viewModel.dataProviders ) {\n                        if ( dataProvider === viewModel.dataProviders[ dataProviderName ] ) {\n                            isEditHandlerOfViewModel = true;\n                            break;\n                        }\n                    }\n                } else if ( declViewModel === viewModel ) {\n                    isEditHandlerOfViewModel = true;\n                }\n\n                if( isEditHandlerOfViewModel ) {\n                    info.editHandler.canEdit = info.editHandler.canStartEdit();\n                }\n            }\n        }\n    }\n};\n\nexports = {\n    setEditHandler,\n    getEditHandler,\n    setEditHandlerEnabled,\n    isEditEnabled,\n    removeEditHandler,\n    getAllEditHandlers,\n    setActiveEditHandlerContext,\n    getActiveEditHandler,\n    getActiveEditHandlerContext,\n    isDirty,\n    editInProgress,\n    startEdit,\n    saveEdits,\n    saveEditsPostActions,\n    cancelEdits,\n    leaveConfirmation,\n    updateStates,\n    updateStates2\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
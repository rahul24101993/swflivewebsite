{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwNavigateBreadcrumbService.js\";\n// Copyright (c) 2021 Siemens\n\n/**\n * render function for AwBreadCrumb\n * @deprecated afx@4.2.0.\n * @alternative <br>\n * @obsoleteIn afx@5.1.0\n * @returns {JSX.Element} react component\n */\nimport AwBreadcrumbItem from 'viewmodel/AwNavigateBreadcrumbItemViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport resizeObserverSvc from 'js/resizeObserver.service';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const handleOverflow = (props, viewModel, elementRefList) => {\n  const {\n    crumbs\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  const ref = elementRefList.get('breadcrumb');\n\n  const calcOverflow = () => {\n    if (!ref.current.children) {\n      return;\n    }\n\n    let containerWidth = ref.current.parentContainer.clientWidth;\n    const allChildren = ref.current.children.filter(x => x).map(x => x.clientWidth);\n    const MARGIN = 8; // default margin-right: 8px is for each crumb\n\n    let updatedState;\n\n    if (allChildren && allChildren.length) {\n      // check how much space each crumb takes in ui\n      const childrenTotalWidth = allChildren.reduce((total, width) => total + width, 0);\n\n      if (containerWidth < childrenTotalWidth + MARGIN * allChildren.length) {\n        // need to check, how many crumbs come inside overflowChevron\n        containerWidth -= allChildren[0] + MARGIN * allChildren.length;\n        let overflowIndex = -1;\n\n        for (let i = allChildren.length - 1; i > 0; i--) {\n          if (containerWidth < allChildren[i]) {\n            overflowIndex = i;\n            break;\n          } else {\n            crumbs[i].visible = true;\n          }\n\n          containerWidth -= allChildren[i];\n        }\n\n        if (overflowIndex > -1) {\n          const overflowedCrumb = [];\n\n          for (let i = 1; i <= overflowIndex; i++) {\n            crumbs[i].visible = false;\n            overflowedCrumb.push(crumbs[i]);\n          }\n\n          updatedState = {\n            index: overflowIndex,\n            crumbs: overflowedCrumb\n          };\n        } else {\n          updatedState = {\n            index: -1,\n            crumbs: []\n          };\n        }\n      } else {\n        updatedState = {\n          index: -1,\n          crumbs: []\n        };\n      }\n    }\n\n    if (updatedState) {\n      dispatch && dispatch({\n        path: 'data.overflow',\n        value: updatedState\n      });\n    }\n  };\n\n  if (data.overflow.index !== -1) {\n    dispatch && dispatch({\n      path: 'data',\n      value: { ...data,\n        resize: data.resize === 'true' ? 'false' : 'true',\n        overflow: {\n          index: -1,\n          crumbs: []\n        }\n      }\n    });\n  } else {\n    calcOverflow();\n  }\n};\nexport const attachResizeObserver = (viewModel, elementRefList) => {\n  const {\n    dispatch\n  } = viewModel;\n  const ref = elementRefList.get('breadcrumb');\n\n  const addResizeObserver = () => {\n    if (resizeObserverSvc.supportsResizeObserver()) {\n      const callback = _.debounce(() => {\n        if (ref.current.parentContainer) {\n          const data = viewModel.getData();\n          dispatch && dispatch({\n            path: 'data',\n            value: { ...data,\n              resize: data.resize === 'true' ? 'false' : 'true',\n              overflow: {\n                index: -1,\n                crumbs: []\n              }\n            }\n          });\n        }\n      }, 200, {\n        maxWait: 1000,\n        trailing: true,\n        leading: false\n      });\n\n      ref.current.resizeObserver = resizeObserverSvc.observe(ref.current.parentContainer, callback);\n    }\n  };\n\n  addResizeObserver();\n};\nexport const onUnMount = elementRefList => {\n  // TODO: Future ref. not working as value of current updated in mount, not reflecting in unmount\n  if (elementRefList) {\n    const ref = elementRefList.get('breadcrumb');\n    ref.current && ref.current.resizeObserver && ref.current.resizeObserver();\n  }\n};\n/**\n * Method to publish analytics to server\n * @param {*} crumbs - array of all the related crumbs\n * @param {*} index - index of the crumb whose checvron is clicked\n */\n\nconst publishAnalytics = (crumbs, index) => {\n  let sanEvent = {\n    sanAnalyticsType: 'Breadcrumb',\n    sanCommandId: 'clickBreadcrumbChevron',\n    sanCommandTitle: crumbs[index].displayName\n  };\n  analyticsSvc.logCommands(sanEvent);\n};\n\nexport const awNavigateBreadcrumbRenderFn = props => {\n  const {\n    popuplist,\n    crumbs,\n    compact,\n    viewModel: {\n      data,\n      dispatch\n    }\n  } = props;\n  const ref = props.elementRefList.get('breadcrumb');\n\n  const handleChevronClick = index => {\n    dispatch && dispatch({\n      path: 'data.rotateChevronIndex',\n      value: data.rotateChevronIndex === index ? null : index\n    });\n\n    if (index !== -1) {\n      publishAnalytics(crumbs, index);\n    }\n  };\n\n  const createCrumbs = bcCrumbs => {\n    if (bcCrumbs) {\n      const {\n        overflow\n      } = data;\n\n      const attachingChildRef = (el, index) => {\n        if (!ref.current) {\n          ref.current = {};\n        }\n\n        if (!ref.current.children) {\n          ref.current.children = [];\n        }\n\n        ref.current.children[index] = el;\n      };\n\n      bcCrumbs.forEach(c => {\n        c.visible = !(c.index <= overflow.index && c.index !== 0);\n      });\n      return bcCrumbs.map((crumb, index) => {\n        crumb.index = index;\n        crumb.rotate = data.rotateChevronIndex === index ? !crumb.rotate : false;\n        let iconId = crumb.showArrow ? 'miscChevronRight' : '';\n\n        if (overflow.index > -1 && index === 0) {\n          crumb.rotate = false;\n          iconId = 'miscChevronLeftDouble';\n        }\n\n        if (crumb.visible === false) {\n          return null;\n        }\n\n        if (index === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sw-breadcrumb-item\",\n            ref: el => attachingChildRef(el, index),\n            children: /*#__PURE__*/_jsxDEV(AwBreadcrumbItem, {\n              crumb: crumb,\n              popuplist: popuplist,\n              chevronClick: handleChevronClick,\n              iconId: iconId,\n              overflowedCrumbs: overflow.crumbs\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)\n          }, crumb.displayName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sw-breadcrumb-item\",\n          ref: el => attachingChildRef(el, index),\n          children: /*#__PURE__*/_jsxDEV(AwBreadcrumbItem, {\n            crumb: crumb,\n            popuplist: popuplist,\n            chevronClick: handleChevronClick,\n            iconId: iconId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)\n        }, crumb.displayName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this);\n      });\n    }\n  };\n\n  const getClassNames = () => {\n    const classNames = ['aw-layout-fxbreadCrumbs', 'aw-layout-flexColumn'];\n\n    if (compact) {\n      classNames.push('aw-widgets-breadCrumbCompact');\n    }\n\n    return classNames.join(' ');\n  };\n\n  const attachingParentRef = el => {\n    if (!ref.current) {\n      ref.current = {};\n    }\n\n    ref.current.parentContainer = el;\n  };\n\n  if (ref.current && ref.current.resizeObserver === undefined) {\n    //if no observer attached, attach one\n    attachResizeObserver(props.viewModel, props.elementRefList);\n  } //If no crumbs defined, h1 remains empty so conditionally return h1\n\n\n  return crumbs && crumbs.length && /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: getClassNames(),\n    ref: el => attachingParentRef(el),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-row justify-left\",\n      children: createCrumbs(crumbs)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 36\n  }, this);\n};","map":{"version":3,"names":["AwBreadcrumbItem","analyticsSvc","resizeObserverSvc","_","handleOverflow","props","viewModel","elementRefList","crumbs","data","dispatch","ref","get","calcOverflow","current","children","containerWidth","parentContainer","clientWidth","allChildren","filter","x","map","MARGIN","updatedState","length","childrenTotalWidth","reduce","total","width","overflowIndex","i","visible","overflowedCrumb","push","index","path","value","overflow","resize","attachResizeObserver","addResizeObserver","supportsResizeObserver","callback","debounce","getData","maxWait","trailing","leading","resizeObserver","observe","onUnMount","publishAnalytics","sanEvent","sanAnalyticsType","sanCommandId","sanCommandTitle","displayName","logCommands","awNavigateBreadcrumbRenderFn","popuplist","compact","handleChevronClick","rotateChevronIndex","createCrumbs","bcCrumbs","attachingChildRef","el","forEach","c","crumb","rotate","iconId","showArrow","getClassNames","classNames","join","attachingParentRef","undefined"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwNavigateBreadcrumbService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n/**\n * render function for AwBreadCrumb\n * @deprecated afx@4.2.0.\n * @alternative <br>\n * @obsoleteIn afx@5.1.0\n * @returns {JSX.Element} react component\n */\nimport AwBreadcrumbItem from 'viewmodel/AwNavigateBreadcrumbItemViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport resizeObserverSvc from 'js/resizeObserver.service';\nimport _ from 'lodash';\n\nexport const handleOverflow = ( props, viewModel, elementRefList ) => {\n    const { crumbs } = props;\n    const { data, dispatch } = viewModel;\n    const ref = elementRefList.get( 'breadcrumb' );\n\n    const calcOverflow = () => {\n        if( !ref.current.children ) {\n            return;\n        }\n        let containerWidth = ref.current.parentContainer.clientWidth;\n        const allChildren = ref.current.children.filter( x => x ).map( x => x.clientWidth );\n        const MARGIN = 8; // default margin-right: 8px is for each crumb\n        let updatedState;\n        if( allChildren && allChildren.length ) {\n            // check how much space each crumb takes in ui\n            const childrenTotalWidth = allChildren.reduce( ( total, width ) => total + width, 0 );\n            if( containerWidth < childrenTotalWidth + MARGIN * allChildren.length ) {\n                // need to check, how many crumbs come inside overflowChevron\n                containerWidth -= allChildren[ 0 ] + MARGIN * allChildren.length;\n                let overflowIndex = -1;\n                for( let i = allChildren.length - 1; i > 0; i-- ) {\n                    if( containerWidth < allChildren[ i ] ) {\n                        overflowIndex = i;\n                        break;\n                    } else {\n                        crumbs[ i ].visible = true;\n                    }\n                    containerWidth -= allChildren[ i ];\n                }\n                if( overflowIndex > -1 ) {\n                    const overflowedCrumb = [];\n                    for( let i = 1; i <= overflowIndex; i++ ) {\n                        crumbs[ i ].visible = false;\n                        overflowedCrumb.push( crumbs[ i ] );\n                    }\n                    updatedState = { index: overflowIndex, crumbs: overflowedCrumb };\n                } else {\n                    updatedState = { index: -1, crumbs: [] };\n                }\n            } else {\n                updatedState = { index: -1, crumbs: [] };\n            }\n        }\n        if( updatedState ) {\n            dispatch && dispatch( { path: 'data.overflow', value: updatedState } );\n        }\n    };\n    if( data.overflow.index !== -1 ) {\n        dispatch && dispatch( { path: 'data', value: { ...data, resize: data.resize === 'true' ? 'false' : 'true', overflow: { index: -1, crumbs: [] } } } );\n    } else {\n        calcOverflow();\n    }\n};\n\nexport const attachResizeObserver = ( viewModel, elementRefList ) => {\n    const { dispatch } = viewModel;\n    const ref = elementRefList.get( 'breadcrumb' );\n\n    const addResizeObserver = () => {\n        if( resizeObserverSvc.supportsResizeObserver() ) {\n            const callback = _.debounce( () => {\n                if( ref.current.parentContainer ) {\n                    const data = viewModel.getData();\n                    dispatch && dispatch( { path: 'data', value: { ...data, resize: data.resize === 'true' ? 'false' : 'true', overflow: { index: -1, crumbs: [] } } } );\n                }\n            }, 200, {\n                maxWait: 1000,\n                trailing: true,\n                leading: false\n            } );\n            ref.current.resizeObserver = resizeObserverSvc.observe( ref.current.parentContainer, callback );\n        }\n    };\n\n    addResizeObserver();\n};\n\nexport const onUnMount = ( elementRefList ) => {\n    // TODO: Future ref. not working as value of current updated in mount, not reflecting in unmount\n    if( elementRefList ) {\n        const ref = elementRefList.get( 'breadcrumb' );\n        ref.current && ref.current.resizeObserver && ref.current.resizeObserver();\n    }\n};\n\n/**\n * Method to publish analytics to server\n * @param {*} crumbs - array of all the related crumbs\n * @param {*} index - index of the crumb whose checvron is clicked\n */\nconst publishAnalytics = ( crumbs, index ) => {\n    let sanEvent = {\n        sanAnalyticsType: 'Breadcrumb',\n        sanCommandId: 'clickBreadcrumbChevron',\n        sanCommandTitle: crumbs[ index ].displayName\n    };\n    analyticsSvc.logCommands( sanEvent );\n};\n\nexport const awNavigateBreadcrumbRenderFn = ( props ) => {\n    const { popuplist, crumbs, compact, viewModel: { data, dispatch } } = props;\n    const ref = props.elementRefList.get( 'breadcrumb' );\n\n    const handleChevronClick = ( index ) => {\n        dispatch && dispatch( { path: 'data.rotateChevronIndex', value: data.rotateChevronIndex === index ? null : index } );\n        if( index !== -1 ) {\n            publishAnalytics( crumbs, index );\n        }\n    };\n\n    const createCrumbs = ( bcCrumbs ) => {\n        if( bcCrumbs ) {\n            const { overflow } = data;\n            const attachingChildRef = ( el, index ) => {\n                if( !ref.current ) {\n                    ref.current = {};\n                }\n                if( !ref.current.children ) {\n                    ref.current.children = [];\n                }\n                ref.current.children[ index ] = el;\n            };\n\n            bcCrumbs.forEach( c => {\n                c.visible = !( c.index <= overflow.index && c.index !== 0 );\n            } );\n\n            return bcCrumbs.map( ( crumb, index ) => {\n                crumb.index = index;\n                crumb.rotate = data.rotateChevronIndex === index ? !crumb.rotate : false;\n                let iconId = crumb.showArrow ? 'miscChevronRight' : '';\n\n                if( overflow.index > -1 && index === 0 ) {\n                    crumb.rotate = false;\n                    iconId = 'miscChevronLeftDouble';\n                }\n                if( crumb.visible === false ) {\n                    return null;\n                }\n\n                if( index === 0 ) {\n                    return (\n                        <div className='sw-breadcrumb-item' key={ crumb.displayName } ref={ ( el ) => attachingChildRef( el, index ) }>\n                            <AwBreadcrumbItem\n                                crumb={crumb}\n                                popuplist={popuplist}\n                                chevronClick={handleChevronClick}\n                                iconId={iconId}\n                                overflowedCrumbs={overflow.crumbs}\n                            ></AwBreadcrumbItem>\n                        </div>\n                    );\n                }\n                return (\n                    <div className='sw-breadcrumb-item' key={crumb.displayName}  ref={ ( el ) => attachingChildRef( el, index ) }>\n                        <AwBreadcrumbItem\n                            crumb={crumb}\n                            popuplist={popuplist}\n                            chevronClick={handleChevronClick}\n                            iconId={iconId}\n                        ></AwBreadcrumbItem>\n                    </div>\n                );\n            } );\n        }\n    };\n\n    const getClassNames = () => {\n        const classNames = [ 'aw-layout-fxbreadCrumbs', 'aw-layout-flexColumn' ];\n        if( compact ) {\n            classNames.push( 'aw-widgets-breadCrumbCompact' );\n        }\n        return classNames.join( ' ' );\n    };\n\n    const attachingParentRef = ( el ) => {\n        if( !ref.current ) {\n            ref.current = {};\n        }\n        ref.current.parentContainer = el;\n    };\n\n    if( ref.current && ref.current.resizeObserver === undefined ) {\n        //if no observer attached, attach one\n        attachResizeObserver( props.viewModel, props.elementRefList );\n    }\n\n    //If no crumbs defined, h1 remains empty so conditionally return h1\n    return (\n        crumbs && crumbs.length && <h1 className={getClassNames()} ref={ el => attachingParentRef( el ) }>\n            <div className='sw-row justify-left'>\n                {createCrumbs( crumbs )}\n            </div>\n        </h1>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
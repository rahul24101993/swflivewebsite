{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/resizeDetector\n */\nimport browserUtils from 'js/browserUtils'; // the timeout for element resize polling, only used for Firefox\n\nconst RESIZE_POLLING_TIMEOUT = 60000;\n\nlet checkResize = function (element, oldSize) {\n  let cb = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return function () {\n    let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let sizeChanged = false;\n    let width = element.offsetWidth;\n    let height = element.offsetHeight;\n\n    if (width !== oldSize.width || height !== oldSize.height) {\n      cb && cb(element, event);\n      oldSize = {\n        width,\n        height\n      };\n      sizeChanged = true;\n    }\n\n    return sizeChanged;\n  };\n};\n/**\n * Register resize detector on given element, the callback function will be called on element resized\n * @param {Element} el the element to detect size change\n * @param {Function} cb the callback function when size changed\n * @returns {Function} the cancel function to remove resize detector\n */\n\n\nlet resizeDetector = (el, cb) => {\n  // create iframe element and insert to the element detect the target element size change\n  var iframe = document.createElement('iframe'); //wcag accessibility compliance for iframe.\n\n  iframe.setAttribute('aria-hidden', 'true');\n  iframe.setAttribute('title', 'Pop up');\n  iframe.setAttribute('class', 'sw-popup-resizeDetector');\n  el.appendChild(iframe); // record size of current element\n\n  let oldSize = {\n    width: el.offsetWidth,\n    height: el.offsetHeight\n  };\n  let detector = checkResize(el, oldSize, cb);\n  let noResizeTimeStart = Date.now(); // as Firefox, IE doesn't support iframe resize event well, so use polling to detect size change\n\n  let resizeTimer;\n\n  if (browserUtils.isFirefox || browserUtils.isIE) {\n    resizeTimer = setInterval(() => {\n      if (detector()) {\n        noResizeTimeStart = Date.now();\n      } else {\n        let noResizeTime = Date.now() - noResizeTimeStart;\n        noResizeTime > RESIZE_POLLING_TIMEOUT && clearInterval(resizeTimer);\n      }\n    }, 50);\n  } else if (iframe.contentWindow) {\n    iframe.contentWindow.onresize = detector;\n  } // return the cancel function to remove size detector\n\n\n  return () => {\n    if (browserUtils.isFirefox || browserUtils.isIE) {\n      clearInterval(resizeTimer);\n    } else {\n      if (iframe.contentWindow) {\n        iframe.contentWindow.onresize = null;\n      }\n\n      el && el.removeChild(iframe);\n    }\n  };\n};\n\nexport { checkResize, resizeDetector };\nexport default resizeDetector;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/popup/src/js/resizeDetector.js"],"names":["RESIZE_POLLING_TIMEOUT","checkResize","cb","event","sizeChanged","width","element","height","oldSize","resizeDetector","iframe","document","el","offsetHeight","detector","noResizeTimeStart","Date","browserUtils","resizeTimer","setInterval","noResizeTime","clearInterval"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/resizeDetector\n */\nimport browserUtils from 'js/browserUtils';\n\n// the timeout for element resize polling, only used for Firefox\nconst RESIZE_POLLING_TIMEOUT = 60000;\n\n\nlet checkResize = ( element, oldSize, cb = null ) => {\n    return ( event = null ) => {\n        let sizeChanged = false;\n        let width = element.offsetWidth;\n        let height = element.offsetHeight;\n        if ( width !== oldSize.width || height !== oldSize.height ) {\n            cb && cb( element, event );\n            oldSize = { width, height };\n            sizeChanged = true;\n        }\n        return sizeChanged;\n    };\n};\n\n/**\n * Register resize detector on given element, the callback function will be called on element resized\n * @param {Element} el the element to detect size change\n * @param {Function} cb the callback function when size changed\n * @returns {Function} the cancel function to remove resize detector\n */\nlet resizeDetector = ( el, cb ) => {\n    // create iframe element and insert to the element detect the target element size change\n    var iframe = document.createElement( 'iframe' );\n    //wcag accessibility compliance for iframe.\n    iframe.setAttribute( 'aria-hidden', 'true' );\n    iframe.setAttribute( 'title', 'Pop up' );\n\n    iframe.setAttribute( 'class', 'sw-popup-resizeDetector' );\n    el.appendChild( iframe );\n\n    // record size of current element\n    let oldSize = { width: el.offsetWidth, height: el.offsetHeight };\n    let detector = checkResize( el, oldSize, cb );\n\n    let noResizeTimeStart = Date.now();\n    // as Firefox, IE doesn't support iframe resize event well, so use polling to detect size change\n    let resizeTimer;\n    if ( browserUtils.isFirefox || browserUtils.isIE ) {\n        resizeTimer = setInterval( () => {\n            if ( detector() ) {\n                noResizeTimeStart = Date.now();\n            } else {\n                let noResizeTime = Date.now() - noResizeTimeStart;\n                noResizeTime > RESIZE_POLLING_TIMEOUT && clearInterval( resizeTimer );\n            }\n        }, 50 );\n    } else if( iframe.contentWindow ) {\n        iframe.contentWindow.onresize = detector;\n    }\n\n    // return the cancel function to remove size detector\n    return () => {\n        if ( browserUtils.isFirefox || browserUtils.isIE ) {\n            clearInterval( resizeTimer );\n        } else {\n            if ( iframe.contentWindow ) { iframe.contentWindow.onresize = null; }\n            el && el.removeChild( iframe );\n        }\n    };\n};\n\nexport {\n    checkResize,\n    resizeDetector\n};\n\nexport default resizeDetector;\n"]},"metadata":{},"sourceType":"module"}
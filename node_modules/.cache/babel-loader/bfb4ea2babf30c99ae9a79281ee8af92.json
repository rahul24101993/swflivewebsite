{"ast":null,"code":"import viewModelObjectService from'js/viewModelObjectService';import cfgSvc from'js/configurationService';import workSvc from'js/workspaceService';import contextSvc from'js/contextContributionService';import _ from'lodash';import{includeComponent}from'js/moduleLoader';import appCtxService from'js/appCtxService';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const loadView=(viewname,idx)=>{return/*#__PURE__*/_jsx(\"div\",{children:includeComponent(viewname,{key:idx})});};const getContributedContextViews=(contextJson,workspaceContexts,anchor,ctx)=>{let filterContextList;let allActivePlacements=[];let sortedActiveList;let allContexts={};if(contextJson&&contextJson.contexts){let availContexts=Object.keys(contextJson.contexts);let allowedContexts=_.intersection(availContexts,workspaceContexts);if(allowedContexts&&allowedContexts.length>0){filterContextList=allowedContexts;}else{filterContextList=availContexts;}// get only active sortedlist\n_.forEach(filterContextList,function(contextId){let activePlacement=contextSvc.getAllPlacements(allContexts,contextJson.placements,contextId,{ctx:ctx});let isActivePlacementVisible=contextSvc.isPlacementVisible(activePlacement,{ctx:ctx});if(isActivePlacementVisible){let activeView=_.get(contextJson.contexts,contextId);let headerContri=_.assign(activePlacement,activeView);allActivePlacements.push(headerContri);}});let anchorFilteredList=_.filter(allActivePlacements,{anchor:anchor});sortedActiveList=_.sortBy(anchorFilteredList,'priority');return _.map(sortedActiveList,'view');}return[];};export const fetchContributedViews=async ctx=>{const workspaceContexts=ctx.workspace&&(await workSvc.getAvailableContexts(ctx.workspace.workspaceId));const contextJson=await cfgSvc.getCfg('contextConfiguration');return{workspaceContexts,contextJson};};export const registerUserInfo=ctx=>{if(ctx.user&&ctx.tcSessionData){const userVMO=viewModelObjectService.createViewModelObject(ctx.user);if(userVMO){appCtxService.registerCtx('user',userVMO);}}if(ctx.userSession&&ctx.userSession.uid){const userSession=viewModelObjectService.createViewModelObject(ctx.userSession.uid,'Edit');appCtxService.registerCtx('userSession',userSession);}};export const awContextControlRenderFunction=props=>{//revisitMe:\n//the ctxMin used in some complex method like conditionService.evaluateCondition() cause some issues\n//use ctxDeprecated to resolve them\nconst{ctxDeprecated,viewModel}=props;const{data}=viewModel;const contributedViews=data.contextJson&&getContributedContextViews(data.contextJson,data.workspaceContexts,props.anchor,ctxDeprecated);return/*#__PURE__*/_jsxs(\"div\",{className:\"sw-row flex-auto sw-contextControl\",children:[contributedViews&&contributedViews.map(loadView),props.children]});};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Thue module defines helpful shared APIs and constants used throughout the DeclarativeUI code base.\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/declModelRegistryService\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n/**\n * {ObjectMap} The current 'active' instances of a certain class.\n */\n\nvar _modelRegistry = {};\n/**\n * {Boolean} TRUE if create/destroy events for UwDataProviders should be logged.\n */\n\nvar _debug_logModelLifeCycle = false;\n/**\n */\n\nfunction _caseInsensitive(a, b) {\n  var nameA = a.toUpperCase(); // ignore upper and lowercase\n\n  var nameB = b.toUpperCase(); // ignore upper and lowercase\n\n  if (nameA < nameB) {\n    return -1;\n  }\n\n  if (nameA > nameB) {\n    return 1;\n  } // names must be equal\n\n\n  return 0;\n}\n/**\n * @param {String} operationName -\n *\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n *\n * @return {String}\n */\n\n\nfunction _buildStatusString(operationName, modelTypeIn, modelObj) {\n  var msg = '\\n';\n  msg += operationName;\n  msg += ' ';\n  msg += modelTypeIn;\n  msg += ': ';\n  msg += modelObj.toString();\n  msg += '\\n';\n  msg += 'Status:';\n  msg += '\\n';\n\n  _.forEach(_modelRegistry, function (modelTypeGroup, modelType) {\n    var keys = Object.keys(_modelRegistry[modelType]);\n    keys.sort(_caseInsensitive);\n    var first = true;\n    var totalActive = 0;\n\n    _.forEach(keys, function (key) {\n      if (key === 'nextId') {\n        return;\n      }\n\n      var modelStatus = modelTypeGroup[key];\n      var modelIds = Object.keys(modelStatus.members);\n\n      if (modelIds.length) {\n        if (first) {\n          msg += modelType;\n          msg += '\\n';\n          first = false;\n        }\n\n        var currLen = msg.length;\n        msg += '    ';\n        msg += key;\n\n        if ((msg.length - currLen) % 2 === 0) {\n          msg += ' ';\n        }\n\n        for (var ndx = msg.length; ndx < currLen + 44; ndx += 2) {\n          msg += '. ';\n        }\n\n        msg += ': ';\n        msg += modelIds.length;\n        msg += ' ';\n        msg += JSON.stringify(modelIds);\n        msg += '\\n';\n        totalActive += modelIds.length;\n      }\n    });\n\n    if (totalActive) {\n      msg += 'Total: ';\n      msg += totalActive;\n      msg += '\\n';\n    }\n  });\n\n  return msg;\n} // _buildStatusString\n\n/**\n * ---------------------------------------------------------------------------<BR>\n * Define the public API for the Service<BR>\n * ---------------------------------------------------------------------------<BR>\n */\n\n\nvar exports = {};\n/**\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n */\n\nexport let registerModel = function (modelType, modelObj, modelNamePath, modelIdPath) {\n  var modelTypeGroup = _modelRegistry[modelType];\n\n  if (!modelTypeGroup) {\n    modelTypeGroup = {\n      nextId: 0\n    };\n    _modelRegistry[modelType] = modelTypeGroup;\n  }\n\n  var modelName = _.get(modelObj, modelNamePath);\n\n  var modelStatus = modelTypeGroup[modelName];\n\n  if (!modelStatus) {\n    modelStatus = {\n      members: {}\n    };\n    modelTypeGroup[modelName] = modelStatus;\n  }\n\n  var modelId = _.get(modelObj, modelIdPath);\n\n  if (modelId >= 0) {\n    logger.info('registerModel: Attempt to double register: ' + modelObj);\n  } else {\n    var nextId = modelTypeGroup.nextId;\n    modelTypeGroup.nextId++;\n    modelStatus.members[nextId] = true;\n\n    _.set(modelObj, modelIdPath, nextId);\n  }\n\n  if (_debug_logModelLifeCycle) {\n    logger.info(_buildStatusString('Created', modelType, modelObj));\n  }\n};\n/**\n * @param {String} modelType - The type of model being unregistered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to unregister.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n */\n\nexport let unregisterModel = function (modelType, modelObj, modelNamePath, modelIdPath) {\n  var modelTypeGroup = _modelRegistry[modelType];\n\n  if (!modelTypeGroup) {\n    modelTypeGroup = {\n      nextId: 0\n    };\n    _modelRegistry[modelType] = modelTypeGroup;\n  }\n\n  var modelName = _.get(modelObj, modelNamePath);\n\n  var modelId = _.get(modelObj, modelIdPath);\n\n  var modelStatus = modelTypeGroup[modelName];\n\n  if (modelStatus) {\n    if (modelStatus.members[modelId]) {\n      delete modelStatus.members[modelId];\n    } else {\n      logger.info('unregisterModel: Model not found in the registry: ' + modelObj);\n    }\n  }\n\n  if (_debug_logModelLifeCycle) {\n    logger.info(_buildStatusString('Destroyed', modelType, modelObj));\n  }\n};\n/**\n * ---------------------------------------------------------------------------<BR>\n * Property & Function definition complete....Finish initialization. <BR>\n * ---------------------------------------------------------------------------<BR>\n */\n\nvar urlAttrs = browserUtils.getUrlAttributes();\n_debug_logModelLifeCycle = urlAttrs.logModelLifeCycle !== undefined;\nexports = {\n  registerModel,\n  unregisterModel\n};\nexport default exports;","map":{"version":3,"names":["_","browserUtils","logger","_modelRegistry","_debug_logModelLifeCycle","_caseInsensitive","a","b","nameA","toUpperCase","nameB","_buildStatusString","operationName","modelTypeIn","modelObj","msg","toString","forEach","modelTypeGroup","modelType","keys","Object","sort","first","totalActive","key","modelStatus","modelIds","members","length","currLen","ndx","JSON","stringify","exports","registerModel","modelNamePath","modelIdPath","nextId","modelName","get","modelId","info","set","unregisterModel","urlAttrs","getUrlAttributes","logModelLifeCycle","undefined"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/declModelRegistryService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Thue module defines helpful shared APIs and constants used throughout the DeclarativeUI code base.\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/declModelRegistryService\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n\n/**\n * {ObjectMap} The current 'active' instances of a certain class.\n */\nvar _modelRegistry = {};\n\n/**\n * {Boolean} TRUE if create/destroy events for UwDataProviders should be logged.\n */\nvar _debug_logModelLifeCycle = false;\n\n/**\n */\nfunction _caseInsensitive( a, b ) {\n    var nameA = a.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.toUpperCase(); // ignore upper and lowercase\n\n    if( nameA < nameB ) {\n        return -1;\n    }\n\n    if( nameA > nameB ) {\n        return 1;\n    }\n\n    // names must be equal\n    return 0;\n}\n\n/**\n * @param {String} operationName -\n *\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n *\n * @return {String}\n */\nfunction _buildStatusString( operationName, modelTypeIn, modelObj ) {\n    var msg = '\\n';\n    msg += operationName;\n    msg += ' ';\n    msg += modelTypeIn;\n    msg += ': ';\n    msg += modelObj.toString();\n    msg += '\\n';\n    msg += 'Status:';\n    msg += '\\n';\n\n    _.forEach( _modelRegistry, function( modelTypeGroup, modelType ) {\n        var keys = Object.keys( _modelRegistry[ modelType ] );\n\n        keys.sort( _caseInsensitive );\n\n        var first = true;\n        var totalActive = 0;\n\n        _.forEach( keys, function( key ) {\n            if( key === 'nextId' ) {\n                return;\n            }\n\n            var modelStatus = modelTypeGroup[ key ];\n\n            var modelIds = Object.keys( modelStatus.members );\n\n            if( modelIds.length ) {\n                if( first ) {\n                    msg += modelType;\n                    msg += '\\n';\n\n                    first = false;\n                }\n\n                var currLen = msg.length;\n\n                msg += '    ';\n                msg += key;\n\n                if( ( msg.length - currLen ) % 2 === 0 ) {\n                    msg += ' ';\n                }\n\n                for( var ndx = msg.length; ndx < currLen + 44; ndx += 2 ) {\n                    msg += '. ';\n                }\n\n                msg += ': ';\n                msg += modelIds.length;\n                msg += ' ';\n                msg += JSON.stringify( modelIds );\n                msg += '\\n';\n\n                totalActive += modelIds.length;\n            }\n        } );\n\n        if( totalActive ) {\n            msg += 'Total: ';\n            msg += totalActive;\n            msg += '\\n';\n        }\n    } );\n\n    return msg;\n} // _buildStatusString\n\n/**\n * ---------------------------------------------------------------------------<BR>\n * Define the public API for the Service<BR>\n * ---------------------------------------------------------------------------<BR>\n */\n\nvar exports = {};\n\n/**\n * @param {String} modelType - The type of model being registered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to register and allocate a unique ID for.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n *\n * @param {String} modelIdPath - The property path within the 'modelObj' to use when setting the allocated ID.\n */\nexport let registerModel = function( modelType, modelObj, modelNamePath, modelIdPath ) {\n    var modelTypeGroup = _modelRegistry[ modelType ];\n\n    if( !modelTypeGroup ) {\n        modelTypeGroup = {\n            nextId: 0\n        };\n\n        _modelRegistry[ modelType ] = modelTypeGroup;\n    }\n\n    var modelName = _.get( modelObj, modelNamePath );\n\n    var modelStatus = modelTypeGroup[ modelName ];\n\n    if( !modelStatus ) {\n        modelStatus = {\n            members: {}\n        };\n\n        modelTypeGroup[ modelName ] = modelStatus;\n    }\n\n    var modelId = _.get( modelObj, modelIdPath );\n\n    if( modelId >= 0 ) {\n        logger.info( 'registerModel: Attempt to double register: ' + modelObj );\n    } else {\n        var nextId = modelTypeGroup.nextId;\n        modelTypeGroup.nextId++;\n\n        modelStatus.members[ nextId ] = true;\n\n        _.set( modelObj, modelIdPath, nextId );\n    }\n\n    if( _debug_logModelLifeCycle ) {\n        logger.info( _buildStatusString( 'Created', modelType, modelObj ) );\n    }\n};\n\n/**\n * @param {String} modelType - The type of model being unregistered (e.g. 'DeclViewModel', 'UwDataProvider',\n *            etc.).\n *\n * @param {Object} modelObj - The model object to unregister.\n *\n * @param {Object} modelNamePath - The property path within the 'modelObj' of the name of the model object to\n *            register.\n */\nexport let unregisterModel = function( modelType, modelObj, modelNamePath, modelIdPath ) {\n    var modelTypeGroup = _modelRegistry[ modelType ];\n\n    if( !modelTypeGroup ) {\n        modelTypeGroup = {\n            nextId: 0\n        };\n\n        _modelRegistry[ modelType ] = modelTypeGroup;\n    }\n\n    var modelName = _.get( modelObj, modelNamePath );\n    var modelId = _.get( modelObj, modelIdPath );\n\n    var modelStatus = modelTypeGroup[ modelName ];\n\n    if( modelStatus ) {\n        if( modelStatus.members[ modelId ] ) {\n            delete modelStatus.members[ modelId ];\n        } else {\n            logger.info( 'unregisterModel: Model not found in the registry: ' + modelObj );\n        }\n    }\n\n    if( _debug_logModelLifeCycle ) {\n        logger.info( _buildStatusString( 'Destroyed', modelType, modelObj ) );\n    }\n};\n\n/**\n * ---------------------------------------------------------------------------<BR>\n * Property & Function definition complete....Finish initialization. <BR>\n * ---------------------------------------------------------------------------<BR>\n */\nvar urlAttrs = browserUtils.getUrlAttributes();\n\n_debug_logModelLifeCycle = urlAttrs.logModelLifeCycle !== undefined;\n\nexports = {\n    registerModel,\n    unregisterModel\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,EAArB;AAEA;AACA;AACA;;AACA,IAAIC,wBAAwB,GAAG,KAA/B;AAEA;AACA;;AACA,SAASC,gBAAT,CAA2BC,CAA3B,EAA8BC,CAA9B,EAAkC;EAC9B,IAAIC,KAAK,GAAGF,CAAC,CAACG,WAAF,EAAZ,CAD8B,CACD;;EAC7B,IAAIC,KAAK,GAAGH,CAAC,CAACE,WAAF,EAAZ,CAF8B,CAED;;EAE7B,IAAID,KAAK,GAAGE,KAAZ,EAAoB;IAChB,OAAO,CAAC,CAAR;EACH;;EAED,IAAIF,KAAK,GAAGE,KAAZ,EAAoB;IAChB,OAAO,CAAP;EACH,CAV6B,CAY9B;;;EACA,OAAO,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA6BC,aAA7B,EAA4CC,WAA5C,EAAyDC,QAAzD,EAAoE;EAChE,IAAIC,GAAG,GAAG,IAAV;EACAA,GAAG,IAAIH,aAAP;EACAG,GAAG,IAAI,GAAP;EACAA,GAAG,IAAIF,WAAP;EACAE,GAAG,IAAI,IAAP;EACAA,GAAG,IAAID,QAAQ,CAACE,QAAT,EAAP;EACAD,GAAG,IAAI,IAAP;EACAA,GAAG,IAAI,SAAP;EACAA,GAAG,IAAI,IAAP;;EAEAf,CAAC,CAACiB,OAAF,CAAWd,cAAX,EAA2B,UAAUe,cAAV,EAA0BC,SAA1B,EAAsC;IAC7D,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAajB,cAAc,CAAEgB,SAAF,CAA3B,CAAX;IAEAC,IAAI,CAACE,IAAL,CAAWjB,gBAAX;IAEA,IAAIkB,KAAK,GAAG,IAAZ;IACA,IAAIC,WAAW,GAAG,CAAlB;;IAEAxB,CAAC,CAACiB,OAAF,CAAWG,IAAX,EAAiB,UAAUK,GAAV,EAAgB;MAC7B,IAAIA,GAAG,KAAK,QAAZ,EAAuB;QACnB;MACH;;MAED,IAAIC,WAAW,GAAGR,cAAc,CAAEO,GAAF,CAAhC;MAEA,IAAIE,QAAQ,GAAGN,MAAM,CAACD,IAAP,CAAaM,WAAW,CAACE,OAAzB,CAAf;;MAEA,IAAID,QAAQ,CAACE,MAAb,EAAsB;QAClB,IAAIN,KAAJ,EAAY;UACRR,GAAG,IAAII,SAAP;UACAJ,GAAG,IAAI,IAAP;UAEAQ,KAAK,GAAG,KAAR;QACH;;QAED,IAAIO,OAAO,GAAGf,GAAG,CAACc,MAAlB;QAEAd,GAAG,IAAI,MAAP;QACAA,GAAG,IAAIU,GAAP;;QAEA,IAAI,CAAEV,GAAG,CAACc,MAAJ,GAAaC,OAAf,IAA2B,CAA3B,KAAiC,CAArC,EAAyC;UACrCf,GAAG,IAAI,GAAP;QACH;;QAED,KAAK,IAAIgB,GAAG,GAAGhB,GAAG,CAACc,MAAnB,EAA2BE,GAAG,GAAGD,OAAO,GAAG,EAA3C,EAA+CC,GAAG,IAAI,CAAtD,EAA0D;UACtDhB,GAAG,IAAI,IAAP;QACH;;QAEDA,GAAG,IAAI,IAAP;QACAA,GAAG,IAAIY,QAAQ,CAACE,MAAhB;QACAd,GAAG,IAAI,GAAP;QACAA,GAAG,IAAIiB,IAAI,CAACC,SAAL,CAAgBN,QAAhB,CAAP;QACAZ,GAAG,IAAI,IAAP;QAEAS,WAAW,IAAIG,QAAQ,CAACE,MAAxB;MACH;IACJ,CAtCD;;IAwCA,IAAIL,WAAJ,EAAkB;MACdT,GAAG,IAAI,SAAP;MACAA,GAAG,IAAIS,WAAP;MACAT,GAAG,IAAI,IAAP;IACH;EACJ,CArDD;;EAuDA,OAAOA,GAAP;AACH,C,CAAC;;AAEF;AACA;AACA;AACA;AACA;;;AAEA,IAAImB,OAAO,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUhB,SAAV,EAAqBL,QAArB,EAA+BsB,aAA/B,EAA8CC,WAA9C,EAA4D;EACnF,IAAInB,cAAc,GAAGf,cAAc,CAAEgB,SAAF,CAAnC;;EAEA,IAAI,CAACD,cAAL,EAAsB;IAClBA,cAAc,GAAG;MACboB,MAAM,EAAE;IADK,CAAjB;IAIAnC,cAAc,CAAEgB,SAAF,CAAd,GAA8BD,cAA9B;EACH;;EAED,IAAIqB,SAAS,GAAGvC,CAAC,CAACwC,GAAF,CAAO1B,QAAP,EAAiBsB,aAAjB,CAAhB;;EAEA,IAAIV,WAAW,GAAGR,cAAc,CAAEqB,SAAF,CAAhC;;EAEA,IAAI,CAACb,WAAL,EAAmB;IACfA,WAAW,GAAG;MACVE,OAAO,EAAE;IADC,CAAd;IAIAV,cAAc,CAAEqB,SAAF,CAAd,GAA8Bb,WAA9B;EACH;;EAED,IAAIe,OAAO,GAAGzC,CAAC,CAACwC,GAAF,CAAO1B,QAAP,EAAiBuB,WAAjB,CAAd;;EAEA,IAAII,OAAO,IAAI,CAAf,EAAmB;IACfvC,MAAM,CAACwC,IAAP,CAAa,gDAAgD5B,QAA7D;EACH,CAFD,MAEO;IACH,IAAIwB,MAAM,GAAGpB,cAAc,CAACoB,MAA5B;IACApB,cAAc,CAACoB,MAAf;IAEAZ,WAAW,CAACE,OAAZ,CAAqBU,MAArB,IAAgC,IAAhC;;IAEAtC,CAAC,CAAC2C,GAAF,CAAO7B,QAAP,EAAiBuB,WAAjB,EAA8BC,MAA9B;EACH;;EAED,IAAIlC,wBAAJ,EAA+B;IAC3BF,MAAM,CAACwC,IAAP,CAAa/B,kBAAkB,CAAE,SAAF,EAAaQ,SAAb,EAAwBL,QAAxB,CAA/B;EACH;AACJ,CAvCM;AAyCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI8B,eAAe,GAAG,UAAUzB,SAAV,EAAqBL,QAArB,EAA+BsB,aAA/B,EAA8CC,WAA9C,EAA4D;EACrF,IAAInB,cAAc,GAAGf,cAAc,CAAEgB,SAAF,CAAnC;;EAEA,IAAI,CAACD,cAAL,EAAsB;IAClBA,cAAc,GAAG;MACboB,MAAM,EAAE;IADK,CAAjB;IAIAnC,cAAc,CAAEgB,SAAF,CAAd,GAA8BD,cAA9B;EACH;;EAED,IAAIqB,SAAS,GAAGvC,CAAC,CAACwC,GAAF,CAAO1B,QAAP,EAAiBsB,aAAjB,CAAhB;;EACA,IAAIK,OAAO,GAAGzC,CAAC,CAACwC,GAAF,CAAO1B,QAAP,EAAiBuB,WAAjB,CAAd;;EAEA,IAAIX,WAAW,GAAGR,cAAc,CAAEqB,SAAF,CAAhC;;EAEA,IAAIb,WAAJ,EAAkB;IACd,IAAIA,WAAW,CAACE,OAAZ,CAAqBa,OAArB,CAAJ,EAAqC;MACjC,OAAOf,WAAW,CAACE,OAAZ,CAAqBa,OAArB,CAAP;IACH,CAFD,MAEO;MACHvC,MAAM,CAACwC,IAAP,CAAa,uDAAuD5B,QAApE;IACH;EACJ;;EAED,IAAIV,wBAAJ,EAA+B;IAC3BF,MAAM,CAACwC,IAAP,CAAa/B,kBAAkB,CAAE,WAAF,EAAeQ,SAAf,EAA0BL,QAA1B,CAA/B;EACH;AACJ,CA3BM;AA6BP;AACA;AACA;AACA;AACA;;AACA,IAAI+B,QAAQ,GAAG5C,YAAY,CAAC6C,gBAAb,EAAf;AAEA1C,wBAAwB,GAAGyC,QAAQ,CAACE,iBAAT,KAA+BC,SAA1D;AAEAd,OAAO,GAAG;EACNC,aADM;EAENS;AAFM,CAAV;AAIA,eAAeV,OAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/viewMode.service\n */\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nlet exports = {};\nexport let _viewModeContext = 'ViewModeContext';\nvar _availableViewModeContext = 'supportedViewModes';\n\nvar _getViewModeContext = function () {\n  var ctx = appCtxService.getCtx(_viewModeContext);\n  return ctx ? ctx : {};\n};\n/**\n * Change view mode\n *\n * @param {String} newViewMode - View mode key to change to.\n */\n\n\nexport let changeViewMode = function (viewMode) {\n  var currentCtx = _getViewModeContext();\n\n  currentCtx[_viewModeContext] = viewMode;\n  appCtxService.registerCtx(_viewModeContext, currentCtx);\n};\n/**\n * Get the current view mode\n *\n * @return {String} The current view mode\n */\n\nexport let getViewMode = function () {\n  return _getViewModeContext()[_viewModeContext];\n};\n/**\n * Update which view modes are supported\n *\n * @param {String[]} viewModes - View modes that are available. Converted to Object to make conditions easier.\n */\n\nexport let setAvailableViewModes = function (viewModes) {\n  var currentCtx = _getViewModeContext(); // Convert array to object - makes declarative conditions simpler\n\n\n  currentCtx[_availableViewModeContext] = {};\n\n  if (_.isArray(viewModes)) {\n    _.forEach(viewModes, function (x) {\n      currentCtx[_availableViewModeContext][x] = {};\n    });\n  }\n\n  appCtxService.updateCtx(_viewModeContext, currentCtx);\n};\n/**\n * Get the available view modes\n *\n * @return {String[]} The supported view modes\n */\n\nexport let getAvailableViewModes = function () {\n  var viewModes = _getViewModeContext()[_availableViewModeContext];\n\n  return viewModes ? Object.keys(viewModes) : [];\n};\nexports = {\n  changeViewMode,\n  getViewMode,\n  setAvailableViewModes,\n  getAvailableViewModes,\n  _viewModeContext\n};\nexport default exports;","map":{"version":3,"names":["appCtxService","_","exports","_viewModeContext","_availableViewModeContext","_getViewModeContext","ctx","getCtx","changeViewMode","viewMode","currentCtx","registerCtx","getViewMode","setAvailableViewModes","viewModes","isArray","forEach","x","updateCtx","getAvailableViewModes","Object","keys"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/viewMode.service.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/viewMode.service\n */\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\n\nlet exports = {};\n\nexport let _viewModeContext = 'ViewModeContext';\n\nvar _availableViewModeContext = 'supportedViewModes';\n\nvar _getViewModeContext = function() {\n    var ctx = appCtxService.getCtx( _viewModeContext );\n    return ctx ? ctx : {};\n};\n\n/**\n * Change view mode\n *\n * @param {String} newViewMode - View mode key to change to.\n */\nexport let changeViewMode = function( viewMode ) {\n    var currentCtx = _getViewModeContext();\n    currentCtx[ _viewModeContext ] = viewMode;\n    appCtxService.registerCtx( _viewModeContext, currentCtx );\n};\n\n/**\n * Get the current view mode\n *\n * @return {String} The current view mode\n */\nexport let getViewMode = function() {\n    return _getViewModeContext()[ _viewModeContext ];\n};\n\n/**\n * Update which view modes are supported\n *\n * @param {String[]} viewModes - View modes that are available. Converted to Object to make conditions easier.\n */\nexport let setAvailableViewModes = function( viewModes ) {\n    var currentCtx = _getViewModeContext();\n    // Convert array to object - makes declarative conditions simpler\n    currentCtx[ _availableViewModeContext ] = {};\n    if( _.isArray( viewModes ) ) {\n        _.forEach( viewModes, function( x ) {\n            currentCtx[ _availableViewModeContext ][ x ] = {};\n        } );\n    }\n    appCtxService.updateCtx( _viewModeContext, currentCtx );\n};\n\n/**\n * Get the available view modes\n *\n * @return {String[]} The supported view modes\n */\nexport let getAvailableViewModes = function() {\n    var viewModes = _getViewModeContext()[ _availableViewModeContext ];\n    return viewModes ? Object.keys( viewModes ) : [];\n};\n\nexports = {\n    changeViewMode,\n    getViewMode,\n    setAvailableViewModes,\n    getAvailableViewModes,\n    _viewModeContext\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,IAAIC,gBAAgB,GAAG,iBAAvB;AAEP,IAAIC,yBAAyB,GAAG,oBAAhC;;AAEA,IAAIC,mBAAmB,GAAG,YAAW;EACjC,IAAIC,GAAG,GAAGN,aAAa,CAACO,MAAd,CAAsBJ,gBAAtB,CAAV;EACA,OAAOG,GAAG,GAAGA,GAAH,GAAS,EAAnB;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIE,cAAc,GAAG,UAAUC,QAAV,EAAqB;EAC7C,IAAIC,UAAU,GAAGL,mBAAmB,EAApC;;EACAK,UAAU,CAAEP,gBAAF,CAAV,GAAiCM,QAAjC;EACAT,aAAa,CAACW,WAAd,CAA2BR,gBAA3B,EAA6CO,UAA7C;AACH,CAJM;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,WAAW,GAAG,YAAW;EAChC,OAAOP,mBAAmB,GAAIF,gBAAJ,CAA1B;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIU,qBAAqB,GAAG,UAAUC,SAAV,EAAsB;EACrD,IAAIJ,UAAU,GAAGL,mBAAmB,EAApC,CADqD,CAErD;;;EACAK,UAAU,CAAEN,yBAAF,CAAV,GAA0C,EAA1C;;EACA,IAAIH,CAAC,CAACc,OAAF,CAAWD,SAAX,CAAJ,EAA6B;IACzBb,CAAC,CAACe,OAAF,CAAWF,SAAX,EAAsB,UAAUG,CAAV,EAAc;MAChCP,UAAU,CAAEN,yBAAF,CAAV,CAAyCa,CAAzC,IAA+C,EAA/C;IACH,CAFD;EAGH;;EACDjB,aAAa,CAACkB,SAAd,CAAyBf,gBAAzB,EAA2CO,UAA3C;AACH,CAVM;AAYP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIS,qBAAqB,GAAG,YAAW;EAC1C,IAAIL,SAAS,GAAGT,mBAAmB,GAAID,yBAAJ,CAAnC;;EACA,OAAOU,SAAS,GAAGM,MAAM,CAACC,IAAP,CAAaP,SAAb,CAAH,GAA8B,EAA9C;AACH,CAHM;AAKPZ,OAAO,GAAG;EACNM,cADM;EAENI,WAFM;EAGNC,qBAHM;EAINM,qBAJM;EAKNhB;AALM,CAAV;AAOA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}
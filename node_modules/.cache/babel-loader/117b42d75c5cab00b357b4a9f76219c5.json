{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Service to load the allcontextsViewModel.json file from the consumption\n *\n * @module js/contextContributionService\n */\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxService from 'js/appCtxService';\nimport workspaceService from 'js/workspaceService';\nimport configurationService from 'js/configurationService';\nvar exports = {};\n/**\n * Find all  placement for the given context.\n *\n * @param {Object} allContexts - container to store the placements against context\n * @param {Object} placements - all placement\n * @param {Object} contextId - context view ID\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement for context.\n */\n\nexport let getAllPlacements = function (allContexts, placements, contextId, $scope) {\n  var dataOnCategoryType = _.filter(placements, {\n    contextId: contextId\n  }); // only single contribution\n\n\n  if (dataOnCategoryType && dataOnCategoryType.length === 1) {\n    return dataOnCategoryType[0];\n  } // the active placement\n\n\n  if (allContexts && allContexts.length > 0) {\n    var activePlacement = _.filter(allContexts, {\n      contextId: contextId\n    });\n\n    if (activePlacement) {\n      return activePlacement;\n    }\n  } else {\n    var placement = exports.findActivePlacement(dataOnCategoryType, $scope);\n    allContexts[contextId] = placement;\n    return placement;\n  }\n\n  return undefined;\n};\n/**\n * Check the visibility of the active placement\n *\n * @param {Object} placement placement for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most visibililty of placement.\n */\n\nexport let isPlacementVisible = function (placement, $scope) {\n  var isValidCondition = true;\n\n  if (placement && placement.hasOwnProperty('visibleWhen')) {\n    // Re-evaluate the visible when - condition change may have come from a different command bar\n    if (placement.visibleWhen.condition) {\n      var conditionExpression = _.get(placement, 'visibleWhen.condition');\n\n      isValidCondition = conditionService.evaluateCondition($scope, conditionExpression);\n    } else {\n      isValidCondition = _.get(placement, 'visibleWhen');\n    }\n  }\n\n  return isValidCondition;\n};\n/**\n * Find active placement for the given context..\n *\n * @param {Object} allPlacements - all placements for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\n\nexport let findActivePlacement = function (allPlacements, $scope) {\n  var mostAppropriateActionHandler = null;\n  var mostAppropriateConditionLength = -1;\n\n  _.forEach(allPlacements, function (placement) {\n    var conditions = _.get(placement, 'activeWhen.condition');\n\n    if (conditions) {\n      var isValidCondition = conditionService.evaluateCondition($scope, conditions);\n      var expressionLength = conditions.length;\n\n      if (_.isObject(conditions)) {\n        expressionLength = JSON.stringify(conditions).length;\n      }\n\n      if (isValidCondition && expressionLength > mostAppropriateConditionLength) {\n        mostAppropriateConditionLength = expressionLength;\n        mostAppropriateActionHandler = placement;\n      }\n    } else {\n      mostAppropriateActionHandler = placement;\n    }\n  });\n\n  return mostAppropriateActionHandler;\n};\n/**\n * Gets all of the currently visible placements.\n *\n * @return {Promise<Array>} Array of currently visible placemenst\n */\n\nexport const getVisiblePlacements = async function () {\n  const visiblePlacements = [];\n\n  if (!appCtxService.ctx.workspace || !appCtxService.ctx.workspace.workspaceId) {\n    await workspaceValidationService.setWorkspaceId();\n  }\n\n  const workspaceId = appCtxService.ctx.workspace.workspaceId;\n  const workspaceContexts = await workspaceService.getAvailableContexts(workspaceId);\n  const contextJson = await configurationService.getCfg('contextConfiguration');\n\n  if (contextJson.contexts) {\n    let filterContextList;\n    var availContexts = Object.keys(contextJson.contexts);\n\n    var allowedContexts = _.intersection(availContexts, workspaceContexts);\n\n    if (allowedContexts && allowedContexts.length > 0) {\n      filterContextList = allowedContexts;\n    } else {\n      filterContextList = availContexts;\n    } // get only active sortedlist\n\n\n    _.forEach(filterContextList, function (contextId) {\n      const AllContexts = {};\n      var activePlacement = getAllPlacements(AllContexts, contextJson.placements, contextId, {\n        ctx: appCtxService.ctx\n      });\n      var isActivePlacementVisible = isPlacementVisible(activePlacement, {\n        ctx: appCtxService.ctx\n      });\n\n      if (isActivePlacementVisible) {\n        visiblePlacements.push(activePlacement);\n      }\n    });\n  }\n\n  return visiblePlacements;\n};\nexports = {\n  getAllPlacements,\n  isPlacementVisible,\n  findActivePlacement,\n  getVisiblePlacements\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/contextContributionService.js"],"names":["exports","getAllPlacements","dataOnCategoryType","contextId","allContexts","activePlacement","placement","isPlacementVisible","isValidCondition","conditionExpression","_","conditionService","findActivePlacement","mostAppropriateActionHandler","mostAppropriateConditionLength","conditions","expressionLength","JSON","getVisiblePlacements","visiblePlacements","appCtxService","workspaceValidationService","workspaceId","workspaceContexts","workspaceService","contextJson","configurationService","availContexts","Object","allowedContexts","filterContextList","AllContexts","ctx","isActivePlacementVisible"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Service to load the allcontextsViewModel.json file from the consumption\n *\n * @module js/contextContributionService\n */\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxService from 'js/appCtxService';\nimport workspaceService from 'js/workspaceService';\nimport configurationService from 'js/configurationService';\n\nvar exports = {};\n\n/**\n * Find all  placement for the given context.\n *\n * @param {Object} allContexts - container to store the placements against context\n * @param {Object} placements - all placement\n * @param {Object} contextId - context view ID\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement for context.\n */\nexport let getAllPlacements = function( allContexts, placements, contextId, $scope ) {\n    var dataOnCategoryType = _.filter( placements, {\n        contextId: contextId\n    } );\n\n    // only single contribution\n\n    if( dataOnCategoryType && dataOnCategoryType.length === 1 ) {\n        return dataOnCategoryType[ 0 ];\n    }\n\n    // the active placement\n\n    if( allContexts && allContexts.length > 0 ) {\n        var activePlacement = _.filter( allContexts, {\n            contextId: contextId\n        } );\n\n        if( activePlacement ) {\n            return activePlacement;\n        }\n    } else {\n        var placement = exports.findActivePlacement( dataOnCategoryType, $scope );\n\n        allContexts[ contextId ] = placement;\n\n        return placement;\n    }\n    return undefined;\n};\n\n/**\n * Check the visibility of the active placement\n *\n * @param {Object} placement placement for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most visibililty of placement.\n */\nexport let isPlacementVisible = function( placement, $scope ) {\n    var isValidCondition = true;\n\n    if( placement && placement.hasOwnProperty( 'visibleWhen' ) ) {\n        // Re-evaluate the visible when - condition change may have come from a different command bar\n        if( placement.visibleWhen.condition ) {\n            var conditionExpression = _.get( placement, 'visibleWhen.condition' );\n\n            isValidCondition = conditionService.evaluateCondition( $scope, conditionExpression );\n        } else {\n            isValidCondition = _.get( placement, 'visibleWhen' );\n        }\n    }\n\n    return isValidCondition;\n};\n\n/**\n * Find active placement for the given context..\n *\n * @param {Object} allPlacements - all placements for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\nexport let findActivePlacement = function( allPlacements, $scope ) {\n    var mostAppropriateActionHandler = null;\n    var mostAppropriateConditionLength = -1;\n\n    _.forEach( allPlacements, function( placement ) {\n        var conditions = _.get( placement, 'activeWhen.condition' );\n        if( conditions ) {\n            var isValidCondition = conditionService.evaluateCondition( $scope, conditions );\n            var expressionLength = conditions.length;\n            if( _.isObject( conditions ) ) {\n                expressionLength = JSON.stringify( conditions ).length;\n            }\n            if( isValidCondition &&\n                expressionLength > mostAppropriateConditionLength ) {\n                mostAppropriateConditionLength = expressionLength;\n                mostAppropriateActionHandler = placement;\n            }\n        } else {\n            mostAppropriateActionHandler = placement;\n        }\n    } );\n    return mostAppropriateActionHandler;\n};\n\n/**\n * Gets all of the currently visible placements.\n *\n * @return {Promise<Array>} Array of currently visible placemenst\n */\nexport const getVisiblePlacements = async function() {\n    const visiblePlacements = [];\n    if( !appCtxService.ctx.workspace || !appCtxService.ctx.workspace.workspaceId ) {\n        await workspaceValidationService.setWorkspaceId();\n    }\n\n    const workspaceId = appCtxService.ctx.workspace.workspaceId;\n    const workspaceContexts = await workspaceService.getAvailableContexts( workspaceId );\n\n    const contextJson = await configurationService.getCfg( 'contextConfiguration' );\n    if( contextJson.contexts ) {\n        let filterContextList;\n        var availContexts = Object.keys( contextJson.contexts );\n        var allowedContexts = _.intersection( availContexts, workspaceContexts );\n\n        if( allowedContexts && allowedContexts.length > 0 ) {\n            filterContextList = allowedContexts;\n        } else {\n            filterContextList = availContexts;\n        }\n\n        // get only active sortedlist\n        _.forEach( filterContextList, function( contextId ) {\n            const AllContexts = {};\n            var activePlacement = getAllPlacements( AllContexts, contextJson.placements, contextId, { ctx: appCtxService.ctx } );\n            var isActivePlacementVisible = isPlacementVisible( activePlacement, { ctx: appCtxService.ctx } );\n            if( isActivePlacementVisible ) {\n                visiblePlacements.push( activePlacement );\n            }\n        } );\n    }\n    return visiblePlacements;\n};\n\nexports = {\n    getAllPlacements,\n    isPlacementVisible,\n    findActivePlacement,\n    getVisiblePlacements\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
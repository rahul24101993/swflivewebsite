{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwTabSetService.js\";\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport conditionService from 'js/conditionService';\nimport AwTabContainer from 'viewmodel/AwTabContainerViewModel';\nimport AwCommandSubPanel from 'viewmodel/AwCommandSubPanelViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport { ShowWhen } from 'js/hocCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AwShowWhenProvider = ShowWhen(AwCommandSubPanel);\n/**\n * Method to publish analytics to server\n * @param {Number} tabModelId - id of the clicked tab\n * @param {String} tabModelName - name of the clicked tab\n */\n\n_c2 = AwShowWhenProvider;\n_c = AwShowWhenProvider;\n\nconst publishAnalytics = (tabModelId, tabModelName) => {\n  let sanEventData = {\n    sanAnalyticsType: 'Tab',\n    sanCommandId: tabModelId,\n    sanCommandTitle: tabModelName\n  };\n  analyticsSvc.logCommands(sanEventData);\n};\n\nconst evaluateTabConditions = (tab, conditions, evaluationEnvironment, expName) => {\n  if (typeof tab[expName] === 'object') {\n    const conditionName = tab[expName].condition.slice(11);\n    return conditions[conditionName];\n  }\n\n  return conditionService.parseExpression({}, tab[expName], evaluationEnvironment);\n};\n\nconst createTabsModel = (tabs, conditions, evaluationEnvironment, manullySelectedTabId) => {\n  return tabs.map(tab => {\n    //Assuming name will be unique\n    tab.pageId = tab.tabKey || tab.pageId || tab.panelId || tab.name;\n    tab.displayTab = true;\n\n    if (manullySelectedTabId) {\n      tab.selectedTab = manullySelectedTabId === tab.pageId || false;\n    } else {\n      tab.selectedTab = tab.selectedTab === true || false;\n      tab.autoSelectTabOnLoad = tab.selectedTab === true || false;\n    }\n\n    if (tab.visibleWhen && !evaluateTabConditions(tab, conditions, evaluationEnvironment, 'visibleWhen')) {\n      tab.displayTab = false;\n    }\n\n    if (!manullySelectedTabId && tab.selectWhen) {\n      if (evaluateTabConditions(tab, conditions, evaluationEnvironment, 'selectWhen')) {\n        tab.selectedTab = true;\n      } else {\n        tab.selectedTab = false;\n      }\n    }\n\n    return tab;\n  });\n};\n\nexport const updateTabSelection = declViewModel => {\n  const {\n    data,\n    dispatch,\n    eventData\n  } = declViewModel;\n\n  const tabToSelect = _.find(data.tabsModel, tab => {\n    return tab.tabKey && eventData && tab.tabKey === eventData.tabKey || tab.pageId && tab.pageId === eventData.pageId || tab.panelId && tab.panelId === eventData.panelId;\n  });\n\n  if (tabToSelect && data.manullySelectedTabId !== tabToSelect.pageId) {\n    data.tabsModel = data.tabsModel.map(tab => {\n      if (tab.pageId === tabToSelect.pageId) {\n        tab.selectedTab = true;\n      } else {\n        tab.selectedTab = false;\n      }\n\n      return tab;\n    });\n    dispatch({\n      path: 'data',\n      value: { ...data\n      }\n    });\n  }\n};\nexport const awTabSetRenderFunction = props => {\n  const {\n    tabs,\n    updateHook,\n    action,\n    closeAction,\n    subPanelContext,\n    viewModel,\n    ctx\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  const {\n    conditions\n  } = updateHook;\n  const evaluationEnvironment = {\n    ctx: ctx,\n    data: updateHook.data\n  };\n\n  const loadSubPanels = props => {\n    const {\n      ctx,\n      ctxMin,\n      viewModel,\n      actions,\n      i18n,\n      fields,\n      grids,\n      formProp,\n      messages,\n      ...prop\n    } = props;\n    let pData = updateHook.data;\n\n    if (!action && pData) {\n      let selectedTab = pData.selectedTab || {};\n      return data.tabsModel.map(subPanel => {\n        let panelId = subPanel.panelId;\n\n        if (panelId) {\n          let reCreatePanel = subPanel.recreatePanel || false;\n          let condition = reCreatePanel ? selectedTab.panelId === panelId : true; //const currentPanel = subPanelContext.pData.activeView !== panelId ? subPanelContext.pData.activeView : currentPanel;\n\n          return condition && /*#__PURE__*/_jsxDEV(AwShowWhenProvider, {\n            showWhen: selectedTab.panelId === panelId,\n            panelId: panelId,\n            ...prop\n          }, panelId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 38\n          }, this);\n        }\n      });\n    }\n  };\n\n  const selectTab = (pageId, pageName) => {\n    let tabToSelect = data.tabsModel.find(tab => tab.pageId === pageId);\n\n    if (tabToSelect && (!updateHook.data.selectedTab || updateHook.data.selectedTab && !_.isEqual(updateHook.data.selectedTab.pageId, pageId))) {\n      tabToSelect.selectedTab = true;\n      updateHook.data.selectedTab = tabToSelect;\n      updateHook.data.pageId = tabToSelect.pageId;\n      updateHook.data.tabTitle = tabToSelect.name;\n      updateHook.data.manullySelectedTabId = tabToSelect.pageId;\n      updateHook.dispatch({\n        path: 'data',\n        value: { ...updateHook.data\n        }\n      });\n\n      if (action) {\n        //Component updating the parent, is an anti-pattern but needed for backward compatibility\n        //Revisit: This event used to pass $scope as eventData, what is the replacement for the same\n        props.action();\n      }\n\n      publishAnalytics(tabToSelect.pageId, tabToSelect.name);\n      eventBus.publish('awTab.selected', {//scope: $scope\n      });\n    }\n  };\n\n  const compareTabSelections = oriTabs => {\n    let isEqual = true;\n\n    for (let oriTab of origTabs) {\n      if (oriTab.selectedTab === undefined) {\n        isEqual = false;\n        break;\n      }\n    }\n\n    return isEqual;\n  };\n\n  const onTabClose = async closedTab => {\n    if (closeAction) {\n      closeAction({\n        closedTab: closedTab\n      });\n    }\n  };\n\n  let origTabs = _.cloneDeep(tabs);\n\n  data.tabsModel = createTabsModel(tabs, conditions, evaluationEnvironment, data.manullySelectedTabId);\n\n  if (!compareTabSelections(origTabs)) {\n    dispatch({\n      path: 'data',\n      value: { ...data\n      }\n    });\n  }\n\n  data.manullySelectedTabId = null;\n  const visibleTabs = data.tabsModel.filter(tab => tab.displayTab === true);\n  const cmdSubPanelBased = data.tabsModel.filter(tab => tab.hasOwnProperty('panelId')).length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-column sw-tabSet\",\n    children: [/*#__PURE__*/_jsxDEV(AwTabContainer, {\n      tabsModel: visibleTabs,\n      callback: selectTab,\n      tabSetId: props.tabSetId ? props.tabSetId : null,\n      onTabClose: onTabClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-jswidget-tabPage sw-column vw-100\",\n        children: [props.children, cmdSubPanelBased && loadSubPanels(props)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AwShowWhenProvider\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"AwShowWhenProvider\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwTabSetService.js"],"names":["AwShowWhenProvider","ShowWhen","publishAnalytics","sanEventData","sanAnalyticsType","sanCommandId","sanCommandTitle","tabModelName","analyticsSvc","evaluateTabConditions","tab","conditionName","conditions","conditionService","createTabsModel","manullySelectedTabId","updateTabSelection","declViewModel","eventData","tabToSelect","data","dispatch","path","value","awTabSetRenderFunction","props","ctx","evaluationEnvironment","updateHook","loadSubPanels","prop","pData","selectedTab","subPanel","panelId","reCreatePanel","condition","selectTab","_","eventBus","compareTabSelections","oriTabs","isEqual","oriTab","onTabClose","closeAction","closedTab","origTabs","visibleTabs","cmdSubPanelBased"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport conditionService from 'js/conditionService';\nimport AwTabContainer from 'viewmodel/AwTabContainerViewModel';\nimport AwCommandSubPanel from 'viewmodel/AwCommandSubPanelViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport { ShowWhen } from 'js/hocCollection';\n\nconst AwShowWhenProvider = ShowWhen( AwCommandSubPanel );\n\n/**\n * Method to publish analytics to server\n * @param {Number} tabModelId - id of the clicked tab\n * @param {String} tabModelName - name of the clicked tab\n */\nconst publishAnalytics = ( tabModelId, tabModelName ) => {\n    let sanEventData = {\n        sanAnalyticsType: 'Tab',\n        sanCommandId: tabModelId,\n        sanCommandTitle: tabModelName\n    };\n    analyticsSvc.logCommands( sanEventData );\n};\n\nconst evaluateTabConditions = ( tab, conditions, evaluationEnvironment, expName ) => {\n    if( typeof tab[ expName ] === 'object' ) {\n        const conditionName = tab[ expName ].condition.slice( 11 );\n        return conditions[ conditionName ];\n    }\n    return conditionService.parseExpression( {}, tab[ expName ], evaluationEnvironment );\n};\n\nconst createTabsModel = ( tabs, conditions, evaluationEnvironment, manullySelectedTabId ) => {\n    return tabs.map( tab => {\n        //Assuming name will be unique\n        tab.pageId = tab.tabKey || tab.pageId || tab.panelId || tab.name;\n        tab.displayTab = true;\n        if( manullySelectedTabId ) {\n            tab.selectedTab = manullySelectedTabId === tab.pageId || false;\n        } else {\n            tab.selectedTab = tab.selectedTab === true || false;\n            tab.autoSelectTabOnLoad = tab.selectedTab === true || false;\n        }\n        if( tab.visibleWhen && !evaluateTabConditions( tab, conditions, evaluationEnvironment, 'visibleWhen' ) ) {\n            tab.displayTab = false;\n        }\n        if( !manullySelectedTabId && tab.selectWhen ) {\n            if( evaluateTabConditions( tab, conditions, evaluationEnvironment, 'selectWhen' ) ) {\n                tab.selectedTab = true;\n            } else {\n                tab.selectedTab = false;\n            }\n        }\n        return tab;\n    } );\n};\n\nexport const updateTabSelection = ( declViewModel ) => {\n    const { data, dispatch, eventData } = declViewModel;\n    const tabToSelect = _.find( data.tabsModel, ( tab ) => {\n        return tab.tabKey && eventData && tab.tabKey === eventData.tabKey || tab.pageId &&\n            tab.pageId === eventData.pageId || tab.panelId &&\n            tab.panelId === eventData.panelId;\n    } );\n\n    if( tabToSelect && data.manullySelectedTabId !== tabToSelect.pageId ) {\n        data.tabsModel = data.tabsModel.map( ( tab ) => {\n            if( tab.pageId === tabToSelect.pageId ) {\n                tab.selectedTab = true;\n            } else {\n                tab.selectedTab = false;\n            }\n            return tab;\n        } );\n        dispatch( { path: 'data', value: { ...data } } );\n    }\n};\n\nexport const awTabSetRenderFunction = ( props ) => {\n    const { tabs, updateHook, action, closeAction, subPanelContext, viewModel, ctx } = props;\n    const { data, dispatch } = viewModel;\n    const { conditions } = updateHook;\n    const evaluationEnvironment = {\n        ctx: ctx,\n        data: updateHook.data\n    };\n\n    const loadSubPanels = ( props ) => {\n        const { ctx, ctxMin, viewModel, actions, i18n, fields, grids, formProp, messages, ...prop } = props;\n        let pData = updateHook.data;\n        if( !action && pData ) {\n            let selectedTab = pData.selectedTab || {};\n            return data.tabsModel.map( ( subPanel ) => {\n                let panelId = subPanel.panelId;\n                if( panelId ) {\n                    let reCreatePanel = subPanel.recreatePanel || false;\n                    let condition = reCreatePanel ? selectedTab.panelId === panelId : true;\n                    //const currentPanel = subPanelContext.pData.activeView !== panelId ? subPanelContext.pData.activeView : currentPanel;\n                    return (\n                        condition && <AwShowWhenProvider\n                            showWhen= {selectedTab.panelId === panelId}\n                            key={panelId}\n                            panelId = {panelId}\n                            {...prop}>\n                        </AwShowWhenProvider>\n                    );\n                }\n            } );\n        }\n    };\n\n    const selectTab = ( pageId, pageName ) => {\n        let tabToSelect = data.tabsModel.find( tab => tab.pageId === pageId );\n\n        if(  tabToSelect && ( !updateHook.data.selectedTab || updateHook.data.selectedTab && !_.isEqual( updateHook.data.selectedTab.pageId, pageId ) ) ) {\n            tabToSelect.selectedTab = true;\n            updateHook.data.selectedTab = tabToSelect;\n            updateHook.data.pageId = tabToSelect.pageId;\n            updateHook.data.tabTitle = tabToSelect.name;\n            updateHook.data.manullySelectedTabId = tabToSelect.pageId;\n            updateHook.dispatch( { path: 'data', value: { ...updateHook.data } } );\n            if( action ) {\n                //Component updating the parent, is an anti-pattern but needed for backward compatibility\n                //Revisit: This event used to pass $scope as eventData, what is the replacement for the same\n                props.action();\n            }\n            publishAnalytics( tabToSelect.pageId, tabToSelect.name );\n            eventBus.publish( 'awTab.selected', {\n                //scope: $scope\n            } );\n        }\n    };\n\n    const compareTabSelections = ( oriTabs ) => {\n        let isEqual = true;\n        for( let oriTab of origTabs ) {\n            if( oriTab.selectedTab === undefined ) {\n                isEqual = false;\n                break;\n            }\n        }\n        return isEqual;\n    };\n\n    const onTabClose = async( closedTab ) => {\n        if( closeAction ) {\n            closeAction( { closedTab: closedTab } );\n        }\n    };\n\n    let origTabs = _.cloneDeep( tabs );\n\n    data.tabsModel = createTabsModel( tabs, conditions, evaluationEnvironment, data.manullySelectedTabId );\n\n    if( !compareTabSelections( origTabs ) ) {\n        dispatch( { path: 'data', value: { ...data } } );\n    }\n\n    data.manullySelectedTabId = null;\n    const visibleTabs = data.tabsModel.filter( tab => tab.displayTab === true );\n    const cmdSubPanelBased = data.tabsModel.filter( tab => tab.hasOwnProperty( 'panelId' ) ).length > 0;\n\n    return (\n        <div className='sw-column sw-tabSet'>\n            <AwTabContainer tabsModel={visibleTabs} callback={selectTab} tabSetId={props.tabSetId ? props.tabSetId : null} onTabClose={onTabClose}></AwTabContainer>\n            <div className='sw-row'>\n                <div className='aw-jswidget-tabPage sw-column vw-100'>\n                    {props.children}\n                    {cmdSubPanelBased && loadSubPanels( props )}\n                </div>\n            </div>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
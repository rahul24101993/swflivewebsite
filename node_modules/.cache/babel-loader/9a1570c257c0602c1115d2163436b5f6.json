{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /**\n * This utility module provides helpful functions intended to efficiently manipulate pltable contents.\n *\n * @module js/splmStatsUtils\n */let _reportAnalytics=false;let _locationInformation=null;/**\n * @returns {Integer} Number of DOM elements on the page\n */export function getDomElementsCount(){return document.body.getElementsByTagName('*').length;}/**\n * Gets now\n * @returns {DOMHighResTimeStamp} performance.now()\n */export function now(){if(window.performance){return window.performance.now();}return Date.now();}/**\n * Checks to see if splmAnalytics are enabled or not\n * @returns {Boolean} Analytics disabled?\n */export function isAnalyticsDisabled(){const optOut=localStorage.getItem('AW_SAN_OPTOUT');const doDisable=localStorage.getItem('AW_SAN_DO_DISABLE');return!(optOut==='false'&&doDisable==='false');}// simple impl for logger\nexport const logger={// eslint-disable-next-line no-console\nlog:console.log,// eslint-disable-next-line no-console\nwarn:console.warn,// eslint-disable-next-line no-console\nerror:console.error};/**\n * Checks if browser is IE. TRUE if browser is IE\n */export const isIE=window.navigator.userAgent.search(/(trident|edge)/i)>-1;/**\n * Returns the browser type and the version of that browser as a string\n *\n * https://stackoverflow.com/questions/2400935/browser-detection-in-javascript\n */export const getBrowserType=function(){let ua=navigator.userAgent;let tem=null;let M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i)||[];if(/trident/i.test(M[1])){tem=/\\brv[ :]+(\\d+)/g.exec(ua)||[];return'IE '+(tem[1]||'');}if(M[1]==='Chrome'){tem=ua.match(/\\b(OPR|Edge)\\/(\\d+)/);if(tem!==null){return tem.slice(1).join(' ').replace('OPR','Opera');}}M=M[2]?[M[1],M[2]]:[navigator.appName,navigator.appVersion,'-?'];if((tem=ua.match(/version\\/(\\d+)/i))!==null){M.splice(1,1,tem[1]);}return M.join(' ');};/**\n * Recursive function to find the greatest depth for a given element\n *\n * @param {HTMLElement} elem - Element we want to traverse to find the biggest DOM Depth underneath\n * @param {Integer} level - Current level we are at\n *\n * @returns {Integer} Max depth under a given element\n */export const getDomTreeDepth=function(elem,level){if(!elem.children||elem.children.length===0){return level;}let max=0;for(let currentChild of elem.children){let temp=getDomTreeDepth(currentChild,level+1);if(max<temp){max=temp;}}return max;};export const getReportAnalytics=function(){return _reportAnalytics;};export const setReportAnalytics=function(val){_reportAnalytics=val;};export const setLocationInformation=function(val){_locationInformation=val;};export const getLocationInformation=function(){return _locationInformation;};export default{getDomElementsCount,now,isAnalyticsDisabled,logger,isIE,getBrowserType,getDomTreeDepth,getReportAnalytics,setReportAnalytics,setLocationInformation,getLocationInformation};","map":null,"metadata":{},"sourceType":"module"}
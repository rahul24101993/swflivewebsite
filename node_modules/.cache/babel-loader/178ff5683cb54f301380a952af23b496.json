{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * TODO\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/awFileService\n */\n\n/**\n * Get file name from path\n *\n * @param {String} filePath - The file path to get\n *\n * @return {String} file name\n */\nexport let getFileFromPath = function (filePath) {\n  if (filePath !== null) {\n    let seperatorIndex = filePath.lastIndexOf('\\\\');\n\n    if (seperatorIndex === -1) {\n      seperatorIndex = filePath.lastIndexOf('/');\n    }\n\n    return filePath.substring(seperatorIndex + 1);\n  }\n\n  return null;\n};\n/**\n * Get file name without extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name without extension\n */\n\nexport let getFileNameWithoutExtension = function (fileName) {\n  const extIndex = fileName.lastIndexOf('.');\n\n  if (extIndex > -1) {\n    return fileName.substring(0, extIndex);\n  }\n\n  return fileName;\n};\n/**\n * Get file name extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name extension\n */\n\nexport let getFileExtension = function (fileName) {\n  const extIndex = fileName.lastIndexOf('.');\n\n  if (extIndex > -1) {\n    return fileName.substring(extIndex);\n  }\n\n  return '';\n};\n/**\n * Look for support of the 'files' in the 'dataTranfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.\n */\n\nexport let dataTransferContainsFiles = function (event) {\n  if (event.dataTransfer) {\n    const types = event.dataTransfer.types;\n\n    if (types) {\n      for (let i = 0; i < types.length; ++i) {\n        if (types[i] === 'Files') {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * check if the current file extension match the filter types.\n *\n * @param {String } typeFilter - The types that file need match .\n * @param {String } fileExt - The file need match .\n *\n * @return {boolean} TRUE if the 'file' match the 'typeFilter'.\n */\n\nexport let fileMatchTypes = function (typeFilter, fileExt) {\n  if (typeFilter) {\n    const validFileExtensions = typeFilter.split(',');\n\n    if (fileExt !== '') {\n      fileExt = fileExt.replace('.', '');\n    }\n\n    for (let ndx = 0; ndx < validFileExtensions.length; ndx++) {\n      let validFileExt = validFileExtensions[ndx].trim();\n\n      if (validFileExt !== null) {\n        validFileExt = validFileExt.replace('.', '');\n\n        if (fileExt !== '' && fileExt.toLowerCase() === validFileExt.toLowerCase()) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return true;\n};\nexport default {\n  getFileFromPath,\n  getFileNameWithoutExtension,\n  getFileExtension,\n  dataTransferContainsFiles,\n  fileMatchTypes\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awFileService.js"],"names":["getFileFromPath","filePath","seperatorIndex","getFileNameWithoutExtension","extIndex","fileName","getFileExtension","dataTransferContainsFiles","event","types","i","fileMatchTypes","validFileExtensions","typeFilter","fileExt","ndx","validFileExt"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/**\n * TODO\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/awFileService\n */\n\n/**\n * Get file name from path\n *\n * @param {String} filePath - The file path to get\n *\n * @return {String} file name\n */\nexport let getFileFromPath = function( filePath ) {\n    if( filePath !== null ) {\n        let seperatorIndex = filePath.lastIndexOf( '\\\\' );\n        if( seperatorIndex === -1 ) {\n            seperatorIndex = filePath.lastIndexOf( '/' );\n        }\n        return filePath.substring( seperatorIndex + 1 );\n    }\n\n    return null;\n};\n\n/**\n * Get file name without extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name without extension\n */\nexport let getFileNameWithoutExtension = function( fileName ) {\n    const extIndex = fileName.lastIndexOf( '.' );\n    if( extIndex > -1 ) {\n        return fileName.substring( 0, extIndex );\n    }\n    return fileName;\n};\n\n/**\n * Get file name extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name extension\n */\nexport let getFileExtension = function( fileName ) {\n    const extIndex = fileName.lastIndexOf( '.' );\n    if( extIndex > -1 ) {\n        return fileName.substring( extIndex );\n    }\n    return '';\n};\n\n/**\n * Look for support of the 'files' in the 'dataTranfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.\n */\nexport let dataTransferContainsFiles = function( event ) {\n    if( event.dataTransfer ) {\n        const types = event.dataTransfer.types;\n\n        if( types ) {\n            for( let i = 0; i < types.length; ++i ) {\n                if( types[ i ] === 'Files' ) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n\n/**\n * check if the current file extension match the filter types.\n *\n * @param {String } typeFilter - The types that file need match .\n * @param {String } fileExt - The file need match .\n *\n * @return {boolean} TRUE if the 'file' match the 'typeFilter'.\n */\nexport let fileMatchTypes = function( typeFilter, fileExt ) {\n    if( typeFilter ) {\n        const validFileExtensions = typeFilter.split( ',' );\n        if( fileExt !== '' ) {\n            fileExt = fileExt.replace( '.', '' );\n        }\n        for( let ndx = 0; ndx < validFileExtensions.length; ndx++ ) {\n            let validFileExt = validFileExtensions[ ndx ].trim();\n            if( validFileExt !== null ) {\n                validFileExt = validFileExt.replace( '.', '' );\n                if( fileExt !== '' &&\n                    fileExt.toLowerCase() === validFileExt.toLowerCase() ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    return true;\n};\n\nexport default {\n    getFileFromPath,\n    getFileNameWithoutExtension,\n    getFileExtension,\n    dataTransferContainsFiles,\n    fileMatchTypes\n};\n"]},"metadata":{},"sourceType":"module"}
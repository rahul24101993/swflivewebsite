{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwCommandService.js\"; // Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwCommandService\n */\n\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst publishAnalytics = command => {\n  let commandLogData = {\n    sanAnalyticsType: 'Commands',\n    sanCommandId: command.id,\n    sanCommandTitle: command.title\n  };\n  analyticsSvc.logCommands(commandLogData);\n};\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\n\nexport const awCommandRenderFunction = _ref => {\n  let {\n    visibilityLoader,\n    viewModel: {\n      dispatch,\n      data: {\n        isCommandExecuting\n      }\n    },\n    command,\n    commandContext,\n    ctx,\n    ctxMin: {\n      commandClass\n    },\n    runActionWithViewModel,\n    actions: {\n      openCommandPopup\n    },\n    alignment,\n    overflow = false\n  } = _ref;\n  /**\n   * Click handler for the command button\n   *\n   * @param {Event} e Click event\n   */\n\n  const executeCommand = async e => {\n    e.stopPropagation();\n    eventBus.publish('removeMessages', {});\n    dispatch({\n      path: 'data.isCommandExecuting',\n      value: true\n    });\n    const result = await command.execute(runActionWithViewModel, { ...commandContext,\n      popupAction: openCommandPopup,\n      event: e\n    });\n    dispatch({\n      path: 'data.isCommandExecuting',\n      value: false\n    });\n    logUserGesture();\n    publishAnalytics(command);\n\n    if (command.hasPopup) {\n      const overrideOptions = result.inputData.options;\n      openCommandPopup.show({ ...overrideOptions,\n        placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start',\n        context: getPopupContext(overrideOptions)\n      });\n    }\n  };\n\n  const getParentGroupId = function () {\n    let parentGroupId = '';\n\n    if (commandContext && commandContext.command) {\n      parentGroupId = commandContext.command.id;\n    }\n\n    return parentGroupId;\n  };\n\n  const getSubject = function () {\n    let subject = {};\n\n    if (commandContext && commandContext.selectionData) {\n      let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n      let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n      subject = {\n        pselected: pselected,\n        selected: selected\n      };\n    }\n\n    return subject;\n  };\n\n  const logUserGesture = function () {\n    let widgetInfo = {\n      commandId: command.id,\n      parentGroupId: getParentGroupId(),\n      commandContext: commandContext\n    };\n    cas.notify({\n      widgetInfo: widgetInfo,\n      userGesture: 'commandClick',\n      subject: getSubject()\n    });\n  };\n\n  const getTooltipPlacement = function () {\n    var placement = 'top';\n\n    if (alignment === 'VERTICAL') {\n      placement = 'left';\n    }\n\n    return placement;\n  };\n\n  const getPopupContext = options => {\n    const scope = {\n      commandContext\n    };\n    let subPanelContext = assignWith({}, options.subPanelContext, (objValue, srcValue) => {\n      const path = getStringBetweenDoubleMustaches(objValue || srcValue);\n      return get(scope, path);\n    });\n    return {\n      anchor: command.id,\n      //TODO: Command context will need to be included in this also\n      context: {\n        command,\n        ...commandContext\n      },\n      visibilityLoader,\n      subPanelContext,\n      childCommandClickCallback: hasPopup => {\n        if (hasPopup) {\n          return;\n        }\n\n        openCommandPopup.hide();\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'aw-command',\n    ref: openCommandPopup.reference,\n    title: command.extendedTooltip || command.description ? null : command.title,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\" //TODO: button-id vs command-id vs data-command-id - not clear why changed to commandId\n      ,\n      \"button-id\": command.id,\n      \"command-id\": command.id,\n      \"data-command-id\": command.id,\n      className: commandClass + (openCommandPopup.open ? ' aw-state-selected' : ''),\n      disabled: isCommandExecuting || !command.enabled,\n      \"aria-disabled\": isCommandExecuting || !command.enabled,\n      title: command.extendedTooltip || command.description ? null : command.title,\n      \"aria-label\": command.title,\n      \"aria-haspopup\": command.hasPopup,\n      onClick: executeCommand,\n      tabIndex: overflow ? -1 : 0,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: getCommandIconClass(command.hasPopup),\n        children: [/*#__PURE__*/_jsxDEV(AwPic, {\n          className: \"aw-commands-svg\",\n          iconId: command.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), command.hasPopup ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-widgets-groupCommandStack\",\n          children: /*#__PURE__*/_jsxDEV(AwIcon, {\n            iconId: \"miscDownArrow_uxRefresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this) : null, command.decorator && command.decorator.text && command.decorator.text !== '{0}' && command.decorator.visibleWhen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commands-cellDecorator\",\n          children: command.decorator.className ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: command.decorator.className,\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-commands-showIconLabel aw-commands-commandIconButtonText\",\n        children: command.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...openCommandPopup.options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: openCommandPopup.reference,\n      extendedTooltipOptions: {\n        isCommand: true,\n        placement: getTooltipPlacement()\n      },\n      extendedTooltipContext: command,\n      extendedTooltip: command.extendedTooltip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {String} commandId Command ID\n * @param {String} alignment Command bar alignment\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\n\nconst getCommandClass = (renderContext, commandId, alignment, selected, enabled, isCommandExecuting) => {\n  const classNames = ['aw-commands-commandIconButton', 'aw-commands-command', `aw-commandId-${commandId}`, alignment === 'VERTICAL' ? 'aw-commands-commandWrapperVertical' : null, alignment === 'HORIZONTAL' ? 'aw-commands-commandWrapperHorizontal' : null, selected ? 'aw-state-selected' : null, enabled && !isCommandExecuting ? null : 'disabled'].filter(x => x);\n  return classNames.join(' ');\n};\n/**\n * Get the class to use on the command icon\n *\n * @param {Boolean} hasPopup Whether the command is a group\n * @returns {String} Class to use for command icon\n */\n\n\nconst getCommandIconClass = hasPopup => `aw-commandIcon${hasPopup ? ' aw-widgets-groupCommand' : ''}`;\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\n\nexport const getCommandClassMemo = (vmDef, prop, data) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [prop.command.id, prop.alignment, prop.command.selected, prop.command.enabled, data.isCommandExecuting],\n    compute: getCommandClass\n  })];\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwCommandService.js"],"names":["publishAnalytics","command","commandLogData","sanAnalyticsType","sanCommandId","sanCommandTitle","title","analyticsSvc","awCommandRenderFunction","viewModel","data","isCommandExecuting","ctxMin","commandClass","actions","openCommandPopup","overflow","executeCommand","e","eventBus","dispatch","path","value","result","popupAction","event","logUserGesture","overrideOptions","placement","alignment","context","getPopupContext","getParentGroupId","parentGroupId","commandContext","getSubject","subject","pselected","selected","widgetInfo","commandId","cas","userGesture","getTooltipPlacement","options","scope","subPanelContext","assignWith","getStringBetweenDoubleMustaches","objValue","get","anchor","childCommandClickCallback","hasPopup","getCommandIconClass","icon","text","isCommand","extendedTooltip","getCommandClass","classNames","enabled","x","getCommandClassMemo","ctxParameters","additionalParameters","prop","compute"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwCommandService\n */\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n */\n const publishAnalytics = ( command ) => {\n    let commandLogData = {\n        sanAnalyticsType: 'Commands',\n        sanCommandId: command.id,\n        sanCommandTitle: command.title\n    };\n    analyticsSvc.logCommands( commandLogData );\n};\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awCommandRenderFunction = ( {\n    visibilityLoader,\n    viewModel: { dispatch, data: { isCommandExecuting } },\n    command,\n    commandContext,\n    ctx,\n    ctxMin: { commandClass },\n    runActionWithViewModel,\n    actions: { openCommandPopup },\n    alignment,\n    overflow = false\n} ) => {\n    /**\n     * Click handler for the command button\n     *\n     * @param {Event} e Click event\n     */\n    const executeCommand = async( e ) => {\n        e.stopPropagation();\n        eventBus.publish( 'removeMessages', {} );\n        dispatch( { path: 'data.isCommandExecuting', value: true } );\n        const result = await command.execute( runActionWithViewModel, { ...commandContext, popupAction: openCommandPopup, event: e } );\n        dispatch( { path: 'data.isCommandExecuting', value: false } );\n        logUserGesture();\n        publishAnalytics( command );\n\n        if( command.hasPopup ) {\n            const overrideOptions = result.inputData.options;\n            openCommandPopup.show( {\n                ...overrideOptions,\n                placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start',\n                context: getPopupContext( overrideOptions )\n            } );\n        }\n    };\n\n    const getParentGroupId = function() {\n        let parentGroupId = '';\n        if( commandContext && commandContext.command ) {\n            parentGroupId = commandContext.command.id;\n        }\n        return parentGroupId;\n    };\n\n    const getSubject = function() {\n        let subject = {};\n        if( commandContext && commandContext.selectionData ) {\n            let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n            let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n            subject = { pselected: pselected, selected: selected };\n        }\n        return subject;\n    };\n\n    const logUserGesture = function() {\n        let widgetInfo = {\n            commandId: command.id,\n            parentGroupId: getParentGroupId(),\n            commandContext: commandContext\n        };\n        cas.notify( {\n            widgetInfo: widgetInfo,\n            userGesture: 'commandClick',\n            subject: getSubject()\n        } );\n    };\n\n    const getTooltipPlacement = function() {\n        var placement = 'top';\n        if( alignment === 'VERTICAL' ) {\n            placement = 'left';\n        }\n        return placement;\n    };\n\n    const getPopupContext = ( options ) => {\n        const scope = { commandContext };\n        let subPanelContext = assignWith( {}, options.subPanelContext, ( objValue, srcValue ) => {\n            const path = getStringBetweenDoubleMustaches( objValue || srcValue );\n            return get( scope, path );\n        } );\n\n        return {\n            anchor: command.id,\n            //TODO: Command context will need to be included in this also\n            context: {\n                command,\n                ...commandContext\n            },\n            visibilityLoader,\n            subPanelContext,\n            childCommandClickCallback: ( hasPopup ) => {\n                if( hasPopup ) {\n                    return;\n                }\n                openCommandPopup.hide();\n            }\n        };\n    };\n\n    return (\n        <div className={'aw-command'} ref={openCommandPopup.reference} title={command.extendedTooltip || command.description ? null : command.title}>\n            <button type='button'\n                //TODO: button-id vs command-id vs data-command-id - not clear why changed to commandId\n                button-id={command.id}\n                command-id={command.id}\n                data-command-id={command.id}\n                className={commandClass + ( openCommandPopup.open ? ' aw-state-selected' : '' )}\n                disabled={isCommandExecuting || !command.enabled}\n                aria-disabled={isCommandExecuting || !command.enabled}\n                title={command.extendedTooltip || command.description ? null : command.title}\n                aria-label={command.title}\n                aria-haspopup={command.hasPopup}\n                onClick={executeCommand}\n                tabIndex={overflow ? -1 : 0}\n            >\n                <div className={getCommandIconClass( command.hasPopup )}>\n                    <AwPic className='aw-commands-svg' iconId={command.icon}></AwPic>\n                    { command.hasPopup ?\n                        <div className='aw-widgets-groupCommandStack'>\n                            <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon>\n                        </div>\n                        : null }\n                    { command.decorator && command.decorator.text && command.decorator.text !== '{0}' && command.decorator.visibleWhen ?\n                        <div className='aw-commands-cellDecorator'>\n                            { command.decorator.className ?\n                                <div className={command.decorator.className}>{command.decorator.text}</div>\n                                : <div>{command.decorator.text}</div> }\n                        </div>\n                        : null }\n\n                </div>\n                <div className='aw-commands-showIconLabel aw-commands-commandIconButtonText'>{command.title}</div>\n            </button>\n\n            <AwPopup {...openCommandPopup.options}/>\n            <AwExtendedTooltip\n                reference={openCommandPopup.reference}\n                extendedTooltipOptions={{ isCommand: true, placement : getTooltipPlacement() }}\n                extendedTooltipContext={command}\n                extendedTooltip={command.extendedTooltip}>\n            </AwExtendedTooltip>\n        </div>\n    );\n};\n\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {String} commandId Command ID\n * @param {String} alignment Command bar alignment\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\nconst getCommandClass = ( renderContext, commandId, alignment, selected, enabled, isCommandExecuting ) => {\n    const classNames = [\n        'aw-commands-commandIconButton',\n        'aw-commands-command',\n        `aw-commandId-${commandId}`,\n        alignment === 'VERTICAL' ? 'aw-commands-commandWrapperVertical' : null,\n        alignment === 'HORIZONTAL' ? 'aw-commands-commandWrapperHorizontal' : null,\n        selected ? 'aw-state-selected' : null,\n        enabled && !isCommandExecuting ? null : 'disabled'\n    ].filter( x => x );\n    return classNames.join( ' ' );\n};\n\n/**\n * Get the class to use on the command icon\n *\n * @param {Boolean} hasPopup Whether the command is a group\n * @returns {String} Class to use for command icon\n */\nconst getCommandIconClass = ( hasPopup ) => `aw-commandIcon${hasPopup ? ' aw-widgets-groupCommand' : ''}`;\n\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getCommandClassMemo = ( vmDef, prop, data ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ prop.command.id, prop.alignment, prop.command.selected, prop.command.enabled, data.isCommandExecuting ],\n        compute: getCommandClass\n    } ) ];\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwServerVisibilityCommandBarService.js\"; // Copyright (c) 2021 Siemens\n\n/* eslint-disable sonarjs/no-duplicate-string */\n\n/**\n * @module js/AwServerVisibilityCommandBarService\n */\n\nimport AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport AwStateService from 'js/awStateService';\nimport AwToolbar from 'viewmodel/AwToolbarViewModel';\nimport DataLoader from 'dataloader';\nimport Debug from 'debug';\nimport appCtxSvc from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dms from 'soa/dataManagementService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { createComponent } from 'js/declViewModelService';\nimport { debounce, forEach, uniq, includes, replace } from 'lodash';\nimport { registerDynImportEntry } from 'js/moduleLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterDynImportEntry('js/AwServerVisibilityCommandBarService', () => import('js/AwServerVisibilityCommandBarService'));\nconst trace = new Debug('command:tcCommandVisibilityService2');\n/**\n * Get the selection information for SOA input\n *\n * @param {Object[]} selection Currently selected objects\n * @param {Object} parentSelection Parent selection\n * @param {Boolean} istcgql Whether currently in GraphQL sublocation\n * @return {Object[]} Current selection information\n */\n\nconst getSelectionInfo = function () {\n  let selection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let parentSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let istcgql = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (parentSelection && parentSelection.uid === cdm.NULL_UID) {\n    parentSelection = null;\n  }\n\n  var soaMOs = [];\n  var isTCGQL = istcgql;\n  forEach(selection, function (selectedObj) {\n    var mo = cdm.getObject(selectedObj.uid);\n\n    if (mo) {\n      soaMOs.push(mo);\n    } else {\n      if (isTCGQL) {\n        soaMOs.push(selectedObj);\n      }\n    }\n  });\n  var selInfo = [];\n\n  if (soaMOs.length) {\n    var primarySelection = {\n      contextName: '',\n      parentSelectionIndex: parentSelection ? 1 : -1,\n      selectedObjects: soaMOs\n    };\n    selInfo.push(primarySelection);\n  }\n\n  if (parentSelection) {\n    var pmo = cdm.getObject(parentSelection.uid);\n\n    if (pmo) {\n      selInfo.push({\n        contextName: '',\n        parentSelectionIndex: -1,\n        selectedObjects: [parentSelection]\n      });\n    }\n  }\n\n  return selInfo;\n};\n/**\n * Get the command information for SOA input\n *\n * @param {List<String>} commandIds Specific IDs to include in the call instead of all commands\n * @return {Object[]} Command info\n */\n\n\nconst getCommandInfo = function (commandIds) {\n  return uniq(commandIds).sort().map(function (commandId) {\n    return {\n      commandCollectionId: '',\n      commandId\n    };\n  });\n};\n/**\n * Command context parameter for the current XRT page\n */\n\n\nconst XRT_PAGE_ID = 'ActiveXrtPageId';\n/**\n * Prefix use for any URL parameters included in command context\n */\n\nconst URL_PARAMETER_PREFIX = 'UrlParameter_';\n/**\n * Get the selection information for SOA input\n *\n * @param {Boolean} aw_hosting_enabled Whether currently in hosted mode\n * @param {String} aw_host_type The current host type\n * @param {String[]} commandContextParameters List of URL parameters to include in command context\n * @param {Object} processedState The current state parameters\n * @return {Object[]} The current command context\n */\n\nconst getCommandContext = function () {\n  let aw_hosting_enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let aw_host_type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let commandContextParameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let processedState = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var hostingInfo = [{\n    contextName: 'IsHosted',\n    contextValue: aw_hosting_enabled ? 'true' : 'false'\n  }, {\n    contextName: 'HostType',\n    contextValue: aw_host_type\n  }]; //uid is always included since many teams have used to avoid writing conditions against what is selected vs the opened object\n\n  var urlInfo = commandContextParameters.concat(['uid']).map(function (param) {\n    if (includes(param, XRT_PAGE_ID)) {\n      return {\n        contextName: XRT_PAGE_ID,\n        contextValue: replace(param, XRT_PAGE_ID + ':', '')\n      };\n    }\n\n    return {\n      contextName: URL_PARAMETER_PREFIX + param,\n      contextValue: processedState[param] || ''\n    };\n  });\n  return hostingInfo.concat(urlInfo);\n};\n/**\n * Create a cache map for the dataloader to use\n *\n * Something in the declarative framework breaks the native JS map, so reimplement with the same API\n *\n * @returns {Object} Plain object matching the API of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n */\n\n\nconst getCacheMap = () => {\n  const cache = {};\n  return {\n    get: k => cache[k],\n    set: (k, v) => cache[k] = v,\n    delete: k => delete cache[k],\n    clear: () => {\n      for (const k in cache) {\n        delete cache[k];\n      }\n    }\n  };\n};\n/**\n * Get the current server visibility for the list of commands\n *\n * @param {[String]} commandIds Command IDs to load server visibility for\n * @param {Object} ctx The current context for loading\n * @returns {[Boolean]} True/false for each command ID\n */\n\n\nexport const getCurrentServerVisibility = async (commandIds, ctx) => {\n  const {\n    sublocation: {\n      clientScopeURI = ''\n    },\n    mselected,\n    pselected,\n    istcgql = false,\n    ViewModeContext: {\n      ViewModeContext\n    },\n    aw_hosting_enabled,\n    aw_host_type,\n    commandContextParameters,\n    services: {\n      awCommandVisibilityLoader\n    }\n  } = ctx; //Support for GraphQL based sublocations\n\n  if (istcgql) {\n    const isSummaryHidden = ViewModeContext === 'TableView' || ViewModeContext === 'ListView' || ViewModeContext === 'ImageView';\n    const selectObjUids = mselected.map(x => x.uid).filter(x => x);\n    const isMultiSelected = mselected.length > 1;\n\n    if (selectObjUids.length > 0 && (isSummaryHidden || isMultiSelected)) {\n      dms.loadObjects(selectObjUids);\n    }\n  }\n\n  const stateParameters = AwStateService.instance.params;\n  let pselectedIn = appCtxSvc.getCtx('pselected');\n  const getVisibleCommandsInfo = {\n    clientScopeURI,\n    selectionInfo: getSelectionInfo(mselected, pselectedIn, istcgql),\n    commandContextInfo: getCommandContext(aw_hosting_enabled, aw_host_type, commandContextParameters, stateParameters),\n    commandInfo: getCommandInfo(commandIds)\n  };\n  trace('Loading visibility commands with given context information', commandIds, getVisibleCommandsInfo);\n  const visibleCommandsInfo = await awCommandVisibilityLoader.load(getVisibleCommandsInfo);\n  const visibleCommandIds = visibleCommandsInfo.map(x => x.commandId);\n  return commandIds.map(id => visibleCommandIds.includes(id));\n};\n/**\n * Get a dataloader for command visibility based on the current selection\n *\n * @param {Object} param0 Render context\n * @param {[ViewModelObject]} mselected Selected objects from props\n * @param {ViewModelObject} pselected Parent selection from props\n * @param {Number} visibilityLoaderIdCounter Counter used to force refresh\n * @returns {DataLoader} Loader for command visibility\n */\n\nexport const getServerVisibilityLoader = (_ref, mselected, pselected, visibilityLoaderIdCounter) => {\n  let {\n    ctx\n  } = _ref; //note: we could simply do { ...ctx, mselected, pselected } but other cosumers of this loader not refactored yet to use props\n\n  ctx.mselected = mselected ? mselected : ctx.mselected;\n  ctx.pselected = pselected ? pselected : ctx.pselected;\n  trace('Previous visibility loader is stale, creating new loader', ctx, visibilityLoaderIdCounter);\n  return new DataLoader(async commandIds => getCurrentServerVisibility(commandIds, ctx), {\n    cacheMap: getCacheMap()\n  });\n};\n/**\n * Get the derived state configuration for visibility loader\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\nexport const getDerivedVisibilityLoader = (vmDef, prop, data) => {\n  return new DerivedStateResult({\n    ctxParameters: ['ViewModeContext.ViewModeContext', 'services.awCommandVisibilityLoader', 'aw_host_type', 'aw_hosting_enabled', 'commandContextParameters', 'istcgql', 'mselected', 'pselected', 'sublocation.clientScopeURI'],\n    additionalParameters: [prop.mselected, prop.pselected, data.visibilityLoaderIdCount || 0],\n    compute: getServerVisibilityLoader\n  });\n};\n/**\n * Counter used to force server visibilty reload. Increment method is debounced to avoid\n * multiple calls when a \"cdm.relatedModified\" is happening at the same time as \"cdm.updated\"\n *\n * @returns {Object} Counter object\n */\n\nexport const getForcedLoaderCounter = () => {\n  trace('Initializing visibility loader counter');\n  return {\n    count: 0,\n    counter: {\n      increment: debounce(x => {\n        return x + 1;\n      }, 100, {\n        leading: true,\n        trailing: false\n      })\n    }\n  };\n};\n/**\n * Check the event data to determine if a server visibility reload is necessary.\n * Will increment counter only if update is required\n *\n * @param {Object} eventData cdm.relatedModified or cdm.updated event data\n * @param {*} mselected The current selected objects\n * @param {*} count The current count\n * @param {*} counter The current counter\n * @returns {Object} Updated counter\n */\n\nexport const checkForRefresh = function (eventData) {\n  let mselected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let count = arguments.length > 2 ? arguments[2] : undefined;\n  let counter = arguments.length > 3 ? arguments[3] : undefined;\n\n  if (!counter) {\n    return count;\n  }\n\n  const mselectedUids = mselected.map(x => x.uid);\n  const modifiedObjects = eventData.relatedModified || eventData.updatedObjects || [];\n\n  if (eventData.relatedModified) {\n    trace('cdm.relatedModified', eventData.relatedModified);\n  }\n\n  if (eventData.updatedObjects) {\n    trace('cdm.updated', eventData.updatedObjects);\n  }\n\n  for (const mo of modifiedObjects) {\n    if (mselectedUids.includes(mo.uid)) {\n      trace('Incrementing counter to force reload of server visibility', mo.uid);\n      return {\n        count: counter.increment(count)\n      };\n    }\n  }\n\n  return {\n    count\n  };\n};\n/**\n * Wrap the given component with Active Workspace specific server visibility logic\n *\n * addServerVisibility :: ( [DataLoader,...props] => JSX ) => ( [Object,Object,...props] => JSX )\n *\n * @param {Component} ChildComponent The component to wrap\n * @param {String} componentId ID of the component (will appear in dev tools)\n * @returns {Component} The wrapper component\n */\n\nexport const addServerVisibility = (ChildComponent, componentId) => {\n  const ctxImportObj = {\n    serverVisibilityLoader: getDerivedVisibilityLoader\n  }; //Generated view model JSON for wrapper component\n\n  const declViewModelJson = {\n    schemaVersion: '1.0.0',\n    actions: {\n      //Refresh action used to force visibility reload without selection change\n      checkForRefresh: {\n        actionType: 'JSFunction',\n        method: 'checkForRefresh',\n        deps: 'js/AwServerVisibilityCommandBarService',\n        inputData: {\n          0: '{{data.eventData}}',\n          1: '{{props.mselected}}',\n          2: '{{data.visibilityLoaderIdCount}}',\n          3: '{{data.visibilityLoaderIdCounter}}'\n        },\n        outputData: {\n          //Increment counter to force recreation of dataloader, causing server visibility reload\n          visibilityLoaderIdCount: 'count'\n        }\n      },\n      //Initializes the counter used to \"force\" server visibility reloads\n      getForcedLoaderCounter: {\n        actionType: 'JSFunction',\n        method: 'getForcedLoaderCounter',\n        deps: 'js/AwServerVisibilityCommandBarService',\n        inputData: {},\n        outputData: {\n          visibilityLoaderIdCount: 'count',\n          visibilityLoaderIdCounter: 'counter'\n        }\n      }\n    },\n    ctx: {\n      //Use derived state to recreate a data loader whenever the relevant data (selection, etc) changes\n      //Creation of new data loader triggers reload of server visibility\n      serverVisibilityLoader: {\n        parser: {\n          method: 'getDerivedVisibilityLoader',\n          deps: 'js/AwServerVisibilityCommandBarService'\n        }\n      },\n      mselected: null,\n      pselected: null\n    },\n    onEvent: [{\n      eventId: 'cdm.relatedModified',\n      action: 'checkForRefresh',\n      cacheEventData: true\n    }, {\n      eventId: 'cdm.updated',\n      action: 'checkForRefresh',\n      cacheEventData: true\n    }],\n    props: {\n      mselected: {\n        type: 'object'\n      },\n      pselected: {\n        type: 'viewModelObject'\n      }\n    },\n    lifecycleHooks: {\n      onMount: 'getForcedLoaderCounter'\n    },\n    _viewModelId: componentId,\n    _uniqueViewModelId: componentId\n  };\n\n  const render = props => {\n    const {\n      ctx\n    } = props;\n    return /*#__PURE__*/_jsxDEV(ChildComponent, { ...props,\n      visibilityLoader: ctx.serverVisibilityLoader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 16\n    }, this);\n  };\n\n  return createComponent(declViewModelJson, render, undefined, ctxImportObj);\n};\n/**\n * AW specific wrappers of the standard AwCommandBar, AwToolbar, AwPopupCommandBar\n *\n * Instead of a server visibility loader these components will have \"mselected\" and \"pselected\" props. They\n * will use those props to manage server visiiblity. If either one of those props is not provided the values\n * from ctx.mselected and ctx.pselected will be used instead\n */\n\nexport const AwServerVisibilityPopupCommandBar = addServerVisibility(AwPopupCommandBar, 'AwServerVisibilityPopupCommandBarImpl');\n_c4 = AwServerVisibilityPopupCommandBar;\n_c = AwServerVisibilityPopupCommandBar;\nexport const AwServerVisibilityCommandBar = addServerVisibility(AwCommandBar, 'AwServerVisibilityCommandBarImpl');\n_c5 = AwServerVisibilityCommandBar;\n_c2 = AwServerVisibilityCommandBar;\nexport const AwServerVisibilityToolbar = addServerVisibility(AwToolbar, 'AwServerVisibilityToolbarImpl');\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\n\n_c6 = AwServerVisibilityToolbar;\n_c3 = AwServerVisibilityToolbar;\nexport const renderCommandBar = props => {\n  return /*#__PURE__*/_jsxDEV(AwServerVisibilityCommandBar, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 12\n  }, this);\n};\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\n\nexport const renderToolbar = props => {\n  return /*#__PURE__*/_jsxDEV(AwServerVisibilityToolbar, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 418,\n    columnNumber: 12\n  }, this);\n};\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\n\nexport const renderPopupCommandBar = props => {\n  return /*#__PURE__*/_jsxDEV(AwServerVisibilityPopupCommandBar, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 12\n  }, this);\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AwServerVisibilityPopupCommandBar\");\n$RefreshReg$(_c2, \"AwServerVisibilityCommandBar\");\n$RefreshReg$(_c3, \"AwServerVisibilityToolbar\");\n\nvar _c4, _c5, _c6;\n\n$RefreshReg$(_c4, \"AwServerVisibilityPopupCommandBar\");\n$RefreshReg$(_c5, \"AwServerVisibilityCommandBar\");\n$RefreshReg$(_c6, \"AwServerVisibilityToolbar\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwServerVisibilityCommandBarService.js"],"names":["registerDynImportEntry","trace","getSelectionInfo","selection","parentSelection","istcgql","cdm","soaMOs","isTCGQL","forEach","mo","selectedObj","selInfo","primarySelection","contextName","parentSelectionIndex","selectedObjects","pmo","getCommandInfo","commandCollectionId","commandId","XRT_PAGE_ID","URL_PARAMETER_PREFIX","getCommandContext","aw_hosting_enabled","aw_host_type","commandContextParameters","processedState","hostingInfo","contextValue","urlInfo","includes","replace","getCacheMap","cache","get","k","set","delete","clear","getCurrentServerVisibility","sublocation","clientScopeURI","ViewModeContext","services","awCommandVisibilityLoader","isSummaryHidden","selectObjUids","mselected","x","isMultiSelected","dms","stateParameters","AwStateService","pselectedIn","appCtxSvc","getVisibleCommandsInfo","selectionInfo","commandContextInfo","commandInfo","visibleCommandsInfo","visibleCommandIds","commandIds","id","getServerVisibilityLoader","ctx","pselected","cacheMap","getDerivedVisibilityLoader","ctxParameters","additionalParameters","prop","data","compute","getForcedLoaderCounter","count","counter","increment","debounce","leading","trailing","checkForRefresh","mselectedUids","modifiedObjects","eventData","addServerVisibility","ctxImportObj","serverVisibilityLoader","declViewModelJson","schemaVersion","actions","actionType","method","deps","inputData","outputData","visibilityLoaderIdCount","visibilityLoaderIdCounter","parser","onEvent","eventId","action","cacheEventData","props","type","lifecycleHooks","onMount","_viewModelId","_uniqueViewModelId","componentId","render","createComponent","AwServerVisibilityPopupCommandBar","AwServerVisibilityCommandBar","AwServerVisibilityToolbar","renderCommandBar","renderToolbar","renderPopupCommandBar"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable sonarjs/no-duplicate-string */\n\n/**\n * @module js/AwServerVisibilityCommandBarService\n */\nimport AwCommandBar from 'viewmodel/AwCommandBarViewModel';\nimport AwPopupCommandBar from 'viewmodel/AwPopupCommandBarViewModel';\nimport AwStateService from 'js/awStateService';\nimport AwToolbar from 'viewmodel/AwToolbarViewModel';\nimport DataLoader from 'dataloader';\nimport Debug from 'debug';\nimport appCtxSvc from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport dms from 'soa/dataManagementService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { createComponent } from 'js/declViewModelService';\nimport { debounce, forEach, uniq, includes, replace } from 'lodash';\nimport { registerDynImportEntry } from 'js/moduleLoader';\n\nregisterDynImportEntry( 'js/AwServerVisibilityCommandBarService', () => import( 'js/AwServerVisibilityCommandBarService' ) );\n\nconst trace = new Debug( 'command:tcCommandVisibilityService2' );\n\n/**\n * Get the selection information for SOA input\n *\n * @param {Object[]} selection Currently selected objects\n * @param {Object} parentSelection Parent selection\n * @param {Boolean} istcgql Whether currently in GraphQL sublocation\n * @return {Object[]} Current selection information\n */\nconst getSelectionInfo = function( selection = [], parentSelection = null, istcgql = false ) {\n    if( parentSelection && parentSelection.uid === cdm.NULL_UID ) {\n        parentSelection = null;\n    }\n    var soaMOs = [];\n    var isTCGQL = istcgql;\n    forEach( selection, function( selectedObj ) {\n        var mo = cdm.getObject( selectedObj.uid );\n        if( mo ) {\n            soaMOs.push( mo );\n        } else {\n            if( isTCGQL ) {\n                soaMOs.push( selectedObj );\n            }\n        }\n    } );\n    var selInfo = [];\n    if( soaMOs.length ) {\n        var primarySelection = {\n            contextName: '',\n            parentSelectionIndex: parentSelection ? 1 : -1,\n            selectedObjects: soaMOs\n        };\n\n        selInfo.push( primarySelection );\n    }\n    if( parentSelection ) {\n        var pmo = cdm.getObject( parentSelection.uid );\n        if( pmo ) {\n            selInfo.push( {\n                contextName: '',\n                parentSelectionIndex: -1,\n                selectedObjects: [ parentSelection ]\n            } );\n        }\n    }\n    return selInfo;\n};\n\n/**\n * Get the command information for SOA input\n *\n * @param {List<String>} commandIds Specific IDs to include in the call instead of all commands\n * @return {Object[]} Command info\n */\nconst getCommandInfo = function( commandIds ) {\n    return uniq( commandIds ).sort().map( function( commandId ) {\n        return {\n            commandCollectionId: '',\n            commandId\n        };\n    } );\n};\n\n/**\n * Command context parameter for the current XRT page\n */\nconst XRT_PAGE_ID = 'ActiveXrtPageId';\n\n/**\n * Prefix use for any URL parameters included in command context\n */\nconst URL_PARAMETER_PREFIX = 'UrlParameter_';\n\n/**\n * Get the selection information for SOA input\n *\n * @param {Boolean} aw_hosting_enabled Whether currently in hosted mode\n * @param {String} aw_host_type The current host type\n * @param {String[]} commandContextParameters List of URL parameters to include in command context\n * @param {Object} processedState The current state parameters\n * @return {Object[]} The current command context\n */\nconst getCommandContext = function( aw_hosting_enabled = false, aw_host_type = '', commandContextParameters = [], processedState = {} ) {\n    var hostingInfo = [ {\n        contextName: 'IsHosted',\n        contextValue: aw_hosting_enabled ? 'true' : 'false'\n    }, {\n        contextName: 'HostType',\n        contextValue: aw_host_type\n    } ];\n\n    //uid is always included since many teams have used to avoid writing conditions against what is selected vs the opened object\n    var urlInfo = commandContextParameters.concat( [ 'uid' ] ).map( function( param ) {\n        if( includes( param, XRT_PAGE_ID ) ) {\n            return {\n                contextName: XRT_PAGE_ID,\n                contextValue: replace( param, XRT_PAGE_ID + ':', '' )\n            };\n        }\n        return {\n            contextName: URL_PARAMETER_PREFIX + param,\n            contextValue: processedState[ param ] || ''\n        };\n    } );\n\n    return hostingInfo.concat( urlInfo );\n};\n\n/**\n * Create a cache map for the dataloader to use\n *\n * Something in the declarative framework breaks the native JS map, so reimplement with the same API\n *\n * @returns {Object} Plain object matching the API of https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n */\nconst getCacheMap = () => {\n    const cache = {};\n    return {\n        get: k => cache[ k ],\n        set: ( k, v ) => cache[ k ] = v,\n        delete: k => delete cache[ k ],\n        clear: () => {\n            for( const k in cache ) {\n                delete cache[ k ];\n            }\n        }\n    };\n};\n\n/**\n * Get the current server visibility for the list of commands\n *\n * @param {[String]} commandIds Command IDs to load server visibility for\n * @param {Object} ctx The current context for loading\n * @returns {[Boolean]} True/false for each command ID\n */\nexport const getCurrentServerVisibility = async( commandIds, ctx ) => {\n    const {\n        sublocation: { clientScopeURI = '' },\n        mselected,\n        pselected,\n        istcgql = false,\n        ViewModeContext: { ViewModeContext },\n        aw_hosting_enabled,\n        aw_host_type,\n        commandContextParameters,\n        services: {\n            awCommandVisibilityLoader\n        }\n    } = ctx;\n    //Support for GraphQL based sublocations\n    if( istcgql ) {\n        const isSummaryHidden = ViewModeContext === 'TableView' || ViewModeContext === 'ListView' || ViewModeContext === 'ImageView';\n        const selectObjUids = mselected.map( x => x.uid ).filter( x => x );\n        const isMultiSelected = mselected.length > 1;\n        if( selectObjUids.length > 0 && ( isSummaryHidden || isMultiSelected ) ) {\n            dms.loadObjects( selectObjUids );\n        }\n    }\n    const stateParameters = AwStateService.instance.params;\n    let pselectedIn = appCtxSvc.getCtx( 'pselected' );\n    const getVisibleCommandsInfo = {\n        clientScopeURI,\n        selectionInfo: getSelectionInfo( mselected, pselectedIn, istcgql ),\n        commandContextInfo: getCommandContext( aw_hosting_enabled, aw_host_type, commandContextParameters, stateParameters ),\n        commandInfo: getCommandInfo( commandIds )\n    };\n    trace( 'Loading visibility commands with given context information', commandIds, getVisibleCommandsInfo );\n    const visibleCommandsInfo = await awCommandVisibilityLoader.load( getVisibleCommandsInfo );\n    const visibleCommandIds = visibleCommandsInfo.map( x => x.commandId );\n    return commandIds.map( id => visibleCommandIds.includes( id ) );\n};\n\n/**\n * Get a dataloader for command visibility based on the current selection\n *\n * @param {Object} param0 Render context\n * @param {[ViewModelObject]} mselected Selected objects from props\n * @param {ViewModelObject} pselected Parent selection from props\n * @param {Number} visibilityLoaderIdCounter Counter used to force refresh\n * @returns {DataLoader} Loader for command visibility\n */\nexport const getServerVisibilityLoader = ( {\n    ctx\n}, mselected, pselected, visibilityLoaderIdCounter ) => {\n    //note: we could simply do { ...ctx, mselected, pselected } but other cosumers of this loader not refactored yet to use props\n    ctx.mselected = mselected ? mselected : ctx.mselected;\n    ctx.pselected = pselected ? pselected : ctx.pselected;\n    trace( 'Previous visibility loader is stale, creating new loader', ctx, visibilityLoaderIdCounter );\n    return new DataLoader( async commandIds => getCurrentServerVisibility( commandIds, ctx ), {\n        cacheMap: getCacheMap()\n    } );\n};\n\n/**\n * Get the derived state configuration for visibility loader\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getDerivedVisibilityLoader = ( vmDef, prop, data ) => {\n    return new DerivedStateResult( {\n        ctxParameters: [\n            'ViewModeContext.ViewModeContext',\n            'services.awCommandVisibilityLoader',\n            'aw_host_type',\n            'aw_hosting_enabled',\n            'commandContextParameters',\n            'istcgql',\n            'mselected',\n            'pselected',\n            'sublocation.clientScopeURI'\n        ],\n        additionalParameters: [ prop.mselected, prop.pselected, data.visibilityLoaderIdCount || 0 ],\n        compute: getServerVisibilityLoader\n    } );\n};\n\n/**\n * Counter used to force server visibilty reload. Increment method is debounced to avoid\n * multiple calls when a \"cdm.relatedModified\" is happening at the same time as \"cdm.updated\"\n *\n * @returns {Object} Counter object\n */\nexport const getForcedLoaderCounter = () => {\n    trace( 'Initializing visibility loader counter' );\n    return {\n        count: 0,\n        counter: {\n            increment: debounce( x => {\n                return x + 1;\n            }, 100, {\n                leading: true,\n                trailing: false\n            } )\n        }\n    };\n};\n\n/**\n * Check the event data to determine if a server visibility reload is necessary.\n * Will increment counter only if update is required\n *\n * @param {Object} eventData cdm.relatedModified or cdm.updated event data\n * @param {*} mselected The current selected objects\n * @param {*} count The current count\n * @param {*} counter The current counter\n * @returns {Object} Updated counter\n */\nexport const checkForRefresh = ( eventData, mselected = [], count, counter ) => {\n    if( !counter ) {\n        return count;\n    }\n    const mselectedUids = mselected.map( x => x.uid );\n    const modifiedObjects = eventData.relatedModified || eventData.updatedObjects || [];\n    if( eventData.relatedModified ) {\n        trace( 'cdm.relatedModified', eventData.relatedModified );\n    }\n    if( eventData.updatedObjects ) {\n        trace( 'cdm.updated', eventData.updatedObjects );\n    }\n    for( const mo of modifiedObjects ) {\n        if( mselectedUids.includes( mo.uid ) ) {\n            trace( 'Incrementing counter to force reload of server visibility', mo.uid );\n            return {\n                count: counter.increment( count )\n            };\n        }\n    }\n    return {\n        count\n    };\n};\n\n/**\n * Wrap the given component with Active Workspace specific server visibility logic\n *\n * addServerVisibility :: ( [DataLoader,...props] => JSX ) => ( [Object,Object,...props] => JSX )\n *\n * @param {Component} ChildComponent The component to wrap\n * @param {String} componentId ID of the component (will appear in dev tools)\n * @returns {Component} The wrapper component\n */\nexport const addServerVisibility = ( ChildComponent, componentId ) => {\n    const ctxImportObj = { serverVisibilityLoader: getDerivedVisibilityLoader };\n    //Generated view model JSON for wrapper component\n    const declViewModelJson = {\n        schemaVersion: '1.0.0',\n        actions: {\n            //Refresh action used to force visibility reload without selection change\n            checkForRefresh: {\n                actionType: 'JSFunction',\n                method: 'checkForRefresh',\n                deps: 'js/AwServerVisibilityCommandBarService',\n                inputData: {\n                    0: '{{data.eventData}}',\n                    1: '{{props.mselected}}',\n                    2: '{{data.visibilityLoaderIdCount}}',\n                    3: '{{data.visibilityLoaderIdCounter}}'\n                },\n                outputData: {\n                    //Increment counter to force recreation of dataloader, causing server visibility reload\n                    visibilityLoaderIdCount: 'count'\n                }\n            },\n            //Initializes the counter used to \"force\" server visibility reloads\n            getForcedLoaderCounter: {\n                actionType: 'JSFunction',\n                method: 'getForcedLoaderCounter',\n                deps: 'js/AwServerVisibilityCommandBarService',\n                inputData: {},\n                outputData: {\n                    visibilityLoaderIdCount: 'count',\n                    visibilityLoaderIdCounter: 'counter'\n                }\n            }\n        },\n        ctx: {\n            //Use derived state to recreate a data loader whenever the relevant data (selection, etc) changes\n            //Creation of new data loader triggers reload of server visibility\n            serverVisibilityLoader: {\n                parser: {\n                    method: 'getDerivedVisibilityLoader',\n                    deps: 'js/AwServerVisibilityCommandBarService'\n                }\n            },\n            mselected: null,\n            pselected: null\n        },\n        onEvent: [ {\n            eventId: 'cdm.relatedModified',\n            action: 'checkForRefresh',\n            cacheEventData: true\n        }, {\n            eventId: 'cdm.updated',\n            action: 'checkForRefresh',\n            cacheEventData: true\n        } ],\n        props: {\n            mselected: {\n                type: 'object'\n            },\n            pselected: {\n                type: 'viewModelObject'\n            }\n        },\n        lifecycleHooks: {\n            onMount: 'getForcedLoaderCounter'\n        },\n        _viewModelId: componentId,\n        _uniqueViewModelId: componentId\n    };\n    const render = ( props ) => {\n        const { ctx } = props;\n        return <ChildComponent\n            {...props}\n            visibilityLoader={ctx.serverVisibilityLoader}\n        ></ChildComponent>;\n    };\n    return createComponent( declViewModelJson, render, undefined, ctxImportObj );\n};\n\n/**\n * AW specific wrappers of the standard AwCommandBar, AwToolbar, AwPopupCommandBar\n *\n * Instead of a server visibility loader these components will have \"mselected\" and \"pselected\" props. They\n * will use those props to manage server visiiblity. If either one of those props is not provided the values\n * from ctx.mselected and ctx.pselected will be used instead\n */\nexport const AwServerVisibilityPopupCommandBar = addServerVisibility( AwPopupCommandBar, 'AwServerVisibilityPopupCommandBarImpl' );\nexport const AwServerVisibilityCommandBar = addServerVisibility( AwCommandBar, 'AwServerVisibilityCommandBarImpl' );\nexport const AwServerVisibilityToolbar = addServerVisibility( AwToolbar, 'AwServerVisibilityToolbarImpl' );\n\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\nexport const renderCommandBar = ( props ) => {\n    return <AwServerVisibilityCommandBar\n        {...props}\n    ></AwServerVisibilityCommandBar>;\n};\n\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\nexport const renderToolbar = ( props ) => {\n    return <AwServerVisibilityToolbar\n        {...props}\n    ></AwServerVisibilityToolbar>;\n};\n\n/**\n * Fake render function to support HTML view usage\n *\n * @param {Object} props props\n * @returns {Component} component\n */\nexport const renderPopupCommandBar = ( props ) => {\n    return <AwServerVisibilityPopupCommandBar\n        {...props}\n    ></AwServerVisibilityPopupCommandBar>;\n};\n\n"]},"metadata":{},"sourceType":"module"}
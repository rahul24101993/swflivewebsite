{"ast":null,"code":"var _s6 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nvar _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\declreact\\\\src\\\\js\\\\reactAppCtx.js\",\n    _s = $RefreshSig$(),\n    _s5 = $RefreshSig$(); // Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * @module js/reactAppCtx\n */\n\n\nimport React, { useMemo } from 'react';\nimport lodashFpSet from 'lodash/fp/set';\nimport { get, set, orderBy, isArray, uniq } from 'lodash';\nimport { init } from 'js/appCtxService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { createStore } from 'redux';\nimport { useSelector, Provider as ReduxProvider, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const _dispatchCtx = function () {\n  let ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    path,\n    value\n  } = action;\n\n  if (path) {\n    return lodashFpSet(path, value, ctx);\n  }\n\n  return ctx;\n}; // create store - will be decided by 1st param of the dispatchFn\n\nconst store = createStore(_dispatchCtx, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n/**\n * Hook to pull a value from from the global ctx store\n *\n * @param {String|Array} path The path to the property\n * @returns {Any} The current value in ctx\n */\n\nexport const useCtx = path => {\n  _s6();\n\n  _s();\n\n  return useSelector(ctx => {\n    return {\n      path,\n      value: get(ctx, path)\n    };\n  }, (l, r) => l.value === r.value);\n};\n\n_s6(useCtx, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\n_s(useCtx, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nconst getDerivedState = (ctxCompute, _ref) => {\n  let {\n    vmDef,\n    prop,\n    data\n  } = _ref;\n  const derivedStateResult = ctxCompute(vmDef, prop, data);\n  const derivedStates = isArray(derivedStateResult) ? derivedStateResult : [derivedStateResult];\n\n  for (const s of derivedStates) {\n    if (!(s instanceof DerivedStateResult)) {\n      throw new Error('Results from the derived state calculation must be a DerivedStateResult. See https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/-/wikis/Derived-State');\n    }\n  }\n\n  return derivedStateResult;\n}; // These methods will call hooks in the same order even though they use loops and callbacks\n\n/* eslint-disable react-hooks/rules-of-hooks */\n\n/**\n * Custom hook to get the ctxCompute result and use it to run other hooks\n *\n * @param {Object} derivedStateResult Function that returns DerivedStateResult\n * @param {Object} ctxMin Context available to ctxCompute\n * @returns {Any} The computed result\n */\n\n\nconst useDerivedStateCompute = (derivedStateResult, ctxMin) => {\n  var _s7 = $RefreshSig$();\n\n  var _s2 = $RefreshSig$(); //Return the latest result of the memoized compute function\n\n\n  const processDerivedState = _ref2 => {\n    _s7();\n\n    _s2();\n\n    let {\n      additionalParameters,\n      ctxParameters,\n      compute\n    } = _ref2;\n    return useMemo(() => compute({\n      ctx: ctxMin // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    }, ...additionalParameters), [...additionalParameters, ...ctxParameters.map(x => get(ctxMin, x))]);\n  };\n\n  _s7(processDerivedState, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n  _s2(processDerivedState, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n  return isArray(derivedStateResult) ? derivedStateResult.map(processDerivedState) : processDerivedState(derivedStateResult);\n};\n\nconst setupCtxFromDerivedStates = function (derivedStates) {\n  let entries = Object.entries(derivedStates);\n  let derivedStatesCollection = entries.reduce((acc, _ref3) => {\n    let [ctxName, derivedStates] = _ref3;\n    let value = isArray(derivedStates) ? derivedStates : [derivedStates];\n    acc.push(...value);\n    return acc;\n  }, []);\n  let allctx = orderBy(uniq(derivedStatesCollection.reduce((acc2, nxt) => {\n    return [...acc2, ...nxt.ctxParameters];\n  }, [])), ['length'], ['desc']); //allctx = uniq( allctx );\n\n  return allctx.map(useCtx).reduce((ctx, nxt) => {\n    //for some objects (such as array) set can have side effects, so avoid if values match\n    if (nxt.value) {\n      if (get(ctx, nxt.path) !== nxt.value) {\n        set(ctx, nxt.path, nxt.value);\n      }\n    } else {\n      set(ctx, nxt.path, nxt.value);\n    }\n\n    return ctx;\n  }, {});\n};\n/**\n * Custom hook that will process the \"ctx\" configuration into the final object\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Component properties\n * @param {Object} data View model data\n * @param {Object} ctxImports Imported function map\n * @returns {Object} Processed ctx, global ctx, and dispatch\n */\n\n\nexport const useDerivedState = (vmDef, prop, data, ctxImports) => {\n  var _s8 = $RefreshSig$(),\n      _s9 = $RefreshSig$();\n\n  var _s3 = $RefreshSig$(),\n      _s4 = $RefreshSig$();\n\n  const ctxDefs = vmDef.declViewModelJson.ctx || {};\n  let directCtx = {};\n  let derivedStates = {};\n\n  _s8(_s3(_s8(Object.entries(ctxDefs).forEach(_s8(_s3(_s8(_ref4 => {\n    _s8();\n\n    _s3();\n\n    let [ctxName, ctxCompute] = _ref4;\n    ctxCompute = ctxCompute ? ctxImports[ctxName] : null;\n\n    if (ctxCompute) {\n      set(derivedStates, ctxName, getDerivedState(ctxCompute, {\n        vmDef,\n        prop,\n        data\n      }));\n    } else {\n      set(directCtx, ctxName, useCtx(ctxName).value);\n    }\n  }, \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  }), \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  }), \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  }), {}), \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  }), \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  }), \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  });\n\n  const computeFnDeps = setupCtxFromDerivedStates(derivedStates); //let entries = Object.entries( derivedStates );\n\n  const ctxMinDS = _s9(_s4(_s9(Object.entries(derivedStates).reduce(_s9(_s4(_s9((acc, _ref5) => {\n    _s9();\n\n    _s4();\n\n    let [ctxName, derivedStates] = _ref5;\n    const latestResult = useDerivedStateCompute(derivedStates, computeFnDeps);\n\n    if (latestResult) {\n      if (get(acc, ctxName) !== latestResult) {\n        set(acc, ctxName, latestResult);\n      }\n    } else {\n      set(acc, ctxName, latestResult);\n    }\n\n    return acc;\n  }, \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  }), \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  }), \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  }), {}), \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  }), \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  }), \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  });\n\n  const ctxMin = Object.assign({}, directCtx, ctxMinDS);\n  return {\n    //Everything in ctx. Need to be replaced by ctxMin\n    ctx: store.getState(),\n    //The derived ctx which only contains things this specific component needs\n    ctxMin,\n    //Dispatch to update ctx\n    ctxDispatch: useDispatch\n  };\n};\n/* eslint-enable react-hooks/rules-of-hooks */\n\n/**\n * Application Context Component\n * @param {object} props properties\n * @returns {function} react component\n */\n\nexport const AppCtxComponent = _ref6 => {\n  _s10();\n\n  _s5();\n\n  let {\n    children\n  } = _ref6; // NOTE: useMemo might not be safe here, if we see any side effect we\n  // will change it later\n\n  useMemo(() => init({\n    fetch: path => path ? get(store.getState(), path) : store.getState(),\n    dispatch: _ref7 => {\n      let {\n        path,\n        value\n      } = _ref7;\n      return store.dispatch({\n        type: path,\n        path,\n        value\n      });\n    }\n  }), []);\n  return /*#__PURE__*/_jsxDEV(ReduxProvider, {\n    store: store,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n\n_s10(AppCtxComponent, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n_c2 = AppCtxComponent;\n\n_s5(AppCtxComponent, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n_c = AppCtxComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppCtxComponent\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"AppCtxComponent\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/reactAppCtx.js"],"names":["Provider","_dispatchCtx","ctx","action","value","lodashFpSet","store","createStore","window","useCtx","path","useSelector","get","l","r","getDerivedState","data","derivedStateResult","ctxCompute","derivedStates","isArray","s","useDerivedStateCompute","processDerivedState","compute","useMemo","ctxParameters","x","setupCtxFromDerivedStates","entries","Object","derivedStatesCollection","acc","allctx","orderBy","uniq","nxt","set","useDerivedState","ctxDefs","vmDef","directCtx","ctxImports","computeFnDeps","ctxMinDS","latestResult","ctxMin","ctxDispatch","useDispatch","AppCtxComponent","children","init","fetch","dispatch","type"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * @module js/reactAppCtx\n */\nimport React, { useMemo } from 'react';\nimport lodashFpSet from 'lodash/fp/set';\nimport { get, set, orderBy, isArray, uniq } from 'lodash';\nimport { init } from 'js/appCtxService';\nimport { DerivedStateResult } from 'js/derivedContextService';\n\nimport { createStore } from 'redux';\nimport { useSelector, Provider as ReduxProvider, useDispatch } from 'react-redux';\n\nexport const _dispatchCtx = ( ctx = {}, action ) => {\n    const { path, value } = action;\n\n    if( path ) {\n        return lodashFpSet( path, value, ctx );\n    }\n    return ctx;\n};\n\n// create store - will be decided by 1st param of the dispatchFn\nconst store = createStore( _dispatchCtx, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() );\n\n/**\n * Hook to pull a value from from the global ctx store\n *\n * @param {String|Array} path The path to the property\n * @returns {Any} The current value in ctx\n */\nexport const useCtx = path => useSelector( ctx => {\n    return {\n        path,\n        value: get( ctx, path )\n    };\n}, ( l, r ) => l.value === r.value );\n\nconst getDerivedState = ( ctxCompute, { vmDef, prop, data } ) => {\n    const derivedStateResult = ctxCompute( vmDef, prop, data );\n    const derivedStates = isArray( derivedStateResult ) ? derivedStateResult : [ derivedStateResult ];\n    for( const s of derivedStates ) {\n        if( !( s instanceof DerivedStateResult ) ) {\n            throw new Error( 'Results from the derived state calculation must be a DerivedStateResult. See https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/-/wikis/Derived-State' );\n        }\n    }\n    return derivedStateResult;\n};\n\n// These methods will call hooks in the same order even though they use loops and callbacks\n/* eslint-disable react-hooks/rules-of-hooks */\n/**\n * Custom hook to get the ctxCompute result and use it to run other hooks\n *\n * @param {Object} derivedStateResult Function that returns DerivedStateResult\n * @param {Object} ctxMin Context available to ctxCompute\n * @returns {Any} The computed result\n */\nconst useDerivedStateCompute = ( derivedStateResult, ctxMin ) => {\n    //Return the latest result of the memoized compute function\n    const processDerivedState = ( { additionalParameters, ctxParameters, compute } ) => {\n        return useMemo( () => compute( {\n            ctx: ctxMin\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, ...additionalParameters ), [ ...additionalParameters, ...ctxParameters.map( x => get( ctxMin, x ) ) ] );\n    };\n    return isArray( derivedStateResult ) ? derivedStateResult.map( processDerivedState ) : processDerivedState( derivedStateResult );\n};\n\nconst setupCtxFromDerivedStates = function( derivedStates ) {\n    let entries = Object.entries( derivedStates );\n    let derivedStatesCollection = entries.reduce( ( acc, [ ctxName, derivedStates ] ) => {\n        let value = isArray( derivedStates ) ? derivedStates : [ derivedStates ];\n        acc.push( ...value );\n        return acc;\n    }, [] );\n\n    let allctx = orderBy( uniq( derivedStatesCollection.reduce( ( acc2, nxt ) => {\n        return [ ...acc2, ...nxt.ctxParameters ];\n    }, [] ) ), [ 'length' ], [ 'desc' ] );\n\n    //allctx = uniq( allctx );\n\n    return allctx.map( useCtx ).reduce( ( ctx, nxt ) => {\n        //for some objects (such as array) set can have side effects, so avoid if values match\n        if( nxt.value ) {\n            if( get( ctx, nxt.path ) !== nxt.value ) {\n                set( ctx, nxt.path, nxt.value );\n            }\n        } else {\n            set( ctx, nxt.path, nxt.value );\n        }\n        return ctx;\n    }, {} );\n};\n\n/**\n * Custom hook that will process the \"ctx\" configuration into the final object\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Component properties\n * @param {Object} data View model data\n * @param {Object} ctxImports Imported function map\n * @returns {Object} Processed ctx, global ctx, and dispatch\n */\nexport const useDerivedState = ( vmDef, prop, data, ctxImports ) => {\n    const ctxDefs = vmDef.declViewModelJson.ctx || {};\n    let directCtx = {};\n    let derivedStates = {};\n    Object.entries( ctxDefs )\n        .forEach( ( [ ctxName, ctxCompute ] ) => {\n            ctxCompute = ctxCompute ? ctxImports[ ctxName ] : null;\n            if( ctxCompute ) {\n                set( derivedStates, ctxName, getDerivedState( ctxCompute, { vmDef, prop, data } ) );\n            } else {\n                set( directCtx, ctxName, useCtx( ctxName ).value );\n            }\n        }, {} );\n\n    const computeFnDeps = setupCtxFromDerivedStates( derivedStates );\n    //let entries = Object.entries( derivedStates );\n\n    const ctxMinDS = Object.entries( derivedStates )\n        .reduce( ( acc, [ ctxName, derivedStates ] ) => {\n            const latestResult = useDerivedStateCompute( derivedStates, computeFnDeps );\n            if( latestResult ) {\n                if( get( acc, ctxName ) !== latestResult ) {\n                    set( acc, ctxName, latestResult );\n                }\n            } else {\n                set( acc, ctxName, latestResult );\n            }\n            return acc;\n        }, {} );\n    const ctxMin = Object.assign( {}, directCtx, ctxMinDS );\n\n    return {\n        //Everything in ctx. Need to be replaced by ctxMin\n        ctx: store.getState(),\n        //The derived ctx which only contains things this specific component needs\n        ctxMin,\n        //Dispatch to update ctx\n        ctxDispatch: useDispatch\n    };\n};\n/* eslint-enable react-hooks/rules-of-hooks */\n\n/**\n * Application Context Component\n * @param {object} props properties\n * @returns {function} react component\n */\nexport const AppCtxComponent = ( { children } ) => {\n    // NOTE: useMemo might not be safe here, if we see any side effect we\n    // will change it later\n    useMemo( () => init( {\n        fetch: path => path ? get( store.getState(), path ) : store.getState(),\n        dispatch: ( { path, value } ) => store.dispatch( { type: path, path, value } )\n    } ), [] );\n\n    return (\n        <ReduxProvider store={store}>\n            {children}\n        </ReduxProvider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import eventBus from'js/eventBus';import _ from'lodash';import{jsx as _jsx}from\"react/jsx-runtime\";export const awProgressIndicatorRenderFunction=props=>{let showProgressBar=props.viewModel.data.progressIndicatorStatus;let progressBarCss=showProgressBar?'aw-layout-progressBar':'aw-layout-progressBar hide';return/*#__PURE__*/_jsx(\"div\",{className:\"aw-layout-progressBarContainer\",children:/*#__PURE__*/_jsx(\"div\",{className:progressBarCss,role:\"progressbar\",\"aria-label\":props.i18n.LOADING_TEXT,\"aria-busy\":showProgressBar,children:/*#__PURE__*/_jsx(\"div\",{className:\"aw-layout-progressBarCylon\"})})});};export const registerEvents=function(name,viewModel,progressIndicatorRef){progressIndicatorRef.current={count:0,progressIndicatorStatus:false};let subscriptions=subscribeToEvents(name,viewModel);return{subscriptions,progressIndicatorRef};};/**\n * Subscribe to custom Events\n * @param {Object} props object\n */const subscribeToEvents=(name,data)=>{let startEventName=name?name+'-progress.start':'progress.start';let endEventName=name?name+'-progress.end':'progress.end';let subscriptions=[];subscriptions.push(eventBus.subscribe(startEventName,()=>{startProgressIndicator(data);}));subscriptions.push(eventBus.subscribe(endEventName,()=>{stopProgressIndicator(data);}));return subscriptions;};const animationTimer=1000;const startIndicator=_.debounce(viewModel=>{let data=viewModel.getData();let progressIndicatorRef=data.progressIndicatorRef;let count=progressIndicatorRef.current.count;if(count>0){viewModel.dispatch({path:'data.progressIndicatorStatus',value:true});}},animationTimer,false);/**\n * Start the progress Indicator\n * @param {Object} viewModel object\n */export const startProgressIndicator=viewModel=>{let data=viewModel.getData();let progressIndicatorRef=data.progressIndicatorRef;let count=progressIndicatorRef.current.count;count+=1;progressIndicatorRef.current={count,progressIndicatorStatus:true};if(!data.progressIndicatorStatus){startIndicator(viewModel);}};/**\n * Stop the progress Indicator\n * @param {Object} viewModel objects\n */export const stopProgressIndicator=viewModel=>{let data=viewModel.getData();let progressIndicatorRef=data.progressIndicatorRef;let count=progressIndicatorRef.current.count;count-=1;progressIndicatorRef.current={count:count<=0?0:count,progressIndicatorStatus:false};if(count<=0){viewModel.dispatch({path:'data.progressIndicatorStatus',value:false});}};export const destroyIndicatorSubscription=subscriptions=>{if(subscriptions&&subscriptions.length>0){subscriptions.forEach(subscription=>{eventBus.unsubscribe(subscription);});}};","map":null,"metadata":{},"sourceType":"module"}
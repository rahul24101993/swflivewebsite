{"ast":null,"code":"var _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s5 = $RefreshSig$(); // Copyright (c) 2021 Siemens\n\n/**\n * @module js/declEditHandlerFactory\n */\n\n\nimport { useReducer, useState } from 'react';\nimport _ from 'lodash';\nimport declDataCtxService from 'js/declarativeDataCtxService';\nimport editHandlerFactory from 'js/editHandlerFactory';\nimport editHandlerService from 'js/editHandlerService';\nimport dataSourceService from 'js/dataSourceService';\n\nconst editHandlerReducer = (state, action) => {\n  if (action.type === 'SET_EDIT_STATE_CHANGED') {\n    return { ...state,\n      _editing: action.value\n    };\n  }\n\n  return state;\n};\n\nconst useEditStateChangeObserver = () => {\n  _s6();\n\n  _s(); // cursor hook\n\n\n  const [editHandlerState, editStateChangeDispatcher] = useReducer(editHandlerReducer, {\n    // revisitme: move startIndex logic to here\n    _editing: false\n  });\n  return {\n    editHandlerState,\n    editStateChangeDispatcher\n  };\n};\n\n_s6(useEditStateChangeObserver, \"HvYiEwvOh6zGTiOcKKAtTzmebd8=\");\n\n_s(useEditStateChangeObserver, \"gdAViTs4IQ0jAbYBdA7BsoBOEqc=\");\n\nexport const useBuildEditHandler = (editHandlerJson, ehName, viewModel, dataCtxNode, editHandlerRef, fields) => {\n  _s7();\n\n  _s2();\n\n  let editHandlerJsonIn = { ...editHandlerJson\n  };\n  declDataCtxService.applyScope(viewModel, editHandlerJsonIn, null, dataCtxNode);\n  return useEditHandler(editHandlerJsonIn, ehName, viewModel, editHandlerRef, fields);\n};\n\n_s7(useBuildEditHandler, \"QID1gQmpyEFpWPN6sRmFKYTNXFA=\", false, function () {\n  return [useEditHandler];\n});\n\n_s2(useBuildEditHandler, \"QID1gQmpyEFpWPN6sRmFKYTNXFA=\", false, function () {\n  return [useEditHandler];\n});\n\nexport const useEditHandler = (editHandlerJson, ehName, viewModel, editHandlerRef, fields) => {\n  _s8();\n\n  _s3();\n\n  const {\n    editHandlerState,\n    editStateChangeDispatcher\n  } = useEditStateChangeObserver();\n  return buildEditHandler(editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields);\n};\n\n_s8(useEditHandler, \"UHEryumPeEgXHdi2Bxjg/QRqkPs=\", false, function () {\n  return [useEditStateChangeObserver];\n});\n\n_s3(useEditHandler, \"hFJIMVCbTVbKwJYoSzCR1TxEf5w=\", false, function () {\n  return [useEditStateChangeObserver];\n});\n\nconst buildEditHandler = (editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields) => {\n  if (!editHandlerRef.current || !editHandlerService.getEditHandler(editHandlerJson.context) && editHandlerJson.dataSource) {\n    editHandlerRef.current = editHandlerFactory.createEditHandler(dataSourceService.createNewDataSource({\n      declViewModel: { ...viewModel.atomicDataRef.xrtState,\n        panelId: viewModel._internal.panelId,\n        context: editHandlerJson.context,\n        atomicData: fields.xrtState\n      }\n    }));\n    editHandlerService.setEditHandler(editHandlerRef.current, editHandlerJson.context);\n\n    if (editHandlerJson.setActive) {\n      editHandlerService.setActiveEditHandlerContext(editHandlerJson.context);\n    }\n\n    if (_.get(editHandlerRef.current, 'setDataUpdater')) {\n      editHandlerRef.current.setDataUpdater(editStateChangeDispatcher);\n    }\n  }\n\n  editHandlerService.updateStates(editHandlerRef.current, editHandlerJson.context);\n  editHandlerRef.current._editing = editHandlerState._editing;\n  return editHandlerRef.current;\n};\n/**\n  * Edit handlers hook\n  * @param {Object} viewModel View model\n  */\n\n\nexport function useEditHandlers(editHandlersJson, viewModel, dataCtxNode, editHandlerRef, fields) {\n  _s10();\n\n  var _s9 = $RefreshSig$();\n\n  _s5();\n\n  var _s4 = $RefreshSig$();\n\n  let editHandlers = {}; // Just to make sure the editHandlers name order is same in every render.\n\n  const [editHandlerNames] = useState(() => {\n    return editHandlersJson ? Object.keys(editHandlersJson) : [];\n  });\n\n  _s9(_s4(_s9(editHandlerNames.forEach(_s9(_s4(_s9(ehName => {\n    _s9();\n\n    _s4(); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n    editHandlers[ehName] = useBuildEditHandler(editHandlersJson[ehName], ehName, viewModel, dataCtxNode, editHandlerRef, fields);\n  }, \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  }), \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  }), \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  })), \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  }), \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  }), \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  });\n\n  return editHandlers;\n}\n/**\n *\n * @param {String} context - edit handler context key\n */\n\n_s10(useEditHandlers, \"iaaH+RJHId5DeB9Wrktp0pwyuA4=\");\n\n_s5(useEditHandlers, \"SRzuSwwujKI6wfJBbfIHkxE8D0A=\");\n\nexport function removeEditHandler(context) {\n  editHandlerService.removeEditHandler(context);\n}","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/declEditHandlerFactory.js"],"names":["editHandlerReducer","action","_editing","value","useEditStateChangeObserver","useReducer","editStateChangeDispatcher","useBuildEditHandler","editHandlerJsonIn","editHandlerJson","declDataCtxService","useEditHandler","buildEditHandler","editHandlerRef","editHandlerService","declViewModel","viewModel","panelId","context","atomicData","fields","xrtState","_","editHandlerState","useEditHandlers","editHandlers","useState","editHandlersJson","Object","ehName"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/declEditHandlerFactory\n */\nimport { useReducer, useState } from 'react';\nimport _ from 'lodash';\nimport declDataCtxService from 'js/declarativeDataCtxService';\nimport editHandlerFactory from 'js/editHandlerFactory';\nimport editHandlerService from 'js/editHandlerService';\nimport dataSourceService from 'js/dataSourceService';\n\nconst editHandlerReducer = ( state, action ) => {\n    if( action.type === 'SET_EDIT_STATE_CHANGED' ) {\n        return { ...state, _editing: action.value };\n    }\n\n    return state;\n};\n\nconst useEditStateChangeObserver = () => {\n    // cursor hook\n    const [ editHandlerState, editStateChangeDispatcher ] = useReducer( editHandlerReducer, {\n        // revisitme: move startIndex logic to here\n        _editing: false\n    } );\n\n    return {\n        editHandlerState,\n        editStateChangeDispatcher\n    };\n};\n\nexport const useBuildEditHandler = ( editHandlerJson, ehName, viewModel, dataCtxNode, editHandlerRef, fields ) => {\n    let editHandlerJsonIn = { ...editHandlerJson };\n    declDataCtxService.applyScope( viewModel, editHandlerJsonIn, null, dataCtxNode );\n    return useEditHandler( editHandlerJsonIn, ehName, viewModel, editHandlerRef, fields );\n};\n\nexport const useEditHandler = ( editHandlerJson, ehName, viewModel, editHandlerRef, fields ) => {\n    const { editHandlerState, editStateChangeDispatcher } = useEditStateChangeObserver();\n\n    return buildEditHandler( editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields );\n};\n\nconst buildEditHandler = ( editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields ) => {\n    if( !editHandlerRef.current || !editHandlerService.getEditHandler( editHandlerJson.context ) && editHandlerJson.dataSource ) {\n        editHandlerRef.current = editHandlerFactory.createEditHandler( dataSourceService.createNewDataSource( {\n            declViewModel: { ...viewModel.atomicDataRef.xrtState,\n                panelId: viewModel._internal.panelId,\n                context: editHandlerJson.context,\n                atomicData: fields.xrtState\n            }\n        } ) );\n        editHandlerService.setEditHandler( editHandlerRef.current, editHandlerJson.context );\n\n        if( editHandlerJson.setActive ) {\n            editHandlerService.setActiveEditHandlerContext( editHandlerJson.context );\n        }\n\n        if( _.get( editHandlerRef.current, 'setDataUpdater' ) ) {\n            editHandlerRef.current.setDataUpdater( editStateChangeDispatcher );\n        }\n    }\n\n    editHandlerService.updateStates( editHandlerRef.current, editHandlerJson.context );\n    editHandlerRef.current._editing = editHandlerState._editing;\n\n    return editHandlerRef.current;\n};\n\n/**\n  * Edit handlers hook\n  * @param {Object} viewModel View model\n  */\nexport function useEditHandlers( editHandlersJson, viewModel, dataCtxNode, editHandlerRef, fields ) {\n    let editHandlers = {};\n    // Just to make sure the editHandlers name order is same in every render.\n    const [ editHandlerNames ] = useState( () => {\n        return editHandlersJson ? Object.keys( editHandlersJson ) : [];\n    } );\n\n    editHandlerNames.forEach( ( ehName ) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        editHandlers[ ehName ] = useBuildEditHandler( editHandlersJson[ ehName ], ehName, viewModel, dataCtxNode, editHandlerRef, fields );\n    } );\n    return editHandlers;\n}\n\n/**\n *\n * @param {String} context - edit handler context key\n */\nexport function removeEditHandler( context ) {\n    editHandlerService.removeEditHandler( context );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwDateTimeValService.js\"; // Copyright (c) 2021 Siemens\n\nimport AwDateVal from 'viewmodel/AwDateValViewModel';\nimport AwTimeVal from 'viewmodel/AwTimeValViewModel';\nimport { getValClass } from 'js/componentUtils';\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport uwPropSvc from 'js/uwPropertyService';\nimport uwSupportSvc from 'js/uwSupportService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awDatetimeValRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    ...prop\n  } = props;\n  const isEnabled = prop.fielddata.isEnabled;\n  const hasLov = prop.fielddata.hasLov;\n  const isArray = prop.fielddata.isArray;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  let fielddata = { ...prop.fielddata\n  };\n  let dateApi = { ...prop.fielddata.dateApi\n  };\n  dateApi.isNotLov = true;\n  fielddata.dateApi = dateApi;\n  let otherProps = { ...prop,\n    fielddata\n  };\n\n  if (data._isRefreshNeeded) {\n    otherProps.parentSelected = true;\n    data._isRefreshNeeded = false;\n  }\n\n  if (fielddata.dateApi.isDateEnabled && fielddata.dateApi.isTimeEnabled) {\n    //If date and time enabled then time popup should be handled\n    otherProps.onChange = event => {\n      if (!isArray) {\n        prop.onChange(event);\n      } else {\n        data.selectedDate = event.target.value;\n        dispatch({\n          path: 'data._isRefreshNeeded',\n          value: true\n        });\n      }\n    };\n\n    otherProps.onTimeSelectedOrEntered = timeValue => {\n      let timeInMilliSec = dateTimeSvc.getTimeInMilliSec(timeValue);\n      let dateAndTime;\n\n      if (timeInMilliSec === null) {\n        dateAndTime = null;\n      } else {\n        dateAndTime = data.selectedDate ? new Date(Number(data.selectedDate) + timeInMilliSec) : new Date(Number(dateTimeSvc.getDefaultDate(fielddata.dateApi)) + timeInMilliSec);\n      }\n\n      prop.onChange({\n        target: {\n          value: dateAndTime\n        }\n      });\n      dispatch({\n        path: 'data._isRefreshNeeded',\n        value: false\n      });\n    };\n  }\n\n  let labelDisplay;\n\n  if (prop && prop.labeldisplay) {\n    labelDisplay = uwSupportSvc.retrievePropertyLabelDisplay(prop.labeldisplay);\n    uwPropSvc.setPropertyLabelDisplay(prop, labelDisplay);\n  }\n\n  const getApplicableClasses = () => {\n    return getValClass(otherProps);\n  };\n\n  const renderDateTime = () => {\n    if (!isEnabled) {\n      otherProps.fielddata.uiValue = otherProps.value;\n      return /*#__PURE__*/_jsxDEV(AwPropertyNonEditVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (hasLov) {\n      return /*#__PURE__*/_jsxDEV(AwPropertyLovVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (!prop.fielddata.dateApi.isTimeEnabled) {\n      return /*#__PURE__*/_jsxDEV(AwDateVal, { ...otherProps,\n        className: getApplicableClasses()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this);\n    } else if (!prop.fielddata.dateApi.isDateEnabled) {\n      return /*#__PURE__*/_jsxDEV(AwTimeVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this);\n    } // renderFn for Date and Time\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getApplicableClasses() + ' sw-row sw-date-time-container propertyLabelTopContainer',\n      children: [/*#__PURE__*/_jsxDEV(AwDateVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AwTimeVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  };\n\n  if (isArray) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: getApplicableClasses() + ' sw-row sw-date-time-container propertyLabelTopContainer',\n      children: [/*#__PURE__*/_jsxDEV(AwDateVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AwTimeVal, { ...otherProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  }\n\n  if (labelDisplay === 'NO_PROPERTY_LABEL') {\n    return renderDateTime();\n  }\n\n  return renderDateTime();\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwDateTimeValService.js"],"names":["awDatetimeValRenderFunction","props","prop","isEnabled","hasLov","isArray","dispatch","fielddata","dateApi","otherProps","data","event","path","value","timeValue","timeInMilliSec","dateTimeSvc","dateAndTime","Number","target","labelDisplay","uwSupportSvc","uwPropSvc","getApplicableClasses","getValClass","renderDateTime"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport AwDateVal from 'viewmodel/AwDateValViewModel';\nimport AwTimeVal from 'viewmodel/AwTimeValViewModel';\nimport { getValClass } from 'js/componentUtils';\nimport AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';\nimport AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport uwPropSvc from 'js/uwPropertyService';\nimport uwSupportSvc from 'js/uwSupportService';\n\nexport const awDatetimeValRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        ...prop\n    } = props;\n    const isEnabled = prop.fielddata.isEnabled;\n    const hasLov = prop.fielddata.hasLov;\n    const isArray = prop.fielddata.isArray;\n    const { data, dispatch } = viewModel;\n\n    let fielddata = { ...prop.fielddata };\n    let dateApi = { ...prop.fielddata.dateApi };\n    dateApi.isNotLov = true;\n    fielddata.dateApi = dateApi;\n\n    let otherProps = { ...prop, fielddata };\n\n    if( data._isRefreshNeeded ) {\n        otherProps.parentSelected = true;\n        data._isRefreshNeeded = false;\n    }\n\n    if( fielddata.dateApi.isDateEnabled && fielddata.dateApi.isTimeEnabled ) {\n        //If date and time enabled then time popup should be handled\n        otherProps.onChange = ( event ) => {\n            if( !isArray ) {\n                prop.onChange( event );\n            } else {\n                data.selectedDate = event.target.value;\n                dispatch( { path: 'data._isRefreshNeeded', value: true } );\n            }\n        };\n\n        otherProps.onTimeSelectedOrEntered = ( timeValue ) => {\n            let timeInMilliSec = dateTimeSvc.getTimeInMilliSec( timeValue );\n            let dateAndTime;\n            if( timeInMilliSec === null ) {\n                dateAndTime = null;\n            } else{\n                dateAndTime = data.selectedDate ?\n                    new Date( Number( data.selectedDate ) + timeInMilliSec ) :\n                    new Date( Number( dateTimeSvc.getDefaultDate( fielddata.dateApi ) ) + timeInMilliSec );\n            }\n            prop.onChange( { target: { value: dateAndTime } } );\n            dispatch( { path: 'data._isRefreshNeeded', value: false } );\n        };\n    }\n\n    let labelDisplay;\n    if( prop && prop.labeldisplay ) {\n        labelDisplay = uwSupportSvc.retrievePropertyLabelDisplay( prop.labeldisplay );\n        uwPropSvc.setPropertyLabelDisplay( prop, labelDisplay );\n    }\n\n    const getApplicableClasses = () => {\n        return getValClass( otherProps );\n    };\n\n    const renderDateTime = () => {\n        if( !isEnabled ) {\n            otherProps.fielddata.uiValue = otherProps.value;\n            return (\n                <AwPropertyNonEditVal {...otherProps}></AwPropertyNonEditVal>\n            );\n        }\n\n        if( hasLov ) {\n            return (\n                <AwPropertyLovVal {...otherProps} ></AwPropertyLovVal>\n            );\n        }\n\n        if( !prop.fielddata.dateApi.isTimeEnabled ) {\n            return (\n                <AwDateVal {...otherProps} className={getApplicableClasses()} ></AwDateVal>\n            );\n        } else if( !prop.fielddata.dateApi.isDateEnabled ) {\n            return (\n                <AwTimeVal {...otherProps}></AwTimeVal>\n            );\n        }\n\n        // renderFn for Date and Time\n        return (\n            <div className={ getApplicableClasses( ) + ' sw-row sw-date-time-container propertyLabelTopContainer'}>\n                <AwDateVal {...otherProps}></AwDateVal>\n                <AwTimeVal {...otherProps}></AwTimeVal>\n            </div>\n        );\n    };\n\n    if( isArray ) {\n        return (\n            <div className={ getApplicableClasses( ) + ' sw-row sw-date-time-container propertyLabelTopContainer'}>\n                <AwDateVal {...otherProps}></AwDateVal>\n                <AwTimeVal {...otherProps}></AwTimeVal>\n            </div>\n        );\n    }\n    if( labelDisplay === 'NO_PROPERTY_LABEL' ) {\n        return renderDateTime();\n    }\n    return renderDateTime();\n};\n"]},"metadata":{},"sourceType":"module"}
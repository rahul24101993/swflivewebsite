{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwPropertyCheckboxLovChildService.js\";\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';\nimport { getListItemClasses } from 'js/componentUtils';\nimport { handleSelectionEvent } from 'js/selectionHelper';\nimport { noop } from 'js/declUtils';\nimport wcagSvc from 'js/wcagService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awPropertyCheckboxLovChildRenderFunction = props => {\n  const {\n    viewModel,\n    actions,\n    ...prop\n  } = props;\n  let {\n    field,\n    lovEntry,\n    dataProvider,\n    setLovEntry\n  } = prop;\n  let {\n    _state\n  } = viewModel.data;\n  const {\n    toggleCheck\n  } = actions; // _state is only maintained at this component level and is not passed in from the parent\n  // field contains array which has all checked values but is only available at first layer (P1, P2, P3)\n\n  const isChecked = _state.initialized ? _state.checked : lovEntry.isChecked || _state.checked;\n  const isSelected = dataProvider.selectionModel.isSelected(lovEntry);\n  const selectionEnabled = dataProvider.selectionModel.isSelectionEnabled();\n  const isFocused = lovEntry.attn;\n  const isGroupList = null;\n  const fixedCellHeight = null;\n  const mruFlag = lovEntry.lastMru === true ? ' sw-lov-lastMru' : '';\n\n  const handleSelection2 = (event, lovEntry, op) => {\n    if (dataProvider && dataProvider.selectionModel.isSelectionEnabled()) {\n      handleSelectionEvent([lovEntry], dataProvider.selectionModel, event, dataProvider.vmCollectionObj.vmCollection);\n      setLovEntry(lovEntry, event, op);\n      toggleCheck({\n        checked: isChecked\n      });\n    }\n  };\n\n  const handleSelection = (event, lovEntry) => {\n    event && event.stopPropagation();\n\n    if (lovEntry.hasChildren) {\n      if (!viewModel.data.indicator) {\n        viewModel.dispatch({\n          path: 'data',\n          value: {\n            indicator: true\n          }\n        });\n      } else {\n        viewModel.dispatch({\n          path: 'data',\n          value: {\n            indicator: false\n          }\n        });\n      }\n    } else {\n      const parent = event.target.closest('li');\n      const input = parent.getElementsByTagName('input')[0];\n      input.checked = input.checked ? !input.checked : true;\n      lovEntry.isChecked = input.checked; // handle setLovVal\n\n      handleSelection2(event, lovEntry, input.checked ? 'checked' : 'unchecked');\n\n      if (field) {\n        field.action && field.action(event);\n      }\n    }\n  }; //Only displaying checkboxes for elements without children\n\n\n  const renderCheckbox = lovEntry => {\n    if (!lovEntry.hasChildren) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"sw-checkbox-val\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          ...props.field,\n          checked: getCheckedStatus(),\n          \"aria-checked\": getCheckedStatus(),\n          onClick: noop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"sw-checkbox-pseudo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const handleKeyDown = (event, vmo) => {\n    if (wcagSvc.isValidKeyPress(event)) {\n      handleSelection(event, vmo);\n    } else {\n      wcagSvc.handleMoveUpOrDown(event, event.currentTarget.parentElement.parentElement);\n    }\n  };\n\n  const expandClass = () => {\n    let className = ['aw-jswidgets-lovchildren'];\n\n    if (viewModel.data.indicator) {\n      className.push('expanded');\n    }\n\n    return className.join(' ');\n  };\n\n  const getCheckedStatus = () => {\n    if (field && field.checked && field.checked.includes(lovEntry.propInternalValue)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const getClassName = type => {\n    if (!lovEntry.hasChildren && type === 'checkBox') {\n      return getListItemClasses(isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused) + mruFlag;\n    } else if (lovEntry.hasChildren && type === 'drilldown') {\n      return getListItemClasses(isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused);\n    }\n\n    return '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    role: \"option\",\n    \"aria-selected\": isSelected,\n    onClick: e => handleSelection(e, lovEntry),\n    onKeyDown: e => handleKeyDown(e, lovEntry),\n    className: getClassName('checkBox'),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: getClassName('drilldown'),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-checkbox-lov sw-row sw-component\",\n        children: [renderCheckbox(lovEntry), lovEntry.hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-jswidgets-lovIndicatorContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: expandClass(),\n            children: /*#__PURE__*/_jsxDEV(AwIcon, {\n              iconId: \"miscDownArrow_uxRefresh\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 49\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sw-cell-val\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sw-cell-valName\",\n            title: lovEntry.propDisplayValue,\n            children: lovEntry.propDisplayValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sw-cell-valDesc\",\n            title: lovEntry.propDisplayDescription,\n            children: lovEntry.propDisplayDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), lovEntry.hasChildren && viewModel.data.indicator && lovEntry.getChildren().map((childLOVEntry, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"aw-widgets-cellhierarchyItem\",\n      children: /*#__PURE__*/_jsxDEV(AwPropertyCheckboxLovChild, {\n        field: field,\n        lovEntry: childLOVEntry,\n        dataProvider: dataProvider,\n        setLovEntry: setLovEntry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\nexport const toggleCheck = (state, checked) => {\n  return { ...state,\n    initialized: true,\n    checked: !checked\n  };\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwPropertyCheckboxLovChildService.js"],"names":["awPropertyCheckboxLovChildRenderFunction","props","prop","setLovEntry","_state","viewModel","toggleCheck","isChecked","lovEntry","isSelected","dataProvider","selectionEnabled","isFocused","isGroupList","fixedCellHeight","mruFlag","handleSelection2","handleSelectionEvent","checked","handleSelection","event","path","value","indicator","parent","input","field","renderCheckbox","getCheckedStatus","noop","handleKeyDown","wcagSvc","expandClass","className","getClassName","type","getListItemClasses","e","propDisplayValue","propDisplayDescription","initialized"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';\nimport { getListItemClasses } from 'js/componentUtils';\nimport { handleSelectionEvent } from 'js/selectionHelper';\nimport { noop } from 'js/declUtils';\nimport wcagSvc from 'js/wcagService';\n\nexport const awPropertyCheckboxLovChildRenderFunction = ( props ) => {\n    const { viewModel, actions, ...prop } = props;\n    let { field, lovEntry, dataProvider, setLovEntry } = prop;\n    let { _state } = viewModel.data;\n    const { toggleCheck } = actions;\n    // _state is only maintained at this component level and is not passed in from the parent\n    // field contains array which has all checked values but is only available at first layer (P1, P2, P3)\n    const isChecked = _state.initialized ? _state.checked : lovEntry.isChecked || _state.checked;\n\n    const isSelected = dataProvider.selectionModel.isSelected( lovEntry );\n    const selectionEnabled = dataProvider.selectionModel.isSelectionEnabled();\n\n    const isFocused = lovEntry.attn;\n\n    const isGroupList = null;\n    const fixedCellHeight = null;\n    const mruFlag = lovEntry.lastMru === true ? ' sw-lov-lastMru' : '';\n\n    const handleSelection2 = ( event, lovEntry, op ) => {\n        if( dataProvider && dataProvider.selectionModel.isSelectionEnabled() ) {\n            handleSelectionEvent( [ lovEntry ], dataProvider.selectionModel, event, dataProvider.vmCollectionObj.vmCollection );\n            setLovEntry( lovEntry, event, op );\n\n            toggleCheck( { checked: isChecked } );\n        }\n    };\n\n    const handleSelection = ( event, lovEntry ) => {\n        event && event.stopPropagation();\n        if( lovEntry.hasChildren ) {\n            if( !viewModel.data.indicator ) {\n                viewModel.dispatch( { path: 'data', value: { indicator: true } } );\n            } else {\n                viewModel.dispatch( { path: 'data', value: { indicator: false } } );\n            }\n        } else {\n            const parent = event.target.closest( 'li' );\n            const input = parent.getElementsByTagName( 'input' )[ 0 ];\n            input.checked = input.checked ? !input.checked : true;\n            lovEntry.isChecked = input.checked;\n\n            // handle setLovVal\n            handleSelection2( event, lovEntry, input.checked ? 'checked' : 'unchecked' );\n            if( field ) {\n                field.action && field.action( event );\n            }\n        }\n    };\n\n    //Only displaying checkboxes for elements without children\n    const renderCheckbox = ( lovEntry ) => {\n        if( !lovEntry.hasChildren ) {\n            return (\n                <span className='sw-checkbox-val'>\n                    <input type='checkbox' {...props.field} checked={getCheckedStatus()} aria-checked={getCheckedStatus()} onClick={noop}></input>\n                    <span className='sw-checkbox-pseudo'></span>\n                </span>\n            );\n        }\n    };\n\n    const handleKeyDown = ( event, vmo ) => {\n        if( wcagSvc.isValidKeyPress( event ) ) {\n            handleSelection( event, vmo );\n        } else {\n            wcagSvc.handleMoveUpOrDown( event, event.currentTarget.parentElement.parentElement );\n        }\n    };\n\n    const expandClass = () => {\n        let className = [ 'aw-jswidgets-lovchildren' ];\n        if( viewModel.data.indicator ) {\n            className.push( 'expanded' );\n        }\n        return className.join( ' ' );\n    };\n\n    const getCheckedStatus = () => {\n        if( field && field.checked && field.checked.includes( lovEntry.propInternalValue ) ) {\n            return true;\n        }\n        return false;\n    };\n\n    const getClassName = ( type ) => {\n        if( !lovEntry.hasChildren && type === 'checkBox' ) {\n            return getListItemClasses( isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused ) + mruFlag;\n        }\n        else if( lovEntry.hasChildren && type === 'drilldown' ) {\n            return getListItemClasses( isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused );\n        }\n        return '';\n    };\n\n    return (\n        <li role='option'\n            aria-selected={isSelected}\n            onClick={( e )=>handleSelection( e, lovEntry )}\n            onKeyDown={( e )=>handleKeyDown( e, lovEntry )}\n            className={getClassName( 'checkBox' )}\n        >\n            <div className={getClassName( 'drilldown' )}>\n                <div className='sw-checkbox-lov sw-row sw-component'>\n                    { renderCheckbox( lovEntry )}\n                    {\n                        lovEntry.hasChildren && <div className='aw-jswidgets-lovIndicatorContainer'>\n                            <div className={expandClass()}>\n                                <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon  >\n                            </div>\n                        </div>\n                    }\n\n                    {/* <AwThumbnail icon-id='lovEntry.iconName' source='lovEntry.iconSource'/> */}\n                    <div className='sw-cell-val'>\n                        <div className='sw-cell-valName'\n                            title={lovEntry.propDisplayValue}>{lovEntry.propDisplayValue}\n                        </div>\n                        <div className='sw-cell-valDesc'\n                            title={lovEntry.propDisplayDescription}>{lovEntry.propDisplayDescription}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {\n                lovEntry.hasChildren && viewModel.data.indicator && lovEntry.getChildren().map( ( childLOVEntry, index ) =>\n                    <ul className='aw-widgets-cellhierarchyItem' key= {index}>\n                        <AwPropertyCheckboxLovChild field={field} lovEntry={childLOVEntry} dataProvider={dataProvider} setLovEntry={setLovEntry}></AwPropertyCheckboxLovChild>\n                    </ul>\n                )\n            }\n        </li>\n    );\n};\n\nexport const toggleCheck = ( state, checked ) => {\n    return { ...state, initialized: true, checked: !checked };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\nimport { DerivedStateResult } from 'js/derivedContextService';\n/**\n * DEPRECATED: no longer needed since components inherit class automatically now. Only used in a few rare cases\n * where class propagation was skipping a level. This is not best-practice and should be fixed too.\n *\n * Constructs component classes. Need a new name since component already means something else in terms of layout.\n * In this context, this is just an swf/react component (could be section, component, or element)...\n * All swf components should inherit class from their view element\n * @param {String} className class to use on component\n * @param {Object} prop property vm\n * @returns {String} ready to use classe names\n */\n\nexport function getCompClass(className, prop) {\n  let classes = [];\n\n  if (className) {\n    classes.push(className);\n  }\n\n  if (prop.className) {\n    classes.push(prop.className);\n  }\n\n  return classes.join(' ');\n}\n/**\n * Constructs property widget classes for properties.\n * Look at property vmo and set appropriate classes\n * @param {String} className any additional class to use on this property\n * @param {Object} prop property vm\n * @returns {String} ready to use classe names\n */\n\nexport function getPropClass(className, prop) {\n  let classes = ['sw-property', 'sw-component'];\n\n  if (className) {\n    classes.unshift(className);\n  }\n\n  if (prop.className) {\n    classes.push(prop.className);\n  }\n\n  const isEnabled = prop.fielddata.isEnabled;\n  const isEditable = prop.fielddata.isEditable;\n  const modifiable = prop.modifiable;\n  const hint = prop.fielddata.renderingHint;\n\n  if (prop.fielddata.labelPlacement === 'default') {\n    prop.fielddata.labelPlacement = isEditable === false || modifiable === false ? 'start' : 'top'; // override for special-cases\n\n    if (isEditable && prop.typex === 'BOOLEAN' || hint === 'radiobutton') {\n      if (hint === 'radiobutton' || hint === 'togglebutton') {\n        prop.fielddata.labelPlacement = 'start';\n      } else {\n        // reverse label/val order for editable checkbox\n        prop.fielddata.labelPlacement = 'end';\n      }\n    }\n  }\n\n  if (isEditable && prop.typex === 'BOOLEAN' || hint === 'radiobutton' || hint === 'togglebutton' || hint === 'checkbox') {\n    // used to align label with value\n    classes.push('sw-nonText');\n  } // apply label position - by default, it is top\n\n\n  if (!classes.includes('sw-column') && !classes.includes('sw-row')) {\n    if (prop.fielddata.labelPlacement === 'end') {\n      classes.push('sw-reverse sw-row');\n    } else if (prop.fielddata.labelPlacement === 'start') {\n      classes.push('sw-row');\n    } else if (prop.fielddata.labelPlacement === 'none') {\n      classes.push('sw-hideLabelName');\n    }\n  } // special-case sizing\n\n\n  if (prop.typex === 'BOOLEAN') {\n    classes.push('sw-autoSize');\n  }\n\n  if (isEditable === false || modifiable === false || hint === 'label') {\n    classes.push('sw-readOnly'); //prop.fielddata.disabled = true;\n  } else if (isEnabled === false) {\n    // only set disabled on the prop level if it's editable. (disabled will still get set on the input)\n    classes.push('sw-disabled');\n  }\n\n  if (prop.error && prop.error.length > 0) {\n    classes.push('sw-errorFlag');\n  }\n\n  return classes.join(' ');\n}\n/**\n * Constructs property val classes.\n * @param {Object} prop property vm\n * @returns {String} ready to use classe names\n */\n\nexport function getValClass(prop) {\n  let classes = ['sw-property-val'];\n\n  if ((prop.dirty === 'true' || prop.dirty === true) && prop.fielddata.isEditable) {\n    classes.push('sw-changed');\n  }\n\n  return classes.join(' ');\n}\n/**\n * A version of getValClass that uses derived state to improve performance\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\nexport const getValClassMemo = (vmDef, prop) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [prop.dirty],\n    compute: (renderContext, isDirty) => {\n      let classes = ['sw-property-val'];\n\n      if (isDirty === 'true' || isDirty === true) {\n        classes.push('sw-changed');\n      }\n\n      return classes.join(' ');\n    }\n  })];\n};\n/**\n * Get list item classes for aw-list\n * @param {Boolean} isSelectionEnabled true/false\n * @param {Boolean} isGroupList true/false\n * @param {Boolean} fixedCellHeight true/false\n * @returns {String} classes\n */\n\nexport function getListItemClasses(selected, isSelectionEnabled, isGroupList, fixedCellHeight, isFocused, selectionModelActivated) {\n  let classes = ['sw-aria-border aw-widgets-cellListItem aw-widgets-cellTop'];\n\n  if (selected) {\n    classes.push('aw-widgets-cellListItemSelected');\n  }\n\n  if (isFocused) {\n    classes.push('aw-list-itemFocused');\n  }\n\n  if (!isSelectionEnabled) {\n    classes.push('aw-widgets-hideCellListSelEffect');\n  }\n\n  if (isGroupList) {\n    classes.push('aw-widgets-groupCellListItem');\n  }\n\n  if (fixedCellHeight) {\n    classes.push('aw-widgets-fixedCellHeight');\n  }\n\n  if (selected && !selectionModelActivated) {\n    classes.push('aw-widgets-cellListItemInactivated');\n  }\n\n  return classes.join(' ');\n}","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/componentUtils.js"],"names":["classes","prop","isEnabled","isEditable","modifiable","hint","getValClassMemo","ctxParameters","additionalParameters","compute","isDirty","selected"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\nimport { DerivedStateResult } from 'js/derivedContextService';\n\n/**\n * DEPRECATED: no longer needed since components inherit class automatically now. Only used in a few rare cases\n * where class propagation was skipping a level. This is not best-practice and should be fixed too.\n *\n * Constructs component classes. Need a new name since component already means something else in terms of layout.\n * In this context, this is just an swf/react component (could be section, component, or element)...\n * All swf components should inherit class from their view element\n * @param {String} className class to use on component\n * @param {Object} prop property vm\n * @returns {String} ready to use classe names\n */\nexport function getCompClass( className, prop ) {\n    let classes = [];\n\n    if( className ) {\n        classes.push( className );\n    }\n    if( prop.className ) {\n        classes.push( prop.className );\n    }\n\n    return classes.join( ' ' );\n}\n\n/**\n * Constructs property widget classes for properties.\n * Look at property vmo and set appropriate classes\n * @param {String} className any additional class to use on this property\n * @param {Object} prop property vm\n * @returns {String} ready to use classe names\n */\nexport function getPropClass( className, prop ) {\n    let classes = [ 'sw-property', 'sw-component' ];\n\n    if( className ) {\n        classes.unshift( className );\n    }\n\n    if( prop.className ) {\n        classes.push( prop.className );\n    }\n\n    const isEnabled = prop.fielddata.isEnabled;\n    const isEditable = prop.fielddata.isEditable;\n    const modifiable = prop.modifiable;\n    const hint = prop.fielddata.renderingHint;\n\n    if( prop.fielddata.labelPlacement === 'default' ) {\n        prop.fielddata.labelPlacement = isEditable === false || modifiable === false ? 'start' : 'top';\n\n        // override for special-cases\n        if( isEditable && prop.typex === 'BOOLEAN' || hint === 'radiobutton' ) {\n            if( hint === 'radiobutton' || hint === 'togglebutton' ) {\n                prop.fielddata.labelPlacement = 'start';\n            } else {\n                // reverse label/val order for editable checkbox\n                prop.fielddata.labelPlacement = 'end';\n            }\n        }\n    }\n\n    if( isEditable && prop.typex === 'BOOLEAN' || hint === 'radiobutton' || hint === 'togglebutton' || hint === 'checkbox' ) {\n        // used to align label with value\n        classes.push( 'sw-nonText' );\n    }\n\n    // apply label position - by default, it is top\n    if( !classes.includes( 'sw-column' ) && !classes.includes( 'sw-row' ) ) {\n        if( prop.fielddata.labelPlacement === 'end' ) {\n            classes.push( 'sw-reverse sw-row' );\n        } else if( prop.fielddata.labelPlacement === 'start' ) {\n            classes.push( 'sw-row' );\n        } else if( prop.fielddata.labelPlacement === 'none' ) {\n            classes.push( 'sw-hideLabelName' );\n        }\n    }\n\n    // special-case sizing\n    if( prop.typex === 'BOOLEAN' ) {\n        classes.push( 'sw-autoSize' );\n    }\n\n    if( isEditable === false || modifiable === false || hint === 'label' ) {\n        classes.push( 'sw-readOnly' );\n        //prop.fielddata.disabled = true;\n    } else if( isEnabled === false ) {\n        // only set disabled on the prop level if it's editable. (disabled will still get set on the input)\n        classes.push( 'sw-disabled' );\n    }\n\n    if( prop.error && prop.error.length > 0 ) {\n        classes.push( 'sw-errorFlag' );\n    }\n\n    return classes.join( ' ' );\n}\n\n/**\n * Constructs property val classes.\n * @param {Object} prop property vm\n * @returns {String} ready to use classe names\n */\nexport function getValClass( prop ) {\n    let classes = [ 'sw-property-val' ];\n    if( ( prop.dirty === 'true' || prop.dirty === true ) && prop.fielddata.isEditable ) {\n        classes.push( 'sw-changed' );\n    }\n    return classes.join( ' ' );\n}\n\n/**\n * A version of getValClass that uses derived state to improve performance\n *\n * @param {Object} vmDef View model\n * @param {Object} prop Current properties\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getValClassMemo = ( vmDef, prop ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ prop.dirty ],\n        compute: ( renderContext, isDirty ) => {\n            let classes = [ 'sw-property-val' ];\n            if( isDirty === 'true' || isDirty === true ) {\n                classes.push( 'sw-changed' );\n            }\n            return classes.join( ' ' );\n        }\n    } ) ];\n};\n\n/**\n * Get list item classes for aw-list\n * @param {Boolean} isSelectionEnabled true/false\n * @param {Boolean} isGroupList true/false\n * @param {Boolean} fixedCellHeight true/false\n * @returns {String} classes\n */\nexport function getListItemClasses( selected, isSelectionEnabled, isGroupList, fixedCellHeight, isFocused, selectionModelActivated ) {\n    let classes = [ 'sw-aria-border aw-widgets-cellListItem aw-widgets-cellTop' ];\n    if( selected ) {\n        classes.push( 'aw-widgets-cellListItemSelected' );\n    }\n    if( isFocused ) {\n        classes.push( 'aw-list-itemFocused' );\n    }\n    if( !isSelectionEnabled ) {\n        classes.push( 'aw-widgets-hideCellListSelEffect' );\n    }\n    if( isGroupList ) {\n        classes.push( 'aw-widgets-groupCellListItem' );\n    }\n    if( fixedCellHeight ) {\n        classes.push( 'aw-widgets-fixedCellHeight' );\n    }\n    if( selected && !selectionModelActivated ) {\n        classes.push( 'aw-widgets-cellListItemInactivated' );\n    }\n    return classes.join( ' ' );\n}\n"]},"metadata":{},"sourceType":"module"}
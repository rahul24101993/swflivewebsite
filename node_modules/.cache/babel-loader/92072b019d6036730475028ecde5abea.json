{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* global jQuery */\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/NotyModule\n */\nimport sanitizer from 'js/sanitizer';\nimport iconSvc from 'js/iconService';\nimport themeSvc from 'js/theme.service';\nimport eventBus from 'js/eventBus'; // revisitme - pengw\n// HINT: quick wire up for jq and needs to remove later\n\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\nvar exports = {};\nvar timeout = {\n  information: 6000,\n  error: 60000\n};\nvar modalType = {\n  information: false,\n  warning: true,\n  error: false\n};\n/**\n * @param {String} notyMessage - noty message\n */\n\nfunction renderMessage(notyMessage) {\n  // don't load jquery.noty.customized until it's actually needed\n  // revisitme - pengw\n  // HINT: need to define the path correctly later\n  import('./jquery.noty.customized').then(function (notyRenderer) {\n    if (notyMessage && notyMessage.type !== 'warning') {\n      var removeMessagesSubs = eventBus.subscribe('removeMessages', function () {\n        notyRenderer.close(); // unregister\n\n        eventBus.unsubscribe(removeMessagesSubs);\n      });\n    }\n\n    notyRenderer.setIconService(iconSvc);\n    notyRenderer.init(notyMessage);\n  });\n}\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\n\n\nfunction getNotyMessage(message, msgType, buttonsArr, messageData) {\n  var isModal = modalType[msgType];\n  var isTimeout = timeout[msgType];\n  var closeConfig = ['X', 'stayOnClick'];\n  var sanitizedMessage = sanitizer.sanitizeHtmlValue(message);\n  var parsedHtml = parseMessage(sanitizedMessage);\n  var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n\n  if (buttonsArr && buttonsArr.length > 0) {\n    isModal = true;\n    isTimeout = false;\n    closeConfig = [];\n  }\n\n  var notyMessage = {\n    layout: 'bottom',\n    theme: currentTheme,\n    type: msgType,\n    // Do not pass in escaped or safe html string in case of custom message.\n    text: messageData ? sanitizedMessage : parsedHtml,\n    dismissQueue: true,\n    maxVisible: 3,\n    modal: isModal,\n    closeWith: closeConfig,\n    animation: {\n      open: {\n        height: 'toggle'\n      },\n      close: {\n        height: 'toggle'\n      },\n      easing: 'swing',\n      speed: 500\n    },\n    timeout: isTimeout,\n    messageData: messageData\n  };\n\n  if (buttonsArr && buttonsArr.length > 0) {\n    notyMessage.buttons = buttonsArr;\n  }\n\n  return notyMessage;\n}\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\n\n\nfunction parseMessage(message) {\n  var escapedStr = '';\n  var parsedHtml = null;\n\n  if (message) {\n    escapedStr = message.replace(/(<br|<\\/br)\\s*[/]?>/gi, '\\n');\n    parsedHtml = sanitizer.htmlEscapeAllowEntities(escapedStr, true, true);\n    return parsedHtml;\n  }\n\n  return message;\n}\n/**\n * Get the modal type for the message.\n * messageDefination will get the higest priority\n * user can set globally using the setModelType which get second higest priority\n * OOTB modal type for message type are INFO:false , WARNING:true, ERROR:false\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\n\n\nexport let getModalType = function (messageDefn, messageType) {\n  if (messageDefn && messageDefn.hasOwnProperty('isModal')) {\n    return messageDefn.isModal;\n  }\n\n  return modalType[messageType];\n};\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {integer} timeoutValue - timeout Value in ms.\n */\n\nexport let setTimeout = function (messageType, timeoutValue) {\n  switch (messageType) {\n    case 'info':\n      timeout.information = timeoutValue;\n      timeout.error = timeoutValue * 10;\n      break;\n\n    case 'error':\n      timeout.error = timeoutValue;\n      break;\n  }\n};\n/**\n * Report an 'informational' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showInfo = function (message, messageData, messageDefn, buttonsArr) {\n  var notyMessage = getNotyMessage(message, 'information', buttonsArr, messageData);\n  renderMessage(notyMessage);\n};\n/**\n * Report an 'alert' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n */\n\nexport let showAlert = function (message, messageData) {\n  var sanitizedMessage = sanitizer.sanitizeHtmlValue(message);\n  var parsedHtml = parseMessage(sanitizedMessage);\n  var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n  var notyMessage = {\n    layout: 'bottom',\n    theme: currentTheme,\n    type: 'alert',\n    // Do not pass in escaped or safe html string in case of custom message.\n    text: messageData ? sanitizedMessage : parsedHtml,\n    dismissQueue: true,\n    maxVisible: 3,\n    closeWith: ['X', 'stayOnClick'],\n    animation: {\n      open: {\n        height: 'toggle'\n      },\n      close: {\n        height: 'toggle'\n      },\n      easing: 'swing',\n      speed: 500\n    },\n    timeout: timeout.info,\n    messageData: messageData\n  };\n  renderMessage(notyMessage);\n};\n/**\n * Report an 'warning' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {Object} buttonsArr - Array of buttons as user options\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n */\n\nexport let showWarning = function (message, buttonsArr, messageData, messageDefn) {\n  var notyMessage = getNotyMessage(message, 'warning', buttonsArr, messageData);\n  renderMessage(notyMessage);\n};\n/**\n * Report an 'error' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showError = function (message, messageData, messageDefn, buttonsArr) {\n  var notyMessage = getNotyMessage(message, 'error', buttonsArr, messageData);\n  renderMessage(notyMessage);\n};\nexports = {\n  getModalType,\n  setTimeout,\n  showInfo,\n  showAlert,\n  showWarning,\n  showError\n};\nexport default exports;","map":{"version":3,"names":["sanitizer","iconSvc","themeSvc","eventBus","$","window","jQuery","exports","timeout","information","error","modalType","warning","renderMessage","notyMessage","then","notyRenderer","type","removeMessagesSubs","subscribe","close","unsubscribe","setIconService","init","getNotyMessage","message","msgType","buttonsArr","messageData","isModal","isTimeout","closeConfig","sanitizedMessage","sanitizeHtmlValue","parsedHtml","parseMessage","currentTheme","getTheme","length","layout","theme","text","dismissQueue","maxVisible","modal","closeWith","animation","open","height","easing","speed","buttons","escapedStr","replace","htmlEscapeAllowEntities","getModalType","messageDefn","messageType","hasOwnProperty","setTimeout","timeoutValue","showInfo","showAlert","info","showWarning","showError"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/noty/src/js/NotyModule.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* global jQuery */\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/NotyModule\n */\nimport sanitizer from 'js/sanitizer';\nimport iconSvc from 'js/iconService';\nimport themeSvc from 'js/theme.service';\nimport eventBus from 'js/eventBus';\n\n// revisitme - pengw\n// HINT: quick wire up for jq and needs to remove later\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\n\nvar exports = {};\n\nvar timeout = {\n    information: 6000,\n    error: 60000\n};\nvar modalType = {\n    information: false,\n    warning: true,\n    error: false\n};\n\n/**\n * @param {String} notyMessage - noty message\n */\nfunction renderMessage( notyMessage ) {\n    // don't load jquery.noty.customized until it's actually needed\n    // revisitme - pengw\n    // HINT: need to define the path correctly later\n    import( './jquery.noty.customized' ).then( function( notyRenderer ) {\n        if( notyMessage && notyMessage.type !== 'warning' ) {\n            var removeMessagesSubs = eventBus.subscribe( 'removeMessages', function() {\n                notyRenderer.close();\n                // unregister\n                eventBus.unsubscribe( removeMessagesSubs );\n            } );\n        }\n        notyRenderer.setIconService( iconSvc );\n        notyRenderer.init( notyMessage );\n    } );\n}\n\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\nfunction getNotyMessage( message, msgType, buttonsArr, messageData ) {\n    var isModal = modalType[ msgType ];\n    var isTimeout = timeout[ msgType ];\n    var closeConfig = [ 'X', 'stayOnClick' ];\n    var sanitizedMessage = sanitizer.sanitizeHtmlValue( message );\n    var parsedHtml = parseMessage( sanitizedMessage );\n    var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n\n    if( buttonsArr && buttonsArr.length > 0 ) {\n        isModal = true;\n        isTimeout = false;\n        closeConfig = [];\n    }\n    var notyMessage = {\n        layout: 'bottom',\n        theme: currentTheme,\n        type: msgType,\n        // Do not pass in escaped or safe html string in case of custom message.\n        text: messageData ? sanitizedMessage : parsedHtml,\n        dismissQueue: true,\n        maxVisible: 3,\n        modal: isModal,\n        closeWith: closeConfig,\n\n        animation: {\n            open: {\n                height: 'toggle'\n            },\n            close: {\n                height: 'toggle'\n            },\n            easing: 'swing',\n            speed: 500\n        },\n        timeout: isTimeout,\n        messageData: messageData\n    };\n    if( buttonsArr && buttonsArr.length > 0 ) {\n        notyMessage.buttons = buttonsArr;\n    }\n    return notyMessage;\n}\n\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\nfunction parseMessage( message ) {\n    var escapedStr = '';\n    var parsedHtml = null;\n    if( message ) {\n        escapedStr = message.replace( /(<br|<\\/br)\\s*[/]?>/gi, '\\n' );\n        parsedHtml = sanitizer.htmlEscapeAllowEntities( escapedStr, true, true );\n        return parsedHtml;\n    }\n    return message;\n}\n\n/**\n * Get the modal type for the message.\n * messageDefination will get the higest priority\n * user can set globally using the setModelType which get second higest priority\n * OOTB modal type for message type are INFO:false , WARNING:true, ERROR:false\n * @param {String} message - Message to parse.\n * @return {String} Returns escaped and safe HTML.\n */\nexport let getModalType = function( messageDefn, messageType ) {\n    if( messageDefn && messageDefn.hasOwnProperty( 'isModal' ) ) {\n        return messageDefn.isModal;\n    }\n    return modalType[ messageType ];\n};\n\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {integer} timeoutValue - timeout Value in ms.\n */\nexport let setTimeout = function( messageType, timeoutValue ) {\n    switch ( messageType ) {\n        case 'info':\n            timeout.information = timeoutValue;\n            timeout.error = timeoutValue * 10;\n            break;\n\n        case 'error':\n            timeout.error = timeoutValue;\n            break;\n    }\n};\n\n/**\n * Report an 'informational' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showInfo = function( message, messageData, messageDefn, buttonsArr ) {\n    var notyMessage = getNotyMessage( message, 'information', buttonsArr, messageData );\n    renderMessage( notyMessage );\n};\n/**\n * Report an 'alert' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n */\nexport let showAlert = function( message, messageData ) {\n    var sanitizedMessage = sanitizer.sanitizeHtmlValue( message );\n    var parsedHtml = parseMessage( sanitizedMessage );\n    var currentTheme = themeSvc.getTheme() ? themeSvc.getTheme() : 'lightTheme';\n    var notyMessage = {\n        layout: 'bottom',\n        theme: currentTheme,\n        type: 'alert',\n        // Do not pass in escaped or safe html string in case of custom message.\n        text: messageData ? sanitizedMessage : parsedHtml,\n        dismissQueue: true,\n        maxVisible: 3,\n        closeWith: [ 'X', 'stayOnClick' ],\n        animation: {\n            open: {\n                height: 'toggle'\n            },\n            close: {\n                height: 'toggle'\n            },\n            easing: 'swing',\n            speed: 500\n        },\n        timeout: timeout.info,\n        messageData: messageData\n    };\n    renderMessage( notyMessage );\n};\n/**\n * Report an 'warning' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {Object} buttonsArr - Array of buttons as user options\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n */\nexport let showWarning = function( message, buttonsArr, messageData, messageDefn ) {\n    var notyMessage = getNotyMessage( message, 'warning', buttonsArr, messageData );\n    renderMessage( notyMessage );\n};\n/**\n * Report an 'error' type pop up message using 'NotyJS' API.\n *\n * @param {String} message - Message to display.\n * @param {String} messageData - data to pass along with noty message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showError = function( message, messageData, messageDefn, buttonsArr ) {\n    var notyMessage = getNotyMessage( message, 'error', buttonsArr, messageData );\n    renderMessage( notyMessage );\n};\n\nexports = {\n    getModalType,\n    setTimeout,\n    showInfo,\n    showAlert,\n    showWarning,\n    showError\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
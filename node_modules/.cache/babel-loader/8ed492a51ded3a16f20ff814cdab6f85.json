{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwNavigateBreadcrumbService.js\"; // Copyright (c) 2021 Siemens\n\n/**\n * render function for AwBreadCrumb\n * @deprecated afx@4.2.0.\n * @alternative <br>\n * @obsoleteIn afx@5.1.0\n * @returns {JSX.Element} react component\n */\n\nimport AwBreadcrumbItem from 'viewmodel/AwNavigateBreadcrumbItemViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport resizeObserverSvc from 'js/resizeObserver.service';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const handleOverflow = (props, viewModel, elementRefList) => {\n  const {\n    crumbs\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  const ref = elementRefList.get('breadcrumb');\n\n  const calcOverflow = () => {\n    if (!ref.current.children) {\n      return;\n    }\n\n    let containerWidth = ref.current.parentContainer.clientWidth;\n    const allChildren = ref.current.children.filter(x => x).map(x => x.clientWidth);\n    const MARGIN = 8; // default margin-right: 8px is for each crumb\n\n    let updatedState;\n\n    if (allChildren && allChildren.length) {\n      // check how much space each crumb takes in ui\n      const childrenTotalWidth = allChildren.reduce((total, width) => total + width, 0);\n\n      if (containerWidth < childrenTotalWidth + MARGIN * allChildren.length) {\n        // need to check, how many crumbs come inside overflowChevron\n        containerWidth -= allChildren[0] + MARGIN * allChildren.length;\n        let overflowIndex = -1;\n\n        for (let i = allChildren.length - 1; i > 0; i--) {\n          if (containerWidth < allChildren[i]) {\n            overflowIndex = i;\n            break;\n          } else {\n            crumbs[i].visible = true;\n          }\n\n          containerWidth -= allChildren[i];\n        }\n\n        if (overflowIndex > -1) {\n          const overflowedCrumb = [];\n\n          for (let i = 1; i <= overflowIndex; i++) {\n            crumbs[i].visible = false;\n            overflowedCrumb.push(crumbs[i]);\n          }\n\n          updatedState = {\n            index: overflowIndex,\n            crumbs: overflowedCrumb\n          };\n        } else {\n          updatedState = {\n            index: -1,\n            crumbs: []\n          };\n        }\n      } else {\n        updatedState = {\n          index: -1,\n          crumbs: []\n        };\n      }\n    }\n\n    if (updatedState) {\n      dispatch && dispatch({\n        path: 'data.overflow',\n        value: updatedState\n      });\n    }\n  };\n\n  if (data.overflow.index !== -1) {\n    dispatch && dispatch({\n      path: 'data',\n      value: { ...data,\n        resize: data.resize === 'true' ? 'false' : 'true',\n        overflow: {\n          index: -1,\n          crumbs: []\n        }\n      }\n    });\n  } else {\n    calcOverflow();\n  }\n};\nexport const attachResizeObserver = (viewModel, elementRefList) => {\n  const {\n    dispatch\n  } = viewModel;\n  const ref = elementRefList.get('breadcrumb');\n\n  const addResizeObserver = () => {\n    if (resizeObserverSvc.supportsResizeObserver()) {\n      const callback = _.debounce(() => {\n        if (ref.current.parentContainer) {\n          const data = viewModel.getData();\n          dispatch && dispatch({\n            path: 'data',\n            value: { ...data,\n              resize: data.resize === 'true' ? 'false' : 'true',\n              overflow: {\n                index: -1,\n                crumbs: []\n              }\n            }\n          });\n        }\n      }, 200, {\n        maxWait: 1000,\n        trailing: true,\n        leading: false\n      });\n\n      ref.current.resizeObserver = resizeObserverSvc.observe(ref.current.parentContainer, callback);\n    }\n  };\n\n  addResizeObserver();\n};\nexport const onUnMount = elementRefList => {\n  // TODO: Future ref. not working as value of current updated in mount, not reflecting in unmount\n  if (elementRefList) {\n    const ref = elementRefList.get('breadcrumb');\n    ref.current && ref.current.resizeObserver && ref.current.resizeObserver();\n  }\n};\n/**\n * Method to publish analytics to server\n * @param {*} crumbs - array of all the related crumbs\n * @param {*} index - index of the crumb whose checvron is clicked\n */\n\nconst publishAnalytics = (crumbs, index) => {\n  let sanEvent = {\n    sanAnalyticsType: 'Breadcrumb',\n    sanCommandId: 'clickBreadcrumbChevron',\n    sanCommandTitle: crumbs[index].displayName\n  };\n  analyticsSvc.logCommands(sanEvent);\n};\n\nexport const awNavigateBreadcrumbRenderFn = props => {\n  const {\n    popuplist,\n    crumbs,\n    compact,\n    viewModel: {\n      data,\n      dispatch\n    }\n  } = props;\n  const ref = props.elementRefList.get('breadcrumb');\n\n  const handleChevronClick = index => {\n    dispatch && dispatch({\n      path: 'data.rotateChevronIndex',\n      value: data.rotateChevronIndex === index ? null : index\n    });\n\n    if (index !== -1) {\n      publishAnalytics(crumbs, index);\n    }\n  };\n\n  const createCrumbs = bcCrumbs => {\n    if (bcCrumbs) {\n      const {\n        overflow\n      } = data;\n\n      const attachingChildRef = (el, index) => {\n        if (!ref.current) {\n          ref.current = {};\n        }\n\n        if (!ref.current.children) {\n          ref.current.children = [];\n        }\n\n        ref.current.children[index] = el;\n      };\n\n      bcCrumbs.forEach(c => {\n        c.visible = !(c.index <= overflow.index && c.index !== 0);\n      });\n      return bcCrumbs.map((crumb, index) => {\n        crumb.index = index;\n        crumb.rotate = data.rotateChevronIndex === index ? !crumb.rotate : false;\n        let iconId = crumb.showArrow ? 'miscChevronRight' : '';\n\n        if (overflow.index > -1 && index === 0) {\n          crumb.rotate = false;\n          iconId = 'miscChevronLeftDouble';\n        }\n\n        if (crumb.visible === false) {\n          return null;\n        }\n\n        if (index === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sw-breadcrumb-item\",\n            ref: el => attachingChildRef(el, index),\n            children: /*#__PURE__*/_jsxDEV(AwBreadcrumbItem, {\n              crumb: crumb,\n              popuplist: popuplist,\n              chevronClick: handleChevronClick,\n              iconId: iconId,\n              overflowedCrumbs: overflow.crumbs\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 29\n            }, this)\n          }, crumb.displayName, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sw-breadcrumb-item\",\n          ref: el => attachingChildRef(el, index),\n          children: /*#__PURE__*/_jsxDEV(AwBreadcrumbItem, {\n            crumb: crumb,\n            popuplist: popuplist,\n            chevronClick: handleChevronClick,\n            iconId: iconId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this)\n        }, crumb.displayName, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this);\n      });\n    }\n  };\n\n  const getClassNames = () => {\n    const classNames = ['aw-layout-fxbreadCrumbs', 'aw-layout-flexColumn'];\n\n    if (compact) {\n      classNames.push('aw-widgets-breadCrumbCompact');\n    }\n\n    return classNames.join(' ');\n  };\n\n  const attachingParentRef = el => {\n    if (!ref.current) {\n      ref.current = {};\n    }\n\n    ref.current.parentContainer = el;\n  };\n\n  if (ref.current && ref.current.resizeObserver === undefined) {\n    //if no observer attached, attach one\n    attachResizeObserver(props.viewModel, props.elementRefList);\n  } //If no crumbs defined, h1 remains empty so conditionally return h1\n\n\n  return crumbs && crumbs.length && /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: getClassNames(),\n    ref: el => attachingParentRef(el),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-row justify-left\",\n      children: createCrumbs(crumbs)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 36\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwNavigateBreadcrumbService.js"],"names":["handleOverflow","crumbs","dispatch","ref","elementRefList","calcOverflow","containerWidth","allChildren","x","MARGIN","childrenTotalWidth","total","overflowIndex","i","overflowedCrumb","updatedState","index","path","value","data","resize","overflow","attachResizeObserver","addResizeObserver","resizeObserverSvc","callback","viewModel","maxWait","trailing","leading","onUnMount","publishAnalytics","sanEvent","sanAnalyticsType","sanCommandId","sanCommandTitle","displayName","analyticsSvc","awNavigateBreadcrumbRenderFn","props","handleChevronClick","createCrumbs","bcCrumbs","attachingChildRef","c","crumb","iconId","el","getClassNames","classNames","attachingParentRef"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n/**\n * render function for AwBreadCrumb\n * @deprecated afx@4.2.0.\n * @alternative <br>\n * @obsoleteIn afx@5.1.0\n * @returns {JSX.Element} react component\n */\nimport AwBreadcrumbItem from 'viewmodel/AwNavigateBreadcrumbItemViewModel';\nimport analyticsSvc from 'js/analyticsService';\nimport resizeObserverSvc from 'js/resizeObserver.service';\nimport _ from 'lodash';\n\nexport const handleOverflow = ( props, viewModel, elementRefList ) => {\n    const { crumbs } = props;\n    const { data, dispatch } = viewModel;\n    const ref = elementRefList.get( 'breadcrumb' );\n\n    const calcOverflow = () => {\n        if( !ref.current.children ) {\n            return;\n        }\n        let containerWidth = ref.current.parentContainer.clientWidth;\n        const allChildren = ref.current.children.filter( x => x ).map( x => x.clientWidth );\n        const MARGIN = 8; // default margin-right: 8px is for each crumb\n        let updatedState;\n        if( allChildren && allChildren.length ) {\n            // check how much space each crumb takes in ui\n            const childrenTotalWidth = allChildren.reduce( ( total, width ) => total + width, 0 );\n            if( containerWidth < childrenTotalWidth + MARGIN * allChildren.length ) {\n                // need to check, how many crumbs come inside overflowChevron\n                containerWidth -= allChildren[ 0 ] + MARGIN * allChildren.length;\n                let overflowIndex = -1;\n                for( let i = allChildren.length - 1; i > 0; i-- ) {\n                    if( containerWidth < allChildren[ i ] ) {\n                        overflowIndex = i;\n                        break;\n                    } else {\n                        crumbs[ i ].visible = true;\n                    }\n                    containerWidth -= allChildren[ i ];\n                }\n                if( overflowIndex > -1 ) {\n                    const overflowedCrumb = [];\n                    for( let i = 1; i <= overflowIndex; i++ ) {\n                        crumbs[ i ].visible = false;\n                        overflowedCrumb.push( crumbs[ i ] );\n                    }\n                    updatedState = { index: overflowIndex, crumbs: overflowedCrumb };\n                } else {\n                    updatedState = { index: -1, crumbs: [] };\n                }\n            } else {\n                updatedState = { index: -1, crumbs: [] };\n            }\n        }\n        if( updatedState ) {\n            dispatch && dispatch( { path: 'data.overflow', value: updatedState } );\n        }\n    };\n    if( data.overflow.index !== -1 ) {\n        dispatch && dispatch( { path: 'data', value: { ...data, resize: data.resize === 'true' ? 'false' : 'true', overflow: { index: -1, crumbs: [] } } } );\n    } else {\n        calcOverflow();\n    }\n};\n\nexport const attachResizeObserver = ( viewModel, elementRefList ) => {\n    const { dispatch } = viewModel;\n    const ref = elementRefList.get( 'breadcrumb' );\n\n    const addResizeObserver = () => {\n        if( resizeObserverSvc.supportsResizeObserver() ) {\n            const callback = _.debounce( () => {\n                if( ref.current.parentContainer ) {\n                    const data = viewModel.getData();\n                    dispatch && dispatch( { path: 'data', value: { ...data, resize: data.resize === 'true' ? 'false' : 'true', overflow: { index: -1, crumbs: [] } } } );\n                }\n            }, 200, {\n                maxWait: 1000,\n                trailing: true,\n                leading: false\n            } );\n            ref.current.resizeObserver = resizeObserverSvc.observe( ref.current.parentContainer, callback );\n        }\n    };\n\n    addResizeObserver();\n};\n\nexport const onUnMount = ( elementRefList ) => {\n    // TODO: Future ref. not working as value of current updated in mount, not reflecting in unmount\n    if( elementRefList ) {\n        const ref = elementRefList.get( 'breadcrumb' );\n        ref.current && ref.current.resizeObserver && ref.current.resizeObserver();\n    }\n};\n\n/**\n * Method to publish analytics to server\n * @param {*} crumbs - array of all the related crumbs\n * @param {*} index - index of the crumb whose checvron is clicked\n */\nconst publishAnalytics = ( crumbs, index ) => {\n    let sanEvent = {\n        sanAnalyticsType: 'Breadcrumb',\n        sanCommandId: 'clickBreadcrumbChevron',\n        sanCommandTitle: crumbs[ index ].displayName\n    };\n    analyticsSvc.logCommands( sanEvent );\n};\n\nexport const awNavigateBreadcrumbRenderFn = ( props ) => {\n    const { popuplist, crumbs, compact, viewModel: { data, dispatch } } = props;\n    const ref = props.elementRefList.get( 'breadcrumb' );\n\n    const handleChevronClick = ( index ) => {\n        dispatch && dispatch( { path: 'data.rotateChevronIndex', value: data.rotateChevronIndex === index ? null : index } );\n        if( index !== -1 ) {\n            publishAnalytics( crumbs, index );\n        }\n    };\n\n    const createCrumbs = ( bcCrumbs ) => {\n        if( bcCrumbs ) {\n            const { overflow } = data;\n            const attachingChildRef = ( el, index ) => {\n                if( !ref.current ) {\n                    ref.current = {};\n                }\n                if( !ref.current.children ) {\n                    ref.current.children = [];\n                }\n                ref.current.children[ index ] = el;\n            };\n\n            bcCrumbs.forEach( c => {\n                c.visible = !( c.index <= overflow.index && c.index !== 0 );\n            } );\n\n            return bcCrumbs.map( ( crumb, index ) => {\n                crumb.index = index;\n                crumb.rotate = data.rotateChevronIndex === index ? !crumb.rotate : false;\n                let iconId = crumb.showArrow ? 'miscChevronRight' : '';\n\n                if( overflow.index > -1 && index === 0 ) {\n                    crumb.rotate = false;\n                    iconId = 'miscChevronLeftDouble';\n                }\n                if( crumb.visible === false ) {\n                    return null;\n                }\n\n                if( index === 0 ) {\n                    return (\n                        <div className='sw-breadcrumb-item' key={ crumb.displayName } ref={ ( el ) => attachingChildRef( el, index ) }>\n                            <AwBreadcrumbItem\n                                crumb={crumb}\n                                popuplist={popuplist}\n                                chevronClick={handleChevronClick}\n                                iconId={iconId}\n                                overflowedCrumbs={overflow.crumbs}\n                            ></AwBreadcrumbItem>\n                        </div>\n                    );\n                }\n                return (\n                    <div className='sw-breadcrumb-item' key={crumb.displayName}  ref={ ( el ) => attachingChildRef( el, index ) }>\n                        <AwBreadcrumbItem\n                            crumb={crumb}\n                            popuplist={popuplist}\n                            chevronClick={handleChevronClick}\n                            iconId={iconId}\n                        ></AwBreadcrumbItem>\n                    </div>\n                );\n            } );\n        }\n    };\n\n    const getClassNames = () => {\n        const classNames = [ 'aw-layout-fxbreadCrumbs', 'aw-layout-flexColumn' ];\n        if( compact ) {\n            classNames.push( 'aw-widgets-breadCrumbCompact' );\n        }\n        return classNames.join( ' ' );\n    };\n\n    const attachingParentRef = ( el ) => {\n        if( !ref.current ) {\n            ref.current = {};\n        }\n        ref.current.parentContainer = el;\n    };\n\n    if( ref.current && ref.current.resizeObserver === undefined ) {\n        //if no observer attached, attach one\n        attachResizeObserver( props.viewModel, props.elementRefList );\n    }\n\n    //If no crumbs defined, h1 remains empty so conditionally return h1\n    return (\n        crumbs && crumbs.length && <h1 className={getClassNames()} ref={ el => attachingParentRef( el ) }>\n            <div className='sw-row justify-left'>\n                {createCrumbs( crumbs )}\n            </div>\n        </h1>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
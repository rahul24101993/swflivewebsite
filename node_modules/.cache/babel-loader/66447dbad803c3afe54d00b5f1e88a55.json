{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/defaultLocationService\n */\nimport appCtxService from 'js/appCtxService';\nimport keyboardService from 'js/keyboardService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus'; // Service\n\nimport AwStateService from 'js/awStateService';\nlet exports;\nexport let getCurrentState = function () {\n  return AwStateService.instance.current;\n};\nexport let normalizeStateName = function () {\n  // note the this is here before conversion\n  return exports.getCurrentState().parent.replace(/_/g, '.');\n};\nexport let subscribeForLocationUnloadEvent = function (name) {\n  var locContUnLoadedSub = eventBus.subscribe(name + '.contentUnloaded', function () {\n    appCtxService.unRegisterCtx('locationContext');\n    keyboardService.unRegisterKeyDownEvent();\n    eventBus.unsubscribe(locContUnLoadedSub);\n  });\n};\nexport let handleLocationUnload = () => {\n  appCtxService.unRegisterCtx('locationContext');\n  keyboardService.unRegisterKeyDownEvent();\n};\nexport let updateTabs = function (subLocationTabCondition) {\n  var stateName = exports.getCurrentState().name;\n\n  if (!subLocationTabCondition || subLocationTabCondition.currentTab !== stateName) {\n    var subLocationTabCond = {};\n    subLocationTabCond.currentTab = stateName;\n    return subLocationTabCond;\n  }\n};\nexports = {\n  getCurrentState,\n  normalizeStateName,\n  subscribeForLocationUnloadEvent,\n  updateTabs,\n  handleLocationUnload\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/layout/src/js/defaultLocationService.js"],"names":["getCurrentState","AwStateService","normalizeStateName","exports","subscribeForLocationUnloadEvent","locContUnLoadedSub","name","appCtxService","keyboardService","eventBus","handleLocationUnload","updateTabs","stateName","subLocationTabCondition","subLocationTabCond"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,eAAA,MAAA,oBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,QAAA,MAAA,aAAA,C,CAEA;;AACA,OAAA,cAAA,MAAA,mBAAA;AAEA,IAAA,OAAA;AAEA,OAAO,IAAIA,eAAe,GAAG,YAAW;EACpC,OAAOC,cAAc,CAAdA,QAAAA,CAAP,OAAA;AADG,CAAA;AAIP,OAAO,IAAIC,kBAAkB,GAAG,YAAW;EACvC;EACA,OAAOC,OAAO,CAAPA,eAAAA,GAAAA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAAP,GAAOA,CAAP;AAFG,CAAA;AAKP,OAAO,IAAIC,+BAA+B,GAAG,UAAA,IAAA,EAAiB;EAC1D,IAAIC,kBAAkB,GAAG,QAAQ,CAAR,SAAA,CAAoBC,IAAI,GAAxB,kBAAA,EAA+C,YAAW;IAC/EC,aAAa,CAAbA,aAAAA,CAAAA,iBAAAA;IACAC,eAAe,CAAfA,sBAAAA;IACAC,QAAQ,CAARA,WAAAA,CAAAA,kBAAAA;EAHJ,CAAyB,CAAzB;AADG,CAAA;AAQP,OAAO,IAAIC,oBAAoB,GAAG,MAAM;EACpCH,aAAa,CAAbA,aAAAA,CAAAA,iBAAAA;EACAC,eAAe,CAAfA,sBAAAA;AAFG,CAAA;AAKP,OAAO,IAAIG,UAAU,GAAG,UAAA,uBAAA,EAAoC;EACxD,IAAIC,SAAS,GAAGT,OAAO,CAAPA,eAAAA,GAAhB,IAAA;;EACA,IAAI,CAAA,uBAAA,IAA4BU,uBAAuB,CAAvBA,UAAAA,KAAhC,SAAA,EAAmF;IAC/E,IAAIC,kBAAkB,GAAtB,EAAA;IACAA,kBAAkB,CAAlBA,UAAAA,GAAAA,SAAAA;IACA,OAAA,kBAAA;EACH;AANE,CAAA;AASPX,OAAO,GAAG;EAAA,eAAA;EAAA,kBAAA;EAAA,+BAAA;EAAA,UAAA;EAKNO;AALM,CAAVP;AAOA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/defaultLocationService\n */\nimport appCtxService from 'js/appCtxService';\nimport keyboardService from 'js/keyboardService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\n// Service\nimport AwStateService from 'js/awStateService';\n\nlet exports;\n\nexport let getCurrentState = function() {\n    return AwStateService.instance.current;\n};\n\nexport let normalizeStateName = function() {\n    // note the this is here before conversion\n    return exports.getCurrentState().parent.replace( /_/g, '.' );\n};\n\nexport let subscribeForLocationUnloadEvent = function( name ) {\n    var locContUnLoadedSub = eventBus.subscribe( name + '.contentUnloaded', function() {\n        appCtxService.unRegisterCtx( 'locationContext' );\n        keyboardService.unRegisterKeyDownEvent();\n        eventBus.unsubscribe( locContUnLoadedSub );\n    } );\n};\n\nexport let handleLocationUnload = () => {\n    appCtxService.unRegisterCtx( 'locationContext' );\n    keyboardService.unRegisterKeyDownEvent();\n};\n\nexport let updateTabs = function( subLocationTabCondition ) {\n    var stateName = exports.getCurrentState().name;\n    if( !subLocationTabCondition || subLocationTabCondition.currentTab !== stateName ) {\n        var subLocationTabCond = {};\n        subLocationTabCond.currentTab = stateName;\n        return subLocationTabCond;\n    }\n};\n\nexports = {\n    getCurrentState,\n    normalizeStateName,\n    subscribeForLocationUnloadEvent,\n    updateTabs,\n    handleLocationUnload\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
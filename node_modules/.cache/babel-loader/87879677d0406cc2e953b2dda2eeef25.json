{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/autoSaveContextService\n */import appCtxService from'js/appCtxService';import editHandlerService from'js/editHandlerService';import localStorage from'js/localStorage';import modelPropertyService from'js/modelPropertyService';import localeService from'js/localeService';import eventBus from'js/eventBus';import _ from'lodash';import AwColumn from'viewmodel/AwColumnViewModel';import AwToggleButton from'viewmodel/AwTogglebuttonViewModel';import{ExtendedTooltip}from'js/hocCollection';import{jsx as _jsx}from\"react/jsx-runtime\";const AUTO_SAVE_CTX_PATH='autoSave.dbValue';let autoSaveWorkspaceValue;const AwToggleButtonHOC=ExtendedTooltip(AwToggleButton);/**\n * API to update the autoSave mode\n *\n * @param {Boolean} enable - true if autoSave should be enabled\n */export const setAutoSaveToggle=function(enable){// Do not update value if workspace override is being used\nif(autoSaveWorkspaceValue!==undefined){return;}appCtxService.updatePartialCtx(AUTO_SAVE_CTX_PATH,enable);};/**\n * API to trigger leaveConfirmation, update local storage, and announce changes when the toggle changes\n * @param {Object} prop - the property field\n */export const onChangeCallback=function(prop){return function(event){if(prop.onChange){prop.onChange(event);}// Revert toggle value until leave confirmation is finished\nconst currentToggleValue=appCtxService.getCtx(AUTO_SAVE_CTX_PATH);prop.update(!currentToggleValue);editHandlerService.leaveConfirmation().then(()=>{// Apply new toggle value\nprop.update(currentToggleValue);// setAutoSaveToggle( currentToggleValue );\n// Update local storage so user value can be persisted\nlocalStorage.publish('autosave',currentToggleValue);// Publish event announcing the new value\neventBus.publish('autoSaveToggleChanged',currentToggleValue);});};};/**\n * API to handler workpace updates in ctx. When workspace is updated this api\n * will check for an autosave override. If the override is given the auto save mode will\n * be updated and the auto save toggle will be hidden in the UI.\n */const handleWorkspaceAutoSaveSetting=function(){// Overwrite overwrite and hide toggle if workspace override exists\neventBus.subscribe('appCtx.update',function(event){if(event.name==='workspace'){autoSaveWorkspaceValue=_.get(event.value,'settings.autoSave');if(autoSaveWorkspaceValue!==undefined){setAutoSaveToggle(autoSaveWorkspaceValue);// Hide autosave toggle if workspace override is in use\nappCtxService.updateCtx('showAutoSaveToggle',false);}}});};/**\n * Sets up autosave in appCtx. Priority is workspace override followed by local storage.\n */export const initializeAutoSaveContext=async function(){// The autoSave context initial value will be true unless local storage or workspace override exists\nlet initialAutoSaveValue=true;appCtxService.registerCtx('showAutoSaveToggle',true);// Apply value from local storage if it exists\nconst autoSaveLocalStorageValue=localStorage.get('autosave');if(autoSaveLocalStorageValue==='true'||autoSaveLocalStorageValue==='false'){initialAutoSaveValue=autoSaveLocalStorageValue==='true';}// Aply workspace override if it exists\nhandleWorkspaceAutoSaveSetting();// Apply initial value to ctx\nconst displayName=await localeService.getLocalizedTextFromKey('BaseMessages.AUTO_SAVE_TITLE',true);appCtxService.registerCtx('autoSave',modelPropertyService.createViewModelProperty({displayName:displayName,type:'BOOLEAN',dbValue:initialAutoSaveValue}));};export const autoSaveContextRenderFunction=_ref=>{let{actions,viewModel,fields}=_ref;const{data}=viewModel;if(fields.autoSave&&fields.autoSave.fielddata){fields.autoSave.fielddata.labelPlacement='start';}return/*#__PURE__*/_jsx(AwColumn,{children:/*#__PURE__*/_jsx(AwToggleButtonHOC,{...fields.autoSave,onChange:onChangeCallback(fields.autoSave),extendedTooltipOptions:\"{alignment : 'top'}\",extendedTooltipContext:data.tooltip,extendedTooltip:\"ExtendedTooltipDefault\"})});};export default{initializeAutoSaveContext,setAutoSaveToggle,onChangeCallback,autoSaveContextRenderFunction};","map":null,"metadata":{},"sourceType":"module"}
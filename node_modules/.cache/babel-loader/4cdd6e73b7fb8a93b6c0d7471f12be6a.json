{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do outgoing calls like SOA or REST.\n *\n * @module js/graphQLService\n *\n * @namespace graphQLService\n */\nimport AwHttpService from 'js/awHttpService';\nimport AwPromiseService from 'js/awPromiseService';\nimport localeService from 'js/localeService';\nimport _ from 'lodash';\nimport assert from 'js/assert';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n/**\n * Makes GraphQL call with given inputData. return the promise object.\n *\n * @param {Object} inputData - The 'inputData' object.\n *\n * @return {Promise} A promise object resolved with the results of the SOA call (or rejected if there is a\n *         problem).\n */\n\nexport let callGraphQL = function (inputData) {\n  eventBus.publish('progress.start', {});\n  return AwHttpService.instance.post(browserUtils.getBaseURL() + inputData.endPoint, inputData.request, {\n    headers: {\n      'Accept-Language': localeService.getLocale()\n    }\n  }).then(function (response) {\n    var endPt = null;\n    assert(response, 'No response given for ' + endPt);\n    var body = response.data;\n\n    try {\n      if (body.errors) {\n        /** If no data, reject the promise. Otherwise report an error and return data */\n        if (_.isEmpty(body.data)) {\n          eventBus.publish('progress.end', {});\n          return AwPromiseService.instance.reject(body.errors[0].message);\n        }\n\n        logger.error(body.errors[0].message);\n      }\n    } catch (err) {// Do nothing.\n    }\n\n    eventBus.publish('progress.end', {});\n\n    if (typeof body !== 'string' || body.indexOf('<?xml version') === -1) {\n      return body;\n    }\n\n    return AwPromiseService.instance.reject('Unexpected response body for: ' + endPt);\n  }, function (err) {\n    eventBus.publish('progress.end', {});\n    throw err;\n  });\n};\nconst exports = {\n  callGraphQL\n};\nexport default exports;","map":{"version":3,"names":["AwHttpService","AwPromiseService","localeService","_","assert","eventBus","browserUtils","logger","callGraphQL","inputData","publish","instance","post","getBaseURL","endPoint","request","headers","getLocale","then","response","endPt","body","data","errors","isEmpty","reject","message","error","err","indexOf","exports"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/graphQLService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do outgoing calls like SOA or REST.\n *\n * @module js/graphQLService\n *\n * @namespace graphQLService\n */\nimport AwHttpService from 'js/awHttpService';\nimport AwPromiseService from 'js/awPromiseService';\nimport localeService from 'js/localeService';\nimport _ from 'lodash';\nimport assert from 'js/assert';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport logger from 'js/logger';\n\n/**\n * Makes GraphQL call with given inputData. return the promise object.\n *\n * @param {Object} inputData - The 'inputData' object.\n *\n * @return {Promise} A promise object resolved with the results of the SOA call (or rejected if there is a\n *         problem).\n */\nexport let callGraphQL = function( inputData ) {\n    eventBus.publish( 'progress.start', {} );\n\n    return AwHttpService.instance.post( browserUtils.getBaseURL() + inputData.endPoint, inputData.request, {\n        headers: {\n            'Accept-Language': localeService.getLocale()\n        }\n    } ).then( function( response ) {\n        var endPt = null;\n        assert( response, 'No response given for ' + endPt );\n\n        var body = response.data;\n\n        try {\n            if( body.errors ) {\n                /** If no data, reject the promise. Otherwise report an error and return data */\n                if( _.isEmpty( body.data ) ) {\n                    eventBus.publish( 'progress.end', {} );\n\n                    return AwPromiseService.instance.reject( body.errors[ 0 ].message );\n                }\n\n                logger.error( body.errors[ 0 ].message );\n            }\n        } catch ( err ) {\n            // Do nothing.\n        }\n\n        eventBus.publish( 'progress.end', {} );\n\n        if( typeof body !== 'string' || body.indexOf( '<?xml version' ) === -1 ) {\n            return body;\n        }\n\n        return AwPromiseService.instance.reject( 'Unexpected response body for: ' + endPt );\n    }, function( err ) {\n        eventBus.publish( 'progress.end', {} );\n        throw err;\n    } );\n};\n\nconst exports = {\n    callGraphQL\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUC,SAAV,EAAsB;EAC3CJ,QAAQ,CAACK,OAAT,CAAkB,gBAAlB,EAAoC,EAApC;EAEA,OAAOV,aAAa,CAACW,QAAd,CAAuBC,IAAvB,CAA6BN,YAAY,CAACO,UAAb,KAA4BJ,SAAS,CAACK,QAAnE,EAA6EL,SAAS,CAACM,OAAvF,EAAgG;IACnGC,OAAO,EAAE;MACL,mBAAmBd,aAAa,CAACe,SAAd;IADd;EAD0F,CAAhG,EAIHC,IAJG,CAIG,UAAUC,QAAV,EAAqB;IAC3B,IAAIC,KAAK,GAAG,IAAZ;IACAhB,MAAM,CAAEe,QAAF,EAAY,2BAA2BC,KAAvC,CAAN;IAEA,IAAIC,IAAI,GAAGF,QAAQ,CAACG,IAApB;;IAEA,IAAI;MACA,IAAID,IAAI,CAACE,MAAT,EAAkB;QACd;QACA,IAAIpB,CAAC,CAACqB,OAAF,CAAWH,IAAI,CAACC,IAAhB,CAAJ,EAA6B;UACzBjB,QAAQ,CAACK,OAAT,CAAkB,cAAlB,EAAkC,EAAlC;UAEA,OAAOT,gBAAgB,CAACU,QAAjB,CAA0Bc,MAA1B,CAAkCJ,IAAI,CAACE,MAAL,CAAa,CAAb,EAAiBG,OAAnD,CAAP;QACH;;QAEDnB,MAAM,CAACoB,KAAP,CAAcN,IAAI,CAACE,MAAL,CAAa,CAAb,EAAiBG,OAA/B;MACH;IACJ,CAXD,CAWE,OAAQE,GAAR,EAAc,CACZ;IACH;;IAEDvB,QAAQ,CAACK,OAAT,CAAkB,cAAlB,EAAkC,EAAlC;;IAEA,IAAI,OAAOW,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACQ,OAAL,CAAc,eAAd,MAAoC,CAAC,CAArE,EAAyE;MACrE,OAAOR,IAAP;IACH;;IAED,OAAOpB,gBAAgB,CAACU,QAAjB,CAA0Bc,MAA1B,CAAkC,mCAAmCL,KAArE,CAAP;EACH,CAhCM,EAgCJ,UAAUQ,GAAV,EAAgB;IACfvB,QAAQ,CAACK,OAAT,CAAkB,cAAlB,EAAkC,EAAlC;IACA,MAAMkB,GAAN;EACH,CAnCM,CAAP;AAoCH,CAvCM;AAyCP,MAAME,OAAO,GAAG;EACZtB;AADY,CAAhB;AAGA,eAAesB,OAAf"},"metadata":{},"sourceType":"module"}
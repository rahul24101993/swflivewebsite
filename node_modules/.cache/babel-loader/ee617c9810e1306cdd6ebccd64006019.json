{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Module for date parser utilities\n *\n * @module js/dateParserUtils\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\nvar trace = new Debug('dateParserUtils');\nvar exports = {};\n/**\n *Parsing of Dates\n *\n * @param {String} sourceVal - property value to compare with\n * @param {String} queryVal - condition value\n *\n * @return {Object} date object of sourceVal and queryVal\n */\n\nexport let getParsedDates = function (sourceVal, queryVal) {\n  var dateParser = {};\n  dateParser.sourceDate = exports.convertDateToMsec(sourceVal);\n\n  if (_.isArray(queryVal)) {\n    dateParser.queryDate = [];\n\n    for (var key in queryVal) {\n      dateParser.queryDate[key] = exports.convertDateToMsec(queryVal[key]);\n    }\n  } else {\n    dateParser.queryDate = exports.convertDateToMsec(queryVal);\n  }\n\n  return dateParser;\n};\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {String} condition - condition value like \"Date(08-Feb-2019)\"\n *\n * @return {String}  conditionVal like \"08-Feb-2019\"\n */\n\nexport let getDateValue = function (condition) {\n  try {\n    var regExp = /\\(([^)]+)\\)/;\n    return regExp.exec(condition)[1];\n  } catch (e) {\n    trace('Error in condition', e, condition);\n  }\n\n  return undefined;\n};\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {object} value - date object\n * @param {String} expressionDataType - data type - Date\n * @return {object}  expression , date type along with date\n */\n\nexport let getExpressionDateValue = function (value, expressionDataType) {\n  var key;\n  var expression = {};\n\n  if (expressionDataType === 'Date' && exports.isDate(value)) {\n    if (_.isArray(value)) {\n      expression.value = [];\n\n      for (key in value) {\n        expression.value[key] = exports.getDateValue(value[key]);\n      }\n    } else {\n      expression.value = exports.getDateValue(value);\n    }\n  } else {\n    expression.value = value;\n  }\n\n  return expression;\n};\n/**\n *get expression type is dat eor not\n *\n * @param {object} value - date object\n *\n * @return {boolean}  value is date or not\n */\n\nexport let isDate = function (value) {\n  try {\n    var regExp = /^Date\\(\\{\\{/;\n    return value && value.toString().match(regExp) !== null;\n  } catch (e) {\n    trace('Error in expression', e, value);\n  }\n\n  return undefined;\n};\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\n\nexport let convertDateToMsec = function (queryVal) {\n  if (typeof queryVal !== 'number') {\n    try {\n      queryVal = new Date(queryVal).getTime();\n    } catch (e) {\n      trace('Invalid Date format', e);\n    }\n  }\n\n  return queryVal > 0 ? queryVal : Infinity;\n};\nexports = {\n  getParsedDates,\n  getDateValue,\n  getExpressionDateValue,\n  isDate,\n  convertDateToMsec\n};\nexport default exports;","map":{"version":3,"names":["_","Debug","trace","exports","getParsedDates","sourceVal","queryVal","dateParser","sourceDate","convertDateToMsec","isArray","queryDate","key","getDateValue","condition","regExp","exec","e","undefined","getExpressionDateValue","value","expressionDataType","expression","isDate","toString","match","Date","getTime","Infinity"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dateParserUtils.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Module for date parser utilities\n *\n * @module js/dateParserUtils\n */\nimport _ from 'lodash';\nimport Debug from 'debug';\n\nvar trace = new Debug( 'dateParserUtils' );\nvar exports = {};\n\n/**\n *Parsing of Dates\n *\n * @param {String} sourceVal - property value to compare with\n * @param {String} queryVal - condition value\n *\n * @return {Object} date object of sourceVal and queryVal\n */\nexport let getParsedDates = function( sourceVal, queryVal ) {\n    var dateParser = {};\n\n    dateParser.sourceDate = exports.convertDateToMsec( sourceVal );\n\n    if( _.isArray( queryVal ) ) {\n        dateParser.queryDate = [];\n        for( var key in queryVal ) {\n            dateParser.queryDate[ key ] = exports.convertDateToMsec( queryVal[ key ] );\n        }\n    } else {\n        dateParser.queryDate = exports.convertDateToMsec( queryVal );\n    }\n\n    return dateParser;\n};\n\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {String} condition - condition value like \"Date(08-Feb-2019)\"\n *\n * @return {String}  conditionVal like \"08-Feb-2019\"\n */\nexport let getDateValue = function( condition ) {\n    try {\n        var regExp = /\\(([^)]+)\\)/;\n        return regExp.exec( condition )[ 1 ];\n    } catch ( e ) {\n        trace( 'Error in condition', e, condition );\n    }\n    return undefined;\n};\n\n/**\n *Get widget type like  date/time/datetime\n *\n * @param {object} value - date object\n * @param {String} expressionDataType - data type - Date\n * @return {object}  expression , date type along with date\n */\nexport let getExpressionDateValue = function( value, expressionDataType ) {\n    var key;\n    var expression = {};\n    if( expressionDataType === 'Date' && exports.isDate( value ) ) {\n        if( _.isArray( value ) ) {\n            expression.value = [];\n            for( key in value ) {\n                expression.value[ key ] = exports.getDateValue( value[ key ] );\n            }\n        } else {\n            expression.value = exports.getDateValue( value );\n        }\n    } else {\n        expression.value = value;\n    }\n    return expression;\n};\n\n/**\n *get expression type is dat eor not\n *\n * @param {object} value - date object\n *\n * @return {boolean}  value is date or not\n */\nexport let isDate = function( value ) {\n    try {\n        var regExp = /^Date\\(\\{\\{/;\n        return value && value.toString().match( regExp ) !== null;\n    } catch ( e ) {\n        trace( 'Error in expression', e, value );\n    }\n    return undefined;\n};\n\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\nexport let convertDateToMsec = function( queryVal ) {\n    if( typeof queryVal !== 'number' ) {\n        try {\n            queryVal = new Date( queryVal ).getTime();\n        } catch ( e ) {\n            trace( 'Invalid Date format', e );\n        }\n    }\n    return queryVal > 0 ? queryVal : Infinity;\n};\n\nexports = {\n    getParsedDates,\n    getDateValue,\n    getExpressionDateValue,\n    isDate,\n    convertDateToMsec\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
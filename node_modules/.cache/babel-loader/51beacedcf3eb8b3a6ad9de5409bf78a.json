{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/AwCommandListService\n */import AwCommand from'viewmodel/AwCommandViewModel';import AwExtendedTooltip from'viewmodel/AwExtendedTooltipViewModel';import AwIcon from'viewmodel/AwIconViewModel';import AwPopup from'viewmodel/AwPopupViewModel';import AwPopupCommandCell from'viewmodel/AwPopupCommandCellViewModel';/**\n * Popup configuration for the overflow popup on command bars\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const overflowPopupOptions={advancePositioning:true,autoFocus:true,clickOutsideToClose:true,closeWhenEsc:true,flipBehavior:'opposite',resizeContainer:'div.aw-layout-popup',selectedElementCSS:'.aw-state-selected',toggleMode:true,whenParentScrolls:'follow'};/**\n * Get class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */const getCommandLabelClass=showCommandLabels=>{if(showCommandLabels===false){return'aw-commands-noLabel';}if(showCommandLabels===true){return'aw-commands-showIconLabel';}//No override, use the global show/hide\nreturn'';};/**\n * Get where the extended tooltip for the overflow button should be positioned\n *\n * @param {String} alignment Alignment\n * @returns {String} Extended tooltip position\n */const getTooltipPlacement=function(alignment){var placement='top';if(alignment==='VERTICAL'){placement='left';}return placement;};export const awCommandListRenderFunction=_ref=>{let{alignment,visibilityLoader,commandContext,anchor,ctxMin:{commandDisplays:cd},className,showCommandLabels,elementRefList,overflow,hideMore,trace=()=>null,reverse=false,actions:{overflowPopup},i18n,viewModel:{_observer,_overflownCommands}}=_ref;const commandDisplays=reverse?cd.reverse():cd;const alignmentCls=alignment==='VERTICAL'?'aw-commands-commandBarVertical':'aw-commands-commandBarHorizontal';const commandLabelsClass=getCommandLabelClass(showCommandLabels);//The element used to determine overflow\nconst commandBarMain=elementRefList.get('commandBarMain');let overflownCommandsCount=0;const visibleCommands=commandDisplays.filter(x=>{if(x.visible){_overflownCommands[x.id]&&overflownCommandsCount++;return true;}return null;});trace(\"\".concat(visibleCommands.length,\" commands are visible, computing command overflow\"));const hasOverflow=overflownCommandsCount>0;const noOverflowCls=!hasOverflow?'aw-no-overflow':'aw-use-commandOverflow';trace('Non overflow command count',visibleCommands.length-overflownCommandsCount,'has overflow',hasOverflow);/**\n     * Callback for when a command within the overflow popup is clicked\n     *\n     * @param {Boolean} hasPopup Whether the command that was clicked will open a popup\n     */const childCommandClickCallback=hasPopup=>{if(hasPopup!==true){overflowPopup.hide();}};/**\n     * Get a click handler for the command overflow button\n     *\n     * @returns {Function} Click handler\n     */const getOverflowClickHandler=()=>{return e=>{e.stopPropagation();if(overflowPopup.open){overflowPopup.hide();}else{overflowPopup.show({...overflowPopupOptions,placement:alignment==='VERTICAL'?'left-start':'bottom-start'});}};};/**\n     * Render the extended tooltip for the overflow button\n     *\n     * @returns {JSX} Extended tooltip element\n     */const renderOverflowExtendedTooltip=()=>{return/*#__PURE__*/_jsx(AwExtendedTooltip,{reference:overflowPopup.reference,extendedTooltipContext:{title:i18n.MORE_BUTTON_TITLE},extendedTooltipOptions:{isCommand:true,placement:getTooltipPlacement(alignment)}});};/**\n     * Render the horizontal overflow toggle button\n     *\n     * @returns {JSX} Horizontal overflow element\n     */const renderHorizontalOverflowButton=()=>{const overflowClickHandler=getOverflowClickHandler();return/*#__PURE__*/_jsxs(\"div\",{className:\"aw-toolbarIcon aw-commands-moreButton\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"aw-commands-commandToolbarIconButton aw-use-commandOverflow \".concat(overflowPopup.open?'aw-state-selected':''),title:i18n.MORE_BUTTON_TITLE,\"aria-label\":i18n.MORE_BUTTON_TITLE,onClick:overflowClickHandler,ref:overflowPopup.reference,children:/*#__PURE__*/_jsx(AwIcon,{iconId:'cmdMore',className:'aw-commands-svg'})}),renderOverflowExtendedTooltip()]});};/**\n     * Render the vertical overflow toggle button\n     *\n     * @returns {JSX} Horizontal overflow element\n     */const renderVerticalOverflowButton=()=>{const overflowLabel=overflowPopup.open?i18n.LESS_LINK_TEXT:i18n.MORE_LINK_TEXT;const overflowClickHandler=getOverflowClickHandler();return/*#__PURE__*/_jsxs(\"div\",{className:\"aw-command-overflowIcon\",children:[/*#__PURE__*/_jsxs(\"button\",{type:\"button\",className:\"aw-commands-commandIconButton aw-commands-commandWrapperVertical \".concat(overflowPopup.open?'aw-state-selected':''),title:overflowLabel,\"aria-label\":overflowLabel,onClick:overflowClickHandler,ref:overflowPopup.reference,children:[/*#__PURE__*/_jsx(AwIcon,{iconId:'miscChevronDown',className:\"aw-commands-svg \".concat(overflowPopup.open?'aw-icon-rotate':'')}),/*#__PURE__*/_jsx(\"div\",{className:\"aw-commands-commandIconButtonText\",children:overflowLabel})]}),renderOverflowExtendedTooltip()]});};const getOverflownCommands=()=>{return visibleCommands.filter(command=>{if(command&&_overflownCommands[command.id]){return true;}return null;});};/**\n     * Render the overflow popup content\n     *\n     * @returns {JSX} content\n     */const renderOverflowPopupContent=()=>{return overflowPopup.open&&/*#__PURE__*/_jsx(AwPopup,{...overflowPopup.options,children:/*#__PURE__*/_jsx(\"div\",{className:\"aw-popup-command-bar\",children:getOverflownCommands().map(command=>/*#__PURE__*/_jsx(AwPopupCommandCell,{commandContext:commandContext,command:command,alignment:alignment,visibilityLoader:visibilityLoader,overflow:true,childCommandClickCallback:childCommandClickCallback},command&&command.id))})});};const isOverflowenabled=(alignment==='HORIZONTAL'||!alignment)&&overflow!==true?null:true;const renderCommands=function(){let disableOverflow=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return visibleCommands.map(command=>/*#__PURE__*/_jsx(AwCommand,{commandContext:commandContext,command:command,alignment:alignment,visibilityLoader:visibilityLoader,overflow:_overflownCommands[command.id]?true:null,commandObserver:disableOverflow?null:_observer},command&&command.id));};return/*#__PURE__*/_jsxs(\"div\",{className:\"aw-command-bar \".concat(alignmentCls,\" \").concat(overflow?'aw-use-commandOverflow':''),anchor:anchor,ref:commandBarMain,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"aw-commands-wrapper \".concat(commandLabelsClass,\" \").concat(noOverflowCls),children:[isOverflowenabled&&_observer&&renderCommands(),!isOverflowenabled&&renderCommands(true)]}),hasOverflow&&!hideMore&&alignment==='VERTICAL'?renderVerticalOverflowButton():null,hasOverflow&&!hideMore&&alignment!=='VERTICAL'?renderHorizontalOverflowButton():null,renderOverflowPopupContent()]});};","map":null,"metadata":{},"sourceType":"module"}
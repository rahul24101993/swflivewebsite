{"ast":null,"code":"/* eslint-disable valid-jsdoc */ // Copyright (c) 2020 Siemens\n/**\n * This module is part of declarative UI framework and provides service related to displaying notifications.\n *\n * @module js/messagingService\n *\n * @publishedApolloService\n */import notyService from'js/NotyModule';import notyErrorService from'js/notyErrorService';import AwPromiseService from'js/awPromiseService';import conditionService from'js/conditionService';import _ from'lodash';import declUtils from'js/declUtils';import parsingUtils from'js/parsingUtils';import logger from'js/logger';import debugService from'js/debugService';import{registerDynImportEntry,loadDynModule}from'js/moduleLoader';registerDynImportEntry('js/viewModelService',()=>import('js/viewModelService'));// Another pattern\nvar _messageTypes={info:true,warning:true,error:true};var exports={};/**\n * Get localized text\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @param {String} interpolationString - The string to search.\n *\n * @return {String} Interpolated string.\n * @ignore\n */export let getLocalizedTextForInterpolationString=function(messageContext,interpolationString){var textPath=parsingUtils.getStringBetweenDoubleMustaches(interpolationString);if(textPath===interpolationString){return interpolationString;}return _.get(messageContext,textPath);};/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {String} Result string after applying passed parameters.\n */export let applyMessageParams=function(messageString,messageParams,messageContext){return declUtils.applyMessageParams(messageString,messageParams,messageContext);};/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @return {String} Result string after applying passed parameters.\n */export let applyMessageParamsWithoutContext=function(messageString,messageParams){var placeHolders=messageString.match(/\\{[0-9]*\\}/g);var resultString=messageString;if(placeHolders){for(var i in placeHolders){if(placeHolders.hasOwnProperty(i)){var placeHolder=placeHolders[i];var replacementString=messageParams[i];resultString=resultString.replace(placeHolder,replacementString);}}}return resultString;};/**\n * Evaluate message data\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {String} messageData - The message data.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {Object} Result object after applying passed parameters.\n * @ignore\n */export let applyMessageData=function(messageString,messageParams,messageData,messageContext){if(messageData){for(var key in messageData){if(messageData[key]){var parseKey=parsingUtils.getStringBetweenDoubleMustaches(messageData[key]);var replacementString=_.get(messageContext,parseKey);messageData[key]=replacementString;}}messageData.context=messageContext;messageData.params=messageParams;}return messageData;};/**\n * Report a message using 'NotyJS' API.\n *\n * @param {Object} messageDefn - message definition\n *\n * @param {String} localizedMessage - localizedMessage\n *\n * @param {Object} deferred - promise object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @param {Object} messageData - message data object\n */var _reportNotyMessageInternal=function(messageDefn,localizedMessage,deferred,declViewModel,parentScope,messageData){var buttonsArr=[];if(messageDefn.navigationOptions){_.forEach(messageDefn.navigationOptions,function(navOption){var button={};button.addClass='btn btn-notify';button.text=exports.getLocalizedTextForInterpolationString(declViewModel,navOption.text);button.onClick=function($noty){$noty.close();if(navOption.action){//revisitMe: Prasad use afxWeakImport or remove cyclic dep\nloadDynModule('js/viewModelService').then(vmService=>{vmService.executeCommand(declViewModel,navOption.action,parentScope);deferred.resolve();});}else{deferred.resolve();}};buttonsArr.push(button);});}if(messageDefn.messageType==='INFO'){exports.showInfo(localizedMessage,messageData,messageDefn,buttonsArr);}else if(messageDefn.messageType==='WARNING'){exports.showWarning(localizedMessage,buttonsArr,messageData,messageDefn);}else if(messageDefn.messageType==='ERROR'&&messageDefn.messageKey&&messageDefn.message){const localizedMessage=notyErrorService.getLocalizedMessage(messageDefn,messageData,declViewModel);exports.showError(localizedMessage,messageData,messageDefn,buttonsArr);}else if(messageDefn.messageType==='ERROR'){exports.showError(localizedMessage,messageData,messageDefn,buttonsArr);}if(!messageDefn.navigationOptions){deferred.resolve();}};const _applyErrorMessage=function(messageDefn,context){const parseKey=parsingUtils.getStringBetweenDoubleMustaches(messageDefn.messageText);return _.get(context,parseKey);};/**\n * generate a message.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} message - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @ignore\n */export let generateMessage=function(declViewModel,messageList,message,parentScope){if(!messageList){messageList=declViewModel._internal.messages;}if(parentScope){declUtils.assertValidModelAndDataCtxNode(declViewModel,parentScope);}else{declUtils.assertValidModel(declViewModel);}var messageDefn=_.cloneDeep(_.get(messageList,message));if(messageDefn){let context=declUtils.getLatestContext(parentScope,declViewModel);context={...context,...declViewModel.atomicData};if(messageDefn.expression){var expr={};_.forEach(messageDefn.expression,function(expression,key){expr[key]=conditionService.parseExpression(declViewModel,expression,context);});context.expression=expr;}var localizedMessage=null;if(messageDefn.messageText){localizedMessage=exports.getLocalizedTextForInterpolationString(context.data,messageDefn.messageText);if(localizedMessage){localizedMessage=exports.applyMessageParams(localizedMessage,messageDefn.messageTextParams,context);}else{localizedMessage=_applyErrorMessage(messageDefn,parentScope);}}else if(messageDefn.messageKey){var messageData=exports.applyMessageData(localizedMessage,messageDefn.messageTextParams,messageDefn.messageData,context);messageData.isCustomElem=true;localizedMessage='<aw-include name=\"'+messageDefn.messageKey+'\" sub-panel-context=\"subPanelContext\"></aw-include>';}else{// Invalid usage of message\nreturn{};}return{localizedMessage:localizedMessage,messageData:messageData,messageDefn:messageDefn};}return{};};/**\n * Report a message using 'NotyJS' API.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} notyMessage - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n * @ignore\n */export let reportNotyMessage=function(declViewModel,messageList,notyMessage,parentScope){var deferred=AwPromiseService.instance.defer();var message=exports.generateMessage(declViewModel,messageList,notyMessage,parentScope);var messageDefn=message.messageDefn;if(!message.localizedMessage){deferred.reject('resolved message string is empty');}else if(messageDefn&&messageDefn.messageType){if(logger.isDeclarativeLogEnabled()){debugService.debugMessages(message,declViewModel,parentScope);}if(messageDefn.messageText){_reportNotyMessageInternal(messageDefn,message.localizedMessage,deferred,declViewModel,parentScope);}else if(messageDefn.messageKey){_reportNotyMessageInternal(messageDefn,message.localizedMessage,deferred,declViewModel,parentScope,message.messageData);}else{// Invalid usage of message\ndeferred.reject();}//Add active token to the declViewModel corresponding to which the noty msg is opened\n//This assists usecases where noty msgs are opened through popups\n//preventing the unmounting of popups(destruction of declViewModel) until a user action is performed on the noty msg\ndeclViewModel.getToken().addAction(messageDefn);deferred.promise.then(function(){declViewModel.getToken().removeAction(messageDefn);}).catch(function(){declViewModel.getToken().removeAction(messageDefn);});}return deferred.promise;};/**\n * Show error message in notification.\n *\n * @param {String} message - error message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */export let showError=function(message,messageData,messageDefn,buttonsArr){if(_messageTypes.error){logger.error(message);notyService.showError(message,messageData,messageDefn,buttonsArr);}};/**\n * Show informational message in notification.\n *\n * @param {String} message - Informational message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */export let showInfo=function(message,messageData,messageDefn,buttonsArr){if(_messageTypes.info){logger.info(message);notyService.showInfo(message,messageData,messageDefn,buttonsArr);}};/**\n * Show warning message in notification.\n *\n * @param {String} message - Warning message to show\n * @param {String} buttonsArr  – Array of buttons (like: Cancel, Ok)\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n */export let showWarning=function(message,buttonsArr,messageData,messageDefn){if(_messageTypes.warning){logger.warn(message);notyService.showWarning(message,buttonsArr,messageData,messageDefn);}};/**\n * Get SOA error message from error object\n *\n * @param {String} errorJSO - JavaScript Object exception\n *\n * @return {String} message error message to be displayed.\n * @ignore\n */export let getSOAErrorMessage=function(errorJSO){if(errorJSO.message){return errorJSO.message;}var partialErrors=null;if(errorJSO.partialErrors){partialErrors=errorJSO.partialErrors;}else if(errorJSO.cause&&errorJSO.cause.partialErrors){partialErrors=errorJSO.cause.partialErrors;}errorJSO.message='';if(partialErrors){for(var ii=0;ii<partialErrors.length;ii++){var errorValues=partialErrors[ii].errorValues;if(errorValues){for(var jj=0;jj<errorValues.length;jj++){if(errorValues[jj].message){if(errorJSO.message.length>0){errorJSO.message+='\\n';}errorJSO.message+=errorValues[jj].message;}}}}}return errorJSO.message;};/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {String} timeoutValue - timeout Value in ms.\n */export let setTimeout=function(messageType,timeoutValue){timeoutValue=parseInt(timeoutValue);messageType=messageType.toLocaleLowerCase();if(!isNaN(timeoutValue)&&timeoutValue>0){timeoutValue=getTimeoutMillis(timeoutValue);}else if(timeoutValue<=0){timeoutValue=0;}notyService.setTimeout(messageType,timeoutValue);};/**\n * API to set the visibility of any type of notification messages.\n *\n * @param {String} messageType - INFO/WARNING/ERROR\n * @param {Boolean} value - set visibility value\n *\n */export let setMessageVisibility=function(messageType,value){messageType=messageType.toLocaleLowerCase();if(messageType in _messageTypes){_messageTypes[messageType]=value;}};/*\n * The service to convert seconds in milliseconds.\n */var getTimeoutMillis=function(timeout){return timeout*1000;};/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */exports={getLocalizedTextForInterpolationString,applyMessageParams,applyMessageParamsWithoutContext,applyMessageData,generateMessage,reportNotyMessage,showError,showInfo,showWarning,getSOAErrorMessage,setTimeout,setMessageVisibility};export default exports;","map":null,"metadata":{},"sourceType":"module"}
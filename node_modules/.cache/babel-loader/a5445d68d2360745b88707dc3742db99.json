{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwChipService.js\";\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport logger from 'js/logger';\nimport buttonStyles from 'js/buttonStyles';\nimport { EnableWhen } from 'js/hocCollection';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnableWhenDiv = EnableWhen('div');\nconst ChipTypes = {\n  STATIC: 'STATIC',\n  BUTTON: 'BUTTON',\n  SELECTION: 'SELECTION'\n};\nconst DEFAULT_CHIP_STYLE = 'base'; // the map from unselected button type to selected button type\n\nconst SelectionChipStyleMap = {\n  base: 'accent-mid-contrast',\n  accent: 'accent-high-contrast',\n  caution: 'accent-caution',\n  positive: 'accent-positive',\n  negative: 'accent-negative'\n};\n\nconst uiIconClicked = function (chip, event, uiIconAction, actions) {\n  event.stopPropagation();\n  actions.hintPopup.hide(); // perform action when UI icon get clicked\n\n  return uiIconAction ? uiIconAction({\n    chip: chip\n  }) : '';\n};\n\nconst handleChipClick = (chip, action, dispatch, data, actions) => {\n  // perform action for non static chip\n  if (chip.children && !actions.hintPopup.open) {\n    actions.hintPopup.show({\n      width: 'auto'\n    });\n  } else {\n    if (chip.chipType !== ChipTypes.STATIC) {\n      if (action) {\n        action({\n          chip: chip\n        });\n      }\n    }\n\n    if (chip.chipType === ChipTypes.SELECTION) {\n      chip.selected = !chip.selected;\n      dispatch({\n        path: 'data',\n        value: { ...data\n        }\n      });\n    }\n  }\n};\n\nexport const awChipRenderFunction = props => {\n  const {\n    chip,\n    buttonType,\n    action,\n    actions,\n    uiIconAction,\n    chipCondition,\n    viewModel\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  const {\n    conditions\n  } = chipCondition;\n  let {\n    hintPopup\n  } = actions;\n  const chipClasses = ['aw-widgets-chip']; //let isChipEnabled = true;\n\n  const evaluateChipEnableWhen = () => {\n    if (chip.enableWhen && chip.enableWhen.condition) {\n      const conditionName = chip.enableWhen.condition.split('conditions.')[1];\n      return conditions[conditionName];\n    }\n\n    return true;\n  };\n\n  const closePopup = () => {\n    hintPopup.hide();\n  };\n\n  if (!chip) {\n    logger.error('Chip model object is undefined, failed to render aw-chip.');\n    return undefined;\n  }\n\n  let showLabel = true;\n\n  if (chip.showLabel !== undefined) {\n    showLabel = Boolean(chip.showLabel);\n  }\n\n  let showIcon = true;\n\n  if (chip.showIcon !== undefined) {\n    showIcon = Boolean(chip.showIcon); //always make label visible when both icon and label are configured hidden.\n\n    if (!showIcon && !showLabel) {\n      showLabel = true;\n    }\n  }\n\n  let chipType = null;\n\n  if (chip.chipType && ChipTypes[chip.chipType]) {\n    chipType = chip.chipType;\n  } else {\n    logger.warn('Chip type \"' + chipType + '\" is invalid.');\n    chipType = action ? ChipTypes.BUTTON : ChipTypes.STATIC;\n  } // the button type defined in chip data model will take precedence than the 'buttonType' scope data\n\n\n  let buttonTypeForChip = chip.buttonType || buttonType || DEFAULT_CHIP_STYLE;\n  chipClasses.push(buttonStyles.getButtonStyle(buttonTypeForChip));\n\n  if (chip.selected) {\n    chipClasses.push('aw-widgets-chipSelected');\n  }\n\n  if (chipType === ChipTypes.STATIC) {\n    chipClasses.push('aw-widgets-staticChip');\n  }\n\n  if (chip.className) {\n    chipClasses.push(chip.className);\n  }\n\n  if (!evaluateChipEnableWhen()) {\n    chipClasses.push('disabled');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"button\",\n    tabIndex: 0,\n    \"aria-label\": chip.labelDisplayName,\n    className: chipClasses.join(' '),\n    onClick: () => handleChipClick(chip, action, dispatch, data, actions),\n    ref: hintPopup.reference,\n    onKeyPress: handleChipClick,\n    children: [chip.iconId && showIcon && /*#__PURE__*/_jsxDEV(AwIcon, {\n      className: \"aw-widgets-chipIcon\",\n      iconId: chip.iconId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }, this), showLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-widgets-chipLabel\",\n      title: chip.labelDisplayName,\n      children: chip.labelDisplayName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 27\n    }, this), chipType === ChipTypes.SELECTION && chip.selected && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-widgets-chipCheckmark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 67\n    }, this), chip.uiIconId && /*#__PURE__*/_jsxDEV(AwButton, {\n      \"aria-label\": chip.labelDisplayName,\n      className: \"aw-widgets-chipUIIcon\",\n      iconId: chip.uiIconId,\n      action: e => uiIconClicked(chip, e, uiIconAction, actions)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...hintPopup.options,\n      children: chip.children && chip.children.map((childChip, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          role: \"button\",\n          tabIndex: 0,\n          className: chipClasses.join(' '),\n          onClick: () => handleChipClick(childChip, action, dispatch, data, actions),\n          onKeyPress: handleChipClick,\n          children: [childChip.iconId && showIcon && /*#__PURE__*/_jsxDEV(AwIcon, {\n            className: \"aw-widgets-chipIcon aw-widgets-chipChildIcon\",\n            iconId: childChip.iconId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 62\n          }, this), showLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"aw-widgets-chipLabel aw-widgets-chipChildLabel\",\n            title: childChip.labelDisplayName,\n            children: childChip.labelDisplayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 43\n          }, this), chipType === ChipTypes.SELECTION && childChip.selected && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"aw-widgets-chipCheckmark aw-widgets-chipChildCheckmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 88\n          }, this), childChip.uiIconId && /*#__PURE__*/_jsxDEV(AwButton, {\n            className: \"aw-widgets-chipUIIcon aw-widgets-chipChildUIIcon\",\n            iconId: childChip.uiIconId,\n            action: e => uiIconClicked(childChip, e, uiIconAction, actions)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 52\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwChipService.js"],"names":["EnableWhenDiv","EnableWhen","ChipTypes","STATIC","BUTTON","SELECTION","DEFAULT_CHIP_STYLE","SelectionChipStyleMap","base","accent","caution","positive","negative","uiIconClicked","event","actions","uiIconAction","chip","handleChipClick","width","action","dispatch","path","value","data","awChipRenderFunction","props","viewModel","conditions","hintPopup","chipClasses","evaluateChipEnableWhen","conditionName","closePopup","logger","showLabel","Boolean","showIcon","chipType","buttonTypeForChip","buttonStyles","iconId","labelDisplayName","e","childChip"],"mappings":";AAAA,OAAA,MAAA,MAAA,2BAAA;AACA,OAAA,QAAA,MAAA,6BAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AACA,SAAA,UAAA,QAAA,kBAAA;AACA,OAAA,OAAA,MAAA,4BAAA;;AAEA,MAAMA,aAAa,GAAGC,UAAU,CAAhC,KAAgC,CAAhC;AAEA,MAAMC,SAAS,GAAG;EACdC,MAAM,EADQ,QAAA;EAEdC,MAAM,EAFQ,QAAA;EAGdC,SAAS,EAAE;AAHG,CAAlB;AAMA,MAAMC,kBAAkB,GAAxB,MAAA,C,CAEA;;AACA,MAAMC,qBAAqB,GAAG;EAC1BC,IAAI,EADsB,qBAAA;EAE1BC,MAAM,EAFoB,sBAAA;EAG1BC,OAAO,EAHmB,gBAAA;EAI1BC,QAAQ,EAJkB,iBAAA;EAK1BC,QAAQ,EAAE;AALgB,CAA9B;;AAQA,MAAMC,aAAa,GAAG,UAAA,IAAA,EAAA,KAAA,EAAA,YAAA,EAAA,OAAA,EAA+C;EACjEC,KAAK,CAALA,eAAAA;EAEAC,OAAO,CAAPA,SAAAA,CAHiE,IAGjEA,GAHiE,CAIjE;;EACA,OAAOC,YAAY,GAAGA,YAAY,CAAE;IAAEC,IAAI,EAAEA;EAAR,CAAF,CAAf,GAAnB,EAAA;AALJ,CAAA;;AAQA,MAAMC,eAAe,GAAG,CAAA,IAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA,KAA6C;EACjE;EAEA,IAAID,IAAI,CAAJA,QAAAA,IAAiB,CAACF,OAAO,CAAPA,SAAAA,CAAtB,IAAA,EAA+C;IAC3CA,OAAO,CAAPA,SAAAA,CAAAA,IAAAA,CAAwB;MACpBI,KAAK,EAAE;IADa,CAAxBJ;EADJ,CAAA,MAIO;IACH,IAAIE,IAAI,CAAJA,QAAAA,KAAkBf,SAAS,CAA/B,MAAA,EAAyC;MACrC,IAAA,MAAA,EAAa;QACTkB,MAAM,CAAE;UAAEH,IAAI,EAAEA;QAAR,CAAF,CAANG;MACH;IACJ;;IACD,IAAIH,IAAI,CAAJA,QAAAA,KAAkBf,SAAS,CAA/B,SAAA,EAA4C;MACxCe,IAAI,CAAJA,QAAAA,GAAgB,CAACA,IAAI,CAArBA,QAAAA;MACAI,QAAQ,CAAE;QAAEC,IAAI,EAAN,MAAA;QAAgBC,KAAK,EAAE,EAAE,GAAGC;QAAL;MAAvB,CAAF,CAARH;IACH;EACJ;AAjBL,CAAA;;AAoBA,OAAO,MAAMI,oBAAoB,GAAKC,KAAF,IAAa;EAC7C,MAAM;IAAA,IAAA;IAAA,UAAA;IAAA,MAAA;IAAA,OAAA;IAAA,YAAA;IAAA,aAAA;IAAkEC;EAAlE,IAAN,KAAA;EACA,MAAM;IAAA,IAAA;IAAQN;EAAR,IAAN,SAAA;EACA,MAAM;IAAEO;EAAF,IAAN,aAAA;EACA,IAAI;IAAEC;EAAF,IAAJ,OAAA;EACA,MAAMC,WAAW,GAAG,CALyB,iBAKzB,CAApB,CAL6C,CAM7C;;EAEA,MAAMC,sBAAsB,GAAG,MAAM;IACjC,IAAId,IAAI,CAAJA,UAAAA,IAAmBA,IAAI,CAAJA,UAAAA,CAAvB,SAAA,EAAmD;MAC/C,MAAMe,aAAa,GAAGf,IAAI,CAAJA,UAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EAAtB,CAAsBA,CAAtB;MACA,OAAOW,UAAU,CAAjB,aAAiB,CAAjB;IACH;;IACD,OAAA,IAAA;EALJ,CAAA;;EAQA,MAAMK,UAAU,GAAG,MAAM;IACrBJ,SAAS,CAATA,IAAAA;EADJ,CAAA;;EAIA,IAAI,CAAJ,IAAA,EAAY;IACRK,MAAM,CAANA,KAAAA,CAAAA,2DAAAA;IACA,OAAA,SAAA;EACH;;EAED,IAAIC,SAAS,GAAb,IAAA;;EACA,IAAIlB,IAAI,CAAJA,SAAAA,KAAJ,SAAA,EAAmC;IAC/BkB,SAAS,GAAGC,OAAO,CAAEnB,IAAI,CAAzBkB,SAAmB,CAAnBA;EACH;;EAED,IAAIE,QAAQ,GAAZ,IAAA;;EACA,IAAIpB,IAAI,CAAJA,QAAAA,KAAJ,SAAA,EAAkC;IAC9BoB,QAAQ,GAAGD,OAAO,CAAEnB,IAAI,CADM,QACZ,CAAlBoB,CAD8B,CAG9B;;IACA,IAAI,CAAA,QAAA,IAAa,CAAjB,SAAA,EAA8B;MAC1BF,SAAS,GAATA,IAAAA;IACH;EACJ;;EAED,IAAIG,QAAQ,GAAZ,IAAA;;EACA,IAAIrB,IAAI,CAAJA,QAAAA,IAAiBf,SAAS,CAAEe,IAAI,CAApC,QAA8B,CAA9B,EAAkD;IAC9CqB,QAAQ,GAAGrB,IAAI,CAAfqB,QAAAA;EADJ,CAAA,MAEO;IACHJ,MAAM,CAANA,IAAAA,CAAa,gBAAA,QAAA,GAAbA,eAAAA;IACAI,QAAQ,GAAGlB,MAAM,GAAGlB,SAAS,CAAZ,MAAA,GAAsBA,SAAS,CAAhDoC,MAAAA;EA7CyC,CAAA,CAgD7C;;;EACA,IAAIC,iBAAiB,GAAGtB,IAAI,CAAJA,UAAAA,IAAAA,UAAAA,IAAxB,kBAAA;EACAa,WAAW,CAAXA,IAAAA,CAAkBU,YAAY,CAAZA,cAAAA,CAAlBV,iBAAkBU,CAAlBV;;EAEA,IAAIb,IAAI,CAAR,QAAA,EAAoB;IAChBa,WAAW,CAAXA,IAAAA,CAAAA,yBAAAA;EACH;;EAED,IAAIQ,QAAQ,KAAKpC,SAAS,CAA1B,MAAA,EAAoC;IAChC4B,WAAW,CAAXA,IAAAA,CAAAA,uBAAAA;EACH;;EAED,IAAIb,IAAI,CAAR,SAAA,EAAqB;IACjBa,WAAW,CAAXA,IAAAA,CAAkBb,IAAI,CAAtBa,SAAAA;EACH;;EAED,IAAI,CAACC,sBAAL,EAAA,EAAgC;IAC5BD,WAAW,CAAXA,IAAAA,CAAAA,UAAAA;EACH;;EAED,OAAA,aACI,OAAA,CAAA,KAAA,EAAA;IAAK,IAAI,EAAT,QAAA;IAAmB,QAAQ,EAA3B,CAAA;IAAgC,cAAYb,IAAI,CAAhD,gBAAA;IACI,SAAS,EAAEa,WAAW,CAAXA,IAAAA,CADf,GACeA,CADf;IAEI,OAAO,EAAE,MAAMZ,eAAe,CAAA,IAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAFlC,OAEkC,CAFlC;IAGI,GAAG,EAAEW,SAAS,CAHlB,SAAA;IAII,UAAU,EAJd,eAAA;IAAA,QAAA,EAAA,CAKKZ,IAAI,CAAJA,MAAAA,IAAAA,QAAAA,IAAAA,aAA2B,OAAA,CAAA,MAAA,EAAA;MAAQ,SAAS,EAAjB,qBAAA;MAAwC,MAAM,EAAEA,IAAI,CAACwB;IAArD,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,GAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EALhC,IAKgC,CALhC,EAMKN,SAAS,IAAA,aAAI,OAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAd,sBAAA;MAAsC,KAAK,EAAElB,IAAI,CAAjD,gBAAA;MAAA,QAAA,EAAqEA,IAAI,CAACyB;IAA1E,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,GAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EANlB,IAMkB,CANlB,EAOKJ,QAAQ,KAAKpC,SAAS,CAAtBoC,SAAAA,IAAoCrB,IAAI,CAAxCqB,QAAAA,IAAAA,aAAqD,OAAA,CAAA,KAAA,EAAA;MAAK,SAAS,EAAC;IAAf,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,GAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EAP1D,IAO0D,CAP1D,EAQKrB,IAAI,CAAJA,QAAAA,IAAAA,aAAiB,OAAA,CAAA,QAAA,EAAA;MAAU,cAAYA,IAAI,CAA1B,gBAAA;MAA6C,SAAS,EAAtD,uBAAA;MAA+E,MAAM,EAAEA,IAAI,CAA3F,QAAA;MAAsG,MAAM,EAAI0B,CAAF,IAAS9B,aAAa,CAAA,IAAA,EAAA,CAAA,EAAA,YAAA,EAAA,OAAA;IAApI,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,GAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EARtB,IAQsB,CARtB,EAAA,aASK,OAAA,CAAA,OAAA,EAAA,EAAA,GAAagB,SAAS,CAAtB,OAAA;MAAA,QAAA,EACKZ,IAAI,CAAJA,QAAAA,IAAiB,IAAI,CAAJ,QAAA,CAAA,GAAA,CAAmB,CAAA,SAAA,EAAA,KAAA,KAAwB;QAC1D,OAAA,aACI,OAAA,CAAA,KAAA,EAAA;UAAK,IAAI,EAAT,QAAA;UAAmB,QAAQ,EAA3B,CAAA;UACI,SAAS,EAAEa,WAAW,CAAXA,IAAAA,CADf,GACeA,CADf;UAGI,OAAO,EAAE,MAAMZ,eAAe,CAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAHlC,OAGkC,CAHlC;UAII,UAAU,EAJd,eAAA;UAAA,QAAA,EAAA,CAKK0B,SAAS,CAATA,MAAAA,IAAAA,QAAAA,IAAAA,aAAgC,OAAA,CAAA,MAAA,EAAA;YAAQ,SAAS,EAAjB,8CAAA;YAAiE,MAAM,EAAEA,SAAS,CAACH;UAAnF,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;YAAA,QAAA,EAAA,YAAA;YAAA,UAAA,EAAA,GAAA;YAAA,YAAA,EAAA;UAAA,CAAA,EALrC,IAKqC,CALrC,EAMKN,SAAS,IAAA,aAAI,OAAA,CAAA,KAAA,EAAA;YAAK,SAAS,EAAd,gDAAA;YAAgE,KAAK,EAAES,SAAS,CAAhF,gBAAA;YAAA,QAAA,EAAoGA,SAAS,CAACF;UAA9G,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;YAAA,QAAA,EAAA,YAAA;YAAA,UAAA,EAAA,GAAA;YAAA,YAAA,EAAA;UAAA,CAAA,EANlB,IAMkB,CANlB,EAOKJ,QAAQ,KAAKpC,SAAS,CAAtBoC,SAAAA,IAAoCM,SAAS,CAA7CN,QAAAA,IAAAA,aAA0D,OAAA,CAAA,KAAA,EAAA;YAAK,SAAS,EAAC;UAAf,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;YAAA,QAAA,EAAA,YAAA;YAAA,UAAA,EAAA,GAAA;YAAA,YAAA,EAAA;UAAA,CAAA,EAP/D,IAO+D,CAP/D,EAQKM,SAAS,CAATA,QAAAA,IAAAA,aAAsB,OAAA,CAAA,QAAA,EAAA;YAAU,SAAS,EAAnB,kDAAA;YAAuE,MAAM,EAAEA,SAAS,CAAxF,QAAA;YAAmG,MAAM,EAAID,CAAF,IAAS9B,aAAa,CAAA,SAAA,EAAA,CAAA,EAAA,YAAA,EAAA,OAAA;UAAjI,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;YAAA,QAAA,EAAA,YAAA;YAAA,UAAA,EAAA,GAAA;YAAA,YAAA,EAAA;UAAA,CAAA,EAR3B,IAQ2B,CAR3B;QAAA,CAAA,EAAA,KAAA,EAAA,IAAA,EAAA;UAAA,QAAA,EAAA,YAAA;UAAA,UAAA,EAAA,GAAA;UAAA,YAAA,EAAA;QAAA,CAAA,EADJ,IACI,CADJ;MADe,CAAA;IADtB,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,GAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EATL,IASK,CATL;EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,GAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EADJ,IACI,CADJ;AApEG,CAAA","sourcesContent":["import AwIcon from 'viewmodel/AwIconViewModel';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport logger from 'js/logger';\nimport buttonStyles from 'js/buttonStyles';\nimport { EnableWhen } from 'js/hocCollection';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\n\nconst EnableWhenDiv = EnableWhen( 'div' );\n\nconst ChipTypes = {\n    STATIC: 'STATIC',\n    BUTTON: 'BUTTON',\n    SELECTION: 'SELECTION'\n};\n\nconst DEFAULT_CHIP_STYLE = 'base';\n\n// the map from unselected button type to selected button type\nconst SelectionChipStyleMap = {\n    base: 'accent-mid-contrast',\n    accent: 'accent-high-contrast',\n    caution: 'accent-caution',\n    positive: 'accent-positive',\n    negative: 'accent-negative'\n};\n\nconst uiIconClicked = function( chip, event, uiIconAction, actions ) {\n    event.stopPropagation();\n\n    actions.hintPopup.hide();\n    // perform action when UI icon get clicked\n    return uiIconAction ? uiIconAction( { chip: chip } ) : '';\n};\n\nconst handleChipClick = ( chip, action, dispatch, data, actions ) => {\n    // perform action for non static chip\n\n    if( chip.children && !actions.hintPopup.open ) {\n        actions.hintPopup.show( {\n            width: 'auto'\n        } );\n    } else {\n        if( chip.chipType !== ChipTypes.STATIC ) {\n            if( action ) {\n                action( { chip: chip } );\n            }\n        }\n        if( chip.chipType === ChipTypes.SELECTION ) {\n            chip.selected = !chip.selected;\n            dispatch( { path: 'data', value: { ...data } } );\n        }\n    }\n};\n\nexport const awChipRenderFunction = ( props ) => {\n    const { chip, buttonType, action, actions, uiIconAction, chipCondition, viewModel } = props;\n    const { data, dispatch } = viewModel;\n    const { conditions } = chipCondition;\n    let { hintPopup } = actions;\n    const chipClasses = [ 'aw-widgets-chip' ];\n    //let isChipEnabled = true;\n\n    const evaluateChipEnableWhen = () => {\n        if( chip.enableWhen && chip.enableWhen.condition ) {\n            const conditionName = chip.enableWhen.condition.split( 'conditions.' )[ 1 ];\n            return conditions[ conditionName ];\n        }\n        return true;\n    };\n\n    const closePopup = () => {\n        hintPopup.hide();\n    };\n\n    if( !chip ) {\n        logger.error( 'Chip model object is undefined, failed to render aw-chip.' );\n        return undefined;\n    }\n\n    let showLabel = true;\n    if( chip.showLabel !== undefined ) {\n        showLabel = Boolean( chip.showLabel );\n    }\n\n    let showIcon = true;\n    if( chip.showIcon !== undefined ) {\n        showIcon = Boolean( chip.showIcon );\n\n        //always make label visible when both icon and label are configured hidden.\n        if( !showIcon && !showLabel ) {\n            showLabel = true;\n        }\n    }\n\n    let chipType = null;\n    if( chip.chipType && ChipTypes[ chip.chipType ] ) {\n        chipType = chip.chipType;\n    } else {\n        logger.warn( 'Chip type \"' + chipType + '\" is invalid.' );\n        chipType = action ? ChipTypes.BUTTON : ChipTypes.STATIC;\n    }\n\n    // the button type defined in chip data model will take precedence than the 'buttonType' scope data\n    let buttonTypeForChip = chip.buttonType || buttonType || DEFAULT_CHIP_STYLE;\n    chipClasses.push( buttonStyles.getButtonStyle( buttonTypeForChip ) );\n\n    if( chip.selected ) {\n        chipClasses.push( 'aw-widgets-chipSelected' );\n    }\n\n    if( chipType === ChipTypes.STATIC ) {\n        chipClasses.push( 'aw-widgets-staticChip' );\n    }\n\n    if( chip.className ) {\n        chipClasses.push( chip.className );\n    }\n\n    if( !evaluateChipEnableWhen() ) {\n        chipClasses.push( 'disabled' );\n    }\n\n    return (\n        <div role='button' tabIndex={0} aria-label={chip.labelDisplayName}\n            className={chipClasses.join( ' ' )}\n            onClick={() => handleChipClick( chip, action, dispatch, data, actions )}\n            ref={hintPopup.reference}\n            onKeyPress={handleChipClick}>\n            {chip.iconId && showIcon && <AwIcon className='aw-widgets-chipIcon' iconId={chip.iconId}></AwIcon>}\n            {showLabel && <div className='aw-widgets-chipLabel' title={chip.labelDisplayName}>{chip.labelDisplayName}</div>}\n            {chipType === ChipTypes.SELECTION && chip.selected && <div className='aw-widgets-chipCheckmark'></div>}\n            {chip.uiIconId && <AwButton aria-label={chip.labelDisplayName} className='aw-widgets-chipUIIcon' iconId={chip.uiIconId} action={( e ) => uiIconClicked( chip, e, uiIconAction, actions )}></AwButton>}\n            {<AwPopup {...hintPopup.options}>\n                { chip.children && chip.children.map( ( childChip, index ) => {\n                    return (\n                        <div role='button' tabIndex={0}\n                            className={chipClasses.join( ' ' )}\n                            key={index}\n                            onClick={() => handleChipClick( childChip, action, dispatch, data, actions )}\n                            onKeyPress={handleChipClick}>\n                            {childChip.iconId && showIcon && <AwIcon className='aw-widgets-chipIcon aw-widgets-chipChildIcon' iconId={childChip.iconId}></AwIcon>}\n                            {showLabel && <div className='aw-widgets-chipLabel aw-widgets-chipChildLabel' title={childChip.labelDisplayName}>{childChip.labelDisplayName}</div>}\n                            {chipType === ChipTypes.SELECTION && childChip.selected && <div className='aw-widgets-chipCheckmark aw-widgets-chipChildCheckmark'></div>}\n                            {childChip.uiIconId && <AwButton className='aw-widgets-chipUIIcon aw-widgets-chipChildUIIcon' iconId={childChip.uiIconId} action={( e ) => uiIconClicked( childChip, e, uiIconAction, actions )}></AwButton>}\n                        </div>\n                    );\n                } )}\n            </AwPopup>}\n        </div>\n\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
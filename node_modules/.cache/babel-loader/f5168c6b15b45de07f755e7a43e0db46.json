{"ast":null,"code":"/* eslint-disable valid-jsdoc */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides service related to displaying notifications.\n *\n * @module js/messagingService\n *\n * @publishedApolloService\n */\nimport notyService from 'js/NotyModule';\nimport notyErrorService from 'js/notyErrorService';\nimport AwPromiseService from 'js/awPromiseService';\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport parsingUtils from 'js/parsingUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\nimport { registerDynImportEntry, loadDynModule } from 'js/moduleLoader';\nregisterDynImportEntry('js/viewModelService', () => import('js/viewModelService')); // Another pattern\n\nvar _messageTypes = {\n  info: true,\n  warning: true,\n  error: true\n};\nvar exports = {};\n/**\n * Get localized text\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @param {String} interpolationString - The string to search.\n *\n * @return {String} Interpolated string.\n * @ignore\n */\n\nexport let getLocalizedTextForInterpolationString = function (messageContext, interpolationString) {\n  var textPath = parsingUtils.getStringBetweenDoubleMustaches(interpolationString);\n\n  if (textPath === interpolationString) {\n    return interpolationString;\n  }\n\n  return _.get(messageContext, textPath);\n};\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {String} Result string after applying passed parameters.\n */\n\nexport let applyMessageParams = function (messageString, messageParams, messageContext) {\n  return declUtils.applyMessageParams(messageString, messageParams, messageContext);\n};\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @return {String} Result string after applying passed parameters.\n */\n\nexport let applyMessageParamsWithoutContext = function (messageString, messageParams) {\n  var placeHolders = messageString.match(/\\{[0-9]*\\}/g);\n  var resultString = messageString;\n\n  if (placeHolders) {\n    for (var i in placeHolders) {\n      if (placeHolders.hasOwnProperty(i)) {\n        var placeHolder = placeHolders[i];\n        var replacementString = messageParams[i];\n        resultString = resultString.replace(placeHolder, replacementString);\n      }\n    }\n  }\n\n  return resultString;\n};\n/**\n * Evaluate message data\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {String} messageData - The message data.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {Object} Result object after applying passed parameters.\n * @ignore\n */\n\nexport let applyMessageData = function (messageString, messageParams, messageData, messageContext) {\n  if (messageData) {\n    for (var key in messageData) {\n      if (messageData[key]) {\n        var parseKey = parsingUtils.getStringBetweenDoubleMustaches(messageData[key]);\n\n        var replacementString = _.get(messageContext, parseKey);\n\n        messageData[key] = replacementString;\n      }\n    }\n\n    messageData.context = messageContext;\n    messageData.params = messageParams;\n  }\n\n  return messageData;\n};\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {Object} messageDefn - message definition\n *\n * @param {String} localizedMessage - localizedMessage\n *\n * @param {Object} deferred - promise object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @param {Object} messageData - message data object\n */\n\nvar _reportNotyMessageInternal = function (messageDefn, localizedMessage, deferred, declViewModel, parentScope, messageData) {\n  var buttonsArr = [];\n\n  if (messageDefn.navigationOptions) {\n    _.forEach(messageDefn.navigationOptions, function (navOption) {\n      var button = {};\n      button.addClass = 'btn btn-notify';\n      button.text = exports.getLocalizedTextForInterpolationString(declViewModel, navOption.text);\n\n      button.onClick = function ($noty) {\n        $noty.close();\n\n        if (navOption.action) {\n          //revisitMe: Prasad use afxWeakImport or remove cyclic dep\n          loadDynModule('js/viewModelService').then(vmService => {\n            vmService.executeCommand(declViewModel, navOption.action, parentScope);\n            deferred.resolve();\n          });\n        } else {\n          deferred.resolve();\n        }\n      };\n\n      buttonsArr.push(button);\n    });\n  }\n\n  if (messageDefn.messageType === 'INFO') {\n    exports.showInfo(localizedMessage, messageData, messageDefn, buttonsArr);\n  } else if (messageDefn.messageType === 'WARNING') {\n    exports.showWarning(localizedMessage, buttonsArr, messageData, messageDefn);\n  } else if (messageDefn.messageType === 'ERROR' && messageDefn.messageKey && messageDefn.message) {\n    const localizedMessage = notyErrorService.getLocalizedMessage(messageDefn, messageData, declViewModel);\n    exports.showError(localizedMessage, messageData, messageDefn, buttonsArr);\n  } else if (messageDefn.messageType === 'ERROR') {\n    exports.showError(localizedMessage, messageData, messageDefn, buttonsArr);\n  }\n\n  if (!messageDefn.navigationOptions) {\n    deferred.resolve();\n  }\n};\n\nconst _applyErrorMessage = function (messageDefn, context) {\n  const parseKey = parsingUtils.getStringBetweenDoubleMustaches(messageDefn.messageText);\n  return _.get(context, parseKey);\n};\n/**\n * generate a message.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} message - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @ignore\n */\n\n\nexport let generateMessage = function (declViewModel, messageList, message, parentScope) {\n  if (!messageList) {\n    messageList = declViewModel._internal.messages;\n  }\n\n  if (parentScope) {\n    declUtils.assertValidModelAndDataCtxNode(declViewModel, parentScope);\n  } else {\n    declUtils.assertValidModel(declViewModel);\n  }\n\n  var messageDefn = _.cloneDeep(_.get(messageList, message));\n\n  if (messageDefn) {\n    let context = declUtils.getLatestContext(parentScope, declViewModel);\n    context = { ...context,\n      ...declViewModel.atomicData\n    };\n\n    if (messageDefn.expression) {\n      var expr = {};\n\n      _.forEach(messageDefn.expression, function (expression, key) {\n        expr[key] = conditionService.parseExpression(declViewModel, expression, context);\n      });\n\n      context.expression = expr;\n    }\n\n    var localizedMessage = null;\n\n    if (messageDefn.messageText) {\n      localizedMessage = exports.getLocalizedTextForInterpolationString(context.data, messageDefn.messageText);\n\n      if (localizedMessage) {\n        localizedMessage = exports.applyMessageParams(localizedMessage, messageDefn.messageTextParams, context);\n      } else {\n        localizedMessage = _applyErrorMessage(messageDefn, parentScope);\n      }\n    } else if (messageDefn.messageKey) {\n      var messageData = exports.applyMessageData(localizedMessage, messageDefn.messageTextParams, messageDefn.messageData, context);\n      messageData.isCustomElem = true;\n      localizedMessage = '<aw-include name=\"' + messageDefn.messageKey + '\" sub-panel-context=\"subPanelContext\"></aw-include>';\n    } else {\n      // Invalid usage of message\n      return {};\n    }\n\n    return {\n      localizedMessage: localizedMessage,\n      messageData: messageData,\n      messageDefn: messageDefn\n    };\n  }\n\n  return {};\n};\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} notyMessage - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n * @ignore\n */\n\nexport let reportNotyMessage = function (declViewModel, messageList, notyMessage, parentScope) {\n  var deferred = AwPromiseService.instance.defer();\n  var message = exports.generateMessage(declViewModel, messageList, notyMessage, parentScope);\n  var messageDefn = message.messageDefn;\n\n  if (!message.localizedMessage) {\n    deferred.reject('resolved message string is empty');\n  } else if (messageDefn && messageDefn.messageType) {\n    if (logger.isDeclarativeLogEnabled()) {\n      debugService.debugMessages(message, declViewModel, parentScope);\n    }\n\n    if (messageDefn.messageText) {\n      _reportNotyMessageInternal(messageDefn, message.localizedMessage, deferred, declViewModel, parentScope);\n    } else if (messageDefn.messageKey) {\n      _reportNotyMessageInternal(messageDefn, message.localizedMessage, deferred, declViewModel, parentScope, message.messageData);\n    } else {\n      // Invalid usage of message\n      deferred.reject();\n    } //Add active token to the declViewModel corresponding to which the noty msg is opened\n    //This assists usecases where noty msgs are opened through popups\n    //preventing the unmounting of popups(destruction of declViewModel) until a user action is performed on the noty msg\n\n\n    declViewModel.getToken().addAction(messageDefn);\n    deferred.promise.then(function () {\n      declViewModel.getToken().removeAction(messageDefn);\n    }).catch(function () {\n      declViewModel.getToken().removeAction(messageDefn);\n    });\n  }\n\n  return deferred.promise;\n};\n/**\n * Show error message in notification.\n *\n * @param {String} message - error message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showError = function (message, messageData, messageDefn, buttonsArr) {\n  if (_messageTypes.error) {\n    logger.error(message);\n    notyService.showError(message, messageData, messageDefn, buttonsArr);\n  }\n};\n/**\n * Show informational message in notification.\n *\n * @param {String} message - Informational message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\n\nexport let showInfo = function (message, messageData, messageDefn, buttonsArr) {\n  if (_messageTypes.info) {\n    logger.info(message);\n    notyService.showInfo(message, messageData, messageDefn, buttonsArr);\n  }\n};\n/**\n * Show warning message in notification.\n *\n * @param {String} message - Warning message to show\n * @param {String} buttonsArr  – Array of buttons (like: Cancel, Ok)\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n */\n\nexport let showWarning = function (message, buttonsArr, messageData, messageDefn) {\n  if (_messageTypes.warning) {\n    logger.warn(message);\n    notyService.showWarning(message, buttonsArr, messageData, messageDefn);\n  }\n};\n/**\n * Get SOA error message from error object\n *\n * @param {String} errorJSO - JavaScript Object exception\n *\n * @return {String} message error message to be displayed.\n * @ignore\n */\n\nexport let getSOAErrorMessage = function (errorJSO) {\n  if (errorJSO.message) {\n    return errorJSO.message;\n  }\n\n  var partialErrors = null;\n\n  if (errorJSO.partialErrors) {\n    partialErrors = errorJSO.partialErrors;\n  } else if (errorJSO.cause && errorJSO.cause.partialErrors) {\n    partialErrors = errorJSO.cause.partialErrors;\n  }\n\n  errorJSO.message = '';\n\n  if (partialErrors) {\n    for (var ii = 0; ii < partialErrors.length; ii++) {\n      var errorValues = partialErrors[ii].errorValues;\n\n      if (errorValues) {\n        for (var jj = 0; jj < errorValues.length; jj++) {\n          if (errorValues[jj].message) {\n            if (errorJSO.message.length > 0) {\n              errorJSO.message += '\\n';\n            }\n\n            errorJSO.message += errorValues[jj].message;\n          }\n        }\n      }\n    }\n  }\n\n  return errorJSO.message;\n};\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {String} timeoutValue - timeout Value in ms.\n */\n\nexport let setTimeout = function (messageType, timeoutValue) {\n  timeoutValue = parseInt(timeoutValue);\n  messageType = messageType.toLocaleLowerCase();\n\n  if (!isNaN(timeoutValue) && timeoutValue > 0) {\n    timeoutValue = getTimeoutMillis(timeoutValue);\n  } else if (timeoutValue <= 0) {\n    timeoutValue = 0;\n  }\n\n  notyService.setTimeout(messageType, timeoutValue);\n};\n/**\n * API to set the visibility of any type of notification messages.\n *\n * @param {String} messageType - INFO/WARNING/ERROR\n * @param {Boolean} value - set visibility value\n *\n */\n\nexport let setMessageVisibility = function (messageType, value) {\n  messageType = messageType.toLocaleLowerCase();\n\n  if (messageType in _messageTypes) {\n    _messageTypes[messageType] = value;\n  }\n};\n/*\n * The service to convert seconds in milliseconds.\n */\n\nvar getTimeoutMillis = function (timeout) {\n  return timeout * 1000;\n};\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\n\nexports = {\n  getLocalizedTextForInterpolationString,\n  applyMessageParams,\n  applyMessageParamsWithoutContext,\n  applyMessageData,\n  generateMessage,\n  reportNotyMessage,\n  showError,\n  showInfo,\n  showWarning,\n  getSOAErrorMessage,\n  setTimeout,\n  setMessageVisibility\n};\nexport default exports;","map":{"version":3,"names":["notyService","notyErrorService","AwPromiseService","conditionService","_","declUtils","parsingUtils","logger","debugService","registerDynImportEntry","loadDynModule","_messageTypes","info","warning","error","exports","getLocalizedTextForInterpolationString","messageContext","interpolationString","textPath","getStringBetweenDoubleMustaches","get","applyMessageParams","messageString","messageParams","applyMessageParamsWithoutContext","placeHolders","match","resultString","i","hasOwnProperty","placeHolder","replacementString","replace","applyMessageData","messageData","key","parseKey","context","params","_reportNotyMessageInternal","messageDefn","localizedMessage","deferred","declViewModel","parentScope","buttonsArr","navigationOptions","forEach","navOption","button","addClass","text","onClick","$noty","close","action","then","vmService","executeCommand","resolve","push","messageType","showInfo","showWarning","messageKey","message","getLocalizedMessage","showError","_applyErrorMessage","messageText","generateMessage","messageList","_internal","messages","assertValidModelAndDataCtxNode","assertValidModel","cloneDeep","getLatestContext","atomicData","expression","expr","parseExpression","data","messageTextParams","isCustomElem","reportNotyMessage","notyMessage","instance","defer","reject","isDeclarativeLogEnabled","debugMessages","getToken","addAction","promise","removeAction","catch","warn","getSOAErrorMessage","errorJSO","partialErrors","cause","ii","length","errorValues","jj","setTimeout","timeoutValue","parseInt","toLocaleLowerCase","isNaN","getTimeoutMillis","setMessageVisibility","value","timeout"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/messagingService.js"],"sourcesContent":["/* eslint-disable valid-jsdoc */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides service related to displaying notifications.\n *\n * @module js/messagingService\n *\n * @publishedApolloService\n */\nimport notyService from 'js/NotyModule';\nimport notyErrorService from 'js/notyErrorService';\nimport AwPromiseService from 'js/awPromiseService';\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport parsingUtils from 'js/parsingUtils';\nimport logger from 'js/logger';\nimport debugService from 'js/debugService';\nimport { registerDynImportEntry, loadDynModule } from 'js/moduleLoader';\nregisterDynImportEntry( 'js/viewModelService', () => import( 'js/viewModelService' ) );\n// Another pattern\n\nvar _messageTypes = {\n    info: true,\n    warning: true,\n    error: true\n};\n\nvar exports = {};\n\n/**\n * Get localized text\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @param {String} interpolationString - The string to search.\n *\n * @return {String} Interpolated string.\n * @ignore\n */\nexport let getLocalizedTextForInterpolationString = function( messageContext, interpolationString ) {\n    var textPath = parsingUtils.getStringBetweenDoubleMustaches( interpolationString );\n\n    if( textPath === interpolationString ) {\n        return interpolationString;\n    }\n\n    return _.get( messageContext, textPath );\n};\n\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {String} Result string after applying passed parameters.\n */\nexport let applyMessageParams = function( messageString, messageParams, messageContext ) {\n    return declUtils.applyMessageParams( messageString, messageParams, messageContext );\n};\n\n/**\n * Evaluate message with its parameters\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @return {String} Result string after applying passed parameters.\n */\nexport let applyMessageParamsWithoutContext = function( messageString, messageParams ) {\n    var placeHolders = messageString.match( /\\{[0-9]*\\}/g );\n\n    var resultString = messageString;\n\n    if( placeHolders ) {\n        for( var i in placeHolders ) {\n            if( placeHolders.hasOwnProperty( i ) ) {\n                var placeHolder = placeHolders[ i ];\n                var replacementString = messageParams[ i ];\n                resultString = resultString.replace( placeHolder, replacementString );\n            }\n        }\n    }\n\n    return resultString;\n};\n\n/**\n * Evaluate message data\n *\n * @param {String} messageString - The message String.\n *\n * @param {String} messageParams - The message parameters.\n *\n * @param {String} messageData - The message data.\n *\n * @param {Object} messageContext - The context object (e.g. a 'declViewModel') that holds the text string map to\n *            search within.\n *\n * @return {Object} Result object after applying passed parameters.\n * @ignore\n */\nexport let applyMessageData = function( messageString, messageParams, messageData, messageContext ) {\n    if( messageData ) {\n        for( var key in messageData ) {\n            if( messageData[ key ] ) {\n                var parseKey = parsingUtils.getStringBetweenDoubleMustaches( messageData[ key ] );\n                var replacementString = _.get( messageContext, parseKey );\n\n                messageData[ key ] = replacementString;\n            }\n        }\n\n        messageData.context = messageContext;\n        messageData.params = messageParams;\n    }\n\n    return messageData;\n};\n\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {Object} messageDefn - message definition\n *\n * @param {String} localizedMessage - localizedMessage\n *\n * @param {Object} deferred - promise object\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @param {Object} messageData - message data object\n */\nvar _reportNotyMessageInternal = function( messageDefn, localizedMessage, deferred, declViewModel, parentScope,\n    messageData ) {\n    var buttonsArr = [];\n\n    if( messageDefn.navigationOptions ) {\n        _.forEach( messageDefn.navigationOptions, function( navOption ) {\n            var button = {};\n\n            button.addClass = 'btn btn-notify';\n\n            button.text = exports.getLocalizedTextForInterpolationString( declViewModel, navOption.text );\n\n            button.onClick = function( $noty ) {\n                $noty.close();\n                if( navOption.action ) {\n                    //revisitMe: Prasad use afxWeakImport or remove cyclic dep\n                    loadDynModule( 'js/viewModelService' ).then( vmService => {\n                        vmService.executeCommand( declViewModel, navOption.action, parentScope );\n                        deferred.resolve();\n                    } );\n                } else {\n                    deferred.resolve();\n                }\n            };\n\n            buttonsArr.push( button );\n        } );\n    }\n\n    if( messageDefn.messageType === 'INFO' ) {\n        exports.showInfo( localizedMessage, messageData, messageDefn, buttonsArr );\n    } else if( messageDefn.messageType === 'WARNING' ) {\n        exports.showWarning( localizedMessage, buttonsArr, messageData, messageDefn );\n    } else if( messageDefn.messageType === 'ERROR' && messageDefn.messageKey && messageDefn.message ) {\n        const localizedMessage = notyErrorService.getLocalizedMessage( messageDefn, messageData, declViewModel );\n        exports.showError( localizedMessage, messageData, messageDefn, buttonsArr );\n    } else if( messageDefn.messageType === 'ERROR' ) {\n        exports.showError( localizedMessage, messageData, messageDefn, buttonsArr );\n    }\n    if( !messageDefn.navigationOptions ) {\n        deferred.resolve();\n    }\n};\n\nconst _applyErrorMessage = function( messageDefn, context ) {\n    const parseKey = parsingUtils.getStringBetweenDoubleMustaches( messageDefn.messageText );\n    return _.get( context, parseKey );\n};\n\n/**\n * generate a message.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} message - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n *\n * @ignore\n */\nexport let generateMessage = function( declViewModel, messageList, message, parentScope ) {\n    if( !messageList ) {\n        messageList = declViewModel._internal.messages;\n    }\n    if( parentScope ) {\n        declUtils.assertValidModelAndDataCtxNode( declViewModel, parentScope );\n    } else {\n        declUtils.assertValidModel( declViewModel );\n    }\n    var messageDefn = _.cloneDeep( _.get( messageList, message ) );\n\n    if( messageDefn ) {\n        let context = declUtils.getLatestContext( parentScope, declViewModel );\n        context = { ...context, ...declViewModel.atomicData };\n\n        if( messageDefn.expression ) {\n            var expr = {};\n            _.forEach( messageDefn.expression, function( expression, key ) {\n                expr[ key ] = conditionService.parseExpression( declViewModel, expression, context );\n            } );\n\n            context.expression = expr;\n        }\n\n        var localizedMessage = null;\n        if( messageDefn.messageText ) {\n            localizedMessage = exports.getLocalizedTextForInterpolationString( context.data, messageDefn.messageText );\n            if( localizedMessage ) {\n                localizedMessage = exports.applyMessageParams( localizedMessage, messageDefn.messageTextParams, context );\n            } else {\n                localizedMessage = _applyErrorMessage( messageDefn, parentScope );\n            }\n        } else if( messageDefn.messageKey ) {\n            var messageData = exports.applyMessageData( localizedMessage, messageDefn.messageTextParams, messageDefn.messageData, context );\n            messageData.isCustomElem = true;\n            localizedMessage = '<aw-include name=\"' + messageDefn.messageKey +\n                '\" sub-panel-context=\"subPanelContext\"></aw-include>';\n        } else {\n            // Invalid usage of message\n            return {};\n        }\n        return { localizedMessage: localizedMessage, messageData: messageData, messageDefn: messageDefn };\n    }\n    return {};\n};\n\n/**\n * Report a message using 'NotyJS' API.\n *\n * @param {DeclViewModel} declViewModel - The 'declViewModel' context object that holds the text string map to\n *            search within.\n *\n * @param {Object} messageList - Structure containing action messages.\n *\n * @param {String} notyMessage - The action message.\n *\n * @param {Object} parentScope - The scope of the parent\n * @ignore\n */\nexport let reportNotyMessage = function( declViewModel, messageList, notyMessage, parentScope ) {\n    var deferred = AwPromiseService.instance.defer();\n    var message = exports.generateMessage( declViewModel, messageList, notyMessage, parentScope );\n    var messageDefn = message.messageDefn;\n    if( !message.localizedMessage ) {\n        deferred.reject( 'resolved message string is empty' );\n    } else if( messageDefn && messageDefn.messageType ) {\n        if( logger.isDeclarativeLogEnabled() ) {\n            debugService.debugMessages( message, declViewModel, parentScope );\n        }\n        if( messageDefn.messageText ) {\n            _reportNotyMessageInternal( messageDefn, message.localizedMessage, deferred, declViewModel, parentScope );\n        } else if( messageDefn.messageKey ) {\n            _reportNotyMessageInternal( messageDefn, message.localizedMessage, deferred, declViewModel, parentScope, message.messageData );\n        } else {\n            // Invalid usage of message\n            deferred.reject();\n        }\n\n        //Add active token to the declViewModel corresponding to which the noty msg is opened\n        //This assists usecases where noty msgs are opened through popups\n        //preventing the unmounting of popups(destruction of declViewModel) until a user action is performed on the noty msg\n        declViewModel.getToken().addAction( messageDefn );\n        deferred.promise.then( function() {\n            declViewModel.getToken().removeAction( messageDefn );\n        } ).catch( function() {\n            declViewModel.getToken().removeAction( messageDefn );\n        } );\n    }\n    return deferred.promise;\n};\n\n/**\n * Show error message in notification.\n *\n * @param {String} message - error message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showError = function( message, messageData, messageDefn, buttonsArr ) {\n    if( _messageTypes.error ) {\n        logger.error( message );\n        notyService.showError( message, messageData, messageDefn, buttonsArr );\n    }\n};\n\n/**\n * Show informational message in notification.\n *\n * @param {String} message - Informational message to show\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n * @param {Object} buttonsArr - Array of buttons as user options\n */\nexport let showInfo = function( message, messageData, messageDefn, buttonsArr ) {\n    if( _messageTypes.info ) {\n        logger.info( message );\n        notyService.showInfo( message, messageData, messageDefn, buttonsArr );\n    }\n};\n\n/**\n * Show warning message in notification.\n *\n * @param {String} message - Warning message to show\n * @param {String} buttonsArr  – Array of buttons (like: Cancel, Ok)\n * @param {String} messageData – Dynamic data to pass along with message\n * @param {Object} messageDefn - message definition\n */\nexport let showWarning = function( message, buttonsArr, messageData, messageDefn ) {\n    if( _messageTypes.warning ) {\n        logger.warn( message );\n        notyService.showWarning( message, buttonsArr, messageData, messageDefn );\n    }\n};\n\n/**\n * Get SOA error message from error object\n *\n * @param {String} errorJSO - JavaScript Object exception\n *\n * @return {String} message error message to be displayed.\n * @ignore\n */\nexport let getSOAErrorMessage = function( errorJSO ) {\n    if( errorJSO.message ) {\n        return errorJSO.message;\n    }\n\n    var partialErrors = null;\n\n    if( errorJSO.partialErrors ) {\n        partialErrors = errorJSO.partialErrors;\n    } else if( errorJSO.cause && errorJSO.cause.partialErrors ) {\n        partialErrors = errorJSO.cause.partialErrors;\n    }\n\n    errorJSO.message = '';\n\n    if( partialErrors ) {\n        for( var ii = 0; ii < partialErrors.length; ii++ ) {\n            var errorValues = partialErrors[ ii ].errorValues;\n\n            if( errorValues ) {\n                for( var jj = 0; jj < errorValues.length; jj++ ) {\n                    if( errorValues[ jj ].message ) {\n                        if( errorJSO.message.length > 0 ) {\n                            errorJSO.message += '\\n';\n                        }\n\n                        errorJSO.message += errorValues[ jj ].message;\n                    }\n                }\n            }\n        }\n    }\n\n    return errorJSO.message;\n};\n\n/**\n * Setting custom notification timeout for INFO.\n *\n * @param {String} messageType - type if message INFO/ERROR\n * @param {String} timeoutValue - timeout Value in ms.\n */\nexport let setTimeout = function( messageType, timeoutValue ) {\n    timeoutValue = parseInt( timeoutValue );\n    messageType = messageType.toLocaleLowerCase();\n    if( !isNaN( timeoutValue ) && timeoutValue > 0 ) {\n        timeoutValue = getTimeoutMillis( timeoutValue );\n    } else if( timeoutValue <= 0 ) {\n        timeoutValue = 0;\n    }\n    notyService.setTimeout( messageType, timeoutValue );\n};\n\n/**\n * API to set the visibility of any type of notification messages.\n *\n * @param {String} messageType - INFO/WARNING/ERROR\n * @param {Boolean} value - set visibility value\n *\n */\nexport let setMessageVisibility = function( messageType, value ) {\n    messageType = messageType.toLocaleLowerCase();\n    if( messageType in _messageTypes ) {\n        _messageTypes[ messageType ] = value;\n    }\n};\n\n/*\n * The service to convert seconds in milliseconds.\n */\nvar getTimeoutMillis = function( timeout ) {\n    return timeout * 1000;\n};\n\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nexports = {\n    getLocalizedTextForInterpolationString,\n    applyMessageParams,\n    applyMessageParamsWithoutContext,\n    applyMessageData,\n    generateMessage,\n    reportNotyMessage,\n    showError,\n    showInfo,\n    showWarning,\n    getSOAErrorMessage,\n    setTimeout,\n    setMessageVisibility\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
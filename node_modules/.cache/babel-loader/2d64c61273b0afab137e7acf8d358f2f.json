{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * Defines {@link themeService} which manages themes.\n *\n * @module js/theme.service\n */import eventBus from'js/eventBus';import appCtxService from'js/appCtxService';import configurationService from'js/configurationService';import localStorage from'js/localStorage';/**\n * The theme link element\n */let themeLink=null;/**\n * Theme context\n */let themeContext='theme';/**\n * Initialize the theme service\n */export function init(){exports.setInitialTheme();}/**\n * Get the current theme\n *\n * @return {String} The current theme\n */export function getTheme(){return appCtxService.getCtx(themeContext);}/**\n * Set the theme to the theme in local storage or the default theme\n */export function setInitialTheme(){var localTheme=exports.getLocalStorageTheme();if(localTheme){exports.setTheme(localTheme);}else{exports.getDefaultTheme().then(exports.setTheme);}}/**\n * Get the current theme from local storage\n *\n * @return {String} The theme in local storage\n */export function getLocalStorageTheme(){return localStorage.get(themeContext);}/**\n * Get the default theme defined by the workspace\n *\n * @return {String} The default workspace theme\n */export function getDefaultTheme(){return configurationService.getCfg('solutionDef').then(function(solutionDef){return solutionDef.defaultTheme?solutionDef.defaultTheme:'ui-lightTheme';});}/**\n * Set the current theme\n *\n * @example themeService.setTheme( 'ui-lightTheme' )\n *\n * @param {String} newTheme - The new theme\n */export function setTheme(newTheme){appCtxService.registerCtx(themeContext,newTheme);}/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */const exports={init,getTheme,setInitialTheme,getLocalStorageTheme,getDefaultTheme,setTheme};export default exports;","map":null,"metadata":{},"sourceType":"module"}
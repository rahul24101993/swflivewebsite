{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * The methods provided by this module enable access, control and maintenance of a cache of ModelObjects as well as\n * their member PropertyObjects.\n *\n * @module soa/kernel/clientDataModel\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport sanitizer from 'js/sanitizer';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport 'js/localeService';\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specfici format.\n *\n * @private\n */\n\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n/**\n * UID to indicate the identity of an object is 'unknown'.\n */\n\nvar _NULL_UID = 'AAAAAAAAAAAAAA';\n/**\n * A reference to service.\n */\n\n/**\n * A reference to sanitizer.\n */\n\n/**\n * Note: We are holding on to the resolved module now for when we are running NodeJS. However, this variable will be\n * set again when this service is created using AngularJS injection. The reason is that the 'dateTimeService' needs\n * some other AngularJS services injected to do all its work. It will use fallback values when running in NodeJS.\n *\n * @private\n */\n\n/**\n * Object used to implement a UID-to-ModelObject cache map.\n *\n * @private\n */\n\nvar _uid2modelObject = {};\n/**\n * The array of none flushable object types.\n *\n * @private\n */\n\nvar _noFlushableTypes = ['Awb0ProductContextInfo', 'Awp0GatewayTileRel', 'Awp0Tile', 'Fnd0ClientScope', 'Fnd0Command', 'Fnd0CommandCollection', 'Fnd0ConditionHelper', 'Fnd0HomeFolder', 'Fnd0Icon', 'Fnd0UIConfigCollectionRel', 'Group', 'GroupMember', 'ImanVolume', 'POM_imc', 'Role', 'User', 'UserSession'];\n/**\n * UID of the current 'User' ModelObject.\n *\n * @private\n */\n\nvar _userUID = '';\n/**\n * UID of the current 'Session' ModelObject.\n *\n * @private\n */\n\nvar _userSessionUID = '';\n/**\n * UID of the current user's 'Group' ModelObject.\n *\n * @private\n */\n\nvar _groupMemberUID = '';\n/**\n * @param {Object} modelObjectSOA - model object returned from SOA\n */\n\nfunction ModelObject(modelObjectSOA) {\n  this.props = modelObjectSOA.props || {};\n  this.type = modelObjectSOA.type;\n  this.uid = modelObjectSOA.uid; // add meta model link\n\n  this.modelType = cmm.getType(modelObjectSOA.type);\n\n  _updateProps(this.props, this.modelType);\n}\n/**\n * This method is set on (augments) all {ModelObject} instance returned by SOA so that it is available for general\n * application use.\n *\n * @return {String} Text value that represents a common way to identify the function's context object (i.e. The\n *         'object_string' property) or the JSON 'stringify' version of the content object if the specific common\n *         property if not defined.\n */\n\n\n_c = ModelObject;\n\nModelObject.prototype.toString = function () {\n  if (this.props && this.props.object_string) {\n    return this.props.object_string.uiValues[0];\n  }\n\n  return JSON.stringify(this, null, 2);\n};\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String[]} the name of all property's display value. If this property has multiple values, this method\n *         will return the first display value.\n */\n\n\nModelObject.prototype.getPropertyNames = function () {\n  return _.keys(this.props);\n};\n/**\n * Add reference count for model object.\n */\n\n\nModelObject.prototype.addReference = function () {\n  if (!this.reference) {\n    this.reference = 0;\n  }\n\n  this.reference++;\n};\n/**\n * Remove reference count from model object.\n */\n\n\nModelObject.prototype.removeReference = function () {\n  this.reference--;\n\n  if (this.reference < 1) {\n    delete this.reference;\n  }\n};\n/**\n * @param {Object} propSOA - property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - property descriptor\n */\n\n\nfunction Property(propSOA, propertyDescriptor) {\n  _conditionSoaPropValue(propSOA, propertyDescriptor, this);\n\n  this.propertyDescriptor = propertyDescriptor;\n}\n/**\n * Apply some common data value transformations on the 'propToUpdate' based on the values in the 'propSOA'.\n *\n * @param {Object} propSOA - Property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - Property descriptor.\n * @param {Object} propToUpdate - Property object to be updated.\n */\n\n\n_c2 = Property;\n\nfunction _conditionSoaPropValue(propSOA, propertyDescriptor, propToUpdate) {\n  propToUpdate.dbValues = propSOA.dbValues || [];\n  propToUpdate.isNulls = propSOA.isNulls;\n  propToUpdate.modifiable = propSOA.modifiable;\n  propToUpdate.uiValues = propSOA.uiValues || [];\n  /**\n   * Assure certain properties are never 'null' or 'undefined'\n   */\n\n  if (propSOA.isNulls) {\n    /**\n     * We want to make sure the 'dbValues' match the SOA supplied definition of 'null'.\n     */\n    for (var ndx = propSOA.isNulls.length - 1; ndx >= 0; ndx--) {\n      if (propSOA.isNulls[ndx] && propToUpdate.dbValues.length > ndx) {\n        propToUpdate.dbValues[ndx] = null;\n      }\n    }\n  }\n  /**\n   * Perform some type specific post processing of the property values.\n   */\n\n\n  switch (propertyDescriptor.valueType) {\n    case 2:\n      // Date\n\n      /**\n       * Date processing...Reformat UI value based upon DB value.\n       * <P>\n       * Note: This also makes the UI value be for the local time zone instead of the server's time zone.\n       */\n      // Only set if server gave the client a non-empty UI values array\n      if (propSOA.uiValues && propSOA.uiValues.length > 0 && propSOA.uiValues[0]) {\n        // Only attempt if we have a DB value...\n        if (propSOA.dbValues.length > 0) {\n          _.forEach(propSOA.dbValues, function (dbValue, dbNdx) {\n            var jqDate = new Date(dbValue);\n\n            if (propertyDescriptor.constantsMap && propertyDescriptor.constantsMap.timeEnabled === '1') {\n              propToUpdate.uiValues[dbNdx] = dateTimeSvc.formatSessionDateTime(jqDate);\n            } else {\n              propToUpdate.uiValues[dbNdx] = dateTimeSvc.formatSessionDate(jqDate);\n            }\n          });\n        } else {\n          propToUpdate.uiValues[0] = '';\n        }\n      }\n\n      break;\n\n    case 8:\n      // String\n      if (propertyDescriptor.name !== 'fnd0SVG') {\n        // Sanitize the String DB values\n        propToUpdate.dbValues = sanitizer.sanitizeHtmlValues(propToUpdate.dbValues); // Sanitize the String UI values\n\n        propToUpdate.uiValues = sanitizer.sanitizeHtmlValues(propToUpdate.uiValues);\n      }\n\n      if (propertyDescriptor.name === 'awp0CellProperties') {\n        propToUpdate.dbValues = _convertUTCTimeValues(propToUpdate.dbValues);\n        propToUpdate.uiValues = _convertUTCTimeValues(propToUpdate.uiValues);\n      }\n\n      break;\n  }\n}\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String} Gets the property's display value. If this property has multiple values, this method will return\n *         the first display value.\n */\n\n\nProperty.prototype.getDisplayValue = function () {\n  if (this.uiValues && this.uiValues.length > 0) {\n    return this.uiValues[0];\n  }\n\n  return '';\n};\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {Boolean} TRUE if ALL the internal values (aka 'dbValues') of the function's context object are to be\n *         considered 'null' or 'unset'.\n *         <P>\n *         If the 'isNulls' array is present, all its values will be used to determine the result. If any are\n *         'false' this function will return 'false' (i.e. property is NOT null).\n *         <P>\n *         If 'isNulls' is not present, we assume the 'dbValues' are NOT null.\n *         <P>\n *         Note: The intrinsic data types (boolean, int, double) can have a value (i.e. 'false' or 'zero') but still\n *         be 'unset'. In this case, the SOA server will send back an optional array of booleans named 'isNulls',\n *         the 'true/false' values in this array indicate while elements in the 'dbValues' array should be\n *         considered 'unset'.\n */\n\n\nProperty.prototype.evaluateIsNull = function () {\n  /**\n   * Check if the server told us this context object (property) dbValue was to be considered 'null' or 'unset'.\n   */\n  if (this.isNulls) {\n    for (var ndx = 0; ndx < this.isNulls.length; ndx++) {\n      if (!this.isNulls[ndx]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param {String[]} values - Array of values to consider.\n * @return {String[]} Array if values after replacement of any strings.\n */\n\n\nvar _convertUTCTimeValues = function (values) {\n  for (var iNdx = 0; iNdx < values.length; iNdx++) {\n    var value = values[iNdx];\n    var markerNdx = value ? value.indexOf(UTC_DATE_TIME_MARKER) : -1;\n\n    if (markerNdx !== -1) {\n      var prefix = value.substring(0, markerNdx);\n      var utc = value.substring(markerNdx + UTC_DATE_TIME_MARKER.length);\n      var date = new Date(utc);\n      values[iNdx] = prefix + dateTimeSvc.formatSessionDateTime(date);\n    }\n  }\n\n  return values;\n};\n/**\n * Update properties. This includes adding references to meta model & dealing with date conversions.\n *\n * @param {Object} props - model object properties\n * @param {ModelType} modelType - model type from meta model\n */\n\n\nvar _updateProps = function (props, modelType) {\n  // Maybe change this to for loop later\n  _.forEach(props, function (value, propName) {\n    props[propName] = new Property(value, modelType.propertyDescriptorsMap[propName]);\n  });\n};\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\n\n\nvar exports = {};\n/**\n * Get the cache.\n *\n * @returns {Object} map of UID to model object\n */\n\nexport let getCache = function () {\n  return _uid2modelObject;\n};\n/**\n * Set the cache\n *\n * @param {Object} cache - map of UID to model object\n */\n\nexport let setCache = function (cache) {\n  _.forOwn(cache, function (value, key) {\n    _uid2modelObject[key] = cache[key];\n  });\n};\n/**\n * @param {String} uid - UID of ModelObject to test for.\n * @return {boolean} TRUE if client data model contains the given ModelObject\n */\n\nexport let containsObject = function (uid) {\n  return _uid2modelObject.hasOwnProperty(uid);\n};\n/**\n * Get model object.\n *\n * @param {String} uid - UID of ModelObject\n * @return {ModelObject} The ModelObject; null if not cached\n */\n\nexport let getObject = function (uid) {\n  if (exports.containsObject(uid)) {\n    return _uid2modelObject[uid];\n  }\n\n  return null;\n};\n/**\n * Get model objects.\n *\n * @param {String[]} uids - array of ModelObject UIDs\n * @return {ModelObject} The ModelObject; null if not cached\n */\n\nexport let getObjects = function (uids) {\n  var objects = [];\n\n  _.forEach(uids, function (uid) {\n    objects.push(exports.getObject(uid));\n  });\n\n  return objects;\n};\n/**\n * Remove the ModelObject from the cache that have the given UIDs. Publishes the UIDs to the 'soajs/cdm.deleted'\n * eventBus channel/topic.\n *\n * @param {String[]} deletedUIDs - Array of UIDs to be removed from the cache.\n */\n\nexport let removeObjects = function (deletedUIDs) {\n  var uids = [];\n\n  _.forEach(deletedUIDs, function (deletedUID) {\n    if (exports.containsObject(deletedUID)) {\n      delete _uid2modelObject[deletedUID];\n      uids.push(deletedUID);\n    }\n  });\n\n  if (uids.length > 0) {\n    eventBus.publish('cdm.deleted', {\n      deletedObjectUids: uids\n    });\n  }\n};\n/**\n * @param {ModelObject} userSession - user session\n */\n\nvar setUserSession = function (userSession) {\n  _userSessionUID = userSession.uid; // For refresh scenario, signin isn't call & these 2 fields need to be set.\n\n  if (userSession.props) {\n    if (userSession.props.user) {\n      _userUID = userSession.props.user.dbValues[0];\n    }\n\n    if (userSession.props.fnd0groupmember) {\n      _groupMemberUID = userSession.props.fnd0groupmember.dbValues[0];\n    }\n  }\n};\n/**\n * Add or replace the given ModelObjects to the cache. Publishes the modelObjects to the 'soajs/cdm.modified'\n * eventBus channel/topic.\n *\n * @param {ModelObject[]} modelObjects - Array of 'wire' ModelObject to be added to the cache.\n */\n\n\nexport let cacheObjects = function (modelObjects) {\n  var newObjects = [];\n  var modifiedObjects = [];\n\n  _.forEach(modelObjects, function (modelObject) {\n    var existing = exports.containsObject(modelObject.uid) && exports.getObject(modelObject.uid);\n\n    if (!existing || existing.type !== modelObject.type) {\n      modelObject = new ModelObject(modelObject); // Add model object to cache\n\n      _uid2modelObject[modelObject.uid] = modelObject;\n      newObjects.push(modelObject);\n    } else if (!_.isEmpty(modelObject.props)) {\n      /**\n       * Special Case: Check if existing is empty\n       */\n      if (_.isEmpty(existing.props)) {\n        existing.props = modelObject.props;\n\n        _updateProps(existing.props, existing.modelType);\n        /**\n         * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n         * want to double report these.\n         */\n\n\n        if (newObjects.indexOf(existing) === -1 && modifiedObjects.indexOf(existing) === -1) {\n          modifiedObjects.push(existing);\n        }\n      } else {\n        /**\n         * Foreach of the incoming 'props'\n         */\n        var propertyDescriptorsMap = existing.modelType.propertyDescriptorsMap;\n        var changedExisting = false;\n\n        _.forEach(modelObject.props, function (soaPropValue, soaPropName) {\n          var propertyDescriptor = propertyDescriptorsMap[soaPropName];\n          var existingProp = existing.props[soaPropName];\n\n          if (!existingProp) {\n            existing.props[soaPropName] = new Property(soaPropValue, propertyDescriptor);\n            changedExisting = true;\n          } else {\n            _conditionSoaPropValue(soaPropValue, propertyDescriptor, soaPropValue);\n\n            _.forEach(soaPropValue, function (subPropValue, subPropName) {\n              var existingSubPropValue = existingProp[subPropName];\n\n              if (!_.isEqual(subPropValue, existingSubPropValue)) {\n                existing.props[soaPropName] = new Property(soaPropValue, propertyDescriptor);\n                changedExisting = true;\n                return false;\n              }\n            });\n          }\n        });\n\n        if (changedExisting) {\n          /**\n           * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n           * want to double report these.\n           */\n          if (newObjects.indexOf(existing) === -1 && modifiedObjects.indexOf(existing) === -1) {\n            modifiedObjects.push(existing);\n          }\n        }\n      }\n    } // Set the cache of the UserSession object\n\n\n    if (modelObject.type === 'UserSession') {\n      setUserSession(modelObject);\n    }\n  });\n\n  if (newObjects.length > 0) {\n    eventBus.publish('cdm.new', {\n      newObjects: newObjects\n    });\n  }\n\n  if (modifiedObjects.length > 0) {\n    eventBus.publish('cdm.modified', {\n      modifiedObjects: modifiedObjects\n    });\n  }\n};\n/**\n * @return {ModelObject} The ModelObject of the current user 'Session'.\n */\n\nexport let getUserSession = function () {\n  return exports.getObject(_userSessionUID);\n};\n/**\n * @return {ModelObject} The ModelObject of the current user's 'Group'.\n */\n\nexport let getGroupMember = function () {\n  return exports.getObject(_groupMemberUID);\n};\n/**\n * @return {ModelObject} The ModelObject of the current 'User'.\n */\n\nexport let getUser = function () {\n  return exports.getObject(_userUID);\n};\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} value - HTML String which needs to be escaped.\n * @return {String} Returns escaped and safe HTML.\n */\n\nexport let htmlEscapeAllowEntities = function (value) {\n  return sanitizer.htmlEscapeAllowEntities(value);\n};\n/**\n * Simple and inexpensive HTML Sanitizer which accepts the subset of TAG_WHITELIST array of HTML white list tags.\n *\n * @param {String[]} values - Array of HTML Strings which needs to be sanitized.\n * @return {String[]} Returns sanitized HTML string array.\n */\n\nexport let sanitizeHtmlValues = function (values) {\n  return sanitizer.sanitizeHtmlValues(values);\n};\n/**\n * Simple and inexpensive HTML Sanitizer which detects and/or eliniates HTML that can cause potential cross-site\n * scripting and other UI issues.\n *\n * @param {String} rawValue - HTML String which needs to be sanitized.\n * @return {String} Returns sanitized HTML or Invalid HTML string when there is malicious string.\n */\n\nexport let sanitizeHtmlValue = function (rawValue) {\n  return sanitizer.sanitizeHtmlValue(rawValue);\n};\n/**\n * Return an array of all IModelObjects currently in the cache that match the given model type.\n *\n * @param {String} typeName - Name of the model type to search for.\n * @return {ModelObject[]} An array of all IModelObjects currently in the cache that match the given model type.\n */\n\nexport let getObjectsOfType = function (typeName) {\n  var objs = [];\n\n  _.forEach(_uid2modelObject, function (modelObject) {\n    if (modelObject.type && modelObject.type === typeName) {\n      objs.push(modelObject);\n    }\n  });\n\n  return objs;\n};\n/**\n * @param {String} uid - UID to test\n * @return {Boolean} TRUE if the given UID is NOT null and does NOT match the patterns used to indicate 'no object'.\n */\n\nexport let isValidObjectUid = function (uid) {\n  return !_.isEmpty(uid) && !_.isEqual(uid, _NULL_UID);\n};\n/**\n * Determine if the given object is a ModelObject constructed by this service.\n *\n * @param {Object} objectToTest - The object to test.\n *\n * @returns {Boolean} TRUE if input object is an instance of an CDM ModelObject.\n */\n\nexport let isModelObject = function (objectToTest) {\n  return objectToTest instanceof ModelObject;\n};\n/**\n * {String} Module constant UID used to indicate the identity of an object is 'unknown'.\n */\n\nexport let NULL_UID = _NULL_UID;\n/**\n * ------------------------------------------------<BR>\n * Definition complete...Now do some initialization<BR>\n * ------------------------------------------------<BR>\n */\n\neventBus.subscribe('cdm.cleanCache', function () {\n  // collect the flushable objects, keep the escaped objects in cache\n  _.forEach(_uid2modelObject, function (modelObject, uid) {\n    if (!modelObject.type) {\n      return;\n    }\n\n    if (cmm.isTypeUid(uid)) {\n      // Remove meta data from the cache\n      delete _uid2modelObject[uid];\n    } else if (_noFlushableTypes.indexOf(modelObject.type) === -1 && !modelObject.reference) {\n      modelObject.props = {};\n    }\n  });\n}, 'soa_kernel_clientDataModel');\nexports = {\n  getCache,\n  setCache,\n  containsObject,\n  getObject,\n  getObjects,\n  removeObjects,\n  cacheObjects,\n  getUserSession,\n  getGroupMember,\n  getUser,\n  htmlEscapeAllowEntities,\n  sanitizeHtmlValues,\n  sanitizeHtmlValue,\n  getObjectsOfType,\n  isValidObjectUid,\n  isModelObject,\n  NULL_UID\n};\nexport default exports;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModelObject\");\n$RefreshReg$(_c2, \"Property\");","map":{"version":3,"names":["cmm","dateTimeSvc","sanitizer","_","eventBus","UTC_DATE_TIME_MARKER","_NULL_UID","_uid2modelObject","_noFlushableTypes","_userUID","_userSessionUID","_groupMemberUID","ModelObject","modelObjectSOA","props","type","uid","modelType","getType","_updateProps","prototype","toString","object_string","uiValues","JSON","stringify","getPropertyNames","keys","addReference","reference","removeReference","Property","propSOA","propertyDescriptor","_conditionSoaPropValue","propToUpdate","dbValues","isNulls","modifiable","ndx","length","valueType","forEach","dbValue","dbNdx","jqDate","Date","constantsMap","timeEnabled","formatSessionDateTime","formatSessionDate","name","sanitizeHtmlValues","_convertUTCTimeValues","getDisplayValue","evaluateIsNull","values","iNdx","value","markerNdx","indexOf","prefix","substring","utc","date","propName","propertyDescriptorsMap","exports","getCache","setCache","cache","forOwn","key","containsObject","hasOwnProperty","getObject","getObjects","uids","objects","push","removeObjects","deletedUIDs","deletedUID","publish","deletedObjectUids","setUserSession","userSession","user","fnd0groupmember","cacheObjects","modelObjects","newObjects","modifiedObjects","modelObject","existing","isEmpty","changedExisting","soaPropValue","soaPropName","existingProp","subPropValue","subPropName","existingSubPropValue","isEqual","getUserSession","getGroupMember","getUser","htmlEscapeAllowEntities","sanitizeHtmlValue","rawValue","getObjectsOfType","typeName","objs","isValidObjectUid","isModelObject","objectToTest","NULL_UID","subscribe","isTypeUid"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/kernel/clientDataModel.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * The methods provided by this module enable access, control and maintenance of a cache of ModelObjects as well as\n * their member PropertyObjects.\n *\n * @module soa/kernel/clientDataModel\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport sanitizer from 'js/sanitizer';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport 'js/localeService';\n\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specfici format.\n *\n * @private\n */\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n\n/**\n * UID to indicate the identity of an object is 'unknown'.\n */\nvar _NULL_UID = 'AAAAAAAAAAAAAA';\n\n/**\n * A reference to service.\n */\n\n/**\n * A reference to sanitizer.\n */\n\n/**\n * Note: We are holding on to the resolved module now for when we are running NodeJS. However, this variable will be\n * set again when this service is created using AngularJS injection. The reason is that the 'dateTimeService' needs\n * some other AngularJS services injected to do all its work. It will use fallback values when running in NodeJS.\n *\n * @private\n */\n\n/**\n * Object used to implement a UID-to-ModelObject cache map.\n *\n * @private\n */\nvar _uid2modelObject = {};\n\n/**\n * The array of none flushable object types.\n *\n * @private\n */\nvar _noFlushableTypes = [\n    'Awb0ProductContextInfo',\n    'Awp0GatewayTileRel',\n    'Awp0Tile',\n    'Fnd0ClientScope',\n    'Fnd0Command',\n    'Fnd0CommandCollection',\n    'Fnd0ConditionHelper',\n    'Fnd0HomeFolder',\n    'Fnd0Icon',\n    'Fnd0UIConfigCollectionRel',\n    'Group',\n    'GroupMember',\n    'ImanVolume',\n    'POM_imc',\n    'Role',\n    'User',\n    'UserSession'\n];\n\n/**\n * UID of the current 'User' ModelObject.\n *\n * @private\n */\nvar _userUID = '';\n\n/**\n * UID of the current 'Session' ModelObject.\n *\n * @private\n */\nvar _userSessionUID = '';\n\n/**\n * UID of the current user's 'Group' ModelObject.\n *\n * @private\n */\nvar _groupMemberUID = '';\n\n/**\n * @param {Object} modelObjectSOA - model object returned from SOA\n */\nfunction ModelObject( modelObjectSOA ) {\n    this.props = modelObjectSOA.props || {};\n    this.type = modelObjectSOA.type;\n    this.uid = modelObjectSOA.uid;\n\n    // add meta model link\n    this.modelType = cmm.getType( modelObjectSOA.type );\n\n    _updateProps( this.props, this.modelType );\n}\n\n/**\n * This method is set on (augments) all {ModelObject} instance returned by SOA so that it is available for general\n * application use.\n *\n * @return {String} Text value that represents a common way to identify the function's context object (i.e. The\n *         'object_string' property) or the JSON 'stringify' version of the content object if the specific common\n *         property if not defined.\n */\nModelObject.prototype.toString = function() {\n    if( this.props && this.props.object_string ) {\n        return this.props.object_string.uiValues[ 0 ];\n    }\n    return JSON.stringify( this, null, 2 );\n};\n\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String[]} the name of all property's display value. If this property has multiple values, this method\n *         will return the first display value.\n */\nModelObject.prototype.getPropertyNames = function() {\n    return _.keys( this.props );\n};\n\n/**\n * Add reference count for model object.\n */\nModelObject.prototype.addReference = function() {\n    if( !this.reference ) {\n        this.reference = 0;\n    }\n    this.reference++;\n};\n\n/**\n * Remove reference count from model object.\n */\nModelObject.prototype.removeReference = function() {\n    this.reference--;\n    if( this.reference < 1 ) {\n        delete this.reference;\n    }\n};\n\n/**\n * @param {Object} propSOA - property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - property descriptor\n */\nfunction Property( propSOA, propertyDescriptor ) {\n    _conditionSoaPropValue( propSOA, propertyDescriptor, this );\n\n    this.propertyDescriptor = propertyDescriptor;\n}\n\n/**\n * Apply some common data value transformations on the 'propToUpdate' based on the values in the 'propSOA'.\n *\n * @param {Object} propSOA - Property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - Property descriptor.\n * @param {Object} propToUpdate - Property object to be updated.\n */\nfunction _conditionSoaPropValue( propSOA, propertyDescriptor, propToUpdate ) {\n    propToUpdate.dbValues = propSOA.dbValues || [];\n    propToUpdate.isNulls = propSOA.isNulls;\n    propToUpdate.modifiable = propSOA.modifiable;\n    propToUpdate.uiValues = propSOA.uiValues || [];\n\n    /**\n     * Assure certain properties are never 'null' or 'undefined'\n     */\n    if( propSOA.isNulls ) {\n        /**\n         * We want to make sure the 'dbValues' match the SOA supplied definition of 'null'.\n         */\n        for( var ndx = propSOA.isNulls.length - 1; ndx >= 0; ndx-- ) {\n            if( propSOA.isNulls[ ndx ] && propToUpdate.dbValues.length > ndx ) {\n                propToUpdate.dbValues[ ndx ] = null;\n            }\n        }\n    }\n\n    /**\n     * Perform some type specific post processing of the property values.\n     */\n    switch ( propertyDescriptor.valueType ) {\n        case 2: // Date\n            /**\n             * Date processing...Reformat UI value based upon DB value.\n             * <P>\n             * Note: This also makes the UI value be for the local time zone instead of the server's time zone.\n             */\n            // Only set if server gave the client a non-empty UI values array\n            if( propSOA.uiValues && propSOA.uiValues.length > 0 && propSOA.uiValues[ 0 ] ) {\n                // Only attempt if we have a DB value...\n                if( propSOA.dbValues.length > 0 ) {\n                    _.forEach( propSOA.dbValues, function( dbValue, dbNdx ) {\n                        var jqDate = new Date( dbValue );\n\n                        if( propertyDescriptor.constantsMap && propertyDescriptor.constantsMap.timeEnabled === '1' ) {\n                            propToUpdate.uiValues[ dbNdx ] = dateTimeSvc.formatSessionDateTime( jqDate );\n                        } else {\n                            propToUpdate.uiValues[ dbNdx ] = dateTimeSvc.formatSessionDate( jqDate );\n                        }\n                    } );\n                } else {\n                    propToUpdate.uiValues[ 0 ] = '';\n                }\n            }\n            break;\n        case 8: // String\n            if( propertyDescriptor.name !== 'fnd0SVG' ) {\n                // Sanitize the String DB values\n                propToUpdate.dbValues = sanitizer.sanitizeHtmlValues( propToUpdate.dbValues );\n                // Sanitize the String UI values\n                propToUpdate.uiValues = sanitizer.sanitizeHtmlValues( propToUpdate.uiValues );\n            }\n\n            if( propertyDescriptor.name === 'awp0CellProperties' ) {\n                propToUpdate.dbValues = _convertUTCTimeValues( propToUpdate.dbValues );\n                propToUpdate.uiValues = _convertUTCTimeValues( propToUpdate.uiValues );\n            }\n            break;\n    }\n}\n\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String} Gets the property's display value. If this property has multiple values, this method will return\n *         the first display value.\n */\nProperty.prototype.getDisplayValue = function() {\n    if( this.uiValues && this.uiValues.length > 0 ) {\n        return this.uiValues[ 0 ];\n    }\n    return '';\n};\n\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {Boolean} TRUE if ALL the internal values (aka 'dbValues') of the function's context object are to be\n *         considered 'null' or 'unset'.\n *         <P>\n *         If the 'isNulls' array is present, all its values will be used to determine the result. If any are\n *         'false' this function will return 'false' (i.e. property is NOT null).\n *         <P>\n *         If 'isNulls' is not present, we assume the 'dbValues' are NOT null.\n *         <P>\n *         Note: The intrinsic data types (boolean, int, double) can have a value (i.e. 'false' or 'zero') but still\n *         be 'unset'. In this case, the SOA server will send back an optional array of booleans named 'isNulls',\n *         the 'true/false' values in this array indicate while elements in the 'dbValues' array should be\n *         considered 'unset'.\n */\nProperty.prototype.evaluateIsNull = function() {\n    /**\n     * Check if the server told us this context object (property) dbValue was to be considered 'null' or 'unset'.\n     */\n    if( this.isNulls ) {\n        for( var ndx = 0; ndx < this.isNulls.length; ndx++ ) {\n            if( !this.isNulls[ ndx ] ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param {String[]} values - Array of values to consider.\n * @return {String[]} Array if values after replacement of any strings.\n */\nvar _convertUTCTimeValues = function( values ) {\n    for( var iNdx = 0; iNdx < values.length; iNdx++ ) {\n        var value = values[ iNdx ];\n\n        var markerNdx = value ? value.indexOf( UTC_DATE_TIME_MARKER ) : -1;\n\n        if( markerNdx !== -1 ) {\n            var prefix = value.substring( 0, markerNdx );\n            var utc = value.substring( markerNdx + UTC_DATE_TIME_MARKER.length );\n\n            var date = new Date( utc );\n\n            values[ iNdx ] = prefix + dateTimeSvc.formatSessionDateTime( date );\n        }\n    }\n\n    return values;\n};\n\n/**\n * Update properties. This includes adding references to meta model & dealing with date conversions.\n *\n * @param {Object} props - model object properties\n * @param {ModelType} modelType - model type from meta model\n */\nvar _updateProps = function( props, modelType ) {\n    // Maybe change this to for loop later\n    _.forEach( props, function( value, propName ) {\n        props[ propName ] = new Property( value, modelType.propertyDescriptorsMap[ propName ] );\n    } );\n};\n\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\nvar exports = {};\n\n/**\n * Get the cache.\n *\n * @returns {Object} map of UID to model object\n */\nexport let getCache = function() {\n    return _uid2modelObject;\n};\n\n/**\n * Set the cache\n *\n * @param {Object} cache - map of UID to model object\n */\nexport let setCache = function( cache ) {\n    _.forOwn( cache, function( value, key ) {\n        _uid2modelObject[ key ] = cache[ key ];\n    } );\n};\n\n/**\n * @param {String} uid - UID of ModelObject to test for.\n * @return {boolean} TRUE if client data model contains the given ModelObject\n */\nexport let containsObject = function( uid ) {\n    return _uid2modelObject.hasOwnProperty( uid );\n};\n\n/**\n * Get model object.\n *\n * @param {String} uid - UID of ModelObject\n * @return {ModelObject} The ModelObject; null if not cached\n */\nexport let getObject = function( uid ) {\n    if( exports.containsObject( uid ) ) {\n        return _uid2modelObject[ uid ];\n    }\n    return null;\n};\n\n/**\n * Get model objects.\n *\n * @param {String[]} uids - array of ModelObject UIDs\n * @return {ModelObject} The ModelObject; null if not cached\n */\nexport let getObjects = function( uids ) {\n    var objects = [];\n    _.forEach( uids, function( uid ) {\n        objects.push( exports.getObject( uid ) );\n    } );\n    return objects;\n};\n\n/**\n * Remove the ModelObject from the cache that have the given UIDs. Publishes the UIDs to the 'soajs/cdm.deleted'\n * eventBus channel/topic.\n *\n * @param {String[]} deletedUIDs - Array of UIDs to be removed from the cache.\n */\nexport let removeObjects = function( deletedUIDs ) {\n    var uids = [];\n    _.forEach( deletedUIDs, function( deletedUID ) {\n        if( exports.containsObject( deletedUID ) ) {\n            delete _uid2modelObject[ deletedUID ];\n            uids.push( deletedUID );\n        }\n    } );\n\n    if( uids.length > 0 ) {\n        eventBus.publish( 'cdm.deleted', {\n            deletedObjectUids: uids\n        } );\n    }\n};\n\n/**\n * @param {ModelObject} userSession - user session\n */\nvar setUserSession = function( userSession ) {\n    _userSessionUID = userSession.uid;\n\n    // For refresh scenario, signin isn't call & these 2 fields need to be set.\n    if( userSession.props ) {\n        if( userSession.props.user ) {\n            _userUID = userSession.props.user.dbValues[ 0 ];\n        }\n        if( userSession.props.fnd0groupmember ) {\n            _groupMemberUID = userSession.props.fnd0groupmember.dbValues[ 0 ];\n        }\n    }\n};\n\n/**\n * Add or replace the given ModelObjects to the cache. Publishes the modelObjects to the 'soajs/cdm.modified'\n * eventBus channel/topic.\n *\n * @param {ModelObject[]} modelObjects - Array of 'wire' ModelObject to be added to the cache.\n */\nexport let cacheObjects = function( modelObjects ) {\n    var newObjects = [];\n    var modifiedObjects = [];\n\n    _.forEach( modelObjects, function( modelObject ) {\n        var existing = exports.containsObject( modelObject.uid ) && exports.getObject( modelObject.uid );\n\n        if( !existing || existing.type !== modelObject.type ) {\n            modelObject = new ModelObject( modelObject );\n\n            // Add model object to cache\n            _uid2modelObject[ modelObject.uid ] = modelObject;\n\n            newObjects.push( modelObject );\n        } else if( !_.isEmpty( modelObject.props ) ) {\n            /**\n             * Special Case: Check if existing is empty\n             */\n            if( _.isEmpty( existing.props ) ) {\n                existing.props = modelObject.props;\n\n                _updateProps( existing.props, existing.modelType );\n\n                /**\n                 * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n                 * want to double report these.\n                 */\n                if( newObjects.indexOf( existing ) === -1 && modifiedObjects.indexOf( existing ) === -1 ) {\n                    modifiedObjects.push( existing );\n                }\n            } else {\n                /**\n                 * Foreach of the incoming 'props'\n                 */\n                var propertyDescriptorsMap = existing.modelType.propertyDescriptorsMap;\n\n                var changedExisting = false;\n\n                _.forEach( modelObject.props, function( soaPropValue, soaPropName ) {\n                    var propertyDescriptor = propertyDescriptorsMap[ soaPropName ];\n                    var existingProp = existing.props[ soaPropName ];\n\n                    if( !existingProp ) {\n                        existing.props[ soaPropName ] = new Property( soaPropValue, propertyDescriptor );\n                        changedExisting = true;\n                    } else {\n                        _conditionSoaPropValue( soaPropValue, propertyDescriptor, soaPropValue );\n\n                        _.forEach( soaPropValue, function( subPropValue, subPropName ) {\n                            var existingSubPropValue = existingProp[ subPropName ];\n\n                            if( !_.isEqual( subPropValue, existingSubPropValue ) ) {\n                                existing.props[ soaPropName ] = new Property( soaPropValue, propertyDescriptor );\n                                changedExisting = true;\n                                return false;\n                            }\n                        } );\n                    }\n                } );\n\n                if( changedExisting ) {\n                    /**\n                     * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n                     * want to double report these.\n                     */\n                    if( newObjects.indexOf( existing ) === -1 && modifiedObjects.indexOf( existing ) === -1 ) {\n                        modifiedObjects.push( existing );\n                    }\n                }\n            }\n        }\n\n        // Set the cache of the UserSession object\n        if( modelObject.type === 'UserSession' ) {\n            setUserSession( modelObject );\n        }\n    } );\n\n    if( newObjects.length > 0 ) {\n        eventBus.publish( 'cdm.new', {\n            newObjects: newObjects\n        } );\n    }\n\n    if( modifiedObjects.length > 0 ) {\n        eventBus.publish( 'cdm.modified', {\n            modifiedObjects: modifiedObjects\n        } );\n    }\n};\n\n/**\n * @return {ModelObject} The ModelObject of the current user 'Session'.\n */\nexport let getUserSession = function() {\n    return exports.getObject( _userSessionUID );\n};\n\n/**\n * @return {ModelObject} The ModelObject of the current user's 'Group'.\n */\nexport let getGroupMember = function() {\n    return exports.getObject( _groupMemberUID );\n};\n\n/**\n * @return {ModelObject} The ModelObject of the current 'User'.\n */\nexport let getUser = function() {\n    return exports.getObject( _userUID );\n};\n\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} value - HTML String which needs to be escaped.\n * @return {String} Returns escaped and safe HTML.\n */\nexport let htmlEscapeAllowEntities = function( value ) {\n    return sanitizer.htmlEscapeAllowEntities( value );\n};\n\n/**\n * Simple and inexpensive HTML Sanitizer which accepts the subset of TAG_WHITELIST array of HTML white list tags.\n *\n * @param {String[]} values - Array of HTML Strings which needs to be sanitized.\n * @return {String[]} Returns sanitized HTML string array.\n */\nexport let sanitizeHtmlValues = function( values ) {\n    return sanitizer.sanitizeHtmlValues( values );\n};\n\n/**\n * Simple and inexpensive HTML Sanitizer which detects and/or eliniates HTML that can cause potential cross-site\n * scripting and other UI issues.\n *\n * @param {String} rawValue - HTML String which needs to be sanitized.\n * @return {String} Returns sanitized HTML or Invalid HTML string when there is malicious string.\n */\nexport let sanitizeHtmlValue = function( rawValue ) {\n    return sanitizer.sanitizeHtmlValue( rawValue );\n};\n\n/**\n * Return an array of all IModelObjects currently in the cache that match the given model type.\n *\n * @param {String} typeName - Name of the model type to search for.\n * @return {ModelObject[]} An array of all IModelObjects currently in the cache that match the given model type.\n */\nexport let getObjectsOfType = function( typeName ) {\n    var objs = [];\n    _.forEach( _uid2modelObject, function( modelObject ) {\n        if( modelObject.type && modelObject.type === typeName ) {\n            objs.push( modelObject );\n        }\n    } );\n    return objs;\n};\n\n/**\n * @param {String} uid - UID to test\n * @return {Boolean} TRUE if the given UID is NOT null and does NOT match the patterns used to indicate 'no object'.\n */\nexport let isValidObjectUid = function( uid ) {\n    return !_.isEmpty( uid ) && !_.isEqual( uid, _NULL_UID );\n};\n\n/**\n * Determine if the given object is a ModelObject constructed by this service.\n *\n * @param {Object} objectToTest - The object to test.\n *\n * @returns {Boolean} TRUE if input object is an instance of an CDM ModelObject.\n */\nexport let isModelObject = function( objectToTest ) {\n    return objectToTest instanceof ModelObject;\n};\n\n/**\n * {String} Module constant UID used to indicate the identity of an object is 'unknown'.\n */\nexport let NULL_UID = _NULL_UID;\n\n/**\n * ------------------------------------------------<BR>\n * Definition complete...Now do some initialization<BR>\n * ------------------------------------------------<BR>\n */\neventBus.subscribe( 'cdm.cleanCache', function() {\n    // collect the flushable objects, keep the escaped objects in cache\n    _.forEach( _uid2modelObject, function( modelObject, uid ) {\n        if( !modelObject.type ) {\n            return;\n        }\n\n        if( cmm.isTypeUid( uid ) ) {\n            // Remove meta data from the cache\n            delete _uid2modelObject[ uid ];\n        } else if( _noFlushableTypes.indexOf( modelObject.type ) === -1 && !modelObject.reference ) {\n            modelObject.props = {};\n        }\n    } );\n}, 'soa_kernel_clientDataModel' );\n\nexports = {\n    getCache,\n    setCache,\n    containsObject,\n    getObject,\n    getObjects,\n    removeObjects,\n    cacheObjects,\n    getUserSession,\n    getGroupMember,\n    getUser,\n    htmlEscapeAllowEntities,\n    sanitizeHtmlValues,\n    sanitizeHtmlValue,\n    getObjectsOfType,\n    isValidObjectUid,\n    isModelObject,\n    NULL_UID\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _ from'lodash';import appCtxService from'js/appCtxService';import eventBus from'js/eventBus';import AwStateService from'js/awStateService';import selectionService from'js/selection.service';import propertyPolicyService from'soa/kernel/propertyPolicyService';import{DerivedStateResult}from'js/derivedContextService';const SUBLOCATION_CONSTANTS={sublocation:'sublocation',taiCmd:'activeToolsAndInfoCommand',navCmd:'activeNavigationCommand',sidenavCmd:'sidenavCommandId'};const registerSubLocationContext=provider=>{var contextConstants={location:'locationContext',sublocationInLocation:'ActiveWorkspace:SubLocation',...SUBLOCATION_CONSTANTS};// Update the location context\nvar locationContext=appCtxService.getCtx(contextConstants.location)||{};locationContext[contextConstants.sublocationInLocation]=provider&&provider.name.replace(/_/g,'.');appCtxService.registerCtx(contextConstants.location,locationContext);// Update the sublocation context\nvar initialContext={clientScopeURI:provider.clientScopeURI,historyNameToken:provider.name,label:provider.label,nameToken:provider.nameToken};appCtxService.registerCtx(contextConstants.sublocation,initialContext);appCtxService.registerCtx('sublocationTitleErrorMessage',null);};/**\n * Register any predefined context that is in the state data\n */const registerStateContext=provider=>{if(provider.context){const stateContexts=Object.keys(provider.context);// Register the state contexts\nstateContexts.forEach(function(key){const newContext=provider.context[key];const existingContext=appCtxService.getCtx(key);if(!(newContext instanceof Array)&&typeof newContext!=='string'&&existingContext){appCtxService.registerCtx(key,{...existingContext,..._.cloneDeep(newContext)});}else{appCtxService.registerCtx(key,_.cloneDeep(newContext));}});return stateContexts;}return null;};export const handleCompleteEvent=eventData=>{let id=eventData.id;let commandId=appCtxService.getCtx('sidenavCommandId');if(eventData.source==='toolAndInfoPanel'){var toolsAndInfoCommand=appCtxService.getCtx('activeToolsAndInfoCommand');if(toolsAndInfoCommand){id='aw_toolsAndInfo';commandId=toolsAndInfoCommand.commandId;}appCtxService.unRegisterCtx('activeToolsAndInfoCommand');}else if(eventData.source==='navigationPanel'){var navigationCommand=appCtxService.getCtx('activeNavigationCommand');if(navigationCommand){id='aw_navigation';commandId=navigationCommand.commandId;}appCtxService.unRegisterCtx('activeNavigationCommand');}if(commandId){eventBus.publish('awsidenav.openClose',{id:id,commandId:commandId});}};export const updateBaseSelection=function(baseSelection,parentSelectionData){let selectionQueryParamKey=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'s_uid';if(baseSelection&&!AwStateService.instance.params[selectionQueryParamKey]){selectionService.updateSelection([baseSelection],baseSelection);parentSelectionData&&parentSelectionData.update({selected:[baseSelection],pselected:baseSelection,source:'base'});}};export const initializePage=async(provider,baseSelection)=>{if(!provider){provider=AwStateService.instance.current.data?AwStateService.instance.current.data:{};}provider.name=provider.name?provider.name:AwStateService.instance.current.name;provider.parentStateName=provider.parentStateName?provider.parentStateName:AwStateService.instance.current.parent;registerSubLocationContext(provider);const stateContext=registerStateContext(provider);//set base selection\nselectionService.updateSelection(baseSelection?[baseSelection]:undefined,baseSelection);const propertyPolicyId=provider.policy&&(await propertyPolicyService.registerPolicyAsync(provider.policy));return{subLocationPreference:provider.awSubLocationPref||provider.context||{},stateContext,propertyPolicyId};};export const cleanupPage=(stateContext,propertyPolicyId)=>{if(stateContext&&stateContext.length>0){stateContext.forEach(appCtxService.unRegisterCtx);}Object.keys(SUBLOCATION_CONSTANTS).forEach(appCtxService.unRegisterCtx);//clear selectiona\nselectionService.updateSelection(undefined,undefined);propertyPolicyService.unregister(propertyPolicyId);};export const getContext=(vmDef,props)=>{return[new DerivedStateResult({ctxParameters:[],additionalParameters:[props.provider,props.subPanelContext],compute:()=>{return{provider:props.provider,...props.subPanelContext};}})];};","map":null,"metadata":{},"sourceType":"module"}
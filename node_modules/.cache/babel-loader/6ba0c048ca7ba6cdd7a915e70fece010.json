{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwLinkService.js\";\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\n\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport { registerDynImportEntry, includeComponent } from 'js/moduleLoader';\nimport { executeCommand } from 'js/command.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterDynImportEntry('viewmodel/AwLinkPopupMenuViewModel', () => import('viewmodel/AwLinkPopupMenuViewModel'));\n/**\n * 'both' show both icon and text\n * 'iconOnly' only show icon\n * 'textOnly' only show text\n */\n\nconst _defaultIconOptions = {\n  enabled: true,\n  title: 'textOnly',\n  cell: 'textOnly',\n  arrow: true\n};\n\nconst processIconOptions = iconOptions => {\n  let res = {\n    showLinkText: true,\n    showCellText: true,\n    arrow: true\n  };\n  let result = { ..._defaultIconOptions\n  };\n  iconOptions && Object.assign(result, iconOptions);\n  const {\n    enabled,\n    title,\n    cell\n  } = result;\n\n  if (enabled) {\n    res.showLinkIcon = ['both', 'iconOnly'].indexOf(title) > -1;\n    res.showLinkText = ['both', 'textOnly'].indexOf(title) > -1;\n    res.showCellIcon = ['both', 'iconOnly'].indexOf(cell) > -1;\n    res.showCellText = ['both', 'textOnly'].indexOf(cell) > -1;\n    res.arrow = result.arrow;\n  }\n\n  return res;\n};\n\nconst initializeDataProvider = (dataProvider, data, dispatch, initialValue) => {\n  if (!dataProvider) {\n    return;\n  }\n\n  if (!data._dpInitialized) {\n    dataProvider.resetDataProvider();\n    dispatch({\n      path: 'data._dpInitialized',\n      value: true\n    }); // Support pre-selection if defined and valid\n\n    if (initialValue) {\n      dataProvider.selectionModel.setSelection(initialValue);\n    }\n  }\n};\n\nconst updateCallback = dispatch => value => {\n  dispatch({\n    path: 'data._title',\n    value\n  });\n};\n\nexport const awLinkRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    dataprovider: dataProvider,\n    runActionWithViewModel,\n    ...prop\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  const {\n    id,\n    ellipsis,\n    fielddata,\n    linkOptions,\n    displayProperty,\n    selectedprop,\n    commandId\n  } = prop;\n  const {\n    hasPopup,\n    popupOptions,\n    view,\n    content,\n    iconOptions\n  } = linkOptions || {};\n  let {\n    linkPopup\n  } = actions;\n  let disabled = !props.fielddata.isEnabled;\n  const hooks = {\n    whenOpened: () => initializeDataProvider(dataProvider, data, dispatch, prop.value)\n  };\n\n  const handleClick = event => {\n    if (disabled || event.key && event.key !== 'Enter' && event.key !== ' ') {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (hasPopup) {\n      // enable application to override popupOptions\n      if (popupOptions && popupOptions.hooks && popupOptions.hooks.whenOpened) {\n        popupOptions.hooks.whenOpened.push(hooks.whenOpened);\n      }\n\n      let finalPopupOptions = { ...popupOptions\n      };\n\n      if (finalPopupOptions === undefined) {\n        finalPopupOptions = {};\n      }\n\n      if (finalPopupOptions.selectedElementCSS === undefined) {\n        finalPopupOptions.selectedElementCSS = '.aw-widgets-cellListItemSelected';\n        finalPopupOptions.className = 'sw-lov-popup';\n      }\n\n      linkPopup.show({\n        hooks,\n        ...finalPopupOptions\n      });\n    } else if (commandId) {\n      executeCommand(commandId, null, props, prop, runActionWithViewModel);\n    } else if (prop.action) {\n      prop.action();\n    }\n  };\n\n  const propKey = fielddata.uiValue ? 'uiValue' : 'propertyDisplayName';\n  const title = data._title || fielddata[propKey]; // conditional tab navigable\n\n  const tabIndex = disabled ? '-1' : '0';\n  const clz = `${ellipsis ? 'ellipsis' : ''} ${disabled ? 'disabled' : ''}`; // if ellipsis defined, make sure link take the full width so the ellipsis will take effect\n\n  const width = ellipsis ? 'w-12' : ''; // simple link\n\n  if (!hasPopup) {\n    //We really ought not to use <a></a> tag for button behavior\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: prop.style,\n      className: `aw-link ${width} ${clz}`,\n      \"link-id\": id,\n      \"data-id\": id,\n      \"data-locator\": id,\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        \"aria-label\": title,\n        className: 'sw-aria-border',\n        onClick: handleClick,\n        onKeyDown: handleClick,\n        title: title,\n        tabIndex: tabIndex,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this);\n  } // link with popup\n\n\n  const options = processIconOptions(iconOptions);\n  const IncludedView = view || 'AwLinkPopupMenu'; // AwLinkPopupMenu is the default view\n\n  const childProps = {\n    linkProp: prop,\n    dataProvider,\n    propKey,\n    options,\n    linkPopup,\n    displayProperty,\n    updateCallback: updateCallback(dispatch)\n  };\n\n  const getContent = () => {\n    // use transclude content first\n    let result = content;\n\n    if (!content) {\n      result = includeComponent(IncludedView, childProps);\n    }\n\n    return result;\n  };\n\n  const finalPopupOptions = { ...linkPopup.options,\n    ...popupOptions\n  }; // We really ought not to use <a></a> tag for button behavior\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: width,\n    style: prop.style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-locator\": id || prop.linkPopupMenuId,\n      ref: linkPopup.reference,\n      role: \"button\",\n      tabIndex: tabIndex,\n      className: `sw-aria-border aw-link aw-link-with-popup ${clz}`,\n      onClick: handleClick,\n      onKeyDown: handleClick,\n      children: [options.showLinkIcon && fielddata.iconName && /*#__PURE__*/_jsxDEV(AwIcon, {\n        iconId: fielddata.iconName,\n        className: `aw-base-icon aw-linkIcon ${!options.showLinkText ? 'aw-linkIconOnly' : ''}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 64\n      }, this), options.showLinkText && /*#__PURE__*/_jsxDEV(\"a\", {\n        title: title,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 42\n      }, this), options.arrow && /*#__PURE__*/_jsxDEV(AwIcon, {\n        className: \"aw-base-icon aw-link-arrow\",\n        iconId: \"miscDownArrow_uxRefresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), linkPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...finalPopupOptions,\n      children: getContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwLinkService.js"],"names":["registerDynImportEntry","_defaultIconOptions","enabled","title","cell","arrow","processIconOptions","iconOptions","res","showLinkText","showCellText","result","Object","initializeDataProvider","data","dataProvider","dispatch","path","value","updateCallback","awLinkRenderFunction","props","dataprovider","prop","commandId","linkOptions","linkPopup","disabled","hooks","whenOpened","handleClick","event","popupOptions","finalPopupOptions","executeCommand","propKey","fielddata","tabIndex","clz","ellipsis","width","options","IncludedView","view","childProps","linkProp","getContent","includeComponent","id"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport { registerDynImportEntry, includeComponent } from 'js/moduleLoader';\nimport { executeCommand } from 'js/command.service';\nregisterDynImportEntry( 'viewmodel/AwLinkPopupMenuViewModel', () => import( 'viewmodel/AwLinkPopupMenuViewModel' ) );\n\n\n/**\n * 'both' show both icon and text\n * 'iconOnly' only show icon\n * 'textOnly' only show text\n */\nconst _defaultIconOptions = {\n    enabled: true,\n    title: 'textOnly',\n    cell: 'textOnly',\n    arrow: true\n};\n\nconst processIconOptions = ( iconOptions ) => {\n    let res = { showLinkText: true, showCellText: true, arrow: true };\n    let result = { ..._defaultIconOptions };\n    iconOptions && Object.assign( result, iconOptions );\n    const { enabled, title, cell } = result;\n    if( enabled ) {\n        res.showLinkIcon = [ 'both', 'iconOnly' ].indexOf( title ) > -1;\n        res.showLinkText = [ 'both', 'textOnly' ].indexOf( title ) > -1;\n        res.showCellIcon = [ 'both', 'iconOnly' ].indexOf( cell ) > -1;\n        res.showCellText = [ 'both', 'textOnly' ].indexOf( cell ) > -1;\n        res.arrow = result.arrow;\n    }\n    return res;\n};\n\nconst initializeDataProvider = ( dataProvider, data, dispatch, initialValue ) => {\n    if( !dataProvider ) { return; }\n    if( !data._dpInitialized ) {\n        dataProvider.resetDataProvider();\n        dispatch( { path: 'data._dpInitialized', value: true } );\n\n        // Support pre-selection if defined and valid\n        if( initialValue ) {\n            dataProvider.selectionModel.setSelection( initialValue );\n        }\n    }\n};\n\nconst updateCallback = dispatch => value => {\n    dispatch( { path: 'data._title', value } );\n};\n\nexport const awLinkRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        dataprovider: dataProvider,\n        runActionWithViewModel,\n        ...prop\n    } = props;\n    const { data, dispatch } = viewModel;\n\n    const {\n        id,\n        ellipsis,\n        fielddata,\n        linkOptions,\n        displayProperty,\n        selectedprop,\n        commandId\n    } = prop;\n    const {\n        hasPopup,\n        popupOptions,\n        view,\n        content,\n        iconOptions\n    } = linkOptions || {};\n    let { linkPopup } = actions;\n    let disabled = !props.fielddata.isEnabled;\n    const hooks = { whenOpened: () => initializeDataProvider( dataProvider, data, dispatch, prop.value ) };\n    const handleClick = ( event ) => {\n        if( disabled || event.key && ( event.key !== 'Enter' && event.key !== ' ' ) ) { return; }\n        event.preventDefault();\n        if( hasPopup ) {\n            // enable application to override popupOptions\n            if( popupOptions && popupOptions.hooks && popupOptions.hooks.whenOpened ) {\n                popupOptions.hooks.whenOpened.push( hooks.whenOpened );\n            }\n            let finalPopupOptions = { ...popupOptions };\n            if( finalPopupOptions === undefined ) {\n                finalPopupOptions = {};\n            }\n            if( finalPopupOptions.selectedElementCSS === undefined ) {\n                finalPopupOptions.selectedElementCSS = '.aw-widgets-cellListItemSelected';\n                finalPopupOptions.className = 'sw-lov-popup';\n            }\n\n            linkPopup.show( { hooks, ...finalPopupOptions } );\n        } else if( commandId ) {\n            executeCommand( commandId, null, props, prop, runActionWithViewModel );\n        } else if( prop.action )  {\n            prop.action();\n        }\n    };\n\n    const propKey = fielddata.uiValue ? 'uiValue' : 'propertyDisplayName';\n    const title = data._title || fielddata[ propKey ];\n    // conditional tab navigable\n    const tabIndex = disabled ? '-1' : '0';\n    const clz = `${ellipsis ? 'ellipsis' : ''} ${disabled ? 'disabled' : ''}`;\n    // if ellipsis defined, make sure link take the full width so the ellipsis will take effect\n    const width = ellipsis ? 'w-12' : '';\n\n    // simple link\n    if( !hasPopup ) {\n        //We really ought not to use <a></a> tag for button behavior\n        return (\n            <div style={prop.style} className={`aw-link ${width} ${clz}`}\n                link-id={id}\n                data-id={id}\n                data-locator={id}\n            >\n                <a aria-label={title}\n                    className={'sw-aria-border'}\n                    onClick={handleClick}\n                    onKeyDown={handleClick}\n                    title={title}\n                    tabIndex={tabIndex}\n                >{title}</a>\n            </div>\n        );\n    }\n\n    // link with popup\n    const options = processIconOptions( iconOptions );\n    const IncludedView = view || 'AwLinkPopupMenu'; // AwLinkPopupMenu is the default view\n    const childProps = {\n        linkProp: prop,\n        dataProvider,\n        propKey,\n        options,\n        linkPopup,\n        displayProperty,\n        updateCallback: updateCallback( dispatch )\n    };\n\n    const getContent = () => {\n        // use transclude content first\n        let result = content;\n        if( !content ) {\n            result = includeComponent( IncludedView, childProps );\n        }\n        return result;\n    };\n\n    const finalPopupOptions = { ...linkPopup.options, ...popupOptions };\n\n    // We really ought not to use <a></a> tag for button behavior\n    return (\n        <div className={width} style={prop.style}>\n            <div\n                data-locator={id || prop.linkPopupMenuId}\n                ref={linkPopup.reference}\n                role='button'\n                tabIndex={tabIndex}\n                className={`sw-aria-border aw-link aw-link-with-popup ${clz}`}\n                onClick={handleClick}\n                onKeyDown={handleClick}\n            >\n                {options.showLinkIcon && fielddata.iconName && <AwIcon iconId={fielddata.iconName}\n                    className={`aw-base-icon aw-linkIcon ${!options.showLinkText ? 'aw-linkIconOnly' : ''}`}>\n                </AwIcon>}\n\n                {options.showLinkText && <a title={title}>{title}</a>}\n\n                {options.arrow && <AwIcon className='aw-base-icon aw-link-arrow'\n                    iconId='miscDownArrow_uxRefresh'></AwIcon>}\n            </div>\n            {linkPopup.open && <AwPopup {...finalPopupOptions}>\n                { getContent() }\n            </AwPopup>}\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
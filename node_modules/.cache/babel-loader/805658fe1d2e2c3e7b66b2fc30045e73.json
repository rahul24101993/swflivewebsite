{"ast":null,"code":"import _ from 'lodash';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport appCtxService from 'js/appCtxService';\nimport AwStateService from 'js/awStateService';\nimport Debug from 'debug';\nimport selectionService from 'js/selection.service';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { getEvaluatedId } from 'js/uwUtilService';\nconst trace = new Debug('selection');\n\nconst updateSearchContext = provider => {\n  // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria\n  // This sort criteria will be shared across all views in a sublocation in a given session.\n  var sortCriteria = appCtxService.getCtx(provider.clientScopeURI + '.sortCriteria');\n\n  if (sortCriteria === undefined || sortCriteria === '') {\n    appCtxService.updatePartialCtx(provider.clientScopeURI + '.sortCriteria', []);\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', []);\n  } else {\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', sortCriteria);\n  }\n\n  appCtxService.updateCtx('search.activeFilterMap', {}); // revisitme- dependency of serch ctx should be removed and replaced by subPanelContext.searchContext\n  // but search is dependent on this, refactor those usages and remove this code\n  // listen to state change\n\n  const onLocationChange = function (changedParams) {\n    if (provider.params) {\n      // Build up filter map and array\n      var searchContext = searchFilterService.buildSearchFilters(provider.context); // Put the searchCriteria property on the state into the params\n\n      if (provider.params.hasOwnProperty('searchCriteria')) {\n        if (!searchContext.criteria) {\n          searchContext.criteria = {};\n        }\n\n        searchContext.criteria.searchString = provider.params.searchCriteria ? provider.params.searchCriteria : '';\n      } // Otherwise just update the context\n\n\n      var contextChanged = !_.isEqual(appCtxService.getCtx('search'), searchContext);\n\n      if (contextChanged) {\n        appCtxService.registerCtx('search', searchContext);\n      }\n    }\n  };\n\n  AwStateService.instance.transitionHooks.onSuccess({}, transition => {\n    onLocationChange(transition.params());\n  });\n  return onLocationChange(AwStateService.instance.params);\n};\n\nexport const initializeDefaultSublocation = provider => {\n  // init breadcrumb\n  let breadcrumbConfig = provider.breadcrumbConfig ? Object.assign({}, provider.breadcrumbConfig) : {};\n\n  if (!breadcrumbConfig.id) {\n    breadcrumbConfig.id = 'wabc';\n  }\n\n  appCtxService.registerCtx('breadCrumbConfig', breadcrumbConfig); // search context logic\n\n  updateSearchContext(provider);\n};\nexport const cleanUp = () => {\n  appCtxService.unRegisterCtx('breadCrumbConfig');\n};\nexport const handleSelectionChange = function (localSelectionData, parentSelectionData) {\n  let selectionQueryParamKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 's_uid';\n\n  if (!_.isEmpty(localSelectionData)) {\n    if (parentSelectionData) {\n      parentSelectionData.update(localSelectionData);\n    } else {\n      selectionService.updateSelection(localSelectionData.selected, localSelectionData.pselected, localSelectionData.relationInfo);\n\n      if (selectionQueryParamKey && AwStateService.instance.params.hasOwnProperty(selectionQueryParamKey)) {\n        var newParams = {};\n\n        if (localSelectionData.selected.length === 1 && localSelectionData.source === 'primary') {\n          newParams[selectionQueryParamKey] = getEvaluatedId(localSelectionData.selected[0]);\n        } else if (localSelectionData.source !== 'secondary') {\n          newParams[selectionQueryParamKey] = null;\n        }\n\n        AwStateService.instance.go('.', newParams);\n      }\n    }\n\n    trace('AwDefaultSublocation selectionData: ', localSelectionData);\n  }\n};\nexport const getContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.selectionData, props.baseSelection, props.sublocationState],\n    compute: () => {\n      let selectionQueryParamKey = props.subPanelContext && props.subPanelContext.selectionQueryParamKey ? props.subPanelContext.selectionQueryParamKey : 's_uid';\n      let pageContext = { ...props.subPanelContext.pageContext,\n        secondaryActiveTabId: props.sublocationState && props.sublocationState.secondaryActiveTabId,\n        sublocationState: props.sublocationState\n      };\n      return {\n        providerForBaseSublocation: { ...props.subPanelContext,\n          selectionQueryParamKey: selectionQueryParamKey\n        },\n        subPanelContextForBaseSublocation: {\n          selectionData: props.selectionData,\n          baseSelection: props.baseSelection,\n          pageContext: pageContext\n        },\n        subPanelContextForAwWorkarea: { ...props.subPanelContext,\n          baseSelection: props.baseSelection,\n          selectionQueryParamKey: selectionQueryParamKey,\n          pageContext: pageContext\n        }\n      };\n    }\n  })];\n};\nexport const getStdContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.provider, props.baseSelection, props.sublocationState],\n    compute: () => {\n      let pageContext = {};\n\n      if (props.subPanelContext && props.subPanelContext.pageContext) {\n        pageContext = { ...props.subPanelContext.pageContext,\n          secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n          sublocationState: props.sublocationState\n        };\n      } else {\n        pageContext = {\n          secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n          sublocationState: props.sublocationState\n        };\n      }\n\n      return { ...props.subPanelContext,\n        ...props.provider,\n        baseSelection: props.baseSelection,\n        pageContext: pageContext\n      };\n    }\n  })];\n};\nexport const updateSelection = function (selectionModel, parentSelectionModel) {\n  let selectionQueryParamKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 's_uid';\n  let originalParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let changeInParams = {};\n  const changedParams = AwStateService.instance.params;\n\n  for (var i in changedParams) {\n    if (changedParams[i] !== originalParams[i]) {\n      changeInParams[i] = changedParams[i];\n    }\n  }\n\n  let activeSelectionModel = parentSelectionModel || selectionModel;\n\n  if (changeInParams.hasOwnProperty(selectionQueryParamKey) && activeSelectionModel.getCurrentSelectedCount() < 2) {\n    const selection = AwStateService.instance.params[selectionQueryParamKey] ? [AwStateService.instance.params[selectionQueryParamKey]] : [];\n    activeSelectionModel.setSelection(selection);\n  }\n\n  return {\n    changedParams: changedParams\n  };\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/awDefaultSublocationService.js"],"names":["trace","updateSearchContext","provider","sortCriteria","appCtxService","onLocationChange","searchContext","searchFilterService","contextChanged","_","AwStateService","transition","initializeDefaultSublocation","breadcrumbConfig","Object","cleanUp","handleSelectionChange","selectionQueryParamKey","parentSelectionData","selectionService","localSelectionData","newParams","getEvaluatedId","getContext","ctxParameters","additionalParameters","props","compute","pageContext","secondaryActiveTabId","sublocationState","providerForBaseSublocation","subPanelContextForBaseSublocation","selectionData","baseSelection","subPanelContextForAwWorkarea","getStdContext","updateSelection","originalParams","changeInParams","changedParams","activeSelectionModel","parentSelectionModel","selection"],"mappings":"AAAA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,mBAAA,MAAA,4BAAA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,cAAA,MAAA,mBAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,gBAAA,MAAA,sBAAA;AACA,SAAA,kBAAA,QAAA,0BAAA;AACA,SAAA,cAAA,QAAA,kBAAA;AAEA,MAAMA,KAAK,GAAG,IAAA,KAAA,CAAd,WAAc,CAAd;;AAEA,MAAMC,mBAAmB,GAAKC,QAAF,IAAgB;EACxC;EACA;EACA,IAAIC,YAAY,GAAGC,aAAa,CAAbA,MAAAA,CAAsBF,QAAQ,CAARA,cAAAA,GAAzC,eAAmBE,CAAnB;;EACA,IAAID,YAAY,KAAZA,SAAAA,IAA8BA,YAAY,KAA9C,EAAA,EAAwD;IACpDC,aAAa,CAAbA,gBAAAA,CAAgCF,QAAQ,CAARA,cAAAA,GAAhCE,eAAAA,EAAAA,EAAAA;IACAA,aAAa,CAAbA,gBAAAA,CAAAA,0BAAAA,EAAAA,EAAAA;EAFJ,CAAA,MAGO;IACHA,aAAa,CAAbA,gBAAAA,CAAAA,0BAAAA,EAAAA,YAAAA;EACH;;EAEDA,aAAa,CAAbA,SAAAA,CAAAA,wBAAAA,EAXwC,EAWxCA,EAXwC,CAYxC;EACA;EACA;;EACA,MAAMC,gBAAgB,GAAG,UAAA,aAAA,EAA0B;IAC/C,IAAIH,QAAQ,CAAZ,MAAA,EAAsB;MAClB;MACA,IAAII,aAAa,GAAGC,mBAAmB,CAAnBA,kBAAAA,CAAwCL,QAAQ,CAFlD,OAEEK,CAApB,CAFkB,CAIlB;;MACA,IAAIL,QAAQ,CAARA,MAAAA,CAAAA,cAAAA,CAAJ,gBAAIA,CAAJ,EAAyD;QACrD,IAAI,CAACI,aAAa,CAAlB,QAAA,EAA8B;UAC1BA,aAAa,CAAbA,QAAAA,GAAAA,EAAAA;QACH;;QAEDA,aAAa,CAAbA,QAAAA,CAAAA,YAAAA,GAAsCJ,QAAQ,CAARA,MAAAA,CAAAA,cAAAA,GAAiCA,QAAQ,CAARA,MAAAA,CAAjCA,cAAAA,GAAtCI,EAAAA;MAVc,CAAA,CAclB;;;MACA,IAAIE,cAAc,GAAG,CAACC,CAAC,CAADA,OAAAA,CAAWL,aAAa,CAAbA,MAAAA,CAAXK,QAAWL,CAAXK,EAAtB,aAAsBA,CAAtB;;MACA,IAAA,cAAA,EAAqB;QACjBL,aAAa,CAAbA,WAAAA,CAAAA,QAAAA,EAAAA,aAAAA;MACH;IACJ;EApBL,CAAA;;EAuBAM,cAAc,CAAdA,QAAAA,CAAAA,eAAAA,CAAAA,SAAAA,CAAAA,EAAAA,EAAyDC,UAAF,IAAkB;IACrEN,gBAAgB,CAAEM,UAAU,CAA5BN,MAAkBM,EAAF,CAAhBN;EADJK,CAAAA;EAIA,OAAOL,gBAAgB,CAAEK,cAAc,CAAdA,QAAAA,CAAzB,MAAuB,CAAvB;AA1CJ,CAAA;;AA6CA,OAAO,MAAME,4BAA4B,GAAKV,QAAF,IAAgB;EACxD;EACA,IAAIW,gBAAgB,GAAGX,QAAQ,CAARA,gBAAAA,GAA4BY,MAAM,CAANA,MAAAA,CAAAA,EAAAA,EAAmBZ,QAAQ,CAAvDA,gBAA4BY,CAA5BZ,GAAvB,EAAA;;EACA,IAAI,CAACW,gBAAgB,CAArB,EAAA,EAA2B;IACvBA,gBAAgB,CAAhBA,EAAAA,GAAAA,MAAAA;EACH;;EACDT,aAAa,CAAbA,WAAAA,CAAAA,kBAAAA,EANwD,gBAMxDA,EANwD,CAOxD;;EACAH,mBAAmB,CAAnBA,QAAmB,CAAnBA;AARG,CAAA;AAWP,OAAO,MAAMc,OAAO,GAAG,MAAM;EACzBX,aAAa,CAAbA,aAAAA,CAAAA,kBAAAA;AADG,CAAA;AAIP,OAAO,MAAMY,qBAAqB,GAAG,UAAA,kBAAA,EAAA,mBAAA,EAAiF;EAAA,IAAtCC,sBAAsC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAb,OAAa;;EAClH,IAAI,CAACR,CAAC,CAADA,OAAAA,CAAL,kBAAKA,CAAL,EAAuC;IACnC,IAAA,mBAAA,EAA0B;MACtBS,mBAAmB,CAAnBA,MAAAA,CAAAA,kBAAAA;IADJ,CAAA,MAEO;MACHC,gBAAgB,CAAhBA,eAAAA,CAAkCC,kBAAkB,CAApDD,QAAAA,EAA+DC,kBAAkB,CAAjFD,SAAAA,EAA6FC,kBAAkB,CAA/GD,YAAAA;;MAGA,IAAIF,sBAAsB,IAAIP,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CAAAA,cAAAA,CAA9B,sBAA8BA,CAA9B,EAAwG;QACpG,IAAIW,SAAS,GAAb,EAAA;;QACA,IAAID,kBAAkB,CAAlBA,QAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IAA4CA,kBAAkB,CAAlBA,MAAAA,KAAhD,SAAA,EAA0F;UACtFC,SAAS,CAATA,sBAAS,CAATA,GAAsCC,cAAc,CAAEF,kBAAkB,CAAlBA,QAAAA,CAAtDC,CAAsDD,CAAF,CAApDC;QADJ,CAAA,MAEO,IAAID,kBAAkB,CAAlBA,MAAAA,KAAJ,WAAA,EAAgD;UACnDC,SAAS,CAATA,sBAAS,CAATA,GAAAA,IAAAA;QACH;;QACDX,cAAc,CAAdA,QAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,SAAAA;MACH;IACJ;;IACDV,KAAK,CAAA,sCAAA,EAALA,kBAAK,CAALA;EACH;AAnBE,CAAA;AAsBP,OAAO,MAAMuB,UAAU,GAAG,CAAA,KAAA,EAAA,KAAA,KAAoB;EAC1C,OAAO,CAAE,IAAA,kBAAA,CAAwB;IAC7BC,aAAa,EADgB,EAAA;IAE7BC,oBAAoB,EAAE,CAAEC,KAAK,CAAP,eAAA,EAAyBA,KAAK,CAA9B,aAAA,EAA8CA,KAAK,CAAnD,aAAA,EAAmEA,KAAK,CAFjE,gBAEP,CAFO;IAG7BC,OAAO,EAAE,MAAM;MACX,IAAIV,sBAAsB,GAAGS,KAAK,CAALA,eAAAA,IAAyBA,KAAK,CAALA,eAAAA,CAAzBA,sBAAAA,GAAwEA,KAAK,CAALA,eAAAA,CAAxEA,sBAAAA,GAA7B,OAAA;MACA,IAAIE,WAAW,GAAG,EACd,GAAGF,KAAK,CAALA,eAAAA,CADW,WAAA;QAEdG,oBAAoB,EAAEH,KAAK,CAALA,gBAAAA,IAA0BA,KAAK,CAALA,gBAAAA,CAFlC,oBAAA;QAGdI,gBAAgB,EAAEJ,KAAK,CAACI;MAHV,CAAlB;MAMA,OAAO;QACHC,0BAA0B,EAAE,EACxB,GAAGL,KAAK,CADgB,eAAA;UAExBT,sBAAsB,EAAEA;QAFA,CADzB;QAKHe,iCAAiC,EAAE;UAC/BC,aAAa,EAAEP,KAAK,CADW,aAAA;UAE/BQ,aAAa,EAAER,KAAK,CAFW,aAAA;UAG/BE,WAAW,EAAEA;QAHkB,CALhC;QAUHO,4BAA4B,EAAE,EAC1B,GAAGT,KAAK,CADkB,eAAA;UAE1BQ,aAAa,EAAER,KAAK,CAFM,aAAA;UAG1BT,sBAAsB,EAHI,sBAAA;UAI1BW,WAAW,EAAEA;QAJa;MAV3B,CAAP;IAiBH;EA5B4B,CAAxB,CAAF,CAAP;AADG,CAAA;AAiCP,OAAO,MAAMQ,aAAa,GAAG,CAAA,KAAA,EAAA,KAAA,KAAoB;EAC7C,OAAO,CAAE,IAAA,kBAAA,CAAwB;IAC7BZ,aAAa,EADgB,EAAA;IAE7BC,oBAAoB,EAAE,CAAEC,KAAK,CAAP,eAAA,EAAyBA,KAAK,CAA9B,QAAA,EAAyCA,KAAK,CAA9C,aAAA,EAA8DA,KAAK,CAF5D,gBAEP,CAFO;IAG7BC,OAAO,EAAE,MAAM;MACX,IAAIC,WAAW,GAAf,EAAA;;MACA,IAAIF,KAAK,CAALA,eAAAA,IAAyBA,KAAK,CAALA,eAAAA,CAA7B,WAAA,EAAiE;QAC7DE,WAAW,GAAG,EACV,GAAGF,KAAK,CAALA,eAAAA,CADO,WAAA;UAEVG,oBAAoB,EAAEH,KAAK,CAALA,gBAAAA,CAAAA,oBAAAA,KAAAA,EAAAA,GAAqDA,KAAK,CAALA,gBAAAA,CAArDA,oBAAAA,GAFZ,SAAA;UAGVI,gBAAgB,EAAEJ,KAAK,CAACI;QAHd,CAAdF;MADJ,CAAA,MAMO;QACHA,WAAW,GAAG;UACVC,oBAAoB,EAAEH,KAAK,CAALA,gBAAAA,CAAAA,oBAAAA,KAAAA,EAAAA,GAAqDA,KAAK,CAALA,gBAAAA,CAArDA,oBAAAA,GADZ,SAAA;UAEVI,gBAAgB,EAAEJ,KAAK,CAACI;QAFd,CAAdF;MAIH;;MACD,OAAO,EACH,GAAGF,KAAK,CADL,eAAA;QAEH,GAAGA,KAAK,CAFL,QAAA;QAGHQ,aAAa,EAAER,KAAK,CAHjB,aAAA;QAIHE,WAAW,EAAEA;MAJV,CAAP;IAMH;EAvB4B,CAAxB,CAAF,CAAP;AADG,CAAA;AA4BP,OAAO,MAAMS,eAAe,GAAG,UAAA,cAAA,EAAA,oBAAA,EAAmG;EAAA,IAA3DpB,sBAA2D,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAlC,OAAkC;EAAA,IAAzBqB,cAAyB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAR,EAAQ;EAC9H,IAAIC,cAAc,GAAlB,EAAA;EACA,MAAMC,aAAa,GAAG9B,cAAc,CAAdA,QAAAA,CAAtB,MAAA;;EACA,KAAK,IAAL,CAAA,IAAA,aAAA,EAA8B;IAC1B,IAAI8B,aAAa,CAAbA,CAAa,CAAbA,KAAuBF,cAAc,CAAzC,CAAyC,CAAzC,EAAiD;MAC7CC,cAAc,CAAdA,CAAc,CAAdA,GAAsBC,aAAa,CAAnCD,CAAmC,CAAnCA;IACH;EACJ;;EACD,IAAIE,oBAAoB,GAAGC,oBAAoB,IAA/C,cAAA;;EACA,IAAIH,cAAc,CAAdA,cAAAA,CAAAA,sBAAAA,KAA2DE,oBAAoB,CAApBA,uBAAAA,KAA/D,CAAA,EAAoH;IAChH,MAAME,SAAS,GAAGjC,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CAAAA,sBAAAA,IAA2D,CAAEA,cAAc,CAAdA,QAAAA,CAAAA,MAAAA,CAA7DA,sBAA6DA,CAAF,CAA3DA,GAAlB,EAAA;IACA+B,oBAAoB,CAApBA,YAAAA,CAAAA,SAAAA;EACH;;EACD,OAAO;IACHD,aAAa,EAAEA;EADZ,CAAP;AAbG,CAAA","sourcesContent":["import _ from 'lodash';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport appCtxService from 'js/appCtxService';\nimport AwStateService from 'js/awStateService';\nimport Debug from 'debug';\nimport selectionService from 'js/selection.service';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { getEvaluatedId } from 'js/uwUtilService';\n\nconst trace = new Debug( 'selection' );\n\nconst updateSearchContext = ( provider ) => {\n    // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria\n    // This sort criteria will be shared across all views in a sublocation in a given session.\n    var sortCriteria = appCtxService.getCtx( provider.clientScopeURI + '.sortCriteria' );\n    if( sortCriteria === undefined || sortCriteria === '' ) {\n        appCtxService.updatePartialCtx( provider.clientScopeURI + '.sortCriteria', [] );\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', [] );\n    } else {\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', sortCriteria );\n    }\n\n    appCtxService.updateCtx( 'search.activeFilterMap', {} );\n    // revisitme- dependency of serch ctx should be removed and replaced by subPanelContext.searchContext\n    // but search is dependent on this, refactor those usages and remove this code\n    // listen to state change\n    const onLocationChange = function( changedParams ) {\n        if( provider.params ) {\n            // Build up filter map and array\n            var searchContext = searchFilterService.buildSearchFilters( provider.context );\n\n            // Put the searchCriteria property on the state into the params\n            if( provider.params.hasOwnProperty( 'searchCriteria' ) ) {\n                if( !searchContext.criteria ) {\n                    searchContext.criteria = {};\n                }\n\n                searchContext.criteria.searchString = provider.params.searchCriteria ? provider.params.searchCriteria :\n                    '';\n            }\n\n            // Otherwise just update the context\n            var contextChanged = !_.isEqual( appCtxService.getCtx( 'search' ), searchContext );\n            if( contextChanged ) {\n                appCtxService.registerCtx( 'search', searchContext );\n            }\n        }\n    };\n\n    AwStateService.instance.transitionHooks.onSuccess( {}, ( transition ) => {\n        onLocationChange( transition.params() );\n    } );\n\n    return onLocationChange( AwStateService.instance.params );\n};\n\nexport const initializeDefaultSublocation = ( provider ) => {\n    // init breadcrumb\n    let breadcrumbConfig = provider.breadcrumbConfig ? Object.assign( {}, provider.breadcrumbConfig ) : {};\n    if( !breadcrumbConfig.id ) {\n        breadcrumbConfig.id = 'wabc';\n    }\n    appCtxService.registerCtx( 'breadCrumbConfig', breadcrumbConfig );\n    // search context logic\n    updateSearchContext( provider );\n};\n\nexport const cleanUp = () => {\n    appCtxService.unRegisterCtx( 'breadCrumbConfig' );\n};\n\nexport const handleSelectionChange = ( localSelectionData, parentSelectionData, selectionQueryParamKey = 's_uid' ) => {\n    if( !_.isEmpty( localSelectionData ) ) {\n        if( parentSelectionData ) {\n            parentSelectionData.update( localSelectionData );\n        } else {\n            selectionService.updateSelection( localSelectionData.selected, localSelectionData.pselected, localSelectionData\n                .relationInfo );\n\n            if( selectionQueryParamKey && AwStateService.instance.params.hasOwnProperty( selectionQueryParamKey ) ) {\n                var newParams = {};\n                if( localSelectionData.selected.length === 1 && localSelectionData.source === 'primary' ) {\n                    newParams[ selectionQueryParamKey ] = getEvaluatedId( localSelectionData.selected[ 0 ] );\n                } else if( localSelectionData.source !== 'secondary' ) {\n                    newParams[ selectionQueryParamKey ] = null;\n                }\n                AwStateService.instance.go( '.', newParams );\n            }\n        }\n        trace( 'AwDefaultSublocation selectionData: ', localSelectionData );\n    }\n};\n\nexport const getContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.selectionData, props.baseSelection, props.sublocationState ],\n        compute: () => {\n            let selectionQueryParamKey = props.subPanelContext && props.subPanelContext.selectionQueryParamKey ? props.subPanelContext.selectionQueryParamKey : 's_uid';\n            let pageContext = {\n                ...props.subPanelContext.pageContext,\n                secondaryActiveTabId: props.sublocationState && props.sublocationState.secondaryActiveTabId,\n                sublocationState: props.sublocationState\n            };\n\n            return {\n                providerForBaseSublocation: {\n                    ...props.subPanelContext,\n                    selectionQueryParamKey: selectionQueryParamKey\n                },\n                subPanelContextForBaseSublocation: {\n                    selectionData: props.selectionData,\n                    baseSelection: props.baseSelection,\n                    pageContext: pageContext\n                },\n                subPanelContextForAwWorkarea: {\n                    ...props.subPanelContext,\n                    baseSelection: props.baseSelection,\n                    selectionQueryParamKey: selectionQueryParamKey,\n                    pageContext: pageContext\n                }\n            };\n        }\n    } ) ];\n};\n\nexport const getStdContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.provider, props.baseSelection, props.sublocationState ],\n        compute: () => {\n            let pageContext = {};\n            if( props.subPanelContext && props.subPanelContext.pageContext ) {\n                pageContext = {\n                    ...props.subPanelContext.pageContext,\n                    secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n                    sublocationState: props.sublocationState\n                };\n            } else {\n                pageContext = {\n                    secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,\n                    sublocationState: props.sublocationState\n                };\n            }\n            return {\n                ...props.subPanelContext,\n                ...props.provider,\n                baseSelection: props.baseSelection,\n                pageContext: pageContext\n            };\n        }\n    } ) ];\n};\n\nexport const updateSelection = ( selectionModel, parentSelectionModel, selectionQueryParamKey = 's_uid', originalParams = {} ) => {\n    let changeInParams = {};\n    const changedParams = AwStateService.instance.params;\n    for( var i in changedParams ) {\n        if( changedParams[ i ] !== originalParams[ i ] ) {\n            changeInParams[ i ] = changedParams[ i ];\n        }\n    }\n    let activeSelectionModel = parentSelectionModel || selectionModel;\n    if( changeInParams.hasOwnProperty( selectionQueryParamKey ) && activeSelectionModel.getCurrentSelectedCount() < 2 ) {\n        const selection = AwStateService.instance.params[ selectionQueryParamKey ] ? [ AwStateService.instance.params[ selectionQueryParamKey ] ] : [];\n        activeSelectionModel.setSelection( selection );\n    }\n    return {\n        changedParams: changedParams\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
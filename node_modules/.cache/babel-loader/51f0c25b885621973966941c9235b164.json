{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-disable new-cap */\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/Apollo-Analytics|Apollo-Analytics}\n *\n * @module js/analyticsService\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport moduleLoader from 'js/moduleLoader';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type { {Array.<string>}}\n * @private\n */\n\nvar exports = {};\n\nvar _$q = AwPromiseService.instance.defer();\n\nvar _delegateService;\n\nvar _delegatePredictiveService;\n\nvar eventsToInclude = [];\n/**\n * This API populates the eventsToInclude array based on the passed analytics config.\n * @param {JSON} analyticsJson - The Analytics JSON configuration.\n * @ignore\n */\n\nfunction _populateEventsToPublish(analyticsJson) {\n  if (analyticsJson && analyticsJson.events) {\n    let analyticsEvents = analyticsJson.events;\n\n    if (analyticsEvents.include && analyticsEvents.include.length) {\n      _.forEach(analyticsEvents.include, function (toInclude) {\n        eventsToInclude.push(toInclude.toLowerCase());\n      });\n    }\n  }\n}\n/**\n * This API returns true if publishAll events is enabled.\n * @returns {Boolean} true if publishAll is enabled, false otherwise.\n * @ignore\n */\n\n\nfunction _isPublishAllEnabled() {\n  return eventsToInclude.length === 0;\n}\n/**\n * This API checks if the passed eventType should be published or not.\n * @param {String} eventType - The analytics event type to check.\n * @returns {Boolean} true if event needs to be published, false otherwise.\n * @ignore\n */\n\n\nfunction _shouldPublishEvent(eventType) {\n  if (_isPublishAllEnabled() || eventType === undefined) {\n    return true;\n  }\n\n  if (eventsToInclude.length && eventsToInclude.includes(eventType.toLowerCase())) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * responsible for choosing the appropriate analyticsService logic to be used. resolve the promise with the\n * appropriate analyticsService.\n *\n * @return {Promise} returns a promise to be resolved once the correct analyticsService is chosen.\n */\n\n\nfunction _pickAnalyticsService() {\n  if (_delegateService) {\n    // if an analyticsService is already set, just use it.\n    return _$q.resolve(_delegateService);\n  }\n\n  var solution = cfgSvc.getCfgCached('solutionDef');\n\n  if (!solution) {\n    return new Promise(function (resolve, reject) {\n      _.defer(function () {\n        _pickAnalyticsService().then(resolve).catch(reject);\n      });\n    });\n  }\n\n  var name = solution.analytics;\n\n  if (name) {\n    var deferred = AwPromiseService.instance.defer();\n    cfgSvc.getCfg('analytics').then(analyticsProviders => {\n      moduleLoader.loadDependentModule(analyticsProviders[name].dep).then(function (depModuleObj) {\n        if (!depModuleObj) {\n          logger.error('Could not load the analytics module ' + depModuleObj);\n        }\n\n        _populateEventsToPublish(analyticsProviders[name]);\n\n        _delegateService = depModuleObj;\n        deferred.resolve(_delegateService);\n      });\n    });\n    return deferred.promise;\n  }\n\n  return _$q.reject();\n}\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\n\n\nexport let authenticationSuccessful = function () {\n  if (_delegateService) {\n    _delegateService.authenticationSuccessful();\n  } else {\n    _pickAnalyticsService().then(function (_delegateService) {\n      _delegateService.authenticationSuccessful();\n    });\n  }\n};\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable.\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n * @return {Promise} promise\n */\n\nexport let setPreInitData = function (preInitData) {\n  // Vendor ID is used to hash the user ID, so if we don't have the vendor ID we shouldnt be sending the user ID.\n  if (!preInitData.vendor_id) {\n    preInitData.user_id = '';\n  }\n\n  if (_delegateService) {\n    return _$q.resolve(_delegateService.setPreInitData(preInitData));\n  }\n\n  return _pickAnalyticsService().then(function (_delegateService) {\n    _delegateService.setPreInitData(preInitData);\n  });\n};\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\n\nexport let enable = function (useInternalServer, repo) {\n  if (_delegateService) {\n    return _delegateService.enable(useInternalServer, repo).then(function () {\n      exports.logPageViewEvent();\n    });\n  }\n\n  return _pickAnalyticsService().then(function (_delegateService) {\n    return _delegateService.enable(useInternalServer, repo).then(function () {\n      exports.logPageViewEvent();\n    });\n  });\n};\n/**\n * responsible for choosing the appropriate prediction utils logic to be used, resolves the promise with the\n * appropriate PredictionUtils.\n *\n * @return {Promise} returns a promise to be resolved once the correct PredictionUtils is chosen.\n */\n\nexport let pickPredictionService = function () {\n  if (_delegatePredictiveService) {\n    // if an analyticsService is already set, just use it.\n    return _$q.resolve(_delegatePredictiveService);\n  }\n\n  var deferred = AwPromiseService.instance.defer();\n  cfgSvc.getCfg('predictiveui').then(predictiveUiProviders => {\n    if (predictiveUiProviders && predictiveUiProviders.predictiveUtils) {\n      moduleLoader.loadDependentModule(predictiveUiProviders.predictiveUtils.dep).then(function (depModuleObj) {\n        if (depModuleObj) {\n          _delegatePredictiveService = depModuleObj;\n          deferred.resolve(_delegatePredictiveService);\n        } else {\n          deferred.resolve();\n        }\n      });\n    } else {\n      deferred.resolve();\n    }\n  });\n  return deferred.promise;\n};\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logCommands = function (data) {\n  if (_delegateService) {\n    var analyticsType = data && data.sanAnalyticsType;\n\n    if (_shouldPublishEvent(analyticsType)) {\n      _delegateService.logCommands(data);\n    }\n  }\n}; // Log Predictive Commands\n\nexport let logPredictionData = function (data) {\n  if (_delegatePredictiveService) {\n    _delegatePredictiveService.assignEventlistener(data);\n  } else {\n    pickPredictionService().then(function (_delegatePredictiveService) {\n      if (_delegatePredictiveService) {\n        _delegatePredictiveService.assignEventlistener(data);\n      }\n    });\n  }\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\n\nexport let logAnalyticsEvent = function (name, property) {\n  if (_delegateService) {\n    var analyticsType = property && property.sanAnalyticsType;\n\n    if (_shouldPublishEvent(analyticsType)) {\n      _delegateService.logEvent(name, property);\n    }\n  }\n};\n/**\n * This method should be used to log Page Load data.\n * @param {Object} data The data to be Logged\n */\n\nexport let logPageViewEvent = function (data) {\n  if (_delegateService) {\n    if (_shouldPublishEvent('Page Views')) {\n      _delegateService.logPageViewEvent(data);\n    }\n  }\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\n\nexport let logEvent = function (name, property) {\n  if (_delegateService) {\n    _delegateService.logEvent(name, property);\n  }\n};\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\n\nexport let logProductInfo = function (name, property) {\n  if (_delegateService) {\n    _delegateService.logProductInfo(name, property);\n  }\n};\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\n\nexport let disable = function (useInternalServer, encVendId, repo) {\n  if (_delegateService) {\n    _delegateService.disable(useInternalServer, encVendId, repo);\n  }\n};\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\n\nexport let publishableValue = function (artifactName, artifactType) {\n  if (_delegateService) {\n    return _delegateService.publishableValue(artifactName, artifactType);\n  }\n\n  return undefined;\n};\nexports = {\n  authenticationSuccessful,\n  setPreInitData,\n  enable,\n  pickPredictionService,\n  logCommands,\n  logPredictionData,\n  logAnalyticsEvent,\n  logPageViewEvent,\n  logEvent,\n  logProductInfo,\n  disable,\n  publishableValue\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/analyticsService.js"],"names":["exports","_$q","AwPromiseService","eventsToInclude","analyticsJson","analyticsEvents","_","toInclude","_isPublishAllEnabled","eventType","solution","cfgSvc","_pickAnalyticsService","name","deferred","analyticsProviders","moduleLoader","logger","_populateEventsToPublish","_delegateService","authenticationSuccessful","setPreInitData","preInitData","enable","pickPredictionService","predictiveUiProviders","_delegatePredictiveService","logCommands","analyticsType","data","_shouldPublishEvent","logPredictionData","logAnalyticsEvent","property","logPageViewEvent","logEvent","logProductInfo","disable","publishableValue"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/* eslint-disable new-cap */\n\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/Apollo-Analytics|Apollo-Analytics}\n *\n * @module js/analyticsService\n *\n * @publishedApolloService\n *\n */\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport moduleLoader from 'js/moduleLoader';\nimport cfgSvc from 'js/configurationService';\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * This flag indicates if analytics are enabled for this session.\n *\n * @type { {Array.<string>}}\n * @private\n */\nvar exports = {};\nvar _$q = AwPromiseService.instance.defer();\n\nvar _delegateService;\nvar _delegatePredictiveService;\n\nvar eventsToInclude = [];\n\n/**\n * This API populates the eventsToInclude array based on the passed analytics config.\n * @param {JSON} analyticsJson - The Analytics JSON configuration.\n * @ignore\n */\nfunction _populateEventsToPublish( analyticsJson ) {\n    if( analyticsJson && analyticsJson.events ) {\n        let analyticsEvents = analyticsJson.events;\n        if( analyticsEvents.include && analyticsEvents.include.length ) {\n            _.forEach( analyticsEvents.include, function( toInclude ) {\n                eventsToInclude.push( toInclude.toLowerCase() );\n            } );\n        }\n    }\n}\n\n/**\n * This API returns true if publishAll events is enabled.\n * @returns {Boolean} true if publishAll is enabled, false otherwise.\n * @ignore\n */\nfunction _isPublishAllEnabled() {\n    return eventsToInclude.length === 0;\n}\n\n/**\n * This API checks if the passed eventType should be published or not.\n * @param {String} eventType - The analytics event type to check.\n * @returns {Boolean} true if event needs to be published, false otherwise.\n * @ignore\n */\nfunction _shouldPublishEvent( eventType ) {\n    if( _isPublishAllEnabled() || eventType === undefined ) {\n        return true;\n    }\n    if( eventsToInclude.length && eventsToInclude.includes( eventType.toLowerCase() ) ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * responsible for choosing the appropriate analyticsService logic to be used. resolve the promise with the\n * appropriate analyticsService.\n *\n * @return {Promise} returns a promise to be resolved once the correct analyticsService is chosen.\n */\nfunction _pickAnalyticsService() {\n    if( _delegateService ) {\n        // if an analyticsService is already set, just use it.\n        return _$q.resolve( _delegateService );\n    }\n    var solution = cfgSvc.getCfgCached( 'solutionDef' );\n    if( !solution ) {\n        return new Promise( function( resolve, reject ) {\n            _.defer( function() {\n                _pickAnalyticsService().then( resolve ).catch( reject );\n            } );\n        } );\n    }\n    var name = solution.analytics;\n    if( name ) {\n        var deferred = AwPromiseService.instance.defer();\n        cfgSvc.getCfg( 'analytics' ).then( ( analyticsProviders ) => {\n            moduleLoader.loadDependentModule( analyticsProviders[ name ].dep ).then( function( depModuleObj ) {\n                if( !depModuleObj ) {\n                    logger.error( 'Could not load the analytics module ' + depModuleObj );\n                }\n                _populateEventsToPublish( analyticsProviders[ name ] );\n                _delegateService = depModuleObj;\n                deferred.resolve( _delegateService );\n            } );\n        } );\n\n        return deferred.promise;\n    }\n    return _$q.reject();\n}\n\n/**\n * This method should be invoked upon successful authentication a backend server. It should not be invoked upon\n * client side page refresh if the previous server session is reused. This method should be called 0 or 1 times per\n * session.\n */\nexport let authenticationSuccessful = function() {\n    if( _delegateService ) {\n        _delegateService.authenticationSuccessful();\n    } else {\n        _pickAnalyticsService().then( function( _delegateService ) {\n            _delegateService.authenticationSuccessful();\n        } );\n    }\n};\n\n/**\n * This method should be invoked before the enable() method.\n * This sets the data that the will be used by the initialization process during the enable.\n *\n * @param {map} preInitData Map of key value pairs. \"user_id\" and \"vendor_id\" are the two supported keys.\n * @return {Promise} promise\n */\nexport let setPreInitData = function( preInitData ) {\n    // Vendor ID is used to hash the user ID, so if we don't have the vendor ID we shouldnt be sending the user ID.\n    if( !preInitData.vendor_id ) {\n        preInitData.user_id = '';\n    }\n    if( _delegateService ) {\n        return _$q.resolve( _delegateService.setPreInitData( preInitData ) );\n    }\n    return _pickAnalyticsService().then( function( _delegateService ) {\n        _delegateService.setPreInitData( preInitData );\n    } );\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be enabled. This method\n * should be called 0 or 1 times per session.\n *\n * @param {Boolean} useInternalServer Log to the InternalServer\n * @return {Promise} promise\n */\nexport let enable = function( useInternalServer, repo ) {\n    if( _delegateService ) {\n        return _delegateService.enable( useInternalServer, repo ).then( function() {\n            exports.logPageViewEvent();\n        } );\n    }\n    return _pickAnalyticsService().then( function( _delegateService ) {\n        return _delegateService.enable( useInternalServer, repo ).then( function() {\n            exports.logPageViewEvent();\n        } );\n    } );\n};\n\n/**\n * responsible for choosing the appropriate prediction utils logic to be used, resolves the promise with the\n * appropriate PredictionUtils.\n *\n * @return {Promise} returns a promise to be resolved once the correct PredictionUtils is chosen.\n */\nexport let pickPredictionService = function() {\n    if( _delegatePredictiveService ) {\n        // if an analyticsService is already set, just use it.\n        return _$q.resolve( _delegatePredictiveService );\n    }\n    var deferred = AwPromiseService.instance.defer();\n    cfgSvc.getCfg( 'predictiveui' ).then( ( predictiveUiProviders ) => {\n        if( predictiveUiProviders && predictiveUiProviders.predictiveUtils ) {\n            moduleLoader.loadDependentModule( predictiveUiProviders.predictiveUtils.dep ).then( function( depModuleObj ) {\n                if( depModuleObj ) {\n                    _delegatePredictiveService = depModuleObj;\n                    deferred.resolve( _delegatePredictiveService );\n                } else {\n                    deferred.resolve();\n                }\n            } );\n        } else {\n            deferred.resolve();\n        }\n    } );\n\n    return deferred.promise;\n};\n\n/**\n * This method should be used by the client to log a command to the Analytics server.\n * This method can be called whether Analytics has been enabled or not.\n *\n * @param {Object} data - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logCommands = function( data ) {\n    if( _delegateService ) {\n        var analyticsType = data && data.sanAnalyticsType;\n        if( _shouldPublishEvent( analyticsType ) ) {\n            _delegateService.logCommands( data );\n        }\n    }\n};\n// Log Predictive Commands\nexport let logPredictionData = function( data ) {\n    if( _delegatePredictiveService ) {\n        _delegatePredictiveService.assignEventlistener( data );\n    } else {\n        pickPredictionService().then( function( _delegatePredictiveService ) {\n            if( _delegatePredictiveService ) {\n                _delegatePredictiveService.assignEventlistener( data );\n            }\n        } );\n    }\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\nexport let logAnalyticsEvent = function( name, property ) {\n    if( _delegateService ) {\n        var analyticsType = property && property.sanAnalyticsType;\n        if( _shouldPublishEvent( analyticsType ) ) {\n            _delegateService.logEvent( name, property );\n        }\n    }\n};\n\n/**\n * This method should be used to log Page Load data.\n * @param {Object} data The data to be Logged\n */\nexport let logPageViewEvent = function( data ) {\n    if( _delegateService ) {\n        if( _shouldPublishEvent( 'Page Views' ) ) {\n            _delegateService.logPageViewEvent( data );\n        }\n    }\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n * @ignore\n */\nexport let logEvent = function( name, property ) {\n    if( _delegateService ) {\n        _delegateService.logEvent( name, property );\n    }\n};\n\n/**\n * This method should be used by the client to log an event to the Analytics server. This method can be called\n * whether Analytics has been enabled or not.\n *\n * @param {String} name - name of an event\n * @param {Object} property - value of the event. It can be a simple string, a JSON string, or empty. No other data\n *            types are supported.\n */\nexport let logProductInfo = function( name, property ) {\n    if( _delegateService ) {\n        _delegateService.logProductInfo( name, property );\n    }\n};\n\n/**\n * This method should be called when the client determines that Analytics logging should be disabled. This method\n * should be called 0 or 1 times per session.\n *\n * The Opt-out state is stored in the localStorage. San itself can rememeber the opt-out state.\n * But, we want to be sure on our end as well.\n *\n * @param {Boolean} useInternalServer log to the internal server\n * @param {String}  encVendId encrypted Vendor Id\n */\nexport let disable = function( useInternalServer, encVendId, repo  ) {\n    if( _delegateService ) {\n        _delegateService.disable( useInternalServer, encVendId, repo );\n    }\n};\n\n/**\n * This method should be used by the client to check if an UI artifact can be logged to Analytics.\n *\n *\n * @param {String} artifactName - name of an the UI artifact to be checked to see if it is okay to log to analytics\n * @param {String} artifactType - Type of the artifact. The following is the list of Valid values are:\n *                                  \"Theme\", \"Command\", and \"Page\"\n * @returns {String} - value to report\n */\nexport let publishableValue = function( artifactName, artifactType ) {\n    if( _delegateService ) {\n        return _delegateService.publishableValue( artifactName, artifactType );\n    }\n    return undefined;\n};\n\nexports = {\n    authenticationSuccessful,\n    setPreInitData,\n    enable,\n    pickPredictionService,\n    logCommands,\n    logPredictionData,\n    logAnalyticsEvent,\n    logPageViewEvent,\n    logEvent,\n    logProductInfo,\n    disable,\n    publishableValue\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
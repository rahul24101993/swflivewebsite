{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * {@httpIconProviderService} icon provider prepares &lt;img&gt; tag is requires based on configuration provided in\n * solution definition. It uses {@defaultIconProviderService} to use build time prepared cache.\n *\n * @module js/httpIconProviderService\n */\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport iconRepositoryService from 'js/iconRepositoryService';\nvar exports = {};\n/**\n * Returns the &lt;img&gt; tag for the given icon name\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;img&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\n\nfunction _getIMGTag(name) {\n  if (!name) {\n    return null;\n  }\n\n  var iconUrl = iconRepositoryService.getIconFileUrl(name + '.svg');\n\n  if (iconUrl) {\n    return '<img class=\"aw-base-icon\" src=\"' + iconUrl + '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + name + '\" />';\n  }\n\n  return null;\n}\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name.\n */\n\n\nexport let getTypeIcon = function (typeName) {\n  var icon = defaultIconProviderService.getTypeIcon(typeName);\n\n  if (!icon) {\n    icon = _getIMGTag(typeName);\n  }\n\n  return icon;\n};\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\n\nexport let getTypeIconFileTag = function (typeName, typeIconFileName) {\n  if (!typeIconFileName) {\n    return null;\n  }\n\n  var iconUrl = iconRepositoryService.getIconFileUrl(typeIconFileName);\n\n  if (iconUrl) {\n    return '<img class=\"aw-base-icon\" src=\"' + iconUrl + '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + typeName + '\" />';\n  }\n\n  return null;\n};\n/**\n * Returns URL.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\n\nexport let getTypeIconFileUrl = function (typeIconFileName) {\n  return iconRepositoryService.getIconFileUrl(typeIconFileName);\n};\n/**\n * Returns URL.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server\n */\n\nexport let getTypeIconURL = function (typeName) {\n  var iconUrl = defaultIconProviderService.getTypeIconURL(typeName);\n\n  if (!iconUrl) {\n    iconUrl = iconRepositoryService.getIconFileUrl(typeName + '.svg');\n  }\n\n  return iconUrl;\n};\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\n\nexport let getTileIcon = async function (name) {\n  var icon = await defaultIconProviderService.getTileIcon(name);\n\n  if (!icon) {\n    icon = _getIMGTag('home' + name);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\n\nexport let getMiscIcon = async function (name) {\n  var icon = await defaultIconProviderService.getMiscIcon(name);\n\n  if (!icon) {\n    icon = _getIMGTag('misc' + name);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} name - The icon name.\n *\n * @return {String} SVG definition string for the icon\n */\n\nexport let getCmdIcon = async function (name) {\n  var icon = await defaultIconProviderService.getCmdIcon(name);\n\n  if (!icon) {\n    icon = _getIMGTag('cmd' + name);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\n\nexport let getAwIcon = async function (iconName) {\n  var icon = await defaultIconProviderService.getAwIcon(iconName);\n\n  if (!icon) {\n    icon = _getIMGTag(iconName);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String}Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\n\nexport let getIndicatorIcon = async function (iconName) {\n  var icon = await defaultIconProviderService.getIndicatorIcon(iconName);\n\n  if (!icon) {\n    icon = _getIMGTag('indicator' + iconName);\n  }\n\n  return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string or img tag .\n */\n\nexport let getIcon = async function (iconName) {\n  var icon = await defaultIconProviderService.getIcon(iconName);\n\n  if (!icon) {\n    icon = _getIMGTag(iconName);\n  }\n\n  return icon;\n};\nexports = {\n  getTypeIcon,\n  getTypeIconFileTag,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTileIcon,\n  getMiscIcon,\n  getCmdIcon,\n  getAwIcon,\n  getIndicatorIcon,\n  getIcon\n};\nexport default exports;","map":{"version":3,"names":["defaultIconProviderService","iconRepositoryService","exports","_getIMGTag","name","iconUrl","getIconFileUrl","getTypeIcon","typeName","icon","getTypeIconFileTag","typeIconFileName","getTypeIconFileUrl","getTypeIconURL","getTileIcon","getMiscIcon","getCmdIcon","getAwIcon","iconName","getIndicatorIcon","getIcon"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/httpIconProviderService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * {@httpIconProviderService} icon provider prepares &lt;img&gt; tag is requires based on configuration provided in\n * solution definition. It uses {@defaultIconProviderService} to use build time prepared cache.\n *\n * @module js/httpIconProviderService\n */\nimport defaultIconProviderService from 'js/defaultIconProviderService';\nimport iconRepositoryService from 'js/iconRepositoryService';\n\nvar exports = {};\n/**\n * Returns the &lt;img&gt; tag for the given icon name\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;img&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\nfunction _getIMGTag( name ) {\n    if( !name ) {\n        return null;\n    }\n    var iconUrl = iconRepositoryService.getIconFileUrl( name + '.svg' );\n    if( iconUrl ) {\n        return '<img class=\"aw-base-icon\" src=\"' + iconUrl +\n            '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + name + '\" />';\n    }\n    return null;\n}\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name.\n */\nexport let getTypeIcon = function( typeName ) {\n    var icon = defaultIconProviderService.getTypeIcon( typeName );\n    if( !icon ) {\n        icon = _getIMGTag( typeName );\n    }\n    return icon;\n};\n\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\nexport let getTypeIconFileTag = function( typeName, typeIconFileName ) {\n    if( !typeIconFileName ) {\n        return null;\n    }\n    var iconUrl = iconRepositoryService.getIconFileUrl( typeIconFileName );\n    if( iconUrl ) {\n        return '<img class=\"aw-base-icon\" src=\"' + iconUrl +\n            '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"' + typeName + '\" />';\n    }\n    return null;\n};\n\n/**\n * Returns URL.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */\nexport let getTypeIconFileUrl = function( typeIconFileName ) {\n    return iconRepositoryService.getIconFileUrl( typeIconFileName );\n};\n\n/**\n * Returns URL.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server\n */\nexport let getTypeIconURL = function( typeName ) {\n    var iconUrl = defaultIconProviderService.getTypeIconURL( typeName );\n    if( !iconUrl ) {\n        iconUrl = iconRepositoryService.getIconFileUrl( typeName + '.svg' );\n    }\n    return iconUrl;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\nexport let getTileIcon = async function( name ) {\n    var icon = await defaultIconProviderService.getTileIcon( name );\n    if( !icon ) {\n        icon = _getIMGTag( 'home' + name );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */\nexport let getMiscIcon = async function( name ) {\n    var icon = await defaultIconProviderService.getMiscIcon( name );\n    if( !icon ) {\n        icon = _getIMGTag( 'misc' + name );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} name - The icon name.\n *\n * @return {String} SVG definition string for the icon\n */\nexport let getCmdIcon = async function( name ) {\n    var icon = await defaultIconProviderService.getCmdIcon( name );\n    if( !icon ) {\n        icon = _getIMGTag( 'cmd' + name );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\nexport let getAwIcon = async function( iconName ) {\n    var icon = await defaultIconProviderService.getAwIcon( iconName );\n    if( !icon ) {\n        icon = _getIMGTag( iconName );\n    }\n    return icon;\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String}Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */\nexport let getIndicatorIcon = async function( iconName ) {\n    var icon = await defaultIconProviderService.getIndicatorIcon( iconName );\n    if( !icon ) {\n        icon = _getIMGTag( 'indicator' + iconName );\n    }\n    return icon;\n};\n/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string or img tag .\n */\nexport let getIcon = async function( iconName ) {\n    var icon = await defaultIconProviderService.getIcon( iconName );\n    if( !icon ) {\n        icon = _getIMGTag( iconName );\n    }\n    return icon;\n};\n\nexports = {\n    getTypeIcon,\n    getTypeIconFileTag,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTileIcon,\n    getMiscIcon,\n    getCmdIcon,\n    getAwIcon,\n    getIndicatorIcon,\n    getIcon\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/workspaceUtils\n */import _ from'lodash';/**\n * Get the kit list from the workspace configurations\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } inclusive kits\n */const getKitsFromConfigurations=availableConfigurations=>{const regex=new RegExp('^kit::(.*)');var inclusiveKits=[];_.forEach(availableConfigurations,page=>{var t=regex.exec(page);if(t!==null&&t[1]){inclusiveKits.push(t[1]);}});return inclusiveKits;};/**\n * Remove the kit entries from the workspace\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } all inclusive configurations\n */const removeKitsFromConfigurations=availableConfigurations=>{return availableConfigurations.filter(entry=>!/^kit::/.test(entry));};export const resolveKitDefinitions=(workspaceObject,allKitsJson,allModules2StatesJson)=>{if(workspaceObject.workspaceType==='Exclusive'){var inclusiveKitsForPages=getKitsFromConfigurations(workspaceObject.availablePages);var availPages=removeKitsFromConfigurations(workspaceObject.availablePages);if(availPages){workspaceObject.availablePages=availPages;}workspaceObject.availablePages=addConfigurationsFromKits(allKitsJson,inclusiveKitsForPages,workspaceObject.availablePages,allModules2StatesJson,'states');if(workspaceObject.includedCommands){var inclusiveKitsForCommands=getKitsFromConfigurations(workspaceObject.includedCommands);var includedCommands=removeKitsFromConfigurations(workspaceObject.includedCommands);if(includedCommands){workspaceObject.includedCommands=includedCommands;}workspaceObject.includedCommands=addConfigurationsFromKits(allKitsJson,inclusiveKitsForCommands,workspaceObject.includedCommands,allModules2StatesJson,'commands');}if(workspaceObject.excludedCommands){var exclusiveKitsForCommands=getKitsFromConfigurations(workspaceObject.excludedCommands);var excludedCommands=removeKitsFromConfigurations(workspaceObject.excludedCommands);if(excludedCommands){workspaceObject.excludedCommands=excludedCommands;}workspaceObject.excludedCommands=addConfigurationsFromKits(allKitsJson,exclusiveKitsForCommands,workspaceObject.excludedCommands,allModules2StatesJson,'commands');}}return workspaceObject;};/**\n * Add all kit entries in the workspace\n *\n * @param {Object} allKitsJson - all kits in the solution\n * @param {Object} inclusiveKits - all kit entries in the workspace\n * @param {Object} availableConfigurations - all configurations in the workspace\n * @param {Object} allStatesJson - all states in the solution\n * @param {String} key - Key of the Array against which kit should be resolved\n * @param {String} path - path of the Array against which kit should be resolved\n * @return {Array} all inclusive configurations\n */const addConfigurationsFromKits=(allKitsJson,inclusiveKits,availableConfigurations,allStatesJson,key)=>{var kitModules=[];var inclusiveModules=null;_.forEach(inclusiveKits,kit=>{if(allKitsJson[kit]){const kitContent=allKitsJson[kit].content;if(kitContent){var kitMod=_.get(kitContent,'modules');if(kitMod){kitModules=_.union(kitModules,kitMod);}}}});if(kitModules&&kitModules.length>0){inclusiveModules=_.union(kitModules,inclusiveModules);}var allInclusiveConfigurations=[];if(inclusiveModules!==null){for(let module of inclusiveModules){var moduleDefination=allStatesJson[module];var moduleJsonObjects;var compareJsonObject=_.get(moduleDefination,key);if(compareJsonObject){moduleJsonObjects=compareJsonObject;var moduleEntries=Object.keys(moduleJsonObjects);allInclusiveConfigurations=_.union(allInclusiveConfigurations,moduleEntries);}}}allInclusiveConfigurations=_.union(availableConfigurations,allInclusiveConfigurations);return allInclusiveConfigurations;};export default{resolveKitDefinitions};","map":null,"metadata":{},"sourceType":"module"}
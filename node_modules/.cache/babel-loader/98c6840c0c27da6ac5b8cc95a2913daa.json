{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-disable no-console */\n\n/**\n * This service is used to announce various level logging events to the console.\n * <p>\n * Expected URL patterns:<br>\n * (1) http://localhost:3000?logLevel=ERROR<br>\n * (2) http://localhost:3000?logLevel=ERROR&locale=fr<br>\n * (3) http://localhost:8080/?logLevel=ERROR#/Declarative%20Building%20Blocks/Elements/aw-autofocus\n *\n * APIs :\n * (1) isDebugEnabled(): Checks whether this Logger is enabled for the DEBUG Level. Returns: true if debug output is enabled.\n * (2) isErrorEnabled(): Checks whether this Logger is enabled for the ERROR Level. Returns: true if error output is enabled.\n * (3) isInfoEnabled(): Checks whether this Logger is enabled for the INFO Level. Returns: true if info output is enabled.\n * (4) isTraceEnabled(): Checks whether this Logger is enabled for the TRACE Level. Returns: true if trace output is enabled.\n * (5) isWarnEnabled(): Checks whether this Logger is enabled for the WARN Level. Returns: true if warning output is enabled.\n * (6) debug(): Displays a message in the console. You pass one or more objects to this method, each of which are evaluated and concatenated into a space-delimited string.\n * The first parameter you pass may contain format specifiers, a string token composed of the percent sign (%) followed by a letter that indicates the formatting to be applied.\n * (7) info(): Identical to debug()\n * (8) error(): Similar to info() but also includes a stack trace from where the method was called.\n * (9) warn(): This API is like info() but also displays a yellow warning icon along with the logged message.\n * (10) trace(): Prints a stack trace from the point where the method was called, including links to the specific lines in the JavaScript source.\n *\n * @module js/logger\n * @publishedApolloService\n */\nimport browserUtils from 'js/browserUtils';\nvar exports = {};\n/** Log correlation ID. */\n\nvar _logCorrelationID = '';\n/** How many times the log correlation id has been updated */\n\nvar _logCorrelationIDUpdates = 0;\n/** Random base for log correlation id to help prevent collisions */\n\nvar _logCorrelationBase = Math.random().toString(36).substring(2);\n/** Event Bus */\n\n\nvar _eventBus;\n/** Logger output level. */\n\n\nvar _level;\n\nswitch (browserUtils.getUrlAttributes().logLevel) {\n  case 'OFF':\n    _level = 0;\n    break;\n\n  case 'ERROR':\n  case 'SEVERE':\n    _level = 1;\n    break;\n\n  case 'WARN':\n  case 'WARNING':\n    _level = 2;\n    break;\n\n  case 'INFO':\n  case 'CONFIG':\n    _level = 3;\n    break;\n\n  case 'DEBUG':\n  case 'FINE':\n    _level = 4;\n    break;\n\n  case 'TRACE':\n  case 'FINER':\n  case 'FINEST':\n    _level = 5;\n    break;\n\n  case 'ALL':\n    _level = 6;\n    break;\n\n  default:\n    _level = 3;\n    break;\n}\n/**\n * Support Node.js usage of this service. window isn't defined & it's missing console.debug & console.warn.\n */\n\n\nif (!console.error) {\n  console.error = console.log;\n}\n\nif (!console.warn) {\n  console.warn = console.log;\n}\n\nif (!console.info) {\n  console.info = console.log;\n}\n\nif (!console.debug) {\n  console.debug = console.log;\n}\n\nif (!console.trace) {\n  console.trace = console.log;\n}\n/**\n * @param {String} levelIn - log level\n * @param {output} output string\n */\n\n\nvar postLog = function (levelIn, output) {\n  if (_eventBus && _eventBus.publish) {\n    _eventBus.publish('log', {\n      level: levelIn,\n      output: output\n    });\n  }\n};\n/**\n * @return {String} log correlation ID\n */\n\n\nexport let getCorrelationID = function () {\n  return _logCorrelationID + ':' + _logCorrelationBase + '.' + Date.now();\n};\n/**\n * @return {String} log correlation ID\n */\n\nfunction getCorrelationIDPrefix() {\n  return _logCorrelationID ? _logCorrelationID + '\\n' : '';\n}\n/**\n * @param {String} prefix log correlation ID prefix\n */\n\n\nexport let updateCorrelationID = function (prefix) {\n  if (prefix) {\n    _logCorrelationIDUpdates++;\n    _logCorrelationID = prefix + '/' + _logCorrelationIDUpdates;\n\n    if (exports.isTraceEnabled()) {\n      exports.trace('CorrelationID changed: ' + _logCorrelationID);\n    }\n  } else {\n    _logCorrelationID = Date.now().toString();\n  }\n};\n/**\n * Checks whether this Logger is enabled for the ERROR Level.\n *\n * @returns {boolean} true if error output is enabled.\n */\n\nexport let isErrorEnabled = function () {\n  return _level >= 1;\n};\n/**\n * Checks whether this Logger is enabled for the WARN Level.\n *\n * @returns {boolean} true if warning output is enabled.\n */\n\nexport let isWarnEnabled = function () {\n  return _level >= 2;\n};\n/**\n * Checks whether this Logger is enabled for the INFO Level.\n *\n * @returns {boolean} true if info output is enabled.\n */\n\nexport let isInfoEnabled = function () {\n  return _level >= 3;\n};\n/**\n * Checks whether this Logger is enabled for the DEBUG Level.\n *\n * @returns {boolean} true if debug output is enabled.\n */\n\nexport let isDebugEnabled = function () {\n  return _level >= 4;\n};\n/**\n * Checks whether this Logger is enabled for the TRACE Level.\n *\n * @returns {boolean} true if trace output is enabled.\n */\n\nexport let isTraceEnabled = function () {\n  return _level >= 5;\n};\n/**\n * Handle argument processing to support IE short coming.\n *\n * @return {Array} arguments to console function\n */\n\nfunction handleArg() {\n  var args = [getCorrelationIDPrefix()];\n\n  for (var ii = 0; ii < arguments.length; ii++) {\n    args.push(arguments[ii]);\n  }\n\n  return args;\n}\n/**\n * Similar to info() but also includes a stack trace from where the method was called.\n */\n\n\nexport let error = function () {\n  if (exports.isErrorEnabled()) {\n    console.error.apply(console, handleArg.apply(this, arguments));\n    postLog('SEVERE', Array.prototype.join.call(arguments, ' '));\n  }\n};\n/**\n * This method is like info() but also displays a yellow warning icon along with the logged message.\n */\n\nexport let warn = function () {\n  if (exports.isWarnEnabled()) {\n    console.warn.apply(console, handleArg.apply(this, arguments));\n    postLog('WARNING', Array.prototype.join.call(arguments, ' '));\n  }\n};\n/**\n * This method is identical to debug() except for log level = 'CONFIG'.\n */\n\nexport let info = function () {\n  if (exports.isInfoEnabled()) {\n    console.info.apply(console, handleArg.apply(this, arguments));\n    postLog('CONFIG', Array.prototype.join.call(arguments, ' '));\n  }\n};\nexport let success = info;\n/**\n * Displays a message in the console. You pass one or more objects to this method, each of which are evaluated and\n * concatenated into a space-delimited string. The first parameter you pass may contain format specifiers, a string\n * token composed of the percent sign (%) followed by a letter that indicates the formatting to be applied.\n */\n\nexport let debug = function () {\n  if (exports.isDebugEnabled()) {\n    console.debug.apply(console, handleArg.apply(this, arguments));\n    postLog('FINE', Array.prototype.join.call(arguments, ' '));\n  }\n};\n/**\n * Prints a stack trace from the point where the method was called, including links to the specific lines in the\n * JavaScript source.\n */\n\nexport let trace = function () {\n  if (exports.isTraceEnabled()) {\n    console.debug.apply(console, handleArg.apply(this, arguments));\n    postLog('FINER', Array.prototype.join.call(arguments, ' '));\n  }\n};\n/**\n * The method assumes there would be a 'declarativeLog' method on console and it routes logs to the method.\n * 'console.declarativeLog' can be used by devTools to record the logs. The method takes one parameter as a 'string'.\n */\n\nexport let declarativeLog = function () {\n  if (console.declarativeLog) {\n    console.declarativeLog.apply(console, handleArg.apply(this, arguments));\n  }\n};\n/**\n * Check if 'declarative logging' is enabled.\n *\n * @return {Boolean} TRUE if declarative debug logging is curently enabled.\n */\n\nexport let isDeclarativeLogEnabled = function () {\n  return Boolean(console.declarativeLog);\n};\n/**\n * Set event bus.\n *\n * @param {Object} eventBus - The event bus API object.\n */\n\nexport let setEventBus = function (eventBus) {\n  _eventBus = eventBus;\n};\nexports = {\n  getCorrelationID,\n  updateCorrelationID,\n  isErrorEnabled,\n  isWarnEnabled,\n  isInfoEnabled,\n  isDebugEnabled,\n  isTraceEnabled,\n  error,\n  warn,\n  info,\n  success,\n  debug,\n  trace,\n  declarativeLog,\n  isDeclarativeLogEnabled,\n  setEventBus\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/logger.js"],"names":["exports","_logCorrelationID","_logCorrelationIDUpdates","_logCorrelationBase","Math","browserUtils","_level","console","postLog","_eventBus","level","output","getCorrelationID","Date","updateCorrelationID","prefix","isErrorEnabled","isWarnEnabled","isInfoEnabled","isDebugEnabled","isTraceEnabled","args","getCorrelationIDPrefix","ii","arguments","error","handleArg","Array","warn","info","success","debug","trace","declarativeLog","isDeclarativeLogEnabled","Boolean","setEventBus"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-disable no-console */\n\n/**\n * This service is used to announce various level logging events to the console.\n * <p>\n * Expected URL patterns:<br>\n * (1) http://localhost:3000?logLevel=ERROR<br>\n * (2) http://localhost:3000?logLevel=ERROR&locale=fr<br>\n * (3) http://localhost:8080/?logLevel=ERROR#/Declarative%20Building%20Blocks/Elements/aw-autofocus\n *\n * APIs :\n * (1) isDebugEnabled(): Checks whether this Logger is enabled for the DEBUG Level. Returns: true if debug output is enabled.\n * (2) isErrorEnabled(): Checks whether this Logger is enabled for the ERROR Level. Returns: true if error output is enabled.\n * (3) isInfoEnabled(): Checks whether this Logger is enabled for the INFO Level. Returns: true if info output is enabled.\n * (4) isTraceEnabled(): Checks whether this Logger is enabled for the TRACE Level. Returns: true if trace output is enabled.\n * (5) isWarnEnabled(): Checks whether this Logger is enabled for the WARN Level. Returns: true if warning output is enabled.\n * (6) debug(): Displays a message in the console. You pass one or more objects to this method, each of which are evaluated and concatenated into a space-delimited string.\n * The first parameter you pass may contain format specifiers, a string token composed of the percent sign (%) followed by a letter that indicates the formatting to be applied.\n * (7) info(): Identical to debug()\n * (8) error(): Similar to info() but also includes a stack trace from where the method was called.\n * (9) warn(): This API is like info() but also displays a yellow warning icon along with the logged message.\n * (10) trace(): Prints a stack trace from the point where the method was called, including links to the specific lines in the JavaScript source.\n *\n * @module js/logger\n * @publishedApolloService\n */\nimport browserUtils from 'js/browserUtils';\n\nvar exports = {};\n\n/** Log correlation ID. */\nvar _logCorrelationID = '';\n\n/** How many times the log correlation id has been updated */\nvar _logCorrelationIDUpdates = 0;\n\n/** Random base for log correlation id to help prevent collisions */\nvar _logCorrelationBase = Math.random().toString( 36 ).substring( 2 );\n\n/** Event Bus */\nvar _eventBus;\n\n/** Logger output level. */\nvar _level;\n\nswitch ( browserUtils.getUrlAttributes().logLevel ) {\n    case 'OFF':\n        _level = 0;\n        break;\n    case 'ERROR':\n    case 'SEVERE':\n        _level = 1;\n        break;\n    case 'WARN':\n    case 'WARNING':\n        _level = 2;\n        break;\n    case 'INFO':\n    case 'CONFIG':\n        _level = 3;\n        break;\n    case 'DEBUG':\n    case 'FINE':\n        _level = 4;\n        break;\n    case 'TRACE':\n    case 'FINER':\n    case 'FINEST':\n        _level = 5;\n        break;\n    case 'ALL':\n        _level = 6;\n        break;\n    default:\n        _level = 3;\n        break;\n}\n\n/**\n * Support Node.js usage of this service. window isn't defined & it's missing console.debug & console.warn.\n */\nif( !console.error ) {\n    console.error = console.log;\n}\nif( !console.warn ) {\n    console.warn = console.log;\n}\nif( !console.info ) {\n    console.info = console.log;\n}\nif( !console.debug ) {\n    console.debug = console.log;\n}\nif( !console.trace ) {\n    console.trace = console.log;\n}\n\n/**\n * @param {String} levelIn - log level\n * @param {output} output string\n */\nvar postLog = function( levelIn, output ) {\n    if( _eventBus && _eventBus.publish ) {\n        _eventBus.publish( 'log', {\n            level: levelIn,\n            output: output\n        } );\n    }\n};\n\n/**\n * @return {String} log correlation ID\n */\nexport let getCorrelationID = function() {\n    return _logCorrelationID + ':' + _logCorrelationBase + '.' + Date.now();\n};\n\n/**\n * @return {String} log correlation ID\n */\nfunction getCorrelationIDPrefix() {\n    return _logCorrelationID ? _logCorrelationID + '\\n' : '';\n}\n\n/**\n * @param {String} prefix log correlation ID prefix\n */\nexport let updateCorrelationID = function( prefix ) {\n    if( prefix ) {\n        _logCorrelationIDUpdates++;\n        _logCorrelationID = prefix + '/' + _logCorrelationIDUpdates;\n        if( exports.isTraceEnabled() ) {\n            exports.trace( 'CorrelationID changed: ' + _logCorrelationID );\n        }\n    } else {\n        _logCorrelationID = Date.now().toString();\n    }\n};\n\n/**\n * Checks whether this Logger is enabled for the ERROR Level.\n *\n * @returns {boolean} true if error output is enabled.\n */\nexport let isErrorEnabled = function() {\n    return _level >= 1;\n};\n\n/**\n * Checks whether this Logger is enabled for the WARN Level.\n *\n * @returns {boolean} true if warning output is enabled.\n */\nexport let isWarnEnabled = function() {\n    return _level >= 2;\n};\n\n/**\n * Checks whether this Logger is enabled for the INFO Level.\n *\n * @returns {boolean} true if info output is enabled.\n */\nexport let isInfoEnabled = function() {\n    return _level >= 3;\n};\n\n/**\n * Checks whether this Logger is enabled for the DEBUG Level.\n *\n * @returns {boolean} true if debug output is enabled.\n */\nexport let isDebugEnabled = function() {\n    return _level >= 4;\n};\n\n/**\n * Checks whether this Logger is enabled for the TRACE Level.\n *\n * @returns {boolean} true if trace output is enabled.\n */\nexport let isTraceEnabled = function() {\n    return _level >= 5;\n};\n\n/**\n * Handle argument processing to support IE short coming.\n *\n * @return {Array} arguments to console function\n */\nfunction handleArg() {\n    var args = [ getCorrelationIDPrefix() ];\n    for( var ii = 0; ii < arguments.length; ii++ ) {\n        args.push( arguments[ ii ] );\n    }\n    return args;\n}\n\n/**\n * Similar to info() but also includes a stack trace from where the method was called.\n */\nexport let error = function() {\n    if( exports.isErrorEnabled() ) {\n        console.error.apply( console, handleArg.apply( this, arguments ) );\n        postLog( 'SEVERE', Array.prototype.join.call( arguments, ' ' ) );\n    }\n};\n\n/**\n * This method is like info() but also displays a yellow warning icon along with the logged message.\n */\nexport let warn = function() {\n    if( exports.isWarnEnabled() ) {\n        console.warn.apply( console, handleArg.apply( this, arguments ) );\n        postLog( 'WARNING', Array.prototype.join.call( arguments, ' ' ) );\n    }\n};\n\n/**\n * This method is identical to debug() except for log level = 'CONFIG'.\n */\nexport let info = function() {\n    if( exports.isInfoEnabled() ) {\n        console.info.apply( console, handleArg.apply( this, arguments ) );\n        postLog( 'CONFIG', Array.prototype.join.call( arguments, ' ' ) );\n    }\n};\n\nexport let success = info;\n\n/**\n * Displays a message in the console. You pass one or more objects to this method, each of which are evaluated and\n * concatenated into a space-delimited string. The first parameter you pass may contain format specifiers, a string\n * token composed of the percent sign (%) followed by a letter that indicates the formatting to be applied.\n */\nexport let debug = function() {\n    if( exports.isDebugEnabled() ) {\n        console.debug.apply( console, handleArg.apply( this, arguments ) );\n        postLog( 'FINE', Array.prototype.join.call( arguments, ' ' ) );\n    }\n};\n\n/**\n * Prints a stack trace from the point where the method was called, including links to the specific lines in the\n * JavaScript source.\n */\nexport let trace = function() {\n    if( exports.isTraceEnabled() ) {\n        console.debug.apply( console, handleArg.apply( this, arguments ) );\n        postLog( 'FINER', Array.prototype.join.call( arguments, ' ' ) );\n    }\n};\n\n/**\n * The method assumes there would be a 'declarativeLog' method on console and it routes logs to the method.\n * 'console.declarativeLog' can be used by devTools to record the logs. The method takes one parameter as a 'string'.\n */\nexport let declarativeLog = function() {\n    if( console.declarativeLog ) {\n        console.declarativeLog.apply( console, handleArg.apply( this, arguments ) );\n    }\n};\n\n/**\n * Check if 'declarative logging' is enabled.\n *\n * @return {Boolean} TRUE if declarative debug logging is curently enabled.\n */\nexport let isDeclarativeLogEnabled = function() {\n    return Boolean( console.declarativeLog );\n};\n\n/**\n * Set event bus.\n *\n * @param {Object} eventBus - The event bus API object.\n */\nexport let setEventBus = function( eventBus ) {\n    _eventBus = eventBus;\n};\n\nexports = {\n    getCorrelationID,\n    updateCorrelationID,\n    isErrorEnabled,\n    isWarnEnabled,\n    isInfoEnabled,\n    isDebugEnabled,\n    isTraceEnabled,\n    error,\n    warn,\n    info,\n    success,\n    debug,\n    trace,\n    declarativeLog,\n    isDeclarativeLogEnabled,\n    setEventBus\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
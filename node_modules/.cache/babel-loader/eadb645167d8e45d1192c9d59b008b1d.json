{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/aw.searchFilter.service\n * @requires js/filterPanelUtils\n */\nimport AwStateService from 'js/awStateService';\nimport AwPromiseService from 'js/awPromiseService';\nimport localeService from 'js/localeService';\nimport appCtxService from 'js/appCtxService';\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport cdm from 'soa/kernel/clientDataModel';\nimport _ from 'lodash';\nimport analyticsSvc from 'js/analyticsService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport eventBus from 'js/eventBus';\nvar localTextBundle = {};\nvar _local = 'local';\nvar OWNING_SITE = 'OwningSite.owning_site';\nexport let _dateFilterMarker = '_0Z0_';\nexport let _dateFilterLevels = ['year', 'year_month', 'week', 'year_month_day'];\nexport let _filterSeparator = '~';\nconst _filterSeparatorOption1 = '~';\nconst _filterSeparatorOption2 = '##';\nexport let _filterValueSeparator = appCtxService.ctx.preferences && appCtxService.ctx.preferences.AW_FacetValue_Separator && appCtxService.ctx.preferences.AW_FacetValue_Separator[0] ? appCtxService.ctx.preferences.AW_FacetValue_Separator[0] : '^';\n\nconst removeSelectedFiltersFromCategory = category => {\n  if (category && category.filterValues && category.filterValues.length > 0) {\n    for (let filterIndex = 0; filterIndex < category.filterValues.length; filterIndex++) {\n      category.filterValues[filterIndex].selected.dbValue = false;\n      category.filterValues[filterIndex].selected.value = false;\n    }\n  }\n\n  return category;\n};\n\nexport let clearNumericRangeInfoFromCategory = category => {\n  if (category) {\n    delete category.numericRangeString;\n    delete category.numericrange;\n  }\n\n  return category;\n};\nexport let clearDateRangeInfoFromCategory = category => {\n  if (category) {\n    delete category.dateRangeString;\n    category.daterange.endDate.value = -62135579040000;\n    category.daterange.endDate.dbValue = -62135579040000;\n    category.daterange.startDate.value = -62135579040000;\n    category.daterange.startDate.dbValue = -62135579040000;\n  }\n\n  return category;\n};\nexport let clearAllSelectedFiltersAndRanges = (categories, activeFilters, positivePendingFilters) => {\n  if (categories && categories.length > 0 && activeFilters && activeFilters.length > 0) {\n    let categoriesToRemoveSelectionsAndRangesFrom = new Set();\n\n    for (let activeFilterIndex = 0; activeFilterIndex < activeFilters.length; activeFilterIndex++) {\n      let categoryName = activeFilters[activeFilterIndex].name;\n      let dateMarkerIndex = categoryName && categoryName.length > 0 ? categoryName.indexOf(_dateFilterMarker) : -1;\n      categoryName = categoryName && dateMarkerIndex > -1 ? categoryName.substring(0, dateMarkerIndex) : categoryName;\n\n      if (categoryName && categoryName.length > 0) {\n        categoriesToRemoveSelectionsAndRangesFrom.add(categoryName);\n      }\n    }\n\n    if (positivePendingFilters && positivePendingFilters.length > 0) {\n      for (let positivePendingFilterIndex = 0; positivePendingFilterIndex < positivePendingFilters.length; positivePendingFilterIndex++) {\n        let categoryName = positivePendingFilters[positivePendingFilterIndex].name;\n        let dateMarkerIndex = categoryName.indexOf(_dateFilterMarker);\n        categoryName = categoryName && dateMarkerIndex > -1 ? categoryName.substring(0, dateMarkerIndex) : categoryName;\n\n        if (categoryName && categoryName.length > 0) {\n          categoriesToRemoveSelectionsAndRangesFrom.add(categoryName);\n        }\n      }\n    }\n\n    for (let categoryIndex = 0; categoryIndex < categories.length; categoryIndex++) {\n      let categoryName = categories[categoryIndex].internalName;\n\n      if (categoryName && categoriesToRemoveSelectionsAndRangesFrom.has(categoryName)) {\n        let eachCategory = categories[categoryIndex];\n        eachCategory = removeSelectedFiltersFromCategory(eachCategory);\n\n        switch (eachCategory.type) {\n          case 'DateFilter':\n            eachCategory = clearDateRangeInfoFromCategory(eachCategory);\n            break;\n\n          case 'NumericFilter':\n            eachCategory = clearNumericRangeInfoFromCategory(eachCategory);\n            break;\n\n          default:\n            break;\n        }\n\n        categories[categoryIndex] = eachCategory;\n      }\n    }\n  }\n\n  return categories;\n};\n\nconst getOnlyFilterValuesFromActiveFilterMap = activeFilterMapValue => {\n  let values = [];\n\n  if (activeFilterMapValue && activeFilterMapValue.length > 0) {\n    for (let index = 0; index < activeFilterMapValue.length; index++) {\n      switch (activeFilterMapValue[index].searchFilterType) {\n        case 'DateFilter':\n          {\n            if (activeFilterMapValue[index].startDateValue.includes(filterPanelUtils.BEGINNING_OF_TIME)) {\n              values.push(filterPanelUtils.INTERNAL_DATE_FILTER + '*' + '_TO_' + activeFilterMapValue[index].endDateValue);\n            } else if (activeFilterMapValue[index].startDateValue.includes(filterPanelUtils.ENDING_OF_TIME)) {\n              values.push(filterPanelUtils.INTERNAL_DATE_FILTER + activeFilterMapValue[index].startDateValue + '_TO_' + '*');\n            } else {\n              values.push(filterPanelUtils.INTERNAL_DATE_FILTER + activeFilterMapValue[index].startDateValue + '_TO_' + activeFilterMapValue[index].endDateValue);\n            }\n\n            break;\n          }\n\n        case 'NumericFilter':\n          {\n            if (activeFilterMapValue[index].stringValue && activeFilterMapValue[index].stringValue.length > 0 && activeFilterMapValue[index].startEndRange !== 'NumericRange' && activeFilterMapValue[index].startEndRange !== 'NumericRangeBlankStart' && activeFilterMapValue[index].startEndRange !== 'NumericRangeBlankEnd') {\n              values.push(filterPanelUtils.INTERNAL_NUMERIC_FILTER + activeFilterMapValue[index].stringValue);\n            } else {\n              if (activeFilterMapValue[index].startNumericValue > 0 && activeFilterMapValue[index].endNumericValue > 0) {\n                values.push(filterPanelUtils.INTERNAL_NUMERIC_RANGE + activeFilterMapValue[index].startNumericValue + '_TO_' + activeFilterMapValue[index].endNumericValue);\n              } else if (activeFilterMapValue[index].startNumericValue > 0) {\n                values.push(filterPanelUtils.INTERNAL_NUMERIC_RANGE + activeFilterMapValue[index].startNumericValue + '_TO_');\n              } else {\n                values.push(filterPanelUtils.INTERNAL_NUMERIC_RANGE + '_TO_' + activeFilterMapValue[index].endNumericValue);\n              }\n            }\n\n            break;\n          }\n\n        case 'RadioFilter':\n        case 'StringFilter':\n          values.push(activeFilterMapValue[index].stringValue);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n\n  return values.sort();\n};\n\nexport let getPendingFiltersMap = (selectedFiltersMap, activeFilterMap) => {\n  let positivePendingFilterMap = {};\n  let negativePendingFilterMap = {};\n  const orderedSelectedFiltersMap = Object.keys(selectedFiltersMap).sort().reduce((obj, key) => {\n    obj[key] = selectedFiltersMap[key];\n    return obj;\n  }, {});\n  const orderedActiveFiltersMap = Object.keys(activeFilterMap).sort().reduce((obj, key) => {\n    obj[key] = activeFilterMap[key];\n    return obj;\n  }, {});\n\n  for (const [orderedSelectedFiltersMapKey, orderedSelectedFiltersMapValue] of Object.entries(orderedSelectedFiltersMap)) {\n    if (!orderedActiveFiltersMap[orderedSelectedFiltersMapKey]) {\n      positivePendingFilterMap[orderedSelectedFiltersMapKey] = orderedSelectedFiltersMap[orderedSelectedFiltersMapKey];\n    } else if (orderedActiveFiltersMap[orderedSelectedFiltersMapKey]) {\n      let activeFiltersWithJustFilterValues = getOnlyFilterValuesFromActiveFilterMap(orderedActiveFiltersMap[orderedSelectedFiltersMapKey]);\n\n      let positivePendingFiltersWithJustValues = _.difference(orderedSelectedFiltersMapValue, activeFiltersWithJustFilterValues);\n\n      let negativePendingFiltersWithJustValues = _.difference(activeFiltersWithJustFilterValues, orderedSelectedFiltersMapValue);\n\n      if (positivePendingFiltersWithJustValues && positivePendingFiltersWithJustValues.length > 0) {\n        // these are positive filters, meaning they are filters which got selected.\n        positivePendingFilterMap[orderedSelectedFiltersMapKey] = positivePendingFiltersWithJustValues;\n      }\n\n      if (negativePendingFiltersWithJustValues && negativePendingFiltersWithJustValues.length > 0) {\n        // these are negative filters, meaning they are filters which got deselected.\n        negativePendingFilterMap[orderedSelectedFiltersMapKey] = negativePendingFiltersWithJustValues;\n      }\n    }\n  }\n\n  for (const [orderedActiveFiltersMapKey, orderedActiveFiltersMapValue] of Object.entries(orderedActiveFiltersMap)) {\n    if (!orderedSelectedFiltersMap[orderedActiveFiltersMapKey]) {\n      negativePendingFilterMap[orderedActiveFiltersMapKey] = orderedActiveFiltersMap[orderedActiveFiltersMapKey];\n    }\n  }\n\n  return {\n    positivePendingFilterMap: positivePendingFilterMap,\n    negativePendingFilterMap: negativePendingFilterMap\n  };\n};\nexport let removeDependentDateFilters = searchFilterMap => {\n  let searchFilterMapWithNonRedundantDateCategories = _.cloneDeep(searchFilterMap);\n\n  let keys = Object.keys(searchFilterMapWithNonRedundantDateCategories);\n  let mapWithKeyAsCategoryNameAndValueAsLevelsOfDate = {};\n\n  if (keys && keys.length > 0) {\n    for (let index = 0; index < keys.length; index++) {\n      if (keys[index].includes(_dateFilterMarker) && keys[index].substr(keys[index].length - 4, 4) === _dateFilterLevels[0]) {\n        let indexOfYear = keys[index].indexOf(_dateFilterMarker);\n        let catName = keys[index].substr(0, indexOfYear);\n\n        if (mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName]) {\n          let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName];\n          existingLevels.push(1);\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = existingLevels;\n        } else {\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = [1];\n        }\n      } else if (keys[index].includes(_dateFilterMarker) && keys[index].substr(keys[index].length - 10, 10) === _dateFilterLevels[1]) {\n        let indexOfYear = keys[index].indexOf(_dateFilterMarker);\n        let catName = keys[index].substr(0, indexOfYear);\n\n        if (mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName]) {\n          let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName];\n          existingLevels.push(2);\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = existingLevels;\n        } else {\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = [2];\n        }\n      } else if (keys[index].includes(_dateFilterMarker) && keys[index].substr(keys[index].length - 4, 4) === _dateFilterLevels[2]) {\n        let indexOfYear = keys[index].indexOf(_dateFilterMarker);\n        let catName = keys[index].substr(0, indexOfYear);\n\n        if (mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName]) {\n          let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName];\n          existingLevels.push(3);\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = existingLevels;\n        } else {\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = [3];\n        }\n      } else if (keys[index].includes(_dateFilterMarker) && keys[index].substr(keys[index].length - 14, 14) === _dateFilterLevels[3]) {\n        let indexOfYear = keys[index].indexOf(_dateFilterMarker);\n        let catName = keys[index].substr(0, indexOfYear);\n\n        if (mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName]) {\n          let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName];\n          existingLevels.push(4);\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = existingLevels;\n        } else {\n          mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[catName] = [4];\n        }\n      }\n    }\n\n    for (let [key, value] of Object.entries(mapWithKeyAsCategoryNameAndValueAsLevelsOfDate)) {\n      let minLevel = 0;\n      const dateLevelOne = key + _dateFilterMarker + _dateFilterLevels[0];\n      const dateLevelTwo = key + _dateFilterMarker + _dateFilterLevels[1];\n      const dateLevelThree = key + _dateFilterMarker + _dateFilterLevels[2];\n      const dateLevelFour = key + _dateFilterMarker + _dateFilterLevels[3];\n      let isMissingSomeDateLevel = false;\n\n      if (value && value.length > 0) {\n        value.sort();\n\n        for (let index2 = 0; index2 < value.length; index2++) {\n          if (value[index2] === index2 + 1) {\n            minLevel++;\n          } else {\n            isMissingSomeDateLevel = true;\n            break;\n          }\n        }\n      }\n\n      if (isMissingSomeDateLevel) {\n        switch (minLevel) {\n          case 0:\n            {\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelOne]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelOne];\n              }\n\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelTwo]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelTwo];\n              }\n\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelThree]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelThree];\n              }\n\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelFour]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelFour];\n              }\n\n              break;\n            }\n\n          case 1:\n            {\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelTwo]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelTwo];\n              }\n\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelThree]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelThree];\n              }\n\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelFour]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelFour];\n              }\n\n              break;\n            }\n\n          case 2:\n            {\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelThree]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelThree];\n              }\n\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelFour]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelFour];\n              }\n\n              break;\n            }\n\n          case 3:\n            {\n              if (searchFilterMapWithNonRedundantDateCategories[dateLevelFour]) {\n                delete searchFilterMapWithNonRedundantDateCategories[dateLevelFour];\n              }\n\n              break;\n            }\n\n          default:\n            break;\n        }\n      }\n    }\n  }\n\n  return searchFilterMapWithNonRedundantDateCategories;\n};\nexport let removeDependentClassificationFilters = filterValue => {\n  let value = filterValue.internalName;\n  let stringValue = '';\n  let values = value.split('/');\n\n  if (values && values.length > 0) {\n    let level = parseInt(values[0]);\n\n    if (level === 0) {\n      return [];\n    } else if (level > 0) {\n      let currentLevel = level;\n      level -= 1;\n      stringValue = level.toString();\n\n      for (let index = 1; index < currentLevel + 1; index++) {\n        stringValue += '/' + values[index];\n      }\n\n      return [stringValue];\n    }\n  }\n\n  return [];\n};\nexport let chooseFilterSeparator = function (filters) {\n  let conflictFound = false;\n\n  _.forEach(filters, (value, key) => {\n    if (_.indexOf(value[0], _filterSeparatorOption1) > -1) {\n      conflictFound = true;\n      return false;\n    }\n  });\n\n  if (conflictFound) {\n    _filterSeparator = _filterSeparatorOption2;\n  } else {\n    _filterSeparator = _filterSeparatorOption1;\n  }\n};\nexport const sortFilterMapKeys = filters => {\n  let sortedFilterMap = {};\n  let keys = Object.keys(filters);\n  keys.sort();\n\n  for (let index = 0; index < keys.length; index++) {\n    let values = filters[keys[index]];\n    values.sort();\n    sortedFilterMap[keys[index]] = values;\n  }\n\n  return sortedFilterMap;\n};\nexport const processFilterValues = filterVals => {\n  for (let index = 0; index < filterVals.length; index++) {\n    let eachValue = filterVals[index];\n    eachValue = getDisplayNameForSpecialKeyWord(eachValue);\n    filterVals[index] = eachValue;\n  }\n\n  return filterVals;\n};\nexport let buildFilterString = function (filters) {\n  chooseFilterSeparator(filters);\n  filters = sortFilterMapKeys(filters);\n  return _.map(filters, function (value, key) {\n    value = processFilterValues(value);\n    return key + '=' + value.join(_filterValueSeparator);\n  }).join(_filterSeparator);\n};\nexport let isHierarchicalChildFilter = function (filterString) {\n  var isChildFilter = false;\n\n  if (filterString) {\n    var nodes = filterString.split(filterPanelUtils.HIERARCHICAL_FACET_SEPARATOR);\n\n    if (nodes && nodes.length > 2 && !isNaN(nodes[0])) {\n      var level = parseInt(nodes[0], 10);\n\n      if (level > 0) {\n        isChildFilter = true;\n      }\n    }\n  }\n\n  return isChildFilter;\n};\nexport let parseHierarchicalChildFilters = function (filterString, keepIdentifier) {\n  var filterValues = [];\n  var nodes = filterString.split(filterPanelUtils.HIERARCHICAL_FACET_SEPARATOR);\n\n  if (!isNaN(nodes[0])) {\n    var level = parseInt(nodes[0], 10);\n\n    for (var i = 0; i <= level; i++) {\n      var filterValue = i.toString();\n\n      for (var j = 1; j <= i + 1; j++) {\n        filterValue += filterPanelUtils.HIERARCHICAL_FACET_SEPARATOR + nodes[j];\n      }\n\n      if (keepIdentifier) {\n        filterValues.push(filterPanelUtils.INTERNAL_OBJECT_FILTER + filterValue);\n      } else {\n        filterValues.push(filterValue);\n      }\n    }\n  }\n\n  return filterValues;\n};\nexport let getFilters = function (groupByCategory, sort, checkHierarchy, keepHierarchyIdentifier, isShapeOrSavedSearch) {\n  var filterMap = {};\n\n  if (AwStateService.instance.params.filter) {\n    // Build the filter map\n    AwStateService.instance.params.filter.split(_filterSeparator).map(function (filterVal) {\n      var separatorIndex = filterVal.search('=');\n      var key = filterVal.slice(0, separatorIndex);\n      var valuePart = filterVal.slice(separatorIndex + 1);\n      var filterPair = [];\n      filterPair[0] = key;\n      filterPair[1] = valuePart;\n\n      if (filterPair.length === 2 && filterPair[1] !== '') {\n        var realFilter = filterPanelUtils.getRealFilterWithNoFilterType(filterPair[1]);\n\n        if (checkHierarchy && isHierarchicalChildFilter(realFilter) && checkIfObjectFilterType(filterPair[0])) {\n          filterMap[filterPair[0]] = parseHierarchicalChildFilters(realFilter, keepHierarchyIdentifier);\n        } else if (isShapeOrSavedSearch) {\n          if (filterPair[0] !== 'ShapeSearchProvider' && filterPair[0] !== 'Geolus Criteria' && filterPair[0] !== 'SS1shapeBeginFilter' && filterPair[0] !== 'SS1shapeEndFilter' && filterPair[0] !== 'SS1partShapeFilter' && filterPair[0] !== 'UpdatedResults.updated_results') {\n            filterMap[filterPair[0]] = filterPair[1].split(_filterValueSeparator);\n          }\n        } else {\n          filterMap[filterPair[0]] = filterPair[1].split(_filterValueSeparator);\n        }\n      }\n    });\n  }\n\n  if (groupByCategory) {\n    return groupByCategory(filterMap);\n  }\n\n  return sort ? getSortedFilterMap(filterMap) : filterMap;\n};\nexport let getFilterMapWithPrefilters = () => {\n  var filterMap = {};\n\n  if (AwStateService.instance.params.filter) {\n    AwStateService.instance.params.filter.split(_filterSeparator).map(function (filterVal) {\n      var separatorIndex = filterVal.search('=');\n      var key = filterVal.slice(0, separatorIndex);\n      var valuePart = filterVal.slice(separatorIndex + 1);\n      var filterPair = [];\n      filterPair[0] = key;\n      filterPair[1] = valuePart;\n\n      if (filterPair.length === 2 && filterPair[1] !== '') {\n        filterMap[filterPair[0]] = filterPair[1].split(_filterValueSeparator);\n      }\n    });\n  }\n\n  return filterMap;\n};\nexport let checkIfObjectFilterType = function (filterCategoryName) {\n  var isObjectFilterType = false;\n  var responseFilterMap = appCtxService.getCtx('searchResponseInfo.searchFilterMap');\n\n  if (responseFilterMap && filterCategoryName && responseFilterMap[filterCategoryName]) {\n    var filters = [];\n    filters = responseFilterMap[filterCategoryName];\n\n    if (filters && filters.length > 0) {\n      if (filters[0].searchFilterType === 'ObjectFilter') {\n        isObjectFilterType = true;\n      }\n    }\n  }\n\n  return isObjectFilterType;\n};\nexport let getSortedFilterMap = function (params) {\n  return _.reduce(params, function (acc, nxt, key) {\n    var trueKey = key.split(_dateFilterMarker)[0];\n\n    if (trueKey !== key) {\n      _.forEach(nxt, function (nxtValue) {\n        var decoratedNxt = {};\n        decoratedNxt.property = key;\n        decoratedNxt.filter = nxtValue;\n\n        if (acc[trueKey]) {\n          acc[trueKey].push(decoratedNxt);\n        } else {\n          acc[trueKey] = [];\n          acc[trueKey].push(decoratedNxt);\n        }\n      });\n    } else {\n      if (acc[key]) {\n        acc[key] = acc[key].concat(nxt);\n      } else {\n        acc[key] = nxt;\n      }\n    }\n\n    return acc;\n  }, {});\n};\nexport let buildSearchFiltersInt = function (searchContext, filterMap) {\n  _.forEach(filterMap, function (value, key) {\n    // If it's a valid filter\n    // get filter type\n    var filterType = 'StringFilter';\n\n    if (key === OWNING_SITE) {\n      filterType = 'RadioFilter';\n      searchContext.activeFilterMap[key] = value.map(function (v1) {\n        var filter = {};\n        filter.searchFilterType = 'RadioFilter';\n        filter.stringValue = v1;\n        return filter;\n      });\n    } else {\n      // Map is used directly by data provider\n      searchContext.activeFilterMap[key] = value.map(function (v1) {\n        var filter = {};\n\n        if (_.startsWith(v1, filterPanelUtils.INTERNAL_DATE_FILTER)) {\n          filter = filterPanelUtils.getDateRangeFilter(v1.substring(12, v1.length));\n        } else if (_.startsWith(v1, filterPanelUtils.INTERNAL_NUMERIC_RANGE)) {\n          filter = filterPanelUtils.getNumericRangeFilter(v1.substring(14, v1.length));\n        } else if (_.startsWith(v1, filterPanelUtils.INTERNAL_NUMERIC_FILTER)) {\n          filter.searchFilterType = 'NumericFilter';\n          var numericValue = parseFloat(v1.substring(15, v1.length));\n\n          if (!isNaN(numericValue)) {\n            filter.startNumericValue = numericValue;\n            filter.endNumericValue = numericValue;\n          }\n\n          filter.stringValue = v1.substring(15, v1.length);\n        } else if (_.startsWith(v1, filterPanelUtils.INTERNAL_OBJECT_FILTER)) {\n          // SOA handles object filters differently in aw4.0.\n          // So we need to pass \"StringFilter\" until server side is changed to be the same as aw3.4\n          // filter.searchFilterType = \"ObjectFilter\";\n          filter.searchFilterType = 'StringFilter';\n          filter.stringValue = v1.substring(14, v1.length);\n        } else if (v1 === '$TODAY' || v1 === '$THIS_WEEK' || v1 === '$THIS_MONTH') {\n          // For special Solr filters like TODAY, THIS_WEEK or THIS_MONTH, mark the filter as DateFilter but keep string values\n          filter.searchFilterType = 'DateFilter';\n          filter.stringValue = v1;\n        } else {\n          filter.searchFilterType = 'StringFilter';\n          filter.stringValue = v1;\n        }\n\n        filterType = filter.searchFilterType;\n        return filter;\n      });\n    } // Array to maintain the order\n\n\n    searchContext.activeFilters.push({\n      name: key,\n      values: value,\n      type: filterType\n    });\n  });\n};\nexport let buildSearchFilters = function (context) {\n  // Initialize the search context if necessary\n  let searchContext = {}; // Filter map and filter array are both required\n  // Input to performSearch needs filter map\n\n  searchContext.activeFilterMap = context && context.search && context.search.activeFilterMap ? _.cloneDeep(context.search.activeFilterMap) : {}; // But order matters in some cases and so array is needed\n\n  searchContext.activeFilters = []; // Build up filter map and array\n\n  buildSearchFiltersInt(searchContext, getFilters());\n  return searchContext;\n};\nexport let buildSearchFiltersFromSearchState = function (activeSelectedFiltersMap) {\n  let activeFiltersMap = {\n    activeFilterMap: {},\n    activeFilters: []\n  }; // Build up filter map and array\n\n  buildSearchFiltersInt(activeFiltersMap, activeSelectedFiltersMap);\n  return activeFiltersMap;\n};\nexport let getFilterStringFromActiveFilterMap = function (searchFilterMap, searchFilterCategories) {\n  var searchParams = getFilters(false);\n  var displayString = '';\n\n  _.map(searchParams, function (value, property) {\n    var trueProperty = property.split(_dateFilterMarker)[0]; // If it's a valid filter\n\n    var index = _.findIndex(searchFilterCategories, function (o) {\n      return o.internalName === trueProperty;\n    }); // Get the filter name first\n\n\n    var filterName = '';\n\n    if (index > -1) {\n      filterName = searchFilterCategories[index].displayName;\n    } else if (!searchFilterCategories || searchFilterCategories && searchFilterCategories.length < 1) {\n      filterName = getCategoryDisplayName(property);\n    } else {\n      return '';\n    } // Get display name for all the filter values\n\n\n    var filterValues = '';\n\n    _.forEach(searchParams[property], function (filter) {\n      var filterValue = getBreadCrumbDisplayValue(searchFilterMap[property], filterPanelUtils.getRealFilterWithNoFilterType(filter), searchFilterMap[property]);\n      filterValues += filterValues === '' ? filterValue : ', ' + filterValue;\n    });\n\n    if (filterValues !== '') {\n      var individualFilterString = filterName + '=' + filterValues;\n      displayString += displayString === '' ? individualFilterString : ', ' + individualFilterString;\n    }\n  });\n\n  return displayString;\n};\nexport let convertFilterMapToSavedSearchFilterMap = function () {\n  let searchContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; //var searchContext = appCtxService.getCtx( 'search' );\n\n  var activeFilterMap = searchContext.activeFilterMap;\n  var activeFilters = searchContext.activeFilters;\n  var searchStringFilterMap = {};\n\n  if (activeFilterMap) {\n    _.forEach(activeFilterMap, function (value, key) {\n      var filters = [];\n\n      for (var indx = 0; indx < value.length; indx++) {\n        var filter = {}; // Saved search object only store SearchStringFilter types\n\n        filter.searchFilterType = 'SearchStringFilter';\n        filter.startNumericValue = 0;\n        filter.endNumericValue = 0;\n        filter.startDateValue = 0;\n        filter.endDateValue = 0; // Handle date range filters and numeric range filters\n\n        if (value[indx].searchFilterType === 'DateFilter' && !value[indx].stringValue) {\n          var dateParts1 = value[indx].startDateValue.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n          var dateParts2 = value[indx].endDateValue.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\n\n          if (dateParts1 && dateParts2) {\n            var fromDate = new Date(dateParts1);\n            var toDate = new Date(dateParts2);\n            filter.stringValue = filterPanelUtils.getDateRangeString(fromDate, new Date(toDate));\n          } else {\n            continue;\n          }\n        } else if (value[indx].searchFilterType === 'NumericFilter') {\n          if (!value[indx].stringValue) {\n            filter.stringValue = filterPanelUtils.getNumericRangeString(value[indx].startNumericValue, value[indx].endNumericValue);\n          } else {\n            filter.stringValue = filterPanelUtils.INTERNAL_NUMERIC_FILTER.concat(value[indx].stringValue);\n          }\n        } else {\n          filter = processConvertFilterMapToSavedSearchFilterMap(value, indx, key, filter, activeFilters);\n        }\n\n        filters.push(filter);\n      }\n\n      searchStringFilterMap[key] = filters;\n    });\n  }\n\n  return searchStringFilterMap;\n};\n/**\n * processConvertFilterMapToSavedSearchFilterMap\n * @param {Object} value Value\n * @param {Integer} indx  The index\n * @param {Integer} key  Key\n * @param {Object} filter  The filter object\n * @param {ObjectArray} activeFilters The array of active filters\n * @returns {Object} filter\n */\n\nexport let processConvertFilterMapToSavedSearchFilterMap = function (value, indx, key, filter, activeFilters) {\n  // Currently NumericFilters are also being treated as String Filters\n  // verify this filter is numeric filter by checking against activeFilters data structure\n  var numericFilterIndex = _.findIndex(activeFilters, function (object) {\n    if (object.name === key && object.values) {\n      return _.startsWith(object.values[0], filterPanelUtils.INTERNAL_NUMERIC_FILTER) || _.startsWith(object.values[0], filterPanelUtils.INTERNAL_NUMERIC_RANGE);\n    }\n  });\n\n  if (numericFilterIndex > -1) {\n    filter.stringValue = filterPanelUtils.INTERNAL_NUMERIC_FILTER.concat(value[indx].stringValue);\n  } else {\n    filter.stringValue = value[indx].stringValue;\n  }\n\n  return filter;\n};\nexport let getFilterDisplayValue = function (values, value) {\n  var dispValue = '';\n  var filterValue = '';\n  var dArray = [];\n\n  if (_.startsWith(value, filterPanelUtils.INTERNAL_DATE_FILTER)) {\n    filterValue = value.replace(filterPanelUtils.INTERNAL_DATE_FILTER, '');\n    dArray = filterValue.split('_TO_');\n\n    if (dArray.length > 1) {\n      var startDate = new Date(dArray[0]);\n      var endDate = new Date(dArray[1]);\n      var dateRange = filterPanelUtils.getDateRangeDisplayString(startDate, endDate);\n      dispValue = dateRange.displayName;\n    }\n  } else if (_.startsWith(value, filterPanelUtils.INTERNAL_NUMERIC_RANGE)) {\n    filterValue = value.replace(filterPanelUtils.INTERNAL_NUMERIC_RANGE, '');\n    dArray = filterValue.split('_TO_');\n\n    if (dArray.length > 1) {\n      var numericRange = filterPanelUtils.getNumericRangeDisplayString(dArray[0], dArray[1]);\n      dispValue = numericRange.displayName;\n    }\n  } else {\n    var ind = _.findIndex(values, function (o) {\n      return o.stringValue === value;\n    });\n\n    if (ind > -1) {\n      if (_.endsWith(values[ind].stringValue, '$NONE')) {\n        dispValue = localTextBundle.noFilterValue;\n      } else {\n        dispValue = values[ind].stringDisplayValue;\n      }\n    }\n  }\n\n  return dispValue;\n};\nexport let getUserValue = function () {\n  let userName = appCtxService.getCtx('user').props.user_name.dbValue;\n  let userId = appCtxService.getCtx('user').props.userid.dbValue;\n  return userName + ' ( ' + userId + ' )';\n};\nexport const getDisplayNameForSpecialKeyWord = value => {\n  if (value === '$ME') {\n    return getUserValue();\n  }\n\n  if (value === '$TODAY') {\n    return getLocalTextBundle().searchFilterVariableToday;\n  }\n\n  if (value === '$THIS_WEEK') {\n    return getLocalTextBundle().searchFilterVariableThisWeek;\n  }\n\n  if (value === '$THIS_MONTH') {\n    return getLocalTextBundle().searchFilterVariableThisMonth;\n  }\n\n  if (value === '$MY_GROUP') {\n    return getLocalTextBundle().searchFilterVariableMyGroup;\n  }\n\n  return value;\n};\nexport let getSpecialDisplayName = function (value) {\n  if (value === '$ME') {\n    return getUserValue();\n  }\n\n  if (value === '$TODAY') {\n    return getLocalTextBundle().searchFilterVariableToday;\n  }\n\n  if (value === '$THIS_WEEK') {\n    return getLocalTextBundle().searchFilterVariableThisWeek;\n  }\n\n  if (value === '$THIS_MONTH') {\n    return getLocalTextBundle().searchFilterVariableThisMonth;\n  }\n\n  if (value === '$MY_GROUP') {\n    return getLocalTextBundle().searchFilterVariableMyGroup;\n  }\n\n  return '';\n};\nexport let getLocalTextBundle = function () {\n  return localTextBundle;\n};\nexport let getBreadCrumbDisplayValue = function (values, value, searchFilters) {\n  var dispValue = getSpecialDisplayName(value);\n\n  if (dispValue === '') {\n    if (_.startsWith(value, filterPanelUtils.INTERNAL_DATE_FILTER)) {\n      var startDate = filterPanelUtils.getDate(processDateStringOffset(values[0].startDateValue));\n      var endDate = filterPanelUtils.getDate(processDateStringOffset(values[0].endDateValue));\n      var dateRange = filterPanelUtils.getDateRangeDisplayString(startDate, endDate);\n      dispValue = dateRange.displayName;\n    } else if (_.startsWith(value, filterPanelUtils.INTERNAL_NUMERIC_RANGE)) {\n      var startRange = values[0].startNumericValue;\n      var endRange = values[0].endNumericValue;\n      var startEndRange = values[0].startEndRange;\n      var numericRange = filterPanelUtils.getNumericRangeDisplayString(startRange, endRange, startEndRange);\n      dispValue = numericRange.displayName;\n    } else {\n      var ind = _.findIndex(values, function (o) {\n        return o.stringValue === value;\n      });\n\n      if (ind > -1) {\n        // some \"$NONE\" stringValue actually has non-empty stringDisplayValue, so we don't want to display the default \"Unassigned\" in that case.\n        if (values[ind].stringDisplayValue) {\n          dispValue = values[ind].stringDisplayValue;\n        } else if (_.endsWith(value, '$NONE')) {\n          dispValue = localTextBundle.noFilterValue;\n        } else if (searchFilters) {\n          var theFilter = _.find(searchFilters, function (o) {\n            return o.stringValue === value;\n          });\n\n          if (theFilter && theFilter.stringDisplayValue) {\n            dispValue = theFilter.stringDisplayValue;\n          } else {\n            dispValue = value;\n          }\n        } else {\n          dispValue = value;\n        }\n      }\n    }\n  }\n\n  return dispValue;\n};\nexport let processDateStringOffset = function (dateString) {\n  if (dateString.length > 19) {\n    var offsetString = dateString.substring(19);\n\n    if (offsetString.length > 4 && offsetString.indexOf(':') === -1) {\n      var hour = offsetString.substring(0, offsetString.length - 2);\n      var min = offsetString.substring(offsetString.length - 2);\n      var newOffset = hour.concat(':', min);\n      dateString = dateString.replace(offsetString, newOffset);\n    }\n  }\n\n  return dateString;\n};\nexport let groupByCategory = function (params) {\n  return _.reduce(params, function (acc, nxt, key) {\n    var trueKey = key.split(_dateFilterMarker)[0];\n\n    if (trueKey !== key) {\n      _.forEach(nxt, function (aFilter) {\n        aFilter.startEndRange = key.substring(trueKey.length, key.length);\n      });\n    }\n\n    if (acc[trueKey]) {\n      acc[trueKey] = acc[trueKey].concat(nxt);\n    } else {\n      acc[trueKey] = nxt;\n    }\n\n    return acc;\n  }, {});\n};\nexport let setFilters = function (params) {\n  AwStateService.instance.go('.', {\n    filter: buildFilterString(params)\n  });\n};\nexport let addOrRemoveObjectFilter = function (newParams, category, filter, addRemoveOnly) {};\n\nlet removePrefilter = function (value) {\n  if (value && Array.isArray(value)) {\n    // remove prefix from prefilter\n    _.forEach(value, function (removePrefix, index, arr) {\n      if (removePrefix && !removePrefix.hasOwnProperty('property') && removePrefix.trim().length !== 0) {\n        arr[index] = arr[index].replace('AW_PreFilter_', '');\n      }\n    });\n  }\n};\n\nexport let addOrRemoveFilter = function (category, filter, addRemoveOnly, filterType) {};\nexport let getFilterExtension = function (filter) {\n  if (filter.startEndRange === '+1YEAR') {\n    return _dateFilterMarker + _dateFilterLevels[0];\n  }\n\n  if (filter.startEndRange === '+1MONTH') {\n    return _dateFilterMarker + _dateFilterLevels[1];\n  }\n\n  if (filter.startEndRange === '+7DAYS') {\n    return _dateFilterMarker + _dateFilterLevels[2];\n  }\n\n  if (filter.startEndRange === '+1DAY') {\n    return _dateFilterMarker + _dateFilterLevels[3];\n  }\n\n  return filter.startEndRange;\n};\nexport let doSearch = function (targetState, searchCriteria, filters) {\n  AwStateService.instance.go(targetState ? targetState : '.', {\n    filter: buildFilterString(filters),\n    searchCriteria: searchCriteria\n  });\n};\nexport let doSearchKeepFilter = function (targetState, searchCriteria, shapeSearchProviderActive, savedSearchUid) {\n  // If we are in Shape Search or Saved Search context we do not want to keep the filters related to\n  // either when we perform this search.\n  if (shapeSearchProviderActive === 'true' || savedSearchUid) {\n    AwStateService.instance.go(targetState ? targetState : '.', {\n      filter: buildFilterString(getFilters(false, undefined, undefined, undefined, true)),\n      searchCriteria: searchCriteria\n    });\n  } else {\n    AwStateService.instance.go(targetState ? targetState : '.', {\n      filter: buildFilterString(getFilters(false)),\n      searchCriteria: searchCriteria\n    });\n  }\n};\nexport let loadBreadcrumbClearTitle = function () {\n  return localeService.getLocalizedText('UIMessages', 'clearBreadCrumb');\n};\nexport let doShapeSearch = function (targetState, searchCriteria, filter) {\n  var ctx = appCtxService.getCtx('searchSearch');\n\n  if (ctx) {\n    delete ctx.savedSearchUid;\n    delete ctx.searchStringPrimary;\n\n    if (ctx.searchStringSecondary) {\n      delete ctx.searchStringSecondary;\n      eventBus.publish('search.clearSearchBox');\n    }\n\n    appCtxService.updateCtx('searchSearch', ctx);\n  }\n\n  var shapeSearchCtx = appCtxService.getCtx('shapeSearch');\n\n  if (!shapeSearchCtx) {\n    shapeSearchCtx = {};\n    appCtxService.registerCtx('shapeSearch', shapeSearchCtx);\n  }\n\n  var selectedCtx = appCtxService.getCtx('selected');\n\n  if (selectedCtx && selectedCtx.props && selectedCtx.props.awb0ArchetypeId && selectedCtx.props.awb0ArchetypeName) {\n    shapeSearchCtx.seedObjectItemId = selectedCtx.props.awb0ArchetypeId.uiValues[0];\n    shapeSearchCtx.seedObjectItemName = selectedCtx.props.awb0ArchetypeName.uiValues[0];\n  } else if (selectedCtx && selectedCtx.props) {\n    shapeSearchCtx.seedObjectItemId = selectedCtx.props.item_id.uiValues[0];\n    shapeSearchCtx.seedObjectItemName = selectedCtx.props.object_name.uiValues[0];\n  }\n\n  AwStateService.instance.go(targetState ? targetState : '.', {\n    filter: filter,\n    searchCriteria: searchCriteria\n  });\n  return shapeSearchCtx;\n};\nexport let loadBreadcrumbTitle = function (label, searchCriteria, totalResultCount, selectionModel) {\n  // If no label is provided return the loading message\n  if (!label || totalResultCount === undefined) {\n    return localeService.getLocalizedText('BaseMessages', 'LOADING_TEXT');\n  }\n\n  return AwPromiseService.instance.all({\n    label: typeof label === 'string' ? AwPromiseService.instance.when(label) : localeService.getLocalizedText(label.source, label.key),\n    selectionCountLabel: localeService.getLocalizedTextFromKey('XRTMessages.selectionCountLabel'),\n    noSearchResultsWithSearchBox: localeService.getLocalizedTextFromKey('UIMessages.noSearchResultsWithSearchBox'),\n    noSearchResults: localeService.getLocalizedTextFromKey('UIMessages.noSearchResults'),\n    resultsCountLabelWithSearchBox: localeService.getLocalizedTextFromKey('UIMessages.resultsCountLabelWithSearchBox'),\n    resultsCountLabel: localeService.getLocalizedTextFromKey('UIMessages.resultsCountLabel')\n  }).then(function (localizedText) {\n    // If no results return the no results message\n    if (totalResultCount === 0) {\n      if (searchCriteria) {\n        return localizedText.noSearchResults.format('', searchCriteria);\n      }\n\n      return localizedText.noSearchResults.format('', localizedText.label);\n    }\n\n    var resultsCountLabel;\n\n    if (searchCriteria) {\n      resultsCountLabel = localizedText.resultsCountLabel.format(totalResultCount, '', searchCriteria);\n    } else {\n      resultsCountLabel = localizedText.resultsCountLabel.format(totalResultCount, '', localizedText.label);\n    } // If not in multiselect mode return the result count message\n\n\n    if (!selectionModel || !selectionModel.multiSelectEnabled) {\n      return resultsCountLabel;\n    } // Otherwise return the selection count message\n\n\n    return localizedText.selectionCountLabel.format(selectionModel.getCurrentSelectedCount(), resultsCountLabel);\n  });\n};\nexport let isShapeSearchContext = function () {\n  let isShapeSearch = appCtxService.ctx.search && appCtxService.ctx.search.reqFilters;\n  isShapeSearch = isShapeSearch && appCtxService.ctx.search.reqFilters.ShapeSearchProvider && appCtxService.ctx.search.reqFilters.ShapeSearchProvider[0] === 'true';\n  return isShapeSearch;\n};\nexport let loadInContentBreadcrumbTitle = function (label, totalResultCount, selectionModel) {\n  // If no label is provided return the loading message\n  var totalFound = appCtxService.getCtx('search.totalFound');\n  var searchString = appCtxService.getCtx('search.criteria.searchString');\n  var searchInfoCtx = appCtxService.getCtx('searchInfo');\n  var ctxSearchSearch = appCtxService.ctx.searchSearch;\n\n  if (!label || totalFound === undefined) {\n    return localeService.getLocalizedText('BaseMessages', 'LOADING_TEXT');\n  }\n\n  return AwPromiseService.instance.all({\n    label: typeof label === 'string' ? AwPromiseService.instance.when(label) : localeService.getLocalizedText(label.source, label.key),\n    selectionCountLabel: localeService.getLocalizedTextFromKey('XRTMessages.selectionCountLabel'),\n    noSearchResultsWithInContentSearch: localeService.getLocalizedTextFromKey('UIMessages.noSearchResultsWithInContentSearch'),\n    thresholdExceeded: localeService.getLocalizedTextFromKey('UIMessages.thresholdExceeded'),\n    noSearchResultsWithoutInContentSearch: localeService.getLocalizedTextFromKey('UIMessages.noSearchResultsWithoutInContentSearch'),\n    noSearchResults: localeService.getLocalizedTextFromKey('UIMessages.noSearchResults'),\n    resultsCountLabel: localeService.getLocalizedTextFromKey('UIMessages.resultsCountLabel'),\n    shapesCountLabelPart1: localeService.getLocalizedTextFromKey('UIMessages.shapesCountLabelPart1'),\n    shapesCountLabelPart2: localeService.getLocalizedTextFromKey('UIMessages.shapesCountLabelPart2'),\n    oneShapeCountLabelPart1: localeService.getLocalizedTextFromKey('UIMessages.oneShapeCountLabelPart1'),\n    resultsCountLabelWithInContentSearch: localeService.getLocalizedTextFromKey('UIMessages.resultsCountLabelWithInContentSearch'),\n    resultsCountLabelWithoutInContentSearch: localeService.getLocalizedTextFromKey('UIMessages.resultsCountLabelWithoutInContentSearch')\n  }).then(function (localizedText) {\n    // If no results return the no results message\n    if (totalResultCount === 0) {\n      if (searchString) {\n        if (ctxSearchSearch && ctxSearchSearch.searchStringSecondary && searchString === ctxSearchSearch.searchStringPrimary + ' AND ' + ctxSearchSearch.searchStringSecondary) {\n          return localizedText.noSearchResultsWithInContentSearch.format(ctxSearchSearch.searchStringPrimary, ctxSearchSearch.searchStringSecondary);\n        }\n\n        if (searchInfoCtx && searchInfoCtx.thresholdExceeded === 'true') {\n          searchInfoCtx.noResultsFound = localizedText.thresholdExceeded.format(searchString);\n          return '';\n        }\n\n        return localizedText.noSearchResultsWithoutInContentSearch.format(searchString);\n      }\n\n      return localizedText.noSearchResults.format('', localizedText.label);\n    }\n\n    var resultsCountLabel;\n\n    if (searchString) {\n      resultsCountLabel = processLoadInContentBreadcrumbTitle(ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel);\n    } else {\n      resultsCountLabel = localizedText.resultsCountLabel.format(totalResultCount, '', localizedText.label);\n    } // If not in multiselect mode return the result count message\n\n\n    if (!selectionModel || !selectionModel.multiSelectEnabled) {\n      return resultsCountLabel;\n    } // Otherwise return the selection count message\n\n\n    return localizedText.selectionCountLabel.format(selectionModel.getCurrentSelectedCount(), resultsCountLabel);\n  });\n};\n/**\n * Process Localized text search results.\n * @function processLoadInContentBreadcrumbTitleShape\n * @param {Object} ctxSearchSearch searchString context object\n * @param {Object} searchString searchString context object\n * @param {Object} localizedText The localized text\n * @param {Object} totalResultCount Total Result count\n * @param {Object} resultsCountLabel Results Count Label\n * @return {Object} resultsCountLabel\n */\n\nexport let processLoadInContentBreadcrumbTitleShape = function (ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel) {\n  var shapeSearchCtx = appCtxService.getCtx('shapeSearch');\n  resultsCountLabel = {};\n  resultsCountLabel.seedObjectLink = shapeSearchCtx.seedObjectItemId + '/' + shapeSearchCtx.seedObjectItemName;\n\n  if (ctxSearchSearch.searchStringSecondary) {\n    if (totalResultCount > 1) {\n      resultsCountLabel.part1 = localizedText.shapesCountLabelPart1.format(totalResultCount);\n      resultsCountLabel.part2 = localizedText.shapesCountLabelPart2.format(ctxSearchSearch.searchStringSecondary);\n    } else {\n      resultsCountLabel.part1 = localizedText.oneShapeCountLabelPart1.format(totalResultCount);\n      resultsCountLabel.part2 = localizedText.shapesCountLabelPart2.format(ctxSearchSearch.searchStringSecondary);\n    }\n  } else {\n    if (totalResultCount > 1) {\n      resultsCountLabel.part1 = localizedText.shapesCountLabelPart1.format(totalResultCount);\n    } else {\n      resultsCountLabel.part1 = localizedText.oneShapeCountLabelPart1.format(totalResultCount);\n    }\n  }\n\n  return resultsCountLabel;\n};\n/**\n * Process Localized text search results.\n * @function processLoadInContentBreadcrumbTitle\n * @param {Object} ctxSearchSearch searchString context object\n * @param {String} searchString searchString\n * @param {Object} localizedText The localized text\n * @param {Object} totalResultCount Total Result count\n * @param {Object} resultsCountLabel Results Count Label\n * @return {Object} resultsCountLabel\n */\n\nexport let processLoadInContentBreadcrumbTitle = function (ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel) {\n  if (isShapeSearchContext()) {\n    resultsCountLabel = processLoadInContentBreadcrumbTitleShape(ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel);\n  } else if (ctxSearchSearch && ctxSearchSearch.searchStringSecondary && searchString === ctxSearchSearch.searchStringPrimary + ' AND ' + ctxSearchSearch.searchStringSecondary) {\n    // define a variable so that the line length does not exceed 207 max-len...\n    let labelText = localizedText.resultsCountLabelWithInContentSearch;\n    resultsCountLabel = labelText.format(totalResultCount, ctxSearchSearch.searchStringPrimary, ctxSearchSearch.searchStringSecondary);\n  } else {\n    resultsCountLabel = localizedText.resultsCountLabelWithoutInContentSearch.format(totalResultCount, searchString);\n  }\n\n  return resultsCountLabel;\n};\nexport let setFiltersFromCrumbs = function (crumbs, indexBreadCrumb) {\n  var newCrumbs = _.dropRightWhile(crumbs, function (c) {\n    return c.indexBreadCrumb > indexBreadCrumb;\n  });\n\n  var filterMap = {};\n\n  _.forEach(newCrumbs, function (c) {\n    if (filterMap[c.internalName]) {\n      filterMap[c.internalName].push(c.internalValue);\n    } else {\n      filterMap[c.internalName] = [c.internalValue];\n    }\n  });\n\n  var searchContext = appCtxService.getCtx('search');\n  var reqFilters = searchContext.reqFilters;\n\n  if (reqFilters) {\n    _.forEach(reqFilters, function (value, key) {\n      if (filterMap[key]) {\n        filterMap[key].push(value);\n      } else {\n        filterMap[key] = [value];\n      }\n    });\n  }\n\n  setFilters(filterMap);\n};\nexport let displayNoBreadCrumbProvider = function (breadcrumbConfig, label, totalResultCount, searchCriteria) {\n  var provider = {};\n  AwPromiseService.instance.all({\n    noCriteriaSpecifiedMessage: localeService.getLocalizedText(breadcrumbConfig.noCriteriaSpecifiedMessage.source, breadcrumbConfig.noCriteriaSpecifiedMessage.key),\n    noResultsFoundMessage: localeService.getLocalizedText(breadcrumbConfig.noResultsFoundMessage.source, breadcrumbConfig.noResultsFoundMessage.key),\n    resultsFoundMessage: localeService.getLocalizedText(breadcrumbConfig.resultsFoundMessage.source, breadcrumbConfig.resultsFoundMessage.key)\n  }).then(function (localizedText) {\n    if (!searchCriteria) {\n      provider.title = localizedText.noCriteriaSpecifiedMessage.format();\n    } else if (totalResultCount === undefined || totalResultCount === 0) {\n      provider.title = localizedText.noResultsFoundMessage.format(label);\n    } else {\n      provider.title = localizedText.resultsFoundMessage.format(label);\n    }\n  });\n  return provider;\n};\nexport let getBreadcrumbProvider = function () {\n  return {\n    crumbs: [],\n    clear: function () {\n      // Publish to AW analytics\n      var sanEvent = {\n        sanAnalyticsType: 'Commands',\n        sanCommandId: 'clearSearchFilter',\n        sanCommandTitle: 'Clear All Search Filters'\n      };\n      analyticsSvc.logCommands(sanEvent);\n      var searchContext = appCtxService.getCtx('search');\n      var reqFilters = searchContext.reqFilters;\n\n      if (reqFilters) {\n        setFilters(reqFilters);\n      } else {\n        setFilters([]);\n      }\n    },\n    onRemove: function (crumb) {\n      // Publish to analytics\n      var sanEvent = {\n        sanAnalyticsType: 'Commands',\n        sanCommandId: 'removeSearchFilterCrumb',\n        sanCommandTitle: 'Remove Crumb Filter',\n        sanCmdLocation: 'primarySearchPanel'\n      };\n      analyticsSvc.logCommands(sanEvent);\n    },\n    onSelect: function (crumb) {\n      // Publish to analytics\n      var sanEvent = {\n        sanAnalyticsType: 'Commands',\n        sanCommandId: 'clickSearchFilterCrumb',\n        sanCommandTitle: 'Click Search Filter Crumb',\n        sanCmdLocation: 'primarySearchPanel'\n      };\n      analyticsSvc.logCommands(sanEvent);\n      setFiltersFromCrumbs(this.crumbs, crumb.indexBreadCrumb);\n    }\n  };\n};\nexport let setBreadcrumbValue = function (newBreadcrumb) {\n  if (newBreadcrumb.internalValue && newBreadcrumb.internalValue !== '' && newBreadcrumb.internalValue === newBreadcrumb.value) {\n    var searchContext = appCtxService.getCtx('searchSearch');\n\n    if (searchContext && searchContext.originalInputCategories) {\n      var categoryId = _.findIndex(searchContext.originalInputCategories, function (aCat) {\n        return newBreadcrumb.internalName === aCat.internalName;\n      });\n\n      if (searchContext.originalInputCategories[categoryId] && searchContext.originalInputCategories[categoryId].filterValues) {\n        if (searchContext.originalInputCategories[categoryId].filterValues.parentnodes) {\n          var foundFilter = _.findIndex(searchContext.originalInputCategories[categoryId].filterValues.parentnodes, function (aFilter) {\n            return newBreadcrumb.internalValue === aFilter.stringValue;\n          });\n\n          newBreadcrumb.value = searchContext.originalInputCategories[categoryId].filterValues.parentnodes[foundFilter].stringDisplayValue;\n        }\n      }\n    }\n  }\n};\nexport let setBreadcrumbDisplayName = function (newBreadcrumb, categoriesDisplayed) {\n  var foundCategory = _.findIndex(categoriesDisplayed, function (aCategory) {\n    return aCategory === newBreadcrumb.displayName;\n  });\n\n  if (foundCategory < 0) {\n    categoriesDisplayed.push(newBreadcrumb.displayName);\n  } else {\n    newBreadcrumb.displayName = '';\n  }\n};\nexport let setBreadcrumbProviderTitle = function (provider, label, totalResultCount, selectionModel, secondarySearchEnabled) {\n  loadBreadcrumbClearTitle().then(function (result) {\n    provider.clearBreadCrumb = result;\n  }); // Load and set the title async\n\n  if (secondarySearchEnabled) {\n    loadInContentBreadcrumbTitle(label, totalResultCount, selectionModel).then(function (result) {\n      provider.title = result;\n    });\n  } else {\n    loadBreadcrumbTitle(label, totalResultCount, selectionModel).then(function (result) {\n      provider.title = result;\n    });\n  }\n};\nexport let buildBreadcrumbProvider = function (breadcrumbConfig, label, totalResultCount, selectionModel, searchFilterCategories, searchFilterMap, secondarySearchEnabled, searchCriteria) {\n  if (breadcrumbConfig && breadcrumbConfig.noBreadCrumb === 'true') {\n    return displayNoBreadCrumbProvider(breadcrumbConfig, label, totalResultCount, searchCriteria);\n  }\n\n  var provider = getBreadcrumbProvider(); // For each of the current search params\n\n  var searchParams = getFilters(false, true, true, true);\n  var categoriesDisplayed = [];\n  var indexBreadCrumb = -1;\n\n  _.forEach(searchParams, function (value) {\n    removePrefilter(value);\n  });\n\n  _.map(searchParams, function (value, property) {\n    // If it's a valid filter\n    var index = _.findIndex(searchFilterCategories, function (o) {\n      return o.internalName === property;\n    });\n\n    var newBreadcrumb = {};\n\n    _.forEach(searchParams[property], function (filter) {\n      var origProperty = property;\n      var origFilter = filterPanelUtils.getRealFilterWithNoFilterType(filter);\n      var filterType = filterPanelUtils.getFilterTypeFromFilterValue(filter);\n\n      if (filter.hasOwnProperty('property')) {\n        origProperty = filter.property;\n        origFilter = filter.filter;\n      }\n\n      if (index > -1) {\n        // Make a breadcrumb for it\n        newBreadcrumb = {\n          displayName: searchFilterCategories[index].displayName + ':',\n          displayNameHidden: searchFilterCategories[index].displayName + ':',\n          internalName: origProperty,\n          internalValue: origFilter,\n          filterType: filterType\n        };\n      } else if (!searchFilterCategories || searchFilterCategories && searchFilterCategories.length < 1) {\n        // Need still display the crumbs\n        var categoryDisplayName = getCategoryDisplayName(property);\n\n        if (!categoryDisplayName) {\n          return provider;\n        }\n\n        newBreadcrumb = {\n          displayName: categoryDisplayName + ':',\n          displayNameHidden: categoryDisplayName + ':',\n          internalName: property,\n          internalValue: origFilter,\n          filterType: filterType\n        };\n      } else {\n        return provider;\n      }\n\n      provider = processBreadCrumbsSearchFilters(provider, indexBreadCrumb, categoriesDisplayed, newBreadcrumb, searchFilterMap, origProperty, origFilter);\n    });\n  });\n\n  setBreadcrumbProviderTitle(provider, label, totalResultCount, selectionModel, secondarySearchEnabled);\n  return provider;\n};\n/**\n * Process Breadcrumbs with Search Filters.\n * @function processBreadCrumbsSearchFilters\n * @param {Object} provider The object newBreadCrumb\n * @param {Object} indexBreadCrumb The object newBreadCrumb\n * @param {Object} categoriesDisplayed The object newBreadCrumb\n * @param {Object} newBreadcrumb The object newBreadCrumb\n * @param {Object} searchFilterMap The search filter map\n * @param {Object} origProperty Original Property\n * @param {Object} origFilter Original filter\n * @return {Object} BreadCrumd Provider\n */\n\nexport let processBreadCrumbsSearchFilters = function (provider, indexBreadCrumb, categoriesDisplayed, newBreadcrumb, searchFilterMap, origProperty, origFilter) {\n  if (searchFilterMap) {\n    newBreadcrumb.value = getBreadCrumbDisplayValue(searchFilterMap[origProperty], origFilter);\n  }\n\n  if (newBreadcrumb.value && newBreadcrumb.value !== '') {\n    setBreadcrumbValue(newBreadcrumb);\n    setBreadcrumbDisplayName(newBreadcrumb, categoriesDisplayed);\n    ++indexBreadCrumb;\n    newBreadcrumb.indexBreadCrumb = indexBreadCrumb;\n    provider.crumbs.push(newBreadcrumb);\n  }\n\n  if (newBreadcrumb.internalName === OWNING_SITE) {\n    newBreadcrumb.filterType = 'RadioFilter';\n  }\n  /* the OwningSite.owning_site is a property which server side filters on to return local or remote objects.\n  This property does not exists in DB. It's a hardcoded value that server side expects and returns.*/\n\n\n  if (newBreadcrumb.internalName === OWNING_SITE && newBreadcrumb.internalValue === _local) {\n    newBreadcrumb.showRemoveButton = false;\n  } else {\n    newBreadcrumb.showRemoveButton = true;\n  }\n\n  return provider;\n}; // Return display name for a category\n\nexport let getCategoryDisplayName = function (property) {\n  var categoryDisplayName = ''; // first check if it can be found in the prior search.\n\n  var context = appCtxService.getCtx('searchSearch');\n\n  if (context && context.originalInputCategories && context.originalInputCategories.length > 0) {\n    var index = _.findIndex(context.originalInputCategories, function (o) {\n      return o.internalName === property;\n    });\n\n    if (index > -1) {\n      categoryDisplayName = context.originalInputCategories[index].displayName;\n      return categoryDisplayName;\n    }\n  }\n\n  var aTypeProperty = property.split('.');\n\n  if (aTypeProperty && aTypeProperty.length === 2) {\n    var type = cmm.getType(aTypeProperty[0]);\n\n    if (!type) {\n      // Category.category\n      var catName = aTypeProperty[1];\n      categoryDisplayName = catName[0].toUpperCase() + catName.slice(1).toLowerCase();\n    } else {\n      var propName = filterPanelUtils.getPropertyFromFilter(aTypeProperty[1]);\n      var pd = type.propertyDescriptorsMap[propName];\n\n      if (!pd) {\n        categoryDisplayName = aTypeProperty[1];\n      } else {\n        categoryDisplayName = pd.displayName;\n      }\n    }\n  }\n\n  return categoryDisplayName;\n};\nexport let loadConfiguration = function () {\n  localeService.getLocalizedTextFromKey('UIMessages.noFilterValue', true).then(result => localTextBundle.noFilterValue = result);\n  localeService.getLocalizedTextFromKey('SearchMessages.searchFilterVariableMyGroup', true).then(result => localTextBundle.searchFilterVariableMyGroup = result);\n  localeService.getLocalizedTextFromKey('SearchMessages.searchFilterVariableThisMonth', true).then(result => localTextBundle.searchFilterVariableThisMonth = result);\n  localeService.getLocalizedTextFromKey('SearchMessages.searchFilterVariableThisWeek', true).then(result => localTextBundle.searchFilterVariableThisWeek = result);\n  localeService.getLocalizedTextFromKey('dateTimeServiceMessages.currentText', true).then(result => localTextBundle.searchFilterVariableToday = result);\n};\nloadConfiguration();\nconst awSearchFilterService = {\n  _dateFilterMarker,\n  _dateFilterLevels,\n  _filterSeparator,\n  _filterValueSeparator,\n  chooseFilterSeparator,\n  buildFilterString,\n  isHierarchicalChildFilter,\n  parseHierarchicalChildFilters,\n  getFilters,\n  checkIfObjectFilterType,\n  getSortedFilterMap,\n  buildSearchFiltersInt,\n  buildSearchFilters,\n  getFilterStringFromActiveFilterMap,\n  convertFilterMapToSavedSearchFilterMap,\n  getFilterDisplayValue,\n  getSpecialDisplayName,\n  getLocalTextBundle,\n  getBreadCrumbDisplayValue,\n  processDateStringOffset,\n  groupByCategory,\n  setFilters,\n  addOrRemoveObjectFilter,\n  addOrRemoveFilter,\n  getFilterExtension,\n  doSearch,\n  doSearchKeepFilter,\n  isShapeSearchContext,\n  loadBreadcrumbClearTitle,\n  doShapeSearch,\n  loadBreadcrumbTitle,\n  loadInContentBreadcrumbTitle,\n  setFiltersFromCrumbs,\n  displayNoBreadCrumbProvider,\n  getBreadcrumbProvider,\n  setBreadcrumbValue,\n  setBreadcrumbDisplayName,\n  setBreadcrumbProviderTitle,\n  buildBreadcrumbProvider,\n  getCategoryDisplayName,\n  loadConfiguration,\n  processLoadInContentBreadcrumbTitleShape,\n  processLoadInContentBreadcrumbTitle,\n  processConvertFilterMapToSavedSearchFilterMap,\n  processBreadCrumbsSearchFilters,\n  buildSearchFiltersFromSearchState,\n  getFilterMapWithPrefilters,\n  getDisplayNameForSpecialKeyWord,\n  getUserValue,\n  sortFilterMapKeys,\n  processFilterValues,\n  removeDependentDateFilters,\n  getPendingFiltersMap,\n  clearAllSelectedFiltersAndRanges,\n  clearNumericRangeInfoFromCategory,\n  clearDateRangeInfoFromCategory,\n  removeDependentClassificationFilters\n};\nexport default awSearchFilterService;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/aw.searchFilter.service.js"],"names":["localTextBundle","_local","OWNING_SITE","_dateFilterMarker","_dateFilterLevels","_filterSeparator","_filterSeparatorOption1","_filterSeparatorOption2","_filterValueSeparator","appCtxService","removeSelectedFiltersFromCategory","category","filterIndex","clearNumericRangeInfoFromCategory","clearDateRangeInfoFromCategory","clearAllSelectedFiltersAndRanges","categories","activeFilters","categoriesToRemoveSelectionsAndRangesFrom","activeFilterIndex","categoryName","dateMarkerIndex","positivePendingFilters","positivePendingFilterIndex","categoryIndex","eachCategory","getOnlyFilterValuesFromActiveFilterMap","activeFilterMapValue","values","index","filterPanelUtils","getPendingFiltersMap","positivePendingFilterMap","negativePendingFilterMap","orderedSelectedFiltersMap","obj","selectedFiltersMap","orderedActiveFiltersMap","activeFilterMap","Object","activeFiltersWithJustFilterValues","positivePendingFiltersWithJustValues","_","negativePendingFiltersWithJustValues","removeDependentDateFilters","searchFilterMap","searchFilterMapWithNonRedundantDateCategories","keys","mapWithKeyAsCategoryNameAndValueAsLevelsOfDate","indexOfYear","catName","existingLevels","minLevel","dateLevelOne","key","dateLevelTwo","dateLevelThree","dateLevelFour","isMissingSomeDateLevel","value","index2","removeDependentClassificationFilters","filterValue","stringValue","level","parseInt","currentLevel","chooseFilterSeparator","conflictFound","sortFilterMapKeys","filters","sortedFilterMap","processFilterValues","filterVals","eachValue","getDisplayNameForSpecialKeyWord","buildFilterString","isHierarchicalChildFilter","isChildFilter","nodes","filterString","isNaN","parseHierarchicalChildFilters","filterValues","i","j","getFilters","filterMap","AwStateService","separatorIndex","filterVal","valuePart","filterPair","realFilter","checkHierarchy","checkIfObjectFilterType","groupByCategory","sort","getSortedFilterMap","getFilterMapWithPrefilters","isObjectFilterType","responseFilterMap","trueKey","decoratedNxt","acc","buildSearchFiltersInt","filterType","searchContext","filter","v1","numericValue","parseFloat","name","type","buildSearchFilters","context","buildSearchFiltersFromSearchState","activeFiltersMap","getFilterStringFromActiveFilterMap","searchParams","displayString","trueProperty","property","o","filterName","searchFilterCategories","getCategoryDisplayName","getBreadCrumbDisplayValue","individualFilterString","convertFilterMapToSavedSearchFilterMap","searchStringFilterMap","indx","dateParts1","dateParts2","fromDate","toDate","processConvertFilterMapToSavedSearchFilterMap","numericFilterIndex","object","getFilterDisplayValue","dispValue","dArray","startDate","endDate","dateRange","numericRange","ind","getUserValue","userName","userId","getLocalTextBundle","getSpecialDisplayName","processDateStringOffset","startRange","endRange","startEndRange","theFilter","dateString","offsetString","hour","min","newOffset","aFilter","setFilters","addOrRemoveObjectFilter","removePrefilter","Array","removePrefix","arr","addOrRemoveFilter","getFilterExtension","doSearch","targetState","searchCriteria","doSearchKeepFilter","shapeSearchProviderActive","loadBreadcrumbClearTitle","localeService","doShapeSearch","ctx","eventBus","shapeSearchCtx","selectedCtx","loadBreadcrumbTitle","totalResultCount","label","AwPromiseService","selectionCountLabel","noSearchResultsWithSearchBox","noSearchResults","resultsCountLabelWithSearchBox","resultsCountLabel","localizedText","selectionModel","isShapeSearchContext","isShapeSearch","loadInContentBreadcrumbTitle","totalFound","searchString","searchInfoCtx","ctxSearchSearch","noSearchResultsWithInContentSearch","thresholdExceeded","noSearchResultsWithoutInContentSearch","shapesCountLabelPart1","shapesCountLabelPart2","oneShapeCountLabelPart1","resultsCountLabelWithInContentSearch","resultsCountLabelWithoutInContentSearch","processLoadInContentBreadcrumbTitle","processLoadInContentBreadcrumbTitleShape","labelText","setFiltersFromCrumbs","newCrumbs","c","reqFilters","displayNoBreadCrumbProvider","provider","noCriteriaSpecifiedMessage","breadcrumbConfig","noResultsFoundMessage","resultsFoundMessage","getBreadcrumbProvider","crumbs","clear","sanEvent","sanAnalyticsType","sanCommandId","sanCommandTitle","analyticsSvc","onRemove","sanCmdLocation","onSelect","crumb","setBreadcrumbValue","newBreadcrumb","categoryId","aCat","foundFilter","setBreadcrumbDisplayName","foundCategory","aCategory","categoriesDisplayed","setBreadcrumbProviderTitle","buildBreadcrumbProvider","indexBreadCrumb","origProperty","origFilter","displayName","displayNameHidden","internalName","internalValue","categoryDisplayName","processBreadCrumbsSearchFilters","aTypeProperty","cmm","propName","pd","loadConfiguration","result","awSearchFilterService"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected by AngularJS.\n *\n * @module js/aw.searchFilter.service\n * @requires js/filterPanelUtils\n */\nimport AwStateService from 'js/awStateService';\nimport AwPromiseService from 'js/awPromiseService';\nimport localeService from 'js/localeService';\nimport appCtxService from 'js/appCtxService';\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport cdm from 'soa/kernel/clientDataModel';\nimport _ from 'lodash';\nimport analyticsSvc from 'js/analyticsService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport eventBus from 'js/eventBus';\n\nvar localTextBundle = {};\nvar _local = 'local';\nvar OWNING_SITE = 'OwningSite.owning_site';\n\nexport let _dateFilterMarker = '_0Z0_';\n\nexport let _dateFilterLevels = [ 'year', 'year_month', 'week', 'year_month_day' ];\n\nexport let _filterSeparator = '~';\n\nconst _filterSeparatorOption1 = '~';\n\nconst _filterSeparatorOption2 = '##';\n\nexport let _filterValueSeparator = appCtxService.ctx.preferences && appCtxService.ctx.preferences.AW_FacetValue_Separator && appCtxService.ctx.preferences.AW_FacetValue_Separator[ 0 ] ?\n    appCtxService.ctx.preferences.AW_FacetValue_Separator[ 0 ] : '^';\n\nconst removeSelectedFiltersFromCategory = ( category ) => {\n    if( category && category.filterValues && category.filterValues.length > 0 ) {\n        for( let filterIndex = 0; filterIndex < category.filterValues.length; filterIndex++ ) {\n            category.filterValues[ filterIndex ].selected.dbValue = false;\n            category.filterValues[ filterIndex ].selected.value = false;\n        }\n    }\n    return category;\n};\n\nexport let clearNumericRangeInfoFromCategory = ( category ) => {\n    if( category ) {\n        delete category.numericRangeString;\n        delete category.numericrange;\n    }\n    return category;\n};\n\nexport let clearDateRangeInfoFromCategory = ( category ) => {\n    if( category ) {\n        delete category.dateRangeString;\n        category.daterange.endDate.value = -62135579040000;\n        category.daterange.endDate.dbValue = -62135579040000;\n        category.daterange.startDate.value = -62135579040000;\n        category.daterange.startDate.dbValue = -62135579040000;\n    }\n    return category;\n};\n\nexport let clearAllSelectedFiltersAndRanges = ( categories, activeFilters, positivePendingFilters ) => {\n    if( categories && categories.length > 0 && activeFilters && activeFilters.length > 0 ) {\n        let categoriesToRemoveSelectionsAndRangesFrom = new Set();\n        for( let activeFilterIndex = 0; activeFilterIndex < activeFilters.length; activeFilterIndex++ ) {\n            let categoryName = activeFilters[ activeFilterIndex ].name;\n            let dateMarkerIndex = categoryName && categoryName.length > 0 ? categoryName.indexOf( _dateFilterMarker ) : -1;\n            categoryName = categoryName && dateMarkerIndex > -1 ? categoryName.substring( 0, dateMarkerIndex ) : categoryName;\n            if( categoryName && categoryName.length > 0 ) {\n                categoriesToRemoveSelectionsAndRangesFrom.add( categoryName );\n            }\n        }\n        if( positivePendingFilters && positivePendingFilters.length > 0 ) {\n            for( let positivePendingFilterIndex = 0; positivePendingFilterIndex < positivePendingFilters.length; positivePendingFilterIndex++ ) {\n                let categoryName = positivePendingFilters[ positivePendingFilterIndex ].name;\n                let dateMarkerIndex = categoryName.indexOf( _dateFilterMarker );\n                categoryName = categoryName && dateMarkerIndex > -1 ? categoryName.substring( 0, dateMarkerIndex ) : categoryName;\n                if( categoryName && categoryName.length > 0 ) {\n                    categoriesToRemoveSelectionsAndRangesFrom.add( categoryName );\n                }\n            }\n        }\n        for( let categoryIndex = 0; categoryIndex < categories.length; categoryIndex++ ) {\n            let categoryName = categories[ categoryIndex ].internalName;\n            if( categoryName && categoriesToRemoveSelectionsAndRangesFrom.has( categoryName ) ) {\n                let eachCategory = categories[ categoryIndex ];\n                eachCategory = removeSelectedFiltersFromCategory( eachCategory );\n                switch ( eachCategory.type ) {\n                    case 'DateFilter':\n                        eachCategory = clearDateRangeInfoFromCategory( eachCategory );\n                        break;\n                    case 'NumericFilter':\n                        eachCategory = clearNumericRangeInfoFromCategory( eachCategory );\n                        break;\n                    default:\n                        break;\n                }\n                categories[ categoryIndex ] = eachCategory;\n            }\n        }\n    }\n    return categories;\n};\n\nconst getOnlyFilterValuesFromActiveFilterMap = ( activeFilterMapValue ) => {\n    let values = [];\n    if( activeFilterMapValue && activeFilterMapValue.length > 0 ) {\n        for( let index = 0; index < activeFilterMapValue.length; index++ ) {\n            switch ( activeFilterMapValue[ index ].searchFilterType ) {\n                case 'DateFilter': {\n                    if( activeFilterMapValue[ index ].startDateValue.includes( filterPanelUtils.BEGINNING_OF_TIME ) ) {\n                        values.push( filterPanelUtils.INTERNAL_DATE_FILTER + '*' + '_TO_' + activeFilterMapValue[ index ].endDateValue );\n                    } else if( activeFilterMapValue[ index ].startDateValue.includes( filterPanelUtils.ENDING_OF_TIME ) ) {\n                        values.push( filterPanelUtils.INTERNAL_DATE_FILTER + activeFilterMapValue[ index ].startDateValue + '_TO_' + '*' );\n                    } else {\n                        values.push( filterPanelUtils.INTERNAL_DATE_FILTER + activeFilterMapValue[ index ].startDateValue + '_TO_' + activeFilterMapValue[ index ].endDateValue );\n                    }\n                    break;\n                }\n                case 'NumericFilter': {\n                    if( activeFilterMapValue[ index ].stringValue && activeFilterMapValue[ index ].stringValue.length > 0 &&\n                        activeFilterMapValue[ index ].startEndRange !== 'NumericRange' &&\n                        activeFilterMapValue[ index ].startEndRange !== 'NumericRangeBlankStart' &&\n                        activeFilterMapValue[ index ].startEndRange !== 'NumericRangeBlankEnd' ) {\n                        values.push( filterPanelUtils.INTERNAL_NUMERIC_FILTER + activeFilterMapValue[ index ].stringValue );\n                    } else {\n                        if( activeFilterMapValue[ index ].startNumericValue > 0 && activeFilterMapValue[ index ].endNumericValue > 0 ) {\n                            values.push( filterPanelUtils.INTERNAL_NUMERIC_RANGE + activeFilterMapValue[ index ].startNumericValue + '_TO_' + activeFilterMapValue[ index ].endNumericValue );\n                        } else if( activeFilterMapValue[ index ].startNumericValue > 0 ) {\n                            values.push( filterPanelUtils.INTERNAL_NUMERIC_RANGE + activeFilterMapValue[ index ].startNumericValue + '_TO_' );\n                        } else {\n                            values.push( filterPanelUtils.INTERNAL_NUMERIC_RANGE + '_TO_' + activeFilterMapValue[ index ].endNumericValue );\n                        }\n                    }\n                    break;\n                }\n                case 'RadioFilter':\n                case 'StringFilter':\n                    values.push( activeFilterMapValue[ index ].stringValue );\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n    return values.sort();\n};\n\nexport let getPendingFiltersMap = ( selectedFiltersMap, activeFilterMap ) => {\n    let positivePendingFilterMap = {};\n    let negativePendingFilterMap = {};\n    const orderedSelectedFiltersMap = Object.keys( selectedFiltersMap ).sort().reduce(\n        ( obj, key ) => {\n            obj[ key ] = selectedFiltersMap[ key ];\n            return obj;\n        }, {}\n    );\n    const orderedActiveFiltersMap = Object.keys( activeFilterMap ).sort().reduce(\n        ( obj, key ) => {\n            obj[ key ] = activeFilterMap[ key ];\n            return obj;\n        }, {}\n    );\n    for( const [ orderedSelectedFiltersMapKey, orderedSelectedFiltersMapValue ] of Object.entries( orderedSelectedFiltersMap ) ) {\n        if( !orderedActiveFiltersMap[ orderedSelectedFiltersMapKey ] ) {\n            positivePendingFilterMap[ orderedSelectedFiltersMapKey ] = orderedSelectedFiltersMap[ orderedSelectedFiltersMapKey ];\n        } else if( orderedActiveFiltersMap[ orderedSelectedFiltersMapKey ] ) {\n            let activeFiltersWithJustFilterValues = getOnlyFilterValuesFromActiveFilterMap( orderedActiveFiltersMap[ orderedSelectedFiltersMapKey ] );\n            let positivePendingFiltersWithJustValues = _.difference( orderedSelectedFiltersMapValue, activeFiltersWithJustFilterValues );\n            let negativePendingFiltersWithJustValues = _.difference( activeFiltersWithJustFilterValues, orderedSelectedFiltersMapValue );\n            if( positivePendingFiltersWithJustValues && positivePendingFiltersWithJustValues.length > 0 ) {\n                // these are positive filters, meaning they are filters which got selected.\n                positivePendingFilterMap[ orderedSelectedFiltersMapKey ] = positivePendingFiltersWithJustValues;\n            }\n            if( negativePendingFiltersWithJustValues && negativePendingFiltersWithJustValues.length > 0 ) {\n                // these are negative filters, meaning they are filters which got deselected.\n                negativePendingFilterMap[ orderedSelectedFiltersMapKey ] = negativePendingFiltersWithJustValues;\n            }\n        }\n    }\n    for( const [ orderedActiveFiltersMapKey, orderedActiveFiltersMapValue ] of Object.entries( orderedActiveFiltersMap ) ) {\n        if( !orderedSelectedFiltersMap[ orderedActiveFiltersMapKey ] ) {\n            negativePendingFilterMap[ orderedActiveFiltersMapKey ] = orderedActiveFiltersMap[ orderedActiveFiltersMapKey ];\n        }\n    }\n    return {\n        positivePendingFilterMap: positivePendingFilterMap,\n        negativePendingFilterMap: negativePendingFilterMap\n    };\n};\n\nexport let removeDependentDateFilters = ( searchFilterMap ) => {\n    let searchFilterMapWithNonRedundantDateCategories = _.cloneDeep( searchFilterMap );\n    let keys = Object.keys( searchFilterMapWithNonRedundantDateCategories );\n    let mapWithKeyAsCategoryNameAndValueAsLevelsOfDate = {};\n    if( keys && keys.length > 0 ) {\n        for( let index = 0; index < keys.length; index++ ) {\n            if( keys[ index ].includes( _dateFilterMarker ) && keys[ index ].substr( keys[ index ].length - 4, 4 ) === _dateFilterLevels[ 0 ] ) {\n                let indexOfYear = keys[ index ].indexOf( _dateFilterMarker );\n                let catName = keys[ index ].substr( 0, indexOfYear );\n                if( mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] ) {\n                    let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ];\n                    existingLevels.push( 1 );\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = existingLevels;\n                } else {\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = [ 1 ];\n                }\n            } else if( keys[ index ].includes( _dateFilterMarker ) && keys[ index ].substr( keys[ index ].length - 10, 10 ) === _dateFilterLevels[ 1 ] ) {\n                let indexOfYear = keys[ index ].indexOf( _dateFilterMarker );\n                let catName = keys[ index ].substr( 0, indexOfYear );\n                if( mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] ) {\n                    let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ];\n                    existingLevels.push( 2 );\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = existingLevels;\n                } else {\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = [ 2 ];\n                }\n            } else if( keys[ index ].includes( _dateFilterMarker ) && keys[ index ].substr( keys[ index ].length - 4, 4 ) === _dateFilterLevels[ 2 ] ) {\n                let indexOfYear = keys[ index ].indexOf( _dateFilterMarker );\n                let catName = keys[ index ].substr( 0, indexOfYear );\n                if( mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] ) {\n                    let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ];\n                    existingLevels.push( 3 );\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = existingLevels;\n                } else {\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = [ 3 ];\n                }\n            } else if( keys[ index ].includes( _dateFilterMarker ) && keys[ index ].substr( keys[ index ].length - 14, 14 ) === _dateFilterLevels[ 3 ] ) {\n                let indexOfYear = keys[ index ].indexOf( _dateFilterMarker );\n                let catName = keys[ index ].substr( 0, indexOfYear );\n                if( mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] ) {\n                    let existingLevels = mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ];\n                    existingLevels.push( 4 );\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = existingLevels;\n                } else {\n                    mapWithKeyAsCategoryNameAndValueAsLevelsOfDate[ catName ] = [ 4 ];\n                }\n            }\n        }\n        for( let [ key, value ] of Object.entries( mapWithKeyAsCategoryNameAndValueAsLevelsOfDate ) ) {\n            let minLevel = 0;\n            const dateLevelOne = key + _dateFilterMarker + _dateFilterLevels[ 0 ];\n            const dateLevelTwo = key + _dateFilterMarker + _dateFilterLevels[ 1 ];\n            const dateLevelThree = key + _dateFilterMarker + _dateFilterLevels[ 2 ];\n            const dateLevelFour = key + _dateFilterMarker + _dateFilterLevels[ 3 ];\n            let isMissingSomeDateLevel = false;\n            if( value && value.length > 0 ) {\n                value.sort();\n                for( let index2 = 0; index2 < value.length; index2++ ) {\n                    if( value[ index2 ] === index2 + 1 ) {\n                        minLevel++;\n                    } else {\n                        isMissingSomeDateLevel = true;\n                        break;\n                    }\n                }\n            }\n            if( isMissingSomeDateLevel ) {\n                switch ( minLevel ) {\n                    case 0: {\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelOne ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelOne ];\n                        }\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelTwo ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelTwo ];\n                        }\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelThree ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelThree ];\n                        }\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ];\n                        }\n                        break;\n                    }\n                    case 1: {\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelTwo ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelTwo ];\n                        }\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelThree ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelThree ];\n                        }\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ];\n                        }\n                        break;\n                    }\n                    case 2: {\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelThree ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelThree ];\n                        }\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ];\n                        }\n                        break;\n                    }\n                    case 3: {\n                        if( searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ] ) {\n                            delete searchFilterMapWithNonRedundantDateCategories[ dateLevelFour ];\n                        }\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n    return searchFilterMapWithNonRedundantDateCategories;\n};\n\nexport let removeDependentClassificationFilters = ( filterValue ) => {\n    let value = filterValue.internalName;\n    let stringValue = '';\n    let values = value.split( '/' );\n    if( values && values.length > 0 ) {\n        let level = parseInt( values[ 0 ] );\n        if( level === 0 ) {\n            return [];\n        } else if( level > 0 ) {\n            let currentLevel = level;\n            level -= 1;\n            stringValue = level.toString();\n            for( let index = 1; index < currentLevel + 1; index++ ) {\n                stringValue += '/' + values[ index ];\n            }\n            return [ stringValue ];\n        }\n    }\n    return [];\n};\n\nexport let chooseFilterSeparator = function( filters ) {\n    let conflictFound = false;\n    _.forEach( filters, ( value, key ) => {\n        if( _.indexOf( value[ 0 ], _filterSeparatorOption1 ) > -1 ) {\n            conflictFound = true;\n            return false;\n        }\n    } );\n    if( conflictFound ) {\n        _filterSeparator = _filterSeparatorOption2;\n    } else {\n        _filterSeparator = _filterSeparatorOption1;\n    }\n};\n\nexport const sortFilterMapKeys = ( filters ) => {\n    let sortedFilterMap = {};\n    let keys = Object.keys( filters );\n    keys.sort();\n    for( let index = 0; index < keys.length; index++ ) {\n        let values = filters[ keys[ index ] ];\n        values.sort();\n        sortedFilterMap[ keys[ index ] ] = values;\n    }\n    return sortedFilterMap;\n};\n\nexport const processFilterValues = ( filterVals ) => {\n    for( let index = 0; index < filterVals.length; index++ ) {\n        let eachValue = filterVals[ index ];\n        eachValue = getDisplayNameForSpecialKeyWord( eachValue );\n        filterVals[ index ] = eachValue;\n    }\n    return filterVals;\n};\n\nexport let buildFilterString = function( filters ) {\n    chooseFilterSeparator( filters );\n    filters = sortFilterMapKeys( filters );\n    return _.map( filters, function( value, key ) {\n        value = processFilterValues( value );\n        return key + '=' + value.join( _filterValueSeparator );\n    } ).join( _filterSeparator );\n};\n\nexport let isHierarchicalChildFilter = function( filterString ) {\n    var isChildFilter = false;\n    if( filterString ) {\n        var nodes = filterString.split( filterPanelUtils.HIERARCHICAL_FACET_SEPARATOR );\n        if( nodes && nodes.length > 2 && !isNaN( nodes[ 0 ] ) ) {\n            var level = parseInt( nodes[ 0 ], 10 );\n            if( level > 0 ) {\n                isChildFilter = true;\n            }\n        }\n    }\n    return isChildFilter;\n};\n\nexport let parseHierarchicalChildFilters = function( filterString, keepIdentifier ) {\n    var filterValues = [];\n    var nodes = filterString.split( filterPanelUtils.HIERARCHICAL_FACET_SEPARATOR );\n\n    if( !isNaN( nodes[ 0 ] ) ) {\n        var level = parseInt( nodes[ 0 ], 10 );\n        for( var i = 0; i <= level; i++ ) {\n            var filterValue = i.toString();\n            for( var j = 1; j <= i + 1; j++ ) {\n                filterValue += filterPanelUtils.HIERARCHICAL_FACET_SEPARATOR + nodes[ j ];\n            }\n            if( keepIdentifier ) {\n                filterValues.push( filterPanelUtils.INTERNAL_OBJECT_FILTER + filterValue );\n            } else {\n                filterValues.push( filterValue );\n            }\n        }\n    }\n    return filterValues;\n};\n\nexport let getFilters = function( groupByCategory, sort, checkHierarchy, keepHierarchyIdentifier, isShapeOrSavedSearch ) {\n    var filterMap = {};\n    if( AwStateService.instance.params.filter ) {\n        // Build the filter map\n        AwStateService.instance.params.filter.split( _filterSeparator ).map( function( filterVal ) {\n            var separatorIndex = filterVal.search( '=' );\n            var key = filterVal.slice( 0, separatorIndex );\n            var valuePart = filterVal.slice( separatorIndex + 1 );\n            var filterPair = [];\n            filterPair[ 0 ] = key;\n            filterPair[ 1 ] = valuePart;\n            if( filterPair.length === 2 && filterPair[ 1 ] !== '' ) {\n                var realFilter = filterPanelUtils.getRealFilterWithNoFilterType( filterPair[ 1 ] );\n                if( checkHierarchy && isHierarchicalChildFilter( realFilter ) && checkIfObjectFilterType( filterPair[ 0 ] ) ) {\n                    filterMap[ filterPair[ 0 ] ] = parseHierarchicalChildFilters( realFilter, keepHierarchyIdentifier );\n                } else if( isShapeOrSavedSearch ) {\n                    if( filterPair[ 0 ] !== 'ShapeSearchProvider' && filterPair[ 0 ] !== 'Geolus Criteria' && filterPair[ 0 ] !== 'SS1shapeBeginFilter' &&\n                        filterPair[ 0 ] !== 'SS1shapeEndFilter' && filterPair[ 0 ] !== 'SS1partShapeFilter' && filterPair[ 0 ] !== 'UpdatedResults.updated_results' ) {\n                        filterMap[ filterPair[ 0 ] ] = filterPair[ 1 ].split( _filterValueSeparator );\n                    }\n                } else {\n                    filterMap[ filterPair[ 0 ] ] = filterPair[ 1 ].split( _filterValueSeparator );\n                }\n            }\n        } );\n    }\n    if( groupByCategory ) {\n        return groupByCategory( filterMap );\n    }\n    return sort ? getSortedFilterMap( filterMap ) : filterMap;\n};\n\nexport let getFilterMapWithPrefilters = () => {\n    var filterMap = {};\n    if( AwStateService.instance.params.filter ) {\n        AwStateService.instance.params.filter.split( _filterSeparator ).map( function( filterVal ) {\n            var separatorIndex = filterVal.search( '=' );\n            var key = filterVal.slice( 0, separatorIndex );\n            var valuePart = filterVal.slice( separatorIndex + 1 );\n            var filterPair = [];\n            filterPair[ 0 ] = key;\n            filterPair[ 1 ] = valuePart;\n            if( filterPair.length === 2 && filterPair[ 1 ] !== '' ) {\n                filterMap[ filterPair[ 0 ] ] = filterPair[ 1 ].split( _filterValueSeparator );\n            }\n        } );\n    }\n    return filterMap;\n};\n\nexport let checkIfObjectFilterType = function( filterCategoryName ) {\n    var isObjectFilterType = false;\n    var responseFilterMap = appCtxService.getCtx( 'searchResponseInfo.searchFilterMap' );\n    if( responseFilterMap && filterCategoryName && responseFilterMap[ filterCategoryName ] ) {\n        var filters = [];\n        filters = responseFilterMap[ filterCategoryName ];\n        if( filters && filters.length > 0 ) {\n            if( filters[ 0 ].searchFilterType === 'ObjectFilter' ) {\n                isObjectFilterType = true;\n            }\n        }\n    }\n    return isObjectFilterType;\n};\n\nexport let getSortedFilterMap = function( params ) {\n    return _.reduce( params, function( acc, nxt, key ) {\n        var trueKey = key.split( _dateFilterMarker )[ 0 ];\n        if( trueKey !== key ) {\n            _.forEach( nxt, function( nxtValue ) {\n                var decoratedNxt = {};\n                decoratedNxt.property = key;\n                decoratedNxt.filter = nxtValue;\n                if( acc[ trueKey ] ) {\n                    acc[ trueKey ].push( decoratedNxt );\n                } else {\n                    acc[ trueKey ] = [];\n                    acc[ trueKey ].push( decoratedNxt );\n                }\n            } );\n        } else {\n            if( acc[ key ] ) {\n                acc[ key ] = acc[ key ].concat( nxt );\n            } else {\n                acc[ key ] = nxt;\n            }\n        }\n        return acc;\n    }, {} );\n};\n\nexport let buildSearchFiltersInt = function( searchContext, filterMap ) {\n    _.forEach( filterMap, function( value, key ) {\n        // If it's a valid filter\n        // get filter type\n        var filterType = 'StringFilter';\n\n        if( key === OWNING_SITE ) {\n            filterType = 'RadioFilter';\n            searchContext.activeFilterMap[ key ] = value.map( function( v1 ) {\n                var filter = {};\n                filter.searchFilterType = 'RadioFilter';\n                filter.stringValue = v1;\n                return filter;\n            } );\n        } else {\n            // Map is used directly by data provider\n            searchContext.activeFilterMap[ key ] = value.map( function( v1 ) {\n                var filter = {};\n\n                if( _.startsWith( v1, filterPanelUtils.INTERNAL_DATE_FILTER ) ) {\n                    filter = filterPanelUtils.getDateRangeFilter( v1.substring( 12, v1.length ) );\n                } else if( _.startsWith( v1, filterPanelUtils.INTERNAL_NUMERIC_RANGE ) ) {\n                    filter = filterPanelUtils.getNumericRangeFilter( v1.substring( 14,\n                        v1.length ) );\n                } else if( _.startsWith( v1, filterPanelUtils.INTERNAL_NUMERIC_FILTER ) ) {\n                    filter.searchFilterType = 'NumericFilter';\n                    var numericValue = parseFloat( v1.substring( 15, v1.length ) );\n                    if( !isNaN( numericValue ) ) {\n                        filter.startNumericValue = numericValue;\n                        filter.endNumericValue = numericValue;\n                    }\n                    filter.stringValue = v1.substring( 15, v1.length );\n                } else if( _.startsWith( v1, filterPanelUtils.INTERNAL_OBJECT_FILTER ) ) {\n                    // SOA handles object filters differently in aw4.0.\n                    // So we need to pass \"StringFilter\" until server side is changed to be the same as aw3.4\n                    // filter.searchFilterType = \"ObjectFilter\";\n                    filter.searchFilterType = 'StringFilter';\n                    filter.stringValue = v1.substring( 14, v1.length );\n                } else if( v1 === '$TODAY' || v1 === '$THIS_WEEK' || v1 === '$THIS_MONTH' ) {\n                    // For special Solr filters like TODAY, THIS_WEEK or THIS_MONTH, mark the filter as DateFilter but keep string values\n                    filter.searchFilterType = 'DateFilter';\n                    filter.stringValue = v1;\n                } else {\n                    filter.searchFilterType = 'StringFilter';\n                    filter.stringValue = v1;\n                }\n                filterType = filter.searchFilterType;\n                return filter;\n            } );\n        }\n\n        // Array to maintain the order\n        searchContext.activeFilters.push( {\n            name: key,\n            values: value,\n            type: filterType\n        } );\n    } );\n};\n\nexport let buildSearchFilters = function( context ) {\n    // Initialize the search context if necessary\n    let searchContext = {};\n\n    // Filter map and filter array are both required\n    // Input to performSearch needs filter map\n    searchContext.activeFilterMap = context && context.search && context.search.activeFilterMap ? _\n        .cloneDeep( context.search.activeFilterMap ) : {};\n\n    // But order matters in some cases and so array is needed\n    searchContext.activeFilters = [];\n\n    // Build up filter map and array\n    buildSearchFiltersInt( searchContext, getFilters() );\n\n    return searchContext;\n};\n\nexport let buildSearchFiltersFromSearchState = function( activeSelectedFiltersMap ) {\n    let activeFiltersMap = {\n        activeFilterMap: {},\n        activeFilters: []\n    };\n    // Build up filter map and array\n    buildSearchFiltersInt( activeFiltersMap, activeSelectedFiltersMap );\n    return activeFiltersMap;\n};\n\nexport let getFilterStringFromActiveFilterMap = function( searchFilterMap, searchFilterCategories ) {\n    var searchParams = getFilters( false );\n\n    var displayString = '';\n    _.map( searchParams, function( value, property ) {\n        var trueProperty = property.split( _dateFilterMarker )[ 0 ];\n        // If it's a valid filter\n        var index = _.findIndex( searchFilterCategories, function( o ) {\n            return o.internalName === trueProperty;\n        } );\n        // Get the filter name first\n        var filterName = '';\n        if( index > -1 ) {\n            filterName = searchFilterCategories[ index ].displayName;\n        } else if( !searchFilterCategories || searchFilterCategories && searchFilterCategories.length < 1 ) {\n            filterName = getCategoryDisplayName( property );\n        } else {\n            return '';\n        }\n\n        // Get display name for all the filter values\n        var filterValues = '';\n        _.forEach( searchParams[ property ], function( filter ) {\n            var filterValue = getBreadCrumbDisplayValue( searchFilterMap[ property ], filterPanelUtils.getRealFilterWithNoFilterType( filter ), searchFilterMap[\n                property ] );\n            filterValues += filterValues === '' ? filterValue : ', ' + filterValue;\n        } );\n        if( filterValues !== '' ) {\n            var individualFilterString = filterName + '=' + filterValues;\n            displayString += displayString === '' ? individualFilterString : ', ' +\n                individualFilterString;\n        }\n    } );\n    return displayString;\n};\n\nexport let convertFilterMapToSavedSearchFilterMap = function( searchContext = {} ) {\n    //var searchContext = appCtxService.getCtx( 'search' );\n    var activeFilterMap = searchContext.activeFilterMap;\n    var activeFilters = searchContext.activeFilters;\n    var searchStringFilterMap = {};\n    if( activeFilterMap ) {\n        _\n            .forEach( activeFilterMap,\n                function( value, key ) {\n                    var filters = [];\n                    for( var indx = 0; indx < value.length; indx++ ) {\n                        var filter = {};\n                        // Saved search object only store SearchStringFilter types\n                        filter.searchFilterType = 'SearchStringFilter';\n                        filter.startNumericValue = 0;\n                        filter.endNumericValue = 0;\n                        filter.startDateValue = 0;\n                        filter.endDateValue = 0;\n                        // Handle date range filters and numeric range filters\n                        if( value[ indx ].searchFilterType === 'DateFilter' &&\n                            !value[ indx ].stringValue ) {\n                            var dateParts1 = value[ indx ].startDateValue.match( /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/ );\n                            var dateParts2 = value[ indx ].endDateValue.match( /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/ );\n                            if( dateParts1 && dateParts2 ) {\n                                var fromDate = new Date( dateParts1 );\n                                var toDate = new Date( dateParts2 );\n                                filter.stringValue = filterPanelUtils.getDateRangeString( fromDate, new Date(\n                                    toDate ) );\n                            } else {\n                                continue;\n                            }\n                        } else if( value[ indx ].searchFilterType === 'NumericFilter' ) {\n                            if( !value[ indx ].stringValue ) {\n                                filter.stringValue = filterPanelUtils.getNumericRangeString(\n                                    value[ indx ].startNumericValue, value[ indx ].endNumericValue );\n                            } else {\n                                filter.stringValue = filterPanelUtils.INTERNAL_NUMERIC_FILTER.concat( value[ indx ].stringValue );\n                            }\n                        } else {\n                            filter = processConvertFilterMapToSavedSearchFilterMap( value, indx, key, filter, activeFilters );\n                        }\n                        filters.push( filter );\n                    }\n                    searchStringFilterMap[ key ] = filters;\n                } );\n    }\n    return searchStringFilterMap;\n};\n\n/**\n * processConvertFilterMapToSavedSearchFilterMap\n * @param {Object} value Value\n * @param {Integer} indx  The index\n * @param {Integer} key  Key\n * @param {Object} filter  The filter object\n * @param {ObjectArray} activeFilters The array of active filters\n * @returns {Object} filter\n */\nexport let processConvertFilterMapToSavedSearchFilterMap = function( value, indx, key, filter, activeFilters ) {\n    // Currently NumericFilters are also being treated as String Filters\n    // verify this filter is numeric filter by checking against activeFilters data structure\n    var numericFilterIndex = _.findIndex( activeFilters, function( object ) {\n        if( object.name === key && object.values ) {\n            return _.startsWith( object.values[ 0 ], filterPanelUtils.INTERNAL_NUMERIC_FILTER ) ||\n                _.startsWith( object.values[ 0 ], filterPanelUtils.INTERNAL_NUMERIC_RANGE );\n        }\n    } );\n    if( numericFilterIndex > -1 ) {\n        filter.stringValue = filterPanelUtils.INTERNAL_NUMERIC_FILTER.concat( value[ indx ].stringValue );\n    } else {\n        filter.stringValue = value[ indx ].stringValue;\n    }\n\n    return filter;\n};\n\nexport let getFilterDisplayValue = function( values, value ) {\n    var dispValue = '';\n    var filterValue = '';\n    var dArray = [];\n    if( _.startsWith( value, filterPanelUtils.INTERNAL_DATE_FILTER ) ) {\n        filterValue = value.replace( filterPanelUtils.INTERNAL_DATE_FILTER, '' );\n        dArray = filterValue.split( '_TO_' );\n        if( dArray.length > 1 ) {\n            var startDate = new Date( dArray[ 0 ] );\n            var endDate = new Date( dArray[ 1 ] );\n            var dateRange = filterPanelUtils.getDateRangeDisplayString( startDate, endDate );\n            dispValue = dateRange.displayName;\n        }\n    } else if( _.startsWith( value, filterPanelUtils.INTERNAL_NUMERIC_RANGE ) ) {\n        filterValue = value.replace( filterPanelUtils.INTERNAL_NUMERIC_RANGE, '' );\n        dArray = filterValue.split( '_TO_' );\n        if( dArray.length > 1 ) {\n            var numericRange = filterPanelUtils.getNumericRangeDisplayString( dArray[ 0 ],\n                dArray[ 1 ] );\n            dispValue = numericRange.displayName;\n        }\n    } else {\n        var ind = _.findIndex( values, function( o ) {\n            return o.stringValue === value;\n        } );\n        if( ind > -1 ) {\n            if( _.endsWith( values[ ind ].stringValue, '$NONE' ) ) {\n                dispValue = localTextBundle.noFilterValue;\n            } else {\n                dispValue = values[ ind ].stringDisplayValue;\n            }\n        }\n    }\n    return dispValue;\n};\n\nexport let getUserValue = function() {\n    let userName = appCtxService.getCtx( 'user' ).props.user_name.dbValue;\n    let userId = appCtxService.getCtx( 'user' ).props.userid.dbValue;\n    return userName + ' ( ' + userId + ' )';\n};\n\nexport const getDisplayNameForSpecialKeyWord = ( value ) => {\n    if( value === '$ME' ) {\n        return getUserValue();\n    }\n    if( value === '$TODAY' ) {\n        return getLocalTextBundle().searchFilterVariableToday;\n    }\n    if( value === '$THIS_WEEK' ) {\n        return getLocalTextBundle().searchFilterVariableThisWeek;\n    }\n    if( value === '$THIS_MONTH' ) {\n        return getLocalTextBundle().searchFilterVariableThisMonth;\n    }\n    if( value === '$MY_GROUP' ) {\n        return getLocalTextBundle().searchFilterVariableMyGroup;\n    }\n    return value;\n};\n\nexport let getSpecialDisplayName = function( value ) {\n    if( value === '$ME' ) {\n        return getUserValue();\n    }\n    if( value === '$TODAY' ) {\n        return getLocalTextBundle().searchFilterVariableToday;\n    }\n    if( value === '$THIS_WEEK' ) {\n        return getLocalTextBundle().searchFilterVariableThisWeek;\n    }\n    if( value === '$THIS_MONTH' ) {\n        return getLocalTextBundle().searchFilterVariableThisMonth;\n    }\n    if( value === '$MY_GROUP' ) {\n        return getLocalTextBundle().searchFilterVariableMyGroup;\n    }\n    return '';\n};\n\nexport let getLocalTextBundle = function() {\n    return localTextBundle;\n};\n\nexport let getBreadCrumbDisplayValue = function( values, value, searchFilters ) {\n    var dispValue = getSpecialDisplayName( value );\n    if( dispValue === '' ) {\n        if( _.startsWith( value, filterPanelUtils.INTERNAL_DATE_FILTER ) ) {\n            var startDate = filterPanelUtils.getDate( processDateStringOffset( values[ 0 ].startDateValue ) );\n            var endDate = filterPanelUtils.getDate( processDateStringOffset( values[ 0 ].endDateValue ) );\n            var dateRange = filterPanelUtils.getDateRangeDisplayString( startDate, endDate );\n            dispValue = dateRange.displayName;\n        } else if( _.startsWith( value, filterPanelUtils.INTERNAL_NUMERIC_RANGE ) ) {\n            var startRange = values[ 0 ].startNumericValue;\n            var endRange = values[ 0 ].endNumericValue;\n            var startEndRange = values[ 0 ].startEndRange;\n            var numericRange = filterPanelUtils.getNumericRangeDisplayString( startRange, endRange,\n                startEndRange );\n            dispValue = numericRange.displayName;\n        } else {\n            var ind = _.findIndex( values, function( o ) {\n                return o.stringValue === value;\n            } );\n            if( ind > -1 ) {\n                // some \"$NONE\" stringValue actually has non-empty stringDisplayValue, so we don't want to display the default \"Unassigned\" in that case.\n                if( values[ ind ].stringDisplayValue ) {\n                    dispValue = values[ ind ].stringDisplayValue;\n                } else if( _.endsWith( value, '$NONE' ) ) {\n                    dispValue = localTextBundle.noFilterValue;\n                } else if( searchFilters ) {\n                    var theFilter = _.find( searchFilters, function( o ) {\n                        return o.stringValue === value;\n                    } );\n                    if( theFilter && theFilter.stringDisplayValue ) {\n                        dispValue = theFilter.stringDisplayValue;\n                    } else {\n                        dispValue = value;\n                    }\n                } else {\n                    dispValue = value;\n                }\n            }\n        }\n    }\n\n    return dispValue;\n};\n\nexport let processDateStringOffset = function( dateString ) {\n    if( dateString.length > 19 ) {\n        var offsetString = dateString.substring( 19 );\n        if( offsetString.length > 4 && offsetString.indexOf( ':' ) === -1 ) {\n            var hour = offsetString.substring( 0, offsetString.length - 2 );\n            var min = offsetString.substring( offsetString.length - 2 );\n            var newOffset = hour.concat( ':', min );\n            dateString = dateString.replace( offsetString, newOffset );\n        }\n    }\n    return dateString;\n};\n\nexport let groupByCategory = function( params ) {\n    return _.reduce( params, function( acc, nxt, key ) {\n        var trueKey = key.split( _dateFilterMarker )[ 0 ];\n        if( trueKey !== key ) {\n            _.forEach( nxt, function( aFilter ) {\n                aFilter.startEndRange = key.substring( trueKey.length, key.length );\n            } );\n        }\n        if( acc[ trueKey ] ) {\n            acc[ trueKey ] = acc[ trueKey ].concat( nxt );\n        } else {\n            acc[ trueKey ] = nxt;\n        }\n        return acc;\n    }, {} );\n};\n\nexport let setFilters = function( params ) {\n    AwStateService.instance.go( '.', {\n        filter: buildFilterString( params )\n    } );\n};\n\nexport let addOrRemoveObjectFilter = function( newParams, category, filter, addRemoveOnly ) {};\n\nlet removePrefilter = function( value ) {\n    if( value && Array.isArray( value ) ) {\n        // remove prefix from prefilter\n        _.forEach( value, function( removePrefix, index, arr ) {\n            if( removePrefix && !removePrefix.hasOwnProperty( 'property' ) && removePrefix.trim().length !== 0 ) {\n                arr[ index ] = arr[ index ].replace( 'AW_PreFilter_', '' );\n            }\n        } );\n    }\n};\n\nexport let addOrRemoveFilter = function( category, filter, addRemoveOnly, filterType ) {};\n\nexport let getFilterExtension = function( filter ) {\n    if( filter.startEndRange === '+1YEAR' ) {\n        return _dateFilterMarker + _dateFilterLevels[ 0 ];\n    }\n    if( filter.startEndRange === '+1MONTH' ) {\n        return _dateFilterMarker + _dateFilterLevels[ 1 ];\n    }\n    if( filter.startEndRange === '+7DAYS' ) {\n        return _dateFilterMarker + _dateFilterLevels[ 2 ];\n    }\n    if( filter.startEndRange === '+1DAY' ) {\n        return _dateFilterMarker + _dateFilterLevels[ 3 ];\n    }\n    return filter.startEndRange;\n};\n\nexport let doSearch = function( targetState, searchCriteria, filters ) {\n    AwStateService.instance.go( targetState ? targetState : '.', {\n        filter: buildFilterString( filters ),\n        searchCriteria: searchCriteria\n    } );\n};\n\nexport let doSearchKeepFilter = function( targetState, searchCriteria, shapeSearchProviderActive, savedSearchUid ) {\n    // If we are in Shape Search or Saved Search context we do not want to keep the filters related to\n    // either when we perform this search.\n    if( shapeSearchProviderActive === 'true' || savedSearchUid ) {\n        AwStateService.instance.go( targetState ? targetState : '.', {\n            filter: buildFilterString( getFilters( false, undefined, undefined, undefined, true ) ),\n            searchCriteria: searchCriteria\n        } );\n    } else {\n        AwStateService.instance.go( targetState ? targetState : '.', {\n            filter: buildFilterString( getFilters( false ) ),\n            searchCriteria: searchCriteria\n        } );\n    }\n};\n\nexport let loadBreadcrumbClearTitle = function() {\n    return localeService.getLocalizedText( 'UIMessages', 'clearBreadCrumb' );\n};\n\nexport let doShapeSearch = function( targetState, searchCriteria, filter ) {\n    var ctx = appCtxService.getCtx( 'searchSearch' );\n    if( ctx ) {\n        delete ctx.savedSearchUid;\n        delete ctx.searchStringPrimary;\n        if( ctx.searchStringSecondary ) {\n            delete ctx.searchStringSecondary;\n            eventBus.publish( 'search.clearSearchBox' );\n        }\n        appCtxService.updateCtx( 'searchSearch', ctx );\n    }\n    var shapeSearchCtx = appCtxService.getCtx( 'shapeSearch' );\n    if( !shapeSearchCtx ) {\n        shapeSearchCtx = {};\n        appCtxService.registerCtx( 'shapeSearch', shapeSearchCtx );\n    }\n    var selectedCtx = appCtxService.getCtx( 'selected' );\n    if( selectedCtx && selectedCtx.props && selectedCtx.props.awb0ArchetypeId && selectedCtx.props.awb0ArchetypeName ) {\n        shapeSearchCtx.seedObjectItemId = selectedCtx.props.awb0ArchetypeId.uiValues[ 0 ];\n        shapeSearchCtx.seedObjectItemName = selectedCtx.props.awb0ArchetypeName.uiValues[ 0 ];\n    } else if( selectedCtx && selectedCtx.props ) {\n        shapeSearchCtx.seedObjectItemId = selectedCtx.props.item_id.uiValues[ 0 ];\n        shapeSearchCtx.seedObjectItemName = selectedCtx.props.object_name.uiValues[ 0 ];\n    }\n\n    AwStateService.instance.go( targetState ? targetState : '.', {\n        filter: filter,\n        searchCriteria: searchCriteria\n    } );\n    return shapeSearchCtx;\n};\n\nexport let loadBreadcrumbTitle = function( label, searchCriteria, totalResultCount, selectionModel ) {\n    // If no label is provided return the loading message\n    if( !label || totalResultCount === undefined ) {\n        return localeService.getLocalizedText( 'BaseMessages', 'LOADING_TEXT' );\n    }\n    return AwPromiseService.instance.all( {\n        label: typeof label === 'string' ? AwPromiseService.instance.when( label ) : localeService.getLocalizedText( label.source, label.key ),\n        selectionCountLabel: localeService.getLocalizedTextFromKey( 'XRTMessages.selectionCountLabel' ),\n        noSearchResultsWithSearchBox: localeService.getLocalizedTextFromKey( 'UIMessages.noSearchResultsWithSearchBox' ),\n        noSearchResults: localeService.getLocalizedTextFromKey( 'UIMessages.noSearchResults' ),\n        resultsCountLabelWithSearchBox: localeService.getLocalizedTextFromKey( 'UIMessages.resultsCountLabelWithSearchBox' ),\n        resultsCountLabel: localeService.getLocalizedTextFromKey( 'UIMessages.resultsCountLabel' )\n    } ).then(\n        function( localizedText ) {\n            // If no results return the no results message\n            if( totalResultCount === 0 ) {\n                if( searchCriteria ) {\n                    return localizedText.noSearchResults.format( '', searchCriteria );\n                }\n                return localizedText.noSearchResults.format( '', localizedText.label );\n            }\n            var resultsCountLabel;\n            if( searchCriteria ) {\n                resultsCountLabel = localizedText.resultsCountLabel.format(\n                    totalResultCount, '', searchCriteria );\n            } else {\n                resultsCountLabel = localizedText.resultsCountLabel.format(\n                    totalResultCount, '', localizedText.label );\n            }\n            // If not in multiselect mode return the result count message\n            if( !selectionModel || !selectionModel.multiSelectEnabled ) {\n                return resultsCountLabel;\n            }\n\n            // Otherwise return the selection count message\n            return localizedText.selectionCountLabel.format( selectionModel\n                .getCurrentSelectedCount(), resultsCountLabel );\n        } );\n};\n\nexport let isShapeSearchContext = function() {\n    let isShapeSearch = appCtxService.ctx.search && appCtxService.ctx.search.reqFilters;\n    isShapeSearch = isShapeSearch && appCtxService.ctx.search.reqFilters.ShapeSearchProvider && appCtxService.ctx.search.reqFilters.ShapeSearchProvider[ 0 ] === 'true';\n    return isShapeSearch;\n};\n\nexport let loadInContentBreadcrumbTitle = function( label, totalResultCount, selectionModel ) {\n    // If no label is provided return the loading message\n    var totalFound = appCtxService.getCtx( 'search.totalFound' );\n    var searchString = appCtxService.getCtx( 'search.criteria.searchString' );\n    var searchInfoCtx = appCtxService.getCtx( 'searchInfo' );\n    var ctxSearchSearch = appCtxService.ctx.searchSearch;\n    if( !label || totalFound === undefined ) {\n        return localeService.getLocalizedText( 'BaseMessages', 'LOADING_TEXT' );\n    }\n    return AwPromiseService.instance.all( {\n        label: typeof label === 'string' ? AwPromiseService.instance.when( label ) : localeService.getLocalizedText( label.source, label.key ),\n        selectionCountLabel: localeService.getLocalizedTextFromKey( 'XRTMessages.selectionCountLabel' ),\n        noSearchResultsWithInContentSearch: localeService.getLocalizedTextFromKey( 'UIMessages.noSearchResultsWithInContentSearch' ),\n        thresholdExceeded: localeService.getLocalizedTextFromKey( 'UIMessages.thresholdExceeded' ),\n        noSearchResultsWithoutInContentSearch: localeService.getLocalizedTextFromKey( 'UIMessages.noSearchResultsWithoutInContentSearch' ),\n        noSearchResults: localeService.getLocalizedTextFromKey( 'UIMessages.noSearchResults' ),\n        resultsCountLabel: localeService.getLocalizedTextFromKey( 'UIMessages.resultsCountLabel' ),\n        shapesCountLabelPart1: localeService.getLocalizedTextFromKey( 'UIMessages.shapesCountLabelPart1' ),\n        shapesCountLabelPart2: localeService.getLocalizedTextFromKey( 'UIMessages.shapesCountLabelPart2' ),\n        oneShapeCountLabelPart1: localeService.getLocalizedTextFromKey( 'UIMessages.oneShapeCountLabelPart1' ),\n        resultsCountLabelWithInContentSearch: localeService.getLocalizedTextFromKey( 'UIMessages.resultsCountLabelWithInContentSearch' ),\n        resultsCountLabelWithoutInContentSearch: localeService.getLocalizedTextFromKey( 'UIMessages.resultsCountLabelWithoutInContentSearch' )\n\n    } ).then(\n        function( localizedText ) {\n            // If no results return the no results message\n            if( totalResultCount === 0 ) {\n                if( searchString ) {\n                    if( ctxSearchSearch && ctxSearchSearch.searchStringSecondary && searchString === ctxSearchSearch.searchStringPrimary + ' AND ' + ctxSearchSearch.searchStringSecondary ) {\n                        return localizedText.noSearchResultsWithInContentSearch.format( ctxSearchSearch.searchStringPrimary, ctxSearchSearch.searchStringSecondary );\n                    }\n                    if( searchInfoCtx && searchInfoCtx.thresholdExceeded === 'true' ) {\n                        searchInfoCtx.noResultsFound = localizedText.thresholdExceeded.format( searchString );\n                        return '';\n                    }\n                    return localizedText.noSearchResultsWithoutInContentSearch.format( searchString );\n                }\n                return localizedText.noSearchResults.format( '', localizedText.label );\n            }\n            var resultsCountLabel;\n            if( searchString ) {\n                resultsCountLabel = processLoadInContentBreadcrumbTitle( ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel );\n            } else {\n                resultsCountLabel = localizedText.resultsCountLabel.format(\n                    totalResultCount, '', localizedText.label );\n            }\n            // If not in multiselect mode return the result count message\n            if( !selectionModel || !selectionModel.multiSelectEnabled ) {\n                return resultsCountLabel;\n            }\n\n            // Otherwise return the selection count message\n            return localizedText.selectionCountLabel.format( selectionModel\n                .getCurrentSelectedCount(), resultsCountLabel );\n        } );\n};\n/**\n * Process Localized text search results.\n * @function processLoadInContentBreadcrumbTitleShape\n * @param {Object} ctxSearchSearch searchString context object\n * @param {Object} searchString searchString context object\n * @param {Object} localizedText The localized text\n * @param {Object} totalResultCount Total Result count\n * @param {Object} resultsCountLabel Results Count Label\n * @return {Object} resultsCountLabel\n */\nexport let processLoadInContentBreadcrumbTitleShape = function( ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel ) {\n    var shapeSearchCtx = appCtxService.getCtx( 'shapeSearch' );\n    resultsCountLabel = {};\n    resultsCountLabel.seedObjectLink = shapeSearchCtx.seedObjectItemId + '/' + shapeSearchCtx.seedObjectItemName;\n    if( ctxSearchSearch.searchStringSecondary ) {\n        if( totalResultCount > 1 ) {\n            resultsCountLabel.part1 = localizedText.shapesCountLabelPart1.format( totalResultCount );\n            resultsCountLabel.part2 = localizedText.shapesCountLabelPart2.format( ctxSearchSearch.searchStringSecondary );\n        } else {\n            resultsCountLabel.part1 = localizedText.oneShapeCountLabelPart1.format( totalResultCount );\n            resultsCountLabel.part2 = localizedText.shapesCountLabelPart2.format( ctxSearchSearch.searchStringSecondary );\n        }\n    } else {\n        if( totalResultCount > 1 ) {\n            resultsCountLabel.part1 = localizedText.shapesCountLabelPart1.format( totalResultCount );\n        } else {\n            resultsCountLabel.part1 = localizedText.oneShapeCountLabelPart1.format( totalResultCount );\n        }\n    }\n    return resultsCountLabel;\n};\n\n/**\n * Process Localized text search results.\n * @function processLoadInContentBreadcrumbTitle\n * @param {Object} ctxSearchSearch searchString context object\n * @param {String} searchString searchString\n * @param {Object} localizedText The localized text\n * @param {Object} totalResultCount Total Result count\n * @param {Object} resultsCountLabel Results Count Label\n * @return {Object} resultsCountLabel\n */\nexport let processLoadInContentBreadcrumbTitle = function( ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel ) {\n    if( isShapeSearchContext() ) {\n        resultsCountLabel = processLoadInContentBreadcrumbTitleShape( ctxSearchSearch, searchString, localizedText, totalResultCount, resultsCountLabel );\n    } else if( ctxSearchSearch && ctxSearchSearch.searchStringSecondary && searchString === ctxSearchSearch.searchStringPrimary + ' AND ' + ctxSearchSearch.searchStringSecondary ) {\n        // define a variable so that the line length does not exceed 207 max-len...\n        let labelText = localizedText.resultsCountLabelWithInContentSearch;\n        resultsCountLabel = labelText.format( totalResultCount, ctxSearchSearch.searchStringPrimary, ctxSearchSearch.searchStringSecondary );\n    } else {\n        resultsCountLabel = localizedText.resultsCountLabelWithoutInContentSearch.format( totalResultCount, searchString );\n    }\n\n    return resultsCountLabel;\n};\n\nexport let setFiltersFromCrumbs = function( crumbs, indexBreadCrumb ) {\n    var newCrumbs = _.dropRightWhile( crumbs, function( c ) {\n        return c.indexBreadCrumb > indexBreadCrumb;\n    } );\n    var filterMap = {};\n    _.forEach( newCrumbs, function( c ) {\n        if( filterMap[ c.internalName ] ) {\n            filterMap[ c.internalName ].push( c.internalValue );\n        } else {\n            filterMap[ c.internalName ] = [ c.internalValue ];\n        }\n    } );\n    var searchContext = appCtxService.getCtx( 'search' );\n    var reqFilters = searchContext.reqFilters;\n    if( reqFilters ) {\n        _.forEach( reqFilters, function( value, key ) {\n            if( filterMap[ key ] ) {\n                filterMap[ key ].push( value );\n            } else {\n                filterMap[ key ] = [ value ];\n            }\n        } );\n    }\n\n    setFilters( filterMap );\n};\n\nexport let displayNoBreadCrumbProvider = function( breadcrumbConfig, label, totalResultCount, searchCriteria ) {\n    var provider = {};\n    AwPromiseService.instance.all( {\n        noCriteriaSpecifiedMessage: localeService.getLocalizedText(\n            breadcrumbConfig.noCriteriaSpecifiedMessage.source,\n            breadcrumbConfig.noCriteriaSpecifiedMessage.key ),\n        noResultsFoundMessage: localeService.getLocalizedText(\n            breadcrumbConfig.noResultsFoundMessage.source,\n            breadcrumbConfig.noResultsFoundMessage.key ),\n        resultsFoundMessage: localeService.getLocalizedText(\n            breadcrumbConfig.resultsFoundMessage.source,\n            breadcrumbConfig.resultsFoundMessage.key )\n    } ).then( function( localizedText ) {\n        if( !searchCriteria ) {\n            provider.title = localizedText.noCriteriaSpecifiedMessage.format();\n        } else if( totalResultCount === undefined || totalResultCount === 0 ) {\n            provider.title = localizedText.noResultsFoundMessage.format( label );\n        } else {\n            provider.title = localizedText.resultsFoundMessage.format( label );\n        }\n    } );\n\n    return provider;\n};\n\nexport let getBreadcrumbProvider = function() {\n    return {\n        crumbs: [],\n        clear: function() {\n            // Publish to AW analytics\n            var sanEvent = {\n                sanAnalyticsType: 'Commands',\n                sanCommandId: 'clearSearchFilter',\n                sanCommandTitle: 'Clear All Search Filters'\n            };\n\n            analyticsSvc.logCommands( sanEvent );\n\n            var searchContext = appCtxService.getCtx( 'search' );\n            var reqFilters = searchContext.reqFilters;\n            if( reqFilters ) {\n                setFilters( reqFilters );\n            } else {\n                setFilters( [] );\n            }\n        },\n        onRemove: function( crumb ) {\n            // Publish to analytics\n            var sanEvent = {\n                sanAnalyticsType: 'Commands',\n                sanCommandId: 'removeSearchFilterCrumb',\n                sanCommandTitle: 'Remove Crumb Filter',\n                sanCmdLocation: 'primarySearchPanel'\n            };\n\n            analyticsSvc.logCommands( sanEvent );\n        },\n        onSelect: function( crumb ) {\n            // Publish to analytics\n            var sanEvent = {\n                sanAnalyticsType: 'Commands',\n                sanCommandId: 'clickSearchFilterCrumb',\n                sanCommandTitle: 'Click Search Filter Crumb',\n                sanCmdLocation: 'primarySearchPanel'\n            };\n\n            analyticsSvc.logCommands( sanEvent );\n\n            setFiltersFromCrumbs( this.crumbs, crumb.indexBreadCrumb );\n        }\n    };\n};\n\nexport let setBreadcrumbValue = function( newBreadcrumb ) {\n    if( newBreadcrumb.internalValue && newBreadcrumb.internalValue !== '' && newBreadcrumb.internalValue === newBreadcrumb.value ) {\n        var searchContext = appCtxService.getCtx( 'searchSearch' );\n        if( searchContext && searchContext.originalInputCategories ) {\n            var categoryId = _.findIndex( searchContext.originalInputCategories, function( aCat ) {\n                return newBreadcrumb.internalName === aCat.internalName;\n            } );\n            if( searchContext.originalInputCategories[ categoryId ] && searchContext.originalInputCategories[ categoryId ].filterValues ) {\n                if( searchContext.originalInputCategories[ categoryId ].filterValues.parentnodes ) {\n                    var foundFilter = _.findIndex( searchContext.originalInputCategories[ categoryId ].filterValues.parentnodes, function( aFilter ) {\n                        return newBreadcrumb.internalValue === aFilter.stringValue;\n                    } );\n                    newBreadcrumb.value = searchContext.originalInputCategories[ categoryId ].filterValues.parentnodes[ foundFilter ].stringDisplayValue;\n                }\n            }\n        }\n    }\n};\n\nexport let setBreadcrumbDisplayName = function( newBreadcrumb, categoriesDisplayed ) {\n    var foundCategory = _.findIndex( categoriesDisplayed, function( aCategory ) {\n        return aCategory === newBreadcrumb.displayName;\n    } );\n    if( foundCategory < 0 ) {\n        categoriesDisplayed.push( newBreadcrumb.displayName );\n    } else {\n        newBreadcrumb.displayName = '';\n    }\n};\n\nexport let setBreadcrumbProviderTitle = function( provider, label, totalResultCount,\n    selectionModel, secondarySearchEnabled ) {\n    loadBreadcrumbClearTitle().then( function( result ) {\n        provider.clearBreadCrumb = result;\n    } );\n    // Load and set the title async\n    if( secondarySearchEnabled ) {\n        loadInContentBreadcrumbTitle( label, totalResultCount, selectionModel ).then(\n            function( result ) {\n                provider.title = result;\n            } );\n    } else {\n        loadBreadcrumbTitle( label, totalResultCount, selectionModel ).then(\n            function( result ) {\n                provider.title = result;\n            } );\n    }\n};\n\nexport let buildBreadcrumbProvider = function( breadcrumbConfig, label, totalResultCount,\n    selectionModel, searchFilterCategories, searchFilterMap, secondarySearchEnabled, searchCriteria ) {\n    if( breadcrumbConfig && breadcrumbConfig.noBreadCrumb === 'true' ) {\n        return displayNoBreadCrumbProvider( breadcrumbConfig, label, totalResultCount, searchCriteria );\n    }\n    var provider = getBreadcrumbProvider();\n\n    // For each of the current search params\n    var searchParams = getFilters( false, true, true, true );\n    var categoriesDisplayed = [];\n    var indexBreadCrumb = -1;\n    _.forEach( searchParams, function( value ) {\n        removePrefilter( value );\n    } );\n    _.map( searchParams, function( value, property ) {\n        // If it's a valid filter\n        var index = _.findIndex( searchFilterCategories, function( o ) {\n            return o.internalName === property;\n        } );\n        var newBreadcrumb = {};\n\n        _.forEach( searchParams[ property ], function( filter ) {\n            var origProperty = property;\n            var origFilter = filterPanelUtils.getRealFilterWithNoFilterType( filter );\n            var filterType = filterPanelUtils.getFilterTypeFromFilterValue( filter );\n            if( filter.hasOwnProperty( 'property' ) ) {\n                origProperty = filter.property;\n                origFilter = filter.filter;\n            }\n            if( index > -1 ) {\n                // Make a breadcrumb for it\n                newBreadcrumb = {\n                    displayName: searchFilterCategories[ index ].displayName + ':',\n                    displayNameHidden: searchFilterCategories[ index ].displayName + ':',\n                    internalName: origProperty,\n                    internalValue: origFilter,\n                    filterType: filterType\n                };\n            } else if( !searchFilterCategories || searchFilterCategories &&\n                searchFilterCategories.length < 1 ) {\n                // Need still display the crumbs\n                var categoryDisplayName = getCategoryDisplayName( property );\n                if( !categoryDisplayName ) {\n                    return provider;\n                }\n                newBreadcrumb = {\n                    displayName: categoryDisplayName + ':',\n                    displayNameHidden: categoryDisplayName + ':',\n                    internalName: property,\n                    internalValue: origFilter,\n                    filterType: filterType\n                };\n            } else {\n                return provider;\n            }\n            provider = processBreadCrumbsSearchFilters( provider, indexBreadCrumb, categoriesDisplayed, newBreadcrumb, searchFilterMap, origProperty, origFilter );\n        } );\n    } );\n    setBreadcrumbProviderTitle( provider, label, totalResultCount,\n        selectionModel, secondarySearchEnabled );\n\n    return provider;\n};\n\n/**\n * Process Breadcrumbs with Search Filters.\n * @function processBreadCrumbsSearchFilters\n * @param {Object} provider The object newBreadCrumb\n * @param {Object} indexBreadCrumb The object newBreadCrumb\n * @param {Object} categoriesDisplayed The object newBreadCrumb\n * @param {Object} newBreadcrumb The object newBreadCrumb\n * @param {Object} searchFilterMap The search filter map\n * @param {Object} origProperty Original Property\n * @param {Object} origFilter Original filter\n * @return {Object} BreadCrumd Provider\n */\nexport let processBreadCrumbsSearchFilters = function( provider, indexBreadCrumb, categoriesDisplayed, newBreadcrumb, searchFilterMap, origProperty, origFilter ) {\n    if( searchFilterMap ) {\n        newBreadcrumb.value = getBreadCrumbDisplayValue( searchFilterMap[ origProperty ], origFilter );\n    }\n\n    if( newBreadcrumb.value && newBreadcrumb.value !== '' ) {\n        setBreadcrumbValue( newBreadcrumb );\n        setBreadcrumbDisplayName( newBreadcrumb, categoriesDisplayed );\n        ++indexBreadCrumb;\n        newBreadcrumb.indexBreadCrumb = indexBreadCrumb;\n        provider.crumbs.push( newBreadcrumb );\n    }\n\n    if( newBreadcrumb.internalName === OWNING_SITE ) {\n        newBreadcrumb.filterType = 'RadioFilter';\n    }\n\n    /* the OwningSite.owning_site is a property which server side filters on to return local or remote objects.\n    This property does not exists in DB. It's a hardcoded value that server side expects and returns.*/\n    if( newBreadcrumb.internalName === OWNING_SITE && newBreadcrumb.internalValue === _local ) {\n        newBreadcrumb.showRemoveButton = false;\n    } else {\n        newBreadcrumb.showRemoveButton = true;\n    }\n\n    return provider;\n};\n\n// Return display name for a category\nexport let getCategoryDisplayName = function( property ) {\n    var categoryDisplayName = '';\n    // first check if it can be found in the prior search.\n    var context = appCtxService.getCtx( 'searchSearch' );\n    if( context && context.originalInputCategories && context.originalInputCategories.length > 0 ) {\n        var index = _.findIndex( context.originalInputCategories, function( o ) {\n            return o.internalName === property;\n        } );\n        if( index > -1 ) {\n            categoryDisplayName = context.originalInputCategories[ index ].displayName;\n            return categoryDisplayName;\n        }\n    }\n    var aTypeProperty = property.split( '.' );\n    if( aTypeProperty && aTypeProperty.length === 2 ) {\n        var type = cmm.getType( aTypeProperty[ 0 ] );\n        if( !type ) {\n            // Category.category\n            var catName = aTypeProperty[ 1 ];\n            categoryDisplayName = catName[ 0 ].toUpperCase() + catName.slice( 1 ).toLowerCase();\n        } else {\n            var propName = filterPanelUtils.getPropertyFromFilter( aTypeProperty[ 1 ] );\n            var pd = type.propertyDescriptorsMap[ propName ];\n            if( !pd ) {\n                categoryDisplayName = aTypeProperty[ 1 ];\n            } else {\n                categoryDisplayName = pd.displayName;\n            }\n        }\n    }\n    return categoryDisplayName;\n};\n\nexport let loadConfiguration = function() {\n    localeService.getLocalizedTextFromKey( 'UIMessages.noFilterValue', true ).then( result => localTextBundle.noFilterValue = result );\n    localeService.getLocalizedTextFromKey( 'SearchMessages.searchFilterVariableMyGroup', true ).then( result => localTextBundle.searchFilterVariableMyGroup = result );\n    localeService.getLocalizedTextFromKey( 'SearchMessages.searchFilterVariableThisMonth', true ).then( result => localTextBundle.searchFilterVariableThisMonth = result );\n    localeService.getLocalizedTextFromKey( 'SearchMessages.searchFilterVariableThisWeek', true ).then( result => localTextBundle.searchFilterVariableThisWeek = result );\n    localeService.getLocalizedTextFromKey( 'dateTimeServiceMessages.currentText', true ).then( result => localTextBundle.searchFilterVariableToday = result );\n};\n\nloadConfiguration();\n\nconst awSearchFilterService = {\n    _dateFilterMarker,\n    _dateFilterLevels,\n    _filterSeparator,\n    _filterValueSeparator,\n    chooseFilterSeparator,\n    buildFilterString,\n    isHierarchicalChildFilter,\n    parseHierarchicalChildFilters,\n    getFilters,\n    checkIfObjectFilterType,\n    getSortedFilterMap,\n    buildSearchFiltersInt,\n    buildSearchFilters,\n    getFilterStringFromActiveFilterMap,\n    convertFilterMapToSavedSearchFilterMap,\n    getFilterDisplayValue,\n    getSpecialDisplayName,\n    getLocalTextBundle,\n    getBreadCrumbDisplayValue,\n    processDateStringOffset,\n    groupByCategory,\n    setFilters,\n    addOrRemoveObjectFilter,\n    addOrRemoveFilter,\n    getFilterExtension,\n    doSearch,\n    doSearchKeepFilter,\n    isShapeSearchContext,\n    loadBreadcrumbClearTitle,\n    doShapeSearch,\n    loadBreadcrumbTitle,\n    loadInContentBreadcrumbTitle,\n    setFiltersFromCrumbs,\n    displayNoBreadCrumbProvider,\n    getBreadcrumbProvider,\n    setBreadcrumbValue,\n    setBreadcrumbDisplayName,\n    setBreadcrumbProviderTitle,\n    buildBreadcrumbProvider,\n    getCategoryDisplayName,\n    loadConfiguration,\n    processLoadInContentBreadcrumbTitleShape,\n    processLoadInContentBreadcrumbTitle,\n    processConvertFilterMapToSavedSearchFilterMap,\n    processBreadCrumbsSearchFilters,\n    buildSearchFiltersFromSearchState,\n    getFilterMapWithPrefilters,\n    getDisplayNameForSpecialKeyWord,\n    getUserValue,\n    sortFilterMapKeys,\n    processFilterValues,\n    removeDependentDateFilters,\n    getPendingFiltersMap,\n    clearAllSelectedFiltersAndRanges,\n    clearNumericRangeInfoFromCategory,\n    clearDateRangeInfoFromCategory,\n    removeDependentClassificationFilters\n};\n\nexport default awSearchFilterService;\n"]},"metadata":{},"sourceType":"module"}
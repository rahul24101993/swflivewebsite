{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Benchmark object to record the performance metrics\n *\n * @module js/splmStatsBenchmark\n */\nimport { getBrowserType } from 'js/splmStatsUtils';\n/**\n * Instances of this class represent a processor for HTTP Request/Response\n *\n * @class SPLMStatsProfiler\n */\n\nfunction SPLMStatsBenchmark() {\n  let self = this;\n  let _processorMap = {};\n  let _reporters = []; // Context string as identifier\n\n  let _title = '';\n  let _processingTime = false;\n\n  self.includeProcessorTime = function () {\n    _processingTime = true;\n  };\n\n  self.getIncludeProcessorTime = function () {\n    return _processingTime;\n  };\n\n  self.start = function () {\n    for (let key in _processorMap) {\n      _processorMap[key].start();\n    }\n  };\n\n  self.stop = function () {\n    for (let key in _processorMap) {\n      _processorMap[key].stop();\n    }\n  };\n\n  self.getMetrics = function () {\n    let metrics = {};\n\n    for (let key in _processorMap) {\n      let processor = _processorMap[key];\n      Object.assign(metrics, processor.getMetrics());\n      Object.assign(metrics, processor.getProcessingTime());\n    }\n\n    metrics.title = _title;\n    metrics.BrowserType = getBrowserType();\n    return metrics;\n  };\n\n  self.report = function (elapsed) {\n    let metrics = self.getMetrics();\n\n    if (elapsed) {\n      metrics.TTI = elapsed;\n    }\n\n    _reporters.forEach(function (reporter) {\n      reporter.report(metrics);\n    });\n  };\n\n  self.addProcessor = function (name, processor) {\n    _processorMap[name] = processor;\n  };\n\n  self.addReporter = function (reporter) {\n    _reporters.push(reporter);\n  };\n\n  self.setTitle = function (title) {\n    _title = title;\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsBenchmark;\n_c = SPLMStatsBenchmark;\nexport default SPLMStatsBenchmark;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsBenchmark\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsBenchmark\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsBenchmark.js"],"names":["SPLMStatsBenchmark","self","_processorMap","_reporters","_title","_processingTime","metrics","processor","Object","getBrowserType","reporter"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA,cAAA,QAAA,mBAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,kBAAA,GAA8B;EAC1B,IAAIC,IAAI,GAAR,IAAA;EAEA,IAAIC,aAAa,GAAjB,EAAA;EACA,IAAIC,UAAU,GAJY,EAI1B,CAJ0B,CAM1B;;EACA,IAAIC,MAAM,GAAV,EAAA;EAEA,IAAIC,eAAe,GAAnB,KAAA;;EAEAJ,IAAI,CAAJA,oBAAAA,GAA4B,YAAW;IACnCI,eAAe,GAAfA,IAAAA;EADJJ,CAAAA;;EAIAA,IAAI,CAAJA,uBAAAA,GAA+B,YAAW;IACtC,OAAA,eAAA;EADJA,CAAAA;;EAIAA,IAAI,CAAJA,KAAAA,GAAa,YAAW;IACpB,KAAK,IAAL,GAAA,IAAA,aAAA,EAAgC;MAC5BC,aAAa,CAAbA,GAAa,CAAbA,CAAAA,KAAAA;IACH;EAHLD,CAAAA;;EAMAA,IAAI,CAAJA,IAAAA,GAAY,YAAW;IACnB,KAAK,IAAL,GAAA,IAAA,aAAA,EAAgC;MAC5BC,aAAa,CAAbA,GAAa,CAAbA,CAAAA,IAAAA;IACH;EAHLD,CAAAA;;EAMAA,IAAI,CAAJA,UAAAA,GAAkB,YAAW;IACzB,IAAIK,OAAO,GAAX,EAAA;;IACA,KAAK,IAAL,GAAA,IAAA,aAAA,EAAgC;MAC5B,IAAIC,SAAS,GAAGL,aAAa,CAA7B,GAA6B,CAA7B;MACAM,MAAM,CAANA,MAAAA,CAAAA,OAAAA,EAAwBD,SAAS,CAAjCC,UAAwBD,EAAxBC;MACAA,MAAM,CAANA,MAAAA,CAAAA,OAAAA,EAAwBD,SAAS,CAAjCC,iBAAwBD,EAAxBC;IACH;;IACDF,OAAO,CAAPA,KAAAA,GAAAA,MAAAA;IACAA,OAAO,CAAPA,WAAAA,GAAsBG,cAAtBH,EAAAA;IACA,OAAA,OAAA;EATJL,CAAAA;;EAYAA,IAAI,CAAJA,MAAAA,GAAc,UAAA,OAAA,EAAoB;IAC9B,IAAIK,OAAO,GAAGL,IAAI,CAAlB,UAAcA,EAAd;;IAEA,IAAA,OAAA,EAAc;MACVK,OAAO,CAAPA,GAAAA,GAAAA,OAAAA;IACH;;IACDH,UAAU,CAAVA,OAAAA,CAAoB,UAAA,QAAA,EAAqB;MACrCO,QAAQ,CAARA,MAAAA,CAAAA,OAAAA;IADJP,CAAAA;EANJF,CAAAA;;EAWAA,IAAI,CAAJA,YAAAA,GAAoB,UAAA,IAAA,EAAA,SAAA,EAA4B;IAC5CC,aAAa,CAAbA,IAAa,CAAbA,GAAAA,SAAAA;EADJD,CAAAA;;EAIAA,IAAI,CAAJA,WAAAA,GAAmB,UAAA,QAAA,EAAqB;IACpCE,UAAU,CAAVA,IAAAA,CAAAA,QAAAA;EADJF,CAAAA;;EAIAA,IAAI,CAAJA,QAAAA,GAAgB,UAAA,KAAA,EAAkB;IAC9BG,MAAM,GAANA,KAAAA;EADJH,CAAAA;;EAIA,OAAA,IAAA;AACH;;MAnED,kB;KAASD,kB;AAqET,eAAA,kBAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Benchmark object to record the performance metrics\n *\n * @module js/splmStatsBenchmark\n */\nimport { getBrowserType } from 'js/splmStatsUtils';\n\n/**\n * Instances of this class represent a processor for HTTP Request/Response\n *\n * @class SPLMStatsProfiler\n */\nfunction SPLMStatsBenchmark() {\n    let self = this;\n\n    let _processorMap = {};\n    let _reporters = [];\n\n    // Context string as identifier\n    let _title = '';\n\n    let _processingTime = false;\n\n    self.includeProcessorTime = function() {\n        _processingTime = true;\n    };\n\n    self.getIncludeProcessorTime = function() {\n        return _processingTime;\n    };\n\n    self.start = function() {\n        for( let key in _processorMap ) {\n            _processorMap[ key ].start();\n        }\n    };\n\n    self.stop = function() {\n        for( let key in _processorMap ) {\n            _processorMap[ key ].stop();\n        }\n    };\n\n    self.getMetrics = function() {\n        let metrics = {};\n        for( let key in _processorMap ) {\n            let processor = _processorMap[ key ];\n            Object.assign( metrics, processor.getMetrics() );\n            Object.assign( metrics, processor.getProcessingTime() );\n        }\n        metrics.title = _title;\n        metrics.BrowserType = getBrowserType();\n        return metrics;\n    };\n\n    self.report = function( elapsed ) {\n        let metrics = self.getMetrics();\n\n        if( elapsed ) {\n            metrics.TTI = elapsed;\n        }\n        _reporters.forEach( function( reporter ) {\n            reporter.report( metrics );\n        } );\n    };\n\n    self.addProcessor = function( name, processor ) {\n        _processorMap[ name ] = processor;\n    };\n\n    self.addReporter = function( reporter ) {\n        _reporters.push( reporter );\n    };\n\n    self.setTitle = function( title ) {\n        _title = title;\n    };\n\n    return self;\n}\n\nexport default SPLMStatsBenchmark;\n"]},"metadata":{},"sourceType":"module"}
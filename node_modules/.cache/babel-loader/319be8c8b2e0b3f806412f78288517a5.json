{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwSidenavService.js\"; // Copyright (c) 2021 Siemens\n\nimport { includeComponent } from 'js/moduleLoader';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport AwIconButton from 'viewmodel/AwIconButtonViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport sidenavService from './AwSidenavHelperService';\nimport appCtx from 'js/appCtxService';\nimport narrowModeSvc from 'js/aw.narrowMode.service';\nimport wcagSvc from 'js/wcagService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar hasConfigChanged = false;\nlet _ongoing = {};\nlet sidenavConfig = {};\nlet ctxPath = 'awSidenavConfig.globalSidenavContext.';\nconst MOBILE = 'mobile';\nconst DESKTOP = 'desktop';\nconst TABLET = 'tablet';\nvar configProperties = {\n  large: 'LARGE',\n  default: 'DEFAULT',\n  full: 'FULL',\n  standard: 'STANDARD',\n  wide: 'WIDE',\n  extraWide: 'EXTRAWIDE',\n  doubleWide: 'DOUBLEWIDE',\n  float: 'FLOAT',\n  push: 'PUSH',\n  right_to_left: 'RIGHT_TO_LEFT',\n  left_to_right: 'LEFT_TO_RIGHT',\n  isPinUnpinEnabled: false,\n  isFloatPanel: function (id) {\n    return sidenavConfig[id].slide === this.float;\n  },\n  isPushPanel: function (id) {\n    return sidenavConfig[id].slide === this.push;\n  },\n  isDefaultHeightPanel: function (id) {\n    return sidenavConfig[id].height === this.default;\n  },\n  isFullHeightPanel: function (id) {\n    return sidenavConfig[id].height === this.full;\n  },\n  isLargeHeightPanel: function (id) {\n    return sidenavConfig[id].height === this.large;\n  },\n  isWideWidthPanel: function (id) {\n    return sidenavConfig[id].width === this.wide;\n  },\n  isStandardWidthPanel: function (id) {\n    return sidenavConfig[id].width === this.standard;\n  },\n  isHeightWidthEqual: function (id) {\n    return sidenavConfig[id].width === sidenavConfig[id].height;\n  },\n  getSidenavMode: function (id) {\n    let mode = DESKTOP;\n\n    if (sidenavConfig[id].width === this.standard) {\n      mode = MOBILE;\n    } else if (sidenavConfig[id].width === this.wide || sidenavConfig[id].width === this.extraWide || sidenavConfig[id].width === this.doubleWide) {\n      mode = TABLET;\n    }\n\n    return mode;\n  }\n};\nexport const copyRef = params => {\n  return params.get('sideNavInfo');\n};\n\nconst patchVMData = (vm, updatedData) => {\n  vm.dispatch({\n    path: 'data.config',\n    value: updatedData\n  });\n};\n\nlet setSidenavInitialData = (vm, prop) => {\n  let dataToUpdate = { ...vm.data.config\n  };\n\n  if (vm.data.config.id !== prop.id) {\n    dataToUpdate.id = prop.id;\n    sidenavConfig[prop.id] = {};\n  }\n\n  if (vm.data.config.isPinnable === null || vm.data.config.isPinnable === undefined) {\n    dataToUpdate.isPinnable = prop.config.isPinnable || false;\n  }\n\n  if (vm.data.config.isPinUnpinEnabled === null || vm.data.config.isPinUnpinEnabled === undefined) {\n    dataToUpdate.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n  }\n\n  if (vm.data.config.panelPinned === null || vm.data.config.panelPinned === undefined) {\n    dataToUpdate.panelPinned = prop.config.panelPinned || false;\n  }\n\n  if (!vm.data.config.slide) {\n    dataToUpdate.slide = prop.config.slide;\n  }\n\n  if (!_.isEqual(vm.data.config, dataToUpdate)) {\n    patchVMData(vm, dataToUpdate);\n  }\n};\n\nlet resetConfigStatus = () => {\n  hasConfigChanged = false;\n}; // called on unMount\n\n\nexport let clearSidenav = data => {\n  var sidenavCmdId = appCtx.getCtx('sidenavCommandId');\n\n  if (sidenavCmdId && sidenavCmdId === data.currentCommandId) {\n    appCtx.unRegisterCtx('sidenavCommandId');\n  }\n\n  resetConfigStatus();\n  appCtx.updatePartialCtx(ctxPath + data.id, null); // Once the page level component hosting the sidenav is destroyed , it ought to be\n  // SideNav's responsibility to also deregister the attributes from ctx it registered when the sidenav mounted\n\n  appCtx.unRegisterCtx('activeToolsAndInfoCommand');\n  appCtx.unRegisterCtx('activeNavigationCommand');\n};\nexport let togglePinState = data => {\n  if (data.isPinnable) {\n    let config = { ...data\n    };\n    sidenavService.togglePinState(config);\n    return config;\n  }\n};\nexport let togglePinUnpinPanelState = data => {\n  let config = { ...data\n  };\n  sidenavService.togglePinUnpinPanelState(config);\n  return config;\n};\n\nvar setDefaultConfig = function (prop) {\n  const {\n    viewModel\n  } = prop;\n  setSidenavInitialData(viewModel, prop);\n\n  if (hasConfigChanged) {\n    return;\n  }\n\n  let updatedConfig = {}; // default placeholder height and width values\n\n  updatedConfig.width = prop.config.width || configProperties.standard;\n  updatedConfig.height = prop.config.height || configProperties.full;\n  updatedConfig.isPinnable = prop.config.isPinnable || false;\n  updatedConfig.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n  updatedConfig.panelPinned = prop.config.panelPinned || false;\n  updatedConfig.direction = prop.config.direction || configProperties.left_to_right;\n  updatedConfig.slide = prop.config.slide;\n  updatedConfig.animation = prop.config.animation !== false;\n\n  if (configProperties.isDefaultHeightPanel(prop.id)) {\n    updatedConfig.height = updatedConfig.width;\n  } // push panels will always be full height\n\n\n  if (configProperties.isPushPanel(prop.id)) {\n    updatedConfig.height = configProperties.full;\n  }\n\n  updatedConfig.isAnimationDisabled = !updatedConfig.animation;\n  updatedConfig.isLeftToRight = updatedConfig.direction === configProperties.left_to_right;\n\n  if (!_.isEqual(updatedConfig, sidenavConfig[prop.id])) {\n    sidenavConfig[prop.id] = updatedConfig;\n  }\n};\n\nexport let createSideNavInfo = sideNavInfo => {\n  if (sideNavInfo) {\n    sideNavInfo.current = {\n      sideNavFocused: false\n    };\n  }\n\n  return sideNavInfo;\n};\nexport let sideNavOpenCloseCallback = async function (eventData, id, data, sideNavInfo) {\n  let config = { ...data\n  }; //create object to store sidenav info (status)\n\n  if (!data.sideNavInfo) {\n    data.sideNavInfo = createSideNavInfo(sideNavInfo);\n  } // All consumers should be using id and eventData should be passed through\n\n\n  if (!id || !eventData) {\n    logger.error('id attribute and eventData are required');\n    return config;\n  }\n\n  if (!_ongoing[id]) {\n    if (id === eventData.id) {\n      if (eventData.config) {\n        sidenavConfig[id].width = eventData.config.width || sidenavConfig[id].width || configProperties.standard;\n        sidenavConfig[id].height = eventData.config.height || sidenavConfig[id].height || configProperties.full;\n        sidenavConfig[id].hasSlideChanged = Boolean(eventData.config.slide);\n\n        if (eventData.config.slide) {\n          if (eventData.config.slide !== sidenavConfig[id].slide) {\n            sidenavConfig[id].slide = eventData.config.slide;\n          }\n        } else {\n          sidenavConfig[id].slide = configProperties.float;\n        }\n\n        sidenavConfig[id].isPinnable = eventData.config.isPinnable || sidenavConfig[id].isPinnable || false;\n        sidenavConfig[id].isPinUnpinEnabled = eventData.config.isPinUnpinEnabled || sidenavConfig[id].isPinUnpinEnabled || false;\n        sidenavConfig[id].panelPinned = eventData.config.panelPinned || sidenavConfig[id].panelPinned || false;\n\n        if (configProperties.isDefaultHeightPanel(id)) {\n          sidenavConfig[id].height = sidenavConfig[id].width;\n        }\n\n        if (configProperties.isPushPanel(id)) {\n          sidenavConfig[id].height = configProperties.full;\n        }\n\n        hasConfigChanged = true;\n      } else if (hasConfigChanged) {\n        hasConfigChanged = false;\n      }\n\n      sidenavService.setLocationCtx(id); //revisitMe: Jignesh Put back the other code for autoclose of sidenav\n\n      _ongoing[eventData.id] = sidenavService.createSidenav(config, eventData).then(vmProps => {\n        //reCalcPanelPosition();\n        delete _ongoing[eventData.id];\n        return vmProps;\n      });\n      return _ongoing[eventData.id];\n    } // pass keepOthersOpen to keep the other sidenavs open when the current sidenav is opened\n    else if (!eventData.keepOthersOpen) {\n      // Need to close all the other open panels not having this id\n      return sidenavService.closeSidenav(config, eventData).then(() => {\n        return config;\n      });\n    }\n  } //revisitMe: Jignesh: Returna promise here for command panel service\n\n\n  return config;\n};\n/**\n * render function for AwSidenav\n * @param {*} param context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nexport const awSidenavRenderFunction = prop => {\n  setDefaultConfig(prop);\n  const {\n    config,\n    id\n  } = prop;\n\n  const getSidenavContainerClasses = () => {\n    let classes = 'sw-column aw-sidenav-layoutContainer';\n\n    if (sidenavConfig[id].width) {\n      classes += ' aw-sidenav-' + sidenavConfig[id].width.toLowerCase();\n    }\n\n    if (sidenavConfig[id].height) {\n      classes += ' aw-sidenav-vertical-' + sidenavConfig[id].height.toLowerCase();\n    }\n\n    const addSlideClasses = slide => {\n      let sidenavClasses = '';\n      sidenavClasses += slide ? ' aw-sidenav-' + slide.toLowerCase() : '';\n      sidenavClasses += slide === configProperties.float && !sidenavConfig[id].isLeftToRight ? ' aw-sidenav-float-right' : '';\n      sidenavClasses += slide === configProperties.float && sidenavConfig[id].isLeftToRight ? ' aw-sidenav-float-left' : '';\n      return sidenavClasses;\n    };\n\n    if (sidenavConfig[id].hasSlideChanged) {\n      classes += addSlideClasses(prop.viewModel.data.config.slide);\n    } else {\n      classes += addSlideClasses(prop.config.slide);\n    }\n\n    classes += prop.viewModel.data.config.sidenavOpened ? ' aw-sidenav-expand' : '';\n    classes += sidenavConfig[id].isAnimationDisabled ? ' aw-sidenav-transition' : '';\n    classes += config.direction === 'RIGHT_TO_LEFT' ? ' aw-sidenav-leftBackground' : ' aw-sidenav-rightBackground';\n    classes += sidenavConfig[id].isPinnable ? ' autoclose afx-accent-background' : '';\n    classes += !prop.viewModel.data.config.sidenavOpened ? ' invisible' : '';\n    return classes;\n  };\n\n  const getPinnedClass = () => {\n    let justifyClass = 'sw-row justify-right ';\n    return prop.viewModel.data.config.pinned ? justifyClass + 'pinned' : justifyClass + 'unpinned';\n  };\n\n  const getAriaLabel = (id, i18n) => {\n    let label = i18n.TASK_PANEL;\n\n    if (id === 'aw_navigation') {\n      label = i18n.COMMAND_PANEL;\n    } else if (id === 'globalNavigationSideNav') {\n      label = i18n.GLOBALNAV_PANEL;\n    }\n\n    return label;\n  };\n\n  const handleClick = e => {\n    setTimeout(() => {\n      let sidenavContainer = prop.elementRefList.get('sidenav').current;\n      var autoCloseRect = sidenavContainer.getBoundingClientRect(); //Handle the case where the click is triggered right after resize\n\n      var mouseXCord = e.pageX || e.touches && e.touches[0].pageX;\n\n      if (sidenavContainer.offsetWidth === mouseXCord - sidenavContainer.offsetLeft) {\n        return;\n      } // If the panel is already open and it is not pinned and user clicks outside of panel i.e. not on panel itself, then close the panel\n\n\n      if (mouseXCord < autoCloseRect.right && mouseXCord > autoCloseRect.left) {\n        // inside click\n        return;\n      } // outside click\n\n\n      if (!prop.viewModel.data.config.pinned) {\n        //revisitMe: Jignesh - Need to fix the same element click issue that opened the sidenav\n        //let shallRemainOpen = $scope.doesSideNavRemainOpen( eventData );\n        //if( !shallRemainOpen ) {\n        //appCtx.unRegisterCtx( 'sidenavCommandId' );\n        let dataToUpdate = { ...prop.viewModel.data.config\n        };\n        dataToUpdate.sidenavOpened = false;\n        dataToUpdate.view = null;\n        patchVMData(prop.viewModel, dataToUpdate);\n        emptyHandler();\n        appCtx.updatePartialCtx(ctxPath + prop.viewModel.data.config.id, {\n          open: false,\n          pinned: prop.viewModel.data.config.pinned,\n          slide: prop.viewModel.data.config.slide\n        });\n      }\n    }, 200);\n  };\n  /* Resizable drag handle starts here */\n\n\n  let handleMouseUp = mouseEvent => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('touchmove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n    document.removeEventListener('touchend', handleMouseUp);\n\n    if (mouseEvent) {\n      // Publish an event that the sidenav drag has ended\n      eventBus.publish('awsidenav.resizeEnded');\n      let dataToUpdate = { ...prop.viewModel.data.config\n      };\n      dataToUpdate.mode = TABLET;\n      let sidenavWidth = prop.elementRefList.get('sidenav').current.offsetWidth;\n\n      if (sidenavWidth < 400) {\n        dataToUpdate.mode = MOBILE;\n      } else if (sidenavWidth > 800) {\n        dataToUpdate.mode = DESKTOP;\n      }\n\n      patchVMData(prop.viewModel, dataToUpdate);\n    }\n  };\n\n  let handleMouseMove = e => {\n    let sidenavContainer = prop.elementRefList.get('sidenav').current;\n    var pageX = e.pageX || e.touches && e.touches[0].pageX; //Update the sidenav width\n\n    var newWidth = pageX - sidenavContainer.offsetLeft;\n\n    if (config.direction !== configProperties.left_to_right) {\n      newWidth = sidenavContainer.offsetWidth + (sidenavContainer.offsetLeft - pageX);\n    }\n\n    if (newWidth + sidenavContainer.offsetLeft > window.innerWidth) {\n      newWidth = window.innerWidth - sidenavContainer.offsetLeft;\n    }\n\n    if (newWidth > 0) {\n      sidenavContainer.style.width = newWidth + 'px';\n    }\n  };\n\n  let handleMousedown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('touchmove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    document.addEventListener('touchend', handleMouseUp);\n  };\n\n  const emptyHandler = () => {\n    let _removeHanlder = prop.elementRefList.get('eventListnerHandler').current || [];\n\n    if (_removeHanlder.length > 0) {\n      _removeHanlder.forEach(item => item());\n\n      prop.elementRefList.get('eventListnerHandler').current = null;\n    }\n  };\n\n  emptyHandler();\n  /* Resizable drag handle ends here */\n\n  if (config.isPinnable && prop.viewModel.data.config.sidenavOpened) {\n    //Lets check for the ctx objects again\n    //This is required because the sidenav is updating ctx objects in the middle of it work,\n    //which triggers this render cycle again\n    let ctxObj = appCtx.getCtx('awSidenavConfig.globalSidenavContext.' + id);\n\n    if (ctxObj && ctxObj.open && !ctxObj.pinned && appCtx.getCtx('sidenavCommandId')) {\n      let _removeHanlder = [];\n      document.addEventListener('click', handleClick, {\n        capture: true\n      });\n      document.addEventListener('touchstart', handleClick, {\n        capture: true\n      });\n\n      _removeHanlder.push(() => document.removeEventListener('click', handleClick, {\n        capture: true\n      }));\n\n      _removeHanlder.push(() => document.removeEventListener('touchstart', handleClick, {\n        capture: true\n      }));\n\n      prop.elementRefList.get('eventListnerHandler').current = _removeHanlder;\n    }\n  } // The isNarrowMode check is required for narrow mode devices, where the panel covers the whole screen\n  // We cannot check isMobileOS as it covers iPad devices also\n\n\n  if (!narrowModeSvc.isNarrowMode() && sidenavConfig[id].direction !== configProperties.left_to_right && prop.viewModel.data.config.sidenavOpened) {\n    let sidenavContainer = prop.elementRefList.get('sidenav').current;\n\n    if (sidenavConfig[id].slide === 'FLOAT') {\n      sidenavContainer.style.right = window.innerWidth - (sidenavContainer.parentElement.offsetWidth + sidenavContainer.parentElement.getClientRects()[0].x) + 'px';\n    } else {\n      sidenavContainer.style.right = '';\n    }\n  }\n\n  let reCalcPanelPosition = _.debounce(function () {\n    if (prop.viewModel.data && prop.viewModel.data.config && prop.viewModel.data.config.sidenavOpened && (sidenavConfig[id].slide === 'FLOAT' || prop.viewModel.data.config.isPinnable)) {\n      let sidenavContainer = prop.elementRefList.get('sidenav').current; // TODO: sidenav isn't always cleaned up?\n\n      if (sidenavContainer) {\n        if (configProperties.isFullHeightPanel(id)) {\n          sidenavContainer.style.height = sidenavContainer.parentElement.offsetHeight + 'px';\n        } else {\n          sidenavContainer.style.height = '';\n        } //use case when sidenav is streched to max width and browser window gets resized.\n\n\n        let currentSidenavWidth = parseInt(sidenavContainer.style.width.substring(0, sidenavContainer.style.width.length - 2));\n\n        if (currentSidenavWidth + sidenavContainer.offsetLeft > window.innerWidth) {\n          sidenavContainer.style.width = window.innerWidth - sidenavContainer.offsetLeft + 'px';\n        }\n      }\n    }\n  }, 500, {\n    maxWait: 10000,\n    trailing: true,\n    leading: false\n  });\n\n  reCalcPanelPosition(); // The full height panel needs to be resized on window resize\n\n  eventBus.subscribe('aw.windowResize', function () {\n    reCalcPanelPosition();\n  });\n  let context = {\n    subPanelContext: { ...prop.viewModel.subPanelContext,\n      ...{\n        sidenavMode: prop.viewModel.data.config.mode || configProperties.getSidenavMode(id)\n      },\n      ...{\n        isPinUnpinEnabled: prop.viewModel.data.config.isPinUnpinEnabled\n      },\n      ...{\n        panelPinned: prop.viewModel.data.config.panelPinned\n      }\n    }\n  };\n\n  let getSidenavFocusStatus = sideNavInfoRef => {\n    if (sideNavInfoRef && sideNavInfoRef.current) {\n      return sideNavInfoRef.current.sideNavFocused;\n    }\n\n    return undefined;\n  };\n\n  let refCallBack = el => {\n    let sideNavInfoRef = prop.viewModel.data.sideNavInfo;\n    let isSideNavFocused = getSidenavFocusStatus(sideNavInfoRef);\n\n    if (el && prop.viewModel.data.config.sidenavOpened && isSideNavFocused === false) {\n      sideNavInfoRef.current.sideNavFocused = true;\n      let sidenavContainer = prop.elementRefList.get('sidenav').current;\n      wcagSvc.focusFirstDescendantWithDelay(sidenavContainer);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    \"data-locator\": \"aw-sidenav\",\n    \"aria-live\": \"polite\",\n    \"aria-label\": getAriaLabel(id, prop.i18n),\n    id: id,\n    className: getSidenavContainerClasses(),\n    ref: prop.elementRefList.get('sidenav'),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: getPinnedClass(),\n      children: sidenavConfig[id].isPinnable && prop.viewModel.data.config.sidenavOpened ? /*#__PURE__*/_jsxDEV(AwIconButton, {\n        command: prop.fields.pinButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 21\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this), prop.viewModel.data.config.sidenavOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-layout-declarativePanelRoot aw-layout-panel\",\n      children: /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: prop.viewModel.data.config.view,\n        ...context,\n        domRef: el => refCallBack(el)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 58\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-sidenav-resizer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resize-handle sw-aria-border\",\n        role: \"button\",\n        \"aria-label\": prop.i18n.resizeCommandTitle,\n        tabIndex: \"0\",\n        onMouseDown: handleMousedown,\n        children: /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: \"uiPrimeNavGripper16\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwSidenavService.js"],"names":["hasConfigChanged","_ongoing","sidenavConfig","ctxPath","MOBILE","DESKTOP","TABLET","configProperties","large","default","full","standard","wide","extraWide","doubleWide","float","push","right_to_left","left_to_right","isPinUnpinEnabled","isFloatPanel","isPushPanel","isDefaultHeightPanel","isFullHeightPanel","isLargeHeightPanel","isWideWidthPanel","isStandardWidthPanel","isHeightWidthEqual","getSidenavMode","mode","copyRef","params","patchVMData","vm","path","value","updatedData","setSidenavInitialData","dataToUpdate","config","prop","_","resetConfigStatus","clearSidenav","data","sidenavCmdId","appCtx","togglePinState","sidenavService","togglePinUnpinPanelState","setDefaultConfig","viewModel","updatedConfig","createSideNavInfo","sideNavInfo","sideNavFocused","sideNavOpenCloseCallback","logger","id","eventData","Boolean","vmProps","awSidenavRenderFunction","getSidenavContainerClasses","classes","addSlideClasses","slide","sidenavClasses","getPinnedClass","justifyClass","getAriaLabel","label","i18n","handleClick","e","setTimeout","sidenavContainer","autoCloseRect","mouseXCord","emptyHandler","open","pinned","handleMouseUp","mouseEvent","document","eventBus","sidenavWidth","handleMouseMove","pageX","newWidth","window","handleMousedown","_removeHanlder","item","ctxObj","capture","narrowModeSvc","reCalcPanelPosition","currentSidenavWidth","parseInt","maxWait","trailing","leading","context","subPanelContext","sidenavMode","panelPinned","getSidenavFocusStatus","sideNavInfoRef","refCallBack","el","isSideNavFocused","wcagSvc","pinButton"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport { includeComponent } from 'js/moduleLoader';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport AwIconButton from 'viewmodel/AwIconButtonViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport sidenavService from './AwSidenavHelperService';\nimport appCtx from 'js/appCtxService';\nimport narrowModeSvc from 'js/aw.narrowMode.service';\nimport wcagSvc from 'js/wcagService';\n\nvar hasConfigChanged = false;\nlet _ongoing = {};\nlet sidenavConfig = {};\nlet ctxPath = 'awSidenavConfig.globalSidenavContext.';\n\nconst MOBILE = 'mobile';\nconst DESKTOP = 'desktop';\nconst TABLET = 'tablet';\n\nvar configProperties = {\n    large: 'LARGE',\n    default: 'DEFAULT',\n    full: 'FULL',\n    standard: 'STANDARD',\n    wide: 'WIDE',\n    extraWide: 'EXTRAWIDE',\n    doubleWide: 'DOUBLEWIDE',\n    float: 'FLOAT',\n    push: 'PUSH',\n    right_to_left: 'RIGHT_TO_LEFT',\n    left_to_right: 'LEFT_TO_RIGHT',\n    isPinUnpinEnabled: false,\n    isFloatPanel: function( id ) {\n        return sidenavConfig[ id ].slide === this.float;\n    },\n    isPushPanel: function( id ) {\n        return sidenavConfig[ id ].slide === this.push;\n    },\n    isDefaultHeightPanel: function( id ) {\n        return sidenavConfig[ id ].height === this.default;\n    },\n    isFullHeightPanel: function( id ) {\n        return sidenavConfig[ id ].height === this.full;\n    },\n    isLargeHeightPanel: function( id ) {\n        return sidenavConfig[ id ].height === this.large;\n    },\n    isWideWidthPanel: function( id ) {\n        return sidenavConfig[ id ].width === this.wide;\n    },\n    isStandardWidthPanel: function( id ) {\n        return sidenavConfig[ id ].width === this.standard;\n    },\n    isHeightWidthEqual: function( id ) {\n        return sidenavConfig[ id ].width === sidenavConfig[ id ].height;\n    },\n    getSidenavMode: function( id ) {\n        let mode = DESKTOP;\n        if( sidenavConfig[ id ].width === this.standard ) {\n            mode = MOBILE;\n        } else if( sidenavConfig[ id ].width === this.wide || sidenavConfig[ id ].width === this.extraWide || sidenavConfig[ id ].width === this.doubleWide ) {\n            mode = TABLET;\n        }\n\n        return mode;\n    }\n};\nexport const copyRef = ( params ) => {\n    return params.get( 'sideNavInfo' );\n};\nconst patchVMData = ( vm, updatedData ) => {\n    vm.dispatch( {\n        path: 'data.config',\n        value: updatedData\n    } );\n};\n\nlet setSidenavInitialData = ( vm, prop ) => {\n    let dataToUpdate = { ...vm.data.config };\n\n    if( vm.data.config.id !== prop.id ) {\n        dataToUpdate.id = prop.id;\n        sidenavConfig[ prop.id ] = {};\n    }\n\n    if( vm.data.config.isPinnable === null || vm.data.config.isPinnable === undefined ) {\n        dataToUpdate.isPinnable = prop.config.isPinnable || false;\n    }\n\n    if( vm.data.config.isPinUnpinEnabled === null || vm.data.config.isPinUnpinEnabled === undefined ) {\n        dataToUpdate.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n    }\n\n    if( vm.data.config.panelPinned === null || vm.data.config.panelPinned === undefined ) {\n        dataToUpdate.panelPinned = prop.config.panelPinned || false;\n    }\n\n    if( !vm.data.config.slide ) {\n        dataToUpdate.slide = prop.config.slide;\n    }\n\n    if( !_.isEqual( vm.data.config, dataToUpdate ) ) {\n        patchVMData( vm, dataToUpdate );\n    }\n};\n\nlet resetConfigStatus = () => {\n    hasConfigChanged = false;\n};\n\n// called on unMount\nexport let clearSidenav = ( data ) => {\n    var sidenavCmdId = appCtx.getCtx( 'sidenavCommandId' );\n    if( sidenavCmdId && sidenavCmdId === data.currentCommandId ) {\n        appCtx.unRegisterCtx( 'sidenavCommandId' );\n    }\n    resetConfigStatus();\n    appCtx.updatePartialCtx( ctxPath + data.id, null );\n    // Once the page level component hosting the sidenav is destroyed , it ought to be\n    // SideNav's responsibility to also deregister the attributes from ctx it registered when the sidenav mounted\n    appCtx.unRegisterCtx( 'activeToolsAndInfoCommand' );\n    appCtx.unRegisterCtx( 'activeNavigationCommand' );\n};\n\nexport let togglePinState = ( data ) => {\n    if( data.isPinnable ) {\n        let config = { ...data };\n        sidenavService.togglePinState( config );\n        return config;\n    }\n};\n\nexport let togglePinUnpinPanelState = ( data ) => {\n    let config = { ...data };\n    sidenavService.togglePinUnpinPanelState( config );\n    return config;\n};\n\nvar setDefaultConfig = function( prop ) {\n    const { viewModel } = prop;\n    setSidenavInitialData( viewModel, prop );\n\n    if( hasConfigChanged ) {\n        return;\n    }\n\n    let updatedConfig = {};\n\n    // default placeholder height and width values\n    updatedConfig.width = prop.config.width || configProperties.standard;\n    updatedConfig.height = prop.config.height || configProperties.full;\n    updatedConfig.isPinnable = prop.config.isPinnable || false;\n    updatedConfig.isPinUnpinEnabled = prop.config.isPinUnpinEnabled || false;\n    updatedConfig.panelPinned = prop.config.panelPinned || false;\n    updatedConfig.direction = prop.config.direction || configProperties.left_to_right;\n    updatedConfig.slide = prop.config.slide;\n    updatedConfig.animation = prop.config.animation !== false;\n\n    if( configProperties.isDefaultHeightPanel( prop.id ) ) {\n        updatedConfig.height = updatedConfig.width;\n    }\n    // push panels will always be full height\n    if( configProperties.isPushPanel( prop.id ) ) {\n        updatedConfig.height = configProperties.full;\n    }\n    updatedConfig.isAnimationDisabled = !updatedConfig.animation;\n    updatedConfig.isLeftToRight = updatedConfig.direction === configProperties.left_to_right;\n\n    if( !_.isEqual( updatedConfig, sidenavConfig[ prop.id ] ) ) {\n        sidenavConfig[ prop.id ] = updatedConfig;\n    }\n};\nexport let createSideNavInfo = ( sideNavInfo ) => {\n    if( sideNavInfo ) {\n        sideNavInfo.current = {\n            sideNavFocused: false\n        };\n    }\n    return sideNavInfo;\n};\nexport let sideNavOpenCloseCallback = async function( eventData, id, data, sideNavInfo ) {\n    let config = { ...data };\n    //create object to store sidenav info (status)\n    if( !data.sideNavInfo ) {\n        data.sideNavInfo = createSideNavInfo( sideNavInfo );\n    }\n    // All consumers should be using id and eventData should be passed through\n    if( !id || !eventData ) {\n        logger.error( 'id attribute and eventData are required' );\n        return config;\n    }\n    if( !_ongoing[ id ] ) {\n        if( id === eventData.id ) {\n            if( eventData.config ) {\n                sidenavConfig[ id ].width = eventData.config.width || sidenavConfig[ id ].width || configProperties.standard;\n                sidenavConfig[ id ].height = eventData.config.height || sidenavConfig[ id ].height || configProperties.full;\n                sidenavConfig[ id ].hasSlideChanged = Boolean( eventData.config.slide );\n                if( eventData.config.slide ) {\n                    if( eventData.config.slide !== sidenavConfig[ id ].slide ) {\n                        sidenavConfig[ id ].slide = eventData.config.slide;\n                    }\n                } else {\n                    sidenavConfig[ id ].slide = configProperties.float;\n                }\n                sidenavConfig[ id ].isPinnable = eventData.config.isPinnable || sidenavConfig[ id ].isPinnable || false;\n                sidenavConfig[ id ].isPinUnpinEnabled = eventData.config.isPinUnpinEnabled || sidenavConfig[ id ].isPinUnpinEnabled || false;\n                sidenavConfig[ id ].panelPinned = eventData.config.panelPinned || sidenavConfig[ id ].panelPinned || false;\n                if( configProperties.isDefaultHeightPanel( id ) ) {\n                    sidenavConfig[ id ].height = sidenavConfig[ id ].width;\n                }\n                if( configProperties.isPushPanel( id ) ) {\n                    sidenavConfig[ id ].height = configProperties.full;\n                }\n                hasConfigChanged = true;\n            } else if( hasConfigChanged ) {\n                hasConfigChanged = false;\n            }\n\n            sidenavService.setLocationCtx( id );\n            //revisitMe: Jignesh Put back the other code for autoclose of sidenav\n            _ongoing[ eventData.id ] = sidenavService.createSidenav( config, eventData ).then( ( vmProps ) => {\n                //reCalcPanelPosition();\n                delete _ongoing[ eventData.id ];\n                return vmProps;\n            } );\n\n            return _ongoing[ eventData.id ];\n        } // pass keepOthersOpen to keep the other sidenavs open when the current sidenav is opened\n        else if( !eventData.keepOthersOpen ) {\n            // Need to close all the other open panels not having this id\n            return sidenavService.closeSidenav( config, eventData ).then( () => {\n                return config;\n            } );\n        }\n    }\n\n    //revisitMe: Jignesh: Returna promise here for command panel service\n    return config;\n};\n\n/**\n * render function for AwSidenav\n * @param {*} param context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awSidenavRenderFunction = ( prop ) => {\n    setDefaultConfig( prop );\n    const { config, id } = prop;\n\n    const getSidenavContainerClasses = () => {\n        let classes = 'sw-column aw-sidenav-layoutContainer';\n\n        if( sidenavConfig[ id ].width ) {\n            classes += ' aw-sidenav-' + sidenavConfig[ id ].width.toLowerCase();\n        }\n\n        if( sidenavConfig[ id ].height ) {\n            classes += ' aw-sidenav-vertical-' + sidenavConfig[ id ].height.toLowerCase();\n        }\n\n        const addSlideClasses = ( slide ) => {\n            let sidenavClasses = '';\n            sidenavClasses += slide ? ' aw-sidenav-' + slide.toLowerCase() : '';\n            sidenavClasses += slide === configProperties.float && !sidenavConfig[ id ].isLeftToRight ? ' aw-sidenav-float-right' : '';\n            sidenavClasses += slide === configProperties.float && sidenavConfig[ id ].isLeftToRight ? ' aw-sidenav-float-left' : '';\n\n            return sidenavClasses;\n        };\n\n        if( sidenavConfig[ id ].hasSlideChanged ) {\n            classes += addSlideClasses( prop.viewModel.data.config.slide );\n        } else {\n            classes += addSlideClasses( prop.config.slide );\n        }\n\n        classes += prop.viewModel.data.config.sidenavOpened ? ' aw-sidenav-expand' : '';\n        classes += sidenavConfig[ id ].isAnimationDisabled ? ' aw-sidenav-transition' : '';\n        classes += config.direction === 'RIGHT_TO_LEFT' ? ' aw-sidenav-leftBackground' : ' aw-sidenav-rightBackground';\n        classes += sidenavConfig[ id ].isPinnable ? ' autoclose afx-accent-background' : '';\n        classes += !prop.viewModel.data.config.sidenavOpened ? ' invisible' : '';\n\n        return classes;\n    };\n\n    const getPinnedClass = () => {\n        let justifyClass = 'sw-row justify-right ';\n        return prop.viewModel.data.config.pinned ? justifyClass + 'pinned' : justifyClass + 'unpinned';\n    };\n    const getAriaLabel = ( id, i18n ) => {\n        let label = i18n.TASK_PANEL;\n        if( id === 'aw_navigation' ) {\n            label = i18n.COMMAND_PANEL;\n        } else if( id === 'globalNavigationSideNav' ) {\n            label = i18n.GLOBALNAV_PANEL;\n        }\n        return label;\n    };\n\n    const handleClick = e => {\n        setTimeout( () => {\n            let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n            var autoCloseRect = sidenavContainer.getBoundingClientRect();\n\n            //Handle the case where the click is triggered right after resize\n            var mouseXCord = e.pageX || e.touches && e.touches[ 0 ].pageX;\n            if( sidenavContainer.offsetWidth === mouseXCord - sidenavContainer.offsetLeft ) {\n                return;\n            }\n\n            // If the panel is already open and it is not pinned and user clicks outside of panel i.e. not on panel itself, then close the panel\n            if( mouseXCord < autoCloseRect.right && mouseXCord > autoCloseRect.left ) {\n                // inside click\n                return;\n            }\n            // outside click\n            if( !prop.viewModel.data.config.pinned ) {\n                //revisitMe: Jignesh - Need to fix the same element click issue that opened the sidenav\n                //let shallRemainOpen = $scope.doesSideNavRemainOpen( eventData );\n                //if( !shallRemainOpen ) {\n                //appCtx.unRegisterCtx( 'sidenavCommandId' );\n\n                let dataToUpdate = { ...prop.viewModel.data.config };\n                dataToUpdate.sidenavOpened = false;\n                dataToUpdate.view = null;\n                patchVMData( prop.viewModel, dataToUpdate );\n\n                emptyHandler();\n                appCtx.updatePartialCtx( ctxPath + prop.viewModel.data.config.id, {\n                    open: false,\n                    pinned: prop.viewModel.data.config.pinned,\n                    slide: prop.viewModel.data.config.slide\n                } );\n            }\n        }, 200 );\n    };\n\n    /* Resizable drag handle starts here */\n    let handleMouseUp = ( mouseEvent ) => {\n        document.removeEventListener( 'mousemove', handleMouseMove );\n        document.removeEventListener( 'touchmove', handleMouseMove );\n\n        document.removeEventListener( 'mouseup', handleMouseUp );\n        document.removeEventListener( 'touchend', handleMouseUp );\n        if( mouseEvent ) {\n            // Publish an event that the sidenav drag has ended\n            eventBus.publish( 'awsidenav.resizeEnded' );\n\n            let dataToUpdate = { ...prop.viewModel.data.config };\n            dataToUpdate.mode = TABLET;\n            let sidenavWidth = prop.elementRefList.get( 'sidenav' ).current.offsetWidth;\n\n            if( sidenavWidth < 400 ) {\n                dataToUpdate.mode = MOBILE;\n            } else if( sidenavWidth > 800 ) {\n                dataToUpdate.mode = DESKTOP;\n            }\n            patchVMData( prop.viewModel, dataToUpdate );\n        }\n    };\n\n    let handleMouseMove = ( e ) => {\n        let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n        var pageX = e.pageX || e.touches && e.touches[ 0 ].pageX;\n        //Update the sidenav width\n        var newWidth = pageX - sidenavContainer.offsetLeft;\n\n        if( config.direction !== configProperties.left_to_right ) {\n            newWidth = sidenavContainer.offsetWidth + ( sidenavContainer.offsetLeft - pageX );\n        }\n        if( newWidth + sidenavContainer.offsetLeft > window.innerWidth ) {\n            newWidth = window.innerWidth - sidenavContainer.offsetLeft;\n        }\n        if( newWidth > 0 ) {\n            sidenavContainer.style.width = newWidth + 'px';\n        }\n    };\n\n    let handleMousedown = ( e ) => {\n        e.stopPropagation();\n        e.preventDefault();\n        document.addEventListener( 'mousemove', handleMouseMove );\n        document.addEventListener( 'touchmove', handleMouseMove );\n        document.addEventListener( 'mouseup', handleMouseUp );\n        document.addEventListener( 'touchend', handleMouseUp );\n    };\n\n    const emptyHandler = () => {\n        let _removeHanlder = prop.elementRefList.get( 'eventListnerHandler' ).current || [];\n        if( _removeHanlder.length > 0 ) {\n            _removeHanlder.forEach( ( item ) => item() );\n            prop.elementRefList.get( 'eventListnerHandler' ).current = null;\n        }\n    };\n\n    emptyHandler();\n\n    /* Resizable drag handle ends here */\n    if( config.isPinnable && prop.viewModel.data.config.sidenavOpened ) {\n        //Lets check for the ctx objects again\n        //This is required because the sidenav is updating ctx objects in the middle of it work,\n        //which triggers this render cycle again\n        let ctxObj = appCtx.getCtx( 'awSidenavConfig.globalSidenavContext.' + id );\n        if( ctxObj && ctxObj.open && !ctxObj.pinned && appCtx.getCtx( 'sidenavCommandId' ) ) {\n            let _removeHanlder = [];\n            document.addEventListener( 'click', handleClick, { capture: true } );\n            document.addEventListener( 'touchstart', handleClick, { capture: true } );\n            _removeHanlder.push( () => document.removeEventListener( 'click', handleClick, { capture: true } ) );\n            _removeHanlder.push( () => document.removeEventListener( 'touchstart', handleClick, { capture: true } ) );\n            prop.elementRefList.get( 'eventListnerHandler' ).current = _removeHanlder;\n        }\n    }\n\n    // The isNarrowMode check is required for narrow mode devices, where the panel covers the whole screen\n    // We cannot check isMobileOS as it covers iPad devices also\n    if( !narrowModeSvc.isNarrowMode() && sidenavConfig[ id ].direction !== configProperties.left_to_right && prop.viewModel.data.config.sidenavOpened ) {\n        let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n        if( sidenavConfig[ id ].slide === 'FLOAT' ) {\n            sidenavContainer.style.right = window.innerWidth - ( sidenavContainer.parentElement.offsetWidth + sidenavContainer.parentElement.getClientRects()[ 0 ].x ) + 'px';\n        } else {\n            sidenavContainer.style.right = '';\n        }\n    }\n\n    let reCalcPanelPosition = _.debounce( function() {\n        if( prop.viewModel.data && prop.viewModel.data.config && prop.viewModel.data.config.sidenavOpened && ( sidenavConfig[ id ].slide === 'FLOAT' || prop.viewModel.data.config.isPinnable ) ) {\n            let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n\n            // TODO: sidenav isn't always cleaned up?\n            if( sidenavContainer ) {\n                if( configProperties.isFullHeightPanel( id ) ) {\n                    sidenavContainer.style.height = sidenavContainer.parentElement.offsetHeight + 'px';\n                } else {\n                    sidenavContainer.style.height = '';\n                }\n                //use case when sidenav is streched to max width and browser window gets resized.\n                let currentSidenavWidth = parseInt( sidenavContainer.style.width.substring( 0, sidenavContainer.style.width.length - 2 ) );\n                if( currentSidenavWidth + sidenavContainer.offsetLeft > window.innerWidth ) {\n                    sidenavContainer.style.width = window.innerWidth - sidenavContainer.offsetLeft + 'px';\n                }\n            }\n        }\n    }, 500, {\n        maxWait: 10000,\n        trailing: true,\n        leading: false\n    } );\n\n    reCalcPanelPosition();\n\n    // The full height panel needs to be resized on window resize\n    eventBus.subscribe( 'aw.windowResize', function() {\n        reCalcPanelPosition();\n    } );\n\n    let context = {\n        subPanelContext: {\n            ...prop.viewModel.subPanelContext,\n            ...{ sidenavMode: prop.viewModel.data.config.mode || configProperties.getSidenavMode( id ) },\n            ...{ isPinUnpinEnabled: prop.viewModel.data.config.isPinUnpinEnabled },\n            ...{ panelPinned: prop.viewModel.data.config.panelPinned }\n        }\n    };\n    let getSidenavFocusStatus = ( sideNavInfoRef ) => {\n        if ( sideNavInfoRef && sideNavInfoRef.current ) {\n            return sideNavInfoRef.current.sideNavFocused;\n        }\n        return undefined;\n    };\n    let refCallBack = ( el ) => {\n        let sideNavInfoRef = prop.viewModel.data.sideNavInfo;\n        let isSideNavFocused = getSidenavFocusStatus( sideNavInfoRef );\n        if( el && prop.viewModel.data.config.sidenavOpened && isSideNavFocused === false ) {\n            sideNavInfoRef.current.sideNavFocused = true;\n            let sidenavContainer = prop.elementRefList.get( 'sidenav' ).current;\n            wcagSvc.focusFirstDescendantWithDelay( sidenavContainer );\n        }\n    };\n    return (\n        <aside data-locator='aw-sidenav' aria-live ='polite' aria-label={ getAriaLabel(  id, prop.i18n ) } id={ id} className={ getSidenavContainerClasses() } ref={prop.elementRefList.get( 'sidenav' )}>\n            <div className={ getPinnedClass() } >\n                { sidenavConfig[  id ].isPinnable && prop.viewModel.data.config.sidenavOpened ?\n                    <AwIconButton command={prop.fields.pinButton}></AwIconButton> : '' }\n            </div>\n            {prop.viewModel.data.config.sidenavOpened && <div className='aw-layout-declarativePanelRoot aw-layout-panel'>\n                <AwInclude name={prop.viewModel.data.config.view} {...context} domRef={( el )=>refCallBack( el )}></AwInclude>\n            </div>}\n            <div className='aw-sidenav-resizer'>\n                <div className='resize-handle sw-aria-border' role='button' aria-label={ prop.i18n.resizeCommandTitle} tabIndex='0' onMouseDown={handleMousedown}>\n                    <AwIcon iconId='uiPrimeNavGripper16'></AwIcon>\n                </div>\n            </div>\n        </aside>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
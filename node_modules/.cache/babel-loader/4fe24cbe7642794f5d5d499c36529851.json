{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service provides helpful APIs to register key down event and handles ctrl+c, ctrl+v and ctrl+x keyboard\n * shortcuts.\n *\n * @module js/keyboardService\n */\nimport $ from 'jquery';\nimport domUtils from 'js/domUtils';\n/**\n * Define public API\n */\n\nvar exports = {};\nlet dom = domUtils.DOMAPIs;\nlet bodyElement = document.querySelector('body');\nexport let keyCmdIdMap = {\n  67: ['Awp0Copy'],\n  86: ['Awp0Paste', 'Awp0PasteGroup'],\n  88: ['Awp0Cut', 'Awb0RemoveElement']\n};\n/**\n * register keydown event\n */\n\nexport let registerKeyDownEvent = function () {\n  // unregister key down event before registering it.\n  exports.unRegisterKeyDownEvent();\n  dom.on(bodyElement, 'keydown', () => {\n    exports.checkForPressedKey(event);\n  });\n};\n/**\n * unRegister keydown event\n */\n\nexport let unRegisterKeyDownEvent = function () {\n  dom.off(bodyElement, 'keydown');\n};\n/**\n * Get text selected in browser\n *\n * @return selectedText\n */\n\nexport let getSelectionText = function () {\n  var selectedText = '';\n\n  if (window.getSelection) {\n    selectedText = window.getSelection().toString();\n  }\n\n  return selectedText;\n};\n/**\n * Check if selection/range is valid to process hotkey\n */\n\nexport let isSelectionValid = function (event) {\n  var selectedText = exports.getSelectionText();\n\n  if (selectedText === '') {\n    var targetCss = event.target.getAttribute('class');\n\n    if (!targetCss || targetCss.indexOf('sw-property-val') === -1 && targetCss.indexOf('aw-uiwidgets-searchBox') === -1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * check for pressed key and do necessary actions\n */\n\nexport let checkForPressedKey = function (event) {\n  var keyId = event.which || event.keyCode;\n  var ctrl = event.ctrlKey;\n\n  if (ctrl && keyId !== 17) {\n    var proceed = exports.isSelectionValid(event);\n\n    if (proceed && exports.keyCmdIdMap[keyId]) {\n      var cmdIds = exports.keyCmdIdMap[keyId];\n\n      for (var i = 0; i < cmdIds.length; i++) {\n        var commands = document.querySelectorAll('[command-id=' + cmdIds[i] + ']'); // click on first active command\n\n        if (commands[0] && !$(commands[0]).hasClass('disabled')) {\n          commands[0].click();\n          break;\n        }\n      }\n    }\n  }\n};\nexports = {\n  keyCmdIdMap,\n  registerKeyDownEvent,\n  unRegisterKeyDownEvent,\n  getSelectionText,\n  isSelectionValid,\n  checkForPressedKey\n};\nexport default exports;","map":{"version":3,"names":["$","domUtils","exports","dom","DOMAPIs","bodyElement","document","querySelector","keyCmdIdMap","registerKeyDownEvent","unRegisterKeyDownEvent","on","checkForPressedKey","event","off","getSelectionText","selectedText","window","getSelection","toString","isSelectionValid","targetCss","target","getAttribute","indexOf","keyId","which","keyCode","ctrl","ctrlKey","proceed","cmdIds","i","length","commands","querySelectorAll","hasClass","click"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/keyboardService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service provides helpful APIs to register key down event and handles ctrl+c, ctrl+v and ctrl+x keyboard\n * shortcuts.\n *\n * @module js/keyboardService\n */\n\nimport $ from 'jquery';\nimport domUtils from 'js/domUtils';\n\n/**\n * Define public API\n */\nvar exports = {};\nlet dom = domUtils.DOMAPIs;\nlet bodyElement = document.querySelector( 'body' );\n\nexport let keyCmdIdMap = {\n    67: [ 'Awp0Copy' ],\n    86: [ 'Awp0Paste', 'Awp0PasteGroup' ],\n    88: [ 'Awp0Cut', 'Awb0RemoveElement' ]\n};\n\n/**\n * register keydown event\n */\nexport let registerKeyDownEvent = function() {\n    // unregister key down event before registering it.\n    exports.unRegisterKeyDownEvent();\n\n    dom.on( bodyElement, 'keydown', () => {\n        exports.checkForPressedKey( event );\n    } );\n};\n\n/**\n * unRegister keydown event\n */\nexport let unRegisterKeyDownEvent = function() {\n    dom.off( bodyElement, 'keydown' );\n};\n\n/**\n * Get text selected in browser\n *\n * @return selectedText\n */\nexport let getSelectionText = function() {\n    var selectedText = '';\n    if( window.getSelection ) {\n        selectedText = window.getSelection().toString();\n    }\n    return selectedText;\n};\n\n/**\n * Check if selection/range is valid to process hotkey\n */\nexport let isSelectionValid = function( event ) {\n    var selectedText = exports.getSelectionText();\n    if( selectedText === '' ) {\n        var targetCss = event.target.getAttribute( 'class' );\n        if( !targetCss ||\n            targetCss.indexOf( 'sw-property-val' ) === -1 && targetCss\n            .indexOf( 'aw-uiwidgets-searchBox' ) === -1 ) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n * check for pressed key and do necessary actions\n */\nexport let checkForPressedKey = function( event ) {\n    var keyId = event.which || event.keyCode;\n    var ctrl = event.ctrlKey;\n    if( ctrl && keyId !== 17 ) {\n        var proceed = exports.isSelectionValid( event );\n        if( proceed && exports.keyCmdIdMap[ keyId ] ) {\n            var cmdIds = exports.keyCmdIdMap[ keyId ];\n            for( var i = 0; i < cmdIds.length; i++ ) {\n                var commands = document.querySelectorAll( '[command-id=' + cmdIds[ i ] + ']' );\n                // click on first active command\n                if( commands[ 0 ] && !$( commands[ 0 ] ).hasClass( 'disabled' ) ) {\n                    commands[ 0 ].click();\n                    break;\n                }\n            }\n        }\n    }\n};\n\nexports = {\n    keyCmdIdMap,\n    registerKeyDownEvent,\n    unRegisterKeyDownEvent,\n    getSelectionText,\n    isSelectionValid,\n    checkForPressedKey\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
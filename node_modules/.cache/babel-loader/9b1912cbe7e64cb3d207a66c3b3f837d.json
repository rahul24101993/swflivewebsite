{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides DeclViewModel processing functionalities.\n *\n * @module js/viewModelProcessingFactory\n *\n * @namespace viewModelProcessingFactory\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport modelPropertySvc from 'js/modelPropertyService';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport sanitizer from 'js/sanitizer';\nimport declModelRegistrySvc from 'js/declModelRegistryService';\nimport editUtilsService from 'js/editUtilsService';\nimport messagingService from 'js/messagingService';\nimport mockModeService from 'js/mockModeService';\nimport AwInterpolateService from 'js/awInterpolateService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport parsingUtils from 'js/parsingUtils';\nimport declUtils from 'js/declUtils';\nimport logger from 'js/logger';\nimport Debug from 'debug';\nimport debugService from 'js/debugService';\nimport editHandlerService from 'js/editHandlerService';\nimport cfgSvc from 'js/configurationService';\nimport commandsSvc from 'js/command.service';\nimport { loadDynModule } from 'js/moduleLoader';\n/** revisitme\n  * Hint: editHandlerFactory not ported yet\n import editHandlerFactory from 'js/editHandlerFactory';\n */\n\n/** revisitme Shaishav\n  * Hint: Condition service is not used anywhere. Remove this\n import 'js/conditionService';\n */\n\nvar tokenTrace = new Debug('viewModel:token');\n/**\n  * Cached reference to AngularJS & AW services\n  */\n\n/** List of attributes would be considered for sanitization */\n\nvar propertiesToSanitize = {\n  dbValue: true,\n  dbValues: true,\n  displayValues: true,\n  error: true,\n  propertyDisplayName: true,\n  propertyName: true,\n  propertyRadioFalseText: true,\n  propertyRadioText: true,\n  uiValue: true,\n  uiValues: true,\n  value: true\n};\nvar _compoundPropNameDelimiter = '__';\nvar _compoundPropValueDelimiter = ':';\n/**\n  * Perform the given 'action'.\n  *\n  * @param {Object} jsonData - Object loaded from the DeclViewModel JSON file\n  * @param {Object} jsonDataProvider - A specific dataProvider's definition within 'jsonData'.\n  * @param {String} dpName - The name of the 'declDataProvider' where the action is defined.\n  * @param {String} actionName - The name of the action to look for in the 'jsonData'\n  * @param {StringMap} actionMap - Map of action name to the action object from a declViewModel's JSON definition\n  *            to be updated by this function.\n  */\n\nfunction _processAction(jsonData, jsonDataProvider, dpName, actionName, actionMap) {\n  var actionRef = jsonDataProvider[actionName];\n\n  if (actionRef) {\n    if (jsonData.actions) {\n      actionMap[actionName] = jsonData.actions[actionRef];\n    }\n\n    if (!actionMap[actionName]) {\n      logger.error('DataProvider ' + dpName + ' references a missing action: ' + actionName + '...continuing');\n    }\n  }\n} // _processAction\n\n/**\n  * Define the base object used to provide all of this module's external API on.\n  *\n  * @private\n  */\n\n\nvar exports = {};\n/**\n  * Evaluate dataProviders from JSON, load any dependencies and set on the given 'declViewModel'.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {DeclViewModel} declViewModel - The 'DeclViewModel' to populate with the dataProvider properties of\n  *            the given JSON object.\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise is resolved with the given 'declViewModel' once any data provider dependencies\n  *         are all resolved.\n  */\n\nvar _populateDataProviders = function (declViewModelJson, declViewModel, subPanelContext) {\n  var jsonData = declViewModelJson;\n  var promises = [];\n  const dataProviderActions = ['action', 'initializeAction', 'nextAction', 'previousAction', 'focusAction', 'expandAction', 'validateAction', 'filterFacetAction', 'preferredChoicesAction'];\n\n  if (jsonData.dataProviders && !_.isEmpty(jsonData.dataProviders)) {\n    if (!declViewModel.dataProviders) {\n      declViewModel.dataProviders = {};\n    }\n\n    let dataProvidersClone = _.cloneDeep(jsonData.dataProviders);\n\n    let mockedDataProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.dataProviders;\n    exports.initViewModel(dataProvidersClone, subPanelContext); // Short term fix to support editSupportParamKeys on subPanelContext.provider\n    // Long term approach is to have this information directly on subPanelContext\n    // This will be cleaned up with the tech debt story for cleanup of AwStandardPrimaryWorkarea\n\n    let editSupportParamKeys;\n\n    if (subPanelContext) {\n      if (subPanelContext.editSupportParamKeys) {\n        editSupportParamKeys = subPanelContext.editSupportParamKeys;\n      } else if (subPanelContext.provider && subPanelContext.provider.editSupportParamKeys) {\n        editSupportParamKeys = subPanelContext.provider.editSupportParamKeys;\n      } else {\n        editSupportParamKeys = subPanelContext.selectionQueryParamKey && [subPanelContext.selectionQueryParamKey];\n      }\n    }\n\n    let index = 0;\n\n    _.forEach(dataProvidersClone, (jsonDataProvider, dpName) => {\n      let resolvedLOVConfig = jsonDataProvider.lovConfiguration; // TcLOV is a data-provider property.\n      // If we declare any data-provider as TCLOV it would start using the standard SOA calls available for teamcenter\n      // to populate and validate LOV i.e getInitialLOVVAlue, getNextLOVValue and ValidateLOV.\n      // It can be used with any data-provider which is used with widgets like i.e aw-link-with-popup, aw-widget.\n      // User has option to supply its own parameters (VMO and ViewModel Prop) through \"lovConfiguration\" setting defined in the LOV dataprovider.\n      // Imp: If the dataprovider has action defined then data-provider type \"tcLOV\" setting is ignored.\n\n      let isTcLOV = !(jsonDataProvider.action || jsonDataProvider.initializeAction) && jsonDataProvider.dataProviderType === 'TcLOV';\n\n      if (isTcLOV) {\n        const lovDataProviderJSON = _.cloneDeep(cfgSvc.getCfgCached('lovDataProvider'));\n\n        _.forEach(dataProviderActions, actionName => {\n          const actName = lovDataProviderJSON.dataProviders.tcDataprovider[actionName];\n\n          if (actName) {\n            // A new action Name, which shouldn't conflict with exiting action name.\n            let newActionName = actName + '_tcLOV_' + index;\n            jsonDataProvider[actionName] = newActionName;\n            jsonData.actions[newActionName] = lovDataProviderJSON.actions[actName];\n            jsonData.actions[newActionName].inputData.dataProviderName = dpName;\n          }\n        });\n\n        jsonDataProvider.response = lovDataProviderJSON.dataProviders.tcDataprovider.response;\n        jsonDataProvider.moreValuesExist = lovDataProviderJSON.dataProviders.tcDataprovider.moreValuesExist; // Reverting back the lovConfiguration to the pristine state, as it would be evaluated multiple times\n        // in declDataProviderService. If we store the evaluated lovConfiguration further evaluations becomes\n        // very costly and might run into a infinite loop.\n\n        jsonDataProvider.lovConfiguration = _.cloneDeep(declViewModelJson.dataProviders[dpName].lovConfiguration);\n      }\n\n      index++;\n      var actionMap = {};\n\n      if (mockedDataProvider && mockedDataProvider[dpName]) {\n        jsonDataProvider = mockedDataProvider[dpName];\n      }\n\n      _.forEach(dataProviderActions, actionName => {\n        _processAction(jsonData, jsonDataProvider, dpName, actionName, actionMap);\n      });\n      /**\n        * Create the DeclDataProvider based on the JSON data.\n        */\n\n\n      declViewModel.dataProviders[dpName] = dataProviderFactory.createDataProvider(jsonDataProvider, actionMap.action, dpName, declDataProviderSvc, actionMap);\n      declViewModel.dataProviders[dpName].origJson = jsonData.dataProviders[dpName];\n      declViewModel.dataProviders[dpName].inputDataExpressions = getInputDataExpression(jsonData.dataProviders[dpName].inputData);\n\n      if (isTcLOV) {\n        declViewModel.dataProviders[dpName].resolvedLovConfig = resolvedLOVConfig;\n      }\n\n      if (jsonDataProvider.uidInResponse) {\n        declViewModel.dataProviders[dpName].uidInResponse = jsonDataProvider.uidInResponse;\n      }\n\n      if (!declUtils.isNil(jsonDataProvider.preSelection)) {\n        declViewModel.dataProviders[dpName].preSelection = jsonDataProvider.preSelection;\n      } else {\n        declViewModel.dataProviders[dpName].preSelection = true;\n      }\n\n      if (declViewModel.objectSetSource && declViewModel.objectSetSource[dpName]) {\n        declViewModel.dataProviders[dpName].setValidSourceTypes(declViewModel.objectSetSource[dpName]);\n      }\n\n      if (editSupportParamKeys) {\n        if (!jsonDataProvider.inputData) {\n          jsonDataProvider.inputData = {};\n        }\n\n        if (!jsonDataProvider.inputData.editSupportParamKeys) {\n          jsonDataProvider.inputData.editSupportParamKeys = editSupportParamKeys;\n          declViewModel.dataProviders[dpName].editSupportParamKeys = editSupportParamKeys;\n        }\n      }\n      /**\n        * Process cell commands\n        */\n\n\n      if (jsonDataProvider.commands) {\n        declViewModel.dataProviders[dpName].commands = [];\n\n        _.forEach(jsonDataProvider.commands, function (command, cmdId) {\n          if (jsonDataProvider.commandsAnchor) {\n            logger.error('Commands in dataProviders are not supported when using commandsAnchor.' + '\\n' + 'cmdId=' + cmdId + '\\n' + 'commandsAnchor=' + jsonDataProvider.commandsAnchor);\n          } else {\n            if (command.dependencies && command.dependencies.length > 0) {\n              var cmdOverlay;\n              var promise = loadDynModule(command.dependencies).then(function (handlers) {\n                cmdOverlay = {\n                  position: command.position,\n                  displayOption: command.displayOption,\n                  handler: handlers,\n                  condition: command.condition\n                };\n                declViewModel.dataProviders[dpName].commands.push(cmdOverlay);\n                return commandsSvc.getCommand(cmdId);\n              }).then(function (commandOverlay) {\n                /**\n                  * Update the icon and title once the command overlay is\n                  * returned\n                  */\n                if (commandOverlay) {\n                  cmdOverlay.iconId = commandOverlay.iconId || command.id;\n                  cmdOverlay.title = commandOverlay.title || command.title;\n                }\n\n                return cmdOverlay; // Include return to assure async\n              });\n              promises.push(promise);\n            } else if (command.action) {\n              command.iconId = command.id;\n              declViewModel.dataProviders[dpName].commands.push(command);\n            }\n          }\n        });\n      }\n\n      if (jsonDataProvider.editContext) {\n        declViewModel.dataProviders[dpName].editContext = jsonDataProvider.editContext;\n      }\n    });\n  } // return AwPromiseService.instance.all( promises ).then( function() {\n\n\n  return declViewModel; // } );\n};\n\nvar sharedViewModelToken = 0;\n/**\n  * Token for tracking execution within the view model\n  */\n\nvar DeclViewModelToken = function () {\n  var activeActionCount = 0;\n\n  this.addAction = function (action) {\n    tokenTrace('Action started', action);\n    activeActionCount++;\n    sharedViewModelToken++;\n  };\n\n  this.removeAction = function (action) {\n    tokenTrace('Action completed', action);\n    activeActionCount--;\n    sharedViewModelToken = sharedViewModelToken <= 1 ? 0 : sharedViewModelToken - 1;\n  };\n\n  this.isActive = function () {\n    return activeActionCount !== 0;\n  };\n};\n/**\n  * Creates a new instance of this class.\n  *\n  * @class DeclViewModel\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  */\n\n\n_c = DeclViewModelToken;\n\nvar DeclViewModel = function (declViewModelJson) {\n  var vmSelf = this; // eslint-disable-line consistent-this\n\n  /**\n    * This object is used to hold properties and states that are not intended to be exposed to the\n    * 'dataCtxTree'.\n    */\n\n  vmSelf._internal = {\n    /**\n      * Token for tracking execution within the view model\n      */\n    token: new DeclViewModelToken(),\n\n    /**\n      * {Number} An increasing number assigned to this declViewModel when created and use to identify it\n      * (only for debug purposes).\n      */\n    modelId: -1,\n\n    /**\n      * {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n      */\n    panelId: 'undefined',\n\n    /**\n      * {String} The unique Id to identify the view\n      */\n    viewId: 'undefined',\n\n    /**\n      * {Boolean} TRUE if 'destroy' has been invoked on this instance.\n      */\n    isDestroyed: false,\n\n    /**\n      * {EventSubscriptionArray} Array of 'eventSubscriptions' currently registerd against this\n      * 'declViewModel'.\n      */\n    eventSubscriptions: [],\n\n    /**\n      * {SubPanelId2EventSubscriptionsMap} a map of <subPanelId,EventSubscriptions>.\n      */\n    subPanelId2EventSubscriptionsMap: {},\n\n    /**\n      * {DeclViewModelJson} The object returned from loading the JSON resource for this 'declViewModel'.\n      */\n    origDeclViewModelJson: null,\n\n    /**\n      * {Object} A map of a 'conditionName' property to its current true/false state.\n      */\n    conditionStates: {},\n\n    /**\n      * {Object} A map of a 'conditionExpressions' property to its current vaule.\n      */\n    conditionExpressions: {},\n\n    /**\n      * Ref to: conditions\n      */\n    conditions: null,\n\n    /**\n      * Ref to: jasonData.actions\n      */\n    actions: null,\n\n    /**\n      * Ref to: jasonData.dataParseDefinitions\n      */\n    dataParseDefinitions: null,\n\n    /**\n      * Ref to: jasonData.functions\n      */\n    functions: null,\n\n    /**\n      * Ref to: jasonData.messages\n      */\n    messages: null,\n\n    /**\n      * Ref to: jasonData.onEvent\n      */\n    onEvent: null,\n\n    /**\n      * Ref to: jasonData.onEvent\n      */\n    grids: null,\n\n    /**\n      * Ref to: jasonData.onEvent\n      */\n    chartProviders: null,\n\n    /**\n      * {StringArray} The array of sub-panel IDs that have been 'merged' into this 'target' 'declViewModel'.\n      */\n    subPanels: null,\n\n    /**\n      * {ObjectArray} An array of data objects that specify the propertyValue/propertyPath of all non-action\n      * properties in the original declViewModel JSON definition that are 'data bound' to any changes in the\n      * appContext state (e.g. propValue = {{ctx.selected}}, etc.).\n      */\n    declViewModelJsonBoundProps: null,\n\n    /**\n      * {ObjectMap} Map of appContext changes that have been collected since this declViewModel was created\n      * or after the last 'update debound' was processed.\n      */\n    pendingContextChanges: null,\n\n    /**\n      * edit configuration map. This holds the configuration for start/cancel/save edit actions\n      */\n    editConfig: null,\n\n    /**\n      * ports for sync strategy\n      */\n    ports: null,\n\n    /**\n      * Edit handlers\n      */\n    editHandlers: null,\n\n    /**\n      * This function will be called then the 'dataCtxNode' ( aka '$scope' ) this 'declViewModel'\n      * is placed on is destroyed.\n      *\n      * @param {Boolean} destroyDataProviders - TRUE if all associated dataProviders should have their 'destroy' method called.\n      */\n    destroy: function (destroyDataProviders) {\n      vmSelf._internal.isDestroyed = true; // Any active actions or messages are going to be cut off, force clear out token\n\n      while (vmSelf._internal.token.isActive()) {\n        vmSelf._internal.token.removeAction(null);\n      }\n\n      declModelRegistrySvc.unregisterModel('DeclViewModel', vmSelf, '_internal.panelId', '_internal.modelId');\n\n      _.forEach(this.eventSubscriptions, function (subDef) {\n        eventBus.unsubscribe(subDef);\n      });\n\n      _.forEach(this.subPanelId2EventSubscriptionsMap, function (subDefs) {\n        _.forEach(subDefs, function (subDef) {\n          eventBus.unsubscribe(subDef);\n        });\n      });\n\n      this.eventSubscriptions = [];\n      this.subPanelId2EventSubscriptionsMap = {};\n      /**\n        * Stop debounce for ctx change events.\n        */\n\n      if (vmSelf._internal.pingUpdateViewModel && vmSelf._internal.pingUpdateViewModel.cancel) {\n        vmSelf._internal.pingUpdateViewModel.cancel();\n\n        vmSelf._internal.pingUpdateViewModel = null;\n      }\n      /**\n        * Clean up all dataProviders\n        */\n\n\n      if (destroyDataProviders) {\n        _.forEach(vmSelf.dataProviders, function (uwDataProvider, dpName) {\n          uwDataProvider.destroy();\n          vmSelf.dataProviders[dpName] = null;\n        });\n\n        _.forEach(vmSelf.grids, function (currentGrid) {\n          if (currentGrid.columnProviderInstance) {\n            currentGrid.columnProviderInstance.destroy();\n            currentGrid.columnProviderInstance = null;\n          }\n        });\n      }\n      /**\n        * Clean up all subPanels\n        */\n\n\n      _.forEach(vmSelf._internal.subPanels, function (subPanel) {\n        declModelRegistrySvc.unregisterModel('SubPanel', subPanel, 'panelId', 'id');\n      });\n\n      vmSelf._internal.subPanels = null;\n      vmSelf._internal.declViewModelJsonBoundProps = null;\n      vmSelf._internal.pendingContextChanges = null;\n      /**\n        * Clean up edit config\n        */\n\n      if (vmSelf._internal.editConfig) {\n        editUtilsService._removeListeners(vmSelf._internal.editConfig.sourceModel);\n      }\n\n      vmSelf._internal.editConfig = null;\n      /**\n        * Clean up edit handler\n        */\n\n      if (vmSelf._internal.editContext) {\n        editHandlerService.removeEditHandler(vmSelf._internal.editContext);\n      }\n      /**\n        * Clean up references to external resources\n        */\n\n\n      vmSelf._internal.origCtxNode = null;\n      vmSelf.vmo = null;\n      vmSelf.objects = null;\n    },\n\n    /**\n      * Based on the value of the 'skipClone' property of the given JSON object, clone a copy of the given\n      * JSON object (if necessary) and save it in a local property.\n      *\n      * @param {DeclViewModelJson} declViewModelJsonIn - The object returned from loading the JSON resource for\n      *            this 'declViewModel'.\n      */\n    setViewModelJson: function (declViewModelJsonIn) {\n      vmSelf._internal.origDeclViewModelJson = declViewModelJsonIn;\n\n      if (declViewModelJsonIn._viewModelId) {\n        vmSelf._internal.panelId = declViewModelJsonIn._viewModelId;\n      } else {\n        /**\n          * revisitme\n          * logger.error( 'setViewModelJson: No panelId given' );\n          */\n      }\n\n      if (declViewModelJsonIn._uniqueViewModelId) {\n        vmSelf._internal.viewId = declViewModelJsonIn._uniqueViewModelId;\n      }\n    },\n\n    /**\n      * Set all the properties in this object to all the valid corresponding properties in the given\n      * 'jsonData' object.\n      *\n      * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n      *            JSON resource for this 'declViewModel'.\n      */\n    setJsonData: function (jsonData) {\n      if (jsonData.actions) {\n        /**\n          * Note: For debug purposes ONLY...Include the name of the action in the action object as the\n          * 'actionId' property.\n          */\n        _.forEach(jsonData.actions, function (value, name) {\n          value.actionId = name;\n        });\n\n        vmSelf._internal.actions = jsonData.actions;\n      }\n\n      if (jsonData.conditions) {\n        vmSelf._internal.conditions = jsonData.conditions;\n      }\n\n      if (jsonData.ports) {\n        vmSelf._internal.ports = jsonData.ports;\n      }\n\n      if (jsonData.dataParseDefinitions) {\n        vmSelf._internal.dataParseDefinitions = jsonData.dataParseDefinitions;\n      }\n\n      if (jsonData.functions) {\n        vmSelf._internal.functions = jsonData.functions;\n      }\n\n      if (jsonData.messages) {\n        vmSelf._internal.messages = jsonData.messages;\n      }\n\n      if (jsonData.onEvent) {\n        vmSelf._internal.onEvent = jsonData.onEvent;\n      }\n\n      if (jsonData.grids) {\n        vmSelf._internal.grids = jsonData.grids;\n      }\n\n      if (jsonData.chartProviders) {\n        vmSelf._internal.chartProviders = jsonData.chartProviders;\n      }\n\n      if (jsonData.editConfig) {\n        vmSelf._internal.editConfig = jsonData.editConfig;\n      }\n\n      if (jsonData.lifecycleHooks) {\n        vmSelf._internal.lifecycleHooks = jsonData.lifecycleHooks;\n      }\n\n      if (jsonData.editContext) {\n        vmSelf._internal.editContext = jsonData.editContext;\n      }\n\n      if (jsonData.selectionModels) {\n        vmSelf._internal.selectionModels = jsonData.selectionModels;\n      }\n\n      if (jsonData.editHandlers) {\n        vmSelf._internal.editHandlers = jsonData.editHandlers;\n      }\n    },\n\n    /**\n      * Consolidate (i.e. merge) all the properties in this object to all the valid corresponding properties\n      * in the given 'jsonData' object.\n      *\n      * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n      *            JSON resource for this 'declViewModel'.\n      */\n    consolidateJsonData: function (jsonData) {\n      vmSelf._internal.actions = declUtils.consolidateObjects(vmSelf._internal.actions, jsonData.actions);\n      vmSelf._internal.dataParseDefinitions = declUtils.consolidateObjects(vmSelf._internal.dataParseDefinitions, jsonData.dataParseDefinitions);\n      vmSelf._internal.conditions = declUtils.consolidateObjects(vmSelf._internal.conditions, jsonData.conditions);\n      vmSelf._internal.functions = declUtils.consolidateObjects(vmSelf._internal.functions, jsonData.functions);\n      vmSelf._internal.messages = declUtils.consolidateObjects(vmSelf._internal.messages, jsonData.messages);\n      vmSelf._internal.onEvent = declUtils.consolidateObjects(vmSelf._internal.onEvent, jsonData.onEvent);\n      vmSelf._internal.grids = declUtils.consolidateObjects(vmSelf._internal.grids, jsonData.grids);\n      vmSelf._internal.chartProviders = declUtils.consolidateObjects(vmSelf._internal.chartProviders, jsonData.chartProviders);\n      vmSelf._internal.editConfig = declUtils.consolidateObjects(vmSelf._internal.editConfig, jsonData.editConfig);\n\n      if (jsonData.ports) {\n        vmSelf._internal.ports = declUtils.consolidateObjects(vmSelf._internal.ports, jsonData.ports);\n      }\n\n      vmSelf._internal.lifecycleHooks = declUtils.consolidateObjects(vmSelf._internal.lifecycleHooks, jsonData.lifecycleHooks);\n\n      if (jsonData.selectionModels) {\n        vmSelf._internal.selectionModels = declUtils.consolidateObjects(vmSelf._internal.selectionModels, jsonData.selectionModels);\n      }\n    }\n  };\n  /**\n    * ----------------------------------------------------<br>\n    * Define public API <BR>\n    * ----------------------------------------------------<br>\n    */\n\n  /**\n    * Override the default implementation to return more helpful information.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {String} Text used to identify the ID of the DeclViewModel (e.g. 'modelId' + an optional 'url').\n    */\n\n  vmSelf.toString = function () {\n    if (vmSelf.getPanelId()) {\n      return vmSelf._internal.modelId + '  modelName: ' + vmSelf.getPanelId();\n    }\n\n    return vmSelf._internal.modelId + '  modelName: ' + '???';\n  };\n  /**\n    * Get the tracking token for the view model\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {DeclViewModelToken} token\n    */\n\n\n  vmSelf.getToken = function () {\n    return vmSelf._internal.token;\n  };\n  /**\n    * Get ID/Name of this declViewModel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n    */\n\n\n  vmSelf.getPanelId = function () {\n    return vmSelf._internal.panelId;\n  };\n  /**\n    * Get ID of this declViewModel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {String} The ID used for unique with aw-include\n    */\n\n\n  vmSelf.getViewId = function () {\n    return vmSelf._internal.viewId;\n  };\n  /**\n    * Get DeclAction with the given ID.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} actionId - The ID of the DeclAction to return.\n    * @return {DeclAction} The DeclAction with the given ID (or FALSEY if not found);\n    */\n\n\n  vmSelf.getAction = function (actionId) {\n    return vmSelf._internal.actions[actionId];\n  };\n  /**\n    * Get port's obj with the given name.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} portName - The name of the port.\n    * @return {Object} The port's sync object and action.\n    */\n\n\n  vmSelf.getPortById = function (portName) {\n    return vmSelf._internal.ports[portName];\n  };\n  /**\n    * Get the DataParseDefinition in the DeclViewModel\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @param {String} id - The ID of the DataParseDefinition to return.\n    * @return {Object} The dataParseDefinition\n    */\n\n\n  vmSelf.getDataParseDefinition = function (id) {\n    return vmSelf._internal.dataParseDefinitions[id];\n  };\n  /**\n    * Get the functions in the DeclViewModel\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} The functions\n    */\n\n\n  vmSelf.getFunctions = function () {\n    return vmSelf._internal.functions;\n  };\n  /**\n    * Get array of any subPanels defined.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {ObjectArray} The array of sub-panel that have been 'merged' into this 'target' 'declViewModel'\n    *         (or NULL if no panels have been added).\n    */\n\n\n  vmSelf.getSubPanels = function () {\n    return vmSelf._internal.subPanels;\n  };\n  /**\n    * Get sub panel of the given panel ID\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel\n    * @return {Object} The sub-panel state object\n    */\n\n\n  vmSelf.getSubPanel = function (subPanelId) {\n    return _.find(vmSelf._internal.subPanels, {\n      panelId: subPanelId\n    });\n  };\n  /**\n    * Gets the edit configuration object\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @return {Object} The edit configuration object\n    */\n\n\n  vmSelf.getEditConfiguration = function () {\n    return vmSelf._internal.editConfig;\n  };\n  /**\n    * Get lifecycle hooks\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} The lifecycle hooks\n    */\n\n\n  vmSelf.getLifecycleHooks = function () {\n    return vmSelf._internal.lifecycleHooks;\n  };\n  /**\n    * Get selection models\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} The selection models\n    */\n\n\n  vmSelf.getSelectionModels = function () {\n    return vmSelf._internal.selectionModels;\n  };\n  /**\n    * Add a sub-panel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel that has been 'merged' into this 'target'\n    *            'declViewModel'.\n    */\n\n\n  vmSelf.addSubPanel = function (subPanelId) {\n    if (!vmSelf._internal.subPanels) {\n      vmSelf._internal.subPanels = [];\n    } // remove the old panel with the input ID if exist\n\n\n    if (vmSelf.getSubPanel(subPanelId)) {\n      vmSelf.removeSubPanel(subPanelId);\n    }\n\n    var subPanel = {\n      panelId: subPanelId,\n      contextChanged: false\n    };\n\n    if (logger.isDeclarativeLogEnabled()) {\n      logger.declarativeLog('DECLARATIVE TRACE - Add Subpanel ' + subPanelId);\n    }\n\n    declModelRegistrySvc.registerModel('SubPanel', subPanel, 'panelId', 'id');\n\n    vmSelf._internal.subPanels.push(subPanel);\n  };\n  /**\n    * Remove specified sub panel\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel\n    */\n\n\n  vmSelf.removeSubPanel = function (subPanelId) {\n    if (logger.isDeclarativeLogEnabled()) {\n      logger.declarativeLog('DECLARATIVE TRACE - Remove Subpanel ' + subPanelId);\n    } // un-subscribe events for the sub-panel\n\n\n    var subscriptions = vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];\n\n    _.forEach(subscriptions, function (subDef) {\n      eventBus.unsubscribe(subDef);\n    });\n\n    delete vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];\n\n    _.remove(vmSelf._internal.subPanels, function (subPanel) {\n      if (subPanel.panelId === subPanelId) {\n        declModelRegistrySvc.unregisterModel('SubPanel', subPanel, 'panelId', 'id');\n        return true;\n      }\n\n      return false;\n    });\n  };\n  /**\n    * Add the given event subscription to the collection of event subscriptions for a given subPanel ID.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} subPanelId - The ID of the sub-panel\n    * @param {Object} subDef - The event subscription to add\n    */\n\n\n  vmSelf.addSubPanelEventSubscription = function (subPanelId, subDef) {\n    var subDefs = vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];\n\n    if (!subDefs) {\n      subDefs = [];\n      vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId] = subDefs;\n    }\n\n    subDefs.push(subDef);\n  };\n  /**\n    * ----------------------------------------------------<br>\n    * ----------------------------------------------------<br>\n    */\n\n  /**\n    * Get current condition states map.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @return {Object} A map of a 'conditionName' property to its current true/false state.\n    */\n\n\n  vmSelf.getConditionStates = function () {\n    if (vmSelf._internal.conditionStates) {\n      return vmSelf._internal.conditionStates;\n    }\n\n    return {};\n  };\n  /**\n    * This method subscribes CDM update/modify event in declViewModelObject and also register corresponding\n    * handler to that.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    */\n\n\n  vmSelf.attachEvents = function () {\n    var handler = function (data) {\n      var objs = data.updatedObjects;\n\n      if (!objs) {\n        objs = data.modifiedObjects;\n      }\n\n      var operationName = null;\n\n      if (vmSelf && vmSelf.vmo) {\n        operationName = vmSelf.vmo.operationName;\n      }\n\n      _.forEach(objs, function (object) {\n        if (object && vmSelf.objects) {\n          const newVmo = viewModelObjectSrv.createViewModelObject(object.uid, operationName);\n          viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(newVmo, vmSelf.objects);\n        }\n      });\n    };\n\n    var cdmUpdateEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.updated'];\n\n    if (!cdmUpdateEventDef) {\n      vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.updated'] = [eventBus.subscribe('cdm.updated', handler)];\n    }\n\n    var cdmModifiedEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.modified'];\n\n    if (!cdmModifiedEventDef) {\n      vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.modified'] = [eventBus.subscribe('cdm.modified', handler)];\n    }\n  };\n  /**\n    * Attach a model object to this DeclViewModel. All the properties of the model object will be consolidated\n    * to DeclViewModel.\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    *\n    * @param {String} uid - The UID of model object to attach\n    * @param {String} operationName - The operation being performed on model object\n    * @param {String} owningObjUid - The UID of owning object\n    * @param {Object} serverVMO - The VMO which was returned from the server.\n    *\n    * @returns {ViewModelObject} The object created to wrap the IModelObject specified by the given model information.\n    */\n\n\n  vmSelf.attachModelObject = function (uid, operationName, owningObjUid, serverVMO) {\n    if (uid) {\n      // Build the vmo.\n      var vmo = viewModelObjectSrv.createViewModelObject(uid, operationName, owningObjUid, serverVMO);\n\n      if (vmo) {\n        vmo.operationName = operationName;\n        vmSelf.attachEvents(); // Update the underlying object properties.\n\n        if (vmo.type === 'Awp0XRTObjectSetRow') {\n          // Get underlying target object's UID if 'awp0Target' property exists\n          if (vmo.props && vmo.props.awp0Target) {\n            var targetUID = vmo.props.awp0Target.dbValue;\n            var targetMO = clientDataModel.getObject(targetUID);\n\n            if (targetMO) {\n              var targetVMO = viewModelObjectSrv.constructViewModelObjectFromModelObject(targetMO, operationName, null, null, true);\n              var props = targetVMO.props;\n\n              _.forEach(props, function (prop) {\n                if (prop && !vmo.props.hasOwnProperty(prop.propertyName)) {\n                  if (prop.intermediateObjectUids) {\n                    prop.intermediateObjectUids.push(targetUID);\n                  } else {\n                    prop.intermediateObjectUids = [targetUID];\n                  }\n\n                  vmo.props[prop.propertyName] = prop;\n                }\n              });\n            }\n          }\n        }\n      }\n\n      return vmo;\n    }\n\n    return undefined;\n  }; // ======================== Edit Handler Interface ===================================================//\n\n\n  if (!vmSelf._internal.eventTopicEditInProgress) {\n    vmSelf._internal.eventTopicEditInProgress = declViewModelJson && declViewModelJson._viewModelId ? declViewModelJson._viewModelId + '_editInProgress' : '_editInProgress';\n  }\n  /**\n    * @param {*} dvmSelf declViewModel instance\n    * @param {*} isEnabled true/false\n    */\n\n\n  var setSelectionEnabled = function (dvmSelf, isEnabled) {\n    var dataProviders = dvmSelf.dataProviders;\n\n    _.forOwn(dataProviders, function (dataProvider) {\n      dataProvider.setSelectionEnabled(isEnabled);\n    });\n  };\n  /**\n    * @param {*} stateName edit handler state name\n    * @param {*} dvmSelf declViewModel itself\n    */\n\n\n  var _notifyEditStateChange = function (stateName, dvmSelf) {\n    dvmSelf._editingState = stateName;\n    dvmSelf._editing = stateName === 'starting';\n    setSelectionEnabled(dvmSelf, dvmSelf._editing); // Add to the appCtx about the editing state\n\n    appCtxSvc.updateCtx(dvmSelf._internal.eventTopicEditInProgress, dvmSelf._editing);\n    eventBus.publish(dvmSelf._internal.eventTopicEditInProgress, vmSelf._editing);\n  }; // Revisitme - This should ideally be done inside destroy. Commenting it out till we get a use case to fix it properly.\n  // appCtxSvc.unRegisterCtx( vmSelf._internal.eventTopicEditInProgress );\n\n  /**\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @param {*} dvmSelf declViewModel instance\n    * @returns {*} viewModelCollection view model collection as array\n    */\n\n\n  var collectViewModelObjects = function (dvmSelf) {\n    var dataProviders = dvmSelf.dataProviders;\n    var viewModelCollection = [];\n\n    _.forOwn(dataProviders, function (dataProvider) {\n      viewModelCollection = viewModelCollection.concat(dataProvider.viewModelCollection.getLoadedViewModelObjects());\n    });\n\n    return viewModelCollection;\n  };\n  /**\n    * isDirty implementation of edit-handler interface\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.isDirty = function () {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    return editUtilsService._isDirty(viewModelCollection);\n  };\n  /**\n    *This function implements the start edit function edit handler interface\n    *@memberof viewModelProcessingFactory.DeclViewModel\n    *@param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n    *@returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.startEdit = function (editOptions) {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    var editConfig = vmSelf.getEditConfiguration();\n    editConfig.sourceModel = vmSelf.getViewId();\n    var dataCtxNode = {\n      data: vmSelf,\n      ctx: appCtxSvc.ctx\n    };\n\n    const saveEditStateChangeCallback = function () {\n      _notifyEditStateChange('saved', vmSelf);\n    };\n\n    return editUtilsService._startEdit(dataCtxNode, vmSelf, viewModelCollection, editConfig, saveEditStateChangeCallback, editOptions).then(function () {\n      if (!editOptions) {\n        _notifyEditStateChange('starting', vmSelf);\n      }\n    });\n  };\n  /**\n    * This is the cancel edits implementation of edit-handler interface.\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.cancelEdits = function () {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    var dataCtxNode = {\n      data: vmSelf,\n      ctx: appCtxSvc.ctx\n    };\n    var editConfig = vmSelf.getEditConfiguration();\n    return editUtilsService._cancelEdits(dataCtxNode, vmSelf, viewModelCollection, editConfig).then(function () {\n      _notifyEditStateChange('canceling', vmSelf);\n    });\n  };\n  /**\n    * This function implements the save edits function edit handler interface\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @returns {*} AwPromiseService.instance promise\n    */\n\n\n  vmSelf.saveEdits = function () {\n    var viewModelCollection = collectViewModelObjects(vmSelf);\n    var editConfig = vmSelf.getEditConfiguration();\n    var dataCtxNode = {\n      data: vmSelf,\n      ctx: appCtxSvc.ctx\n    };\n    return editUtilsService._saveEdits(dataCtxNode, vmSelf, viewModelCollection, editConfig).then(function () {\n      _notifyEditStateChange('saved', vmSelf);\n    });\n  };\n  /**\n    *\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @return {*} boolean\n    */\n\n\n  vmSelf.editInProgress = function () {\n    return vmSelf._editing;\n  }; // ======================== End of Edit Handler Interface ===================================================//\n\n  /**\n    * Check if this 'declViewModel' is 'destroyed' and should not be used.\n    * @memberof viewModelProcessingFactory.DeclViewModel\n    * @return {Boolean} TRUE if this DeclViewModel has had it's 'destroy' method called and should no longer be\n    *         used or accessed for any purpose.\n    */\n\n\n  vmSelf.isDestroyed = function () {\n    return vmSelf._internal.isDestroyed;\n  };\n  /**\n    * ---------------------------------------------------------------------------<BR>\n    * Property & Function definition complete....Finish initialization. <BR>\n    * ---------------------------------------------------------------------------<BR>\n    */\n\n\n  if (declViewModelJson) {\n    vmSelf._internal.setJsonData(declViewModelJson);\n\n    vmSelf._internal.setViewModelJson(declViewModelJson);\n  }\n\n  declModelRegistrySvc.registerModel('DeclViewModel', vmSelf, '_internal.panelId', '_internal.modelId');\n}; // DeclViewModel\n\n/**\n  * Update the property in the 'target' object with the same value as the 'source' object based on the given\n  * 'path' to that property.\n  * <P>\n  * Note: This function handles the 'special' property names used in the 'attrHolder' object used by the\n  * 'modelPropertyService' during the initial property creation.\n  *\n  * @param {String} dataPath - The path to the property in the original 'declViewModelJson' 'data' object used as\n  *            the basis of the property in the 'source' & 'target' to be updated.\n  *\n  * @param {ViewModelObject} sourceObject - The 'source' object of the value to apply.\n  *\n  * @param {ViewModelObject} targetObject - The 'target' object the value will be applies to.\n  *\n  * @return {Boolean} TRUE if the updated value requires i18n processing.\n  */\n\n\n_c2 = DeclViewModel;\nexport let updateDataProperty = function (dataPath, sourceObject, targetObject) {\n  /**\n    * Check if it is a 'special' name that should use the mapped property name.\n    */\n  var lastDotNdx = dataPath.lastIndexOf('.');\n  var leafPropName = dataPath.substring(lastDotNdx + 1);\n\n  if (declUtils.attrHolderPropName.indexOf(leafPropName) > -1) {\n    var parentPath = dataPath.substring(0, lastDotNdx);\n    modelPropertySvc.updateProperty(parentPath, leafPropName, sourceObject, targetObject);\n    return false;\n  }\n\n  var newValue = _.get(sourceObject, dataPath);\n\n  _.set(targetObject, dataPath, newValue);\n\n  return _.isString(newValue) && /^{{i18n\\./.test(newValue) || _.isObject(newValue) && /^{{i18n\\./.test(newValue.text);\n};\n/**\n  * Return a new instance of a {DeclVideModel} initialized based on the given information.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  *\n  * @return {DeclViewModel} A newly created DeclViewModel object with all properties set to their default values\n  *         other than those set via any given JSON object..\n  */\n\nexport let createDeclViewModel = function (declViewModelJson) {\n  return new DeclViewModel(declViewModelJson);\n};\n/**\n  * Resolve value of ctx and subPanelContext\n  * @param {String} propValue - Prop Value like {{ctx.title}} or {{subPanelContext.title}}.\n  * @param {String} propName - Prop name of element.\n  * @param {Object} dataObj - data object which will have ctx obj or subcontext.\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  */\n\nfunction resolvePropValue(propValue, propName, dataObj, parentJsonObject) {\n  var newVal = parsingUtils.getStringBetweenDoubleMustaches(propValue);\n\n  var val = _.get(dataObj, newVal);\n\n  if (val) {\n    parentJsonObject[propName] = val;\n  } else {\n    val = AwInterpolateService.instance(propValue)(dataObj);\n\n    if (val) {\n      parentJsonObject[propName] = val;\n    } else {\n      parentJsonObject[propName] = '';\n    }\n  }\n}\n/**\n  * Recursively initialize the property values of the given JSON data object with the current value of any bound\n  * appContext properties (bound via {{ctx.*}}).\n  * <P>\n  * Note: While on the 'exports' object, this API is only meant for internal/testing use.\n  *\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  */\n\n\nexport let initViewModel = function (parentJsonObject, subPanelContext, props) {\n  _.forEach(parentJsonObject, function (propValue, propName) {\n    // Check if starts with '{{ctx.' and ends with '}}'\n    if (_.isString(propValue) && /^{{ctx\\..*}}$/.test(propValue)) {\n      resolvePropValue(propValue, propName, appCtxSvc, parentJsonObject);\n    } else if (_.isString(propValue) && /^{{subPanelContext\\..*}}$/.test(propValue)) {\n      // Check if starts with '{{subPanelContext.' and ends with '}}'\n      resolvePropValue(propValue, propName, {\n        subPanelContext: subPanelContext\n      }, parentJsonObject);\n    } else if (_.isString(propValue) && /^{{props\\..*}}$/.test(propValue) && props) {\n      // Check if starts with '{{props.' and ends with '}}'\n      resolvePropValue(propValue, propName, {\n        props: props\n      }, parentJsonObject);\n    } else if (_.isObject(propValue)) {\n      exports.initViewModel(propValue, subPanelContext, props);\n    }\n  });\n};\n/**\n  * Sanitize String properties of viewModelProperty.\n  *\n  * @param {Object} viewModelProperty - Object to check.\n  *\n  * @return {ViewModelProperty} sanitized viewModelProperty.\n  */\n\nfunction _sanitize(viewModelProperty) {\n  _.forOwn(viewModelProperty, function (value, key) {\n    if (propertiesToSanitize[key]) {\n      if (_.isString(value)) {\n        viewModelProperty[key] = sanitizer.sanitizeHtmlValue(value);\n      } else if (_.isArray(value)) {\n        viewModelProperty[key] = sanitizer.sanitizeHtmlValues(value);\n      }\n    }\n  });\n\n  return viewModelProperty;\n}\n/**\n  * Process JSON data, create 'ViewModelProperty' object and fill in data for further processing.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise will be resolved with a new 'declViewModel' object populated with information\n  *         from the given 'declViewModelJson'.\n  */\n\n\nexport let processViewModel = function (declViewModelJson, subPanelContext, props) {\n  var jsonData = declViewModelJson;\n  debugService.debug('lifeCycles', declViewModelJson._viewModelId, 'init');\n  var newDeclViewModel = exports.createDeclViewModel(declViewModelJson);\n  /**\n    * Check if we have any 'data' objects we need to apply appContext to.\n    */\n\n  if (!_.isEmpty(jsonData.data)) {\n    /**\n      * Since 'initViewModel' changes the object given to it, make a clone now to leave the original JSON\n      * object untouched.\n      */\n    var dataClone = _.cloneDeep(jsonData.data);\n\n    exports.initViewModel(dataClone, subPanelContext, props);\n    /**\n      *\n      */\n\n    var compoundObjectMap = {};\n    var compoundViewModelObjectMap = {}; // If 'uid' is given in view model data, attach the model object to this DeclViewModel\n\n    if (dataClone.uid) {\n      newDeclViewModel.vmo = newDeclViewModel.attachModelObject(dataClone.uid, dataClone.operationName, dataClone.owningObjUid);\n      newDeclViewModel.uid = dataClone.uid;\n    }\n\n    _.forEach(dataClone, function (dataProp, propName) {\n      // eslint-disable-line complexity\n\n      /**\n        * We do not want model objects as declViewModelObjects, so do not allow this 'marker' property on\n        * the new object. This case was already handled above.\n        */\n      if (propName === 'uid') {\n        return;\n      }\n      /**\n        * Do not process properties beginning with underscore as view model properties.\n        */\n\n\n      if (_.startsWith(propName, '_')) {\n        newDeclViewModel[propName] = dataProp;\n        return;\n      }\n\n      if (propName === 'objects') {\n        if (!newDeclViewModel.objects) {\n          newDeclViewModel.objects = {};\n        }\n\n        _.forEach(dataProp, function (dataPropValues, dataPropName) {\n          var vmos = [];\n          dataPropValues.forEach(function (dataPropValue) {\n            var viewModelObject = newDeclViewModel.attachModelObject(dataPropValue.uid, dataClone.operationName, dataClone.owningObjUid, dataPropValue);\n\n            if (dataPropValue.selected) {\n              newDeclViewModel.vmo = viewModelObject;\n            }\n\n            vmos.push(viewModelObject);\n          }); // same uid may map to multiple vmo\n\n          if (vmos.length > 1) {\n            newDeclViewModel.objects[dataPropName] = vmos;\n          } else {\n            newDeclViewModel.objects[dataPropName] = vmos[0];\n          }\n        });\n\n        return;\n      }\n      /**\n        * Create a new viewModelProperty based on the JSON data's 'data' properties\n        */\n\n\n      let propAttrHolder = declUtils.buildPropHolder(dataProp); // If this is not a view model prop, just save the object to the data.\n\n      if (_.isEmpty(propAttrHolder)) {\n        newDeclViewModel[propName] = dataProp;\n        return;\n      }\n      /**\n        * Make sure we have a 'propName' set.\n        */\n\n\n      if (!propAttrHolder.propName) {\n        propAttrHolder.propName = propName;\n      } // process compound property, like revision:item_revision_id\n\n\n      var isCompoundProp = false;\n      var vmProp = null;\n\n      if (propName.indexOf(_compoundPropNameDelimiter) > 0 && propAttrHolder.dbValue.indexOf(_compoundPropValueDelimiter) > 0) {\n        var compoundProps = propAttrHolder.dbValue.split(_compoundPropValueDelimiter);\n\n        var objectRefProp = _.get(newDeclViewModel, compoundProps[0]);\n\n        if (objectRefProp.type === 'OBJECT' || objectRefProp.type === 'OBJECTARRAY') {\n          isCompoundProp = true;\n          var modelObject = null;\n          var childFullPropertyName = '';\n          var i = 0;\n\n          for (i = 0; i < compoundProps.length - 1; i++) {\n            if (i === 0) {\n              modelObject = clientDataModel.getObject(objectRefProp.dbValues[0]);\n            } else if (modelObject) {\n              childFullPropertyName += '__';\n              objectRefProp = _.get(modelObject.props, compoundProps[i]);\n              modelObject = clientDataModel.getObject(objectRefProp.dbValues[0]);\n            }\n\n            childFullPropertyName += compoundProps[i];\n\n            if (!compoundObjectMap.hasOwnProperty(childFullPropertyName)) {\n              _.set(compoundObjectMap, childFullPropertyName, modelObject);\n            }\n          }\n\n          var compoundViewModelObject = _.get(compoundViewModelObjectMap, childFullPropertyName);\n\n          if (!compoundViewModelObject && modelObject) {\n            compoundViewModelObject = viewModelObjectSrv.createViewModelObject(modelObject.uid, dataClone.operationName);\n\n            _.set(compoundViewModelObjectMap, childFullPropertyName, compoundViewModelObject);\n          }\n\n          if (compoundViewModelObject) {\n            vmProp = _.get(compoundViewModelObject.props, compoundProps[i]);\n\n            if (!vmProp) {\n              // skip this view model property when the compound property doesn't exist in referenced object\n              return;\n            }\n\n            _.set(vmProp, 'intermediateCompoundObjects', compoundObjectMap);\n          }\n        }\n      }\n\n      if (!vmProp) {\n        vmProp = modelPropertySvc.createViewModelProperty(propAttrHolder);\n      } // other properties\n\n\n      if (!isCompoundProp && !declUtils.isNil(dataProp.dbValue)) {\n        vmProp.dbValue = dataProp.dbValue;\n      }\n\n      if (dataProp.dataProvider) {\n        // we have an lov, but the api is defined using the dataProvider\n        vmProp.dataProvider = dataProp.dataProvider; // initialize lovApi here? we could if we had the prop scope...\n        // instead, postpone till first expand\n\n        vmProp.hasLov = true; // allow empty LOV entry\n\n        vmProp.emptyLOVEntry = dataProp.emptyLOVEntry;\n      }\n\n      if (!declUtils.isNil(dataProp.uiValue)) {\n        vmProp.uiValue = dataProp.uiValue;\n      }\n\n      if (!declUtils.isNil(dataProp.propertyLabelDisplay)) {\n        vmProp.propertyLabelDisplay = dataProp.propertyLabelDisplay;\n      } // attach method for accessing the viewModel\n\n\n      vmProp.getViewModel = function () {\n        return newDeclViewModel;\n      };\n      /* revisitme Shaishav\n       * Hint: Sanitization failes some examples. Need to investigate.\n       newDeclViewModel[ propName ] = _sanitize( vmProp );\n       */\n\n\n      newDeclViewModel[propName] = vmProp;\n    });\n  }\n\n  if (jsonData.grids) {\n    newDeclViewModel.grids = _.cloneDeep(jsonData.grids);\n    exports.initViewModel(newDeclViewModel.grids, subPanelContext);\n  }\n\n  if (jsonData.columnProviders) {\n    newDeclViewModel.columnProviders = {};\n    var mockedColumnProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.columnProviders;\n\n    _.forEach(jsonData.columnProviders, function (jsonColumnProvider, cpName) {\n      if (mockedColumnProvider && mockedColumnProvider[cpName]) {\n        jsonColumnProvider = mockedColumnProvider[cpName];\n      }\n\n      newDeclViewModel.columnProviders[cpName] = jsonColumnProvider;\n    });\n  }\n\n  if (jsonData.chartProviders) {\n    if (!newDeclViewModel.chartProviders) {\n      newDeclViewModel.chartProviders = {};\n    }\n\n    newDeclViewModel.chartProviders = jsonData.chartProviders;\n    exports.initViewModel(newDeclViewModel.chartProviders, subPanelContext, props);\n\n    _.forEach(newDeclViewModel.chartProviders, function (jsonChartProvider, chartProviderName) {\n      newDeclViewModel.chartProviders[chartProviderName].name = chartProviderName;\n    });\n  }\n\n  if (jsonData.commands) {\n    newDeclViewModel.commands = _.cloneDeep(jsonData.commands);\n    exports.initViewModel(newDeclViewModel.commands);\n  }\n\n  if (jsonData.commandHandlers) {\n    newDeclViewModel.commandHandlers = jsonData.commandHandlers;\n  }\n\n  if (jsonData.commandPlacements) {\n    newDeclViewModel.commandPlacements = jsonData.commandPlacements;\n  }\n\n  if (jsonData.objectSetSource) {\n    newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n  }\n\n  if (jsonData.objectSetSource) {\n    newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n  }\n\n  if (jsonData.editContext) {\n    /**\n         * revisitme\n         * editHandlerFactory is not ported yet\n             editHandlerService.setEditHandler( editHandlerFactory.createEditHandler( dataSourceService\n                .createNewDataSource( {\n                    declViewModel: newDeclViewModel\n                } ) ), jsonData.editContext );\n          */\n    // set this handler active\n    editHandlerService.setActiveEditHandlerContext(jsonData.editContext);\n  }\n\n  if (jsonData.editHandlers) {\n    newDeclViewModel.editHandlers = jsonData.editHandlers;\n  }\n\n  return _populateDataProviders(declViewModelJson, newDeclViewModel, subPanelContext);\n};\n/**\n  * Update localization texts on the properties created based on data section\n  *\n  * @param {DeclViewModel} objectRoot - The 'declViewModel' to scan for possible I18n string replacements and the\n  *            model to apply those replacements to.\n  *\n  * @param {Object} i18nValueMap - Context to search the input string from.\n  *            <P>\n  *            Note: All property names in this object are possible to be used as string replacements. However,\n  *            most uses of this service will use 'i18n.' as the prefix in their text 'path'. Therefore, the\n  *            'i18n' property of this object is the most important property.\n  *\n  * @param {Number} level - Level in the recursive walk of the i18n properties.\n  *\n  * @param {StringMap} paramValues -\n  */\n\nexport let updateI18nTexts = function (objectRoot, i18nValueMap, level, paramValues) {\n  _.forEach(objectRoot, function (propValue, propName) {\n    /**\n      * Check if <BR>\n      * There is NO property value OR <BR>\n      * It is a property that is 'reserved' (scope, ctx, data) OR<BR>\n      * It is known to be invalid to traverse (propertyDescriptor*, props, modelType, etc.)\n      * <P>\n      * Note: We are doing this to avoid cyclic traversals and data known to not contains i18n bindings.\n      */\n    if (!propValue || propValue.propertyDescriptor || /^(scope|ctx|data|props|eventData|eventMap|propertyDescriptor(|s|sMaps)|modelType|_internal|\\$.*)$/.test(propName) || _.isFunction(propValue) || _.isNumber(propValue) || _.isBoolean(propValue) || level === 1 && propName === 'action') {\n      return true;\n    }\n    /**\n      * Skip binding to any '_internal' properties or those starting with '$' or those with 'null' values, or\n      * properties from a model object\n      */\n\n\n    if (_.isString(propValue)) {\n      if (/^{{i18n\\./.test(propValue)) {\n        var results = propValue.match(parsingUtils.REGEX_DATABINDING);\n\n        if (results && results.length === 4) {\n          var textPath = results[2];\n\n          var val = _.get(i18nValueMap, textPath);\n\n          if (paramValues && !_.isEmpty(paramValues)) {\n            val = messagingService.applyMessageParamsWithoutContext(val, paramValues);\n          }\n\n          if (val) {\n            objectRoot[propName] = val;\n          } else {\n            // use i18n key as fall back if no i18n text found, slice the leading 'i18n.' in textPath to get key\n            objectRoot[propName] = textPath.slice(5);\n          }\n        }\n      }\n    } else if (_.isObject(propValue) && propValue.text && propValue.params) {\n      objectRoot[propName] = propValue.text;\n      exports.updateI18nTexts(objectRoot, i18nValueMap, nextLevel, propValue.params);\n    } else {\n      if (!_.isEmpty(propValue)) {\n        var nextLevel = level + 1;\n\n        if (propName === 'dataProviders') {\n          /**\n            * Resolve any i18n bindings in dataProvider command titles.\n            */\n          _.forEach(propValue, function (propValue2) {\n            if (propValue2 && propValue2.commands) {\n              exports.updateI18nTexts(propValue2.commands, i18nValueMap, nextLevel);\n            }\n          });\n        } else {\n          exports.updateI18nTexts(propValue, i18nValueMap, nextLevel);\n        }\n      }\n    }\n\n    return undefined;\n  });\n};\n\nconst reduceParentJsonObject = function (parentJsonObject, resolvedData, propNameArg) {\n  _.forEach(parentJsonObject, function (propValue, propName) {\n    if (_.isString(propValue) && /^{{subPanelContext\\..*}}$/.test(propValue) && propNameArg) {\n      _.set(resolvedData, propNameArg + '.' + propName, propValue);\n    } else if (_.isObject(propValue)) {\n      let propNameArg2 = propNameArg ? propNameArg + '.' + propName : propName;\n      reduceParentJsonObject(propValue, resolvedData, propNameArg2);\n    }\n  });\n};\n\nexport let resolveSubPanelContext = function (parentJsonObject, subPanelContext, resolvedData) {\n  reduceParentJsonObject(parentJsonObject, resolvedData);\n  exports.initViewModel(resolvedData, subPanelContext);\n};\nexport let getInputDataExpression = function (jsonObject) {\n  let expressionPaths = [];\n\n  _.forEach(jsonObject, function (propValue, propName) {\n    if (_.isString(propValue) && _.startsWith(propValue, '{{') && propName) {\n      let path = parsingUtils.getStringBetweenDoubleMustaches(propValue);\n      expressionPaths.push({\n        [propName]: path\n      });\n    } else if (_.isObject(propValue)) {\n      expressionPaths.push(...getInputDataExpression(propValue));\n    }\n  });\n\n  return expressionPaths;\n};\nexport let shouldCreateViewModelProperty = function (dataProp) {\n  var propAttrHolder = {};\n\n  _.forEach(dataProp, function (dataPropValue, dataPropName) {\n    if (declUtils.attrHolderPropName.indexOf(dataPropName) > -1) {\n      propAttrHolder[dataPropName] = dataPropValue;\n    }\n  });\n\n  return !_.isEmpty(propAttrHolder);\n};\n/**\n  * Check if any view model on the page is currently active\n  *\n  * @returns {Boolean} true if active\n  */\n\nexport let isAnyViewModelActive = function () {\n  return sharedViewModelToken !== 0;\n};\nexports = {\n  updateDataProperty,\n  createDeclViewModel,\n  initViewModel,\n  processViewModel,\n  updateI18nTexts,\n  isAnyViewModelActive,\n  resolveSubPanelContext,\n  shouldCreateViewModelProperty\n};\nexport default exports;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DeclViewModelToken\");\n$RefreshReg$(_c2, \"DeclViewModel\");","map":{"version":3,"names":["AwPromiseService","modelPropertySvc","viewModelObjectSrv","dataProviderFactory","declDataProviderSvc","appCtxSvc","clientDataModel","sanitizer","declModelRegistrySvc","editUtilsService","messagingService","mockModeService","AwInterpolateService","_","eventBus","parsingUtils","declUtils","logger","Debug","debugService","editHandlerService","cfgSvc","commandsSvc","loadDynModule","tokenTrace","propertiesToSanitize","dbValue","dbValues","displayValues","error","propertyDisplayName","propertyName","propertyRadioFalseText","propertyRadioText","uiValue","uiValues","value","_compoundPropNameDelimiter","_compoundPropValueDelimiter","_processAction","jsonData","jsonDataProvider","dpName","actionName","actionMap","actionRef","actions","exports","_populateDataProviders","declViewModelJson","declViewModel","subPanelContext","promises","dataProviderActions","dataProviders","isEmpty","dataProvidersClone","cloneDeep","mockedDataProvider","isMockModeActive","mock","initViewModel","editSupportParamKeys","provider","selectionQueryParamKey","index","forEach","resolvedLOVConfig","lovConfiguration","isTcLOV","action","initializeAction","dataProviderType","lovDataProviderJSON","getCfgCached","actName","tcDataprovider","newActionName","inputData","dataProviderName","response","moreValuesExist","createDataProvider","origJson","inputDataExpressions","getInputDataExpression","resolvedLovConfig","uidInResponse","isNil","preSelection","objectSetSource","setValidSourceTypes","commands","command","cmdId","commandsAnchor","dependencies","length","cmdOverlay","promise","then","handlers","position","displayOption","handler","condition","push","getCommand","commandOverlay","iconId","id","title","editContext","sharedViewModelToken","DeclViewModelToken","activeActionCount","addAction","removeAction","isActive","DeclViewModel","vmSelf","_internal","token","modelId","panelId","viewId","isDestroyed","eventSubscriptions","subPanelId2EventSubscriptionsMap","origDeclViewModelJson","conditionStates","conditionExpressions","conditions","dataParseDefinitions","functions","messages","onEvent","grids","chartProviders","subPanels","declViewModelJsonBoundProps","pendingContextChanges","editConfig","ports","editHandlers","destroy","destroyDataProviders","unregisterModel","subDef","unsubscribe","subDefs","pingUpdateViewModel","cancel","uwDataProvider","currentGrid","columnProviderInstance","subPanel","_removeListeners","sourceModel","removeEditHandler","origCtxNode","vmo","objects","setViewModelJson","declViewModelJsonIn","_viewModelId","_uniqueViewModelId","setJsonData","name","actionId","lifecycleHooks","selectionModels","consolidateJsonData","consolidateObjects","toString","getPanelId","getToken","getViewId","getAction","getPortById","portName","getDataParseDefinition","getFunctions","getSubPanels","getSubPanel","subPanelId","find","getEditConfiguration","getLifecycleHooks","getSelectionModels","addSubPanel","removeSubPanel","contextChanged","isDeclarativeLogEnabled","declarativeLog","registerModel","subscriptions","remove","addSubPanelEventSubscription","getConditionStates","attachEvents","data","objs","updatedObjects","modifiedObjects","operationName","object","newVmo","createViewModelObject","uid","updateSourceObjectPropertiesByViewModelObject","cdmUpdateEventDef","subscribe","cdmModifiedEventDef","attachModelObject","owningObjUid","serverVMO","type","props","awp0Target","targetUID","targetMO","getObject","targetVMO","constructViewModelObjectFromModelObject","prop","hasOwnProperty","intermediateObjectUids","undefined","eventTopicEditInProgress","setSelectionEnabled","dvmSelf","isEnabled","forOwn","dataProvider","_notifyEditStateChange","stateName","_editingState","_editing","updateCtx","publish","collectViewModelObjects","viewModelCollection","concat","getLoadedViewModelObjects","isDirty","_isDirty","startEdit","editOptions","dataCtxNode","ctx","saveEditStateChangeCallback","_startEdit","cancelEdits","_cancelEdits","saveEdits","_saveEdits","editInProgress","updateDataProperty","dataPath","sourceObject","targetObject","lastDotNdx","lastIndexOf","leafPropName","substring","attrHolderPropName","indexOf","parentPath","updateProperty","newValue","get","set","isString","test","isObject","text","createDeclViewModel","resolvePropValue","propValue","propName","dataObj","parentJsonObject","newVal","getStringBetweenDoubleMustaches","val","instance","_sanitize","viewModelProperty","key","sanitizeHtmlValue","isArray","sanitizeHtmlValues","processViewModel","debug","newDeclViewModel","dataClone","compoundObjectMap","compoundViewModelObjectMap","dataProp","startsWith","dataPropValues","dataPropName","vmos","dataPropValue","viewModelObject","selected","propAttrHolder","buildPropHolder","isCompoundProp","vmProp","compoundProps","split","objectRefProp","modelObject","childFullPropertyName","i","compoundViewModelObject","createViewModelProperty","hasLov","emptyLOVEntry","propertyLabelDisplay","getViewModel","columnProviders","mockedColumnProvider","jsonColumnProvider","cpName","jsonChartProvider","chartProviderName","commandHandlers","commandPlacements","setActiveEditHandlerContext","updateI18nTexts","objectRoot","i18nValueMap","level","paramValues","propertyDescriptor","isFunction","isNumber","isBoolean","results","match","REGEX_DATABINDING","textPath","applyMessageParamsWithoutContext","slice","params","nextLevel","propValue2","reduceParentJsonObject","resolvedData","propNameArg","propNameArg2","resolveSubPanelContext","jsonObject","expressionPaths","path","shouldCreateViewModelProperty","isAnyViewModelActive"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/viewModelProcessingFactory.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module is part of declarative UI framework and provides DeclViewModel processing functionalities.\n *\n * @module js/viewModelProcessingFactory\n *\n * @namespace viewModelProcessingFactory\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport modelPropertySvc from 'js/modelPropertyService';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport dataProviderFactory from 'js/dataProviderFactory';\nimport declDataProviderSvc from 'js/declDataProviderService';\nimport appCtxSvc from 'js/appCtxService';\nimport clientDataModel from 'soa/kernel/clientDataModel';\nimport sanitizer from 'js/sanitizer';\nimport declModelRegistrySvc from 'js/declModelRegistryService';\nimport editUtilsService from 'js/editUtilsService';\nimport messagingService from 'js/messagingService';\nimport mockModeService from 'js/mockModeService';\nimport AwInterpolateService from 'js/awInterpolateService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport parsingUtils from 'js/parsingUtils';\nimport declUtils from 'js/declUtils';\nimport logger from 'js/logger';\nimport Debug from 'debug';\nimport debugService from 'js/debugService';\nimport editHandlerService from 'js/editHandlerService';\nimport cfgSvc from 'js/configurationService';\n\nimport commandsSvc from 'js/command.service';\nimport { loadDynModule } from 'js/moduleLoader';\n\n/** revisitme\n  * Hint: editHandlerFactory not ported yet\n import editHandlerFactory from 'js/editHandlerFactory';\n */\n/** revisitme Shaishav\n  * Hint: Condition service is not used anywhere. Remove this\n import 'js/conditionService';\n */\n\nvar tokenTrace = new Debug( 'viewModel:token' );\n\n/**\n  * Cached reference to AngularJS & AW services\n  */\n\n/** List of attributes would be considered for sanitization */\nvar propertiesToSanitize = {\n    dbValue: true,\n    dbValues: true,\n    displayValues: true,\n    error: true,\n    propertyDisplayName: true,\n    propertyName: true,\n    propertyRadioFalseText: true,\n    propertyRadioText: true,\n    uiValue: true,\n    uiValues: true,\n    value: true\n};\n\nvar _compoundPropNameDelimiter = '__';\nvar _compoundPropValueDelimiter = ':';\n\n/**\n  * Perform the given 'action'.\n  *\n  * @param {Object} jsonData - Object loaded from the DeclViewModel JSON file\n  * @param {Object} jsonDataProvider - A specific dataProvider's definition within 'jsonData'.\n  * @param {String} dpName - The name of the 'declDataProvider' where the action is defined.\n  * @param {String} actionName - The name of the action to look for in the 'jsonData'\n  * @param {StringMap} actionMap - Map of action name to the action object from a declViewModel's JSON definition\n  *            to be updated by this function.\n  */\nfunction _processAction( jsonData, jsonDataProvider, dpName, actionName, actionMap ) {\n    var actionRef = jsonDataProvider[ actionName ];\n\n    if( actionRef ) {\n        if( jsonData.actions ) {\n            actionMap[ actionName ] = jsonData.actions[ actionRef ];\n        }\n\n        if( !actionMap[ actionName ] ) {\n            logger.error( 'DataProvider ' + dpName + ' references a missing action: ' + actionName +\n                 '...continuing' );\n        }\n    }\n} // _processAction\n\n/**\n  * Define the base object used to provide all of this module's external API on.\n  *\n  * @private\n  */\nvar exports = {};\n\n/**\n  * Evaluate dataProviders from JSON, load any dependencies and set on the given 'declViewModel'.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {DeclViewModel} declViewModel - The 'DeclViewModel' to populate with the dataProvider properties of\n  *            the given JSON object.\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise is resolved with the given 'declViewModel' once any data provider dependencies\n  *         are all resolved.\n  */\nvar _populateDataProviders = function( declViewModelJson, declViewModel, subPanelContext ) {\n    var jsonData = declViewModelJson;\n    var promises = [];\n    const dataProviderActions = [\n        'action',\n        'initializeAction',\n        'nextAction',\n        'previousAction',\n        'focusAction',\n        'expandAction',\n        'validateAction',\n        'filterFacetAction',\n        'preferredChoicesAction'\n    ];\n\n    if( jsonData.dataProviders && !_.isEmpty( jsonData.dataProviders ) ) {\n        if( !declViewModel.dataProviders ) {\n            declViewModel.dataProviders = {};\n        }\n\n        let dataProvidersClone = _.cloneDeep( jsonData.dataProviders );\n        let mockedDataProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.dataProviders;\n        exports.initViewModel( dataProvidersClone, subPanelContext );\n        // Short term fix to support editSupportParamKeys on subPanelContext.provider\n        // Long term approach is to have this information directly on subPanelContext\n        // This will be cleaned up with the tech debt story for cleanup of AwStandardPrimaryWorkarea\n        let editSupportParamKeys;\n        if( subPanelContext ) {\n            if( subPanelContext.editSupportParamKeys ) {\n                editSupportParamKeys = subPanelContext.editSupportParamKeys;\n            } else if( subPanelContext.provider && subPanelContext.provider.editSupportParamKeys ) {\n                editSupportParamKeys = subPanelContext.provider.editSupportParamKeys;\n            } else {\n                editSupportParamKeys = subPanelContext.selectionQueryParamKey && [ subPanelContext.selectionQueryParamKey ];\n            }\n        }\n        let index = 0;\n        _.forEach( dataProvidersClone, ( jsonDataProvider, dpName ) => {\n            let resolvedLOVConfig = jsonDataProvider.lovConfiguration;\n            // TcLOV is a data-provider property.\n            // If we declare any data-provider as TCLOV it would start using the standard SOA calls available for teamcenter\n            // to populate and validate LOV i.e getInitialLOVVAlue, getNextLOVValue and ValidateLOV.\n            // It can be used with any data-provider which is used with widgets like i.e aw-link-with-popup, aw-widget.\n            // User has option to supply its own parameters (VMO and ViewModel Prop) through \"lovConfiguration\" setting defined in the LOV dataprovider.\n            // Imp: If the dataprovider has action defined then data-provider type \"tcLOV\" setting is ignored.\n            let isTcLOV = !( jsonDataProvider.action || jsonDataProvider.initializeAction ) && jsonDataProvider.dataProviderType === 'TcLOV';\n            if( isTcLOV ) {\n                const lovDataProviderJSON = _.cloneDeep( cfgSvc.getCfgCached( 'lovDataProvider' ) );\n                _.forEach( dataProviderActions, actionName => {\n                    const actName = lovDataProviderJSON.dataProviders.tcDataprovider[ actionName ];\n                    if( actName ) {\n                        // A new action Name, which shouldn't conflict with exiting action name.\n                        let newActionName = actName + '_tcLOV_' + index;\n                        jsonDataProvider[ actionName ] = newActionName;\n                        jsonData.actions[ newActionName ] = lovDataProviderJSON.actions[ actName ];\n                        jsonData.actions[ newActionName ].inputData.dataProviderName = dpName;\n                    }\n                } );\n                jsonDataProvider.response = lovDataProviderJSON.dataProviders.tcDataprovider.response;\n                jsonDataProvider.moreValuesExist = lovDataProviderJSON.dataProviders.tcDataprovider.moreValuesExist;\n                // Reverting back the lovConfiguration to the pristine state, as it would be evaluated multiple times\n                // in declDataProviderService. If we store the evaluated lovConfiguration further evaluations becomes\n                // very costly and might run into a infinite loop.\n                jsonDataProvider.lovConfiguration = _.cloneDeep( declViewModelJson.dataProviders[ dpName ].lovConfiguration );\n            }\n            index++;\n            var actionMap = {};\n\n            if( mockedDataProvider && mockedDataProvider[ dpName ] ) {\n                jsonDataProvider = mockedDataProvider[ dpName ];\n            }\n            _.forEach( dataProviderActions, actionName => {\n                _processAction( jsonData, jsonDataProvider, dpName, actionName, actionMap );\n            } );\n            /**\n              * Create the DeclDataProvider based on the JSON data.\n              */\n            declViewModel.dataProviders[ dpName ] = dataProviderFactory.createDataProvider( jsonDataProvider, actionMap.action, dpName, declDataProviderSvc, actionMap );\n            declViewModel.dataProviders[ dpName ].origJson = jsonData.dataProviders[ dpName ];\n            declViewModel.dataProviders[ dpName ].inputDataExpressions = getInputDataExpression( jsonData.dataProviders[ dpName ].inputData );\n            if( isTcLOV ) {\n                declViewModel.dataProviders[ dpName ].resolvedLovConfig = resolvedLOVConfig;\n            }\n\n            if( jsonDataProvider.uidInResponse ) {\n                declViewModel.dataProviders[ dpName ].uidInResponse = jsonDataProvider.uidInResponse;\n            }\n\n            if( !declUtils.isNil( jsonDataProvider.preSelection ) ) {\n                declViewModel.dataProviders[ dpName ].preSelection = jsonDataProvider.preSelection;\n            } else {\n                declViewModel.dataProviders[ dpName ].preSelection = true;\n            }\n\n            if( declViewModel.objectSetSource && declViewModel.objectSetSource[ dpName ] ) {\n                declViewModel.dataProviders[ dpName ]\n                    .setValidSourceTypes( declViewModel.objectSetSource[ dpName ] );\n            }\n            if( editSupportParamKeys ) {\n                if( !jsonDataProvider.inputData ) {\n                    jsonDataProvider.inputData = {};\n                }\n                if( !jsonDataProvider.inputData.editSupportParamKeys ) {\n                    jsonDataProvider.inputData.editSupportParamKeys = editSupportParamKeys;\n                    declViewModel.dataProviders[ dpName ].editSupportParamKeys = editSupportParamKeys;\n                }\n            }\n            /**\n              * Process cell commands\n              */\n            if( jsonDataProvider.commands ) {\n                declViewModel.dataProviders[ dpName ].commands = [];\n\n                _.forEach( jsonDataProvider.commands, function( command, cmdId ) {\n                    if( jsonDataProvider.commandsAnchor ) {\n                        logger.error( 'Commands in dataProviders are not supported when using commandsAnchor.' + '\\n' +\n                             'cmdId=' + cmdId + '\\n' +\n                             'commandsAnchor=' + jsonDataProvider.commandsAnchor );\n                    } else {\n                        if( command.dependencies && command.dependencies.length > 0 ) {\n                            var cmdOverlay;\n                            var promise = loadDynModule( command.dependencies )\n                                .then(\n                                    function( handlers ) {\n                                        cmdOverlay = {\n                                            position: command.position,\n                                            displayOption: command.displayOption,\n                                            handler: handlers,\n                                            condition: command.condition\n                                        };\n\n                                        declViewModel.dataProviders[ dpName ].commands\n                                            .push( cmdOverlay );\n\n                                        return commandsSvc.getCommand( cmdId );\n                                    } ).then(\n                                    function( commandOverlay ) {\n                                        /**\n                                          * Update the icon and title once the command overlay is\n                                          * returned\n                                          */\n                                        if( commandOverlay ) {\n                                            cmdOverlay.iconId = commandOverlay.iconId || command.id;\n                                            cmdOverlay.title = commandOverlay.title || command.title;\n                                        }\n                                        return cmdOverlay; // Include return to assure async\n                                    } );\n\n                            promises.push( promise );\n                        } else if( command.action ) {\n                            command.iconId = command.id;\n                            declViewModel.dataProviders[ dpName ].commands.push( command );\n                        }\n                    }\n                } );\n            }\n\n            if( jsonDataProvider.editContext ) {\n                declViewModel.dataProviders[ dpName ].editContext = jsonDataProvider.editContext;\n            }\n        } );\n    }\n\n    // return AwPromiseService.instance.all( promises ).then( function() {\n    return declViewModel;\n    // } );\n};\n\nvar sharedViewModelToken = 0;\n\n/**\n  * Token for tracking execution within the view model\n  */\nvar DeclViewModelToken = function() {\n    var activeActionCount = 0;\n\n    this.addAction = function( action ) {\n        tokenTrace( 'Action started', action );\n        activeActionCount++;\n        sharedViewModelToken++;\n    };\n\n    this.removeAction = function( action ) {\n        tokenTrace( 'Action completed', action );\n        activeActionCount--;\n        sharedViewModelToken = sharedViewModelToken <= 1 ? 0 : sharedViewModelToken - 1;\n    };\n\n    this.isActive = function() {\n        return activeActionCount !== 0;\n    };\n};\n\n/**\n  * Creates a new instance of this class.\n  *\n  * @class DeclViewModel\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  */\nvar DeclViewModel = function( declViewModelJson ) {\n    var vmSelf = this; // eslint-disable-line consistent-this\n\n    /**\n      * This object is used to hold properties and states that are not intended to be exposed to the\n      * 'dataCtxTree'.\n      */\n    vmSelf._internal = {\n\n        /**\n          * Token for tracking execution within the view model\n          */\n        token: new DeclViewModelToken(),\n\n        /**\n          * {Number} An increasing number assigned to this declViewModel when created and use to identify it\n          * (only for debug purposes).\n          */\n        modelId: -1,\n\n        /**\n          * {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n          */\n        panelId: 'undefined',\n\n        /**\n          * {String} The unique Id to identify the view\n          */\n        viewId: 'undefined',\n\n        /**\n          * {Boolean} TRUE if 'destroy' has been invoked on this instance.\n          */\n        isDestroyed: false,\n\n        /**\n          * {EventSubscriptionArray} Array of 'eventSubscriptions' currently registerd against this\n          * 'declViewModel'.\n          */\n        eventSubscriptions: [],\n\n        /**\n          * {SubPanelId2EventSubscriptionsMap} a map of <subPanelId,EventSubscriptions>.\n          */\n        subPanelId2EventSubscriptionsMap: {},\n\n        /**\n          * {DeclViewModelJson} The object returned from loading the JSON resource for this 'declViewModel'.\n          */\n        origDeclViewModelJson: null,\n\n        /**\n          * {Object} A map of a 'conditionName' property to its current true/false state.\n          */\n        conditionStates: {},\n\n        /**\n          * {Object} A map of a 'conditionExpressions' property to its current vaule.\n          */\n        conditionExpressions: {},\n\n        /**\n          * Ref to: conditions\n          */\n        conditions: null,\n\n        /**\n          * Ref to: jasonData.actions\n          */\n        actions: null,\n\n        /**\n          * Ref to: jasonData.dataParseDefinitions\n          */\n        dataParseDefinitions: null,\n\n        /**\n          * Ref to: jasonData.functions\n          */\n        functions: null,\n\n        /**\n          * Ref to: jasonData.messages\n          */\n        messages: null,\n\n        /**\n          * Ref to: jasonData.onEvent\n          */\n        onEvent: null,\n\n        /**\n          * Ref to: jasonData.onEvent\n          */\n        grids: null,\n\n        /**\n          * Ref to: jasonData.onEvent\n          */\n        chartProviders: null,\n\n        /**\n          * {StringArray} The array of sub-panel IDs that have been 'merged' into this 'target' 'declViewModel'.\n          */\n        subPanels: null,\n\n        /**\n          * {ObjectArray} An array of data objects that specify the propertyValue/propertyPath of all non-action\n          * properties in the original declViewModel JSON definition that are 'data bound' to any changes in the\n          * appContext state (e.g. propValue = {{ctx.selected}}, etc.).\n          */\n        declViewModelJsonBoundProps: null,\n\n        /**\n          * {ObjectMap} Map of appContext changes that have been collected since this declViewModel was created\n          * or after the last 'update debound' was processed.\n          */\n        pendingContextChanges: null,\n\n        /**\n          * edit configuration map. This holds the configuration for start/cancel/save edit actions\n          */\n        editConfig: null,\n\n        /**\n          * ports for sync strategy\n          */\n        ports: null,\n\n        /**\n          * Edit handlers\n          */\n        editHandlers: null,\n\n        /**\n          * This function will be called then the 'dataCtxNode' ( aka '$scope' ) this 'declViewModel'\n          * is placed on is destroyed.\n          *\n          * @param {Boolean} destroyDataProviders - TRUE if all associated dataProviders should have their 'destroy' method called.\n          */\n        destroy: function( destroyDataProviders ) {\n            vmSelf._internal.isDestroyed = true;\n            // Any active actions or messages are going to be cut off, force clear out token\n            while( vmSelf._internal.token.isActive() ) {\n                vmSelf._internal.token.removeAction( null );\n            }\n\n            declModelRegistrySvc.unregisterModel( 'DeclViewModel', vmSelf, '_internal.panelId',\n                '_internal.modelId' );\n\n            _.forEach( this.eventSubscriptions, function( subDef ) {\n                eventBus.unsubscribe( subDef );\n            } );\n\n            _.forEach( this.subPanelId2EventSubscriptionsMap, function( subDefs ) {\n                _.forEach( subDefs, function( subDef ) {\n                    eventBus.unsubscribe( subDef );\n                } );\n            } );\n\n            this.eventSubscriptions = [];\n            this.subPanelId2EventSubscriptionsMap = {};\n\n            /**\n              * Stop debounce for ctx change events.\n              */\n            if( vmSelf._internal.pingUpdateViewModel && vmSelf._internal.pingUpdateViewModel.cancel ) {\n                vmSelf._internal.pingUpdateViewModel.cancel();\n                vmSelf._internal.pingUpdateViewModel = null;\n            }\n\n            /**\n              * Clean up all dataProviders\n              */\n            if( destroyDataProviders ) {\n                _.forEach( vmSelf.dataProviders, function( uwDataProvider, dpName ) {\n                    uwDataProvider.destroy();\n                    vmSelf.dataProviders[ dpName ] = null;\n                } );\n\n                _.forEach( vmSelf.grids, function( currentGrid ) {\n                    if( currentGrid.columnProviderInstance ) {\n                        currentGrid.columnProviderInstance.destroy();\n                        currentGrid.columnProviderInstance = null;\n                    }\n                } );\n            }\n\n            /**\n              * Clean up all subPanels\n              */\n            _.forEach( vmSelf._internal.subPanels, function( subPanel ) {\n                declModelRegistrySvc.unregisterModel( 'SubPanel', subPanel, 'panelId', 'id' );\n            } );\n\n            vmSelf._internal.subPanels = null;\n            vmSelf._internal.declViewModelJsonBoundProps = null;\n            vmSelf._internal.pendingContextChanges = null;\n\n            /**\n              * Clean up edit config\n              */\n            if( vmSelf._internal.editConfig ) {\n                editUtilsService._removeListeners( vmSelf._internal.editConfig.sourceModel );\n            }\n            vmSelf._internal.editConfig = null;\n\n            /**\n              * Clean up edit handler\n              */\n            if( vmSelf._internal.editContext ) {\n                editHandlerService.removeEditHandler( vmSelf._internal.editContext );\n            }\n\n            /**\n              * Clean up references to external resources\n              */\n            vmSelf._internal.origCtxNode = null;\n            vmSelf.vmo = null;\n            vmSelf.objects = null;\n        },\n\n        /**\n          * Based on the value of the 'skipClone' property of the given JSON object, clone a copy of the given\n          * JSON object (if necessary) and save it in a local property.\n          *\n          * @param {DeclViewModelJson} declViewModelJsonIn - The object returned from loading the JSON resource for\n          *            this 'declViewModel'.\n          */\n        setViewModelJson: function( declViewModelJsonIn ) {\n            vmSelf._internal.origDeclViewModelJson = declViewModelJsonIn;\n\n            if( declViewModelJsonIn._viewModelId ) {\n                vmSelf._internal.panelId = declViewModelJsonIn._viewModelId;\n            } else {\n                /**\n                  * revisitme\n                  * logger.error( 'setViewModelJson: No panelId given' );\n                  */\n            }\n\n            if( declViewModelJsonIn._uniqueViewModelId ) {\n                vmSelf._internal.viewId = declViewModelJsonIn._uniqueViewModelId;\n            }\n        },\n\n        /**\n          * Set all the properties in this object to all the valid corresponding properties in the given\n          * 'jsonData' object.\n          *\n          * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n          *            JSON resource for this 'declViewModel'.\n          */\n        setJsonData: function( jsonData ) {\n            if( jsonData.actions ) {\n                /**\n                  * Note: For debug purposes ONLY...Include the name of the action in the action object as the\n                  * 'actionId' property.\n                  */\n                _.forEach( jsonData.actions, function( value, name ) {\n                    value.actionId = name;\n                } );\n\n                vmSelf._internal.actions = jsonData.actions;\n            }\n\n            if( jsonData.conditions ) {\n                vmSelf._internal.conditions = jsonData.conditions;\n            }\n\n            if( jsonData.ports ) {\n                vmSelf._internal.ports = jsonData.ports;\n            }\n\n            if( jsonData.dataParseDefinitions ) {\n                vmSelf._internal.dataParseDefinitions = jsonData.dataParseDefinitions;\n            }\n\n            if( jsonData.functions ) {\n                vmSelf._internal.functions = jsonData.functions;\n            }\n\n            if( jsonData.messages ) {\n                vmSelf._internal.messages = jsonData.messages;\n            }\n\n            if( jsonData.onEvent ) {\n                vmSelf._internal.onEvent = jsonData.onEvent;\n            }\n\n            if( jsonData.grids ) {\n                vmSelf._internal.grids = jsonData.grids;\n            }\n\n            if( jsonData.chartProviders ) {\n                vmSelf._internal.chartProviders = jsonData.chartProviders;\n            }\n\n            if( jsonData.editConfig ) {\n                vmSelf._internal.editConfig = jsonData.editConfig;\n            }\n\n            if( jsonData.lifecycleHooks ) {\n                vmSelf._internal.lifecycleHooks = jsonData.lifecycleHooks;\n            }\n\n            if( jsonData.editContext ) {\n                vmSelf._internal.editContext = jsonData.editContext;\n            }\n\n            if( jsonData.selectionModels ) {\n                vmSelf._internal.selectionModels = jsonData.selectionModels;\n            }\n\n            if( jsonData.editHandlers ) {\n                vmSelf._internal.editHandlers = jsonData.editHandlers;\n            }\n        },\n        /**\n          * Consolidate (i.e. merge) all the properties in this object to all the valid corresponding properties\n          * in the given 'jsonData' object.\n          *\n          * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n          *            JSON resource for this 'declViewModel'.\n          */\n        consolidateJsonData: function( jsonData ) {\n            vmSelf._internal.actions = declUtils\n                .consolidateObjects( vmSelf._internal.actions, jsonData.actions );\n\n            vmSelf._internal.dataParseDefinitions = declUtils.consolidateObjects(\n                vmSelf._internal.dataParseDefinitions, jsonData.dataParseDefinitions );\n\n            vmSelf._internal.conditions = declUtils.consolidateObjects( vmSelf._internal.conditions,\n                jsonData.conditions );\n\n            vmSelf._internal.functions = declUtils.consolidateObjects( vmSelf._internal.functions,\n                jsonData.functions );\n\n            vmSelf._internal.messages = declUtils.consolidateObjects( vmSelf._internal.messages,\n                jsonData.messages );\n\n            vmSelf._internal.onEvent = declUtils\n                .consolidateObjects( vmSelf._internal.onEvent, jsonData.onEvent );\n\n            vmSelf._internal.grids = declUtils.consolidateObjects( vmSelf._internal.grids, jsonData.grids );\n\n            vmSelf._internal.chartProviders = declUtils.consolidateObjects( vmSelf._internal.chartProviders, jsonData.chartProviders );\n\n            vmSelf._internal.editConfig = declUtils.consolidateObjects( vmSelf._internal.editConfig, jsonData.editConfig );\n\n            if( jsonData.ports ) {\n                vmSelf._internal.ports = declUtils.consolidateObjects( vmSelf._internal.ports, jsonData.ports );\n            }\n\n            vmSelf._internal.lifecycleHooks = declUtils.consolidateObjects( vmSelf._internal.lifecycleHooks, jsonData.lifecycleHooks );\n\n            if( jsonData.selectionModels ) {\n                vmSelf._internal.selectionModels = declUtils.consolidateObjects( vmSelf._internal.selectionModels, jsonData.selectionModels );\n            }\n        }\n    };\n\n    /**\n      * ----------------------------------------------------<br>\n      * Define public API <BR>\n      * ----------------------------------------------------<br>\n      */\n    /**\n      * Override the default implementation to return more helpful information.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} Text used to identify the ID of the DeclViewModel (e.g. 'modelId' + an optional 'url').\n      */\n    vmSelf.toString = function() {\n        if( vmSelf.getPanelId() ) {\n            return vmSelf._internal.modelId + '  modelName: ' + vmSelf.getPanelId();\n        }\n\n        return vmSelf._internal.modelId + '  modelName: ' + '???';\n    };\n\n    /**\n      * Get the tracking token for the view model\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {DeclViewModelToken} token\n      */\n    vmSelf.getToken = function() {\n        return vmSelf._internal.token;\n    };\n\n    /**\n      * Get ID/Name of this declViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n      */\n    vmSelf.getPanelId = function() {\n        return vmSelf._internal.panelId;\n    };\n\n    /**\n      * Get ID of this declViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} The ID used for unique with aw-include\n      */\n    vmSelf.getViewId = function() {\n        return vmSelf._internal.viewId;\n    };\n\n    /**\n      * Get DeclAction with the given ID.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} actionId - The ID of the DeclAction to return.\n      * @return {DeclAction} The DeclAction with the given ID (or FALSEY if not found);\n      */\n    vmSelf.getAction = function( actionId ) {\n        return vmSelf._internal.actions[ actionId ];\n    };\n\n    /**\n      * Get port's obj with the given name.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} portName - The name of the port.\n      * @return {Object} The port's sync object and action.\n      */\n    vmSelf.getPortById = function( portName ) {\n        return vmSelf._internal.ports[ portName ];\n    };\n\n    /**\n      * Get the DataParseDefinition in the DeclViewModel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @param {String} id - The ID of the DataParseDefinition to return.\n      * @return {Object} The dataParseDefinition\n      */\n    vmSelf.getDataParseDefinition = function( id ) {\n        return vmSelf._internal.dataParseDefinitions[ id ];\n    };\n\n    /**\n      * Get the functions in the DeclViewModel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The functions\n      */\n    vmSelf.getFunctions = function() {\n        return vmSelf._internal.functions;\n    };\n\n    /**\n      * Get array of any subPanels defined.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {ObjectArray} The array of sub-panel that have been 'merged' into this 'target' 'declViewModel'\n      *         (or NULL if no panels have been added).\n      */\n    vmSelf.getSubPanels = function() {\n        return vmSelf._internal.subPanels;\n    };\n\n    /**\n      * Get sub panel of the given panel ID\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      * @return {Object} The sub-panel state object\n      */\n    vmSelf.getSubPanel = function( subPanelId ) {\n        return _.find( vmSelf._internal.subPanels, {\n            panelId: subPanelId\n        } );\n    };\n\n    /**\n      * Gets the edit configuration object\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {Object} The edit configuration object\n      */\n    vmSelf.getEditConfiguration = function() {\n        return vmSelf._internal.editConfig;\n    };\n\n    /**\n      * Get lifecycle hooks\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The lifecycle hooks\n      */\n    vmSelf.getLifecycleHooks = function() {\n        return vmSelf._internal.lifecycleHooks;\n    };\n\n    /**\n      * Get selection models\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The selection models\n      */\n    vmSelf.getSelectionModels = function() {\n        return vmSelf._internal.selectionModels;\n    };\n\n    /**\n      * Add a sub-panel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel that has been 'merged' into this 'target'\n      *            'declViewModel'.\n      */\n    vmSelf.addSubPanel = function( subPanelId ) {\n        if( !vmSelf._internal.subPanels ) {\n            vmSelf._internal.subPanels = [];\n        }\n\n        // remove the old panel with the input ID if exist\n        if( vmSelf.getSubPanel( subPanelId ) ) {\n            vmSelf.removeSubPanel( subPanelId );\n        }\n\n        var subPanel = {\n            panelId: subPanelId,\n            contextChanged: false\n        };\n\n        if( logger.isDeclarativeLogEnabled() ) {\n            logger.declarativeLog( 'DECLARATIVE TRACE - Add Subpanel ' + subPanelId );\n        }\n\n        declModelRegistrySvc.registerModel( 'SubPanel', subPanel, 'panelId', 'id' );\n\n        vmSelf._internal.subPanels.push( subPanel );\n    };\n\n    /**\n      * Remove specified sub panel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      */\n    vmSelf.removeSubPanel = function( subPanelId ) {\n        if( logger.isDeclarativeLogEnabled() ) {\n            logger.declarativeLog( 'DECLARATIVE TRACE - Remove Subpanel ' + subPanelId );\n        }\n\n        // un-subscribe events for the sub-panel\n        var subscriptions = vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ];\n\n        _.forEach( subscriptions, function( subDef ) {\n            eventBus.unsubscribe( subDef );\n        } );\n\n        delete vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ];\n\n        _.remove( vmSelf._internal.subPanels, function( subPanel ) {\n            if( subPanel.panelId === subPanelId ) {\n                declModelRegistrySvc.unregisterModel( 'SubPanel', subPanel, 'panelId', 'id' );\n\n                return true;\n            }\n\n            return false;\n        } );\n    };\n\n    /**\n      * Add the given event subscription to the collection of event subscriptions for a given subPanel ID.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      * @param {Object} subDef - The event subscription to add\n      */\n    vmSelf.addSubPanelEventSubscription = function( subPanelId, subDef ) {\n        var subDefs = vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ];\n\n        if( !subDefs ) {\n            subDefs = [];\n\n            vmSelf._internal.subPanelId2EventSubscriptionsMap[ subPanelId ] = subDefs;\n        }\n\n        subDefs.push( subDef );\n    };\n\n    /**\n      * ----------------------------------------------------<br>\n      * ----------------------------------------------------<br>\n      */\n\n    /**\n      * Get current condition states map.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} A map of a 'conditionName' property to its current true/false state.\n      */\n    vmSelf.getConditionStates = function() {\n        if( vmSelf._internal.conditionStates ) {\n            return vmSelf._internal.conditionStates;\n        }\n\n        return {};\n    };\n\n    /**\n      * This method subscribes CDM update/modify event in declViewModelObject and also register corresponding\n      * handler to that.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      */\n    vmSelf.attachEvents = function() {\n        var handler = function( data ) {\n            var objs = data.updatedObjects;\n            if( !objs ) {\n                objs = data.modifiedObjects;\n            }\n\n            var operationName = null;\n            if( vmSelf && vmSelf.vmo ) {\n                operationName = vmSelf.vmo.operationName;\n            }\n\n            _.forEach( objs, function( object ) {\n                if( object && vmSelf.objects ) {\n                    const newVmo = viewModelObjectSrv.createViewModelObject( object.uid, operationName );\n                    viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject( newVmo,\n                        vmSelf.objects );\n                }\n            } );\n        };\n\n        var cdmUpdateEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.updated' ];\n        if( !cdmUpdateEventDef ) {\n            vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.updated' ] = [ eventBus.subscribe(\n                'cdm.updated', handler ) ];\n        }\n        var cdmModifiedEventDef = vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.modified' ];\n        if( !cdmModifiedEventDef ) {\n            vmSelf._internal.subPanelId2EventSubscriptionsMap[ 'cdm.modified' ] = [ eventBus.subscribe(\n                'cdm.modified', handler ) ];\n        }\n    };\n\n    /**\n      * Attach a model object to this DeclViewModel. All the properties of the model object will be consolidated\n      * to DeclViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} uid - The UID of model object to attach\n      * @param {String} operationName - The operation being performed on model object\n      * @param {String} owningObjUid - The UID of owning object\n      * @param {Object} serverVMO - The VMO which was returned from the server.\n      *\n      * @returns {ViewModelObject} The object created to wrap the IModelObject specified by the given model information.\n      */\n    vmSelf.attachModelObject = function( uid, operationName, owningObjUid, serverVMO ) {\n        if( uid ) {\n            // Build the vmo.\n            var vmo = viewModelObjectSrv.createViewModelObject( uid, operationName, owningObjUid, serverVMO );\n            if( vmo ) {\n                vmo.operationName = operationName;\n                vmSelf.attachEvents();\n\n                // Update the underlying object properties.\n                if( vmo.type === 'Awp0XRTObjectSetRow' ) {\n                    // Get underlying target object's UID if 'awp0Target' property exists\n                    if( vmo.props && vmo.props.awp0Target ) {\n                        var targetUID = vmo.props.awp0Target.dbValue;\n                        var targetMO = clientDataModel.getObject( targetUID );\n                        if( targetMO ) {\n                            var targetVMO = viewModelObjectSrv.constructViewModelObjectFromModelObject( targetMO, operationName, null, null, true );\n                            var props = targetVMO.props;\n                            _.forEach( props, function( prop ) {\n                                if( prop && !vmo.props.hasOwnProperty( prop.propertyName ) ) {\n                                    if( prop.intermediateObjectUids ) {\n                                        prop.intermediateObjectUids.push( targetUID );\n                                    } else {\n                                        prop.intermediateObjectUids = [ targetUID ];\n                                    }\n                                    vmo.props[ prop.propertyName ] = prop;\n                                }\n                            } );\n                        }\n                    }\n                }\n            }\n\n            return vmo;\n        }\n        return undefined;\n    };\n\n    // ======================== Edit Handler Interface ===================================================//\n\n    if( !vmSelf._internal.eventTopicEditInProgress ) {\n        vmSelf._internal.eventTopicEditInProgress = declViewModelJson && declViewModelJson._viewModelId ?\n            declViewModelJson._viewModelId + '_editInProgress' : '_editInProgress';\n    }\n    /**\n      * @param {*} dvmSelf declViewModel instance\n      * @param {*} isEnabled true/false\n      */\n    var setSelectionEnabled = function( dvmSelf, isEnabled ) {\n        var dataProviders = dvmSelf.dataProviders;\n        _.forOwn( dataProviders, function( dataProvider ) {\n            dataProvider.setSelectionEnabled( isEnabled );\n        } );\n    };\n    /**\n      * @param {*} stateName edit handler state name\n      * @param {*} dvmSelf declViewModel itself\n      */\n    var _notifyEditStateChange = function( stateName, dvmSelf ) {\n        dvmSelf._editingState = stateName;\n        dvmSelf._editing = stateName === 'starting';\n\n        setSelectionEnabled( dvmSelf, dvmSelf._editing );\n\n        // Add to the appCtx about the editing state\n        appCtxSvc.updateCtx( dvmSelf._internal.eventTopicEditInProgress, dvmSelf._editing );\n\n        eventBus.publish( dvmSelf._internal.eventTopicEditInProgress, vmSelf._editing );\n    };\n\n    // Revisitme - This should ideally be done inside destroy. Commenting it out till we get a use case to fix it properly.\n    // appCtxSvc.unRegisterCtx( vmSelf._internal.eventTopicEditInProgress );\n\n    /**\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @param {*} dvmSelf declViewModel instance\n      * @returns {*} viewModelCollection view model collection as array\n      */\n    var collectViewModelObjects = function( dvmSelf ) {\n        var dataProviders = dvmSelf.dataProviders;\n        var viewModelCollection = [];\n        _.forOwn( dataProviders, function( dataProvider ) {\n            viewModelCollection = viewModelCollection.concat( dataProvider.viewModelCollection.getLoadedViewModelObjects() );\n        } );\n        return viewModelCollection;\n    };\n\n    /**\n      * isDirty implementation of edit-handler interface\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.isDirty = function() {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        return editUtilsService._isDirty( viewModelCollection );\n    };\n\n    /**\n      *This function implements the start edit function edit handler interface\n      *@memberof viewModelProcessingFactory.DeclViewModel\n      *@param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n      *@returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.startEdit = function( editOptions ) {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        var editConfig = vmSelf.getEditConfiguration();\n        editConfig.sourceModel = vmSelf.getViewId();\n        var dataCtxNode = {\n            data: vmSelf,\n            ctx: appCtxSvc.ctx\n        };\n        const saveEditStateChangeCallback = function() {\n            _notifyEditStateChange( 'saved', vmSelf );\n        };\n        return editUtilsService._startEdit( dataCtxNode, vmSelf, viewModelCollection, editConfig, saveEditStateChangeCallback, editOptions ).then( function() {\n            if( !editOptions ) {\n                _notifyEditStateChange( 'starting', vmSelf );\n            }\n        } );\n    };\n\n    /**\n      * This is the cancel edits implementation of edit-handler interface.\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.cancelEdits = function() {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        var dataCtxNode = {\n            data: vmSelf,\n            ctx: appCtxSvc.ctx\n        };\n        var editConfig = vmSelf.getEditConfiguration();\n        return editUtilsService._cancelEdits( dataCtxNode, vmSelf, viewModelCollection, editConfig ).then( function() {\n            _notifyEditStateChange( 'canceling', vmSelf );\n        } );\n    };\n\n    /**\n      * This function implements the save edits function edit handler interface\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */\n    vmSelf.saveEdits = function() {\n        var viewModelCollection = collectViewModelObjects( vmSelf );\n        var editConfig = vmSelf.getEditConfiguration();\n        var dataCtxNode = {\n            data: vmSelf,\n            ctx: appCtxSvc.ctx\n        };\n        return editUtilsService._saveEdits( dataCtxNode, vmSelf, viewModelCollection, editConfig ).then( function() {\n            _notifyEditStateChange( 'saved', vmSelf );\n        } );\n    };\n\n    /**\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {*} boolean\n      */\n    vmSelf.editInProgress = function() {\n        return vmSelf._editing;\n    };\n\n    // ======================== End of Edit Handler Interface ===================================================//\n\n    /**\n      * Check if this 'declViewModel' is 'destroyed' and should not be used.\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {Boolean} TRUE if this DeclViewModel has had it's 'destroy' method called and should no longer be\n      *         used or accessed for any purpose.\n      */\n    vmSelf.isDestroyed = function() {\n        return vmSelf._internal.isDestroyed;\n    };\n\n    /**\n      * ---------------------------------------------------------------------------<BR>\n      * Property & Function definition complete....Finish initialization. <BR>\n      * ---------------------------------------------------------------------------<BR>\n      */\n    if( declViewModelJson ) {\n        vmSelf._internal.setJsonData( declViewModelJson );\n        vmSelf._internal.setViewModelJson( declViewModelJson );\n    }\n\n    declModelRegistrySvc.registerModel( 'DeclViewModel', vmSelf, '_internal.panelId', '_internal.modelId' );\n}; // DeclViewModel\n\n/**\n  * Update the property in the 'target' object with the same value as the 'source' object based on the given\n  * 'path' to that property.\n  * <P>\n  * Note: This function handles the 'special' property names used in the 'attrHolder' object used by the\n  * 'modelPropertyService' during the initial property creation.\n  *\n  * @param {String} dataPath - The path to the property in the original 'declViewModelJson' 'data' object used as\n  *            the basis of the property in the 'source' & 'target' to be updated.\n  *\n  * @param {ViewModelObject} sourceObject - The 'source' object of the value to apply.\n  *\n  * @param {ViewModelObject} targetObject - The 'target' object the value will be applies to.\n  *\n  * @return {Boolean} TRUE if the updated value requires i18n processing.\n  */\nexport let updateDataProperty = function( dataPath, sourceObject, targetObject ) {\n    /**\n      * Check if it is a 'special' name that should use the mapped property name.\n      */\n    var lastDotNdx = dataPath.lastIndexOf( '.' );\n\n    var leafPropName = dataPath.substring( lastDotNdx + 1 );\n\n    if( declUtils.attrHolderPropName.indexOf( leafPropName ) > -1 ) {\n        var parentPath = dataPath.substring( 0, lastDotNdx );\n\n        modelPropertySvc.updateProperty( parentPath, leafPropName, sourceObject, targetObject );\n\n        return false;\n    }\n\n    var newValue = _.get( sourceObject, dataPath );\n\n    _.set( targetObject, dataPath, newValue );\n\n    return _.isString( newValue ) && /^{{i18n\\./.test( newValue ) || _.isObject( newValue ) && /^{{i18n\\./.test( newValue.text );\n};\n\n/**\n  * Return a new instance of a {DeclVideModel} initialized based on the given information.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  *\n  * @return {DeclViewModel} A newly created DeclViewModel object with all properties set to their default values\n  *         other than those set via any given JSON object..\n  */\nexport let createDeclViewModel = function( declViewModelJson ) {\n    return new DeclViewModel( declViewModelJson );\n};\n\n/**\n  * Resolve value of ctx and subPanelContext\n  * @param {String} propValue - Prop Value like {{ctx.title}} or {{subPanelContext.title}}.\n  * @param {String} propName - Prop name of element.\n  * @param {Object} dataObj - data object which will have ctx obj or subcontext.\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  */\nfunction resolvePropValue( propValue, propName, dataObj, parentJsonObject ) {\n    var newVal = parsingUtils.getStringBetweenDoubleMustaches( propValue );\n    var val = _.get( dataObj, newVal );\n    if( val ) {\n        parentJsonObject[ propName ] = val;\n    } else {\n        val = AwInterpolateService.instance( propValue )( dataObj );\n        if( val ) {\n            parentJsonObject[ propName ] = val;\n        } else {\n            parentJsonObject[ propName ] = '';\n        }\n    }\n}\n\n/**\n  * Recursively initialize the property values of the given JSON data object with the current value of any bound\n  * appContext properties (bound via {{ctx.*}}).\n  * <P>\n  * Note: While on the 'exports' object, this API is only meant for internal/testing use.\n  *\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  */\nexport let initViewModel = function( parentJsonObject, subPanelContext, props ) {\n    _.forEach( parentJsonObject, function( propValue, propName ) {\n        // Check if starts with '{{ctx.' and ends with '}}'\n        if( _.isString( propValue ) && /^{{ctx\\..*}}$/.test( propValue ) ) {\n            resolvePropValue( propValue, propName, appCtxSvc, parentJsonObject );\n        } else if( _.isString( propValue ) && /^{{subPanelContext\\..*}}$/.test( propValue ) ) {\n            // Check if starts with '{{subPanelContext.' and ends with '}}'\n            resolvePropValue( propValue, propName, { subPanelContext: subPanelContext }, parentJsonObject );\n        } else if( _.isString( propValue ) && /^{{props\\..*}}$/.test( propValue ) && props ) {\n            // Check if starts with '{{props.' and ends with '}}'\n            resolvePropValue( propValue, propName, { props: props }, parentJsonObject );\n        } else if( _.isObject( propValue ) ) {\n            exports.initViewModel( propValue, subPanelContext, props );\n        }\n    } );\n};\n\n/**\n  * Sanitize String properties of viewModelProperty.\n  *\n  * @param {Object} viewModelProperty - Object to check.\n  *\n  * @return {ViewModelProperty} sanitized viewModelProperty.\n  */\nfunction _sanitize( viewModelProperty ) {\n    _.forOwn( viewModelProperty, function( value, key ) {\n        if( propertiesToSanitize[ key ] ) {\n            if( _.isString( value ) ) {\n                viewModelProperty[ key ] = sanitizer.sanitizeHtmlValue( value );\n            } else if( _.isArray( value ) ) {\n                viewModelProperty[ key ] = sanitizer.sanitizeHtmlValues( value );\n            }\n        }\n    } );\n\n    return viewModelProperty;\n}\n/**\n  * Process JSON data, create 'ViewModelProperty' object and fill in data for further processing.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise will be resolved with a new 'declViewModel' object populated with information\n  *         from the given 'declViewModelJson'.\n  */\nexport let processViewModel = function( declViewModelJson, subPanelContext, props ) {\n    var jsonData = declViewModelJson;\n\n    debugService.debug( 'lifeCycles', declViewModelJson._viewModelId, 'init' );\n\n    var newDeclViewModel = exports.createDeclViewModel( declViewModelJson );\n\n    /**\n      * Check if we have any 'data' objects we need to apply appContext to.\n      */\n    if( !_.isEmpty( jsonData.data ) ) {\n        /**\n          * Since 'initViewModel' changes the object given to it, make a clone now to leave the original JSON\n          * object untouched.\n          */\n        var dataClone = _.cloneDeep( jsonData.data );\n\n        exports.initViewModel( dataClone, subPanelContext, props );\n\n        /**\n          *\n          */\n        var compoundObjectMap = {};\n        var compoundViewModelObjectMap = {};\n\n        // If 'uid' is given in view model data, attach the model object to this DeclViewModel\n        if( dataClone.uid ) {\n            newDeclViewModel.vmo = newDeclViewModel.attachModelObject( dataClone.uid, dataClone.operationName,\n                dataClone.owningObjUid );\n            newDeclViewModel.uid = dataClone.uid;\n        }\n\n        _.forEach( dataClone, function( dataProp, propName ) { // eslint-disable-line complexity\n            /**\n              * We do not want model objects as declViewModelObjects, so do not allow this 'marker' property on\n              * the new object. This case was already handled above.\n              */\n            if( propName === 'uid' ) {\n                return;\n            }\n\n            /**\n              * Do not process properties beginning with underscore as view model properties.\n              */\n            if( _.startsWith( propName, '_' ) ) {\n                newDeclViewModel[ propName ] = dataProp;\n                return;\n            }\n\n            if( propName === 'objects' ) {\n                if( !newDeclViewModel.objects ) {\n                    newDeclViewModel.objects = {};\n                }\n\n                _.forEach( dataProp, function( dataPropValues, dataPropName ) {\n                    var vmos = [];\n                    dataPropValues.forEach( function( dataPropValue ) {\n                        var viewModelObject = newDeclViewModel.attachModelObject( dataPropValue.uid,\n                            dataClone.operationName, dataClone.owningObjUid, dataPropValue );\n\n                        if( dataPropValue.selected ) {\n                            newDeclViewModel.vmo = viewModelObject;\n                        }\n                        vmos.push( viewModelObject );\n                    } );\n\n                    // same uid may map to multiple vmo\n                    if( vmos.length > 1 ) {\n                        newDeclViewModel.objects[ dataPropName ] = vmos;\n                    } else {\n                        newDeclViewModel.objects[ dataPropName ] = vmos[ 0 ];\n                    }\n                } );\n\n                return;\n            }\n\n            /**\n              * Create a new viewModelProperty based on the JSON data's 'data' properties\n              */\n\n            let propAttrHolder = declUtils.buildPropHolder( dataProp );\n\n            // If this is not a view model prop, just save the object to the data.\n            if( _.isEmpty( propAttrHolder ) ) {\n                newDeclViewModel[ propName ] = dataProp;\n                return;\n            }\n\n            /**\n              * Make sure we have a 'propName' set.\n              */\n            if( !propAttrHolder.propName ) {\n                propAttrHolder.propName = propName;\n            }\n\n            // process compound property, like revision:item_revision_id\n            var isCompoundProp = false;\n\n            var vmProp = null;\n\n            if( propName.indexOf( _compoundPropNameDelimiter ) > 0 &&\n                 propAttrHolder.dbValue.indexOf( _compoundPropValueDelimiter ) > 0 ) {\n                var compoundProps = propAttrHolder.dbValue.split( _compoundPropValueDelimiter );\n\n                var objectRefProp = _.get( newDeclViewModel, compoundProps[ 0 ] );\n\n                if( objectRefProp.type === 'OBJECT' || objectRefProp.type === 'OBJECTARRAY' ) {\n                    isCompoundProp = true;\n\n                    var modelObject = null;\n                    var childFullPropertyName = '';\n                    var i = 0;\n\n                    for( i = 0; i < compoundProps.length - 1; i++ ) {\n                        if( i === 0 ) {\n                            modelObject = clientDataModel.getObject( objectRefProp.dbValues[ 0 ] );\n                        } else if( modelObject ) {\n                            childFullPropertyName += '__';\n                            objectRefProp = _.get( modelObject.props, compoundProps[ i ] );\n                            modelObject = clientDataModel.getObject( objectRefProp.dbValues[ 0 ] );\n                        }\n                        childFullPropertyName += compoundProps[ i ];\n\n                        if( !compoundObjectMap.hasOwnProperty( childFullPropertyName ) ) {\n                            _.set( compoundObjectMap, childFullPropertyName, modelObject );\n                        }\n                    }\n\n                    var compoundViewModelObject = _.get( compoundViewModelObjectMap, childFullPropertyName );\n\n                    if( !compoundViewModelObject && modelObject ) {\n                        compoundViewModelObject = viewModelObjectSrv.createViewModelObject( modelObject.uid,\n                            dataClone.operationName );\n                        _.set( compoundViewModelObjectMap, childFullPropertyName, compoundViewModelObject );\n                    }\n\n                    if( compoundViewModelObject ) {\n                        vmProp = _.get( compoundViewModelObject.props, compoundProps[ i ] );\n                        if( !vmProp ) {\n                            // skip this view model property when the compound property doesn't exist in referenced object\n                            return;\n                        }\n\n                        _.set( vmProp, 'intermediateCompoundObjects', compoundObjectMap );\n                    }\n                }\n            }\n\n            if( !vmProp ) {\n                vmProp = modelPropertySvc.createViewModelProperty( propAttrHolder );\n            }\n\n            // other properties\n            if( !isCompoundProp && !declUtils.isNil( dataProp.dbValue ) ) {\n                vmProp.dbValue = dataProp.dbValue;\n            }\n\n            if( dataProp.dataProvider ) {\n                // we have an lov, but the api is defined using the dataProvider\n                vmProp.dataProvider = dataProp.dataProvider;\n                // initialize lovApi here? we could if we had the prop scope...\n                // instead, postpone till first expand\n                vmProp.hasLov = true;\n                // allow empty LOV entry\n                vmProp.emptyLOVEntry = dataProp.emptyLOVEntry;\n            }\n\n            if( !declUtils.isNil( dataProp.uiValue ) ) {\n                vmProp.uiValue = dataProp.uiValue;\n            }\n\n            if( !declUtils.isNil( dataProp.propertyLabelDisplay ) ) {\n                vmProp.propertyLabelDisplay = dataProp.propertyLabelDisplay;\n            }\n\n            // attach method for accessing the viewModel\n            vmProp.getViewModel = function() {\n                return newDeclViewModel;\n            };\n\n            /* revisitme Shaishav\n             * Hint: Sanitization failes some examples. Need to investigate.\n             newDeclViewModel[ propName ] = _sanitize( vmProp );\n             */\n            newDeclViewModel[ propName ] = vmProp;\n        } );\n    }\n\n    if( jsonData.grids ) {\n        newDeclViewModel.grids = _.cloneDeep( jsonData.grids );\n        exports.initViewModel( newDeclViewModel.grids, subPanelContext );\n    }\n\n    if( jsonData.columnProviders ) {\n        newDeclViewModel.columnProviders = {};\n        var mockedColumnProvider = mockModeService.isMockModeActive() && jsonData.mock && jsonData.mock.columnProviders;\n        _.forEach(\n            jsonData.columnProviders,\n            function( jsonColumnProvider, cpName ) {\n                if( mockedColumnProvider && mockedColumnProvider[ cpName ] ) {\n                    jsonColumnProvider = mockedColumnProvider[ cpName ];\n                }\n                newDeclViewModel.columnProviders[ cpName ] = jsonColumnProvider;\n            } );\n    }\n\n    if( jsonData.chartProviders ) {\n        if( !newDeclViewModel.chartProviders ) {\n            newDeclViewModel.chartProviders = {};\n        }\n        newDeclViewModel.chartProviders = jsonData.chartProviders;\n        exports.initViewModel( newDeclViewModel.chartProviders, subPanelContext, props );\n\n        _.forEach( newDeclViewModel.chartProviders, function( jsonChartProvider, chartProviderName ) {\n            newDeclViewModel.chartProviders[ chartProviderName ].name = chartProviderName;\n        } );\n    }\n\n    if( jsonData.commands ) {\n        newDeclViewModel.commands = _.cloneDeep( jsonData.commands );\n\n        exports.initViewModel( newDeclViewModel.commands );\n    }\n\n    if( jsonData.commandHandlers ) {\n        newDeclViewModel.commandHandlers = jsonData.commandHandlers;\n    }\n\n    if( jsonData.commandPlacements ) {\n        newDeclViewModel.commandPlacements = jsonData.commandPlacements;\n    }\n\n    if( jsonData.objectSetSource ) {\n        newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n    }\n\n    if( jsonData.objectSetSource ) {\n        newDeclViewModel.objectSetSource = jsonData.objectSetSource;\n    }\n\n    if( jsonData.editContext ) {\n        /**\n             * revisitme\n             * editHandlerFactory is not ported yet\n\n                editHandlerService.setEditHandler( editHandlerFactory.createEditHandler( dataSourceService\n                    .createNewDataSource( {\n                        declViewModel: newDeclViewModel\n                    } ) ), jsonData.editContext );\n\n             */\n        // set this handler active\n        editHandlerService.setActiveEditHandlerContext( jsonData.editContext );\n    }\n\n    if( jsonData.editHandlers ) {\n        newDeclViewModel.editHandlers = jsonData.editHandlers;\n    }\n    return _populateDataProviders( declViewModelJson, newDeclViewModel, subPanelContext );\n};\n\n/**\n  * Update localization texts on the properties created based on data section\n  *\n  * @param {DeclViewModel} objectRoot - The 'declViewModel' to scan for possible I18n string replacements and the\n  *            model to apply those replacements to.\n  *\n  * @param {Object} i18nValueMap - Context to search the input string from.\n  *            <P>\n  *            Note: All property names in this object are possible to be used as string replacements. However,\n  *            most uses of this service will use 'i18n.' as the prefix in their text 'path'. Therefore, the\n  *            'i18n' property of this object is the most important property.\n  *\n  * @param {Number} level - Level in the recursive walk of the i18n properties.\n  *\n  * @param {StringMap} paramValues -\n  */\nexport let updateI18nTexts = function( objectRoot, i18nValueMap, level, paramValues ) {\n    _.forEach( objectRoot, function( propValue, propName ) {\n        /**\n          * Check if <BR>\n          * There is NO property value OR <BR>\n          * It is a property that is 'reserved' (scope, ctx, data) OR<BR>\n          * It is known to be invalid to traverse (propertyDescriptor*, props, modelType, etc.)\n          * <P>\n          * Note: We are doing this to avoid cyclic traversals and data known to not contains i18n bindings.\n          */\n        if( !propValue || propValue.propertyDescriptor ||\n             /^(scope|ctx|data|props|eventData|eventMap|propertyDescriptor(|s|sMaps)|modelType|_internal|\\$.*)$/.test( propName ) ||\n             _.isFunction( propValue ) || _.isNumber( propValue ) || _.isBoolean( propValue ) ||\n             level === 1 && propName === 'action' ) {\n            return true;\n        }\n\n        /**\n          * Skip binding to any '_internal' properties or those starting with '$' or those with 'null' values, or\n          * properties from a model object\n          */\n        if( _.isString( propValue ) ) {\n            if( /^{{i18n\\./.test( propValue ) ) {\n                var results = propValue.match( parsingUtils.REGEX_DATABINDING );\n\n                if( results && results.length === 4 ) {\n                    var textPath = results[ 2 ];\n\n                    var val = _.get( i18nValueMap, textPath );\n\n                    if( paramValues && !_.isEmpty( paramValues ) ) {\n                        val = messagingService.applyMessageParamsWithoutContext( val, paramValues );\n                    }\n\n                    if( val ) {\n                        objectRoot[ propName ] = val;\n                    } else {\n                        // use i18n key as fall back if no i18n text found, slice the leading 'i18n.' in textPath to get key\n                        objectRoot[ propName ] = textPath.slice( 5 );\n                    }\n                }\n            }\n        } else if( _.isObject( propValue ) && propValue.text && propValue.params ) {\n            objectRoot[ propName ] = propValue.text;\n            exports.updateI18nTexts( objectRoot, i18nValueMap, nextLevel, propValue.params );\n        } else {\n            if( !_.isEmpty( propValue ) ) {\n                var nextLevel = level + 1;\n\n                if( propName === 'dataProviders' ) {\n                    /**\n                      * Resolve any i18n bindings in dataProvider command titles.\n                      */\n                    _.forEach( propValue, function( propValue2 ) {\n                        if( propValue2 && propValue2.commands ) {\n                            exports.updateI18nTexts( propValue2.commands, i18nValueMap, nextLevel );\n                        }\n                    } );\n                } else {\n                    exports.updateI18nTexts( propValue, i18nValueMap, nextLevel );\n                }\n            }\n        }\n        return undefined;\n    } );\n};\n\nconst reduceParentJsonObject = function( parentJsonObject, resolvedData, propNameArg ) {\n    _.forEach( parentJsonObject, function( propValue, propName ) {\n        if( _.isString( propValue ) && /^{{subPanelContext\\..*}}$/.test( propValue ) && propNameArg ) {\n            _.set( resolvedData, propNameArg + '.' + propName, propValue );\n        } else if( _.isObject( propValue ) ) {\n            let propNameArg2 = propNameArg ? propNameArg + '.' + propName : propName;\n            reduceParentJsonObject( propValue, resolvedData, propNameArg2 );\n        }\n    } );\n};\n\nexport let resolveSubPanelContext = function( parentJsonObject, subPanelContext, resolvedData ) {\n    reduceParentJsonObject( parentJsonObject, resolvedData );\n    exports.initViewModel( resolvedData, subPanelContext );\n};\n\nexport let getInputDataExpression = function( jsonObject ) {\n    let expressionPaths = [];\n    _.forEach( jsonObject, function( propValue, propName ) {\n        if( _.isString( propValue ) && _.startsWith( propValue, '{{' ) && propName ) {\n            let path = parsingUtils.getStringBetweenDoubleMustaches( propValue );\n            expressionPaths.push( {\n                [ propName ]: path\n            } );\n        } else if( _.isObject( propValue ) ) {\n            expressionPaths.push( ...getInputDataExpression( propValue ) );\n        }\n    } );\n    return expressionPaths;\n};\n\nexport let shouldCreateViewModelProperty = function( dataProp ) {\n    var propAttrHolder = {};\n    _.forEach( dataProp, function( dataPropValue, dataPropName ) {\n        if( declUtils.attrHolderPropName.indexOf( dataPropName ) > -1 ) {\n            propAttrHolder[ dataPropName ] = dataPropValue;\n        }\n    } );\n    return !_.isEmpty( propAttrHolder );\n};\n\n/**\n  * Check if any view model on the page is currently active\n  *\n  * @returns {Boolean} true if active\n  */\nexport let isAnyViewModelActive = function() {\n    return sharedViewModelToken !== 0;\n};\n\nexports = {\n    updateDataProperty,\n    createDeclViewModel,\n    initViewModel,\n    processViewModel,\n    updateI18nTexts,\n    isAnyViewModelActive,\n    resolveSubPanelContext,\n    shouldCreateViewModelProperty\n};\nexport default exports;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/* eslint-disable require-jsdoc */\n\n/**\n * aw limitTo Filter \n * Creates a new array or string containing only a specified number of elements.\n * The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit.\n * Other array-like objects are also supported.\n * If a number is used as input, it is converted to a string.\n *\n * @module js/awLimitToFilterService\n */\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\n\nvar isNumberNaN = Number.isNaN || function isNumberNaN(num) {\n  return num !== num;\n};\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction sliceFn(input, begin, end) {\n  if (isString(input)) {\n    return input.slice(begin, end);\n  }\n\n  return [].slice.call(input, begin, end);\n}\n\nfunction isArray(arr) {\n  return Array.isArray(arr) || arr instanceof Array;\n}\n/**\n * \n * @param {*} input Array/array-like, string or number to be limited.\n * @param {*} limit The length of the returned array or string. If the limit number is positive, limit number of items from the beginning of the source array/string are copied.\n *  If the number is negative, limit number of items from the end of the source array/string are copied. The limit will be trimmed if it exceeds array.length.\n *  If limit is undefined, the input will be returned unchanged.\n * @param {*} begin Index at which to begin limitation. As a negative index, begin indicates an offset from the end of input. Defaults to 0.\n * @returns {Array} A new sub-array or substring of length limit or less if the input had less than limit elements.\n */\n\n\nfunction limitToFilter(input, limit, begin) {\n  //check array like input\n  if (!(isArray(input) || isString(input) || isNumber(input))) {\n    return input;\n  }\n\n  if (isNumberNaN(limit)) {\n    return input;\n  }\n\n  if (Math.abs(Number(limit)) === Infinity) {\n    limit = Number(limit);\n  } else {\n    limit = toInt(limit);\n  }\n\n  if (isNumber(input)) {\n    input = input.toString();\n  }\n\n  begin = !begin || isNaN(begin) ? 0 : toInt(begin);\n  begin = begin < 0 ? Math.max(0, input.length + begin) : begin;\n\n  if (limit >= 0) {\n    return sliceFn(input, begin, begin + limit);\n  }\n\n  if (begin === 0) {\n    return sliceFn(input, limit, input.length);\n  }\n\n  return sliceFn(input, Math.max(0, begin + limit), begin);\n}\n\nexport default {\n  limitToFilter\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awLimitToFilterService.js"],"names":["parseInt","isNumberNaN","Number","num","isString","input","Array","arr","isArray","isNumber","Math","limit","toInt","begin","isNaN","sliceFn","limitToFilter"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAA,KAAA,CAAA,GAAA,EAAsB;EAClB,OAAOA,QAAQ,CAAA,GAAA,EAAf,EAAe,CAAf;AACH;;AACD,IAAIC,WAAW,GAAGC,MAAM,CAANA,KAAAA,IAAgB,SAAA,WAAA,CAAA,GAAA,EAA4B;EAC1D,OAAOC,GAAG,KAAV,GAAA;AADJ,CAAA;;AAIA,SAAA,QAAA,CAAA,KAAA,EAA2B;EAAE,OAAO,OAAA,KAAA,KAAP,QAAA;AAAmC;;AAEhE,SAAA,QAAA,CAAA,KAAA,EAA2B;EAAE,OAAO,OAAA,KAAA,KAAP,QAAA;AAAmC;;AAEhE,SAAA,OAAA,CAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAsC;EAClC,IAAIC,QAAQ,CAAZ,KAAY,CAAZ,EAAwB;IACpB,OAAOC,KAAK,CAALA,KAAAA,CAAAA,KAAAA,EAAP,GAAOA,CAAP;EACH;;EACD,OAAO,GAAA,KAAA,CAAA,IAAA,CAAA,KAAA,EAAA,KAAA,EAAP,GAAO,CAAP;AACH;;AAED,SAAA,OAAA,CAAA,GAAA,EAAwB;EACpB,OAAOC,KAAK,CAALA,OAAAA,CAAAA,GAAAA,KAAwBC,GAAG,YAAlC,KAAA;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,aAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAA8C;EAC1C;EACA,IAAI,EAAGC,OAAO,CAAPA,KAAO,CAAPA,IAAoBJ,QAAQ,CAA5BI,KAA4B,CAA5BA,IAAyCC,QAAQ,CAAxD,KAAwD,CAApD,CAAJ,EAAsE;IAClE,OAAA,KAAA;EACH;;EACD,IAAIR,WAAW,CAAf,KAAe,CAAf,EAA2B;IACvB,OAAA,KAAA;EACH;;EACD,IAAIS,IAAI,CAAJA,GAAAA,CAAUR,MAAM,CAAhBQ,KAAgB,CAAhBA,MAAJ,QAAA,EAA+C;IAC3CC,KAAK,GAAGT,MAAM,CAAdS,KAAc,CAAdA;EADJ,CAAA,MAEO;IACHA,KAAK,GAAGC,KAAK,CAAbD,KAAa,CAAbA;EACH;;EAED,IAAIF,QAAQ,CAAZ,KAAY,CAAZ,EAAwB;IACpBJ,KAAK,GAAGA,KAAK,CAAbA,QAAQA,EAARA;EACH;;EAEDQ,KAAK,GAAG,CAAA,KAAA,IAAUC,KAAK,CAAf,KAAe,CAAf,GAAA,CAAA,GAA+BF,KAAK,CAA5CC,KAA4C,CAA5CA;EACAA,KAAK,GAAGA,KAAK,GAALA,CAAAA,GAAYH,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAaL,KAAK,CAALA,MAAAA,GAAzBQ,KAAYH,CAAZG,GAARA,KAAAA;;EAEA,IAAIF,KAAK,IAAT,CAAA,EAAiB;IACb,OAAOI,OAAO,CAAA,KAAA,EAAA,KAAA,EAAgBF,KAAK,GAAnC,KAAc,CAAd;EACH;;EACD,IAAIA,KAAK,KAAT,CAAA,EAAkB;IACd,OAAOE,OAAO,CAAA,KAAA,EAAA,KAAA,EAAgBV,KAAK,CAAnC,MAAc,CAAd;EACH;;EACD,OAAOU,OAAO,CAAA,KAAA,EAASL,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAaG,KAAK,GAA3B,KAASH,CAAT,EAAd,KAAc,CAAd;AACH;;AAED,eAAe;EACXM;AADW,CAAf","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n/* eslint-disable require-jsdoc */\n/**\n * aw limitTo Filter \n * Creates a new array or string containing only a specified number of elements.\n * The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit.\n * Other array-like objects are also supported.\n * If a number is used as input, it is converted to a string.\n *\n * @module js/awLimitToFilterService\n */\n\nfunction toInt( str ) {\n    return parseInt( str, 10 );\n}\nvar isNumberNaN = Number.isNaN || function isNumberNaN( num ) {\n    return num !== num;\n};\n\nfunction isString( value ) { return typeof value === 'string'; }\n\nfunction isNumber( value ) { return typeof value === 'number'; }\n\nfunction sliceFn( input, begin, end ) {\n    if( isString( input ) ) {\n        return input.slice( begin, end );\n    }\n    return [].slice.call( input, begin, end );\n}\n\nfunction isArray( arr ) {\n    return Array.isArray( arr ) || arr instanceof Array;\n}\n/**\n * \n * @param {*} input Array/array-like, string or number to be limited.\n * @param {*} limit The length of the returned array or string. If the limit number is positive, limit number of items from the beginning of the source array/string are copied.\n *  If the number is negative, limit number of items from the end of the source array/string are copied. The limit will be trimmed if it exceeds array.length.\n *  If limit is undefined, the input will be returned unchanged.\n * @param {*} begin Index at which to begin limitation. As a negative index, begin indicates an offset from the end of input. Defaults to 0.\n * @returns {Array} A new sub-array or substring of length limit or less if the input had less than limit elements.\n */\nfunction limitToFilter( input, limit, begin ) {\n    //check array like input\n    if( !( isArray( input ) || isString( input ) || isNumber( input ) ) ) {\n        return input;\n    }\n    if( isNumberNaN( limit ) ) {\n        return input;\n    }\n    if( Math.abs( Number( limit ) ) === Infinity ) {\n        limit = Number( limit );\n    } else {\n        limit = toInt( limit );\n    }\n\n    if( isNumber( input ) ) {\n        input = input.toString();\n    }\n\n    begin = !begin || isNaN( begin ) ? 0 : toInt( begin );\n    begin = begin < 0 ? Math.max( 0, input.length + begin ) : begin;\n\n    if( limit >= 0 ) {\n        return sliceFn( input, begin, begin + limit );\n    }\n    if( begin === 0 ) {\n        return sliceFn( input, limit, input.length );\n    }\n    return sliceFn( input, Math.max( 0, begin + limit ), begin );\n}\n\nexport default {\n    limitToFilter\n};\n"]},"metadata":{},"sourceType":"module"}
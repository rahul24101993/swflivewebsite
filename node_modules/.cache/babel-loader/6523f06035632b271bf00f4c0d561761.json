{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/workspaceUtils\n */\nimport _ from 'lodash';\n/**\n * Get the kit list from the workspace configurations\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } inclusive kits\n */\n\nconst getKitsFromConfigurations = availableConfigurations => {\n  const regex = new RegExp('^kit::(.*)');\n  var inclusiveKits = [];\n\n  _.forEach(availableConfigurations, page => {\n    var t = regex.exec(page);\n\n    if (t !== null && t[1]) {\n      inclusiveKits.push(t[1]);\n    }\n  });\n\n  return inclusiveKits;\n};\n/**\n * Remove the kit entries from the workspace\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } all inclusive configurations\n */\n\n\nconst removeKitsFromConfigurations = availableConfigurations => {\n  return availableConfigurations.filter(entry => !/^kit::/.test(entry));\n};\n\nexport const resolveKitDefinitions = (workspaceObject, allKitsJson, allModules2StatesJson) => {\n  if (workspaceObject.workspaceType === 'Exclusive') {\n    var inclusiveKitsForPages = getKitsFromConfigurations(workspaceObject.availablePages);\n    var availPages = removeKitsFromConfigurations(workspaceObject.availablePages);\n\n    if (availPages) {\n      workspaceObject.availablePages = availPages;\n    }\n\n    workspaceObject.availablePages = addConfigurationsFromKits(allKitsJson, inclusiveKitsForPages, workspaceObject.availablePages, allModules2StatesJson, 'states');\n\n    if (workspaceObject.includedCommands) {\n      var inclusiveKitsForCommands = getKitsFromConfigurations(workspaceObject.includedCommands);\n      var includedCommands = removeKitsFromConfigurations(workspaceObject.includedCommands);\n\n      if (includedCommands) {\n        workspaceObject.includedCommands = includedCommands;\n      }\n\n      workspaceObject.includedCommands = addConfigurationsFromKits(allKitsJson, inclusiveKitsForCommands, workspaceObject.includedCommands, allModules2StatesJson, 'commands');\n    }\n\n    if (workspaceObject.excludedCommands) {\n      var exclusiveKitsForCommands = getKitsFromConfigurations(workspaceObject.excludedCommands);\n      var excludedCommands = removeKitsFromConfigurations(workspaceObject.excludedCommands);\n\n      if (excludedCommands) {\n        workspaceObject.excludedCommands = excludedCommands;\n      }\n\n      workspaceObject.excludedCommands = addConfigurationsFromKits(allKitsJson, exclusiveKitsForCommands, workspaceObject.excludedCommands, allModules2StatesJson, 'commands');\n    }\n  }\n\n  return workspaceObject;\n};\n/**\n * Add all kit entries in the workspace\n *\n * @param {Object} allKitsJson - all kits in the solution\n * @param {Object} inclusiveKits - all kit entries in the workspace\n * @param {Object} availableConfigurations - all configurations in the workspace\n * @param {Object} allStatesJson - all states in the solution\n * @param {String} key - Key of the Array against which kit should be resolved\n * @param {String} path - path of the Array against which kit should be resolved\n * @return {Array} all inclusive configurations\n */\n\nconst addConfigurationsFromKits = (allKitsJson, inclusiveKits, availableConfigurations, allStatesJson, key) => {\n  var kitModules = [];\n  var inclusiveModules = null;\n\n  _.forEach(inclusiveKits, kit => {\n    if (allKitsJson[kit]) {\n      const kitContent = allKitsJson[kit].content;\n\n      if (kitContent) {\n        var kitMod = _.get(kitContent, 'modules');\n\n        if (kitMod) {\n          kitModules = _.union(kitModules, kitMod);\n        }\n      }\n    }\n  });\n\n  if (kitModules && kitModules.length > 0) {\n    inclusiveModules = _.union(kitModules, inclusiveModules);\n  }\n\n  var allInclusiveConfigurations = [];\n\n  if (inclusiveModules !== null) {\n    for (let module of inclusiveModules) {\n      var moduleDefination = allStatesJson[module];\n      var moduleJsonObjects;\n\n      var compareJsonObject = _.get(moduleDefination, key);\n\n      if (compareJsonObject) {\n        moduleJsonObjects = compareJsonObject;\n        var moduleEntries = Object.keys(moduleJsonObjects);\n        allInclusiveConfigurations = _.union(allInclusiveConfigurations, moduleEntries);\n      }\n    }\n  }\n\n  allInclusiveConfigurations = _.union(availableConfigurations, allInclusiveConfigurations);\n  return allInclusiveConfigurations;\n};\n\nexport default {\n  resolveKitDefinitions\n};","map":{"version":3,"names":["_","getKitsFromConfigurations","availableConfigurations","regex","RegExp","inclusiveKits","forEach","page","t","exec","push","removeKitsFromConfigurations","filter","entry","test","resolveKitDefinitions","workspaceObject","allKitsJson","allModules2StatesJson","workspaceType","inclusiveKitsForPages","availablePages","availPages","addConfigurationsFromKits","includedCommands","inclusiveKitsForCommands","excludedCommands","exclusiveKitsForCommands","allStatesJson","key","kitModules","inclusiveModules","kit","kitContent","content","kitMod","get","union","length","allInclusiveConfigurations","module","moduleDefination","moduleJsonObjects","compareJsonObject","moduleEntries","Object","keys"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/config/src/js/workspaceUtils.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/workspaceUtils\n */\nimport _ from 'lodash';\n\n/**\n * Get the kit list from the workspace configurations\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } inclusive kits\n */\nconst getKitsFromConfigurations = ( availableConfigurations ) => {\n    const regex = new RegExp( '^kit::(.*)' );\n    var inclusiveKits = [];\n    _.forEach( availableConfigurations, page => {\n        var t = regex.exec( page );\n        if( t !== null && t[ 1 ] ) {\n            inclusiveKits.push( t[ 1 ] );\n        }\n    } );\n    return inclusiveKits;\n};\n\n/**\n * Remove the kit entries from the workspace\n *\n * @param {Object} availableConfigurations -array of the configuration\n * @return { Array } all inclusive configurations\n */\nconst removeKitsFromConfigurations = ( availableConfigurations ) => {\n    return availableConfigurations.filter( entry => !/^kit::/.test( entry ) );\n};\n\nexport const resolveKitDefinitions = ( workspaceObject, allKitsJson, allModules2StatesJson ) => {\n    if( workspaceObject.workspaceType === 'Exclusive' ) {\n        var inclusiveKitsForPages = getKitsFromConfigurations( workspaceObject.availablePages );\n        var availPages = removeKitsFromConfigurations( workspaceObject.availablePages );\n        if( availPages ) {\n            workspaceObject.availablePages = availPages;\n        }\n        workspaceObject.availablePages = addConfigurationsFromKits( allKitsJson, inclusiveKitsForPages, workspaceObject.availablePages, allModules2StatesJson, 'states' );\n        if( workspaceObject.includedCommands ) {\n            var inclusiveKitsForCommands = getKitsFromConfigurations( workspaceObject.includedCommands );\n            var includedCommands = removeKitsFromConfigurations( workspaceObject.includedCommands );\n            if( includedCommands ) {\n                workspaceObject.includedCommands = includedCommands;\n            }\n            workspaceObject.includedCommands = addConfigurationsFromKits( allKitsJson, inclusiveKitsForCommands, workspaceObject.includedCommands, allModules2StatesJson, 'commands' );\n        }\n        if( workspaceObject.excludedCommands ) {\n            var exclusiveKitsForCommands = getKitsFromConfigurations( workspaceObject.excludedCommands );\n            var excludedCommands = removeKitsFromConfigurations( workspaceObject.excludedCommands );\n            if( excludedCommands ) {\n                workspaceObject.excludedCommands = excludedCommands;\n            }\n            workspaceObject.excludedCommands = addConfigurationsFromKits( allKitsJson, exclusiveKitsForCommands, workspaceObject.excludedCommands, allModules2StatesJson, 'commands' );\n        }\n    }\n    return workspaceObject;\n};\n\n/**\n * Add all kit entries in the workspace\n *\n * @param {Object} allKitsJson - all kits in the solution\n * @param {Object} inclusiveKits - all kit entries in the workspace\n * @param {Object} availableConfigurations - all configurations in the workspace\n * @param {Object} allStatesJson - all states in the solution\n * @param {String} key - Key of the Array against which kit should be resolved\n * @param {String} path - path of the Array against which kit should be resolved\n * @return {Array} all inclusive configurations\n */\nconst addConfigurationsFromKits = ( allKitsJson, inclusiveKits, availableConfigurations, allStatesJson, key ) => {\n    var kitModules = [];\n    var inclusiveModules = null;\n\n    _.forEach( inclusiveKits, kit => {\n        if( allKitsJson[ kit ] ) {\n            const kitContent = allKitsJson[ kit ].content;\n            if( kitContent ) {\n                var kitMod = _.get( kitContent, 'modules' );\n                if( kitMod ) {\n                    kitModules = _.union( kitModules, kitMod );\n                }\n            }\n        }\n    } );\n    if( kitModules && kitModules.length > 0 ) {\n        inclusiveModules = _.union( kitModules, inclusiveModules );\n    }\n    var allInclusiveConfigurations = [];\n    if( inclusiveModules !== null ) {\n        for( let module of inclusiveModules ) {\n            var moduleDefination = allStatesJson[ module ];\n            var moduleJsonObjects;\n            var compareJsonObject = _.get( moduleDefination, key );\n            if( compareJsonObject ) {\n                moduleJsonObjects = compareJsonObject;\n                var moduleEntries = Object.keys( moduleJsonObjects );\n                allInclusiveConfigurations = _.union( allInclusiveConfigurations, moduleEntries );\n            }\n        }\n    }\n    allInclusiveConfigurations = _.union( availableConfigurations, allInclusiveConfigurations );\n    return allInclusiveConfigurations;\n};\nexport default { resolveKitDefinitions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
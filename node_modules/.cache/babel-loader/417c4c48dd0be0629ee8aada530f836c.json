{"ast":null,"code":"/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @module js/splmStatsClientReporter\n */\nimport eventBus from 'js/eventBus';\n/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @class SPLMStatsClientReporter\n */\n\nfunction SPLMStatsClientReporter() {\n  let self = this;\n  var _plStatsData = {};\n  /**\n   *\n   * @returns {Object} _plStatsData - Object holding plStatsData to display on performance monitor panel\n   */\n\n  self.getPLStatsData = function () {\n    return _plStatsData;\n  };\n  /**\n   * @param {Object} performanceObject - Performance object to be extracted and global app context to be updated\n   */\n\n\n  self.report = function (performanceObject) {\n    let browserType = performanceObject.BrowserType;\n    let tti = (performanceObject.TTI / 1000).toFixed(2) + ' s'; // let scriptingTime = ( performanceObject.scriptTime / 1000 ).toFixed( 2 ) + ' s';\n\n    let totalNetworkTime = (performanceObject.totalNetworkTime / 1000).toFixed(2) + ' s';\n    let soaCount = performanceObject.Network.SoaDetails.filter(function (networkCall) {\n      return networkCall.logCorrelationID !== 0;\n    }).length;\n    let totalHttpRequests = performanceObject.Network.totalHttpRequests;\n    let memoryStart = performanceObject.MemoryStart;\n    let memoryEnd = performanceObject.MemoryEnd;\n    let memoryUsed = performanceObject.MemoryUsed;\n    let memoryConsumed = performanceObject.MemoryConsumption;\n\n    if (memoryUsed === 0 || memoryConsumed === 0) {\n      memoryStart = 'Not Supported';\n      memoryEnd = 'Not Supported';\n    } else {\n      memoryStart = (memoryStart / 1024000).toFixed(0) + ' MB';\n      memoryEnd = (memoryEnd / 1024000).toFixed(0) + ' MB';\n    }\n\n    let domNodeCount = performanceObject.DOM.elemCount;\n    let domTreeDepth = performanceObject.DOM.DOMTreeDepth;\n    let uniqueComponents = performanceObject.Component.uniqueComponents;\n    let componentRenders = performanceObject.Component.componentRenders;\n    _plStatsData = {\n      browserType,\n      tti,\n      totalNetworkTime,\n      soaCount,\n      totalHttpRequests,\n      memoryStart,\n      memoryEnd,\n      domNodeCount,\n      domTreeDepth,\n      uniqueComponents,\n      componentRenders\n    };\n    eventBus.publish('plStats.update');\n  };\n}\n\n_c = SPLMStatsClientReporter;\nexport default SPLMStatsClientReporter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsClientReporter\");","map":{"version":3,"names":["eventBus","SPLMStatsClientReporter","self","_plStatsData","getPLStatsData","report","performanceObject","browserType","BrowserType","tti","TTI","toFixed","totalNetworkTime","soaCount","Network","SoaDetails","filter","networkCall","logCorrelationID","length","totalHttpRequests","memoryStart","MemoryStart","memoryEnd","MemoryEnd","memoryUsed","MemoryUsed","memoryConsumed","MemoryConsumption","domNodeCount","DOM","elemCount","domTreeDepth","DOMTreeDepth","uniqueComponents","Component","componentRenders","publish"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsClientReporter.js"],"sourcesContent":["/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @module js/splmStatsClientReporter\n */\n\nimport eventBus from 'js/eventBus';\n\n/**\n * Client reporter that will update global app context to update view if enabled\n *\n * @class SPLMStatsClientReporter\n */\nfunction SPLMStatsClientReporter() {\n    let self = this;\n    var _plStatsData = {};\n\n    /**\n     *\n     * @returns {Object} _plStatsData - Object holding plStatsData to display on performance monitor panel\n     */\n    self.getPLStatsData = function() {\n        return _plStatsData;\n    };\n\n    /**\n     * @param {Object} performanceObject - Performance object to be extracted and global app context to be updated\n     */\n    self.report = function( performanceObject ) {\n        let browserType = performanceObject.BrowserType;\n        let tti = ( performanceObject.TTI / 1000 ).toFixed( 2 ) + ' s';\n        // let scriptingTime = ( performanceObject.scriptTime / 1000 ).toFixed( 2 ) + ' s';\n        let totalNetworkTime = ( performanceObject.totalNetworkTime / 1000 ).toFixed( 2 ) + ' s';\n        let soaCount = performanceObject.Network.SoaDetails.filter( function( networkCall ) {\n            return networkCall.logCorrelationID !== 0;\n        } ).length;\n        let totalHttpRequests = performanceObject.Network.totalHttpRequests;\n        let memoryStart = performanceObject.MemoryStart;\n        let memoryEnd = performanceObject.MemoryEnd;\n        let memoryUsed = performanceObject.MemoryUsed;\n        let memoryConsumed = performanceObject.MemoryConsumption;\n        if( memoryUsed === 0 || memoryConsumed === 0 ) {\n            memoryStart = 'Not Supported';\n            memoryEnd = 'Not Supported';\n        } else {\n            memoryStart = ( memoryStart / 1024000 ).toFixed( 0 ) + ' MB';\n            memoryEnd = ( memoryEnd / 1024000 ).toFixed( 0 ) + ' MB';\n        }\n        let domNodeCount = performanceObject.DOM.elemCount;\n        let domTreeDepth = performanceObject.DOM.DOMTreeDepth;\n        let uniqueComponents = performanceObject.Component.uniqueComponents;\n        let componentRenders = performanceObject.Component.componentRenders;\n\n        _plStatsData = {\n            browserType,\n            tti,\n            totalNetworkTime,\n            soaCount,\n            totalHttpRequests,\n            memoryStart,\n            memoryEnd,\n            domNodeCount,\n            domTreeDepth,\n            uniqueComponents,\n            componentRenders\n        };\n        eventBus.publish( 'plStats.update' );\n    };\n}\n\nexport default SPLMStatsClientReporter;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,OAAOA,QAAP,MAAqB,aAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,GAAmC;EAC/B,IAAIC,IAAI,GAAG,IAAX;EACA,IAAIC,YAAY,GAAG,EAAnB;EAEA;AACJ;AACA;AACA;;EACID,IAAI,CAACE,cAAL,GAAsB,YAAW;IAC7B,OAAOD,YAAP;EACH,CAFD;EAIA;AACJ;AACA;;;EACID,IAAI,CAACG,MAAL,GAAc,UAAUC,iBAAV,EAA8B;IACxC,IAAIC,WAAW,GAAGD,iBAAiB,CAACE,WAApC;IACA,IAAIC,GAAG,GAAG,CAAEH,iBAAiB,CAACI,GAAlB,GAAwB,IAA1B,EAAiCC,OAAjC,CAA0C,CAA1C,IAAgD,IAA1D,CAFwC,CAGxC;;IACA,IAAIC,gBAAgB,GAAG,CAAEN,iBAAiB,CAACM,gBAAlB,GAAqC,IAAvC,EAA8CD,OAA9C,CAAuD,CAAvD,IAA6D,IAApF;IACA,IAAIE,QAAQ,GAAGP,iBAAiB,CAACQ,OAAlB,CAA0BC,UAA1B,CAAqCC,MAArC,CAA6C,UAAUC,WAAV,EAAwB;MAChF,OAAOA,WAAW,CAACC,gBAAZ,KAAiC,CAAxC;IACH,CAFc,EAEXC,MAFJ;IAGA,IAAIC,iBAAiB,GAAGd,iBAAiB,CAACQ,OAAlB,CAA0BM,iBAAlD;IACA,IAAIC,WAAW,GAAGf,iBAAiB,CAACgB,WAApC;IACA,IAAIC,SAAS,GAAGjB,iBAAiB,CAACkB,SAAlC;IACA,IAAIC,UAAU,GAAGnB,iBAAiB,CAACoB,UAAnC;IACA,IAAIC,cAAc,GAAGrB,iBAAiB,CAACsB,iBAAvC;;IACA,IAAIH,UAAU,KAAK,CAAf,IAAoBE,cAAc,KAAK,CAA3C,EAA+C;MAC3CN,WAAW,GAAG,eAAd;MACAE,SAAS,GAAG,eAAZ;IACH,CAHD,MAGO;MACHF,WAAW,GAAG,CAAEA,WAAW,GAAG,OAAhB,EAA0BV,OAA1B,CAAmC,CAAnC,IAAyC,KAAvD;MACAY,SAAS,GAAG,CAAEA,SAAS,GAAG,OAAd,EAAwBZ,OAAxB,CAAiC,CAAjC,IAAuC,KAAnD;IACH;;IACD,IAAIkB,YAAY,GAAGvB,iBAAiB,CAACwB,GAAlB,CAAsBC,SAAzC;IACA,IAAIC,YAAY,GAAG1B,iBAAiB,CAACwB,GAAlB,CAAsBG,YAAzC;IACA,IAAIC,gBAAgB,GAAG5B,iBAAiB,CAAC6B,SAAlB,CAA4BD,gBAAnD;IACA,IAAIE,gBAAgB,GAAG9B,iBAAiB,CAAC6B,SAAlB,CAA4BC,gBAAnD;IAEAjC,YAAY,GAAG;MACXI,WADW;MAEXE,GAFW;MAGXG,gBAHW;MAIXC,QAJW;MAKXO,iBALW;MAMXC,WANW;MAOXE,SAPW;MAQXM,YARW;MASXG,YATW;MAUXE,gBAVW;MAWXE;IAXW,CAAf;IAaApC,QAAQ,CAACqC,OAAT,CAAkB,gBAAlB;EACH,CAvCD;AAwCH;;KAvDQpC,uB;AAyDT,eAAeA,uBAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * This module provides reusable functions related to handling URL manipulation.\n *\n * @module js/browserUtils\n *\n * @publishedApolloService\n */ /**\n * {String} Base URL for the current application's root 'document' without any query or location attributes and (if\n * otherwise valid) with a trailing '/' assured (e.g. 'http://100.100.100.100:8888/awc/').\n */var _cachedBaseURL;/**\n * Regular Expression from: https://tools.ietf.org/html/rfc3986#appendix-B\n * <pre>\n * Input:\n * https://www.ics.uci.edu/pub/ietf/uri/?locale=dldl&sbsbs=ddd#Related/fkfkfkf/s/s/\n *\n * Output:\n * Full match   0-80    `https://www.ics.uci.edu/pub/ietf/uri/?locale=dldl&sbsbs=ddd#Related/fkfkfkf/s/s/`\n * Group 1. 0-6 `https:`\n * Group 2. 0-5 `https`\n * Group 3. 6-37    `//www.ics.uci.edu/pub/ietf/uri/`\n * Group 4. 8-37    `www.ics.uci.edu/pub/ietf/uri/`\n * Group 5. 37-37   ``\n * Group 6. 37-59   `?locale=dldl&sbsbs=ddd`\n * Group 7. 38-59   `locale=dldl&sbsbs=ddd`\n * Group 8. 59-80   `#Related/fkfkfkf/s/s/`\n * Group 9. 60-80   `Related/fkfkfkf/s/s/`\n * </pre>\n *\n * @param {String} url -\n *\n * @returns {StringArray} Result\n */function _matchUrlGroups(url){return url.match(/^(([^:?#]+):)?(\\/\\/([^?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/);}/**\n * Remove the given attribute (and its value) from the specified URL (if it exists).\n *\n * @param {String} urlToEdit - The original URL to evaluate and change.\n * @param {String} attrToRemove - Name of the attribute to remove.\n *\n * @returns {String} The given URL with the specified attribute removed (if it origianlly existed).\n */function _removeUrlAttribute(urlToEdit,attrToRemove){var urlToReturn=urlToEdit;if(urlToEdit.indexOf(attrToRemove)!==-1){var results=_matchUrlGroups(urlToEdit);// Check if we have any search attributes\nif(results[7]){urlToReturn=results[1]+results[3];// protocol + server w/port\nif(results[6]){// 'search' attributes\nvar searchAttrs=results[6];// Check if this attr has a value\nvar attrStartNdx=searchAttrs.indexOf(attrToRemove+'=');if(attrStartNdx!==-1){// Find the next attr (or end)\nvar nextAttrStartNdx=searchAttrs.indexOf('&',attrStartNdx);var strToRemove;if(nextAttrStartNdx!==-1){// extract attr and value (without prefix) to be removed (i.e. collapse out)\nstrToRemove=searchAttrs.substring(attrStartNdx,nextAttrStartNdx+1);}else{// check if we are removing the whole set of 'search' attrs\nif(attrStartNdx===1){strToRemove=searchAttrs;}else{// extract attr and value (with prefix) to be removed\nstrToRemove=searchAttrs.substring(attrStartNdx-1,searchAttrs.length);}}var strWithOutParam=searchAttrs.replace(strToRemove,'');urlToReturn+=strWithOutParam;}else{// Non-value case not handled yet var ndx3 = searchAttrs.indexOf( '&', attrStartNdx );\nurlToReturn+=searchAttrs;}}if(results[8]){// hash location\nurlToReturn+=results[8];}}}return urlToReturn;}// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\nvar exports={};/**\n * Note: This API is here to allow Jasmine 'spyOn' type testing to act enough like a browser to test these URL\n * functions.\n *\n * @returns {Object} The current 'window.location' object.\n */export let getWindowLocation=function(){return window.location;};/**\n * Note: This API is here to allow jasmine testing to act enough like a browser to test URL functions.\n *\n * @returns {Object} The current 'window.navigator' object.\n */export let getWindowNavigator=function(){return window.navigator;};/**\n * Note: This API is here to allow jasmine testing to act enough like a browser to test URL functions.\n *\n * @param {String} url - The URK value to set as the window's HRef.\n */export let setWindowHRef=function(url){window.location.href=url;};/**\n *\n * Returns Base URL for the current application\n *\n * @returns {String} Base URL for the current application's root 'document' without any query or location attributes\n *          and (if otherwise valid) with a trailing '/' assured (e.g. 'http://100.100.100.100:8888/awc/').\n */export let getBaseURL=function(){if(!_cachedBaseURL){// strip 'index.html' from end of pathname if present\nvar location=exports.getWindowLocation();var pathname=location.pathname;// IE11 on Windows 10 doesn't have 'location.origin' object, so let's set it\nif(!location.origin){location.origin=location.protocol+'//'+location.hostname+(location.port?':'+location.port:'');}_cachedBaseURL=location.origin+pathname.substring(0,pathname.lastIndexOf('/')+1);}return _cachedBaseURL;};var _navigator=getWindowNavigator();/**\n * Checks if browser is IE. TRUE if browser is IE\n */export let isIE=_navigator.userAgent.search(/(trident|edge)/i)>-1;/**\n * Checks if browser is non Edge IE. TRUE if browser is non Edge IE\n */export let isNonEdgeIE=/trident/i.test(_navigator.userAgent);/**\n * Checks if running on a mobile OS. TRUE if we're currently running on a mobile OS\n */export let isMobileOS=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(_navigator.userAgent);/**\n * Checks if it is touch device, true if it is touch device\n */export let isTouchDevice='ontouchstart'in window||navigator.msMaxTouchPoints>0;/**\n * Checks if browser is Firefox. TRUE if browser is Firefox\n */export let isFirefox=_navigator.userAgent.search(/firefox/i)>-1;/**\n * Checks if browser is Qt. TRUE if browser is Qt\n */export let isQt=_navigator.userAgent.search(/QtWebEngine/i)>-1;/**\n * Checks if browser is Safari.\n */export let isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);/**\n * Returns an object who's properties represent the 'search' attributes of the current $location (or window's URL if\n * _jsniInjector is not initialized).\n * <P>\n * Note: This should only be used if the attributes are needed before angular startup, otherwise use $state.params\n * or $location.search()\n *\n * @return {Object} An object who's properties represent the 'search' attributes of the current $location (or\n *         window's URL if _jsniInjector is not initialized).\n * @ignore\n */export let getUrlAttributes=function(){/**\n     * Check if AngularJS has started and _jsniInjector is setup\n     * <P>\n     * If so: use $location.search()\n     */if(window._jsniInjector){return window._jsniInjector.service('$location').search();}return exports.getWindowLocationAttributes();};/**\n * Returns the browser type and the version of that browser as a string\n *\n * https://stackoverflow.com/questions/2400935/browser-detection-in-javascript\n */export let getBrowserType=function(){var ua=navigator.userAgent;var tem=null;var M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i)||[];if(/trident/i.test(M[1])){tem=/\\brv[ :]+(\\d+)/g.exec(ua)||[];return'IE '+(tem[1]||'');}if(M[1]==='Chrome'){tem=ua.match(/\\b(OPR|Edge)\\/(\\d+)/);if(tem!==null){return tem.slice(1).join(' ').replace('OPR','Opera');}}M=M[2]?[M[1],M[2]]:[navigator.appName,navigator.appVersion,'-?'];if((tem=ua.match(/version\\/(\\d+)/i))!==null){M.splice(1,1,tem[1]);}return M.join(' ');};/**\n * Returns an object who's properties represent the 'search' attributes of the current window's URL.\n * <P>\n * Note: These attributes are only the ones BEFORE the '#' in the URL. All attributes AFTER the '#' are accessed by\n * using the $state.params or $location.search()\n *\n * @return {Object} An object who's properties represent the 'search' attributes of the current window's URL.\n */export let getWindowLocationAttributes=function(){var retAttr={};var location=exports.getWindowLocation();if(location.search){var paramPairs=location.search.substring(1).split('&');paramPairs.forEach(function(paramString){var param=paramString.split('=');if(param.length===1){retAttr[param[0]]='';}else{retAttr[param[0]]=decodeURIComponent(param[1]);}});}return retAttr;};/**\n * Updates the URL with locale information\n *\n * @param {String} newLocale - The locale value which needs to be set e.g. 'en_US'\n */export let updateBrowserUrl=function(newLocale){if(newLocale){var location=exports.getWindowLocation();var newHRef=_removeUrlAttribute(location.href,'locale');var results=_matchUrlGroups(newHRef);// Build up the protocol and location portion\nvar newUrl=results[1]+results[3];// Check if we already have some search attributes (or not)\nif(results[6]){newUrl+=results[6];newUrl+='&locale=';newUrl+=newLocale;}else{newUrl+='?locale=';newUrl+=newLocale;}// Add back the hash portion (if necessary)\nif(results[8]){newUrl+=results[8];}exports.setWindowHRef(newUrl);}};/**\n * Remove the given named attribute from the 'search' area (i.e. URL attributes before the '#') of the browser's\n * current URL.\n *\n * @param {String} attrToRemove - Name of the attribute to remove.\n */export let removeUrlAttribute=function(attrToRemove){if(attrToRemove){var location=exports.getWindowLocation();var newHRef=_removeUrlAttribute(location.href,attrToRemove);if(newHRef!==location.href){exports.setWindowHRef(newHRef);}}};/**\n * Attach script to the document.\n * If script is already attached to DOM then just call onload callback\n *\n * @param {String} src - source path of the script.\n * @param {String} onLoadCallback - on load callback\n */export let attachScriptToDocument=function(src,onLoadCallback){var scriptElement=document.querySelector(\"script[src=\\\"\".concat(src,\"\\\"]\"));if(scriptElement){onLoadCallback();}else{scriptElement=document.createElement('script');scriptElement.type='text/javascript';scriptElement.src=src;document.head.appendChild(scriptElement);scriptElement.onload=function(){onLoadCallback();};}};exports={getWindowLocation,getWindowNavigator,setWindowHRef,getBaseURL,isIE,isNonEdgeIE,isMobileOS,isTouchDevice,isFirefox,isQt,isSafari,getUrlAttributes,getBrowserType,getWindowLocationAttributes,updateBrowserUrl,removeUrlAttribute,attachScriptToDocument};export default exports;","map":null,"metadata":{},"sourceType":"module"}
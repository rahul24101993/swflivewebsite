{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Selection helper service which handles single and multi selections for table.\n *\n * @module js/selectionHelper\n */\nlet exports = {};\n/**\n * Handles table single selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\n\nexport let handleSingleSelect = function (selectedObject, selectionModel) {\n  if (!selectedObject.selected) {\n    selectionModel.setSelection(selectedObject);\n  } else {\n    selectionModel.setSelection([]);\n  }\n};\n/**\n * Handles table multi-selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\n\nexport let handleMultiSelect = function (selectedObject, selectionModel) {\n  selectionModel.toggleSelection(selectedObject);\n};\n/**\n * Handles multi-selection with the shift key down for cell list\n *\n * @param {ModelObject[]} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n * @param {Object} loadedVMObjects - Loaded VMObjects\n */\n\nexport let handleListShiftMultiSelect = function (selectedObject, selectionModel, loadedVMObjects) {\n  // If object is already selected ignore shift and just deselect\n  if (selectionModel.isSelected(selectedObject)) {\n    selectionModel.removeFromSelection(selectedObject);\n  } else {\n    var uid = selectedObject.alternateID ? selectedObject.alternateID : selectedObject.uid;\n    var allLoadedObjects = loadedVMObjects.getLoadedViewModelObjects(); // Get the index of the object that matches uid\n\n    var start = allLoadedObjects.indexOf(allLoadedObjects.filter(function (vmo) {\n      return vmo.alternateID ? vmo.alternateID === uid : vmo.uid === uid;\n    })[0]); // Get the index of the object that matches last selected uid\n\n    var end = allLoadedObjects.indexOf(allLoadedObjects.filter(function (vmo) {\n      return selectionModel.getSelectedIndex(vmo) === selectionModel.getCurrentSelectedCount() - 1;\n    })[0]); // Select everything in between\n\n    if (start !== -1 && end !== -1) {\n      changeObjectsSelection(start, end, true, selectionModel, allLoadedObjects);\n    }\n  }\n};\n/**\n * Change the selection range\n *\n * @param {Number} start - String index in collection to add/remove/toggle.\n * @param {Number} end -  Ending index in collection to add/remove/toggle.\n * @param {Boolean} select - (Optional) TRUE, 'select'...FALSE, 'unselect'...UNDEFINED, 'toggle'.\n * @param {Object} selectionModel - The Selection Model instance\n * @param {Object} loadedVMOs - LoadedVMOs\n */\n\nconst changeObjectsSelection = (start, end, select, selectionModel, loadedVMOs) => {\n  var e = start > end ? start : end;\n  var s = start > end ? end : start;\n  var objects = loadedVMOs.slice(s, e + 1);\n\n  if (select === true) {\n    if (selectionModel.isMultiSelectionEnabled() || objects.length > 1) {\n      selectionModel.addToSelection(objects);\n    } else {\n      selectionModel.setSelection(objects);\n    }\n  } else if (select === false) {\n    selectionModel.removeFromSelection(objects);\n  } else {\n    selectionModel.toggleSelection(objects);\n  }\n};\n/**\n * Handle a event that should trigger a selection change\n *\n * @param {ModelObject[]} selectedObjects - selected objects\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - The event\n * @param {Object} loadedVMObjects - The currently loaded viewModelObjects\n */\n\n\nexport let handleSelectionEvent = function (selectedObjects, selectionModel, event, loadedVMObjects) {\n  // Event is optional so default\n  event = event ? event : {}; // If the model supports multiple selection\n\n  if (selectionModel.getMode() === 'multiple') {\n    // If shift key and something is selected do range selection\n    if (event.shiftKey && selectionModel.getCurrentSelectedCount() > 0) {\n      /**\n       * Note: This handling is specific to list as ui-grid has handling for shift select built in - see\n       * rowSelectionChangedBatch.\n       */\n      exports.handleListShiftMultiSelect(selectedObjects[0], selectionModel, loadedVMObjects);\n    } else {\n      // If right click or ctrl click (also implies single object clicked)\n      // event.which =1 is for long press on touch devices & event.which=3 is for right click on desktop devices\n      //right click should setSelect instead of  toggleSelection\n      if (event.ctrlKey || event.metaKey && window.navigator.platform.toUpperCase().indexOf('MAC') !== -1 || event.srcElement && event.type === 'pointerdown' && event.which === 1 || selectionModel.isMultiSelectionEnabled() && event.which === 3 || event.shiftKey) {\n        // If object is already selected\n        selectionModel.toggleSelection(selectedObjects[0]);\n      } else if (selectionModel.isMultiSelectionEnabled()) {\n        if (!selectionModel.isSelected(selectedObjects[0])) {\n          selectionModel.addToSelection(selectedObjects[0]);\n        } else {\n          selectionModel.removeFromSelection(selectedObjects[0]);\n        }\n      } else {\n        let isSelected = selectionModel.isSelected(selectedObjects[0]);\n        let currentSelectedCount = selectionModel.getCurrentSelectedCount();\n\n        if (!isSelected || currentSelectedCount > 1) {\n          selectionModel.setSelection(selectedObjects[0]);\n        } else {\n          selectionModel.setSelection([]);\n        }\n      }\n    }\n  } else {\n    exports.handleSingleSelect(selectedObjects[0], selectionModel);\n  }\n};\nexport let handleSelectAllOrSelectNone = function (eventData, selectionModel, selectedObjects) {\n  if (eventData.selectAll) {\n    selectionModel.setSelection(selectedObjects[0]);\n  } else {\n    selectionModel.setSelection([]);\n  }\n};\nexports = {\n  handleSingleSelect,\n  handleMultiSelect,\n  handleListShiftMultiSelect,\n  handleSelectionEvent,\n  handleSelectAllOrSelectNone\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/selectionHelper.js"],"names":["exports","handleSingleSelect","selectedObject","selectionModel","handleMultiSelect","handleListShiftMultiSelect","uid","allLoadedObjects","loadedVMObjects","start","vmo","end","changeObjectsSelection","e","s","objects","loadedVMOs","select","handleSelectionEvent","event","selectedObjects","window","isSelected","currentSelectedCount","handleSelectAllOrSelectNone","eventData"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Selection helper service which handles single and multi selections for table.\n *\n * @module js/selectionHelper\n */\n\nlet exports = {};\n\n/**\n * Handles table single selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\nexport let handleSingleSelect = function( selectedObject, selectionModel ) {\n    if( !selectedObject.selected ) {\n        selectionModel.setSelection( selectedObject );\n    } else {\n        selectionModel.setSelection( [] );\n    }\n};\n\n/**\n * Handles table multi-selection\n *\n * @param {Object} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n */\nexport let handleMultiSelect = function( selectedObject, selectionModel ) {\n    selectionModel.toggleSelection( selectedObject );\n};\n\n/**\n * Handles multi-selection with the shift key down for cell list\n *\n * @param {ModelObject[]} selectedObject - selected object\n * @param {Object} selectionModel - the selection model\n * @param {Object} loadedVMObjects - Loaded VMObjects\n */\nexport let handleListShiftMultiSelect = function( selectedObject, selectionModel, loadedVMObjects ) {\n    // If object is already selected ignore shift and just deselect\n    if( selectionModel.isSelected( selectedObject ) ) {\n        selectionModel.removeFromSelection( selectedObject );\n    } else {\n        var uid = selectedObject.alternateID ? selectedObject.alternateID : selectedObject.uid;\n        var allLoadedObjects = loadedVMObjects.getLoadedViewModelObjects();\n\n        // Get the index of the object that matches uid\n        var start = allLoadedObjects.indexOf( allLoadedObjects.filter( function( vmo ) {\n            return vmo.alternateID ? vmo.alternateID === uid : vmo.uid === uid;\n        } )[ 0 ] );\n\n        // Get the index of the object that matches last selected uid\n        var end = allLoadedObjects.indexOf( allLoadedObjects.filter( function( vmo ) {\n            return selectionModel.getSelectedIndex( vmo ) === selectionModel.getCurrentSelectedCount() - 1;\n        } )[ 0 ] );\n\n        // Select everything in between\n        if( start !== -1 && end !== -1 ) {\n            changeObjectsSelection( start, end, true, selectionModel, allLoadedObjects );\n        }\n    }\n};\n\n/**\n * Change the selection range\n *\n * @param {Number} start - String index in collection to add/remove/toggle.\n * @param {Number} end -  Ending index in collection to add/remove/toggle.\n * @param {Boolean} select - (Optional) TRUE, 'select'...FALSE, 'unselect'...UNDEFINED, 'toggle'.\n * @param {Object} selectionModel - The Selection Model instance\n * @param {Object} loadedVMOs - LoadedVMOs\n */\nconst changeObjectsSelection = ( start, end, select, selectionModel, loadedVMOs ) => {\n    var e = start > end ? start : end;\n    var s = start > end ? end : start;\n\n    var objects = loadedVMOs.slice( s, e + 1 );\n    if( select === true ) {\n        if( selectionModel.isMultiSelectionEnabled() || objects.length > 1 ) {\n            selectionModel.addToSelection( objects );\n        } else {\n            selectionModel.setSelection( objects );\n        }\n    } else if( select === false ) {\n        selectionModel.removeFromSelection( objects );\n    } else {\n        selectionModel.toggleSelection( objects );\n    }\n};\n\n/**\n * Handle a event that should trigger a selection change\n *\n * @param {ModelObject[]} selectedObjects - selected objects\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - The event\n * @param {Object} loadedVMObjects - The currently loaded viewModelObjects\n */\nexport let handleSelectionEvent = function( selectedObjects, selectionModel, event, loadedVMObjects ) {\n    // Event is optional so default\n    event = event ? event : {};\n\n    // If the model supports multiple selection\n    if( selectionModel.getMode() === 'multiple' ) {\n        // If shift key and something is selected do range selection\n        if( event.shiftKey && selectionModel.getCurrentSelectedCount() > 0 ) {\n            /**\n             * Note: This handling is specific to list as ui-grid has handling for shift select built in - see\n             * rowSelectionChangedBatch.\n             */\n            exports.handleListShiftMultiSelect( selectedObjects[ 0 ], selectionModel, loadedVMObjects );\n        } else {\n            // If right click or ctrl click (also implies single object clicked)\n            // event.which =1 is for long press on touch devices & event.which=3 is for right click on desktop devices\n            //right click should setSelect instead of  toggleSelection\n            if( event.ctrlKey ||\n                event.metaKey &&\n                window.navigator.platform.toUpperCase().indexOf( 'MAC' ) !== -1 ||\n                event.srcElement && event.type === 'pointerdown' && event.which === 1 ||\n                selectionModel.isMultiSelectionEnabled() && event.which === 3 || event.shiftKey ) {\n                // If object is already selected\n                selectionModel.toggleSelection( selectedObjects[ 0 ] );\n            } else if( selectionModel.isMultiSelectionEnabled() ) {\n                if( !selectionModel.isSelected( selectedObjects[ 0 ] ) ) {\n                    selectionModel.addToSelection( selectedObjects[ 0 ] );\n                } else {\n                    selectionModel.removeFromSelection( selectedObjects[ 0 ] );\n                }\n            } else {\n                let isSelected = selectionModel.isSelected( selectedObjects[ 0 ] );\n                let currentSelectedCount = selectionModel.getCurrentSelectedCount();\n                if( !isSelected || currentSelectedCount > 1 ) {\n                    selectionModel.setSelection( selectedObjects[ 0 ] );\n                } else {\n                    selectionModel.setSelection( [] );\n                }\n            }\n        }\n    } else {\n        exports.handleSingleSelect( selectedObjects[ 0 ], selectionModel );\n    }\n};\n\nexport let handleSelectAllOrSelectNone = function( eventData, selectionModel, selectedObjects ) {\n    if( eventData.selectAll ) {\n        selectionModel.setSelection( selectedObjects[ 0 ] );\n    } else {\n        selectionModel.setSelection( [] );\n    }\n};\n\nexports = {\n    handleSingleSelect,\n    handleMultiSelect,\n    handleListShiftMultiSelect,\n    handleSelectionEvent,\n    handleSelectAllOrSelectNone\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This is purely a Require module. It will get called on the initial flow path and state is checked during route\n * transitions. It will do an on demand load of the session manager service.\n *\n * @module js/sessionState\n */import logger from'js/logger';import AwStateService from'js/awStateService';import AwPromiseService from'js/awPromiseService';var exports={};var _isSessionAuthenticated=false;var _authInProgress=false;export let setAuthStatus=function(isAuth){_isSessionAuthenticated=isAuth;};export let getIsAuthenticated=function(){return _isSessionAuthenticated;};export let isAuthenticationInProgress=function(){return _authInProgress;};export let setAuthenticationInProgress=function(val){_authInProgress=val;};export let forceNavigation=function(toState,toParams){// try to put an async \"gap\" around the state.go - much like the sessionmgr interaction..\nimport('js/sessionManager.service').then(function(){try{AwStateService.instance.go(toState,toParams);}catch(e){// For aligning with former code flow, do nothing and not error out\n}});};/**\n * this is the wrapper around the checkSessionValid() api. this is the defer point at which we can async load.\n */export let performValidSessionCheck=function(targetNavDetails){// this is the break point for our dependency load.  on demand load of the session manager service.\nimport('js/sessionManager.service').then(function(sessionManagerService){sessionManagerService.checkSessionValid(targetNavDetails);});};export let runPostLoginStages=function(){// this is the break point for our dependency load.  on demand load of the session manager service.\nimport('js/sessionManager.service').then(function(sessionManagerService){sessionManagerService.runPostLoginBlocking().then(function(){sessionManagerService.runNavToState();},function(){if(logger.isTraceEnabled()){logger.trace('SM: end runPostLoginBlocking Stage - but ERROR');}sessionManagerService.runNavToState();});});};/**\n * wrapper around the session manager api. load upon request and invoke session manager.\n *\n * @param {Object} $q\n * @return {Promise} promise\n */export let pickAuthenticator=function(){// this is the break point for our dependency load.  on demand load of the session manager service.\nreturn AwPromiseService.instance(function(resolve){import('js/sessionManager.service').then(function(sessionManagerService){resolve(sessionManagerService.pickAuthenticator());});});};/**\n * Invoked when the state change was successful from UI router\n */export let routeStateChangeSuccess=function(toState,toParams,fromState,fromParams){// this is the break point for our dependency load.  on demand load of the session manager service.\nimport('js/locationNavigation.service').then(function(dep){let locationNavigationSvc=dep.default.instance;locationNavigationSvc.routeStateChangeSuccess(toState,toParams,fromState,fromParams);});};exports={setAuthStatus,getIsAuthenticated,isAuthenticationInProgress,setAuthenticationInProgress,forceNavigation,performValidSessionCheck,runPostLoginStages,pickAuthenticator,routeStateChangeSuccess};export default exports;","map":null,"metadata":{},"sourceType":"module"}
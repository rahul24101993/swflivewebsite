{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/defaultIconProviderService\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport { getImageAliasFromId } from 'js/imageRegistry';\nimport { loadDynModule } from 'js/moduleLoader';\n/**\n * @private\n */\n\nvar _cache = {\n  /**\n   * Set of '&lt;SVG&gt;' and '&lt;IMG&gt;' HTML tags set with the \"aw-base-icon\" CSS class once an icon is used.\n   */\n  use: {}\n};\n/**\n * @private\n *\n * @param {String} key - key field within use object\n *\n * @return {String} string from use object per key field (or null)\n */\n\nfunction _getFromUseCache(key) {\n  var result = _cache.use[key];\n\n  if (result) {\n    return result;\n  }\n\n  return undefined;\n}\n/**\n * Returns the &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\n\n\nconst _getIcon = async name => {\n  /**\n   * Check if this is an alias name for the actual icon name.\n   */\n  var iconAlias = getImageAliasFromId(name);\n\n  if (iconAlias) {\n    return loadDynModule(iconAlias).then(result => result.svgString);\n  }\n\n  return null;\n};\n\nvar exports = {};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIcon = function (typeName) {\n  /**\n   * Check if we have already prepared a tag for this icon to use.\n   */\n  var ret = _getFromUseCache(typeName);\n\n  if (ret) {\n    return ret;\n  }\n\n  var typeIconFileName;\n  var modelType = cmm.getType(typeName);\n\n  if (modelType && modelType.constantsMap.typeIconFileName) {\n    // If we already have the meta model cached, use the constant for the type icon filename.\n    typeIconFileName = modelType.constantsMap.IconFileName;\n  } else {\n    /**\n     * Check if this is an alias name for the actual icon name.\n     */\n    typeIconFileName = iconMapSvc.getTypeFileName(typeName);\n\n    if (!typeIconFileName) {\n      return null;\n    }\n  }\n\n  return exports.getTypeIconFileTag(typeName, typeIconFileName);\n};\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconFileTag = function (typeName, typeIconFileName) {\n  /**\n   * Build final tag and put into the 'use' cache to save some work in the future.\n   */\n  var iconTag = '<img class=\"aw-base-icon\" src=\"' + exports.getTypeIconFileUrl(typeIconFileName) + '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"\" />';\n  _cache.use[typeName] = iconTag;\n  return iconTag;\n};\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconFileUrl = function (typeIconFileName) {\n  return iconRepositoryService.getIconFileUrl(typeIconFileName);\n};\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTypeIconURL = function (typeName) {\n  var iconFileName;\n  var modelType = cmm.getType(typeName);\n\n  if (modelType && modelType.constantsMap.IconFileName) {\n    iconFileName = modelType.constantsMap.IconFileName;\n  }\n\n  if (!iconFileName) {\n    /**\n     * Check if this is an alias name for the actual icon name.\n     */\n    iconFileName = iconMapSvc.getTypeFileName(typeName);\n  }\n\n  if (!iconFileName) {\n    return null;\n  }\n  /**\n   * Create the path to the deployed icon file.\n   */\n\n\n  return iconRepositoryService.getIconFileUrl(iconFileName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getTileIcon = async function (name) {\n  return await _getIcon('home' + name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getMiscIcon = async function (name) {\n  return await _getIcon('misc' + name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getCmdIcon = async function (name) {\n  return await _getIcon('cmd' + name);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getAwIcon = async function (iconName) {\n  return await _getIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getIcon = async function (iconName) {\n  return await _getIcon(iconName);\n};\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\n\nexport let getIndicatorIcon = async function (iconName) {\n  return await _getIcon('indicator' + iconName);\n};\nexports = {\n  getTypeIcon,\n  getTypeIconFileTag,\n  getTypeIconFileUrl,\n  getTypeIconURL,\n  getTileIcon,\n  getMiscIcon,\n  getCmdIcon,\n  getAwIcon,\n  getIcon,\n  getIndicatorIcon\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/defaultIconProviderService.js"],"names":["_cache","use","result","_getIcon","iconAlias","getImageAliasFromId","loadDynModule","exports","getTypeIcon","ret","_getFromUseCache","modelType","cmm","typeIconFileName","iconMapSvc","getTypeIconFileTag","iconTag","getTypeIconFileUrl","iconRepositoryService","getTypeIconURL","iconFileName","getTileIcon","getMiscIcon","getCmdIcon","getAwIcon","getIcon","getIndicatorIcon"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAA,GAAA,MAAA,4BAAA;AACA,OAAA,UAAA,MAAA,mBAAA;AACA,OAAA,qBAAA,MAAA,0BAAA;AACA,SAAA,mBAAA,QAAA,kBAAA;AACA,SAAA,aAAA,QAAA,iBAAA;AAEA;AACA;AACA;;AACA,IAAIA,MAAM,GAAG;EAET;AACJ;AACA;EACIC,GAAG,EAAE;AALI,CAAb;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAA,gBAAA,CAAA,GAAA,EAAiC;EAC7B,IAAIC,MAAM,GAAGF,MAAM,CAANA,GAAAA,CAAb,GAAaA,CAAb;;EACA,IAAA,MAAA,EAAa;IACT,OAAA,MAAA;EACH;;EACD,OAAA,SAAA;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,QAAQ,GAAG,MAAA,IAAA,IAAiB;EAC9B;AACJ;AACA;EACI,IAAIC,SAAS,GAAGC,mBAAmB,CAAnC,IAAmC,CAAnC;;EACA,IAAA,SAAA,EAAgB;IACZ,OAAOC,aAAa,CAAbA,SAAa,CAAbA,CAAAA,IAAAA,CAAiCJ,MAAM,IAAIA,MAAM,CAAxD,SAAOI,CAAP;EACH;;EACD,OAAA,IAAA;AARJ,CAAA;;AAWA,IAAIC,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAA,QAAA,EAAqB;EAC1C;AACJ;AACA;EACI,IAAIC,GAAG,GAAGC,gBAAgB,CAA1B,QAA0B,CAA1B;;EAEA,IAAA,GAAA,EAAU;IACN,OAAA,GAAA;EACH;;EAED,IAAA,gBAAA;EAEA,IAAIC,SAAS,GAAGC,GAAG,CAAHA,OAAAA,CAAhB,QAAgBA,CAAhB;;EAEA,IAAID,SAAS,IAAIA,SAAS,CAATA,YAAAA,CAAjB,gBAAA,EAA2D;IACvD;IACAE,gBAAgB,GAAGF,SAAS,CAATA,YAAAA,CAAnBE,YAAAA;EAFJ,CAAA,MAGO;IACH;AACR;AACA;IACQA,gBAAgB,GAAGC,UAAU,CAAVA,eAAAA,CAAnBD,QAAmBC,CAAnBD;;IACA,IAAI,CAAJ,gBAAA,EAAwB;MACpB,OAAA,IAAA;IACH;EACJ;;EAED,OAAON,OAAO,CAAPA,kBAAAA,CAAAA,QAAAA,EAAP,gBAAOA,CAAP;AA3BG,CAAA;AA8BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIQ,kBAAkB,GAAG,UAAA,QAAA,EAAA,gBAAA,EAAuC;EACnE;AACJ;AACA;EACI,IAAIC,OAAO,GAAG,oCAAoCT,OAAO,CAAPA,kBAAAA,CAApC,gBAAoCA,CAApC,GAAd,2DAAA;EAGAP,MAAM,CAANA,GAAAA,CAAAA,QAAAA,IAAAA,OAAAA;EAEA,OAAA,OAAA;AATG,CAAA;AAYP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIiB,kBAAkB,GAAG,UAAA,gBAAA,EAA6B;EACzD,OAAOC,qBAAqB,CAArBA,cAAAA,CAAP,gBAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAA,QAAA,EAAqB;EAC7C,IAAA,YAAA;EAEA,IAAIR,SAAS,GAAGC,GAAG,CAAHA,OAAAA,CAAhB,QAAgBA,CAAhB;;EACA,IAAID,SAAS,IAAIA,SAAS,CAATA,YAAAA,CAAjB,YAAA,EAAuD;IACnDS,YAAY,GAAGT,SAAS,CAATA,YAAAA,CAAfS,YAAAA;EACH;;EAED,IAAI,CAAJ,YAAA,EAAoB;IAChB;AACR;AACA;IACQA,YAAY,GAAGN,UAAU,CAAVA,eAAAA,CAAfM,QAAeN,CAAfM;EACH;;EAED,IAAI,CAAJ,YAAA,EAAoB;IAChB,OAAA,IAAA;EACH;EAED;AACJ;AACA;;;EACI,OAAOF,qBAAqB,CAArBA,cAAAA,CAAP,YAAOA,CAAP;AAtBG,CAAA;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,WAAW,GAAG,gBAAA,IAAA,EAAuB;EAC5C,OAAO,MAAMlB,QAAQ,CAAE,SAAvB,IAAqB,CAArB;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAImB,WAAW,GAAG,gBAAA,IAAA,EAAuB;EAC5C,OAAO,MAAMnB,QAAQ,CAAE,SAAvB,IAAqB,CAArB;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIoB,UAAU,GAAG,gBAAA,IAAA,EAAuB;EAC3C,OAAO,MAAMpB,QAAQ,CAAE,QAAvB,IAAqB,CAArB;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIqB,SAAS,GAAG,gBAAA,QAAA,EAA2B;EAC9C,OAAO,MAAMrB,QAAQ,CAArB,QAAqB,CAArB;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIsB,OAAO,GAAG,gBAAA,QAAA,EAA2B;EAC5C,OAAO,MAAMtB,QAAQ,CAArB,QAAqB,CAArB;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIuB,gBAAgB,GAAG,gBAAA,QAAA,EAA2B;EACrD,OAAO,MAAMvB,QAAQ,CAAE,cAAvB,QAAqB,CAArB;AADG,CAAA;AAIPI,OAAO,GAAG;EAAA,WAAA;EAAA,kBAAA;EAAA,kBAAA;EAAA,cAAA;EAAA,WAAA;EAAA,WAAA;EAAA,UAAA;EAAA,SAAA;EAAA,OAAA;EAUNmB;AAVM,CAAVnB;AAYA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/defaultIconProviderService\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport iconMapSvc from 'js/iconMapService';\nimport iconRepositoryService from 'js/iconRepositoryService';\nimport { getImageAliasFromId } from 'js/imageRegistry';\nimport { loadDynModule } from 'js/moduleLoader';\n\n/**\n * @private\n */\nvar _cache = {\n\n    /**\n     * Set of '&lt;SVG&gt;' and '&lt;IMG&gt;' HTML tags set with the \"aw-base-icon\" CSS class once an icon is used.\n     */\n    use: {}\n};\n\n/**\n * @private\n *\n * @param {String} key - key field within use object\n *\n * @return {String} string from use object per key field (or null)\n */\nfunction _getFromUseCache( key ) {\n    var result = _cache.use[ key ];\n    if( result ) {\n        return result;\n    }\n    return undefined;\n}\n\n/**\n * Returns the &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */\nconst _getIcon = async( name ) => {\n    /**\n     * Check if this is an alias name for the actual icon name.\n     */\n    var iconAlias = getImageAliasFromId( name );\n    if( iconAlias ) {\n        return loadDynModule( iconAlias ).then( result => result.svgString );\n    }\n    return null;\n};\n\nvar exports = {};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIcon = function( typeName ) {\n    /**\n     * Check if we have already prepared a tag for this icon to use.\n     */\n    var ret = _getFromUseCache( typeName );\n\n    if( ret ) {\n        return ret;\n    }\n\n    var typeIconFileName;\n\n    var modelType = cmm.getType( typeName );\n\n    if( modelType && modelType.constantsMap.typeIconFileName ) {\n        // If we already have the meta model cached, use the constant for the type icon filename.\n        typeIconFileName = modelType.constantsMap.IconFileName;\n    } else {\n        /**\n         * Check if this is an alias name for the actual icon name.\n         */\n        typeIconFileName = iconMapSvc.getTypeFileName( typeName );\n        if( !typeIconFileName ) {\n            return null;\n        }\n    }\n\n    return exports.getTypeIconFileTag( typeName, typeIconFileName );\n};\n\n/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconFileTag = function( typeName, typeIconFileName ) {\n    /**\n     * Build final tag and put into the 'use' cache to save some work in the future.\n     */\n    var iconTag = '<img class=\"aw-base-icon\" src=\"' + exports.getTypeIconFileUrl( typeIconFileName ) +\n        '\" draggable=\"false\" ondragstart=\"return false;\" alt=\"\" />';\n\n    _cache.use[ typeName ] = iconTag;\n\n    return iconTag;\n};\n\n/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconFileUrl = function( typeIconFileName ) {\n    return iconRepositoryService.getIconFileUrl( typeIconFileName );\n};\n\n/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */\nexport let getTypeIconURL = function( typeName ) {\n    var iconFileName;\n\n    var modelType = cmm.getType( typeName );\n    if( modelType && modelType.constantsMap.IconFileName ) {\n        iconFileName = modelType.constantsMap.IconFileName;\n    }\n\n    if( !iconFileName ) {\n        /**\n         * Check if this is an alias name for the actual icon name.\n         */\n        iconFileName = iconMapSvc.getTypeFileName( typeName );\n    }\n\n    if( !iconFileName ) {\n        return null;\n    }\n\n    /**\n     * Create the path to the deployed icon file.\n     */\n    return iconRepositoryService.getIconFileUrl( iconFileName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getTileIcon = async function( name ) {\n    return await _getIcon( 'home' + name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getMiscIcon = async function( name ) {\n    return await _getIcon( 'misc' + name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getCmdIcon = async function( name ) {\n    return await _getIcon( 'cmd' + name );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getAwIcon = async function( iconName ) {\n    return await _getIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getIcon = async function( iconName ) {\n    return await _getIcon( iconName );\n};\n\n/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */\nexport let getIndicatorIcon = async function( iconName ) {\n    return await _getIcon( 'indicator' + iconName );\n};\n\nexports = {\n    getTypeIcon,\n    getTypeIconFileTag,\n    getTypeIconFileUrl,\n    getTypeIconURL,\n    getTileIcon,\n    getMiscIcon,\n    getCmdIcon,\n    getAwIcon,\n    getIcon,\n    getIndicatorIcon\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
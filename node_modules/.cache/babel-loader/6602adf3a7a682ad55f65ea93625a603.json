{"ast":null,"code":"/* eslint-disable no-unused-vars */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do debugging.\n *\n * @module js/debugService\n *\n * @namespace debugService\n */\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport breakpointSvc from 'js/breakpointService';\nexport let debugActionStart = function (action, declViewModel, inputData) {\n  if (!logger.isDeclarativeLogEnabled() || action.actionType === 'Event') {\n    return;\n  } // action, declViewModel, $scope, inputData\n\n\n  var declTraceObject = {\n    type: 'action',\n    operation: 'start',\n    name: action.actionId,\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: action,\n      resolvedInput: inputData\n    }\n  };\n  logger.declarativeLog('DECLARATIVE TRACE - Action start : %O ', declTraceObject);\n};\n/** revisitme yogesh\n * No usage of context aka scope, refactor callers and get rid\n */\n\nexport let debugEventPub = function (action, event, declViewModel, context, eventDataToPublish) {\n  // action, event, declViewModel, $scope, eventDataToPublish\n  if (logger.isDeclarativeLogEnabled()) {\n    var viewModelName = declViewModel._internal ? declViewModel._internal.panelId : declViewModel.panelId;\n    var declTraceObject = {\n      type: 'event',\n      operation: 'publish',\n      name: event.name,\n      payload: {\n        viewModel: viewModelName,\n        def: action,\n        resolvedInput: eventDataToPublish && eventDataToPublish.scope ? {} : eventDataToPublish\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Event publish : %O ', declTraceObject);\n  }\n};\nexport let debugEventSub = function (eventDef, declViewModel, context, condition) {\n  // eventObj, declViewModel, context, isEventExecutable\n  var declTraceObject = {\n    type: 'event',\n    operation: 'subscribe',\n    name: eventDef.eventId,\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: eventDef,\n      condition: condition\n      /** revisitme\n       input: {\n          context: context && context.scope ? {} : context\n      }\n       */\n\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Event subscribe : %O ', declTraceObject);\n  }\n};\nexport let debugActionEnd = function (action, declViewModel, resolvedAssignments) {\n  if (!logger.isDeclarativeLogEnabled()) {\n    return;\n  } // action, declViewModel, dataCtxNode, actionResponseObj\n\n\n  var declTraceObject = {\n    type: 'action',\n    operation: 'complete',\n    name: action.actionId,\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: action,\n      resolvedOutput: resolvedAssignments\n    }\n  };\n  logger.declarativeLog('DECLARATIVE TRACE - Action end: %O ', declTraceObject);\n};\nexport let debugMessages = function (message, declViewModel, context) {\n  //\n  var declTraceObject = {\n    type: 'message',\n    payload: {\n      viewModel: declViewModel._internal.panelId,\n      def: message.messageDefn,\n      resolvedOutput: {\n        localizedMessage: message.localizedMessage,\n        messageData: message.messageData\n      }\n      /*input: {\n         context: context //LCS-585902 - Exceptions occurring when trying to pop a message via declaratively defined actionMessage Logging context gives infinite loop as context has complex structure\n       } */\n\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Messages: %O ', declTraceObject);\n  }\n};\nexport let debugLifecyleHooks = function (hookname, viewModel) {\n  let observerObjs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var declTraceObject = {\n    type: 'lifecycleHook',\n    operation: hookname,\n    payload: {\n      viewModel: viewModel._internal.panelId\n    }\n  };\n\n  if (hookname === 'onUpdate') {\n    let lifecycleHooks = { ...viewModel.declViewModelJson.lifecycleHooks.onUpdate\n    };\n\n    if (lifecycleHooks.observers) {\n      let observerMap = {};\n      lifecycleHooks.observers.forEach((observer, indx) => {\n        observerMap[observer] = observerObjs && observerObjs.length ? observerObjs[indx] : null;\n      });\n      declTraceObject.payload.observers = observerMap;\n    }\n  }\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Lifecycle Hook: %O ', declTraceObject);\n  }\n};\nexport let debugViewAndViewModel = function (operation, viewName, declViewModel, subpanelContext) {\n  /*\n   * type is 'contentUnloaded' // when view and VM destroy\n   * type is 'contentLoaded' // when view and VM rendered\n   */\n  var declTraceObject = {\n    type: 'viewAndViewModel',\n    operation: operation,\n    payload: {\n      viewModel: viewName,\n      input: {\n        subPanelContext: subpanelContext\n      }\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - View and ViewModel ' + operation + ': %O ', declTraceObject);\n  }\n};\nexport let debugGetCommandsForAnchor = function (uiAnchor, commands) {\n  if (uiAnchor && logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'command',\n      operation: 'contributedCommands',\n      payload: {\n        viewModel: 'commandsViewModel',\n        anchorName: uiAnchor,\n        commandsOnAchor: commands\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - All commands against anchor : %O ', declTraceObject);\n  }\n};\nexport let debugUpdateHandlerOnCommand = function (commandId, handler) {\n  if (logger.isDeclarativeLogEnabled() && commandId && handler && !_.isEmpty(handler)) {\n    var declTraceObject = {\n      type: 'command',\n      operation: 'activeHandler',\n      payload: {\n        viewModel: 'commandsViewModel',\n        commandId: commandId,\n        handler: handler\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Update Handler : %O ', declTraceObject);\n  }\n};\nexport let debugCommandRender = function (command, result) {\n  if (logger.isDeclarativeLogEnabled() && command && result && !_.isEmpty(command) && !_.isEmpty(result)) {\n    var declTraceObject = {\n      type: 'command',\n      operation: 'commandRender',\n      payload: {\n        viewModel: 'commandsViewModel',\n        commandId: command.id,\n        command: command,\n        renderResult: result\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Command Render : %O ', declTraceObject);\n  }\n};\nexport let debugPreProcessingDataParser = function (sourceObj, declViewModel, dataParserDef, dataCtxNode) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataParser',\n      operation: 'preProcessing',\n      payload: {\n        viewModel: declViewModel._internal.panelId,\n        def: dataParserDef\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Pre processing of DataParser: %O ', declTraceObject);\n  }\n};\nexport let debugPostProcessingDataParser = function (processedSourceObj, declViewModel, dataParserDef, dataCtxNode) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataParser',\n      operation: 'postProcessing',\n      payload: {\n        viewModel: declViewModel._internal.panelId,\n        def: dataParserDef,\n        resolvedIput: processedSourceObj\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - post processing of DataParser: %O ', declTraceObject);\n  }\n};\nexport let debugDataProviderInitialize = function (dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction, resolvedInput) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataProvider',\n      operation: 'Initialize',\n      name: dataProvider.name,\n      payload: {\n        /** revisitme\n        viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n        */\n        def: dataProviderDef,\n        action: dataProvierAction,\n        resolvedIput: resolvedInput\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - Initialize of Dataprovider: %O ', declTraceObject);\n  }\n};\nexport let debugDataProviderNextPage = function (dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction) {\n  if (logger.isDeclarativeLogEnabled()) {\n    var declTraceObject = {\n      type: 'dataProvider',\n      operation: 'NextPage',\n      name: dataProvider.name,\n      payload: {\n        /** revisitme\n        viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n        */\n        def: dataProviderDef,\n        action: dataProvierAction\n      }\n    };\n    logger.declarativeLog('DECLARATIVE TRACE - NextPage of Dataprovider: %O ', declTraceObject);\n  }\n};\nexport let debugConditions = function (conditionName, conditionState, conditionExp, declViewModel) {\n  var declTraceObject = {\n    type: 'conditions',\n    payload: {\n      viewModel: declViewModel,\n      conditionName: conditionName,\n      expression: conditionExp,\n      conditionState: conditionState\n    }\n  };\n\n  if (logger.isDeclarativeLogEnabled()) {\n    logger.declarativeLog('DECLARATIVE TRACE - Conditions: %O ', declTraceObject);\n  }\n};\n/**\n *\n * @param {*} arguments[0] type of the breakpoint\n *\n */\n\nexport let debug = function () {\n  try {\n    if (!logger.isDeclarativeLogEnabled()) {\n      return;\n    }\n\n    let brkPointType = arguments[0];\n\n    if (breakpointSvc.hasConditionSatisfied(brkPointType, arguments[1], arguments[2], arguments[3])) {\n      // eslint-disable-next-line no-debugger\n      debugger;\n    }\n\n    if (brkPointType === 'actions') {\n      switch (arguments[3]) {\n        case 'pre':\n          debugActionStart(arguments[4], arguments[5], arguments[6]);\n          break;\n\n        case 'post':\n          debugActionEnd(arguments[4], arguments[5], arguments[6]);\n          break;\n\n        case 'default':\n          //do nothing\n          break;\n      }\n    } // eslint-disable-next-line no-empty\n\n  } catch (e) {}\n};\n\nlet printData = result => {\n  result.map(entry => {\n    entry.children.map(child => {\n      child.handlers.map(handler => {\n        logger.declarativeLog(' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + child.id + '~' + handler.id + '~' + handler.activeWhen + '~' + handler.visibleWhen);\n      });\n    });\n\n    if (entry.children.length === 0) {\n      entry.handlers.map(handler => {\n        logger.declarativeLog(' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + undefined + '~' + handler.id + '~' + handler.activeWhen + '~' + handler.visibleWhen);\n      });\n    }\n  });\n};\n\nconst procesHandler = handler => {\n  let singleHandler = {};\n  singleHandler.id = handler.id;\n\n  if (handler.activeWhen) {\n    if (_.isObject(handler.activeWhen.expression)) {\n      singleHandler.activeWhen = JSON.stringify(handler.activeWhen.expression);\n    } else {\n      singleHandler.activeWhen = handler.activeWhen.expression;\n    }\n  }\n\n  if (handler.visibleWhen) {\n    if (_.isObject(handler.visibleWhen.expression)) {\n      singleHandler.visibleWhen = JSON.stringify(handler.visibleWhen.expression);\n    } else {\n      singleHandler.visibleWhen = handler.visibleWhen.expression;\n    }\n  }\n\n  return singleHandler;\n};\n\nexport const reduceData = (anchor, data) => {\n  if (logger.isDeclarativeLogEnabled()) {\n    let result = [];\n    data.map(obj => {\n      let singleResult = {\n        anchor,\n        id: '',\n        type: '',\n        children: [],\n        handlers: []\n      };\n\n      for (let key in obj) {\n        if (key === 'id') {\n          singleResult.id = obj.id;\n        }\n\n        if (key === 'type') {\n          singleResult.type = obj.type;\n        }\n\n        if (key === 'children') {\n          obj.children.map(child => {\n            let singleChild = {\n              id: '',\n              handlers: []\n            };\n            singleChild.id = child.id;\n            child.handlers.map(handler => {\n              singleChild.handlers.push(procesHandler(handler));\n            });\n            singleResult.children.push(singleChild);\n          });\n        }\n\n        if (key === 'handlers') {\n          obj.handlers.map(handler => {\n            singleResult.handlers.push(procesHandler(handler));\n          });\n        }\n      }\n\n      result.push(singleResult);\n    });\n    printData(result);\n  }\n};\nexport default {\n  debugActionStart,\n  debugEventPub,\n  debugEventSub,\n  debugActionEnd,\n  debugMessages,\n  debugLifecyleHooks,\n  debugViewAndViewModel,\n  debugGetCommandsForAnchor,\n  debugCommandRender,\n  debugUpdateHandlerOnCommand,\n  debugPreProcessingDataParser,\n  debugPostProcessingDataParser,\n  debugDataProviderNextPage,\n  debugDataProviderInitialize,\n  debugConditions,\n  debug,\n  reduceData\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/debugService.js"],"names":["debugActionStart","logger","action","declTraceObject","type","operation","name","payload","viewModel","declViewModel","def","resolvedInput","inputData","debugEventPub","viewModelName","event","eventDataToPublish","debugEventSub","eventDef","condition","debugActionEnd","resolvedOutput","resolvedAssignments","debugMessages","message","localizedMessage","messageData","debugLifecyleHooks","observerObjs","panelId","hookname","lifecycleHooks","onUpdate","observerMap","debugViewAndViewModel","input","subPanelContext","subpanelContext","debugGetCommandsForAnchor","uiAnchor","anchorName","commandsOnAchor","commands","debugUpdateHandlerOnCommand","_","commandId","handler","debugCommandRender","command","renderResult","result","debugPreProcessingDataParser","dataParserDef","debugPostProcessingDataParser","resolvedIput","processedSourceObj","debugDataProviderInitialize","dataProvider","debugDataProviderNextPage","dataProvierAction","debugConditions","conditionName","expression","conditionState","debug","brkPointType","arguments","breakpointSvc","printData","entry","child","procesHandler","singleHandler","JSON","reduceData","data","obj","singleResult","id","children","handlers","key","singleChild"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,aAAA,MAAA,sBAAA;AAEA,OAAO,IAAIA,gBAAgB,GAAG,UAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAA6C;EACvE,IAAI,CAACC,MAAM,CAAP,uBAACA,EAAD,IAAqCC,MAAM,CAANA,UAAAA,KAAzC,OAAA,EAAyE;IACrE;EAFmE,CAAA,CAIvE;;;EACA,IAAIC,eAAe,GAAG;IAClBC,IAAI,EADc,QAAA;IAElBC,SAAS,EAFS,OAAA;IAGlBC,IAAI,EAAEJ,MAAM,CAHM,QAAA;IAIlBK,OAAO,EAAE;MACLC,SAAS,EAAEC,aAAa,CAAbA,SAAAA,CADN,OAAA;MAELC,GAAG,EAFE,MAAA;MAGLC,aAAa,EAAEC;IAHV;EAJS,CAAtB;EAUAX,MAAM,CAANA,cAAAA,CAAAA,wCAAAA,EAAAA,eAAAA;AAfG,CAAA;AAiBP;AACA;AACA;;AACA,OAAO,IAAIY,aAAa,GAAG,UAAA,MAAA,EAAA,KAAA,EAAA,aAAA,EAAA,OAAA,EAAA,kBAAA,EAAsE;EAC7F;EACA,IAAIZ,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnC,IAAIa,aAAa,GAAGL,aAAa,CAAbA,SAAAA,GAA0BA,aAAa,CAAbA,SAAAA,CAA1BA,OAAAA,GAA4DA,aAAa,CAA7F,OAAA;IACA,IAAIN,eAAe,GAAG;MAClBC,IAAI,EADc,OAAA;MAElBC,SAAS,EAFS,SAAA;MAGlBC,IAAI,EAAES,KAAK,CAHO,IAAA;MAIlBR,OAAO,EAAE;QACLC,SAAS,EADJ,aAAA;QAELE,GAAG,EAFE,MAAA;QAGLC,aAAa,EAAEK,kBAAkB,IAAIA,kBAAkB,CAAxCA,KAAAA,GAAAA,EAAAA,GAAsDA;MAHhE;IAJS,CAAtB;IAUAf,MAAM,CAANA,cAAAA,CAAAA,yCAAAA,EAAAA,eAAAA;EACH;AAfE,CAAA;AAkBP,OAAO,IAAIgB,aAAa,GAAG,UAAA,QAAA,EAAA,aAAA,EAAA,OAAA,EAAA,SAAA,EAAwD;EAC/E;EACA,IAAId,eAAe,GAAG;IAClBC,IAAI,EADc,OAAA;IAElBC,SAAS,EAFS,WAAA;IAGlBC,IAAI,EAAEY,QAAQ,CAHI,OAAA;IAIlBX,OAAO,EAAE;MACLC,SAAS,EAAEC,aAAa,CAAbA,SAAAA,CADN,OAAA;MAELC,GAAG,EAFE,QAAA;MAGLS,SAAS,EAAEA;MACX;AACZ;AACA;AACA;AACA;;IARiB;EAJS,CAAtB;;EAiBA,IAAIlB,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnCA,MAAM,CAANA,cAAAA,CAAAA,2CAAAA,EAAAA,eAAAA;EACH;AArBE,CAAA;AAwBP,OAAO,IAAImB,cAAc,GAAG,UAAA,MAAA,EAAA,aAAA,EAAA,mBAAA,EAAuD;EAC/E,IAAI,CAACnB,MAAM,CAAX,uBAAKA,EAAL,EAAwC;IACpC;EAF2E,CAAA,CAI/E;;;EACA,IAAIE,eAAe,GAAG;IAClBC,IAAI,EADc,QAAA;IAElBC,SAAS,EAFS,UAAA;IAGlBC,IAAI,EAAEJ,MAAM,CAHM,QAAA;IAIlBK,OAAO,EAAE;MACLC,SAAS,EAAEC,aAAa,CAAbA,SAAAA,CADN,OAAA;MAELC,GAAG,EAFE,MAAA;MAGLW,cAAc,EAAEC;IAHX;EAJS,CAAtB;EAUArB,MAAM,CAANA,cAAAA,CAAAA,qCAAAA,EAAAA,eAAAA;AAfG,CAAA;AAkBP,OAAO,IAAIsB,aAAa,GAAG,UAAA,OAAA,EAAA,aAAA,EAAA,OAAA,EAA4C;EACnE;EACA,IAAIpB,eAAe,GAAG;IAClBC,IAAI,EADc,SAAA;IAElBG,OAAO,EAAE;MACLC,SAAS,EAAEC,aAAa,CAAbA,SAAAA,CADN,OAAA;MAELC,GAAG,EAAEc,OAAO,CAFP,WAAA;MAGLH,cAAc,EAAE;QAAEI,gBAAgB,EAAED,OAAO,CAA3B,gBAAA;QAA8CE,WAAW,EAAEF,OAAO,CAACE;MAAnE;MAChB;AACZ;AACA;;IANiB;EAFS,CAAtB;;EAWA,IAAIzB,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnCA,MAAM,CAANA,cAAAA,CAAAA,mCAAAA,EAAAA,eAAAA;EACH;AAfE,CAAA;AAkBP,OAAO,IAAI0B,kBAAkB,GAAG,UAAA,QAAA,EAAA,SAAA,EAAqD;EAAA,IAAtBC,YAAsB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,IAAO;EACjF,IAAIzB,eAAe,GAAG;IAClBC,IAAI,EADc,eAAA;IAElBC,SAAS,EAFS,QAAA;IAGlBE,OAAO,EAAE;MACLC,SAAS,EAAEA,SAAS,CAATA,SAAAA,CAAoBqB;IAD1B;EAHS,CAAtB;;EAOA,IAAIC,QAAQ,KAAZ,UAAA,EAA8B;IAC1B,IAAIC,cAAc,GAAG,EAAE,GAAGvB,SAAS,CAATA,iBAAAA,CAAAA,cAAAA,CAA2CwB;IAAhD,CAArB;;IACA,IAAID,cAAc,CAAlB,SAAA,EAA+B;MAC3B,IAAIE,WAAW,GAAf,EAAA;MACAF,cAAc,CAAdA,SAAAA,CAAAA,OAAAA,CAAkC,CAAA,QAAA,EAAA,IAAA,KAAsB;QACpDE,WAAW,CAAXA,QAAW,CAAXA,GAA0BL,YAAY,IAAIA,YAAY,CAA5BA,MAAAA,GAAsCA,YAAY,CAAlDA,IAAkD,CAAlDA,GAA1BK,IAAAA;MADJF,CAAAA;MAGA5B,eAAe,CAAfA,OAAAA,CAAAA,SAAAA,GAAAA,WAAAA;IACH;EACJ;;EACD,IAAIF,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnCA,MAAM,CAANA,cAAAA,CAAAA,yCAAAA,EAAAA,eAAAA;EACH;AApBE,CAAA;AAuBP,OAAO,IAAIiC,qBAAqB,GAAG,UAAA,SAAA,EAAA,QAAA,EAAA,aAAA,EAAA,eAAA,EAAgE;EAC/F;AACJ;AACA;AACA;EACI,IAAI/B,eAAe,GAAG;IAClBC,IAAI,EADc,kBAAA;IAElBC,SAAS,EAFS,SAAA;IAGlBE,OAAO,EAAE;MACLC,SAAS,EADJ,QAAA;MAEL2B,KAAK,EAAE;QACHC,eAAe,EAAEC;MADd;IAFF;EAHS,CAAtB;;EAUA,IAAIpC,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnCA,MAAM,CAANA,cAAAA,CAAuB,4CAAA,SAAA,GAAvBA,OAAAA,EAAAA,eAAAA;EACH;AAjBE,CAAA;AAoBP,OAAO,IAAIqC,yBAAyB,GAAG,UAAA,QAAA,EAAA,QAAA,EAA+B;EAClE,IAAIC,QAAQ,IAAItC,MAAM,CAAtB,uBAAgBA,EAAhB,EAAmD;IAC/C,IAAIE,eAAe,GAAG;MAClBC,IAAI,EADc,SAAA;MAElBC,SAAS,EAFS,qBAAA;MAGlBE,OAAO,EAAE;QACLC,SAAS,EADJ,mBAAA;QAELgC,UAAU,EAFL,QAAA;QAGLC,eAAe,EAAEC;MAHZ;IAHS,CAAtB;IASAzC,MAAM,CAANA,cAAAA,CAAAA,uDAAAA,EAAAA,eAAAA;EACH;AAZE,CAAA;AAeP,OAAO,IAAI0C,2BAA2B,GAAG,UAAA,SAAA,EAAA,OAAA,EAA+B;EACpE,IAAI1C,MAAM,CAANA,uBAAAA,MAAAA,SAAAA,IAAAA,OAAAA,IAA4D,CAAC2C,CAAC,CAADA,OAAAA,CAAjE,OAAiEA,CAAjE,EAAwF;IACpF,IAAIzC,eAAe,GAAG;MAClBC,IAAI,EADc,SAAA;MAElBC,SAAS,EAFS,eAAA;MAGlBE,OAAO,EAAE;QACLC,SAAS,EADJ,mBAAA;QAELqC,SAAS,EAFJ,SAAA;QAGLC,OAAO,EAAEA;MAHJ;IAHS,CAAtB;IASA7C,MAAM,CAANA,cAAAA,CAAAA,0CAAAA,EAAAA,eAAAA;EACH;AAZE,CAAA;AAeP,OAAO,IAAI8C,kBAAkB,GAAG,UAAA,OAAA,EAAA,MAAA,EAA4B;EACxD,IAAI9C,MAAM,CAANA,uBAAAA,MAAAA,OAAAA,IAAAA,MAAAA,IAAyD,CAAC2C,CAAC,CAADA,OAAAA,CAA1D3C,OAA0D2C,CAA1D3C,IAAkF,CAAC2C,CAAC,CAADA,OAAAA,CAAvF,MAAuFA,CAAvF,EAA6G;IACzG,IAAIzC,eAAe,GAAG;MAClBC,IAAI,EADc,SAAA;MAElBC,SAAS,EAFS,eAAA;MAGlBE,OAAO,EAAE;QACLC,SAAS,EADJ,mBAAA;QAELqC,SAAS,EAAEG,OAAO,CAFb,EAAA;QAGLA,OAAO,EAHF,OAAA;QAILC,YAAY,EAAEC;MAJT;IAHS,CAAtB;IAUAjD,MAAM,CAANA,cAAAA,CAAAA,0CAAAA,EAAAA,eAAAA;EACH;AAbE,CAAA;AAgBP,OAAO,IAAIkD,4BAA4B,GAAG,UAAA,SAAA,EAAA,aAAA,EAAA,aAAA,EAAA,WAAA,EAAiE;EACvG,IAAIlD,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnC,IAAIE,eAAe,GAAG;MAClBC,IAAI,EADc,YAAA;MAElBC,SAAS,EAFS,eAAA;MAGlBE,OAAO,EAAE;QACLC,SAAS,EAAEC,aAAa,CAAbA,SAAAA,CADN,OAAA;QAELC,GAAG,EAAE0C;MAFA;IAHS,CAAtB;IAQAnD,MAAM,CAANA,cAAAA,CAAAA,uDAAAA,EAAAA,eAAAA;EACH;AAXE,CAAA;AAcP,OAAO,IAAIoD,6BAA6B,GAAG,UAAA,kBAAA,EAAA,aAAA,EAAA,aAAA,EAAA,WAAA,EAA0E;EACjH,IAAIpD,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnC,IAAIE,eAAe,GAAG;MAClBC,IAAI,EADc,YAAA;MAElBC,SAAS,EAFS,gBAAA;MAGlBE,OAAO,EAAE;QACLC,SAAS,EAAEC,aAAa,CAAbA,SAAAA,CADN,OAAA;QAELC,GAAG,EAFE,aAAA;QAGL4C,YAAY,EAAEC;MAHT;IAHS,CAAtB;IASAtD,MAAM,CAANA,cAAAA,CAAAA,wDAAAA,EAAAA,eAAAA;EACH;AAZE,CAAA;AAeP,OAAO,IAAIuD,2BAA2B,GAAG,UAAA,YAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,OAAA,EAAA,sBAAA,EAAA,aAAA,EAA6G;EAClJ,IAAIvD,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnC,IAAIE,eAAe,GAAG;MAClBC,IAAI,EADc,cAAA;MAElBC,SAAS,EAFS,YAAA;MAGlBC,IAAI,EAAEmD,YAAY,CAHA,IAAA;MAIlBlD,OAAO,EAAE;QACL;AAChB;AACA;QACgBG,GAAG,EAJE,eAAA;QAKLR,MAAM,EALD,iBAAA;QAMLoD,YAAY,EAAE3C;MANT;IAJS,CAAtB;IAaAV,MAAM,CAANA,cAAAA,CAAAA,qDAAAA,EAAAA,eAAAA;EACH;AAhBE,CAAA;AAmBP,OAAO,IAAIyD,yBAAyB,GAAG,UAAA,YAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,OAAA,EAAA,sBAAA,EAA8F;EACjI,IAAIzD,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnC,IAAIE,eAAe,GAAG;MAClBC,IAAI,EADc,cAAA;MAElBC,SAAS,EAFS,UAAA;MAGlBC,IAAI,EAAEmD,YAAY,CAHA,IAAA;MAIlBlD,OAAO,EAAE;QACL;AAChB;AACA;QACgBG,GAAG,EAJE,eAAA;QAKLR,MAAM,EAAEyD;MALH;IAJS,CAAtB;IAYA1D,MAAM,CAANA,cAAAA,CAAAA,mDAAAA,EAAAA,eAAAA;EACH;AAfE,CAAA;AAkBP,OAAO,IAAI2D,eAAe,GAAG,UAAA,aAAA,EAAA,cAAA,EAAA,YAAA,EAAA,aAAA,EAAuE;EAChG,IAAIzD,eAAe,GAAG;IAClBC,IAAI,EADc,YAAA;IAElBG,OAAO,EAAE;MACLC,SAAS,EADJ,aAAA;MAELqD,aAAa,EAFR,aAAA;MAGLC,UAAU,EAHL,YAAA;MAILC,cAAc,EAAEA;IAJX;EAFS,CAAtB;;EASA,IAAI9D,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnCA,MAAM,CAANA,cAAAA,CAAAA,qCAAAA,EAAAA,eAAAA;EACH;AAZE,CAAA;AAeP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI+D,KAAK,GAAG,YAAW;EAC1B,IAAI;IACA,IAAI,CAAC/D,MAAM,CAAX,uBAAKA,EAAL,EAAwC;MACpC;IACH;;IAED,IAAIgE,YAAY,GAAGC,SAAS,CAA5B,CAA4B,CAA5B;;IAEA,IAAIC,aAAa,CAAbA,qBAAAA,CAAAA,YAAAA,EAAmDD,SAAS,CAA5DC,CAA4D,CAA5DA,EAAmED,SAAS,CAA5EC,CAA4E,CAA5EA,EAAmFD,SAAS,CAAhG,CAAgG,CAA5FC,CAAJ,EAA0G;MACtG;MACA;IACH;;IAED,IAAIF,YAAY,KAAhB,SAAA,EAAiC;MAC7B,QAASC,SAAS,CAAlB,CAAkB,CAAlB;QACI,KAAA,KAAA;UACIlE,gBAAgB,CAAEkE,SAAS,CAAX,CAAW,CAAX,EAAkBA,SAAS,CAA3B,CAA2B,CAA3B,EAAkCA,SAAS,CAA3DlE,CAA2D,CAA3C,CAAhBA;UACA;;QACJ,KAAA,MAAA;UACIoB,cAAc,CAAE8C,SAAS,CAAX,CAAW,CAAX,EAAkBA,SAAS,CAA3B,CAA2B,CAA3B,EAAkCA,SAAS,CAAzD9C,CAAyD,CAA3C,CAAdA;UACA;;QACJ,KAAA,SAAA;UAAgB;UACZ;MARR;IAbJ,CAAA,CAwBA;;EAxBJ,CAAA,CAyBE,OAAA,CAAA,EAAY,CAAE;AA1Bb,CAAA;;AA6BP,IAAIgD,SAAS,GAAGlB,MAAM,IAAI;EACtBA,MAAM,CAANA,GAAAA,CAAcmB,KAAF,IAAa;IACrBA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAsBC,KAAF,IAAa;MAC7BA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAsBxB,OAAF,IAAe;QAC/B7C,MAAM,CAANA,cAAAA,CAAuB,MAAA,GAAA,GAAYoE,KAAK,CAAjB,MAAA,GAAA,GAAA,GAAiCA,KAAK,CAAtC,EAAA,GAAA,GAAA,GAAkDA,KAAK,CAAvD,IAAA,GAAA,GAAA,GAAqEC,KAAK,CAA1E,EAAA,GAAA,GAAA,GAAsFxB,OAAO,CAA7F,EAAA,GAAA,GAAA,GAAyGA,OAAO,CAAhH,UAAA,GAAA,GAAA,GAAoIA,OAAO,CAAlK7C,WAAAA;MADJqE,CAAAA;IADJD,CAAAA;;IAOA,IAAIA,KAAK,CAALA,QAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAkC;MAC9BA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAsBvB,OAAF,IAAe;QAC/B7C,MAAM,CAANA,cAAAA,CAAuB,MAAA,GAAA,GAAYoE,KAAK,CAAjB,MAAA,GAAA,GAAA,GAAiCA,KAAK,CAAtC,EAAA,GAAA,GAAA,GAAkDA,KAAK,CAAvD,IAAA,GAAA,GAAA,GAAA,SAAA,GAAA,GAAA,GAAuFvB,OAAO,CAA9F,EAAA,GAAA,GAAA,GAA0GA,OAAO,CAAjH,UAAA,GAAA,GAAA,GAAqIA,OAAO,CAAnK7C,WAAAA;MADJoE,CAAAA;IAGH;EAZLnB,CAAAA;AADJ,CAAA;;AAiBA,MAAMqB,aAAa,GAAGzB,OAAO,IAAI;EAC7B,IAAI0B,aAAa,GAAjB,EAAA;EACAA,aAAa,CAAbA,EAAAA,GAAmB1B,OAAO,CAA1B0B,EAAAA;;EACA,IAAI1B,OAAO,CAAX,UAAA,EAAyB;IACrB,IAAIF,CAAC,CAADA,QAAAA,CAAYE,OAAO,CAAPA,UAAAA,CAAhB,UAAIF,CAAJ,EAAkD;MAC9C4B,aAAa,CAAbA,UAAAA,GAA2BC,IAAI,CAAJA,SAAAA,CAAgB3B,OAAO,CAAPA,UAAAA,CAA3C0B,UAA2BC,CAA3BD;IADJ,CAAA,MAEO;MACHA,aAAa,CAAbA,UAAAA,GAA2B1B,OAAO,CAAPA,UAAAA,CAA3B0B,UAAAA;IACH;EACJ;;EACD,IAAI1B,OAAO,CAAX,WAAA,EAA0B;IACtB,IAAIF,CAAC,CAADA,QAAAA,CAAYE,OAAO,CAAPA,WAAAA,CAAhB,UAAIF,CAAJ,EAAmD;MAC/C4B,aAAa,CAAbA,WAAAA,GAA4BC,IAAI,CAAJA,SAAAA,CAAgB3B,OAAO,CAAPA,WAAAA,CAA5C0B,UAA4BC,CAA5BD;IADJ,CAAA,MAEO;MACHA,aAAa,CAAbA,WAAAA,GAA4B1B,OAAO,CAAPA,WAAAA,CAA5B0B,UAAAA;IACH;EACJ;;EACD,OAAA,aAAA;AAjBJ,CAAA;;AAoBA,OAAO,MAAME,UAAU,GAAG,CAAA,MAAA,EAAA,IAAA,KAAoB;EAC1C,IAAIzE,MAAM,CAAV,uBAAIA,EAAJ,EAAuC;IACnC,IAAIiD,MAAM,GAAV,EAAA;IACAyB,IAAI,CAAJA,GAAAA,CAAYC,GAAF,IAAW;MACjB,IAAIC,YAAY,GAAG;QAAA,MAAA;QAEfC,EAAE,EAFa,EAAA;QAGf1E,IAAI,EAHW,EAAA;QAIf2E,QAAQ,EAJO,EAAA;QAKfC,QAAQ,EAAE;MALK,CAAnB;;MAOA,KAAK,IAAL,GAAA,IAAA,GAAA,EAAsB;QAClB,IAAIC,GAAG,KAAP,IAAA,EAAmB;UACfJ,YAAY,CAAZA,EAAAA,GAAkBD,GAAG,CAArBC,EAAAA;QACH;;QACD,IAAII,GAAG,KAAP,MAAA,EAAqB;UACjBJ,YAAY,CAAZA,IAAAA,GAAoBD,GAAG,CAAvBC,IAAAA;QACH;;QACD,IAAII,GAAG,KAAP,UAAA,EAAyB;UACrBL,GAAG,CAAHA,QAAAA,CAAAA,GAAAA,CAAoBN,KAAF,IAAa;YAC3B,IAAIY,WAAW,GAAG;cACdJ,EAAE,EADY,EAAA;cAEdE,QAAQ,EAAE;YAFI,CAAlB;YAIAE,WAAW,CAAXA,EAAAA,GAAiBZ,KAAK,CAAtBY,EAAAA;YACAZ,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAsBxB,OAAF,IAAe;cAC/BoC,WAAW,CAAXA,QAAAA,CAAAA,IAAAA,CAA2BX,aAAa,CAAxCW,OAAwC,CAAxCA;YADJZ,CAAAA;YAGAO,YAAY,CAAZA,QAAAA,CAAAA,IAAAA,CAAAA,WAAAA;UATJD,CAAAA;QAWH;;QACD,IAAIK,GAAG,KAAP,UAAA,EAAyB;UACrBL,GAAG,CAAHA,QAAAA,CAAAA,GAAAA,CAAoB9B,OAAF,IAAe;YAC7B+B,YAAY,CAAZA,QAAAA,CAAAA,IAAAA,CAA4BN,aAAa,CAAzCM,OAAyC,CAAzCA;UADJD,CAAAA;QAGH;MACJ;;MACD1B,MAAM,CAANA,IAAAA,CAAAA,YAAAA;IAlCJyB,CAAAA;IAoCAP,SAAS,CAATA,MAAS,CAATA;EACH;AAxCE,CAAA;AA2CP,eAAe;EAAA,gBAAA;EAAA,aAAA;EAAA,aAAA;EAAA,cAAA;EAAA,aAAA;EAAA,kBAAA;EAAA,qBAAA;EAAA,yBAAA;EAAA,kBAAA;EAAA,2BAAA;EAAA,4BAAA;EAAA,6BAAA;EAAA,yBAAA;EAAA,2BAAA;EAAA,eAAA;EAAA,KAAA;EAiBXM;AAjBW,CAAf","sourcesContent":["/* eslint-disable no-unused-vars */\n// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do debugging.\n *\n * @module js/debugService\n *\n * @namespace debugService\n */\n\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport breakpointSvc from 'js/breakpointService';\n\nexport let debugActionStart = function( action, declViewModel, inputData ) {\n    if( !logger.isDeclarativeLogEnabled() || action.actionType === 'Event' ) {\n        return;\n    }\n    // action, declViewModel, $scope, inputData\n    var declTraceObject = {\n        type: 'action',\n        operation: 'start',\n        name: action.actionId,\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: action,\n            resolvedInput: inputData\n        }\n    };\n    logger.declarativeLog( 'DECLARATIVE TRACE - Action start : %O ', declTraceObject );\n};\n/** revisitme yogesh\n * No usage of context aka scope, refactor callers and get rid\n */\nexport let debugEventPub = function( action, event, declViewModel, context, eventDataToPublish ) {\n    // action, event, declViewModel, $scope, eventDataToPublish\n    if( logger.isDeclarativeLogEnabled() ) {\n        var viewModelName = declViewModel._internal ? declViewModel._internal.panelId : declViewModel.panelId;\n        var declTraceObject = {\n            type: 'event',\n            operation: 'publish',\n            name: event.name,\n            payload: {\n                viewModel: viewModelName,\n                def: action,\n                resolvedInput: eventDataToPublish && eventDataToPublish.scope ? {} : eventDataToPublish\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Event publish : %O ', declTraceObject );\n    }\n};\n\nexport let debugEventSub = function( eventDef, declViewModel, context, condition ) {\n    // eventObj, declViewModel, context, isEventExecutable\n    var declTraceObject = {\n        type: 'event',\n        operation: 'subscribe',\n        name: eventDef.eventId,\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: eventDef,\n            condition: condition\n            /** revisitme\n             input: {\n                context: context && context.scope ? {} : context\n            }\n             */\n\n        }\n    };\n\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Event subscribe : %O ', declTraceObject );\n    }\n};\n\nexport let debugActionEnd = function( action, declViewModel, resolvedAssignments ) {\n    if( !logger.isDeclarativeLogEnabled() ) {\n        return;\n    }\n    // action, declViewModel, dataCtxNode, actionResponseObj\n    var declTraceObject = {\n        type: 'action',\n        operation: 'complete',\n        name: action.actionId,\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: action,\n            resolvedOutput: resolvedAssignments\n        }\n    };\n    logger.declarativeLog( 'DECLARATIVE TRACE - Action end: %O ', declTraceObject );\n};\n\nexport let debugMessages = function( message, declViewModel, context ) {\n    //\n    var declTraceObject = {\n        type: 'message',\n        payload: {\n            viewModel: declViewModel._internal.panelId,\n            def: message.messageDefn,\n            resolvedOutput: { localizedMessage: message.localizedMessage, messageData: message.messageData }\n            /*input: {\n               context: context //LCS-585902 - Exceptions occurring when trying to pop a message via declaratively defined actionMessage Logging context gives infinite loop as context has complex structure\n             } */\n        }\n    };\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Messages: %O ', declTraceObject );\n    }\n};\n\nexport let debugLifecyleHooks = function( hookname, viewModel, observerObjs = null ) {\n    var declTraceObject = {\n        type: 'lifecycleHook',\n        operation: hookname,\n        payload: {\n            viewModel: viewModel._internal.panelId\n        }\n    };\n    if( hookname === 'onUpdate' ) {\n        let lifecycleHooks = { ...viewModel.declViewModelJson.lifecycleHooks.onUpdate };\n        if( lifecycleHooks.observers ) {\n            let observerMap = {};\n            lifecycleHooks.observers.forEach( ( observer, indx ) => {\n                observerMap[ observer ] = observerObjs && observerObjs.length ? observerObjs[ indx ] : null;\n            } );\n            declTraceObject.payload.observers = observerMap;\n        }\n    }\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Lifecycle Hook: %O ', declTraceObject );\n    }\n};\n\nexport let debugViewAndViewModel = function( operation, viewName, declViewModel, subpanelContext ) {\n    /*\n     * type is 'contentUnloaded' // when view and VM destroy\n     * type is 'contentLoaded' // when view and VM rendered\n     */\n    var declTraceObject = {\n        type: 'viewAndViewModel',\n        operation: operation,\n        payload: {\n            viewModel: viewName,\n            input: {\n                subPanelContext: subpanelContext\n            }\n        }\n    };\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - View and ViewModel ' + operation + ': %O ', declTraceObject );\n    }\n};\n\nexport let debugGetCommandsForAnchor = function( uiAnchor, commands ) {\n    if( uiAnchor && logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'command',\n            operation: 'contributedCommands',\n            payload: {\n                viewModel: 'commandsViewModel',\n                anchorName: uiAnchor,\n                commandsOnAchor: commands\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - All commands against anchor : %O ', declTraceObject );\n    }\n};\n\nexport let debugUpdateHandlerOnCommand = function( commandId, handler ) {\n    if( logger.isDeclarativeLogEnabled() && commandId && handler && !_.isEmpty( handler ) ) {\n        var declTraceObject = {\n            type: 'command',\n            operation: 'activeHandler',\n            payload: {\n                viewModel: 'commandsViewModel',\n                commandId: commandId,\n                handler: handler\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Update Handler : %O ', declTraceObject );\n    }\n};\n\nexport let debugCommandRender = function( command, result ) {\n    if( logger.isDeclarativeLogEnabled() && command && result && !_.isEmpty( command ) && !_.isEmpty( result ) ) {\n        var declTraceObject = {\n            type: 'command',\n            operation: 'commandRender',\n            payload: {\n                viewModel: 'commandsViewModel',\n                commandId: command.id,\n                command: command,\n                renderResult: result\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Command Render : %O ', declTraceObject );\n    }\n};\n\nexport let debugPreProcessingDataParser = function( sourceObj, declViewModel, dataParserDef, dataCtxNode ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataParser',\n            operation: 'preProcessing',\n            payload: {\n                viewModel: declViewModel._internal.panelId,\n                def: dataParserDef\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Pre processing of DataParser: %O ', declTraceObject );\n    }\n};\n\nexport let debugPostProcessingDataParser = function( processedSourceObj, declViewModel, dataParserDef, dataCtxNode ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataParser',\n            operation: 'postProcessing',\n            payload: {\n                viewModel: declViewModel._internal.panelId,\n                def: dataParserDef,\n                resolvedIput: processedSourceObj\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - post processing of DataParser: %O ', declTraceObject );\n    }\n};\n\nexport let debugDataProviderInitialize = function( dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction, resolvedInput ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataProvider',\n            operation: 'Initialize',\n            name: dataProvider.name,\n            payload: {\n                /** revisitme\n                viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n                */\n                def: dataProviderDef,\n                action: dataProvierAction,\n                resolvedIput: resolvedInput\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - Initialize of Dataprovider: %O ', declTraceObject );\n    }\n};\n\nexport let debugDataProviderNextPage = function( dataProvider, dataProvierAction, dataProviderDef, context, requestObjectForAction ) {\n    if( logger.isDeclarativeLogEnabled() ) {\n        var declTraceObject = {\n            type: 'dataProvider',\n            operation: 'NextPage',\n            name: dataProvider.name,\n            payload: {\n                /** revisitme\n                viewModel: context.panelId || ( context && context.data ? context.data._internal.panelId : '' ),\n                */\n                def: dataProviderDef,\n                action: dataProvierAction\n            }\n        };\n        logger.declarativeLog( 'DECLARATIVE TRACE - NextPage of Dataprovider: %O ', declTraceObject );\n    }\n};\n\nexport let debugConditions = function( conditionName, conditionState, conditionExp, declViewModel ) {\n    var declTraceObject = {\n        type: 'conditions',\n        payload: {\n            viewModel: declViewModel,\n            conditionName: conditionName,\n            expression: conditionExp,\n            conditionState: conditionState\n        }\n    };\n    if( logger.isDeclarativeLogEnabled() ) {\n        logger.declarativeLog( 'DECLARATIVE TRACE - Conditions: %O ', declTraceObject );\n    }\n};\n\n/**\n *\n * @param {*} arguments[0] type of the breakpoint\n *\n */\nexport let debug = function() {\n    try {\n        if( !logger.isDeclarativeLogEnabled() ) {\n            return;\n        }\n\n        let brkPointType = arguments[ 0 ];\n\n        if( breakpointSvc.hasConditionSatisfied( brkPointType, arguments[ 1 ], arguments[ 2 ], arguments[ 3 ] ) ) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n\n        if( brkPointType === 'actions' ) {\n            switch ( arguments[ 3 ] ) {\n                case 'pre':\n                    debugActionStart( arguments[ 4 ], arguments[ 5 ], arguments[ 6 ] );\n                    break;\n                case 'post':\n                    debugActionEnd( arguments[ 4 ], arguments[ 5 ], arguments[ 6 ] );\n                    break;\n                case 'default': //do nothing\n                    break;\n            }\n        }\n        // eslint-disable-next-line no-empty\n    } catch ( e ) {}\n};\n\nlet printData = result => {\n    result.map( ( entry ) => {\n        entry.children.map( ( child ) => {\n            child.handlers.map( ( handler ) => {\n                logger.declarativeLog( ' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + child.id + '~' + handler.id + '~' + handler.activeWhen + '~' + handler\n                    .visibleWhen );\n            } );\n        } );\n\n        if( entry.children.length === 0 ) {\n            entry.handlers.map( ( handler ) => {\n                logger.declarativeLog( ' ' + '~' + entry.anchor + '~' + entry.id + '~' + entry.type + '~' + undefined + '~' + handler.id + '~' + handler.activeWhen + '~' + handler.visibleWhen );\n            } );\n        }\n    } );\n};\n\nconst procesHandler = handler => {\n    let singleHandler = {};\n    singleHandler.id = handler.id;\n    if( handler.activeWhen ) {\n        if( _.isObject( handler.activeWhen.expression ) ) {\n            singleHandler.activeWhen = JSON.stringify( handler.activeWhen.expression );\n        } else {\n            singleHandler.activeWhen = handler.activeWhen.expression;\n        }\n    }\n    if( handler.visibleWhen ) {\n        if( _.isObject( handler.visibleWhen.expression ) ) {\n            singleHandler.visibleWhen = JSON.stringify( handler.visibleWhen.expression );\n        } else {\n            singleHandler.visibleWhen = handler.visibleWhen.expression;\n        }\n    }\n    return singleHandler;\n};\n\nexport const reduceData = ( anchor, data ) => {\n    if( logger.isDeclarativeLogEnabled() ) {\n        let result = [];\n        data.map( ( obj ) => {\n            let singleResult = {\n                anchor,\n                id: '',\n                type: '',\n                children: [],\n                handlers: []\n            };\n            for( let key in obj ) {\n                if( key === 'id' ) {\n                    singleResult.id = obj.id;\n                }\n                if( key === 'type' ) {\n                    singleResult.type = obj.type;\n                }\n                if( key === 'children' ) {\n                    obj.children.map( ( child ) => {\n                        let singleChild = {\n                            id: '',\n                            handlers: []\n                        };\n                        singleChild.id = child.id;\n                        child.handlers.map( ( handler ) => {\n                            singleChild.handlers.push( procesHandler( handler ) );\n                        } );\n                        singleResult.children.push( singleChild );\n                    } );\n                }\n                if( key === 'handlers' ) {\n                    obj.handlers.map( ( handler ) => {\n                        singleResult.handlers.push( procesHandler( handler ) );\n                    } );\n                }\n            }\n            result.push( singleResult );\n        } );\n        printData( result );\n    }\n};\n\nexport default {\n    debugActionStart,\n    debugEventPub,\n    debugEventSub,\n    debugActionEnd,\n    debugMessages,\n    debugLifecyleHooks,\n    debugViewAndViewModel,\n    debugGetCommandsForAnchor,\n    debugCommandRender,\n    debugUpdateHandlerOnCommand,\n    debugPreProcessingDataParser,\n    debugPostProcessingDataParser,\n    debugDataProviderNextPage,\n    debugDataProviderInitialize,\n    debugConditions,\n    debug,\n    reduceData\n};\n"]},"metadata":{},"sourceType":"module"}
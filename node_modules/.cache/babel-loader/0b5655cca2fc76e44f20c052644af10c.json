{"ast":null,"code":"import { parseDate } from 'js/uwDirectiveDateTimeService';\nimport dateTimeSvc, { NULLDATE, isNullDate, getNormalizedTimeValue } from 'js/dateTimeService';\nexport let propTypeDate = prop => prop.type === 'DATE';\nexport let propTypeDateArray = prop => prop.type === 'DATEARRAY';\n\nclass DateTimeValues {\n  constructor(data) {\n    this.values = {\n      dateVal: data.dateVal,\n      timeVal: data.timeVal\n    };\n  }\n\n  get dateValue() {\n    return this.values.dateVal;\n  }\n\n  get timeValue() {\n    return this.values.timeVal;\n  }\n\n  cleanDateTimeValues() {\n    this.values.dateVal = null;\n    this.values.timeVal = null;\n  }\n\n}\n\nlet isDateEnabled = dateApi => dateApi.isDateEnabled;\n\nlet isTimeEnabled = dateApi => dateApi.isTimeEnabled;\n\nlet findDateObject = function (prop) {\n  let dbValue;\n  let dateObj;\n\n  if (propTypeDate(prop)) {\n    dbValue = prop.dbValue;\n  } else if (propTypeDateArray(prop)) {\n    dbValue = prop.dbValue[prop.dbValue.length - 1];\n  }\n\n  if (!isNullDate(dbValue)) {\n    dateObj = parseDate(dbValue);\n  } else if (dbValue === NULLDATE) {\n    dateObj = NULLDATE;\n  }\n\n  return dateObj;\n};\n\nlet findDateValue = function (_ref) {\n  let {\n    dateApi\n  } = _ref;\n  let dateVal = null;\n\n  if (isDateEnabled(dateApi)) {\n    dateVal = dateTimeSvc.formatSessionDate(dateApi.dateObject);\n  }\n\n  return dateVal;\n};\n\nlet findTimeValue = function (_ref2) {\n  let {\n    dateApi\n  } = _ref2;\n  let timeVal = null;\n\n  if (isTimeEnabled(dateApi)) {\n    timeVal = dateObject ? dateObject.timeValue : dateTimeSvc.formatTime(dateApi.dateObject);\n  }\n\n  return dateTimeSvc.getNormalizedTimeValue(timeVal);\n};\n\nlet dateObject = null;\nlet dateWithTime;\n/**\n * Sets data and time values and creates a new object\n * @param {Object} data - contains date and time values as keys\n */\n\nexport let setDateTimeValues = function (data) {\n  dateObject = new DateTimeValues(data);\n};\n/**\n * Cleas data and time values from the object\n * @param {Object} prop - ViewModelProperty\n */\n\nexport let clearDateTimeValues = function (prop) {\n  if (propTypeDate(prop) || propTypeDateArray(prop)) {\n    dateObject && dateObject.cleanDateTimeValues();\n    dateObject = null;\n  }\n};\n/**\n * Returns dbValue\n * @param {Object} prop - ViewModelProperty\n */\n\nexport let getDBValueForDate = function (prop) {\n  let dateApi = prop.dateApi;\n\n  if (isDateEnabled(dateApi)) {\n    let oldDateObject = !dateApi.dateValue ? dateTimeSvc.getDefaultDate(dateApi) : findDateObject(prop);\n    dateWithTime = dateTimeSvc.setTimeIntoDateModel(oldDateObject, getNormalizedTimeValue(dateObject.timeValue));\n  } else {\n    dateWithTime = dateTimeSvc.setTimeIntoDateModel(dateTimeSvc.getEpochDate(), getNormalizedTimeValue(dateObject.timeValue));\n  }\n\n  return dateWithTime.getTime();\n};\n/**\n * Returns uiValue\n * @param {Object} dateApi - dateApi object\n */\n\nexport let getUIValueForDate = function (dateApi) {\n  let uiValue;\n\n  if (isTimeEnabled(dateApi) && !isDateEnabled(dateApi)) {\n    uiValue = dateTimeSvc.formatSessionTime(dateWithTime);\n  } else {\n    uiValue = dateTimeSvc.formatSessionDateTime(dateWithTime);\n  }\n\n  return uiValue;\n};\n/**\n * Returns updated dateApi based on dbValue\n * @param {Object} vmProp - ViewModelProperty\n */\n\nexport let updateDateApi = function (vmProp) {\n  if (propTypeDate(vmProp) || propTypeDateArray(vmProp)) {\n    let dateApi = vmProp.dateApi;\n    dateApi.dateObject = findDateObject(vmProp);\n    dateApi.dateValue = findDateValue(vmProp);\n    dateApi.timeValue = findTimeValue(vmProp);\n  }\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/dateTimeProcessingService.js"],"names":["propTypeDate","prop","propTypeDateArray","constructor","dateVal","data","timeVal","dateValue","timeValue","cleanDateTimeValues","isDateEnabled","dateApi","isTimeEnabled","findDateObject","dbValue","isNullDate","dateObj","parseDate","findDateValue","dateTimeSvc","findTimeValue","dateObject","setDateTimeValues","clearDateTimeValues","getDBValueForDate","oldDateObject","dateWithTime","getNormalizedTimeValue","getUIValueForDate","uiValue","updateDateApi","vmProp"],"mappings":"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","sourcesContent":["import { parseDate } from 'js/uwDirectiveDateTimeService';\nimport dateTimeSvc, { NULLDATE, isNullDate, getNormalizedTimeValue } from 'js/dateTimeService';\n\nexport let propTypeDate = prop => prop.type === 'DATE';\n\nexport let propTypeDateArray = prop => prop.type === 'DATEARRAY';\n\nclass DateTimeValues {\n    constructor( data ) {\n        this.values = {\n            dateVal: data.dateVal,\n            timeVal: data.timeVal\n        };\n    }\n    get dateValue() {\n        return this.values.dateVal;\n    }\n    get timeValue() {\n        return this.values.timeVal;\n    }\n    cleanDateTimeValues() {\n        this.values.dateVal = null;\n        this.values.timeVal = null;\n    }\n}\n\nlet isDateEnabled = dateApi => dateApi.isDateEnabled;\n\nlet isTimeEnabled = dateApi => dateApi.isTimeEnabled;\n\nlet findDateObject = function( prop ) {\n    let dbValue;\n    let dateObj;\n    if( propTypeDate( prop ) ) {\n        dbValue = prop.dbValue;\n    } else if( propTypeDateArray( prop ) ) {\n        dbValue = prop.dbValue[ prop.dbValue.length - 1 ];\n    }\n    if( !isNullDate( dbValue ) ) {\n        dateObj = parseDate( dbValue );\n    } else if( dbValue === NULLDATE ) {\n        dateObj = NULLDATE;\n    }\n    return dateObj;\n};\n\nlet findDateValue = function( { dateApi } ) {\n    let dateVal = null;\n    if( isDateEnabled( dateApi ) ) {\n        dateVal = dateTimeSvc.formatSessionDate( dateApi.dateObject );\n    }\n    return dateVal;\n};\n\nlet findTimeValue = function( { dateApi } ) {\n    let timeVal = null;\n    if( isTimeEnabled( dateApi ) ) {\n        timeVal = dateObject ? dateObject.timeValue : dateTimeSvc.formatTime( dateApi.dateObject );\n    }\n    return dateTimeSvc.getNormalizedTimeValue( timeVal );\n};\n\nlet dateObject = null;\nlet dateWithTime;\n\n/**\n * Sets data and time values and creates a new object\n * @param {Object} data - contains date and time values as keys\n */\nexport let setDateTimeValues = function( data ) {\n    dateObject = new DateTimeValues( data );\n};\n\n/**\n * Cleas data and time values from the object\n * @param {Object} prop - ViewModelProperty\n */\nexport let clearDateTimeValues = function( prop ) {\n    if( propTypeDate( prop ) || propTypeDateArray( prop ) ) {\n        dateObject && dateObject.cleanDateTimeValues();\n        dateObject = null;\n    }\n};\n\n/**\n * Returns dbValue\n * @param {Object} prop - ViewModelProperty\n */\nexport let getDBValueForDate = function( prop ) {\n    let dateApi = prop.dateApi;\n    if( isDateEnabled( dateApi ) ) {\n        let oldDateObject = !dateApi.dateValue ? dateTimeSvc.getDefaultDate( dateApi ) : findDateObject( prop );\n        dateWithTime = dateTimeSvc.setTimeIntoDateModel( oldDateObject, getNormalizedTimeValue( dateObject.timeValue ) );\n    } else {\n        dateWithTime = dateTimeSvc.setTimeIntoDateModel( dateTimeSvc.getEpochDate(), getNormalizedTimeValue( dateObject.timeValue ) );\n    }\n    return dateWithTime.getTime();\n};\n\n/**\n * Returns uiValue\n * @param {Object} dateApi - dateApi object\n */\nexport let getUIValueForDate = function( dateApi ) {\n    let uiValue;\n    if( isTimeEnabled( dateApi ) && !isDateEnabled( dateApi ) ) {\n        uiValue = dateTimeSvc.formatSessionTime( dateWithTime );\n    } else {\n        uiValue = dateTimeSvc.formatSessionDateTime( dateWithTime );\n    }\n    return uiValue;\n};\n\n/**\n * Returns updated dateApi based on dbValue\n * @param {Object} vmProp - ViewModelProperty\n */\nexport let updateDateApi = function( vmProp ) {\n    if( propTypeDate( vmProp ) || propTypeDateArray( vmProp ) ) {\n        let dateApi = vmProp.dateApi;\n        dateApi.dateObject = findDateObject( vmProp );\n        dateApi.dateValue = findDateValue( vmProp );\n        dateApi.timeValue = findTimeValue( vmProp );\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
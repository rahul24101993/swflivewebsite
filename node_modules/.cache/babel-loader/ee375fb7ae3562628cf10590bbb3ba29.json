{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to manage the configuration of the paste operation.\n *\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-paste-handling|Solution configuration for paste handling}\n *\n * @module js/pasteService\n *\n * @publishedApolloService\n *\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport cfgSvc from 'js/configurationService';\nimport appCtxService from 'js/appCtxService';\nimport adapterSvc from 'js/adapterService';\nimport localeSvc from 'js/localeService';\nimport messagingSvc from 'js/messagingService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport declUtils from 'js/declUtils';\nimport viewModelService from 'js/viewModelService';\nimport actionService from 'js/actionService';\nimport conditionSvc from 'js/conditionService';\nimport expParUtils from 'js/expressionParserUtils';\nimport ccu from 'js/commandConfigUtils.service';\nimport awConfiguration from 'js/awConfiguration';\nimport moduleLoader from 'js/moduleLoader';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\n/**\n * This object represents the union of all module level 'paste.json' configurations for the current AW\n * application.\n *\n * Content & Structure of the 'paste.json' file located:<BR>\n * WAR: <war_root>\\assets\\config\\paste.json <BR>\n * Kit: <dev_root>\\out\\kit\\tcawframework_aws2stage.zip\\stage\\repo\\gwt\\tc-aw-framework\\module.json\n *\n * The 'paste.json' module is used during Drag-and-Drop operations to specify which types of objects\n * being dragged (i.e. the 'source' types) are valid to drop onto a specific type object (i.e. the 'target'\n * type). If no source/target match is found, the drop will not be allowed and the user will see the 'drop not\n * allowed' symbol for their cursor.\n * <P>\n * The most specific type in an object's type hierarchy is used. <BR>\n * There is no inheritance between properties in this file.\n * <P>\n *\n * For Each (sourceType) and (targetType) section must be specify with action\n * <P>\n * All 'source' object types must be valid for a specific 'target' before the drop will be allowed.\n *\n * Note 1: This mapping only applies for dropping 'source' objects onto a single 'target' object. When dropping\n * into an 'objectSet' of an XRT stylesheet, the relation information in the 'source' attribute of the\n * 'objectSet' is used.\n *\n *\n * The JSON object generically is structured as:\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"handlerName\": {\n            \"action\": \"HandlerAction\",\n            \"activeWhen\": {\n                \"condition\": \"conditionToActiveTheHandler\"\n            }\n        }\n    },\n    \"actions\": {\n        \"HandlerAction\": {\n          // declartive action that we follow in commandsViewModel / ViewModel.json\n        }\n    },\n    \"conditions\": {\n        \"conditionToActiveTheHandler\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfTargetObject\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfSourceObject\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n * </pre>\n *\n * Example: The following specifies that:<BR>\n * a) any 'target' of type 'Folder' should use the 'customPasteHandler' defined in the JS file\n * 'js/pasteHandlers.js' when items of type 'ItemRevision' are pasted on them\n * <P>\n * Similary we can create following combination\n * b) any 'target' of type 'WorkspaceObject' should use the 'tcDefaultPasteHandler' with default relations when\n * items of type 'ItemRevision' or 'DocumentRevision' are pasted on them.\n * <P>\n * c) any 'target' of type 'DocumentRevision' should use the 'defaultFilePasteHandler' specifying the\n * 'TC_Attaches' relations (and other datasetInfo properties) when objects of type 'Dataset' are pasted on them.\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"action\": \"defaultPasteHandlerForImpactAnalysis\",\n            \"activeWhen\": {\n                \"condition\": \"conditions.isPasteHandlerActiveForImpactAnalysisNew\"\n            }\n        }\n    },\n    \"actions\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"actionType\": \"JSFunction\",\n            \"method\": \"customPasteHandler\",\n            \"deps\": \"js/pasteHandlers\",\n            \"inputData\": {\n                \"targetObject\": \"{{pasteContext.targetObject}}\",\n                \"sourceObject\": \"{{pasteContext.sourceObject}}\"\n            },\n            \"events\": {\n                \"success\": [ {\n                    \"name\": \"dragDrop.success\",\n                    \"condition\": \"pasteContext.isDragDropIntent\",\n                    \"eventData\": {\n                        \"sourceObjects\": \"{{pasteContext.sourceObject}}\",\n                        \"targetObject\": \"{{pasteContext.targetObject}}\"\n                    }\n                } ]\n            }\n        }\n    },\n    \"conditions\": {\n        \"isPasteHandlerActiveForImpactAnalysisNew\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"Folder\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"ItemRevision\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n* </pre>\n*/\n\nvar _pasteConfig;\n\nvar _pasteConfigMap;\n\nvar targetSourceMap;\n\nvar _declViewModel;\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n * @ignore\n */\n\n\nlet exports;\n/**\n * Create the declartive viewModel from all combined paste.json\n *\n * @param {Object} viewModel - event data information with name and value of changes\n * @returns {Promise} promise with decl view model json\n */\n\nconst createViewModel = async function (viewModel) {\n  var deferred = AwPromiseService.instance.defer();\n  viewModel._viewModelId = 'pasteViewModel_' + Math.random;\n  viewModel.skipClone = true;\n  let populatedViewModelJson = viewModelService.populateViewModelPropertiesFromJson(viewModel, null, null, true);\n  populatedViewModelJson.i18n = await awDuiLocalizationSvc.populateI18nMap(viewModel.i18n, null);\n  deferred.resolve(populatedViewModelJson);\n  return deferred.promise;\n};\n\nvar udpateMap = function (query, key, sourceObject, targetObject) {\n  var queryToUse = query;\n  var matchAll = queryToUse[expParUtils.$ALL];\n  queryToUse = matchAll || queryToUse;\n  var performAND = queryToUse[expParUtils.$AND] || queryToUse[expParUtils.$ALL];\n  var performOR = queryToUse[expParUtils.$OR];\n  var evalChecks = performAND || performOR || [queryToUse];\n\n  _.forEach(evalChecks, function (evalCheck) {\n    var path = expParUtils.resolve(expParUtils.$SOURCE, evalCheck);\n    var condition = expParUtils.resolve(expParUtils.$QUERY, evalCheck) || evalCheck;\n\n    if (path === 'pasteContext.sourceObject') {\n      sourceObject = condition.$typeOf;\n    } else if (path === 'pasteContext.targetObject') {\n      targetObject = condition.$typeOf;\n    }\n\n    if (sourceObject && targetObject && path) {\n      if (!targetSourceMap.has(targetObject)) {\n        targetSourceMap.set(targetObject, {\n          sourceTypes: {}\n        });\n      }\n\n      if (!targetSourceMap.get(targetObject).sourceTypes[sourceObject]) {\n        targetSourceMap.get(targetObject).sourceTypes[sourceObject] = [];\n      }\n\n      targetSourceMap.get(targetObject).sourceTypes[sourceObject].push(key);\n    }\n\n    var recurseExpressionEvaluation = condition && (condition[expParUtils.$ALL] || condition[expParUtils.$AND] || condition[expParUtils.$OR] || condition[expParUtils.$SOURCE]);\n\n    if (recurseExpressionEvaluation) {\n      udpateMap(condition, key, sourceObject, targetObject);\n    }\n  });\n};\n/**\n * Update the '_pasteConfigMap' on with all combine paste.json\n *\n */\n\n\nfunction updateThePasteConfig() {\n  targetSourceMap = new Map();\n\n  _.forEach(_pasteConfig.pasteHandlers, function (value, key) {\n    if (value.activeWhen) {\n      var condition = value.activeWhen.condition;\n      var conditionExpression = null;\n      var sourceObject;\n      var targetObject;\n\n      if (_.startsWith(condition, 'conditions.')) {\n        conditionExpression = _.get(_pasteConfig, condition);\n      } else {\n        conditionExpression = condition;\n      }\n\n      if (conditionExpression && conditionExpression.expression) {\n        udpateMap(conditionExpression.expression, key, sourceObject, targetObject);\n      }\n    }\n  });\n\n  _pasteConfigMap = targetSourceMap;\n}\n/**\n * Update the 'selectedModelTypeRelations' on the appCtx for the one step Paste command.\n *\n * @param {Object} eventData - event data information with name and value of changes\n */\n\n\nfunction changeValidSourceTypesForSelected(eventData) {\n  if (eventData.name === 'mselected' && eventData.value && eventData.value.length === 1) {\n    var objectValidSourceTypes = exports.getObjectValidSourceTypes(eventData.value[0]);\n    objectValidSourceTypes = objectValidSourceTypes || {};\n    appCtxService.registerCtx('selectedModelTypeRelations', Object.keys(objectValidSourceTypes));\n  }\n}\n/**\n * create Success Message For DND\n *\n * @param {sourceObjects} sourceObjects -Service to use.\n * @param {targetObject} targetObject -Service to use.\n *\n * invoke success message\n */\n\n\nfunction createSuccessMessageForDND(sourceObjects, targetObject) {\n  var pasteSuccessMessage = {\n    messageText: '',\n    messageTextParams: []\n  };\n\n  if (sourceObjects.length > 1) {\n    localeSvc.getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteMultipleSuccessMessage').then(function (response) {\n      pasteSuccessMessage.messageText = response;\n      pasteSuccessMessage.messageTextParams = [sourceObjects.length, targetObject.props.object_string.uiValues[0]];\n      var messageText = messagingSvc.applyMessageParamsWithoutContext(pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams);\n      messagingSvc.showInfo(messageText);\n    });\n  } else {\n    localeSvc.getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteSuccessMessage').then(function (response) {\n      pasteSuccessMessage.messageText = response;\n      const sourceObjectName = sourceObjects && sourceObjects[0].props && sourceObjects[0].props.object_string ? sourceObjects[0].props.object_string.uiValues[0] : sourceObjects[0].name;\n      pasteSuccessMessage.messageTextParams = [sourceObjectName, targetObject.props.object_string.uiValues[0]];\n      var messageText = messagingSvc.applyMessageParamsWithoutContext(pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams);\n      messagingSvc.showInfo(messageText);\n    });\n  }\n}\n/**\n * create Failure Message For DND\n *\n * @param {errorReason} errorReason -Service to use.\n *\n *  invokes  failure message\n */\n\n\nfunction createFailureMessageForDND(errorReason) {\n  localeSvc.getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteFailureMessage').then(result => {\n    var pasteFailureMessage = result;\n    var errorText = pasteFailureMessage + ':';\n\n    _.forEach(errorReason.message.split(/\\n/g), function (messageLine) {\n      errorText = errorText + '<br>' + messageLine;\n    });\n\n    messagingSvc.showInfo(errorText);\n  });\n}\n/**\n * handler for dragDrop event\n * @param {Array} sourceObjects source objects drag frim\n * @param {Object} targetObject target object drop to\n */\n\n\nfunction handleSuccess(sourceObjects, targetObject) {\n  var adaptedSourceObjects = adapterSvc.getAdaptedObjectsSync(sourceObjects);\n  createSuccessMessageForDND(adaptedSourceObjects, targetObject);\n}\n\nexport const getTargetType = function (targetObject) {\n  var targetTypes = getTargetTypes();\n  var typeHier = declUtils.getTypeHierarchy(targetObject) || [targetObject.type];\n\n  if (typeHier[0]) {\n    for (var ii = 0; ii < typeHier.length; ii++) {\n      var typeName = typeHier[ii];\n\n      if (targetTypes.has(typeName)) {\n        return targetTypes.get(typeName);\n      }\n    }\n  }\n\n  return null;\n};\nexport const getSourceType = function (sourceTypes, sourceObject) {\n  var typeHier = declUtils.getTypeHierarchy(sourceObject) || [sourceObject.type];\n\n  if (typeHier[0]) {\n    for (var ii = 0; ii < typeHier.length; ii++) {\n      var typeName = typeHier[ii];\n\n      if (sourceTypes[typeName]) {\n        return sourceTypes[typeName];\n      }\n    }\n  }\n\n  return null;\n};\n/**\n * To Paste objects with single relationType\n *\n * This would\n * 1. use bestTargetFitFinder function to find the best possible Target Fit for the given target object by reading the paste configuration.\n * 2. use bestSourceFitFinder function to find the best possible Source Fit for the given source object by reading the paste configuration.\n * 3. Invoke the configured pasteHandler for the target + source type combination.\n * 4. If no suitable target + source type combination for paste handler is found then (configured) default paste handler is invoked.\n *\n * @param {Object} targetObject - The 'target' Object for the paste.\n * @param {Array} sourceObjects - Array of 'source' Objects to paste onto the 'target' Object.\n * @param {String} relationType - Relation type name\n * @param {object} customPasteContext - custom paste context\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let execute = function (targetObject, sourceObjects, relationType, customPasteContext) {\n  var queue = {};\n  var custObj = customPasteContext;\n\n  if (custObj && !custObj.hasOwnProperty('isDragDropIntent')) {\n    custObj.isDragDropIntent = false;\n  } else if (!custObj) {\n    custObj = {\n      isDragDropIntent: false\n    };\n  }\n\n  var defaultPasteHandlerConfiguration = awConfiguration.get('solutionDef.defaultPasteHandlerConfiguration');\n\n  var doAction = function (defaultPasteHandler, declViewModel) {\n    _.forEach(sourceObjects, function (sourceObject) {\n      var pasteContext = {\n        targetObject: targetObject,\n        sourceObject: sourceObject,\n        relationType: relationType,\n        ...custObj\n      };\n      var targetTypeConfig = null;\n\n      if (typeof defaultPasteHandlerConfiguration === 'object') {\n        targetTypeConfig = defaultPasteHandler[defaultPasteHandlerConfiguration.bestTargetFitFinder](targetObject);\n      } else {\n        targetTypeConfig = getTargetType(targetObject);\n      }\n\n      var action = null;\n      var actionName = null;\n\n      if (targetTypeConfig) {\n        var sourceTypeConfig = null;\n\n        if (typeof defaultPasteHandlerConfiguration === 'object') {\n          sourceTypeConfig = defaultPasteHandler[defaultPasteHandlerConfiguration.bestSourceFitFinder](targetTypeConfig.sourceTypes, sourceObject);\n        } else {\n          sourceTypeConfig = getSourceType(targetTypeConfig.sourceTypes, sourceObject);\n        }\n\n        var length = 0;\n        var currentLength;\n\n        if (sourceTypeConfig) {\n          _.forEach(sourceTypeConfig, function (pasteHandlers) {\n            var pasteHandlerObject = _pasteConfig.pasteHandlers[pasteHandlers];\n            var conditionResult = false;\n            var conditionExpression = pasteHandlerObject.activeWhen.condition;\n\n            if (_.startsWith(pasteHandlerObject.activeWhen.condition, 'conditions.')) {\n              conditionExpression = _.get(_pasteConfig, pasteHandlerObject.activeWhen.condition);\n            }\n\n            if (conditionExpression !== null) {\n              currentLength = ccu.getExpressionLength(conditionExpression.expression, declViewModel);\n              conditionResult = conditionSvc.evaluateCondition({\n                ctx: appCtxService.ctx,\n                pasteContext: pasteContext\n              }, conditionExpression.expression);\n            }\n\n            if (conditionResult && currentLength > length) {\n              length = currentLength;\n              action = _pasteConfig.actions[pasteHandlerObject.action];\n              actionName = pasteHandlerObject.action;\n            }\n          });\n        }\n      }\n\n      if (!actionName && typeof defaultPasteHandlerConfiguration === 'object') {\n        var handlerFunctionName = defaultPasteHandlerConfiguration.pasteHandler;\n        actionName = _pasteConfig.pasteHandlers[handlerFunctionName].action;\n        action = _pasteConfig.actions[actionName];\n        logger.warn('No configured paste handler found for source object: \\'' + sourceObject + '\\' when target object: \\'' + targetObject + '\\'' + '\\n' + 'RelationType: \\'' + relationType + '\\'' + '\\n' + '...Assuming default handler');\n      }\n\n      if (actionName) {\n        if (!queue.hasOwnProperty(actionName)) {\n          queue[actionName] = {};\n        }\n\n        if (!queue[actionName].hasOwnProperty('sourceObjs')) {\n          queue[actionName].sourceObjs = [];\n        }\n\n        queue[actionName].sourceObjs.push(sourceObject);\n\n        if (action) {\n          queue[actionName].handlerAction = action;\n        }\n      }\n    });\n    /**\n     * Loop for each unique 'handler' and build up a promise chain.\n     */\n\n\n    var promiseArray = [];\n\n    _.forEach(queue, function (queuedSrcObjInfo) {\n      var depFileToLoad = queuedSrcObjInfo.handlerAction.deps;\n      var depModuleObj = null;\n      var dataCtxNode = {\n        data: declViewModel,\n        ctx: appCtxService.ctx,\n        pasteContext: {\n          targetObject: targetObject,\n          sourceObject: queuedSrcObjInfo.sourceObjs,\n          relationType: relationType,\n          ...custObj\n        }\n      };\n\n      if (depFileToLoad) {\n        //Revisit: getDependentModule is yet to be supported\n        //depModuleObj = moduleLoader.getDependentModule( queuedSrcObjInfo.handlerAction.deps );\n        if (!depModuleObj) {\n          promiseArray.push(moduleLoader.loadDependentModule(queuedSrcObjInfo.handlerAction.deps).then(function (pasteHandler) {\n            depModuleObj = pasteHandler;\n            return actionService.executeAction(declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false);\n          }));\n        } else {\n          promiseArray.push(actionService.executeAction(declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false));\n        }\n      } else {\n        promiseArray.push(actionService.executeAction(declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false));\n      }\n    });\n\n    return AwPromiseService.instance.all(promiseArray);\n  };\n\n  var performAction = function (declViewModel) {\n    if (defaultPasteHandlerConfiguration.deps) {\n      //Revisit: getDependentModule is yet to be supported\n      //var defaultPasteHandler = moduleLoader.getDependentModule( defaultPasteHandlerConfiguration.deps );\n      //if( !defaultPasteHandler ) {\n      // return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n      //     return doAction( pasteHandler, declViewModel );\n      // } );\n      //}\n      //return doAction( defaultPasteHandler, declViewModel );\n      return moduleLoader.loadDependentModule(defaultPasteHandlerConfiguration.deps).then(function (pasteHandler) {\n        return doAction(pasteHandler, declViewModel);\n      });\n    }\n\n    return doAction(null, declViewModel);\n  };\n\n  if (!_declViewModel) {\n    return createViewModel(_pasteConfig).then(function (declViewModel) {\n      _declViewModel = declViewModel;\n      return performAction(_declViewModel);\n    });\n  }\n\n  return performAction(_declViewModel);\n};\n/**\n * To Paste objects with different relationTypes\n * Same as {@link module:js/pasteService.execute|execute} except that this executes with multiple source object + relation types for a single target object.\n *\n * @param {Object} targetObject - the target object to paste the source objects to\n * @param {Object} relationTypeToSources - an object of key/value: relationType/array-of-sourceObjects\n *\n * @returns {Promise} Resolved when all processing is complete.\n */\n\nexport let executeWithMultipleRelations = function (targetObject, relationTypeToSources) {\n  var allPromises = [];\n\n  _.forOwn(relationTypeToSources, function (sourceObjects, relationType) {\n    allPromises.push(exports.execute(targetObject, sourceObjects, relationType));\n  });\n\n  return AwPromiseService.instance.all(allPromises);\n};\nexport const determineActiveHandler = (sourceObjects, targetObject) => {\n  var conditionResult = false;\n\n  _.forOwn(_pasteConfig.pasteHandlers, pasteHandlerObject => {\n    var conditionExpression = pasteHandlerObject.activeWhen ? pasteHandlerObject.activeWhen.condition : null;\n\n    if (conditionExpression) {\n      if (_.startsWith(pasteHandlerObject.activeWhen.condition, 'conditions.')) {\n        conditionExpression = _.get(_pasteConfig, pasteHandlerObject.activeWhen.condition);\n      }\n\n      if (conditionExpression !== null) {\n        conditionResult = conditionResult || conditionSvc.evaluateCondition({\n          ctx: appCtxService.ctx,\n          pasteContext: {\n            targetObject: targetObject,\n            sourceObject: sourceObjects,\n            relationType: ''\n          }\n        }, conditionExpression.expression);\n      }\n    }\n  });\n\n  return conditionResult;\n};\n/**\n * Gets all of the available targetTypes configured in paste.json files from different modules.\n *\n * @return {Object} The 'targetTypes' from the 'pasteConfig'\n */\n\nexport let getTargetTypes = function () {\n  return _pasteConfigMap ? _pasteConfigMap : {};\n};\n/**\n * @param {Object} targetObject - The 'target' IModelObject to use when determining which 'source' types are\n *            potentially valid to be dropped upon it.\n * @return {Object|null} The 'sourceTypes' property from the 'pasteConfig' for the given 'target' object type or its\n *         ancestor types up the hierarchy (or NULL if no match was found).\n */\n\nexport let getObjectValidSourceTypes = function (targetObject) {\n  if (targetObject && targetObject.modelType && targetObject.modelType.typeHierarchyArray || targetObject && targetObject.typeHierarchy) {\n    var typeHier = declUtils.getTypeHierarchy(targetObject);\n    /**\n     * Starting at the 'target' object's actual type, try to find a matching 'targetType' property in the\n     * 'pasteConfig'. If an exact match is not found, try the super type of the 'target' up its hierarchy tree. Stop\n     * looking when the 1st one (i.e. the 'closest' one) is found.\n     */\n\n    var targetTypes = exports.getTargetTypes();\n\n    for (var ii = 0; ii < typeHier.length; ii++) {\n      var typeName = typeHier[ii];\n\n      if (targetTypes.has(typeName)) {\n        return targetTypes.get(typeName).sourceTypes;\n      }\n    }\n  }\n\n  return null;\n};\n/**\n * Get underlying BO for view model objects\n *\n * @param {Array} viewModelObjects - view model objects to adapt\n * @return {input} adapted object\n */\n\nexport let adaptedInput = function (viewModelObjects) {\n  if (viewModelObjects) {\n    var objectsToAdapt = _.isArray(viewModelObjects) ? viewModelObjects : [viewModelObjects];\n    return adapterSvc.getAdaptedObjectsSync(objectsToAdapt);\n  }\n\n  return [];\n};\nexport let loadConfiguration = function () {\n  _pasteConfig = cfgSvc.getCfgCached('paste') || {};\n  updateThePasteConfig();\n  eventBus.subscribe('appCtx.register', changeValidSourceTypesForSelected);\n  eventBus.subscribe('dragDrop.success', function (event) {\n    handleSuccess(event.sourceObjects, event.targetObject);\n  });\n  eventBus.subscribe('dragDrop.failure', function (event) {\n    createFailureMessageForDND(event.reason);\n  });\n  eventBus.subscribePostal({\n    channel: 'paste',\n    topic: 'drop',\n    callback: function (eventData) {\n      if (eventData && eventData.pasteInput) {\n        _.forEach(eventData.pasteInput, function (pasteInput) {\n          var targetObject = pasteInput.targetObject;\n          var relationType = pasteInput.relationType;\n          var sourceObjects = pasteInput.sourceObjects;\n          exports.execute(targetObject, sourceObjects, relationType, { ...pasteInput.props,\n            isDragDropIntent: true\n          }).then(function () {\n            var eventData = {\n              relatedModified: [targetObject],\n              refreshLocationFlag: false,\n              createdObjects: sourceObjects\n            };\n            eventBus.publish('cdm.relatedModified', eventData);\n          });\n        });\n      }\n    }\n  });\n};\nexports = {\n  execute,\n  executeWithMultipleRelations,\n  getTargetTypes,\n  getObjectValidSourceTypes,\n  adaptedInput,\n  loadConfiguration,\n  determineActiveHandler\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/pasteService.js"],"names":["createViewModel","deferred","AwPromiseService","viewModel","Math","populatedViewModelJson","viewModelService","awDuiLocalizationSvc","udpateMap","queryToUse","matchAll","expParUtils","performAND","performOR","evalChecks","_","path","condition","sourceObject","targetObject","targetSourceMap","sourceTypes","recurseExpressionEvaluation","_pasteConfig","value","conditionExpression","_pasteConfigMap","eventData","objectValidSourceTypes","exports","appCtxService","Object","pasteSuccessMessage","messageText","messageTextParams","sourceObjects","localeSvc","messagingSvc","sourceObjectName","result","pasteFailureMessage","errorText","errorReason","adaptedSourceObjects","adapterSvc","createSuccessMessageForDND","getTargetType","targetTypes","getTargetTypes","typeHier","declUtils","ii","typeName","getSourceType","execute","queue","custObj","isDragDropIntent","defaultPasteHandlerConfiguration","awConfiguration","doAction","pasteContext","relationType","targetTypeConfig","defaultPasteHandler","action","actionName","sourceTypeConfig","length","pasteHandlerObject","conditionResult","currentLength","ccu","ctx","handlerFunctionName","logger","promiseArray","depFileToLoad","queuedSrcObjInfo","depModuleObj","dataCtxNode","data","actionService","performAction","_declViewModel","executeWithMultipleRelations","allPromises","determineActiveHandler","getObjectValidSourceTypes","adaptedInput","objectsToAdapt","loadConfiguration","cfgSvc","updateThePasteConfig","eventBus","handleSuccess","event","createFailureMessageForDND","channel","topic","callback","pasteInput","relatedModified","refreshLocationFlag","createdObjects"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to manage the configuration of the paste operation.\n *\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-paste-handling|Solution configuration for paste handling}\n *\n * @module js/pasteService\n *\n * @publishedApolloService\n *\n */\n\nimport AwPromiseService from 'js/awPromiseService';\nimport cfgSvc from 'js/configurationService';\nimport appCtxService from 'js/appCtxService';\nimport adapterSvc from 'js/adapterService';\nimport localeSvc from 'js/localeService';\nimport messagingSvc from 'js/messagingService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport declUtils from 'js/declUtils';\nimport viewModelService from 'js/viewModelService';\nimport actionService from 'js/actionService';\nimport conditionSvc from 'js/conditionService';\nimport expParUtils from 'js/expressionParserUtils';\nimport ccu from 'js/commandConfigUtils.service';\nimport awConfiguration from 'js/awConfiguration';\nimport moduleLoader from 'js/moduleLoader';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\n/**\n * This object represents the union of all module level 'paste.json' configurations for the current AW\n * application.\n *\n * Content & Structure of the 'paste.json' file located:<BR>\n * WAR: <war_root>\\assets\\config\\paste.json <BR>\n * Kit: <dev_root>\\out\\kit\\tcawframework_aws2stage.zip\\stage\\repo\\gwt\\tc-aw-framework\\module.json\n *\n * The 'paste.json' module is used during Drag-and-Drop operations to specify which types of objects\n * being dragged (i.e. the 'source' types) are valid to drop onto a specific type object (i.e. the 'target'\n * type). If no source/target match is found, the drop will not be allowed and the user will see the 'drop not\n * allowed' symbol for their cursor.\n * <P>\n * The most specific type in an object's type hierarchy is used. <BR>\n * There is no inheritance between properties in this file.\n * <P>\n *\n * For Each (sourceType) and (targetType) section must be specify with action\n * <P>\n * All 'source' object types must be valid for a specific 'target' before the drop will be allowed.\n *\n * Note 1: This mapping only applies for dropping 'source' objects onto a single 'target' object. When dropping\n * into an 'objectSet' of an XRT stylesheet, the relation information in the 'source' attribute of the\n * 'objectSet' is used.\n *\n *\n * The JSON object generically is structured as:\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"handlerName\": {\n            \"action\": \"HandlerAction\",\n            \"activeWhen\": {\n                \"condition\": \"conditionToActiveTheHandler\"\n            }\n        }\n    },\n    \"actions\": {\n        \"HandlerAction\": {\n          // declartive action that we follow in commandsViewModel / ViewModel.json\n        }\n    },\n    \"conditions\": {\n        \"conditionToActiveTheHandler\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfTargetObject\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfSourceObject\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n * </pre>\n *\n * Example: The following specifies that:<BR>\n * a) any 'target' of type 'Folder' should use the 'customPasteHandler' defined in the JS file\n * 'js/pasteHandlers.js' when items of type 'ItemRevision' are pasted on them\n * <P>\n * Similary we can create following combination\n * b) any 'target' of type 'WorkspaceObject' should use the 'tcDefaultPasteHandler' with default relations when\n * items of type 'ItemRevision' or 'DocumentRevision' are pasted on them.\n * <P>\n * c) any 'target' of type 'DocumentRevision' should use the 'defaultFilePasteHandler' specifying the\n * 'TC_Attaches' relations (and other datasetInfo properties) when objects of type 'Dataset' are pasted on them.\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"action\": \"defaultPasteHandlerForImpactAnalysis\",\n            \"activeWhen\": {\n                \"condition\": \"conditions.isPasteHandlerActiveForImpactAnalysisNew\"\n            }\n        }\n    },\n    \"actions\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"actionType\": \"JSFunction\",\n            \"method\": \"customPasteHandler\",\n            \"deps\": \"js/pasteHandlers\",\n            \"inputData\": {\n                \"targetObject\": \"{{pasteContext.targetObject}}\",\n                \"sourceObject\": \"{{pasteContext.sourceObject}}\"\n            },\n            \"events\": {\n                \"success\": [ {\n                    \"name\": \"dragDrop.success\",\n                    \"condition\": \"pasteContext.isDragDropIntent\",\n                    \"eventData\": {\n                        \"sourceObjects\": \"{{pasteContext.sourceObject}}\",\n                        \"targetObject\": \"{{pasteContext.targetObject}}\"\n                    }\n                } ]\n            }\n        }\n    },\n    \"conditions\": {\n        \"isPasteHandlerActiveForImpactAnalysisNew\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"Folder\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"ItemRevision\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n* </pre>\n*/\n\nvar _pasteConfig;\n\nvar _pasteConfigMap;\n\nvar targetSourceMap;\n\nvar _declViewModel;\n\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n * @ignore\n */\nlet exports;\n\n/**\n * Create the declartive viewModel from all combined paste.json\n *\n * @param {Object} viewModel - event data information with name and value of changes\n * @returns {Promise} promise with decl view model json\n */\nconst createViewModel = async function( viewModel ) {\n    var deferred = AwPromiseService.instance.defer();\n\n    viewModel._viewModelId = 'pasteViewModel_' + Math.random;\n    viewModel.skipClone = true;\n    let populatedViewModelJson = viewModelService.populateViewModelPropertiesFromJson( viewModel, null, null, true );\n\n    populatedViewModelJson.i18n = await awDuiLocalizationSvc.populateI18nMap( viewModel.i18n, null );\n\n    deferred.resolve( populatedViewModelJson );\n\n    return deferred.promise;\n};\n\nvar udpateMap = function( query, key, sourceObject, targetObject ) {\n    var queryToUse = query;\n    var matchAll = queryToUse[ expParUtils.$ALL ];\n    queryToUse = matchAll || queryToUse;\n    var performAND = queryToUse[ expParUtils.$AND ] || queryToUse[ expParUtils.$ALL ];\n    var performOR = queryToUse[ expParUtils.$OR ];\n    var evalChecks = performAND || performOR || [ queryToUse ];\n    _.forEach( evalChecks, function( evalCheck ) {\n        var path = expParUtils.resolve( expParUtils.$SOURCE, evalCheck );\n        var condition = expParUtils.resolve( expParUtils.$QUERY, evalCheck ) || evalCheck;\n        if( path === 'pasteContext.sourceObject' ) {\n            sourceObject = condition.$typeOf;\n        } else if( path === 'pasteContext.targetObject' ) {\n            targetObject = condition.$typeOf;\n        }\n        if( sourceObject && targetObject && path ) {\n            if( !targetSourceMap.has( targetObject ) ) {\n                targetSourceMap.set( targetObject, { sourceTypes: {} } );\n            }\n            if( !targetSourceMap.get( targetObject ).sourceTypes[ sourceObject ] ) {\n                targetSourceMap.get( targetObject ).sourceTypes[ sourceObject ] = [];\n            }\n            targetSourceMap.get( targetObject ).sourceTypes[ sourceObject ].push( key );\n        }\n        var recurseExpressionEvaluation = condition && ( condition[ expParUtils.$ALL ] || condition[ expParUtils.$AND ] || condition[ expParUtils.$OR ] || condition[ expParUtils.$SOURCE ] );\n        if( recurseExpressionEvaluation ) {\n            udpateMap( condition, key, sourceObject, targetObject );\n        }\n    } );\n};\n\n/**\n * Update the '_pasteConfigMap' on with all combine paste.json\n *\n */\nfunction updateThePasteConfig() {\n    targetSourceMap = new Map();\n\n    _.forEach( _pasteConfig.pasteHandlers, function( value, key ) {\n        if( value.activeWhen ) {\n            var condition = value.activeWhen.condition;\n            var conditionExpression = null;\n            var sourceObject;\n            var targetObject;\n            if( _.startsWith( condition, 'conditions.' ) ) {\n                conditionExpression = _.get( _pasteConfig, condition );\n            } else {\n                conditionExpression = condition;\n            }\n            if( conditionExpression && conditionExpression.expression ) {\n                udpateMap( conditionExpression.expression, key, sourceObject, targetObject );\n            }\n        }\n    } );\n\n    _pasteConfigMap = targetSourceMap;\n}\n\n/**\n * Update the 'selectedModelTypeRelations' on the appCtx for the one step Paste command.\n *\n * @param {Object} eventData - event data information with name and value of changes\n */\nfunction changeValidSourceTypesForSelected( eventData ) {\n    if( eventData.name === 'mselected' && eventData.value && eventData.value.length === 1 ) {\n        var objectValidSourceTypes = exports.getObjectValidSourceTypes( eventData.value[ 0 ] );\n        objectValidSourceTypes = objectValidSourceTypes || {};\n        appCtxService.registerCtx( 'selectedModelTypeRelations', Object.keys( objectValidSourceTypes ) );\n    }\n}\n\n/**\n * create Success Message For DND\n *\n * @param {sourceObjects} sourceObjects -Service to use.\n * @param {targetObject} targetObject -Service to use.\n *\n * invoke success message\n */\nfunction createSuccessMessageForDND( sourceObjects, targetObject ) {\n    var pasteSuccessMessage = {\n        messageText: '',\n        messageTextParams: []\n    };\n\n    if( sourceObjects.length > 1 ) {\n        localeSvc.getLocalizedTextFromKey( 'ZeroCompileCommandMessages.pasteMultipleSuccessMessage' ).then( function( response ) {\n            pasteSuccessMessage.messageText = response;\n            pasteSuccessMessage.messageTextParams = [\n                sourceObjects.length,\n                targetObject.props.object_string.uiValues[ 0 ]\n            ];\n            var messageText = messagingSvc.applyMessageParamsWithoutContext( pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams );\n            messagingSvc.showInfo( messageText );\n        } );\n    } else {\n        localeSvc.getLocalizedTextFromKey( 'ZeroCompileCommandMessages.pasteSuccessMessage' ).then( function( response ) {\n            pasteSuccessMessage.messageText = response;\n            const sourceObjectName = sourceObjects && sourceObjects[ 0 ].props && sourceObjects[ 0 ].props.object_string ?\n                sourceObjects[ 0 ].props.object_string.uiValues[ 0 ] : sourceObjects[ 0 ].name;\n            pasteSuccessMessage.messageTextParams = [\n                sourceObjectName,\n                targetObject.props.object_string.uiValues[ 0 ]\n            ];\n            var messageText = messagingSvc.applyMessageParamsWithoutContext( pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams );\n            messagingSvc.showInfo( messageText );\n        } );\n    }\n}\n\n/**\n * create Failure Message For DND\n *\n * @param {errorReason} errorReason -Service to use.\n *\n *  invokes  failure message\n */\nfunction createFailureMessageForDND( errorReason ) {\n    localeSvc.getLocalizedTextFromKey( 'ZeroCompileCommandMessages.pasteFailureMessage' ).then( result => {\n        var pasteFailureMessage = result;\n        var errorText = pasteFailureMessage + ':';\n        _.forEach( errorReason.message.split( /\\n/g ), function( messageLine ) {\n            errorText = errorText + '<br>' + messageLine;\n        } );\n        messagingSvc.showInfo( errorText );\n    } );\n}\n\n/**\n * handler for dragDrop event\n * @param {Array} sourceObjects source objects drag frim\n * @param {Object} targetObject target object drop to\n */\nfunction handleSuccess( sourceObjects, targetObject ) {\n    var adaptedSourceObjects = adapterSvc.getAdaptedObjectsSync( sourceObjects );\n    createSuccessMessageForDND( adaptedSourceObjects, targetObject );\n}\n\nexport const getTargetType = function( targetObject ) {\n    var targetTypes = getTargetTypes();\n    var typeHier = declUtils.getTypeHierarchy( targetObject ) || [ targetObject.type ];\n\n    if( typeHier[ 0 ] ) {\n        for( var ii = 0; ii < typeHier.length; ii++ ) {\n            var typeName = typeHier[ ii ];\n            if( targetTypes.has( typeName ) ) {\n                return targetTypes.get( typeName );\n            }\n        }\n    }\n    return null;\n};\n\nexport const getSourceType = function( sourceTypes, sourceObject ) {\n    var typeHier = declUtils.getTypeHierarchy( sourceObject ) || [ sourceObject.type ];\n\n    if( typeHier[ 0 ] ) {\n        for( var ii = 0; ii < typeHier.length; ii++ ) {\n            var typeName = typeHier[ ii ];\n            if( sourceTypes[ typeName ] ) {\n                return sourceTypes[ typeName ];\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * To Paste objects with single relationType\n *\n * This would\n * 1. use bestTargetFitFinder function to find the best possible Target Fit for the given target object by reading the paste configuration.\n * 2. use bestSourceFitFinder function to find the best possible Source Fit for the given source object by reading the paste configuration.\n * 3. Invoke the configured pasteHandler for the target + source type combination.\n * 4. If no suitable target + source type combination for paste handler is found then (configured) default paste handler is invoked.\n *\n * @param {Object} targetObject - The 'target' Object for the paste.\n * @param {Array} sourceObjects - Array of 'source' Objects to paste onto the 'target' Object.\n * @param {String} relationType - Relation type name\n * @param {object} customPasteContext - custom paste context\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let execute = function( targetObject, sourceObjects, relationType, customPasteContext ) {\n    var queue = {};\n    var custObj = customPasteContext;\n    if( custObj && !custObj.hasOwnProperty( 'isDragDropIntent' ) ) {\n        custObj.isDragDropIntent = false;\n    } else if( !custObj ) {\n        custObj = { isDragDropIntent: false };\n    }\n    var defaultPasteHandlerConfiguration = awConfiguration.get( 'solutionDef.defaultPasteHandlerConfiguration' );\n\n    var doAction = function( defaultPasteHandler, declViewModel ) {\n        _.forEach( sourceObjects, function( sourceObject ) {\n            var pasteContext = { targetObject: targetObject, sourceObject: sourceObject, relationType: relationType, ...custObj };\n            var targetTypeConfig = null;\n            if( typeof defaultPasteHandlerConfiguration === 'object' ) {\n                targetTypeConfig = defaultPasteHandler[ defaultPasteHandlerConfiguration.bestTargetFitFinder ]( targetObject );\n            } else {\n                targetTypeConfig = getTargetType( targetObject );\n            }\n            var action = null;\n            var actionName = null;\n\n            if( targetTypeConfig ) {\n                var sourceTypeConfig = null;\n                if( typeof defaultPasteHandlerConfiguration === 'object' ) {\n                    sourceTypeConfig = defaultPasteHandler[ defaultPasteHandlerConfiguration.bestSourceFitFinder ]( targetTypeConfig.sourceTypes, sourceObject );\n                } else {\n                    sourceTypeConfig = getSourceType( targetTypeConfig.sourceTypes, sourceObject );\n                }\n                var length = 0;\n                var currentLength;\n\n                if( sourceTypeConfig ) {\n                    _.forEach( sourceTypeConfig, function( pasteHandlers ) {\n                        var pasteHandlerObject = _pasteConfig.pasteHandlers[ pasteHandlers ];\n                        var conditionResult = false;\n\n                        var conditionExpression = pasteHandlerObject.activeWhen.condition;\n                        if( _.startsWith( pasteHandlerObject.activeWhen.condition, 'conditions.' ) ) {\n                            conditionExpression = _.get( _pasteConfig, pasteHandlerObject.activeWhen.condition );\n                        }\n                        if( conditionExpression !== null ) {\n                            currentLength = ccu.getExpressionLength( conditionExpression.expression, declViewModel );\n                            conditionResult = conditionSvc.evaluateCondition( {\n                                ctx: appCtxService.ctx,\n                                pasteContext: pasteContext\n                            }, conditionExpression.expression );\n                        }\n                        if( conditionResult && currentLength > length ) {\n                            length = currentLength;\n                            action = _pasteConfig.actions[ pasteHandlerObject.action ];\n                            actionName = pasteHandlerObject.action;\n                        }\n                    } );\n                }\n            }\n\n            if( !actionName && typeof defaultPasteHandlerConfiguration === 'object' ) {\n                var handlerFunctionName = defaultPasteHandlerConfiguration.pasteHandler;\n                actionName = _pasteConfig.pasteHandlers[ handlerFunctionName ].action;\n                action = _pasteConfig.actions[ actionName ];\n\n                logger.warn( 'No configured paste handler found for source object: \\'' + sourceObject +\n                    '\\' when target object: \\'' + targetObject + '\\'' + '\\n' +\n                    'RelationType: \\'' + relationType + '\\'' + '\\n' +\n                    '...Assuming default handler' );\n            }\n\n            if( actionName ) {\n                if( !queue.hasOwnProperty( actionName ) ) {\n                    queue[ actionName ] = {};\n                }\n                if( !queue[ actionName ].hasOwnProperty( 'sourceObjs' ) ) {\n                    queue[ actionName ].sourceObjs = [];\n                }\n                queue[ actionName ].sourceObjs.push( sourceObject );\n                if( action ) {\n                    queue[ actionName ].handlerAction = action;\n                }\n            }\n        } );\n\n        /**\n         * Loop for each unique 'handler' and build up a promise chain.\n         */\n\n        var promiseArray = [];\n        _.forEach( queue, function( queuedSrcObjInfo ) {\n            var depFileToLoad = queuedSrcObjInfo.handlerAction.deps;\n            var depModuleObj = null;\n            var dataCtxNode = {\n                data: declViewModel,\n                ctx: appCtxService.ctx,\n                pasteContext: { targetObject: targetObject, sourceObject: queuedSrcObjInfo.sourceObjs, relationType: relationType, ...custObj }\n            };\n\n            if( depFileToLoad ) {\n                //Revisit: getDependentModule is yet to be supported\n                //depModuleObj = moduleLoader.getDependentModule( queuedSrcObjInfo.handlerAction.deps );\n                if( !depModuleObj ) {\n                    promiseArray.push( moduleLoader.loadDependentModule( queuedSrcObjInfo.handlerAction.deps ).then( function( pasteHandler ) {\n                        depModuleObj = pasteHandler;\n                        return actionService.executeAction( declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false );\n                    } ) );\n                } else {\n                    promiseArray.push( actionService.executeAction( declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false ) );\n                }\n            } else {\n                promiseArray.push( actionService.executeAction( declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false ) );\n            }\n        } );\n        return AwPromiseService.instance.all( promiseArray );\n    };\n\n    var performAction = function( declViewModel ) {\n        if( defaultPasteHandlerConfiguration.deps ) {\n            //Revisit: getDependentModule is yet to be supported\n            //var defaultPasteHandler = moduleLoader.getDependentModule( defaultPasteHandlerConfiguration.deps );\n            //if( !defaultPasteHandler ) {\n            // return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n            //     return doAction( pasteHandler, declViewModel );\n            // } );\n            //}\n            //return doAction( defaultPasteHandler, declViewModel );\n            return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n                return doAction( pasteHandler, declViewModel );\n            } );\n        }\n        return doAction( null, declViewModel );\n    };\n    if( !_declViewModel ) {\n        return createViewModel( _pasteConfig ).then( function( declViewModel ) {\n            _declViewModel = declViewModel;\n            return performAction( _declViewModel );\n        } );\n    }\n    return performAction( _declViewModel );\n};\n\n/**\n * To Paste objects with different relationTypes\n * Same as {@link module:js/pasteService.execute|execute} except that this executes with multiple source object + relation types for a single target object.\n *\n * @param {Object} targetObject - the target object to paste the source objects to\n * @param {Object} relationTypeToSources - an object of key/value: relationType/array-of-sourceObjects\n *\n * @returns {Promise} Resolved when all processing is complete.\n */\nexport let executeWithMultipleRelations = function( targetObject, relationTypeToSources ) {\n    var allPromises = [];\n\n    _.forOwn( relationTypeToSources, function( sourceObjects, relationType ) {\n        allPromises.push( exports.execute( targetObject, sourceObjects, relationType ) );\n    } );\n\n    return AwPromiseService.instance.all( allPromises );\n};\n\nexport const determineActiveHandler = ( sourceObjects, targetObject ) => {\n    var conditionResult = false;\n    _.forOwn( _pasteConfig.pasteHandlers, ( pasteHandlerObject ) => {\n        var conditionExpression = pasteHandlerObject.activeWhen ? pasteHandlerObject.activeWhen.condition : null;\n        if( conditionExpression ) {\n            if( _.startsWith( pasteHandlerObject.activeWhen.condition, 'conditions.' ) ) {\n                conditionExpression = _.get( _pasteConfig, pasteHandlerObject.activeWhen.condition );\n            }\n            if( conditionExpression !== null ) {\n                conditionResult = conditionResult || conditionSvc.evaluateCondition( {\n                    ctx: appCtxService.ctx,\n                    pasteContext: {\n                        targetObject: targetObject,\n                        sourceObject: sourceObjects,\n                        relationType: ''\n                    }\n                }, conditionExpression.expression );\n            }\n        }\n    } );\n    return conditionResult;\n};\n\n/**\n * Gets all of the available targetTypes configured in paste.json files from different modules.\n *\n * @return {Object} The 'targetTypes' from the 'pasteConfig'\n */\nexport let getTargetTypes = function() {\n    return _pasteConfigMap ? _pasteConfigMap : {};\n};\n\n/**\n * @param {Object} targetObject - The 'target' IModelObject to use when determining which 'source' types are\n *            potentially valid to be dropped upon it.\n * @return {Object|null} The 'sourceTypes' property from the 'pasteConfig' for the given 'target' object type or its\n *         ancestor types up the hierarchy (or NULL if no match was found).\n */\nexport let getObjectValidSourceTypes = function( targetObject ) {\n    if( targetObject && targetObject.modelType && targetObject.modelType.typeHierarchyArray || targetObject && targetObject.typeHierarchy ) {\n        var typeHier = declUtils.getTypeHierarchy( targetObject );\n\n        /**\n         * Starting at the 'target' object's actual type, try to find a matching 'targetType' property in the\n         * 'pasteConfig'. If an exact match is not found, try the super type of the 'target' up its hierarchy tree. Stop\n         * looking when the 1st one (i.e. the 'closest' one) is found.\n         */\n        var targetTypes = exports.getTargetTypes();\n\n        for( var ii = 0; ii < typeHier.length; ii++ ) {\n            var typeName = typeHier[ ii ];\n\n            if( targetTypes.has( typeName ) ) {\n                return targetTypes.get( typeName ).sourceTypes;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * Get underlying BO for view model objects\n *\n * @param {Array} viewModelObjects - view model objects to adapt\n * @return {input} adapted object\n */\nexport let adaptedInput = function( viewModelObjects ) {\n    if( viewModelObjects ) {\n        var objectsToAdapt = _.isArray( viewModelObjects ) ? viewModelObjects : [ viewModelObjects ];\n        return adapterSvc.getAdaptedObjectsSync( objectsToAdapt );\n    }\n    return [];\n};\n\nexport let loadConfiguration = function() {\n    _pasteConfig = cfgSvc.getCfgCached( 'paste' ) || {};\n\n    updateThePasteConfig();\n\n    eventBus.subscribe( 'appCtx.register', changeValidSourceTypesForSelected );\n    eventBus.subscribe( 'dragDrop.success', function( event ) {\n        handleSuccess( event.sourceObjects, event.targetObject );\n    } );\n    eventBus.subscribe( 'dragDrop.failure', function( event ) {\n        createFailureMessageForDND( event.reason );\n    } );\n\n    eventBus.subscribePostal( {\n        channel: 'paste',\n        topic: 'drop',\n        callback: function( eventData ) {\n            if( eventData && eventData.pasteInput ) {\n                _.forEach( eventData.pasteInput, function( pasteInput ) {\n                    var targetObject = pasteInput.targetObject;\n                    var relationType = pasteInput.relationType;\n                    var sourceObjects = pasteInput.sourceObjects;\n\n                    exports.execute( targetObject, sourceObjects, relationType, { ...pasteInput.props, isDragDropIntent: true } ).then( function() {\n                        var eventData = {\n                            relatedModified: [ targetObject ],\n                            refreshLocationFlag: false,\n                            createdObjects: sourceObjects\n                        };\n                        eventBus.publish( 'cdm.relatedModified', eventData );\n                    } );\n                } );\n            }\n        }\n    } );\n};\n\nexports = {\n    execute,\n    executeWithMultipleRelations,\n    getTargetTypes,\n    getObjectValidSourceTypes,\n    adaptedInput,\n    loadConfiguration,\n    determineActiveHandler\n};\nexport default exports;\n\nloadConfiguration();\n"]},"metadata":{},"sourceType":"module"}
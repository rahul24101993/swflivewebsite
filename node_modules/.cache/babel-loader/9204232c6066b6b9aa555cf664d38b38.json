{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service is used for simpletabe as Column Filter Utility\n *\n * @module js/awColumnFilterUtility\n *\n */import _ from'lodash';var exports={};export let OPERATION_TYPE={RANGE:'range',GREATER:'gt',GREATER_EQUALS:'gte',LESS:'lt',LESS_EQUALS:'lte',EQUALS:'equals',CASE_SENSITIVE_EQUALS:'caseSensitiveEquals',NOT_EQUALS:'notEquals',CASE_SENSITIVE_NOT_EQUALS:'caseSensitiveNotEquals',CONTAINS:'contains',NOT_CONTAINS:'notContains',STARTS_WITH:'startsWith',ENDS_WITH:'endsWith'};export let FILTER_VIEW={NUMERIC:'splmTableNumericColumnMenu',DATE:'splmTableDateColumnMenu',TEXT:'splmTableTextColumnMenu'};/**\n * Adds the new column filter tot he columnFilters input.\n *\n * @param {Array} columnFilters - Collection of all the column filters\n * @param {Object} newColumnFilters - The new column filter to apply\n * @returns {Array} columnFilters\n */export let addOrReplaceColumnFilter=function(columnFilters,newColumnFilters){columnFilters=columnFilters||[];if(_.isArray(newColumnFilters)&&newColumnFilters.length){exports.removeColumnFilter(columnFilters,newColumnFilters[0].columnName);columnFilters=columnFilters.concat(newColumnFilters);}return columnFilters;};/**\n * Removes the column filters that are applied to the column by name.\n *\n * @param {Array} columnFilters - Collection of all the column filters\n * @param {String} columnName - The name of the column\n * @returns {Boolean} whether a filter was removed or not\n */export let removeColumnFilter=function(columnFilters,columnName){var isFilterRemoved=false;if(columnFilters&&columnFilters.length&&columnName){_.remove(columnFilters,function(currentFilter){if(currentFilter.columnName===columnName){isFilterRemoved=true;return true;}return false;});}return isFilterRemoved;};/**\n * Builds a basic column filter used for all filter types.\n *\n * @param {String} columnName - Column name the filter is applied to\n * @param {Array} values - Filter values\n *\n * @returns {Object} filter object\n */export let createBasicColumnFilter=function(columnName,values){var returnFilter={columnName:columnName};var filterValues=[];_.forEach(values,function(currentValue){var stringValue=_(currentValue).toString();filterValues.push(stringValue);});returnFilter.values=filterValues;return returnFilter;};/**\n * Create a filter based on the operation and values.\n *\n * @param {String} operation - operation name of the filter\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createFilter=function(operation,columnName,values){var columnFilter=exports.createBasicColumnFilter(columnName,values);columnFilter.operation=operation;return columnFilter;};/**\n * Create a 'Contains' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createContainsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.CONTAINS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Does not contain' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createNotContainsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.NOT_CONTAINS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Range' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createRangeFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.RANGE;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Less Than or Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createLessThanEqualsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.LESS_EQUALS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Less Than' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createLessThanFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.LESS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Greater Than Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createGreaterThanEqualsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.GREATER_EQUALS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Greater Than' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createGreaterThanFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.GREATER;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createEqualsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.EQUALS;return exports.createFilter(operation,columnName,values);};/**\n * Create a case sensitive 'Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createCaseSensitiveEqualsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.CASE_SENSITIVE_EQUALS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Not Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createNotEqualsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.NOT_EQUALS;return exports.createFilter(operation,columnName,values);};/**\n * Create a case sensitive 'Not Equals' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createCaseSensitiveNotEqualsFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Starts With' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createStartsWithFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.STARTS_WITH;return exports.createFilter(operation,columnName,values);};/**\n * Create a 'Starts With' filter object.\n *\n * @param {String} columnName - column name of the grid\n * @param {Array} values - values of filter input\n *\n * @returns {Object} Filter object\n */export let createEndsWithFilter=function(columnName,values){var operation=exports.OPERATION_TYPE.ENDS_WITH;return exports.createFilter(operation,columnName,values);};/**\n * Test the column filter object to make sure it has the valid information for 'Range'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidRangeColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===2&&columnFilter.operation===exports.OPERATION_TYPE.RANGE;};/**\n * Test the column filter object to make sure it has the valid information for 'Contains'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidContainsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.CONTAINS;};/**\n * Test the column filter object to make sure it has the valid information for 'Does not contain'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidNotContainsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.NOT_CONTAINS;};/**\n * Test the column filter object to make sure it has the valid information for 'Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidEqualsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.EQUALS;};/**\n * Test the column filter object to make sure it has the valid information for case sensitive 'Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidCaseSensitiveEqualsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.CASE_SENSITIVE_EQUALS;};/**\n * Test the column filter object to make sure it has the valid information for 'Not Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidNotEqualsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.NOT_EQUALS;};/**\n * Test the column filter object to make sure it has the valid information for case sensitive 'Not Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidCaseSensitiveNotEqualsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS;};/**\n * Test the column filter object to make sure it has the valid information for 'Less Than'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidLessThanColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.LESS;};/**\n * Test the column filter object to make sure it has the valid information for 'Less Than or Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidLessThanEqualsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.LESS_EQUALS;};/**\n * Test the column filter object to make sure it has the valid information for 'Greater Than'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidGreaterThanColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.GREATER;};/**\n * Test the column filter object to make sure it has the valid information for 'Greater Than or Equals'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidGreaterThanEqualsColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.GREATER_EQUALS;};/**\n * Test the column filter object to make sure it has the valid information for 'Begins with'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidStartsWithColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.STARTS_WITH;};/**\n * Test the column filter object to make sure it has the valid information for 'Ends with'.\n *\n * @param {Object} columnFilter - Column filter information being tested\n *\n * @returns {Boolean} true is input filter object is valid\n */export let isValidEndsWithColumnFilter=function(columnFilter){return columnFilter&&columnFilter.values&&columnFilter.values.length===1&&columnFilter.operation===exports.OPERATION_TYPE.ENDS_WITH;};exports={OPERATION_TYPE,FILTER_VIEW,addOrReplaceColumnFilter,removeColumnFilter,createBasicColumnFilter,createFilter,createContainsFilter,createNotContainsFilter,createRangeFilter,createLessThanEqualsFilter,createLessThanFilter,createGreaterThanEqualsFilter,createGreaterThanFilter,createEqualsFilter,createCaseSensitiveEqualsFilter,createNotEqualsFilter,createCaseSensitiveNotEqualsFilter,createStartsWithFilter,createEndsWithFilter,isValidRangeColumnFilter,isValidContainsColumnFilter,isValidNotContainsColumnFilter,isValidEqualsColumnFilter,isValidCaseSensitiveEqualsColumnFilter,isValidNotEqualsColumnFilter,isValidCaseSensitiveNotEqualsColumnFilter,isValidLessThanColumnFilter,isValidLessThanEqualsColumnFilter,isValidGreaterThanColumnFilter,isValidGreaterThanEqualsColumnFilter,isValidStartsWithColumnFilter,isValidEndsWithColumnFilter};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable no-await-in-loop */\n// Copyright (c) 2022 Siemens\n\n/**\n * Defines {@link NgServices.commandHighlightService} which manages highlighting commands.\n *\n * @module js/commandHighlightService\n *\n * @namespace commandHighlightService\n */\nimport configurationService from 'js/configurationService';\nimport _ from 'lodash';\nimport AwTimeoutService from 'js/awTimeoutService';\nimport wcagSvc from 'js/wcagService';\nimport htmlUtils from 'js/htmlUtils';\nlet exports;\nconst notInFooterButton = 'not(aw-footer button)';\nconst notInFooterLi = 'not(aw-footer li)';\nconst retryMaxCount = 10;\nconst idleTimeMs = 50;\n/**\n * Delay the execution for a given ms\n *\n * @function delay\n * @param {Number} ms - amount of milliseconds to wait\n * @return {Promise} promise - resolved after x amount of milliseconds\n */\n\nconst delay = function (ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n/**\n * Click a command with the given name. Differs from original step def as it will also locate the command within a\n * group if necessary.\n *\n * @function getCommandPlacements\n * @param {String} commandId - ID of the command to check for\n * @param {Object} placementInfo - Object with \"anchors\" and \"groups\" properties\n */\n\n\nexport const getCommandPlacements = async function (commandId) {\n  const commandsViewModel = await configurationService.getCfg('commandsViewModel');\n\n  const placements = _.filter(commandsViewModel.commandPlacements, placement => commandId === placement.id);\n\n  const placementInfo = placements.reduce((acc, nxt) => {\n    if (nxt.parentGroupId) {\n      acc.groups[nxt.parentGroupId] = true;\n    } else {\n      acc.anchors[nxt.uiAnchor] = true;\n    }\n\n    return acc;\n  }, {\n    anchors: {},\n    groups: {}\n  });\n  placementInfo.anchors = Object.keys(placementInfo.anchors);\n  placementInfo.groups = Object.keys(placementInfo.groups);\n  return placementInfo;\n};\n/**\n * Poll the popup until it populates with a given command ID\n *\n * @function getCommandInPopup\n * @param {String} commandId - the ID to search the page for\n * @return {Element} popupCmdElement - command element in the popup\n */\n\nexport const getCommandInPopup = async function (commandId) {\n  let retryCounter = 0;\n  let popupCmdElement;\n  let loadingElement;\n  setTimeout(function () {\n    retryCounter = retryMaxCount; // After 10 seconds just quit\n  }, 10000);\n\n  while (retryCounter < retryMaxCount) {\n    loadingElement = htmlUtils.getElementByXpath('//div[contains(@class, \\'aw-popup-command-bar\\')]//div[contains(@class,\\'aw-jswidgets-loading\\')]', document.body);\n\n    if (!loadingElement) {\n      popupCmdElement = htmlUtils.getElementByXpath(`//li[@command-id='${commandId}']`, document.body);\n\n      if (popupCmdElement) {\n        return popupCmdElement;\n      }\n\n      retryCounter++;\n    }\n\n    await delay(idleTimeMs);\n  }\n};\n/**\n * Check if the group command has a given command ID inside it\n *\n * @function checkGroupForElement\n * @param {String} commandId - the ID to search the popup for\n * @param {String} groupCommandLocation - groupCommand element to click\n * @return {Element} commandElement - the command element with ID we were looking for\n */\n\nexport const checkGroupForElement = async function (commandId, groupCommandLocation) {\n  let $timeout = AwTimeoutService.instance; // Slight delay as the overflow loading is not instant\n\n  if (groupCommandLocation) {\n    await $timeout(() => {\n      groupCommandLocation.click();\n    }, 500, false);\n    const commandElement = await exports.getCommandInPopup(commandId);\n\n    if (commandElement) {\n      return commandElement;\n    }\n  }\n};\n/**\n * Clicks an element if it exists\n *\n * @function clickElement\n * @param {String} element - the element to click\n */\n\nconst clickElement = function (element) {\n  if (element) {\n    element.click();\n  }\n};\n/**\n * Click the commandOverflow and check if the command is in the popup\n *\n * @function clickCommandOverflowAndCheckPopup\n * @param {Element} element - the aw-command element\n * @param {Element} commandOverflow - the command-overflow element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\n\n\nexport const clickCommandOverflowAndCheckPopup = async function (element, commandOverflow, commandId, checkPopupForCmd) {\n  let $timeout = AwTimeoutService.instance;\n  await $timeout(() => {\n    clickElement(commandOverflow);\n  }, 100, false);\n\n  if (checkPopupForCmd) {\n    const elementInPopup = await getCommandInPopup(commandId);\n\n    if (elementInPopup) {\n      return elementInPopup;\n    }\n  }\n};\n/**\n * Click the overflow button ie '...' or 'More' and then get the command ID element in that popup\n *\n * @function clickOverflowAndGetCommand\n * @param {Element} element - the aw-command element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\n\nexport const clickOverflowAndGetCommand = async function (element, commandId) {\n  let checkPopupForCmd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let commandOverflow;\n  let toolbar = element.closest('.aw-toolbar-layout');\n\n  if (toolbar) {\n    let childCommandBars = toolbar.querySelectorAll('.aw-command-bar');\n\n    for (const commandBar of childCommandBars) {\n      const anchor = commandBar.getAttribute('anchor');\n      commandOverflow = htmlUtils.getElementByXpath(`//div[@anchor='${anchor}']//div[contains(@class, 'aw-commands-moreButton')]//button`, document.body);\n\n      if (commandOverflow) {\n        return exports.clickCommandOverflowAndCheckPopup(element, commandOverflow, commandId, checkPopupForCmd);\n      }\n    }\n\n    if (!commandOverflow) {\n      //look in toolbar\n      commandOverflow = toolbar.querySelector('.aw-commands-moreButton button');\n\n      if (commandOverflow) {\n        return exports.clickCommandOverflowAndCheckPopup(element, commandOverflow, commandId, checkPopupForCmd);\n      }\n    }\n  }\n\n  let commandBar = element.closest('.aw-command-bar');\n\n  if (commandBar) {\n    const anchor = commandBar.getAttribute('anchor');\n    commandOverflow = htmlUtils.getElementByXpath(`//div[@anchor='${anchor}']//div[contains(@class, 'aw-command-overflowIcon')]//button`, document.body);\n    return exports.clickCommandOverflowAndCheckPopup(element, commandOverflow, commandId, checkPopupForCmd);\n  }\n};\n/**\n * Get the correct HTML element for a given command ID\n *\n * @function getCommandElement\n * @param {String} commandId - the ID to search the page for\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} element - the command element\n */\n\nexport const getCommandElement = async function (commandId, xPath, grpCmdAnchor) {\n  let element = htmlUtils.getElementByXpath(xPath, document.body);\n\n  if (element) {\n    const tabIndex = element.getAttribute('tabindex');\n\n    if (tabIndex && parseInt(tabIndex) < 0) {\n      //overflow\n      return await exports.clickOverflowAndGetCommand(element, commandId);\n    }\n\n    return element;\n  }\n\n  const commandPlacements = await exports.getCommandPlacements(commandId);\n\n  for (const groupId of commandPlacements.groups) {\n    let groupCommandLocation = htmlUtils.getElementByXpath(`//div[@anchor='${grpCmdAnchor}']//button[@command-id='${groupId}']`, document.body);\n\n    if (groupCommandLocation) {\n      const tabIndex = groupCommandLocation.getAttribute('tabindex');\n\n      if (tabIndex && parseInt(tabIndex) < 0) {\n        // overflow\n        let groupCommandElement = await exports.clickOverflowAndGetCommand(groupCommandLocation, groupId);\n        let commandElement = await exports.checkGroupForElement(commandId, groupCommandElement);\n\n        if (commandElement) {\n          return commandElement;\n        }\n      }\n\n      let commandElement = await exports.checkGroupForElement(commandId, groupCommandLocation);\n\n      if (commandElement) {\n        return commandElement;\n      }\n    }\n  }\n};\n/**\n * Highlight a given command ID in the LHN/PWA/Right wall\n *\n * @function highlightCommand\n * @param {String} commandId - command ID to highlight\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} commandElement - the command element with ID we were looking for\n */\n\nexport const highlightCommand = async function (commandId, xPath, grpCmdAnchor) {\n  let commandElement = await exports.getCommandElement(commandId, xPath, grpCmdAnchor);\n\n  if (commandElement) {\n    wcagSvc.afxFocusElement(commandElement);\n  }\n\n  return commandElement;\n};\n/**\n * Click on a given command ID\n *\n * @function clickOnCommand\n * @param {String} commandId - command ID to click on\n * @param {String} xPath - xPath of the command in the DOM\n * @return {Element} commandElement - the command element with ID we were looking for\n */\n\nexport const clickOnCommand = async function (commandId, xPath) {\n  let commandElement = await exports.getCommandElement(commandId, xPath);\n\n  if (commandElement) {\n    commandElement.click();\n  }\n};\nexports = {\n  getCommandPlacements,\n  getCommandInPopup,\n  checkGroupForElement,\n  clickCommandOverflowAndCheckPopup,\n  clickOverflowAndGetCommand,\n  getCommandElement,\n  highlightCommand,\n  clickOnCommand\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/commandHighlightService.js"],"names":["notInFooterButton","notInFooterLi","retryMaxCount","idleTimeMs","delay","resolve","setTimeout","getCommandPlacements","commandsViewModel","configurationService","placements","_","placement","commandId","placementInfo","nxt","acc","anchors","groups","Object","getCommandInPopup","retryCounter","loadingElement","htmlUtils","document","popupCmdElement","checkGroupForElement","$timeout","AwTimeoutService","groupCommandLocation","commandElement","exports","clickElement","element","clickCommandOverflowAndCheckPopup","elementInPopup","clickOverflowAndGetCommand","checkPopupForCmd","toolbar","childCommandBars","anchor","commandBar","commandOverflow","getCommandElement","tabIndex","parseInt","commandPlacements","grpCmdAnchor","groupId","groupCommandElement","highlightCommand","wcagSvc","clickOnCommand"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\n// Copyright (c) 2022 Siemens\n\n/**\n * Defines {@link NgServices.commandHighlightService} which manages highlighting commands.\n *\n * @module js/commandHighlightService\n *\n * @namespace commandHighlightService\n */\nimport configurationService from 'js/configurationService';\nimport _ from 'lodash';\nimport AwTimeoutService from 'js/awTimeoutService';\nimport wcagSvc from 'js/wcagService';\nimport htmlUtils from 'js/htmlUtils';\n\nlet exports;\n\nconst notInFooterButton = 'not(aw-footer button)';\n\nconst notInFooterLi = 'not(aw-footer li)';\n\nconst retryMaxCount = 10;\n\nconst idleTimeMs = 50;\n\n/**\n * Delay the execution for a given ms\n *\n * @function delay\n * @param {Number} ms - amount of milliseconds to wait\n * @return {Promise} promise - resolved after x amount of milliseconds\n */\nconst delay = function( ms ) {\n    return new Promise( resolve => setTimeout( resolve, ms ) );\n};\n\n/**\n * Click a command with the given name. Differs from original step def as it will also locate the command within a\n * group if necessary.\n *\n * @function getCommandPlacements\n * @param {String} commandId - ID of the command to check for\n * @param {Object} placementInfo - Object with \"anchors\" and \"groups\" properties\n */\nexport const getCommandPlacements = async function( commandId ) {\n    const commandsViewModel = await configurationService.getCfg( 'commandsViewModel' );\n\n    const placements = _.filter( commandsViewModel.commandPlacements, placement => commandId === placement.id );\n\n    const placementInfo = placements.reduce( ( acc, nxt ) => {\n        if( nxt.parentGroupId ) {\n            acc.groups[ nxt.parentGroupId ] = true;\n        } else {\n            acc.anchors[ nxt.uiAnchor ] = true;\n        }\n        return acc;\n    }, {\n        anchors: {},\n        groups: {}\n    } );\n\n    placementInfo.anchors = Object.keys( placementInfo.anchors );\n    placementInfo.groups = Object.keys( placementInfo.groups );\n    return placementInfo;\n};\n\n/**\n * Poll the popup until it populates with a given command ID\n *\n * @function getCommandInPopup\n * @param {String} commandId - the ID to search the page for\n * @return {Element} popupCmdElement - command element in the popup\n */\nexport const getCommandInPopup = async function( commandId ) {\n    let retryCounter = 0;\n    let popupCmdElement;\n    let loadingElement;\n\n    setTimeout( function() {\n        retryCounter = retryMaxCount; // After 10 seconds just quit\n    }, 10000 );\n\n    while( retryCounter < retryMaxCount ) {\n        loadingElement = htmlUtils.getElementByXpath( '//div[contains(@class, \\'aw-popup-command-bar\\')]//div[contains(@class,\\'aw-jswidgets-loading\\')]', document.body );\n        if( !loadingElement ) {\n            popupCmdElement = htmlUtils.getElementByXpath( `//li[@command-id='${commandId}']`, document.body );\n            if( popupCmdElement ) {\n                return popupCmdElement;\n            }\n            retryCounter++;\n        }\n        await delay( idleTimeMs );\n    }\n};\n\n/**\n * Check if the group command has a given command ID inside it\n *\n * @function checkGroupForElement\n * @param {String} commandId - the ID to search the popup for\n * @param {String} groupCommandLocation - groupCommand element to click\n * @return {Element} commandElement - the command element with ID we were looking for\n */\nexport const checkGroupForElement = async function( commandId, groupCommandLocation ) {\n    let $timeout = AwTimeoutService.instance;\n    // Slight delay as the overflow loading is not instant\n    if( groupCommandLocation ) {\n        await $timeout( () => {\n            groupCommandLocation.click();\n        }, 500, false );\n\n        const commandElement = await exports.getCommandInPopup( commandId );\n\n        if( commandElement ) {\n            return commandElement;\n        }\n    }\n};\n\n/**\n * Clicks an element if it exists\n *\n * @function clickElement\n * @param {String} element - the element to click\n */\nconst clickElement = function( element ) {\n    if( element ) {\n        element.click();\n    }\n};\n\n/**\n * Click the commandOverflow and check if the command is in the popup\n *\n * @function clickCommandOverflowAndCheckPopup\n * @param {Element} element - the aw-command element\n * @param {Element} commandOverflow - the command-overflow element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\nexport const clickCommandOverflowAndCheckPopup = async function( element, commandOverflow, commandId, checkPopupForCmd ) {\n    let $timeout = AwTimeoutService.instance;\n    await $timeout( () => {\n        clickElement( commandOverflow );\n    }, 100, false );\n    if( checkPopupForCmd ) {\n        const elementInPopup = await getCommandInPopup( commandId );\n        if( elementInPopup ) {\n            return elementInPopup;\n        }\n    }\n};\n\n/**\n * Click the overflow button ie '...' or 'More' and then get the command ID element in that popup\n *\n * @function clickOverflowAndGetCommand\n * @param {Element} element - the aw-command element\n * @param {String} commandId - the final command ID to return\n * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not\n * @return {Element} element - the element in a popup\n */\nexport const clickOverflowAndGetCommand = async function( element, commandId, checkPopupForCmd = true ) {\n    let commandOverflow;\n    let toolbar = element.closest( '.aw-toolbar-layout' );\n    if( toolbar ) {\n        let childCommandBars = toolbar.querySelectorAll( '.aw-command-bar' );\n        for( const commandBar of childCommandBars ) {\n            const anchor = commandBar.getAttribute( 'anchor' );\n            commandOverflow = htmlUtils.getElementByXpath( `//div[@anchor='${anchor}']//div[contains(@class, 'aw-commands-moreButton')]//button`, document.body );\n            if( commandOverflow ) {\n                return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );\n            }\n        }\n        if( !commandOverflow ) {\n            //look in toolbar\n            commandOverflow = toolbar.querySelector( '.aw-commands-moreButton button' );\n            if( commandOverflow ) {\n                return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );\n            }\n        }\n    }\n    let commandBar = element.closest( '.aw-command-bar' );\n    if( commandBar ) {\n        const anchor = commandBar.getAttribute( 'anchor' );\n        commandOverflow = htmlUtils.getElementByXpath( `//div[@anchor='${anchor}']//div[contains(@class, 'aw-command-overflowIcon')]//button`, document.body );\n        return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );\n    }\n};\n\n/**\n * Get the correct HTML element for a given command ID\n *\n * @function getCommandElement\n * @param {String} commandId - the ID to search the page for\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} element - the command element\n */\nexport const getCommandElement = async function( commandId, xPath, grpCmdAnchor ) {\n    let element = htmlUtils.getElementByXpath( xPath, document.body );\n\n    if( element ) {\n        const tabIndex = element.getAttribute( 'tabindex' );\n        if( tabIndex && parseInt( tabIndex ) < 0 ) {\n            //overflow\n            return await exports.clickOverflowAndGetCommand( element, commandId );\n        }\n        return element;\n    }\n    const commandPlacements = await exports.getCommandPlacements( commandId );\n\n    for( const groupId of commandPlacements.groups ) {\n        let groupCommandLocation = htmlUtils.getElementByXpath( `//div[@anchor='${grpCmdAnchor}']//button[@command-id='${groupId}']`, document.body );\n        if( groupCommandLocation ) {\n            const tabIndex = groupCommandLocation.getAttribute( 'tabindex' );\n            if( tabIndex && parseInt( tabIndex ) < 0 ) {\n                // overflow\n                let groupCommandElement = await exports.clickOverflowAndGetCommand( groupCommandLocation, groupId );\n                let commandElement = await exports.checkGroupForElement( commandId, groupCommandElement );\n                if( commandElement ) {\n                    return commandElement;\n                }\n            }\n            let commandElement = await exports.checkGroupForElement( commandId, groupCommandLocation );\n            if( commandElement ) {\n                return commandElement;\n            }\n        }\n    }\n};\n\n/**\n * Highlight a given command ID in the LHN/PWA/Right wall\n *\n * @function highlightCommand\n * @param {String} commandId - command ID to highlight\n * @param {String} xPath - xPath of the command in the DOM\n * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)\n * @return {Element} commandElement - the command element with ID we were looking for\n */\nexport const highlightCommand = async function( commandId, xPath, grpCmdAnchor ) {\n    let commandElement = await exports.getCommandElement( commandId, xPath, grpCmdAnchor );\n    if( commandElement ) {\n        wcagSvc.afxFocusElement( commandElement );\n    }\n    return commandElement;\n};\n\n/**\n * Click on a given command ID\n *\n * @function clickOnCommand\n * @param {String} commandId - command ID to click on\n * @param {String} xPath - xPath of the command in the DOM\n * @return {Element} commandElement - the command element with ID we were looking for\n */\nexport const clickOnCommand = async function( commandId, xPath ) {\n    let commandElement = await exports.getCommandElement( commandId, xPath );\n    if( commandElement ) {\n        commandElement.click();\n    }\n};\n\nexports = {\n    getCommandPlacements,\n    getCommandInPopup,\n    checkGroupForElement,\n    clickCommandOverflowAndCheckPopup,\n    clickOverflowAndGetCommand,\n    getCommandElement,\n    highlightCommand,\n    clickOnCommand\n};\n\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/navigationTokenService\n */import cfgSvc from'js/configurationService';import cdm from'soa/kernel/clientDataModel';import adapterParserService from'js/adapterParserService';import declarativeDataCtxSvc from'js/declarativeDataCtxService';import navigationService from'js/navigationService';import viewModelProcessingFactory from'js/viewModelProcessingFactory';import viewModelObjectService from'js/viewModelObjectService';import _ from'lodash';var _navigationToken;var exports={};// A property is which type of BO will be driven by solution config , based on the same naivigationToken will be associated in the href attribute of\n// anchor tag for the particular property\n// Example :\n/* [{\"conditions\": {\"$and\": [{ \"modelType.typeHierarchyArray\": { \"$in\": \"ImanFile\" }}]},\n     \"navigations\": {\"navigateTo\": \"downloadFile\",\"navigationParams\": {\"uid\": \"{{navContext.vmo.uid}}\"}  }\n    },\n    {\"conditions\": {\"modelType.typeHierarchyArray\": {\"$notin\": \"ImanFile\"}},\n     \"navigations\": {\"navigateTo\": \"com_siemens_splm_clientfx_tcui_xrt_showObject\",\"navigationParams\": {\"uid\": \"{{navContext.vmo.uid}}\" }  }\n    }\n    ]\n*/export const getNavigationContent=function(scope,dbValue,vmo){//The scope input is not needed anymore, verify the other usecases which leverages this api\n//and this can be cleaned up\nvar conditionVerdict={};if(vmo&&vmo.navigation){return navigationService.navigate(vmo.navigation[0].navigateTo,vmo.navigation[0].navigationParams).then(function(urlDetails){return urlDetails;});}return cfgSvc.getCfg('navigationURLToken').then(function(token){_navigationToken=token;if(_navigationToken&&_navigationToken.length>0){// the below cdm check has been added to avoid any console errors when an OBJECT prop is not a VMO which ultimately shows up console errors\n// emanating out of a logger.error statement in constructViewModelObjectFromModelObject ()\n// it will be removed once cdm dependency is taken out from SWF\nif(cdm.getObject(dbValue)!==null){var propVmo=viewModelObjectService.constructViewModelObjectFromModelObject(cdm.getObject(dbValue),null,null,null,true);scope.navContext={vmo:propVmo};conditionVerdict=adapterParserService.applyConditions(propVmo,_navigationToken);if(conditionVerdict&&conditionVerdict.verdict){var inputData=_.cloneDeep(_navigationToken[conditionVerdict.index].navigations.navigationParams);try{//Revisit: Need to evluate if there is a better way of handling this\n//For now, creating a temporary declviewmodel as the 'applyscope' method expects\n//a declviewmodel\nif(inputData&&!_.isEmpty(inputData)){var declViewModel=viewModelProcessingFactory.createDeclViewModel({});declarativeDataCtxSvc.applyScope(declViewModel,inputData,null,scope,null);declViewModel._internal.destroy();}else{inputData={uid:propVmo.uid};}}catch(error){throw new Error(error);}return declarativeDataCtxSvc.applyExpression(inputData).then(function(){return navigationService.navigate(_navigationToken[conditionVerdict.index].navigations,inputData).then(function(urlDetails){return urlDetails;});});}}}return undefined;});};exports={getNavigationContent};export default exports;","map":null,"metadata":{},"sourceType":"module"}
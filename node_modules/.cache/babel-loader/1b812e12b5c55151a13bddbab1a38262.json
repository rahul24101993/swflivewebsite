{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This file provides helper functions for table selection\n *\n * @module js/splmTableSelectionHelper\n */import awSPLMTableCellRendererFactory from'js/awSPLMTableCellRendererFactory';import eventBus from'js/eventBus';import selectionHelper from'js/selectionHelper';import _ from'lodash';import Const from'js/splmTableConstants';import util from'js/splmTableUtils';import Trv from'js/splmTableTraversal';/**\n *\n * Handles other select through selection handler\n *\n * @param {Object} rowVmoArray - array of VMOs to select\n * @param {Object} selectionModel - the selection model\n * @param {Object} event - event from the tap/click action\n * @param {Object} dataProvider - declarative dataProvider\n */const handleNonContextMenuSelect=function(rowVmoArray,selectionModel,event,dataProvider){selectionHelper.handleSelectionEvent(rowVmoArray,selectionModel,event,dataProvider.viewModelCollection);};const selectCell=function(cell,gridOptions,columnDefs,idx,cellRenderer,selectionModel,pinElem,rowElem,table){cell.classList.add(Const.CLASS_CELL_SELECTED);if(gridOptions.transpose===true){cell.classList.add('ui-grid-columnSelected');return;}const isCommandNeeded=columnDefs[idx].isTableCommand||columnDefs[idx].isTreeNavigation;if(!isCommandNeeded){return;}let cellTop=cell.children[0];if(columnDefs[idx].isTreeNavigation&&cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer').length>0){cellTop=cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer')[0];}cellRenderer.resetHoverCommandElement();// process OOTB cmd cell\nif(cellTop.lastChild&&cellTop.lastChild.classList&&cellTop.lastChild.classList.contains(Const.CLASS_NATIVE_CELL_COMMANDS)){util.destroyElement(cellTop.lastChild);}// process customize cmd cell\nif(cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length!==0){if(selectionModel.multiSelectEnabled){cellTop.lastChild.style.display='none';}}// set checkbox when item is selected\nif(pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON).length>0){pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON)[0].checked=true;}if(rowElem.vmo.props){if(cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length===0){if(!selectionModel.multiSelectEnabled&&selectionModel.getCurrentSelectedCount()===1){const markElem=awSPLMTableCellRendererFactory.createCellCommandElement(columnDefs[idx],rowElem.vmo,table,true);cellTop.appendChild(markElem);}}if(cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER).length>=1){if(selectionModel.mode==='multiple'&&selectionModel.getCurrentSelectedCount()>1){removeCellCommandContainer(cellTop);}}}};const deselectCell=function(cell,gridOptions,columnDefs,idx,cellRenderer,pinElem,selectionModel){if(gridOptions.enableColumnSelection&&cell.classList.contains(Const.CLASS_COLUMN_SELECTED)){return;}if(cell.classList.contains(Const.CLASS_CELL_SELECTED)){cell.classList.remove(Const.CLASS_CELL_SELECTED);}if(gridOptions.transpose===true){cell.classList.remove('ui-grid-columSelected');return;}if(columnDefs[idx].isTableCommand||columnDefs[idx].isTreeNavigation){let cellTop=cell.children[0];if(columnDefs[idx].isTreeNavigation&&cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer').length>0){cellTop=cell.getElementsByClassName('aw-jswidgets-tableNonEditContainer')[0];}// Process OOTB cmd cell\nif(cellTop.lastChild&&cellTop.lastChild.classList&&cellTop.lastChild.classList.contains(Const.CLASS_NATIVE_CELL_COMMANDS)){util.destroyElement(cellTop.lastChild);cellRenderer.destroyHoverCommandElement();}// unset checkbox when item is not selected.\nif(pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON).length>0){pinElem.getElementsByClassName(Const.CLASS_CELL_CHECKBOX_BUTTON)[0].checked=false;}// Process customize cmd cell\nif(cellTop.lastChild&&cellTop.lastChild.classList&&cellTop.lastChild.classList.contains(Const.CLASS_AW_CELL_COMMANDS)){if(selectionModel.multiSelectEnabled){cellTop.lastChild.style.display='none';}else{cellTop.lastChild.style.removeProperty('display');}}removeCellCommandContainer(cellTop);}};const removeCellCommandContainer=function(cellTop){const cellCommandContainer=cellTop.getElementsByClassName(Const.CLASS_AW_CELL_COMMANDS_CONTAINER)[0];if(cellCommandContainer&&cellCommandContainer.parentElement){util.cleanupComponents(cellTop);if(cellCommandContainer.parentElement){cellCommandContainer.parentElement.removeChild(cellCommandContainer);}util.destroyElement(cellCommandContainer);}};const updateCellSelectedClass=(rowCells,gridOptions,pinElem,rowElem,table,columnDefs,selectionModel)=>{// Add cell selected class to each cell\n_.forEach(rowCells,function(cell,idx){const vmo=gridOptions.transpose===true?cell.columnDef.vmo:rowElem.vmo;const cellRenderer=table._tableInstance.cellRenderer;if(vmo&&selectionModel.isSelected(vmo)){selectCell(cell,gridOptions,columnDefs,idx,cellRenderer,selectionModel,pinElem,rowElem,table);}else{deselectCell(cell,gridOptions,columnDefs,idx,cellRenderer,pinElem,selectionModel);}});};const clearCellHeaderAndColumnSelection=function(tableElem){let headerCells=tableElem.querySelectorAll(\".\".concat(Const.CLASS_COLUMN_DEF));let selectedHeader=_.find(headerCells,{columnDef:{colSelected:true}});if(selectedHeader){delete selectedHeader.columnDef.colSelected;if(tableElem._tableInstance&&tableElem._tableInstance.dataProvider&&tableElem._tableInstance.dataProvider.gridContextDispatcher){tableElem._tableInstance.dataProvider.gridContextDispatcher({type:'UPDATE_VALUES',selectedColumn:null});}}let cells=tableElem.querySelectorAll(\".\".concat(Const.CLASS_HEADER_CELL_SELECTED,\", .\").concat(Const.CLASS_COLUMN_SELECTED));for(let k=0;k<cells.length;k++){cells[k].classList.remove(Const.CLASS_HEADER_CELL_SELECTED,Const.CLASS_CELL_SELECTED,Const.CLASS_COLUMN_SELECTED);}};export const setCellHeaderSelection=function(selection,table){clearCellHeaderAndColumnSelection(table);if(selection&&selection.propName){const columnProp=selection.propName;let headerCells=table.querySelectorAll(\".\".concat(Const.CLASS_COLUMN_DEF));let foundCol=_.find(headerCells,{columnDef:{field:columnProp}});if(foundCol&&foundCol.parentElement){// parent element to get the whole header cell\nfoundCol.parentElement.classList.add(Const.CLASS_HEADER_CELL_SELECTED);}}};export const selectColumnCells=function(table,columnName){// First set the header selection\nsetCellHeaderSelection({propName:columnName},table);let headerCells=table.querySelectorAll(\".\".concat(Const.CLASS_COLUMN_DEF));let selectedHeader=_.find(headerCells,{columnDef:{field:columnName}});if(selectedHeader&&selectedHeader.columnDef){selectedHeader.columnDef.colSelected=true;}// Now select all cells in column\nconst allCells=table.querySelectorAll(\".\".concat(Const.CLASS_CELL));const foundCells=_.filter(allCells,{propName:columnName});for(let i=0;i<foundCells.length;i++){foundCells[i].classList.add(Const.CLASS_COLUMN_SELECTED,Const.CLASS_CELL_SELECTED);}};export const setCellColumnSelection=function(dataProvider,columnDef){// Clear any selection\ndataProvider.selectNone();dataProvider.gridContextDispatcher&&dataProvider.gridContextDispatcher({type:'UPDATE_VALUES',selectedColumn:columnDef});};// LCS-145673 - Make 'Show Children' command visible in table rows\n// We need to make the selection code be compatible with:\n// 1. When cellRenderer contains command cell by default\n// 2. When cellRenderer does not contains command cell\n// Code in this method work for both as design above\nexport const updateContentRowSelection=function(selectionModel,columnDefs,pinRowElements,scrollRowElements,table){const cnt=pinRowElements.length;const gridOptions=table._tableInstance.gridOptions;if(gridOptions.transpose===true){const trv=new Trv(table);const headerElements=trv.getHeaderCellElementsFromTable();for(let i=0;i<headerElements.length;i++){const headerElement=headerElements[i];const columnDefElement=headerElements[i].getElementsByClassName(Const.CLASS_COLUMN_DEF)[0];if(columnDefElement&&columnDefElement.columnDef.vmo&&selectionModel.isSelected(columnDefElement.columnDef.vmo)){headerElement.classList.add(Const.CLASS_HEADER_CELL_SELECTED);}else{headerElement.classList.remove(Const.CLASS_HEADER_CELL_SELECTED);}}}for(let i=0;i<cnt;i++){const rowElem=scrollRowElements[i];const pinElem=pinRowElements[i];let rowCells=Array.prototype.slice.call(pinElem.getElementsByClassName(Const.CLASS_CELL));rowCells=rowCells.concat(Array.prototype.slice.call(rowElem.getElementsByClassName(Const.CLASS_CELL)));if(!rowElem.vmo){rowElem.classList.remove(Const.CLASS_ROW_SELECTED);rowElem.classList.remove(Const.CLASS_STATE_SELECTED);rowElem.classList.remove(Const.CLASS_ROW_INACTIVATED);pinElem.classList.remove(Const.CLASS_ROW_SELECTED);pinElem.classList.remove(Const.CLASS_STATE_SELECTED);pinElem.classList.remove(Const.CLASS_ROW_INACTIVATED);// remove cell selected class to each cell\n_.forEach(rowCells,function(cell){cell.classList.remove(Const.CLASS_CELL_SELECTED);});continue;}if(selectionModel.isSelected(rowElem.vmo)){if(!selectionModel.isSelectionModelActivated()){rowElem.classList.add(Const.CLASS_ROW_INACTIVATED);pinElem.classList.add(Const.CLASS_ROW_INACTIVATED);table._tableInstance.editor.removeAllCellSelection();}else if(rowElem.classList.contains(Const.CLASS_ROW_INACTIVATED)){rowElem.classList.remove(Const.CLASS_ROW_INACTIVATED);pinElem.classList.remove(Const.CLASS_ROW_INACTIVATED);}rowElem.classList.add(Const.CLASS_ROW_SELECTED);rowElem.classList.add(Const.CLASS_STATE_SELECTED);rowElem.setAttribute('aria-selected','true');pinElem.classList.add(Const.CLASS_ROW_SELECTED);pinElem.classList.add(Const.CLASS_STATE_SELECTED);pinElem.setAttribute('aria-selected','true');updateCellSelectedClass(rowCells,gridOptions,pinElem,rowElem,table,columnDefs,selectionModel);continue;}if(rowElem.classList.contains(Const.CLASS_ROW_SELECTED)||rowElem.classList.contains(Const.CLASS_STATE_SELECTED)){rowElem.classList.remove(Const.CLASS_ROW_SELECTED);rowElem.classList.remove(Const.CLASS_STATE_SELECTED);rowElem.classList.remove(Const.CLASS_ROW_INACTIVATED);if(rowElem.hasAttribute('aria-selected')){rowElem.removeAttribute('aria-selected');}}if(pinElem.classList.contains(Const.CLASS_ROW_SELECTED)||pinElem.classList.contains(Const.CLASS_STATE_SELECTED)){pinElem.classList.remove(Const.CLASS_ROW_SELECTED);pinElem.classList.remove(Const.CLASS_STATE_SELECTED);pinElem.classList.remove(Const.CLASS_ROW_INACTIVATED);if(pinElem.hasAttribute('aria-selected')){pinElem.removeAttribute('aria-selected');}}updateCellSelectedClass(rowCells,gridOptions,pinElem,rowElem,table,columnDefs,selectionModel);}};const handleSelect=function(selectedVmo,event,selectionModel,dataProvider,tableElem){handleNonContextMenuSelect([selectedVmo],selectionModel,event,dataProvider);/**\n     * If we already have row selected, then ctrl + select the same row, we need to update selected row to provide checkmark\n     * Dataprovider watcher evaluates by checking if currently selected has changed. This wont catch for selecting same row in multi\n     * instead of single\n     */if(event.ctrlKey){// event obj basically same as regular selectionChangeEvent\nlet eventObj={selectedObjects:dataProvider.getSelectedObjects(),selectedUids:selectionModel.getSelection(),selectionModel:selectionModel,selected:dataProvider.getSelectedObjects(),dataProviderName:dataProvider.name,dataProvider:dataProvider};// Publish event as it doesn't get published with ctrl key\neventBus.publish(\"\".concat(dataProvider.name,\".selectionChangeEvent\"),eventObj);}// This event is used to denote a selection performed by user click on a row.\nconst gridId=tableElem._tableInstance.gridId;eventBus.publish(gridId+'.gridSelection',{selectedObjects:dataProvider.getSelectedObjects()});};const getLatestVmo=function(currentVmo,dataProvider){let id=currentVmo.alternateID||currentVmo.uid;let idx=dataProvider.viewModelCollection.findViewModelObjectById(id);return dataProvider.viewModelCollection.loadedVMObjects[idx];};/**\n *\n * Callback method when a table row gets selected/clicked\n *\n * @param {DOMElement} tableElem - the table element\n * @param {Event} [keyboardTargetElement] - the destination of keyboard event (Optional)\n * @return {function} selection handler function\n */export const selectionChanged=function(tableElem,keyboardTargetElement){return function(event){const target=keyboardTargetElement||event.target;// Do not trigger selection if clicking on link\nif(target.tagName.toLowerCase()==='a'&&target.href!==''){return;}// Do not trigger selection if clicking on tree expand/collapse icon\nif(util.closestElement(target,\".\".concat(Const.CLASS_TREE_ROW_HEADER_BUTTONS))){return;}// Do not trigger selection if clicking on a cell command\nif(util.closestElement(target,'.aw-command')){return;}const dataProvider=tableElem._tableInstance.dataProvider;// Get target vmo that was selected\nlet selectedRow=util.closestElement(target,'.'+Const.CLASS_ROW);let selectedVmo=selectedRow&&selectedRow.vmo&&getLatestVmo(selectedRow.vmo,dataProvider);let selectedCell=util.closestElement(target,'.'+Const.CLASS_CELL);if(!selectedCell&&event.currentTarget.columnDef){selectedCell=event.currentTarget;}const gridOptions=tableElem._tableInstance.gridOptions;if(gridOptions.transpose===true){if(selectedCell&&selectedCell.columnDef&&selectedCell.columnDef.vmo){selectedVmo=selectedCell.columnDef.vmo;}else{return;}}const selectionModel=dataProvider.selectionModel;if(selectionModel&&selectedVmo&&selectedVmo.props){// Valid Selections Use Cases:\n// 1. Selecting vmo that is not selected\nconst vmoNotSelected=!selectedVmo.selected;// 2. Selecting row selection checkbox\nconst selectedRowCheckbox=util.closestElement(event.target,'.'+Const.CLASS_CELL_CHECKBOX);// 3. Deselecting vmo with Ctrl key\nconst deselectingVmo=selectedVmo.selected&&event.ctrlKey;// 4. Selecting already selected vmo when other selections are present and multiselection mode is off\nconst selectedLength=dataProvider.getSelectedObjects().length;const keepVmoSelectedButDeselectOthers=selectedVmo.selected&&selectedLength>1&&!selectionModel.multiSelectEnabled;if(vmoNotSelected||selectedRowCheckbox||deselectingVmo||keepVmoSelectedButDeselectOthers){handleSelect(selectedVmo,event,selectionModel,dataProvider,tableElem);}else if(selectionModel.getSelection()[0]===selectedVmo.uid||selectedVmo.alternateID&&selectedVmo.alternateID===selectionModel.getSelection()[0]){dataProvider.selectionModel.setSelectionModelActivated(true);let selectData=dataProvider.selectionModel.selectionData;selectData&&selectData.update({...selectData.value,selected:dataProvider.getSelectedObjects()});}}};};export default{selectionChanged,updateContentRowSelection,setCellHeaderSelection,setCellColumnSelection,selectColumnCells};","map":null,"metadata":{},"sourceType":"module"}
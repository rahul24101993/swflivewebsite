{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This is the typeCacheService.\n *\n * The purpose of this service is to store commonly used types in localStorage.\n *\n * @module soa/kernel/typeCacheService\n */\nimport _ from 'lodash';\nimport localStrg from 'js/localStorage';\nimport lzstring from 'lz-string';\nimport localeSvc from 'js/localeService';\n/**\n * Object used to place all the exported API of this module upon.\n */\n\nvar exports = {};\n/**\n * localStorage type cache.\n *\n * @private\n */\n\nvar _localPropTypes = 'propertyTypes';\n/**\n * Key used to determine the validity of a previously stored cache.\n * Used to store an object with typeCacheLMD and locale properties\n * If the typeCacheLMD or Locale change we must flush the cache.\n *\n * @private\n */\n\nvar _localPropTypesKey = 'propertyTypesKey';\n/**\n * Timer variable.\n *\n * @private\n */\n\nvar _storageTimer;\n/**\n * Types to cache.\n *\n * @private\n */\n\n\nvar _typesToCache = [];\n/**\n * SaveToLocalStorage delay time in milliseconds .\n *\n * @private\n */\n\nvar _saveToLSTime = 60000;\n/**\n * Types cache timestamp\n *\n * @private\n */\n\nvar _typeCacheLMD;\n/**\n * Checks to see if an object with the same name already exists.\n *\n * @param {StringArray} typeArray - Modeltypes to check.\n * @param {String} name - Name of the type to check.\n *\n * @returns {Boolean} TRUE if an object with the same name already exists.\n */\n\n\nfunction containsTypeDesc(typeArray, name) {\n  var found = false;\n\n  for (var i = 0; i < typeArray.length; i++) {\n    if (typeArray[i].name === name) {\n      found = true;\n      break;\n    }\n  }\n\n  return found;\n}\n/**\n * Saves any valid types added to _typesToCache to localStorage.\n */\n\n\nfunction saveToLocalStorage() {\n  _storageTimer = null;\n  var locale = localeSvc.getLocale();\n  var localTypes = [];\n\n  if (localStrg.get(_localPropTypes)) {\n    var decompressedStr = lzstring.decompressFromUTF16(localStrg.get(_localPropTypes));\n    localTypes = JSON.parse(decompressedStr);\n  }\n\n  for (var i = 0, len = _typesToCache.length; i < len; i++) {\n    if (!containsTypeDesc(localTypes, _typesToCache[i].name)) {\n      localTypes.push(_typesToCache[i]);\n    }\n  }\n\n  var typesKey = {\n    locale: locale,\n    typeCacheLMD: _typeCacheLMD\n  };\n  var compressedStr = lzstring.compressToUTF16(JSON.stringify(localTypes));\n  localStrg.publish(_localPropTypes, compressedStr);\n  localStrg.publish(_localPropTypesKey, JSON.stringify(typesKey)); // Clear out array of types to cache.\n\n  _typesToCache = [];\n}\n/**\n * Returns any typeDescriptions stored in localStorage\n *\n * @param {Number} typeCacheLMD - Last modified date of the cached local storage data.\n *\n * @return {ObjectArray} Type Descriptors.\n */\n\n\nexport let getLocalTypes = function (typeCacheLMD) {\n  var localTypes = [];\n  var locale = localeSvc.getLocale();\n\n  if (localStrg.get(_localPropTypesKey)) {\n    var currentKey = JSON.parse(localStrg.get(_localPropTypesKey)); // If the typeCacheLMD or the locale have changed we need to flush cached properties.\n\n    if (currentKey && (currentKey.locale !== locale || currentKey.typeCacheLMD !== typeCacheLMD)) {\n      localStrg.removeItem(_localPropTypes);\n      localStrg.removeItem(_localPropTypesKey);\n      return localTypes;\n    }\n  }\n\n  if (localStrg.get(_localPropTypes)) {\n    var decompressedStr = lzstring.decompressFromUTF16(localStrg.get(_localPropTypes));\n    localTypes = JSON.parse(decompressedStr);\n  }\n\n  return localTypes;\n};\n/**\n * Adds type descriptors to _typesToCache if they are included\n * in the awStartupPreferences.\n * If delayed storage is set to true as soon as the first type descriptor is added\n * a 60 second timer will begin before calling saveToLocalStorage.\n * Add subsequent calls during this 60 seconds will add types to\n * the _typesToCache.\n * After the timer has finished and the saveToLocalStorage is made\n * everything is reset.\n * If delayedStorage is not set, the saveToLocalStorage will be immediate.\n *\n * @param {Array} modelTypes - An array of type descriptors to potentially cache.\n *\n * @param {StringArray} awStartupPreferences - A string array of type descriptors to cache.\n *\n * @param {String} typeCacheLMD - A string with typeCacheLMD timestamp.\n *\n * @param {boolean} delayedStorage - A boolean to set delayed storage on or off.\n */\n\nexport let setLocalTypes = function (modelTypes, awStartupPreferences, typeCacheLMD, delayedStorage) {\n  _typeCacheLMD = typeCacheLMD;\n  modelTypes.forEach(function (element) {\n    if (_.includes(awStartupPreferences, element.name)) {\n      if (!containsTypeDesc(_typesToCache, element.name)) {\n        _typesToCache.push(element);\n      }\n    }\n  });\n\n  if (delayedStorage) {\n    if (_typesToCache && _typesToCache.length > 0 && !_storageTimer) {\n      // We are using setTimeout instead of $timeout\n      // as we do not care about the digest cycle.\n      _storageTimer = setTimeout(saveToLocalStorage, _saveToLSTime);\n    }\n  } else {\n    saveToLocalStorage();\n  }\n};\nexports = {\n  getLocalTypes,\n  setLocalTypes\n};\nexport default exports;","map":{"version":3,"names":["_","localStrg","lzstring","localeSvc","exports","_localPropTypes","_localPropTypesKey","_storageTimer","_typesToCache","_saveToLSTime","_typeCacheLMD","containsTypeDesc","typeArray","name","found","i","length","saveToLocalStorage","locale","getLocale","localTypes","get","decompressedStr","decompressFromUTF16","JSON","parse","len","push","typesKey","typeCacheLMD","compressedStr","compressToUTF16","stringify","publish","getLocalTypes","currentKey","removeItem","setLocalTypes","modelTypes","awStartupPreferences","delayedStorage","forEach","element","includes","setTimeout"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/kernel/typeCacheService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This is the typeCacheService.\n *\n * The purpose of this service is to store commonly used types in localStorage.\n *\n * @module soa/kernel/typeCacheService\n */\nimport _ from 'lodash';\nimport localStrg from 'js/localStorage';\nimport lzstring from 'lz-string';\nimport localeSvc from 'js/localeService';\n\n/**\n * Object used to place all the exported API of this module upon.\n */\nvar exports = {};\n\n/**\n * localStorage type cache.\n *\n * @private\n */\nvar _localPropTypes = 'propertyTypes';\n\n/**\n * Key used to determine the validity of a previously stored cache.\n * Used to store an object with typeCacheLMD and locale properties\n * If the typeCacheLMD or Locale change we must flush the cache.\n *\n * @private\n */\nvar _localPropTypesKey = 'propertyTypesKey';\n\n/**\n * Timer variable.\n *\n * @private\n */\nvar _storageTimer;\n\n/**\n * Types to cache.\n *\n * @private\n */\nvar _typesToCache = [];\n\n/**\n * SaveToLocalStorage delay time in milliseconds .\n *\n * @private\n */\nvar _saveToLSTime = 60000;\n\n/**\n * Types cache timestamp\n *\n * @private\n */\nvar _typeCacheLMD;\n\n/**\n * Checks to see if an object with the same name already exists.\n *\n * @param {StringArray} typeArray - Modeltypes to check.\n * @param {String} name - Name of the type to check.\n *\n * @returns {Boolean} TRUE if an object with the same name already exists.\n */\nfunction containsTypeDesc( typeArray, name ) {\n    var found = false;\n    for( var i = 0; i < typeArray.length; i++ ) {\n        if( typeArray[ i ].name === name ) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\n/**\n * Saves any valid types added to _typesToCache to localStorage.\n */\nfunction saveToLocalStorage() {\n    _storageTimer = null;\n    var locale = localeSvc.getLocale();\n    var localTypes = [];\n    if( localStrg.get( _localPropTypes ) ) {\n        var decompressedStr = lzstring.decompressFromUTF16( localStrg.get( _localPropTypes ) );\n        localTypes = JSON.parse( decompressedStr );\n    }\n    for( var i = 0, len = _typesToCache.length; i < len; i++ ) {\n        if( !containsTypeDesc( localTypes, _typesToCache[ i ].name ) ) {\n            localTypes.push( _typesToCache[ i ] );\n        }\n    }\n\n    var typesKey = {\n        locale: locale,\n        typeCacheLMD: _typeCacheLMD\n    };\n\n    var compressedStr = lzstring.compressToUTF16( JSON.stringify( localTypes ) );\n    localStrg.publish( _localPropTypes, compressedStr );\n    localStrg.publish( _localPropTypesKey, JSON.stringify( typesKey ) );\n\n    // Clear out array of types to cache.\n    _typesToCache = [];\n}\n\n/**\n * Returns any typeDescriptions stored in localStorage\n *\n * @param {Number} typeCacheLMD - Last modified date of the cached local storage data.\n *\n * @return {ObjectArray} Type Descriptors.\n */\nexport let getLocalTypes = function( typeCacheLMD ) {\n    var localTypes = [];\n    var locale = localeSvc.getLocale();\n    if( localStrg.get( _localPropTypesKey ) ) {\n        var currentKey = JSON.parse( localStrg.get( _localPropTypesKey ) );\n        // If the typeCacheLMD or the locale have changed we need to flush cached properties.\n        if( currentKey && ( currentKey.locale !== locale || currentKey.typeCacheLMD !== typeCacheLMD ) ) {\n            localStrg.removeItem( _localPropTypes );\n            localStrg.removeItem( _localPropTypesKey );\n            return localTypes;\n        }\n    }\n    if( localStrg.get( _localPropTypes ) ) {\n        var decompressedStr = lzstring.decompressFromUTF16( localStrg.get( _localPropTypes ) );\n        localTypes = JSON.parse( decompressedStr );\n    }\n    return localTypes;\n};\n\n/**\n * Adds type descriptors to _typesToCache if they are included\n * in the awStartupPreferences.\n * If delayed storage is set to true as soon as the first type descriptor is added\n * a 60 second timer will begin before calling saveToLocalStorage.\n * Add subsequent calls during this 60 seconds will add types to\n * the _typesToCache.\n * After the timer has finished and the saveToLocalStorage is made\n * everything is reset.\n * If delayedStorage is not set, the saveToLocalStorage will be immediate.\n *\n * @param {Array} modelTypes - An array of type descriptors to potentially cache.\n *\n * @param {StringArray} awStartupPreferences - A string array of type descriptors to cache.\n *\n * @param {String} typeCacheLMD - A string with typeCacheLMD timestamp.\n *\n * @param {boolean} delayedStorage - A boolean to set delayed storage on or off.\n */\nexport let setLocalTypes = function( modelTypes, awStartupPreferences, typeCacheLMD, delayedStorage ) {\n    _typeCacheLMD = typeCacheLMD;\n    modelTypes.forEach( function( element ) {\n        if( _.includes( awStartupPreferences, element.name ) ) {\n            if( !containsTypeDesc( _typesToCache, element.name ) ) {\n                _typesToCache.push( element );\n            }\n        }\n    } );\n\n    if( delayedStorage ) {\n        if( _typesToCache && _typesToCache.length > 0 && !_storageTimer ) {\n            // We are using setTimeout instead of $timeout\n            // as we do not care about the digest cycle.\n            _storageTimer = setTimeout( saveToLocalStorage, _saveToLSTime );\n        }\n    } else {\n        saveToLocalStorage();\n    }\n};\n\nexports = {\n    getLocalTypes,\n    setLocalTypes\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
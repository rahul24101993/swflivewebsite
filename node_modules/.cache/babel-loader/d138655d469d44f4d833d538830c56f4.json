{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * This service provides access method and url of icons based on configuration in kit.\n *\n * @module js/iconRepositoryService\n */\nimport cfgSvc from 'js/configurationService';\n/** Exports */\n\nlet exports;\n/** A place holder */\n\nlet BASE_URL = '{{baseUrl}}';\n/** Fetch method. */\n\nlet _fetchMethod = null;\n/** URl */\n\nlet _Url = null;\n/** constant a possible value of #fetchMethod */\n\nexport let GET = 'GET';\nexport let DEFAULT = 'DEFAULT';\n/**\n * Return Url based on configuration.\n *\n * @param {String} filename - Name of the file to base return value on.\n *\n * @return {String} The IconFile URL\n */\n\nexport let getIconFileUrl = function (filename) {\n  if (_Url) {\n    return _Url + filename;\n  }\n\n  return undefined;\n};\n/**\n * @return {Function} Method to be used for Icon.\n */\n\nexport let getIconFetchMethod = function () {\n  return _fetchMethod;\n};\n/**\n * Initialize the service.\n */\n\nexport let initialize = function () {\n  let imageRepositoryConfiguration = cfgSvc.getCfgCached('imageRepositoryConfiguration');\n\n  if (!(imageRepositoryConfiguration && imageRepositoryConfiguration.actionType && imageRepositoryConfiguration.url)) {\n    return;\n  }\n\n  if (imageRepositoryConfiguration.actionType === exports.GET && imageRepositoryConfiguration.url.indexOf(BASE_URL) > -1) {\n    _Url = imageRepositoryConfiguration.url.replace(BASE_URL, cfgSvc.getCfgCached('baseUrl') + '/image/');\n    _fetchMethod = exports.DEFAULT;\n  } else if (imageRepositoryConfiguration.actionType === exports.GET) {\n    _Url = imageRepositoryConfiguration.url + '/image/';\n    _fetchMethod = exports.GET;\n  }\n};\nexports = {\n  GET,\n  DEFAULT,\n  getIconFileUrl,\n  getIconFetchMethod,\n  initialize\n};\nexport default exports;\ninitialize();","map":{"version":3,"names":["cfgSvc","exports","BASE_URL","_fetchMethod","_Url","GET","DEFAULT","getIconFileUrl","filename","undefined","getIconFetchMethod","initialize","imageRepositoryConfiguration","getCfgCached","actionType","url","indexOf","replace"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/iconRepositoryService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * This service provides access method and url of icons based on configuration in kit.\n *\n * @module js/iconRepositoryService\n */\nimport cfgSvc from 'js/configurationService';\n\n/** Exports */\nlet exports;\n\n/** A place holder */\nlet BASE_URL = '{{baseUrl}}';\n\n/** Fetch method. */\nlet _fetchMethod = null;\n\n/** URl */\nlet _Url = null;\n\n/** constant a possible value of #fetchMethod */\nexport let GET = 'GET';\nexport let DEFAULT = 'DEFAULT';\n\n/**\n * Return Url based on configuration.\n *\n * @param {String} filename - Name of the file to base return value on.\n *\n * @return {String} The IconFile URL\n */\nexport let getIconFileUrl = function( filename ) {\n    if( _Url ) {\n        return _Url + filename;\n    }\n    return undefined;\n};\n\n/**\n * @return {Function} Method to be used for Icon.\n */\nexport let getIconFetchMethod = function() {\n    return _fetchMethod;\n};\n\n/**\n * Initialize the service.\n */\nexport let initialize = function() {\n    let imageRepositoryConfiguration = cfgSvc.getCfgCached( 'imageRepositoryConfiguration' );\n    if( !( imageRepositoryConfiguration && imageRepositoryConfiguration.actionType && imageRepositoryConfiguration.url ) ) {\n        return;\n    }\n    if( imageRepositoryConfiguration.actionType === exports.GET &&\n        imageRepositoryConfiguration.url.indexOf( BASE_URL ) > -1 ) {\n        _Url = imageRepositoryConfiguration.url.replace( BASE_URL, cfgSvc.getCfgCached( 'baseUrl' ) + '/image/' );\n        _fetchMethod = exports.DEFAULT;\n    } else if( imageRepositoryConfiguration.actionType === exports.GET ) {\n        _Url = imageRepositoryConfiguration.url + '/image/';\n        _fetchMethod = exports.GET;\n    }\n};\n\nexports = {\n    GET,\n    DEFAULT,\n    getIconFileUrl,\n    getIconFetchMethod,\n    initialize\n};\nexport default exports;\n\ninitialize();\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,yBAAnB;AAEA;;AACA,IAAIC,OAAJ;AAEA;;AACA,IAAIC,QAAQ,GAAG,aAAf;AAEA;;AACA,IAAIC,YAAY,GAAG,IAAnB;AAEA;;AACA,IAAIC,IAAI,GAAG,IAAX;AAEA;;AACA,OAAO,IAAIC,GAAG,GAAG,KAAV;AACP,OAAO,IAAIC,OAAO,GAAG,SAAd;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,cAAc,GAAG,UAAUC,QAAV,EAAqB;EAC7C,IAAIJ,IAAJ,EAAW;IACP,OAAOA,IAAI,GAAGI,QAAd;EACH;;EACD,OAAOC,SAAP;AACH,CALM;AAOP;AACA;AACA;;AACA,OAAO,IAAIC,kBAAkB,GAAG,YAAW;EACvC,OAAOP,YAAP;AACH,CAFM;AAIP;AACA;AACA;;AACA,OAAO,IAAIQ,UAAU,GAAG,YAAW;EAC/B,IAAIC,4BAA4B,GAAGZ,MAAM,CAACa,YAAP,CAAqB,8BAArB,CAAnC;;EACA,IAAI,EAAGD,4BAA4B,IAAIA,4BAA4B,CAACE,UAA7D,IAA2EF,4BAA4B,CAACG,GAA3G,CAAJ,EAAuH;IACnH;EACH;;EACD,IAAIH,4BAA4B,CAACE,UAA7B,KAA4Cb,OAAO,CAACI,GAApD,IACAO,4BAA4B,CAACG,GAA7B,CAAiCC,OAAjC,CAA0Cd,QAA1C,IAAuD,CAAC,CAD5D,EACgE;IAC5DE,IAAI,GAAGQ,4BAA4B,CAACG,GAA7B,CAAiCE,OAAjC,CAA0Cf,QAA1C,EAAoDF,MAAM,CAACa,YAAP,CAAqB,SAArB,IAAmC,SAAvF,CAAP;IACAV,YAAY,GAAGF,OAAO,CAACK,OAAvB;EACH,CAJD,MAIO,IAAIM,4BAA4B,CAACE,UAA7B,KAA4Cb,OAAO,CAACI,GAAxD,EAA8D;IACjED,IAAI,GAAGQ,4BAA4B,CAACG,GAA7B,GAAmC,SAA1C;IACAZ,YAAY,GAAGF,OAAO,CAACI,GAAvB;EACH;AACJ,CAbM;AAePJ,OAAO,GAAG;EACNI,GADM;EAENC,OAFM;EAGNC,cAHM;EAING,kBAJM;EAKNC;AALM,CAAV;AAOA,eAAeV,OAAf;AAEAU,UAAU"},"metadata":{},"sourceType":"module"}
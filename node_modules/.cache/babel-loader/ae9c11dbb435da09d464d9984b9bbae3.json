{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Defines {@link NgServices.selectionService}  which helps manage selection.\n *\n * @module js/selection.service\n */import AwPromiseService from'js/awPromiseService';import appCtxService from'js/appCtxService';import cdm from'soa/kernel/clientDataModel';import viewModelObjectSrv from'js/viewModelObjectService';import _ from'lodash';import eventBus from'js/eventBus';let exports={};// eslint-disable-line no-invalid-this\n/**\n * selection name space\n */var _selected='selected';/**\n * multi selection name space\n */var _mselected='mselected';/**\n * parent selection name space\n */var _pselected='pselected';/**\n * relation info name space\n */var _relationInfo='relationContext';export let updateSelection=function(selection,parentSelection,relationInformation){var currentSelection=exports.getSelection();var rInfo=relationInformation?{relationInfo:relationInformation}:undefined;var singleSelection=null;var multiSelection=[];if(_.isArray(selection)){singleSelection=selection[0];for(var i=0;i<selection.length;i++){multiSelection.push(selection[i]);}}else if(selection){singleSelection=selection;multiSelection=[selection];}var contextChanged=false;if(!currentSelection.selected||!_.isEqual(singleSelection,currentSelection.selected[0])){appCtxService.registerCtx(_selected,singleSelection);contextChanged=true;}if(!_.isEqual(multiSelection,currentSelection.selected)){appCtxService.registerCtx(_mselected,multiSelection);contextChanged=true;}if(!_.isEqual(parentSelection,currentSelection.parent)){appCtxService.registerCtx(_pselected,parentSelection);contextChanged=true;}if(!_.isEqual(rInfo,currentSelection.relationInfo)){appCtxService.registerCtx(_relationInfo,rInfo);contextChanged=true;}if(contextChanged){return exports.updateCommandContext();}return AwPromiseService.instance.resolve();};export let getSelection=function(){return{selected:appCtxService.getCtx(_mselected),parent:appCtxService.getCtx(_pselected),relationInfo:appCtxService.getCtx(_relationInfo)};};export let getAlternateSelectedObjects=function(propObjects){var modelObjects=[];var uidsToLoad=[];if(propObjects){_.forEach(propObjects,function(property){if(property&&property.dbValues){_.forEach(property.dbValues,function(dbValue){var modelObject=cdm.getObject(dbValue);if(modelObject&&!_.isEmpty(modelObject.props)){modelObjects.push(modelObject);}else{uidsToLoad.push(dbValue);}});}});if(!_.isEmpty(uidsToLoad)){_.forEach(uidsToLoad,function(uid){var modelObject=cdm.getObject(uid);modelObjects.push(modelObject);});}}return modelObjects;};export let updateCommandContext=function(){return AwPromiseService.instance.resolve();};exports={updateSelection,getSelection,getAlternateSelectedObjects,updateCommandContext};export default exports;/**\n * Set of utility functions to manage selection\n *\n * @member selectionService\n * @memberof NgServices\n *\n * @param {AwPromiseService.instance} AwPromiseService.instance - Service to use.\n * @param {appCtxService} appCtxService - Service to use.\n * @param {soa_kernel_clientDataModel} cdm - Service to use.\n */ /**\n * Update the selection context\n *\n * @function updateSelection\n * @memberOf NgServices.selectionService\n *\n * @param {Object | Object[]} selection - The new selection\n * @param {Object} parentSelection - The new parent selection\n * @param {Object[]} relationInformation - The new relation information\n *\n * @return {Promise} A promise resolved once selection and command context are updated.\n */ /**\n * Get the selection from the context\n *\n * @function getSelection\n * @memberOf NgServices.selectionService\n *\n * @return {Object} An object containing the selection and the parent selection\n */ /**\n * Returns the model objects based off input property objects\n *\n * @function getTargetModelObjects\n * @memberOf NgServices.selectionService\n *\n * @param {Array} propObjects - array of property objects\n *\n * @return {Array} array of alternate selected model objects containing the results\n */ /**\n * Update the command context\n *\n * @function updateCommandContext\n * @memberOf NgServices.selectionService\n *\n * @return {Promise} A promise resolved once command context is updated.\n */eventBus.subscribe('cdm.modified',function(event){// Update the VMOs in context for the modified model objects\nvar mSelectedInCtx=appCtxService.getCtx(_mselected);var selectedInCtx=appCtxService.getCtx(_selected);_.forEach(event.modifiedObjects,function _iterateModifiedObjects(updatedObj){_.forEach(mSelectedInCtx,function _updateAppCtxSelection(selectedObj){// Verifying the object is same. Also, we need to ensure that object is a View Model object.\n// For model objects, the data binding should be handled already. So we don't need this\nif(updatedObj.uid===selectedObj.uid&&viewModelObjectSrv.isViewModelObject(selectedObj)){var updatedVmo=viewModelObjectSrv.createViewModelObject(updatedObj,'EDIT');if(updatedVmo&&updatedVmo.props){viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(updatedVmo,mSelectedInCtx);// No need for object name check here because if 'mselected' is a VMO, 'selected' has to be VMO\nif(selectedInCtx.uid===selectedObj.uid){viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(updatedVmo,[selectedInCtx]);}}}});});});","map":null,"metadata":{},"sourceType":"module"}
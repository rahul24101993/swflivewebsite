{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-obtaining-images|Solution configuration for obtaining images}\n *\n * @module js/iconService\n *\n * @publishedApolloService\n *\n */import iconRepositoryService from'js/iconRepositoryService';import defaultIconProviderService from'js/defaultIconProviderService';import httpIconProviderService from'js/httpIconProviderService';var exports={};/**\n * Reference IconService\n */var _iconServiceProvider;/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getTypeIcon=function(typeName){return _iconServiceProvider.getTypeIcon(typeName);};/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getTypeIconFileTag=function(typeName,typeIconFileName){return _iconServiceProvider.getTypeIconFileTag(typeName,typeIconFileName);};/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getTypeIconFileUrl=function(typeIconFileName){return _iconServiceProvider.getTypeIconFileUrl(typeIconFileName);};/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getTypeIconURL=function(typeName){return _iconServiceProvider.getTypeIconURL(typeName);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getTileIcon=async function(name){return await _iconServiceProvider.getTileIcon(name);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getMiscIcon=async function(name){return await _iconServiceProvider.getMiscIcon(name);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getCmdIcon=async function(name){return await _iconServiceProvider.getCmdIcon(name);};/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getAwIcon=async function(iconName){return await _iconServiceProvider.getAwIcon(iconName);};/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getIcon=async function(iconName){return await _iconServiceProvider.getIcon(iconName);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n * @ignore\n */export let getIndicatorIcon=async function(iconName){return await _iconServiceProvider.getIndicatorIcon(iconName);};/**\n * Initialize icon service provider.\n */export let initializeIconServiceProvider=function(){switch(iconRepositoryService.getIconFetchMethod()){case iconRepositoryService.GET:_iconServiceProvider=httpIconProviderService;break;case iconRepositoryService.DEFAULT:default:_iconServiceProvider=defaultIconProviderService;}};exports={getTypeIcon,getTypeIconFileTag,getTypeIconFileUrl,getTypeIconURL,getTileIcon,getMiscIcon,getCmdIcon,getAwIcon,getIcon,getIndicatorIcon,initializeIconServiceProvider};export default exports;initializeIconServiceProvider();","map":null,"metadata":{},"sourceType":"module"}
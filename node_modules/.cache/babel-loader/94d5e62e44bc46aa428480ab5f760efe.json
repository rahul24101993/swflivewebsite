{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\n// Copyright (c) 2021 Siemens\n\n/**\n * @module js/declSelectionModelFactory\n */\nimport { useReducer, useRef, useState } from 'react';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport declDataCtxService from 'js/declarativeDataCtxService';\n\nconst selectionReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_MODE':\n      //handle deselect\n      //If object is already selected then remove it\n      return { ...state,\n        mode: action.value\n      };\n\n    case 'SET_MULTI_SELECT_ENABLED':\n      return { ...state,\n        multiSelectEnabled: action.value\n      };\n\n    case 'SET_SELECTION_ENABLED':\n      return { ...state,\n        selectionEnabled: action.value\n      };\n\n    case 'SET_SELECTION_STATE':\n      return { ...state,\n        selectionState: action.value\n      };\n\n    case 'SET_SELECTION':\n      return { ...state,\n        lastSelected: state.selected,\n        selected: action.value.selected,\n        selectionModelActivated: action.value.isSelectionModelActive\n      };\n\n    case 'SET_SM_ACTIVE':\n      return { ...state,\n        selectionModelActivated: action.value\n      };\n\n    case 'SELECT_ALL':\n      return { ...state,\n        selectedObjects: [],\n        selectAll: true\n      };\n\n    case 'SET_DP_LISTENER':\n      if (state && !state.dpListener && !action.value) {\n        return state;\n      }\n\n      return { ...state,\n        dpListener: action.value\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useBuildSelectionModel = (selectionModelJson, smName, dataCtxNode, selectionModelRef) => {\n  _s();\n\n  declDataCtxService.applyScope(dataCtxNode.data, selectionModelJson, null, dataCtxNode, null);\n  const mode = selectionModelJson && selectionModelJson.selectionMode ? selectionModelJson.selectionMode : 'multiple';\n  return useSelectionModel(mode, null, null, smName, selectionModelRef);\n};\n\n_s(useBuildSelectionModel, \"XUzO+WLIUReVcuJ/WEBCRAOzHdw=\", false, function () {\n  return [useSelectionModel];\n});\n\nexport const useSelectionModel = (mode, tracker, inputSelectionModel, smName, selectionModelRef) => {\n  _s2();\n\n  const [selectionModel, selectionModelDispatcher] = useReducer(selectionReducer, {\n    mode: mode,\n    smName: smName,\n    multiSelectEnabled: false,\n    selectionEnabled: mode !== 'none',\n    selectionState: 'none',\n    selected: [],\n    lastSelectionState: [],\n    selectionModelActivated: true,\n    dpListener: null\n  }); // If selection Model is already passed no need to create another state.\n\n  if (inputSelectionModel) {\n    return inputSelectionModel;\n  }\n\n  if (!selectionModelRef || !_.isEqual(selectionModelRef.getSelectionModelState(), selectionModel)) {\n    return buildSelectionModel(selectionModel, selectionModelDispatcher, tracker);\n  }\n\n  return selectionModelRef;\n};\n\n_s2(useSelectionModel, \"qz3WOSgJBH64Kh+kX7llmraN7J4=\");\n\nconst buildSelectionModel = (selModel, selectionModelDispatcher, tracker) => {\n  const selectionModel = {};\n\n  if (!tracker) {\n    tracker = input => {\n      if (typeof input === 'string') {\n        return input;\n      } else if (typeof input === 'object' && input.propInternalValue) {\n        return input.propInternalValue;\n      } else if (typeof input === 'object' && input.type === 'Awp0XRTObjectSetRow') {\n        var targetObj = _.get(input, 'props.awp0Target');\n\n        if (targetObj && targetObj.dbValue) {\n          return targetObj.dbValue;\n        }\n      } else if (typeof input === 'object') {\n        return getEvaluatedId(input);\n      }\n\n      return input;\n    };\n  }\n\n  selectionModel.getSelectionModelState = () => {\n    return selModel;\n  };\n\n  selectionModel.setMode = mode => {\n    selectionModelDispatcher({\n      type: 'SET_MODE',\n      value: mode\n    });\n  };\n\n  selectionModel.getMode = () => selModel.mode;\n\n  selectionModel.addRemoveDpListener = (operation, dp) => {\n    if (operation === 'add') {\n      selectionModelDispatcher({\n        type: 'SET_DP_LISTENER',\n        value: dp\n      });\n    } else if (operation === 'remove') {\n      selectionModelDispatcher({\n        type: 'SET_DP_LISTENER',\n        value: null\n      });\n    }\n  };\n\n  selectionModel.getDpListener = () => {\n    return selModel.dpListener;\n  };\n\n  selectionModel.setMode = mode => {\n    selectionModelDispatcher({\n      type: 'SET_MODE',\n      value: mode\n    });\n  };\n\n  selectionModel.mode = selModel.mode;\n  selectionModel.selectionEnabled = selModel.selectionEnabled;\n  selectionModel.multiSelectEnabled = selModel.multiSelectEnabled;\n  selectionModel.selectionState = selModel.selectionState;\n  selectionModel.name = selModel.smName; // for debugging purpose to identify which selectionModel is in action\n\n  selectionModel.getLastSelection = () => selModel.lastSelected;\n\n  selectionModel.setSelection = function (newSelection) {\n    let isSelectionModelActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (selModel.selectionEnabled) {\n      var uidList = newSelection ? asTrackedList(newSelection, tracker) : []; // Replace selection\n\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: uidList,\n          isSelectionModelActive: isSelectionModelActive\n        }\n      }); // Auto exit multi select\n\n      checkResetMultiSelect(selectionModel);\n    }\n  };\n\n  selectionModel.getSelection = () => selModel.selected;\n\n  selectionModel.getCanExecuteSelectLoaded = () => selModel.mode === 'multiple' && selModel.selectionState !== 'all';\n\n  selectionModel.getCanExecuteDeselect = () => selModel.mode === 'multiple' && selModel.selectionState === 'all';\n\n  selectionModel.setMultiSelectionEnabled = newMultiSelectState => {\n    const mode = selModel.mode;\n    const multiSelectEnabled = selModel.multiSelectEnabled;\n\n    if (mode !== 'none' && multiSelectEnabled !== newMultiSelectState) {\n      if (newMultiSelectState && mode !== 'multiple') {\n        logger.warn('Cannot enter multi select mode when selection model is single select');\n      } else {\n        selectionModelDispatcher({\n          type: 'SET_MULTI_SELECT_ENABLED',\n          value: newMultiSelectState\n        }); // Update select / deselect command visibility\n\n        notifySelectionState(selectionModel);\n      }\n    }\n  };\n\n  selectionModel.isMultiSelectionEnabled = () => selModel.multiSelectEnabled;\n\n  selectionModel.setSelectionEnabled = isSelectionEnabled => {\n    if (selModel.mode !== 'none') {\n      selectionModelDispatcher({\n        type: 'SET_SELECTION_ENABLED',\n        value: isSelectionEnabled\n      });\n    }\n  };\n\n  selectionModel.isSelectionEnabled = () => selModel.selectionEnabled;\n\n  selectionModel.setSelectionModelActivated = isSelectionModelActive => {\n    selectionModelDispatcher({\n      type: 'SET_SM_ACTIVE',\n      value: isSelectionModelActive\n    });\n  };\n\n  selectionModel.isSelectionModelActivated = () => selModel.selectionModelActivated;\n\n  selectionModel.setSelectionState = value => selectionModelDispatcher({\n    type: 'SET_SELECTION_STATE',\n    value\n  });\n\n  selectionModel.getSelectionState = () => selModel.selectionState;\n\n  selectionModel.evaluateSelectionStatusSummary = dataProvider => {\n    if (dataProvider) {\n      if (dataProvider.viewModelCollection) {\n        // Check of there's any objects in the data provider that aren't selected\n        var loadedVmos = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n        var objectsNotSelected = loadedVmos.filter(function (x) {\n          return !selectionModel.isSelected(x);\n        }); // If everything is selected state is 'all'\n\n        if (loadedVmos.length && objectsNotSelected.length === 0) {\n          selectionModelDispatcher({\n            type: 'SET_SELECTION_STATE',\n            value: 'all'\n          });\n        } else {\n          // Otherwise it's some / none depending on what is selected\n          const selected = selModel.selected;\n          selectionModelDispatcher({\n            type: 'SET_SELECTION_STATE',\n            value: selected.length > 0 ? 'some' : 'none'\n          });\n        }\n      } // Update select / deselect command visibility\n\n\n      notifySelectionState(selectionModel);\n    } else {\n      logger.error('No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary');\n    }\n  };\n\n  selectionModel.addToSelection = newSelection => {\n    // If selection is not disabled\n    if (selModel.selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = asTrackedList(newSelection, tracker); // Add to selection if not already in there\n\n      const toUpdate = selModel.selected.concat(uidList.filter(function (uid) {\n        return selModel.selected.indexOf(uid) === -1;\n      }));\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: toUpdate,\n          isSelectionModelActive: true\n        }\n      });\n    }\n  };\n\n  selectionModel.removeFromSelection = newSelection => {\n    // If selection is not disabled\n    if (selModel.selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = asTrackedList(newSelection, tracker); // Remove any uid that is in the list of uids from the selection\n\n      const toUpdate = selModel.selected.filter(function (uid) {\n        return uidList.indexOf(uid) === -1;\n      });\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: toUpdate,\n          isSelectionModelActive: true\n        }\n      });\n      checkResetMultiSelect(selectionModel);\n    }\n  };\n\n  selectionModel.toggleSelection = function (newSelection) {\n    // If selection is not disabled\n    if (selModel.selectionEnabled) {\n      // Convert input to list of uids\n      const uidList = asTrackedList(newSelection, tracker); // Get the list of uids that are selected / not selected\n\n      const uidsNotSelected = uidList.filter(function (uid) {\n        return selModel.selected.indexOf(uid) === -1;\n      });\n      const uidsSelected = uidList.filter(function (uid) {\n        return selModel.selected.indexOf(uid) !== -1;\n      }); // Remove any objects were selected\n\n      const toUpdate = selModel.selected.filter(function (uid) {\n        return uidsSelected.indexOf(uid) === -1;\n      }) // And add the objects that were not selected\n      .concat(uidsNotSelected);\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: toUpdate,\n          isSelectionModelActive: true\n        }\n      });\n      checkResetMultiSelect(selectionModel);\n    }\n  };\n\n  selectionModel.getCurrentSelectedCount = () => selModel.selected.length;\n\n  selectionModel.selectNone = () => selectionModel.setSelection([]);\n\n  selectionModel.isSelected = obj => selectionModel.getSelectedIndex(obj) !== -1;\n\n  selectionModel.getSortedSelection = objList => {\n    // Get the selected objects\n    return objList.filter(function (x) {\n      return selectionModel.isSelected(x);\n    }) // And sort by the order in selection model\n    .sort(function (a, b) {\n      var tracked = tracker ? tracker(a) : a;\n      var tracked2 = tracker ? tracker(b) : b;\n      return selModel.selected.indexOf(tracked) - selModel.selected.indexOf(tracked2);\n    });\n  };\n\n  selectionModel.getSelectedIndex = obj => {\n    var tracked = tracker ? tracker(obj) : obj;\n    return selModel.selected.indexOf(tracked);\n  };\n\n  selectionModel.updateSelectedObjects = x => {\n    logger.warn('Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()');\n    selectionModel.setSelection(x);\n  };\n\n  return selectionModel;\n};\n/**\n  * Utility to fire events that update select all / deselect all command visibility\n  */\n\n\nconst notifySelectionState = selectionModel => {\n  var canSelectLoaded = selectionModel.getCanExecuteSelectLoaded();\n  var canDeselect = selectionModel.getCanExecuteDeselect();\n  const lastSelectionState = selectionModel.lastSelectionState;\n\n  if (lastSelectionState !== undefined && (lastSelectionState.CanExecuteSelectLoaded !== canSelectLoaded || lastSelectionState.CanExecuteDeselect !== canDeselect)) {\n    lastSelectionState.CanExecuteSelectLoaded = canSelectLoaded;\n    lastSelectionState.CanExecuteDeselect = canDeselect;\n    eventBus.publish('CanExecuteSelectLoaded', {});\n    eventBus.publish('CanExecuteDeselect', {});\n  }\n};\n/**\n  * Utility to exit multi select mode when selection is cleared\n  */\n\n\nconst checkResetMultiSelect = selectionModel => {\n  const selected = selectionModel.getSelection();\n  const multiSelectEnabled = selectionModel.isMultiSelectionEnabled(); // Disable multi select when all selection is cleared\n\n  if (selected.length === 0 && !multiSelectEnabled) {\n    selectionModel.setMultiSelectionEnabled(false);\n    selectionModel.setSelectionState('none');\n  }\n};\n\nexport const asTrackedList = (newSelection, tracker) => {\n  // Ensure it is array of some sort\n  if (!_.isArray(newSelection)) {\n    newSelection = [newSelection];\n  } // Ensure everything in array is tracked\n\n\n  return tracker ? newSelection.map(tracker) : newSelection;\n};\nexport const useSelectionModels = (selectionModelsJson, dataCtxNode) => {\n  _s4();\n\n  var _s3 = $RefreshSig$();\n\n  let selectionModelsRef = useRef({}); // Just to make sure the selectionModels name order is same in every render.\n\n  const [selectionModelNames] = useState(() => {\n    return selectionModelsJson !== undefined ? Object.keys(selectionModelsJson) : [];\n  }); //selectionModels order will never change between render cycles, hence disabling the eslint\n  //https://stackoverflow.com/questions/53906843/why-cant-react-hooks-be-called-inside-loops-or-nested-function\n  // zarq9k: any better solution ?\n\n  _s3(selectionModelNames.forEach(_s3(smName => {\n    _s3();\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    selectionModelsRef.current[smName] = useBuildSelectionModel(selectionModelsJson[smName], smName, dataCtxNode, selectionModelsRef.current[smName]);\n  }, \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  })), \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  });\n\n  return selectionModelsRef.current;\n};\n\n_s4(useSelectionModels, \"IZlQ83+LePKLIYTCTLLXtiCpz7o=\");","map":{"version":3,"names":["useReducer","useRef","useState","eventBus","logger","_","getEvaluatedId","declDataCtxService","selectionReducer","state","action","type","mode","value","multiSelectEnabled","selectionEnabled","selectionState","lastSelected","selected","selectionModelActivated","isSelectionModelActive","selectedObjects","selectAll","dpListener","useBuildSelectionModel","selectionModelJson","smName","dataCtxNode","selectionModelRef","applyScope","data","selectionMode","useSelectionModel","tracker","inputSelectionModel","selectionModel","selectionModelDispatcher","lastSelectionState","isEqual","getSelectionModelState","buildSelectionModel","selModel","input","propInternalValue","targetObj","get","dbValue","setMode","getMode","addRemoveDpListener","operation","dp","getDpListener","name","getLastSelection","setSelection","newSelection","uidList","asTrackedList","checkResetMultiSelect","getSelection","getCanExecuteSelectLoaded","getCanExecuteDeselect","setMultiSelectionEnabled","newMultiSelectState","warn","notifySelectionState","isMultiSelectionEnabled","setSelectionEnabled","isSelectionEnabled","setSelectionModelActivated","isSelectionModelActivated","setSelectionState","getSelectionState","evaluateSelectionStatusSummary","dataProvider","viewModelCollection","loadedVmos","getLoadedViewModelObjects","objectsNotSelected","filter","x","isSelected","length","error","addToSelection","toUpdate","concat","uid","indexOf","removeFromSelection","toggleSelection","uidsNotSelected","uidsSelected","getCurrentSelectedCount","selectNone","obj","getSelectedIndex","getSortedSelection","objList","sort","a","b","tracked","tracked2","updateSelectedObjects","canSelectLoaded","canDeselect","undefined","CanExecuteSelectLoaded","CanExecuteDeselect","publish","isArray","map","useSelectionModels","selectionModelsJson","selectionModelsRef","selectionModelNames","Object","keys","forEach","current"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/declSelectionModelFactory.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/declSelectionModelFactory\n */\nimport { useReducer, useRef, useState } from 'react';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport declDataCtxService from 'js/declarativeDataCtxService';\n\nconst selectionReducer = ( state, action ) => {\n    switch ( action.type ) {\n        case 'SET_MODE':\n            //handle deselect\n            //If object is already selected then remove it\n            return { ...state, mode: action.value };\n        case 'SET_MULTI_SELECT_ENABLED':\n            return { ...state, multiSelectEnabled: action.value };\n        case 'SET_SELECTION_ENABLED':\n            return { ...state, selectionEnabled: action.value };\n        case 'SET_SELECTION_STATE':\n            return { ...state, selectionState: action.value };\n        case 'SET_SELECTION':\n            return { ...state, lastSelected: state.selected, selected: action.value.selected, selectionModelActivated: action.value.isSelectionModelActive };\n        case 'SET_SM_ACTIVE':\n            return { ...state, selectionModelActivated: action.value };\n        case 'SELECT_ALL':\n            return { ...state, selectedObjects: [], selectAll: true };\n        case 'SET_DP_LISTENER':\n            if( state && !state.dpListener && !action.value ) {\n                return state;\n            }\n            return { ...state, dpListener: action.value };\n        default:\n            return state;\n    }\n};\n\nexport const useBuildSelectionModel = ( selectionModelJson, smName, dataCtxNode, selectionModelRef ) => {\n    declDataCtxService.applyScope( dataCtxNode.data, selectionModelJson, null, dataCtxNode, null );\n    const mode = selectionModelJson && selectionModelJson.selectionMode ? selectionModelJson.selectionMode : 'multiple';\n    return useSelectionModel( mode, null, null, smName, selectionModelRef );\n};\n\nexport const useSelectionModel = ( mode, tracker, inputSelectionModel, smName, selectionModelRef ) => {\n    const [ selectionModel, selectionModelDispatcher ] = useReducer( selectionReducer, {\n        mode: mode,\n        smName: smName,\n        multiSelectEnabled: false,\n        selectionEnabled: mode !== 'none',\n        selectionState: 'none',\n        selected: [],\n        lastSelectionState: [],\n        selectionModelActivated: true,\n        dpListener: null\n    } );\n\n    // If selection Model is already passed no need to create another state.\n    if( inputSelectionModel ) {\n        return inputSelectionModel;\n    }\n\n    if( !selectionModelRef || !_.isEqual( selectionModelRef.getSelectionModelState(), selectionModel ) ) {\n        return buildSelectionModel( selectionModel, selectionModelDispatcher, tracker );\n    }\n    return selectionModelRef;\n};\n\nconst buildSelectionModel = ( selModel, selectionModelDispatcher, tracker ) => {\n    const selectionModel = {};\n\n    if( !tracker ) {\n        tracker = ( input ) => {\n            if( typeof input === 'string' ) {\n                return input;\n            } else if( typeof input === 'object' && input.propInternalValue ) {\n                return input.propInternalValue;\n            } else if( typeof input === 'object' && input.type === 'Awp0XRTObjectSetRow' ) {\n                var targetObj = _.get( input, 'props.awp0Target' );\n                if( targetObj && targetObj.dbValue ) {\n                    return targetObj.dbValue;\n                }\n            } else if( typeof input === 'object' ) {\n                return getEvaluatedId( input );\n            }\n            return input;\n        };\n    }\n\n    selectionModel.getSelectionModelState = () => {\n        return selModel;\n    };\n\n    selectionModel.setMode = ( mode ) => {\n        selectionModelDispatcher( { type: 'SET_MODE', value: mode } );\n    };\n    selectionModel.getMode = () => selModel.mode;\n\n    selectionModel.addRemoveDpListener = ( operation, dp ) => {\n        if( operation === 'add' ) {\n            selectionModelDispatcher( { type: 'SET_DP_LISTENER', value: dp } );\n        } else if( operation === 'remove' ) {\n            selectionModelDispatcher( { type: 'SET_DP_LISTENER', value: null } );\n        }\n    };\n\n    selectionModel.getDpListener = () => {\n        return selModel.dpListener;\n    };\n\n    selectionModel.setMode = ( mode ) => {\n        selectionModelDispatcher( { type: 'SET_MODE', value: mode } );\n    };\n\n    selectionModel.mode = selModel.mode;\n\n    selectionModel.selectionEnabled = selModel.selectionEnabled;\n\n    selectionModel.multiSelectEnabled = selModel.multiSelectEnabled;\n\n    selectionModel.selectionState = selModel.selectionState;\n\n    selectionModel.name = selModel.smName; // for debugging purpose to identify which selectionModel is in action\n\n    selectionModel.getLastSelection = () => selModel.lastSelected;\n\n    selectionModel.setSelection = ( newSelection, isSelectionModelActive = true ) => {\n        if( selModel.selectionEnabled ) {\n            var uidList = newSelection ? asTrackedList( newSelection, tracker ) : [];\n            // Replace selection\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: uidList, isSelectionModelActive: isSelectionModelActive } } ); // Auto exit multi select\n            checkResetMultiSelect( selectionModel );\n        }\n    };\n\n    selectionModel.getSelection = () => selModel.selected;\n\n    selectionModel.getCanExecuteSelectLoaded = () => selModel.mode === 'multiple' && selModel.selectionState !== 'all';\n\n    selectionModel.getCanExecuteDeselect = () => selModel.mode === 'multiple' && selModel.selectionState === 'all';\n\n    selectionModel.setMultiSelectionEnabled = newMultiSelectState => {\n        const mode = selModel.mode;\n        const multiSelectEnabled = selModel.multiSelectEnabled;\n        if( mode !== 'none' && multiSelectEnabled !== newMultiSelectState ) {\n            if( newMultiSelectState && mode !== 'multiple' ) {\n                logger.warn( 'Cannot enter multi select mode when selection model is single select' );\n            } else {\n                selectionModelDispatcher( { type: 'SET_MULTI_SELECT_ENABLED', value: newMultiSelectState } );\n                // Update select / deselect command visibility\n                notifySelectionState( selectionModel );\n            }\n        }\n    };\n\n    selectionModel.isMultiSelectionEnabled = () => selModel.multiSelectEnabled;\n\n    selectionModel.setSelectionEnabled = isSelectionEnabled => {\n        if( selModel.mode !== 'none' ) {\n            selectionModelDispatcher( { type: 'SET_SELECTION_ENABLED', value: isSelectionEnabled } );\n        }\n    };\n\n    selectionModel.isSelectionEnabled = () => selModel.selectionEnabled;\n\n    selectionModel.setSelectionModelActivated = isSelectionModelActive => {\n        selectionModelDispatcher( { type: 'SET_SM_ACTIVE', value: isSelectionModelActive } );\n    };\n\n    selectionModel.isSelectionModelActivated = () => selModel.selectionModelActivated;\n\n    selectionModel.setSelectionState = ( value ) => selectionModelDispatcher( { type: 'SET_SELECTION_STATE', value } );\n\n    selectionModel.getSelectionState = () => selModel.selectionState;\n\n    selectionModel.evaluateSelectionStatusSummary = dataProvider => {\n        if( dataProvider ) {\n            if( dataProvider.viewModelCollection ) {\n                // Check of there's any objects in the data provider that aren't selected\n                var loadedVmos = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                var objectsNotSelected = loadedVmos.filter( function( x ) {\n                    return !selectionModel.isSelected( x );\n                } );\n                // If everything is selected state is 'all'\n                if( loadedVmos.length && objectsNotSelected.length === 0 ) {\n                    selectionModelDispatcher( { type: 'SET_SELECTION_STATE', value: 'all' } );\n                } else {\n                    // Otherwise it's some / none depending on what is selected\n                    const selected = selModel.selected;\n                    selectionModelDispatcher( { type: 'SET_SELECTION_STATE', value: selected.length > 0 ? 'some' : 'none' } );\n                }\n            }\n            // Update select / deselect command visibility\n            notifySelectionState( selectionModel );\n        } else {\n            logger.error( 'No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary' );\n        }\n    };\n\n    selectionModel.addToSelection = ( newSelection ) => {\n        // If selection is not disabled\n        if( selModel.selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = asTrackedList( newSelection, tracker );\n\n            // Add to selection if not already in there\n            const toUpdate = selModel.selected.concat( uidList.filter( function( uid ) {\n                return selModel.selected.indexOf( uid ) === -1;\n            } ) );\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: toUpdate, isSelectionModelActive: true } } );\n        }\n    };\n\n    selectionModel.removeFromSelection = ( newSelection ) => {\n        // If selection is not disabled\n        if( selModel.selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = asTrackedList( newSelection, tracker );\n\n            // Remove any uid that is in the list of uids from the selection\n            const toUpdate = selModel.selected.filter( function( uid ) {\n                return uidList.indexOf( uid ) === -1;\n            } );\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: toUpdate, isSelectionModelActive: true } } );\n            checkResetMultiSelect( selectionModel );\n        }\n    };\n\n    selectionModel.toggleSelection = function( newSelection ) {\n        // If selection is not disabled\n        if( selModel.selectionEnabled ) {\n            // Convert input to list of uids\n            const uidList = asTrackedList( newSelection, tracker );\n\n            // Get the list of uids that are selected / not selected\n            const uidsNotSelected = uidList.filter( function( uid ) {\n                return selModel.selected.indexOf( uid ) === -1;\n            } );\n            const uidsSelected = uidList.filter( function( uid ) {\n                return selModel.selected.indexOf( uid ) !== -1;\n            } );\n            // Remove any objects were selected\n            const toUpdate = selModel.selected.filter( function( uid ) {\n                return uidsSelected.indexOf( uid ) === -1;\n            } )\n            // And add the objects that were not selected\n                .concat( uidsNotSelected );\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: toUpdate, isSelectionModelActive: true } } );\n            checkResetMultiSelect( selectionModel );\n        }\n    };\n\n    selectionModel.getCurrentSelectedCount = () => selModel.selected.length;\n    selectionModel.selectNone = () => selectionModel.setSelection( [] );\n    selectionModel.isSelected = ( obj ) => selectionModel.getSelectedIndex( obj ) !== -1;\n\n    selectionModel.getSortedSelection = ( objList ) => {\n        // Get the selected objects\n        return objList.filter( function( x ) {\n            return selectionModel.isSelected( x );\n        } )\n        // And sort by the order in selection model\n            .sort( function( a, b ) {\n                var tracked = tracker ? tracker( a ) : a;\n                var tracked2 = tracker ? tracker( b ) : b;\n                return selModel.selected.indexOf( tracked ) - selModel.selected.indexOf( tracked2 );\n            } );\n    };\n\n    selectionModel.getSelectedIndex = ( obj ) => {\n        var tracked = tracker ? tracker( obj ) : obj;\n        return selModel.selected.indexOf( tracked );\n    };\n\n    selectionModel.updateSelectedObjects = ( x ) => {\n        logger.warn( 'Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()' );\n        selectionModel.setSelection( x );\n    };\n\n    return selectionModel;\n};\n\n/**\n  * Utility to fire events that update select all / deselect all command visibility\n  */\nconst notifySelectionState = selectionModel => {\n    var canSelectLoaded = selectionModel.getCanExecuteSelectLoaded();\n    var canDeselect = selectionModel.getCanExecuteDeselect();\n    const lastSelectionState = selectionModel.lastSelectionState;\n    if( lastSelectionState !== undefined && ( lastSelectionState.CanExecuteSelectLoaded !== canSelectLoaded ||\n             lastSelectionState.CanExecuteDeselect !== canDeselect ) ) {\n        lastSelectionState.CanExecuteSelectLoaded = canSelectLoaded;\n        lastSelectionState.CanExecuteDeselect = canDeselect;\n\n        eventBus.publish( 'CanExecuteSelectLoaded', {} );\n        eventBus.publish( 'CanExecuteDeselect', {} );\n    }\n};\n\n/**\n  * Utility to exit multi select mode when selection is cleared\n  */\nconst checkResetMultiSelect = ( selectionModel ) => {\n    const selected = selectionModel.getSelection();\n    const multiSelectEnabled = selectionModel.isMultiSelectionEnabled();\n    // Disable multi select when all selection is cleared\n    if( selected.length === 0 && !multiSelectEnabled ) {\n        selectionModel.setMultiSelectionEnabled( false );\n        selectionModel.setSelectionState( 'none' );\n    }\n};\n\nexport const asTrackedList = ( newSelection, tracker ) => {\n    // Ensure it is array of some sort\n    if( !_.isArray( newSelection ) ) {\n        newSelection = [ newSelection ];\n    }\n    // Ensure everything in array is tracked\n    return tracker ? newSelection.map( tracker ) : newSelection;\n};\n\nexport const useSelectionModels = ( selectionModelsJson, dataCtxNode ) => {\n    let selectionModelsRef = useRef( {} );\n    // Just to make sure the selectionModels name order is same in every render.\n    const [ selectionModelNames ] = useState( () => {\n        return selectionModelsJson !== undefined ? Object.keys( selectionModelsJson ) : [];\n    } );\n    //selectionModels order will never change between render cycles, hence disabling the eslint\n    //https://stackoverflow.com/questions/53906843/why-cant-react-hooks-be-called-inside-loops-or-nested-function\n    // zarq9k: any better solution ?\n    selectionModelNames.forEach( ( smName ) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        selectionModelsRef.current[ smName ] = useBuildSelectionModel( selectionModelsJson[ smName ], smName, dataCtxNode, selectionModelsRef.current[ smName ] );\n    } );\n    return selectionModelsRef.current;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
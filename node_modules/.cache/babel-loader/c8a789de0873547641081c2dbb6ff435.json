{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwSearchBreadcrumbChipsUtils\n */\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport _ from 'lodash';\n/**\n * Build master list of chips to display in breadcrumb location\n * @param {*} searchObject context for render function interpolation\n * @returns array of chips to display\n */\n\nexport let buildSearchChips = (searchObject, existingBreadcrumbChips) => {\n  let chips = [];\n  var parentChip;\n  var appliedFilters = [];\n  let appliedFiltersExist = searchObject && searchObject.appliedFilters && searchObject.appliedFilters.length > 0;\n  let categoriesExist = searchObject.categories && searchObject.categories.length > 0;\n  let specialCategoriesExist = searchObject.categoriesForRangeSearches && searchObject.categoriesForRangeSearches.length > 0;\n  let isFacetSearch = searchObject.isFacetSearch;\n\n  if (appliedFiltersExist && categoriesExist && !isFacetSearch) {\n    appliedFilters = removeDuplicateDateFilters(searchObject.appliedFilters); //Get the display value of the Category to display on the chip\n\n    for (var i = 0; i < appliedFilters.length; i++) {\n      for (var j = 0; j < searchObject.categories.length; j++) {\n        switch (searchObject.categories[j].type) {\n          case 'StringFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'StringFilter');\n            break;\n\n          case 'NumericFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'NumericFilter');\n            break;\n\n          case 'DateFilter':\n            parentChip = getDateFilterParentChip(searchObject.categories[j], appliedFilters[i], searchObject.appliedFilters);\n            break;\n\n          case 'RadioFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'RadioFilter');\n            break;\n\n          case 'ObjectFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'ObjectFilter');\n            break;\n        } //Check if parentChip is populated and add to chips\n\n\n        if (parentChip) {\n          chips.push(parentChip);\n          parentChip = undefined;\n        }\n      }\n    }\n  } else if (appliedFiltersExist && specialCategoriesExist && !isFacetSearch) {\n    appliedFilters = removeDuplicateDateFilters(searchObject.appliedFilters); //Get the display value of the Category to display on the chip\n\n    for (var i = 0; i < appliedFilters.length; i++) {\n      for (var j = 0; j < searchObject.categoriesForRangeSearches.length; j++) {\n        switch (searchObject.categoriesForRangeSearches[j].type) {\n          case 'StringFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'StringFilter');\n            break;\n\n          case 'NumericFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'NumericFilter');\n            break;\n\n          case 'DateFilter':\n            parentChip = getDateFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], searchObject.appliedFilters);\n            break;\n\n          case 'RadioFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'RadioFilter');\n            break;\n\n          case 'ObjectFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'ObjectFilter');\n            break;\n        } //Check if parentChip is populated and add to chips\n\n\n        if (parentChip) {\n          chips.push(parentChip);\n          parentChip = undefined;\n        }\n      }\n    }\n  } else if (isFacetSearch) {\n    return existingBreadcrumbChips;\n  }\n\n  return chips;\n};\n/**\n * Remove selected chip from current list of displayed or overflow chips\n * @param {*} searchObject searchObject\n * @param {*} chipToRemove selected chip to remove\n * @param {*} data data\n * @param {*} chiplistRef displayed chip ref\n * @returns display and overflow chips for rerender\n */\n\nexport let removeSelectedChip = function (searchObject, chipToRemove, data, chiplistRef) {\n  let displayChips = _.cloneDeep(data.displayBreadcrumbChips);\n\n  let overflownChips = [];\n\n  switch (chipToRemove.chipFilterType) {\n    case 'StringFilter':\n    case 'NumericFilter':\n      removeChip(searchObject, chipToRemove);\n      break;\n\n    case 'DateFilter':\n      removeDateChip(searchObject, chipToRemove);\n      break;\n\n    case 'RadioFilter':\n      removeRadioChip(searchObject, chipToRemove);\n      break;\n\n    case 'ObjectFilter':\n      removeObjectChip(searchObject, chipToRemove);\n      break;\n  }\n\n  for (let i = 0; displayChips.length > i; i++) {\n    if (displayChips[i].labelDisplayName === chipToRemove.labelDisplayName) {\n      displayChips.splice(i, 1);\n    }\n  }\n\n  return {\n    displayChips,\n    overflownChips\n  };\n};\n/**\n * Creates the chip that will be added to the master chip list\n * @function createChip\n * @param {Object} parent If chip is a parent chip\n * @param {Object} numberOfChips if parent chip how many children chips exist\n * @param {Object} categoryName name of category\n * @param {Object} filterDisplayName display name of filter\n * @param {Object} internalCategoryName intenal category name\n * @param {Object} internalFilterName intenal filter name\n * @param {Object} filterType type of filter\n * @param {Object} childrenChips if parent this is children chips to display in group\n * @param {Object} defaultSelection default selection, this selection will not display remove button\n * @returns {Object} breadcrumbChip\n */\n\nfunction createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection) {\n  let displayLabel;\n\n  if (numberOfChips > 1 && parent) {\n    displayLabel = categoryName + ': ' + numberOfChips + ' Selected';\n    internalFilterName = 'parentChip';\n  } else {\n    displayLabel = categoryName + ': ' + filterDisplayName;\n  }\n\n  let breadcrumbChip = {\n    uiIconId: 'miscRemoveBreadcrumb',\n    chipType: 'BUTTON',\n    selected: false,\n    labelDisplayName: displayLabel,\n    labelInternalCategoryName: internalCategoryName,\n    labelInternalFilterName: internalFilterName,\n    chipFilterType: filterType,\n    className: 'aw-search-breadcrumb-chip'\n  };\n\n  if (filterType === 'RadioFilter' && defaultSelection) {\n    breadcrumbChip.uiIconId = '';\n  }\n\n  if (childrenChips && childrenChips.length > 1) {\n    breadcrumbChip.children = childrenChips;\n  }\n\n  return breadcrumbChip;\n}\n/**\n * Returns active filters after removing repetitive date filters ie. year_week filters\n * @function removeDuplicateDateFilters\n * @param {Object} activeFilters current active filter\n * @returns {Object} editedActiveFilters\n */\n\n\nfunction removeDuplicateDateFilters(appliedFilters) {\n  var editedAppliedFilters = [];\n  var dateExists = false;\n\n  for (let i = 0; i < appliedFilters.length; i++) {\n    //Handles checkbox date filters selected\n    if (appliedFilters[i].name.includes('_0Z0_')) {\n      if (appliedFilters[i].name.includes('_month') || appliedFilters[i].name.includes('_week')) {\n        appliedFilters.slice(i, 1);\n      } else {\n        editedAppliedFilters.push(appliedFilters[i]);\n      }\n    } //Handle the Date Range Filter being set\n    else if (appliedFilters[i].type === 'DateFilter') {\n      for (let j = 0; j < appliedFilters.length; j++) {\n        if (appliedFilters[i].name === appliedFilters[j].name.substr(0, appliedFilters[j].name.indexOf('_0Z0'))) {\n          dateExists = true;\n        }\n      }\n\n      if (dateExists) {\n        appliedFilters.slice(i, 1);\n        dateExists = false;\n      } else {\n        editedAppliedFilters.push(appliedFilters[i]);\n        dateExists = false;\n      }\n    } else {\n      editedAppliedFilters.push(appliedFilters[i]);\n    }\n  }\n\n  return editedAppliedFilters;\n}\n/**\n * Returns a parent chip to build chips for addition to the display chips array\n * @function getFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\n\n\nfunction getFilterParentChip(category, activeFilter, filterType) {\n  var childrenChips = [];\n  var defaultSelection = false;\n  var parent;\n\n  if (category.internalName === activeFilter.name) {\n    //Create initial chip. If multiple of same category exist create child chip\n    for (var k = 0; k < activeFilter.values.length; k++) {\n      var categoryName = category.displayName;\n      var numberOfChips = activeFilter.values.length;\n      var internalCategoryName = activeFilter.name;\n      var internalFilterName = activeFilter.values[k];\n      var filterDisplayName = category.filterValues && category.filterValues.length > 0 ? category.filterValues[0].name : undefined;\n\n      if (activeFilter.values[k].includes('_NumericRange_')) {\n        parent = false;\n        filterDisplayName = getNumericString(activeFilter.values[k]);\n      }\n\n      if (category.type === 'RadioFilter') {\n        if (activeFilter.values[0] === category.filterValues[0].internalName) {\n          defaultSelection = true;\n        }\n      }\n\n      if (numberOfChips > 1) {\n        if (category.type === 'StringFilter' || category.type === 'ObjectFilter') {\n          for (var l = 0; l < category.filterValues.length; l++) {\n            if (category.filterValues[l].internalName === internalFilterName) {\n              parent = false;\n              filterDisplayName = category.filterValues[l].name;\n              let chipChild = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false);\n              childrenChips.push(chipChild);\n            }\n          }\n        } else if (category.type === 'NumericFilter') {\n          parent = false;\n          filterDisplayName = activeFilter.values[k].replace('_NumericFilter_', '');\n\n          if (activeFilter.values[k].includes('_NumericRange_')) {\n            parent = false;\n            filterDisplayName = getNumericString(activeFilter.values[k]);\n          }\n\n          let chipChild = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false);\n          childrenChips.push(chipChild);\n        }\n      }\n    }\n\n    parent = true;\n    return createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection);\n  }\n}\n/**\n * Returns a date parent chip to build chips for addition to the display chips array\n * @function getDateFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\n\n\nfunction getDateFilterParentChip(category, currentActiveFilter, activeFilter) {\n  var childrenChips = [];\n  var parent;\n  var filterDisplayName;\n\n  if (category.filterValues.length > 0) {\n    for (var datechipfilter = 0; datechipfilter < category.filterValues.length; datechipfilter++) {\n      if (category.filterValues[datechipfilter].categoryName === currentActiveFilter.name || category.internalName === currentActiveFilter.name) {\n        //Get Category Name and Internal Category value\n        var categoryName = category.displayName; //Get Group of DateFilter Chips\n\n        var dateFilterArray = getDateFilterChipArray(activeFilter, category);\n        let numberOfChips = dateFilterArray.length;\n        var internalFilterName = dateFilterArray[0].values[0];\n        var internalCategoryName = dateFilterArray[0].name; //Get filter display name. If Filter Range get the proper Filter display name then\n\n        filterDisplayName = dateFilterArray[0].values[0] === '\"$NONE\"' ? dateFilterArray[0].values[0] : category.filterValues[0].name;\n\n        if (dateFilterArray[0].values[0].length > 13 && dateFilterArray[0].values[0].substr(0, 12) === '_DateFilter_') {\n          let filterDisplayArray = getDateString(dateFilterArray[0].values[0]);\n          filterDisplayName = filterDisplayArray.displayName;\n        } //Incase of child chips get children chips\n\n\n        if (numberOfChips > 1) {\n          for (var k = 0; k < dateFilterArray.length; k++) {\n            parent = false;\n            internalCategoryName = dateFilterArray[k].name;\n            internalFilterName = dateFilterArray[k].values[0];\n\n            if (dateFilterArray[k].values[0].length > 13 && dateFilterArray[k].values[0].substr(0, 12) === '_DateFilter_') {\n              let filterDisplayArray = getDateString(dateFilterArray[k].values[0]);\n              filterDisplayName = filterDisplayArray.displayName;\n            } else {\n              for (var l = 0; l < category.filterValues.length; l++) {\n                if (category.filterValues[l].internalName === dateFilterArray[k].values[0]) {\n                  filterDisplayName = category.filterValues[l].name;\n                }\n              }\n            }\n\n            let chipChild = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', null, false);\n            childrenChips.push(chipChild);\n          }\n        }\n\n        parent = true;\n        var parentChip = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', childrenChips, false);\n        break;\n      }\n    }\n  } else if (category.filterValues && category.filterValues.length === 0 && category.internalName === currentActiveFilter.name && category.dateRangeString && category.dateRangeString.length > 0) {\n    filterDisplayName = getDateString(category.dateRangeString).displayName;\n    parentChip = createChip(parent, 1, category.displayName, filterDisplayName, category.internalName, category.dateRangeString, 'DateFilter', [], false);\n  }\n\n  return parentChip;\n}\n/**\n * Returns dateRange in proper format for date chip display\n * @function getDateString\n * @param {Object} dateString filter string date value\n * @returns {Object} dateRange\n */\n\n\nfunction getDateString(dateString) {\n  if (dateString.length > 19) {\n    var offsetString = dateString.substring(12);\n\n    if (offsetString.length > 4) {\n      var startDate = offsetString.substr(0, offsetString.indexOf('_TO_'));\n      var endDate = offsetString.substr(offsetString.indexOf('_TO_') + 4, offsetString.length);\n    }\n\n    if (startDate === '*') {\n      startDate = '0001-01-01T00:00:00+00:00';\n    }\n\n    startDate = filterPanelUtils.getDate(searchFilterService.processDateStringOffset(startDate));\n    endDate = filterPanelUtils.getDate(searchFilterService.processDateStringOffset(endDate));\n    var dateRange = filterPanelUtils.getDateRangeDisplayString(startDate, endDate);\n  }\n\n  return dateRange;\n}\n/**\n * Returns group of date filters in array\n * @function getDateFilterChipArray\n * @param {Object} activeFilterArray all current active filters\n * @param {Object} filterCategory current filter category\n * @returns {Object} dateFilterArray\n */\n\n\nfunction getDateFilterChipArray(activeFilterArray, filterCategory) {\n  var dateFilterArray = [];\n\n  for (var i = 0; i < activeFilterArray.length; i++) {\n    if (activeFilterArray[i].name === filterCategory.internalName) {\n      dateFilterArray.push(activeFilterArray[i]);\n    } else {\n      let shortFilterIntenal = activeFilterArray[i].name.substr(0, activeFilterArray[i].name.indexOf('_0Z0'));\n\n      if (shortFilterIntenal === filterCategory.internalName) {\n        dateFilterArray.push(activeFilterArray[i]);\n      }\n    }\n  }\n\n  return dateFilterArray;\n}\n/**\n * Returns filterDisplayName in proper format for numeric chip display\n * @function getNumericString\n * @param {Object} numericString from the getCategoryValues\n * @returns {Object} filterDisplayName\n */\n\n\nfunction getNumericString(numericString) {\n  if (numericString.length > 4) {\n    let value = numericString.replace('_NumericRange_', '');\n    let startValue = value.substr(0, value.indexOf('_TO_'));\n    let endValue = value.substr(value.indexOf('_TO_') + 4, value.length);\n\n    if (!startValue) {\n      var filterDisplayName = 'To ' + endValue;\n    } else if (!endValue) {\n      var filterDisplayName = 'From ' + startValue;\n    } else {\n      var filterDisplayName = startValue + ' - ' + endValue;\n    }\n  }\n\n  return filterDisplayName;\n}\n/**\n * Updates search object with removed radio filter\n * @function removeRadioChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeRadioChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n\n  for (var i = 0; i < newSearchObject.categories.length; i++) {\n    if (chipToRemove.labelInternalCategoryName === newSearchObject.categories[i].internalName) {\n      if (chipToRemove.labelInternalFilterName === newSearchObject.categories[i].filterValues[0].internalName) {\n        newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = [newSearchObject.categories[i].filterValues[1].internalName];\n      } else {\n        newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = [newSearchObject.categories[i].filterValues[0].internalName];\n      }\n    }\n  }\n\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n/**\n * Updates search object with removed object filter\n * @function removeObjectChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeObjectChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n  let updatedFilters = searchFilterService.removeDependentClassificationFilters({\n    internalName: chipToRemove.labelInternalFilterName\n  });\n\n  if (updatedFilters.length > 0) {\n    newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = updatedFilters;\n  } else {\n    delete newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName];\n  }\n\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n/**\n * Updates search object with after removing single string filter\n * @function removeSingleStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeSingleChip(newSearchObject, chipToRemove) {\n  let filtersForCategory = newSearchObject.activeFilters && newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] ? newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] : [];\n  let updatedFilters = [];\n\n  for (let index = 0; index < filtersForCategory.length; index++) {\n    if (filtersForCategory[index] !== chipToRemove.labelInternalFilterName) {\n      updatedFilters.push(filtersForCategory[index]);\n    }\n  }\n\n  if (updatedFilters.length > 0) {\n    newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = updatedFilters;\n  } else {\n    delete newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName];\n  }\n\n  if (newSearchObject.activeFilters && Object.keys(newSearchObject.activeFilters).length > 0) {\n    newSearchObject.activeFilterString = searchFilterService.buildFilterString(newSearchObject.activeFilters);\n  } else {\n    newSearchObject.activeFilterString = '';\n  }\n}\n/**\n * Updates search object after removing multiple string filters from the same category\n * @function removeStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove chip which is to be removed\n */\n\n\nfunction removeMultipleChip(newSearchObject, chipToRemove) {\n  let children = chipToRemove.children;\n\n  for (let index = 0; index < children.length; index++) {\n    removeSingleChip(newSearchObject, children[index]);\n  }\n}\n/**\n * Updates search object after removing string chip\n * @function removeStringChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n\n  if (chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children) {\n    removeSingleChip(newSearchObject, chipToRemove);\n  } else {\n    removeMultipleChip(newSearchObject, chipToRemove);\n  }\n\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n/**\n * Updates search object with removed date filter\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeDateChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n\n  if (chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children) {\n    removeSingleChip(newSearchObject, chipToRemove);\n  } else {\n    removeMultipleChip(newSearchObject, chipToRemove);\n  }\n\n  newSearchObject.activeFilters = searchFilterService.removeDependentDateFilters(newSearchObject.activeFilters);\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n\nexport let checkSearchLocation = searchObject => {\n  //Check if in Panel or Global Search Area\n  if (searchObject && searchObject.criteria && searchObject.criteria.searchFromLocation) {\n    let currentLocation = _.cloneDeep(searchObject.criteria.searchFromLocation);\n\n    if (currentLocation === 'global') {\n      return true;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n/**\n * ClearAll action removes all selected chips in the breadcrumb location\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n */\n\nexport let clearAll = searchObject => {\n  const newSearchObject = { ...searchObject.value\n  };\n  const categories = searchFilterService.clearAllSelectedFiltersAndRanges(newSearchObject.categories, newSearchObject.activeFilters, newSearchObject.positivePendingFilters);\n  newSearchObject.categories = categories;\n\n  if (newSearchObject.skipFiltersForClearAll && newSearchObject.activeFilters && newSearchObject.activeFilterMap && Object.keys(newSearchObject.activeFilters).length > 0) {\n    for (const [key, value] of Object.entries(newSearchObject.activeFilters)) {\n      if (!newSearchObject.skipFiltersForClearAll.includes(key)) {\n        delete newSearchObject.activeFilters[key];\n        delete newSearchObject.activeFilterMap[key];\n      }\n    }\n  } else {\n    newSearchObject.activeFilterMap = {};\n    newSearchObject.activeFilters = {};\n  }\n\n  delete newSearchObject.positivePendingFilters;\n  delete newSearchObject.negativePendingFilters;\n  delete newSearchObject.allCategoriesVisible;\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n};\nexport let calculateOverflow = (elementRefList, totalVisibleArea, totalVisibleHeight, breadcrumbChips, currentOverflowChips, displayBreadcrumbChips, inHeader, searchFilterCategoryExpandMore, visibleChipAreaMaintained) => {\n  var tabElems;\n  var displayChips = [];\n  var overflownChips = [];\n  var breakIndex = null;\n  var filledHeader = true;\n\n  if (elementRefList) {\n    let chiplist = elementRefList.get('chiplist').current;\n\n    if (!chiplist) {\n      return breakIndex;\n    }\n\n    if (!tabElems) {\n      tabElems = chiplist.querySelectorAll('.aw-widgets-chip');\n    }\n\n    let arr = [...tabElems];\n    var tabPadding = 16;\n    let searchCountAreaSpacing = 0;\n\n    if (chiplist.parentNode.parentElement && chiplist.parentNode.parentElement.firstChild && chiplist.parentNode.parentElement.firstChild.childNodes && chiplist.parentNode.parentElement.firstChild.childNodes.length > 0 && chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth) {\n      searchCountAreaSpacing = chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth;\n    }\n\n    let cmdMoreButtonSpacing = 80;\n    let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientWidth + 24 : 24;\n\n    if (!totalVisibleArea || !visibleChipAreaMaintained) {\n      totalVisibleArea = chiplist.parentElement.parentElement ? chiplist.parentElement.parentElement.clientWidth : 0;\n    }\n\n    var totalCalculatedArea = tabPadding + searchCountAreaSpacing + cmdMoreButtonSpacing + clearButtonSpacing; //Determine where overflow takes place. If overflow is already hit then this keeps breakIndex as undefined\n\n    for (var i = 0; i < arr.length; i++) {\n      totalCalculatedArea = arr[i].clientWidth + totalCalculatedArea;\n\n      if (totalCalculatedArea > totalVisibleArea) {\n        breakIndex = i;\n        break;\n      }\n    }\n\n    if (!inHeader) {\n      if (!totalVisibleHeight || !visibleChipAreaMaintained) {\n        totalVisibleHeight = chiplist.parentElement.parentElement.clientHeight / 2;\n      }\n\n      let chipElementHeight = chiplist.parentElement.clientHeight;\n      let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientHeight : 0;\n      cmdMoreButtonSpacing = 32;\n      tabPadding = 32;\n      totalCalculatedArea = tabPadding + clearButtonSpacing + cmdMoreButtonSpacing + chipElementHeight;\n\n      if (totalCalculatedArea > totalVisibleHeight) {\n        for (i = 0; i < arr.length; i++) {\n          totalCalculatedArea -= 26;\n\n          if (totalCalculatedArea < totalVisibleHeight) {\n            breakIndex = arr.length - i;\n            break;\n          }\n        }\n      }\n    } //Check if header is completely filled. Used when going from a smaller window size to larger window size\n    //diffChipArea helps with accounting for scenarios where there is only a small space difference in calculated and actual size\n\n\n    let diffChipArea = totalVisibleArea - totalCalculatedArea - 200;\n\n    if (totalCalculatedArea < totalVisibleArea - 200 && diffChipArea > tabPadding) {\n      filledHeader = false;\n    }\n\n    if (breakIndex === 0 && inHeader) {\n      displayChips = [];\n      overflownChips = breadcrumbChips;\n    } else if (breakIndex > 0) {\n      overflownChips = breadcrumbChips.slice(breakIndex);\n      displayChips = breadcrumbChips.slice(0, breakIndex);\n    } else if (breadcrumbChips.length >= 7) {\n      overflownChips = breadcrumbChips.slice(1);\n      displayChips = breadcrumbChips.slice(0, 1);\n    } else if (currentOverflowChips.length > 0 && arr.length < breadcrumbChips.length && filledHeader) {\n      overflownChips = breadcrumbChips.slice(arr.length);\n      displayChips = breadcrumbChips.slice(0, arr.length);\n    } else {\n      displayChips = breadcrumbChips;\n      overflownChips = [];\n    }\n  } else if (currentOverflowChips.length !== 0 && displayBreadcrumbChips.length !== 0) {\n    overflownChips = currentOverflowChips;\n    displayChips = displayBreadcrumbChips;\n  } else {\n    overflownChips = [];\n    displayChips = breadcrumbChips;\n  }\n\n  let displayOverflowButton = overflownChips.length + ' ' + searchFilterCategoryExpandMore;\n  return {\n    displayChips,\n    overflownChips,\n    displayOverflowButton,\n    totalVisibleArea,\n    totalVisibleHeight\n  };\n};\nexport default {\n  buildSearchChips,\n  removeSelectedChip,\n  checkSearchLocation,\n  clearAll,\n  calculateOverflow\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/AwSearchBreadcrumbChipsUtils.js"],"names":["buildSearchChips","chips","appliedFilters","appliedFiltersExist","searchObject","categoriesExist","specialCategoriesExist","isFacetSearch","removeDuplicateDateFilters","i","j","parentChip","getFilterParentChip","getDateFilterParentChip","removeSelectedChip","displayChips","_","data","overflownChips","chipToRemove","removeChip","removeDateChip","removeRadioChip","removeObjectChip","numberOfChips","displayLabel","categoryName","internalFilterName","breadcrumbChip","uiIconId","chipType","selected","labelDisplayName","labelInternalCategoryName","labelInternalFilterName","chipFilterType","className","filterType","childrenChips","editedAppliedFilters","dateExists","defaultSelection","category","activeFilter","k","internalCategoryName","filterDisplayName","parent","getNumericString","l","chipChild","createChip","datechipfilter","currentActiveFilter","dateFilterArray","getDateFilterChipArray","filterDisplayArray","getDateString","dateString","offsetString","startDate","endDate","filterPanelUtils","searchFilterService","dateRange","activeFilterArray","filterCategory","shortFilterIntenal","numericString","value","startValue","endValue","newSearchObject","updatedFilters","internalName","filtersForCategory","index","Object","children","removeSingleChip","removeMultipleChip","checkSearchLocation","currentLocation","clearAll","categories","calculateOverflow","breakIndex","filledHeader","chiplist","elementRefList","tabElems","arr","tabPadding","searchCountAreaSpacing","cmdMoreButtonSpacing","clearButtonSpacing","totalVisibleArea","totalCalculatedArea","totalVisibleHeight","chipElementHeight","diffChipArea","breadcrumbChips","currentOverflowChips","displayBreadcrumbChips","displayOverflowButton"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwSearchBreadcrumbChipsUtils\n */\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport _ from 'lodash';\n\n\n/**\n * Build master list of chips to display in breadcrumb location\n * @param {*} searchObject context for render function interpolation\n * @returns array of chips to display\n */\nexport let buildSearchChips = ( searchObject, existingBreadcrumbChips ) => {\n    let chips = [];\n    var parentChip;\n    var appliedFilters = [];\n    let appliedFiltersExist = searchObject && searchObject.appliedFilters && searchObject.appliedFilters.length > 0;\n    let categoriesExist = searchObject.categories && searchObject.categories.length > 0;\n    let specialCategoriesExist = searchObject.categoriesForRangeSearches && searchObject.categoriesForRangeSearches.length > 0;\n    let isFacetSearch = searchObject.isFacetSearch;\n    if( appliedFiltersExist && categoriesExist && !isFacetSearch ) {\n        appliedFilters = removeDuplicateDateFilters( searchObject.appliedFilters );\n\n        //Get the display value of the Category to display on the chip\n        for( var i = 0; i < appliedFilters.length; i++ ) {\n            for( var j = 0; j < searchObject.categories.length; j++ ) {\n                switch ( searchObject.categories[ j ].type ) {\n                    case 'StringFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'StringFilter' );\n                        break;\n                    case 'NumericFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'NumericFilter' );\n                        break;\n                    case 'DateFilter':\n                        parentChip = getDateFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], searchObject.appliedFilters );\n                        break;\n                    case 'RadioFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'RadioFilter' );\n                        break;\n                    case 'ObjectFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'ObjectFilter' );\n                        break;\n                }\n                //Check if parentChip is populated and add to chips\n                if( parentChip ) {\n                    chips.push( parentChip );\n                    parentChip = undefined;\n                }\n            }\n        }\n    } else if( appliedFiltersExist && specialCategoriesExist && !isFacetSearch ) {\n        appliedFilters = removeDuplicateDateFilters( searchObject.appliedFilters );\n        //Get the display value of the Category to display on the chip\n        for( var i = 0; i < appliedFilters.length; i++ ) {\n            for( var j = 0; j < searchObject.categoriesForRangeSearches.length; j++ ) {\n                switch ( searchObject.categoriesForRangeSearches[ j ].type ) {\n                    case 'StringFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'StringFilter' );\n                        break;\n                    case 'NumericFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'NumericFilter' );\n                        break;\n                    case 'DateFilter':\n                        parentChip = getDateFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], searchObject.appliedFilters );\n                        break;\n                    case 'RadioFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'RadioFilter' );\n                        break;\n                    case 'ObjectFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'ObjectFilter' );\n                        break;\n                }\n                //Check if parentChip is populated and add to chips\n                if( parentChip ) {\n                    chips.push( parentChip );\n                    parentChip = undefined;\n                }\n            }\n        }\n    } else if( isFacetSearch ) {\n        return existingBreadcrumbChips;\n    }\n    return chips;\n};\n\n/**\n * Remove selected chip from current list of displayed or overflow chips\n * @param {*} searchObject searchObject\n * @param {*} chipToRemove selected chip to remove\n * @param {*} data data\n * @param {*} chiplistRef displayed chip ref\n * @returns display and overflow chips for rerender\n */\nexport let removeSelectedChip = function( searchObject, chipToRemove, data, chiplistRef ) {\n    let displayChips = _.cloneDeep( data.displayBreadcrumbChips );\n    let overflownChips = [];\n\n    switch ( chipToRemove.chipFilterType ) {\n        case 'StringFilter':\n        case 'NumericFilter':\n            removeChip( searchObject, chipToRemove );\n            break;\n        case 'DateFilter':\n            removeDateChip( searchObject, chipToRemove );\n            break;\n        case 'RadioFilter':\n            removeRadioChip( searchObject, chipToRemove );\n            break;\n        case 'ObjectFilter':\n            removeObjectChip( searchObject, chipToRemove );\n            break;\n    }\n\n    for ( let i = 0; displayChips.length > i; i++ ) {\n        if ( displayChips[i].labelDisplayName === chipToRemove.labelDisplayName ) {\n            displayChips.splice( i, 1 );\n        }\n    }\n\n    return { displayChips, overflownChips };\n};\n\n/**\n * Creates the chip that will be added to the master chip list\n * @function createChip\n * @param {Object} parent If chip is a parent chip\n * @param {Object} numberOfChips if parent chip how many children chips exist\n * @param {Object} categoryName name of category\n * @param {Object} filterDisplayName display name of filter\n * @param {Object} internalCategoryName intenal category name\n * @param {Object} internalFilterName intenal filter name\n * @param {Object} filterType type of filter\n * @param {Object} childrenChips if parent this is children chips to display in group\n * @param {Object} defaultSelection default selection, this selection will not display remove button\n * @returns {Object} breadcrumbChip\n */\nfunction createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection ) {\n    let displayLabel;\n\n    if ( numberOfChips > 1 && parent ) {\n        displayLabel = categoryName + ': ' + numberOfChips + ' Selected';\n        internalFilterName = 'parentChip';\n    } else {\n        displayLabel = categoryName + ': ' + filterDisplayName;\n    }\n\n    let breadcrumbChip = {\n        uiIconId: 'miscRemoveBreadcrumb',\n        chipType: 'BUTTON',\n        selected: false,\n        labelDisplayName: displayLabel,\n        labelInternalCategoryName: internalCategoryName,\n        labelInternalFilterName: internalFilterName,\n        chipFilterType: filterType,\n        className: 'aw-search-breadcrumb-chip'\n    };\n\n    if ( filterType === 'RadioFilter' && defaultSelection ) {\n        breadcrumbChip.uiIconId = '';\n    }\n\n    if ( childrenChips && childrenChips.length > 1 ) {\n        breadcrumbChip.children = childrenChips;\n    }\n\n    return breadcrumbChip;\n}\n\n/**\n * Returns active filters after removing repetitive date filters ie. year_week filters\n * @function removeDuplicateDateFilters\n * @param {Object} activeFilters current active filter\n * @returns {Object} editedActiveFilters\n */\nfunction removeDuplicateDateFilters( appliedFilters ) {\n    var editedAppliedFilters = [];\n    var dateExists = false;\n    for( let i = 0; i < appliedFilters.length; i++ ) {\n        //Handles checkbox date filters selected\n        if( appliedFilters[ i ].name.includes( '_0Z0_' ) ) {\n            if( appliedFilters[ i ].name.includes( '_month' ) || appliedFilters[ i ].name.includes( '_week' ) ) {\n                appliedFilters.slice( i, 1 );\n            } else {\n                editedAppliedFilters.push( appliedFilters[ i ] );\n            }\n        }\n        //Handle the Date Range Filter being set\n        else if( appliedFilters[ i ].type === 'DateFilter' ) {\n            for( let j = 0; j < appliedFilters.length; j++ ) {\n                if( appliedFilters[ i ].name === appliedFilters[ j ].name.substr( 0, appliedFilters[ j ].name.indexOf( '_0Z0' ) ) ) {\n                    dateExists = true;\n                }\n            }\n            if( dateExists ) {\n                appliedFilters.slice( i, 1 );\n                dateExists = false;\n            } else {\n                editedAppliedFilters.push( appliedFilters[ i ] );\n                dateExists = false;\n            }\n        } else {\n            editedAppliedFilters.push( appliedFilters[ i ] );\n        }\n    }\n    return editedAppliedFilters;\n}\n\n/**\n * Returns a parent chip to build chips for addition to the display chips array\n * @function getFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\nfunction getFilterParentChip( category, activeFilter, filterType ) {\n    var childrenChips = [];\n    var defaultSelection = false;\n    var parent;\n    if( category.internalName === activeFilter.name ) {\n        //Create initial chip. If multiple of same category exist create child chip\n        for( var k = 0; k < activeFilter.values.length; k++ ) {\n            var categoryName = category.displayName;\n            var numberOfChips = activeFilter.values.length;\n            var internalCategoryName = activeFilter.name;\n            var internalFilterName = activeFilter.values[ k ];\n            var filterDisplayName = category.filterValues && category.filterValues.length > 0 ? category.filterValues[ 0 ].name : undefined;\n            if( activeFilter.values[ k ].includes( '_NumericRange_' ) ) {\n                parent = false;\n                filterDisplayName = getNumericString( activeFilter.values[ k ] );\n            }\n            if( category.type === 'RadioFilter' ) {\n                if( activeFilter.values[ 0 ] === category.filterValues[ 0 ].internalName ) {\n                    defaultSelection = true;\n                }\n            }\n            if( numberOfChips > 1 ) {\n                if( category.type === 'StringFilter' || category.type === 'ObjectFilter' ) {\n                    for( var l = 0; l < category.filterValues.length; l++ ) {\n                        if( category.filterValues[ l ].internalName === internalFilterName ) {\n                            parent = false;\n                            filterDisplayName = category.filterValues[ l ].name;\n                            let chipChild = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false );\n                            childrenChips.push( chipChild );\n                        }\n                    }\n                } else if( category.type === 'NumericFilter' ) {\n                    parent = false;\n                    filterDisplayName = activeFilter.values[ k ].replace( '_NumericFilter_', '' );\n                    if( activeFilter.values[ k ].includes( '_NumericRange_' ) ) {\n                        parent = false;\n                        filterDisplayName = getNumericString( activeFilter.values[ k ] );\n                    }\n                    let chipChild = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false );\n                    childrenChips.push( chipChild );\n                }\n            }\n        }\n        parent = true;\n        return createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection );\n    }\n}\n\n/**\n * Returns a date parent chip to build chips for addition to the display chips array\n * @function getDateFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\nfunction getDateFilterParentChip( category, currentActiveFilter, activeFilter ) {\n    var childrenChips = [];\n    var parent;\n    var filterDisplayName;\n    if( category.filterValues.length > 0 ) {\n        for( var datechipfilter = 0; datechipfilter < category.filterValues.length; datechipfilter++ ) {\n            if( category.filterValues[ datechipfilter ].categoryName === currentActiveFilter.name || category.internalName === currentActiveFilter.name ) {\n                //Get Category Name and Internal Category value\n                var categoryName = category.displayName;\n\n                //Get Group of DateFilter Chips\n                var dateFilterArray = getDateFilterChipArray( activeFilter, category );\n                let numberOfChips = dateFilterArray.length;\n                var internalFilterName = dateFilterArray[ 0 ].values[ 0 ];\n                var internalCategoryName = dateFilterArray[ 0 ].name;\n\n                //Get filter display name. If Filter Range get the proper Filter display name then\n                filterDisplayName = dateFilterArray[ 0 ].values[ 0 ] === '\"$NONE\"' ? dateFilterArray[ 0 ].values[ 0 ] : category.filterValues[ 0 ].name;\n                if( dateFilterArray[ 0 ].values[ 0 ].length > 13 && dateFilterArray[ 0 ].values[ 0 ].substr( 0, 12 ) === '_DateFilter_' ) {\n                    let filterDisplayArray = getDateString( dateFilterArray[ 0 ].values[ 0 ] );\n                    filterDisplayName = filterDisplayArray.displayName;\n                }\n\n                //Incase of child chips get children chips\n                if( numberOfChips > 1 ) {\n                    for( var k = 0; k < dateFilterArray.length; k++ ) {\n                        parent = false;\n                        internalCategoryName = dateFilterArray[ k ].name;\n                        internalFilterName = dateFilterArray[ k ].values[ 0 ];\n                        if( dateFilterArray[ k ].values[ 0 ].length > 13 && dateFilterArray[ k ].values[ 0 ].substr( 0, 12 ) === '_DateFilter_' ) {\n                            let filterDisplayArray = getDateString( dateFilterArray[ k ].values[ 0 ] );\n                            filterDisplayName = filterDisplayArray.displayName;\n                        } else {\n                            for( var l = 0; l < category.filterValues.length; l++ ) {\n                                if( category.filterValues[ l ].internalName === dateFilterArray[ k ].values[ 0 ] ) {\n                                    filterDisplayName = category.filterValues[ l ].name;\n                                }\n                            }\n                        }\n                        let chipChild = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', null, false );\n                        childrenChips.push( chipChild );\n                    }\n                }\n                parent = true;\n                var parentChip = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', childrenChips, false );\n                break;\n            }\n        }\n    } else if( category.filterValues && category.filterValues.length === 0\n        && category.internalName === currentActiveFilter.name && category.dateRangeString && category.dateRangeString.length > 0 ) {\n        filterDisplayName = getDateString( category.dateRangeString ).displayName;\n        parentChip = createChip( parent, 1, category.displayName, filterDisplayName, category.internalName, category.dateRangeString, 'DateFilter', [], false );\n    }\n    return parentChip;\n}\n\n/**\n * Returns dateRange in proper format for date chip display\n * @function getDateString\n * @param {Object} dateString filter string date value\n * @returns {Object} dateRange\n */\nfunction getDateString( dateString ) {\n    if( dateString.length > 19 ) {\n        var offsetString = dateString.substring( 12 );\n        if( offsetString.length > 4 ) {\n            var startDate = offsetString.substr( 0, offsetString.indexOf( '_TO_' ) );\n            var endDate = offsetString.substr( offsetString.indexOf( '_TO_' ) + 4, offsetString.length );\n        }\n\n        if( startDate === '*' ) {\n            startDate = '0001-01-01T00:00:00+00:00';\n        }\n\n        startDate = filterPanelUtils.getDate( searchFilterService.processDateStringOffset( startDate ) );\n        endDate = filterPanelUtils.getDate( searchFilterService.processDateStringOffset( endDate ) );\n\n        var dateRange = filterPanelUtils.getDateRangeDisplayString( startDate, endDate );\n    }\n    return dateRange;\n}\n\n/**\n * Returns group of date filters in array\n * @function getDateFilterChipArray\n * @param {Object} activeFilterArray all current active filters\n * @param {Object} filterCategory current filter category\n * @returns {Object} dateFilterArray\n */\nfunction getDateFilterChipArray( activeFilterArray, filterCategory ) {\n    var dateFilterArray = [];\n    for( var i = 0; i < activeFilterArray.length; i++ ) {\n        if( activeFilterArray[ i ].name === filterCategory.internalName ) {\n            dateFilterArray.push( activeFilterArray[ i ] );\n        } else {\n            let shortFilterIntenal = activeFilterArray[ i ].name.substr( 0, activeFilterArray[ i ].name.indexOf( '_0Z0' ) );\n            if( shortFilterIntenal === filterCategory.internalName ) {\n                dateFilterArray.push( activeFilterArray[ i ] );\n            }\n        }\n    }\n\n    return dateFilterArray;\n}\n\n/**\n * Returns filterDisplayName in proper format for numeric chip display\n * @function getNumericString\n * @param {Object} numericString from the getCategoryValues\n * @returns {Object} filterDisplayName\n */\nfunction getNumericString( numericString ) {\n    if( numericString.length > 4 ) {\n        let value = numericString.replace( '_NumericRange_', '' );\n        let startValue = value.substr( 0, value.indexOf( '_TO_' ) );\n        let endValue = value.substr( value.indexOf( '_TO_' ) + 4, value.length );\n        if( !startValue ) {\n            var filterDisplayName = 'To ' + endValue;\n        } else if( !endValue ) {\n            var filterDisplayName = 'From ' + startValue;\n        } else {\n            var filterDisplayName = startValue + ' - ' + endValue;\n        }\n    }\n    return filterDisplayName;\n}\n\n/**\n * Updates search object with removed radio filter\n * @function removeRadioChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeRadioChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n\n    for ( var i = 0; i < newSearchObject.categories.length; i++ ) {\n        if ( chipToRemove.labelInternalCategoryName === newSearchObject.categories[i].internalName ) {\n            if ( chipToRemove.labelInternalFilterName === newSearchObject.categories[i].filterValues[ 0 ].internalName ) {\n                newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] = [ newSearchObject.categories[ i ].filterValues[ 1 ].internalName ];\n            } else {\n                newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] = [ newSearchObject.categories[ i ].filterValues[ 0 ].internalName ];\n            }\n        }\n    }\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\n/**\n * Updates search object with removed object filter\n * @function removeObjectChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeObjectChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n    let updatedFilters = searchFilterService.removeDependentClassificationFilters( { internalName: chipToRemove.labelInternalFilterName } );\n    if( updatedFilters.length > 0 ) {\n        newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] = updatedFilters;\n    } else {\n        delete newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName  ];\n    }\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\n/**\n * Updates search object with after removing single string filter\n * @function removeSingleStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeSingleChip( newSearchObject, chipToRemove ) {\n    let filtersForCategory = newSearchObject.activeFilters && newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ]\n        ? newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] : [];\n    let updatedFilters = [];\n    for( let index = 0; index < filtersForCategory.length; index++ ) {\n        if( filtersForCategory[ index ] !== chipToRemove.labelInternalFilterName ) {\n            updatedFilters.push( filtersForCategory[ index ] );\n        }\n    }\n    if( updatedFilters.length > 0 ) {\n        newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName  ] = updatedFilters;\n    } else {\n        delete newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ];\n    }\n    if ( newSearchObject.activeFilters && Object.keys( newSearchObject.activeFilters ).length > 0 ) {\n        newSearchObject.activeFilterString = searchFilterService.buildFilterString( newSearchObject.activeFilters );\n    } else {\n        newSearchObject.activeFilterString = '';\n    }\n}\n\n/**\n * Updates search object after removing multiple string filters from the same category\n * @function removeStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove chip which is to be removed\n */\nfunction removeMultipleChip( newSearchObject, chipToRemove ) {\n    let children = chipToRemove.children;\n    for( let index = 0; index < children.length; index++ ) {\n        removeSingleChip( newSearchObject, children[ index ] );\n    }\n}\n\n\n/**\n * Updates search object after removing string chip\n * @function removeStringChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n\n    if( chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children ) {\n        removeSingleChip( newSearchObject, chipToRemove );\n    } else {\n        removeMultipleChip( newSearchObject, chipToRemove );\n    }\n\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\n/**\n * Updates search object with removed date filter\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeDateChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n    if( chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children ) {\n        removeSingleChip( newSearchObject, chipToRemove );\n    } else {\n        removeMultipleChip( newSearchObject, chipToRemove );\n    }\n    newSearchObject.activeFilters = searchFilterService.removeDependentDateFilters( newSearchObject.activeFilters );\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\nexport let checkSearchLocation = ( searchObject ) => {\n    //Check if in Panel or Global Search Area\n    if ( searchObject && searchObject.criteria && searchObject.criteria.searchFromLocation ) {\n        let currentLocation = _.cloneDeep( searchObject.criteria.searchFromLocation );\n        if ( currentLocation === 'global' ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * ClearAll action removes all selected chips in the breadcrumb location\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n */\nexport let clearAll = ( searchObject ) => {\n    const newSearchObject = { ...searchObject.value };\n    const categories = searchFilterService.clearAllSelectedFiltersAndRanges( newSearchObject.categories, newSearchObject.activeFilters, newSearchObject.positivePendingFilters );\n    newSearchObject.categories = categories;\n    if( newSearchObject.skipFiltersForClearAll && newSearchObject.activeFilters\n        && newSearchObject.activeFilterMap && Object.keys( newSearchObject.activeFilters ).length > 0 ) {\n        for( const[ key, value ] of Object.entries( newSearchObject.activeFilters ) ) {\n            if( !newSearchObject.skipFiltersForClearAll.includes( key ) ) {\n                delete newSearchObject.activeFilters[ key ];\n                delete newSearchObject.activeFilterMap[ key ];\n            }\n        }\n    } else {\n        newSearchObject.activeFilterMap = {};\n        newSearchObject.activeFilters = {};\n    }\n    delete newSearchObject.positivePendingFilters;\n    delete newSearchObject.negativePendingFilters;\n    delete newSearchObject.allCategoriesVisible;\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n};\n\nexport let calculateOverflow = ( elementRefList, totalVisibleArea, totalVisibleHeight, breadcrumbChips, currentOverflowChips,\n    displayBreadcrumbChips, inHeader, searchFilterCategoryExpandMore, visibleChipAreaMaintained ) => {\n    var tabElems;\n    var displayChips = [];\n    var overflownChips = [];\n    var breakIndex = null;\n    var filledHeader = true;\n\n    if ( elementRefList ) {\n        let chiplist = elementRefList.get( 'chiplist' ).current;\n\n        if( !chiplist ) {\n            return breakIndex;\n        }\n\n        if( !tabElems ) {\n            tabElems = chiplist.querySelectorAll( '.aw-widgets-chip' );\n        }\n\n        let arr = [ ...tabElems ];\n        var tabPadding = 16;\n        let searchCountAreaSpacing = 0;\n        if ( chiplist.parentNode.parentElement && chiplist.parentNode.parentElement.firstChild\n        && chiplist.parentNode.parentElement.firstChild.childNodes\n        && chiplist.parentNode.parentElement.firstChild.childNodes.length > 0\n        && chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth ) {\n            searchCountAreaSpacing = chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth;\n        }\n        let cmdMoreButtonSpacing = 80;\n        let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientWidth + 24 : 24;\n        if ( !totalVisibleArea || !visibleChipAreaMaintained ) {\n            totalVisibleArea = chiplist.parentElement.parentElement ? chiplist.parentElement.parentElement.clientWidth : 0;\n        }\n\n        var totalCalculatedArea = tabPadding + searchCountAreaSpacing + cmdMoreButtonSpacing + clearButtonSpacing;\n\n        //Determine where overflow takes place. If overflow is already hit then this keeps breakIndex as undefined\n        for( var i = 0; i < arr.length; i++ ) {\n            totalCalculatedArea = arr[i].clientWidth + totalCalculatedArea;\n            if( totalCalculatedArea > totalVisibleArea ) {\n                breakIndex = i;\n                break;\n            }\n        }\n\n        if ( !inHeader ) {\n            if ( !totalVisibleHeight || !visibleChipAreaMaintained ) {\n                totalVisibleHeight =  chiplist.parentElement.parentElement.clientHeight / 2;\n            }\n            let chipElementHeight = chiplist.parentElement.clientHeight;\n            let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientHeight : 0;\n            cmdMoreButtonSpacing = 32;\n            tabPadding = 32;\n            totalCalculatedArea = tabPadding + clearButtonSpacing + cmdMoreButtonSpacing + chipElementHeight;\n\n            if ( totalCalculatedArea > totalVisibleHeight ) {\n                for( i = 0; i < arr.length; i++ ) {\n                    totalCalculatedArea -= 26;\n                    if( totalCalculatedArea < totalVisibleHeight ) {\n                        breakIndex = arr.length - i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        //Check if header is completely filled. Used when going from a smaller window size to larger window size\n        //diffChipArea helps with accounting for scenarios where there is only a small space difference in calculated and actual size\n        let diffChipArea = totalVisibleArea - totalCalculatedArea - 200;\n        if ( totalCalculatedArea < totalVisibleArea - 200 && diffChipArea > tabPadding ) {\n            filledHeader = false;\n        }\n\n        if ( breakIndex === 0 && inHeader ) {\n            displayChips = [];\n            overflownChips = breadcrumbChips;\n        } else if ( breakIndex > 0 ) {\n            overflownChips = breadcrumbChips.slice( breakIndex );\n            displayChips = breadcrumbChips.slice( 0, breakIndex );\n        } else if ( breadcrumbChips.length >= 7 ) {\n            overflownChips = breadcrumbChips.slice( 1 );\n            displayChips = breadcrumbChips.slice( 0, 1 );\n        } else if ( currentOverflowChips.length > 0 && arr.length < breadcrumbChips.length && filledHeader ) {\n            overflownChips = breadcrumbChips.slice( arr.length );\n            displayChips = breadcrumbChips.slice( 0, arr.length );\n        } else {\n            displayChips = breadcrumbChips;\n            overflownChips = [];\n        }\n    } else if ( currentOverflowChips.length !== 0 && displayBreadcrumbChips.length !== 0 )  {\n        overflownChips = currentOverflowChips;\n        displayChips = displayBreadcrumbChips;\n    } else {\n        overflownChips = [];\n        displayChips = breadcrumbChips;\n    }\n    let displayOverflowButton = overflownChips.length + ' ' + searchFilterCategoryExpandMore;\n\n    return  { displayChips, overflownChips, displayOverflowButton, totalVisibleArea, totalVisibleHeight };\n};\n\nexport default {\n    buildSearchChips,\n    removeSelectedChip,\n    checkSearchLocation,\n    clearAll,\n    calculateOverflow\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwSidenavHelperService\n */\nimport $ from 'jquery';\nimport appCtx from 'js/appCtxService';\nimport localStorage from 'js/localStorage';\nimport commandHandlerSvc from 'js/commandHandlerService';\nimport browserUtils from 'js/browserUtils';\nimport AwPromiseService from 'js/awPromiseService';\nlet exports = {};\nvar localStorageTopicId = 'wysiwygChannel'; // Scope being used by the \"background\" command for the current panel\n\nvar commandScope = {};\nvar command = {}; //Register activeToolsAndInfoCommand and activeNavigationCommand for backward compatibility\n//to support existing consumers in AW\n// Save the two location contexts here\n\nvar currentLocationCtx = null;\nvar otherLocationCtx = null;\nexport let setLocationCtx = id => {\n  if (id === 'aw_navigation') {\n    currentLocationCtx = 'activeNavigationCommand';\n  } else if (id === 'aw_toolsAndInfo') {\n    currentLocationCtx = 'activeToolsAndInfoCommand';\n  }\n\n  if (id === 'aw_navigation') {\n    otherLocationCtx = 'activeToolsAndInfoCommand';\n  } else if (id === 'aw_toolsAndInfo') {\n    otherLocationCtx = 'activeNavigationCommand';\n  }\n};\n\nvar handleCommand = function (vmProps, eventData) {\n  if (eventData.command) {\n    // If a panel in the other area is open, remove it's ctx value\n    if (otherLocationCtx) {\n      if (appCtx.getCtx(otherLocationCtx)) {\n        appCtx.unRegisterCtx(otherLocationCtx);\n      }\n    }\n\n    if (currentLocationCtx) {\n      //Register current location ctx\n      appCtx.registerCtx(currentLocationCtx, eventData.command);\n    } //revisitMe: Jignesh: Let's keep this code commented for now.\n    //Will reevaluate if this is required after the new commands architecture\n    // if( eventData.command.closeWhenCommandHidden ) {\n    //     // Start evaluating the currently opened command in the background\n    //     // When the command is hidden or disabled the panel will close even if command is not active anywhere else on page\n    //     commandScope[ vmProps.id ] = {};\n    //     commandScope[ vmProps.id ].ctx = undefined;\n    //     // Note: Command context cannot be handled generically as putting it somewhere this directive can reach it will result in a memory leak\n    //     // Any command that opens a panel and needs command context must set \"closeWhenCommandHidden\" to true in command panel service action\n    //     // and update their panel to know when to close\n    //     commandScope[ vmProps.id ].commandContext = null;\n    //     commandService.getCommand( eventData.commandId, commandScope[ vmProps.id ] );\n    // }\n    //Set the panel context\n\n\n    commandHandlerSvc.setupDeclarativeView(eventData.command).then(function () {\n      command[vmProps.id] = eventData.command;\n    });\n  }\n};\n/**\n * Close the currently opened command panel.\n *\n * @return {Promise} Promise resolved when panel has been closed\n */\n\n\nvar removeCommandScope = vmProps => {\n  if (command[vmProps.id]) {\n    return commandHandlerSvc.getPanelLifeCycleClose(command[vmProps.id]).then(() => {\n      if (commandScope[vmProps.id]) {\n        commandScope[vmProps.id] = null;\n      }\n\n      command[vmProps.id] = null;\n    });\n  }\n\n  return AwPromiseService.instance.resolve();\n};\n\nvar toggleParentClass = function (isAdd, vmProps) {\n  //The left-side-nav-pushed class is required in sidenav to remove the white dot on the left corner of sidenav\n  //When this class is present, we remove the border-radius on top left corner of sidenav\n  if (vmProps.isLeftToRight && vmProps.slide === 'PUSH') {\n    if (isAdd) {\n      $('.aw-layout-mainView').addClass('left-sidenav-pushed');\n    } else {\n      $('.aw-layout-mainView').removeClass('left-sidenav-pushed');\n    }\n  }\n};\n\nvar setSlideForPinnablePanel = function (sidenavOpened, vmProps) {\n  if (sidenavOpened) {\n    //Only required for primary navigation panel that can be pinned\n    vmProps.slide = vmProps.pinned ? 'PUSH' : 'FLOAT';\n\n    if (vmProps.pinned) {\n      $('.aw-layout-mainView').addClass('aw-global-navigationPanelPinned');\n    } //revisitMe: Jignesh - test Safari\n\n\n    if (browserUtils.isSafari) {\n      reCalculateCss();\n    }\n  } else {\n    //Need to make the slide revert to its initial state\n    vmProps.slide = 'FLOAT';\n\n    if (vmProps.pinned) {\n      $('.aw-layout-mainView').removeClass('aw-global-navigationPanelPinned');\n    }\n  }\n}; // Need this specifically for Safari browser. As safari does not repaint css properly.\n\n\nvar reCalculateCss = function () {\n  var sidenavContainer = $('.aw-sidenav-layoutContainer');\n  sidenavContainer.css('display', 'none');\n  sidenavContainer.outerHeight();\n  sidenavContainer.css('display', 'flex');\n};\n\nlet doesSideNavRemainOpen = function (eventData, vmProps) {\n  return vmProps.currentCommandId !== eventData.commandId ? true : !vmProps.sidenavOpened;\n};\n/**\n * @param {*} status\n * @param {*} vmProps\n * do not update the prop.sidenavOpened by your own some where else in the code.\n * Use proper API's to update state of a component.\n */\n\n\nexport let updateSideNavStatus = (status, vmProps) => {\n  vmProps.sidenavOpened = status;\n};\n/**\n * @param {*} slide\n * @param {*} vmProps\n */\n\nexport let updateSideNavSlide = (slide, vmProps) => {\n  vmProps.slide = slide;\n};\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\n\nexport let updateView = (viewName, vmProps) => {\n  vmProps.view = vmProps.sidenavOpened ? viewName : null;\n};\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\n\nexport let updatePinUnpinEnabled = (vmProps, eventData) => {\n  vmProps.isPinUnpinEnabled = eventData && eventData.config ? eventData.config.isPinUnpinEnabled : false;\n  vmProps.panelPinned = eventData && eventData.config ? eventData.config.panelPinned : false;\n};\n/**\n *\n * @param {*} commandId\n * @param {*} vmProps\n */\n\nlet updateCommandId = (commandId, vmProps) => {\n  vmProps.currentCommandId = commandId;\n};\n\nlet toggleSidenav = function (shallRemainOpen, vmProps, eventData) {\n  if (vmProps.isPinnable) {\n    setSlideForPinnablePanel(shallRemainOpen, vmProps);\n  }\n\n  if (eventData.commandId) {\n    if (shallRemainOpen) {\n      appCtx.registerCtx('sidenavCommandId', eventData.commandId); // revisitme - hack for 20200919 demo\n      // appCtx.ctx.sidenavCommandId = eventData.commandId;\n    } else {\n      appCtx.unRegisterCtx('sidenavCommandId'); // revisitme - hack for 20200919 demo\n      // appCtx.ctx.sidenavCommandId = undefined;\n    }\n  }\n\n  toggleParentClass(shallRemainOpen, vmProps);\n};\n\nvar updateGlobalSidenavContext = function (vmProps) {\n  appCtx.updatePartialCtx('awSidenavConfig.globalSidenavContext.' + vmProps.id, {\n    open: vmProps.sidenavOpened,\n    pinned: vmProps.pinned,\n    slide: vmProps.slide\n  }); // revisitme - hack for 20200919 demo\n  // appCtx.ctx[ 'awSidenavConfig.globalSidenavContext.' + vmProps.id ] = {\n  //     open: vmProps.sidenavOpened,\n  //     pinned: vmProps.pinned,\n  //     slide: vmProps.slide\n  // };\n};\n\nexport let closeSidenav = (vmProps, eventData) => {\n  return removeCommandScope(vmProps).then(() => {\n    if (!(vmProps.isPinnable && vmProps.pinned)) {\n      updateSideNavStatus(false, vmProps);\n      updateView(null, vmProps);\n    }\n\n    if (!eventData.commandId) {\n      if (appCtx.getCtx('sidenavCommandId')) {\n        appCtx.unRegisterCtx('sidenavCommandId'); // revisitme - hack for 20200919 demo\n        // appCtx.ctx.sidenavCommandId = undefined;\n      }\n    }\n\n    updateGlobalSidenavContext(vmProps);\n  });\n};\nexport let togglePinState = function (prop) {\n  prop.pinned = !prop.pinned;\n  $('.aw-layout-mainView').toggleClass('aw-global-navigationPanelPinned');\n  prop.slide = prop.pinned ? 'PUSH' : 'FLOAT'; // This is specific to Safari browser. As safari browser does not repaint css properly.\n  // Here is stack overflow link which I referred - https://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes\n\n  if (browserUtils.isSafari) {\n    reCalculateCss();\n  }\n\n  updateGlobalSidenavContext(prop);\n};\nexport let togglePinUnpinPanelState = function (prop) {\n  prop.panelPinned = !prop.panelPinned;\n};\nexport let createSidenav = (config, eventData) => {\n  let vmProps = { ...config\n  };\n  let shallRemainOpen = doesSideNavRemainOpen(eventData, vmProps);\n  return removeCommandScope(vmProps).then(() => {\n    toggleSidenav(shallRemainOpen, vmProps, eventData);\n\n    if (eventData.commandId) {\n      if (shallRemainOpen) {\n        handleCommand(vmProps, eventData); // Export env for wysiwyg\n\n        if (localStorage.get(localStorageTopicId)) {\n          localStorage.removeItem(localStorageTopicId);\n        }\n\n        localStorage.publish(localStorageTopicId, eventData.commandId);\n      } else {\n        if (currentLocationCtx) {\n          appCtx.unRegisterCtx(currentLocationCtx);\n        }\n      }\n    }\n\n    updateSideNavStatus(shallRemainOpen, vmProps);\n    updateView(eventData.includeView, vmProps);\n    updatePinUnpinEnabled(vmProps, eventData);\n    updateGlobalSidenavContext(vmProps);\n    updateCommandId(eventData.commandId, vmProps);\n\n    if (eventData.config && eventData.config.slide) {\n      updateSideNavSlide(eventData.config.slide, vmProps);\n    }\n\n    return vmProps;\n  });\n};\nexports = {\n  setLocationCtx,\n  createSidenav,\n  closeSidenav,\n  togglePinState,\n  togglePinUnpinPanelState\n};\nexport default exports;","map":{"version":3,"names":["$","appCtx","localStorage","commandHandlerSvc","browserUtils","AwPromiseService","exports","localStorageTopicId","commandScope","command","currentLocationCtx","otherLocationCtx","setLocationCtx","id","handleCommand","vmProps","eventData","getCtx","unRegisterCtx","registerCtx","setupDeclarativeView","then","removeCommandScope","getPanelLifeCycleClose","instance","resolve","toggleParentClass","isAdd","isLeftToRight","slide","addClass","removeClass","setSlideForPinnablePanel","sidenavOpened","pinned","isSafari","reCalculateCss","sidenavContainer","css","outerHeight","doesSideNavRemainOpen","currentCommandId","commandId","updateSideNavStatus","status","updateSideNavSlide","updateView","viewName","view","updatePinUnpinEnabled","isPinUnpinEnabled","config","panelPinned","updateCommandId","toggleSidenav","shallRemainOpen","isPinnable","updateGlobalSidenavContext","updatePartialCtx","open","closeSidenav","togglePinState","prop","toggleClass","togglePinUnpinPanelState","createSidenav","get","removeItem","publish","includeView"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwSidenavHelperService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/AwSidenavHelperService\n */\nimport $ from 'jquery';\nimport appCtx from 'js/appCtxService';\n\nimport localStorage from 'js/localStorage';\nimport commandHandlerSvc from 'js/commandHandlerService';\nimport browserUtils from 'js/browserUtils';\nimport AwPromiseService from 'js/awPromiseService';\n\nlet exports = {};\n\nvar localStorageTopicId = 'wysiwygChannel';\n// Scope being used by the \"background\" command for the current panel\nvar commandScope = {};\nvar command = {};\n\n//Register activeToolsAndInfoCommand and activeNavigationCommand for backward compatibility\n//to support existing consumers in AW\n// Save the two location contexts here\nvar currentLocationCtx = null;\nvar otherLocationCtx = null;\n\nexport let setLocationCtx = ( id ) => {\n    if( id === 'aw_navigation' ) {\n        currentLocationCtx = 'activeNavigationCommand';\n    } else if( id === 'aw_toolsAndInfo' ) {\n        currentLocationCtx = 'activeToolsAndInfoCommand';\n    }\n    if( id === 'aw_navigation' ) {\n        otherLocationCtx = 'activeToolsAndInfoCommand';\n    } else if( id === 'aw_toolsAndInfo' ) {\n        otherLocationCtx = 'activeNavigationCommand';\n    }\n};\n\nvar handleCommand = function( vmProps, eventData ) {\n    if( eventData.command ) {\n        // If a panel in the other area is open, remove it's ctx value\n        if( otherLocationCtx ) {\n            if( appCtx.getCtx( otherLocationCtx ) ) {\n                appCtx.unRegisterCtx( otherLocationCtx );\n            }\n        }\n\n        if( currentLocationCtx ) {\n            //Register current location ctx\n            appCtx.registerCtx( currentLocationCtx, eventData.command );\n        }\n\n        //revisitMe: Jignesh: Let's keep this code commented for now.\n        //Will reevaluate if this is required after the new commands architecture\n        // if( eventData.command.closeWhenCommandHidden ) {\n        //     // Start evaluating the currently opened command in the background\n        //     // When the command is hidden or disabled the panel will close even if command is not active anywhere else on page\n        //     commandScope[ vmProps.id ] = {};\n        //     commandScope[ vmProps.id ].ctx = undefined;\n\n        //     // Note: Command context cannot be handled generically as putting it somewhere this directive can reach it will result in a memory leak\n        //     // Any command that opens a panel and needs command context must set \"closeWhenCommandHidden\" to true in command panel service action\n        //     // and update their panel to know when to close\n        //     commandScope[ vmProps.id ].commandContext = null;\n        //     commandService.getCommand( eventData.commandId, commandScope[ vmProps.id ] );\n        // }\n\n        //Set the panel context\n        commandHandlerSvc.setupDeclarativeView( eventData.command ).then( function() {\n            command[ vmProps.id ] = eventData.command;\n        } );\n    }\n};\n\n/**\n * Close the currently opened command panel.\n *\n * @return {Promise} Promise resolved when panel has been closed\n */\nvar removeCommandScope = ( vmProps ) => {\n    if( command[ vmProps.id ] ) {\n        return commandHandlerSvc.getPanelLifeCycleClose( command[ vmProps.id ] ).then( () => {\n            if( commandScope[ vmProps.id ] ) {\n                commandScope[ vmProps.id ] = null;\n            }\n            command[ vmProps.id ] = null;\n        } );\n    }\n    return AwPromiseService.instance.resolve();\n};\n\nvar toggleParentClass = function( isAdd, vmProps ) {\n    //The left-side-nav-pushed class is required in sidenav to remove the white dot on the left corner of sidenav\n    //When this class is present, we remove the border-radius on top left corner of sidenav\n    if( vmProps.isLeftToRight && vmProps.slide === 'PUSH' ) {\n        if( isAdd ) {\n            $( '.aw-layout-mainView' ).addClass( 'left-sidenav-pushed' );\n        } else {\n            $( '.aw-layout-mainView' ).removeClass( 'left-sidenav-pushed' );\n        }\n    }\n};\n\nvar setSlideForPinnablePanel = function( sidenavOpened, vmProps ) {\n    if( sidenavOpened ) {\n        //Only required for primary navigation panel that can be pinned\n        vmProps.slide = vmProps.pinned ? 'PUSH' : 'FLOAT';\n        if( vmProps.pinned ) {\n            $( '.aw-layout-mainView' ).addClass( 'aw-global-navigationPanelPinned' );\n        }\n\n        //revisitMe: Jignesh - test Safari\n        if( browserUtils.isSafari ) {\n            reCalculateCss();\n        }\n    } else {\n        //Need to make the slide revert to its initial state\n        vmProps.slide = 'FLOAT';\n        if( vmProps.pinned ) {\n            $( '.aw-layout-mainView' ).removeClass( 'aw-global-navigationPanelPinned' );\n        }\n    }\n};\n\n// Need this specifically for Safari browser. As safari does not repaint css properly.\nvar reCalculateCss = function() {\n    var sidenavContainer = $( '.aw-sidenav-layoutContainer' );\n    sidenavContainer.css( 'display', 'none' );\n    sidenavContainer.outerHeight();\n    sidenavContainer.css( 'display', 'flex' );\n};\n\nlet doesSideNavRemainOpen = function( eventData, vmProps ) {\n    return vmProps.currentCommandId !== eventData.commandId ? true : !vmProps.sidenavOpened;\n};\n\n/**\n * @param {*} status\n * @param {*} vmProps\n * do not update the prop.sidenavOpened by your own some where else in the code.\n * Use proper API's to update state of a component.\n */\nexport let updateSideNavStatus = ( status, vmProps ) => {\n    vmProps.sidenavOpened = status;\n};\n\n/**\n * @param {*} slide\n * @param {*} vmProps\n */\nexport let updateSideNavSlide = ( slide, vmProps ) => {\n    vmProps.slide = slide;\n};\n\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\nexport let updateView = ( viewName, vmProps ) => {\n    vmProps.view = vmProps.sidenavOpened ? viewName : null;\n};\n\n/**\n *\n * @param {*} viewName\n * @param {*} vmProps\n * do not update the prop.view by your own some where else in the code.\n * Use proper API's to update state of a component.\n *\n * if prop.sidenavOpened is evaluated to true, then only we can update the viewname.\n * if it is evaluated to false then sideNav is being closed, hence view can become null.\n */\nexport let updatePinUnpinEnabled = ( vmProps, eventData ) => {\n    vmProps.isPinUnpinEnabled = eventData && eventData.config ? eventData.config.isPinUnpinEnabled : false;\n    vmProps.panelPinned = eventData && eventData.config ? eventData.config.panelPinned : false;\n};\n\n/**\n *\n * @param {*} commandId\n * @param {*} vmProps\n */\nlet updateCommandId = ( commandId, vmProps ) => {\n    vmProps.currentCommandId = commandId;\n};\n\nlet toggleSidenav = function( shallRemainOpen, vmProps, eventData ) {\n    if( vmProps.isPinnable ) {\n        setSlideForPinnablePanel( shallRemainOpen, vmProps );\n    }\n\n    if( eventData.commandId ) {\n        if( shallRemainOpen ) {\n            appCtx.registerCtx( 'sidenavCommandId', eventData.commandId );\n            // revisitme - hack for 20200919 demo\n            // appCtx.ctx.sidenavCommandId = eventData.commandId;\n        } else {\n            appCtx.unRegisterCtx( 'sidenavCommandId' );\n            // revisitme - hack for 20200919 demo\n            // appCtx.ctx.sidenavCommandId = undefined;\n        }\n    }\n\n    toggleParentClass( shallRemainOpen, vmProps );\n};\n\nvar updateGlobalSidenavContext = function( vmProps ) {\n    appCtx.updatePartialCtx( 'awSidenavConfig.globalSidenavContext.' + vmProps.id, {\n        open: vmProps.sidenavOpened,\n        pinned: vmProps.pinned,\n        slide: vmProps.slide\n    } );\n\n    // revisitme - hack for 20200919 demo\n    // appCtx.ctx[ 'awSidenavConfig.globalSidenavContext.' + vmProps.id ] = {\n    //     open: vmProps.sidenavOpened,\n    //     pinned: vmProps.pinned,\n    //     slide: vmProps.slide\n    // };\n};\n\nexport let closeSidenav = ( vmProps, eventData ) => {\n    return removeCommandScope( vmProps ).then( () => {\n        if( !( vmProps.isPinnable && vmProps.pinned ) ) {\n            updateSideNavStatus( false, vmProps );\n            updateView( null, vmProps );\n        }\n        if( !eventData.commandId ) {\n            if( appCtx.getCtx( 'sidenavCommandId' ) ) {\n                appCtx.unRegisterCtx( 'sidenavCommandId' );\n                // revisitme - hack for 20200919 demo\n                // appCtx.ctx.sidenavCommandId = undefined;\n            }\n        }\n        updateGlobalSidenavContext( vmProps );\n    } );\n};\n\nexport let togglePinState = function( prop ) {\n    prop.pinned = !prop.pinned;\n    $( '.aw-layout-mainView' ).toggleClass( 'aw-global-navigationPanelPinned' );\n    prop.slide = prop.pinned ? 'PUSH' : 'FLOAT';\n    // This is specific to Safari browser. As safari browser does not repaint css properly.\n    // Here is stack overflow link which I referred - https://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes\n    if( browserUtils.isSafari ) {\n        reCalculateCss();\n    }\n    updateGlobalSidenavContext( prop );\n};\n\nexport let togglePinUnpinPanelState = function( prop ) {\n    prop.panelPinned = !prop.panelPinned;\n};\n\nexport let createSidenav = ( config, eventData ) => {\n    let vmProps = { ...config };\n    let shallRemainOpen = doesSideNavRemainOpen( eventData, vmProps );\n    return removeCommandScope( vmProps ).then( () => {\n        toggleSidenav( shallRemainOpen, vmProps, eventData );\n        if( eventData.commandId ) {\n            if( shallRemainOpen ) {\n                handleCommand( vmProps, eventData );\n                // Export env for wysiwyg\n                if( localStorage.get( localStorageTopicId ) ) {\n                    localStorage.removeItem( localStorageTopicId );\n                }\n                localStorage.publish( localStorageTopicId, eventData.commandId );\n            } else {\n                if( currentLocationCtx ) {\n                    appCtx.unRegisterCtx( currentLocationCtx );\n                }\n            }\n        }\n        updateSideNavStatus( shallRemainOpen, vmProps );\n        updateView( eventData.includeView, vmProps );\n        updatePinUnpinEnabled( vmProps, eventData );\n        updateGlobalSidenavContext( vmProps );\n        updateCommandId( eventData.commandId, vmProps );\n\n        if( eventData.config && eventData.config.slide ) {\n            updateSideNavSlide( eventData.config.slide, vmProps );\n        }\n\n        return vmProps;\n    } );\n};\n\nexports = {\n    setLocationCtx,\n    createSidenav,\n    closeSidenav,\n    togglePinState,\n    togglePinUnpinPanelState\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/viewModeManagementService\n */\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\nimport viewModeService from 'js/viewMode.service';\nimport editHandlerSvc from 'js/editHandlerService';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport AwPromiseService from 'js/awPromiseService';\nexport const populateSupportedViewModes = viewModes => {\n  let supportedViewModes = viewModes ? viewModes : {\n    SummaryView: {\n      primaryWorkArea: 'list',\n      secondaryWorkArea: true\n    },\n    TableSummaryView: {\n      primaryWorkArea: 'table',\n      secondaryWorkArea: true\n    },\n    ListView: {\n      primaryWorkArea: 'list',\n      secondaryWorkArea: false\n    },\n    TableView: {\n      primaryWorkArea: 'table',\n      secondaryWorkArea: false\n    },\n    ImageView: {\n      primaryWorkArea: 'image',\n      secondaryWorkArea: false\n    }\n  };\n  viewModeService.setAvailableViewModes(Object.keys(supportedViewModes));\n  return supportedViewModes;\n};\n\nconst updateViewMode = (viewModeKey, viewModeValue) => {\n  const getViewMode = () => {\n    //var shouldBroadcastUpdate = $scope.view !== newViewMode.primaryWorkArea;\n    //Reset selection back to base when SWA is hidden\n    // if( !viewModeValue.secondaryWorkArea ) {\n    //     $scope.updateSecondarySelection( [], null );\n    // }\n    // if( shouldBroadcastUpdate ) {\n    //     $scope.$broadcast( 'viewModeChanged', newViewMode );\n    // }\n    return {\n      viewSuffix: viewModeValue.primaryWorkArea,\n      showSecondaryWorkArea: viewModeValue.secondaryWorkArea\n    };\n  };\n\n  const editHandler = editHandlerSvc.getActiveEditHandler();\n\n  if (editHandler && !editHandler.editInProgress()) {\n    return AwPromiseService.instance.resolve(getViewMode());\n  }\n\n  return editHandlerSvc.leaveConfirmation().then(() => {\n    return getViewMode();\n  });\n};\n\nconst getViewModePref = nameToken => {\n  return 'AW_SubLocation_' + (nameToken.indexOf(':') !== -1 ? nameToken.split(':')[1] : 'Generic') + '_ViewMode';\n};\n\nconst getViewModeFromPref = nameToken => {\n  let viewModePref = appCtxService.getCtx('preferences.' + getViewModePref(nameToken));\n\n  if (viewModePref) {\n    return viewModePref[0];\n  }\n\n  return viewModePref;\n};\n\nconst setViewModeToPref = (viewModeKey, nameToken) => {\n  appCtxService.updatePartialCtx('preferences.' + getViewModePref(nameToken), [viewModeKey]);\n};\n\nexport const handleViewModechange = (supportedViewModes, provider, viewModeKey) => {\n  if (supportedViewModes) {\n    var viewModeValue = supportedViewModes[viewModeKey];\n\n    if (!viewModeValue) {\n      viewModeKey = provider.defaultDisplayMode ? provider.defaultDisplayMode : Object.keys(supportedViewModes)[0];\n      logger.warn('Unknown view mode, defaulting to', viewModeKey);\n      viewModeValue = supportedViewModes[viewModeKey];\n    } //This is an existing tech debt in ng-afx, fixing this is a big change and not a priority right now\n\n\n    const hasTcSessionData = appCtxService.getCtx('tcSessionData');\n\n    if (getViewModeFromPref(provider.nameToken) !== viewModeKey && hasTcSessionData) {\n      setViewModeToPref(viewModeKey, provider.nameToken);\n    }\n\n    return updateViewMode(viewModeKey, viewModeValue);\n  }\n};\nexport const setViewMode = (viewModes, _ref) => {\n  let {\n    defaultDisplayMode,\n    nameToken\n  } = _ref;\n  let viewMode = nameToken && getViewModeFromPref(nameToken);\n\n  if (defaultDisplayMode && (!viewMode || !viewModes[viewMode])) {\n    viewModeService.changeViewMode(defaultDisplayMode);\n  } else {\n    if (narrowModeService.isNarrowMode()) {\n      let newViewMode = viewModes.hasOwnProperty(defaultDisplayMode) ? viewModes[defaultDisplayMode] : {\n        primaryWorkArea: 'list',\n        secondaryWorkArea: true\n      };\n      return updateViewMode(null, newViewMode);\n    }\n\n    viewMode = nameToken && getViewModeFromPref(nameToken);\n\n    if (viewMode) {\n      viewModeService.changeViewMode(viewMode);\n    } else if (viewModes.hasOwnProperty('SummaryView')) {\n      viewModeService.changeViewMode('SummaryView');\n    } else {\n      viewModeService.changeViewMode(Object.keys(viewModes)[0]);\n    }\n  }\n};","map":{"version":3,"names":["logger","appCtxService","viewModeService","editHandlerSvc","narrowModeService","AwPromiseService","populateSupportedViewModes","viewModes","supportedViewModes","SummaryView","primaryWorkArea","secondaryWorkArea","TableSummaryView","ListView","TableView","ImageView","setAvailableViewModes","Object","keys","updateViewMode","viewModeKey","viewModeValue","getViewMode","viewSuffix","showSecondaryWorkArea","editHandler","getActiveEditHandler","editInProgress","instance","resolve","leaveConfirmation","then","getViewModePref","nameToken","indexOf","split","getViewModeFromPref","viewModePref","getCtx","setViewModeToPref","updatePartialCtx","handleViewModechange","provider","defaultDisplayMode","warn","hasTcSessionData","setViewMode","viewMode","changeViewMode","isNarrowMode","newViewMode","hasOwnProperty"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/viewModeManagementService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/viewModeManagementService\n */\nimport logger from 'js/logger';\nimport appCtxService from 'js/appCtxService';\nimport viewModeService from 'js/viewMode.service';\nimport editHandlerSvc from 'js/editHandlerService';\nimport narrowModeService from 'js/aw.narrowMode.service';\nimport AwPromiseService from 'js/awPromiseService';\n\nexport const populateSupportedViewModes = viewModes => {\n    let supportedViewModes = viewModes ? viewModes : {\n        SummaryView: {\n            primaryWorkArea: 'list',\n            secondaryWorkArea: true\n        },\n        TableSummaryView: {\n            primaryWorkArea: 'table',\n            secondaryWorkArea: true\n        },\n        ListView: {\n            primaryWorkArea: 'list',\n            secondaryWorkArea: false\n        },\n        TableView: {\n            primaryWorkArea: 'table',\n            secondaryWorkArea: false\n        },\n        ImageView: {\n            primaryWorkArea: 'image',\n            secondaryWorkArea: false\n        }\n    };\n    viewModeService.setAvailableViewModes( Object.keys( supportedViewModes ) );\n    return supportedViewModes;\n};\n\nconst updateViewMode = ( viewModeKey, viewModeValue ) => {\n    const getViewMode = () => {\n        //var shouldBroadcastUpdate = $scope.view !== newViewMode.primaryWorkArea;\n\n        //Reset selection back to base when SWA is hidden\n        // if( !viewModeValue.secondaryWorkArea ) {\n        //     $scope.updateSecondarySelection( [], null );\n        // }\n\n        // if( shouldBroadcastUpdate ) {\n        //     $scope.$broadcast( 'viewModeChanged', newViewMode );\n        // }\n        return {\n            viewSuffix: viewModeValue.primaryWorkArea,\n            showSecondaryWorkArea: viewModeValue.secondaryWorkArea\n        };\n    };\n    const editHandler = editHandlerSvc.getActiveEditHandler();\n    if( editHandler && !editHandler.editInProgress() ) {\n        return AwPromiseService.instance.resolve( getViewMode() );\n    }\n    return editHandlerSvc.leaveConfirmation().then( () => {\n        return getViewMode();\n    } );\n};\n\nconst getViewModePref = nameToken => {\n    return 'AW_SubLocation_' + ( nameToken.indexOf( ':' ) !== -1 ? nameToken.split( ':' )[ 1 ] : 'Generic' ) + '_ViewMode';\n};\n\nconst getViewModeFromPref = nameToken => {\n    let viewModePref = appCtxService.getCtx( 'preferences.' + getViewModePref( nameToken ) );\n    if( viewModePref ) {\n        return viewModePref[ 0 ];\n    }\n    return viewModePref;\n};\n\nconst setViewModeToPref = ( viewModeKey, nameToken ) => {\n    appCtxService.updatePartialCtx( 'preferences.' + getViewModePref( nameToken ), [ viewModeKey ] );\n};\n\nexport const handleViewModechange = ( supportedViewModes, provider, viewModeKey ) => {\n    if( supportedViewModes ) {\n        var viewModeValue = supportedViewModes[ viewModeKey ];\n        if( !viewModeValue ) {\n            viewModeKey = provider.defaultDisplayMode ? provider.defaultDisplayMode : Object.keys( supportedViewModes )[ 0 ];\n            logger.warn( 'Unknown view mode, defaulting to', viewModeKey );\n            viewModeValue = supportedViewModes[ viewModeKey ];\n        }\n\n        //This is an existing tech debt in ng-afx, fixing this is a big change and not a priority right now\n        const hasTcSessionData = appCtxService.getCtx( 'tcSessionData' );\n        if( getViewModeFromPref( provider.nameToken ) !== viewModeKey && hasTcSessionData ) {\n            setViewModeToPref( viewModeKey, provider.nameToken );\n        }\n        return updateViewMode( viewModeKey, viewModeValue );\n    }\n};\n\nexport const setViewMode = ( viewModes, { defaultDisplayMode, nameToken } ) => {\n    let viewMode = nameToken && getViewModeFromPref( nameToken );\n    if( defaultDisplayMode && ( !viewMode || !viewModes[ viewMode ] ) ) {\n        viewModeService.changeViewMode( defaultDisplayMode );\n    } else {\n        if( narrowModeService.isNarrowMode() ) {\n            let newViewMode = viewModes.hasOwnProperty( defaultDisplayMode ) ? viewModes[defaultDisplayMode] : {\n                primaryWorkArea: 'list',\n                secondaryWorkArea: true\n            };\n            return updateViewMode( null, newViewMode );\n        }\n        viewMode = nameToken && getViewModeFromPref( nameToken );\n        if( viewMode ) {\n            viewModeService.changeViewMode( viewMode );\n        } else if( viewModes.hasOwnProperty( 'SummaryView' ) ) {\n            viewModeService.changeViewMode( 'SummaryView' );\n        } else {\n            viewModeService.changeViewMode( Object.keys( viewModes )[0] );\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
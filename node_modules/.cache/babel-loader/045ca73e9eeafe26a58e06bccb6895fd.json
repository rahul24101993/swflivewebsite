{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Service to load the allcontextsViewModel.json file from the consumption\n *\n * @module js/contextContributionService\n */\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxService from 'js/appCtxService';\nimport workspaceService from 'js/workspaceService';\nimport configurationService from 'js/configurationService';\nvar exports = {};\n/**\n * Find all  placement for the given context.\n *\n * @param {Object} allContexts - container to store the placements against context\n * @param {Object} placements - all placement\n * @param {Object} contextId - context view ID\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement for context.\n */\n\nexport let getAllPlacements = function (allContexts, placements, contextId, $scope) {\n  var dataOnCategoryType = _.filter(placements, {\n    contextId: contextId\n  }); // only single contribution\n\n\n  if (dataOnCategoryType && dataOnCategoryType.length === 1) {\n    return dataOnCategoryType[0];\n  } // the active placement\n\n\n  if (allContexts && allContexts.length > 0) {\n    var activePlacement = _.filter(allContexts, {\n      contextId: contextId\n    });\n\n    if (activePlacement) {\n      return activePlacement;\n    }\n  } else {\n    var placement = exports.findActivePlacement(dataOnCategoryType, $scope);\n    allContexts[contextId] = placement;\n    return placement;\n  }\n\n  return undefined;\n};\n/**\n * Check the visibility of the active placement\n *\n * @param {Object} placement placement for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most visibililty of placement.\n */\n\nexport let isPlacementVisible = function (placement, $scope) {\n  var isValidCondition = true;\n\n  if (placement && placement.hasOwnProperty('visibleWhen')) {\n    // Re-evaluate the visible when - condition change may have come from a different command bar\n    if (placement.visibleWhen.condition) {\n      var conditionExpression = _.get(placement, 'visibleWhen.condition');\n\n      isValidCondition = conditionService.evaluateCondition($scope, conditionExpression);\n    } else {\n      isValidCondition = _.get(placement, 'visibleWhen');\n    }\n  }\n\n  return isValidCondition;\n};\n/**\n * Find active placement for the given context..\n *\n * @param {Object} allPlacements - all placements for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\n\nexport let findActivePlacement = function (allPlacements, $scope) {\n  var mostAppropriateActionHandler = null;\n  var mostAppropriateConditionLength = -1;\n\n  _.forEach(allPlacements, function (placement) {\n    var conditions = _.get(placement, 'activeWhen.condition');\n\n    if (conditions) {\n      var isValidCondition = conditionService.evaluateCondition($scope, conditions);\n      var expressionLength = conditions.length;\n\n      if (_.isObject(conditions)) {\n        expressionLength = JSON.stringify(conditions).length;\n      }\n\n      if (isValidCondition && expressionLength > mostAppropriateConditionLength) {\n        mostAppropriateConditionLength = expressionLength;\n        mostAppropriateActionHandler = placement;\n      }\n    } else {\n      mostAppropriateActionHandler = placement;\n    }\n  });\n\n  return mostAppropriateActionHandler;\n};\n/**\n * Gets all of the currently visible placements.\n *\n * @return {Promise<Array>} Array of currently visible placemenst\n */\n\nexport const getVisiblePlacements = async function () {\n  const visiblePlacements = [];\n\n  if (!appCtxService.ctx.workspace || !appCtxService.ctx.workspace.workspaceId) {\n    await workspaceValidationService.setWorkspaceId();\n  }\n\n  const workspaceId = appCtxService.ctx.workspace.workspaceId;\n  const workspaceContexts = await workspaceService.getAvailableContexts(workspaceId);\n  const contextJson = await configurationService.getCfg('contextConfiguration');\n\n  if (contextJson.contexts) {\n    let filterContextList;\n    var availContexts = Object.keys(contextJson.contexts);\n\n    var allowedContexts = _.intersection(availContexts, workspaceContexts);\n\n    if (allowedContexts && allowedContexts.length > 0) {\n      filterContextList = allowedContexts;\n    } else {\n      filterContextList = availContexts;\n    } // get only active sortedlist\n\n\n    _.forEach(filterContextList, function (contextId) {\n      const AllContexts = {};\n      var activePlacement = getAllPlacements(AllContexts, contextJson.placements, contextId, {\n        ctx: appCtxService.ctx\n      });\n      var isActivePlacementVisible = isPlacementVisible(activePlacement, {\n        ctx: appCtxService.ctx\n      });\n\n      if (isActivePlacementVisible) {\n        visiblePlacements.push(activePlacement);\n      }\n    });\n  }\n\n  return visiblePlacements;\n};\nexports = {\n  getAllPlacements,\n  isPlacementVisible,\n  findActivePlacement,\n  getVisiblePlacements\n};\nexport default exports;","map":{"version":3,"names":["conditionService","_","workspaceValidationService","appCtxService","workspaceService","configurationService","exports","getAllPlacements","allContexts","placements","contextId","$scope","dataOnCategoryType","filter","length","activePlacement","placement","findActivePlacement","undefined","isPlacementVisible","isValidCondition","hasOwnProperty","visibleWhen","condition","conditionExpression","get","evaluateCondition","allPlacements","mostAppropriateActionHandler","mostAppropriateConditionLength","forEach","conditions","expressionLength","isObject","JSON","stringify","getVisiblePlacements","visiblePlacements","ctx","workspace","workspaceId","setWorkspaceId","workspaceContexts","getAvailableContexts","contextJson","getCfg","contexts","filterContextList","availContexts","Object","keys","allowedContexts","intersection","AllContexts","isActivePlacementVisible","push"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/contextContributionService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Service to load the allcontextsViewModel.json file from the consumption\n *\n * @module js/contextContributionService\n */\nimport conditionService from 'js/conditionService';\nimport _ from 'lodash';\nimport workspaceValidationService from 'js/workspaceValidationService';\nimport appCtxService from 'js/appCtxService';\nimport workspaceService from 'js/workspaceService';\nimport configurationService from 'js/configurationService';\n\nvar exports = {};\n\n/**\n * Find all  placement for the given context.\n *\n * @param {Object} allContexts - container to store the placements against context\n * @param {Object} placements - all placement\n * @param {Object} contextId - context view ID\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement for context.\n */\nexport let getAllPlacements = function( allContexts, placements, contextId, $scope ) {\n    var dataOnCategoryType = _.filter( placements, {\n        contextId: contextId\n    } );\n\n    // only single contribution\n\n    if( dataOnCategoryType && dataOnCategoryType.length === 1 ) {\n        return dataOnCategoryType[ 0 ];\n    }\n\n    // the active placement\n\n    if( allContexts && allContexts.length > 0 ) {\n        var activePlacement = _.filter( allContexts, {\n            contextId: contextId\n        } );\n\n        if( activePlacement ) {\n            return activePlacement;\n        }\n    } else {\n        var placement = exports.findActivePlacement( dataOnCategoryType, $scope );\n\n        allContexts[ contextId ] = placement;\n\n        return placement;\n    }\n    return undefined;\n};\n\n/**\n * Check the visibility of the active placement\n *\n * @param {Object} placement placement for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most visibililty of placement.\n */\nexport let isPlacementVisible = function( placement, $scope ) {\n    var isValidCondition = true;\n\n    if( placement && placement.hasOwnProperty( 'visibleWhen' ) ) {\n        // Re-evaluate the visible when - condition change may have come from a different command bar\n        if( placement.visibleWhen.condition ) {\n            var conditionExpression = _.get( placement, 'visibleWhen.condition' );\n\n            isValidCondition = conditionService.evaluateCondition( $scope, conditionExpression );\n        } else {\n            isValidCondition = _.get( placement, 'visibleWhen' );\n        }\n    }\n\n    return isValidCondition;\n};\n\n/**\n * Find active placement for the given context..\n *\n * @param {Object} allPlacements - all placements for the view\n * @param {Object} $scope - Scope to execute the command with\n *\n * @return {Object} most appropriate active placement.\n */\nexport let findActivePlacement = function( allPlacements, $scope ) {\n    var mostAppropriateActionHandler = null;\n    var mostAppropriateConditionLength = -1;\n\n    _.forEach( allPlacements, function( placement ) {\n        var conditions = _.get( placement, 'activeWhen.condition' );\n        if( conditions ) {\n            var isValidCondition = conditionService.evaluateCondition( $scope, conditions );\n            var expressionLength = conditions.length;\n            if( _.isObject( conditions ) ) {\n                expressionLength = JSON.stringify( conditions ).length;\n            }\n            if( isValidCondition &&\n                expressionLength > mostAppropriateConditionLength ) {\n                mostAppropriateConditionLength = expressionLength;\n                mostAppropriateActionHandler = placement;\n            }\n        } else {\n            mostAppropriateActionHandler = placement;\n        }\n    } );\n    return mostAppropriateActionHandler;\n};\n\n/**\n * Gets all of the currently visible placements.\n *\n * @return {Promise<Array>} Array of currently visible placemenst\n */\nexport const getVisiblePlacements = async function() {\n    const visiblePlacements = [];\n    if( !appCtxService.ctx.workspace || !appCtxService.ctx.workspace.workspaceId ) {\n        await workspaceValidationService.setWorkspaceId();\n    }\n\n    const workspaceId = appCtxService.ctx.workspace.workspaceId;\n    const workspaceContexts = await workspaceService.getAvailableContexts( workspaceId );\n\n    const contextJson = await configurationService.getCfg( 'contextConfiguration' );\n    if( contextJson.contexts ) {\n        let filterContextList;\n        var availContexts = Object.keys( contextJson.contexts );\n        var allowedContexts = _.intersection( availContexts, workspaceContexts );\n\n        if( allowedContexts && allowedContexts.length > 0 ) {\n            filterContextList = allowedContexts;\n        } else {\n            filterContextList = availContexts;\n        }\n\n        // get only active sortedlist\n        _.forEach( filterContextList, function( contextId ) {\n            const AllContexts = {};\n            var activePlacement = getAllPlacements( AllContexts, contextJson.placements, contextId, { ctx: appCtxService.ctx } );\n            var isActivePlacementVisible = isPlacementVisible( activePlacement, { ctx: appCtxService.ctx } );\n            if( isActivePlacementVisible ) {\n                visiblePlacements.push( activePlacement );\n            }\n        } );\n    }\n    return visiblePlacements;\n};\n\nexports = {\n    getAllPlacements,\n    isPlacementVisible,\n    findActivePlacement,\n    getVisiblePlacements\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/defaultIconProviderService\n */import cmm from'soa/kernel/clientMetaModel';import iconMapSvc from'js/iconMapService';import iconRepositoryService from'js/iconRepositoryService';import{getImageAliasFromId}from'js/imageRegistry';import{loadDynModule}from'js/moduleLoader';/**\n * @private\n */var _cache={/**\n     * Set of '&lt;SVG&gt;' and '&lt;IMG&gt;' HTML tags set with the \"aw-base-icon\" CSS class once an icon is used.\n     */use:{}};/**\n * @private\n *\n * @param {String} key - key field within use object\n *\n * @return {String} string from use object per key field (or null)\n */function _getFromUseCache(key){var result=_cache.use[key];if(result){return result;}return undefined;}/**\n * Returns the &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;SVG&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */const _getIcon=async name=>{/**\n     * Check if this is an alias name for the actual icon name.\n     */var iconAlias=getImageAliasFromId(name);if(iconAlias){return loadDynModule(iconAlias).then(result=>result.svgString);}return null;};var exports={};/**\n * Returns the &lt;IMG&gt; tag for the given type name (or one of its parent super types if the given type icon file\n * was not deployed) **with** 'class' attribute already set to 'aw-base-icon' and draggability disabled.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */export let getTypeIcon=function(typeName){/**\n     * Check if we have already prepared a tag for this icon to use.\n     */var ret=_getFromUseCache(typeName);if(ret){return ret;}var typeIconFileName;var modelType=cmm.getType(typeName);if(modelType&&modelType.constantsMap.typeIconFileName){// If we already have the meta model cached, use the constant for the type icon filename.\ntypeIconFileName=modelType.constantsMap.IconFileName;}else{/**\n         * Check if this is an alias name for the actual icon name.\n         */typeIconFileName=iconMapSvc.getTypeFileName(typeName);if(!typeIconFileName){return null;}}return exports.getTypeIconFileTag(typeName,typeIconFileName);};/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */export let getTypeIconFileTag=function(typeName,typeIconFileName){/**\n     * Build final tag and put into the 'use' cache to save some work in the future.\n     */var iconTag='<img class=\"aw-base-icon\" src=\"'+exports.getTypeIconFileUrl(typeIconFileName)+'\" draggable=\"false\" ondragstart=\"return false;\" alt=\"\" />';_cache.use[typeName]=iconTag;return iconTag;};/**\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name (or null if the icon name has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */export let getTypeIconFileUrl=function(typeIconFileName){return iconRepositoryService.getIconFileUrl(typeIconFileName);};/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server (or null if no type icon has not been registered as\n *         an alias in a module.json or the SVG file was not found during war the build).\n */export let getTypeIconURL=function(typeName){var iconFileName;var modelType=cmm.getType(typeName);if(modelType&&modelType.constantsMap.IconFileName){iconFileName=modelType.constantsMap.IconFileName;}if(!iconFileName){/**\n         * Check if this is an alias name for the actual icon name.\n         */iconFileName=iconMapSvc.getTypeFileName(typeName);}if(!iconFileName){return null;}/**\n     * Create the path to the deployed icon file.\n     */return iconRepositoryService.getIconFileUrl(iconFileName);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('home' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getTileIcon=async function(name){return await _getIcon('home'+name);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('misc' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getMiscIcon=async function(name){return await _getIcon('misc'+name);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('cmd' + name) icon **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getCmdIcon=async function(name){return await _getIcon('cmd'+name);};/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **with** 'class' attribute already set to\n * 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getAwIcon=async function(iconName){return await _getIcon(iconName);};/**\n * Returns the HTML &lt;SVG&gt; string for the given icon name **without** any 'class' attribute being set.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getIcon=async function(iconName){return await _getIcon(iconName);};/**\n * Returns the HTML &lt;SVG&gt; string for the given ('indicator' + name) icon **with** 'class' attribute already\n * set to 'aw-base-icon'.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string for the icon (or null if the icon name has not been registered as an alias\n *         in a module.json or the SVG file was not found during war the build).\n */export let getIndicatorIcon=async function(iconName){return await _getIcon('indicator'+iconName);};exports={getTypeIcon,getTypeIconFileTag,getTypeIconFileUrl,getTypeIconURL,getTileIcon,getMiscIcon,getCmdIcon,getAwIcon,getIcon,getIndicatorIcon};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwPopupCommandCellService.js\";\n\n/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n// Copyright (c) 2020 Siemens\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet popupRef = null;\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n * @param {String} parentId - command id of parent of the child command\n */\n\nconst publishAnalytics = (command, parentId) => {\n  var sanPopupCmdLogData = {\n    sanAnalyticsType: 'Popup Commands',\n    sanCommandId: command.id,\n    sanCommandTitle: command.title\n  };\n  analyticsSvc.logCommands(sanPopupCmdLogData);\n};\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\n\nexport const awCommandRenderFunction = _ref => {\n  let {\n    viewModel: {\n      dispatch,\n      data: {\n        isCommandExecuting\n      }\n    },\n    command,\n    ctxMin: {\n      commandClass\n    },\n    runActionWithViewModel,\n    actions: {\n      openCommandPopup\n    },\n    childCommandClickCallback,\n    commandContext,\n    visibilityLoader\n  } = _ref;\n\n  /**\n   * Click handler for the command button\n   *\n   * @param {Event} e Click event\n   */\n  const executeCommand = async e => {\n    e.stopPropagation();\n\n    if (command.enabled) {\n      eventBus.publish('removeMessages', {});\n      dispatch({\n        path: 'data.isCommandExecuting',\n        value: true\n      });\n      const result = await command.execute(runActionWithViewModel, commandContext);\n      dispatch({\n        path: 'data.isCommandExecuting',\n        value: false\n      });\n      logUserGesture();\n\n      if (command.hasPopup) {\n        const overrideOptions = result.inputData.options;\n        openCommandPopup.show({ ...overrideOptions,\n          context: getPopupContext(overrideOptions)\n        }).then(popup => {\n          popupRef = popup;\n        });\n      }\n\n      if (childCommandClickCallback) {\n        childCommandClickCallback(command.hasPopup);\n      }\n    }\n\n    if (childCommandClickCallback) {\n      childCommandClickCallback(command.hasPopup);\n    }\n\n    publishAnalytics(command, getParentGroupId());\n  };\n\n  const getParentGroupId = function () {\n    let parentGroupId = '';\n\n    if (commandContext && commandContext.command) {\n      parentGroupId = commandContext.command.id;\n    }\n\n    return parentGroupId;\n  };\n\n  const getSubject = function () {\n    let subject = {};\n\n    if (commandContext && commandContext.selectionData) {\n      let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n      let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n      subject = {\n        pselected: pselected,\n        selected: selected\n      };\n    }\n\n    return subject;\n  };\n\n  const logUserGesture = function () {\n    let widgetInfo = {\n      commandId: command.id,\n      parentGroupId: getParentGroupId(),\n      commandContext: commandContext\n    };\n    cas.notify({\n      widgetInfo: widgetInfo,\n      userGesture: 'commandClick',\n      subject: getSubject()\n    });\n  };\n\n  const getPopupContext = options => {\n    const scope = {\n      commandContext\n    };\n    let subPanelContext = assignWith({}, options.subPanelContext, (objValue, srcValue) => {\n      const path = getStringBetweenDoubleMustaches(objValue || srcValue);\n      return get(scope, path);\n    });\n    return {\n      anchor: command.id,\n      //TODO: Command context will need to be included in this also\n      context: {\n        command,\n        ...commandContext\n      },\n      visibilityLoader,\n      subPanelContext,\n      childCommandClickCallback: hasPopup => {\n        if (hasPopup) {\n          return;\n        }\n\n        openCommandPopup.hide();\n        closeAncestorMenus();\n      }\n    };\n  };\n\n  const closeAncestorMenus = () => {\n    if (!popupRef) {\n      return;\n    }\n\n    let menu = popupRef.parentPopup; // if it's a nested menu\n\n    while (menu && dom.get('.aw-popup-command-bar', menu.panelEl)) {\n      menu.hide();\n      menu = menu.parentPopup;\n    }\n\n    popupRef = null;\n  };\n\n  const onKeyDownHandler = event => {\n    if (wcagService.isValidKeyPress(event)) {\n      event.preventDefault();\n      executeCommand(event);\n    } else {\n      wcagService.handleMoveUpOrDown(event, event.currentTarget.parentElement.parentElement);\n    }\n  }; // move to memo function?\n\n\n  if (!command.icon) {\n    if (command.selected) {\n      command.icon = 'cmdCheckmark';\n    } else {\n      command.icon = 'cmdBlankIcon';\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      ref: openCommandPopup.reference,\n      onKeyDown: onKeyDownHandler,\n      onClick: executeCommand,\n      \"button-id\": command.id,\n      \"command-id\": command.id,\n      \"data-command-id\": command.id,\n      className: commandClass,\n      tabIndex: -1 //Programatically focusable but not naturally\n      ,\n      \"aria-label\": command.title,\n      title: command.extendedTooltip || command.description ? null : command.title,\n      \"aria-disabled\": isCommandExecuting || !command.enabled,\n      role: \"button\",\n      \"aria-haspopup\": command.hasPopup,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-popup-cellContentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(AwPic, {\n          className: \"aw-widget-thumbnail\",\n          iconId: command.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), command.decorator && command.decorator.text && command.decorator.visibleWhen ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commands-cellDecorator\",\n          children: command.decorator.className ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: command.decorator.className,\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: command.decorator.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this) : null, command.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }, this), command.hasPopup ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-widgets-groupCommandStack\",\n        children: /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: \"miscDownArrow_uxRefresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...openCommandPopup.options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: openCommandPopup.reference,\n      extendedTooltipOptions: {\n        isCommand: true,\n        alignment: 'VERTICAL'\n      },\n      extendedTooltipContext: command,\n      extendedTooltip: command.extendedTooltip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} hasPopup Command popup state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\n\nconst getCommandClass = (renderContext, selected, enabled, hasPopup, isCommandExecuting, icon) => {\n  const classNames = ['sw-aria-border', 'aw-widgets-cellListItem', 'aw-widgets-cellTop', selected ? 'aw-state-selected' : null, enabled && !isCommandExecuting ? null : 'disabled', hasPopup ? 'aw-hierarchical-popup' : null].filter(x => x);\n  return classNames.join(' ');\n};\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\n\n\nexport const getCommandClassMemo = (vmDef, prop, data) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [prop.command.selected, prop.command.enabled, prop.command.hasPopup, data.isCommandExecuting, prop.command.icon],\n    compute: getCommandClass\n  })];\n};","map":{"version":3,"names":["AwExtendedTooltip","AwIcon","AwPic","AwPopup","eventBus","wcagService","DerivedStateResult","assignWith","get","getStringBetweenDoubleMustaches","DOMAPIs","dom","analyticsSvc","cas","popupRef","publishAnalytics","command","parentId","sanPopupCmdLogData","sanAnalyticsType","sanCommandId","id","sanCommandTitle","title","logCommands","awCommandRenderFunction","viewModel","dispatch","data","isCommandExecuting","ctxMin","commandClass","runActionWithViewModel","actions","openCommandPopup","childCommandClickCallback","commandContext","visibilityLoader","executeCommand","e","stopPropagation","enabled","publish","path","value","result","execute","logUserGesture","hasPopup","overrideOptions","inputData","options","show","context","getPopupContext","then","popup","getParentGroupId","parentGroupId","getSubject","subject","selectionData","pselected","selected","widgetInfo","commandId","notify","userGesture","scope","subPanelContext","objValue","srcValue","anchor","hide","closeAncestorMenus","menu","parentPopup","panelEl","onKeyDownHandler","event","isValidKeyPress","preventDefault","handleMoveUpOrDown","currentTarget","parentElement","icon","reference","extendedTooltip","description","decorator","text","visibleWhen","className","isCommand","alignment","getCommandClass","renderContext","classNames","filter","x","join","getCommandClassMemo","vmDef","prop","ctxParameters","additionalParameters","compute"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwPopupCommandCellService.js"],"sourcesContent":["/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n// Copyright (c) 2020 Siemens\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { assignWith, get } from 'lodash';\nimport { getStringBetweenDoubleMustaches } from 'js/parsingUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport analyticsSvc from 'js/analyticsService';\nimport * as cas from 'js/centralAggregationService';\n\n/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */\n\nlet popupRef = null;\n\n/**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n * @param {String} parentId - command id of parent of the child command\n */\nconst publishAnalytics = ( command, parentId ) => {\n     var sanPopupCmdLogData = {\n        sanAnalyticsType: 'Popup Commands',\n        sanCommandId: command.id,\n        sanCommandTitle: command.title\n    };\n    analyticsSvc.logCommands( sanPopupCmdLogData );\n};\n\n/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awCommandRenderFunction = ( {\n    viewModel: { dispatch, data: { isCommandExecuting } },\n    command,\n    ctxMin: { commandClass },\n    runActionWithViewModel,\n    actions: { openCommandPopup },\n    childCommandClickCallback,\n    commandContext,\n    visibilityLoader\n} ) => {\n    /**\n     * Click handler for the command button\n     *\n     * @param {Event} e Click event\n     */\n    const executeCommand = async( e ) => {\n        e.stopPropagation();\n        if( command.enabled ) {\n            eventBus.publish( 'removeMessages', {} );\n            dispatch( { path: 'data.isCommandExecuting', value: true } );\n            const result = await command.execute( runActionWithViewModel, commandContext );\n            dispatch( { path: 'data.isCommandExecuting', value: false } );\n            logUserGesture();\n            if( command.hasPopup ) {\n                const overrideOptions = result.inputData.options;\n                openCommandPopup.show( {\n                    ...overrideOptions,\n                    context: getPopupContext( overrideOptions )\n                } ).then( ( popup )=>{\n                    popupRef = popup;\n                } );\n            }\n            if( childCommandClickCallback ) {\n                childCommandClickCallback( command.hasPopup );\n            }\n        }\n\n        if( childCommandClickCallback ) {\n            childCommandClickCallback( command.hasPopup );\n        }\n        publishAnalytics( command, getParentGroupId() );\n    };\n\n    const getParentGroupId = function() {\n        let parentGroupId = '';\n        if( commandContext && commandContext.command ) {\n            parentGroupId = commandContext.command.id;\n        }\n        return parentGroupId;\n    };\n\n    const getSubject = function() {\n        let subject = {};\n        if( commandContext && commandContext.selectionData ) {\n            let pselected = commandContext.selectionData.pselected ? commandContext.selectionData.pselected : '';\n            let selected = commandContext.selectionData.selected ? commandContext.selectionData.selected : '';\n            subject = { pselected: pselected, selected: selected };\n        }\n        return subject;\n    };\n\n    const logUserGesture = function() {\n        let widgetInfo = {\n            commandId: command.id,\n            parentGroupId: getParentGroupId(),\n            commandContext: commandContext\n        };\n        cas.notify( {\n            widgetInfo: widgetInfo,\n            userGesture: 'commandClick',\n            subject: getSubject()\n        } );\n    };\n\n    const getPopupContext = ( options )=>{\n        const scope = { commandContext };\n        let subPanelContext = assignWith( {}, options.subPanelContext, ( objValue, srcValue ) => {\n            const path = getStringBetweenDoubleMustaches( objValue || srcValue );\n            return get( scope, path );\n        } );\n\n        return {\n            anchor: command.id,\n            //TODO: Command context will need to be included in this also\n            context: {\n                command,\n                ...commandContext\n            },\n            visibilityLoader,\n            subPanelContext,\n            childCommandClickCallback: ( hasPopup ) => {\n                if( hasPopup ) {\n                    return;\n                }\n                openCommandPopup.hide();\n                closeAncestorMenus();\n            }\n        };\n    };\n\n    const closeAncestorMenus = ()=>{\n        if( !popupRef ) { return; }\n        let menu = popupRef.parentPopup;\n        // if it's a nested menu\n        while( menu && dom.get( '.aw-popup-command-bar', menu.panelEl ) ) {\n            menu.hide();\n            menu = menu.parentPopup;\n        }\n        popupRef = null;\n    };\n\n    const onKeyDownHandler = ( event ) => {\n        if( wcagService.isValidKeyPress( event ) ) {\n            event.preventDefault();\n            executeCommand( event );\n        } else {\n            wcagService.handleMoveUpOrDown( event, event.currentTarget.parentElement.parentElement );\n        }\n    };\n\n    // move to memo function?\n    if( !command.icon ) {\n        if( command.selected ) {\n            command.icon = 'cmdCheckmark';\n        } else {\n            command.icon = 'cmdBlankIcon';\n        }\n    }\n\n    return <>\n        <li ref={openCommandPopup.reference}\n            onKeyDown={onKeyDownHandler}\n            onClick={executeCommand}\n            button-id={command.id}\n            command-id={command.id}\n            data-command-id={command.id}\n            className={commandClass}\n            tabIndex={-1} //Programatically focusable but not naturally\n            aria-label={command.title}\n            title={command.extendedTooltip || command.description ? null : command.title}\n            aria-disabled={isCommandExecuting || !command.enabled}\n            role='button'\n            aria-haspopup={command.hasPopup}>\n            <div className='aw-popup-cellContentContainer'>\n                <AwPic className='aw-widget-thumbnail' iconId={command.icon}></AwPic>\n                { command.decorator && command.decorator.text && command.decorator.visibleWhen ?\n                    <div className='aw-commands-cellDecorator'>\n                        { command.decorator.className ?\n                            <div className={command.decorator.className}>{command.decorator.text}</div>\n                            : <div>{command.decorator.text}</div> }\n                    </div>\n                    : null }\n                {command.title}\n            </div>\n            { command.hasPopup ?\n                <div className='aw-widgets-groupCommandStack'>\n                    <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon>\n                </div>\n                : null }\n        </li>\n\n        <AwPopup {...openCommandPopup.options} />\n        <AwExtendedTooltip\n            reference = { openCommandPopup.reference }\n            extendedTooltipOptions = { { isCommand: true, alignment: 'VERTICAL' } }\n            extendedTooltipContext = { command }\n            extendedTooltip = { command.extendedTooltip } >\n        </AwExtendedTooltip>\n    </>;\n};\n\n/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} hasPopup Command popup state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */\nconst getCommandClass = ( renderContext, selected, enabled, hasPopup, isCommandExecuting, icon ) => {\n    const classNames = [\n        'sw-aria-border',\n        'aw-widgets-cellListItem',\n        'aw-widgets-cellTop',\n        selected ? 'aw-state-selected' : null,\n        enabled && !isCommandExecuting ? null : 'disabled',\n        hasPopup ? 'aw-hierarchical-popup' : null\n    ].filter( x => x );\n    return classNames.join( ' ' );\n};\n\n/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */\nexport const getCommandClassMemo = ( vmDef, prop, data ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ prop.command.selected, prop.command.enabled, prop.command.hasPopup, data.isCommandExecuting, prop.command.icon ],\n        compute: getCommandClass\n    } ) ];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
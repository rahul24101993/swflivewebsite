{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwCommandBarService.js\";\n// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandBarService\n */\nimport AwCommandList from 'viewmodel/AwCommandListViewModel';\nimport { getCommands } from './command.service';\nimport { getServerConditionUsage } from './commandVisibilityService';\nimport Debug from 'debug';\n/**\n * Wrapper component to handle initialization of AwCommandBar\n *\n * @param {Object} param0 Declarative render context\n * @returns {JSX.Element} React component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awCommandBarRenderFunction = _ref => {\n  let {\n    alignment,\n    visibilityLoader,\n    context,\n    anchor,\n    showCommandLabels,\n    viewModel: {\n      data: {\n        commandList = null,\n        visibleServerCommands,\n        trace\n      }\n    },\n    className,\n    overflow,\n    hideMore,\n    reverse\n  } = _ref;\n  //If a server visibility loader is configured do not display commands until the server visibility is loaded\n  return commandList && /*#__PURE__*/_jsxDEV(AwCommandList, {\n    alignment: alignment,\n    anchor: anchor,\n    commandContext: context,\n    commandList: commandList,\n    hideMore: hideMore,\n    overflow: overflow,\n    showCommandLabels: showCommandLabels,\n    trace: trace,\n    visibilityLoader: visibilityLoader,\n    reverse: reverse,\n    visibleServerCommands: visibleServerCommands\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @returns {List<CommandOverlay>} List of command data for the given anchor\n */\n\nexport const awCommandBarInitFunction = async _ref2 => {\n  let {\n    anchor\n  } = _ref2;\n\n  if (!anchor) {\n    return [];\n  }\n\n  const trace = new Debug(`command:AwCommandBar:${anchor}`);\n  trace('Loading commands');\n  return getCommands(anchor).then(list => {\n    trace('Loaded command list', list);\n    return {\n      commandList: list,\n      trace\n    };\n  });\n};\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @param {Object} param0.commandList The list of commands to get server visibility for\n * @param {Object} param0.visibilityLoader The server visibility dataloader\n * @returns {Object} Current command visibility states\n */\n\nexport const refreshServerVisibility = async _ref3 => {\n  let {\n    commandList,\n    visibilityLoader,\n    trace\n  } = _ref3;\n\n  if (!commandList || !visibilityLoader) {\n    return null;\n  }\n\n  const serverCommandIds = commandList.map(cmd => {\n    const x = getServerConditionUsage(cmd);\n    cmd.trace('Server command visibility to be loaded', x);\n    return x;\n  }).reduce((acc, nxt) => acc.concat(nxt), []);\n  trace('Loading server visibility', serverCommandIds, commandList);\n  return visibilityLoader.loadMany(serverCommandIds).then(results => results.reduce((acc, result, idx) => {\n    acc[serverCommandIds[idx]] = result;\n    return acc;\n  }, {}));\n};","map":{"version":3,"names":["AwCommandList","getCommands","getServerConditionUsage","Debug","awCommandBarRenderFunction","alignment","visibilityLoader","context","anchor","showCommandLabels","viewModel","data","commandList","visibleServerCommands","trace","className","overflow","hideMore","reverse","awCommandBarInitFunction","then","list","refreshServerVisibility","serverCommandIds","map","cmd","x","reduce","acc","nxt","concat","loadMany","results","result","idx"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwCommandBarService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandBarService\n */\nimport AwCommandList from 'viewmodel/AwCommandListViewModel';\nimport { getCommands } from './command.service';\nimport { getServerConditionUsage } from './commandVisibilityService';\nimport Debug from 'debug';\n\n/**\n * Wrapper component to handle initialization of AwCommandBar\n *\n * @param {Object} param0 Declarative render context\n * @returns {JSX.Element} React component\n */\nexport const awCommandBarRenderFunction = ( { alignment, visibilityLoader, context, anchor, showCommandLabels,\n    viewModel: { data: { commandList = null, visibleServerCommands, trace } }, className, overflow, hideMore, reverse } ) => {\n    //If a server visibility loader is configured do not display commands until the server visibility is loaded\n    return  commandList &&\n        <AwCommandList\n            alignment={ alignment }\n            anchor={ anchor }\n            commandContext={ context }\n            commandList={ commandList }\n            hideMore={hideMore}\n            overflow={ overflow }\n            showCommandLabels={ showCommandLabels }\n            trace={trace}\n            visibilityLoader={ visibilityLoader }\n            reverse={reverse}\n            visibleServerCommands={ visibleServerCommands }>\n        </AwCommandList>;\n};\n\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @returns {List<CommandOverlay>} List of command data for the given anchor\n */\nexport const awCommandBarInitFunction = async( {\n    anchor\n} ) => {\n    if( !anchor ) {\n        return [];\n    }\n    const trace = new Debug( `command:AwCommandBar:${anchor}` );\n    trace( 'Loading commands' );\n    return getCommands( anchor )\n        .then( list => {\n            trace( 'Loaded command list', list );\n            return {\n                commandList: list,\n                trace\n            };\n        } );\n};\n\n/**\n * Get the unprocessed commands for the given anchor\n *\n * @param {Object} param0 Input parameters\n * @param {Object} param0.commandList The list of commands to get server visibility for\n * @param {Object} param0.visibilityLoader The server visibility dataloader\n * @returns {Object} Current command visibility states\n */\nexport const refreshServerVisibility = async( {\n    commandList,\n    visibilityLoader,\n    trace\n} ) => {\n    if( !commandList || !visibilityLoader ) {\n        return null;\n    }\n    const serverCommandIds = commandList.map( cmd => {\n        const x = getServerConditionUsage( cmd );\n        cmd.trace( 'Server command visibility to be loaded', x );\n        return x;\n    } ).reduce( ( acc, nxt ) => acc.concat( nxt ), [] );\n    trace( 'Loading server visibility', serverCommandIds, commandList );\n    return visibilityLoader.loadMany( serverCommandIds )\n        .then( results => results.reduce( ( acc, result, idx ) => {\n            acc[ serverCommandIds[ idx ] ] = result;\n            return acc;\n        }, {} ) );\n};\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,kCAA1B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,0BAA0B,GAAG,QACmF;EAAA,IADjF;IAAEC,SAAF;IAAaC,gBAAb;IAA+BC,OAA/B;IAAwCC,MAAxC;IAAgDC,iBAAhD;IACxCC,SAAS,EAAE;MAAEC,IAAI,EAAE;QAAEC,WAAW,GAAG,IAAhB;QAAsBC,qBAAtB;QAA6CC;MAA7C;IAAR,CAD6B;IACmCC,SADnC;IAC8CC,QAD9C;IACwDC,QADxD;IACkEC;EADlE,CACiF;EACzH;EACA,OAAQN,WAAW,iBACf,QAAC,aAAD;IACI,SAAS,EAAGP,SADhB;IAEI,MAAM,EAAGG,MAFb;IAGI,cAAc,EAAGD,OAHrB;IAII,WAAW,EAAGK,WAJlB;IAKI,QAAQ,EAAEK,QALd;IAMI,QAAQ,EAAGD,QANf;IAOI,iBAAiB,EAAGP,iBAPxB;IAQI,KAAK,EAAEK,KARX;IASI,gBAAgB,EAAGR,gBATvB;IAUI,OAAO,EAAEY,OAVb;IAWI,qBAAqB,EAAGL;EAX5B;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH,CAjBM;AAmBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,wBAAwB,GAAG,eAEjC;EAAA,IAFwC;IAC3CX;EAD2C,CAExC;;EACH,IAAI,CAACA,MAAL,EAAc;IACV,OAAO,EAAP;EACH;;EACD,MAAMM,KAAK,GAAG,IAAIX,KAAJ,CAAY,wBAAuBK,MAAO,EAA1C,CAAd;EACAM,KAAK,CAAE,kBAAF,CAAL;EACA,OAAOb,WAAW,CAAEO,MAAF,CAAX,CACFY,IADE,CACIC,IAAI,IAAI;IACXP,KAAK,CAAE,qBAAF,EAAyBO,IAAzB,CAAL;IACA,OAAO;MACHT,WAAW,EAAES,IADV;MAEHP;IAFG,CAAP;EAIH,CAPE,CAAP;AAQH,CAhBM;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,uBAAuB,GAAG,eAIhC;EAAA,IAJuC;IAC1CV,WAD0C;IAE1CN,gBAF0C;IAG1CQ;EAH0C,CAIvC;;EACH,IAAI,CAACF,WAAD,IAAgB,CAACN,gBAArB,EAAwC;IACpC,OAAO,IAAP;EACH;;EACD,MAAMiB,gBAAgB,GAAGX,WAAW,CAACY,GAAZ,CAAiBC,GAAG,IAAI;IAC7C,MAAMC,CAAC,GAAGxB,uBAAuB,CAAEuB,GAAF,CAAjC;IACAA,GAAG,CAACX,KAAJ,CAAW,wCAAX,EAAqDY,CAArD;IACA,OAAOA,CAAP;EACH,CAJwB,EAIrBC,MAJqB,CAIb,CAAEC,GAAF,EAAOC,GAAP,KAAgBD,GAAG,CAACE,MAAJ,CAAYD,GAAZ,CAJH,EAIsB,EAJtB,CAAzB;EAKAf,KAAK,CAAE,2BAAF,EAA+BS,gBAA/B,EAAiDX,WAAjD,CAAL;EACA,OAAON,gBAAgB,CAACyB,QAAjB,CAA2BR,gBAA3B,EACFH,IADE,CACIY,OAAO,IAAIA,OAAO,CAACL,MAAR,CAAgB,CAAEC,GAAF,EAAOK,MAAP,EAAeC,GAAf,KAAwB;IACtDN,GAAG,CAAEL,gBAAgB,CAAEW,GAAF,CAAlB,CAAH,GAAiCD,MAAjC;IACA,OAAOL,GAAP;EACH,CAHiB,EAGf,EAHe,CADf,CAAP;AAKH,CAnBM"},"metadata":{},"sourceType":"module"}
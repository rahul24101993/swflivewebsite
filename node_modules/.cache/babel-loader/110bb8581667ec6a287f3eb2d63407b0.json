{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Definition of splmTableTranspose\n *\n * @module js/splmTableTranspose\n */\nimport _ from 'lodash';\n/**\n * Get the first column for a transposed table\n *\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\n\nconst getFirstColumn = function () {\n  return {\n    name: '',\n    field: 'transposedColumnProperty',\n    displayName: '',\n    pinnedLeft: true,\n    enableColumnMenu: false,\n    enableColumnMoving: false,\n    enableSorting: false,\n    enableColumnResizing: true,\n    enableRendererContribution: true,\n    modifiable: false,\n    width: 125\n  };\n};\n\nconst columnsChanged = function (columns, vmos) {\n  if (columns && columns.length === vmos.length + 1) {\n    for (let i = 0; i < vmos.length; i++) {\n      let vmoFound = false;\n      let vmo = vmos[i];\n\n      for (let j = 0; j < columns.length; j++) {\n        let column = columns[j];\n\n        if (vmo.uid === column.field) {\n          vmoFound = true;\n        }\n      }\n\n      if (vmoFound === false) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return true;\n};\n/**\n * Create a column to use in transpose\n *\n * @param {*} vmo A vmo to base the column on\n * @returns {*} A column generated for a transposed table\n */\n\n\nexport const getColumn = function (vmo) {\n  let displayName;\n\n  if (vmo.displayName) {\n    displayName = vmo.displayName;\n  } else if (vmo.props.object_string) {\n    displayName = vmo.props.object_string.uiValues[0];\n  } else if (vmo.props.object_name) {\n    displayName = vmo.props.object_name.uiValues[0];\n  } else {\n    displayName = '';\n  }\n\n  let column = {\n    field: vmo.uid,\n    name: vmo.uid,\n    displayName: displayName,\n    enableColumnMoving: true,\n    enableColumnResizing: true,\n    enablePinning: false,\n    width: 300,\n    vmo: vmo,\n    enableRendererContribution: true,\n    headerTooltip: true,\n    modifiable: false\n  };\n\n  if (vmo.column) {\n    let mergedColumn = Object.assign(vmo.column, column);\n    mergedColumn.width = mergedColumn.drawnWidth;\n    return mergedColumn;\n  }\n\n  return column;\n};\n/**\n * Get the first column for a transposed table\n *\n * @param {Array} columns the previous columns\n * @param {Array} vmos the vmos in order\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\n\nexport const getTransposedColumns = function (columns, vmos) {\n  let orderedVmos = vmos; // Maintain column order on recreation, if columns are same\n\n  if (!columnsChanged(columns, vmos)) {\n    orderedVmos = [];\n    columns = _.sortBy(columns, 'index');\n\n    for (let i = 1; i < columns.length; i++) {\n      let uid = columns[i].field;\n\n      for (let j = 0; j < vmos.length; j++) {\n        let vmo = vmos[j];\n\n        if (vmo.uid === uid) {\n          vmo.column = columns[i];\n          orderedVmos.push(vmo);\n          break;\n        }\n      }\n    }\n  }\n\n  return [getFirstColumn()].concat(orderedVmos.map(getColumn));\n};\nexport const getTransposedVmos = function (columns, viewModelObjects) {\n  for (let i = 0; i < columns.length; i++) {\n    columns[i].visible = !columns[i].hasOwnProperty('visible') || columns[i].visible;\n  }\n\n  let visibleColumns = _.filter(columns, function (column) {\n    if (column.visible) {\n      return column;\n    }\n\n    return false;\n  });\n\n  let columnVmos = [];\n\n  for (let i = 0; i < visibleColumns.length; i++) {\n    let column = visibleColumns[i];\n    let columnVmo = {\n      props: {\n        transposedColumnProperty: {\n          uiValue: column.displayName,\n          dbValue: column.field\n        }\n      }\n    }; // Icon column is special for icon cell rendering. Add property to distinguish it from other generated vmos.\n\n    if (column.name === 'icon') {\n      columnVmo.name = 'icon';\n    }\n\n    for (let j = 0; j < viewModelObjects.length; j++) {\n      let object = viewModelObjects[j]; // Add icon image data for later use in icon cell rendering\n\n      if (column.name === 'icon') {\n        columnVmo.props[object.uid] = {\n          thumbnailURL: object.thumbnailURL,\n          typeIconURL: object.typeIconURL,\n          iconURL: object.iconURL\n        };\n      } else {\n        columnVmo.props[object.uid] = object.props[column.field];\n      }\n    }\n\n    columnVmos.push(columnVmo);\n  }\n\n  return columnVmos;\n};\nexport default {\n  getColumn,\n  getTransposedColumns,\n  getTransposedVmos\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableTranspose.js"],"names":["getFirstColumn","name","field","displayName","pinnedLeft","enableColumnMenu","enableColumnMoving","enableSorting","enableColumnResizing","enableRendererContribution","modifiable","width","columnsChanged","columns","vmos","i","vmoFound","vmo","j","column","getColumn","enablePinning","headerTooltip","mergedColumn","Object","getTransposedColumns","orderedVmos","_","uid","getTransposedVmos","visibleColumns","columnVmos","columnVmo","props","transposedColumnProperty","uiValue","dbValue","viewModelObjects","object","thumbnailURL","typeIconURL","iconURL"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/**\n * Definition of splmTableTranspose\n *\n * @module js/splmTableTranspose\n */\nimport _ from 'lodash';\n\n/**\n * Get the first column for a transposed table\n *\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\nconst getFirstColumn = function() {\n    return {\n        name: '',\n        field: 'transposedColumnProperty',\n        displayName: '',\n        pinnedLeft: true,\n        enableColumnMenu: false,\n        enableColumnMoving: false,\n        enableSorting: false,\n        enableColumnResizing: true,\n        enableRendererContribution: true,\n        modifiable: false,\n        width: 125\n    };\n};\n\nconst columnsChanged = function( columns, vmos ) {\n    if( columns && columns.length === vmos.length + 1 ) {\n        for( let i = 0; i < vmos.length; i++ ) {\n            let vmoFound = false;\n            let vmo = vmos[ i ];\n            for( let j = 0; j < columns.length; j++ ) {\n                let column = columns[ j ];\n                if( vmo.uid === column.field ) {\n                    vmoFound = true;\n                }\n            }\n            if( vmoFound === false ) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return true;\n};\n\n/**\n * Create a column to use in transpose\n *\n * @param {*} vmo A vmo to base the column on\n * @returns {*} A column generated for a transposed table\n */\nexport const getColumn = function( vmo ) {\n    let displayName;\n    if( vmo.displayName ) {\n        displayName = vmo.displayName;\n    } else if ( vmo.props.object_string ) {\n        displayName = vmo.props.object_string.uiValues[0];\n    } else if( vmo.props.object_name ) {\n        displayName = vmo.props.object_name.uiValues[0];\n    }else {\n        displayName = '';\n    }\n\n    let column = {\n        field: vmo.uid,\n        name: vmo.uid,\n        displayName: displayName,\n        enableColumnMoving: true,\n        enableColumnResizing: true,\n        enablePinning: false,\n        width: 300,\n        vmo: vmo,\n        enableRendererContribution: true,\n        headerTooltip: true,\n        modifiable: false\n    };\n\n    if( vmo.column ) {\n        let mergedColumn = Object.assign( vmo.column, column );\n        mergedColumn.width = mergedColumn.drawnWidth;\n        return mergedColumn;\n    }\n\n    return column;\n};\n\n/**\n * Get the first column for a transposed table\n *\n * @param {Array} columns the previous columns\n * @param {Array} vmos the vmos in order\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\nexport const getTransposedColumns = function( columns, vmos ) {\n    let orderedVmos = vmos;\n    // Maintain column order on recreation, if columns are same\n    if( !columnsChanged( columns, vmos ) ) {\n        orderedVmos = [];\n        columns = _.sortBy( columns, 'index' );\n        for( let i = 1; i < columns.length; i++ ) {\n            let uid = columns[ i ].field;\n            for( let j = 0; j < vmos.length; j++ ) {\n                let vmo = vmos[ j ];\n                if( vmo.uid === uid ) {\n                    vmo.column = columns[ i ];\n                    orderedVmos.push( vmo );\n                    break;\n                }\n            }\n        }\n    }\n    return [ getFirstColumn() ].concat( orderedVmos.map( getColumn ) );\n};\n\nexport const getTransposedVmos = function( columns, viewModelObjects ) {\n    for( let i = 0; i < columns.length; i++ ) {\n        columns[ i ].visible = !columns[ i ].hasOwnProperty( 'visible' ) || columns[ i ].visible;\n    }\n\n    let visibleColumns = _.filter( columns, function( column ) {\n        if( column.visible ) {\n            return column;\n        }\n        return false;\n    } );\n\n    let columnVmos = [];\n    for( let i = 0; i < visibleColumns.length; i++ ) {\n        let column = visibleColumns[ i ];\n        let columnVmo = {\n            props: {\n                transposedColumnProperty: {\n                    uiValue: column.displayName,\n                    dbValue: column.field\n                }\n            }\n        };\n\n        // Icon column is special for icon cell rendering. Add property to distinguish it from other generated vmos.\n        if( column.name === 'icon' ) {\n            columnVmo.name = 'icon';\n        }\n\n        for( let j = 0; j < viewModelObjects.length; j++ ) {\n            let object = viewModelObjects[ j ];\n            // Add icon image data for later use in icon cell rendering\n            if( column.name === 'icon' ) {\n                columnVmo.props[ object.uid ] = {\n                    thumbnailURL: object.thumbnailURL,\n                    typeIconURL: object.typeIconURL,\n                    iconURL: object.iconURL\n                };\n            } else {\n                columnVmo.props[ object.uid ] = object.props[ column.field ];\n            }\n        }\n        columnVmos.push( columnVmo );\n    }\n\n    return columnVmos;\n};\n\nexport default {\n    getColumn,\n    getTransposedColumns,\n    getTransposedVmos\n};\n"]},"metadata":{},"sourceType":"module"}
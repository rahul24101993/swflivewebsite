{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/AwCommandService\n */import AwExtendedTooltip from'viewmodel/AwExtendedTooltipViewModel';import AwIcon from'viewmodel/AwIconViewModel';import AwPic from'viewmodel/AwPicViewModel';import AwPopup from'viewmodel/AwPopupViewModel';import eventBus from'js/eventBus';import{DerivedStateResult}from'js/derivedContextService';import{assignWith,get}from'lodash';import{getStringBetweenDoubleMustaches}from'js/parsingUtils';import analyticsSvc from'js/analyticsService';import*as cas from'js/centralAggregationService';/**\n * TODO: Predictive UI\n *   - Why is command calling two apis on analytics service? Need to merge and split internally\n *   - Can move to creation of input to this component\n */ /**\n * Method to publish analytics to server\n * @param {Object} command - command clicked by user\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const publishAnalytics=command=>{let commandLogData={sanAnalyticsType:'Commands',sanCommandId:command.id,sanCommandTitle:command.title};analyticsSvc.logCommands(commandLogData);};/**\n * Component to render a command that has already been processed\n *\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */export const awCommandRenderFunction=_ref=>{let{visibilityLoader,viewModel:{dispatch,data:{isCommandExecuting}},command,commandContext,ctx,ctxMin:{commandClass},runActionWithViewModel,actions:{openCommandPopup},alignment,overflow=false}=_ref;/**\n     * Click handler for the command button\n     *\n     * @param {Event} e Click event\n     */const executeCommand=async e=>{e.stopPropagation();eventBus.publish('removeMessages',{});dispatch({path:'data.isCommandExecuting',value:true});const result=await command.execute(runActionWithViewModel,{...commandContext,popupAction:openCommandPopup,event:e});dispatch({path:'data.isCommandExecuting',value:false});logUserGesture();publishAnalytics(command);if(command.hasPopup){const overrideOptions=result.inputData.options;openCommandPopup.show({...overrideOptions,placement:alignment==='VERTICAL'?'left-start':'bottom-start',context:getPopupContext(overrideOptions)});}};const getParentGroupId=function(){let parentGroupId='';if(commandContext&&commandContext.command){parentGroupId=commandContext.command.id;}return parentGroupId;};const getSubject=function(){let subject={};if(commandContext&&commandContext.selectionData){let pselected=commandContext.selectionData.pselected?commandContext.selectionData.pselected:'';let selected=commandContext.selectionData.selected?commandContext.selectionData.selected:'';subject={pselected:pselected,selected:selected};}return subject;};const logUserGesture=function(){let widgetInfo={commandId:command.id,parentGroupId:getParentGroupId(),commandContext:commandContext};cas.notify({widgetInfo:widgetInfo,userGesture:'commandClick',subject:getSubject()});};const getTooltipPlacement=function(){var placement='top';if(alignment==='VERTICAL'){placement='left';}return placement;};const getPopupContext=options=>{const scope={commandContext};let subPanelContext=assignWith({},options.subPanelContext,(objValue,srcValue)=>{const path=getStringBetweenDoubleMustaches(objValue||srcValue);return get(scope,path);});return{anchor:command.id,//TODO: Command context will need to be included in this also\ncontext:{command,...commandContext},visibilityLoader,subPanelContext,childCommandClickCallback:hasPopup=>{if(hasPopup){return;}openCommandPopup.hide();}};};return/*#__PURE__*/_jsxs(\"div\",{className:'aw-command',ref:openCommandPopup.reference,title:command.extendedTooltip||command.description?null:command.title,children:[/*#__PURE__*/_jsxs(\"button\",{type:\"button\"//TODO: button-id vs command-id vs data-command-id - not clear why changed to commandId\n,\"button-id\":command.id,\"command-id\":command.id,\"data-command-id\":command.id,className:commandClass+(openCommandPopup.open?' aw-state-selected':''),disabled:isCommandExecuting||!command.enabled,\"aria-disabled\":isCommandExecuting||!command.enabled,title:command.extendedTooltip||command.description?null:command.title,\"aria-label\":command.title,\"aria-haspopup\":command.hasPopup,onClick:executeCommand,tabIndex:overflow?-1:0,children:[/*#__PURE__*/_jsxs(\"div\",{className:getCommandIconClass(command.hasPopup),children:[/*#__PURE__*/_jsx(AwPic,{className:\"aw-commands-svg\",iconId:command.icon}),command.hasPopup?/*#__PURE__*/_jsx(\"div\",{className:\"aw-widgets-groupCommandStack\",children:/*#__PURE__*/_jsx(AwIcon,{iconId:\"miscDownArrow_uxRefresh\"})}):null,command.decorator&&command.decorator.text&&command.decorator.text!=='{0}'&&command.decorator.visibleWhen?/*#__PURE__*/_jsx(\"div\",{className:\"aw-commands-cellDecorator\",children:command.decorator.className?/*#__PURE__*/_jsx(\"div\",{className:command.decorator.className,children:command.decorator.text}):/*#__PURE__*/_jsx(\"div\",{children:command.decorator.text})}):null]}),/*#__PURE__*/_jsx(\"div\",{className:\"aw-commands-showIconLabel aw-commands-commandIconButtonText\",children:command.title})]}),/*#__PURE__*/_jsx(AwPopup,{...openCommandPopup.options}),/*#__PURE__*/_jsx(AwExtendedTooltip,{reference:openCommandPopup.reference,extendedTooltipOptions:{isCommand:true,placement:getTooltipPlacement()},extendedTooltipContext:command,extendedTooltip:command.extendedTooltip})]});};/**\n * Get the classes to use for the button in AwCommand\n *\n * @param {Object} renderContext Component render context\n * @param {String} commandId Command ID\n * @param {String} alignment Command bar alignment\n * @param {Boolean} selected Command selected state\n * @param {Boolean} enabled Command enabled state\n * @param {Boolean} isCommandExecuting Whether the command is currently executing\n * @returns {String} The class to use\n */const getCommandClass=(renderContext,commandId,alignment,selected,enabled,isCommandExecuting)=>{const classNames=['aw-commands-commandIconButton','aw-commands-command',\"aw-commandId-\".concat(commandId),alignment==='VERTICAL'?'aw-commands-commandWrapperVertical':null,alignment==='HORIZONTAL'?'aw-commands-commandWrapperHorizontal':null,selected?'aw-state-selected':null,enabled&&!isCommandExecuting?null:'disabled'].filter(x=>x);return classNames.join(' ');};/**\n * Get the class to use on the command icon\n *\n * @param {Boolean} hasPopup Whether the command is a group\n * @returns {String} Class to use for command icon\n */const getCommandIconClass=hasPopup=>\"aw-commandIcon\".concat(hasPopup?' aw-widgets-groupCommand':'');/**\n * Parser to get the class to set on command\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Current properties\n * @param {Object} data Current view model data\n * @returns {[DerivedStateResult]} Derived state configurations\n */export const getCommandClassMemo=(vmDef,prop,data)=>{return[new DerivedStateResult({ctxParameters:[],additionalParameters:[prop.command.id,prop.alignment,prop.command.selected,prop.command.enabled,data.isCommandExecuting],compute:getCommandClass})];};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service is used to find the alternate object for a given model object\n *\n * @module js/adapterService\n * @namespace adapterService\n */import adapterParser from'js/adapterParserService';import assert from'js/assert';import cfgSvc from'js/configurationService';let exports;let _adapterConfigObject;/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */ /**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Boolean} isFullyAdapted - if object should be recursively adapted\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */export let getAdaptedObjects=function(sourceObjects,isFullyAdapted){assert(_adapterConfigObject,'The Adapter Config service is not loaded');return adapterParser.getAdaptedObjects(sourceObjects,_adapterConfigObject,isFullyAdapted);};/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * This is a blocking call and assumes that the underlying property on current object is already loaded and available\n * in cdm for the adapter service to fetch the adapted object. This function does not perform soa call neither does it\n * support capability to invoke functions from dependent modules\n *\n * @param {Array} sourceObjects - source objects\n * @return {Array} Adapted objects\n */export let getAdaptedObjectsSync=function(sourceObjects){assert(_adapterConfigObject,'The Adapter Config service is not loaded');return adapterParser.getAdaptedObjectsSync(sourceObjects,_adapterConfigObject);};/**\n * This method apply and evaluate the conditions on the source object and returns boolean value accordingly.\n *\n * @param {Object} sourceObject - source object\n * @return {Object} verdict object\n */export let applyConditions=function(sourceObject){adapterParser.setConfiguration(_adapterConfigObject);return adapterParser.applyConditions(sourceObject);};export let loadConfiguration=async function(){await cfgSvc.getCfg('adapters').then(adapters=>{_adapterConfigObject=adapters;});};exports={getAdaptedObjects,getAdaptedObjectsSync,applyConditions,loadConfiguration};export default exports;loadConfiguration();","map":null,"metadata":{},"sourceType":"module"}
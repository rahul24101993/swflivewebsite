{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Module for various FMS related utilities\n *\n * @module js/fmsUtils\n *\n * @namespace fmsUtils\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n/**\n * The FMS proxy servlet context. This must be the same as the FmsProxyServlet mapping in the web.xml\n */\n\nvar WEB_XML_FMS_PROXY_CONTEXT = 'fms';\n/**\n * Relative path to the FMS proxy download service.\n */\n\nvar CLIENT_FMS_DOWNLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsdownload/';\n/**\n * Relative path to the FMS proxy download service.\n */\n\nvar CLIENT_FMS_UPLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsupload/'; // -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n\nvar exports = {};\n/**\n * Build url from a file ticket.\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n *\n * @return {String} url\n */\n\nvar _buildUrlFromFileTicket = function (fileTicket, openFileName) {\n  var fileName;\n\n  if (!_.isEmpty(openFileName)) {\n    // Remove special characters because IIS does not allow special characters in file name\n    var validOpenFileName;\n    var extensionIndex = openFileName.lastIndexOf('.');\n\n    if (extensionIndex > 0) {\n      var extension = openFileName.substring(extensionIndex + 1);\n      var fileNameWithoutExtension = openFileName.substring(0, extensionIndex);\n      validOpenFileName = fileNameWithoutExtension.replace(/[<>*%:&]/, '') + '.' + extension;\n    } else {\n      validOpenFileName = openFileName.replace(/[<>*%:&]/, '');\n    }\n\n    fileName = encodeURIComponent(validOpenFileName);\n  } else {\n    fileName = exports.getFilenameFromTicket(fileTicket);\n  }\n\n  var downloadUri = CLIENT_FMS_DOWNLOAD_PATH + fileName + '?ticket=' + encodeURIComponent(fileTicket);\n  return browserUtils.getBaseURL() + downloadUri;\n};\n/**\n * Get the file name from FMS ticket\n *\n * @param {String} ticket - The file ticket\n * @return {String} File name\n */\n\n\nexport let getFilenameFromTicket = function (ticket) {\n  // Check for forward or backslash in the ticket string\n  var lastfslash = ticket.lastIndexOf('/');\n  var lastbslash = ticket.lastIndexOf('\\\\');\n  var fnamestart = Math.max(lastfslash, lastbslash) + 1;\n\n  if (fnamestart > 0 && fnamestart < ticket.length) {\n    return ticket.substring(fnamestart);\n  } // Check for a URL Encoded forward or backslash in the ticket string\n\n\n  var lastEncodedFS = ticket.lastIndexOf('%2f');\n  var lastEncodedBS = ticket.lastIndexOf('%5c');\n  var encodedfnamestart = Math.max(lastEncodedFS, lastEncodedBS) + 3;\n\n  if (encodedfnamestart > 0 && encodedfnamestart < ticket.length) {\n    return ticket.substring(encodedfnamestart);\n  } // Return empty string\n\n\n  return '';\n};\n/**\n * Get the FMS Url\n *\n * @return {String} The FMS Url\n */\n\nexport let getFMSUrl = function () {\n  return CLIENT_FMS_DOWNLOAD_PATH;\n};\n/**\n * Looks up and returns the <b>full</b> FMS upload URL.\n *\n * @return {String} The fms upload url.\n */\n\nexport let getFMSFullUploadUrl = function () {\n  return browserUtils.getBaseURL() + CLIENT_FMS_UPLOAD_PATH;\n};\n/**\n * Get the URI to load the file from FMS given a ticket and original filename.\n *\n * @param {String} ticket - FMS ticket\n * @param {String} originalFilename - (Optional) The original file name to include on the Uri and returned in\n *            content-disposition. The filename will be generated from the ticket it not included.\n *\n * @return {String} The Uri to access the file.\n */\n\nexport let getFileUri = function (ticket, originalFilename) {\n  var filename = !_.isEmpty(originalFilename) ? originalFilename : exports.getFilenameFromTicket(ticket); // Double encoding ticket here because it will be re-encoded by FmsProxyServlet.\n\n  return awConfiguration.get('baseUrl') + '/' + exports.getFMSUrl() + encodeURIComponent(filename) + '?ticket=' + encodeURIComponent(ticket);\n};\n/**\n * Get the FSC URI from given file ticket\n *\n * @param {String} fileTicket - The File ticket\n *\n * @return {String} The FSC URI\n */\n\nexport let getFscUri = function (fileTicket) {\n  var fscUri = '';\n  var httpLocation = fileTicket.indexOf('http');\n  var percentSign = fileTicket.lastIndexOf('%');\n\n  if (httpLocation !== -1 && percentSign !== -1) {\n    fscUri = fileTicket.substring(httpLocation, percentSign);\n    var decodedUri = decodeURIComponent(fscUri);\n\n    if (decodedUri) {\n      decodedUri = decodedUri.replace(';', '/');\n      fscUri = decodedUri;\n    }\n  }\n\n  return fscUri;\n};\n/**\n * Open a file given the file ticket\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n */\n\nexport let openFile = function (fileTicket, openFileName) {\n  if (_.isString(fileTicket) && fileTicket.length > 0) {\n    window.open(_buildUrlFromFileTicket(fileTicket, openFileName), '_self', 'enabled');\n  }\n};\n/**\n * Open one or more files given one or more file tickets\n *\n * @param {OBJECTARRAY} fileNameAndTicketsArr - The array of structure of file name and file ticket\n */\n\nexport let openFiles = function (fileNameAndTicketsArr) {\n  _.forEach(fileNameAndTicketsArr, function (fileNameAndTicket) {\n    if (_.isString(fileNameAndTicket.fileName) && _.isString(fileNameAndTicket.fileTicket) && fileNameAndTicket.fileName !== '' && fileNameAndTicket.fileTicket !== '') {\n      // window.open does NOT work in a for loop and fails after the first iteration with the below chrome error\n      // 'Resource interpreted as Document but transferred with MIME type application/octet-stream' , hence commenting\n      // and replacing the logic to behave like file downloads in polarion\n      //  window.open( _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName ), '_self', 'enabled' );\n      var link = document.createElement('a');\n      link.target = '_blank';\n      link.href = _buildUrlFromFileTicket(fileNameAndTicket.fileTicket, fileNameAndTicket.fileName);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    }\n  });\n};\n/**\n * Open the file in new window\n *\n * @param {String} fileTicket - The file ticket\n */\n\nexport let openFileInNewWindow = function (fileTicket) {\n  if (_.isString(fileTicket) && fileTicket.length > 0) {\n    window.open(_buildUrlFromFileTicket(fileTicket), '_blank', 'enabled');\n  }\n};\nexports = {\n  getFilenameFromTicket,\n  getFMSUrl,\n  getFMSFullUploadUrl,\n  getFileUri,\n  getFscUri,\n  openFile,\n  openFiles,\n  openFileInNewWindow\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/fmsUtils.js"],"names":["WEB_XML_FMS_PROXY_CONTEXT","CLIENT_FMS_DOWNLOAD_PATH","CLIENT_FMS_UPLOAD_PATH","exports","_buildUrlFromFileTicket","_","extensionIndex","openFileName","extension","fileNameWithoutExtension","validOpenFileName","fileName","encodeURIComponent","downloadUri","browserUtils","getFilenameFromTicket","lastfslash","ticket","lastbslash","fnamestart","Math","lastEncodedFS","lastEncodedBS","encodedfnamestart","getFMSUrl","getFMSFullUploadUrl","getFileUri","filename","awConfiguration","getFscUri","fscUri","httpLocation","fileTicket","percentSign","decodedUri","decodeURIComponent","openFile","window","openFiles","fileNameAndTicket","link","document","openFileInNewWindow"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Module for various FMS related utilities\n *\n * @module js/fmsUtils\n *\n * @namespace fmsUtils\n */\nimport _ from 'lodash';\nimport browserUtils from 'js/browserUtils';\nimport awConfiguration from 'js/awConfiguration';\n\n/**\n * The FMS proxy servlet context. This must be the same as the FmsProxyServlet mapping in the web.xml\n */\nvar WEB_XML_FMS_PROXY_CONTEXT = 'fms';\n\n/**\n * Relative path to the FMS proxy download service.\n */\nvar CLIENT_FMS_DOWNLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsdownload/';\n\n/**\n * Relative path to the FMS proxy download service.\n */\nvar CLIENT_FMS_UPLOAD_PATH = WEB_XML_FMS_PROXY_CONTEXT + '/fmsupload/';\n\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n\nvar exports = {};\n\n\n/**\n * Build url from a file ticket.\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n *\n * @return {String} url\n */\nvar _buildUrlFromFileTicket = function( fileTicket, openFileName ) {\n    var fileName;\n\n    if( !_.isEmpty( openFileName ) ) {\n        // Remove special characters because IIS does not allow special characters in file name\n        var validOpenFileName;\n        var extensionIndex = openFileName.lastIndexOf( '.' );\n        if( extensionIndex > 0 ) {\n            var extension = openFileName.substring( extensionIndex + 1 );\n            var fileNameWithoutExtension = openFileName.substring( 0, extensionIndex );\n            validOpenFileName = fileNameWithoutExtension.replace( /[<>*%:&]/, '' ) + '.' + extension;\n        } else {\n            validOpenFileName = openFileName.replace( /[<>*%:&]/, '' );\n        }\n        fileName = encodeURIComponent( validOpenFileName );\n    } else {\n        fileName = exports.getFilenameFromTicket( fileTicket );\n    }\n\n    var downloadUri = CLIENT_FMS_DOWNLOAD_PATH + fileName + '?ticket=' + encodeURIComponent( fileTicket );\n\n    return browserUtils.getBaseURL() + downloadUri;\n};\n\n/**\n * Get the file name from FMS ticket\n *\n * @param {String} ticket - The file ticket\n * @return {String} File name\n */\nexport let getFilenameFromTicket = function( ticket ) {\n    // Check for forward or backslash in the ticket string\n    var lastfslash = ticket.lastIndexOf( '/' );\n    var lastbslash = ticket.lastIndexOf( '\\\\' );\n\n    var fnamestart = Math.max( lastfslash, lastbslash ) + 1;\n\n    if( fnamestart > 0 && fnamestart < ticket.length ) {\n        return ticket.substring( fnamestart );\n    }\n\n    // Check for a URL Encoded forward or backslash in the ticket string\n    var lastEncodedFS = ticket.lastIndexOf( '%2f' );\n    var lastEncodedBS = ticket.lastIndexOf( '%5c' );\n\n    var encodedfnamestart = Math.max( lastEncodedFS, lastEncodedBS ) + 3;\n\n    if( encodedfnamestart > 0 && encodedfnamestart < ticket.length ) {\n        return ticket.substring( encodedfnamestart );\n    }\n\n    // Return empty string\n    return '';\n};\n\n/**\n * Get the FMS Url\n *\n * @return {String} The FMS Url\n */\nexport let getFMSUrl = function() {\n    return CLIENT_FMS_DOWNLOAD_PATH;\n};\n\n/**\n * Looks up and returns the <b>full</b> FMS upload URL.\n *\n * @return {String} The fms upload url.\n */\nexport let getFMSFullUploadUrl = function() {\n    return browserUtils.getBaseURL() + CLIENT_FMS_UPLOAD_PATH;\n};\n\n/**\n * Get the URI to load the file from FMS given a ticket and original filename.\n *\n * @param {String} ticket - FMS ticket\n * @param {String} originalFilename - (Optional) The original file name to include on the Uri and returned in\n *            content-disposition. The filename will be generated from the ticket it not included.\n *\n * @return {String} The Uri to access the file.\n */\nexport let getFileUri = function( ticket, originalFilename ) {\n    var filename = !_.isEmpty( originalFilename ) ? originalFilename : exports.getFilenameFromTicket( ticket );\n\n    // Double encoding ticket here because it will be re-encoded by FmsProxyServlet.\n    return awConfiguration.get( 'baseUrl' ) + '/' + exports.getFMSUrl() + encodeURIComponent( filename ) +\n        '?ticket=' + encodeURIComponent( ticket );\n};\n\n/**\n * Get the FSC URI from given file ticket\n *\n * @param {String} fileTicket - The File ticket\n *\n * @return {String} The FSC URI\n */\nexport let getFscUri = function( fileTicket ) {\n    var fscUri = '';\n    var httpLocation = fileTicket.indexOf( 'http' );\n    var percentSign = fileTicket.lastIndexOf( '%' );\n\n    if( httpLocation !== -1 && percentSign !== -1 ) {\n        fscUri = fileTicket.substring( httpLocation, percentSign );\n\n        var decodedUri = decodeURIComponent( fscUri );\n\n        if( decodedUri ) {\n            decodedUri = decodedUri.replace( ';', '/' );\n            fscUri = decodedUri;\n        }\n    }\n\n    return fscUri;\n};\n\n/**\n * Open a file given the file ticket\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n */\nexport let openFile = function( fileTicket, openFileName ) {\n    if( _.isString( fileTicket ) && fileTicket.length > 0 ) {\n        window.open( _buildUrlFromFileTicket( fileTicket, openFileName ), '_self', 'enabled' );\n    }\n};\n\n/**\n * Open one or more files given one or more file tickets\n *\n * @param {OBJECTARRAY} fileNameAndTicketsArr - The array of structure of file name and file ticket\n */\nexport let openFiles = function( fileNameAndTicketsArr ) {\n    _.forEach( fileNameAndTicketsArr, function( fileNameAndTicket ) {\n        if( _.isString( fileNameAndTicket.fileName ) && _.isString( fileNameAndTicket.fileTicket ) && fileNameAndTicket.fileName !== '' && fileNameAndTicket.fileTicket !== '' ) {\n            // window.open does NOT work in a for loop and fails after the first iteration with the below chrome error\n            // 'Resource interpreted as Document but transferred with MIME type application/octet-stream' , hence commenting\n            // and replacing the logic to behave like file downloads in polarion\n            //  window.open( _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName ), '_self', 'enabled' );\n            var link = document.createElement( 'a' );\n            link.target = '_blank';\n            link.href = _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName );\n            document.body.appendChild( link );\n            link.click();\n            link.remove();\n        }\n    } );\n};\n\n/**\n * Open the file in new window\n *\n * @param {String} fileTicket - The file ticket\n */\nexport let openFileInNewWindow = function( fileTicket ) {\n    if( _.isString( fileTicket ) && fileTicket.length > 0 ) {\n        window.open( _buildUrlFromFileTicket( fileTicket ), '_blank', 'enabled' );\n    }\n};\n\nexports = {\n    getFilenameFromTicket,\n    getFMSUrl,\n    getFMSFullUploadUrl,\n    getFileUri,\n    getFscUri,\n    openFile,\n    openFiles,\n    openFileInNewWindow\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
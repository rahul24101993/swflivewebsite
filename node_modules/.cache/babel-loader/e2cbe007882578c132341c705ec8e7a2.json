{"ast":null,"code":"var _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(); // Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * @module js/reactHelper\n */\n\n\nimport React, { useState } from 'react';\nimport parse from 'html-react-parser';\nimport _ from 'lodash';\n/**\n * useReducer hook\n * @param {function} reducer reducer function\n * @param {object} initStateObj init state object\n * @param {function} initStateFn function to init state\n * @returns {Array} react hook in data-dispatch pair\n */\n\nexport function useReducer(reducer, initStateObj, initStateFn) {\n  _s4();\n\n  _s();\n\n  const [data, setDataState] = React.useState(initStateObj || initStateFn); // overlay for async practice, using ref\n  // https://github.com/nathanbuchar/react-hook-thunk-reducer\n\n  const dataRef = React.useRef(data);\n  const getData = React.useCallback(() => dataRef.current, [dataRef]);\n  const setData = React.useCallback(newState => {\n    dataRef.current = newState;\n    setDataState(newState);\n  }, [dataRef, setDataState]); // dispatch\n\n  const dispatch = React.useCallback(action => {\n    const newData = reducer(getData(), action); // NOTE: blindly set data will cause update issue without comparison\n\n    if (newData !== data) {\n      setData(newData);\n    }\n  }, [reducer, getData]);\n  return [data, dispatch, getData];\n}\n/**\n * General chainable init hook\n * @param {function} fn call back function for useEffect hook\n * @param {boolean} initialized true if former hook is done\n */\n\n_s4(useReducer, \"nvCZf+SOnmMCVUvPaAMKS5qUZmQ=\");\n\n_s(useReducer, \"jMfEV3jokd8yXg3YBHW//woB++4=\");\n\nexport function useInitHook(fn) {\n  _s5();\n\n  _s2();\n\n  let initialized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  React.useEffect(() => initialized ? fn() : undefined, [initialized]);\n} // Follow Stu's suggestion to add a cache\n\n_s5(useInitHook, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_s2(useInitHook, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport const convertToHtml = value => parse(value); // revisitme Charu - please see discussion on MR476\n\n/**\n * Maps the objects on the child elements\n * @param {Array} children child elements\n * @param {object} context context to be mapped\n * @returns {Array} mapped child elements\n */\n\nexport function mapChildren(children, context) {\n  // case1: children is functions in form of {}\n  // case2: children in normal form\n  children = _.concat([], children);\n  let final_children = children.map(item => typeof item === 'function' ? item(context) : item);\n  return React.Children.map(final_children, child => {\n    let {\n      children\n    } = child.props || {}; // should always keep the children\n    // case1: children is functions in form of {}\n    // case2: children in normal form\n\n    if (typeof children === 'function') {\n      children = children(context);\n    }\n\n    return /*#__PURE__*/React.cloneElement(child, context, children);\n  });\n}\nexport function forwardComponent(children, context) {\n  return /*#__PURE__*/React.forwardRef();\n}\nexport const useAtomicDataReducer = declViewModelJson => {\n  _s6();\n\n  _s3(); // fieldsdata\n\n\n  const atomicDataHook = {};\n  const atomicDataRef = {};\n\n  for (const prop in declViewModelJson.data) {\n    if (declViewModelJson.data[prop] && declViewModelJson.data[prop].meta) {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const [atomicData, dataUpdater] = useState(declViewModelJson.data[prop].initialValues);\n      atomicDataHook[prop] = [atomicData, dataUpdater]; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      const dataRef = React.useRef(atomicData); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      const getAtomicData = React.useCallback(() => dataRef.current, [dataRef]); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      const setAtomicData = newState => {\n        dataRef.current = newState;\n        dataUpdater(newState);\n      };\n\n      atomicDataRef[prop] = {\n        getAtomicData,\n        setAtomicData\n      };\n    }\n  }\n\n  return {\n    atomicDataHook,\n    atomicDataRef\n  };\n};\n\n_s6(useAtomicDataReducer, \"dRGhurJwRmcpe+V9jO8+unBYA3I=\");\n\n_s3(useAtomicDataReducer, \"vXu7zk0TXgsKXb9d4INd+nVjUZg=\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/reactHelper.js"],"names":["useReducer","React","initStateObj","dataRef","getData","setData","newState","setDataState","dispatch","action","newData","reducer","useInitHook","initialized","fn","convertToHtml","value","parse","children","_","final_children","item","child","useAtomicDataReducer","declViewModelJson","atomicDataHook","atomicDataRef","useState","getAtomicData","setAtomicData","dataUpdater"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * @module js/reactHelper\n */\nimport React, { useState } from 'react';\nimport parse from 'html-react-parser';\nimport _ from 'lodash';\n\n/**\n * useReducer hook\n * @param {function} reducer reducer function\n * @param {object} initStateObj init state object\n * @param {function} initStateFn function to init state\n * @returns {Array} react hook in data-dispatch pair\n */\nexport function useReducer( reducer, initStateObj, initStateFn ) {\n    const [ data, setDataState ] = React.useState( initStateObj || initStateFn );\n\n    // overlay for async practice, using ref\n    // https://github.com/nathanbuchar/react-hook-thunk-reducer\n    const dataRef = React.useRef( data );\n    const getData = React.useCallback( () => dataRef.current, [ dataRef ] );\n    const setData = React.useCallback( ( newState ) => {\n        dataRef.current = newState;\n        setDataState( newState );\n    }, [ dataRef, setDataState ] );\n\n    // dispatch\n    const dispatch = React.useCallback( ( action ) => {\n        const newData = reducer( getData(), action );\n        // NOTE: blindly set data will cause update issue without comparison\n        if( newData !== data ) {\n            setData( newData );\n        }\n    }, [ reducer, getData ] );\n\n    return [ data, dispatch, getData ];\n}\n\n/**\n * General chainable init hook\n * @param {function} fn call back function for useEffect hook\n * @param {boolean} initialized true if former hook is done\n */\nexport function useInitHook( fn, initialized = true ) {\n    React.useEffect( () => initialized ? fn() : undefined, [ initialized ] );\n}\n\n// Follow Stu's suggestion to add a cache\nexport const convertToHtml = value => parse( value );\n\n// revisitme Charu - please see discussion on MR476\n/**\n * Maps the objects on the child elements\n * @param {Array} children child elements\n * @param {object} context context to be mapped\n * @returns {Array} mapped child elements\n */\nexport function mapChildren( children, context ) {\n    // case1: children is functions in form of {}\n    // case2: children in normal form\n    children = _.concat( [], children );\n    let final_children = children.map( ( item )=> typeof item === 'function' ? item( context ) : item );\n\n    return React.Children.map( final_children, child => {\n        let { children } = child.props || {};\n        // should always keep the children\n        // case1: children is functions in form of {}\n        // case2: children in normal form\n        if ( typeof children === 'function' ) {\n            children = children( context );\n        }\n        return React.cloneElement( child, context, children );\n    } );\n}\n\nexport function forwardComponent( children, context ) {\n    return React.forwardRef();\n}\n\nexport const useAtomicDataReducer = ( declViewModelJson ) => {\n    // fieldsdata\n    const atomicDataHook = {};\n    const atomicDataRef = {};\n    for( const prop in declViewModelJson.data ) {\n        if( declViewModelJson.data[ prop ] && declViewModelJson.data[ prop ].meta ) {\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const [ atomicData, dataUpdater ] = useState( declViewModelJson.data[ prop ].initialValues );\n            atomicDataHook[ prop ] = [ atomicData, dataUpdater ];\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const dataRef = React.useRef( atomicData );\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const getAtomicData = React.useCallback( () => dataRef.current, [ dataRef ] );\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            const setAtomicData = ( newState ) => {\n                dataRef.current = newState;\n                dataUpdater( newState );\n            };\n\n            atomicDataRef[ prop ] = {\n                getAtomicData,\n                setAtomicData\n            };\n        }\n    }\n    return { atomicDataHook, atomicDataRef };\n};\n"]},"metadata":{},"sourceType":"module"}
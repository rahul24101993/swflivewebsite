{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwExtendedTooltipService.js\";\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport parsingUtils from 'js/parsingUtils';\nimport _ from 'lodash';\nimport utils from 'js/popupUtils';\nimport Debug from 'debug';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst trace = new Debug('AwExtendedTooltip');\n\nconst isJSONObject = jsonString => {\n  try {\n    JSON.parse(jsonString);\n\n    if (typeof jsonString === 'string' && jsonString.length === 0) {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const awExtendedTooltipRenderFunction = props => {\n  let {\n    extendedTooltipPopup\n  } = props.actions;\n  let {\n    extTooltipData,\n    extendedTooltip,\n    extendedTooltipContext,\n    reference\n  } = props;\n\n  const initializer = () => {\n    trace('initialize tooltip with props: ', props); // set default view\n\n    extendedTooltip = extendedTooltip || 'ExtendedTooltipDefault';\n\n    if (_.isString(extendedTooltip) && extendedTooltip.indexOf('.') === -1 && !isJSONObject(extendedTooltip)) {\n      extendedTooltip = {\n        view: extendedTooltip\n      };\n    } else if (_.isString(extendedTooltip) && extendedTooltip.indexOf('.') > 0) {\n      let key = extendedTooltip.split('.')[1];\n      extendedTooltip = _.get(extTooltipData, key).view ? _.get(extTooltipData, key) : null;\n    }\n\n    if (extendedTooltip.extendedTooltipContent) {\n      let content = extendedTooltip.extendedTooltipContent;\n\n      if (extTooltipData && _.startsWith(content, '{{')) {\n        let viewModelProp = parsingUtils.getStringBetweenDoubleMustaches(content);\n        content = _.get({\n          data: extTooltipData\n        }, viewModelProp);\n      }\n\n      extendedTooltip.content = content;\n    } // init subPanelContext, subPanelContext always should be an object.\n    // there are cases where application(ACE) pass in string values due to wrong usage.\n\n\n    if (!extendedTooltip.subPanelContext && extendedTooltipContext) {\n      // retrieve context by get, so that we can support any level path access: eg: data.tooltips.tooltip1\n      let contextValue = extendedTooltipContext;\n\n      if (typeof contextValue === 'object') {// extendedTooltip.subPanelContext = contextValue || {};\n      }\n    } // return Promise.resolve();\n\n  }; // modify ref belongs to side effect, should wrap with useEffect\n  // //override placement based on dynamic configuration\n  // extendedTooltipPopup.reference.current = prop.reference.current;\n  // extendedTooltipPopup.userOptions.current = extendedTooltipOptions;\n\n\n  const getContent = () => {\n    if (reference.current !== null) {\n      utils.removeNativeTitle(reference.current);\n    }\n\n    extendedTooltipPopup.options && Object.assign(extendedTooltipPopup.options, utils.tooltipAdapteOption(extendedTooltipPopup.options, reference.current));\n\n    if (!extendedTooltipPopup.options.placement) {\n      extendedTooltipPopup.options.placement = 'left';\n    }\n\n    initializer();\n    const {\n      view,\n      content\n    } = extendedTooltip;\n    let result = content;\n\n    if (view) {\n      result = /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: view,\n        subPanelContext: extendedTooltipContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 31\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(AwPopup, { ...extendedTooltipPopup.options,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `sw-column aw-popup-tooltipContainer ${!view ? 'font-bold new-line' : ''}`,\n        children: [\" \", result, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  };\n\n  return extendedTooltipPopup.open && getContent();\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwExtendedTooltipService.js"],"names":["trace","isJSONObject","jsonString","JSON","awExtendedTooltipRenderFunction","props","extendedTooltipPopup","reference","initializer","extendedTooltip","_","view","key","content","extTooltipData","viewModelProp","parsingUtils","data","contextValue","getContent","utils","Object","result","extendedTooltipContext"],"mappings":"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","sourcesContent":["import AwInclude from 'viewmodel/AwIncludeViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport parsingUtils from 'js/parsingUtils';\nimport _ from 'lodash';\nimport utils from 'js/popupUtils';\nimport Debug from 'debug';\nconst trace = new Debug( 'AwExtendedTooltip' );\n\nconst isJSONObject = ( jsonString ) => {\n    try {\n        JSON.parse( jsonString );\n        if( typeof jsonString === 'string' && jsonString.length === 0 ) {\n            return false;\n        }\n    } catch ( e ) {\n        return false;\n    }\n    return true;\n};\n\nexport const awExtendedTooltipRenderFunction = ( props ) => {\n    let { extendedTooltipPopup } = props.actions;\n    let { extTooltipData, extendedTooltip, extendedTooltipContext, reference } = props;\n\n    const initializer = () => {\n        trace( 'initialize tooltip with props: ', props );\n        // set default view\n        extendedTooltip = extendedTooltip || 'ExtendedTooltipDefault';\n        if( _.isString( extendedTooltip ) && extendedTooltip.indexOf( '.' ) === -1 && !isJSONObject( extendedTooltip ) ) {\n            extendedTooltip = { view: extendedTooltip };\n        } else if( _.isString( extendedTooltip ) && extendedTooltip.indexOf( '.' ) > 0 ) {\n            let key = extendedTooltip.split( '.' )[ 1 ];\n            extendedTooltip = _.get( extTooltipData, key ).view ? _.get( extTooltipData, key ) : null;\n        }\n\n        if( extendedTooltip.extendedTooltipContent ) {\n            let content = extendedTooltip.extendedTooltipContent;\n            if( extTooltipData && _.startsWith( content, '{{' ) ) {\n                let viewModelProp = parsingUtils.getStringBetweenDoubleMustaches( content );\n                content = _.get( { data: extTooltipData }, viewModelProp );\n            }\n            extendedTooltip.content = content;\n        }\n        // init subPanelContext, subPanelContext always should be an object.\n        // there are cases where application(ACE) pass in string values due to wrong usage.\n        if( !extendedTooltip.subPanelContext && extendedTooltipContext ) {\n            // retrieve context by get, so that we can support any level path access: eg: data.tooltips.tooltip1\n            let contextValue = extendedTooltipContext;\n            if( typeof contextValue === 'object' ) {\n                // extendedTooltip.subPanelContext = contextValue || {};\n            }\n        }\n        // return Promise.resolve();\n    };\n\n    // modify ref belongs to side effect, should wrap with useEffect\n    // //override placement based on dynamic configuration\n    // extendedTooltipPopup.reference.current = prop.reference.current;\n    // extendedTooltipPopup.userOptions.current = extendedTooltipOptions;\n\n    const getContent = () => {\n        if( reference.current !== null ) {\n            utils.removeNativeTitle( reference.current );\n        }\n        extendedTooltipPopup.options && Object.assign( extendedTooltipPopup.options, utils.tooltipAdapteOption( extendedTooltipPopup.options, reference.current ) );\n        if( !extendedTooltipPopup.options.placement ) {\n            extendedTooltipPopup.options.placement = 'left';\n        }\n        initializer();\n        const { view, content } = extendedTooltip;\n        let result = content;\n        if( view ) { result = <AwInclude name={view} subPanelContext={extendedTooltipContext}/>; }\n        return <AwPopup {...extendedTooltipPopup.options}>\n            <div className={ `sw-column aw-popup-tooltipContainer ${ !view ? 'font-bold new-line' : '' }` }> { result } </div>\n        </AwPopup>;\n    };\n\n    return extendedTooltipPopup.open && getContent();\n};\n"]},"metadata":{},"sourceType":"module"}
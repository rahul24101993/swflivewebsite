{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Service to define for populating the dynamic data in view model format in panel.\n *\n * @module js/dynamicPropertyService\n */import modelPropertySvc from'js/modelPropertyService';import cdm from'soa/kernel/clientDataModel';import dateTimeSvc from'js/dateTimeService';import viewModelObjectSvc from'js/viewModelObjectService';import _ from'lodash';import parsingUtils from'js/parsingUtils';/**\n * Define the 'operator' that separate the 'operands' of an expression.\n */var _operators=/\\=\\=|!=|:|&&|>|>=|<|<=/;/**\n * Returns the individual fields\n *\n * @param {Object}objectData - Model object\n * @param {String}condName - Nested Property structure\n * @return {ObjectArray} output - Nested output structure\n */function _getInputData(objectData,condName){var output;if(condName==='dateApi'){var dobj=_.get(objectData,condName);var dval=null;if(dobj.dateObject){dval=dateTimeSvc.formatUTC(dobj.dateObject);}output=dval;}else{output=_.get(objectData,condName);}return output;}/**\n * Check the nested structure and returns the field.\n *\n * @param {Object}objectIndex - Index in array objects\n * @param {String}arrayObjs - Model object\n * @param {String}inArray - JSON string\n * @return {Object} Nested output structure\n */function _constructOutputData(objectIndex,arrayObjs,inArray){var output=[];for(var i in inArray){var f=Object.getOwnPropertyNames(inArray[i]);if(f[0]==='structName'){var functionName=_.get(inArray[i],f[0]);var t=_.get(inArray[i],f[1]);var k=_prepareObject(objectIndex,arrayObjs,t);output[functionName]=_.assign({},k);}else{var t2=_.get(inArray[i],f[1]);var condName=_.get(inArray[i],f[0]);output[condName]=_getInputData(arrayObjs[objectIndex],t2);}}if(output.dateValue){output.value=0;}return output;}/**\n * Return the display string from the object\n *\n * @param {Object }objectData - Input Object\n * @param {String} prop - Property string\n * @param {String} dataInput - If any specific string or property define in the Input\n * @return {String} dispName - Display String\n *\n */function _getDisplayName(objectData,prop,dataInput){var dispName;if(dataInput){var objUid=_.get(objectData,dataInput);var mObject=cdm.getObject(objUid);dispName=_.get(mObject,prop);}else{dispName=_.get(objectData,prop);}return dispName;}/**\n * Evaluate condition expression\n *\n * @param {String} expression - Expression {note: currently supporting ==,!=,&&,>,>=,<,<=}\n * @param {Object} evaluationEnv - The data environment for expression evaluation\n * @param {ObjectArray} objectData - The array of function objects which can be used in expression evaluation\n *\n * @return {Object} The evaluated condition result\n */function _evaluateCondition(expression,evaluationEnv,objectData){var operands=expression.split(_operators);var reValue=false;var tempType=_.get(objectData,operands[0]);if(tempType===operands[1]){reValue=evaluationEnv;}return reValue;}/**\n * Evaluate the condition and return the value\n *\n * @param {Object}objectData - Model object\n * @param {String}types - Property name\n *\n * @return {Object} Supported type for the declarative\n */function getPropertyValue(objectData,types){var returnVal='';for(var i in types){var f=Object.getOwnPropertyNames(types[i]);var condName=_.get(types[i],f[0]);var condVal=_.get(types[i],f[1]);var val=_evaluateCondition(condName,condVal,objectData);if(val){returnVal=val;}}return returnVal;}/**\n * Evaluate expression\n *\n * @param {String} expression - expression {note: currently supporting ==,!=,&&,>,>=,<,<=}\n * @return {ObjectArray} operands - Array of the string objects\n */function _getOperands(expression){return expression.split(_operators);}/**\n * Returns the nested property\n *\n * @param {Object}objectIndex - Index in array objects\n * @param {String}arrayObjs - Model object\n * @param {String}inArray - JSON string\n * @return {ObjectArray} output - Nested output structure\n */function _prepareObject(objectIndex,arrayObjs,inArray){var output=[];var objectData=arrayObjs[objectIndex];for(var i in inArray){var f=Object.getOwnPropertyNames(inArray[i]);var condName=_.get(inArray[i],f[0]);var condValue=_.get(inArray[i],f[1]);if(f[0]==='structName'){output[condName]=_constructOutputData(objectIndex,arrayObjs,condValue);}else{output[condName]=_getInputData(objectData,condValue);}}return output;}var exports={};/**\n * Get the view model property using the SOA input\n *\n * @param {String} arrayObjs - SOA response\n * @param {String} n - viewModel property\n * @return {ObjectArray} output - A ViewModel property object array\n */export let createDynProperty=function(arrayObjs,n){var output=[];if(n.viewModelPropValues){for(var i in arrayObjs){var g=n.viewModelPropValues;var d=Object.getOwnPropertyNames(n.viewModelPropValues);var dispName=null;var ptype=null;var dbValue=null;for(var k in d){if(d[k]==='displayName'){dispName=_getDisplayName(arrayObjs[i],g[d[k]],n.dataInput);}if(d[k]==='type'){ptype=getPropertyValue(arrayObjs[i],g[d[k]]);}if(d[k]==='dbValue'){dbValue=getPropertyValue(arrayObjs[i],g[d[k]]);}}var propAttrHolder={displayName:dispName,type:ptype,isRequired:'',isEditable:'',dbValue:dbValue,dispValue:'',labelPosition:''};var viewProp=modelPropertySvc.createViewModelProperty(propAttrHolder);if(d[k]==='propMisc'){var z=g[d[k]];for(var h in z){var pName=z[h].propName;var pValue=z[h].value;var objUid=_.get(arrayObjs[i],pValue);viewProp[pName]=objUid;}}output.push(viewProp);}}return output;};/**\n * prepare the SOA input using the JSON data for dynamic properties\n *\n * @param {Array} arrayObjs - ViewModelProperty Array\n * @param {Array} inArray - JSON array from data.\n *\n * @return {ObjectArray} Output array\n */export let createSoaInput=function(arrayObjs,inArray){var modelOutput=[];for(var obj in arrayObjs){var output=_constructOutputData(obj,arrayObjs,inArray);modelOutput.push(_.assign({},output));}return modelOutput;};/**\n * prepare the SOA input using the JSON data for dynamic properties\n *\n * @param {objectArray} dynmData - JSON array from data.\n * @param {objectArray} data - ViewModelProperty Array\n * @param {objectArray} response - response object\n *\n * @return {ObjectArray} Output array\n */export let processDataParseDefination=function(dynmData,data,response){var arrayObjs=response;var parseData=null;if(dynmData.outputFormat){var val=parsingUtils.parentGet(data,dynmData.dataInput);return exports.createSoaInput(val,dynmData.outputFormat);}if(dynmData.dataFilter){var filterStr=dynmData.dataFilter[0];var filterKeys=Object.getOwnPropertyNames(filterStr);var filterVal=filterStr[filterKeys];arrayObjs=exports.filterObjects(response,filterKeys,dynmData.path,filterVal,dynmData.dataInput);parseData=arrayObjs;}if(dynmData.outputFormatType&&dynmData.outputFormatType==='ViewModelObject'){var modelObjUid=parsingUtils.parentGet(response,dynmData.dataInput);var operationType='Edit';if(dynmData.operationType){operationType=dynmData.operationType;}var viewModelObj=viewModelObjectSvc.createViewModelObject(modelObjUid,operationType);if(viewModelObj){var propertyNames=_.keys(viewModelObj.props).sort();viewModelObj.sortedPropNames=propertyNames;}return viewModelObj;}if(dynmData.viewModelPropValues){var parseTempData=exports.createDynProperty(arrayObjs,dynmData);parseData=parseTempData;}return parseData;};/**\n * Filter the Inputs based on some condition\n *\n * @param {Object} response -Response from server\n * @param {String} filterProperty - any filter condition\n * @param {String} path - Traversal path in output\n * @param {String} expectedValue - If any condition to check\n * @param {string} filterInput - any extra parameter to check\n *\n * @return {ObjectArray} Filtered objects from source array\n */export let filterObjects=function(response,filterProperty,path,expectedValue,filterInput){var modelObjects=[];var modelObjectsArray=_.get(response,path);for(var i in modelObjectsArray){var operands=_getOperands(expectedValue);var tempObj=_.get(modelObjectsArray[i],operands[0]);if(!tempObj&&filterInput){var objUid=_.get(modelObjectsArray[i],filterInput);var mObject=cdm.getObject(objUid);tempObj=_.get(mObject,operands[0]);}if(tempObj===operands[1]){modelObjects.push(modelObjectsArray[i]);}}return modelObjects;};exports={createDynProperty,createSoaInput,processDataParseDefination,filterObjects};export default exports;","map":null,"metadata":{},"sourceType":"module"}
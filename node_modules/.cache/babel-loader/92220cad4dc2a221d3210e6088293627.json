{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is for utility functions that we want available, but don't make sense as part of the other property\n * render JS files\n *\n * @module js/uwUtilService\n */\nimport browserUtils from 'js/browserUtils';\n/**\n * The ammount the input box is allowed to move to the left/right before the UI popup (e.g. calendar, LOV ) is\n * collapsed/hidden.\n */\n\nvar _MAX_X = 45;\n/**\n * The about the input box is allowed to move to the up/down before the UI popup (e.g. calendar, LOV ) is\n * collapsed/hidden.\n */\n\nvar _MAX_Y = 40;\nvar exports = {};\n/**\n * Determines if element has scrollBar by comparing the scrollHeight with clientHeight\n *\n * @param {JqueryElement} element - The JQuery element to test\n * @returns {Boolean} 'true' if scrollBar is present\n */\n\n/**revisitme yogesh\n * Hint: jquery element usage\n * internal method, gets called by handleScroll\n\nexport let hasScrollBar = function( element ) {\n    if( element && element.get( 0 ) ) {\n        // removing 10 pixels from scrollHeight and comparing because in IE even when there is\n        // no scroll bar it shows couple of pixels difference between scrollHeight and clientHeight.\n        return element.get( 0 ).scrollHeight - 10 > element.get( 0 ).clientHeight;\n    }\n    return false;\n};\n\n/**revisitme yogesh\n * Hint: scope and element usages\n * gets called from angular directive/controller\n\nexport let handleScroll = function( scope, $element, scrollNamespace, cb ) {\n    // Check for mobile OS\n    if( !browserUtils.isMobileOS ) {\n        // Get the closest scroll panel\n        scope.$scrollPanel = $element.closest( '.ui-grid-viewport, .aw-base-scrollPanel' );\n\n        // When scroll element is found and it doesn't have scrollBar, then traverse through the DOM until\n        // '.aw-layout-panelMain' and see if there are any scroll elements who has scrollBar\n        if( scope.$scrollPanel && !exports.hasScrollBar( scope.$scrollPanel ) ) {\n            var scrollElement = scope.$scrollPanel.parentsUntil( $( '.aw-layout-panelMain' ),\n                '.aw-base-scrollPanel' ).filter( function() {\n                return exports.hasScrollBar( $( this ) ); // eslint-disable-line no-invalid-this\n            } );\n\n            if( scrollElement.hasClass( 'aw-base-scrollPanel' ) ) {\n                scope.$scrollPanel = scrollElement;\n            }\n        }\n\n        // Add scroll listener only when scroll bar is present for the element\n        if( scope.$scrollPanel && exports.hasScrollBar( scope.$scrollPanel ) ) {\n            var oldX = scope.$scrollPanel.scrollTop();\n            var oldY = scope.$scrollPanel.scrollLeft();\n\n            var eventName = 'scroll.' + scrollNamespace;\n\n            scope.$scrollPanel.on( eventName, function() {\n                if( scope.$scrollPanel ) {\n                    var curX = scope.$scrollPanel.scrollTop();\n                    var curY = scope.$scrollPanel.scrollLeft();\n\n                    if( Math.abs( oldX - curX ) > _MAX_X || Math.abs( oldY - curY ) > _MAX_Y ) {\n                        oldX = curX;\n                        oldY = curY;\n                        cb();\n                    }\n                }\n            } );\n        }\n    }\n};\n*/\n\n/**\n * Evaluate the correct identifier of an object\n * preference in the decreasing order alternateID , id , uid\n *\n * @param {OBJECT} objectToEvaluate - the object for which the identifier is to be evaluated - can be a ViewModelObject, ViewModelTreeNode or a plain JS Object\n * @return {String } unique identifier on this object if an object is passed or else return the input passed\n */\n\nexport let getEvaluatedId = function (objectToEvaluate) {\n  if (objectToEvaluate && typeof objectToEvaluate === 'object') {\n    if (objectToEvaluate.alternateID !== null && objectToEvaluate.alternateID !== undefined) {\n      return objectToEvaluate.alternateID;\n    }\n\n    if (objectToEvaluate.id !== null && objectToEvaluate.id !== undefined) {\n      return objectToEvaluate.id;\n    }\n\n    if (objectToEvaluate.uid !== null && objectToEvaluate.uid !== undefined) {\n      return objectToEvaluate.uid;\n    }\n  }\n\n  return objectToEvaluate;\n};\n/**\n * Check whether the given value is a valid number\n *\n * @return TRUE if input value is valid number\n */\n\nexport let isValidNumber = function (value) {\n  if (value !== null && value !== undefined && isFinite(value)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Check whether the given element exists\n *\n * @return TRUE if element exists\n */\n\n/**revisitme yogesh\n * Hint: jquery element\nexport let ifElementExists = function( element ) {\n    if( element && element.length ) {\n        return true;\n    }\n    return false;\n};\n*/\n\n/**\n * Check to see if the event is a result of a click in the element referenced in the query string\n *\n * There is no single way to determine what the target is, rather it varies based on the browser\n *\n * @param {Event} blurEvent - The blur event\n * @param {String} queryString - jQuery string to identify the element we're checking as the potential target\n *\n * @return TRUE if the query string finds an element that matches in the click target, FALSE otherwise\n */\n\n/**revisitme yogesh\n * Hint: scope and element usages\n * gets called from angular directive/controller\n\nexport let isBlurTarget = function( blurEvent, queryString ) {\n    var isTarget = $( blurEvent.relatedTarget ).closest( queryString ).length > 0; // Chrome Check\n\n    if( !isTarget && blurEvent.originalEvent && blurEvent.originalEvent.explicitOriginalTarget ) {\n        isTarget = $( blurEvent.originalEvent.explicitOriginalTarget ).closest( queryString ).length > 0; // Firefox Check\n    }\n\n    if( !isTarget ) {\n        isTarget = $( document.activeElement ).closest( queryString ).length > 0; // IE11\n    }\n    return isTarget;\n};\n*/\n\nexports = {\n  isValidNumber,\n  getEvaluatedId\n  /**revisitme yogesh\n   * Hint: usages in directive or controller with scope and jquery\n  isBlurTarget,\n  hasScrollBar,\n  handleScroll,\n  ifElementExists\n  */\n\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/uwUtilService.js"],"names":["_MAX_X","_MAX_Y","exports","getEvaluatedId","objectToEvaluate","isValidNumber","value","isFinite"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,YAAA,MAAA,iBAAA;AAEA;AACA;AACA;AACA;;AACA,IAAIA,MAAM,GAAV,EAAA;AAEA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAV,EAAA;AAEA,IAAIC,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,cAAc,GAAG,UAAA,gBAAA,EAA6B;EACrD,IAAIC,gBAAgB,IAAI,OAAA,gBAAA,KAAxB,QAAA,EAA+D;IAC3D,IAAIA,gBAAgB,CAAhBA,WAAAA,KAAAA,IAAAA,IAAyCA,gBAAgB,CAAhBA,WAAAA,KAA7C,SAAA,EAA0F;MACtF,OAAOA,gBAAgB,CAAvB,WAAA;IACH;;IACD,IAAIA,gBAAgB,CAAhBA,EAAAA,KAAAA,IAAAA,IAAgCA,gBAAgB,CAAhBA,EAAAA,KAApC,SAAA,EAAwE;MACpE,OAAOA,gBAAgB,CAAvB,EAAA;IACH;;IACD,IAAIA,gBAAgB,CAAhBA,GAAAA,KAAAA,IAAAA,IAAiCA,gBAAgB,CAAhBA,GAAAA,KAArC,SAAA,EAA0E;MACtE,OAAOA,gBAAgB,CAAvB,GAAA;IACH;EACJ;;EACD,OAAA,gBAAA;AAZG,CAAA;AAeP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAA,KAAA,EAAkB;EACzC,IAAIC,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAAvBA,SAAAA,IAAyCC,QAAQ,CAArD,KAAqD,CAArD,EAAiE;IAC7D,OAAA,IAAA;EACH;;EACD,OAAA,KAAA;AAJG,CAAA;AAOP;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,OAAO,GAAG;EAAA,aAAA;EAENC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AATU,CAAVD;AAWA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is for utility functions that we want available, but don't make sense as part of the other property\n * render JS files\n *\n * @module js/uwUtilService\n */\nimport browserUtils from 'js/browserUtils';\n\n/**\n * The ammount the input box is allowed to move to the left/right before the UI popup (e.g. calendar, LOV ) is\n * collapsed/hidden.\n */\nvar _MAX_X = 45;\n\n/**\n * The about the input box is allowed to move to the up/down before the UI popup (e.g. calendar, LOV ) is\n * collapsed/hidden.\n */\nvar _MAX_Y = 40;\n\nvar exports = {};\n\n/**\n * Determines if element has scrollBar by comparing the scrollHeight with clientHeight\n *\n * @param {JqueryElement} element - The JQuery element to test\n * @returns {Boolean} 'true' if scrollBar is present\n */\n/**revisitme yogesh\n * Hint: jquery element usage\n * internal method, gets called by handleScroll\n\nexport let hasScrollBar = function( element ) {\n    if( element && element.get( 0 ) ) {\n        // removing 10 pixels from scrollHeight and comparing because in IE even when there is\n        // no scroll bar it shows couple of pixels difference between scrollHeight and clientHeight.\n        return element.get( 0 ).scrollHeight - 10 > element.get( 0 ).clientHeight;\n    }\n    return false;\n};\n\n/**revisitme yogesh\n * Hint: scope and element usages\n * gets called from angular directive/controller\n\nexport let handleScroll = function( scope, $element, scrollNamespace, cb ) {\n    // Check for mobile OS\n    if( !browserUtils.isMobileOS ) {\n        // Get the closest scroll panel\n        scope.$scrollPanel = $element.closest( '.ui-grid-viewport, .aw-base-scrollPanel' );\n\n        // When scroll element is found and it doesn't have scrollBar, then traverse through the DOM until\n        // '.aw-layout-panelMain' and see if there are any scroll elements who has scrollBar\n        if( scope.$scrollPanel && !exports.hasScrollBar( scope.$scrollPanel ) ) {\n            var scrollElement = scope.$scrollPanel.parentsUntil( $( '.aw-layout-panelMain' ),\n                '.aw-base-scrollPanel' ).filter( function() {\n                return exports.hasScrollBar( $( this ) ); // eslint-disable-line no-invalid-this\n            } );\n\n            if( scrollElement.hasClass( 'aw-base-scrollPanel' ) ) {\n                scope.$scrollPanel = scrollElement;\n            }\n        }\n\n        // Add scroll listener only when scroll bar is present for the element\n        if( scope.$scrollPanel && exports.hasScrollBar( scope.$scrollPanel ) ) {\n            var oldX = scope.$scrollPanel.scrollTop();\n            var oldY = scope.$scrollPanel.scrollLeft();\n\n            var eventName = 'scroll.' + scrollNamespace;\n\n            scope.$scrollPanel.on( eventName, function() {\n                if( scope.$scrollPanel ) {\n                    var curX = scope.$scrollPanel.scrollTop();\n                    var curY = scope.$scrollPanel.scrollLeft();\n\n                    if( Math.abs( oldX - curX ) > _MAX_X || Math.abs( oldY - curY ) > _MAX_Y ) {\n                        oldX = curX;\n                        oldY = curY;\n                        cb();\n                    }\n                }\n            } );\n        }\n    }\n};\n*/\n\n/**\n * Evaluate the correct identifier of an object\n * preference in the decreasing order alternateID , id , uid\n *\n * @param {OBJECT} objectToEvaluate - the object for which the identifier is to be evaluated - can be a ViewModelObject, ViewModelTreeNode or a plain JS Object\n * @return {String } unique identifier on this object if an object is passed or else return the input passed\n */\n\nexport let getEvaluatedId = function( objectToEvaluate ) {\n    if( objectToEvaluate && typeof objectToEvaluate === 'object' ) {\n        if( objectToEvaluate.alternateID !== null && objectToEvaluate.alternateID !== undefined ) {\n            return objectToEvaluate.alternateID;\n        }\n        if( objectToEvaluate.id !== null && objectToEvaluate.id !== undefined ) {\n            return objectToEvaluate.id;\n        }\n        if( objectToEvaluate.uid !== null && objectToEvaluate.uid !== undefined ) {\n            return objectToEvaluate.uid;\n        }\n    }\n    return objectToEvaluate;\n};\n\n/**\n * Check whether the given value is a valid number\n *\n * @return TRUE if input value is valid number\n */\nexport let isValidNumber = function( value ) {\n    if( value !== null && value !== undefined && isFinite( value ) ) {\n        return true;\n    }\n    return false;\n};\n\n/**\n * Check whether the given element exists\n *\n * @return TRUE if element exists\n */\n/**revisitme yogesh\n * Hint: jquery element\nexport let ifElementExists = function( element ) {\n    if( element && element.length ) {\n        return true;\n    }\n    return false;\n};\n*/\n\n/**\n * Check to see if the event is a result of a click in the element referenced in the query string\n *\n * There is no single way to determine what the target is, rather it varies based on the browser\n *\n * @param {Event} blurEvent - The blur event\n * @param {String} queryString - jQuery string to identify the element we're checking as the potential target\n *\n * @return TRUE if the query string finds an element that matches in the click target, FALSE otherwise\n */\n/**revisitme yogesh\n * Hint: scope and element usages\n * gets called from angular directive/controller\n\nexport let isBlurTarget = function( blurEvent, queryString ) {\n    var isTarget = $( blurEvent.relatedTarget ).closest( queryString ).length > 0; // Chrome Check\n\n    if( !isTarget && blurEvent.originalEvent && blurEvent.originalEvent.explicitOriginalTarget ) {\n        isTarget = $( blurEvent.originalEvent.explicitOriginalTarget ).closest( queryString ).length > 0; // Firefox Check\n    }\n\n    if( !isTarget ) {\n        isTarget = $( document.activeElement ).closest( queryString ).length > 0; // IE11\n    }\n    return isTarget;\n};\n*/\nexports = {\n    isValidNumber,\n    getEvaluatedId\n    /**revisitme yogesh\n     * Hint: usages in directive or controller with scope and jquery\n    isBlurTarget,\n    hasScrollBar,\n    handleScroll,\n    ifElementExists\n    */\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
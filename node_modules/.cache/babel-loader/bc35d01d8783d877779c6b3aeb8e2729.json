{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used for PLTable as Column Filter Service\n *\n * @module js/awColumnFilterService\n *\n */\nimport messagingService from 'js/messagingService';\nimport dateTimeService from 'js/dateTimeService';\nimport localeService from 'js/localeService';\nimport appContextService from 'js/appCtxService';\nimport propertyService from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport columnFilterUtility from 'js/awColumnFilterUtility';\nvar _localeTextBundle = {};\nvar exports = {};\n/*********************************\n * Temporary Constants for Facet *\n ********************************/\n\nconst numberFacetsToShow = 10;\nconst facetCheckboxHeight = 33;\nconst SELECT_ALL_PROPERTY = 'awSelectAllOption';\n/**\n * Determines if value is valid number to process.\n *\n * @param {Number|String} value - Number value\n *\n * @returns {Boolean} true if valid number\n */\n\nvar isValidNumber = function (value) {\n  return isFinite(value) && value !== null && value !== '';\n};\n/**\n * Check if property has a default value.\n *\n * @param {Object} property - property to check values\n * @returns {boolean} true is has blank value\n */\n\n\nconst isDefaultFilterValue = function (property) {\n  return property && (_.isNil(property.dbValue) || property.dbValue === '');\n};\n/**\n * Check if existing filters have not equal facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and not equals\n */\n\n\nconst isExistingFacetValueNotEquals = function (columnFilters, value) {\n  let isExistingNotEqualsFacet = false;\n\n  _.forEach(columnFilters, function (filter) {\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS && filter.values && filter.values.includes(value)) {\n      isExistingNotEqualsFacet = true;\n      return false;\n    }\n  });\n\n  return isExistingNotEqualsFacet;\n};\n/**\n * Check if existing filters have equals facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and equals\n */\n\n\nconst isExistingFacetValueEquals = function (columnFilters, value) {\n  let isExistingEqualsFacet = false;\n\n  _.forEach(columnFilters, function (filter) {\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS && filter.values && filter.values.includes(value)) {\n      isExistingEqualsFacet = true;\n      return false;\n    }\n  });\n\n  return isExistingEqualsFacet;\n};\n/**\n * Get the default selection of facets based on existing filters.\n *\n * @param {Array} columnFilters\n * @returns true if existing filters have not equals, false if equals\n */\n\n\nconst getDefaultFacetSelectionValue = function (columnFilters) {\n  let defaultSelectionValue = null;\n\n  _.forEach(columnFilters, function (filter) {\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS) {\n      defaultSelectionValue = false;\n      return false;\n    }\n\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS) {\n      defaultSelectionValue = true;\n      return false;\n    }\n  });\n\n  return defaultSelectionValue;\n};\n/**\n * Initialize the column menu's default variables.\n *\n * @param {Object} column - column information\n * @param {Object} viewModelData - menu view model data\n * @param {Object} operation - column filtering operation\n */\n\n\nexport let initializeMenu = function (column, columnFilterData) {\n  let columnMenuData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let registerContext = false;\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (!columnMenuContext) {\n    columnMenuContext = {};\n    registerContext = true;\n  }\n\n  columnMenuContext.isFacetsInitialized = false;\n  columnMenuContext.isFacetLoading = false;\n  columnMenuContext.isSelectedFacetValues = false;\n  columnMenuContext.isMenuIntialized = true;\n\n  if (column.filter) {\n    // Set the defaultFacetSection for when an existing facet filter was applied\n    columnMenuContext.defaultFacetSelection = getDefaultFacetSelectionValue(column.filter.columnFilters);\n\n    if (columnMenuContext.defaultFacetSelection === false) {\n      columnMenuContext.isSelectedFacetValues = true;\n    }\n  }\n\n  registerContext && appContextService.registerCtx('columnMenuContext', columnMenuContext);\n  columnMenuData = { ...columnFilterData,\n    ...columnMenuData\n  };\n  return {\n    columnMenuData: columnMenuData\n  };\n};\n/**\n * Sets the filter information on the column filter and the column provider filters used for SOA.\n *\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n * @param {Array} newProviderFilters new column provider filters to set\n * @param {Object} updatedColumn column with the updated filter attached\n */\n\nexport let setFilters = function (columnProvider, dataProvider, newProviderFilters, updatedColumn) {\n  const updatedColumnFilters = columnFilterUtility.addOrReplaceColumnFilter(columnProvider.getColumnFilters(), newProviderFilters);\n  columnProvider.setColumnFilters(updatedColumnFilters); // Set all filters as stale except for column in newProviderFilters\n\n  _.forEach(dataProvider.cols, function (col) {\n    if (col.field === updatedColumn.field) {\n      // Need to preserve whether show filters was on/off\n      const oldShowFilterFacets = col.filter.showFilterFacets;\n      exports.updateColumnFilter(col, newProviderFilters);\n      col.filter.showFilterFacets = oldShowFilterFacets;\n    } else {\n      exports.setColumnFilterStale(col);\n    }\n  });\n};\n/**\n * Check if text filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\n\nvar isTextFilterInputDefault = function (column, viewModelData) {\n  var isInputDefault = false;\n\n  if (!column.filter.isFilterApplied && isDefaultFilterValue(viewModelData.textValue)) {\n    isInputDefault = true;\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if date filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\n\n\nvar isDateFilterInputDefault = function (column, viewModelData) {\n  var isInputDefault = false;\n\n  if (!column.filter.isFilterApplied && viewModelData.startDate && dateTimeService.isNullDate(viewModelData.startDate.dbValue) && viewModelData.endDate && dateTimeService.isNullDate(viewModelData.endDate.dbValue) && viewModelData.startDate.dateApi && !viewModelData.startDate.dateApi.dateValue && viewModelData.endDate.dateApi && !viewModelData.endDate.dateApi.dateValue) {\n    isInputDefault = true;\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if numeric filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\n\n\nvar isNumericFilterInputDefault = function (column, viewModelData) {\n  var isInputDefault = false;\n\n  if (!column.filter.isFilterApplied) {\n    const opeartionValue = viewModelData.operation.dbValue;\n\n    switch (opeartionValue) {\n      case columnFilterUtility.OPERATION_TYPE.RANGE:\n        isInputDefault = isDefaultFilterValue(viewModelData.startNumber) && isDefaultFilterValue(viewModelData.endNumber);\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.GREATER:\n        isInputDefault = isDefaultFilterValue(viewModelData.numberValue);\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.LESS:\n        isInputDefault = isDefaultFilterValue(viewModelData.numberValue);\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.EQUALS:\n        isInputDefault = isDefaultFilterValue(viewModelData.numberValue);\n        break;\n    }\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if all facets are checked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are selected\n */\n\n\nvar isFacetInputDefault = function (facetDataProvider) {\n  var isInputDefault = true;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n  if (facetObjects) {\n    _.forEach(facetObjects, function (currentValue) {\n      if (!currentValue.dbValue && currentValue.serverValue !== SELECT_ALL_PROPERTY) {\n        isInputDefault = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if all facets are unchecked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are deselected\n */\n\n\nvar areAllFacetsUnchecked = function (facetDataProvider) {\n  var allFacetsUnchecked;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n  if (facetObjects && !isFacetInputDefault(facetDataProvider)) {\n    allFacetsUnchecked = true;\n\n    _.forEach(facetObjects, function (currentValue) {\n      if (currentValue.dbValue) {\n        allFacetsUnchecked = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return allFacetsUnchecked;\n};\n/**\n * Disable filtering in menu.\n *\n * @param {Object} column column definition object\n */\n\n\nvar disableFiltering = function (isFilterDisabled) {\n  if (isFilterDisabled.update) {\n    isFilterDisabled.update({\n      value: true\n    });\n  } else {\n    isFilterDisabled.value = true;\n  }\n};\n/**\n * Enable filtering in menu.\n *\n * @param {Object} column column definition object\n */\n\n\nvar enableFiltering = function (isFilterDisabled) {\n  if (isFilterDisabled.update) {\n    isFilterDisabled.update({\n      value: false\n    });\n  } else {\n    isFilterDisabled.value = false;\n  }\n};\n/**\n * Clear an filter errors from the menu.\n *\n * @param {Object} context - menu context information\n */\n\n\nvar clearContextAttributes = function (context) {\n  if (context.filterError) {\n    delete context.filterError; // remove error if exists\n  }\n};\n/**\n * Validate the text information coming from the filter column menu UI.\n *\n * @param {Object} textValue - The text value coming from the filter menu\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if textValue is valid\n */\n\n\nexport let doTextValidation = function (textValue, viewModelData) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext) {\n    clearContextAttributes(columnMenuContext);\n  }\n\n  return true;\n};\n/**\n * Validate the numeric information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if numeric information is valid\n */\n\nexport let doNumericValidation = function (viewModelData) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext) {\n    clearContextAttributes(columnMenuContext);\n\n    if (_.isNumber(viewModelData.startNumber.dbValue) && _.isNumber(viewModelData.endNumber.dbValue) && viewModelData.startNumber.dbValue > viewModelData.endNumber.dbValue) {\n      columnMenuContext.filterError = true;\n      messagingService.showError(_localeTextBundle.invalidNumberRange);\n    }\n\n    return !columnMenuContext.filterError;\n  }\n\n  return true;\n};\n/**\n * Create a column filter from the facet values in column.\n *\n * @param {Object} column - column definition object\n * @returns {Object} filter object created from facet values\n */\n\nexport let processFacetValuesInFilter = function (column, facetDataProvider) {\n  var facetFilter = null;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (facetObjects) {\n    var facetUiValues = [];\n\n    _.forEach(facetObjects, function (currentValue) {\n      if (currentValue.serverValue !== SELECT_ALL_PROPERTY && (columnMenuContext.isSelectedFacetValues && currentValue.dbValue === true || !columnMenuContext.isSelectedFacetValues && currentValue.dbValue === false)) {\n        facetUiValues.push(currentValue.serverValue);\n      }\n    });\n\n    if (columnMenuContext.isSelectedFacetValues) {\n      facetFilter = columnFilterUtility.createCaseSensitiveEqualsFilter(column.field, facetUiValues);\n    } else {\n      facetFilter = columnFilterUtility.createCaseSensitiveNotEqualsFilter(column.field, facetUiValues);\n    }\n  }\n\n  return facetFilter;\n};\n/**\n * Creates a text filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\n\nvar createTextFilter = function (eventData) {\n  var filter = null;\n\n  if (eventData) {\n    filter = columnFilterUtility.createFilter(eventData.operation, eventData.columnName, [eventData.textValue]);\n  }\n\n  return filter;\n};\n\nexport let updateTableWithColumnFilters = function (gridContextDispatcher, column, columnFilters) {\n  const columnFilterInfo = {\n    column: column,\n    filters: columnFilters\n  };\n  gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    columnFilterInfo: columnFilterInfo\n  });\n};\n/**\n * Add/remove the text filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\n\nexport let doTextFiltering = function (column, viewModelData, facetDataProvider, gridContextDispatcher) {\n  // client side validation\n  let newFilters = null;\n\n  if (exports.doTextValidation(viewModelData)) {\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    const isFacetInputDefaultResult = isFacetInputDefault(facetDataProvider);\n\n    if (viewModelData.textValue || !isFacetInputDefaultResult) {\n      newFilters = [];\n\n      if (viewModelData.textValue && viewModelData.textValue.dbValue) {\n        const filterData = {\n          columnName: column.field,\n          operation: viewModelData.operation.dbValue,\n          textValue: viewModelData.textValue.dbValue\n        };\n        var textColumnFilter = createTextFilter(filterData);\n        newFilters.push(textColumnFilter);\n      }\n\n      if (!isFacetInputDefaultResult) {\n        const facetFilter = exports.processFacetValuesInFilter(column, facetDataProvider);\n\n        if (facetFilter && facetFilter.values && facetFilter.values.length) {\n          newFilters.push(facetFilter);\n        }\n      }\n    }\n  }\n\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext.filterError !== true && gridContextDispatcher) {\n    updateTableWithColumnFilters(gridContextDispatcher, column, newFilters);\n  }\n\n  return newFilters;\n};\n/**\n * Validate the date information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if date is valid\n */\n\nexport let doDateValidation = function (viewModelData) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext) {\n    clearContextAttributes(columnMenuContext);\n\n    if (!dateTimeService.isNullDate(viewModelData.startDate.dbValue) && !dateTimeService.isNullDate(viewModelData.endDate.dbValue)) {\n      var startDateTime = _.isNumber(viewModelData.startDate.dbValue) ? viewModelData.startDate.dbValue : new Date(viewModelData.startDate.dbValue).getTime();\n      var endDateTime = _.isNumber(viewModelData.endDate.dbValue) ? viewModelData.endDate.dbValue : new Date(viewModelData.endDate.dbValue).getTime();\n\n      if (startDateTime > endDateTime) {\n        columnMenuContext.filterError = true;\n        messagingService.showError(_localeTextBundle.invalidDate);\n      }\n    }\n\n    return !columnMenuContext.filterError;\n  }\n\n  return true;\n};\n/**\n * Creates a date filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\n\nvar createDateFilter = function (eventData) {\n  var filter = null; // Set columnProvider.columnFilters so dataProvider/actions can use the information\n\n  if (!dateTimeService.isNullDate(eventData.startDate) && !dateTimeService.isNullDate(eventData.endDate)) {\n    var startDateUtc = dateTimeService.formatUTC(new Date(eventData.startDate));\n    var endDate = new Date(eventData.endDate);\n    var endDateUtc = dateTimeService.formatUTC(endDate.setHours(23, 59, 59, 999));\n    filter = columnFilterUtility.createRangeFilter(eventData.columnName, [startDateUtc, endDateUtc]);\n  } else if (!dateTimeService.isNullDate(eventData.startDate)) {\n    startDateUtc = dateTimeService.formatUTC(new Date(eventData.startDate));\n    filter = columnFilterUtility.createGreaterThanEqualsFilter(eventData.columnName, [startDateUtc]);\n  } else if (!dateTimeService.isNullDate(eventData.endDate)) {\n    endDate = new Date(eventData.endDate);\n    endDateUtc = dateTimeService.formatUTC(endDate.setHours(23, 59, 59, 999));\n    filter = columnFilterUtility.createLessThanEqualsFilter(eventData.columnName, [endDateUtc]);\n  }\n\n  return filter;\n};\n/**\n * Add/remove the date filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\n\n\nexport let doDateFiltering = function (column, viewModelData, facetDataProvider, gridContextDispatcher) {\n  let newFilters = null; // Client validation\n\n  const isFacetInputDefaultResult = isFacetInputDefault(facetDataProvider);\n\n  if (exports.doDateValidation(viewModelData) || !isFacetInputDefaultResult) {\n    newFilters = [];\n    const filterData = {\n      columnName: column.field,\n      startDate: viewModelData.startDate.dbValue,\n      endDate: viewModelData.endDate.dbValue\n    };\n    var filter = createDateFilter(filterData);\n\n    if (filter) {\n      newFilters.push(filter);\n    }\n\n    if (!isFacetInputDefaultResult) {\n      const facetFilter = exports.processFacetValuesInFilter(column, facetDataProvider);\n\n      if (facetFilter && facetFilter.values && facetFilter.values.length) {\n        newFilters.push(facetFilter);\n      }\n    }\n  }\n\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext.filterError !== true && gridContextDispatcher) {\n    updateTableWithColumnFilters(gridContextDispatcher, column, newFilters);\n  }\n\n  return newFilters;\n};\n/**\n * Creates a numeric filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\n\nvar createNumericFilter = function (eventData) {\n  var filter = null; // Set columnProvider.columnFilters so dataProvider/actions can use the information\n\n  if (eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber(eventData.startNumber) && isValidNumber(eventData.endNumber)) {\n    filter = columnFilterUtility.createRangeFilter(eventData.columnName, [eventData.startNumber, eventData.endNumber]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber(eventData.startNumber)) {\n    filter = columnFilterUtility.createGreaterThanEqualsFilter(eventData.columnName, [eventData.startNumber]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber(eventData.endNumber)) {\n    filter = columnFilterUtility.createLessThanEqualsFilter(eventData.columnName, [eventData.endNumber]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.GREATER && isValidNumber(eventData.numberValue)) {\n    filter = columnFilterUtility.createGreaterThanFilter(eventData.columnName, [eventData.numberValue]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.LESS && isValidNumber(eventData.numberValue)) {\n    filter = columnFilterUtility.createLessThanFilter(eventData.columnName, [eventData.numberValue]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.EQUALS && isValidNumber(eventData.numberValue)) {\n    filter = columnFilterUtility.createEqualsFilter(eventData.columnName, [eventData.numberValue]);\n  }\n\n  return filter;\n};\n/**\n * Add/remove the numeric filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\n\n\nexport let doNumericFiltering = function (column, viewModelData, facetDataProvider, gridContextDispatcher) {\n  let newFilters = null;\n  const isFacetInputDefaultResult = isFacetInputDefault(facetDataProvider);\n\n  if (exports.doNumericValidation(viewModelData) || !isFacetInputDefaultResult) {\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    newFilters = [];\n    const filterData = {\n      columnName: column.field,\n      operation: viewModelData.operation.dbValue,\n      numberValue: viewModelData.numberValue.dbValue,\n      startNumber: viewModelData.startNumber.dbValue,\n      endNumber: viewModelData.endNumber.dbValue\n    };\n    var filter = createNumericFilter(filterData);\n\n    if (filter) {\n      newFilters.push(filter);\n    }\n\n    if (!isFacetInputDefaultResult) {\n      const facetFilter = exports.processFacetValuesInFilter(column, facetDataProvider);\n\n      if (facetFilter && facetFilter.values && facetFilter.values.length) {\n        newFilters.push(facetFilter);\n      }\n    }\n  }\n\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext.filterError !== true && gridContextDispatcher) {\n    updateTableWithColumnFilters(gridContextDispatcher, column, newFilters);\n  }\n\n  return newFilters;\n};\n/**\n * Find the type of filter to use by the column type.\n *\n * @param {String} columnType - Repersents the data type of the column\n *\n * @returns {String} The type of filter to use in the column menu\n */\n\nexport let getFilterTypeByColumnType = function (columnType) {\n  var returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n\n  if (columnType) {\n    if (_.isString(columnType)) {\n      columnType = columnType.toUpperCase();\n    }\n\n    var columnTypeString = columnType.toString();\n\n    switch (columnTypeString) {\n      case 'DOUBLE':\n      case 'INTEGER':\n      case 'FLOAT':\n      case '3': // Client Property Type\n\n      case '4': // Client Property Type Double\n\n      case '5': // Client Property Type Integer\n\n      case '7':\n        // Client Property Type Short\n        returnFilterType = columnFilterUtility.FILTER_VIEW.NUMERIC;\n        break;\n\n      case 'DATE':\n      case '2':\n        // Client Property Type Date\n        returnFilterType = columnFilterUtility.FILTER_VIEW.DATE;\n        break;\n\n      case 'STRING':\n      default:\n        returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n    }\n  }\n\n  return returnFilterType;\n};\n/**\n * Add filter information to the column object.\n *\n * @param {Object} column - Column to add filter information to\n * @param {String} currentFilterView - Filter view\n * @param {Array} existingFilters - Existing filter view to reference\n */\n\nexport let addFilterValue = function (column, currentFilterView, existingFilters) {\n  existingFilters = existingFilters || [];\n\n  switch (currentFilterView) {\n    case columnFilterUtility.FILTER_VIEW.NUMERIC:\n      column.filter = {\n        isFilterApplied: false,\n        isDirty: false,\n        view: currentFilterView,\n        summaryText: '',\n        operation: {\n          dbValue: 'equals',\n          uiValue: _localeTextBundle.equalsOperation,\n          hasLov: true,\n          isEditable: true,\n          isEnabled: true,\n          propApi: {},\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL',\n          propertyName: 'operation',\n          type: 'STRING',\n          operationType: 'childcommand'\n        },\n        numberValue: {\n          dbValue: '',\n          isEnabled: true,\n          type: 'DOUBLE',\n          isRequired: false,\n          isEditable: true,\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n        },\n        startNumber: {\n          dbValue: '',\n          isEnabled: true,\n          type: 'DOUBLE',\n          isRequired: false,\n          isEditable: true,\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n        },\n        endNumber: {\n          dbValue: '',\n          isEnabled: true,\n          type: 'DOUBLE',\n          isRequired: false,\n          isEditable: true,\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n        }\n      };\n      exports.setExistingNumericFilter(column.filter, existingFilters);\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.DATE:\n      column.filter = {\n        isFilterApplied: false,\n        view: currentFilterView,\n        summaryText: '',\n        startDate: {\n          dbValue: '',\n          dateApi: {},\n          isEnabled: true,\n          type: 'DATE'\n        },\n        endDate: {\n          dbValue: '',\n          dateApi: {},\n          isEnabled: true,\n          type: 'DATE'\n        }\n      };\n      exports.setExistingDateFilter(column.filter, existingFilters);\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.TEXT:\n    default:\n      column.filter = {\n        isFilterApplied: false,\n        isDirty: false,\n        view: currentFilterView,\n        summaryText: '',\n        columnFilters: [],\n        operation: {\n          dbValue: 'contains',\n          value: 'contains',\n          uiValue: _localeTextBundle.containsOperation\n        },\n        textValue: {\n          dbValue: ''\n        }\n      };\n      exports.setExistingTextFilter(column.filter, existingFilters); // default to equals for custom filter\n\n      if (currentFilterView !== columnFilterUtility.FILTER_VIEW.TEXT) {\n        column.filter.operation.dbValue = 'equals';\n        column.filter.operation.uiValue = _localeTextBundle.equalsOperation;\n\n        if (existingFilters.length > 0) {\n          column.filter.isFilterApplied = true;\n        }\n      }\n\n  } // Set values common to all types\n\n\n  column.filter.isSelectedFacetValues = false;\n  column.filter.blanksI18n = _localeTextBundle.blanks;\n  column.filter.noMatchesFoundI18n = _localeTextBundle.noMatchesFound;\n  column.filter.selectAllDefault = true;\n  column.filter.showFilterFacets = false;\n  exports.checkExistingFacetFilter(column.filter, existingFilters);\n\n  if (column.filter.isFilterApplied) {\n    column.filter.columnFilters = existingFilters;\n    column.filter.summaryText = exports.createFilterSummary(existingFilters, column.filter.view);\n  } else {\n    column.filter.columnFilters = [];\n  }\n};\n/**\n * Sets the existing filters on to the new numeric filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\n\nexport let setExistingNumericFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (currentFilter) {\n    if (columnFilterUtility.isValidRangeColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n      newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n      newFilter.startNumber.dbValue = Number(currentFilter.values[0]);\n      newFilter.endNumber.dbValue = Number(currentFilter.values[1]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidGreaterThanEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n      newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n      newFilter.startNumber.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidLessThanEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n      newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n      newFilter.endNumber.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidGreaterThanColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.GREATER;\n      newFilter.operation.uiValue = _localeTextBundle.greaterThanOperation;\n      newFilter.numberValue.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidLessThanColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.LESS;\n      newFilter.operation.uiValue = _localeTextBundle.lessThanOperation;\n      newFilter.numberValue.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n      newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n      newFilter.numberValue.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Sets the existing filters on to the new date filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\n\nexport let setExistingDateFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (currentFilter) {\n    if (columnFilterUtility.isValidRangeColumnFilter(currentFilter)) {\n      var startDate = new Date(currentFilter.values[0]);\n      var endDate = new Date(currentFilter.values[1]);\n      newFilter.startDate.dbValue = startDate.getTime();\n      newFilter.endDate.dbValue = endDate.getTime();\n      newFilter.isFilterApplied = true;\n    } else if (columnFilterUtility.isValidGreaterThanEqualsColumnFilter(currentFilter)) {\n      startDate = new Date(currentFilter.values[0]);\n      newFilter.startDate.dbValue = startDate.getTime();\n      newFilter.isFilterApplied = true;\n    } else if (columnFilterUtility.isValidLessThanEqualsColumnFilter(currentFilter)) {\n      endDate = new Date(currentFilter.values[0]);\n      newFilter.endDate.dbValue = endDate.getTime();\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Sets the existing filters on to the new text filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\n\nexport let setExistingTextFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (currentFilter) {\n    if (columnFilterUtility.isValidContainsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.CONTAINS;\n      newFilter.operation.uiValue = _localeTextBundle.containsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidNotContainsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS;\n      newFilter.operation.uiValue = _localeTextBundle.notContainsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidStartsWithColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.STARTS_WITH;\n      newFilter.operation.uiValue = _localeTextBundle.startsWithOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidEndsWithColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.ENDS_WITH;\n      newFilter.operation.uiValue = _localeTextBundle.endsWithOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n      newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n    } else if (columnFilterUtility.isValidNotEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_EQUALS;\n      newFilter.operation.uiValue = _localeTextBundle.notEqualsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Sets if filter is Applied for facets based on existing filters\n * @param {Object} newFilter - the new filter object that was created\n * @param {Object} existingFilters - The existing filters\n */\n\nexport let checkExistingFacetFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (filter) {\n    if ((filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS || filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS) && filter.values && filter.values.length > 0) {\n      newFilter.showFilterFacets = true;\n      newFilter.selectAllDefault = false;\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Update the column with filter information.\n *\n * @param {Object} column columnInfo\n * @param {Array} existingFilters existing column filter\n */\n\nexport let updateColumnFilter = function (column, existingFilters) {\n  var currentFilterView = column.filterDefinition;\n\n  if (!currentFilterView) {\n    currentFilterView = exports.getFilterTypeByColumnType(column.dataType);\n  }\n\n  exports.addFilterValue(column, currentFilterView, existingFilters);\n};\n/**\n * Reset the column with default filter information.\n *\n * @param {Object} column columnInfo\n */\n\nexport let resetColumnFilter = function (column) {\n  exports.updateColumnFilter(column, []);\n};\n/**\n * Removes column filters that no longer apply to the table.\n *\n * @param {Object} columnProvider - Column provider used to store the filters\n * @param {Array} columns - columns in the table\n */\n\nexport let removeStaleFilters = function (columnProvider, columns) {\n  if (columnProvider && columns && columns.length) {\n    var columnFilters = columnProvider.getColumnFilters();\n\n    if (columnFilters && columnFilters.length) {\n      var newColumnFilters = _.filter(columnFilters, function (currentFilter) {\n        var isValidFilter = false;\n\n        _.forEach(columns, function (currentColumn) {\n          if ((currentFilter.columnName === currentColumn.propertyName || currentFilter.columnName === currentColumn.field) && !currentColumn.hiddenFlag) {\n            isValidFilter = true;\n            return false;\n          }\n\n          return true;\n        });\n\n        return isValidFilter;\n      });\n\n      columnProvider.setColumnFilters(newColumnFilters);\n    }\n  }\n};\n/**\n * Create a filter summary text of the applied filter.\n *\n * @param {Array} columnFilters - Column filter objects that contains operation and values\n * @param {String} filterView - filter view in use\n *\n * @returns {String} returns the text summary of the applied filter\n */\n\nexport let createFilterSummary = function (columnFilters, filterView) {\n  var filterSummary = '';\n  var filterCount = columnFilters.length;\n\n  if (!columnFilters || filterCount < 1) {\n    return filterSummary;\n  }\n\n  for (var i = 0; i < filterCount; i++) {\n    var columnFilter = columnFilters[i];\n    var firstValue = columnFilter.values[0];\n    var secondValue = columnFilter.values.length > 1 ? columnFilter.values[1] : ''; // Convert date values to readable strings\n\n    if (filterView === columnFilterUtility.FILTER_VIEW.DATE) {\n      var firstValueDateTime = Date.parse(firstValue);\n\n      if (firstValueDateTime) {\n        var firstValueDate = new Date(firstValueDateTime);\n        firstValue = firstValueDate.toLocaleDateString();\n      }\n\n      if (secondValue) {\n        var secondValueDateTime = Date.parse(secondValue);\n\n        if (secondValueDateTime) {\n          var secondValueDate = new Date(secondValueDateTime);\n          secondValue = secondValueDate.toLocaleDateString();\n        }\n      }\n    }\n\n    var arrayAsString = '';\n\n    for (var j = 0; j < columnFilter.values.length; j++) {\n      if (j > 0 && j < columnFilter.values.length) {\n        arrayAsString += ',';\n      }\n\n      var value = columnFilter.values[j];\n\n      if (value === '') {\n        arrayAsString += _localeTextBundle.blanks;\n      } else {\n        arrayAsString += value;\n      }\n    } // Set the filter summary text based on the operation type\n\n\n    switch (columnFilter.operation) {\n      case columnFilterUtility.OPERATION_TYPE.RANGE:\n        filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\" ';\n        filterSummary += _localeTextBundle.andFilterTooltip + ' ';\n        filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n        filterSummary += ' \"' + secondValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.GREATER:\n        filterSummary += _localeTextBundle.greaterThanFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.GREATER_EQUALS:\n        filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.LESS:\n        filterSummary += _localeTextBundle.lessThanFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.LESS_EQUALS:\n        filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.EQUALS:\n      case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS:\n        filterSummary += _localeTextBundle.equalsFilterTooltip;\n        filterSummary += ' \"' + arrayAsString + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.NOT_EQUALS:\n      case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS:\n        filterSummary += _localeTextBundle.notEqualsFilterTooltip;\n        filterSummary += ' \"' + arrayAsString + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.CONTAINS:\n        filterSummary += _localeTextBundle.containsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS:\n        filterSummary += _localeTextBundle.notContainsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.STARTS_WITH:\n        filterSummary += _localeTextBundle.startsWithFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.ENDS_WITH:\n        filterSummary += _localeTextBundle.endWithFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      default:\n        filterSummary += filterView;\n    }\n\n    if (filterCount > 1 && i === 0) {\n      filterSummary += ', ';\n    }\n  }\n\n  return filterSummary;\n};\n/**\n * Remove all the filters from the column provider, reset the dataProvider column filters.\n *\n * @param {Object} dataProvider data provider that contains the columns\n * @param {Object} columnProvider column provider that contains the column filters\n */\n\nexport let removeAllFilters = function (dataProvider, columnProvider) {\n  var columns = dataProvider.cols;\n\n  for (var i = 0; i < columns.length; i++) {\n    exports.setColumnFilterStale(columns[i]);\n    exports.resetColumnFilter(columns[i]);\n  }\n\n  columnProvider.setColumnFilters([]);\n};\n/**\n * Check if any of the columns have a filter applied.\n *\n * @param {Object} dataProvider data provider containing all the columns\n * @returns {Boolean} true/false based on if any column has a filter applied\n */\n\nexport let isColumnFilterApplied = function (dataProvider) {\n  var columns = dataProvider.cols;\n\n  for (var i = 0; i < columns.length; i++) {\n    if (columns[i].filter && columns[i].filter.isFilterApplied) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Select All toggle has been switched, switch all facets to checked/unchecked.\n *\n * @param {boolean} selectAllValue - Value if select all is checked\n * @param {Object} facetDataProvider - data provider of facet list\n * @returns {boolean} selectAllValue\n */\n\nexport let selectAllInputChanged = function (gridContextDispatcher, column, viewModelData, selectAllValue, facetDataProvider, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n  columnMenuContext.isSelectedFacetValues = !selectAllValue;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n  _.forEach(facetObjects, function (currentFacetObject) {\n    propertyService.setValue(currentFacetObject, selectAllValue);\n  });\n\n  const columnMenuData = {\n    columnName: column.field\n  };\n  columnMenuData.facetValues = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n  columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n  exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n  checkForFilterDisability(column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled);\n  return selectAllValue;\n};\n\nconst getTypeFilter = (column, viewModel) => {\n  var typeFilter = null;\n  var eventData = null;\n\n  if (column.filter.view === columnFilterUtility.FILTER_VIEW.TEXT && viewModel.data.textValue.dbValue) {\n    eventData = {\n      columnName: column.field,\n      operation: viewModel.data.operation.dbValue,\n      textValue: viewModel.data.textValue.dbValue\n    };\n    typeFilter = createTextFilter(eventData);\n  } else if (column.filter.view === columnFilterUtility.FILTER_VIEW.NUMERIC) {\n    eventData = {\n      columnName: column.field,\n      operation: viewModel.data.operation.dbValue,\n      numberValue: viewModel.data.numberValue.dbValue,\n      startNumber: viewModel.data.startNumber.dbValue,\n      endNumber: viewModel.data.endNumber.dbValue\n    };\n\n    if (exports.doNumericValidation(viewModel.data)) {\n      typeFilter = createNumericFilter(eventData);\n    }\n  } else if (column.filter.view === columnFilterUtility.FILTER_VIEW.DATE) {\n    eventData = {\n      columnName: column.field,\n      startDate: viewModel.data.startDate.dbValue,\n      endDate: viewModel.data.endDate.dbValue\n    };\n\n    if (exports.doDateValidation(viewModel.data)) {\n      typeFilter = createDateFilter(eventData);\n    }\n  }\n\n  return typeFilter;\n};\n/**\n * Call the 'getFacets' function from the dataProvider if available.\n *\n * @param {Object} gridContextDispatcher - table data dispatcher\n * @param {Object} column - column definition object\n * @param {Object} viewModel - view model of the table\n * @param {Object} subPanelContext - menu context information\n * @param {Object} facetDataProvider - The data provider of the facets.\n * @param {Boolean} reload - if reloading facets\n * @param {Object} isFilterDisabled - atomic data to determine filter disability\n */\n\n\nexport let loadFacetValues = async function (gridContextDispatcher, column, viewModel, subPanelContext, facetDataProvider, reload, isFilterDisabled) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext && !columnMenuContext.isFacetLoading) {\n    columnMenuContext.isFacetLoading = true;\n\n    if (subPanelContext.hasFilterFacetAction && viewModel.data.showFilters.dbValue) {\n      let filterFacetValues = [];\n      let filterFacetValuesTotalFound = 0;\n\n      if (!column.filter.isStale && column.filter.facetValues && reload) {\n        filterFacetValues = column.filter.facetValues;\n        filterFacetValuesTotalFound = column.filter.facetValuesTotalFound;\n        facetDataProvider.update(filterFacetValues, filterFacetValuesTotalFound);\n        exports.checkForFilterDisability(column, viewModel.data, subPanelContext.hasFilterFacetAction, facetDataProvider, subPanelContext.gridContext.isBulkediting, isFilterDisabled);\n      } else {\n        var filters = [];\n        var typeFilter = getTypeFilter(column, viewModel);\n\n        if (typeFilter) {\n          filters.push(typeFilter);\n        } // Add other column's filters to input\n\n\n        _.forEach(subPanelContext.existingColumnFilters, function (existingFilter) {\n          if (existingFilter.columnName !== column.propertyName && existingFilter.columnName !== column.field) {\n            filters.push(existingFilter);\n          }\n        });\n\n        var startIndex = 0;\n        const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n        let defaultFacetValue = columnMenuContext.defaultFacetSelection !== false;\n\n        if (!reload && facetObjects) {\n          startIndex = facetObjects.length - 1;\n        } else if (columnMenuContext.isFacetsInitialized && reload) {\n          // reset show all since data is being reloaded\n          defaultFacetValue = true;\n        }\n\n        var filterFacetInput = {\n          column: column,\n          columnFilters: filters,\n          maxToReturn: 50,\n          startIndex: startIndex\n        };\n        let filterFacetResults = await subPanelContext.getFilterFacetsAction(filterFacetInput);\n        const selectAllProperty = {\n          propertyDisplayName: _localeTextBundle.selectAll,\n          typex: 'BOOLEAN',\n          serverValue: SELECT_ALL_PROPERTY\n        };\n\n        if (filterFacetResults && filterFacetResults.values && filterFacetResults.values.length) {\n          // Add select all if reload\n          if (reload) {\n            filterFacetValues.push(selectAllProperty);\n\n            if (columnMenuContext.isFacetsInitialized) {\n              propertyService.setValue(selectAllProperty, true);\n            } else {\n              propertyService.setValue(selectAllProperty, column.filter.selectAllDefault);\n            }\n          }\n\n          _.forEach(filterFacetResults.values, function (value) {\n            let fieldValue = value;\n\n            if (!fieldValue) {\n              fieldValue = column.filter.blanksI18n;\n            }\n\n            const facetProperty = {\n              propertyDisplayName: fieldValue,\n              typex: 'BOOLEAN',\n              serverValue: value\n            };\n            let facetValue = defaultFacetValue; // Load existing facet selections into values\n\n            if (!columnMenuContext.isFacetsInitialized && column.filter.columnFilters.length) {\n              if (isExistingFacetValueNotEquals(column.filter.columnFilters, value)) {\n                facetValue = false;\n              }\n\n              if (!facetValue && isExistingFacetValueEquals(column.filter.columnFilters, value)) {\n                facetValue = true;\n              }\n            }\n\n            propertyService.setValue(facetProperty, facetValue);\n            filterFacetValues.push(facetProperty);\n          });\n\n          filterFacetValuesTotalFound = filterFacetResults.totalFound + 1;\n\n          if (reload) {\n            facetDataProvider.update(filterFacetValues, filterFacetValuesTotalFound);\n          }\n        } else {\n          facetDataProvider.update([]);\n        }\n\n        const columnMenuData = {\n          columnName: column.field\n        };\n        let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n        if (!reload) {\n          facetProperties = _.concat(facetProperties, filterFacetValues);\n        }\n\n        columnMenuData.facetValues = facetProperties;\n        columnMenuData.facetValuesTotalFound = filterFacetValuesTotalFound;\n        columnMenuData.isStale = false;\n        exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n      }\n\n      columnMenuContext.isFacetsInitialized = true;\n      columnMenuContext.isFacetLoading = false;\n      return {\n        results: filterFacetValues,\n        totalFound: filterFacetValuesTotalFound\n      };\n    }\n\n    columnMenuContext.isFacetLoading = false;\n  }\n\n  return {\n    results: [],\n    totalFound: 0\n  };\n};\n/**\n * Update the facet values, waiting for user entry.\n */\n\nexport let updateFacetValuesDebounce = _.debounce(loadFacetValues, 500, {\n  maxWait: 10000,\n  trailing: true,\n  leading: false\n});\n/**\n * Remove a filter from the columnProvider and reset the column's filter.\n *\n * @param {Object} column column def object\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n */\n\nexport let removeFilter = function (column, columnProvider, dataProvider) {\n  let columnFiltersToUpdate = columnProvider.getColumnFilters();\n  columnFilterUtility.removeColumnFilter(columnFiltersToUpdate, column.field);\n  columnProvider.setColumnFilters(columnFiltersToUpdate); // Set all filters as stale\n\n  _.forEach(dataProvider.cols, function (col) {\n    if (col.field === column.field) {\n      exports.resetColumnFilter(col);\n    } else {\n      exports.setColumnFilterStale(col);\n    }\n  });\n};\n/**\n * Remove a filter action from the menu button.\n *\n * @param {Object} column column def object\n */\n\nexport let clearFilterFromMenu = function (column, gridContextDispatcher) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n  columnMenuContext.isClearActionUsed = true;\n  const columnFilterInfo = {\n    column: column\n  };\n  gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    columnFilterInfo: columnFilterInfo,\n    columnMenuData: {\n      columnName: column.field\n    }\n  }); // Return empty array because there are no filters\n\n  return [];\n};\n/**\n * Save the information of type-based filter.\n *\n * @param {Object} column - table column information\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let updateViewTypeMenuData = function (gridContextDispatcher, column, viewModelData) {\n  const columnMenuData = {\n    columnName: column.field\n  };\n\n  switch (column.filter.view) {\n    case columnFilterUtility.FILTER_VIEW.NUMERIC:\n      columnMenuData.startNumber = viewModelData.startNumber;\n      columnMenuData.endNumber = viewModelData.endNumber;\n      columnMenuData.numberValue = viewModelData.numberValue;\n      columnMenuData.operation = viewModelData.operation;\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.DATE:\n      columnMenuData.startDate = viewModelData.startDate;\n      columnMenuData.endDate = viewModelData.endDate;\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.TEXT:\n      columnMenuData.textValue = viewModelData.textValue;\n      columnMenuData.operation = viewModelData.operation;\n      break;\n  }\n\n  if (columnMenuData.operation) {\n    columnMenuData.operation.dbValue = viewModelData.operation.dbValue;\n  }\n\n  columnMenuData.isStale = true;\n  exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n  return columnMenuData;\n};\n/**\n * Validate filter enable/disable based on text filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let textEnableFilterToggle = function (isFilterDisabled, column, viewModelData, isBulkEditing) {\n  if (isTextFilterInputDefault(column, viewModelData) || isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    enableFiltering(isFilterDisabled);\n  }\n};\n/**\n * Text value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let textFilterInputChanged = function (gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (column.filter && columnMenuContext && columnMenuContext.isMenuIntialized) {\n    exports.updateViewTypeMenuData(gridContextDispatcher, column, viewModelData);\n    exports.textEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n  }\n};\n/**\n * Validate filter enable/disable based on date filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let dateEnableFilterToggle = function (isFilterDisabled, column, viewModelData, isBulkEditing) {\n  if (isDateFilterInputDefault(column, viewModelData) || isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    enableFiltering(isFilterDisabled);\n  }\n};\n/**\n * Date value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let dateFilterInputChanged = function (gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (column.filter && columnMenuContext && columnMenuContext.isMenuIntialized) {\n    exports.updateViewTypeMenuData(gridContextDispatcher, column, viewModelData);\n    exports.dateEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n  }\n};\n/**\n * Validate filter enable/disable based on numeric filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let numericEnableFilterToggle = function (isFilterDisabled, column, viewModelData, isBulkEditing) {\n  if (isNumericFilterInputDefault(column, viewModelData) || isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    enableFiltering(isFilterDisabled);\n  }\n};\n/**\n * Numeric value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let numericFilterInputChanged = function (gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (column.filter && columnMenuContext && columnMenuContext.isMenuIntialized) {\n    exports.updateViewTypeMenuData(gridContextDispatcher, column, viewModelData);\n    exports.numericEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n  }\n};\n/**\n * Facet value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n * @param {Object} facetDataProvider - facet values data provider\n * @param {Object} facetParameters - facet information from checkbox that was changed\n */\n\nexport let filterFacetInputChanged = function (gridContextDispatcher, column, viewModelData, facetDataProvider, facetParameters, isBulkEditing, isFilterDisabled) {\n  if (column.filter) {\n    if (facetParameters.item.serverValue === SELECT_ALL_PROPERTY) {\n      return selectAllInputChanged(gridContextDispatcher, column, viewModelData, facetParameters.checked, facetDataProvider, isBulkEditing, isFilterDisabled);\n    }\n\n    let selectAllFacet = null;\n    let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n    _.forEach(facetProperties, function (currentFacet) {\n      if (currentFacet.serverValue === SELECT_ALL_PROPERTY) {\n        selectAllFacet = currentFacet;\n        return false;\n      }\n    });\n\n    const isFacetInputDefaultValue = isFacetInputDefault(facetDataProvider);\n\n    if (selectAllFacet && selectAllFacet.dbValue === false && isFacetInputDefaultValue) {\n      propertyService.setValue(selectAllFacet, true);\n    } else if (selectAllFacet && selectAllFacet.dbValue === true && facetParameters.checked === false) {\n      propertyService.setValue(selectAllFacet, false);\n    }\n\n    const columnMenuData = {\n      columnName: column.field\n    };\n    columnMenuData.facetValues = facetProperties;\n    columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n    exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n    checkForFilterDisability(column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled);\n    return selectAllFacet ? selectAllFacet.dbValue : true;\n  }\n\n  return true;\n};\n/**\n * Check for filter disability state based on the filter view.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let checkForFilterDisability = function (column, viewModelData, hasFilterFacetAction, facetDataProvider, isBulkEditing, isFilterDisabled) {\n  if (isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    if (hasFilterFacetAction && areAllFacetsUnchecked(facetDataProvider)) {\n      disableFiltering(isFilterDisabled);\n    } else if (hasFilterFacetAction && !isFacetInputDefault(facetDataProvider)) {\n      enableFiltering(isFilterDisabled);\n    } else if (column.filter && column.filter.view) {\n      switch (column.filter.view) {\n        case columnFilterUtility.FILTER_VIEW.NUMERIC:\n          exports.numericEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n          break;\n\n        case columnFilterUtility.FILTER_VIEW.DATE:\n          exports.dateEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n          break;\n\n        case columnFilterUtility.FILTER_VIEW.TEXT:\n          exports.textEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n          break;\n\n        default:\n          // enable filtering button by default when custom filter\n          enableFiltering(isFilterDisabled);\n      }\n    }\n  }\n};\n/**\n * Show Facet Filters Toggle button changed function\n * Saves the toggle state for that column and calls dataprovider for\n * facets if needed\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let showFiltersToggleChanged = function (gridContextDispatcher, column, viewModelData) {\n  const columnMenuData = {\n    columnName: column.field\n  };\n  columnMenuData.showFilters = viewModelData.showFilters;\n  exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n};\n/**\n * Save the menu information to be loaded if re-opened.\n *\n * @param {String} columnName - Column that menu was used\n * @param {Object} columnMenuData - menu information to be saved\n */\n\nexport let updateColumnMenuData = function (gridContextDispatcher, columnMenuData) {\n  gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    columnMenuData: columnMenuData\n  });\n};\n/**\n * Sets the column's filter as stale\n *\n * @param {Object} column - column definition object\n */\n\nexport let setColumnFilterStale = function (column) {\n  if (column.filter) {\n    column.filter.isStale = true;\n  }\n};\n/**\n * Copies over filter data from old column to new one\n * and sets the filter as stale on hidden\n *\n * @param {Object} newColumn - new column info\n * @param {Object} oldColumn - old column info\n */\n\nexport let updateNewColumnFilter = function (newColumn, oldColumn) {\n  if (newColumn.field === oldColumn.field && newColumn.filter && oldColumn.filter) {\n    newColumn.filter.isSelectedFacetValues = oldColumn.filter.isSelectedFacetValues;\n    newColumn.filter.isStale = newColumn.hiddenFlag || oldColumn.filter.isStale;\n    newColumn.filter = { ...newColumn.filter,\n      ...oldColumn.filter.columnMenuData\n    };\n\n    if (oldColumn.filter.columnMenuData && oldColumn.filter.columnMenuData.showFilters && oldColumn.filter.columnMenuData.showFilters.dbValue || oldColumn.filter.showFilterFacets) {\n      newColumn.filter.showFilterFacets = true;\n    }\n  }\n};\n/**\n * Load the locale text.\n */\n\nexport let loadConfiguration = async function () {\n  _localeTextBundle.invalidNumberRange = await localeService.getLocalizedTextFromKey('UIMessages.invalidNumberRange');\n  _localeTextBundle.invalidDate = await localeService.getLocalizedTextFromKey('UIMessages.invalidDate');\n  _localeTextBundle.equalsOperation = await localeService.getLocalizedTextFromKey('UIMessages.equalsOperation');\n  _localeTextBundle.containsOperation = await localeService.getLocalizedTextFromKey('UIMessages.containsOperation');\n  _localeTextBundle.selectAll = await localeService.getLocalizedTextFromKey('UIMessages.selectAll');\n  _localeTextBundle.blanks = await localeService.getLocalizedTextFromKey('UIMessages.blanks');\n  _localeTextBundle.noMatchesFound = await localeService.getLocalizedTextFromKey('UIMessages.noMatchesFound');\n  _localeTextBundle.rangeOperation = await localeService.getLocalizedTextFromKey('UIMessages.rangeOperation');\n  _localeTextBundle.greaterThanOperation = await localeService.getLocalizedTextFromKey('UIMessages.greaterThanOperation');\n  _localeTextBundle.lessThanOperation = await localeService.getLocalizedTextFromKey('UIMessages.lessThanOperation');\n  _localeTextBundle.notContainsOperation = await localeService.getLocalizedTextFromKey('UIMessages.notContainsOperation');\n  _localeTextBundle.startsWithOperation = await localeService.getLocalizedTextFromKey('UIMessages.startsWithOperation');\n  _localeTextBundle.endsWithOperation = await localeService.getLocalizedTextFromKey('UIMessages.endsWithOperation');\n  _localeTextBundle.notEqualsOperation = await localeService.getLocalizedTextFromKey('UIMessages.notEqualsOperation');\n  _localeTextBundle.andFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.andFilterTooltip');\n  _localeTextBundle.greaterThanFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.greaterThanFilterTooltip');\n  _localeTextBundle.greaterThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.greaterThanEqualsFilterTooltip');\n  _localeTextBundle.lessThanFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.lessThanFilterTooltip');\n  _localeTextBundle.lessThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.lessThanEqualsFilterTooltip');\n  _localeTextBundle.equalsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.equalsFilterTooltip');\n  _localeTextBundle.notEqualsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.notEqualsFilterTooltip');\n  _localeTextBundle.containsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.containsFilterTooltip');\n  _localeTextBundle.notContainsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.notContainsFilterTooltip');\n  _localeTextBundle.startsWithFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.startsWithFilterTooltip');\n  _localeTextBundle.endWithFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.endWithFilterTooltip');\n};\n/**\n * Setup to listen to changes in locale.\n *\n * @param {String} locale - String with the updated locale value.\n */\n\neventBus.subscribe('locale.changed', function () {\n  loadConfiguration();\n}, 'awColumnFilterService');\nexports = {\n  loadConfiguration,\n  doTextValidation,\n  doNumericValidation,\n  processFacetValuesInFilter,\n  doTextFiltering,\n  doDateValidation,\n  doDateFiltering,\n  doNumericFiltering,\n  getFilterTypeByColumnType,\n  addFilterValue,\n  setExistingNumericFilter,\n  setExistingDateFilter,\n  setExistingTextFilter,\n  checkExistingFacetFilter,\n  updateColumnFilter,\n  resetColumnFilter,\n  removeStaleFilters,\n  createFilterSummary,\n  removeAllFilters,\n  isColumnFilterApplied,\n  loadFacetValues,\n  updateFacetValuesDebounce,\n  removeFilter,\n  textEnableFilterToggle,\n  textFilterInputChanged,\n  dateEnableFilterToggle,\n  dateFilterInputChanged,\n  numericEnableFilterToggle,\n  numericFilterInputChanged,\n  filterFacetInputChanged,\n  checkForFilterDisability,\n  showFiltersToggleChanged,\n  setColumnFilterStale,\n  updateNewColumnFilter,\n  setFilters,\n  initializeMenu,\n  selectAllInputChanged,\n  clearFilterFromMenu,\n  updateViewTypeMenuData,\n  updateColumnMenuData,\n  updateTableWithColumnFilters\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"names":["messagingService","dateTimeService","localeService","appContextService","propertyService","_","eventBus","columnFilterUtility","_localeTextBundle","exports","numberFacetsToShow","facetCheckboxHeight","SELECT_ALL_PROPERTY","isValidNumber","value","isFinite","isDefaultFilterValue","property","isNil","dbValue","isExistingFacetValueNotEquals","columnFilters","isExistingNotEqualsFacet","forEach","filter","operation","OPERATION_TYPE","CASE_SENSITIVE_NOT_EQUALS","values","includes","isExistingFacetValueEquals","isExistingEqualsFacet","CASE_SENSITIVE_EQUALS","getDefaultFacetSelectionValue","defaultSelectionValue","initializeMenu","column","columnFilterData","columnMenuData","registerContext","columnMenuContext","getCtx","isFacetsInitialized","isFacetLoading","isSelectedFacetValues","isMenuIntialized","defaultFacetSelection","registerCtx","setFilters","columnProvider","dataProvider","newProviderFilters","updatedColumn","updatedColumnFilters","addOrReplaceColumnFilter","getColumnFilters","setColumnFilters","cols","col","field","oldShowFilterFacets","showFilterFacets","updateColumnFilter","setColumnFilterStale","isTextFilterInputDefault","viewModelData","isInputDefault","isFilterApplied","textValue","isDateFilterInputDefault","startDate","isNullDate","endDate","dateApi","dateValue","isNumericFilterInputDefault","opeartionValue","RANGE","startNumber","endNumber","GREATER","numberValue","LESS","EQUALS","isFacetInputDefault","facetDataProvider","facetObjects","getViewModelCollection","getLoadedViewModelObjects","currentValue","serverValue","areAllFacetsUnchecked","allFacetsUnchecked","disableFiltering","isFilterDisabled","update","enableFiltering","clearContextAttributes","context","filterError","doTextValidation","doNumericValidation","isNumber","showError","invalidNumberRange","processFacetValuesInFilter","facetFilter","facetUiValues","push","createCaseSensitiveEqualsFilter","createCaseSensitiveNotEqualsFilter","createTextFilter","eventData","createFilter","columnName","updateTableWithColumnFilters","gridContextDispatcher","columnFilterInfo","filters","type","doTextFiltering","newFilters","isFacetInputDefaultResult","filterData","textColumnFilter","length","doDateValidation","startDateTime","Date","getTime","endDateTime","invalidDate","createDateFilter","startDateUtc","formatUTC","endDateUtc","setHours","createRangeFilter","createGreaterThanEqualsFilter","createLessThanEqualsFilter","doDateFiltering","createNumericFilter","createGreaterThanFilter","createLessThanFilter","createEqualsFilter","doNumericFiltering","getFilterTypeByColumnType","columnType","returnFilterType","FILTER_VIEW","TEXT","isString","toUpperCase","columnTypeString","toString","NUMERIC","DATE","addFilterValue","currentFilterView","existingFilters","isDirty","view","summaryText","uiValue","equalsOperation","hasLov","isEditable","isEnabled","propApi","propertyLabelDisplay","propertyName","operationType","isRequired","setExistingNumericFilter","setExistingDateFilter","containsOperation","setExistingTextFilter","blanksI18n","blanks","noMatchesFoundI18n","noMatchesFound","selectAllDefault","checkExistingFacetFilter","createFilterSummary","newFilter","currentFilter","isValidRangeColumnFilter","rangeOperation","Number","isValidGreaterThanEqualsColumnFilter","isValidLessThanEqualsColumnFilter","isValidGreaterThanColumnFilter","greaterThanOperation","isValidLessThanColumnFilter","lessThanOperation","isValidEqualsColumnFilter","isValidContainsColumnFilter","CONTAINS","isValidNotContainsColumnFilter","NOT_CONTAINS","notContainsOperation","isValidStartsWithColumnFilter","STARTS_WITH","startsWithOperation","isValidEndsWithColumnFilter","ENDS_WITH","endsWithOperation","isValidNotEqualsColumnFilter","NOT_EQUALS","notEqualsOperation","filterDefinition","dataType","resetColumnFilter","removeStaleFilters","columns","newColumnFilters","isValidFilter","currentColumn","hiddenFlag","filterView","filterSummary","filterCount","i","columnFilter","firstValue","secondValue","firstValueDateTime","parse","firstValueDate","toLocaleDateString","secondValueDateTime","secondValueDate","arrayAsString","j","greaterThanEqualsFilterTooltip","andFilterTooltip","lessThanEqualsFilterTooltip","greaterThanFilterTooltip","GREATER_EQUALS","lessThanFilterTooltip","LESS_EQUALS","equalsFilterTooltip","notEqualsFilterTooltip","containsFilterTooltip","notContainsFilterTooltip","startsWithFilterTooltip","endWithFilterTooltip","removeAllFilters","isColumnFilterApplied","selectAllInputChanged","selectAllValue","isBulkEditing","currentFacetObject","setValue","facetValues","facetValuesTotalFound","getTotalObjectsFound","updateColumnMenuData","checkForFilterDisability","getTypeFilter","viewModel","typeFilter","data","loadFacetValues","subPanelContext","reload","hasFilterFacetAction","showFilters","filterFacetValues","filterFacetValuesTotalFound","isStale","gridContext","isBulkediting","existingColumnFilters","existingFilter","startIndex","defaultFacetValue","filterFacetInput","maxToReturn","filterFacetResults","getFilterFacetsAction","selectAllProperty","propertyDisplayName","selectAll","typex","fieldValue","facetProperty","facetValue","totalFound","facetProperties","concat","results","updateFacetValuesDebounce","debounce","maxWait","trailing","leading","removeFilter","columnFiltersToUpdate","removeColumnFilter","clearFilterFromMenu","isClearActionUsed","updateViewTypeMenuData","textEnableFilterToggle","textFilterInputChanged","dateEnableFilterToggle","dateFilterInputChanged","numericEnableFilterToggle","numericFilterInputChanged","filterFacetInputChanged","facetParameters","item","checked","selectAllFacet","currentFacet","isFacetInputDefaultValue","showFiltersToggleChanged","updateNewColumnFilter","newColumn","oldColumn","loadConfiguration","getLocalizedTextFromKey","subscribe"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/awColumnFilterService.js"],"sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used for PLTable as Column Filter Service\n *\n * @module js/awColumnFilterService\n *\n */\nimport messagingService from 'js/messagingService';\nimport dateTimeService from 'js/dateTimeService';\nimport localeService from 'js/localeService';\nimport appContextService from 'js/appCtxService';\nimport propertyService from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport columnFilterUtility from 'js/awColumnFilterUtility';\n\nvar _localeTextBundle = {};\n\nvar exports = {};\n\n/*********************************\n * Temporary Constants for Facet *\n ********************************/\nconst numberFacetsToShow = 10;\nconst facetCheckboxHeight = 33;\nconst SELECT_ALL_PROPERTY = 'awSelectAllOption';\n\n/**\n * Determines if value is valid number to process.\n *\n * @param {Number|String} value - Number value\n *\n * @returns {Boolean} true if valid number\n */\nvar isValidNumber = function( value ) {\n    return isFinite( value ) && value !== null && value !== '';\n};\n\n/**\n * Check if property has a default value.\n *\n * @param {Object} property - property to check values\n * @returns {boolean} true is has blank value\n */\nconst isDefaultFilterValue = function( property ) {\n    return property && ( _.isNil( property.dbValue ) || property.dbValue === '' );\n};\n\n/**\n * Check if existing filters have not equal facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and not equals\n */\nconst isExistingFacetValueNotEquals = function( columnFilters, value ) {\n    let isExistingNotEqualsFacet = false;\n    _.forEach( columnFilters, function( filter ) {\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS && filter.values && filter.values.includes( value ) ) {\n            isExistingNotEqualsFacet = true;\n            return false;\n        }\n    } );\n    return isExistingNotEqualsFacet;\n};\n\n/**\n * Check if existing filters have equals facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and equals\n */\nconst isExistingFacetValueEquals = function( columnFilters, value ) {\n    let isExistingEqualsFacet = false;\n    _.forEach( columnFilters, function( filter ) {\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS && filter.values && filter.values.includes( value ) ) {\n            isExistingEqualsFacet = true;\n            return false;\n        }\n    } );\n    return isExistingEqualsFacet;\n};\n\n/**\n * Get the default selection of facets based on existing filters.\n *\n * @param {Array} columnFilters\n * @returns true if existing filters have not equals, false if equals\n */\nconst getDefaultFacetSelectionValue = function( columnFilters ) {\n    let defaultSelectionValue = null;\n    _.forEach( columnFilters, function( filter ) {\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS ) {\n            defaultSelectionValue = false;\n            return false;\n        }\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS ) {\n            defaultSelectionValue = true;\n            return false;\n        }\n    } );\n    return defaultSelectionValue;\n};\n\n/**\n * Initialize the column menu's default variables.\n *\n * @param {Object} column - column information\n * @param {Object} viewModelData - menu view model data\n * @param {Object} operation - column filtering operation\n */\nexport let initializeMenu = function( column, columnFilterData, columnMenuData = {} ) {\n    let registerContext = false;\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( !columnMenuContext ) {\n        columnMenuContext = {};\n        registerContext = true;\n    }\n    columnMenuContext.isFacetsInitialized = false;\n    columnMenuContext.isFacetLoading = false;\n    columnMenuContext.isSelectedFacetValues = false;\n    columnMenuContext.isMenuIntialized = true;\n    if( column.filter ) {\n        // Set the defaultFacetSection for when an existing facet filter was applied\n        columnMenuContext.defaultFacetSelection = getDefaultFacetSelectionValue( column.filter.columnFilters );\n        if( columnMenuContext.defaultFacetSelection === false ) {\n            columnMenuContext.isSelectedFacetValues = true;\n        }\n    }\n    registerContext && appContextService.registerCtx( 'columnMenuContext', columnMenuContext );\n\n    columnMenuData = { ...columnFilterData, ...columnMenuData };\n\n    return { columnMenuData: columnMenuData };\n};\n\n/**\n * Sets the filter information on the column filter and the column provider filters used for SOA.\n *\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n * @param {Array} newProviderFilters new column provider filters to set\n * @param {Object} updatedColumn column with the updated filter attached\n */\nexport let setFilters = function( columnProvider, dataProvider, newProviderFilters, updatedColumn ) {\n    const updatedColumnFilters = columnFilterUtility.addOrReplaceColumnFilter( columnProvider.getColumnFilters(), newProviderFilters );\n    columnProvider.setColumnFilters( updatedColumnFilters );\n\n    // Set all filters as stale except for column in newProviderFilters\n    _.forEach( dataProvider.cols, function( col ) {\n        if( col.field === updatedColumn.field ) {\n            // Need to preserve whether show filters was on/off\n            const oldShowFilterFacets = col.filter.showFilterFacets;\n            exports.updateColumnFilter( col, newProviderFilters );\n            col.filter.showFilterFacets = oldShowFilterFacets;\n        } else {\n            exports.setColumnFilterStale( col );\n        }\n    } );\n};\n\n/**\n * Check if text filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\nvar isTextFilterInputDefault = function( column, viewModelData ) {\n    var isInputDefault = false;\n    if( !column.filter.isFilterApplied && isDefaultFilterValue( viewModelData.textValue ) ) {\n        isInputDefault = true;\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if date filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\nvar isDateFilterInputDefault = function( column, viewModelData ) {\n    var isInputDefault = false;\n    if( !column.filter.isFilterApplied && viewModelData.startDate &&\n        dateTimeService.isNullDate( viewModelData.startDate.dbValue ) &&\n        viewModelData.endDate &&\n        dateTimeService.isNullDate( viewModelData.endDate.dbValue ) &&\n        viewModelData.startDate.dateApi && !viewModelData.startDate.dateApi.dateValue &&\n        viewModelData.endDate.dateApi && !viewModelData.endDate.dateApi.dateValue ) {\n        isInputDefault = true;\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if numeric filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\nvar isNumericFilterInputDefault = function( column, viewModelData ) {\n    var isInputDefault = false;\n    if( !column.filter.isFilterApplied ) {\n        const opeartionValue = viewModelData.operation.dbValue;\n        switch ( opeartionValue ) {\n            case columnFilterUtility.OPERATION_TYPE.RANGE:\n                isInputDefault = isDefaultFilterValue( viewModelData.startNumber ) && isDefaultFilterValue( viewModelData.endNumber );\n                break;\n            case columnFilterUtility.OPERATION_TYPE.GREATER:\n                isInputDefault = isDefaultFilterValue( viewModelData.numberValue );\n                break;\n            case columnFilterUtility.OPERATION_TYPE.LESS:\n                isInputDefault = isDefaultFilterValue( viewModelData.numberValue );\n                break;\n            case columnFilterUtility.OPERATION_TYPE.EQUALS:\n                isInputDefault = isDefaultFilterValue( viewModelData.numberValue );\n                break;\n        }\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if all facets are checked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are selected\n */\nvar isFacetInputDefault = function( facetDataProvider ) {\n    var isInputDefault = true;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    if( facetObjects ) {\n        _.forEach( facetObjects, function( currentValue ) {\n            if( !currentValue.dbValue && currentValue.serverValue !== SELECT_ALL_PROPERTY ) {\n                isInputDefault = false;\n                return false;\n            }\n            return true;\n        } );\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if all facets are unchecked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are deselected\n */\nvar areAllFacetsUnchecked = function( facetDataProvider ) {\n    var allFacetsUnchecked;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    if( facetObjects && !isFacetInputDefault( facetDataProvider ) ) {\n        allFacetsUnchecked = true;\n        _.forEach( facetObjects, function( currentValue ) {\n            if( currentValue.dbValue ) {\n                allFacetsUnchecked = false;\n                return false;\n            }\n            return true;\n        } );\n    }\n    return allFacetsUnchecked;\n};\n\n/**\n * Disable filtering in menu.\n *\n * @param {Object} column column definition object\n */\nvar disableFiltering = function( isFilterDisabled ) {\n    if ( isFilterDisabled.update ) {\n        isFilterDisabled.update( { value: true } );\n    } else {\n        isFilterDisabled.value = true;\n    }\n};\n\n/**\n * Enable filtering in menu.\n *\n * @param {Object} column column definition object\n */\nvar enableFiltering = function( isFilterDisabled ) {\n    if ( isFilterDisabled.update ) {\n        isFilterDisabled.update( { value: false } );\n    } else {\n        isFilterDisabled.value = false;\n    }\n};\n\n/**\n * Clear an filter errors from the menu.\n *\n * @param {Object} context - menu context information\n */\nvar clearContextAttributes = function( context ) {\n    if( context.filterError ) {\n        delete context.filterError; // remove error if exists\n    }\n};\n\n/**\n * Validate the text information coming from the filter column menu UI.\n *\n * @param {Object} textValue - The text value coming from the filter menu\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if textValue is valid\n */\nexport let doTextValidation = function( textValue, viewModelData ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext ) {\n        clearContextAttributes( columnMenuContext );\n    }\n    return true;\n};\n\n/**\n * Validate the numeric information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if numeric information is valid\n */\nexport let doNumericValidation = function( viewModelData ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext ) {\n        clearContextAttributes( columnMenuContext );\n\n        if( _.isNumber( viewModelData.startNumber.dbValue ) && _.isNumber( viewModelData.endNumber.dbValue ) && viewModelData.startNumber.dbValue > viewModelData.endNumber.dbValue ) {\n            columnMenuContext.filterError = true;\n            messagingService.showError( _localeTextBundle.invalidNumberRange );\n        }\n        return !columnMenuContext.filterError;\n    }\n    return true;\n};\n\n/**\n * Create a column filter from the facet values in column.\n *\n * @param {Object} column - column definition object\n * @returns {Object} filter object created from facet values\n */\nexport let processFacetValuesInFilter = function( column, facetDataProvider ) {\n    var facetFilter = null;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( facetObjects ) {\n        var facetUiValues = [];\n        _.forEach( facetObjects, function( currentValue ) {\n            if( currentValue.serverValue !== SELECT_ALL_PROPERTY &&\n                ( columnMenuContext.isSelectedFacetValues && currentValue.dbValue === true ||\n                    !columnMenuContext.isSelectedFacetValues && currentValue.dbValue === false ) ) {\n                facetUiValues.push( currentValue.serverValue );\n            }\n        } );\n\n        if( columnMenuContext.isSelectedFacetValues ) {\n            facetFilter = columnFilterUtility.createCaseSensitiveEqualsFilter( column.field, facetUiValues );\n        } else {\n            facetFilter = columnFilterUtility.createCaseSensitiveNotEqualsFilter( column.field, facetUiValues );\n        }\n    }\n    return facetFilter;\n};\n\n/**\n * Creates a text filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\nvar createTextFilter = function( eventData ) {\n    var filter = null;\n    if( eventData ) {\n        filter = columnFilterUtility.createFilter( eventData.operation, eventData.columnName, [ eventData.textValue ] );\n    }\n    return filter;\n};\n\nexport let updateTableWithColumnFilters = function( gridContextDispatcher, column, columnFilters ) {\n    const columnFilterInfo = {\n        column: column,\n        filters: columnFilters\n    };\n    gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        columnFilterInfo: columnFilterInfo\n    } );\n};\n\n/**\n * Add/remove the text filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\nexport let doTextFiltering = function( column, viewModelData, facetDataProvider, gridContextDispatcher ) {\n    // client side validation\n    let newFilters = null;\n    if( exports.doTextValidation( viewModelData ) ) {\n        // Set columnProvider.columnFilters so dataProvider/actions can use the information\n        const isFacetInputDefaultResult = isFacetInputDefault( facetDataProvider );\n        if( viewModelData.textValue || !isFacetInputDefaultResult ) {\n            newFilters = [];\n            if( viewModelData.textValue && viewModelData.textValue.dbValue ) {\n                const filterData = {\n                    columnName: column.field,\n                    operation: viewModelData.operation.dbValue,\n                    textValue: viewModelData.textValue.dbValue\n                };\n                var textColumnFilter = createTextFilter( filterData );\n                newFilters.push( textColumnFilter );\n            }\n            if( !isFacetInputDefaultResult ) {\n                const facetFilter = exports.processFacetValuesInFilter( column, facetDataProvider );\n                if( facetFilter && facetFilter.values && facetFilter.values.length ) {\n                    newFilters.push( facetFilter );\n                }\n            }\n        }\n    }\n\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if ( columnMenuContext.filterError !== true && gridContextDispatcher ) {\n        updateTableWithColumnFilters( gridContextDispatcher, column, newFilters );\n    }\n    return newFilters;\n};\n\n/**\n * Validate the date information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if date is valid\n */\nexport let doDateValidation = function( viewModelData ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext ) {\n        clearContextAttributes( columnMenuContext );\n\n        if( !dateTimeService.isNullDate( viewModelData.startDate.dbValue ) && !dateTimeService.isNullDate( viewModelData.endDate.dbValue ) ) {\n            var startDateTime = _.isNumber( viewModelData.startDate.dbValue ) ? viewModelData.startDate.dbValue : new Date( viewModelData.startDate.dbValue ).getTime();\n            var endDateTime = _.isNumber( viewModelData.endDate.dbValue ) ? viewModelData.endDate.dbValue : new Date( viewModelData.endDate.dbValue ).getTime();\n            if( startDateTime > endDateTime ) {\n                columnMenuContext.filterError = true;\n                messagingService.showError( _localeTextBundle.invalidDate );\n            }\n        }\n        return !columnMenuContext.filterError;\n    }\n    return true;\n};\n\n/**\n * Creates a date filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\nvar createDateFilter = function( eventData ) {\n    var filter = null;\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    if( !dateTimeService.isNullDate( eventData.startDate ) && !dateTimeService.isNullDate( eventData.endDate ) ) {\n        var startDateUtc = dateTimeService.formatUTC( new Date( eventData.startDate ) );\n        var endDate = new Date( eventData.endDate );\n        var endDateUtc = dateTimeService.formatUTC( endDate.setHours( 23, 59, 59, 999 ) );\n        filter = columnFilterUtility.createRangeFilter( eventData.columnName, [ startDateUtc, endDateUtc ] );\n    } else if( !dateTimeService.isNullDate( eventData.startDate ) ) {\n        startDateUtc = dateTimeService.formatUTC( new Date( eventData.startDate ) );\n        filter = columnFilterUtility.createGreaterThanEqualsFilter( eventData.columnName, [ startDateUtc ] );\n    } else if( !dateTimeService.isNullDate( eventData.endDate ) ) {\n        endDate = new Date( eventData.endDate );\n        endDateUtc = dateTimeService.formatUTC( endDate.setHours( 23, 59, 59, 999 ) );\n        filter = columnFilterUtility.createLessThanEqualsFilter( eventData.columnName, [ endDateUtc ] );\n    }\n    return filter;\n};\n\n/**\n * Add/remove the date filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\nexport let doDateFiltering = function( column, viewModelData, facetDataProvider, gridContextDispatcher ) {\n    let newFilters = null;\n    // Client validation\n    const isFacetInputDefaultResult = isFacetInputDefault( facetDataProvider );\n    if( exports.doDateValidation( viewModelData ) || !isFacetInputDefaultResult ) {\n        newFilters = [];\n        const filterData = {\n            columnName: column.field,\n            startDate: viewModelData.startDate.dbValue,\n            endDate: viewModelData.endDate.dbValue\n        };\n        var filter = createDateFilter( filterData );\n        if( filter ) {\n            newFilters.push( filter );\n        }\n        if( !isFacetInputDefaultResult ) {\n            const facetFilter = exports.processFacetValuesInFilter( column, facetDataProvider );\n            if( facetFilter && facetFilter.values && facetFilter.values.length ) {\n                newFilters.push( facetFilter );\n            }\n        }\n    }\n\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if ( columnMenuContext.filterError !== true && gridContextDispatcher ) {\n        updateTableWithColumnFilters( gridContextDispatcher, column, newFilters );\n    }\n    return newFilters;\n};\n\n/**\n * Creates a numeric filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\nvar createNumericFilter = function( eventData ) {\n    var filter = null;\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    if( eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE &&\n        isValidNumber( eventData.startNumber ) && isValidNumber( eventData.endNumber ) ) {\n        filter = columnFilterUtility.createRangeFilter( eventData.columnName, [ eventData.startNumber, eventData.endNumber ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber( eventData.startNumber ) ) {\n        filter = columnFilterUtility.createGreaterThanEqualsFilter( eventData.columnName, [ eventData.startNumber ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber( eventData.endNumber ) ) {\n        filter = columnFilterUtility.createLessThanEqualsFilter( eventData.columnName, [ eventData.endNumber ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.GREATER && isValidNumber( eventData.numberValue ) ) {\n        filter = columnFilterUtility.createGreaterThanFilter( eventData.columnName, [ eventData.numberValue ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.LESS && isValidNumber( eventData.numberValue ) ) {\n        filter = columnFilterUtility.createLessThanFilter( eventData.columnName, [ eventData.numberValue ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.EQUALS && isValidNumber( eventData.numberValue ) ) {\n        filter = columnFilterUtility.createEqualsFilter( eventData.columnName, [ eventData.numberValue ] );\n    }\n    return filter;\n};\n\n/**\n * Add/remove the numeric filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\nexport let doNumericFiltering = function( column, viewModelData, facetDataProvider, gridContextDispatcher ) {\n    let newFilters = null;\n    const isFacetInputDefaultResult = isFacetInputDefault( facetDataProvider );\n    if( exports.doNumericValidation( viewModelData ) || !isFacetInputDefaultResult ) {\n        // Set columnProvider.columnFilters so dataProvider/actions can use the information\n        newFilters = [];\n        const filterData = {\n            columnName: column.field,\n            operation: viewModelData.operation.dbValue,\n            numberValue: viewModelData.numberValue.dbValue,\n            startNumber: viewModelData.startNumber.dbValue,\n            endNumber: viewModelData.endNumber.dbValue\n        };\n        var filter = createNumericFilter( filterData );\n        if( filter ) {\n            newFilters.push( filter );\n        }\n        if( !isFacetInputDefaultResult ) {\n            const facetFilter = exports.processFacetValuesInFilter( column, facetDataProvider );\n            if( facetFilter && facetFilter.values && facetFilter.values.length ) {\n                newFilters.push( facetFilter );\n            }\n        }\n    }\n\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if ( columnMenuContext.filterError !== true && gridContextDispatcher ) {\n        updateTableWithColumnFilters( gridContextDispatcher, column, newFilters );\n    }\n    return newFilters;\n};\n\n/**\n * Find the type of filter to use by the column type.\n *\n * @param {String} columnType - Repersents the data type of the column\n *\n * @returns {String} The type of filter to use in the column menu\n */\nexport let getFilterTypeByColumnType = function( columnType ) {\n    var returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n\n    if( columnType ) {\n        if( _.isString( columnType ) ) {\n            columnType = columnType.toUpperCase();\n        }\n\n        var columnTypeString = columnType.toString();\n\n        switch ( columnTypeString ) {\n            case 'DOUBLE':\n            case 'INTEGER':\n            case 'FLOAT':\n            case '3': // Client Property Type\n            case '4': // Client Property Type Double\n            case '5': // Client Property Type Integer\n            case '7': // Client Property Type Short\n                returnFilterType = columnFilterUtility.FILTER_VIEW.NUMERIC;\n                break;\n            case 'DATE':\n            case '2': // Client Property Type Date\n                returnFilterType = columnFilterUtility.FILTER_VIEW.DATE;\n                break;\n            case 'STRING':\n            default:\n                returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n        }\n    }\n\n    return returnFilterType;\n};\n\n/**\n * Add filter information to the column object.\n *\n * @param {Object} column - Column to add filter information to\n * @param {String} currentFilterView - Filter view\n * @param {Array} existingFilters - Existing filter view to reference\n */\nexport let addFilterValue = function( column, currentFilterView, existingFilters ) {\n    existingFilters = existingFilters || [];\n\n    switch ( currentFilterView ) {\n        case columnFilterUtility.FILTER_VIEW.NUMERIC:\n            column.filter = {\n                isFilterApplied: false,\n                isDirty: false,\n                view: currentFilterView,\n                summaryText: '',\n                operation: {\n                    dbValue: 'equals',\n                    uiValue: _localeTextBundle.equalsOperation,\n                    hasLov: true,\n                    isEditable: true,\n                    isEnabled: true,\n                    propApi: {},\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL',\n                    propertyName: 'operation',\n                    type: 'STRING',\n                    operationType: 'childcommand'\n                },\n                numberValue: {\n                    dbValue: '',\n                    isEnabled: true,\n                    type: 'DOUBLE',\n                    isRequired: false,\n                    isEditable: true,\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n                },\n                startNumber: {\n                    dbValue: '',\n                    isEnabled: true,\n                    type: 'DOUBLE',\n                    isRequired: false,\n                    isEditable: true,\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n                },\n                endNumber: {\n                    dbValue: '',\n                    isEnabled: true,\n                    type: 'DOUBLE',\n                    isRequired: false,\n                    isEditable: true,\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n                }\n            };\n            exports.setExistingNumericFilter( column.filter, existingFilters );\n            break;\n        case columnFilterUtility.FILTER_VIEW.DATE:\n            column.filter = {\n                isFilterApplied: false,\n                view: currentFilterView,\n                summaryText: '',\n                startDate: {\n                    dbValue: '',\n                    dateApi: {},\n                    isEnabled: true,\n                    type: 'DATE'\n                },\n                endDate: {\n                    dbValue: '',\n                    dateApi: {},\n                    isEnabled: true,\n                    type: 'DATE'\n                }\n            };\n            exports.setExistingDateFilter( column.filter, existingFilters );\n            break;\n        case columnFilterUtility.FILTER_VIEW.TEXT:\n        default:\n            column.filter = {\n                isFilterApplied: false,\n                isDirty: false,\n                view: currentFilterView,\n                summaryText: '',\n                columnFilters: [],\n                operation: {\n                    dbValue: 'contains',\n                    value: 'contains',\n                    uiValue: _localeTextBundle.containsOperation\n                },\n                textValue: {\n                    dbValue: ''\n                }\n            };\n            exports.setExistingTextFilter( column.filter, existingFilters );\n            // default to equals for custom filter\n            if( currentFilterView !== columnFilterUtility.FILTER_VIEW.TEXT ) {\n                column.filter.operation.dbValue = 'equals';\n                column.filter.operation.uiValue = _localeTextBundle.equalsOperation;\n                if ( existingFilters.length > 0 ) {\n                    column.filter.isFilterApplied = true;\n                }\n            }\n    }\n\n    // Set values common to all types\n    column.filter.isSelectedFacetValues = false;\n    column.filter.blanksI18n = _localeTextBundle.blanks;\n    column.filter.noMatchesFoundI18n = _localeTextBundle.noMatchesFound;\n    column.filter.selectAllDefault = true;\n    column.filter.showFilterFacets = false;\n\n    exports.checkExistingFacetFilter( column.filter, existingFilters );\n\n    if( column.filter.isFilterApplied ) {\n        column.filter.columnFilters = existingFilters;\n        column.filter.summaryText = exports.createFilterSummary( existingFilters, column.filter.view );\n    } else {\n        column.filter.columnFilters = [];\n    }\n};\n\n/**\n * Sets the existing filters on to the new numeric filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\nexport let setExistingNumericFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( currentFilter ) {\n        if( columnFilterUtility.isValidRangeColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n            newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n            newFilter.startNumber.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.endNumber.dbValue = Number( currentFilter.values[ 1 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidGreaterThanEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n            newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n            newFilter.startNumber.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidLessThanEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n            newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n            newFilter.endNumber.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidGreaterThanColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.GREATER;\n            newFilter.operation.uiValue = _localeTextBundle.greaterThanOperation;\n            newFilter.numberValue.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidLessThanColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.LESS;\n            newFilter.operation.uiValue = _localeTextBundle.lessThanOperation;\n            newFilter.numberValue.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n            newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n            newFilter.numberValue.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Sets the existing filters on to the new date filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\nexport let setExistingDateFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( currentFilter ) {\n        if( columnFilterUtility.isValidRangeColumnFilter( currentFilter ) ) {\n            var startDate = new Date( currentFilter.values[ 0 ] );\n            var endDate = new Date( currentFilter.values[ 1 ] );\n            newFilter.startDate.dbValue = startDate.getTime();\n            newFilter.endDate.dbValue = endDate.getTime();\n            newFilter.isFilterApplied = true;\n        } else if( columnFilterUtility.isValidGreaterThanEqualsColumnFilter( currentFilter ) ) {\n            startDate = new Date( currentFilter.values[ 0 ] );\n            newFilter.startDate.dbValue = startDate.getTime();\n            newFilter.isFilterApplied = true;\n        } else if( columnFilterUtility.isValidLessThanEqualsColumnFilter( currentFilter ) ) {\n            endDate = new Date( currentFilter.values[ 0 ] );\n            newFilter.endDate.dbValue = endDate.getTime();\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Sets the existing filters on to the new text filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\nexport let setExistingTextFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( currentFilter ) {\n        if( columnFilterUtility.isValidContainsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.CONTAINS;\n            newFilter.operation.uiValue = _localeTextBundle.containsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidNotContainsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS;\n            newFilter.operation.uiValue = _localeTextBundle.notContainsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidStartsWithColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.STARTS_WITH;\n            newFilter.operation.uiValue = _localeTextBundle.startsWithOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidEndsWithColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.ENDS_WITH;\n            newFilter.operation.uiValue = _localeTextBundle.endsWithOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n            newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n        } else if( columnFilterUtility.isValidNotEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_EQUALS;\n            newFilter.operation.uiValue = _localeTextBundle.notEqualsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Sets if filter is Applied for facets based on existing filters\n * @param {Object} newFilter - the new filter object that was created\n * @param {Object} existingFilters - The existing filters\n */\nexport let checkExistingFacetFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( filter ) {\n        if( ( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS || filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS ) &&\n            filter.values && filter.values.length > 0 ) {\n            newFilter.showFilterFacets = true;\n            newFilter.selectAllDefault = false;\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Update the column with filter information.\n *\n * @param {Object} column columnInfo\n * @param {Array} existingFilters existing column filter\n */\nexport let updateColumnFilter = function( column, existingFilters ) {\n    var currentFilterView = column.filterDefinition;\n\n    if( !currentFilterView ) {\n        currentFilterView = exports.getFilterTypeByColumnType( column.dataType );\n    }\n\n    exports.addFilterValue( column, currentFilterView, existingFilters );\n};\n\n/**\n * Reset the column with default filter information.\n *\n * @param {Object} column columnInfo\n */\nexport let resetColumnFilter = function( column ) {\n    exports.updateColumnFilter( column, [] );\n};\n\n/**\n * Removes column filters that no longer apply to the table.\n *\n * @param {Object} columnProvider - Column provider used to store the filters\n * @param {Array} columns - columns in the table\n */\nexport let removeStaleFilters = function( columnProvider, columns ) {\n    if( columnProvider && columns && columns.length ) {\n        var columnFilters = columnProvider.getColumnFilters();\n        if( columnFilters && columnFilters.length ) {\n            var newColumnFilters = _.filter( columnFilters, function( currentFilter ) {\n                var isValidFilter = false;\n                _.forEach( columns, function( currentColumn ) {\n                    if( ( currentFilter.columnName === currentColumn.propertyName || currentFilter.columnName === currentColumn.field ) && !currentColumn.hiddenFlag ) {\n                        isValidFilter = true;\n                        return false;\n                    }\n                    return true;\n                } );\n                return isValidFilter;\n            } );\n            columnProvider.setColumnFilters( newColumnFilters );\n        }\n    }\n};\n\n/**\n * Create a filter summary text of the applied filter.\n *\n * @param {Array} columnFilters - Column filter objects that contains operation and values\n * @param {String} filterView - filter view in use\n *\n * @returns {String} returns the text summary of the applied filter\n */\nexport let createFilterSummary = function( columnFilters, filterView ) {\n    var filterSummary = '';\n    var filterCount = columnFilters.length;\n    if( !columnFilters || filterCount < 1 ) {\n        return filterSummary;\n    }\n\n    for( var i = 0; i < filterCount; i++ ) {\n        var columnFilter = columnFilters[ i ];\n        var firstValue = columnFilter.values[ 0 ];\n        var secondValue = columnFilter.values.length > 1 ? columnFilter.values[ 1 ] : '';\n\n        // Convert date values to readable strings\n        if( filterView === columnFilterUtility.FILTER_VIEW.DATE ) {\n            var firstValueDateTime = Date.parse( firstValue );\n            if( firstValueDateTime ) {\n                var firstValueDate = new Date( firstValueDateTime );\n                firstValue = firstValueDate.toLocaleDateString();\n            }\n            if( secondValue ) {\n                var secondValueDateTime = Date.parse( secondValue );\n                if( secondValueDateTime ) {\n                    var secondValueDate = new Date( secondValueDateTime );\n                    secondValue = secondValueDate.toLocaleDateString();\n                }\n            }\n        }\n\n        var arrayAsString = '';\n        for( var j = 0; j < columnFilter.values.length; j++ ) {\n            if( j > 0 && j < columnFilter.values.length ) {\n                arrayAsString += ',';\n            }\n\n            var value = columnFilter.values[ j ];\n            if( value === '' ) {\n                arrayAsString += _localeTextBundle.blanks;\n            } else {\n                arrayAsString += value;\n            }\n        }\n\n        // Set the filter summary text based on the operation type\n        switch ( columnFilter.operation ) {\n            case columnFilterUtility.OPERATION_TYPE.RANGE:\n                filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\" ';\n                filterSummary += _localeTextBundle.andFilterTooltip + ' ';\n                filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n                filterSummary += ' \"' + secondValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.GREATER:\n                filterSummary += _localeTextBundle.greaterThanFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.GREATER_EQUALS:\n                filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.LESS:\n                filterSummary += _localeTextBundle.lessThanFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.LESS_EQUALS:\n                filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.EQUALS:\n            case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS:\n                filterSummary += _localeTextBundle.equalsFilterTooltip;\n                filterSummary += ' \"' + arrayAsString + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.NOT_EQUALS:\n            case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS:\n                filterSummary += _localeTextBundle.notEqualsFilterTooltip;\n                filterSummary += ' \"' + arrayAsString + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.CONTAINS:\n                filterSummary += _localeTextBundle.containsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS:\n                filterSummary += _localeTextBundle.notContainsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.STARTS_WITH:\n                filterSummary += _localeTextBundle.startsWithFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.ENDS_WITH:\n                filterSummary += _localeTextBundle.endWithFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            default:\n                filterSummary += filterView;\n        }\n\n        if( filterCount > 1 && i === 0 ) {\n            filterSummary += ', ';\n        }\n    }\n    return filterSummary;\n};\n\n/**\n * Remove all the filters from the column provider, reset the dataProvider column filters.\n *\n * @param {Object} dataProvider data provider that contains the columns\n * @param {Object} columnProvider column provider that contains the column filters\n */\nexport let removeAllFilters = function( dataProvider, columnProvider ) {\n    var columns = dataProvider.cols;\n    for( var i = 0; i < columns.length; i++ ) {\n        exports.setColumnFilterStale( columns[ i ] );\n        exports.resetColumnFilter( columns[ i ] );\n    }\n    columnProvider.setColumnFilters( [] );\n};\n\n/**\n * Check if any of the columns have a filter applied.\n *\n * @param {Object} dataProvider data provider containing all the columns\n * @returns {Boolean} true/false based on if any column has a filter applied\n */\nexport let isColumnFilterApplied = function( dataProvider ) {\n    var columns = dataProvider.cols;\n    for( var i = 0; i < columns.length; i++ ) {\n        if( columns[ i ].filter && columns[ i ].filter.isFilterApplied ) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Select All toggle has been switched, switch all facets to checked/unchecked.\n *\n * @param {boolean} selectAllValue - Value if select all is checked\n * @param {Object} facetDataProvider - data provider of facet list\n * @returns {boolean} selectAllValue\n */\nexport let selectAllInputChanged = function( gridContextDispatcher, column, viewModelData, selectAllValue, facetDataProvider, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    columnMenuContext.isSelectedFacetValues = !selectAllValue;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    _.forEach( facetObjects, function( currentFacetObject ) {\n        propertyService.setValue( currentFacetObject, selectAllValue );\n    } );\n\n    const columnMenuData = { columnName: column.field };\n    columnMenuData.facetValues = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n    exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n\n    checkForFilterDisability( column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled );\n    return selectAllValue;\n};\n\nconst getTypeFilter = ( column, viewModel ) => {\n    var typeFilter = null;\n    var eventData = null;\n    if ( column.filter.view === columnFilterUtility.FILTER_VIEW.TEXT && viewModel.data.textValue.dbValue ) {\n        eventData = {\n            columnName: column.field,\n            operation: viewModel.data.operation.dbValue,\n            textValue: viewModel.data.textValue.dbValue\n        };\n        typeFilter = createTextFilter( eventData );\n    } else if ( column.filter.view === columnFilterUtility.FILTER_VIEW.NUMERIC ) {\n        eventData = {\n            columnName: column.field,\n            operation: viewModel.data.operation.dbValue,\n            numberValue: viewModel.data.numberValue.dbValue,\n            startNumber: viewModel.data.startNumber.dbValue,\n            endNumber: viewModel.data.endNumber.dbValue\n        };\n        if ( exports.doNumericValidation( viewModel.data ) ) {\n            typeFilter = createNumericFilter( eventData );\n        }\n    } else if ( column.filter.view === columnFilterUtility.FILTER_VIEW.DATE ) {\n        eventData = {\n            columnName: column.field,\n            startDate: viewModel.data.startDate.dbValue,\n            endDate: viewModel.data.endDate.dbValue\n        };\n        if ( exports.doDateValidation( viewModel.data ) ) {\n            typeFilter = createDateFilter( eventData );\n        }\n    }\n    return typeFilter;\n};\n\n/**\n * Call the 'getFacets' function from the dataProvider if available.\n *\n * @param {Object} gridContextDispatcher - table data dispatcher\n * @param {Object} column - column definition object\n * @param {Object} viewModel - view model of the table\n * @param {Object} subPanelContext - menu context information\n * @param {Object} facetDataProvider - The data provider of the facets.\n * @param {Boolean} reload - if reloading facets\n * @param {Object} isFilterDisabled - atomic data to determine filter disability\n */\nexport let loadFacetValues = async function( gridContextDispatcher, column, viewModel, subPanelContext, facetDataProvider, reload, isFilterDisabled ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext && !columnMenuContext.isFacetLoading ) {\n        columnMenuContext.isFacetLoading = true;\n        if( subPanelContext.hasFilterFacetAction && viewModel.data.showFilters.dbValue ) {\n            let filterFacetValues = [];\n            let filterFacetValuesTotalFound = 0;\n            if( !column.filter.isStale && column.filter.facetValues && reload ) {\n                filterFacetValues = column.filter.facetValues;\n                filterFacetValuesTotalFound = column.filter.facetValuesTotalFound;\n                facetDataProvider.update( filterFacetValues, filterFacetValuesTotalFound );\n                exports.checkForFilterDisability( column, viewModel.data, subPanelContext.hasFilterFacetAction, facetDataProvider, subPanelContext.gridContext.isBulkediting, isFilterDisabled );\n            } else {\n                var filters = [];\n                var typeFilter = getTypeFilter( column, viewModel );\n\n                if( typeFilter ) {\n                    filters.push( typeFilter );\n                }\n\n                // Add other column's filters to input\n                _.forEach( subPanelContext.existingColumnFilters, function( existingFilter ) {\n                    if( existingFilter.columnName !== column.propertyName && existingFilter.columnName !== column.field ) {\n                        filters.push( existingFilter );\n                    }\n                } );\n\n                var startIndex = 0;\n                const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n                let defaultFacetValue = columnMenuContext.defaultFacetSelection !== false;\n                if( !reload && facetObjects ) {\n                    startIndex = facetObjects.length - 1;\n                } else if( columnMenuContext.isFacetsInitialized && reload ) {\n                    // reset show all since data is being reloaded\n                    defaultFacetValue = true;\n                }\n\n                var filterFacetInput = {\n                    column: column,\n                    columnFilters: filters,\n                    maxToReturn: 50,\n                    startIndex: startIndex\n                };\n\n                let filterFacetResults = await subPanelContext.getFilterFacetsAction( filterFacetInput );\n\n                const selectAllProperty = {\n                    propertyDisplayName: _localeTextBundle.selectAll,\n                    typex: 'BOOLEAN',\n                    serverValue: SELECT_ALL_PROPERTY\n                };\n\n                if( filterFacetResults && filterFacetResults.values && filterFacetResults.values.length ) {\n                    // Add select all if reload\n                    if( reload ) {\n                        filterFacetValues.push( selectAllProperty );\n                        if( columnMenuContext.isFacetsInitialized ) {\n                            propertyService.setValue( selectAllProperty, true );\n                        } else {\n                            propertyService.setValue( selectAllProperty, column.filter.selectAllDefault );\n                        }\n                    }\n\n                    _.forEach( filterFacetResults.values, function( value ) {\n                        let fieldValue = value;\n                        if( !fieldValue ) {\n                            fieldValue = column.filter.blanksI18n;\n                        }\n                        const facetProperty = {\n                            propertyDisplayName: fieldValue,\n                            typex: 'BOOLEAN',\n                            serverValue: value\n                        };\n                        let facetValue = defaultFacetValue;\n\n                        // Load existing facet selections into values\n                        if( !columnMenuContext.isFacetsInitialized && column.filter.columnFilters.length ) {\n                            if( isExistingFacetValueNotEquals( column.filter.columnFilters, value ) ) {\n                                facetValue = false;\n                            }\n\n                            if( !facetValue && isExistingFacetValueEquals( column.filter.columnFilters, value ) ) {\n                                facetValue = true;\n                            }\n                        }\n\n                        propertyService.setValue( facetProperty, facetValue );\n                        filterFacetValues.push( facetProperty );\n                    } );\n                    filterFacetValuesTotalFound = filterFacetResults.totalFound + 1;\n                    if( reload ) {\n                        facetDataProvider.update( filterFacetValues, filterFacetValuesTotalFound );\n                    }\n                } else {\n                    facetDataProvider.update( [] );\n                }\n\n                const columnMenuData = { columnName: column.field };\n                let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n                if( !reload ) {\n                    facetProperties = _.concat( facetProperties, filterFacetValues );\n                }\n                columnMenuData.facetValues = facetProperties;\n                columnMenuData.facetValuesTotalFound = filterFacetValuesTotalFound;\n                columnMenuData.isStale = false;\n                exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n            }\n\n            columnMenuContext.isFacetsInitialized = true;\n            columnMenuContext.isFacetLoading = false;\n\n            return {\n                results: filterFacetValues,\n                totalFound: filterFacetValuesTotalFound\n            };\n        }\n        columnMenuContext.isFacetLoading = false;\n    }\n    return {\n        results: [],\n        totalFound: 0\n    };\n};\n\n/**\n * Update the facet values, waiting for user entry.\n */\nexport let updateFacetValuesDebounce = _.debounce( loadFacetValues, 500, {\n    maxWait: 10000,\n    trailing: true,\n    leading: false\n} );\n\n/**\n * Remove a filter from the columnProvider and reset the column's filter.\n *\n * @param {Object} column column def object\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n */\nexport let removeFilter = function( column, columnProvider, dataProvider ) {\n    let columnFiltersToUpdate = columnProvider.getColumnFilters();\n    columnFilterUtility.removeColumnFilter( columnFiltersToUpdate, column.field );\n    columnProvider.setColumnFilters( columnFiltersToUpdate );\n\n    // Set all filters as stale\n    _.forEach( dataProvider.cols, function( col ) {\n        if( col.field === column.field ) {\n            exports.resetColumnFilter( col );\n        } else {\n            exports.setColumnFilterStale( col );\n        }\n    } );\n};\n\n/**\n * Remove a filter action from the menu button.\n *\n * @param {Object} column column def object\n */\nexport let clearFilterFromMenu = function( column, gridContextDispatcher ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    columnMenuContext.isClearActionUsed = true;\n\n    const columnFilterInfo = {\n        column: column\n    };\n    gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        columnFilterInfo: columnFilterInfo,\n        columnMenuData: {\n            columnName: column.field\n        }\n    } );\n\n    // Return empty array because there are no filters\n    return [];\n};\n\n/**\n * Save the information of type-based filter.\n *\n * @param {Object} column - table column information\n * @param {Object} viewModelData - column menu view model data\n */\nexport let updateViewTypeMenuData = function( gridContextDispatcher, column, viewModelData ) {\n    const columnMenuData = { columnName: column.field };\n\n    switch ( column.filter.view ) {\n        case columnFilterUtility.FILTER_VIEW.NUMERIC:\n            columnMenuData.startNumber = viewModelData.startNumber;\n            columnMenuData.endNumber = viewModelData.endNumber;\n            columnMenuData.numberValue = viewModelData.numberValue;\n            columnMenuData.operation = viewModelData.operation;\n            break;\n        case columnFilterUtility.FILTER_VIEW.DATE:\n            columnMenuData.startDate = viewModelData.startDate;\n            columnMenuData.endDate = viewModelData.endDate;\n            break;\n        case columnFilterUtility.FILTER_VIEW.TEXT:\n            columnMenuData.textValue = viewModelData.textValue;\n            columnMenuData.operation = viewModelData.operation;\n            break;\n    }\n\n    if( columnMenuData.operation ) {\n        columnMenuData.operation.dbValue = viewModelData.operation.dbValue;\n    }\n\n    columnMenuData.isStale = true;\n\n    exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n    return columnMenuData;\n};\n\n/**\n * Validate filter enable/disable based on text filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let textEnableFilterToggle = function( isFilterDisabled, column, viewModelData, isBulkEditing ) {\n    if( isTextFilterInputDefault( column, viewModelData ) || isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        enableFiltering( isFilterDisabled );\n    }\n};\n\n/**\n * Text value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let textFilterInputChanged = function( gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( column.filter && columnMenuContext && columnMenuContext.isMenuIntialized ) {\n        exports.updateViewTypeMenuData( gridContextDispatcher, column, viewModelData );\n        exports.textEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n    }\n};\n\n/**\n * Validate filter enable/disable based on date filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let dateEnableFilterToggle = function( isFilterDisabled, column, viewModelData, isBulkEditing ) {\n    if( isDateFilterInputDefault( column, viewModelData ) || isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        enableFiltering( isFilterDisabled );\n    }\n};\n\n/**\n * Date value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let dateFilterInputChanged = function( gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( column.filter && columnMenuContext && columnMenuContext.isMenuIntialized ) {\n        exports.updateViewTypeMenuData( gridContextDispatcher, column, viewModelData );\n        exports.dateEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n    }\n};\n\n/**\n * Validate filter enable/disable based on numeric filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let numericEnableFilterToggle = function( isFilterDisabled, column, viewModelData, isBulkEditing ) {\n    if( isNumericFilterInputDefault( column, viewModelData ) || isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        enableFiltering( isFilterDisabled );\n    }\n};\n\n/**\n * Numeric value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let numericFilterInputChanged = function( gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( column.filter && columnMenuContext && columnMenuContext.isMenuIntialized ) {\n        exports.updateViewTypeMenuData( gridContextDispatcher, column, viewModelData );\n        exports.numericEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n    }\n};\n\n/**\n * Facet value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n * @param {Object} facetDataProvider - facet values data provider\n * @param {Object} facetParameters - facet information from checkbox that was changed\n */\nexport let filterFacetInputChanged = function( gridContextDispatcher, column, viewModelData, facetDataProvider, facetParameters, isBulkEditing, isFilterDisabled ) {\n    if( column.filter ) {\n        if( facetParameters.item.serverValue === SELECT_ALL_PROPERTY ) {\n            return selectAllInputChanged( gridContextDispatcher, column, viewModelData, facetParameters.checked, facetDataProvider, isBulkEditing, isFilterDisabled );\n        }\n\n        let selectAllFacet = null;\n        let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n        _.forEach( facetProperties, function( currentFacet ) {\n            if( currentFacet.serverValue === SELECT_ALL_PROPERTY ) {\n                selectAllFacet = currentFacet;\n                return false;\n            }\n        } );\n\n        const isFacetInputDefaultValue = isFacetInputDefault( facetDataProvider );\n\n        if( selectAllFacet && selectAllFacet.dbValue === false && isFacetInputDefaultValue ) {\n            propertyService.setValue( selectAllFacet, true );\n        } else if( selectAllFacet && selectAllFacet.dbValue === true && facetParameters.checked === false ) {\n            propertyService.setValue( selectAllFacet, false );\n        }\n\n        const columnMenuData = { columnName: column.field };\n        columnMenuData.facetValues = facetProperties;\n        columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n        exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n\n        checkForFilterDisability( column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled );\n\n        return selectAllFacet ? selectAllFacet.dbValue : true;\n    }\n    return true;\n};\n\n/**\n * Check for filter disability state based on the filter view.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let checkForFilterDisability = function( column, viewModelData, hasFilterFacetAction, facetDataProvider, isBulkEditing, isFilterDisabled ) {\n    if( isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        if( hasFilterFacetAction && areAllFacetsUnchecked( facetDataProvider ) ) {\n            disableFiltering( isFilterDisabled );\n        } else if( hasFilterFacetAction && !isFacetInputDefault( facetDataProvider ) ) {\n            enableFiltering( isFilterDisabled );\n        } else if( column.filter && column.filter.view ) {\n            switch ( column.filter.view ) {\n                case columnFilterUtility.FILTER_VIEW.NUMERIC:\n                    exports.numericEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n                    break;\n                case columnFilterUtility.FILTER_VIEW.DATE:\n                    exports.dateEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n                    break;\n                case columnFilterUtility.FILTER_VIEW.TEXT:\n                    exports.textEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n                    break;\n                default: // enable filtering button by default when custom filter\n                    enableFiltering( isFilterDisabled );\n            }\n        }\n    }\n};\n\n/**\n * Show Facet Filters Toggle button changed function\n * Saves the toggle state for that column and calls dataprovider for\n * facets if needed\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let showFiltersToggleChanged = function( gridContextDispatcher, column, viewModelData ) {\n    const columnMenuData = { columnName: column.field };\n\n    columnMenuData.showFilters = viewModelData.showFilters;\n    exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n};\n\n/**\n * Save the menu information to be loaded if re-opened.\n *\n * @param {String} columnName - Column that menu was used\n * @param {Object} columnMenuData - menu information to be saved\n */\nexport let updateColumnMenuData = function( gridContextDispatcher, columnMenuData ) {\n    gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        columnMenuData: columnMenuData\n    } );\n};\n\n/**\n * Sets the column's filter as stale\n *\n * @param {Object} column - column definition object\n */\nexport let setColumnFilterStale = function( column ) {\n    if( column.filter ) {\n        column.filter.isStale = true;\n    }\n};\n\n/**\n * Copies over filter data from old column to new one\n * and sets the filter as stale on hidden\n *\n * @param {Object} newColumn - new column info\n * @param {Object} oldColumn - old column info\n */\nexport let updateNewColumnFilter = function( newColumn, oldColumn ) {\n    if( newColumn.field === oldColumn.field && newColumn.filter && oldColumn.filter ) {\n        newColumn.filter.isSelectedFacetValues = oldColumn.filter.isSelectedFacetValues;\n        newColumn.filter.isStale = newColumn.hiddenFlag || oldColumn.filter.isStale;\n\n        newColumn.filter = { ...newColumn.filter, ...oldColumn.filter.columnMenuData };\n        if( oldColumn.filter.columnMenuData &&\n            oldColumn.filter.columnMenuData.showFilters &&\n            oldColumn.filter.columnMenuData.showFilters.dbValue ||\n            oldColumn.filter.showFilterFacets ) {\n            newColumn.filter.showFilterFacets = true;\n        }\n    }\n};\n\n/**\n * Load the locale text.\n */\nexport let loadConfiguration = async function() {\n    _localeTextBundle.invalidNumberRange = await localeService.getLocalizedTextFromKey( 'UIMessages.invalidNumberRange' );\n    _localeTextBundle.invalidDate = await localeService.getLocalizedTextFromKey( 'UIMessages.invalidDate' );\n    _localeTextBundle.equalsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.equalsOperation' );\n    _localeTextBundle.containsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.containsOperation' );\n    _localeTextBundle.selectAll = await localeService.getLocalizedTextFromKey( 'UIMessages.selectAll' );\n    _localeTextBundle.blanks = await localeService.getLocalizedTextFromKey( 'UIMessages.blanks' );\n    _localeTextBundle.noMatchesFound = await localeService.getLocalizedTextFromKey( 'UIMessages.noMatchesFound' );\n    _localeTextBundle.rangeOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.rangeOperation' );\n    _localeTextBundle.greaterThanOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.greaterThanOperation' );\n    _localeTextBundle.lessThanOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.lessThanOperation' );\n    _localeTextBundle.notContainsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.notContainsOperation' );\n    _localeTextBundle.startsWithOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.startsWithOperation' );\n    _localeTextBundle.endsWithOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.endsWithOperation' );\n    _localeTextBundle.notEqualsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.notEqualsOperation' );\n\n    _localeTextBundle.andFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.andFilterTooltip' );\n    _localeTextBundle.greaterThanFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.greaterThanFilterTooltip' );\n    _localeTextBundle.greaterThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.greaterThanEqualsFilterTooltip' );\n    _localeTextBundle.lessThanFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.lessThanFilterTooltip' );\n    _localeTextBundle.lessThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.lessThanEqualsFilterTooltip' );\n    _localeTextBundle.equalsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.equalsFilterTooltip' );\n    _localeTextBundle.notEqualsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.notEqualsFilterTooltip' );\n    _localeTextBundle.containsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.containsFilterTooltip' );\n    _localeTextBundle.notContainsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.notContainsFilterTooltip' );\n    _localeTextBundle.startsWithFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.startsWithFilterTooltip' );\n    _localeTextBundle.endWithFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.endWithFilterTooltip' );\n};\n\n/**\n * Setup to listen to changes in locale.\n *\n * @param {String} locale - String with the updated locale value.\n */\neventBus.subscribe( 'locale.changed', function() {\n    loadConfiguration();\n}, 'awColumnFilterService' );\n\nexports = {\n    loadConfiguration,\n    doTextValidation,\n    doNumericValidation,\n    processFacetValuesInFilter,\n    doTextFiltering,\n    doDateValidation,\n    doDateFiltering,\n    doNumericFiltering,\n    getFilterTypeByColumnType,\n    addFilterValue,\n    setExistingNumericFilter,\n    setExistingDateFilter,\n    setExistingTextFilter,\n    checkExistingFacetFilter,\n    updateColumnFilter,\n    resetColumnFilter,\n    removeStaleFilters,\n    createFilterSummary,\n    removeAllFilters,\n    isColumnFilterApplied,\n    loadFacetValues,\n    updateFacetValuesDebounce,\n    removeFilter,\n    textEnableFilterToggle,\n    textFilterInputChanged,\n    dateEnableFilterToggle,\n    dateFilterInputChanged,\n    numericEnableFilterToggle,\n    numericFilterInputChanged,\n    filterFacetInputChanged,\n    checkForFilterDisability,\n    showFiltersToggleChanged,\n    setColumnFilterStale,\n    updateNewColumnFilter,\n    setFilters,\n    initializeMenu,\n    selectAllInputChanged,\n    clearFilterFromMenu,\n    updateViewTypeMenuData,\n    updateColumnMenuData,\n    updateTableWithColumnFilters\n};\nexport default exports;\n\nloadConfiguration();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
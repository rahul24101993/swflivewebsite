{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Defines provider for commands from the View model definition\n *\n * @module js/functionalUtility.service\n */\n\n/**\n * Service to define some common functional utilities that are not available natively in Javascript\n *\n * The functions in this service support currying unless otherwise noted. See\n * https://www.sitepoint.com/currying-in-functional-javascript/ for more information.\n *\n * The unit tests provide example usages of these functions\n */\nlet exports = {};\n/**\n * Reducer function to convert a list of strings into a object based map\n *\n * toBooleanMap : (Map Boolean, String) -> Map Boolean\n */\n\nexport let toBooleanMap = function toBooleanMap(acc, nxt) {\n  acc[nxt] = true;\n  return acc;\n};\n/**\n * Get a property from an object.\n *\n * getProp : String -> Object -> a\n */\n\nexport let getProp = function getProp(propName) {\n  return function getPropInner(obj) {\n    return obj[propName];\n  };\n};\n/**\n * Retrieve a value from the given map\n *\n * fromMap : Map a -> String -> a\n */\n\nexport let fromMap = function fromMap(map) {\n  return function fromMapInner(val) {\n    return map[val];\n  };\n};\n/**\n * Identity function\n *\n * identity : a -> a\n */\n\nexport let identity = function identity(x) {\n  return x;\n};\n/**\n * Combine two lists\n *\n * concat : (List a, List a) -> List a\n */\n\nexport let concat = function concat(acc, nxt) {\n  return acc.concat(nxt);\n};\n/**\n * Use lazy compute and memoization for a property\n *\n * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()\n *\n * @param {Object} aObject Object with the property\n * @param {String} aName Name of the property\n * @param {Function} aLambda Function to get the property value\n */\n\nexport const defineLazyGetter = (aObject, aName, aLambda) => {\n  Object.defineProperty(aObject, aName, {\n    get: function () {\n      // Redefine this accessor property as a data property.\n      // Delete it first, to rule out \"too much recursion\" in case aObject is\n      // a proxy whose defineProperty handler might unwittingly trigger this\n      // getter again.\n      delete aObject[aName];\n      let value = aLambda.apply(aObject);\n      Object.defineProperty(aObject, aName, {\n        value,\n        writable: true,\n        configurable: true,\n        enumerable: true\n      });\n      return value;\n    },\n    configurable: true,\n    enumerable: true\n  });\n};\nexports = {\n  toBooleanMap,\n  getProp,\n  fromMap,\n  identity,\n  concat,\n  defineLazyGetter\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/functionalUtility.service.js"],"names":["exports","toBooleanMap","acc","getProp","obj","fromMap","map","identity","concat","defineLazyGetter","Object","get","aObject","value","aLambda","writable","configurable","enumerable"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAX,EAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,YAAY,GAAG,SAAA,YAAA,CAAA,GAAA,EAAA,GAAA,EAAkC;EACxDC,GAAG,CAAHA,GAAG,CAAHA,GAAAA,IAAAA;EACA,OAAA,GAAA;AAFG,CAAA;AAKP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,OAAO,GAAG,SAAA,OAAA,CAAA,QAAA,EAA6B;EAC9C,OAAO,SAAA,YAAA,CAAA,GAAA,EAA6B;IAChC,OAAOC,GAAG,CAAV,QAAU,CAAV;EADJ,CAAA;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,OAAO,GAAG,SAAA,OAAA,CAAA,GAAA,EAAwB;EACzC,OAAO,SAAA,YAAA,CAAA,GAAA,EAA6B;IAChC,OAAOC,GAAG,CAAV,GAAU,CAAV;EADJ,CAAA;AADG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,SAAA,QAAA,CAAA,CAAA,EAAuB;EACzC,OAAA,CAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,MAAM,GAAG,SAAA,MAAA,CAAA,GAAA,EAAA,GAAA,EAA4B;EAC5C,OAAON,GAAG,CAAHA,MAAAA,CAAP,GAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,gBAAgB,GAAG,CAAA,OAAA,EAAA,KAAA,EAAA,OAAA,KAA+B;EAC3DC,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAuC;IACnCC,GAAG,EAAE,YAAW;MACZ;MACA;MACA;MACA;MACA,OAAOC,OAAO,CAAd,KAAc,CAAd;MACA,IAAIC,KAAK,GAAGC,OAAO,CAAPA,KAAAA,CAAZ,OAAYA,CAAZ;MACAJ,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAuC;QAAA,KAAA;QAEnCK,QAAQ,EAF2B,IAAA;QAGnCC,YAAY,EAHuB,IAAA;QAInCC,UAAU,EAAE;MAJuB,CAAvCP;MAMA,OAAA,KAAA;IAd+B,CAAA;IAgBnCM,YAAY,EAhBuB,IAAA;IAiBnCC,UAAU,EAAE;EAjBuB,CAAvCP;AADG,CAAA;AAsBPV,OAAO,GAAG;EAAA,YAAA;EAAA,OAAA;EAAA,OAAA;EAAA,QAAA;EAAA,MAAA;EAMNS;AANM,CAAVT;AAQA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Defines provider for commands from the View model definition\n *\n * @module js/functionalUtility.service\n */\n\n/**\n * Service to define some common functional utilities that are not available natively in Javascript\n *\n * The functions in this service support currying unless otherwise noted. See\n * https://www.sitepoint.com/currying-in-functional-javascript/ for more information.\n *\n * The unit tests provide example usages of these functions\n */\nlet exports = {};\n\n/**\n * Reducer function to convert a list of strings into a object based map\n *\n * toBooleanMap : (Map Boolean, String) -> Map Boolean\n */\nexport let toBooleanMap = function toBooleanMap( acc, nxt ) {\n    acc[ nxt ] = true;\n    return acc;\n};\n\n/**\n * Get a property from an object.\n *\n * getProp : String -> Object -> a\n */\nexport let getProp = function getProp( propName ) {\n    return function getPropInner( obj ) {\n        return obj[ propName ];\n    };\n};\n\n/**\n * Retrieve a value from the given map\n *\n * fromMap : Map a -> String -> a\n */\nexport let fromMap = function fromMap( map ) {\n    return function fromMapInner( val ) {\n        return map[ val ];\n    };\n};\n\n/**\n * Identity function\n *\n * identity : a -> a\n */\nexport let identity = function identity( x ) {\n    return x;\n};\n\n/**\n * Combine two lists\n *\n * concat : (List a, List a) -> List a\n */\nexport let concat = function concat( acc, nxt ) {\n    return acc.concat( nxt );\n};\n\n/**\n * Use lazy compute and memoization for a property\n *\n * https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/XPCOMUtils.jsm#defineLazyGetter()\n *\n * @param {Object} aObject Object with the property\n * @param {String} aName Name of the property\n * @param {Function} aLambda Function to get the property value\n */\nexport const defineLazyGetter = ( aObject, aName, aLambda ) => {\n    Object.defineProperty( aObject, aName, {\n        get: function() {\n            // Redefine this accessor property as a data property.\n            // Delete it first, to rule out \"too much recursion\" in case aObject is\n            // a proxy whose defineProperty handler might unwittingly trigger this\n            // getter again.\n            delete aObject[ aName ];\n            let value = aLambda.apply( aObject );\n            Object.defineProperty( aObject, aName, {\n                value,\n                writable: true,\n                configurable: true,\n                enumerable: true\n            } );\n            return value;\n        },\n        configurable: true,\n        enumerable: true\n    } );\n};\n\nexports = {\n    toBooleanMap,\n    getProp,\n    fromMap,\n    identity,\n    concat,\n    defineLazyGetter\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
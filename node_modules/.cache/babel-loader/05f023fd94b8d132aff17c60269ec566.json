{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.selectionService}  which helps manage selection.\n *\n * @module js/selection.service\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nlet exports = {}; // eslint-disable-line no-invalid-this\n\n/**\n * selection name space\n */\n\nvar _selected = 'selected';\n/**\n * multi selection name space\n */\n\nvar _mselected = 'mselected';\n/**\n * parent selection name space\n */\n\nvar _pselected = 'pselected';\n/**\n * relation info name space\n */\n\nvar _relationInfo = 'relationContext';\nexport let updateSelection = function (selection, parentSelection, relationInformation) {\n  var currentSelection = exports.getSelection();\n  var rInfo = relationInformation ? {\n    relationInfo: relationInformation\n  } : undefined;\n  var singleSelection = null;\n  var multiSelection = [];\n\n  if (_.isArray(selection)) {\n    singleSelection = selection[0];\n\n    for (var i = 0; i < selection.length; i++) {\n      multiSelection.push(selection[i]);\n    }\n  } else if (selection) {\n    singleSelection = selection;\n    multiSelection = [selection];\n  }\n\n  var contextChanged = false;\n\n  if (!currentSelection.selected || !_.isEqual(singleSelection, currentSelection.selected[0])) {\n    appCtxService.registerCtx(_selected, singleSelection);\n    contextChanged = true;\n  }\n\n  if (!_.isEqual(multiSelection, currentSelection.selected)) {\n    appCtxService.registerCtx(_mselected, multiSelection);\n    contextChanged = true;\n  }\n\n  if (!_.isEqual(parentSelection, currentSelection.parent)) {\n    appCtxService.registerCtx(_pselected, parentSelection);\n    contextChanged = true;\n  }\n\n  if (!_.isEqual(rInfo, currentSelection.relationInfo)) {\n    appCtxService.registerCtx(_relationInfo, rInfo);\n    contextChanged = true;\n  }\n\n  if (contextChanged) {\n    return exports.updateCommandContext();\n  }\n\n  return AwPromiseService.instance.resolve();\n};\nexport let getSelection = function () {\n  return {\n    selected: appCtxService.getCtx(_mselected),\n    parent: appCtxService.getCtx(_pselected),\n    relationInfo: appCtxService.getCtx(_relationInfo)\n  };\n};\nexport let getAlternateSelectedObjects = function (propObjects) {\n  var modelObjects = [];\n  var uidsToLoad = [];\n\n  if (propObjects) {\n    _.forEach(propObjects, function (property) {\n      if (property && property.dbValues) {\n        _.forEach(property.dbValues, function (dbValue) {\n          var modelObject = cdm.getObject(dbValue);\n\n          if (modelObject && !_.isEmpty(modelObject.props)) {\n            modelObjects.push(modelObject);\n          } else {\n            uidsToLoad.push(dbValue);\n          }\n        });\n      }\n    });\n\n    if (!_.isEmpty(uidsToLoad)) {\n      _.forEach(uidsToLoad, function (uid) {\n        var modelObject = cdm.getObject(uid);\n        modelObjects.push(modelObject);\n      });\n    }\n  }\n\n  return modelObjects;\n};\nexport let updateCommandContext = function () {\n  return AwPromiseService.instance.resolve();\n};\nexports = {\n  updateSelection,\n  getSelection,\n  getAlternateSelectedObjects,\n  updateCommandContext\n};\nexport default exports;\n/**\n * Set of utility functions to manage selection\n *\n * @member selectionService\n * @memberof NgServices\n *\n * @param {AwPromiseService.instance} AwPromiseService.instance - Service to use.\n * @param {appCtxService} appCtxService - Service to use.\n * @param {soa_kernel_clientDataModel} cdm - Service to use.\n */\n\n/**\n * Update the selection context\n *\n * @function updateSelection\n * @memberOf NgServices.selectionService\n *\n * @param {Object | Object[]} selection - The new selection\n * @param {Object} parentSelection - The new parent selection\n * @param {Object[]} relationInformation - The new relation information\n *\n * @return {Promise} A promise resolved once selection and command context are updated.\n */\n\n/**\n * Get the selection from the context\n *\n * @function getSelection\n * @memberOf NgServices.selectionService\n *\n * @return {Object} An object containing the selection and the parent selection\n */\n\n/**\n * Returns the model objects based off input property objects\n *\n * @function getTargetModelObjects\n * @memberOf NgServices.selectionService\n *\n * @param {Array} propObjects - array of property objects\n *\n * @return {Array} array of alternate selected model objects containing the results\n */\n\n/**\n * Update the command context\n *\n * @function updateCommandContext\n * @memberOf NgServices.selectionService\n *\n * @return {Promise} A promise resolved once command context is updated.\n */\n\neventBus.subscribe('cdm.modified', function (event) {\n  // Update the VMOs in context for the modified model objects\n  var mSelectedInCtx = appCtxService.getCtx(_mselected);\n  var selectedInCtx = appCtxService.getCtx(_selected);\n\n  _.forEach(event.modifiedObjects, function _iterateModifiedObjects(updatedObj) {\n    _.forEach(mSelectedInCtx, function _updateAppCtxSelection(selectedObj) {\n      // Verifying the object is same. Also, we need to ensure that object is a View Model object.\n      // For model objects, the data binding should be handled already. So we don't need this\n      if (updatedObj.uid === selectedObj.uid && viewModelObjectSrv.isViewModelObject(selectedObj)) {\n        var updatedVmo = viewModelObjectSrv.createViewModelObject(updatedObj, 'EDIT');\n\n        if (updatedVmo && updatedVmo.props) {\n          viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(updatedVmo, mSelectedInCtx); // No need for object name check here because if 'mselected' is a VMO, 'selected' has to be VMO\n\n          if (selectedInCtx.uid === selectedObj.uid) {\n            viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(updatedVmo, [selectedInCtx]);\n          }\n        }\n      }\n    });\n  });\n});","map":{"version":3,"names":["AwPromiseService","appCtxService","cdm","viewModelObjectSrv","_","eventBus","exports","_selected","_mselected","_pselected","_relationInfo","updateSelection","selection","parentSelection","relationInformation","currentSelection","getSelection","rInfo","relationInfo","undefined","singleSelection","multiSelection","isArray","i","length","push","contextChanged","selected","isEqual","registerCtx","parent","updateCommandContext","instance","resolve","getCtx","getAlternateSelectedObjects","propObjects","modelObjects","uidsToLoad","forEach","property","dbValues","dbValue","modelObject","getObject","isEmpty","props","uid","subscribe","event","mSelectedInCtx","selectedInCtx","modifiedObjects","_iterateModifiedObjects","updatedObj","_updateAppCtxSelection","selectedObj","isViewModelObject","updatedVmo","createViewModelObject","updateSourceObjectPropertiesByViewModelObject"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/ui/src/js/selection.service.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.selectionService}  which helps manage selection.\n *\n * @module js/selection.service\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport appCtxService from 'js/appCtxService';\nimport cdm from 'soa/kernel/clientDataModel';\nimport viewModelObjectSrv from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\nlet exports = {}; // eslint-disable-line no-invalid-this\n\n/**\n * selection name space\n */\nvar _selected = 'selected';\n\n/**\n * multi selection name space\n */\nvar _mselected = 'mselected';\n\n/**\n * parent selection name space\n */\nvar _pselected = 'pselected';\n\n/**\n * relation info name space\n */\nvar _relationInfo = 'relationContext';\n\nexport let updateSelection = function( selection, parentSelection, relationInformation ) {\n    var currentSelection = exports.getSelection();\n\n    var rInfo = relationInformation ? {\n        relationInfo: relationInformation\n    } : undefined;\n\n    var singleSelection = null;\n    var multiSelection = [];\n    if( _.isArray( selection ) ) {\n        singleSelection = selection[ 0 ];\n        for( var i = 0; i < selection.length; i++ ) {\n            multiSelection.push( selection[ i ] );\n        }\n    } else if( selection ) {\n        singleSelection = selection;\n        multiSelection = [ selection ];\n    }\n\n    var contextChanged = false;\n    if( !currentSelection.selected || !_.isEqual( singleSelection, currentSelection.selected[ 0 ] ) ) {\n        appCtxService.registerCtx( _selected, singleSelection );\n        contextChanged = true;\n    }\n    if( !_.isEqual( multiSelection, currentSelection.selected ) ) {\n        appCtxService.registerCtx( _mselected, multiSelection );\n        contextChanged = true;\n    }\n    if( !_.isEqual( parentSelection, currentSelection.parent ) ) {\n        appCtxService.registerCtx( _pselected, parentSelection );\n        contextChanged = true;\n    }\n    if( !_.isEqual( rInfo, currentSelection.relationInfo ) ) {\n        appCtxService.registerCtx( _relationInfo, rInfo );\n        contextChanged = true;\n    }\n\n    if( contextChanged ) {\n        return exports.updateCommandContext();\n    }\n    return AwPromiseService.instance.resolve();\n};\n\nexport let getSelection = function() {\n    return {\n        selected: appCtxService.getCtx( _mselected ),\n        parent: appCtxService.getCtx( _pselected ),\n        relationInfo: appCtxService.getCtx( _relationInfo )\n    };\n};\n\nexport let getAlternateSelectedObjects = function( propObjects ) {\n    var modelObjects = [];\n    var uidsToLoad = [];\n\n    if( propObjects ) {\n        _.forEach( propObjects, function( property ) {\n            if( property && property.dbValues ) {\n                _.forEach( property.dbValues, function( dbValue ) {\n                    var modelObject = cdm.getObject( dbValue );\n                    if( modelObject && !_.isEmpty( modelObject.props ) ) {\n                        modelObjects.push( modelObject );\n                    } else {\n                        uidsToLoad.push( dbValue );\n                    }\n                } );\n            }\n        } );\n\n        if( !_.isEmpty( uidsToLoad ) ) {\n            _.forEach( uidsToLoad, function( uid ) {\n                var modelObject = cdm.getObject( uid );\n                modelObjects.push( modelObject );\n            } );\n        }\n    }\n\n    return modelObjects;\n};\n\nexport let updateCommandContext = function() {\n    return AwPromiseService.instance.resolve();\n};\n\nexports = {\n    updateSelection,\n    getSelection,\n    getAlternateSelectedObjects,\n    updateCommandContext\n};\nexport default exports;\n/**\n * Set of utility functions to manage selection\n *\n * @member selectionService\n * @memberof NgServices\n *\n * @param {AwPromiseService.instance} AwPromiseService.instance - Service to use.\n * @param {appCtxService} appCtxService - Service to use.\n * @param {soa_kernel_clientDataModel} cdm - Service to use.\n */\n/**\n * Update the selection context\n *\n * @function updateSelection\n * @memberOf NgServices.selectionService\n *\n * @param {Object | Object[]} selection - The new selection\n * @param {Object} parentSelection - The new parent selection\n * @param {Object[]} relationInformation - The new relation information\n *\n * @return {Promise} A promise resolved once selection and command context are updated.\n */\n/**\n * Get the selection from the context\n *\n * @function getSelection\n * @memberOf NgServices.selectionService\n *\n * @return {Object} An object containing the selection and the parent selection\n */\n/**\n * Returns the model objects based off input property objects\n *\n * @function getTargetModelObjects\n * @memberOf NgServices.selectionService\n *\n * @param {Array} propObjects - array of property objects\n *\n * @return {Array} array of alternate selected model objects containing the results\n */\n/**\n * Update the command context\n *\n * @function updateCommandContext\n * @memberOf NgServices.selectionService\n *\n * @return {Promise} A promise resolved once command context is updated.\n */\n\neventBus.subscribe( 'cdm.modified', function( event ) {\n    // Update the VMOs in context for the modified model objects\n    var mSelectedInCtx = appCtxService.getCtx( _mselected );\n    var selectedInCtx = appCtxService.getCtx( _selected );\n    _.forEach( event.modifiedObjects, function _iterateModifiedObjects( updatedObj ) {\n        _.forEach( mSelectedInCtx, function _updateAppCtxSelection( selectedObj ) {\n            // Verifying the object is same. Also, we need to ensure that object is a View Model object.\n            // For model objects, the data binding should be handled already. So we don't need this\n            if( updatedObj.uid === selectedObj.uid && viewModelObjectSrv.isViewModelObject( selectedObj ) ) {\n                var updatedVmo = viewModelObjectSrv.createViewModelObject( updatedObj, 'EDIT' );\n\n                if( updatedVmo && updatedVmo.props ) {\n                    viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject( updatedVmo, mSelectedInCtx );\n                    // No need for object name check here because if 'mselected' is a VMO, 'selected' has to be VMO\n                    if( selectedInCtx.uid === selectedObj.uid ) {\n                        viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject( updatedVmo, [ selectedInCtx ] );\n                    }\n                }\n            }\n        } );\n    } );\n} );\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
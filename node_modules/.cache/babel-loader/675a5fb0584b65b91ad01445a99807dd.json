{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/states\n */import loadable from'@loadable/component';import _ from'lodash';import{getResolvedActions}from'js/stateResolveService';import cfgSvc from'js/configurationService';import{loadDynModule,afxDynamicImport,includeComponent}from'js/moduleLoader';import AwPromiseService from'js/awPromiseService';import AwStateService from'js/awStateService';let routes=[];const mapStatesToRoutes=states=>_.forEach(states,(state,name)=>routes.push(buildStates(state,name)));const doLazyLoad=componentName=>{if(componentName==='AwDefaultSublocation'){// to use AwDefaultSublocation from states.json needs to pass subpanel context\nreturn props=>{const stateData=AwStateService.instance.current.data;//Ui router sets the parent data in the prototype of child\n//get the parent state data and pass it to the component\nconst parentData=Object.getPrototypeOf(stateData);//current state data should always take precedence over parent\nreturn includeComponent(componentName,{subPanelContext:{...props.subPanelContext,...parentData,...stateData}});};}return loadable(()=>loadDynModule(\"viewmodel/\".concat(componentName,\"ViewModel\")));};const buildStates=(state,name)=>{return{...(state.url&&{url:state.url}),name:name,...(state.parent&&{parent:state.parent}),...(state.params&&{params:state.params}),...(state.data&&{data:state.data}),...(state.visibleWhen&&{visibleWhen:state.visibleWhen}),resolve:getResolvedActions(state),...(state.noAuth&&{noAuth:state.noAuth}),...(state.view&&{component:doLazyLoad(state.view)}),reloadOnSearch:state.hasOwnProperty('reloadOnSearch')?state.reloadOnSearch:false,dynamic:state.dynamic,refresh:state.refresh,notify:state.notify};};export const buildAndGetAllStates=contributionStates=>{var statesCfg=cfgSvc.getCfgCached('states');var mergedRoutes=_.merge.apply(this,[statesCfg].concat(contributionStates));// eslint-disable-line no-invalid-this\n// Global parameters that apply to every route\nvar globalParameters=['ah',// hosting enablement\n'debugApp',// debug\n'locale',// locale override\n'logActionActivity','logEventBusActivity','logLevel','logLifeCycle'];// Parameters that should not be in the URL (runtime only)\nvar nonUrlParameters=['validateDefaultRoutePath'// workspace validation\n];/**\n     * Async load dependency for given state object.\n     *\n     * @param {Object} state - Object who's dependencies to load.\n     *\n     * @returns {Promise} Resolved when the dependencies are loaded.\n     */function createLoad(state){return AwPromiseService.instance(resolve=>{return afxDynamicImport(state.dependencies,resolve);});}/**\n     * Update given object with global parameters.\n     *\n     * @param {Object} state - Object to update.\n     */function updateWithParameters(state){var params=globalParameters.slice();// copy globalParameters\nif(state.params){params=_.union(params,Object.keys(state.params));}if(state.parent){var parent=mergedRoutes[state.parent];if(parent&&parent.params){params=_.union(params,Object.keys(parent.params));}}var urlParams=params.filter(function(p){return nonUrlParameters.indexOf(p)===-1;});if(urlParams.length>0){var haveQueryParam=state.url.indexOf('?')!==-1;state.url+=(haveQueryParam?'&':'?')+urlParams.join('&');}}_.forEach(mergedRoutes,function(route){// in angular dependencies was getting used for load the controller\n// it's not needed\n// if( route.dependencies ) {\n// if( route.resolve ) {\n//     route.resolve.push( {\n//         token: 'load',\n//         resolveFn: () => { createLoad( route ); }\n//     } );\n// } else {\n//     route.resolve = [ {\n//         token: 'load',\n//         resolveFn: () => { createLoad( route ); }\n//     } ];\n// }\n// }\nif(route.url&&!route.abstract){updateWithParameters(route);}});mapStatesToRoutes(mergedRoutes);return routes;};export default{buildAndGetAllStates};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/* eslint-disable require-jsdoc */\n\n/**\n * aw limitTo Filter \n * Creates a new array or string containing only a specified number of elements.\n * The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit.\n * Other array-like objects are also supported.\n * If a number is used as input, it is converted to a string.\n *\n * @module js/awLimitToFilterService\n */\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\n\nvar isNumberNaN = Number.isNaN || function isNumberNaN(num) {\n  return num !== num;\n};\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction sliceFn(input, begin, end) {\n  if (isString(input)) {\n    return input.slice(begin, end);\n  }\n\n  return [].slice.call(input, begin, end);\n}\n\nfunction isArray(arr) {\n  return Array.isArray(arr) || arr instanceof Array;\n}\n/**\n * \n * @param {*} input Array/array-like, string or number to be limited.\n * @param {*} limit The length of the returned array or string. If the limit number is positive, limit number of items from the beginning of the source array/string are copied.\n *  If the number is negative, limit number of items from the end of the source array/string are copied. The limit will be trimmed if it exceeds array.length.\n *  If limit is undefined, the input will be returned unchanged.\n * @param {*} begin Index at which to begin limitation. As a negative index, begin indicates an offset from the end of input. Defaults to 0.\n * @returns {Array} A new sub-array or substring of length limit or less if the input had less than limit elements.\n */\n\n\nfunction limitToFilter(input, limit, begin) {\n  //check array like input\n  if (!(isArray(input) || isString(input) || isNumber(input))) {\n    return input;\n  }\n\n  if (isNumberNaN(limit)) {\n    return input;\n  }\n\n  if (Math.abs(Number(limit)) === Infinity) {\n    limit = Number(limit);\n  } else {\n    limit = toInt(limit);\n  }\n\n  if (isNumber(input)) {\n    input = input.toString();\n  }\n\n  begin = !begin || isNaN(begin) ? 0 : toInt(begin);\n  begin = begin < 0 ? Math.max(0, input.length + begin) : begin;\n\n  if (limit >= 0) {\n    return sliceFn(input, begin, begin + limit);\n  }\n\n  if (begin === 0) {\n    return sliceFn(input, limit, input.length);\n  }\n\n  return sliceFn(input, Math.max(0, begin + limit), begin);\n}\n\nexport default {\n  limitToFilter\n};","map":{"version":3,"names":["toInt","str","parseInt","isNumberNaN","Number","isNaN","num","isString","value","isNumber","sliceFn","input","begin","end","slice","call","isArray","arr","Array","limitToFilter","limit","Math","abs","Infinity","toString","max","length"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awLimitToFilterService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n/* eslint-disable require-jsdoc */\n/**\n * aw limitTo Filter \n * Creates a new array or string containing only a specified number of elements.\n * The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit.\n * Other array-like objects are also supported.\n * If a number is used as input, it is converted to a string.\n *\n * @module js/awLimitToFilterService\n */\n\nfunction toInt( str ) {\n    return parseInt( str, 10 );\n}\nvar isNumberNaN = Number.isNaN || function isNumberNaN( num ) {\n    return num !== num;\n};\n\nfunction isString( value ) { return typeof value === 'string'; }\n\nfunction isNumber( value ) { return typeof value === 'number'; }\n\nfunction sliceFn( input, begin, end ) {\n    if( isString( input ) ) {\n        return input.slice( begin, end );\n    }\n    return [].slice.call( input, begin, end );\n}\n\nfunction isArray( arr ) {\n    return Array.isArray( arr ) || arr instanceof Array;\n}\n/**\n * \n * @param {*} input Array/array-like, string or number to be limited.\n * @param {*} limit The length of the returned array or string. If the limit number is positive, limit number of items from the beginning of the source array/string are copied.\n *  If the number is negative, limit number of items from the end of the source array/string are copied. The limit will be trimmed if it exceeds array.length.\n *  If limit is undefined, the input will be returned unchanged.\n * @param {*} begin Index at which to begin limitation. As a negative index, begin indicates an offset from the end of input. Defaults to 0.\n * @returns {Array} A new sub-array or substring of length limit or less if the input had less than limit elements.\n */\nfunction limitToFilter( input, limit, begin ) {\n    //check array like input\n    if( !( isArray( input ) || isString( input ) || isNumber( input ) ) ) {\n        return input;\n    }\n    if( isNumberNaN( limit ) ) {\n        return input;\n    }\n    if( Math.abs( Number( limit ) ) === Infinity ) {\n        limit = Number( limit );\n    } else {\n        limit = toInt( limit );\n    }\n\n    if( isNumber( input ) ) {\n        input = input.toString();\n    }\n\n    begin = !begin || isNaN( begin ) ? 0 : toInt( begin );\n    begin = begin < 0 ? Math.max( 0, input.length + begin ) : begin;\n\n    if( limit >= 0 ) {\n        return sliceFn( input, begin, begin + limit );\n    }\n    if( begin === 0 ) {\n        return sliceFn( input, limit, input.length );\n    }\n    return sliceFn( input, Math.max( 0, begin + limit ), begin );\n}\n\nexport default {\n    limitToFilter\n};\n"],"mappings":"AAAA;;AACA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAgBC,GAAhB,EAAsB;EAClB,OAAOC,QAAQ,CAAED,GAAF,EAAO,EAAP,CAAf;AACH;;AACD,IAAIE,WAAW,GAAGC,MAAM,CAACC,KAAP,IAAgB,SAASF,WAAT,CAAsBG,GAAtB,EAA4B;EAC1D,OAAOA,GAAG,KAAKA,GAAf;AACH,CAFD;;AAIA,SAASC,QAAT,CAAmBC,KAAnB,EAA2B;EAAE,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AAAmC;;AAEhE,SAASC,QAAT,CAAmBD,KAAnB,EAA2B;EAAE,OAAO,OAAOA,KAAP,KAAiB,QAAxB;AAAmC;;AAEhE,SAASE,OAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAsC;EAClC,IAAIN,QAAQ,CAAEI,KAAF,CAAZ,EAAwB;IACpB,OAAOA,KAAK,CAACG,KAAN,CAAaF,KAAb,EAAoBC,GAApB,CAAP;EACH;;EACD,OAAO,GAAGC,KAAH,CAASC,IAAT,CAAeJ,KAAf,EAAsBC,KAAtB,EAA6BC,GAA7B,CAAP;AACH;;AAED,SAASG,OAAT,CAAkBC,GAAlB,EAAwB;EACpB,OAAOC,KAAK,CAACF,OAAN,CAAeC,GAAf,KAAwBA,GAAG,YAAYC,KAA9C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAwBR,KAAxB,EAA+BS,KAA/B,EAAsCR,KAAtC,EAA8C;EAC1C;EACA,IAAI,EAAGI,OAAO,CAAEL,KAAF,CAAP,IAAoBJ,QAAQ,CAAEI,KAAF,CAA5B,IAAyCF,QAAQ,CAAEE,KAAF,CAApD,CAAJ,EAAsE;IAClE,OAAOA,KAAP;EACH;;EACD,IAAIR,WAAW,CAAEiB,KAAF,CAAf,EAA2B;IACvB,OAAOT,KAAP;EACH;;EACD,IAAIU,IAAI,CAACC,GAAL,CAAUlB,MAAM,CAAEgB,KAAF,CAAhB,MAAgCG,QAApC,EAA+C;IAC3CH,KAAK,GAAGhB,MAAM,CAAEgB,KAAF,CAAd;EACH,CAFD,MAEO;IACHA,KAAK,GAAGpB,KAAK,CAAEoB,KAAF,CAAb;EACH;;EAED,IAAIX,QAAQ,CAAEE,KAAF,CAAZ,EAAwB;IACpBA,KAAK,GAAGA,KAAK,CAACa,QAAN,EAAR;EACH;;EAEDZ,KAAK,GAAG,CAACA,KAAD,IAAUP,KAAK,CAAEO,KAAF,CAAf,GAA2B,CAA3B,GAA+BZ,KAAK,CAAEY,KAAF,CAA5C;EACAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYS,IAAI,CAACI,GAAL,CAAU,CAAV,EAAad,KAAK,CAACe,MAAN,GAAed,KAA5B,CAAZ,GAAkDA,KAA1D;;EAEA,IAAIQ,KAAK,IAAI,CAAb,EAAiB;IACb,OAAOV,OAAO,CAAEC,KAAF,EAASC,KAAT,EAAgBA,KAAK,GAAGQ,KAAxB,CAAd;EACH;;EACD,IAAIR,KAAK,KAAK,CAAd,EAAkB;IACd,OAAOF,OAAO,CAAEC,KAAF,EAASS,KAAT,EAAgBT,KAAK,CAACe,MAAtB,CAAd;EACH;;EACD,OAAOhB,OAAO,CAAEC,KAAF,EAASU,IAAI,CAACI,GAAL,CAAU,CAAV,EAAab,KAAK,GAAGQ,KAArB,CAAT,EAAuCR,KAAvC,CAAd;AACH;;AAED,eAAe;EACXO;AADW,CAAf"},"metadata":{},"sourceType":"module"}
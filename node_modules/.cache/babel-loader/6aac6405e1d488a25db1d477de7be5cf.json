{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Used for handling PL Table menus\n *\n * @module js/splmTableMenuService\n *\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport appCtxService from 'js/appCtxService';\nimport { svgString as cmdSettings } from \"image/cmdSettings24.svg\";\nimport Trv from 'js/splmTableTraversal';\nimport util from 'js/splmTableUtils';\nimport Const from 'js/splmTableConstants';\n\nvar SPLMTableMenuService = function (table, directiveElement, tableInstance, gridContextDispatcher) {\n  var self = this;\n  var _table = table;\n  var _tableInstance = tableInstance;\n  var _dataProvider = _tableInstance.dataProvider;\n  var _gridOptions = _tableInstance.gridOptions;\n  var _splmTableMessages = _tableInstance.messages;\n\n  var _trv = new Trv(table);\n\n  var _keyboardService = tableInstance.keyboardService;\n  var _selectionHelper = null;\n  var _columnMenuSubscriptions = []; // Add menu service to table instance\n\n  _tableInstance.menuService = self;\n\n  const focusElementOnClose = function (focusElem, isEditDisable) {\n    setTimeout(function () {\n      const isDisabledDuringEdit = isEditDisable && util.isBulkEditing(_table);\n\n      if (focusElem && document.activeElement && document.activeElement.tagName === 'BODY' && !isDisabledDuringEdit) {\n        focusElem.focus();\n      }\n    }, 150);\n  };\n\n  var loadGridMenuItems = function () {\n    var settingsCommandElement = _table.getElementsByClassName('aw-splm-tableMenuButton')[0];\n\n    var loadGridMenu = function (event, focusOnCloseElem) {\n      gridContextDispatcher({\n        type: 'UPDATE_VALUES',\n        isBulkEditing: _tableInstance.isBulkEditing,\n        dynamicRowHeightStatus: _tableInstance.dynamicRowHeightStatus\n      });\n      event.preventDefault();\n      let gridMenuPopup = _gridOptions.popupContext.gridMenuPopup;\n\n      if (gridMenuPopup) {\n        if (!self.gridMenuPopupRef) {\n          const popupOptions = {\n            forceCloseOthers: false,\n            whenParentScrolls: 'close',\n            reference: settingsCommandElement,\n            placement: 'bottom-end',\n            hasArrow: true,\n            autoFocus: true,\n            innerClassName: 'aw-popup-gridMenu',\n            padding: {\n              x: 4,\n              y: 4\n            },\n            hooks: {\n              whenClosed: () => {\n                self.gridMenuPopupRef = null;\n                focusElementOnClose(focusOnCloseElem);\n              }\n            }\n          };\n          gridMenuPopup.show(popupOptions).then(popupRef => {\n            self.gridMenuPopupRef = popupRef;\n          });\n        } else {\n          self.ensureTableMenuDismissed();\n        }\n      }\n    };\n\n    settingsCommandElement.addEventListener('click', loadGridMenu);\n    settingsCommandElement.addEventListener('keydown', function (event) {\n      if (wcagService.isValidKeyPress(event)) {\n        loadGridMenu(event, settingsCommandElement);\n      }\n    });\n  };\n\n  self.addGridMenu = function () {\n    const localeGridMenuText = _splmTableMessages.gridMenu;\n    const html = '' + '<div class=\"aw-commands-svg\">' + '<button type=\"button\" class=\"aw-commands-commandIconButton icon-override\" tabindex=\"-1\" title=\"' + localeGridMenuText + '\" aria-label=\"' + localeGridMenuText + '\" >' + cmdSettings + '</button>' + '</div>';\n    let menu = util.createElement('div', 'aw-splm-tableMenuButton');\n    menu.innerHTML = html;\n    let btn = menu.querySelector('button');\n\n    _keyboardService.setOnFocusAndBlur(btn);\n\n    _table.insertBefore(menu, _table.children[0]);\n\n    loadGridMenuItems();\n  }; // ////////////////////////////////////////////////\n  // Context Menu\n  // ////////////////////////////////////////////////\n\n\n  var _handleContextMenuSingleSelect = function (rowVmoArray, selectionModel, event, dataProvider) {\n    var currentMode = selectionModel.mode;\n    selectionModel.setMode('single');\n\n    _selectionHelper.handleSelectionEvent(rowVmoArray, selectionModel, event, dataProvider);\n\n    selectionModel.setMode(currentMode);\n  };\n\n  self.setContextSelectionHelper = function (selectionHelper) {\n    _selectionHelper = selectionHelper;\n  };\n\n  self.contextSelectionHandler = function (event) {\n    if (event.target.tagName.toLowerCase() === 'a' && event.target.href !== '') {\n      return;\n    }\n\n    if (_gridOptions.showContextMenu !== true) {\n      return;\n    }\n\n    event.preventDefault();\n    event.cancelBubble = true;\n    let focusOnCloseElem = util.closestElement(event.target, '.' + Const.CLASS_CELL);\n    let contextMenuPopup = _gridOptions.popupContext.contextMenuPopup;\n\n    if (contextMenuPopup) {\n      const popupOptions = {\n        whenParentScrolls: 'close',\n        resizeToClose: true,\n        targetEvent: event,\n        reference: event.target,\n        autoFocus: true,\n        forceCloseOthers: false,\n        hooks: {\n          whenClosed: () => {\n            focusElementOnClose(focusOnCloseElem, true);\n          }\n        }\n      }; //Hiding a popup before showing it in order to re-position it on selected vmo.\n\n      contextMenuPopup.hide().then(() => {\n        contextMenuPopup.show(popupOptions);\n      });\n    }\n\n    var rowElement = event.currentTarget;\n    let rowVmoArray = [rowElement.vmo];\n    gridContextDispatcher({\n      type: 'UPDATE_VALUES',\n      contextVmo: rowVmoArray\n    });\n    /* if (right or left) click inside row we already have selected, we dont want to do another SOA call since commands already loaded,\n    just move panel with to mouse location */\n\n    if (rowElement.classList.contains('aw-state-selected') || rowElement.classList.contains('ui-grid-row-selected')) {\n      return;\n    }\n\n    while (_table.getElementsByClassName('aw-state-selected').length > 0) {\n      _table.getElementsByClassName('aw-state-selected')[0].classList.remove('aw-state-selected');\n\n      _table.getElementsByClassName('ui-grid-row-selected')[0].classList.remove('ui-grid-row-selected');\n    }\n\n    var selectionModel = _dataProvider.selectionModel;\n\n    _handleContextMenuSingleSelect(rowVmoArray, selectionModel, event);\n  };\n\n  var getLargestFrozenColumnIndex = function (columns) {\n    var largestFrozenIndex = 0;\n\n    for (var i = 0; i < columns.length; i++) {\n      // Check if frozen and for index of frozen column\n      if (columns[i].index > largestFrozenIndex && columns[i].pinnedLeft) {\n        largestFrozenIndex = columns[i].index;\n      }\n    }\n\n    return largestFrozenIndex;\n  };\n\n  self.loadDefaultColumnMenus = function () {\n    // Make default frozen column the highest index that is pinnedLeft from column config\n    // Or default to 0/1 depending on icon column\n    var columns = _dataProvider.cols;\n    var largestFrozenIndex = getLargestFrozenColumnIndex(columns); // Set default frozen index to 1 or 0 based on if icon column is present\n\n    var defaultFrozenIndex = _gridOptions.addIconColumn ? 1 : 0; // Use pinnedLeft if provided\n\n    if (largestFrozenIndex > 0) {\n      defaultFrozenIndex = largestFrozenIndex;\n    }\n\n    if (gridContextDispatcher) {\n      gridContextDispatcher({\n        type: 'UPDATE_VALUES',\n        defaultColumnPinIndex: defaultFrozenIndex\n      });\n    }\n  };\n\n  self.ensureAllTableMenusDismissed = function () {\n    self.ensureColumnMenuDismissed();\n    self.ensureTableMenuDismissed();\n  };\n\n  self.ensureTableMenuDismissed = function () {\n    self.gridMenuPopupRef && _gridOptions.popupContext.gridMenuPopup.hide();\n    self.gridMenuPopupRef = null;\n  }; // ////////////////////////////////////////////////\n  // Column Menu\n  // ////////////////////////////////////////////////\n\n\n  self.ensureColumnMenuDismissed = function () {\n    self.columnMenuPopupRef && _gridOptions.popupContext.columnMenuPopup.hide();\n    self.columnMenuPopupRef = null;\n  };\n\n  self.createColumnMenuElement = function () {\n    var menu = document.createElement('div');\n    menu.id = _table.id + '_menu';\n    menu.classList.add(Const.CLASS_TABLE_MENU);\n    menu.classList.add(Const.CLASS_TABLE_MENU_POPUP);\n    menu.setAttribute('role', 'menu');\n    var menuContainer = document.createElement('div');\n    menuContainer.id = _table.id + '_menuContainer';\n    menuContainer.classList.add(Const.CLASS_TABLE_MENU_CONTAINER); // since this is inserted into the DOM outside of the content area, need to re-apply the content class\n\n    menuContainer.classList.add('afx-content-background');\n    menuContainer.classList.add('aw-widgets-groupCommandStack');\n    menuContainer.appendChild(menu);\n    return menuContainer;\n  };\n\n  self.menuElements = [];\n\n  const isTargetPopupOpen = function (target) {\n    return target && target.dataset && target.dataset.popupId && target.dataset.popupId !== 'null';\n  };\n\n  const showColumnMenuPopup = function (target, menuContainer, isFocused, focusOnClose) {\n    const getPadding = () => {\n      // getCellCenter\n      const cell = target;\n      const {\n        width,\n        height\n      } = cell.getBoundingClientRect();\n      return {\n        x: -width / 2,\n        y: -height / 2\n      };\n    };\n\n    let columnMenuPopup = _gridOptions.popupContext.columnMenuPopup;\n\n    if (columnMenuPopup) {\n      const popupOptions = {\n        whenParentScrolls: 'close',\n        ignoreReferenceClick: true,\n        ignoreClicksFrom: ['.flatpickr-calendar'],\n        reference: target,\n        placement: 'right',\n        adaptiveShift: true,\n        autoFocus: true,\n        selectedElementCSS: '.aw-state-selected',\n        innerClassName: 'sw-table-menu-tooltip',\n        // Passing placeholder class for table menu tooltip, if any styling is required in the future, this class can be used\n        hasArrow: true,\n        forceCloseOthers: false,\n        padding: getPadding(),\n        width: '185px',\n        arrowOptions: {\n          alignment: 'center',\n          offset: 5,\n          shift: 15\n        },\n        hooks: {\n          whenClosed: () => {\n            appCtxService.unRegisterCtx('columnMenuContext');\n\n            if (_columnMenuSubscriptions.length) {\n              _.forEach(_columnMenuSubscriptions, function (subscription) {\n                eventBus.unsubscribe(subscription);\n              });\n\n              _columnMenuSubscriptions.length = 0;\n            }\n\n            focusElementOnClose(focusOnClose);\n          }\n        }\n      };\n      appCtxService.registerCtx('columnMenuContext', {});\n      columnMenuPopup.hide().then(() => {\n        columnMenuPopup.show(popupOptions).then(popupRef => {\n          self.columnMenuPopupRef = popupRef;\n          gridContextDispatcher({\n            type: 'UPDATE_VALUES',\n            popupRef: popupRef\n          });\n        });\n      });\n    }\n  };\n\n  const isColumnMenuDisabled = function (columnDef) {\n    return util.isBulkEditing(_table) || columnDef.enableColumnMenu === false || util.isCellEditing(_table);\n  };\n\n  self.columnMenuHandler = function (columnElem, isFocused) {\n    var columnDef = columnElem.columnDef;\n    return function (event) {\n      if (isColumnMenuDisabled(columnDef)) {\n        return;\n      }\n\n      event.preventDefault();\n      const menuContainer = util.closestElement(_table, '.' + Const.CLASS_TABLE_MENU_CONTAINER);\n\n      if (isTargetPopupOpen(event.currentTarget) && self.columnMenuPopupRef) {\n        self.ensureColumnMenuDismissed();\n      } else {\n        showColumnMenuPopup(event.currentTarget, menuContainer, isFocused, columnElem.parentElement);\n        tableInstance.columnMenuLoaded = true;\n      }\n    };\n  };\n\n  self.setFilterDisability = function (isDisabled) {\n    var tableMenuElem = _trv.queryTableMenu(_table.id).getElement();\n\n    var filterButtonElement = tableMenuElem.getElementsByClassName('filter-button')[0];\n\n    if (filterButtonElement) {\n      if (isDisabled) {\n        filterButtonElement.classList.add('disabled');\n      } else {\n        filterButtonElement.classList.remove('disabled');\n      }\n    }\n  };\n\n  return self;\n};\n\n_c = SPLMTableMenuService;\nexport default SPLMTableMenuService;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMTableMenuService\");","map":{"version":3,"names":["_","eventBus","wcagService","appCtxService","Trv","util","Const","SPLMTableMenuService","table","directiveElement","tableInstance","gridContextDispatcher","self","_table","_tableInstance","_dataProvider","dataProvider","_gridOptions","gridOptions","_splmTableMessages","messages","_trv","_keyboardService","keyboardService","_selectionHelper","_columnMenuSubscriptions","menuService","focusElementOnClose","focusElem","isEditDisable","setTimeout","isDisabledDuringEdit","isBulkEditing","document","activeElement","tagName","focus","loadGridMenuItems","settingsCommandElement","getElementsByClassName","loadGridMenu","event","focusOnCloseElem","type","dynamicRowHeightStatus","preventDefault","gridMenuPopup","popupContext","gridMenuPopupRef","popupOptions","forceCloseOthers","whenParentScrolls","reference","placement","hasArrow","autoFocus","innerClassName","padding","x","y","hooks","whenClosed","show","then","popupRef","ensureTableMenuDismissed","addEventListener","isValidKeyPress","addGridMenu","localeGridMenuText","gridMenu","html","cmdSettings","menu","createElement","innerHTML","btn","querySelector","setOnFocusAndBlur","insertBefore","children","_handleContextMenuSingleSelect","rowVmoArray","selectionModel","currentMode","mode","setMode","handleSelectionEvent","setContextSelectionHelper","selectionHelper","contextSelectionHandler","target","toLowerCase","href","showContextMenu","cancelBubble","closestElement","CLASS_CELL","contextMenuPopup","resizeToClose","targetEvent","hide","rowElement","currentTarget","vmo","contextVmo","classList","contains","length","remove","getLargestFrozenColumnIndex","columns","largestFrozenIndex","i","index","pinnedLeft","loadDefaultColumnMenus","cols","defaultFrozenIndex","addIconColumn","defaultColumnPinIndex","ensureAllTableMenusDismissed","ensureColumnMenuDismissed","columnMenuPopupRef","columnMenuPopup","createColumnMenuElement","id","add","CLASS_TABLE_MENU","CLASS_TABLE_MENU_POPUP","setAttribute","menuContainer","CLASS_TABLE_MENU_CONTAINER","appendChild","menuElements","isTargetPopupOpen","dataset","popupId","showColumnMenuPopup","isFocused","focusOnClose","getPadding","cell","width","height","getBoundingClientRect","ignoreReferenceClick","ignoreClicksFrom","adaptiveShift","selectedElementCSS","arrowOptions","alignment","offset","shift","unRegisterCtx","forEach","subscription","unsubscribe","registerCtx","isColumnMenuDisabled","columnDef","enableColumnMenu","isCellEditing","columnMenuHandler","columnElem","parentElement","columnMenuLoaded","setFilterDisability","isDisabled","tableMenuElem","queryTableMenu","getElement","filterButtonElement"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableMenuService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Used for handling PL Table menus\n *\n * @module js/splmTableMenuService\n *\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport wcagService from 'js/wcagService';\nimport appCtxService from 'js/appCtxService';\nimport { svgString as cmdSettings } from 'image/cmdSettings24.svg';\nimport Trv from 'js/splmTableTraversal';\nimport util from 'js/splmTableUtils';\nimport Const from 'js/splmTableConstants';\n\n\nvar SPLMTableMenuService = function( table, directiveElement, tableInstance, gridContextDispatcher ) {\n    var self = this;\n    var _table = table;\n    var _tableInstance = tableInstance;\n    var _dataProvider = _tableInstance.dataProvider;\n    var _gridOptions = _tableInstance.gridOptions;\n    var _splmTableMessages = _tableInstance.messages;\n    var _trv = new Trv( table );\n    var _keyboardService = tableInstance.keyboardService;\n    var _selectionHelper = null;\n    var _columnMenuSubscriptions = [];\n    // Add menu service to table instance\n    _tableInstance.menuService = self;\n\n    const focusElementOnClose = function( focusElem, isEditDisable ) {\n        setTimeout( function() {\n            const isDisabledDuringEdit = isEditDisable && util.isBulkEditing( _table );\n            if( focusElem && document.activeElement && document.activeElement.tagName === 'BODY' && !isDisabledDuringEdit ) {\n                focusElem.focus();\n            }\n        }, 150 );\n    };\n\n    var loadGridMenuItems = function() {\n        var settingsCommandElement = _table.getElementsByClassName( 'aw-splm-tableMenuButton' )[ 0 ];\n\n        var loadGridMenu = function( event, focusOnCloseElem ) {\n            gridContextDispatcher( {\n                type: 'UPDATE_VALUES',\n                isBulkEditing: _tableInstance.isBulkEditing,\n                dynamicRowHeightStatus: _tableInstance.dynamicRowHeightStatus\n            } );\n            event.preventDefault();\n            let gridMenuPopup = _gridOptions.popupContext.gridMenuPopup;\n            if( gridMenuPopup ) {\n                if( !self.gridMenuPopupRef ) {\n                    const popupOptions = {\n                        forceCloseOthers: false,\n                        whenParentScrolls: 'close',\n                        reference: settingsCommandElement,\n                        placement: 'bottom-end',\n                        hasArrow: true,\n                        autoFocus: true,\n                        innerClassName: 'aw-popup-gridMenu',\n                        padding: { x: 4, y: 4 },\n                        hooks: {\n                            whenClosed: () => {\n                                self.gridMenuPopupRef = null;\n                                focusElementOnClose( focusOnCloseElem );\n                            }\n                        }\n                    };\n                    gridMenuPopup.show( popupOptions ).then( ( popupRef ) => {\n                        self.gridMenuPopupRef = popupRef;\n                    } );\n                } else {\n                    self.ensureTableMenuDismissed();\n                }\n            }\n        };\n\n        settingsCommandElement.addEventListener( 'click', loadGridMenu );\n        settingsCommandElement.addEventListener( 'keydown', function( event ) {\n            if( wcagService.isValidKeyPress( event ) ) {\n                loadGridMenu( event, settingsCommandElement );\n            }\n        } );\n    };\n\n    self.addGridMenu = function() {\n        const localeGridMenuText = _splmTableMessages.gridMenu;\n        const html = '' +\n            '<div class=\"aw-commands-svg\">' +\n            '<button type=\"button\" class=\"aw-commands-commandIconButton icon-override\" tabindex=\"-1\" title=\"' + localeGridMenuText + '\" aria-label=\"' + localeGridMenuText + '\" >' +\n            cmdSettings +\n            '</button>' +\n            '</div>';\n        let menu = util.createElement( 'div', 'aw-splm-tableMenuButton' );\n        menu.innerHTML = html;\n        let btn = menu.querySelector( 'button' );\n        _keyboardService.setOnFocusAndBlur( btn );\n        _table.insertBefore( menu, _table.children[ 0 ] );\n        loadGridMenuItems();\n    };\n\n    // ////////////////////////////////////////////////\n    // Context Menu\n    // ////////////////////////////////////////////////\n\n    var _handleContextMenuSingleSelect = function( rowVmoArray, selectionModel, event, dataProvider ) {\n        var currentMode = selectionModel.mode;\n        selectionModel.setMode( 'single' );\n        _selectionHelper.handleSelectionEvent( rowVmoArray, selectionModel, event, dataProvider );\n        selectionModel.setMode( currentMode );\n    };\n\n    self.setContextSelectionHelper = function( selectionHelper ) {\n        _selectionHelper = selectionHelper;\n    };\n\n    self.contextSelectionHandler = function( event ) {\n        if( event.target.tagName.toLowerCase() === 'a' && event.target.href !== '' ) {\n            return;\n        }\n        if( _gridOptions.showContextMenu !== true ) {\n            return;\n        }\n        event.preventDefault();\n        event.cancelBubble = true;\n\n        let focusOnCloseElem = util.closestElement( event.target, '.' + Const.CLASS_CELL );\n\n        let contextMenuPopup = _gridOptions.popupContext.contextMenuPopup;\n        if( contextMenuPopup ) {\n            const popupOptions = {\n                whenParentScrolls: 'close',\n                resizeToClose: true,\n                targetEvent: event,\n                reference: event.target,\n                autoFocus: true,\n                forceCloseOthers: false,\n                hooks: {\n                    whenClosed: () => {\n                        focusElementOnClose( focusOnCloseElem, true );\n                    }\n                }\n            };\n            //Hiding a popup before showing it in order to re-position it on selected vmo.\n            contextMenuPopup.hide().then( () => {\n                contextMenuPopup.show( popupOptions );\n            } );\n        }\n\n        var rowElement = event.currentTarget;\n        let rowVmoArray = [ rowElement.vmo ];\n\n        gridContextDispatcher( {\n            type: 'UPDATE_VALUES',\n            contextVmo: rowVmoArray\n        } );\n\n        /* if (right or left) click inside row we already have selected, we dont want to do another SOA call since commands already loaded,\n        just move panel with to mouse location */\n        if( rowElement.classList.contains( 'aw-state-selected' ) || rowElement.classList.contains( 'ui-grid-row-selected' ) ) {\n            return;\n        }\n\n        while( _table.getElementsByClassName( 'aw-state-selected' ).length > 0 ) {\n            _table.getElementsByClassName( 'aw-state-selected' )[ 0 ].classList.remove( 'aw-state-selected' );\n            _table.getElementsByClassName( 'ui-grid-row-selected' )[ 0 ].classList.remove( 'ui-grid-row-selected' );\n        }\n\n        var selectionModel = _dataProvider.selectionModel;\n\n        _handleContextMenuSingleSelect( rowVmoArray, selectionModel, event );\n    };\n\n    var getLargestFrozenColumnIndex = function( columns ) {\n        var largestFrozenIndex = 0;\n        for( var i = 0; i < columns.length; i++ ) {\n            // Check if frozen and for index of frozen column\n            if( columns[ i ].index > largestFrozenIndex && columns[ i ].pinnedLeft ) {\n                largestFrozenIndex = columns[ i ].index;\n            }\n        }\n        return largestFrozenIndex;\n    };\n\n    self.loadDefaultColumnMenus = function() {\n        // Make default frozen column the highest index that is pinnedLeft from column config\n        // Or default to 0/1 depending on icon column\n        var columns = _dataProvider.cols;\n        var largestFrozenIndex = getLargestFrozenColumnIndex( columns );\n\n        // Set default frozen index to 1 or 0 based on if icon column is present\n        var defaultFrozenIndex = _gridOptions.addIconColumn ? 1 : 0;\n\n        // Use pinnedLeft if provided\n        if( largestFrozenIndex > 0 ) {\n            defaultFrozenIndex = largestFrozenIndex;\n        }\n        if( gridContextDispatcher ) {\n            gridContextDispatcher( {\n                type: 'UPDATE_VALUES',\n                defaultColumnPinIndex: defaultFrozenIndex\n            } );\n        }\n    };\n\n    self.ensureAllTableMenusDismissed = function() {\n        self.ensureColumnMenuDismissed();\n        self.ensureTableMenuDismissed();\n    };\n\n    self.ensureTableMenuDismissed = function() {\n        self.gridMenuPopupRef && _gridOptions.popupContext.gridMenuPopup.hide();\n        self.gridMenuPopupRef = null;\n    };\n\n    // ////////////////////////////////////////////////\n    // Column Menu\n    // ////////////////////////////////////////////////\n    self.ensureColumnMenuDismissed = function() {\n        self.columnMenuPopupRef && _gridOptions.popupContext.columnMenuPopup.hide();\n        self.columnMenuPopupRef = null;\n    };\n\n    self.createColumnMenuElement = function() {\n        var menu = document.createElement( 'div' );\n        menu.id = _table.id + '_menu';\n        menu.classList.add( Const.CLASS_TABLE_MENU );\n        menu.classList.add( Const.CLASS_TABLE_MENU_POPUP );\n        menu.setAttribute( 'role', 'menu' );\n\n        var menuContainer = document.createElement( 'div' );\n        menuContainer.id = _table.id + '_menuContainer';\n        menuContainer.classList.add( Const.CLASS_TABLE_MENU_CONTAINER );\n        // since this is inserted into the DOM outside of the content area, need to re-apply the content class\n        menuContainer.classList.add( 'afx-content-background' );\n        menuContainer.classList.add( 'aw-widgets-groupCommandStack' );\n        menuContainer.appendChild( menu );\n\n        return menuContainer;\n    };\n\n    self.menuElements = [];\n\n    const isTargetPopupOpen = function( target ) {\n        return target && target.dataset && target.dataset.popupId && target.dataset.popupId !== 'null';\n    };\n\n    const showColumnMenuPopup = function( target, menuContainer, isFocused, focusOnClose ) {\n        const getPadding = () => {\n            // getCellCenter\n            const cell = target;\n            const { width, height } = cell.getBoundingClientRect();\n            return { x: -width / 2, y: -height / 2 };\n        };\n\n        let columnMenuPopup = _gridOptions.popupContext.columnMenuPopup;\n        if( columnMenuPopup ) {\n            const popupOptions = {\n                whenParentScrolls: 'close',\n                ignoreReferenceClick: true,\n                ignoreClicksFrom: [ '.flatpickr-calendar' ],\n                reference: target,\n                placement: 'right',\n                adaptiveShift: true,\n                autoFocus: true,\n                selectedElementCSS: '.aw-state-selected',\n                innerClassName: 'sw-table-menu-tooltip', // Passing placeholder class for table menu tooltip, if any styling is required in the future, this class can be used\n                hasArrow: true,\n                forceCloseOthers: false,\n                padding: getPadding(),\n                width: '185px',\n                arrowOptions: {\n                    alignment: 'center',\n                    offset: 5,\n                    shift: 15\n                },\n                hooks: {\n                    whenClosed: () => {\n                        appCtxService.unRegisterCtx( 'columnMenuContext' );\n                        if( _columnMenuSubscriptions.length ) {\n                            _.forEach( _columnMenuSubscriptions, function( subscription ) {\n                                eventBus.unsubscribe( subscription );\n                            } );\n                            _columnMenuSubscriptions.length = 0;\n                        }\n                        focusElementOnClose( focusOnClose );\n                    }\n                }\n            };\n            appCtxService.registerCtx( 'columnMenuContext', {} );\n            columnMenuPopup.hide().then( () => {\n                columnMenuPopup.show( popupOptions ).then( ( popupRef ) => {\n                    self.columnMenuPopupRef = popupRef;\n                    gridContextDispatcher( {\n                        type: 'UPDATE_VALUES',\n                        popupRef: popupRef\n                    } );\n                } );\n            } );\n        }\n    };\n\n    const isColumnMenuDisabled = function( columnDef ) {\n        return util.isBulkEditing( _table ) || columnDef.enableColumnMenu === false || util.isCellEditing( _table );\n    };\n\n    self.columnMenuHandler = function( columnElem, isFocused ) {\n        var columnDef = columnElem.columnDef;\n        return function( event ) {\n            if( isColumnMenuDisabled( columnDef ) ) {\n                return;\n            }\n            event.preventDefault();\n\n            const menuContainer = util.closestElement( _table, '.' + Const.CLASS_TABLE_MENU_CONTAINER );\n\n            if( isTargetPopupOpen( event.currentTarget ) && self.columnMenuPopupRef ) {\n                self.ensureColumnMenuDismissed();\n            } else {\n                showColumnMenuPopup( event.currentTarget, menuContainer, isFocused, columnElem.parentElement );\n                tableInstance.columnMenuLoaded = true;\n            }\n        };\n    };\n\n    self.setFilterDisability = function( isDisabled ) {\n        var tableMenuElem = _trv.queryTableMenu( _table.id ).getElement();\n        var filterButtonElement = tableMenuElem.getElementsByClassName( 'filter-button' )[ 0 ];\n\n        if( filterButtonElement ) {\n            if( isDisabled ) {\n                filterButtonElement.classList.add( 'disabled' );\n            } else {\n                filterButtonElement.classList.remove( 'disabled' );\n            }\n        }\n    };\n\n    return self;\n};\n\nexport default SPLMTableMenuService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
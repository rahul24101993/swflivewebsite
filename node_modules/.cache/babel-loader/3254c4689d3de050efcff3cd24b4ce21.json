{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.commandPanelService} which manages command panels.\n *\n * @module js/commandPanel.service\n */\nimport appCtxService from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nimport { getEditHandler } from 'js/editHandlerService';\n/**\n * Command service to manage commands.\n *\n * @param appCtxService {Object} - App context service\n */\n\nlet exports = {};\n/**\n * Activate a command. Closes any panel that is open in the opposite panel location. If the command is\n * same as the command active at that location it will be closed.\n * If any setup is required for the command just wrap this service.\n *\n * @param {inputObj} inputObj - Input object\n * The input object need to have following values\n * commandId\n * location\n * context\n * push\n * closeWhenCommandHidden\n * config = {}\n * editContext = String\n */\n\nexport let activateCommandPanel2 = function (inputObj) {\n  //Create event data for awsidenav.openClose event\n  let {\n    commandId,\n    location,\n    context,\n    push,\n    closeWhenCommandHidden,\n    config,\n    editContext\n  } = inputObj; //Create config object for achieving slide push\n\n  config = config || {};\n  editContext = editContext || 'INFO_PANEL_CONTEXT';\n\n  if (push !== undefined) {\n    config.slide = push === true ? 'PUSH' : 'FLOAT';\n  }\n\n  var eventData = {\n    id: location,\n    commandId: commandId,\n    includeView: commandId,\n    command: {\n      commandId: commandId,\n      declarativeCommandId: commandId,\n      closeWhenCommandHidden: closeWhenCommandHidden !== false,\n      getDeclarativeCommandId: function () {\n        return commandId;\n      },\n      // Register panel context on activation of command\n      setupDeclarativeView: function (deferred) {\n        if (context) {\n          appCtxService.registerCtx('panelContext', context);\n        }\n\n        deferred.resolve();\n      },\n      // Unregister panel context on close of command\n      callbackApi: {\n        getPanelLifeCycleClose: function (_, deferred) {\n          if (context) {\n            appCtxService.unRegisterCtx('panelContext');\n          }\n\n          if (editContext && getEditHandler(editContext)) {\n            return getEditHandler(editContext).leaveConfirmation(function () {\n              deferred.resolve();\n            });\n          }\n\n          return deferred.resolve();\n        }\n      }\n    },\n    config: config\n  };\n  eventBus.publish('awsidenav.openClose', eventData);\n};\n/**\n * Activate a command. Closes any panel that is open in the opposite panel location. If the command jas the\n * same is as the command active at that location it will be closed. If any setup is required for the\n * command just wrap this service.\n *\n * @param {String} commandId - ID of the command to open. Should map to the view model to activate.\n * @param {String} location - Which panel to open the command in. \"aw_navigation\" (left edge of screen) or \"aw_toolsAndInfo\" (right edge of screen)\n * @param {Object} context - The panel context.\n * @param {Boolean} push - Optional parameter to push workarea content when opening command panel\n * @param {Boolean} closeWhenCommandHidden - Optional parameter to disable the automatic closing of the panel when a command is hidden. Defaults to true.\n * @param {Object} config - Optional parameter to override the configuration attributes of sidenav, which includes width, height and slide.\n */\n\nexport let activateCommandPanel = function (commandId, location, context, push, closeWhenCommandHidden, config) {\n  activateCommandPanel2({\n    commandId,\n    location,\n    context,\n    push,\n    closeWhenCommandHidden,\n    config\n  });\n};\nexports = {\n  activateCommandPanel,\n  activateCommandPanel2\n};\nexport default exports;","map":{"version":3,"names":["appCtxService","eventBus","getEditHandler","exports","activateCommandPanel2","inputObj","commandId","location","context","push","closeWhenCommandHidden","config","editContext","undefined","slide","eventData","id","includeView","command","declarativeCommandId","getDeclarativeCommandId","setupDeclarativeView","deferred","registerCtx","resolve","callbackApi","getPanelLifeCycleClose","_","unRegisterCtx","leaveConfirmation","publish","activateCommandPanel"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/commandPanel.service.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.commandPanelService} which manages command panels.\n *\n * @module js/commandPanel.service\n */\nimport appCtxService from 'js/appCtxService';\nimport eventBus from 'js/eventBus';\nimport { getEditHandler } from 'js/editHandlerService';\n\n/**\n * Command service to manage commands.\n *\n * @param appCtxService {Object} - App context service\n */\nlet exports = {};\n\n/**\n * Activate a command. Closes any panel that is open in the opposite panel location. If the command is\n * same as the command active at that location it will be closed.\n * If any setup is required for the command just wrap this service.\n *\n * @param {inputObj} inputObj - Input object\n * The input object need to have following values\n * commandId\n * location\n * context\n * push\n * closeWhenCommandHidden\n * config = {}\n * editContext = String\n */\n\nexport let activateCommandPanel2 = function( inputObj ) {\n    //Create event data for awsidenav.openClose event\n    let { commandId, location, context, push, closeWhenCommandHidden, config, editContext } = inputObj;\n    //Create config object for achieving slide push\n    config = config || {};\n    editContext = editContext || 'INFO_PANEL_CONTEXT';\n    if( push !== undefined ) {\n        config.slide = push === true ? 'PUSH' : 'FLOAT';\n    }\n    var eventData = {\n        id: location,\n        commandId: commandId,\n        includeView: commandId,\n        command: {\n            commandId: commandId,\n            declarativeCommandId: commandId,\n\n            closeWhenCommandHidden: closeWhenCommandHidden !== false,\n            getDeclarativeCommandId: function() {\n                return commandId;\n            },\n            // Register panel context on activation of command\n            setupDeclarativeView: function( deferred ) {\n                if( context ) {\n                    appCtxService.registerCtx( 'panelContext', context );\n                }\n                deferred.resolve();\n            },\n            // Unregister panel context on close of command\n            callbackApi: {\n                getPanelLifeCycleClose: function( _, deferred ) {\n                    if( context ) {\n                        appCtxService.unRegisterCtx( 'panelContext' );\n                    }\n                    if( editContext && getEditHandler( editContext ) ) {\n                        return getEditHandler( editContext ).leaveConfirmation( function() {\n                            deferred.resolve();\n                        } );\n                    }\n                    return deferred.resolve();\n                }\n            }\n        },\n        config: config\n    };\n    eventBus.publish( 'awsidenav.openClose', eventData );\n};\n\n/**\n * Activate a command. Closes any panel that is open in the opposite panel location. If the command jas the\n * same is as the command active at that location it will be closed. If any setup is required for the\n * command just wrap this service.\n *\n * @param {String} commandId - ID of the command to open. Should map to the view model to activate.\n * @param {String} location - Which panel to open the command in. \"aw_navigation\" (left edge of screen) or \"aw_toolsAndInfo\" (right edge of screen)\n * @param {Object} context - The panel context.\n * @param {Boolean} push - Optional parameter to push workarea content when opening command panel\n * @param {Boolean} closeWhenCommandHidden - Optional parameter to disable the automatic closing of the panel when a command is hidden. Defaults to true.\n * @param {Object} config - Optional parameter to override the configuration attributes of sidenav, which includes width, height and slide.\n */\nexport let activateCommandPanel = function( commandId, location, context, push, closeWhenCommandHidden, config ) {\n    activateCommandPanel2( {\n        commandId,\n        location,\n        context,\n        push,\n        closeWhenCommandHidden,\n        config\n    } );\n};\n\nexports = {\n    activateCommandPanel,\n    activateCommandPanel2\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,qBAAqB,GAAG,UAAUC,QAAV,EAAqB;EACpD;EACA,IAAI;IAAEC,SAAF;IAAaC,QAAb;IAAuBC,OAAvB;IAAgCC,IAAhC;IAAsCC,sBAAtC;IAA8DC,MAA9D;IAAsEC;EAAtE,IAAsFP,QAA1F,CAFoD,CAGpD;;EACAM,MAAM,GAAGA,MAAM,IAAI,EAAnB;EACAC,WAAW,GAAGA,WAAW,IAAI,oBAA7B;;EACA,IAAIH,IAAI,KAAKI,SAAb,EAAyB;IACrBF,MAAM,CAACG,KAAP,GAAeL,IAAI,KAAK,IAAT,GAAgB,MAAhB,GAAyB,OAAxC;EACH;;EACD,IAAIM,SAAS,GAAG;IACZC,EAAE,EAAET,QADQ;IAEZD,SAAS,EAAEA,SAFC;IAGZW,WAAW,EAAEX,SAHD;IAIZY,OAAO,EAAE;MACLZ,SAAS,EAAEA,SADN;MAELa,oBAAoB,EAAEb,SAFjB;MAILI,sBAAsB,EAAEA,sBAAsB,KAAK,KAJ9C;MAKLU,uBAAuB,EAAE,YAAW;QAChC,OAAOd,SAAP;MACH,CAPI;MAQL;MACAe,oBAAoB,EAAE,UAAUC,QAAV,EAAqB;QACvC,IAAId,OAAJ,EAAc;UACVR,aAAa,CAACuB,WAAd,CAA2B,cAA3B,EAA2Cf,OAA3C;QACH;;QACDc,QAAQ,CAACE,OAAT;MACH,CAdI;MAeL;MACAC,WAAW,EAAE;QACTC,sBAAsB,EAAE,UAAUC,CAAV,EAAaL,QAAb,EAAwB;UAC5C,IAAId,OAAJ,EAAc;YACVR,aAAa,CAAC4B,aAAd,CAA6B,cAA7B;UACH;;UACD,IAAIhB,WAAW,IAAIV,cAAc,CAAEU,WAAF,CAAjC,EAAmD;YAC/C,OAAOV,cAAc,CAAEU,WAAF,CAAd,CAA8BiB,iBAA9B,CAAiD,YAAW;cAC/DP,QAAQ,CAACE,OAAT;YACH,CAFM,CAAP;UAGH;;UACD,OAAOF,QAAQ,CAACE,OAAT,EAAP;QACH;MAXQ;IAhBR,CAJG;IAkCZb,MAAM,EAAEA;EAlCI,CAAhB;EAoCAV,QAAQ,CAAC6B,OAAT,CAAkB,qBAAlB,EAAyCf,SAAzC;AACH,CA9CM;AAgDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIgB,oBAAoB,GAAG,UAAUzB,SAAV,EAAqBC,QAArB,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8CC,sBAA9C,EAAsEC,MAAtE,EAA+E;EAC7GP,qBAAqB,CAAE;IACnBE,SADmB;IAEnBC,QAFmB;IAGnBC,OAHmB;IAInBC,IAJmB;IAKnBC,sBALmB;IAMnBC;EANmB,CAAF,CAArB;AAQH,CATM;AAWPR,OAAO,GAAG;EACN4B,oBADM;EAEN3B;AAFM,CAAV;AAIA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}
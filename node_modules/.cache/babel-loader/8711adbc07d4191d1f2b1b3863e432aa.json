{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * The methods provided by this module enable access, control and maintenance of a cache of ModelObjects as well as\n * their member PropertyObjects.\n *\n * @module soa/kernel/clientDataModel\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport sanitizer from 'js/sanitizer';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport 'js/localeService';\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specfici format.\n *\n * @private\n */\n\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n/**\n * UID to indicate the identity of an object is 'unknown'.\n */\n\nvar _NULL_UID = 'AAAAAAAAAAAAAA';\n/**\n * A reference to service.\n */\n\n/**\n * A reference to sanitizer.\n */\n\n/**\n * Note: We are holding on to the resolved module now for when we are running NodeJS. However, this variable will be\n * set again when this service is created using AngularJS injection. The reason is that the 'dateTimeService' needs\n * some other AngularJS services injected to do all its work. It will use fallback values when running in NodeJS.\n *\n * @private\n */\n\n/**\n * Object used to implement a UID-to-ModelObject cache map.\n *\n * @private\n */\n\nvar _uid2modelObject = {};\n/**\n * The array of none flushable object types.\n *\n * @private\n */\n\nvar _noFlushableTypes = ['Awb0ProductContextInfo', 'Awp0GatewayTileRel', 'Awp0Tile', 'Fnd0ClientScope', 'Fnd0Command', 'Fnd0CommandCollection', 'Fnd0ConditionHelper', 'Fnd0HomeFolder', 'Fnd0Icon', 'Fnd0UIConfigCollectionRel', 'Group', 'GroupMember', 'ImanVolume', 'POM_imc', 'Role', 'User', 'UserSession'];\n/**\n * UID of the current 'User' ModelObject.\n *\n * @private\n */\n\nvar _userUID = '';\n/**\n * UID of the current 'Session' ModelObject.\n *\n * @private\n */\n\nvar _userSessionUID = '';\n/**\n * UID of the current user's 'Group' ModelObject.\n *\n * @private\n */\n\nvar _groupMemberUID = '';\n/**\n * @param {Object} modelObjectSOA - model object returned from SOA\n */\n\nfunction ModelObject(modelObjectSOA) {\n  this.props = modelObjectSOA.props || {};\n  this.type = modelObjectSOA.type;\n  this.uid = modelObjectSOA.uid; // add meta model link\n\n  this.modelType = cmm.getType(modelObjectSOA.type);\n\n  _updateProps(this.props, this.modelType);\n}\n/**\n * This method is set on (augments) all {ModelObject} instance returned by SOA so that it is available for general\n * application use.\n *\n * @return {String} Text value that represents a common way to identify the function's context object (i.e. The\n *         'object_string' property) or the JSON 'stringify' version of the content object if the specific common\n *         property if not defined.\n */\n\n\n_c3 = ModelObject;\n_c = ModelObject;\n\nModelObject.prototype.toString = function () {\n  if (this.props && this.props.object_string) {\n    return this.props.object_string.uiValues[0];\n  }\n\n  return JSON.stringify(this, null, 2);\n};\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String[]} the name of all property's display value. If this property has multiple values, this method\n *         will return the first display value.\n */\n\n\nModelObject.prototype.getPropertyNames = function () {\n  return _.keys(this.props);\n};\n/**\n * Add reference count for model object.\n */\n\n\nModelObject.prototype.addReference = function () {\n  if (!this.reference) {\n    this.reference = 0;\n  }\n\n  this.reference++;\n};\n/**\n * Remove reference count from model object.\n */\n\n\nModelObject.prototype.removeReference = function () {\n  this.reference--;\n\n  if (this.reference < 1) {\n    delete this.reference;\n  }\n};\n/**\n * @param {Object} propSOA - property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - property descriptor\n */\n\n\nfunction Property(propSOA, propertyDescriptor) {\n  _conditionSoaPropValue(propSOA, propertyDescriptor, this);\n\n  this.propertyDescriptor = propertyDescriptor;\n}\n/**\n * Apply some common data value transformations on the 'propToUpdate' based on the values in the 'propSOA'.\n *\n * @param {Object} propSOA - Property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - Property descriptor.\n * @param {Object} propToUpdate - Property object to be updated.\n */\n\n\n_c4 = Property;\n_c2 = Property;\n\nfunction _conditionSoaPropValue(propSOA, propertyDescriptor, propToUpdate) {\n  propToUpdate.dbValues = propSOA.dbValues || [];\n  propToUpdate.isNulls = propSOA.isNulls;\n  propToUpdate.modifiable = propSOA.modifiable;\n  propToUpdate.uiValues = propSOA.uiValues || [];\n  /**\n   * Assure certain properties are never 'null' or 'undefined'\n   */\n\n  if (propSOA.isNulls) {\n    /**\n     * We want to make sure the 'dbValues' match the SOA supplied definition of 'null'.\n     */\n    for (var ndx = propSOA.isNulls.length - 1; ndx >= 0; ndx--) {\n      if (propSOA.isNulls[ndx] && propToUpdate.dbValues.length > ndx) {\n        propToUpdate.dbValues[ndx] = null;\n      }\n    }\n  }\n  /**\n   * Perform some type specific post processing of the property values.\n   */\n\n\n  switch (propertyDescriptor.valueType) {\n    case 2:\n      // Date\n\n      /**\n       * Date processing...Reformat UI value based upon DB value.\n       * <P>\n       * Note: This also makes the UI value be for the local time zone instead of the server's time zone.\n       */\n      // Only set if server gave the client a non-empty UI values array\n      if (propSOA.uiValues && propSOA.uiValues.length > 0 && propSOA.uiValues[0]) {\n        // Only attempt if we have a DB value...\n        if (propSOA.dbValues.length > 0) {\n          _.forEach(propSOA.dbValues, function (dbValue, dbNdx) {\n            var jqDate = new Date(dbValue);\n\n            if (propertyDescriptor.constantsMap && propertyDescriptor.constantsMap.timeEnabled === '1') {\n              propToUpdate.uiValues[dbNdx] = dateTimeSvc.formatSessionDateTime(jqDate);\n            } else {\n              propToUpdate.uiValues[dbNdx] = dateTimeSvc.formatSessionDate(jqDate);\n            }\n          });\n        } else {\n          propToUpdate.uiValues[0] = '';\n        }\n      }\n\n      break;\n\n    case 8:\n      // String\n      if (propertyDescriptor.name !== 'fnd0SVG') {\n        // Sanitize the String DB values\n        propToUpdate.dbValues = sanitizer.sanitizeHtmlValues(propToUpdate.dbValues); // Sanitize the String UI values\n\n        propToUpdate.uiValues = sanitizer.sanitizeHtmlValues(propToUpdate.uiValues);\n      }\n\n      if (propertyDescriptor.name === 'awp0CellProperties') {\n        propToUpdate.dbValues = _convertUTCTimeValues(propToUpdate.dbValues);\n        propToUpdate.uiValues = _convertUTCTimeValues(propToUpdate.uiValues);\n      }\n\n      break;\n  }\n}\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String} Gets the property's display value. If this property has multiple values, this method will return\n *         the first display value.\n */\n\n\nProperty.prototype.getDisplayValue = function () {\n  if (this.uiValues && this.uiValues.length > 0) {\n    return this.uiValues[0];\n  }\n\n  return '';\n};\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {Boolean} TRUE if ALL the internal values (aka 'dbValues') of the function's context object are to be\n *         considered 'null' or 'unset'.\n *         <P>\n *         If the 'isNulls' array is present, all its values will be used to determine the result. If any are\n *         'false' this function will return 'false' (i.e. property is NOT null).\n *         <P>\n *         If 'isNulls' is not present, we assume the 'dbValues' are NOT null.\n *         <P>\n *         Note: The intrinsic data types (boolean, int, double) can have a value (i.e. 'false' or 'zero') but still\n *         be 'unset'. In this case, the SOA server will send back an optional array of booleans named 'isNulls',\n *         the 'true/false' values in this array indicate while elements in the 'dbValues' array should be\n *         considered 'unset'.\n */\n\n\nProperty.prototype.evaluateIsNull = function () {\n  /**\n   * Check if the server told us this context object (property) dbValue was to be considered 'null' or 'unset'.\n   */\n  if (this.isNulls) {\n    for (var ndx = 0; ndx < this.isNulls.length; ndx++) {\n      if (!this.isNulls[ndx]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param {String[]} values - Array of values to consider.\n * @return {String[]} Array if values after replacement of any strings.\n */\n\n\nvar _convertUTCTimeValues = function (values) {\n  for (var iNdx = 0; iNdx < values.length; iNdx++) {\n    var value = values[iNdx];\n    var markerNdx = value ? value.indexOf(UTC_DATE_TIME_MARKER) : -1;\n\n    if (markerNdx !== -1) {\n      var prefix = value.substring(0, markerNdx);\n      var utc = value.substring(markerNdx + UTC_DATE_TIME_MARKER.length);\n      var date = new Date(utc);\n      values[iNdx] = prefix + dateTimeSvc.formatSessionDateTime(date);\n    }\n  }\n\n  return values;\n};\n/**\n * Update properties. This includes adding references to meta model & dealing with date conversions.\n *\n * @param {Object} props - model object properties\n * @param {ModelType} modelType - model type from meta model\n */\n\n\nvar _updateProps = function (props, modelType) {\n  // Maybe change this to for loop later\n  _.forEach(props, function (value, propName) {\n    props[propName] = new Property(value, modelType.propertyDescriptorsMap[propName]);\n  });\n};\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\n\n\nvar exports = {};\n/**\n * Get the cache.\n *\n * @returns {Object} map of UID to model object\n */\n\nexport let getCache = function () {\n  return _uid2modelObject;\n};\n/**\n * Set the cache\n *\n * @param {Object} cache - map of UID to model object\n */\n\nexport let setCache = function (cache) {\n  _.forOwn(cache, function (value, key) {\n    _uid2modelObject[key] = cache[key];\n  });\n};\n/**\n * @param {String} uid - UID of ModelObject to test for.\n * @return {boolean} TRUE if client data model contains the given ModelObject\n */\n\nexport let containsObject = function (uid) {\n  return _uid2modelObject.hasOwnProperty(uid);\n};\n/**\n * Get model object.\n *\n * @param {String} uid - UID of ModelObject\n * @return {ModelObject} The ModelObject; null if not cached\n */\n\nexport let getObject = function (uid) {\n  if (exports.containsObject(uid)) {\n    return _uid2modelObject[uid];\n  }\n\n  return null;\n};\n/**\n * Get model objects.\n *\n * @param {String[]} uids - array of ModelObject UIDs\n * @return {ModelObject} The ModelObject; null if not cached\n */\n\nexport let getObjects = function (uids) {\n  var objects = [];\n\n  _.forEach(uids, function (uid) {\n    objects.push(exports.getObject(uid));\n  });\n\n  return objects;\n};\n/**\n * Remove the ModelObject from the cache that have the given UIDs. Publishes the UIDs to the 'soajs/cdm.deleted'\n * eventBus channel/topic.\n *\n * @param {String[]} deletedUIDs - Array of UIDs to be removed from the cache.\n */\n\nexport let removeObjects = function (deletedUIDs) {\n  var uids = [];\n\n  _.forEach(deletedUIDs, function (deletedUID) {\n    if (exports.containsObject(deletedUID)) {\n      delete _uid2modelObject[deletedUID];\n      uids.push(deletedUID);\n    }\n  });\n\n  if (uids.length > 0) {\n    eventBus.publish('cdm.deleted', {\n      deletedObjectUids: uids\n    });\n  }\n};\n/**\n * @param {ModelObject} userSession - user session\n */\n\nvar setUserSession = function (userSession) {\n  _userSessionUID = userSession.uid; // For refresh scenario, signin isn't call & these 2 fields need to be set.\n\n  if (userSession.props) {\n    if (userSession.props.user) {\n      _userUID = userSession.props.user.dbValues[0];\n    }\n\n    if (userSession.props.fnd0groupmember) {\n      _groupMemberUID = userSession.props.fnd0groupmember.dbValues[0];\n    }\n  }\n};\n/**\n * Add or replace the given ModelObjects to the cache. Publishes the modelObjects to the 'soajs/cdm.modified'\n * eventBus channel/topic.\n *\n * @param {ModelObject[]} modelObjects - Array of 'wire' ModelObject to be added to the cache.\n */\n\n\nexport let cacheObjects = function (modelObjects) {\n  var newObjects = [];\n  var modifiedObjects = [];\n\n  _.forEach(modelObjects, function (modelObject) {\n    var existing = exports.containsObject(modelObject.uid) && exports.getObject(modelObject.uid);\n\n    if (!existing || existing.type !== modelObject.type) {\n      modelObject = new ModelObject(modelObject); // Add model object to cache\n\n      _uid2modelObject[modelObject.uid] = modelObject;\n      newObjects.push(modelObject);\n    } else if (!_.isEmpty(modelObject.props)) {\n      /**\n       * Special Case: Check if existing is empty\n       */\n      if (_.isEmpty(existing.props)) {\n        existing.props = modelObject.props;\n\n        _updateProps(existing.props, existing.modelType);\n        /**\n         * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n         * want to double report these.\n         */\n\n\n        if (newObjects.indexOf(existing) === -1 && modifiedObjects.indexOf(existing) === -1) {\n          modifiedObjects.push(existing);\n        }\n      } else {\n        /**\n         * Foreach of the incoming 'props'\n         */\n        var propertyDescriptorsMap = existing.modelType.propertyDescriptorsMap;\n        var changedExisting = false;\n\n        _.forEach(modelObject.props, function (soaPropValue, soaPropName) {\n          var propertyDescriptor = propertyDescriptorsMap[soaPropName];\n          var existingProp = existing.props[soaPropName];\n\n          if (!existingProp) {\n            existing.props[soaPropName] = new Property(soaPropValue, propertyDescriptor);\n            changedExisting = true;\n          } else {\n            _conditionSoaPropValue(soaPropValue, propertyDescriptor, soaPropValue);\n\n            _.forEach(soaPropValue, function (subPropValue, subPropName) {\n              var existingSubPropValue = existingProp[subPropName];\n\n              if (!_.isEqual(subPropValue, existingSubPropValue)) {\n                existing.props[soaPropName] = new Property(soaPropValue, propertyDescriptor);\n                changedExisting = true;\n                return false;\n              }\n            });\n          }\n        });\n\n        if (changedExisting) {\n          /**\n           * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n           * want to double report these.\n           */\n          if (newObjects.indexOf(existing) === -1 && modifiedObjects.indexOf(existing) === -1) {\n            modifiedObjects.push(existing);\n          }\n        }\n      }\n    } // Set the cache of the UserSession object\n\n\n    if (modelObject.type === 'UserSession') {\n      setUserSession(modelObject);\n    }\n  });\n\n  if (newObjects.length > 0) {\n    eventBus.publish('cdm.new', {\n      newObjects: newObjects\n    });\n  }\n\n  if (modifiedObjects.length > 0) {\n    eventBus.publish('cdm.modified', {\n      modifiedObjects: modifiedObjects\n    });\n  }\n};\n/**\n * @return {ModelObject} The ModelObject of the current user 'Session'.\n */\n\nexport let getUserSession = function () {\n  return exports.getObject(_userSessionUID);\n};\n/**\n * @return {ModelObject} The ModelObject of the current user's 'Group'.\n */\n\nexport let getGroupMember = function () {\n  return exports.getObject(_groupMemberUID);\n};\n/**\n * @return {ModelObject} The ModelObject of the current 'User'.\n */\n\nexport let getUser = function () {\n  return exports.getObject(_userUID);\n};\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} value - HTML String which needs to be escaped.\n * @return {String} Returns escaped and safe HTML.\n */\n\nexport let htmlEscapeAllowEntities = function (value) {\n  return sanitizer.htmlEscapeAllowEntities(value);\n};\n/**\n * Simple and inexpensive HTML Sanitizer which accepts the subset of TAG_WHITELIST array of HTML white list tags.\n *\n * @param {String[]} values - Array of HTML Strings which needs to be sanitized.\n * @return {String[]} Returns sanitized HTML string array.\n */\n\nexport let sanitizeHtmlValues = function (values) {\n  return sanitizer.sanitizeHtmlValues(values);\n};\n/**\n * Simple and inexpensive HTML Sanitizer which detects and/or eliniates HTML that can cause potential cross-site\n * scripting and other UI issues.\n *\n * @param {String} rawValue - HTML String which needs to be sanitized.\n * @return {String} Returns sanitized HTML or Invalid HTML string when there is malicious string.\n */\n\nexport let sanitizeHtmlValue = function (rawValue) {\n  return sanitizer.sanitizeHtmlValue(rawValue);\n};\n/**\n * Return an array of all IModelObjects currently in the cache that match the given model type.\n *\n * @param {String} typeName - Name of the model type to search for.\n * @return {ModelObject[]} An array of all IModelObjects currently in the cache that match the given model type.\n */\n\nexport let getObjectsOfType = function (typeName) {\n  var objs = [];\n\n  _.forEach(_uid2modelObject, function (modelObject) {\n    if (modelObject.type && modelObject.type === typeName) {\n      objs.push(modelObject);\n    }\n  });\n\n  return objs;\n};\n/**\n * @param {String} uid - UID to test\n * @return {Boolean} TRUE if the given UID is NOT null and does NOT match the patterns used to indicate 'no object'.\n */\n\nexport let isValidObjectUid = function (uid) {\n  return !_.isEmpty(uid) && !_.isEqual(uid, _NULL_UID);\n};\n/**\n * Determine if the given object is a ModelObject constructed by this service.\n *\n * @param {Object} objectToTest - The object to test.\n *\n * @returns {Boolean} TRUE if input object is an instance of an CDM ModelObject.\n */\n\nexport let isModelObject = function (objectToTest) {\n  return objectToTest instanceof ModelObject;\n};\n/**\n * {String} Module constant UID used to indicate the identity of an object is 'unknown'.\n */\n\nexport let NULL_UID = _NULL_UID;\n/**\n * ------------------------------------------------<BR>\n * Definition complete...Now do some initialization<BR>\n * ------------------------------------------------<BR>\n */\n\neventBus.subscribe('cdm.cleanCache', function () {\n  // collect the flushable objects, keep the escaped objects in cache\n  _.forEach(_uid2modelObject, function (modelObject, uid) {\n    if (!modelObject.type) {\n      return;\n    }\n\n    if (cmm.isTypeUid(uid)) {\n      // Remove meta data from the cache\n      delete _uid2modelObject[uid];\n    } else if (_noFlushableTypes.indexOf(modelObject.type) === -1 && !modelObject.reference) {\n      modelObject.props = {};\n    }\n  });\n}, 'soa_kernel_clientDataModel');\nexports = {\n  getCache,\n  setCache,\n  containsObject,\n  getObject,\n  getObjects,\n  removeObjects,\n  cacheObjects,\n  getUserSession,\n  getGroupMember,\n  getUser,\n  htmlEscapeAllowEntities,\n  sanitizeHtmlValues,\n  sanitizeHtmlValue,\n  getObjectsOfType,\n  isValidObjectUid,\n  isModelObject,\n  NULL_UID\n};\nexport default exports;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModelObject\");\n$RefreshReg$(_c2, \"Property\");\n\nvar _c3, _c4;\n\n$RefreshReg$(_c3, \"ModelObject\");\n$RefreshReg$(_c4, \"Property\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/soa/kernel/clientDataModel.js"],"names":["UTC_DATE_TIME_MARKER","_NULL_UID","_uid2modelObject","_noFlushableTypes","_userUID","_userSessionUID","_groupMemberUID","ModelObject","modelObjectSOA","cmm","_updateProps","JSON","_","Property","_conditionSoaPropValue","propToUpdate","propSOA","ndx","propertyDescriptor","jqDate","dateTimeSvc","sanitizer","_convertUTCTimeValues","iNdx","values","value","markerNdx","prefix","utc","date","props","modelType","exports","getCache","setCache","cache","containsObject","getObject","getObjects","objects","removeObjects","uids","eventBus","deletedObjectUids","setUserSession","userSession","cacheObjects","newObjects","modifiedObjects","existing","modelObject","propertyDescriptorsMap","changedExisting","existingProp","existingSubPropValue","getUserSession","getGroupMember","getUser","htmlEscapeAllowEntities","sanitizeHtmlValues","sanitizeHtmlValue","getObjectsOfType","objs","isValidObjectUid","isModelObject","objectToTest","NULL_UID"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * The methods provided by this module enable access, control and maintenance of a cache of ModelObjects as well as\n * their member PropertyObjects.\n *\n * @module soa/kernel/clientDataModel\n */\nimport cmm from 'soa/kernel/clientMetaModel';\nimport dateTimeSvc from 'js/dateTimeService';\nimport sanitizer from 'js/sanitizer';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport 'js/localeService';\n\n/**\n * Marker text within a value used to indicate when a property contains a UTC date/time that needs to be converted\n * to to local time zone and session specfici format.\n *\n * @private\n */\nvar UTC_DATE_TIME_MARKER = '{__UTC_DATE_TIME}';\n\n/**\n * UID to indicate the identity of an object is 'unknown'.\n */\nvar _NULL_UID = 'AAAAAAAAAAAAAA';\n\n/**\n * A reference to service.\n */\n\n/**\n * A reference to sanitizer.\n */\n\n/**\n * Note: We are holding on to the resolved module now for when we are running NodeJS. However, this variable will be\n * set again when this service is created using AngularJS injection. The reason is that the 'dateTimeService' needs\n * some other AngularJS services injected to do all its work. It will use fallback values when running in NodeJS.\n *\n * @private\n */\n\n/**\n * Object used to implement a UID-to-ModelObject cache map.\n *\n * @private\n */\nvar _uid2modelObject = {};\n\n/**\n * The array of none flushable object types.\n *\n * @private\n */\nvar _noFlushableTypes = [\n    'Awb0ProductContextInfo',\n    'Awp0GatewayTileRel',\n    'Awp0Tile',\n    'Fnd0ClientScope',\n    'Fnd0Command',\n    'Fnd0CommandCollection',\n    'Fnd0ConditionHelper',\n    'Fnd0HomeFolder',\n    'Fnd0Icon',\n    'Fnd0UIConfigCollectionRel',\n    'Group',\n    'GroupMember',\n    'ImanVolume',\n    'POM_imc',\n    'Role',\n    'User',\n    'UserSession'\n];\n\n/**\n * UID of the current 'User' ModelObject.\n *\n * @private\n */\nvar _userUID = '';\n\n/**\n * UID of the current 'Session' ModelObject.\n *\n * @private\n */\nvar _userSessionUID = '';\n\n/**\n * UID of the current user's 'Group' ModelObject.\n *\n * @private\n */\nvar _groupMemberUID = '';\n\n/**\n * @param {Object} modelObjectSOA - model object returned from SOA\n */\nfunction ModelObject( modelObjectSOA ) {\n    this.props = modelObjectSOA.props || {};\n    this.type = modelObjectSOA.type;\n    this.uid = modelObjectSOA.uid;\n\n    // add meta model link\n    this.modelType = cmm.getType( modelObjectSOA.type );\n\n    _updateProps( this.props, this.modelType );\n}\n\n/**\n * This method is set on (augments) all {ModelObject} instance returned by SOA so that it is available for general\n * application use.\n *\n * @return {String} Text value that represents a common way to identify the function's context object (i.e. The\n *         'object_string' property) or the JSON 'stringify' version of the content object if the specific common\n *         property if not defined.\n */\nModelObject.prototype.toString = function() {\n    if( this.props && this.props.object_string ) {\n        return this.props.object_string.uiValues[ 0 ];\n    }\n    return JSON.stringify( this, null, 2 );\n};\n\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String[]} the name of all property's display value. If this property has multiple values, this method\n *         will return the first display value.\n */\nModelObject.prototype.getPropertyNames = function() {\n    return _.keys( this.props );\n};\n\n/**\n * Add reference count for model object.\n */\nModelObject.prototype.addReference = function() {\n    if( !this.reference ) {\n        this.reference = 0;\n    }\n    this.reference++;\n};\n\n/**\n * Remove reference count from model object.\n */\nModelObject.prototype.removeReference = function() {\n    this.reference--;\n    if( this.reference < 1 ) {\n        delete this.reference;\n    }\n};\n\n/**\n * @param {Object} propSOA - property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - property descriptor\n */\nfunction Property( propSOA, propertyDescriptor ) {\n    _conditionSoaPropValue( propSOA, propertyDescriptor, this );\n\n    this.propertyDescriptor = propertyDescriptor;\n}\n\n/**\n * Apply some common data value transformations on the 'propToUpdate' based on the values in the 'propSOA'.\n *\n * @param {Object} propSOA - Property object returned from SOA\n * @param {PropertyDescriptor} propertyDescriptor - Property descriptor.\n * @param {Object} propToUpdate - Property object to be updated.\n */\nfunction _conditionSoaPropValue( propSOA, propertyDescriptor, propToUpdate ) {\n    propToUpdate.dbValues = propSOA.dbValues || [];\n    propToUpdate.isNulls = propSOA.isNulls;\n    propToUpdate.modifiable = propSOA.modifiable;\n    propToUpdate.uiValues = propSOA.uiValues || [];\n\n    /**\n     * Assure certain properties are never 'null' or 'undefined'\n     */\n    if( propSOA.isNulls ) {\n        /**\n         * We want to make sure the 'dbValues' match the SOA supplied definition of 'null'.\n         */\n        for( var ndx = propSOA.isNulls.length - 1; ndx >= 0; ndx-- ) {\n            if( propSOA.isNulls[ ndx ] && propToUpdate.dbValues.length > ndx ) {\n                propToUpdate.dbValues[ ndx ] = null;\n            }\n        }\n    }\n\n    /**\n     * Perform some type specific post processing of the property values.\n     */\n    switch ( propertyDescriptor.valueType ) {\n        case 2: // Date\n            /**\n             * Date processing...Reformat UI value based upon DB value.\n             * <P>\n             * Note: This also makes the UI value be for the local time zone instead of the server's time zone.\n             */\n            // Only set if server gave the client a non-empty UI values array\n            if( propSOA.uiValues && propSOA.uiValues.length > 0 && propSOA.uiValues[ 0 ] ) {\n                // Only attempt if we have a DB value...\n                if( propSOA.dbValues.length > 0 ) {\n                    _.forEach( propSOA.dbValues, function( dbValue, dbNdx ) {\n                        var jqDate = new Date( dbValue );\n\n                        if( propertyDescriptor.constantsMap && propertyDescriptor.constantsMap.timeEnabled === '1' ) {\n                            propToUpdate.uiValues[ dbNdx ] = dateTimeSvc.formatSessionDateTime( jqDate );\n                        } else {\n                            propToUpdate.uiValues[ dbNdx ] = dateTimeSvc.formatSessionDate( jqDate );\n                        }\n                    } );\n                } else {\n                    propToUpdate.uiValues[ 0 ] = '';\n                }\n            }\n            break;\n        case 8: // String\n            if( propertyDescriptor.name !== 'fnd0SVG' ) {\n                // Sanitize the String DB values\n                propToUpdate.dbValues = sanitizer.sanitizeHtmlValues( propToUpdate.dbValues );\n                // Sanitize the String UI values\n                propToUpdate.uiValues = sanitizer.sanitizeHtmlValues( propToUpdate.uiValues );\n            }\n\n            if( propertyDescriptor.name === 'awp0CellProperties' ) {\n                propToUpdate.dbValues = _convertUTCTimeValues( propToUpdate.dbValues );\n                propToUpdate.uiValues = _convertUTCTimeValues( propToUpdate.uiValues );\n            }\n            break;\n    }\n}\n\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {String} Gets the property's display value. If this property has multiple values, this method will return\n *         the first display value.\n */\nProperty.prototype.getDisplayValue = function() {\n    if( this.uiValues && this.uiValues.length > 0 ) {\n        return this.uiValues[ 0 ];\n    }\n    return '';\n};\n\n/**\n * This method is set on (augments) all {PropertyObject} instances returned by SOA so that it is available for\n * general application use.\n *\n * @return {Boolean} TRUE if ALL the internal values (aka 'dbValues') of the function's context object are to be\n *         considered 'null' or 'unset'.\n *         <P>\n *         If the 'isNulls' array is present, all its values will be used to determine the result. If any are\n *         'false' this function will return 'false' (i.e. property is NOT null).\n *         <P>\n *         If 'isNulls' is not present, we assume the 'dbValues' are NOT null.\n *         <P>\n *         Note: The intrinsic data types (boolean, int, double) can have a value (i.e. 'false' or 'zero') but still\n *         be 'unset'. In this case, the SOA server will send back an optional array of booleans named 'isNulls',\n *         the 'true/false' values in this array indicate while elements in the 'dbValues' array should be\n *         considered 'unset'.\n */\nProperty.prototype.evaluateIsNull = function() {\n    /**\n     * Check if the server told us this context object (property) dbValue was to be considered 'null' or 'unset'.\n     */\n    if( this.isNulls ) {\n        for( var ndx = 0; ndx < this.isNulls.length; ndx++ ) {\n            if( !this.isNulls[ ndx ] ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Replace any occurrences of UTC date/time values with the {@link #UTC_DATE_TIME_MARKER} with the date/time in the\n * local time zone.\n *\n * @private\n *\n * @param {String[]} values - Array of values to consider.\n * @return {String[]} Array if values after replacement of any strings.\n */\nvar _convertUTCTimeValues = function( values ) {\n    for( var iNdx = 0; iNdx < values.length; iNdx++ ) {\n        var value = values[ iNdx ];\n\n        var markerNdx = value ? value.indexOf( UTC_DATE_TIME_MARKER ) : -1;\n\n        if( markerNdx !== -1 ) {\n            var prefix = value.substring( 0, markerNdx );\n            var utc = value.substring( markerNdx + UTC_DATE_TIME_MARKER.length );\n\n            var date = new Date( utc );\n\n            values[ iNdx ] = prefix + dateTimeSvc.formatSessionDateTime( date );\n        }\n    }\n\n    return values;\n};\n\n/**\n * Update properties. This includes adding references to meta model & dealing with date conversions.\n *\n * @param {Object} props - model object properties\n * @param {ModelType} modelType - model type from meta model\n */\nvar _updateProps = function( props, modelType ) {\n    // Maybe change this to for loop later\n    _.forEach( props, function( value, propName ) {\n        props[ propName ] = new Property( value, modelType.propertyDescriptorsMap[ propName ] );\n    } );\n};\n\n/**\n * Define the base object used to provide all of this module's external API on.\n *\n * @private\n */\nvar exports = {};\n\n/**\n * Get the cache.\n *\n * @returns {Object} map of UID to model object\n */\nexport let getCache = function() {\n    return _uid2modelObject;\n};\n\n/**\n * Set the cache\n *\n * @param {Object} cache - map of UID to model object\n */\nexport let setCache = function( cache ) {\n    _.forOwn( cache, function( value, key ) {\n        _uid2modelObject[ key ] = cache[ key ];\n    } );\n};\n\n/**\n * @param {String} uid - UID of ModelObject to test for.\n * @return {boolean} TRUE if client data model contains the given ModelObject\n */\nexport let containsObject = function( uid ) {\n    return _uid2modelObject.hasOwnProperty( uid );\n};\n\n/**\n * Get model object.\n *\n * @param {String} uid - UID of ModelObject\n * @return {ModelObject} The ModelObject; null if not cached\n */\nexport let getObject = function( uid ) {\n    if( exports.containsObject( uid ) ) {\n        return _uid2modelObject[ uid ];\n    }\n    return null;\n};\n\n/**\n * Get model objects.\n *\n * @param {String[]} uids - array of ModelObject UIDs\n * @return {ModelObject} The ModelObject; null if not cached\n */\nexport let getObjects = function( uids ) {\n    var objects = [];\n    _.forEach( uids, function( uid ) {\n        objects.push( exports.getObject( uid ) );\n    } );\n    return objects;\n};\n\n/**\n * Remove the ModelObject from the cache that have the given UIDs. Publishes the UIDs to the 'soajs/cdm.deleted'\n * eventBus channel/topic.\n *\n * @param {String[]} deletedUIDs - Array of UIDs to be removed from the cache.\n */\nexport let removeObjects = function( deletedUIDs ) {\n    var uids = [];\n    _.forEach( deletedUIDs, function( deletedUID ) {\n        if( exports.containsObject( deletedUID ) ) {\n            delete _uid2modelObject[ deletedUID ];\n            uids.push( deletedUID );\n        }\n    } );\n\n    if( uids.length > 0 ) {\n        eventBus.publish( 'cdm.deleted', {\n            deletedObjectUids: uids\n        } );\n    }\n};\n\n/**\n * @param {ModelObject} userSession - user session\n */\nvar setUserSession = function( userSession ) {\n    _userSessionUID = userSession.uid;\n\n    // For refresh scenario, signin isn't call & these 2 fields need to be set.\n    if( userSession.props ) {\n        if( userSession.props.user ) {\n            _userUID = userSession.props.user.dbValues[ 0 ];\n        }\n        if( userSession.props.fnd0groupmember ) {\n            _groupMemberUID = userSession.props.fnd0groupmember.dbValues[ 0 ];\n        }\n    }\n};\n\n/**\n * Add or replace the given ModelObjects to the cache. Publishes the modelObjects to the 'soajs/cdm.modified'\n * eventBus channel/topic.\n *\n * @param {ModelObject[]} modelObjects - Array of 'wire' ModelObject to be added to the cache.\n */\nexport let cacheObjects = function( modelObjects ) {\n    var newObjects = [];\n    var modifiedObjects = [];\n\n    _.forEach( modelObjects, function( modelObject ) {\n        var existing = exports.containsObject( modelObject.uid ) && exports.getObject( modelObject.uid );\n\n        if( !existing || existing.type !== modelObject.type ) {\n            modelObject = new ModelObject( modelObject );\n\n            // Add model object to cache\n            _uid2modelObject[ modelObject.uid ] = modelObject;\n\n            newObjects.push( modelObject );\n        } else if( !_.isEmpty( modelObject.props ) ) {\n            /**\n             * Special Case: Check if existing is empty\n             */\n            if( _.isEmpty( existing.props ) ) {\n                existing.props = modelObject.props;\n\n                _updateProps( existing.props, existing.modelType );\n\n                /**\n                 * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n                 * want to double report these.\n                 */\n                if( newObjects.indexOf( existing ) === -1 && modifiedObjects.indexOf( existing ) === -1 ) {\n                    modifiedObjects.push( existing );\n                }\n            } else {\n                /**\n                 * Foreach of the incoming 'props'\n                 */\n                var propertyDescriptorsMap = existing.modelType.propertyDescriptorsMap;\n\n                var changedExisting = false;\n\n                _.forEach( modelObject.props, function( soaPropValue, soaPropName ) {\n                    var propertyDescriptor = propertyDescriptorsMap[ soaPropName ];\n                    var existingProp = existing.props[ soaPropName ];\n\n                    if( !existingProp ) {\n                        existing.props[ soaPropName ] = new Property( soaPropValue, propertyDescriptor );\n                        changedExisting = true;\n                    } else {\n                        _conditionSoaPropValue( soaPropValue, propertyDescriptor, soaPropValue );\n\n                        _.forEach( soaPropValue, function( subPropValue, subPropName ) {\n                            var existingSubPropValue = existingProp[ subPropName ];\n\n                            if( !_.isEqual( subPropValue, existingSubPropValue ) ) {\n                                existing.props[ soaPropName ] = new Property( soaPropValue, propertyDescriptor );\n                                changedExisting = true;\n                                return false;\n                            }\n                        } );\n                    }\n                } );\n\n                if( changedExisting ) {\n                    /**\n                     * Before we add this to the 'modified' list, check if it is already in the 'new' list. We do not\n                     * want to double report these.\n                     */\n                    if( newObjects.indexOf( existing ) === -1 && modifiedObjects.indexOf( existing ) === -1 ) {\n                        modifiedObjects.push( existing );\n                    }\n                }\n            }\n        }\n\n        // Set the cache of the UserSession object\n        if( modelObject.type === 'UserSession' ) {\n            setUserSession( modelObject );\n        }\n    } );\n\n    if( newObjects.length > 0 ) {\n        eventBus.publish( 'cdm.new', {\n            newObjects: newObjects\n        } );\n    }\n\n    if( modifiedObjects.length > 0 ) {\n        eventBus.publish( 'cdm.modified', {\n            modifiedObjects: modifiedObjects\n        } );\n    }\n};\n\n/**\n * @return {ModelObject} The ModelObject of the current user 'Session'.\n */\nexport let getUserSession = function() {\n    return exports.getObject( _userSessionUID );\n};\n\n/**\n * @return {ModelObject} The ModelObject of the current user's 'Group'.\n */\nexport let getGroupMember = function() {\n    return exports.getObject( _groupMemberUID );\n};\n\n/**\n * @return {ModelObject} The ModelObject of the current 'User'.\n */\nexport let getUser = function() {\n    return exports.getObject( _userUID );\n};\n\n/**\n * HTML-escapes a string, but does not double-escape HTML-entities already present in the string.\n *\n * @param {String} value - HTML String which needs to be escaped.\n * @return {String} Returns escaped and safe HTML.\n */\nexport let htmlEscapeAllowEntities = function( value ) {\n    return sanitizer.htmlEscapeAllowEntities( value );\n};\n\n/**\n * Simple and inexpensive HTML Sanitizer which accepts the subset of TAG_WHITELIST array of HTML white list tags.\n *\n * @param {String[]} values - Array of HTML Strings which needs to be sanitized.\n * @return {String[]} Returns sanitized HTML string array.\n */\nexport let sanitizeHtmlValues = function( values ) {\n    return sanitizer.sanitizeHtmlValues( values );\n};\n\n/**\n * Simple and inexpensive HTML Sanitizer which detects and/or eliniates HTML that can cause potential cross-site\n * scripting and other UI issues.\n *\n * @param {String} rawValue - HTML String which needs to be sanitized.\n * @return {String} Returns sanitized HTML or Invalid HTML string when there is malicious string.\n */\nexport let sanitizeHtmlValue = function( rawValue ) {\n    return sanitizer.sanitizeHtmlValue( rawValue );\n};\n\n/**\n * Return an array of all IModelObjects currently in the cache that match the given model type.\n *\n * @param {String} typeName - Name of the model type to search for.\n * @return {ModelObject[]} An array of all IModelObjects currently in the cache that match the given model type.\n */\nexport let getObjectsOfType = function( typeName ) {\n    var objs = [];\n    _.forEach( _uid2modelObject, function( modelObject ) {\n        if( modelObject.type && modelObject.type === typeName ) {\n            objs.push( modelObject );\n        }\n    } );\n    return objs;\n};\n\n/**\n * @param {String} uid - UID to test\n * @return {Boolean} TRUE if the given UID is NOT null and does NOT match the patterns used to indicate 'no object'.\n */\nexport let isValidObjectUid = function( uid ) {\n    return !_.isEmpty( uid ) && !_.isEqual( uid, _NULL_UID );\n};\n\n/**\n * Determine if the given object is a ModelObject constructed by this service.\n *\n * @param {Object} objectToTest - The object to test.\n *\n * @returns {Boolean} TRUE if input object is an instance of an CDM ModelObject.\n */\nexport let isModelObject = function( objectToTest ) {\n    return objectToTest instanceof ModelObject;\n};\n\n/**\n * {String} Module constant UID used to indicate the identity of an object is 'unknown'.\n */\nexport let NULL_UID = _NULL_UID;\n\n/**\n * ------------------------------------------------<BR>\n * Definition complete...Now do some initialization<BR>\n * ------------------------------------------------<BR>\n */\neventBus.subscribe( 'cdm.cleanCache', function() {\n    // collect the flushable objects, keep the escaped objects in cache\n    _.forEach( _uid2modelObject, function( modelObject, uid ) {\n        if( !modelObject.type ) {\n            return;\n        }\n\n        if( cmm.isTypeUid( uid ) ) {\n            // Remove meta data from the cache\n            delete _uid2modelObject[ uid ];\n        } else if( _noFlushableTypes.indexOf( modelObject.type ) === -1 && !modelObject.reference ) {\n            modelObject.props = {};\n        }\n    } );\n}, 'soa_kernel_clientDataModel' );\n\nexports = {\n    getCache,\n    setCache,\n    containsObject,\n    getObject,\n    getObjects,\n    removeObjects,\n    cacheObjects,\n    getUserSession,\n    getGroupMember,\n    getUser,\n    htmlEscapeAllowEntities,\n    sanitizeHtmlValues,\n    sanitizeHtmlValue,\n    getObjectsOfType,\n    isValidObjectUid,\n    isModelObject,\n    NULL_UID\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
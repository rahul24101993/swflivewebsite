{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * TODO\n * <P>\n * Note: This modules does not create an injectable service.\n *\n * @module js/awFileService\n */ /**\n * Get file name from path\n *\n * @param {String} filePath - The file path to get\n *\n * @return {String} file name\n */export let getFileFromPath=function(filePath){if(filePath!==null){let seperatorIndex=filePath.lastIndexOf('\\\\');if(seperatorIndex===-1){seperatorIndex=filePath.lastIndexOf('/');}return filePath.substring(seperatorIndex+1);}return null;};/**\n * Get file name without extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name without extension\n */export let getFileNameWithoutExtension=function(fileName){const extIndex=fileName.lastIndexOf('.');if(extIndex>-1){return fileName.substring(0,extIndex);}return fileName;};/**\n * Get file name extension from file name\n *\n * @param {String} fileName file name\n * @return {String} file name extension\n */export let getFileExtension=function(fileName){const extIndex=fileName.lastIndexOf('.');if(extIndex>-1){return fileName.substring(extIndex);}return'';};/**\n * Look for support of the 'files' in the 'dataTranfer' area of the event.\n *\n * @param {DragEvent} event - The event to test.\n *\n * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.\n */export let dataTransferContainsFiles=function(event){if(event.dataTransfer){const types=event.dataTransfer.types;if(types){for(let i=0;i<types.length;++i){if(types[i]==='Files'){return true;}}}}return false;};/**\n * check if the current file extension match the filter types.\n *\n * @param {String } typeFilter - The types that file need match .\n * @param {String } fileExt - The file need match .\n *\n * @return {boolean} TRUE if the 'file' match the 'typeFilter'.\n */export let fileMatchTypes=function(typeFilter,fileExt){if(typeFilter){const validFileExtensions=typeFilter.split(',');if(fileExt!==''){fileExt=fileExt.replace('.','');}for(let ndx=0;ndx<validFileExtensions.length;ndx++){let validFileExt=validFileExtensions[ndx].trim();if(validFileExt!==null){validFileExt=validFileExt.replace('.','');if(fileExt!==''&&fileExt.toLowerCase()===validFileExt.toLowerCase()){return true;}}}return false;}return true;};export default{getFileFromPath,getFileNameWithoutExtension,getFileExtension,dataTransferContainsFiles,fileMatchTypes};","map":null,"metadata":{},"sourceType":"module"}
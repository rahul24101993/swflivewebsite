{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/* eslint-disable require-jsdoc */\nimport _ from 'lodash';\n/**\n * Date filter service.\n *\n * @module js/awDateFilterService\n */\n\nconst DATETIME_FORMATS = {\n  AMPMS: ['AM', 'PM'],\n  DAY: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  ERANAMES: ['Before Christ', 'Anno Domini'],\n  ERAS: ['BC', 'AD'],\n  FIRSTDAYOFWEEK: 6,\n  MONTH: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  SHORTDAY: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  SHORTMONTH: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  STANDALONEMONTH: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  WEEKENDRANGE: [5, 6],\n  fullDate: 'EEEE, MMMM d, y',\n  longDate: 'MMMM d, y',\n  medium: 'MMM d, y h:mm:ss a',\n  mediumDate: 'MMM d, y',\n  mediumTime: 'h:mm:ss a',\n  short: 'M/d/yy h:mm a',\n  shortDate: 'M/d/yy',\n  shortTime: 'h:mm a'\n};\nlet DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\\s\\S]*)/;\nlet NUMBER_STRING = /^-?\\d+$/;\nvar R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\nvar DATE_FORMATS = {\n  yyyy: dateGetter('FullYear', 4, 0, false, true),\n  yy: dateGetter('FullYear', 2, 0, true, true),\n  y: dateGetter('FullYear', 1, 0, false, true),\n  MMMM: dateStrGetter('Month'),\n  MMM: dateStrGetter('Month', true),\n  MM: dateGetter('Month', 2, 1),\n  M: dateGetter('Month', 1, 1),\n  LLLL: dateStrGetter('Month', false, true),\n  dd: dateGetter('Date', 2),\n  d: dateGetter('Date', 1),\n  HH: dateGetter('Hours', 2),\n  H: dateGetter('Hours', 1),\n  hh: dateGetter('Hours', 2, -12),\n  h: dateGetter('Hours', 1, -12),\n  mm: dateGetter('Minutes', 2),\n  m: dateGetter('Minutes', 1),\n  ss: dateGetter('Seconds', 2),\n  s: dateGetter('Seconds', 1),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions\n  sss: dateGetter('Milliseconds', 3),\n  EEEE: dateStrGetter('Day'),\n  EEE: dateStrGetter('Day', true),\n  a: ampmGetter,\n  Z: timeZoneGetter,\n  ww: weekGetter(2),\n  w: weekGetter(1),\n  G: eraGetter,\n  GG: eraGetter,\n  GGG: eraGetter,\n  GGGG: longEraGetter\n};\nvar ZERO_CHAR = '0';\n\nfunction dateGetter(name, size, offset, trim, negWrap) {\n  offset = offset || 0;\n  return function (date) {\n    var value = date['get' + name]();\n\n    if (offset > 0 || value > -offset) {\n      value += offset;\n    }\n\n    if (value === 0 && offset === -12) {\n      value = 12;\n    }\n\n    return padNumber(value, size, trim, negWrap);\n  };\n}\n\nvar uppercase = function (string) {\n  return isString(string) ? string.toUpperCase() : string;\n};\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nfunction isDate(value) {\n  return Object.prototype.toString.call(value) === '[object Date]';\n}\n\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\n\nfunction dateStrGetter(name, shortForm, standAlone) {\n  return function (date, formats) {\n    var value = date['get' + name]();\n    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');\n    var get = uppercase(propPrefix + name);\n    return formats[get][value];\n  };\n}\n\nfunction timeZoneGetter(date, formats, offset) {\n  var zone = -1 * offset;\n  var paddedZone = zone >= 0 ? '+' : '';\n  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);\n  return paddedZone;\n}\n\nfunction getFirstThursdayOfYear(year) {\n  // 0 = index of January\n  var dayOfWeekOnFirst = new Date(year, 0, 1).getDay(); // 4 = index of Thursday (+1 to account for 1st = 5)\n  // 11 = index of *next* Thursday (+1 account for 1st = 12)\n\n  return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);\n}\n\nfunction getThursdayThisWeek(datetime) {\n  return new Date(datetime.getFullYear(), datetime.getMonth(), // 4 is a index of Thursday\n  datetime.getDate() + (4 - datetime.getDay()));\n}\n\nfunction weekGetter(size) {\n  return function (date) {\n    var firstThurs = getFirstThursdayOfYear(date.getFullYear());\n    var thisThurs = getThursdayThisWeek(date);\n    var diff = Number(thisThurs) - Number(firstThurs);\n    var result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week\n\n    return padNumber(result, size);\n  };\n}\n\nfunction padNumber(num, digits, trim, negWrap) {\n  var neg = '';\n\n  if (num < 0 || negWrap && num <= 0) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = '-';\n    }\n  }\n\n  num = String(num);\n\n  while (num.length < digits) {\n    num = ZERO_CHAR + num;\n  }\n\n  if (trim) {\n    num = num.substr(num.length - digits);\n  }\n\n  return neg + num;\n}\n\nfunction concat(array1, array2, index) {\n  return array1.concat([].slice.call(array2, index));\n}\n\nfunction ampmGetter(date, formats) {\n  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];\n}\n\nfunction eraGetter(date, formats) {\n  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];\n}\n\nfunction longEraGetter(date, formats) {\n  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];\n}\n\nvar isNumberNaN = Number.isNaN || function isNumberNaN(num) {\n  return num !== num;\n};\n\nvar ALL_COLONS = /:/g;\n\nfunction timezoneToOffset(timezone, fallback) {\n  // Support: IE 9-11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(ALL_COLONS, '');\n  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes(date, minutes) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\nfunction convertTimezoneToLocal(date, timezone, reverse) {\n  reverse = reverse ? -1 : 1;\n  var dateTimezoneOffset = date.getTimezoneOffset();\n  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));\n}\n\nfunction jsonStringToDate(string) {\n  var match = string.match(R_ISO8601_STR);\n\n  if (match) {\n    var date = new Date(0);\n    var tzHour = 0;\n    var tzMin = 0;\n    var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n    var timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n    if (match[9]) {\n      tzHour = toInt(match[9] + match[10]);\n      tzMin = toInt(match[9] + match[11]);\n    }\n\n    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n    var h = toInt(match[4] || 0) - tzHour;\n    var m = toInt(match[5] || 0) - tzMin;\n    var s = toInt(match[6] || 0);\n    var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n    timeSetter.call(date, h, m, s, ms);\n    return date;\n  }\n\n  return string;\n}\n\nfunction getFilteredDate(date, format, timezone) {\n  var text = '';\n  var parts = [];\n  var fn;\n  var match;\n  format = format || 'mediumDate';\n  format = DATETIME_FORMATS[format] || format;\n\n  if (isString(date)) {\n    date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);\n  }\n\n  if (isNumber(date)) {\n    date = new Date(date);\n  }\n\n  if (!isDate(date) || !isFinite(date.getTime())) {\n    return date;\n  }\n\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n\n    if (match) {\n      parts = concat(parts, match, 1);\n      format = parts.pop();\n    } else {\n      parts.push(format);\n      format = null;\n    }\n  }\n\n  var dateTimezoneOffset = date.getTimezoneOffset();\n\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  _.forEach(parts, function (value) {\n    fn = DATE_FORMATS[value];\n    text += fn ? fn(date, DATETIME_FORMATS, dateTimezoneOffset) : value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n  });\n\n  return text;\n}\n\nexport default {\n  getFilteredDate\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awDateFilterService.js"],"names":["DATETIME_FORMATS","AMPMS","DAY","ERANAMES","ERAS","FIRSTDAYOFWEEK","MONTH","SHORTDAY","SHORTMONTH","STANDALONEMONTH","WEEKENDRANGE","fullDate","longDate","medium","mediumDate","mediumTime","short","shortDate","shortTime","DATE_FORMATS_SPLIT","NUMBER_STRING","R_ISO8601_STR","DATE_FORMATS","yyyy","dateGetter","yy","y","MMMM","dateStrGetter","MMM","MM","M","LLLL","dd","d","HH","H","hh","h","mm","m","ss","s","sss","EEEE","EEE","a","Z","ww","weekGetter","w","G","GG","GGG","GGGG","longEraGetter","ZERO_CHAR","offset","value","date","padNumber","uppercase","isString","string","Object","parseInt","propPrefix","standAlone","shortForm","get","formats","zone","paddedZone","Math","dayOfWeekOnFirst","datetime","firstThurs","getFirstThursdayOfYear","thisThurs","getThursdayThisWeek","diff","Number","result","neg","num","negWrap","String","array1","isNumberNaN","ALL_COLONS","timezone","requestedTimezoneOffset","Date","reverse","dateTimezoneOffset","timezoneOffset","timezoneToOffset","addDateMinutes","match","tzHour","tzMin","dateSetter","timeSetter","toInt","ms","parseFloat","text","parts","format","jsonStringToDate","isNumber","isDate","isFinite","concat","convertTimezoneToLocal","_","fn","getFilteredDate"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n/* eslint-disable require-jsdoc */\nimport _ from 'lodash';\n/**\n * Date filter service.\n *\n * @module js/awDateFilterService\n */\n\nconst DATETIME_FORMATS = {\n    AMPMS: [\n        'AM',\n        'PM'\n    ],\n    DAY: [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ],\n    ERANAMES: [\n        'Before Christ',\n        'Anno Domini'\n    ],\n    ERAS: [\n        'BC',\n        'AD'\n    ],\n    FIRSTDAYOFWEEK: 6,\n    MONTH: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ],\n    SHORTDAY: [\n        'Sun',\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat'\n    ],\n    SHORTMONTH: [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ],\n    STANDALONEMONTH: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December'\n    ],\n    WEEKENDRANGE: [\n        5,\n        6\n    ],\n    fullDate: 'EEEE, MMMM d, y',\n    longDate: 'MMMM d, y',\n    medium: 'MMM d, y h:mm:ss a',\n    mediumDate: 'MMM d, y',\n    mediumTime: 'h:mm:ss a',\n    short: 'M/d/yy h:mm a',\n    shortDate: 'M/d/yy',\n    shortTime: 'h:mm a'\n};\n\nlet DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\\s\\S]*)/;\nlet NUMBER_STRING = /^-?\\d+$/;\nvar R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\nvar DATE_FORMATS = {\n    yyyy: dateGetter( 'FullYear', 4, 0, false, true ),\n    yy: dateGetter( 'FullYear', 2, 0, true, true ),\n    y: dateGetter( 'FullYear', 1, 0, false, true ),\n    MMMM: dateStrGetter( 'Month' ),\n    MMM: dateStrGetter( 'Month', true ),\n    MM: dateGetter( 'Month', 2, 1 ),\n    M: dateGetter( 'Month', 1, 1 ),\n    LLLL: dateStrGetter( 'Month', false, true ),\n    dd: dateGetter( 'Date', 2 ),\n    d: dateGetter( 'Date', 1 ),\n    HH: dateGetter( 'Hours', 2 ),\n    H: dateGetter( 'Hours', 1 ),\n    hh: dateGetter( 'Hours', 2, -12 ),\n    h: dateGetter( 'Hours', 1, -12 ),\n    mm: dateGetter( 'Minutes', 2 ),\n    m: dateGetter( 'Minutes', 1 ),\n    ss: dateGetter( 'Seconds', 2 ),\n    s: dateGetter( 'Seconds', 1 ),\n    // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n    // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions\n    sss: dateGetter( 'Milliseconds', 3 ),\n    EEEE: dateStrGetter( 'Day' ),\n    EEE: dateStrGetter( 'Day', true ),\n    a: ampmGetter,\n    Z: timeZoneGetter,\n    ww: weekGetter( 2 ),\n    w: weekGetter( 1 ),\n    G: eraGetter,\n    GG: eraGetter,\n    GGG: eraGetter,\n    GGGG: longEraGetter\n};\nvar ZERO_CHAR = '0';\n\nfunction dateGetter( name, size, offset, trim, negWrap ) {\n    offset = offset || 0;\n    return function( date ) {\n        var value = date[ 'get' + name ]();\n        if( offset > 0 || value > -offset ) {\n            value += offset;\n        }\n        if( value === 0 && offset === -12 ) { value = 12; }\n        return padNumber( value, size, trim, negWrap );\n    };\n}\nvar uppercase = function( string ) { return isString( string ) ? string.toUpperCase() : string; };\n\nfunction isString( value ) { return typeof value === 'string'; }\n\nfunction isNumber( value ) { return typeof value === 'number'; }\n\nfunction isDate( value ) {\n    return Object.prototype.toString.call( value ) === '[object Date]';\n}\n\nfunction toInt( str ) {\n    return parseInt( str, 10 );\n}\n\nfunction dateStrGetter( name, shortForm, standAlone ) {\n    return function( date, formats ) {\n        var value = date[ 'get' + name ]();\n        var propPrefix = ( standAlone ? 'STANDALONE' : '' ) + ( shortForm ? 'SHORT' : '' );\n        var get = uppercase( propPrefix + name );\n\n        return formats[ get ][ value ];\n    };\n}\n\nfunction timeZoneGetter( date, formats, offset ) {\n    var zone = -1 * offset;\n    var paddedZone = zone >= 0 ? '+' : '';\n\n    paddedZone += padNumber( Math[ zone > 0 ? 'floor' : 'ceil' ]( zone / 60 ), 2 ) +\n        padNumber( Math.abs( zone % 60 ), 2 );\n\n    return paddedZone;\n}\n\nfunction getFirstThursdayOfYear( year ) {\n    // 0 = index of January\n    var dayOfWeekOnFirst = new Date( year, 0, 1 ).getDay();\n    // 4 = index of Thursday (+1 to account for 1st = 5)\n    // 11 = index of *next* Thursday (+1 account for 1st = 12)\n    return new Date( year, 0, ( dayOfWeekOnFirst <= 4 ? 5 : 12 ) - dayOfWeekOnFirst );\n}\n\nfunction getThursdayThisWeek( datetime ) {\n    return new Date( datetime.getFullYear(), datetime.getMonth(),\n        // 4 is a index of Thursday\n        datetime.getDate() + ( 4 - datetime.getDay() ) );\n}\n\nfunction weekGetter( size ) {\n    return function( date ) {\n        var firstThurs = getFirstThursdayOfYear( date.getFullYear() );\n        var thisThurs = getThursdayThisWeek( date );\n\n        var diff = Number( thisThurs ) - Number( firstThurs );\n        var result = 1 + Math.round( diff / 6.048e8 ); // 6.048e8 ms per week\n\n        return padNumber( result, size );\n    };\n}\n\nfunction padNumber( num, digits, trim, negWrap ) {\n    var neg = '';\n    if( num < 0 || negWrap && num <= 0 ) {\n        if( negWrap ) {\n            num = -num + 1;\n        } else {\n            num = -num;\n            neg = '-';\n        }\n    }\n    num = String( num );\n    while( num.length < digits ) { num = ZERO_CHAR + num; }\n    if( trim ) {\n        num = num.substr( num.length - digits );\n    }\n    return neg + num;\n}\n\nfunction concat( array1, array2, index ) {\n    return array1.concat( [].slice.call( array2, index ) );\n}\n\nfunction ampmGetter( date, formats ) {\n    return date.getHours() < 12 ? formats.AMPMS[ 0 ] : formats.AMPMS[ 1 ];\n}\n\nfunction eraGetter( date, formats ) {\n    return date.getFullYear() <= 0 ? formats.ERAS[ 0 ] : formats.ERAS[ 1 ];\n}\n\nfunction longEraGetter( date, formats ) {\n    return date.getFullYear() <= 0 ? formats.ERANAMES[ 0 ] : formats.ERANAMES[ 1 ];\n}\n\nvar isNumberNaN = Number.isNaN || function isNumberNaN( num ) {\n    return num !== num;\n};\n\nvar ALL_COLONS = /:/g;\n\nfunction timezoneToOffset( timezone, fallback ) {\n    // Support: IE 9-11 only, Edge 13-15+\n    // IE/Edge do not \"understand\" colon (`:`) in timezone\n    timezone = timezone.replace( ALL_COLONS, '' );\n    var requestedTimezoneOffset = Date.parse( 'Jan 01, 1970 00:00:00 ' + timezone ) / 60000;\n    return isNumberNaN( requestedTimezoneOffset ) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes( date, minutes ) {\n    date = new Date( date.getTime() );\n    date.setMinutes( date.getMinutes() + minutes );\n    return date;\n}\n\nfunction convertTimezoneToLocal( date, timezone, reverse ) {\n    reverse = reverse ? -1 : 1;\n    var dateTimezoneOffset = date.getTimezoneOffset();\n    var timezoneOffset = timezoneToOffset( timezone, dateTimezoneOffset );\n    return addDateMinutes( date, reverse * ( timezoneOffset - dateTimezoneOffset ) );\n}\n\nfunction jsonStringToDate( string ) {\n    var match = string.match( R_ISO8601_STR );\n    if( match ) {\n        var date = new Date( 0 );\n        var tzHour = 0;\n        var tzMin = 0;\n        var dateSetter = match[ 8 ] ? date.setUTCFullYear : date.setFullYear;\n        var timeSetter = match[ 8 ] ? date.setUTCHours : date.setHours;\n\n        if( match[ 9 ] ) {\n            tzHour = toInt( match[ 9 ] + match[ 10 ] );\n            tzMin = toInt( match[ 9 ] + match[ 11 ] );\n        }\n        dateSetter.call( date, toInt( match[ 1 ] ), toInt( match[ 2 ] ) - 1, toInt( match[ 3 ] ) );\n        var h = toInt( match[ 4 ] || 0 ) - tzHour;\n        var m = toInt( match[ 5 ] || 0 ) - tzMin;\n        var s = toInt( match[ 6 ] || 0 );\n        var ms = Math.round( parseFloat( '0.' + ( match[ 7 ] || 0 ) ) * 1000 );\n        timeSetter.call( date, h, m, s, ms );\n        return date;\n    }\n    return string;\n}\n\nfunction getFilteredDate( date, format, timezone ) {\n    var text = '';\n    var parts = [];\n    var fn;\n    var match;\n\n    format = format || 'mediumDate';\n    format = DATETIME_FORMATS[ format ] || format;\n    if( isString( date ) ) {\n        date = NUMBER_STRING.test( date ) ? toInt( date ) : jsonStringToDate( date );\n    }\n\n    if( isNumber( date ) ) {\n        date = new Date( date );\n    }\n\n    if( !isDate( date ) || !isFinite( date.getTime() ) ) {\n        return date;\n    }\n\n    while( format ) {\n        match = DATE_FORMATS_SPLIT.exec( format );\n        if( match ) {\n            parts = concat( parts, match, 1 );\n            format = parts.pop();\n        } else {\n            parts.push( format );\n            format = null;\n        }\n    }\n\n    var dateTimezoneOffset = date.getTimezoneOffset();\n    if( timezone ) {\n        dateTimezoneOffset = timezoneToOffset( timezone, dateTimezoneOffset );\n        date = convertTimezoneToLocal( date, timezone, true );\n    }\n    _.forEach( parts, function( value ) {\n        fn = DATE_FORMATS[ value ];\n        text += fn ? fn( date, DATETIME_FORMATS, dateTimezoneOffset ) :\n            value === '\\'\\'' ? '\\'' : value.replace( /(^'|'$)/g, '' ).replace( /''/g, '\\'' );\n    } );\n\n    return text;\n}\n\nexport default {\n    getFilteredDate\n};\n"]},"metadata":{},"sourceType":"module"}
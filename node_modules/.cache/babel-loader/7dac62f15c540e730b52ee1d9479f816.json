{"ast":null,"code":"/* eslint-disable no-eval */\n// Copyright (c) 2020 Siemens\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected.\n *\n * @module js/notyErrorService\n */\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport cdm from 'soa/kernel/clientDataModel';\nimport { evalExpression } from 'js/serviceUtils';\nvar exports = {};\nexport let getLocalizedMessage = function (messageDefn, messageData, declViewModel) {\n  var errorMessages = [];\n  let localizedMessage;\n  errorMessages.push('<div class=\"aw-jswidgets-notyContainer\">');\n  const messageParamMessage = getMessageParamMessage(messageData.context, messageData.params, declViewModel.i18n[messageDefn.message.messageParam.name]);\n\n  if (messageParamMessage) {\n    errorMessages.push(messageParamMessage);\n  }\n\n  _.forEach(messageData.partialErrors, function (partialError) {\n    if (messageDefn.message.errorValues) {\n      _.forEach(partialError.errorValues, function (errorValue) {\n        if (messageDefn.message.errorValues.condition) {\n          if (evalExpression(messageDefn.message.errorValues.condition, [], [], true)) {\n            errorMessages = populateErrorMessage(partialError, errorValue.message, errorMessages);\n          }\n        } else {\n          errorMessages = populateErrorMessage(partialError, errorValue.message, errorMessages);\n        }\n\n        if (messageDefn.message.partialError) {\n          if (messageDefn.message.partialError.condition) {\n            if (evalExpression(messageDefn.message.errorValues.condition, [], [], true)) {\n              errorMessages = populateErrorMessage(partialError, declViewModel.i18n[messageDefn.message.partialError.name], errorMessages);\n            }\n          } else {\n            errorMessages = populateErrorMessage(partialError, declViewModel.i18n[messageDefn.message.partialError.name], errorMessages);\n          }\n        }\n      });\n    } else {\n      errorMessages = populateErrorMessage(partialError, declViewModel.i18n[messageDefn.message.partialError.name], errorMessages);\n    }\n  });\n\n  errorMessages.push('</div>');\n\n  if (!_.isEmpty(errorMessages)) {\n    localizedMessage = errorMessages.join('');\n  }\n\n  return localizedMessage;\n};\n\nconst populateErrorMessage = function (partialError, message, errorMessages) {\n  const partialErrorLocalizedMessage = getPartialErrorMessage(partialError, message);\n\n  if (partialErrorLocalizedMessage) {\n    errorMessages.push(partialErrorLocalizedMessage);\n  }\n\n  return errorMessages;\n};\n\nconst getMessageParamMessage = function (context, params, message) {\n  let localizedMessage = declUtils.applyMessageParams(message ? message : '', params, context);\n  return '<div>' + localizedMessage + '</div>';\n};\n\nconst getPartialErrorMessage = function (partialError, message) {\n  if (partialError && partialError.uid) {\n    var modelObject = cdm.getObject(partialError.uid);\n\n    if (modelObject.props) {\n      var objectName = modelObject.props.object_string.uiValues[0];\n      var errorMsgs = [];\n      var reason = '';\n\n      _.forEach(partialError.errorValues, function (errorValue) {\n        if (errorValue) {\n          errorMsgs.push(errorValue.message);\n        }\n      });\n\n      if (!_.isEmpty(errorMsgs)) {\n        reason = errorMsgs.join('');\n      }\n\n      let localizedMessage = declUtils.applyMessageParams(message, ['{{objectName}}', '{{reason}}'], {\n        objectName: objectName,\n        reason: reason\n      });\n      return '<div>' + localizedMessage + '</div>';\n    }\n  }\n\n  return undefined;\n};\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\n\nexports = {\n  getLocalizedMessage\n};\nexport default exports;","map":{"version":3,"names":["_","declUtils","cdm","evalExpression","exports","getLocalizedMessage","messageDefn","messageData","declViewModel","errorMessages","localizedMessage","push","messageParamMessage","getMessageParamMessage","context","params","i18n","message","messageParam","name","forEach","partialErrors","partialError","errorValues","errorValue","condition","populateErrorMessage","isEmpty","join","partialErrorLocalizedMessage","getPartialErrorMessage","applyMessageParams","uid","modelObject","getObject","props","objectName","object_string","uiValues","errorMsgs","reason","undefined"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/notyErrorService.js"],"sourcesContent":["/* eslint-disable no-eval */\n// Copyright (c) 2020 Siemens\n\n/**\n * Note: This module does not return an API object. The API is only available when the service defined this module is\n * injected.\n *\n * @module js/notyErrorService\n */\n\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport cdm from 'soa/kernel/clientDataModel';\nimport { evalExpression } from 'js/serviceUtils';\n\nvar exports = {};\n\nexport let getLocalizedMessage = function( messageDefn, messageData, declViewModel ) {\n    var errorMessages = [];\n    let localizedMessage;\n\n    errorMessages.push( '<div class=\"aw-jswidgets-notyContainer\">' );\n\n    const messageParamMessage = getMessageParamMessage( messageData.context, messageData.params, declViewModel.i18n[ messageDefn.message.messageParam.name ] );\n    if( messageParamMessage ) {\n        errorMessages.push( messageParamMessage );\n    }\n\n    _.forEach( messageData.partialErrors, function( partialError ) {\n        if( messageDefn.message.errorValues ) {\n            _.forEach( partialError.errorValues, function( errorValue ) {\n                if( messageDefn.message.errorValues.condition ) {\n                    if( evalExpression( messageDefn.message.errorValues.condition, [], [], true ) ) {\n                        errorMessages = populateErrorMessage( partialError, errorValue.message, errorMessages );\n                    }\n                } else {\n                    errorMessages = populateErrorMessage( partialError, errorValue.message, errorMessages );\n                }\n\n                if( messageDefn.message.partialError ) {\n                    if( messageDefn.message.partialError.condition ) {\n                        if( evalExpression( messageDefn.message.errorValues.condition, [], [], true ) ) {\n                            errorMessages = populateErrorMessage( partialError, declViewModel.i18n[ messageDefn.message.partialError.name ], errorMessages );\n                        }\n                    } else {\n                        errorMessages = populateErrorMessage( partialError, declViewModel.i18n[ messageDefn.message.partialError.name ], errorMessages );\n                    }\n                }\n            } );\n        } else {\n            errorMessages = populateErrorMessage( partialError, declViewModel.i18n[ messageDefn.message.partialError.name ], errorMessages );\n        }\n    } );\n\n    errorMessages.push( '</div>' );\n\n    if( !_.isEmpty( errorMessages ) ) {\n        localizedMessage = errorMessages.join( '' );\n    }\n\n    return localizedMessage;\n};\n\nconst populateErrorMessage = function( partialError, message, errorMessages ) {\n    const partialErrorLocalizedMessage = getPartialErrorMessage( partialError, message );\n    if( partialErrorLocalizedMessage ) {\n        errorMessages.push( partialErrorLocalizedMessage );\n    }\n    return errorMessages;\n};\n\nconst getMessageParamMessage = function( context, params, message ) {\n    let localizedMessage = declUtils.applyMessageParams( message ? message : '', params, context );\n    return '<div>' + localizedMessage + '</div>';\n};\n\nconst getPartialErrorMessage = function( partialError, message ) {\n    if( partialError && partialError.uid ) {\n        var modelObject = cdm.getObject( partialError.uid );\n        if( modelObject.props ) {\n            var objectName = modelObject.props.object_string.uiValues[ 0 ];\n            var errorMsgs = [];\n            var reason = '';\n            _.forEach( partialError.errorValues, function( errorValue ) {\n                if( errorValue ) {\n                    errorMsgs.push( errorValue.message );\n                }\n            } );\n\n            if( !_.isEmpty( errorMsgs ) ) {\n                reason = errorMsgs.join( '' );\n            }\n\n            let localizedMessage = declUtils.applyMessageParams( message, [\n                '{{objectName}}', '{{reason}}'\n            ], {\n                objectName: objectName,\n                reason: reason\n            } );\n\n            return '<div>' + localizedMessage + '</div>';\n        }\n    }\n    return undefined;\n};\n\n/**\n * Since this module can be loaded as a dependent DUI module we need to return an object indicating which service\n * should be injected to provide the API for this module.\n */\n\nexports = {\n    getLocalizedMessage\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
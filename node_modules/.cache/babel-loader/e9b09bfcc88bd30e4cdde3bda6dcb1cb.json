{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/awDuiLocalizationService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n/**\n * Cached reference to the angular $q or promise service\n *\n * @private\n */\n\n/**\n * cached reference to the _locale service\n *\n * @private\n */\n\n/**\n * cached reference to the processed i18n map\n *\n * @private\n */\n\nvar _cachedI18nMap = {};\nvar exports = {};\n/**\n * When notified that the i18n has changed clear out the cache.\n *\n * This will make any following calls to the i18n provider call the configuration service again\n */\n\neventBus.subscribe('configurationChange.i18n', function () {\n  _cachedI18nMap = {};\n});\n/**\n * A helper method to attach a then(...) to provided promise\n *\n * @param {Object} i18n - The object holding i18n key object map\n * @param {String} key - The key into key map\n * @param {Promise} promise - AngularJS promise object\n */\n\nvar then = function (i18n, key, promise) {\n  promise.then(function (localizedText) {\n    i18n[key] = localizedText;\n  });\n};\n/**\n * Get a localized text for provided text from provided bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String} bundle - Bundle to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\n\n\nvar getLocalizedTextFromOneBundle = function (englishText, bundle, useNative) {\n  return localeSvc.getLocalizedText(bundle, englishText, useNative);\n};\n/**\n * Populate I18n map.\n *\n * @param {Object} i18nObjects - I18n data from ViewModel json\n * @param {String} cacheI18nKey - (Optional) Key value which refers to processed i18n in cached i18n Map.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} an angular promise\n */\n\n\nexport let populateI18nMap = function (i18nObjects, cacheI18nKey, useNative) {\n  let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n\n  if (!i18nObjects) {\n    PromiseObj.resolve();\n  }\n\n  var i18n = {};\n  var allPromises = [];\n  return new PromiseObj((resolve, reject) => {\n    /**\n     * Only cache processed i18n, when there is a cacheI18nKey defined\n     */\n    if (cacheI18nKey && _.isString(cacheI18nKey)) {\n      if (!_cachedI18nMap[cacheI18nKey]) {\n        for (var key2 in i18nObjects) {\n          var promise2 = getLocalizedText(key2, i18nObjects[key2], useNative);\n          then(i18n, key2, promise2);\n          allPromises.push(promise2);\n        }\n\n        PromiseObj.all(allPromises).then(function () {\n          _cachedI18nMap[cacheI18nKey] = i18n;\n          resolve(i18n);\n        });\n      } else {\n        resolve(_cachedI18nMap[cacheI18nKey]);\n      }\n    } else {\n      for (var key in i18nObjects) {\n        var promise = getLocalizedText(key, i18nObjects[key], useNative);\n        then(i18n, key, promise);\n        allPromises.push(promise);\n      }\n\n      PromiseObj.all(allPromises).then(function () {\n        resolve(i18n);\n      });\n    }\n  });\n};\n/**\n * Get a localized text for provided text from provided bundles, recursively if not found in previous bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} promise with localizedText\n */\n\nvar getLocalizedTextFormBundlesRecursively = function (englishText, bundles, useNative) {\n  let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n\n  if (bundles.length === 0) {\n    return PromiseObj.resolve();\n  }\n\n  return getLocalizedTextFromOneBundle(englishText, bundles.shift(), useNative).then(function (localizedText) {\n    if (localizedText !== undefined) {\n      return localizedText;\n    }\n\n    return getLocalizedTextFormBundlesRecursively(englishText, bundles, useNative);\n  });\n};\n/**\n * Get a localized text for provided text from provided bundles\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\n\n\nvar getLocalizedText = function (englishText, bundles, useNative) {\n  let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n\n  if (_.isArray(bundles)) {\n    return getLocalizedTextFormBundlesRecursively(englishText, bundles.slice(0), useNative);\n  } // to support inline localization text\n\n\n  return PromiseObj.resolve(bundles);\n};\n\nexports = {\n  populateI18nMap\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","localeSvc","_","eventBus","_cachedI18nMap","exports","subscribe","then","i18n","key","promise","localizedText","getLocalizedTextFromOneBundle","englishText","bundle","useNative","getLocalizedText","populateI18nMap","i18nObjects","cacheI18nKey","PromiseObj","Promise","instance","resolve","allPromises","reject","isString","key2","promise2","push","all","getLocalizedTextFormBundlesRecursively","bundles","length","shift","undefined","isArray","slice"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/awDuiLocalizationService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/awDuiLocalizationService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\n/**\n * Cached reference to the angular $q or promise service\n *\n * @private\n */\n\n/**\n * cached reference to the _locale service\n *\n * @private\n */\n\n/**\n * cached reference to the processed i18n map\n *\n * @private\n */\nvar _cachedI18nMap = {};\n\nvar exports = {};\n\n/**\n * When notified that the i18n has changed clear out the cache.\n *\n * This will make any following calls to the i18n provider call the configuration service again\n */\neventBus.subscribe( 'configurationChange.i18n', function() {\n    _cachedI18nMap = {};\n} );\n\n/**\n * A helper method to attach a then(...) to provided promise\n *\n * @param {Object} i18n - The object holding i18n key object map\n * @param {String} key - The key into key map\n * @param {Promise} promise - AngularJS promise object\n */\nvar then = function( i18n, key, promise ) {\n    promise.then( function( localizedText ) {\n        i18n[ key ] = localizedText;\n    } );\n};\n\n/**\n * Get a localized text for provided text from provided bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String} bundle - Bundle to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\nvar getLocalizedTextFromOneBundle = function( englishText, bundle, useNative ) {\n    return localeSvc.getLocalizedText( bundle, englishText, useNative );\n};\n\n\n/**\n * Populate I18n map.\n *\n * @param {Object} i18nObjects - I18n data from ViewModel json\n * @param {String} cacheI18nKey - (Optional) Key value which refers to processed i18n in cached i18n Map.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} an angular promise\n */\nexport let populateI18nMap = function( i18nObjects, cacheI18nKey, useNative ) {\n    let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n    if( !i18nObjects ) {\n        PromiseObj.resolve();\n    }\n    var i18n = {};\n    var allPromises = [];\n\n    return new PromiseObj( ( resolve, reject ) => {\n        /**\n         * Only cache processed i18n, when there is a cacheI18nKey defined\n         */\n        if( cacheI18nKey && _.isString( cacheI18nKey ) ) {\n            if( !_cachedI18nMap[ cacheI18nKey ] ) {\n                for( var key2 in i18nObjects ) {\n                    var promise2 = getLocalizedText( key2, i18nObjects[ key2 ], useNative );\n                    then( i18n, key2, promise2 );\n                    allPromises.push( promise2 );\n                }\n\n                PromiseObj.all( allPromises ).then( function() {\n                    _cachedI18nMap[ cacheI18nKey ] = i18n;\n                    resolve( i18n );\n                } );\n            } else {\n                resolve( _cachedI18nMap[ cacheI18nKey ] );\n            }\n        } else {\n            for( var key in i18nObjects ) {\n                var promise = getLocalizedText( key, i18nObjects[ key ], useNative );\n                then( i18n, key, promise );\n\n                allPromises.push( promise );\n            }\n\n            PromiseObj.all( allPromises ).then( function() {\n                resolve( i18n );\n            } );\n        }\n    } );\n};\n\n/**\n * Get a localized text for provided text from provided bundles, recursively if not found in previous bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} promise with localizedText\n */\nvar getLocalizedTextFormBundlesRecursively = function( englishText, bundles, useNative ) {\n    let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n    if( bundles.length === 0 ) {\n        return PromiseObj.resolve();\n    }\n    return getLocalizedTextFromOneBundle( englishText, bundles.shift(), useNative ).then( function( localizedText ) {\n        if( localizedText !== undefined ) {\n            return localizedText;\n        }\n        return getLocalizedTextFormBundlesRecursively( englishText, bundles, useNative );\n    } );\n};\n\n/**\n * Get a localized text for provided text from provided bundles\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\nvar getLocalizedText = function( englishText, bundles, useNative ) {\n    let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n    if( _.isArray( bundles ) ) {\n        return getLocalizedTextFormBundlesRecursively( englishText, bundles.slice( 0 ), useNative );\n    }\n    // to support inline localization text\n    return PromiseObj.resolve( bundles );\n};\n\nexports = {\n    populateI18nMap\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
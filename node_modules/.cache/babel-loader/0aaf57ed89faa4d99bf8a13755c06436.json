{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/awDuiLocalizationService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n/**\n * Cached reference to the angular $q or promise service\n *\n * @private\n */\n\n/**\n * cached reference to the _locale service\n *\n * @private\n */\n\n/**\n * cached reference to the processed i18n map\n *\n * @private\n */\n\nvar _cachedI18nMap = {};\nvar exports = {};\n/**\n * When notified that the i18n has changed clear out the cache.\n *\n * This will make any following calls to the i18n provider call the configuration service again\n */\n\neventBus.subscribe('configurationChange.i18n', function () {\n  _cachedI18nMap = {};\n});\n/**\n * A helper method to attach a then(...) to provided promise\n *\n * @param {Object} i18n - The object holding i18n key object map\n * @param {String} key - The key into key map\n * @param {Promise} promise - AngularJS promise object\n */\n\nvar then = function (i18n, key, promise) {\n  promise.then(function (localizedText) {\n    i18n[key] = localizedText;\n  });\n};\n/**\n * Get a localized text for provided text from provided bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String} bundle - Bundle to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\n\n\nvar getLocalizedTextFromOneBundle = function (englishText, bundle, useNative) {\n  return localeSvc.getLocalizedText(bundle, englishText, useNative);\n};\n/**\n * Populate I18n map.\n *\n * @param {Object} i18nObjects - I18n data from ViewModel json\n * @param {String} cacheI18nKey - (Optional) Key value which refers to processed i18n in cached i18n Map.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} an angular promise\n */\n\n\nexport let populateI18nMap = function (i18nObjects, cacheI18nKey, useNative) {\n  let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n\n  if (!i18nObjects) {\n    PromiseObj.resolve();\n  }\n\n  var i18n = {};\n  var allPromises = [];\n  return new PromiseObj((resolve, reject) => {\n    /**\n     * Only cache processed i18n, when there is a cacheI18nKey defined\n     */\n    if (cacheI18nKey && _.isString(cacheI18nKey)) {\n      if (!_cachedI18nMap[cacheI18nKey]) {\n        for (var key2 in i18nObjects) {\n          var promise2 = getLocalizedText(key2, i18nObjects[key2], useNative);\n          then(i18n, key2, promise2);\n          allPromises.push(promise2);\n        }\n\n        PromiseObj.all(allPromises).then(function () {\n          _cachedI18nMap[cacheI18nKey] = i18n;\n          resolve(i18n);\n        });\n      } else {\n        resolve(_cachedI18nMap[cacheI18nKey]);\n      }\n    } else {\n      for (var key in i18nObjects) {\n        var promise = getLocalizedText(key, i18nObjects[key], useNative);\n        then(i18n, key, promise);\n        allPromises.push(promise);\n      }\n\n      PromiseObj.all(allPromises).then(function () {\n        resolve(i18n);\n      });\n    }\n  });\n};\n/**\n * Get a localized text for provided text from provided bundles, recursively if not found in previous bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} promise with localizedText\n */\n\nvar getLocalizedTextFormBundlesRecursively = function (englishText, bundles, useNative) {\n  let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n\n  if (bundles.length === 0) {\n    return PromiseObj.resolve();\n  }\n\n  return getLocalizedTextFromOneBundle(englishText, bundles.shift(), useNative).then(function (localizedText) {\n    if (localizedText !== undefined) {\n      return localizedText;\n    }\n\n    return getLocalizedTextFormBundlesRecursively(englishText, bundles, useNative);\n  });\n};\n/**\n * Get a localized text for provided text from provided bundles\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\n\n\nvar getLocalizedText = function (englishText, bundles, useNative) {\n  let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n\n  if (_.isArray(bundles)) {\n    return getLocalizedTextFormBundlesRecursively(englishText, bundles.slice(0), useNative);\n  } // to support inline localization text\n\n\n  return PromiseObj.resolve(bundles);\n};\n\nexports = {\n  populateI18nMap\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/awDuiLocalizationService.js"],"names":["_cachedI18nMap","exports","eventBus","then","promise","i18n","getLocalizedTextFromOneBundle","localeSvc","populateI18nMap","PromiseObj","useNative","AwPromiseService","allPromises","cacheI18nKey","_","promise2","getLocalizedText","i18nObjects","resolve","getLocalizedTextFormBundlesRecursively","bundles","localizedText"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/awDuiLocalizationService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\n\n/**\n * Cached reference to the angular $q or promise service\n *\n * @private\n */\n\n/**\n * cached reference to the _locale service\n *\n * @private\n */\n\n/**\n * cached reference to the processed i18n map\n *\n * @private\n */\nvar _cachedI18nMap = {};\n\nvar exports = {};\n\n/**\n * When notified that the i18n has changed clear out the cache.\n *\n * This will make any following calls to the i18n provider call the configuration service again\n */\neventBus.subscribe( 'configurationChange.i18n', function() {\n    _cachedI18nMap = {};\n} );\n\n/**\n * A helper method to attach a then(...) to provided promise\n *\n * @param {Object} i18n - The object holding i18n key object map\n * @param {String} key - The key into key map\n * @param {Promise} promise - AngularJS promise object\n */\nvar then = function( i18n, key, promise ) {\n    promise.then( function( localizedText ) {\n        i18n[ key ] = localizedText;\n    } );\n};\n\n/**\n * Get a localized text for provided text from provided bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String} bundle - Bundle to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\nvar getLocalizedTextFromOneBundle = function( englishText, bundle, useNative ) {\n    return localeSvc.getLocalizedText( bundle, englishText, useNative );\n};\n\n\n/**\n * Populate I18n map.\n *\n * @param {Object} i18nObjects - I18n data from ViewModel json\n * @param {String} cacheI18nKey - (Optional) Key value which refers to processed i18n in cached i18n Map.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} an angular promise\n */\nexport let populateI18nMap = function( i18nObjects, cacheI18nKey, useNative ) {\n    let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n    if( !i18nObjects ) {\n        PromiseObj.resolve();\n    }\n    var i18n = {};\n    var allPromises = [];\n\n    return new PromiseObj( ( resolve, reject ) => {\n        /**\n         * Only cache processed i18n, when there is a cacheI18nKey defined\n         */\n        if( cacheI18nKey && _.isString( cacheI18nKey ) ) {\n            if( !_cachedI18nMap[ cacheI18nKey ] ) {\n                for( var key2 in i18nObjects ) {\n                    var promise2 = getLocalizedText( key2, i18nObjects[ key2 ], useNative );\n                    then( i18n, key2, promise2 );\n                    allPromises.push( promise2 );\n                }\n\n                PromiseObj.all( allPromises ).then( function() {\n                    _cachedI18nMap[ cacheI18nKey ] = i18n;\n                    resolve( i18n );\n                } );\n            } else {\n                resolve( _cachedI18nMap[ cacheI18nKey ] );\n            }\n        } else {\n            for( var key in i18nObjects ) {\n                var promise = getLocalizedText( key, i18nObjects[ key ], useNative );\n                then( i18n, key, promise );\n\n                allPromises.push( promise );\n            }\n\n            PromiseObj.all( allPromises ).then( function() {\n                resolve( i18n );\n            } );\n        }\n    } );\n};\n\n/**\n * Get a localized text for provided text from provided bundles, recursively if not found in previous bundle.\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @returns {Promise} promise with localizedText\n */\nvar getLocalizedTextFormBundlesRecursively = function( englishText, bundles, useNative ) {\n    let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n    if( bundles.length === 0 ) {\n        return PromiseObj.resolve();\n    }\n    return getLocalizedTextFromOneBundle( englishText, bundles.shift(), useNative ).then( function( localizedText ) {\n        if( localizedText !== undefined ) {\n            return localizedText;\n        }\n        return getLocalizedTextFormBundlesRecursively( englishText, bundles, useNative );\n    } );\n};\n\n/**\n * Get a localized text for provided text from provided bundles\n *\n * @param {String} englishText - Key for lookup\n * @param {String|StringArray} bundles - Bundle(s) to look in.\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @returns {Promise} A promise resolved with the bundle object once loaded.\n */\nvar getLocalizedText = function( englishText, bundles, useNative ) {\n    let PromiseObj = useNative ? Promise : AwPromiseService.instance;\n    if( _.isArray( bundles ) ) {\n        return getLocalizedTextFormBundlesRecursively( englishText, bundles.slice( 0 ), useNative );\n    }\n    // to support inline localization text\n    return PromiseObj.resolve( bundles );\n};\n\nexports = {\n    populateI18nMap\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _ from'lodash';import eventBus from'js/eventBus';import conditionService from'js/conditionService';import AwTabContainer from'viewmodel/AwTabContainerViewModel';import AwCommandSubPanel from'viewmodel/AwCommandSubPanelViewModel';import analyticsSvc from'js/analyticsService';import{ShowWhen}from'js/hocCollection';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const AwShowWhenProvider=ShowWhen(AwCommandSubPanel);/**\n * Method to publish analytics to server\n * @param {Number} tabModelId - id of the clicked tab\n * @param {String} tabModelName - name of the clicked tab\n */const publishAnalytics=(tabModelId,tabModelName)=>{let sanEventData={sanAnalyticsType:'Tab',sanCommandId:tabModelId,sanCommandTitle:tabModelName};analyticsSvc.logCommands(sanEventData);};const evaluateTabConditions=(tab,conditions,evaluationEnvironment,expName)=>{if(typeof tab[expName]==='object'){const conditionName=tab[expName].condition.slice(11);return conditions[conditionName];}return conditionService.parseExpression({},tab[expName],evaluationEnvironment);};const createTabsModel=(tabs,conditions,evaluationEnvironment,manullySelectedTabId)=>{return tabs.map(tab=>{//Assuming name will be unique\ntab.pageId=tab.tabKey||tab.pageId||tab.panelId||tab.name;tab.displayTab=true;if(manullySelectedTabId){tab.selectedTab=manullySelectedTabId===tab.pageId||false;}else{tab.selectedTab=tab.selectedTab===true||false;tab.autoSelectTabOnLoad=tab.selectedTab===true||false;}if(tab.visibleWhen&&!evaluateTabConditions(tab,conditions,evaluationEnvironment,'visibleWhen')){tab.displayTab=false;}if(!manullySelectedTabId&&tab.selectWhen){if(evaluateTabConditions(tab,conditions,evaluationEnvironment,'selectWhen')){tab.selectedTab=true;}else{tab.selectedTab=false;}}return tab;});};export const updateTabSelection=declViewModel=>{const{data,dispatch,eventData}=declViewModel;const tabToSelect=_.find(data.tabsModel,tab=>{return tab.tabKey&&eventData&&tab.tabKey===eventData.tabKey||tab.pageId&&tab.pageId===eventData.pageId||tab.panelId&&tab.panelId===eventData.panelId;});if(tabToSelect&&data.manullySelectedTabId!==tabToSelect.pageId){data.tabsModel=data.tabsModel.map(tab=>{if(tab.pageId===tabToSelect.pageId){tab.selectedTab=true;}else{tab.selectedTab=false;}return tab;});dispatch({path:'data',value:{...data}});}};export const awTabSetRenderFunction=props=>{const{tabs,updateHook,action,closeAction,subPanelContext,viewModel,ctx}=props;const{data,dispatch}=viewModel;const{conditions}=updateHook;const evaluationEnvironment={ctx:ctx,data:updateHook.data};const loadSubPanels=props=>{const{ctx,ctxMin,viewModel,actions,i18n,fields,grids,formProp,messages,...prop}=props;let pData=updateHook.data;if(!action&&pData){let selectedTab=pData.selectedTab||{};return data.tabsModel.map(subPanel=>{let panelId=subPanel.panelId;if(panelId){let reCreatePanel=subPanel.recreatePanel||false;let condition=reCreatePanel?selectedTab.panelId===panelId:true;//const currentPanel = subPanelContext.pData.activeView !== panelId ? subPanelContext.pData.activeView : currentPanel;\nreturn condition&&/*#__PURE__*/_jsx(AwShowWhenProvider,{showWhen:selectedTab.panelId===panelId,panelId:panelId,...prop},panelId);}});}};const selectTab=(pageId,pageName)=>{let tabToSelect=data.tabsModel.find(tab=>tab.pageId===pageId);if(tabToSelect&&(!updateHook.data.selectedTab||updateHook.data.selectedTab&&!_.isEqual(updateHook.data.selectedTab.pageId,pageId))){tabToSelect.selectedTab=true;updateHook.data.selectedTab=tabToSelect;updateHook.data.pageId=tabToSelect.pageId;updateHook.data.tabTitle=tabToSelect.name;updateHook.data.manullySelectedTabId=tabToSelect.pageId;updateHook.dispatch({path:'data',value:{...updateHook.data}});if(action){//Component updating the parent, is an anti-pattern but needed for backward compatibility\n//Revisit: This event used to pass $scope as eventData, what is the replacement for the same\nprops.action();}publishAnalytics(tabToSelect.pageId,tabToSelect.name);eventBus.publish('awTab.selected',{//scope: $scope\n});}};const compareTabSelections=oriTabs=>{let isEqual=true;for(let oriTab of origTabs){if(oriTab.selectedTab===undefined){isEqual=false;break;}}return isEqual;};const onTabClose=async closedTab=>{if(closeAction){closeAction({closedTab:closedTab});}};let origTabs=_.cloneDeep(tabs);data.tabsModel=createTabsModel(tabs,conditions,evaluationEnvironment,data.manullySelectedTabId);if(!compareTabSelections(origTabs)){dispatch({path:'data',value:{...data}});}data.manullySelectedTabId=null;const visibleTabs=data.tabsModel.filter(tab=>tab.displayTab===true);const cmdSubPanelBased=data.tabsModel.filter(tab=>tab.hasOwnProperty('panelId')).length>0;return/*#__PURE__*/_jsxs(\"div\",{className:\"sw-column sw-tabSet\",children:[/*#__PURE__*/_jsx(AwTabContainer,{tabsModel:visibleTabs,callback:selectTab,tabSetId:props.tabSetId?props.tabSetId:null,onTabClose:onTabClose}),/*#__PURE__*/_jsx(\"div\",{className:\"sw-row\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"aw-jswidget-tabPage sw-column vw-100\",children:[props.children,cmdSubPanelBased&&loadSubPanels(props)]})})]});};","map":null,"metadata":{},"sourceType":"module"}
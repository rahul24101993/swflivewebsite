{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.resizeObserverService} which manages element callbacks and resize observe/unobserve.\n *\n * @module js/resizeObserver.service\n */\n\n/**\n * Resize observer service to manage element callbacks.\n */\nlet exports = {}; // members\n\nlet _observerInstance = null;\n\nlet _entryMap = new Map();\n/**\n * A helper service which allows performing custom actions when native DOM elements are resized.\n *\n *    const resizableElement = $element[ 0 ]; //The DOM element to observe\n *\n *    const observer = awResizeObserverService.observe( resizableElement, entry => {\n *      console.log( 'The element has been resized in DOM.' );\n *      console.log( entry.target ); // -> resizableElement\n *      console.log( entry.contentRect.width ); // -> e.g. '230px'\n *    } );\n *\n * By default, it uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood. It does not support any polyfills for the browsers that don't support resize observer.\n */\n\n/**\n * Returns if this browser supports resize observer API\n */\n\n\nexport let supportsResizeObserver = () => {\n  return typeof window.ResizeObserver === 'function';\n};\n/**\n * Creates the single native observer shared across all `ResizeObserver` instances.\n *\n */\n\nlet initializeResizeObserver = () => {\n  if (!_observerInstance && supportsResizeObserver()) {\n    _observerInstance = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        if (_entryMap.has(entry.target)) {\n          _entryMap.get(entry.target)(entry);\n        }\n      });\n    });\n  }\n};\n/**\n * Registers a new resize callback for the DOM element.\n *\n * @param {HTMLElement} element\n * @param {Function} callback\n */\n\n\nexport let observe = (element, callback) => {\n  _entryMap.set(element, callback);\n\n  initializeResizeObserver();\n\n  _observerInstance.observe(element);\n  /**\n   * Destroys the observer which disables the `callback` passed to the observe method.\n   */\n\n\n  return () => {\n    _observerInstance.unobserve(element);\n\n    _entryMap.delete(element);\n  };\n};\nexports = {\n  observe,\n  supportsResizeObserver\n};\nexport default exports;","map":{"version":3,"names":["exports","_observerInstance","_entryMap","Map","supportsResizeObserver","window","ResizeObserver","initializeResizeObserver","entries","forEach","entry","has","target","get","observe","element","callback","set","unobserve","delete"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/layout/src/js/resizeObserver.service.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Defines {@link NgServices.resizeObserverService} which manages element callbacks and resize observe/unobserve.\n *\n * @module js/resizeObserver.service\n */\n\n/**\n * Resize observer service to manage element callbacks.\n */\nlet exports = {};\n\n// members\nlet _observerInstance = null;\nlet _entryMap = new Map();\n\n/**\n * A helper service which allows performing custom actions when native DOM elements are resized.\n *\n *    const resizableElement = $element[ 0 ]; //The DOM element to observe\n *\n *    const observer = awResizeObserverService.observe( resizableElement, entry => {\n *      console.log( 'The element has been resized in DOM.' );\n *      console.log( entry.target ); // -> resizableElement\n *      console.log( entry.contentRect.width ); // -> e.g. '230px'\n *    } );\n *\n * By default, it uses the [native DOM resize observer](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver)\n * under the hood. It does not support any polyfills for the browsers that don't support resize observer.\n */\n\n/**\n * Returns if this browser supports resize observer API\n */\nexport let supportsResizeObserver = () => {\n    return typeof window.ResizeObserver === 'function';\n};\n\n/**\n * Creates the single native observer shared across all `ResizeObserver` instances.\n *\n */\nlet initializeResizeObserver = () => {\n    if( !_observerInstance && supportsResizeObserver() ) {\n        _observerInstance = new ResizeObserver( entries => {\n            entries.forEach( entry => {\n                if( _entryMap.has( entry.target ) ) {\n                    _entryMap.get( entry.target )( entry );\n                }\n            } );\n        } );\n    }\n};\n\n/**\n * Registers a new resize callback for the DOM element.\n *\n * @param {HTMLElement} element\n * @param {Function} callback\n */\nexport let observe = ( element, callback ) => {\n    _entryMap.set( element, callback );\n    initializeResizeObserver();\n    _observerInstance.observe( element );\n\n    /**\n     * Destroys the observer which disables the `callback` passed to the observe method.\n     */\n    return () => {\n        _observerInstance.unobserve( element );\n        _entryMap.delete( element );\n    };\n};\n\nexports = {\n    observe,\n    supportsResizeObserver\n};\n\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAIA,OAAO,GAAG,EAAd,C,CAEA;;AACA,IAAIC,iBAAiB,GAAG,IAAxB;;AACA,IAAIC,SAAS,GAAG,IAAIC,GAAJ,EAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,OAAO,IAAIC,sBAAsB,GAAG,MAAM;EACtC,OAAO,OAAOC,MAAM,CAACC,cAAd,KAAiC,UAAxC;AACH,CAFM;AAIP;AACA;AACA;AACA;;AACA,IAAIC,wBAAwB,GAAG,MAAM;EACjC,IAAI,CAACN,iBAAD,IAAsBG,sBAAsB,EAAhD,EAAqD;IACjDH,iBAAiB,GAAG,IAAIK,cAAJ,CAAoBE,OAAO,IAAI;MAC/CA,OAAO,CAACC,OAAR,CAAiBC,KAAK,IAAI;QACtB,IAAIR,SAAS,CAACS,GAAV,CAAeD,KAAK,CAACE,MAArB,CAAJ,EAAoC;UAChCV,SAAS,CAACW,GAAV,CAAeH,KAAK,CAACE,MAArB,EAA+BF,KAA/B;QACH;MACJ,CAJD;IAKH,CANmB,CAApB;EAOH;AACJ,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAII,OAAO,GAAG,CAAEC,OAAF,EAAWC,QAAX,KAAyB;EAC1Cd,SAAS,CAACe,GAAV,CAAeF,OAAf,EAAwBC,QAAxB;;EACAT,wBAAwB;;EACxBN,iBAAiB,CAACa,OAAlB,CAA2BC,OAA3B;EAEA;AACJ;AACA;;;EACI,OAAO,MAAM;IACTd,iBAAiB,CAACiB,SAAlB,CAA6BH,OAA7B;;IACAb,SAAS,CAACiB,MAAV,CAAkBJ,OAAlB;EACH,CAHD;AAIH,CAZM;AAcPf,OAAO,GAAG;EACNc,OADM;EAENV;AAFM,CAAV;AAKA,eAAeJ,OAAf"},"metadata":{},"sourceType":"module"}
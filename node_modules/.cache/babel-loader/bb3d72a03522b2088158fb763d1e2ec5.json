{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceValidationService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport workspaceInitService from 'js/workspaceInitService';\nimport cfgSvc from 'js/configurationService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport awConfiguration from 'js/awConfiguration'; // Service\n\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} Page ID\n */\n\nexport let isValidPageAsync = function (pageId) {\n  var workspaceDefinition = appCtxSvc.getCtx('workspace');\n  var isWorkspaceChange = workspaceInitService.getisWorkspaceChange();\n\n  if (workspaceDefinition && !isWorkspaceChange) {\n    let awPromiseVariable = AwPromiseService.instance;\n    return awPromiseVariable.resolve(exports.isValidPage(pageId));\n  }\n\n  return exports.setWorkspaceId().then(function () {\n    return exports.isValidPage(pageId);\n  });\n};\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} pageId - Page ID\n * @return {Boolean} is valid page?\n */\n\nexport let isValidPage = function (pageId) {\n  var validPage = true;\n  var workspaceDefinition = appCtxSvc.getCtx('workspace');\n\n  if (workspaceDefinition && workspaceDefinition.availablePages) {\n    // Check the validity of the page only if it is exclusive workspace. For inclusive\n    // workspace, all pages are valid pages\n    if (exports.isExclusiveWorkspace(workspaceDefinition)) {\n      validPage = _.includes(workspaceDefinition.availablePages, pageId);\n    }\n  }\n\n  return validPage;\n};\n/**\n * Check whether the passed workspace is an exclusive workspace\n *\n * @param {Object} workspaceDefinition - Workspace definition\n * @return {Boolean} true for exclusive workspace, false otherwise\n */\n\nexport let isExclusiveWorkspace = function (workspaceDefinition) {\n  return workspaceDefinition ? workspaceDefinition.workspaceType === 'Exclusive' : false;\n};\n/**\n * Set the workspace ID\n *\n * @return {Promise} promise\n */\n\nexport let setWorkspaceId = function () {\n  var totalWorkspaceCount = workspaceInitService.getTotalWorkspaceCount();\n  var solution;\n  var workspaceId;\n  return cfgSvc.getCfg('solutionDef').then(function (solutionDef) {\n    solution = solutionDef;\n    workspaceId = workspaceInitService.getWorkspaceId(); // If server has no workspace entry, set the default workspace and increment the workspace count\n    // by 1 so that visibility of the WS link can be controlled correctly.\n\n    if (!workspaceId && solution.defaultWorkspace) {\n      workspaceId = solution.defaultWorkspace;\n      totalWorkspaceCount++;\n    }\n\n    return cfgSvc.getCfg('workspace');\n  }).then(function (workspaceCfg) {\n    var allWorkspaceDefn = _.cloneDeep(workspaceCfg);\n\n    var workspaceDefn = allWorkspaceDefn[workspaceId]; // If the workspace ID returned by server is not a valid one, revert the workspace increment. (This is a\n    // very corner usecase and should never happen but adding a preventive check.)\n\n    if (!workspaceDefn) {\n      workspaceDefn = allWorkspaceDefn[solution.defaultWorkspace];\n      totalWorkspaceCount--;\n    }\n\n    appCtxSvc.registerCtx('totalWorkspaceCount', totalWorkspaceCount);\n    appCtxSvc.registerCtx('workspace', workspaceDefn);\n    exports.getLocalizedText(workspaceDefn.workspaceName).then(function (result) {\n      workspaceDefn.workspaceName = result;\n      appCtxSvc.updateCtx('workspace', workspaceDefn);\n    });\n    var defaultRoutePath = awConfiguration.get('defaultRoutePath');\n\n    if (defaultRoutePath !== workspaceDefn.defaultPage) {\n      // set the value\n      awConfiguration.set('defaultRoutePath', workspaceDefn.defaultPage);\n      appCtxSvc.registerCtx('defaultRoutePath', workspaceDefn.defaultPage);\n    }\n\n    return workspaceDefn;\n  });\n};\n/**\n * Get localized text.\n *\n * @param {Object} label - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {String} localized text\n */\n\nexport let getLocalizedText = function (label) {\n  if (_.isString(label)) {\n    // If the label is a string just return it\n    return AwPromiseService.instance.resolve(label);\n  } // Otherwise get the label from the localized file\n\n\n  return localeSvc.getLocalizedText(label.source, label.key);\n};\nconst exports = {\n  isValidPageAsync,\n  isValidPage,\n  isExclusiveWorkspace,\n  setWorkspaceId,\n  getLocalizedText\n};\nexport default exports;","map":{"version":3,"names":["appCtxSvc","workspaceInitService","cfgSvc","localeSvc","_","awConfiguration","AwPromiseService","isValidPageAsync","pageId","workspaceDefinition","getCtx","isWorkspaceChange","getisWorkspaceChange","awPromiseVariable","instance","resolve","exports","isValidPage","setWorkspaceId","then","validPage","availablePages","isExclusiveWorkspace","includes","workspaceType","totalWorkspaceCount","getTotalWorkspaceCount","solution","workspaceId","getCfg","solutionDef","getWorkspaceId","defaultWorkspace","workspaceCfg","allWorkspaceDefn","cloneDeep","workspaceDefn","registerCtx","getLocalizedText","workspaceName","result","updateCtx","defaultRoutePath","get","defaultPage","set","label","isString","source","key"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/workspaceValidationService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This file contains the utility methods for workspace management.\n *\n * @module js/workspaceValidationService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport workspaceInitService from 'js/workspaceInitService';\nimport cfgSvc from 'js/configurationService';\nimport localeSvc from 'js/localeService';\nimport _ from 'lodash';\nimport awConfiguration from 'js/awConfiguration';\n\n// Service\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} Page ID\n */\nexport let isValidPageAsync = function( pageId ) {\n    var workspaceDefinition = appCtxSvc.getCtx( 'workspace' );\n    var isWorkspaceChange = workspaceInitService.getisWorkspaceChange();\n\n    if( workspaceDefinition && !isWorkspaceChange ) {\n        let awPromiseVariable = AwPromiseService.instance;\n        return awPromiseVariable.resolve( exports.isValidPage( pageId ) );\n    }\n\n    return exports.setWorkspaceId().then( function() {\n        return exports.isValidPage( pageId );\n    } );\n};\n\n/**\n * Check whether the passed page ID is a valid page\n *\n * @param {String} pageId - Page ID\n * @return {Boolean} is valid page?\n */\nexport let isValidPage = function( pageId ) {\n    var validPage = true;\n    var workspaceDefinition = appCtxSvc.getCtx( 'workspace' );\n    if( workspaceDefinition && workspaceDefinition.availablePages ) {\n        // Check the validity of the page only if it is exclusive workspace. For inclusive\n        // workspace, all pages are valid pages\n        if( exports.isExclusiveWorkspace( workspaceDefinition ) ) {\n            validPage = _.includes( workspaceDefinition.availablePages, pageId );\n        }\n    }\n    return validPage;\n};\n\n/**\n * Check whether the passed workspace is an exclusive workspace\n *\n * @param {Object} workspaceDefinition - Workspace definition\n * @return {Boolean} true for exclusive workspace, false otherwise\n */\nexport let isExclusiveWorkspace = function( workspaceDefinition ) {\n    return workspaceDefinition ? workspaceDefinition.workspaceType === 'Exclusive' : false;\n};\n\n/**\n * Set the workspace ID\n *\n * @return {Promise} promise\n */\nexport let setWorkspaceId = function() {\n    var totalWorkspaceCount = workspaceInitService.getTotalWorkspaceCount();\n    var solution;\n    var workspaceId;\n    return cfgSvc.getCfg( 'solutionDef' ).then( function( solutionDef ) {\n        solution = solutionDef;\n        workspaceId = workspaceInitService.getWorkspaceId();\n        // If server has no workspace entry, set the default workspace and increment the workspace count\n        // by 1 so that visibility of the WS link can be controlled correctly.\n        if( !workspaceId && solution.defaultWorkspace ) {\n            workspaceId = solution.defaultWorkspace;\n            totalWorkspaceCount++;\n        }\n        return cfgSvc.getCfg( 'workspace' );\n    } ).then( function( workspaceCfg ) {\n        var allWorkspaceDefn = _.cloneDeep( workspaceCfg );\n\n        var workspaceDefn = allWorkspaceDefn[ workspaceId ];\n        // If the workspace ID returned by server is not a valid one, revert the workspace increment. (This is a\n        // very corner usecase and should never happen but adding a preventive check.)\n        if( !workspaceDefn ) {\n            workspaceDefn = allWorkspaceDefn[ solution.defaultWorkspace ];\n            totalWorkspaceCount--;\n        }\n        appCtxSvc.registerCtx( 'totalWorkspaceCount', totalWorkspaceCount );\n        appCtxSvc.registerCtx( 'workspace', workspaceDefn );\n        exports.getLocalizedText( workspaceDefn.workspaceName ).then( function( result ) {\n            workspaceDefn.workspaceName = result;\n            appCtxSvc.updateCtx( 'workspace', workspaceDefn );\n        } );\n        var defaultRoutePath = awConfiguration.get( 'defaultRoutePath' );\n        if( defaultRoutePath !== workspaceDefn.defaultPage ) {\n            // set the value\n            awConfiguration.set( 'defaultRoutePath', workspaceDefn.defaultPage );\n            appCtxSvc.registerCtx( 'defaultRoutePath', workspaceDefn.defaultPage );\n        }\n        return workspaceDefn;\n    } );\n};\n\n/**\n * Get localized text.\n *\n * @param {Object} label - If label is string, return as is. If it contains source and key, retrieve value from the\n *            locale file\n * @return {String} localized text\n */\nexport let getLocalizedText = function( label ) {\n    if( _.isString( label ) ) {\n        // If the label is a string just return it\n        return AwPromiseService.instance.resolve( label );\n    }\n\n    // Otherwise get the label from the localized file\n    return localeSvc.getLocalizedText( label.source, label.key );\n};\n\nconst exports = {\n    isValidPageAsync,\n    isValidPage,\n    isExclusiveWorkspace,\n    setWorkspaceId,\n    getLocalizedText\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
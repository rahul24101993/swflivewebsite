{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Service to set color decorators on a vmo.\n *\n * @module js/colorDecoratorService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport commandsMapSvc from 'js/commandsMapService';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\nimport _ from 'lodash';\nimport moduleLoader from 'js/moduleLoader';\nimport parsingUtil from 'js/parsingUtils';\nimport eventBus from 'js/eventBus';\nimport conditionSvc from 'js/conditionService';\n/**\n * {Object} Map of decorator name versus the decorator definition as configured in the application.\n */\n\nvar _decoratorProviders;\n/**\n * {StringMap} Map of cached dependent module names to the async loaded module objects.\n */\n\n\nvar _mapModuleNameToModuleObject = {};\n/**\n * {StringMap} Map of cached dependent module names to its proper (camelCase) associated service name.\n */\n\nvar _mapModuleNameToServiceName = {};\n/**\n * {StringMap} Map of cached decorator name i18n key to its localized values\n */\n\nvar _mapDecoratorI18nKeyToLocalizedTitle = {};\n/**\n * @param {JSONObject} decoratorJson -\n * @return {ModuleObject}\n */\n\nfunction _getModuleObject(decoratorJson) {\n  var serviceName = _mapModuleNameToServiceName[decoratorJson.deps];\n\n  if (!serviceName) {\n    serviceName = _.camelCase([decoratorJson.deps.replace('js/', '')]);\n    _mapModuleNameToServiceName[decoratorJson.deps] = serviceName;\n  }\n\n  return _mapModuleNameToModuleObject[decoratorJson.deps];\n}\n/**\n * Processes the decorators\n *\n * @param {Object} decoratatorProviders\n * @param {ViewModelObject} vmo -\n * @param {Object|null} depsMap - optional deps map\n */\n\n\nfunction _processDecorators(decoratatorProviders, vmo) {\n  var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n  _.forEach(decoratatorProviders, function (decoratorJson, decoratorName) {\n    if (!decoratorJson.subLocationName || sublocationName === decoratorJson.subLocationName) {\n      var modelTypes = decoratorJson.modelTypes;\n      var isValid = false;\n\n      if (_.isArray(modelTypes)) {\n        _.forEach(modelTypes, function (modelType) {\n          if (modelType) {\n            isValid = commandsMapSvc.isInstanceOf(modelType, vmo.modelType);\n\n            if (isValid) {\n              return false; // break\n            }\n          }\n        });\n      } else {\n        // No supplied modelType to limit to.\n        isValid = true;\n      }\n\n      if (isValid) {\n        if (decoratorJson.conditions) {\n          var declViewModel = {\n            localContext: {\n              vmo: vmo\n            }\n          };\n          var context = {\n            ctx: appCtxSvc.ctx\n          };\n          var verdict = true;\n\n          for (var condition in decoratorJson.conditions) {\n            var expression = decoratorJson.conditions[condition].expression;\n            verdict = verdict && conditionSvc.evaluateCondition(declViewModel, expression, context);\n          }\n\n          if (verdict) {\n            if (decoratorJson.title && decoratorJson.i18n) {\n              vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title)];\n            }\n\n            if (decoratorJson.cellClassName) {\n              vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n            }\n\n            if (decoratorJson.gridClassName) {\n              vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n            }\n          }\n        } else if (decoratorJson.method && decoratorJson.deps) {\n          var _depModuleObj = _getModuleObject(decoratorJson);\n\n          if (_depModuleObj[decoratorJson.method].apply(_depModuleObj, [vmo])) {\n            vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n            vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n\n            if (decoratorJson.title && decoratorJson.i18n) {\n              vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title)];\n            }\n          }\n        }\n      }\n    }\n  });\n}\n\nvar exports = {};\n/**\n * Sets cell list decorators.\n *\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - ViewModelObject(s) to set style on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\n\nexport let setDecoratorStyles = function (vmoIn, skipEvent) {\n  var unloadedDepModules = {};\n  var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n  _.forEach(_decoratorProviders, function (decoratorJson) {\n    if ((!sublocationName || sublocationName === decoratorJson.subLocationName) && !_.isEmpty(decoratorJson.deps) && !_mapModuleNameToModuleObject[decoratorJson.deps]) {\n      unloadedDepModules[decoratorJson.deps] = true;\n    }\n  }); // See if loading modules is necessary\n\n\n  if (!_.isEmpty(unloadedDepModules)) {\n    var depsArray = Object.keys(unloadedDepModules);\n    moduleLoader.loadDependentModules(depsArray).then(function (depsMap) {\n      _.forEach(depsMap, function (moduleObj, moduleName) {\n        _mapModuleNameToModuleObject['js/' + moduleName] = moduleObj;\n      });\n\n      if (_.isArray(vmoIn)) {\n        for (var ndx = 0; ndx < vmoIn.length; ndx++) {\n          _processDecorators(_decoratorProviders, vmoIn[ndx]);\n        }\n      } else {\n        _processDecorators(_decoratorProviders, vmoIn);\n      }\n\n      if (!skipEvent) {\n        eventBus.publish('decoratorsUpdated', vmoIn);\n      }\n    });\n  } else {\n    if (_.isArray(vmoIn)) {\n      for (var ndx = 0; ndx < vmoIn.length; ndx++) {\n        _processDecorators(_decoratorProviders, vmoIn[ndx]);\n      }\n    } else {\n      _processDecorators(_decoratorProviders, vmoIn);\n    }\n\n    if (!skipEvent) {\n      eventBus.publish('decoratorsUpdated', vmoIn);\n    }\n  }\n};\n/**\n * API to override generated decorators (used for testing only).\n *\n * @param {Object} decoratorsOverride\n */\n\nexport let setDecorators = function (decoratorsOverride) {\n  _decoratorProviders = decoratorsOverride;\n  _mapModuleNameToModuleObject = {};\n  _mapModuleNameToServiceName = {};\n};\nexport let loadConfiguration = async function () {\n  await cfgSvc.getCfg('decorators', false, true).then(function (decorators) {\n    _decoratorProviders = decorators; // Loop through decorators and load localized titles if any\n\n    var decoratorNames = [];\n    var promises = [];\n\n    _.forEach(_decoratorProviders, function (decoratorJson, decoratorName) {\n      if (decoratorJson.title && _.startsWith(decoratorJson.title, '{{') && decoratorJson.i18n) {\n        promises.push(awDuiLocalizationSvc.populateI18nMap(decoratorJson.i18n, false, true));\n        decoratorNames.push(decoratorName);\n      }\n    }); // update the decorator i18n title map once all localized values are available\n\n\n    Promise.all(promises).then(function (results) {\n      _.forEach(results, function (result) {\n        _.forEach(decoratorNames, function (decoratorName) {\n          var decoratorJson = _decoratorProviders[decoratorName];\n\n          if (decoratorJson.title && _.startsWith(decoratorJson.title, '{{') && decoratorJson.i18n) {\n            // decoratorJson title value will be {{i18n.xxyyzz}}\n            var i18Key = parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title);\n            var titleKey = i18Key.split('.');\n            titleKey = titleKey && titleKey.length > 1 ? titleKey[1] : titleKey[0];\n\n            if (result[titleKey]) {\n              _mapDecoratorI18nKeyToLocalizedTitle[decoratorName + '.' + i18Key] = result[titleKey];\n            }\n          }\n        });\n      });\n    });\n  });\n};\nexports = {\n  setDecoratorStyles,\n  setDecorators,\n  loadConfiguration\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"names":["appCtxSvc","cfgSvc","commandsMapSvc","awDuiLocalizationSvc","_","moduleLoader","parsingUtil","eventBus","conditionSvc","_decoratorProviders","_mapModuleNameToModuleObject","_mapModuleNameToServiceName","_mapDecoratorI18nKeyToLocalizedTitle","_getModuleObject","decoratorJson","serviceName","deps","camelCase","replace","_processDecorators","decoratatorProviders","vmo","sublocationName","ctx","sublocation","nameToken","forEach","decoratorName","subLocationName","modelTypes","isValid","isArray","modelType","isInstanceOf","conditions","declViewModel","localContext","context","verdict","condition","expression","evaluateCondition","title","i18n","colorTitle","getStringBetweenDoubleMustaches","cellClassName","cellDecoratorStyle","gridClassName","gridDecoratorStyle","method","_depModuleObj","apply","exports","setDecoratorStyles","vmoIn","skipEvent","unloadedDepModules","isEmpty","depsArray","Object","keys","loadDependentModules","then","depsMap","moduleObj","moduleName","ndx","length","publish","setDecorators","decoratorsOverride","loadConfiguration","getCfg","decorators","decoratorNames","promises","startsWith","push","populateI18nMap","Promise","all","results","result","i18Key","titleKey","split"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/colorDecoratorService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Service to set color decorators on a vmo.\n *\n * @module js/colorDecoratorService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport commandsMapSvc from 'js/commandsMapService';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\nimport _ from 'lodash';\nimport moduleLoader from 'js/moduleLoader';\nimport parsingUtil from 'js/parsingUtils';\nimport eventBus from 'js/eventBus';\nimport conditionSvc from 'js/conditionService';\n\n/**\n * {Object} Map of decorator name versus the decorator definition as configured in the application.\n */\nvar _decoratorProviders;\n\n/**\n * {StringMap} Map of cached dependent module names to the async loaded module objects.\n */\nvar _mapModuleNameToModuleObject = {};\n\n/**\n * {StringMap} Map of cached dependent module names to its proper (camelCase) associated service name.\n */\nvar _mapModuleNameToServiceName = {};\n/**\n * {StringMap} Map of cached decorator name i18n key to its localized values\n */\nvar _mapDecoratorI18nKeyToLocalizedTitle = {};\n\n/**\n * @param {JSONObject} decoratorJson -\n * @return {ModuleObject}\n */\nfunction _getModuleObject( decoratorJson ) {\n    var serviceName = _mapModuleNameToServiceName[ decoratorJson.deps ];\n\n    if( !serviceName ) {\n        serviceName = _.camelCase( [ decoratorJson.deps.replace( 'js/', '' ) ] );\n\n        _mapModuleNameToServiceName[ decoratorJson.deps ] = serviceName;\n    }\n\n    return _mapModuleNameToModuleObject[ decoratorJson.deps ];\n}\n\n/**\n * Processes the decorators\n *\n * @param {Object} decoratatorProviders\n * @param {ViewModelObject} vmo -\n * @param {Object|null} depsMap - optional deps map\n */\nfunction _processDecorators( decoratatorProviders, vmo ) {\n    var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n    _.forEach( decoratatorProviders, function( decoratorJson, decoratorName ) {\n        if( !decoratorJson.subLocationName || sublocationName === decoratorJson.subLocationName ) {\n            var modelTypes = decoratorJson.modelTypes;\n            var isValid = false;\n\n            if( _.isArray( modelTypes ) ) {\n                _.forEach( modelTypes, function( modelType ) {\n                    if( modelType ) {\n                        isValid = commandsMapSvc.isInstanceOf( modelType, vmo.modelType );\n                        if( isValid ) {\n                            return false; // break\n                        }\n                    }\n                } );\n            } else {\n                // No supplied modelType to limit to.\n                isValid = true;\n            }\n\n            if( isValid ) {\n                if( decoratorJson.conditions ) {\n                    var declViewModel = {\n                        localContext: {\n                            vmo: vmo\n                        }\n                    };\n\n                    var context = {\n                        ctx: appCtxSvc.ctx\n                    };\n                    var verdict = true;\n                    for( var condition in decoratorJson.conditions ) {\n                        var expression = decoratorJson.conditions[ condition ].expression;\n                        verdict = verdict && conditionSvc.evaluateCondition( declViewModel, expression, context );\n                    }\n\n                    if( verdict ) {\n                        if( decoratorJson.title && decoratorJson.i18n ) {\n                            vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[ decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches( decoratorJson.title ) ];\n                        }\n                        if( decoratorJson.cellClassName ) {\n                            vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n                        }\n                        if( decoratorJson.gridClassName ) {\n                            vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n                        }\n                    }\n                } else if( decoratorJson.method && decoratorJson.deps ) {\n                    var _depModuleObj = _getModuleObject( decoratorJson );\n                    if( _depModuleObj[ decoratorJson.method ].apply( _depModuleObj, [ vmo ] ) ) {\n                        vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n                        vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n                        if( decoratorJson.title && decoratorJson.i18n ) {\n                            vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[ decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches( decoratorJson.title ) ];\n                        }\n                    }\n                }\n            }\n        }\n    } );\n}\n\nvar exports = {};\n\n/**\n * Sets cell list decorators.\n *\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - ViewModelObject(s) to set style on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\nexport let setDecoratorStyles = function( vmoIn, skipEvent ) {\n    var unloadedDepModules = {};\n\n    var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n    _.forEach( _decoratorProviders, function( decoratorJson ) {\n        if( ( !sublocationName || sublocationName === decoratorJson.subLocationName ) &&\n            !_.isEmpty( decoratorJson.deps ) && !_mapModuleNameToModuleObject[ decoratorJson.deps ] ) {\n            unloadedDepModules[ decoratorJson.deps ] = true;\n        }\n    } );\n\n    // See if loading modules is necessary\n    if( !_.isEmpty( unloadedDepModules ) ) {\n        var depsArray = Object.keys( unloadedDepModules );\n\n        moduleLoader.loadDependentModules( depsArray ).then( function( depsMap ) {\n            _.forEach( depsMap, function( moduleObj, moduleName ) {\n                _mapModuleNameToModuleObject[ 'js/' + moduleName ] = moduleObj;\n            } );\n\n            if( _.isArray( vmoIn ) ) {\n                for( var ndx = 0; ndx < vmoIn.length; ndx++ ) {\n                    _processDecorators( _decoratorProviders, vmoIn[ ndx ] );\n                }\n            } else {\n                _processDecorators( _decoratorProviders, vmoIn );\n            }\n\n            if( !skipEvent ) {\n                eventBus.publish( 'decoratorsUpdated', vmoIn );\n            }\n        } );\n    } else {\n        if( _.isArray( vmoIn ) ) {\n            for( var ndx = 0; ndx < vmoIn.length; ndx++ ) {\n                _processDecorators( _decoratorProviders, vmoIn[ ndx ] );\n            }\n        } else {\n            _processDecorators( _decoratorProviders, vmoIn );\n        }\n\n        if( !skipEvent ) {\n            eventBus.publish( 'decoratorsUpdated', vmoIn );\n        }\n    }\n};\n\n/**\n * API to override generated decorators (used for testing only).\n *\n * @param {Object} decoratorsOverride\n */\nexport let setDecorators = function( decoratorsOverride ) {\n    _decoratorProviders = decoratorsOverride;\n    _mapModuleNameToModuleObject = {};\n    _mapModuleNameToServiceName = {};\n};\n\nexport let loadConfiguration = async function() {\n    await cfgSvc.getCfg( 'decorators', false, true ).then( function( decorators ) {\n        _decoratorProviders = decorators;\n        // Loop through decorators and load localized titles if any\n        var decoratorNames = [];\n        var promises = [];\n        _.forEach( _decoratorProviders, function( decoratorJson, decoratorName ) {\n            if( decoratorJson.title && _.startsWith( decoratorJson.title, '{{' ) && decoratorJson.i18n ) {\n                promises.push( awDuiLocalizationSvc.populateI18nMap( decoratorJson.i18n, false, true ) );\n                decoratorNames.push( decoratorName );\n            }\n        } );\n\n        // update the decorator i18n title map once all localized values are available\n        Promise.all( promises ).then( function( results ) {\n            _.forEach( results, function( result ) {\n                _.forEach( decoratorNames, function( decoratorName ) {\n                    var decoratorJson = _decoratorProviders[ decoratorName ];\n                    if( decoratorJson.title && _.startsWith( decoratorJson.title, '{{' ) && decoratorJson.i18n ) {\n                        // decoratorJson title value will be {{i18n.xxyyzz}}\n                        var i18Key = parsingUtil.getStringBetweenDoubleMustaches( decoratorJson.title );\n                        var titleKey = i18Key.split( '.' );\n                        titleKey = titleKey && titleKey.length > 1 ? titleKey[ 1 ] : titleKey[ 0 ];\n                        if( result[ titleKey ] ) {\n                            _mapDecoratorI18nKeyToLocalizedTitle[ decoratorName + '.' + i18Key ] = result[ titleKey ];\n                        }\n                    }\n                } );\n            } );\n        } );\n    } );\n};\n\nexports = {\n    setDecoratorStyles,\n    setDecorators,\n    loadConfiguration\n};\nexport default exports;\n\nloadConfiguration();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
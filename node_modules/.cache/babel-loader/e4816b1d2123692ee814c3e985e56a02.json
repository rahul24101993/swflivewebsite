{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to find the alternate object for a given model object\n *\n * @module js/adapterService\n * @namespace adapterService\n */\nimport adapterParser from 'js/adapterParserService';\nimport assert from 'js/assert';\nimport cfgSvc from 'js/configurationService';\nlet exports;\n\nlet _adapterConfigObject;\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Boolean} isFullyAdapted - if object should be recursively adapted\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */\n\n\nexport let getAdaptedObjects = function (sourceObjects, isFullyAdapted) {\n  assert(_adapterConfigObject, 'The Adapter Config service is not loaded');\n  return adapterParser.getAdaptedObjects(sourceObjects, _adapterConfigObject, isFullyAdapted);\n};\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * This is a blocking call and assumes that the underlying property on current object is already loaded and available\n * in cdm for the adapter service to fetch the adapted object. This function does not perform soa call neither does it\n * support capability to invoke functions from dependent modules\n *\n * @param {Array} sourceObjects - source objects\n * @return {Array} Adapted objects\n */\n\nexport let getAdaptedObjectsSync = function (sourceObjects) {\n  assert(_adapterConfigObject, 'The Adapter Config service is not loaded');\n  return adapterParser.getAdaptedObjectsSync(sourceObjects, _adapterConfigObject);\n};\n/**\n * This method apply and evaluate the conditions on the source object and returns boolean value accordingly.\n *\n * @param {Object} sourceObject - source object\n * @return {Object} verdict object\n */\n\nexport let applyConditions = function (sourceObject) {\n  adapterParser.setConfiguration(_adapterConfigObject);\n  return adapterParser.applyConditions(sourceObject);\n};\nexport let loadConfiguration = async function () {\n  await cfgSvc.getCfg('adapters').then(adapters => {\n    _adapterConfigObject = adapters;\n  });\n};\nexports = {\n  getAdaptedObjects,\n  getAdaptedObjectsSync,\n  applyConditions,\n  loadConfiguration\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/adapterService.js"],"names":["getAdaptedObjects","assert","adapterParser","getAdaptedObjectsSync","applyConditions","loadConfiguration","adapters","_adapterConfigObject","exports"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,aAAA,MAAA,yBAAA;AACA,OAAA,MAAA,MAAA,WAAA;AACA,OAAA,MAAA,MAAA,yBAAA;AAEA,IAAA,OAAA;;AAEA,IAAA,oBAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIA,iBAAiB,GAAG,UAAA,aAAA,EAAA,cAAA,EAA0C;EACrEC,MAAM,CAAA,oBAAA,EAANA,0CAAM,CAANA;EACA,OAAOC,aAAa,CAAbA,iBAAAA,CAAAA,aAAAA,EAAAA,oBAAAA,EAAP,cAAOA,CAAP;AAFG,CAAA;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,qBAAqB,GAAG,UAAA,aAAA,EAA0B;EACzDF,MAAM,CAAA,oBAAA,EAANA,0CAAM,CAANA;EACA,OAAOC,aAAa,CAAbA,qBAAAA,CAAAA,aAAAA,EAAP,oBAAOA,CAAP;AAFG,CAAA;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,eAAe,GAAG,UAAA,YAAA,EAAyB;EAClDF,aAAa,CAAbA,gBAAAA,CAAAA,oBAAAA;EACA,OAAOA,aAAa,CAAbA,eAAAA,CAAP,YAAOA,CAAP;AAFG,CAAA;AAKP,OAAO,IAAIG,iBAAiB,GAAG,kBAAiB;EAC5C,MAAM,MAAM,CAAN,MAAA,CAAA,UAAA,EAAA,IAAA,CAAkCC,QAAQ,IAAI;IAChDC,oBAAoB,GAApBA,QAAAA;EADJ,CAAM,CAAN;AADG,CAAA;AAMPC,OAAO,GAAG;EAAA,iBAAA;EAAA,qBAAA;EAAA,eAAA;EAINH;AAJM,CAAVG;AAMA,eAAA,OAAA;AAEAH,iBAAiB","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to find the alternate object for a given model object\n *\n * @module js/adapterService\n * @namespace adapterService\n */\nimport adapterParser from 'js/adapterParserService';\nimport assert from 'js/assert';\nimport cfgSvc from 'js/configurationService';\n\nlet exports;\n\nlet _adapterConfigObject;\n\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n */\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * @param {Array} sourceObjects - source objects\n * @param {Boolean} isFullyAdapted - if object should be recursively adapted\n * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.\n */\nexport let getAdaptedObjects = function( sourceObjects, isFullyAdapted ) {\n    assert( _adapterConfigObject, 'The Adapter Config service is not loaded' );\n    return adapterParser.getAdaptedObjects( sourceObjects, _adapterConfigObject, isFullyAdapted );\n};\n\n/**\n * This method returns the adapted objects based on a given object. This takes an array of source objects on which\n * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object\n * corresponding to the sourceobject and returns it.\n *\n * This is a blocking call and assumes that the underlying property on current object is already loaded and available\n * in cdm for the adapter service to fetch the adapted object. This function does not perform soa call neither does it\n * support capability to invoke functions from dependent modules\n *\n * @param {Array} sourceObjects - source objects\n * @return {Array} Adapted objects\n */\nexport let getAdaptedObjectsSync = function( sourceObjects ) {\n    assert( _adapterConfigObject, 'The Adapter Config service is not loaded' );\n    return adapterParser.getAdaptedObjectsSync( sourceObjects, _adapterConfigObject );\n};\n\n/**\n * This method apply and evaluate the conditions on the source object and returns boolean value accordingly.\n *\n * @param {Object} sourceObject - source object\n * @return {Object} verdict object\n */\nexport let applyConditions = function( sourceObject ) {\n    adapterParser.setConfiguration( _adapterConfigObject );\n    return adapterParser.applyConditions( sourceObject );\n};\n\nexport let loadConfiguration = async function() {\n    await cfgSvc.getCfg( 'adapters' ).then( adapters => {\n        _adapterConfigObject = adapters;\n    } );\n};\n\nexports = {\n    getAdaptedObjects,\n    getAdaptedObjectsSync,\n    applyConditions,\n    loadConfiguration\n};\nexport default exports;\n\nloadConfiguration();\n"]},"metadata":{},"sourceType":"module"}
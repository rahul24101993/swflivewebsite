{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Montior\n *\n * @module js/splmStatsPerformance\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport { STATE } from 'js/splmStatsProfiler';\n/**\n * Instances of this class represent a Monitor\n *\n * @class SPLMStatsPerformance\n */\n\nfunction SPLMStatsPerformance(profilerFactory) {\n  let self = this;\n  let _listeners = [];\n  let _benchmark = null;\n\n  self.addListener = function (listener) {\n    _listeners.push(listener);\n  };\n\n  self.setBenchmark = function (benchmark) {\n    _benchmark = benchmark;\n  };\n\n  self.addReporter = function (reporter) {\n    if (_benchmark) {\n      _benchmark.addReporter(reporter);\n    }\n  };\n\n  self.setTitle = function (title) {\n    _benchmark.setTitle(title);\n  };\n  /**\n   * Starts the monitoring -> Starts each profiler, then waits for the page to be completely settled (Ng, DOM, Network)\n   * Then promise resolves, and we report the data for each reporter attached\n   */\n\n\n  self.run = function () {\n    if (!self._profiler || self._profiler.state === STATE.DONE) {\n      _benchmark.start();\n\n      self._profiler = profilerFactory.createProfiler();\n\n      self._profiler.profile().then(elapsed => {\n        _benchmark.stop();\n\n        _benchmark.report(elapsed);\n      });\n    } else {\n      self._profiler.resetWait();\n    }\n  };\n\n  self.enable = function () {\n    _.forEach(_listeners, function (listener) {\n      listener.start(self);\n    });\n  };\n\n  self.disable = function () {\n    _.forEach(_listeners, function (listener) {\n      listener.stop(self);\n    });\n  };\n\n  return self;\n}\n\n_c = SPLMStatsPerformance;\nexport default SPLMStatsPerformance;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsPerformance\");","map":{"version":3,"names":["_","STATE","SPLMStatsPerformance","profilerFactory","self","_listeners","_benchmark","addListener","listener","push","setBenchmark","benchmark","addReporter","reporter","setTitle","title","run","_profiler","state","DONE","start","createProfiler","profile","then","elapsed","stop","report","resetWait","enable","forEach","disable"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsPerformance.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Montior\n *\n * @module js/splmStatsPerformance\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport { STATE } from 'js/splmStatsProfiler';\n\n/**\n * Instances of this class represent a Monitor\n *\n * @class SPLMStatsPerformance\n */\nfunction SPLMStatsPerformance( profilerFactory ) {\n    let self = this;\n\n    let _listeners = [];\n\n    let _benchmark = null;\n\n    self.addListener = function( listener ) {\n        _listeners.push( listener );\n    };\n\n    self.setBenchmark = function( benchmark ) {\n        _benchmark = benchmark;\n    };\n\n    self.addReporter = function( reporter ) {\n        if( _benchmark ) {\n            _benchmark.addReporter( reporter );\n        }\n    };\n\n    self.setTitle = function( title ) {\n        _benchmark.setTitle( title );\n    };\n\n    /**\n     * Starts the monitoring -> Starts each profiler, then waits for the page to be completely settled (Ng, DOM, Network)\n     * Then promise resolves, and we report the data for each reporter attached\n     */\n    self.run = function() {\n        if( !self._profiler || self._profiler.state === STATE.DONE ) {\n            _benchmark.start();\n            self._profiler = profilerFactory.createProfiler();\n            self._profiler.profile().then( ( elapsed ) => {\n                _benchmark.stop();\n                _benchmark.report( elapsed );\n            } );\n        } else {\n            self._profiler.resetWait();\n        }\n    };\n\n    self.enable = function() {\n        _.forEach( _listeners, function( listener ) {\n            listener.start( self );\n        } );\n    };\n\n    self.disable = function() {\n        _.forEach( _listeners, function( listener ) {\n            listener.stop( self );\n        } );\n    };\n    return self;\n}\n\nexport default SPLMStatsPerformance;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,KAAT,QAAsB,sBAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,CAA+BC,eAA/B,EAAiD;EAC7C,IAAIC,IAAI,GAAG,IAAX;EAEA,IAAIC,UAAU,GAAG,EAAjB;EAEA,IAAIC,UAAU,GAAG,IAAjB;;EAEAF,IAAI,CAACG,WAAL,GAAmB,UAAUC,QAAV,EAAqB;IACpCH,UAAU,CAACI,IAAX,CAAiBD,QAAjB;EACH,CAFD;;EAIAJ,IAAI,CAACM,YAAL,GAAoB,UAAUC,SAAV,EAAsB;IACtCL,UAAU,GAAGK,SAAb;EACH,CAFD;;EAIAP,IAAI,CAACQ,WAAL,GAAmB,UAAUC,QAAV,EAAqB;IACpC,IAAIP,UAAJ,EAAiB;MACbA,UAAU,CAACM,WAAX,CAAwBC,QAAxB;IACH;EACJ,CAJD;;EAMAT,IAAI,CAACU,QAAL,GAAgB,UAAUC,KAAV,EAAkB;IAC9BT,UAAU,CAACQ,QAAX,CAAqBC,KAArB;EACH,CAFD;EAIA;AACJ;AACA;AACA;;;EACIX,IAAI,CAACY,GAAL,GAAW,YAAW;IAClB,IAAI,CAACZ,IAAI,CAACa,SAAN,IAAmBb,IAAI,CAACa,SAAL,CAAeC,KAAf,KAAyBjB,KAAK,CAACkB,IAAtD,EAA6D;MACzDb,UAAU,CAACc,KAAX;;MACAhB,IAAI,CAACa,SAAL,GAAiBd,eAAe,CAACkB,cAAhB,EAAjB;;MACAjB,IAAI,CAACa,SAAL,CAAeK,OAAf,GAAyBC,IAAzB,CAAiCC,OAAF,IAAe;QAC1ClB,UAAU,CAACmB,IAAX;;QACAnB,UAAU,CAACoB,MAAX,CAAmBF,OAAnB;MACH,CAHD;IAIH,CAPD,MAOO;MACHpB,IAAI,CAACa,SAAL,CAAeU,SAAf;IACH;EACJ,CAXD;;EAaAvB,IAAI,CAACwB,MAAL,GAAc,YAAW;IACrB5B,CAAC,CAAC6B,OAAF,CAAWxB,UAAX,EAAuB,UAAUG,QAAV,EAAqB;MACxCA,QAAQ,CAACY,KAAT,CAAgBhB,IAAhB;IACH,CAFD;EAGH,CAJD;;EAMAA,IAAI,CAAC0B,OAAL,GAAe,YAAW;IACtB9B,CAAC,CAAC6B,OAAF,CAAWxB,UAAX,EAAuB,UAAUG,QAAV,EAAqB;MACxCA,QAAQ,CAACiB,IAAT,CAAerB,IAAf;IACH,CAFD;EAGH,CAJD;;EAKA,OAAOA,IAAP;AACH;;KAtDQF,oB;AAwDT,eAAeA,oBAAf"},"metadata":{},"sourceType":"module"}
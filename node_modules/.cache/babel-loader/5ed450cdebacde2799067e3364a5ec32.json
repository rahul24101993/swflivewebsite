{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This is the typeCacheService.\n *\n * The purpose of this service is to store commonly used types in localStorage.\n *\n * @module soa/kernel/typeCacheService\n */import _ from'lodash';import localStrg from'js/localStorage';import lzstring from'lz-string';import localeSvc from'js/localeService';/**\n * Object used to place all the exported API of this module upon.\n */var exports={};/**\n * localStorage type cache.\n *\n * @private\n */var _localPropTypes='propertyTypes';/**\n * Key used to determine the validity of a previously stored cache.\n * Used to store an object with typeCacheLMD and locale properties\n * If the typeCacheLMD or Locale change we must flush the cache.\n *\n * @private\n */var _localPropTypesKey='propertyTypesKey';/**\n * Timer variable.\n *\n * @private\n */var _storageTimer;/**\n * Types to cache.\n *\n * @private\n */var _typesToCache=[];/**\n * SaveToLocalStorage delay time in milliseconds .\n *\n * @private\n */var _saveToLSTime=60000;/**\n * Types cache timestamp\n *\n * @private\n */var _typeCacheLMD;/**\n * Checks to see if an object with the same name already exists.\n *\n * @param {StringArray} typeArray - Modeltypes to check.\n * @param {String} name - Name of the type to check.\n *\n * @returns {Boolean} TRUE if an object with the same name already exists.\n */function containsTypeDesc(typeArray,name){var found=false;for(var i=0;i<typeArray.length;i++){if(typeArray[i].name===name){found=true;break;}}return found;}/**\n * Saves any valid types added to _typesToCache to localStorage.\n */function saveToLocalStorage(){_storageTimer=null;var locale=localeSvc.getLocale();var localTypes=[];if(localStrg.get(_localPropTypes)){var decompressedStr=lzstring.decompressFromUTF16(localStrg.get(_localPropTypes));localTypes=JSON.parse(decompressedStr);}for(var i=0,len=_typesToCache.length;i<len;i++){if(!containsTypeDesc(localTypes,_typesToCache[i].name)){localTypes.push(_typesToCache[i]);}}var typesKey={locale:locale,typeCacheLMD:_typeCacheLMD};var compressedStr=lzstring.compressToUTF16(JSON.stringify(localTypes));localStrg.publish(_localPropTypes,compressedStr);localStrg.publish(_localPropTypesKey,JSON.stringify(typesKey));// Clear out array of types to cache.\n_typesToCache=[];}/**\n * Returns any typeDescriptions stored in localStorage\n *\n * @param {Number} typeCacheLMD - Last modified date of the cached local storage data.\n *\n * @return {ObjectArray} Type Descriptors.\n */export let getLocalTypes=function(typeCacheLMD){var localTypes=[];var locale=localeSvc.getLocale();if(localStrg.get(_localPropTypesKey)){var currentKey=JSON.parse(localStrg.get(_localPropTypesKey));// If the typeCacheLMD or the locale have changed we need to flush cached properties.\nif(currentKey&&(currentKey.locale!==locale||currentKey.typeCacheLMD!==typeCacheLMD)){localStrg.removeItem(_localPropTypes);localStrg.removeItem(_localPropTypesKey);return localTypes;}}if(localStrg.get(_localPropTypes)){var decompressedStr=lzstring.decompressFromUTF16(localStrg.get(_localPropTypes));localTypes=JSON.parse(decompressedStr);}return localTypes;};/**\n * Adds type descriptors to _typesToCache if they are included\n * in the awStartupPreferences.\n * If delayed storage is set to true as soon as the first type descriptor is added\n * a 60 second timer will begin before calling saveToLocalStorage.\n * Add subsequent calls during this 60 seconds will add types to\n * the _typesToCache.\n * After the timer has finished and the saveToLocalStorage is made\n * everything is reset.\n * If delayedStorage is not set, the saveToLocalStorage will be immediate.\n *\n * @param {Array} modelTypes - An array of type descriptors to potentially cache.\n *\n * @param {StringArray} awStartupPreferences - A string array of type descriptors to cache.\n *\n * @param {String} typeCacheLMD - A string with typeCacheLMD timestamp.\n *\n * @param {boolean} delayedStorage - A boolean to set delayed storage on or off.\n */export let setLocalTypes=function(modelTypes,awStartupPreferences,typeCacheLMD,delayedStorage){_typeCacheLMD=typeCacheLMD;modelTypes.forEach(function(element){if(_.includes(awStartupPreferences,element.name)){if(!containsTypeDesc(_typesToCache,element.name)){_typesToCache.push(element);}}});if(delayedStorage){if(_typesToCache&&_typesToCache.length>0&&!_storageTimer){// We are using setTimeout instead of $timeout\n// as we do not care about the digest cycle.\n_storageTimer=setTimeout(saveToLocalStorage,_saveToLSTime);}}else{saveToLocalStorage();}};exports={getLocalTypes,setLocalTypes};export default exports;","map":null,"metadata":{},"sourceType":"module"}
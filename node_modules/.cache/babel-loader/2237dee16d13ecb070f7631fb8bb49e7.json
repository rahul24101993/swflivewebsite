{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service is for utility functions that we want available, but don't make sense as part of the other property\n * render JS files\n *\n * @module js/uwUtilService\n */import browserUtils from'js/browserUtils';/**\n * The ammount the input box is allowed to move to the left/right before the UI popup (e.g. calendar, LOV ) is\n * collapsed/hidden.\n */var _MAX_X=45;/**\n * The about the input box is allowed to move to the up/down before the UI popup (e.g. calendar, LOV ) is\n * collapsed/hidden.\n */var _MAX_Y=40;var exports={};/**\n * Determines if element has scrollBar by comparing the scrollHeight with clientHeight\n *\n * @param {JqueryElement} element - The JQuery element to test\n * @returns {Boolean} 'true' if scrollBar is present\n */ /**revisitme yogesh\n * Hint: jquery element usage\n * internal method, gets called by handleScroll\n\nexport let hasScrollBar = function( element ) {\n    if( element && element.get( 0 ) ) {\n        // removing 10 pixels from scrollHeight and comparing because in IE even when there is\n        // no scroll bar it shows couple of pixels difference between scrollHeight and clientHeight.\n        return element.get( 0 ).scrollHeight - 10 > element.get( 0 ).clientHeight;\n    }\n    return false;\n};\n\n/**revisitme yogesh\n * Hint: scope and element usages\n * gets called from angular directive/controller\n\nexport let handleScroll = function( scope, $element, scrollNamespace, cb ) {\n    // Check for mobile OS\n    if( !browserUtils.isMobileOS ) {\n        // Get the closest scroll panel\n        scope.$scrollPanel = $element.closest( '.ui-grid-viewport, .aw-base-scrollPanel' );\n\n        // When scroll element is found and it doesn't have scrollBar, then traverse through the DOM until\n        // '.aw-layout-panelMain' and see if there are any scroll elements who has scrollBar\n        if( scope.$scrollPanel && !exports.hasScrollBar( scope.$scrollPanel ) ) {\n            var scrollElement = scope.$scrollPanel.parentsUntil( $( '.aw-layout-panelMain' ),\n                '.aw-base-scrollPanel' ).filter( function() {\n                return exports.hasScrollBar( $( this ) ); // eslint-disable-line no-invalid-this\n            } );\n\n            if( scrollElement.hasClass( 'aw-base-scrollPanel' ) ) {\n                scope.$scrollPanel = scrollElement;\n            }\n        }\n\n        // Add scroll listener only when scroll bar is present for the element\n        if( scope.$scrollPanel && exports.hasScrollBar( scope.$scrollPanel ) ) {\n            var oldX = scope.$scrollPanel.scrollTop();\n            var oldY = scope.$scrollPanel.scrollLeft();\n\n            var eventName = 'scroll.' + scrollNamespace;\n\n            scope.$scrollPanel.on( eventName, function() {\n                if( scope.$scrollPanel ) {\n                    var curX = scope.$scrollPanel.scrollTop();\n                    var curY = scope.$scrollPanel.scrollLeft();\n\n                    if( Math.abs( oldX - curX ) > _MAX_X || Math.abs( oldY - curY ) > _MAX_Y ) {\n                        oldX = curX;\n                        oldY = curY;\n                        cb();\n                    }\n                }\n            } );\n        }\n    }\n};\n*/ /**\n * Evaluate the correct identifier of an object\n * preference in the decreasing order alternateID , id , uid\n *\n * @param {OBJECT} objectToEvaluate - the object for which the identifier is to be evaluated - can be a ViewModelObject, ViewModelTreeNode or a plain JS Object\n * @return {String } unique identifier on this object if an object is passed or else return the input passed\n */export let getEvaluatedId=function(objectToEvaluate){if(objectToEvaluate&&typeof objectToEvaluate==='object'){if(objectToEvaluate.alternateID!==null&&objectToEvaluate.alternateID!==undefined){return objectToEvaluate.alternateID;}if(objectToEvaluate.id!==null&&objectToEvaluate.id!==undefined){return objectToEvaluate.id;}if(objectToEvaluate.uid!==null&&objectToEvaluate.uid!==undefined){return objectToEvaluate.uid;}}return objectToEvaluate;};/**\n * Check whether the given value is a valid number\n *\n * @return TRUE if input value is valid number\n */export let isValidNumber=function(value){if(value!==null&&value!==undefined&&isFinite(value)){return true;}return false;};/**\n * Check whether the given element exists\n *\n * @return TRUE if element exists\n */ /**revisitme yogesh\n * Hint: jquery element\nexport let ifElementExists = function( element ) {\n    if( element && element.length ) {\n        return true;\n    }\n    return false;\n};\n*/ /**\n * Check to see if the event is a result of a click in the element referenced in the query string\n *\n * There is no single way to determine what the target is, rather it varies based on the browser\n *\n * @param {Event} blurEvent - The blur event\n * @param {String} queryString - jQuery string to identify the element we're checking as the potential target\n *\n * @return TRUE if the query string finds an element that matches in the click target, FALSE otherwise\n */ /**revisitme yogesh\n * Hint: scope and element usages\n * gets called from angular directive/controller\n\nexport let isBlurTarget = function( blurEvent, queryString ) {\n    var isTarget = $( blurEvent.relatedTarget ).closest( queryString ).length > 0; // Chrome Check\n\n    if( !isTarget && blurEvent.originalEvent && blurEvent.originalEvent.explicitOriginalTarget ) {\n        isTarget = $( blurEvent.originalEvent.explicitOriginalTarget ).closest( queryString ).length > 0; // Firefox Check\n    }\n\n    if( !isTarget ) {\n        isTarget = $( document.activeElement ).closest( queryString ).length > 0; // IE11\n    }\n    return isTarget;\n};\n*/exports={isValidNumber,getEvaluatedId/**revisitme yogesh\n     * Hint: usages in directive or controller with scope and jquery\n    isBlurTarget,\n    hasScrollBar,\n    handleScroll,\n    ifElementExists\n    */};export default exports;","map":null,"metadata":{},"sourceType":"module"}
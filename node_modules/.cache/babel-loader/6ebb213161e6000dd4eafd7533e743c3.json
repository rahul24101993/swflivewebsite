{"ast":null,"code":"/* eslint-disable no-console */ // Copyright (c) 2020 Siemens\n/* eslint-env es6 */import _ from'lodash';import eventBus from'js/eventBus';import appCtxService from'js/appCtxService';/**\n * awStateService\n *\n * @module js/awStateService\n */let routerStateSvc;let stateServiceObject={instance:{//test purpose only, will be overriden by router\ngo:()=>{},params:{},transitionHooks:{onEnter:()=>{},onSuccess:()=>{},onBefore:()=>{}}}};const subscribeHooks=(transitionService,locationService)=>{if(locationService.path()&&!/^(\\/|undefined)/.test(locationService.path())&&window&&window.location){// The following block is to support remapping of \"invalid\" URLs\n// #state -> #/state\n// #state;uid=123 => #/state?uid=123\nconst pathElems=locationService.path().split(';');let newPath=pathElems[0];for(let ii=1;ii<pathElems.length;ii++){if(ii===1){newPath+=\"?\".concat(pathElems[ii]);}else{newPath+=\"&\".concat(pathElems[ii]);}}// Update URL & reload page\nwindow.location.hash=\"#/\".concat(newPath);window.location.reload(false);// force page refresh\n}eventBus.publish('transitionHooks',{transitionService});locationService.onChange(event=>{eventBus.publish('locationChangeSuccess',{event:event,newUrl:event.newURL,oldUrl:event.oldURL});// Update the state params on appCtx\nupdateStateParamsOnAppCtx(stateServiceObject.instance.params);// support legacy usages of location change complete event\neventBus.publish('LOCATION_CHANGE_COMPLETE');});transitionService.onSuccess({},transition=>{// Update the state params on appCtx\nupdateStateParamsOnAppCtx(transition.params());eventBus.publish('stateChangeSuccess',{transitionParams:transition.params()});});};export const initializeStateService=router=>{routerStateSvc=router.stateService;stateServiceObject.instance={go:routerStateSvc.go,get:routerStateSvc.get,href:routerStateSvc.href,get current(){return routerStateSvc.current;},get params(){return _.reduce(routerStateSvc.params,(sum,curr,key)=>({...sum,[key]:curr&&typeof curr==='string'?decodeURIComponent(encodeURIComponent(curr)):curr}),{});},transitionTo:routerStateSvc.transitionTo,transitionHooks:{/**\n             * Replacement of $stateChangeStart\n             */onEnter:router.transitionService.onEnter,/**\n             * Replacement of $stateChangeSuccess\n             */onSuccess:router.transitionService.onSuccess,/**\n             * Replacement of $stateChangeError\n             */onError:router.transitionService.onError,onBefore:router.transitionService.onBefore},/**\n         * Replacement of $stateNotFound\n         */onInvalid:routerStateSvc.onInvalid,reload:routerStateSvc.reload};subscribeHooks(router.transitionService,router.locationService);// Suppress console errors, we are deliberately aborting the state transition at few places\nrouterStateSvc.defaultErrorHandler(function(error){// do nothing- suppress errors\n});};const updateStateParamsOnAppCtx=stateParams=>{var processParameters=function processParameters(stateParams){return Object.keys(stateParams)// Filter parameters that are not set\n.filter(function(param){return stateParams[param];})// Build the new object\n.reduce(function(acc,nxt){acc[nxt]=stateParams[nxt];return acc;},{});};appCtxService.registerCtx('state',{params:stateParams,processed:processParameters(stateParams)});};export default stateServiceObject;","map":null,"metadata":{},"sourceType":"module"}
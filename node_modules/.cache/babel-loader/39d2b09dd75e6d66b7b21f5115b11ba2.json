{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Commands map service\n *\n * @module js/commandsMapService\n */\nimport logger from 'js/logger';\nlet exports = {};\n/**\n * Returns command handler overlay object for a given command id from factory.\n *\n * @param {Object} commandJsonObj - command JSON object which is give in declarative view model\n * @param {String} commandId - command id\n *\n * @return {Object} command handler overlay object for given command id.\n */\n\nexport let getCommandOverlay = function () {\n  logger.error('commandsMapService#getCommandOverlay is not supported, Use commandService.getCommand instead');\n  return {};\n};\n/**\n * Returns True if this type is child of the give type.\n *\n * TODO: This should be a utility somewhere in CDM - has nothing to do with commands\n *\n * @param {String} typeName - name of class\n * @param {Object} modelType - view model object's model type.\n *\n * @return {Boolean} true if this type is child of the give type.\n */\n\nexport let isInstanceOf = function (typeName, modelType) {\n  return modelType && (typeName === modelType.name || modelType.typeHierarchyArray && modelType.typeHierarchyArray.indexOf(typeName) > -1);\n};\nexports = {\n  getCommandOverlay,\n  isInstanceOf\n};\nexport default exports;","map":{"version":3,"names":["logger","exports","getCommandOverlay","error","isInstanceOf","typeName","modelType","name","typeHierarchyArray","indexOf"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/commandsMapService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Commands map service\n *\n * @module js/commandsMapService\n */\nimport logger from 'js/logger';\n\nlet exports = {};\n\n/**\n * Returns command handler overlay object for a given command id from factory.\n *\n * @param {Object} commandJsonObj - command JSON object which is give in declarative view model\n * @param {String} commandId - command id\n *\n * @return {Object} command handler overlay object for given command id.\n */\nexport let getCommandOverlay = function() {\n    logger.error( 'commandsMapService#getCommandOverlay is not supported, Use commandService.getCommand instead' );\n    return {};\n};\n\n/**\n * Returns True if this type is child of the give type.\n *\n * TODO: This should be a utility somewhere in CDM - has nothing to do with commands\n *\n * @param {String} typeName - name of class\n * @param {Object} modelType - view model object's model type.\n *\n * @return {Boolean} true if this type is child of the give type.\n */\nexport let isInstanceOf = function( typeName, modelType ) {\n    return modelType &&\n        ( typeName === modelType.name || modelType.typeHierarchyArray &&\n            modelType.typeHierarchyArray.indexOf( typeName ) > -1 );\n};\n\nexports = {\n    getCommandOverlay,\n    isInstanceOf\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAG,YAAW;EACtCF,MAAM,CAACG,KAAP,CAAc,8FAAd;EACA,OAAO,EAAP;AACH,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,YAAY,GAAG,UAAUC,QAAV,EAAoBC,SAApB,EAAgC;EACtD,OAAOA,SAAS,KACVD,QAAQ,KAAKC,SAAS,CAACC,IAAvB,IAA+BD,SAAS,CAACE,kBAAV,IAC7BF,SAAS,CAACE,kBAAV,CAA6BC,OAA7B,CAAsCJ,QAAtC,IAAmD,CAAC,CAF5C,CAAhB;AAGH,CAJM;AAMPJ,OAAO,GAAG;EACNC,iBADM;EAENE;AAFM,CAAV;AAIA,eAAeH,OAAf"},"metadata":{},"sourceType":"module"}
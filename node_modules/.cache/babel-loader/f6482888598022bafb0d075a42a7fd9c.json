{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Module for various FMS related utilities\n *\n * @module js/fmsUtils\n *\n * @namespace fmsUtils\n */import _ from'lodash';import browserUtils from'js/browserUtils';import awConfiguration from'js/awConfiguration';/**\n * The FMS proxy servlet context. This must be the same as the FmsProxyServlet mapping in the web.xml\n */var WEB_XML_FMS_PROXY_CONTEXT='fms';/**\n * Relative path to the FMS proxy download service.\n */var CLIENT_FMS_DOWNLOAD_PATH=WEB_XML_FMS_PROXY_CONTEXT+'/fmsdownload/';/**\n * Relative path to the FMS proxy download service.\n */var CLIENT_FMS_UPLOAD_PATH=WEB_XML_FMS_PROXY_CONTEXT+'/fmsupload/';// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\n// Public Functions\n// -------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------\nvar exports={};/**\n * Build url from a file ticket.\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n *\n * @return {String} url\n */var _buildUrlFromFileTicket=function(fileTicket,openFileName){var fileName;if(!_.isEmpty(openFileName)){// Remove special characters because IIS does not allow special characters in file name\nvar validOpenFileName;var extensionIndex=openFileName.lastIndexOf('.');if(extensionIndex>0){var extension=openFileName.substring(extensionIndex+1);var fileNameWithoutExtension=openFileName.substring(0,extensionIndex);validOpenFileName=fileNameWithoutExtension.replace(/[<>*%:&]/,'')+'.'+extension;}else{validOpenFileName=openFileName.replace(/[<>*%:&]/,'');}fileName=encodeURIComponent(validOpenFileName);}else{fileName=exports.getFilenameFromTicket(fileTicket);}var downloadUri=CLIENT_FMS_DOWNLOAD_PATH+fileName+'?ticket='+encodeURIComponent(fileTicket);return browserUtils.getBaseURL()+downloadUri;};/**\n * Get the file name from FMS ticket\n *\n * @param {String} ticket - The file ticket\n * @return {String} File name\n */export let getFilenameFromTicket=function(ticket){// Check for forward or backslash in the ticket string\nvar lastfslash=ticket.lastIndexOf('/');var lastbslash=ticket.lastIndexOf('\\\\');var fnamestart=Math.max(lastfslash,lastbslash)+1;if(fnamestart>0&&fnamestart<ticket.length){return ticket.substring(fnamestart);}// Check for a URL Encoded forward or backslash in the ticket string\nvar lastEncodedFS=ticket.lastIndexOf('%2f');var lastEncodedBS=ticket.lastIndexOf('%5c');var encodedfnamestart=Math.max(lastEncodedFS,lastEncodedBS)+3;if(encodedfnamestart>0&&encodedfnamestart<ticket.length){return ticket.substring(encodedfnamestart);}// Return empty string\nreturn'';};/**\n * Get the FMS Url\n *\n * @return {String} The FMS Url\n */export let getFMSUrl=function(){return CLIENT_FMS_DOWNLOAD_PATH;};/**\n * Looks up and returns the <b>full</b> FMS upload URL.\n *\n * @return {String} The fms upload url.\n */export let getFMSFullUploadUrl=function(){return browserUtils.getBaseURL()+CLIENT_FMS_UPLOAD_PATH;};/**\n * Get the URI to load the file from FMS given a ticket and original filename.\n *\n * @param {String} ticket - FMS ticket\n * @param {String} originalFilename - (Optional) The original file name to include on the Uri and returned in\n *            content-disposition. The filename will be generated from the ticket it not included.\n *\n * @return {String} The Uri to access the file.\n */export let getFileUri=function(ticket,originalFilename){var filename=!_.isEmpty(originalFilename)?originalFilename:exports.getFilenameFromTicket(ticket);// Double encoding ticket here because it will be re-encoded by FmsProxyServlet.\nreturn awConfiguration.get('baseUrl')+'/'+exports.getFMSUrl()+encodeURIComponent(filename)+'?ticket='+encodeURIComponent(ticket);};/**\n * Get the FSC URI from given file ticket\n *\n * @param {String} fileTicket - The File ticket\n *\n * @return {String} The FSC URI\n */export let getFscUri=function(fileTicket){var fscUri='';var httpLocation=fileTicket.indexOf('http');var percentSign=fileTicket.lastIndexOf('%');if(httpLocation!==-1&&percentSign!==-1){fscUri=fileTicket.substring(httpLocation,percentSign);var decodedUri=decodeURIComponent(fscUri);if(decodedUri){decodedUri=decodedUri.replace(';','/');fscUri=decodedUri;}}return fscUri;};/**\n * Open a file given the file ticket\n *\n * @param {String} fileTicket - The file ticket\n * @param {String} openFileName - open file with this name.\n */export let openFile=function(fileTicket,openFileName){if(_.isString(fileTicket)&&fileTicket.length>0){window.open(_buildUrlFromFileTicket(fileTicket,openFileName),'_self','enabled');}};/**\n * Open one or more files given one or more file tickets\n *\n * @param {OBJECTARRAY} fileNameAndTicketsArr - The array of structure of file name and file ticket\n */export let openFiles=function(fileNameAndTicketsArr){_.forEach(fileNameAndTicketsArr,function(fileNameAndTicket){if(_.isString(fileNameAndTicket.fileName)&&_.isString(fileNameAndTicket.fileTicket)&&fileNameAndTicket.fileName!==''&&fileNameAndTicket.fileTicket!==''){// window.open does NOT work in a for loop and fails after the first iteration with the below chrome error\n// 'Resource interpreted as Document but transferred with MIME type application/octet-stream' , hence commenting\n// and replacing the logic to behave like file downloads in polarion\n//  window.open( _buildUrlFromFileTicket( fileNameAndTicket.fileTicket, fileNameAndTicket.fileName ), '_self', 'enabled' );\nvar link=document.createElement('a');link.target='_blank';link.href=_buildUrlFromFileTicket(fileNameAndTicket.fileTicket,fileNameAndTicket.fileName);document.body.appendChild(link);link.click();link.remove();}});};/**\n * Open the file in new window\n *\n * @param {String} fileTicket - The file ticket\n */export let openFileInNewWindow=function(fileTicket){if(_.isString(fileTicket)&&fileTicket.length>0){window.open(_buildUrlFromFileTicket(fileTicket),'_blank','enabled');}};exports={getFilenameFromTicket,getFMSUrl,getFMSFullUploadUrl,getFileUri,getFscUri,openFile,openFiles,openFileInNewWindow};export default exports;","map":null,"metadata":{},"sourceType":"module"}
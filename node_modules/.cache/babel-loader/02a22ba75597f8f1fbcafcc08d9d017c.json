{"ast":null,"code":"/* eslint-disable no-await-in-loop */ // Copyright (c) 2020 Siemens\n/**\n * Defines {@link tabRegistryService} which manages tabs.\n *\n * @module js/tabRegistry.service\n */import Debug from'debug';import AwPromiseService from'js/awPromiseService';import eventBus from'js/eventBus';import htmlUtils from'js/htmlUtils';import wcagSvc from'js/wcagService';const registry={};const trace=new Debug('tabRegistryService');/**\n * Register a tab set\n *\n * @param {String} tabSetId ID that the tab set has registered with\n * @param {List<Object>} tabs List of tabs in tab set (all tabs, not just visible)\n * @param {Object} registryData Callback to change tabs and the tabs that are currently visible\n * @throws Error if tabSetId is already registered\n */export function registerTabSet(tabSetId,_ref){let{changeTab,highlightTab,tabs}=_ref;trace(\"Tab set \".concat(tabSetId,\" registered: \").concat(tabs.map(t=>t.tabKey)));if(registry[tabSetId]){throw new Error(\"Tab set with ID \".concat(tabSetId,\" is already registered\"));}registry[tabSetId]={changeTab,highlightTab,tabs};// Announce tabset registration\neventBus.publish(tabSetId+'.tabSetRegistered');}/**\n * Remove registration of a tab set\n *\n * @param {String} tabSetId ID that the tab set has registered with\n */export function unregisterTabSet(tabSetId){trace(\"Tab set \".concat(tabSetId,\" unregistered\"));delete registry[tabSetId];// Announce tabset un-registration\neventBus.publish(tabSetId+'.tabSetUnregistered');}/**\n * Get the list of tabs currently visible in the tab set\n *\n * @param {String} tabSetId ID that the tab set has registered with\n * @returns {List<Object>} List of tabs visible in the tab set. Null if tab set is not registered.\n */export function getVisibleTabs(tabSetId){const registration=registry[tabSetId];return registration?registration.tabs:null;}/**\n * Change the selected tab in the targeted tab set\n *\n * @param {String} tabSetId ID that the tab set has registered with\n * @param {String} targetTabId ID of the tab to change to\n * @returns {Promise<Void>} Promise resolved when tab transition is complete. Rejected if transition fails or tab is not visible.\n */export function changeTab(tabSetId,targetTabId){const targetTab=(getVisibleTabs(tabSetId)||[]).filter(tab=>tab.tabKey===targetTabId)[0];const ps=AwPromiseService.instance;//inline instead of global because of unit tests\nreturn targetTab?ps.resolve(registry[tabSetId].changeTab(targetTab)):ps.reject(\"\".concat(targetTabId,\" is not available in tab set\"));}/**\n * Highlight tab in the targeted tab set\n *\n * @param {String} tabSetId ID that the tab set has registered with\n * @param {String} targetTabId ID of the tab to be highlighted\n * @returns {Promise<Void>} Promise resolved when tab highlight is complete. Rejected if tab is not visible.\n */export function highlightTab(tabSetId,targetTabId){const targetTab=(getVisibleTabs(tabSetId)||[]).filter(tab=>tab.tabKey===targetTabId)[0];const ps=AwPromiseService.instance;//inline instead of global because of unit tests\nreturn targetTab?ps.resolve(registry[tabSetId].highlightTab(targetTab)):ps.reject(\"\".concat(targetTabId,\" is not available in tab set\"));}const retryMaxCount=10;const idleTimeMs=50;/**\n * Delay the execution for a given ms\n *\n * @function delay\n * @param {Number} ms - amount of milliseconds to wait\n * @return {Promise} promise - resolved after x amount of milliseconds\n */const delay=function(ms){return new Promise(resolve=>setTimeout(resolve,ms));};/**\n * Get the Tab Element based off ID and xPath\n *\n * @function getTabElement\n * @param {String} tabId - ID of the tab to be highlighted\n * @param {String} xPath - xPath to the tab\n * @returns {Element} - the html element to the tab\n */export const getTabElement=async function(tabId,xPath){let tabElement=htmlUtils.getElementByXpath(xPath,document.body);if(tabElement){let tabIndex=tabElement.getAttribute('tabindex');if(parseInt(tabIndex)>-1){return tabElement;}// tab is in overflow\nconst tabContainer=tabElement.closest('.sw-tabContainer');if(tabContainer){const overflowBtn=tabContainer.nextElementSibling;if(overflowBtn){overflowBtn.querySelector('button').click();let retryCounter=0;let popupTabElement;let loadingElement;setTimeout(function(){retryCounter=retryMaxCount;// After 10 seconds just quit\n},10000);while(retryCounter<retryMaxCount){loadingElement=htmlUtils.getElementByXpath('//div[contains(@class, \\'aw-popup-command-bar\\')]//div[contains(@class, \\'aw-jswidgets-loading\\')]',document.body);if(!loadingElement){popupTabElement=htmlUtils.getElementByXpath(\"//li[@tabkey='\".concat(tabId,\"']\"),document.body);if(popupTabElement){return popupTabElement;}retryCounter++;}await delay(idleTimeMs);}}}}};/**\n * Click on the tab\n *\n * @function clickOnTab\n * @param {String} tabId - ID of the tab to be highlighted\n * @param {String} xPath - xPath to the tab\n */export const clickOnTab=async function(tabId,xPath){const tabElement=await getTabElement(tabId,xPath);if(tabElement){tabElement.click();}};/**\n * @function highlightTabBasedOnXPath\n * @param {String} tabId - ID of the tab to be highlighted\n * @param {String} xPath - xPath to the tab\n */export const highlightTabBasedOnXPath=async function(tabId,xPath){const tabElement=await getTabElement(tabId,xPath);if(tabElement){wcagSvc.afxFocusElement(tabElement);}};const exports={changeTab,highlightTab,getVisibleTabs,registerTabSet,unregisterTabSet,clickOnTab,highlightTabBasedOnXPath};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to manage the configuration of the paste operation.\n *\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-paste-handling|Solution configuration for paste handling}\n *\n * @module js/pasteService\n *\n * @publishedApolloService\n *\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport cfgSvc from 'js/configurationService';\nimport appCtxService from 'js/appCtxService';\nimport adapterSvc from 'js/adapterService';\nimport localeSvc from 'js/localeService';\nimport messagingSvc from 'js/messagingService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport declUtils from 'js/declUtils';\nimport viewModelService from 'js/viewModelService';\nimport actionService from 'js/actionService';\nimport conditionSvc from 'js/conditionService';\nimport expParUtils from 'js/expressionParserUtils';\nimport ccu from 'js/commandConfigUtils.service';\nimport awConfiguration from 'js/awConfiguration';\nimport moduleLoader from 'js/moduleLoader';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\n/**\n * This object represents the union of all module level 'paste.json' configurations for the current AW\n * application.\n *\n * Content & Structure of the 'paste.json' file located:<BR>\n * WAR: <war_root>\\assets\\config\\paste.json <BR>\n * Kit: <dev_root>\\out\\kit\\tcawframework_aws2stage.zip\\stage\\repo\\gwt\\tc-aw-framework\\module.json\n *\n * The 'paste.json' module is used during Drag-and-Drop operations to specify which types of objects\n * being dragged (i.e. the 'source' types) are valid to drop onto a specific type object (i.e. the 'target'\n * type). If no source/target match is found, the drop will not be allowed and the user will see the 'drop not\n * allowed' symbol for their cursor.\n * <P>\n * The most specific type in an object's type hierarchy is used. <BR>\n * There is no inheritance between properties in this file.\n * <P>\n *\n * For Each (sourceType) and (targetType) section must be specify with action\n * <P>\n * All 'source' object types must be valid for a specific 'target' before the drop will be allowed.\n *\n * Note 1: This mapping only applies for dropping 'source' objects onto a single 'target' object. When dropping\n * into an 'objectSet' of an XRT stylesheet, the relation information in the 'source' attribute of the\n * 'objectSet' is used.\n *\n *\n * The JSON object generically is structured as:\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"handlerName\": {\n            \"action\": \"HandlerAction\",\n            \"activeWhen\": {\n                \"condition\": \"conditionToActiveTheHandler\"\n            }\n        }\n    },\n    \"actions\": {\n        \"HandlerAction\": {\n          // declartive action that we follow in commandsViewModel / ViewModel.json\n        }\n    },\n    \"conditions\": {\n        \"conditionToActiveTheHandler\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfTargetObject\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfSourceObject\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n * </pre>\n *\n * Example: The following specifies that:<BR>\n * a) any 'target' of type 'Folder' should use the 'customPasteHandler' defined in the JS file\n * 'js/pasteHandlers.js' when items of type 'ItemRevision' are pasted on them\n * <P>\n * Similary we can create following combination\n * b) any 'target' of type 'WorkspaceObject' should use the 'tcDefaultPasteHandler' with default relations when\n * items of type 'ItemRevision' or 'DocumentRevision' are pasted on them.\n * <P>\n * c) any 'target' of type 'DocumentRevision' should use the 'defaultFilePasteHandler' specifying the\n * 'TC_Attaches' relations (and other datasetInfo properties) when objects of type 'Dataset' are pasted on them.\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"action\": \"defaultPasteHandlerForImpactAnalysis\",\n            \"activeWhen\": {\n                \"condition\": \"conditions.isPasteHandlerActiveForImpactAnalysisNew\"\n            }\n        }\n    },\n    \"actions\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"actionType\": \"JSFunction\",\n            \"method\": \"customPasteHandler\",\n            \"deps\": \"js/pasteHandlers\",\n            \"inputData\": {\n                \"targetObject\": \"{{pasteContext.targetObject}}\",\n                \"sourceObject\": \"{{pasteContext.sourceObject}}\"\n            },\n            \"events\": {\n                \"success\": [ {\n                    \"name\": \"dragDrop.success\",\n                    \"condition\": \"pasteContext.isDragDropIntent\",\n                    \"eventData\": {\n                        \"sourceObjects\": \"{{pasteContext.sourceObject}}\",\n                        \"targetObject\": \"{{pasteContext.targetObject}}\"\n                    }\n                } ]\n            }\n        }\n    },\n    \"conditions\": {\n        \"isPasteHandlerActiveForImpactAnalysisNew\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"Folder\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"ItemRevision\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n* </pre>\n*/\n\nvar _pasteConfig;\n\nvar _pasteConfigMap;\n\nvar targetSourceMap;\n\nvar _declViewModel;\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n * @ignore\n */\n\n\nlet exports;\n/**\n * Create the declartive viewModel from all combined paste.json\n *\n * @param {Object} viewModel - event data information with name and value of changes\n * @returns {Promise} promise with decl view model json\n */\n\nconst createViewModel = async function (viewModel) {\n  var deferred = AwPromiseService.instance.defer();\n  viewModel._viewModelId = 'pasteViewModel_' + Math.random;\n  viewModel.skipClone = true;\n  let populatedViewModelJson = viewModelService.populateViewModelPropertiesFromJson(viewModel, null, null, true);\n  populatedViewModelJson.i18n = await awDuiLocalizationSvc.populateI18nMap(viewModel.i18n, null);\n  deferred.resolve(populatedViewModelJson);\n  return deferred.promise;\n};\n\nvar udpateMap = function (query, key, sourceObject, targetObject) {\n  var queryToUse = query;\n  var matchAll = queryToUse[expParUtils.$ALL];\n  queryToUse = matchAll || queryToUse;\n  var performAND = queryToUse[expParUtils.$AND] || queryToUse[expParUtils.$ALL];\n  var performOR = queryToUse[expParUtils.$OR];\n  var evalChecks = performAND || performOR || [queryToUse];\n\n  _.forEach(evalChecks, function (evalCheck) {\n    var path = expParUtils.resolve(expParUtils.$SOURCE, evalCheck);\n    var condition = expParUtils.resolve(expParUtils.$QUERY, evalCheck) || evalCheck;\n\n    if (path === 'pasteContext.sourceObject') {\n      sourceObject = condition.$typeOf;\n    } else if (path === 'pasteContext.targetObject') {\n      targetObject = condition.$typeOf;\n    }\n\n    if (sourceObject && targetObject && path) {\n      if (!targetSourceMap.has(targetObject)) {\n        targetSourceMap.set(targetObject, {\n          sourceTypes: {}\n        });\n      }\n\n      if (!targetSourceMap.get(targetObject).sourceTypes[sourceObject]) {\n        targetSourceMap.get(targetObject).sourceTypes[sourceObject] = [];\n      }\n\n      targetSourceMap.get(targetObject).sourceTypes[sourceObject].push(key);\n    }\n\n    var recurseExpressionEvaluation = condition && (condition[expParUtils.$ALL] || condition[expParUtils.$AND] || condition[expParUtils.$OR] || condition[expParUtils.$SOURCE]);\n\n    if (recurseExpressionEvaluation) {\n      udpateMap(condition, key, sourceObject, targetObject);\n    }\n  });\n};\n/**\n * Update the '_pasteConfigMap' on with all combine paste.json\n *\n */\n\n\nfunction updateThePasteConfig() {\n  targetSourceMap = new Map();\n\n  _.forEach(_pasteConfig.pasteHandlers, function (value, key) {\n    if (value.activeWhen) {\n      var condition = value.activeWhen.condition;\n      var conditionExpression = null;\n      var sourceObject;\n      var targetObject;\n\n      if (_.startsWith(condition, 'conditions.')) {\n        conditionExpression = _.get(_pasteConfig, condition);\n      } else {\n        conditionExpression = condition;\n      }\n\n      if (conditionExpression && conditionExpression.expression) {\n        udpateMap(conditionExpression.expression, key, sourceObject, targetObject);\n      }\n    }\n  });\n\n  _pasteConfigMap = targetSourceMap;\n}\n/**\n * Update the 'selectedModelTypeRelations' on the appCtx for the one step Paste command.\n *\n * @param {Object} eventData - event data information with name and value of changes\n */\n\n\nfunction changeValidSourceTypesForSelected(eventData) {\n  if (eventData.name === 'mselected' && eventData.value && eventData.value.length === 1) {\n    var objectValidSourceTypes = exports.getObjectValidSourceTypes(eventData.value[0]);\n    objectValidSourceTypes = objectValidSourceTypes || {};\n    appCtxService.registerCtx('selectedModelTypeRelations', Object.keys(objectValidSourceTypes));\n  }\n}\n/**\n * create Success Message For DND\n *\n * @param {sourceObjects} sourceObjects -Service to use.\n * @param {targetObject} targetObject -Service to use.\n *\n * invoke success message\n */\n\n\nfunction createSuccessMessageForDND(sourceObjects, targetObject) {\n  var pasteSuccessMessage = {\n    messageText: '',\n    messageTextParams: []\n  };\n\n  if (sourceObjects.length > 1) {\n    localeSvc.getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteMultipleSuccessMessage').then(function (response) {\n      pasteSuccessMessage.messageText = response;\n      pasteSuccessMessage.messageTextParams = [sourceObjects.length, targetObject.props.object_string.uiValues[0]];\n      var messageText = messagingSvc.applyMessageParamsWithoutContext(pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams);\n      messagingSvc.showInfo(messageText);\n    });\n  } else {\n    localeSvc.getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteSuccessMessage').then(function (response) {\n      pasteSuccessMessage.messageText = response;\n      const sourceObjectName = sourceObjects && sourceObjects[0].props && sourceObjects[0].props.object_string ? sourceObjects[0].props.object_string.uiValues[0] : sourceObjects[0].name;\n      pasteSuccessMessage.messageTextParams = [sourceObjectName, targetObject.props.object_string.uiValues[0]];\n      var messageText = messagingSvc.applyMessageParamsWithoutContext(pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams);\n      messagingSvc.showInfo(messageText);\n    });\n  }\n}\n/**\n * create Failure Message For DND\n *\n * @param {errorReason} errorReason -Service to use.\n *\n *  invokes  failure message\n */\n\n\nfunction createFailureMessageForDND(errorReason) {\n  localeSvc.getLocalizedTextFromKey('ZeroCompileCommandMessages.pasteFailureMessage').then(result => {\n    var pasteFailureMessage = result;\n    var errorText = pasteFailureMessage + ':';\n\n    _.forEach(errorReason.message.split(/\\n/g), function (messageLine) {\n      errorText = errorText + '<br>' + messageLine;\n    });\n\n    messagingSvc.showInfo(errorText);\n  });\n}\n/**\n * handler for dragDrop event\n * @param {Array} sourceObjects source objects drag frim\n * @param {Object} targetObject target object drop to\n */\n\n\nfunction handleSuccess(sourceObjects, targetObject) {\n  var adaptedSourceObjects = adapterSvc.getAdaptedObjectsSync(sourceObjects);\n  createSuccessMessageForDND(adaptedSourceObjects, targetObject);\n}\n\nexport const getTargetType = function (targetObject) {\n  var targetTypes = getTargetTypes();\n  var typeHier = declUtils.getTypeHierarchy(targetObject) || [targetObject.type];\n\n  if (typeHier[0]) {\n    for (var ii = 0; ii < typeHier.length; ii++) {\n      var typeName = typeHier[ii];\n\n      if (targetTypes.has(typeName)) {\n        return targetTypes.get(typeName);\n      }\n    }\n  }\n\n  return null;\n};\nexport const getSourceType = function (sourceTypes, sourceObject) {\n  var typeHier = declUtils.getTypeHierarchy(sourceObject) || [sourceObject.type];\n\n  if (typeHier[0]) {\n    for (var ii = 0; ii < typeHier.length; ii++) {\n      var typeName = typeHier[ii];\n\n      if (sourceTypes[typeName]) {\n        return sourceTypes[typeName];\n      }\n    }\n  }\n\n  return null;\n};\n/**\n * To Paste objects with single relationType\n *\n * This would\n * 1. use bestTargetFitFinder function to find the best possible Target Fit for the given target object by reading the paste configuration.\n * 2. use bestSourceFitFinder function to find the best possible Source Fit for the given source object by reading the paste configuration.\n * 3. Invoke the configured pasteHandler for the target + source type combination.\n * 4. If no suitable target + source type combination for paste handler is found then (configured) default paste handler is invoked.\n *\n * @param {Object} targetObject - The 'target' Object for the paste.\n * @param {Array} sourceObjects - Array of 'source' Objects to paste onto the 'target' Object.\n * @param {String} relationType - Relation type name\n * @param {object} customPasteContext - custom paste context\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\n\nexport let execute = function (targetObject, sourceObjects, relationType, customPasteContext) {\n  var queue = {};\n  var custObj = customPasteContext;\n\n  if (custObj && !custObj.hasOwnProperty('isDragDropIntent')) {\n    custObj.isDragDropIntent = false;\n  } else if (!custObj) {\n    custObj = {\n      isDragDropIntent: false\n    };\n  }\n\n  var defaultPasteHandlerConfiguration = awConfiguration.get('solutionDef.defaultPasteHandlerConfiguration');\n\n  var doAction = function (defaultPasteHandler, declViewModel) {\n    _.forEach(sourceObjects, function (sourceObject) {\n      var pasteContext = {\n        targetObject: targetObject,\n        sourceObject: sourceObject,\n        relationType: relationType,\n        ...custObj\n      };\n      var targetTypeConfig = null;\n\n      if (typeof defaultPasteHandlerConfiguration === 'object') {\n        targetTypeConfig = defaultPasteHandler[defaultPasteHandlerConfiguration.bestTargetFitFinder](targetObject);\n      } else {\n        targetTypeConfig = getTargetType(targetObject);\n      }\n\n      var action = null;\n      var actionName = null;\n\n      if (targetTypeConfig) {\n        var sourceTypeConfig = null;\n\n        if (typeof defaultPasteHandlerConfiguration === 'object') {\n          sourceTypeConfig = defaultPasteHandler[defaultPasteHandlerConfiguration.bestSourceFitFinder](targetTypeConfig.sourceTypes, sourceObject);\n        } else {\n          sourceTypeConfig = getSourceType(targetTypeConfig.sourceTypes, sourceObject);\n        }\n\n        var length = 0;\n        var currentLength;\n\n        if (sourceTypeConfig) {\n          _.forEach(sourceTypeConfig, function (pasteHandlers) {\n            var pasteHandlerObject = _pasteConfig.pasteHandlers[pasteHandlers];\n            var conditionResult = false;\n            var conditionExpression = pasteHandlerObject.activeWhen.condition;\n\n            if (_.startsWith(pasteHandlerObject.activeWhen.condition, 'conditions.')) {\n              conditionExpression = _.get(_pasteConfig, pasteHandlerObject.activeWhen.condition);\n            }\n\n            if (conditionExpression !== null) {\n              currentLength = ccu.getExpressionLength(conditionExpression.expression, declViewModel);\n              conditionResult = conditionSvc.evaluateCondition({\n                ctx: appCtxService.ctx,\n                pasteContext: pasteContext\n              }, conditionExpression.expression);\n            }\n\n            if (conditionResult && currentLength > length) {\n              length = currentLength;\n              action = _pasteConfig.actions[pasteHandlerObject.action];\n              actionName = pasteHandlerObject.action;\n            }\n          });\n        }\n      }\n\n      if (!actionName && typeof defaultPasteHandlerConfiguration === 'object') {\n        var handlerFunctionName = defaultPasteHandlerConfiguration.pasteHandler;\n        actionName = _pasteConfig.pasteHandlers[handlerFunctionName].action;\n        action = _pasteConfig.actions[actionName];\n        logger.warn('No configured paste handler found for source object: \\'' + sourceObject + '\\' when target object: \\'' + targetObject + '\\'' + '\\n' + 'RelationType: \\'' + relationType + '\\'' + '\\n' + '...Assuming default handler');\n      }\n\n      if (actionName) {\n        if (!queue.hasOwnProperty(actionName)) {\n          queue[actionName] = {};\n        }\n\n        if (!queue[actionName].hasOwnProperty('sourceObjs')) {\n          queue[actionName].sourceObjs = [];\n        }\n\n        queue[actionName].sourceObjs.push(sourceObject);\n\n        if (action) {\n          queue[actionName].handlerAction = action;\n        }\n      }\n    });\n    /**\n     * Loop for each unique 'handler' and build up a promise chain.\n     */\n\n\n    var promiseArray = [];\n\n    _.forEach(queue, function (queuedSrcObjInfo) {\n      var depFileToLoad = queuedSrcObjInfo.handlerAction.deps;\n      var depModuleObj = null;\n      var dataCtxNode = {\n        data: declViewModel,\n        ctx: appCtxService.ctx,\n        pasteContext: {\n          targetObject: targetObject,\n          sourceObject: queuedSrcObjInfo.sourceObjs,\n          relationType: relationType,\n          ...custObj\n        }\n      };\n\n      if (depFileToLoad) {\n        //Revisit: getDependentModule is yet to be supported\n        //depModuleObj = moduleLoader.getDependentModule( queuedSrcObjInfo.handlerAction.deps );\n        if (!depModuleObj) {\n          promiseArray.push(moduleLoader.loadDependentModule(queuedSrcObjInfo.handlerAction.deps).then(function (pasteHandler) {\n            depModuleObj = pasteHandler;\n            return actionService.executeAction(declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false);\n          }));\n        } else {\n          promiseArray.push(actionService.executeAction(declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false));\n        }\n      } else {\n        promiseArray.push(actionService.executeAction(declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false));\n      }\n    });\n\n    return AwPromiseService.instance.all(promiseArray);\n  };\n\n  var performAction = function (declViewModel) {\n    if (defaultPasteHandlerConfiguration.deps) {\n      //Revisit: getDependentModule is yet to be supported\n      //var defaultPasteHandler = moduleLoader.getDependentModule( defaultPasteHandlerConfiguration.deps );\n      //if( !defaultPasteHandler ) {\n      // return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n      //     return doAction( pasteHandler, declViewModel );\n      // } );\n      //}\n      //return doAction( defaultPasteHandler, declViewModel );\n      return moduleLoader.loadDependentModule(defaultPasteHandlerConfiguration.deps).then(function (pasteHandler) {\n        return doAction(pasteHandler, declViewModel);\n      });\n    }\n\n    return doAction(null, declViewModel);\n  };\n\n  if (!_declViewModel) {\n    return createViewModel(_pasteConfig).then(function (declViewModel) {\n      _declViewModel = declViewModel;\n      return performAction(_declViewModel);\n    });\n  }\n\n  return performAction(_declViewModel);\n};\n/**\n * To Paste objects with different relationTypes\n * Same as {@link module:js/pasteService.execute|execute} except that this executes with multiple source object + relation types for a single target object.\n *\n * @param {Object} targetObject - the target object to paste the source objects to\n * @param {Object} relationTypeToSources - an object of key/value: relationType/array-of-sourceObjects\n *\n * @returns {Promise} Resolved when all processing is complete.\n */\n\nexport let executeWithMultipleRelations = function (targetObject, relationTypeToSources) {\n  var allPromises = [];\n\n  _.forOwn(relationTypeToSources, function (sourceObjects, relationType) {\n    allPromises.push(exports.execute(targetObject, sourceObjects, relationType));\n  });\n\n  return AwPromiseService.instance.all(allPromises);\n};\nexport const determineActiveHandler = (sourceObjects, targetObject) => {\n  var conditionResult = false;\n\n  _.forOwn(_pasteConfig.pasteHandlers, pasteHandlerObject => {\n    var conditionExpression = pasteHandlerObject.activeWhen ? pasteHandlerObject.activeWhen.condition : null;\n\n    if (conditionExpression) {\n      if (_.startsWith(pasteHandlerObject.activeWhen.condition, 'conditions.')) {\n        conditionExpression = _.get(_pasteConfig, pasteHandlerObject.activeWhen.condition);\n      }\n\n      if (conditionExpression !== null) {\n        conditionResult = conditionResult || conditionSvc.evaluateCondition({\n          ctx: appCtxService.ctx,\n          pasteContext: {\n            targetObject: targetObject,\n            sourceObject: sourceObjects,\n            relationType: ''\n          }\n        }, conditionExpression.expression);\n      }\n    }\n  });\n\n  return conditionResult;\n};\n/**\n * Gets all of the available targetTypes configured in paste.json files from different modules.\n *\n * @return {Object} The 'targetTypes' from the 'pasteConfig'\n */\n\nexport let getTargetTypes = function () {\n  return _pasteConfigMap ? _pasteConfigMap : {};\n};\n/**\n * @param {Object} targetObject - The 'target' IModelObject to use when determining which 'source' types are\n *            potentially valid to be dropped upon it.\n * @return {Object|null} The 'sourceTypes' property from the 'pasteConfig' for the given 'target' object type or its\n *         ancestor types up the hierarchy (or NULL if no match was found).\n */\n\nexport let getObjectValidSourceTypes = function (targetObject) {\n  if (targetObject && targetObject.modelType && targetObject.modelType.typeHierarchyArray || targetObject && targetObject.typeHierarchy) {\n    var typeHier = declUtils.getTypeHierarchy(targetObject);\n    /**\n     * Starting at the 'target' object's actual type, try to find a matching 'targetType' property in the\n     * 'pasteConfig'. If an exact match is not found, try the super type of the 'target' up its hierarchy tree. Stop\n     * looking when the 1st one (i.e. the 'closest' one) is found.\n     */\n\n    var targetTypes = exports.getTargetTypes();\n\n    for (var ii = 0; ii < typeHier.length; ii++) {\n      var typeName = typeHier[ii];\n\n      if (targetTypes.has(typeName)) {\n        return targetTypes.get(typeName).sourceTypes;\n      }\n    }\n  }\n\n  return null;\n};\n/**\n * Get underlying BO for view model objects\n *\n * @param {Array} viewModelObjects - view model objects to adapt\n * @return {input} adapted object\n */\n\nexport let adaptedInput = function (viewModelObjects) {\n  if (viewModelObjects) {\n    var objectsToAdapt = _.isArray(viewModelObjects) ? viewModelObjects : [viewModelObjects];\n    return adapterSvc.getAdaptedObjectsSync(objectsToAdapt);\n  }\n\n  return [];\n};\nexport let loadConfiguration = function () {\n  _pasteConfig = cfgSvc.getCfgCached('paste') || {};\n  updateThePasteConfig();\n  eventBus.subscribe('appCtx.register', changeValidSourceTypesForSelected);\n  eventBus.subscribe('dragDrop.success', function (event) {\n    handleSuccess(event.sourceObjects, event.targetObject);\n  });\n  eventBus.subscribe('dragDrop.failure', function (event) {\n    createFailureMessageForDND(event.reason);\n  });\n  eventBus.subscribePostal({\n    channel: 'paste',\n    topic: 'drop',\n    callback: function (eventData) {\n      if (eventData && eventData.pasteInput) {\n        _.forEach(eventData.pasteInput, function (pasteInput) {\n          var targetObject = pasteInput.targetObject;\n          var relationType = pasteInput.relationType;\n          var sourceObjects = pasteInput.sourceObjects;\n          exports.execute(targetObject, sourceObjects, relationType, { ...pasteInput.props,\n            isDragDropIntent: true\n          }).then(function () {\n            var eventData = {\n              relatedModified: [targetObject],\n              refreshLocationFlag: false,\n              createdObjects: sourceObjects\n            };\n            eventBus.publish('cdm.relatedModified', eventData);\n          });\n        });\n      }\n    }\n  });\n};\nexports = {\n  execute,\n  executeWithMultipleRelations,\n  getTargetTypes,\n  getObjectValidSourceTypes,\n  adaptedInput,\n  loadConfiguration,\n  determineActiveHandler\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"names":["AwPromiseService","cfgSvc","appCtxService","adapterSvc","localeSvc","messagingSvc","_","logger","eventBus","declUtils","viewModelService","actionService","conditionSvc","expParUtils","ccu","awConfiguration","moduleLoader","awDuiLocalizationSvc","_pasteConfig","_pasteConfigMap","targetSourceMap","_declViewModel","exports","createViewModel","viewModel","deferred","instance","defer","_viewModelId","Math","random","skipClone","populatedViewModelJson","populateViewModelPropertiesFromJson","i18n","populateI18nMap","resolve","promise","udpateMap","query","key","sourceObject","targetObject","queryToUse","matchAll","$ALL","performAND","$AND","performOR","$OR","evalChecks","forEach","evalCheck","path","$SOURCE","condition","$QUERY","$typeOf","has","set","sourceTypes","get","push","recurseExpressionEvaluation","updateThePasteConfig","Map","pasteHandlers","value","activeWhen","conditionExpression","startsWith","expression","changeValidSourceTypesForSelected","eventData","name","length","objectValidSourceTypes","getObjectValidSourceTypes","registerCtx","Object","keys","createSuccessMessageForDND","sourceObjects","pasteSuccessMessage","messageText","messageTextParams","getLocalizedTextFromKey","then","response","props","object_string","uiValues","applyMessageParamsWithoutContext","showInfo","sourceObjectName","createFailureMessageForDND","errorReason","result","pasteFailureMessage","errorText","message","split","messageLine","handleSuccess","adaptedSourceObjects","getAdaptedObjectsSync","getTargetType","targetTypes","getTargetTypes","typeHier","getTypeHierarchy","type","ii","typeName","getSourceType","execute","relationType","customPasteContext","queue","custObj","hasOwnProperty","isDragDropIntent","defaultPasteHandlerConfiguration","doAction","defaultPasteHandler","declViewModel","pasteContext","targetTypeConfig","bestTargetFitFinder","action","actionName","sourceTypeConfig","bestSourceFitFinder","currentLength","pasteHandlerObject","conditionResult","getExpressionLength","evaluateCondition","ctx","actions","handlerFunctionName","pasteHandler","warn","sourceObjs","handlerAction","promiseArray","queuedSrcObjInfo","depFileToLoad","deps","depModuleObj","dataCtxNode","data","loadDependentModule","executeAction","all","performAction","executeWithMultipleRelations","relationTypeToSources","allPromises","forOwn","determineActiveHandler","modelType","typeHierarchyArray","typeHierarchy","adaptedInput","viewModelObjects","objectsToAdapt","isArray","loadConfiguration","getCfgCached","subscribe","event","reason","subscribePostal","channel","topic","callback","pasteInput","relatedModified","refreshLocationFlag","createdObjects","publish"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/pasteService.js"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used to manage the configuration of the paste operation.\n *\n * Please refer {@link https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/solution#solution-configuration-for-paste-handling|Solution configuration for paste handling}\n *\n * @module js/pasteService\n *\n * @publishedApolloService\n *\n */\n\nimport AwPromiseService from 'js/awPromiseService';\nimport cfgSvc from 'js/configurationService';\nimport appCtxService from 'js/appCtxService';\nimport adapterSvc from 'js/adapterService';\nimport localeSvc from 'js/localeService';\nimport messagingSvc from 'js/messagingService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport eventBus from 'js/eventBus';\nimport declUtils from 'js/declUtils';\nimport viewModelService from 'js/viewModelService';\nimport actionService from 'js/actionService';\nimport conditionSvc from 'js/conditionService';\nimport expParUtils from 'js/expressionParserUtils';\nimport ccu from 'js/commandConfigUtils.service';\nimport awConfiguration from 'js/awConfiguration';\nimport moduleLoader from 'js/moduleLoader';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\n/**\n * This object represents the union of all module level 'paste.json' configurations for the current AW\n * application.\n *\n * Content & Structure of the 'paste.json' file located:<BR>\n * WAR: <war_root>\\assets\\config\\paste.json <BR>\n * Kit: <dev_root>\\out\\kit\\tcawframework_aws2stage.zip\\stage\\repo\\gwt\\tc-aw-framework\\module.json\n *\n * The 'paste.json' module is used during Drag-and-Drop operations to specify which types of objects\n * being dragged (i.e. the 'source' types) are valid to drop onto a specific type object (i.e. the 'target'\n * type). If no source/target match is found, the drop will not be allowed and the user will see the 'drop not\n * allowed' symbol for their cursor.\n * <P>\n * The most specific type in an object's type hierarchy is used. <BR>\n * There is no inheritance between properties in this file.\n * <P>\n *\n * For Each (sourceType) and (targetType) section must be specify with action\n * <P>\n * All 'source' object types must be valid for a specific 'target' before the drop will be allowed.\n *\n * Note 1: This mapping only applies for dropping 'source' objects onto a single 'target' object. When dropping\n * into an 'objectSet' of an XRT stylesheet, the relation information in the 'source' attribute of the\n * 'objectSet' is used.\n *\n *\n * The JSON object generically is structured as:\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"handlerName\": {\n            \"action\": \"HandlerAction\",\n            \"activeWhen\": {\n                \"condition\": \"conditionToActiveTheHandler\"\n            }\n        }\n    },\n    \"actions\": {\n        \"HandlerAction\": {\n          // declartive action that we follow in commandsViewModel / ViewModel.json\n        }\n    },\n    \"conditions\": {\n        \"conditionToActiveTheHandler\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfTargetObject\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"nameOfSourceObject\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n * </pre>\n *\n * Example: The following specifies that:<BR>\n * a) any 'target' of type 'Folder' should use the 'customPasteHandler' defined in the JS file\n * 'js/pasteHandlers.js' when items of type 'ItemRevision' are pasted on them\n * <P>\n * Similary we can create following combination\n * b) any 'target' of type 'WorkspaceObject' should use the 'tcDefaultPasteHandler' with default relations when\n * items of type 'ItemRevision' or 'DocumentRevision' are pasted on them.\n * <P>\n * c) any 'target' of type 'DocumentRevision' should use the 'defaultFilePasteHandler' specifying the\n * 'TC_Attaches' relations (and other datasetInfo properties) when objects of type 'Dataset' are pasted on them.\n *\n * <pre>\n * {\n    \"schemaVersion\": \"1.0.0\",\n    \"pasteHandlers\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"action\": \"defaultPasteHandlerForImpactAnalysis\",\n            \"activeWhen\": {\n                \"condition\": \"conditions.isPasteHandlerActiveForImpactAnalysisNew\"\n            }\n        }\n    },\n    \"actions\": {\n        \"defaultPasteHandlerForImpactAnalysis\": {\n            \"actionType\": \"JSFunction\",\n            \"method\": \"customPasteHandler\",\n            \"deps\": \"js/pasteHandlers\",\n            \"inputData\": {\n                \"targetObject\": \"{{pasteContext.targetObject}}\",\n                \"sourceObject\": \"{{pasteContext.sourceObject}}\"\n            },\n            \"events\": {\n                \"success\": [ {\n                    \"name\": \"dragDrop.success\",\n                    \"condition\": \"pasteContext.isDragDropIntent\",\n                    \"eventData\": {\n                        \"sourceObjects\": \"{{pasteContext.sourceObject}}\",\n                        \"targetObject\": \"{{pasteContext.targetObject}}\"\n                    }\n                } ]\n            }\n        }\n    },\n    \"conditions\": {\n        \"isPasteHandlerActiveForImpactAnalysisNew\": {\n            \"expression\": {\n                \"$and\": [ {\n                        \"$source\": \"pasteContext.targetObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"Folder\"\n                        }\n                    },\n                    {\n                        \"$source\": \"pasteContext.sourceObject\",\n                        \"$query\": {\n                            \"$typeOf\": \"ItemRevision\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n* </pre>\n*/\n\nvar _pasteConfig;\n\nvar _pasteConfigMap;\n\nvar targetSourceMap;\n\nvar _declViewModel;\n\n/**\n * ############################################################<BR>\n * Define the public functions exposed by this module.<BR>\n * ############################################################<BR>\n * @ignore\n */\nlet exports;\n\n/**\n * Create the declartive viewModel from all combined paste.json\n *\n * @param {Object} viewModel - event data information with name and value of changes\n * @returns {Promise} promise with decl view model json\n */\nconst createViewModel = async function( viewModel ) {\n    var deferred = AwPromiseService.instance.defer();\n\n    viewModel._viewModelId = 'pasteViewModel_' + Math.random;\n    viewModel.skipClone = true;\n    let populatedViewModelJson = viewModelService.populateViewModelPropertiesFromJson( viewModel, null, null, true );\n\n    populatedViewModelJson.i18n = await awDuiLocalizationSvc.populateI18nMap( viewModel.i18n, null );\n\n    deferred.resolve( populatedViewModelJson );\n\n    return deferred.promise;\n};\n\nvar udpateMap = function( query, key, sourceObject, targetObject ) {\n    var queryToUse = query;\n    var matchAll = queryToUse[ expParUtils.$ALL ];\n    queryToUse = matchAll || queryToUse;\n    var performAND = queryToUse[ expParUtils.$AND ] || queryToUse[ expParUtils.$ALL ];\n    var performOR = queryToUse[ expParUtils.$OR ];\n    var evalChecks = performAND || performOR || [ queryToUse ];\n    _.forEach( evalChecks, function( evalCheck ) {\n        var path = expParUtils.resolve( expParUtils.$SOURCE, evalCheck );\n        var condition = expParUtils.resolve( expParUtils.$QUERY, evalCheck ) || evalCheck;\n        if( path === 'pasteContext.sourceObject' ) {\n            sourceObject = condition.$typeOf;\n        } else if( path === 'pasteContext.targetObject' ) {\n            targetObject = condition.$typeOf;\n        }\n        if( sourceObject && targetObject && path ) {\n            if( !targetSourceMap.has( targetObject ) ) {\n                targetSourceMap.set( targetObject, { sourceTypes: {} } );\n            }\n            if( !targetSourceMap.get( targetObject ).sourceTypes[ sourceObject ] ) {\n                targetSourceMap.get( targetObject ).sourceTypes[ sourceObject ] = [];\n            }\n            targetSourceMap.get( targetObject ).sourceTypes[ sourceObject ].push( key );\n        }\n        var recurseExpressionEvaluation = condition && ( condition[ expParUtils.$ALL ] || condition[ expParUtils.$AND ] || condition[ expParUtils.$OR ] || condition[ expParUtils.$SOURCE ] );\n        if( recurseExpressionEvaluation ) {\n            udpateMap( condition, key, sourceObject, targetObject );\n        }\n    } );\n};\n\n/**\n * Update the '_pasteConfigMap' on with all combine paste.json\n *\n */\nfunction updateThePasteConfig() {\n    targetSourceMap = new Map();\n\n    _.forEach( _pasteConfig.pasteHandlers, function( value, key ) {\n        if( value.activeWhen ) {\n            var condition = value.activeWhen.condition;\n            var conditionExpression = null;\n            var sourceObject;\n            var targetObject;\n            if( _.startsWith( condition, 'conditions.' ) ) {\n                conditionExpression = _.get( _pasteConfig, condition );\n            } else {\n                conditionExpression = condition;\n            }\n            if( conditionExpression && conditionExpression.expression ) {\n                udpateMap( conditionExpression.expression, key, sourceObject, targetObject );\n            }\n        }\n    } );\n\n    _pasteConfigMap = targetSourceMap;\n}\n\n/**\n * Update the 'selectedModelTypeRelations' on the appCtx for the one step Paste command.\n *\n * @param {Object} eventData - event data information with name and value of changes\n */\nfunction changeValidSourceTypesForSelected( eventData ) {\n    if( eventData.name === 'mselected' && eventData.value && eventData.value.length === 1 ) {\n        var objectValidSourceTypes = exports.getObjectValidSourceTypes( eventData.value[ 0 ] );\n        objectValidSourceTypes = objectValidSourceTypes || {};\n        appCtxService.registerCtx( 'selectedModelTypeRelations', Object.keys( objectValidSourceTypes ) );\n    }\n}\n\n/**\n * create Success Message For DND\n *\n * @param {sourceObjects} sourceObjects -Service to use.\n * @param {targetObject} targetObject -Service to use.\n *\n * invoke success message\n */\nfunction createSuccessMessageForDND( sourceObjects, targetObject ) {\n    var pasteSuccessMessage = {\n        messageText: '',\n        messageTextParams: []\n    };\n\n    if( sourceObjects.length > 1 ) {\n        localeSvc.getLocalizedTextFromKey( 'ZeroCompileCommandMessages.pasteMultipleSuccessMessage' ).then( function( response ) {\n            pasteSuccessMessage.messageText = response;\n            pasteSuccessMessage.messageTextParams = [\n                sourceObjects.length,\n                targetObject.props.object_string.uiValues[ 0 ]\n            ];\n            var messageText = messagingSvc.applyMessageParamsWithoutContext( pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams );\n            messagingSvc.showInfo( messageText );\n        } );\n    } else {\n        localeSvc.getLocalizedTextFromKey( 'ZeroCompileCommandMessages.pasteSuccessMessage' ).then( function( response ) {\n            pasteSuccessMessage.messageText = response;\n            const sourceObjectName = sourceObjects && sourceObjects[ 0 ].props && sourceObjects[ 0 ].props.object_string ?\n                sourceObjects[ 0 ].props.object_string.uiValues[ 0 ] : sourceObjects[ 0 ].name;\n            pasteSuccessMessage.messageTextParams = [\n                sourceObjectName,\n                targetObject.props.object_string.uiValues[ 0 ]\n            ];\n            var messageText = messagingSvc.applyMessageParamsWithoutContext( pasteSuccessMessage.messageText, pasteSuccessMessage.messageTextParams );\n            messagingSvc.showInfo( messageText );\n        } );\n    }\n}\n\n/**\n * create Failure Message For DND\n *\n * @param {errorReason} errorReason -Service to use.\n *\n *  invokes  failure message\n */\nfunction createFailureMessageForDND( errorReason ) {\n    localeSvc.getLocalizedTextFromKey( 'ZeroCompileCommandMessages.pasteFailureMessage' ).then( result => {\n        var pasteFailureMessage = result;\n        var errorText = pasteFailureMessage + ':';\n        _.forEach( errorReason.message.split( /\\n/g ), function( messageLine ) {\n            errorText = errorText + '<br>' + messageLine;\n        } );\n        messagingSvc.showInfo( errorText );\n    } );\n}\n\n/**\n * handler for dragDrop event\n * @param {Array} sourceObjects source objects drag frim\n * @param {Object} targetObject target object drop to\n */\nfunction handleSuccess( sourceObjects, targetObject ) {\n    var adaptedSourceObjects = adapterSvc.getAdaptedObjectsSync( sourceObjects );\n    createSuccessMessageForDND( adaptedSourceObjects, targetObject );\n}\n\nexport const getTargetType = function( targetObject ) {\n    var targetTypes = getTargetTypes();\n    var typeHier = declUtils.getTypeHierarchy( targetObject ) || [ targetObject.type ];\n\n    if( typeHier[ 0 ] ) {\n        for( var ii = 0; ii < typeHier.length; ii++ ) {\n            var typeName = typeHier[ ii ];\n            if( targetTypes.has( typeName ) ) {\n                return targetTypes.get( typeName );\n            }\n        }\n    }\n    return null;\n};\n\nexport const getSourceType = function( sourceTypes, sourceObject ) {\n    var typeHier = declUtils.getTypeHierarchy( sourceObject ) || [ sourceObject.type ];\n\n    if( typeHier[ 0 ] ) {\n        for( var ii = 0; ii < typeHier.length; ii++ ) {\n            var typeName = typeHier[ ii ];\n            if( sourceTypes[ typeName ] ) {\n                return sourceTypes[ typeName ];\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * To Paste objects with single relationType\n *\n * This would\n * 1. use bestTargetFitFinder function to find the best possible Target Fit for the given target object by reading the paste configuration.\n * 2. use bestSourceFitFinder function to find the best possible Source Fit for the given source object by reading the paste configuration.\n * 3. Invoke the configured pasteHandler for the target + source type combination.\n * 4. If no suitable target + source type combination for paste handler is found then (configured) default paste handler is invoked.\n *\n * @param {Object} targetObject - The 'target' Object for the paste.\n * @param {Array} sourceObjects - Array of 'source' Objects to paste onto the 'target' Object.\n * @param {String} relationType - Relation type name\n * @param {object} customPasteContext - custom paste context\n *\n * @returns {Promise} This promise will be 'resolved' or 'rejected' when the service is invoked and its response\n *          data is available.\n */\nexport let execute = function( targetObject, sourceObjects, relationType, customPasteContext ) {\n    var queue = {};\n    var custObj = customPasteContext;\n    if( custObj && !custObj.hasOwnProperty( 'isDragDropIntent' ) ) {\n        custObj.isDragDropIntent = false;\n    } else if( !custObj ) {\n        custObj = { isDragDropIntent: false };\n    }\n    var defaultPasteHandlerConfiguration = awConfiguration.get( 'solutionDef.defaultPasteHandlerConfiguration' );\n\n    var doAction = function( defaultPasteHandler, declViewModel ) {\n        _.forEach( sourceObjects, function( sourceObject ) {\n            var pasteContext = { targetObject: targetObject, sourceObject: sourceObject, relationType: relationType, ...custObj };\n            var targetTypeConfig = null;\n            if( typeof defaultPasteHandlerConfiguration === 'object' ) {\n                targetTypeConfig = defaultPasteHandler[ defaultPasteHandlerConfiguration.bestTargetFitFinder ]( targetObject );\n            } else {\n                targetTypeConfig = getTargetType( targetObject );\n            }\n            var action = null;\n            var actionName = null;\n\n            if( targetTypeConfig ) {\n                var sourceTypeConfig = null;\n                if( typeof defaultPasteHandlerConfiguration === 'object' ) {\n                    sourceTypeConfig = defaultPasteHandler[ defaultPasteHandlerConfiguration.bestSourceFitFinder ]( targetTypeConfig.sourceTypes, sourceObject );\n                } else {\n                    sourceTypeConfig = getSourceType( targetTypeConfig.sourceTypes, sourceObject );\n                }\n                var length = 0;\n                var currentLength;\n\n                if( sourceTypeConfig ) {\n                    _.forEach( sourceTypeConfig, function( pasteHandlers ) {\n                        var pasteHandlerObject = _pasteConfig.pasteHandlers[ pasteHandlers ];\n                        var conditionResult = false;\n\n                        var conditionExpression = pasteHandlerObject.activeWhen.condition;\n                        if( _.startsWith( pasteHandlerObject.activeWhen.condition, 'conditions.' ) ) {\n                            conditionExpression = _.get( _pasteConfig, pasteHandlerObject.activeWhen.condition );\n                        }\n                        if( conditionExpression !== null ) {\n                            currentLength = ccu.getExpressionLength( conditionExpression.expression, declViewModel );\n                            conditionResult = conditionSvc.evaluateCondition( {\n                                ctx: appCtxService.ctx,\n                                pasteContext: pasteContext\n                            }, conditionExpression.expression );\n                        }\n                        if( conditionResult && currentLength > length ) {\n                            length = currentLength;\n                            action = _pasteConfig.actions[ pasteHandlerObject.action ];\n                            actionName = pasteHandlerObject.action;\n                        }\n                    } );\n                }\n            }\n\n            if( !actionName && typeof defaultPasteHandlerConfiguration === 'object' ) {\n                var handlerFunctionName = defaultPasteHandlerConfiguration.pasteHandler;\n                actionName = _pasteConfig.pasteHandlers[ handlerFunctionName ].action;\n                action = _pasteConfig.actions[ actionName ];\n\n                logger.warn( 'No configured paste handler found for source object: \\'' + sourceObject +\n                    '\\' when target object: \\'' + targetObject + '\\'' + '\\n' +\n                    'RelationType: \\'' + relationType + '\\'' + '\\n' +\n                    '...Assuming default handler' );\n            }\n\n            if( actionName ) {\n                if( !queue.hasOwnProperty( actionName ) ) {\n                    queue[ actionName ] = {};\n                }\n                if( !queue[ actionName ].hasOwnProperty( 'sourceObjs' ) ) {\n                    queue[ actionName ].sourceObjs = [];\n                }\n                queue[ actionName ].sourceObjs.push( sourceObject );\n                if( action ) {\n                    queue[ actionName ].handlerAction = action;\n                }\n            }\n        } );\n\n        /**\n         * Loop for each unique 'handler' and build up a promise chain.\n         */\n\n        var promiseArray = [];\n        _.forEach( queue, function( queuedSrcObjInfo ) {\n            var depFileToLoad = queuedSrcObjInfo.handlerAction.deps;\n            var depModuleObj = null;\n            var dataCtxNode = {\n                data: declViewModel,\n                ctx: appCtxService.ctx,\n                pasteContext: { targetObject: targetObject, sourceObject: queuedSrcObjInfo.sourceObjs, relationType: relationType, ...custObj }\n            };\n\n            if( depFileToLoad ) {\n                //Revisit: getDependentModule is yet to be supported\n                //depModuleObj = moduleLoader.getDependentModule( queuedSrcObjInfo.handlerAction.deps );\n                if( !depModuleObj ) {\n                    promiseArray.push( moduleLoader.loadDependentModule( queuedSrcObjInfo.handlerAction.deps ).then( function( pasteHandler ) {\n                        depModuleObj = pasteHandler;\n                        return actionService.executeAction( declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false );\n                    } ) );\n                } else {\n                    promiseArray.push( actionService.executeAction( declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false ) );\n                }\n            } else {\n                promiseArray.push( actionService.executeAction( declViewModel, queuedSrcObjInfo.handlerAction, dataCtxNode, depModuleObj, false ) );\n            }\n        } );\n        return AwPromiseService.instance.all( promiseArray );\n    };\n\n    var performAction = function( declViewModel ) {\n        if( defaultPasteHandlerConfiguration.deps ) {\n            //Revisit: getDependentModule is yet to be supported\n            //var defaultPasteHandler = moduleLoader.getDependentModule( defaultPasteHandlerConfiguration.deps );\n            //if( !defaultPasteHandler ) {\n            // return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n            //     return doAction( pasteHandler, declViewModel );\n            // } );\n            //}\n            //return doAction( defaultPasteHandler, declViewModel );\n            return moduleLoader.loadDependentModule( defaultPasteHandlerConfiguration.deps ).then( function( pasteHandler ) {\n                return doAction( pasteHandler, declViewModel );\n            } );\n        }\n        return doAction( null, declViewModel );\n    };\n    if( !_declViewModel ) {\n        return createViewModel( _pasteConfig ).then( function( declViewModel ) {\n            _declViewModel = declViewModel;\n            return performAction( _declViewModel );\n        } );\n    }\n    return performAction( _declViewModel );\n};\n\n/**\n * To Paste objects with different relationTypes\n * Same as {@link module:js/pasteService.execute|execute} except that this executes with multiple source object + relation types for a single target object.\n *\n * @param {Object} targetObject - the target object to paste the source objects to\n * @param {Object} relationTypeToSources - an object of key/value: relationType/array-of-sourceObjects\n *\n * @returns {Promise} Resolved when all processing is complete.\n */\nexport let executeWithMultipleRelations = function( targetObject, relationTypeToSources ) {\n    var allPromises = [];\n\n    _.forOwn( relationTypeToSources, function( sourceObjects, relationType ) {\n        allPromises.push( exports.execute( targetObject, sourceObjects, relationType ) );\n    } );\n\n    return AwPromiseService.instance.all( allPromises );\n};\n\nexport const determineActiveHandler = ( sourceObjects, targetObject ) => {\n    var conditionResult = false;\n    _.forOwn( _pasteConfig.pasteHandlers, ( pasteHandlerObject ) => {\n        var conditionExpression = pasteHandlerObject.activeWhen ? pasteHandlerObject.activeWhen.condition : null;\n        if( conditionExpression ) {\n            if( _.startsWith( pasteHandlerObject.activeWhen.condition, 'conditions.' ) ) {\n                conditionExpression = _.get( _pasteConfig, pasteHandlerObject.activeWhen.condition );\n            }\n            if( conditionExpression !== null ) {\n                conditionResult = conditionResult || conditionSvc.evaluateCondition( {\n                    ctx: appCtxService.ctx,\n                    pasteContext: {\n                        targetObject: targetObject,\n                        sourceObject: sourceObjects,\n                        relationType: ''\n                    }\n                }, conditionExpression.expression );\n            }\n        }\n    } );\n    return conditionResult;\n};\n\n/**\n * Gets all of the available targetTypes configured in paste.json files from different modules.\n *\n * @return {Object} The 'targetTypes' from the 'pasteConfig'\n */\nexport let getTargetTypes = function() {\n    return _pasteConfigMap ? _pasteConfigMap : {};\n};\n\n/**\n * @param {Object} targetObject - The 'target' IModelObject to use when determining which 'source' types are\n *            potentially valid to be dropped upon it.\n * @return {Object|null} The 'sourceTypes' property from the 'pasteConfig' for the given 'target' object type or its\n *         ancestor types up the hierarchy (or NULL if no match was found).\n */\nexport let getObjectValidSourceTypes = function( targetObject ) {\n    if( targetObject && targetObject.modelType && targetObject.modelType.typeHierarchyArray || targetObject && targetObject.typeHierarchy ) {\n        var typeHier = declUtils.getTypeHierarchy( targetObject );\n\n        /**\n         * Starting at the 'target' object's actual type, try to find a matching 'targetType' property in the\n         * 'pasteConfig'. If an exact match is not found, try the super type of the 'target' up its hierarchy tree. Stop\n         * looking when the 1st one (i.e. the 'closest' one) is found.\n         */\n        var targetTypes = exports.getTargetTypes();\n\n        for( var ii = 0; ii < typeHier.length; ii++ ) {\n            var typeName = typeHier[ ii ];\n\n            if( targetTypes.has( typeName ) ) {\n                return targetTypes.get( typeName ).sourceTypes;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * Get underlying BO for view model objects\n *\n * @param {Array} viewModelObjects - view model objects to adapt\n * @return {input} adapted object\n */\nexport let adaptedInput = function( viewModelObjects ) {\n    if( viewModelObjects ) {\n        var objectsToAdapt = _.isArray( viewModelObjects ) ? viewModelObjects : [ viewModelObjects ];\n        return adapterSvc.getAdaptedObjectsSync( objectsToAdapt );\n    }\n    return [];\n};\n\nexport let loadConfiguration = function() {\n    _pasteConfig = cfgSvc.getCfgCached( 'paste' ) || {};\n\n    updateThePasteConfig();\n\n    eventBus.subscribe( 'appCtx.register', changeValidSourceTypesForSelected );\n    eventBus.subscribe( 'dragDrop.success', function( event ) {\n        handleSuccess( event.sourceObjects, event.targetObject );\n    } );\n    eventBus.subscribe( 'dragDrop.failure', function( event ) {\n        createFailureMessageForDND( event.reason );\n    } );\n\n    eventBus.subscribePostal( {\n        channel: 'paste',\n        topic: 'drop',\n        callback: function( eventData ) {\n            if( eventData && eventData.pasteInput ) {\n                _.forEach( eventData.pasteInput, function( pasteInput ) {\n                    var targetObject = pasteInput.targetObject;\n                    var relationType = pasteInput.relationType;\n                    var sourceObjects = pasteInput.sourceObjects;\n\n                    exports.execute( targetObject, sourceObjects, relationType, { ...pasteInput.props, isDragDropIntent: true } ).then( function() {\n                        var eventData = {\n                            relatedModified: [ targetObject ],\n                            refreshLocationFlag: false,\n                            createdObjects: sourceObjects\n                        };\n                        eventBus.publish( 'cdm.relatedModified', eventData );\n                    } );\n                } );\n            }\n        }\n    } );\n};\n\nexports = {\n    execute,\n    executeWithMultipleRelations,\n    getTargetTypes,\n    getObjectValidSourceTypes,\n    adaptedInput,\n    loadConfiguration,\n    determineActiveHandler\n};\nexport default exports;\n\nloadConfiguration();\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,GAAP,MAAgB,+BAAhB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,oBAAP,MAAiC,6BAAjeAAJ;;AAEA,IAAIC,eAAJ;;AAEA,IAAIC,cAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,OAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,gBAAgBC,SAAhB,EAA4B;EAChD,IAAIC,QAAQ,GAAGzB,gBAAgB,CAAC0B,QAAjB,CAA0BC,KAA1B,EAAf;EAEAH,SAAS,CAACI,YAAV,GAAyB,oBAAoBC,IAAI,CAACC,MAAlD;EACAN,SAAS,CAACO,SAAV,GAAsB,IAAtB;EACA,IAAIC,sBAAsB,GAAGtB,gBAAgB,CAACuB,mCAAjB,CAAsDT,SAAtD,EAAiE,IAAjE,EAAuE,IAAvE,EAA6E,IAA7E,CAA7B;EAEAQ,sBAAsB,CAACE,IAAvB,GAA8B,MAAMjB,oBAAoB,CAACkB,eAArB,CAAsCX,SAAS,CAACU,IAAhD,EAAsD,IAAtD,CAApC;EAEAT,QAAQ,CAACW,OAAT,CAAkBJ,sBAAlB;EAEA,OAAOP,QAAQ,CAACY,OAAhB;AACH,CAZD;;AAcA,IAAIC,SAAS,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,YAAtB,EAAoCC,YAApC,EAAmD;EAC/D,IAAIC,UAAU,GAAGJ,KAAjB;EACA,IAAIK,QAAQ,GAAGD,UAAU,CAAE9B,WAAW,CAACgC,IAAd,CAAzB;EACAF,UAAU,GAAGC,QAAQ,IAAID,UAAzB;EACA,IAAIG,UAAU,GAAGH,UAAU,CAAE9B,WAAW,CAACkC,IAAd,CAAV,IAAkCJ,UAAU,CAAE9B,WAAW,CAACgC,IAAd,CAA7D;EACA,IAAIG,SAAS,GAAGL,UAAU,CAAE9B,WAAW,CAACoC,GAAd,CAA1B;EACA,IAAIC,UAAU,GAAGJ,UAAU,IAAIE,SAAd,IAA2B,CAAEL,UAAF,CAA5C;;EACArC,CAAC,CAAC6C,OAAF,CAAWD,UAAX,EAAuB,UAAUE,SAAV,EAAsB;IACzC,IAAIC,IAAI,GAAGxC,WAAW,CAACuB,OAAZ,CAAqBvB,WAAW,CAACyC,OAAjC,EAA0CF,SAA1C,CAAX;IACA,IAAIG,SAAS,GAAG1C,WAAW,CAACuB,OAAZ,CAAqBvB,WAAW,CAAC2C,MAAjC,EAAyCJ,SAAzC,KAAwDA,SAAxE;;IACA,IAAIC,IAAI,KAAK,2BAAb,EAA2C;MACvCZ,YAAY,GAAGc,SAAS,CAACE,OAAzB;IACH,CAFD,MAEO,IAAIJ,IAAI,KAAK,2BAAb,EAA2C;MAC9CX,YAAY,GAAGa,SAAS,CAACE,OAAzB;IACH;;IACD,IAAIhB,YAAY,IAAIC,YAAhB,IAAgCW,IAApC,EAA2C;MACvC,IAAI,CAACjC,eAAe,CAACsC,GAAhB,CAAqBhB,YAArB,CAAL,EAA2C;QACvCtB,eAAe,CAACuC,GAAhB,CAAqBjB,YAArB,EAAmC;UAAEkB,WAAW,EAAE;QAAf,CAAnC;MACH;;MACD,IAAI,CAACxC,eAAe,CAACyC,GAAhB,CAAqBnB,YAArB,EAAoCkB,WAApC,CAAiDnB,YAAjD,CAAL,EAAuE;QACnErB,eAAe,CAACyC,GAAhB,CAAqBnB,YAArB,EAAoCkB,WAApC,CAAiDnB,YAAjD,IAAkE,EAAlE;MACH;;MACDrB,eAAe,CAACyC,GAAhB,CAAqBnB,YAArB,EAAoCkB,WAApC,CAAiDnB,YAAjD,EAAgEqB,IAAhE,CAAsEtB,GAAtE;IACH;;IACD,IAAIuB,2BAA2B,GAAGR,SAAS,KAAMA,SAAS,CAAE1C,WAAW,CAACgC,IAAd,CAAT,IAAiCU,SAAS,CAAE1C,WAAW,CAACkC,IAAd,CAA1C,IAAkEQ,SAAS,CAAE1C,WAAW,CAACoC,GAAd,CAA3E,IAAkGM,SAAS,CAAE1C,WAAW,CAACyC,OAAd,CAAjH,CAA3C;;IACA,IAAIS,2BAAJ,EAAkC;MAC9BzB,SAAS,CAAEiB,SAAF,EAAaf,GAAb,EAAkBC,YAAlB,EAAgCC,YAAhC,CAAT;IACH;EACJ,CArBD;AAsBH,CA7BD;AA+BA;AACA;AACA;AACA;;;AACA,SAASsB,oBAAT,GAAgC;EAC5B5C,eAAe,GAAG,IAAI6C,GAAJ,EAAlB;;EAEA3D,CAAC,CAAC6C,OAAF,CAAWjC,YAAY,CAACgD,aAAxB,EAAuC,UAAUC,KAAV,EAAiB3B,GAAjB,EAAuB;IAC1D,IAAI2B,KAAK,CAACC,UAAV,EAAuB;MACnB,IAAIb,SAAS,GAAGY,KAAK,CAACC,UAAN,CAAiBb,SAAjC;MACA,IAAIc,mBAAmB,GAAG,IAA1B;MACA,IAAI5B,YAAJ;MACA,IAAIC,YAAJ;;MACA,IAAIpC,CAAC,CAACgE,UAAF,CAAcf,SAAd,EAAyB,aAAzB,CAAJ,EAA+C;QAC3Cc,mBAAmB,GAAG/D,CAAC,CAACuD,GAAF,CAAO3C,YAAP,EAAqBqC,SAArB,CAAtB;MACH,CAFD,MAEO;QACHc,mBAAmB,GAAGd,SAAtB;MACH;;MACD,IAAIc,mBAAmB,IAAIA,mBAAmB,CAACE,UAA/C,EAA4D;QACxDjC,SAAS,CAAE+B,mBAAmB,CAACE,UAAtB,EAAkC/B,GAAlC,EAAuCC,YAAvC,EAAqDC,YAArD,CAAT;MACH;IACJ;EACJ,CAfD;;EAiBAvB,eAAe,GAAGC,eAAlB;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASoD,iCAAT,CAA4CC,SAA5C,EAAwD;EACpD,IAAIA,SAAS,CAACC,IAAV,KAAmB,WAAnB,IAAkCD,SAAS,CAACN,KAA5C,IAAqDM,SAAS,CAACN,KAAV,CAAgBQ,MAAhB,KAA2B,CAApF,EAAwF;IACpF,IAAIC,sBAAsB,GAAGtD,OAAO,CAACuD,yBAAR,CAAmCJ,SAAS,CAACN,KAAV,CAAiB,CAAjB,CAAnC,CAA7B;IACAS,sBAAsB,GAAGA,sBAAsB,IAAI,EAAnD;IACA1E,aAAa,CAAC4E,WAAd,CAA2B,4BAA3B,EAAyDC,MAAM,CAACC,IAAP,CAAaJ,sBAAb,CAAzD;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,0BAAT,CAAqCC,aAArC,EAAoDxC,YAApD,EAAmE;EAC/D,IAAIyC,mBAAmB,GAAG;IACtBC,WAAW,EAAE,EADS;IAEtBC,iBAAiB,EAAE;EAFG,CAA1B;;EAKA,IAAIH,aAAa,CAACP,MAAd,GAAuB,CAA3B,EAA+B;IAC3BvE,SAAS,CAACkF,uBAAV,CAAmC,wDAAnC,EAA8FC,IAA9F,CAAoG,UAAUC,QAAV,EAAqB;MACrHL,mBAAmB,CAACC,WAApB,GAAkCI,QAAlC;MACAL,mBAAmB,CAACE,iBAApB,GAAwC,CACpCH,aAAa,CAACP,MADsB,EAEpCjC,YAAY,CAAC+C,KAAb,CAAmBC,aAAnB,CAAiCC,QAAjC,CAA2C,CAA3C,CAFoC,CAAxC;MAIA,IAAIP,WAAW,GAAG/E,YAAY,CAACuF,gCAAb,CAA+CT,mBAAmB,CAACC,WAAnE,EAAgFD,mBAAmB,CAACE,iBAApG,CAAlB;MACAhF,YAAY,CAACwF,QAAb,CAAuBT,WAAvB;IACH,CARD;EASH,CAVD,MAUO;IACHhF,SAAS,CAACkF,uBAAV,CAAmC,gDAAnC,EAAsFC,IAAtF,CAA4F,UAAUC,QAAV,EAAqB;MAC7GL,mBAAmB,CAACC,WAApB,GAAkCI,QAAlC;MACA,MAAMM,gBAAgB,GAAGZ,aAAa,IAAIA,aAAa,CAAE,CAAF,CAAb,CAAmBO,KAApC,IAA6CP,aAAa,CAAE,CAAF,CAAb,CAAmBO,KAAnB,CAAyBC,aAAtE,GACrBR,aAAa,CAAE,CAAF,CAAb,CAAmBO,KAAnB,CAAyBC,aAAzB,CAAuCC,QAAvC,CAAiD,CAAjD,CADqB,GACkCT,aAAa,CAAE,CAAF,CAAb,CAAmBR,IAD9E;MAEAS,mBAAmB,CAACE,iBAApB,GAAwC,CACpCS,gBADoC,EAEpCpD,YAAY,CAAC+C,KAAb,CAAmBC,aAAnB,CAAiCC,QAAjC,CAA2C,CAA3C,CAFoC,CAAxC;MAIA,IAAIP,WAAW,GAAG/E,YAAY,CAACuF,gCAAb,CAA+CT,mBAAmB,CAACC,WAAnE,EAAgFD,mBAAmB,CAACE,iBAApG,CAAlB;MACAhF,YAAY,CAACwF,QAAb,CAAuBT,WAAvB;IACH,CAVD;EAWH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,0BAAT,CAAqCC,WAArC,EAAmD;EAC/C5F,SAAS,CAACkF,uBAAV,CAAmC,gDAAnC,EAAsFC,IAAtF,CAA4FU,MAAM,IAAI;IAClG,IAAIC,mBAAmB,GAAGD,MAA1B;IACA,IAAIE,SAAS,GAAGD,mBAAmB,GAAG,GAAtC;;IACA5F,CAAC,CAAC6C,OAAF,CAAW6C,WAAW,CAACI,OAAZ,CAAoBC,KAApB,CAA2B,KAA3B,CAAX,EAA+C,UAAUC,WAAV,EAAwB;MACnEH,SAAS,GAAGA,SAAS,GAAG,MAAZ,GAAqBG,WAAjC;IACH,CAFD;;IAGAjG,YAAY,CAACwF,QAAb,CAAuBM,SAAvB;EACH,CAPD;AAQH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASI,aAAT,CAAwBrB,aAAxB,EAAuCxC,YAAvC,EAAsD;EAClD,IAAI8D,oBAAoB,GAAGrG,UAAU,CAACsG,qBAAX,CAAkCvB,aAAlC,CAA3B;EACAD,0BAA0B,CAAEuB,oBAAF,EAAwB9D,YAAxB,CAA1B;AACH;;AAED,OAAO,MAAMgE,aAAa,GAAG,UAAUhE,YAAV,EAAyB;EAClD,IAAIiE,WAAW,GAAGC,cAAc,EAAhC;EACA,IAAIC,QAAQ,GAAGpG,SAAS,CAACqG,gBAAV,CAA4BpE,YAA5B,KAA8C,CAAEA,YAAY,CAACqE,IAAf,CAA7D;;EAEA,IAAIF,QAAQ,CAAE,CAAF,CAAZ,EAAoB;IAChB,KAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,QAAQ,CAAClC,MAA/B,EAAuCqC,EAAE,EAAzC,EAA8C;MAC1C,IAAIC,QAAQ,GAAGJ,QAAQ,CAAEG,EAAF,CAAvB;;MACA,IAAIL,WAAW,CAACjD,GAAZ,CAAiBuD,QAAjB,CAAJ,EAAkC;QAC9B,OAAON,WAAW,CAAC9C,GAAZ,CAAiBoD,QAAjB,CAAP;MACH;IACJ;EACJ;;EACD,OAAO,IAAP;AACH,CAbM;AAeP,OAAO,MAAMC,aAAa,GAAG,UAAUtD,WAAV,EAAuBnB,YAAvB,EAAsC;EAC/D,IAAIoE,QAAQ,GAAGpG,SAAS,CAACqG,gBAAV,CAA4BrE,YAA5B,KAA8C,CAAEA,YAAY,CAACsE,IAAf,CAA7D;;EAEA,IAAIF,QAAQ,CAAE,CAAF,CAAZ,EAAoB;IAChB,KAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,QAAQ,CAAClC,MAA/B,EAAuCqC,EAAE,EAAzC,EAA8C;MAC1C,IAAIC,QAAQ,GAAGJ,QAAQ,CAAEG,EAAF,CAAvB;;MACA,IAAIpD,WAAW,CAAEqD,QAAF,CAAf,EAA8B;QAC1B,OAAOrD,WAAW,CAAEqD,QAAF,CAAlB;MACH;IACJ;EACJ;;EACD,OAAO,IAAP;AACH,CAZM;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,OAAO,GAAG,UAAUzE,YAAV,EAAwBwC,aAAxB,EAAuCkC,YAAvC,EAAqDC,kBAArD,EAA0E;EAC3F,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,OAAO,GAAGF,kBAAd;;EACA,IAAIE,OAAO,IAAI,CAACA,OAAO,CAACC,cAAR,CAAwB,kBAAxB,CAAhB,EAA+D;IAC3DD,OAAO,CAACE,gBAAR,GAA2B,KAA3B;EACH,CAFD,MAEO,IAAI,CAACF,OAAL,EAAe;IAClBA,OAAO,GAAG;MAAEE,gBAAgB,EAAE;IAApB,CAAV;EACH;;EACD,IAAIC,gCAAgC,GAAG3G,eAAe,CAAC8C,GAAhB,CAAqB,8CAArB,CAAvC;;EAEA,IAAI8D,QAAQ,GAAG,UAAUC,mBAAV,EAA+BC,aAA/B,EAA+C;IAC1DvH,CAAC,CAAC6C,OAAF,CAAW+B,aAAX,EAA0B,UAAUzC,YAAV,EAAyB;MAC/C,IAAIqF,YAAY,GAAG;QAAEpF,YAAY,EAAEA,YAAhB;QAA8BD,YAAY,EAAEA,YAA5C;QAA0D2E,YAAY,EAAEA,YAAxE;QAAsF,GAAGG;MAAzF,CAAnB;MACA,IAAIQ,gBAAgB,GAAG,IAAvB;;MACA,IAAI,OAAOL,gCAAP,KAA4C,QAAhD,EAA2D;QACvDK,gBAAgB,GAAGH,mBAAmB,CAAEF,gCAAgC,CAACM,mBAAnC,CAAnB,CAA6EtF,YAA7E,CAAnB;MACH,CAFD,MAEO;QACHqF,gBAAgB,GAAGrB,aAAa,CAAEhE,YAAF,CAAhC;MACH;;MACD,IAAIuF,MAAM,GAAG,IAAb;MACA,IAAIC,UAAU,GAAG,IAAjB;;MAEA,IAAIH,gBAAJ,EAAuB;QACnB,IAAII,gBAAgB,GAAG,IAAvB;;QACA,IAAI,OAAOT,gCAAP,KAA4C,QAAhD,EAA2D;UACvDS,gBAAgB,GAAGP,mBAAmB,CAAEF,gCAAgC,CAACU,mBAAnC,CAAnB,CAA6EL,gBAAgB,CAACnE,WAA9F,EAA2GnB,YAA3G,CAAnB;QACH,CAFD,MAEO;UACH0F,gBAAgB,GAAGjB,aAAa,CAAEa,gBAAgB,CAACnE,WAAnB,EAAgCnB,YAAhC,CAAhC;QACH;;QACD,IAAIkC,MAAM,GAAG,CAAb;QACA,IAAI0D,aAAJ;;QAEA,IAAIF,gBAAJ,EAAuB;UACnB7H,CAAC,CAAC6C,OAAF,CAAWgF,gBAAX,EAA6B,UAAUjE,aAAV,EAA0B;YACnD,IAAIoE,kBAAkB,GAAGpH,YAAY,CAACgD,aAAb,CAA4BA,aAA5B,CAAzB;YACA,IAAIqE,eAAe,GAAG,KAAtB;YAEA,IAAIlE,mBAAmB,GAAGiE,kBAAkB,CAAClE,UAAnB,CAA8Bb,SAAxD;;YACA,IAAIjD,CAAC,CAACgE,UAAF,CAAcgE,kBAAkB,CAAClE,UAAnB,CAA8Bb,SAA5C,EAAuD,aAAvD,CAAJ,EAA6E;cACzEc,mBAAmB,GAAG/D,CAAC,CAACuD,GAAF,CAAO3C,YAAP,EAAqBoH,kBAAkB,CAAClE,UAAnB,CAA8Bb,SAAnD,CAAtB;YACH;;YACD,IAAIc,mBAAmB,KAAK,IAA5B,EAAmC;cAC/BgE,aAAa,GAAGvH,GAAG,CAAC0H,mBAAJ,CAAyBnE,mBAAmB,CAACE,UAA7C,EAAyDsD,aAAzD,CAAhB;cACAU,eAAe,GAAG3H,YAAY,CAAC6H,iBAAb,CAAgC;gBAC9CC,GAAG,EAAExI,aAAa,CAACwI,GAD2B;gBAE9CZ,YAAY,EAAEA;cAFgC,CAAhC,EAGfzD,mBAAmB,CAACE,UAHL,CAAlB;YAIH;;YACD,IAAIgE,eAAe,IAAIF,aAAa,GAAG1D,MAAvC,EAAgD;cAC5CA,MAAM,GAAG0D,aAAT;cACAJ,MAAM,GAAG/G,YAAY,CAACyH,OAAb,CAAsBL,kBAAkB,CAACL,MAAzC,CAAT;cACAC,UAAU,GAAGI,kBAAkB,CAACL,MAAhC;YACH;UACJ,CApBD;QAqBH;MACJ;;MAED,IAAI,CAACC,UAAD,IAAe,OAAOR,gCAAP,KAA4C,QAA/D,EAA0E;QACtE,IAAIkB,mBAAmB,GAAGlB,gCAAgC,CAACmB,YAA3D;QACAX,UAAU,GAAGhH,YAAY,CAACgD,aAAb,CAA4B0E,mBAA5B,EAAkDX,MAA/D;QACAA,MAAM,GAAG/G,YAAY,CAACyH,OAAb,CAAsBT,UAAtB,CAAT;QAEA3H,MAAM,CAACuI,IAAP,CAAa,4DAA4DrG,YAA5D,GACT,2BADS,GACqBC,YADrB,GACoC,IADpC,GAC2C,IAD3C,GAET,kBAFS,GAEY0E,YAFZ,GAE2B,IAF3B,GAEkC,IAFlC,GAGT,6BAHJ;MAIH;;MAED,IAAIc,UAAJ,EAAiB;QACb,IAAI,CAACZ,KAAK,CAACE,cAAN,CAAsBU,UAAtB,CAAL,EAA0C;UACtCZ,KAAK,CAAEY,UAAF,CAAL,GAAsB,EAAtB;QACH;;QACD,IAAI,CAACZ,KAAK,CAAEY,UAAF,CAAL,CAAoBV,cAApB,CAAoC,YAApC,CAAL,EAA0D;UACtDF,KAAK,CAAEY,UAAF,CAAL,CAAoBa,UAApB,GAAiC,EAAjC;QACH;;QACDzB,KAAK,CAAEY,UAAF,CAAL,CAAoBa,UAApB,CAA+BjF,IAA/B,CAAqCrB,YAArC;;QACA,IAAIwF,MAAJ,EAAa;UACTX,KAAK,CAAEY,UAAF,CAAL,CAAoBc,aAApB,GAAoCf,MAApC;QACH;MACJ;IACJ,CArED;IAuEA;AACR;AACA;;;IAEQ,IAAIgB,YAAY,GAAG,EAAnB;;IACA3I,CAAC,CAAC6C,OAAF,CAAWmE,KAAX,EAAkB,UAAU4B,gBAAV,EAA6B;MAC3C,IAAIC,aAAa,GAAGD,gBAAgB,CAACF,aAAjB,CAA+BI,IAAnD;MACA,IAAIC,YAAY,GAAG,IAAnB;MACA,IAAIC,WAAW,GAAG;QACdC,IAAI,EAAE1B,aADQ;QAEda,GAAG,EAAExI,aAAa,CAACwI,GAFL;QAGdZ,YAAY,EAAE;UAAEpF,YAAY,EAAEA,YAAhB;UAA8BD,YAAY,EAAEyG,gBAAgB,CAACH,UAA7D;UAAyE3B,YAAY,EAAEA,YAAvF;UAAqG,GAAGG;QAAxG;MAHA,CAAlB;;MAMA,IAAI4B,aAAJ,EAAoB;QAChB;QACA;QACA,IAAI,CAACE,YAAL,EAAoB;UAChBJ,YAAY,CAACnF,IAAb,CAAmB9C,YAAY,CAACwI,mBAAb,CAAkCN,gBAAgB,CAACF,aAAjB,CAA+BI,IAAjE,EAAwE7D,IAAxE,CAA8E,UAAUsD,YAAV,EAAyB;YACtHQ,YAAY,GAAGR,YAAf;YACA,OAAOlI,aAAa,CAAC8I,aAAd,CAA6B5B,aAA7B,EAA4CqB,gBAAgB,CAACF,aAA7D,EAA4EM,WAA5E,EAAyFD,YAAzF,EAAuG,KAAvG,CAAP;UACH,CAHkB,CAAnB;QAIH,CALD,MAKO;UACHJ,YAAY,CAACnF,IAAb,CAAmBnD,aAAa,CAAC8I,aAAd,CAA6B5B,aAA7B,EAA4CqB,gBAAgB,CAACF,aAA7D,EAA4EM,WAA5E,EAAyFD,YAAzF,EAAuG,KAAvG,CAAnB;QACH;MACJ,CAXD,MAWO;QACHJ,YAAY,CAACnF,IAAb,CAAmBnD,aAAa,CAAC8I,aAAd,CAA6B5B,aAA7B,EAA4CqB,gBAAgB,CAACF,aAA7D,EAA4EM,WAA5E,EAAyFD,YAAzF,EAAuG,KAAvG,CAAnB;MACH;IACJ,CAvBD;;IAwBA,OAAOrJ,gBAAgB,CAAC0B,QAAjB,CAA0BgI,GAA1B,CAA+BT,YAA/B,CAAP;EACH,CAtGD;;EAwGA,IAAIU,aAAa,GAAG,UAAU9B,aAAV,EAA0B;IAC1C,IAAIH,gCAAgC,CAAC0B,IAArC,EAA4C;MACxC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,OAAOpI,YAAY,CAACwI,mBAAb,CAAkC9B,gCAAgC,CAAC0B,IAAnE,EAA0E7D,IAA1E,CAAgF,UAAUsD,YAAV,EAAyB;QAC5G,OAAOlB,QAAQ,CAAEkB,YAAF,EAAgBhB,aAAhB,CAAf;MACH,CAFM,CAAP;IAGH;;IACD,OAAOF,QAAQ,CAAE,IAAF,EAAQE,aAAR,CAAf;EACH,CAfD;;EAgBA,IAAI,CAACxG,cAAL,EAAsB;IAClB,OAAOE,eAAe,CAAEL,YAAF,CAAf,CAAgCqE,IAAhC,CAAsC,UAAUsC,aAAV,EAA0B;MACnExG,cAAc,GAAGwG,aAAjB;MACA,OAAO8B,aAAa,CAAEtI,cAAF,CAApB;IACH,CAHM,CAAP;EAIH;;EACD,OAAOsI,aAAa,CAAEtI,cAAF,CAApB;AACH,CAzIM;AA2IP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIuI,4BAA4B,GAAG,UAAUlH,YAAV,EAAwBmH,qBAAxB,EAAgD;EACtF,IAAIC,WAAW,GAAG,EAAlB;;EAEAxJ,CAAC,CAACyJ,MAAF,CAAUF,qBAAV,EAAiC,UAAU3E,aAAV,EAAyBkC,YAAzB,EAAwC;IACrE0C,WAAW,CAAChG,IAAZ,CAAkBxC,OAAO,CAAC6F,OAAR,CAAiBzE,YAAjB,EAA+BwC,aAA/B,EAA8CkC,YAA9C,CAAlB;EACH,CAFD;;EAIA,OAAOpH,gBAAgB,CAAC0B,QAAjB,CAA0BgI,GAA1B,CAA+BI,WAA/B,CAAP;AACH,CARM;AAUP,OAAO,MAAME,sBAAsB,GAAG,CAAE9E,aAAF,EAAiBxC,YAAjB,KAAmC;EACrE,IAAI6F,eAAe,GAAG,KAAtB;;EACAjI,CAAC,CAACyJ,MAAF,CAAU7I,YAAY,CAACgD,aAAvB,EAAwCoE,kBAAF,IAA0B;IAC5D,IAAIjE,mBAAmB,GAAGiE,kBAAkB,CAAClE,UAAnB,GAAgCkE,kBAAkB,CAAClE,UAAnB,CAA8Bb,SAA9D,GAA0E,IAApG;;IACA,IAAIc,mBAAJ,EAA0B;MACtB,IAAI/D,CAAC,CAACgE,UAAF,CAAcgE,kBAAkB,CAAClE,UAAnB,CAA8Bb,SAA5C,EAAuD,aAAvD,CAAJ,EAA6E;QACzEc,mBAAmB,GAAG/D,CAAC,CAACuD,GAAF,CAAO3C,YAAP,EAAqBoH,kBAAkB,CAAClE,UAAnB,CAA8Bb,SAAnD,CAAtB;MACH;;MACD,IAAIc,mBAAmB,KAAK,IAA5B,EAAmC;QAC/BkE,eAAe,GAAGA,eAAe,IAAI3H,YAAY,CAAC6H,iBAAb,CAAgC;UACjEC,GAAG,EAAExI,aAAa,CAACwI,GAD8C;UAEjEZ,YAAY,EAAE;YACVpF,YAAY,EAAEA,YADJ;YAEVD,YAAY,EAAEyC,aAFJ;YAGVkC,YAAY,EAAE;UAHJ;QAFmD,CAAhC,EAOlC/C,mBAAmB,CAACE,UAPc,CAArC;MAQH;IACJ;EACJ,CAjBD;;EAkBA,OAAOgE,eAAP;AACH,CArBM;AAuBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI3B,cAAc,GAAG,YAAW;EACnC,OAAOzF,eAAe,GAAGA,eAAH,GAAqB,EAA3C;AACH,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI0D,yBAAyB,GAAG,UAAUnC,YAAV,EAAyB;EAC5D,IAAIA,YAAY,IAAIA,YAAY,CAACuH,SAA7B,IAA0CvH,YAAY,CAACuH,SAAb,CAAuBC,kBAAjE,IAAuFxH,YAAY,IAAIA,YAAY,CAACyH,aAAxH,EAAwI;IACpI,IAAItD,QAAQ,GAAGpG,SAAS,CAACqG,gBAAV,CAA4BpE,YAA5B,CAAf;IAEA;AACR;AACA;AACA;AACA;;IACQ,IAAIiE,WAAW,GAAGrF,OAAO,CAACsF,cAAR,EAAlB;;IAEA,KAAK,IAAII,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,QAAQ,CAAClC,MAA/B,EAAuCqC,EAAE,EAAzC,EAA8C;MAC1C,IAAIC,QAAQ,GAAGJ,QAAQ,CAAEG,EAAF,CAAvB;;MAEA,IAAIL,WAAW,CAACjD,GAAZ,CAAiBuD,QAAjB,CAAJ,EAAkC;QAC9B,OAAON,WAAW,CAAC9C,GAAZ,CAAiBoD,QAAjB,EAA4BrD,WAAnC;MACH;IACJ;EACJ;;EAED,OAAO,IAAP;AACH,CArBM;AAuBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIwG,YAAY,GAAG,UAAUC,gBAAV,EAA6B;EACnD,IAAIA,gBAAJ,EAAuB;IACnB,IAAIC,cAAc,GAAGhK,CAAC,CAACiK,OAAF,CAAWF,gBAAX,IAAgCA,gBAAhC,GAAmD,CAAEA,gBAAF,CAAxE;IACA,OAAOlK,UAAU,CAACsG,qBAAX,CAAkC6D,cAAlC,CAAP;EACH;;EACD,OAAO,EAAP;AACH,CANM;AAQP,OAAO,IAAIE,iBAAiB,GAAG,YAAW;EACtCtJ,YAAY,GAAGjB,MAAM,CAACwK,YAAP,CAAqB,OAArB,KAAkC,EAAjD;EAEAzG,oBAAoB;EAEpBxD,QAAQ,CAACkK,SAAT,CAAoB,iBAApB,EAAuClG,iCAAvC;EACAhE,QAAQ,CAACkK,SAAT,CAAoB,kBAApB,EAAwC,UAAUC,KAAV,EAAkB;IACtDpE,aAAa,CAAEoE,KAAK,CAACzF,aAAR,EAAuByF,KAAK,CAACjI,YAA7B,CAAb;EACH,CAFD;EAGAlC,QAAQ,CAACkK,SAAT,CAAoB,kBAApB,EAAwC,UAAUC,KAAV,EAAkB;IACtD5E,0BAA0B,CAAE4E,KAAK,CAACC,MAAR,CAA1B;EACH,CAFD;EAIApK,QAAQ,CAACqK,eAAT,CAA0B;IACtBC,OAAO,EAAE,OADa;IAEtBC,KAAK,EAAE,MAFe;IAGtBC,QAAQ,EAAE,UAAUvG,SAAV,EAAsB;MAC5B,IAAIA,SAAS,IAAIA,SAAS,CAACwG,UAA3B,EAAwC;QACpC3K,CAAC,CAAC6C,OAAF,CAAWsB,SAAS,CAACwG,UAArB,EAAiC,UAAUA,UAAV,EAAuB;UACpD,IAAIvI,YAAY,GAAGuI,UAAU,CAACvI,YAA9B;UACA,IAAI0E,YAAY,GAAG6D,UAAU,CAAC7D,YAA9B;UACA,IAAIlC,aAAa,GAAG+F,UAAU,CAAC/F,aAA/B;UAEA5D,OAAO,CAAC6F,OAAR,CAAiBzE,YAAjB,EAA+BwC,aAA/B,EAA8CkC,YAA9C,EAA4D,EAAE,GAAG6D,UAAU,CAACxF,KAAhB;YAAuBgC,gBAAgB,EAAE;UAAzC,CAA5D,EAA8GlC,IAA9G,CAAoH,YAAW;YAC3H,IAAId,SAAS,GAAG;cACZyG,eAAe,EAAE,CAAExI,YAAF,CADL;cAEZyI,mBAAmB,EAAE,KAFT;cAGZC,cAAc,EAAElG;YAHJ,CAAhB;YAKA1E,QAAQ,CAAC6K,OAAT,CAAkB,qBAAlB,EAAyC5G,SAAzC;UACH,CAPD;QAQH,CAbD;MAcH;IACJ;EApBqB,CAA1B;AAsBH,CAnCM;AAqCPnD,OAAO,GAAG;EACN6F,OADM;EAENyC,4BAFM;EAGNhD,cAHM;EAIN/B,yBAJM;EAKNuF,YALM;EAMNI,iBANM;EAONR;AAPM,CAAV;AASA,eAAe1I,OAAf;AAEAkJ,iBAAiB"},"metadata":{},"sourceType":"module"}
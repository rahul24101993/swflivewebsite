{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Montior\n *\n * @module js/splmStatsPerformance\n * @publishedApolloService\n */import _ from'lodash';import{STATE}from'js/splmStatsProfiler';/**\n * Instances of this class represent a Monitor\n *\n * @class SPLMStatsPerformance\n */function SPLMStatsPerformance(profilerFactory){let self=this;let _listeners=[];let _benchmark=null;self.addListener=function(listener){_listeners.push(listener);};self.setBenchmark=function(benchmark){_benchmark=benchmark;};self.addReporter=function(reporter){if(_benchmark){_benchmark.addReporter(reporter);}};self.setTitle=function(title){_benchmark.setTitle(title);};/**\n     * Starts the monitoring -> Starts each profiler, then waits for the page to be completely settled (Ng, DOM, Network)\n     * Then promise resolves, and we report the data for each reporter attached\n     */self.run=function(){if(!self._profiler||self._profiler.state===STATE.DONE){_benchmark.start();self._profiler=profilerFactory.createProfiler();self._profiler.profile().then(elapsed=>{_benchmark.stop();_benchmark.report(elapsed);});}else{self._profiler.resetWait();}};self.enable=function(){_.forEach(_listeners,function(listener){listener.start(self);});};self.disable=function(){_.forEach(_listeners,function(listener){listener.stop(self);});};return self;}export default SPLMStatsPerformance;","map":null,"metadata":{},"sourceType":"module"}
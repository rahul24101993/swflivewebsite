{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwSearchBreadcrumbChipsUtils\n */\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport _ from 'lodash';\n/**\n * Build master list of chips to display in breadcrumb location\n * @param {*} searchObject context for render function interpolation\n * @returns array of chips to display\n */\n\nexport let buildSearchChips = (searchObject, existingBreadcrumbChips) => {\n  let chips = [];\n  var parentChip;\n  var appliedFilters = [];\n  let appliedFiltersExist = searchObject && searchObject.appliedFilters && searchObject.appliedFilters.length > 0;\n  let categoriesExist = searchObject.categories && searchObject.categories.length > 0;\n  let specialCategoriesExist = searchObject.categoriesForRangeSearches && searchObject.categoriesForRangeSearches.length > 0;\n  let isFacetSearch = searchObject.isFacetSearch;\n\n  if (appliedFiltersExist && categoriesExist && !isFacetSearch) {\n    appliedFilters = removeDuplicateDateFilters(searchObject.appliedFilters); //Get the display value of the Category to display on the chip\n\n    for (var i = 0; i < appliedFilters.length; i++) {\n      for (var j = 0; j < searchObject.categories.length; j++) {\n        switch (searchObject.categories[j].type) {\n          case 'StringFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'StringFilter');\n            break;\n\n          case 'NumericFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'NumericFilter');\n            break;\n\n          case 'DateFilter':\n            parentChip = getDateFilterParentChip(searchObject.categories[j], appliedFilters[i], searchObject.appliedFilters);\n            break;\n\n          case 'RadioFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'RadioFilter');\n            break;\n\n          case 'ObjectFilter':\n            parentChip = getFilterParentChip(searchObject.categories[j], appliedFilters[i], 'ObjectFilter');\n            break;\n        } //Check if parentChip is populated and add to chips\n\n\n        if (parentChip) {\n          chips.push(parentChip);\n          parentChip = undefined;\n        }\n      }\n    }\n  } else if (appliedFiltersExist && specialCategoriesExist && !isFacetSearch) {\n    appliedFilters = removeDuplicateDateFilters(searchObject.appliedFilters); //Get the display value of the Category to display on the chip\n\n    for (var i = 0; i < appliedFilters.length; i++) {\n      for (var j = 0; j < searchObject.categoriesForRangeSearches.length; j++) {\n        switch (searchObject.categoriesForRangeSearches[j].type) {\n          case 'StringFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'StringFilter');\n            break;\n\n          case 'NumericFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'NumericFilter');\n            break;\n\n          case 'DateFilter':\n            parentChip = getDateFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], searchObject.appliedFilters);\n            break;\n\n          case 'RadioFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'RadioFilter');\n            break;\n\n          case 'ObjectFilter':\n            parentChip = getFilterParentChip(searchObject.categoriesForRangeSearches[j], appliedFilters[i], 'ObjectFilter');\n            break;\n        } //Check if parentChip is populated and add to chips\n\n\n        if (parentChip) {\n          chips.push(parentChip);\n          parentChip = undefined;\n        }\n      }\n    }\n  } else if (isFacetSearch) {\n    return existingBreadcrumbChips;\n  }\n\n  return chips;\n};\n/**\n * Remove selected chip from current list of displayed or overflow chips\n * @param {*} searchObject searchObject\n * @param {*} chipToRemove selected chip to remove\n * @param {*} data data\n * @param {*} chiplistRef displayed chip ref\n * @returns display and overflow chips for rerender\n */\n\nexport let removeSelectedChip = function (searchObject, chipToRemove, data, chiplistRef) {\n  let displayChips = _.cloneDeep(data.displayBreadcrumbChips);\n\n  let overflownChips = [];\n\n  switch (chipToRemove.chipFilterType) {\n    case 'StringFilter':\n    case 'NumericFilter':\n      removeChip(searchObject, chipToRemove);\n      break;\n\n    case 'DateFilter':\n      removeDateChip(searchObject, chipToRemove);\n      break;\n\n    case 'RadioFilter':\n      removeRadioChip(searchObject, chipToRemove);\n      break;\n\n    case 'ObjectFilter':\n      removeObjectChip(searchObject, chipToRemove);\n      break;\n  }\n\n  for (let i = 0; displayChips.length > i; i++) {\n    if (displayChips[i].labelDisplayName === chipToRemove.labelDisplayName) {\n      displayChips.splice(i, 1);\n    }\n  }\n\n  return {\n    displayChips,\n    overflownChips\n  };\n};\n/**\n * Creates the chip that will be added to the master chip list\n * @function createChip\n * @param {Object} parent If chip is a parent chip\n * @param {Object} numberOfChips if parent chip how many children chips exist\n * @param {Object} categoryName name of category\n * @param {Object} filterDisplayName display name of filter\n * @param {Object} internalCategoryName intenal category name\n * @param {Object} internalFilterName intenal filter name\n * @param {Object} filterType type of filter\n * @param {Object} childrenChips if parent this is children chips to display in group\n * @param {Object} defaultSelection default selection, this selection will not display remove button\n * @returns {Object} breadcrumbChip\n */\n\nfunction createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection) {\n  let displayLabel;\n\n  if (numberOfChips > 1 && parent) {\n    displayLabel = categoryName + ': ' + numberOfChips + ' Selected';\n    internalFilterName = 'parentChip';\n  } else {\n    displayLabel = categoryName + ': ' + filterDisplayName;\n  }\n\n  let breadcrumbChip = {\n    uiIconId: 'miscRemoveBreadcrumb',\n    chipType: 'BUTTON',\n    selected: false,\n    labelDisplayName: displayLabel,\n    labelInternalCategoryName: internalCategoryName,\n    labelInternalFilterName: internalFilterName,\n    chipFilterType: filterType,\n    className: 'aw-search-breadcrumb-chip'\n  };\n\n  if (filterType === 'RadioFilter' && defaultSelection) {\n    breadcrumbChip.uiIconId = '';\n  }\n\n  if (childrenChips && childrenChips.length > 1) {\n    breadcrumbChip.children = childrenChips;\n  }\n\n  return breadcrumbChip;\n}\n/**\n * Returns active filters after removing repetitive date filters ie. year_week filters\n * @function removeDuplicateDateFilters\n * @param {Object} activeFilters current active filter\n * @returns {Object} editedActiveFilters\n */\n\n\nfunction removeDuplicateDateFilters(appliedFilters) {\n  var editedAppliedFilters = [];\n  var dateExists = false;\n\n  for (let i = 0; i < appliedFilters.length; i++) {\n    //Handles checkbox date filters selected\n    if (appliedFilters[i].name.includes('_0Z0_')) {\n      if (appliedFilters[i].name.includes('_month') || appliedFilters[i].name.includes('_week')) {\n        appliedFilters.slice(i, 1);\n      } else {\n        editedAppliedFilters.push(appliedFilters[i]);\n      }\n    } //Handle the Date Range Filter being set\n    else if (appliedFilters[i].type === 'DateFilter') {\n      for (let j = 0; j < appliedFilters.length; j++) {\n        if (appliedFilters[i].name === appliedFilters[j].name.substr(0, appliedFilters[j].name.indexOf('_0Z0'))) {\n          dateExists = true;\n        }\n      }\n\n      if (dateExists) {\n        appliedFilters.slice(i, 1);\n        dateExists = false;\n      } else {\n        editedAppliedFilters.push(appliedFilters[i]);\n        dateExists = false;\n      }\n    } else {\n      editedAppliedFilters.push(appliedFilters[i]);\n    }\n  }\n\n  return editedAppliedFilters;\n}\n/**\n * Returns a parent chip to build chips for addition to the display chips array\n * @function getFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\n\n\nfunction getFilterParentChip(category, activeFilter, filterType) {\n  var childrenChips = [];\n  var defaultSelection = false;\n  var parent;\n\n  if (category.internalName === activeFilter.name) {\n    //Create initial chip. If multiple of same category exist create child chip\n    for (var k = 0; k < activeFilter.values.length; k++) {\n      var categoryName = category.displayName;\n      var numberOfChips = activeFilter.values.length;\n      var internalCategoryName = activeFilter.name;\n      var internalFilterName = activeFilter.values[k];\n      var filterDisplayName = category.filterValues && category.filterValues.length > 0 ? category.filterValues[0].name : undefined;\n\n      if (activeFilter.values[k].includes('_NumericRange_')) {\n        parent = false;\n        filterDisplayName = getNumericString(activeFilter.values[k]);\n      }\n\n      if (category.type === 'RadioFilter') {\n        if (activeFilter.values[0] === category.filterValues[0].internalName) {\n          defaultSelection = true;\n        }\n      }\n\n      if (numberOfChips > 1) {\n        if (category.type === 'StringFilter' || category.type === 'ObjectFilter') {\n          for (var l = 0; l < category.filterValues.length; l++) {\n            if (category.filterValues[l].internalName === internalFilterName) {\n              parent = false;\n              filterDisplayName = category.filterValues[l].name;\n              let chipChild = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false);\n              childrenChips.push(chipChild);\n            }\n          }\n        } else if (category.type === 'NumericFilter') {\n          parent = false;\n          filterDisplayName = activeFilter.values[k].replace('_NumericFilter_', '');\n\n          if (activeFilter.values[k].includes('_NumericRange_')) {\n            parent = false;\n            filterDisplayName = getNumericString(activeFilter.values[k]);\n          }\n\n          let chipChild = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false);\n          childrenChips.push(chipChild);\n        }\n      }\n    }\n\n    parent = true;\n    return createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection);\n  }\n}\n/**\n * Returns a date parent chip to build chips for addition to the display chips array\n * @function getDateFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\n\n\nfunction getDateFilterParentChip(category, currentActiveFilter, activeFilter) {\n  var childrenChips = [];\n  var parent;\n  var filterDisplayName;\n\n  if (category.filterValues.length > 0) {\n    for (var datechipfilter = 0; datechipfilter < category.filterValues.length; datechipfilter++) {\n      if (category.filterValues[datechipfilter].categoryName === currentActiveFilter.name || category.internalName === currentActiveFilter.name) {\n        //Get Category Name and Internal Category value\n        var categoryName = category.displayName; //Get Group of DateFilter Chips\n\n        var dateFilterArray = getDateFilterChipArray(activeFilter, category);\n        let numberOfChips = dateFilterArray.length;\n        var internalFilterName = dateFilterArray[0].values[0];\n        var internalCategoryName = dateFilterArray[0].name; //Get filter display name. If Filter Range get the proper Filter display name then\n\n        filterDisplayName = dateFilterArray[0].values[0] === '\"$NONE\"' ? dateFilterArray[0].values[0] : category.filterValues[0].name;\n\n        if (dateFilterArray[0].values[0].length > 13 && dateFilterArray[0].values[0].substr(0, 12) === '_DateFilter_') {\n          let filterDisplayArray = getDateString(dateFilterArray[0].values[0]);\n          filterDisplayName = filterDisplayArray.displayName;\n        } //Incase of child chips get children chips\n\n\n        if (numberOfChips > 1) {\n          for (var k = 0; k < dateFilterArray.length; k++) {\n            parent = false;\n            internalCategoryName = dateFilterArray[k].name;\n            internalFilterName = dateFilterArray[k].values[0];\n\n            if (dateFilterArray[k].values[0].length > 13 && dateFilterArray[k].values[0].substr(0, 12) === '_DateFilter_') {\n              let filterDisplayArray = getDateString(dateFilterArray[k].values[0]);\n              filterDisplayName = filterDisplayArray.displayName;\n            } else {\n              for (var l = 0; l < category.filterValues.length; l++) {\n                if (category.filterValues[l].internalName === dateFilterArray[k].values[0]) {\n                  filterDisplayName = category.filterValues[l].name;\n                }\n              }\n            }\n\n            let chipChild = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', null, false);\n            childrenChips.push(chipChild);\n          }\n        }\n\n        parent = true;\n        var parentChip = createChip(parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', childrenChips, false);\n        break;\n      }\n    }\n  } else if (category.filterValues && category.filterValues.length === 0 && category.internalName === currentActiveFilter.name && category.dateRangeString && category.dateRangeString.length > 0) {\n    filterDisplayName = getDateString(category.dateRangeString).displayName;\n    parentChip = createChip(parent, 1, category.displayName, filterDisplayName, category.internalName, category.dateRangeString, 'DateFilter', [], false);\n  }\n\n  return parentChip;\n}\n/**\n * Returns dateRange in proper format for date chip display\n * @function getDateString\n * @param {Object} dateString filter string date value\n * @returns {Object} dateRange\n */\n\n\nfunction getDateString(dateString) {\n  if (dateString.length > 19) {\n    var offsetString = dateString.substring(12);\n\n    if (offsetString.length > 4) {\n      var startDate = offsetString.substr(0, offsetString.indexOf('_TO_'));\n      var endDate = offsetString.substr(offsetString.indexOf('_TO_') + 4, offsetString.length);\n    }\n\n    if (startDate === '*') {\n      startDate = '0001-01-01T00:00:00+00:00';\n    }\n\n    startDate = filterPanelUtils.getDate(searchFilterService.processDateStringOffset(startDate));\n    endDate = filterPanelUtils.getDate(searchFilterService.processDateStringOffset(endDate));\n    var dateRange = filterPanelUtils.getDateRangeDisplayString(startDate, endDate);\n  }\n\n  return dateRange;\n}\n/**\n * Returns group of date filters in array\n * @function getDateFilterChipArray\n * @param {Object} activeFilterArray all current active filters\n * @param {Object} filterCategory current filter category\n * @returns {Object} dateFilterArray\n */\n\n\nfunction getDateFilterChipArray(activeFilterArray, filterCategory) {\n  var dateFilterArray = [];\n\n  for (var i = 0; i < activeFilterArray.length; i++) {\n    if (activeFilterArray[i].name === filterCategory.internalName) {\n      dateFilterArray.push(activeFilterArray[i]);\n    } else {\n      let shortFilterIntenal = activeFilterArray[i].name.substr(0, activeFilterArray[i].name.indexOf('_0Z0'));\n\n      if (shortFilterIntenal === filterCategory.internalName) {\n        dateFilterArray.push(activeFilterArray[i]);\n      }\n    }\n  }\n\n  return dateFilterArray;\n}\n/**\n * Returns filterDisplayName in proper format for numeric chip display\n * @function getNumericString\n * @param {Object} numericString from the getCategoryValues\n * @returns {Object} filterDisplayName\n */\n\n\nfunction getNumericString(numericString) {\n  if (numericString.length > 4) {\n    let value = numericString.replace('_NumericRange_', '');\n    let startValue = value.substr(0, value.indexOf('_TO_'));\n    let endValue = value.substr(value.indexOf('_TO_') + 4, value.length);\n\n    if (!startValue) {\n      var filterDisplayName = 'To ' + endValue;\n    } else if (!endValue) {\n      var filterDisplayName = 'From ' + startValue;\n    } else {\n      var filterDisplayName = startValue + ' - ' + endValue;\n    }\n  }\n\n  return filterDisplayName;\n}\n/**\n * Updates search object with removed radio filter\n * @function removeRadioChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeRadioChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n\n  for (var i = 0; i < newSearchObject.categories.length; i++) {\n    if (chipToRemove.labelInternalCategoryName === newSearchObject.categories[i].internalName) {\n      if (chipToRemove.labelInternalFilterName === newSearchObject.categories[i].filterValues[0].internalName) {\n        newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = [newSearchObject.categories[i].filterValues[1].internalName];\n      } else {\n        newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = [newSearchObject.categories[i].filterValues[0].internalName];\n      }\n    }\n  }\n\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n/**\n * Updates search object with removed object filter\n * @function removeObjectChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeObjectChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n  let updatedFilters = searchFilterService.removeDependentClassificationFilters({\n    internalName: chipToRemove.labelInternalFilterName\n  });\n\n  if (updatedFilters.length > 0) {\n    newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = updatedFilters;\n  } else {\n    delete newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName];\n  }\n\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n/**\n * Updates search object with after removing single string filter\n * @function removeSingleStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeSingleChip(newSearchObject, chipToRemove) {\n  let filtersForCategory = newSearchObject.activeFilters && newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] ? newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] : [];\n  let updatedFilters = [];\n\n  for (let index = 0; index < filtersForCategory.length; index++) {\n    if (filtersForCategory[index] !== chipToRemove.labelInternalFilterName) {\n      updatedFilters.push(filtersForCategory[index]);\n    }\n  }\n\n  if (updatedFilters.length > 0) {\n    newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName] = updatedFilters;\n  } else {\n    delete newSearchObject.activeFilters[chipToRemove.labelInternalCategoryName];\n  }\n\n  if (newSearchObject.activeFilters && Object.keys(newSearchObject.activeFilters).length > 0) {\n    newSearchObject.activeFilterString = searchFilterService.buildFilterString(newSearchObject.activeFilters);\n  } else {\n    newSearchObject.activeFilterString = '';\n  }\n}\n/**\n * Updates search object after removing multiple string filters from the same category\n * @function removeStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove chip which is to be removed\n */\n\n\nfunction removeMultipleChip(newSearchObject, chipToRemove) {\n  let children = chipToRemove.children;\n\n  for (let index = 0; index < children.length; index++) {\n    removeSingleChip(newSearchObject, children[index]);\n  }\n}\n/**\n * Updates search object after removing string chip\n * @function removeStringChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n\n  if (chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children) {\n    removeSingleChip(newSearchObject, chipToRemove);\n  } else {\n    removeMultipleChip(newSearchObject, chipToRemove);\n  }\n\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n/**\n * Updates search object with removed date filter\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\n\n\nfunction removeDateChip(searchObject, chipToRemove) {\n  const newSearchObject = { ...searchObject.value\n  };\n\n  if (chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children) {\n    removeSingleChip(newSearchObject, chipToRemove);\n  } else {\n    removeMultipleChip(newSearchObject, chipToRemove);\n  }\n\n  newSearchObject.activeFilters = searchFilterService.removeDependentDateFilters(newSearchObject.activeFilters);\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n}\n\nexport let checkSearchLocation = searchObject => {\n  //Check if in Panel or Global Search Area\n  if (searchObject && searchObject.criteria && searchObject.criteria.searchFromLocation) {\n    let currentLocation = _.cloneDeep(searchObject.criteria.searchFromLocation);\n\n    if (currentLocation === 'global') {\n      return true;\n    }\n\n    return false;\n  }\n\n  return true;\n};\n/**\n * ClearAll action removes all selected chips in the breadcrumb location\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n */\n\nexport let clearAll = searchObject => {\n  const newSearchObject = { ...searchObject.value\n  };\n  const categories = searchFilterService.clearAllSelectedFiltersAndRanges(newSearchObject.categories, newSearchObject.activeFilters, newSearchObject.positivePendingFilters);\n  newSearchObject.categories = categories;\n\n  if (newSearchObject.skipFiltersForClearAll && newSearchObject.activeFilters && newSearchObject.activeFilterMap && Object.keys(newSearchObject.activeFilters).length > 0) {\n    for (const [key, value] of Object.entries(newSearchObject.activeFilters)) {\n      if (!newSearchObject.skipFiltersForClearAll.includes(key)) {\n        delete newSearchObject.activeFilters[key];\n        delete newSearchObject.activeFilterMap[key];\n      }\n    }\n  } else {\n    newSearchObject.activeFilterMap = {};\n    newSearchObject.activeFilters = {};\n  }\n\n  delete newSearchObject.positivePendingFilters;\n  delete newSearchObject.negativePendingFilters;\n  delete newSearchObject.allCategoriesVisible;\n  newSearchObject.bulkFiltersApplied = true;\n  searchObject.update(newSearchObject);\n};\nexport let calculateOverflow = (elementRefList, totalVisibleArea, totalVisibleHeight, breadcrumbChips, currentOverflowChips, displayBreadcrumbChips, inHeader, searchFilterCategoryExpandMore, visibleChipAreaMaintained) => {\n  var tabElems;\n  var displayChips = [];\n  var overflownChips = [];\n  var breakIndex = null;\n  var filledHeader = true;\n\n  if (elementRefList) {\n    let chiplist = elementRefList.get('chiplist').current;\n\n    if (!chiplist) {\n      return breakIndex;\n    }\n\n    if (!tabElems) {\n      tabElems = chiplist.querySelectorAll('.aw-widgets-chip');\n    }\n\n    let arr = [...tabElems];\n    var tabPadding = 16;\n    let searchCountAreaSpacing = 0;\n\n    if (chiplist.parentNode.parentElement && chiplist.parentNode.parentElement.firstChild && chiplist.parentNode.parentElement.firstChild.childNodes && chiplist.parentNode.parentElement.firstChild.childNodes.length > 0 && chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth) {\n      searchCountAreaSpacing = chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth;\n    }\n\n    let cmdMoreButtonSpacing = 80;\n    let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientWidth + 24 : 24;\n\n    if (!totalVisibleArea || !visibleChipAreaMaintained) {\n      totalVisibleArea = chiplist.parentElement.parentElement ? chiplist.parentElement.parentElement.clientWidth : 0;\n    }\n\n    var totalCalculatedArea = tabPadding + searchCountAreaSpacing + cmdMoreButtonSpacing + clearButtonSpacing; //Determine where overflow takes place. If overflow is already hit then this keeps breakIndex as undefined\n\n    for (var i = 0; i < arr.length; i++) {\n      totalCalculatedArea = arr[i].clientWidth + totalCalculatedArea;\n\n      if (totalCalculatedArea > totalVisibleArea) {\n        breakIndex = i;\n        break;\n      }\n    }\n\n    if (!inHeader) {\n      if (!totalVisibleHeight || !visibleChipAreaMaintained) {\n        totalVisibleHeight = chiplist.parentElement.parentElement.clientHeight / 2;\n      }\n\n      let chipElementHeight = chiplist.parentElement.clientHeight;\n      let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientHeight : 0;\n      cmdMoreButtonSpacing = 32;\n      tabPadding = 32;\n      totalCalculatedArea = tabPadding + clearButtonSpacing + cmdMoreButtonSpacing + chipElementHeight;\n\n      if (totalCalculatedArea > totalVisibleHeight) {\n        for (i = 0; i < arr.length; i++) {\n          totalCalculatedArea -= 26;\n\n          if (totalCalculatedArea < totalVisibleHeight) {\n            breakIndex = arr.length - i;\n            break;\n          }\n        }\n      }\n    } //Check if header is completely filled. Used when going from a smaller window size to larger window size\n    //diffChipArea helps with accounting for scenarios where there is only a small space difference in calculated and actual size\n\n\n    let diffChipArea = totalVisibleArea - totalCalculatedArea - 200;\n\n    if (totalCalculatedArea < totalVisibleArea - 200 && diffChipArea > tabPadding) {\n      filledHeader = false;\n    }\n\n    if (breakIndex === 0 && inHeader) {\n      displayChips = [];\n      overflownChips = breadcrumbChips;\n    } else if (breakIndex > 0) {\n      overflownChips = breadcrumbChips.slice(breakIndex);\n      displayChips = breadcrumbChips.slice(0, breakIndex);\n    } else if (breadcrumbChips.length >= 7) {\n      overflownChips = breadcrumbChips.slice(1);\n      displayChips = breadcrumbChips.slice(0, 1);\n    } else if (currentOverflowChips.length > 0 && arr.length < breadcrumbChips.length && filledHeader) {\n      overflownChips = breadcrumbChips.slice(arr.length);\n      displayChips = breadcrumbChips.slice(0, arr.length);\n    } else {\n      displayChips = breadcrumbChips;\n      overflownChips = [];\n    }\n  } else if (currentOverflowChips.length !== 0 && displayBreadcrumbChips.length !== 0) {\n    overflownChips = currentOverflowChips;\n    displayChips = displayBreadcrumbChips;\n  } else {\n    overflownChips = [];\n    displayChips = breadcrumbChips;\n  }\n\n  let displayOverflowButton = overflownChips.length + ' ' + searchFilterCategoryExpandMore;\n  return {\n    displayChips,\n    overflownChips,\n    displayOverflowButton,\n    totalVisibleArea,\n    totalVisibleHeight\n  };\n};\nexport default {\n  buildSearchChips,\n  removeSelectedChip,\n  checkSearchLocation,\n  clearAll,\n  calculateOverflow\n};","map":{"version":3,"names":["filterPanelUtils","searchFilterService","_","buildSearchChips","searchObject","existingBreadcrumbChips","chips","parentChip","appliedFilters","appliedFiltersExist","length","categoriesExist","categories","specialCategoriesExist","categoriesForRangeSearches","isFacetSearch","removeDuplicateDateFilters","i","j","type","getFilterParentChip","getDateFilterParentChip","push","undefined","removeSelectedChip","chipToRemove","data","chiplistRef","displayChips","cloneDeep","displayBreadcrumbChips","overflownChips","chipFilterType","removeChip","removeDateChip","removeRadioChip","removeObjectChip","labelDisplayName","splice","createChip","parent","numberOfChips","categoryName","filterDisplayName","internalCategoryName","internalFilterName","filterType","childrenChips","defaultSelection","displayLabel","breadcrumbChip","uiIconId","chipType","selected","labelInternalCategoryName","labelInternalFilterName","className","children","editedAppliedFilters","dateExists","name","includes","slice","substr","indexOf","category","activeFilter","internalName","k","values","displayName","filterValues","getNumericString","l","chipChild","replace","currentActiveFilter","datechipfilter","dateFilterArray","getDateFilterChipArray","filterDisplayArray","getDateString","dateRangeString","dateString","offsetString","substring","startDate","endDate","getDate","processDateStringOffset","dateRange","getDateRangeDisplayString","activeFilterArray","filterCategory","shortFilterIntenal","numericString","value","startValue","endValue","newSearchObject","activeFilters","bulkFiltersApplied","update","updatedFilters","removeDependentClassificationFilters","removeSingleChip","filtersForCategory","index","Object","keys","activeFilterString","buildFilterString","removeMultipleChip","removeDependentDateFilters","checkSearchLocation","criteria","searchFromLocation","currentLocation","clearAll","clearAllSelectedFiltersAndRanges","positivePendingFilters","skipFiltersForClearAll","activeFilterMap","key","entries","negativePendingFilters","allCategoriesVisible","calculateOverflow","elementRefList","totalVisibleArea","totalVisibleHeight","breadcrumbChips","currentOverflowChips","inHeader","searchFilterCategoryExpandMore","visibleChipAreaMaintained","tabElems","breakIndex","filledHeader","chiplist","get","current","querySelectorAll","arr","tabPadding","searchCountAreaSpacing","parentNode","parentElement","firstChild","childNodes","clientWidth","cmdMoreButtonSpacing","clearButtonSpacing","lastChild","totalCalculatedArea","clientHeight","chipElementHeight","diffChipArea","displayOverflowButton"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/AwSearchBreadcrumbChipsUtils.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwSearchBreadcrumbChipsUtils\n */\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport _ from 'lodash';\n\n\n/**\n * Build master list of chips to display in breadcrumb location\n * @param {*} searchObject context for render function interpolation\n * @returns array of chips to display\n */\nexport let buildSearchChips = ( searchObject, existingBreadcrumbChips ) => {\n    let chips = [];\n    var parentChip;\n    var appliedFilters = [];\n    let appliedFiltersExist = searchObject && searchObject.appliedFilters && searchObject.appliedFilters.length > 0;\n    let categoriesExist = searchObject.categories && searchObject.categories.length > 0;\n    let specialCategoriesExist = searchObject.categoriesForRangeSearches && searchObject.categoriesForRangeSearches.length > 0;\n    let isFacetSearch = searchObject.isFacetSearch;\n    if( appliedFiltersExist && categoriesExist && !isFacetSearch ) {\n        appliedFilters = removeDuplicateDateFilters( searchObject.appliedFilters );\n\n        //Get the display value of the Category to display on the chip\n        for( var i = 0; i < appliedFilters.length; i++ ) {\n            for( var j = 0; j < searchObject.categories.length; j++ ) {\n                switch ( searchObject.categories[ j ].type ) {\n                    case 'StringFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'StringFilter' );\n                        break;\n                    case 'NumericFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'NumericFilter' );\n                        break;\n                    case 'DateFilter':\n                        parentChip = getDateFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], searchObject.appliedFilters );\n                        break;\n                    case 'RadioFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'RadioFilter' );\n                        break;\n                    case 'ObjectFilter':\n                        parentChip = getFilterParentChip( searchObject.categories[ j ], appliedFilters[ i ], 'ObjectFilter' );\n                        break;\n                }\n                //Check if parentChip is populated and add to chips\n                if( parentChip ) {\n                    chips.push( parentChip );\n                    parentChip = undefined;\n                }\n            }\n        }\n    } else if( appliedFiltersExist && specialCategoriesExist && !isFacetSearch ) {\n        appliedFilters = removeDuplicateDateFilters( searchObject.appliedFilters );\n        //Get the display value of the Category to display on the chip\n        for( var i = 0; i < appliedFilters.length; i++ ) {\n            for( var j = 0; j < searchObject.categoriesForRangeSearches.length; j++ ) {\n                switch ( searchObject.categoriesForRangeSearches[ j ].type ) {\n                    case 'StringFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'StringFilter' );\n                        break;\n                    case 'NumericFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'NumericFilter' );\n                        break;\n                    case 'DateFilter':\n                        parentChip = getDateFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], searchObject.appliedFilters );\n                        break;\n                    case 'RadioFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'RadioFilter' );\n                        break;\n                    case 'ObjectFilter':\n                        parentChip = getFilterParentChip( searchObject.categoriesForRangeSearches[ j ], appliedFilters[ i ], 'ObjectFilter' );\n                        break;\n                }\n                //Check if parentChip is populated and add to chips\n                if( parentChip ) {\n                    chips.push( parentChip );\n                    parentChip = undefined;\n                }\n            }\n        }\n    } else if( isFacetSearch ) {\n        return existingBreadcrumbChips;\n    }\n    return chips;\n};\n\n/**\n * Remove selected chip from current list of displayed or overflow chips\n * @param {*} searchObject searchObject\n * @param {*} chipToRemove selected chip to remove\n * @param {*} data data\n * @param {*} chiplistRef displayed chip ref\n * @returns display and overflow chips for rerender\n */\nexport let removeSelectedChip = function( searchObject, chipToRemove, data, chiplistRef ) {\n    let displayChips = _.cloneDeep( data.displayBreadcrumbChips );\n    let overflownChips = [];\n\n    switch ( chipToRemove.chipFilterType ) {\n        case 'StringFilter':\n        case 'NumericFilter':\n            removeChip( searchObject, chipToRemove );\n            break;\n        case 'DateFilter':\n            removeDateChip( searchObject, chipToRemove );\n            break;\n        case 'RadioFilter':\n            removeRadioChip( searchObject, chipToRemove );\n            break;\n        case 'ObjectFilter':\n            removeObjectChip( searchObject, chipToRemove );\n            break;\n    }\n\n    for ( let i = 0; displayChips.length > i; i++ ) {\n        if ( displayChips[i].labelDisplayName === chipToRemove.labelDisplayName ) {\n            displayChips.splice( i, 1 );\n        }\n    }\n\n    return { displayChips, overflownChips };\n};\n\n/**\n * Creates the chip that will be added to the master chip list\n * @function createChip\n * @param {Object} parent If chip is a parent chip\n * @param {Object} numberOfChips if parent chip how many children chips exist\n * @param {Object} categoryName name of category\n * @param {Object} filterDisplayName display name of filter\n * @param {Object} internalCategoryName intenal category name\n * @param {Object} internalFilterName intenal filter name\n * @param {Object} filterType type of filter\n * @param {Object} childrenChips if parent this is children chips to display in group\n * @param {Object} defaultSelection default selection, this selection will not display remove button\n * @returns {Object} breadcrumbChip\n */\nfunction createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection ) {\n    let displayLabel;\n\n    if ( numberOfChips > 1 && parent ) {\n        displayLabel = categoryName + ': ' + numberOfChips + ' Selected';\n        internalFilterName = 'parentChip';\n    } else {\n        displayLabel = categoryName + ': ' + filterDisplayName;\n    }\n\n    let breadcrumbChip = {\n        uiIconId: 'miscRemoveBreadcrumb',\n        chipType: 'BUTTON',\n        selected: false,\n        labelDisplayName: displayLabel,\n        labelInternalCategoryName: internalCategoryName,\n        labelInternalFilterName: internalFilterName,\n        chipFilterType: filterType,\n        className: 'aw-search-breadcrumb-chip'\n    };\n\n    if ( filterType === 'RadioFilter' && defaultSelection ) {\n        breadcrumbChip.uiIconId = '';\n    }\n\n    if ( childrenChips && childrenChips.length > 1 ) {\n        breadcrumbChip.children = childrenChips;\n    }\n\n    return breadcrumbChip;\n}\n\n/**\n * Returns active filters after removing repetitive date filters ie. year_week filters\n * @function removeDuplicateDateFilters\n * @param {Object} activeFilters current active filter\n * @returns {Object} editedActiveFilters\n */\nfunction removeDuplicateDateFilters( appliedFilters ) {\n    var editedAppliedFilters = [];\n    var dateExists = false;\n    for( let i = 0; i < appliedFilters.length; i++ ) {\n        //Handles checkbox date filters selected\n        if( appliedFilters[ i ].name.includes( '_0Z0_' ) ) {\n            if( appliedFilters[ i ].name.includes( '_month' ) || appliedFilters[ i ].name.includes( '_week' ) ) {\n                appliedFilters.slice( i, 1 );\n            } else {\n                editedAppliedFilters.push( appliedFilters[ i ] );\n            }\n        }\n        //Handle the Date Range Filter being set\n        else if( appliedFilters[ i ].type === 'DateFilter' ) {\n            for( let j = 0; j < appliedFilters.length; j++ ) {\n                if( appliedFilters[ i ].name === appliedFilters[ j ].name.substr( 0, appliedFilters[ j ].name.indexOf( '_0Z0' ) ) ) {\n                    dateExists = true;\n                }\n            }\n            if( dateExists ) {\n                appliedFilters.slice( i, 1 );\n                dateExists = false;\n            } else {\n                editedAppliedFilters.push( appliedFilters[ i ] );\n                dateExists = false;\n            }\n        } else {\n            editedAppliedFilters.push( appliedFilters[ i ] );\n        }\n    }\n    return editedAppliedFilters;\n}\n\n/**\n * Returns a parent chip to build chips for addition to the display chips array\n * @function getFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\nfunction getFilterParentChip( category, activeFilter, filterType ) {\n    var childrenChips = [];\n    var defaultSelection = false;\n    var parent;\n    if( category.internalName === activeFilter.name ) {\n        //Create initial chip. If multiple of same category exist create child chip\n        for( var k = 0; k < activeFilter.values.length; k++ ) {\n            var categoryName = category.displayName;\n            var numberOfChips = activeFilter.values.length;\n            var internalCategoryName = activeFilter.name;\n            var internalFilterName = activeFilter.values[ k ];\n            var filterDisplayName = category.filterValues && category.filterValues.length > 0 ? category.filterValues[ 0 ].name : undefined;\n            if( activeFilter.values[ k ].includes( '_NumericRange_' ) ) {\n                parent = false;\n                filterDisplayName = getNumericString( activeFilter.values[ k ] );\n            }\n            if( category.type === 'RadioFilter' ) {\n                if( activeFilter.values[ 0 ] === category.filterValues[ 0 ].internalName ) {\n                    defaultSelection = true;\n                }\n            }\n            if( numberOfChips > 1 ) {\n                if( category.type === 'StringFilter' || category.type === 'ObjectFilter' ) {\n                    for( var l = 0; l < category.filterValues.length; l++ ) {\n                        if( category.filterValues[ l ].internalName === internalFilterName ) {\n                            parent = false;\n                            filterDisplayName = category.filterValues[ l ].name;\n                            let chipChild = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false );\n                            childrenChips.push( chipChild );\n                        }\n                    }\n                } else if( category.type === 'NumericFilter' ) {\n                    parent = false;\n                    filterDisplayName = activeFilter.values[ k ].replace( '_NumericFilter_', '' );\n                    if( activeFilter.values[ k ].includes( '_NumericRange_' ) ) {\n                        parent = false;\n                        filterDisplayName = getNumericString( activeFilter.values[ k ] );\n                    }\n                    let chipChild = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, null, false );\n                    childrenChips.push( chipChild );\n                }\n            }\n        }\n        parent = true;\n        return createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, filterType, childrenChips, defaultSelection );\n    }\n}\n\n/**\n * Returns a date parent chip to build chips for addition to the display chips array\n * @function getDateFilterParentChip\n * @param {Object} category filterCategory\n * @param {Object} activeFilter current active filters\n * @param {Object} filterType filter type\n * @returns {Object} parentChip\n */\nfunction getDateFilterParentChip( category, currentActiveFilter, activeFilter ) {\n    var childrenChips = [];\n    var parent;\n    var filterDisplayName;\n    if( category.filterValues.length > 0 ) {\n        for( var datechipfilter = 0; datechipfilter < category.filterValues.length; datechipfilter++ ) {\n            if( category.filterValues[ datechipfilter ].categoryName === currentActiveFilter.name || category.internalName === currentActiveFilter.name ) {\n                //Get Category Name and Internal Category value\n                var categoryName = category.displayName;\n\n                //Get Group of DateFilter Chips\n                var dateFilterArray = getDateFilterChipArray( activeFilter, category );\n                let numberOfChips = dateFilterArray.length;\n                var internalFilterName = dateFilterArray[ 0 ].values[ 0 ];\n                var internalCategoryName = dateFilterArray[ 0 ].name;\n\n                //Get filter display name. If Filter Range get the proper Filter display name then\n                filterDisplayName = dateFilterArray[ 0 ].values[ 0 ] === '\"$NONE\"' ? dateFilterArray[ 0 ].values[ 0 ] : category.filterValues[ 0 ].name;\n                if( dateFilterArray[ 0 ].values[ 0 ].length > 13 && dateFilterArray[ 0 ].values[ 0 ].substr( 0, 12 ) === '_DateFilter_' ) {\n                    let filterDisplayArray = getDateString( dateFilterArray[ 0 ].values[ 0 ] );\n                    filterDisplayName = filterDisplayArray.displayName;\n                }\n\n                //Incase of child chips get children chips\n                if( numberOfChips > 1 ) {\n                    for( var k = 0; k < dateFilterArray.length; k++ ) {\n                        parent = false;\n                        internalCategoryName = dateFilterArray[ k ].name;\n                        internalFilterName = dateFilterArray[ k ].values[ 0 ];\n                        if( dateFilterArray[ k ].values[ 0 ].length > 13 && dateFilterArray[ k ].values[ 0 ].substr( 0, 12 ) === '_DateFilter_' ) {\n                            let filterDisplayArray = getDateString( dateFilterArray[ k ].values[ 0 ] );\n                            filterDisplayName = filterDisplayArray.displayName;\n                        } else {\n                            for( var l = 0; l < category.filterValues.length; l++ ) {\n                                if( category.filterValues[ l ].internalName === dateFilterArray[ k ].values[ 0 ] ) {\n                                    filterDisplayName = category.filterValues[ l ].name;\n                                }\n                            }\n                        }\n                        let chipChild = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', null, false );\n                        childrenChips.push( chipChild );\n                    }\n                }\n                parent = true;\n                var parentChip = createChip( parent, numberOfChips, categoryName, filterDisplayName, internalCategoryName, internalFilterName, 'DateFilter', childrenChips, false );\n                break;\n            }\n        }\n    } else if( category.filterValues && category.filterValues.length === 0\n        && category.internalName === currentActiveFilter.name && category.dateRangeString && category.dateRangeString.length > 0 ) {\n        filterDisplayName = getDateString( category.dateRangeString ).displayName;\n        parentChip = createChip( parent, 1, category.displayName, filterDisplayName, category.internalName, category.dateRangeString, 'DateFilter', [], false );\n    }\n    return parentChip;\n}\n\n/**\n * Returns dateRange in proper format for date chip display\n * @function getDateString\n * @param {Object} dateString filter string date value\n * @returns {Object} dateRange\n */\nfunction getDateString( dateString ) {\n    if( dateString.length > 19 ) {\n        var offsetString = dateString.substring( 12 );\n        if( offsetString.length > 4 ) {\n            var startDate = offsetString.substr( 0, offsetString.indexOf( '_TO_' ) );\n            var endDate = offsetString.substr( offsetString.indexOf( '_TO_' ) + 4, offsetString.length );\n        }\n\n        if( startDate === '*' ) {\n            startDate = '0001-01-01T00:00:00+00:00';\n        }\n\n        startDate = filterPanelUtils.getDate( searchFilterService.processDateStringOffset( startDate ) );\n        endDate = filterPanelUtils.getDate( searchFilterService.processDateStringOffset( endDate ) );\n\n        var dateRange = filterPanelUtils.getDateRangeDisplayString( startDate, endDate );\n    }\n    return dateRange;\n}\n\n/**\n * Returns group of date filters in array\n * @function getDateFilterChipArray\n * @param {Object} activeFilterArray all current active filters\n * @param {Object} filterCategory current filter category\n * @returns {Object} dateFilterArray\n */\nfunction getDateFilterChipArray( activeFilterArray, filterCategory ) {\n    var dateFilterArray = [];\n    for( var i = 0; i < activeFilterArray.length; i++ ) {\n        if( activeFilterArray[ i ].name === filterCategory.internalName ) {\n            dateFilterArray.push( activeFilterArray[ i ] );\n        } else {\n            let shortFilterIntenal = activeFilterArray[ i ].name.substr( 0, activeFilterArray[ i ].name.indexOf( '_0Z0' ) );\n            if( shortFilterIntenal === filterCategory.internalName ) {\n                dateFilterArray.push( activeFilterArray[ i ] );\n            }\n        }\n    }\n\n    return dateFilterArray;\n}\n\n/**\n * Returns filterDisplayName in proper format for numeric chip display\n * @function getNumericString\n * @param {Object} numericString from the getCategoryValues\n * @returns {Object} filterDisplayName\n */\nfunction getNumericString( numericString ) {\n    if( numericString.length > 4 ) {\n        let value = numericString.replace( '_NumericRange_', '' );\n        let startValue = value.substr( 0, value.indexOf( '_TO_' ) );\n        let endValue = value.substr( value.indexOf( '_TO_' ) + 4, value.length );\n        if( !startValue ) {\n            var filterDisplayName = 'To ' + endValue;\n        } else if( !endValue ) {\n            var filterDisplayName = 'From ' + startValue;\n        } else {\n            var filterDisplayName = startValue + ' - ' + endValue;\n        }\n    }\n    return filterDisplayName;\n}\n\n/**\n * Updates search object with removed radio filter\n * @function removeRadioChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeRadioChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n\n    for ( var i = 0; i < newSearchObject.categories.length; i++ ) {\n        if ( chipToRemove.labelInternalCategoryName === newSearchObject.categories[i].internalName ) {\n            if ( chipToRemove.labelInternalFilterName === newSearchObject.categories[i].filterValues[ 0 ].internalName ) {\n                newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] = [ newSearchObject.categories[ i ].filterValues[ 1 ].internalName ];\n            } else {\n                newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] = [ newSearchObject.categories[ i ].filterValues[ 0 ].internalName ];\n            }\n        }\n    }\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\n/**\n * Updates search object with removed object filter\n * @function removeObjectChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeObjectChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n    let updatedFilters = searchFilterService.removeDependentClassificationFilters( { internalName: chipToRemove.labelInternalFilterName } );\n    if( updatedFilters.length > 0 ) {\n        newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] = updatedFilters;\n    } else {\n        delete newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName  ];\n    }\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\n/**\n * Updates search object with after removing single string filter\n * @function removeSingleStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeSingleChip( newSearchObject, chipToRemove ) {\n    let filtersForCategory = newSearchObject.activeFilters && newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ]\n        ? newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ] : [];\n    let updatedFilters = [];\n    for( let index = 0; index < filtersForCategory.length; index++ ) {\n        if( filtersForCategory[ index ] !== chipToRemove.labelInternalFilterName ) {\n            updatedFilters.push( filtersForCategory[ index ] );\n        }\n    }\n    if( updatedFilters.length > 0 ) {\n        newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName  ] = updatedFilters;\n    } else {\n        delete newSearchObject.activeFilters[ chipToRemove.labelInternalCategoryName ];\n    }\n    if ( newSearchObject.activeFilters && Object.keys( newSearchObject.activeFilters ).length > 0 ) {\n        newSearchObject.activeFilterString = searchFilterService.buildFilterString( newSearchObject.activeFilters );\n    } else {\n        newSearchObject.activeFilterString = '';\n    }\n}\n\n/**\n * Updates search object after removing multiple string filters from the same category\n * @function removeStringChip\n * @param {Object} newSearchObject searchObject\n * @param {Object} chipToRemove chip which is to be removed\n */\nfunction removeMultipleChip( newSearchObject, chipToRemove ) {\n    let children = chipToRemove.children;\n    for( let index = 0; index < children.length; index++ ) {\n        removeSingleChip( newSearchObject, children[ index ] );\n    }\n}\n\n\n/**\n * Updates search object after removing string chip\n * @function removeStringChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n\n    if( chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children ) {\n        removeSingleChip( newSearchObject, chipToRemove );\n    } else {\n        removeMultipleChip( newSearchObject, chipToRemove );\n    }\n\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\n/**\n * Updates search object with removed date filter\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n * @param {Object} chipToRemove selected chip to remove\n */\nfunction removeDateChip( searchObject, chipToRemove ) {\n    const newSearchObject = { ...searchObject.value };\n    if( chipToRemove && chipToRemove.children && chipToRemove.children.length === 0 || chipToRemove && !chipToRemove.children ) {\n        removeSingleChip( newSearchObject, chipToRemove );\n    } else {\n        removeMultipleChip( newSearchObject, chipToRemove );\n    }\n    newSearchObject.activeFilters = searchFilterService.removeDependentDateFilters( newSearchObject.activeFilters );\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n}\n\nexport let checkSearchLocation = ( searchObject ) => {\n    //Check if in Panel or Global Search Area\n    if ( searchObject && searchObject.criteria && searchObject.criteria.searchFromLocation ) {\n        let currentLocation = _.cloneDeep( searchObject.criteria.searchFromLocation );\n        if ( currentLocation === 'global' ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * ClearAll action removes all selected chips in the breadcrumb location\n * @function removeDateChip\n * @param {Object} searchObject searchObject\n */\nexport let clearAll = ( searchObject ) => {\n    const newSearchObject = { ...searchObject.value };\n    const categories = searchFilterService.clearAllSelectedFiltersAndRanges( newSearchObject.categories, newSearchObject.activeFilters, newSearchObject.positivePendingFilters );\n    newSearchObject.categories = categories;\n    if( newSearchObject.skipFiltersForClearAll && newSearchObject.activeFilters\n        && newSearchObject.activeFilterMap && Object.keys( newSearchObject.activeFilters ).length > 0 ) {\n        for( const[ key, value ] of Object.entries( newSearchObject.activeFilters ) ) {\n            if( !newSearchObject.skipFiltersForClearAll.includes( key ) ) {\n                delete newSearchObject.activeFilters[ key ];\n                delete newSearchObject.activeFilterMap[ key ];\n            }\n        }\n    } else {\n        newSearchObject.activeFilterMap = {};\n        newSearchObject.activeFilters = {};\n    }\n    delete newSearchObject.positivePendingFilters;\n    delete newSearchObject.negativePendingFilters;\n    delete newSearchObject.allCategoriesVisible;\n    newSearchObject.bulkFiltersApplied = true;\n    searchObject.update( newSearchObject );\n};\n\nexport let calculateOverflow = ( elementRefList, totalVisibleArea, totalVisibleHeight, breadcrumbChips, currentOverflowChips,\n    displayBreadcrumbChips, inHeader, searchFilterCategoryExpandMore, visibleChipAreaMaintained ) => {\n    var tabElems;\n    var displayChips = [];\n    var overflownChips = [];\n    var breakIndex = null;\n    var filledHeader = true;\n\n    if ( elementRefList ) {\n        let chiplist = elementRefList.get( 'chiplist' ).current;\n\n        if( !chiplist ) {\n            return breakIndex;\n        }\n\n        if( !tabElems ) {\n            tabElems = chiplist.querySelectorAll( '.aw-widgets-chip' );\n        }\n\n        let arr = [ ...tabElems ];\n        var tabPadding = 16;\n        let searchCountAreaSpacing = 0;\n        if ( chiplist.parentNode.parentElement && chiplist.parentNode.parentElement.firstChild\n        && chiplist.parentNode.parentElement.firstChild.childNodes\n        && chiplist.parentNode.parentElement.firstChild.childNodes.length > 0\n        && chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth ) {\n            searchCountAreaSpacing = chiplist.parentNode.parentElement.firstChild.childNodes[0].clientWidth;\n        }\n        let cmdMoreButtonSpacing = 80;\n        let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientWidth + 24 : 24;\n        if ( !totalVisibleArea || !visibleChipAreaMaintained ) {\n            totalVisibleArea = chiplist.parentElement.parentElement ? chiplist.parentElement.parentElement.clientWidth : 0;\n        }\n\n        var totalCalculatedArea = tabPadding + searchCountAreaSpacing + cmdMoreButtonSpacing + clearButtonSpacing;\n\n        //Determine where overflow takes place. If overflow is already hit then this keeps breakIndex as undefined\n        for( var i = 0; i < arr.length; i++ ) {\n            totalCalculatedArea = arr[i].clientWidth + totalCalculatedArea;\n            if( totalCalculatedArea > totalVisibleArea ) {\n                breakIndex = i;\n                break;\n            }\n        }\n\n        if ( !inHeader ) {\n            if ( !totalVisibleHeight || !visibleChipAreaMaintained ) {\n                totalVisibleHeight =  chiplist.parentElement.parentElement.clientHeight / 2;\n            }\n            let chipElementHeight = chiplist.parentElement.clientHeight;\n            let clearButtonSpacing = chiplist.lastChild ? chiplist.lastChild.clientHeight : 0;\n            cmdMoreButtonSpacing = 32;\n            tabPadding = 32;\n            totalCalculatedArea = tabPadding + clearButtonSpacing + cmdMoreButtonSpacing + chipElementHeight;\n\n            if ( totalCalculatedArea > totalVisibleHeight ) {\n                for( i = 0; i < arr.length; i++ ) {\n                    totalCalculatedArea -= 26;\n                    if( totalCalculatedArea < totalVisibleHeight ) {\n                        breakIndex = arr.length - i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        //Check if header is completely filled. Used when going from a smaller window size to larger window size\n        //diffChipArea helps with accounting for scenarios where there is only a small space difference in calculated and actual size\n        let diffChipArea = totalVisibleArea - totalCalculatedArea - 200;\n        if ( totalCalculatedArea < totalVisibleArea - 200 && diffChipArea > tabPadding ) {\n            filledHeader = false;\n        }\n\n        if ( breakIndex === 0 && inHeader ) {\n            displayChips = [];\n            overflownChips = breadcrumbChips;\n        } else if ( breakIndex > 0 ) {\n            overflownChips = breadcrumbChips.slice( breakIndex );\n            displayChips = breadcrumbChips.slice( 0, breakIndex );\n        } else if ( breadcrumbChips.length >= 7 ) {\n            overflownChips = breadcrumbChips.slice( 1 );\n            displayChips = breadcrumbChips.slice( 0, 1 );\n        } else if ( currentOverflowChips.length > 0 && arr.length < breadcrumbChips.length && filledHeader ) {\n            overflownChips = breadcrumbChips.slice( arr.length );\n            displayChips = breadcrumbChips.slice( 0, arr.length );\n        } else {\n            displayChips = breadcrumbChips;\n            overflownChips = [];\n        }\n    } else if ( currentOverflowChips.length !== 0 && displayBreadcrumbChips.length !== 0 )  {\n        overflownChips = currentOverflowChips;\n        displayChips = displayBreadcrumbChips;\n    } else {\n        overflownChips = [];\n        displayChips = breadcrumbChips;\n    }\n    let displayOverflowButton = overflownChips.length + ' ' + searchFilterCategoryExpandMore;\n\n    return  { displayChips, overflownChips, displayOverflowButton, totalVisibleArea, totalVisibleHeight };\n};\n\nexport default {\n    buildSearchChips,\n    removeSelectedChip,\n    checkSearchLocation,\n    clearAll,\n    calculateOverflow\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
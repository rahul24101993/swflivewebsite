{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwTreeService.js\";\nimport eventBus from 'js/eventBus';\nimport AwNode from 'viewmodel/AwNodeViewModel';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet treeEventSubscribe = null;\n\nlet searchTreeOnEnteredValue = (key, regex, node) => {\n  var keyStr = _.get(node, key);\n\n  if (regex.test(keyStr)) {\n    node.expanded = true;\n    return node;\n  } else if (node.children) {\n    for (var i = 0; i < node.children.length; i++) {\n      var outNode = searchTreeOnEnteredValue(key, regex, node.children[i]);\n\n      if (outNode) {\n        node.expanded = true;\n        return outNode;\n      }\n    }\n  }\n\n  return null;\n};\n\nexport const awTreeRenderFunction = props => {\n  const {\n    tree,\n    viewModel,\n    ...prop\n  } = props;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  let selectedNode = viewModel.data.selectedNode;\n  let treeName = prop.name.replace(/'/gi, '');\n\n  const selectionHandler = (event, node) => {\n    event.stopPropagation();\n\n    if (node) {\n      if (treeName) {\n        eventBus.publish(treeName + '.treeNodeSelected', {\n          node: node\n        });\n      }\n\n      if (selectedNode) {\n        selectedNode.selected = false;\n      }\n\n      selectedNode = node;\n      selectedNode.selected = true;\n    }\n\n    dispatch({\n      path: 'data.selectedNode',\n      value: node\n    });\n  };\n\n  treeEventSubscribe = eventBus.subscribe('awtree.updateSelection', function (eventData) {\n    if (eventData.name === treeName) {\n      var key = tree[0].value ? 'value' : 'label';\n      var val = '.*' + eventData.selectionValue + '.*';\n      var regex = new RegExp(val, 'i');\n      var searchedNode;\n\n      for (var i = 0; i < tree.length; i++) {\n        searchedNode = searchTreeOnEnteredValue(key, regex, tree[i]);\n\n        if (searchedNode) {\n          break;\n        }\n      }\n\n      if (searchedNode) {\n        if (selectedNode) {\n          selectedNode.selected = false;\n        }\n\n        selectedNode = searchedNode;\n        selectedNode.selected = true;\n        dispatch({\n          path: 'data.selectedNode',\n          value: searchedNode\n        });\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(AwNode, {\n    level: 0,\n    tree: tree,\n    toggleSelectionHandler: selectionHandler,\n    displayname: prop.displayname,\n    children: prop.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\nexport const cleanupPage = () => {\n  eventBus.unsubscribe(treeEventSubscribe);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwTreeService.js"],"names":["treeEventSubscribe","searchTreeOnEnteredValue","keyStr","_","regex","node","i","outNode","awTreeRenderFunction","props","prop","dispatch","selectedNode","viewModel","treeName","selectionHandler","event","eventBus","path","value","eventData","key","tree","val","searchedNode","children","cleanupPage"],"mappings":"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","sourcesContent":["import eventBus from 'js/eventBus';\nimport AwNode from 'viewmodel/AwNodeViewModel';\nimport _ from 'lodash';\n\nlet treeEventSubscribe = null;\n\nlet searchTreeOnEnteredValue = ( key, regex, node ) => {\n    var keyStr = _.get( node, key );\n    if( regex.test( keyStr ) ) {\n        node.expanded = true;\n        return node;\n    } else if( node.children ) {\n        for( var i = 0; i < node.children.length; i++ ) {\n            var outNode = searchTreeOnEnteredValue( key, regex, node.children[ i ] );\n            if( outNode ) {\n                node.expanded = true;\n                return outNode;\n            }\n        }\n    }\n    return null;\n};\n\nexport const awTreeRenderFunction = ( props ) => {\n    const { tree, viewModel, ...prop } = props;\n    const { data, dispatch } = viewModel;\n\n    let selectedNode = viewModel.data.selectedNode;\n    let treeName = prop.name.replace( /'/gi, '' );\n\n    const selectionHandler = ( event, node ) => {\n        event.stopPropagation();\n        if( node ) {\n            if( treeName ) {\n                eventBus.publish( treeName + '.treeNodeSelected', {\n                    node: node\n                } );\n            }\n            if( selectedNode ) {\n                selectedNode.selected = false;\n            }\n            selectedNode = node;\n            selectedNode.selected = true;\n        }\n        dispatch( { path: 'data.selectedNode', value: node } );\n    };\n\n    treeEventSubscribe = eventBus.subscribe( 'awtree.updateSelection', function( eventData ) {\n        if( eventData.name === treeName ) {\n            var key = tree[ 0 ].value ? 'value' : 'label';\n            var val = '.*' + eventData.selectionValue + '.*';\n            var regex = new RegExp( val, 'i' );\n            var searchedNode;\n            for( var i = 0; i < tree.length; i++ ) {\n                searchedNode = searchTreeOnEnteredValue( key, regex, tree[ i ] );\n                if( searchedNode ) {\n                    break;\n                }\n            }\n            if( searchedNode ) {\n                if( selectedNode ) {\n                    selectedNode.selected = false;\n                }\n                selectedNode = searchedNode;\n                selectedNode.selected = true;\n                dispatch( { path: 'data.selectedNode', value: searchedNode } );\n            }\n        }\n    } );\n    return (\n        <AwNode level = {0}  tree={tree} toggleSelectionHandler={selectionHandler} displayname = {prop.displayname}>\n            {prop.children}\n        </AwNode>\n    );\n};\n\nexport const cleanupPage = () => {\n    eventBus.unsubscribe( treeEventSubscribe );\n};\n"]},"metadata":{},"sourceType":"module"}
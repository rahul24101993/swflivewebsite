{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * This utility module provides helpful functions for table column content.\n *\n * @module js/splmTableMenuUtility\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport localeService from 'js/localeService';\nimport messagingService from 'js/messagingService';\nvar exports = {};\n\nexports.columnSortChanged = (gridId, columnDef, gridContextDispatcher, sortDirection, currentColumnIndex, isBulkEditing, columnProvider) => {\n  if (isBulkEditing) {\n    return;\n  }\n\n  var newColumnIdx = columnDef.index;\n  var columnField = columnDef.field;\n  var targetDirection = sortDirection;\n\n  if (columnProvider.sortCriteria && columnProvider.sortCriteria.length > 0) {\n    var oldSortCriteria = columnProvider.sortCriteria[0];\n\n    if (currentColumnIndex === newColumnIdx && oldSortCriteria.fieldName === columnField && oldSortCriteria.sortDirection.toUpperCase() === sortDirection.toUpperCase()) {\n      return;\n    }\n  }\n\n  if (!columnProvider.sortCriteria) {\n    columnProvider.sortCriteria = [];\n  } else {\n    columnProvider.sortCriteria.pop();\n  }\n\n  if (targetDirection !== '') {\n    columnProvider.sortCriteria.push({\n      fieldName: columnField,\n      sortDirection: targetDirection\n    });\n  } // revisitme tstark set the focusHeader\n  // tstark - leave for refactor\n  // tableElement._tableInstance.focusHeader = columnField;\n  // Sets sort criteria on declColumnProviderJSON\n\n\n  columnProvider.setSortCriteria(columnProvider.sortCriteria); // Update sort criteria in sublocation context\n\n  var sublocationCtx = appCtxService.getCtx('sublocation');\n\n  if (sublocationCtx) {\n    // LCS-137109 - Sorting new AW table elements by column not working\n    // Copy columnProvider.sortCriteria instead of using reference\n    let sortCriteria = _.clone(columnProvider.sortCriteria);\n\n    appCtxService.updatePartialCtx(sublocationCtx.clientScopeURI + '.sortCriteria', sortCriteria);\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', sortCriteria);\n  } // revisitme tstark call setHeaderCellSortDirection\n  // tstark - leave for refactor\n  // tableCtrl.setHeaderCellSortDirection( currentColumnIndex, newColumnIdx, targetDirection );\n\n\n  if (gridContextDispatcher) {\n    gridContextDispatcher({\n      type: 'UPDATE_VALUES',\n      newColumnIndex: newColumnIdx,\n      sortDirection: targetDirection,\n      currentColumnIndex: currentColumnIndex\n    });\n  }\n};\n\nexports.closeColumnMenu = popupRef => {\n  if (popupRef) {\n    popupRef.hide();\n  }\n};\n\nexports.setFilterDisability = function (gridId, isDisabled) {\n  var filterButtonElement = document.querySelector('.' + gridId + '_menu .filter-button');\n\n  if (filterButtonElement) {\n    if (isDisabled) {\n      filterButtonElement.classList.add('disabled');\n    } else {\n      filterButtonElement.classList.remove('disabled');\n    }\n  }\n};\n/**\n * Determines if server is available, calls function to hide the column based on columnDef\n * @param {AwColumnInfo} columnDef - The column Def\n * @param {Object} gridContextDispatcher - dispatcher for table\n */\n\n\nexports.hideColumn = function (columnDef, gridContextDispatcher) {\n  if (gridContextDispatcher && columnDef) {\n    gridContextDispatcher({\n      type: 'UPDATE_VALUES',\n      hideColumnField: columnDef.field\n    });\n  }\n};\n\nexports.freezeColumn = function (gridId, columnDef, isFreezeAction, defaultColumnPinIndex, gridContextDispatcher) {\n  if (gridContextDispatcher) {\n    let pinColumnData = {};\n    pinColumnData.columnDef = columnDef;\n    pinColumnData.isFreezeAction = isFreezeAction;\n    pinColumnData.defaultColumnPinIndex = defaultColumnPinIndex;\n    gridContextDispatcher({\n      type: 'UPDATE_VALUES',\n      pinColumnData: pinColumnData\n    });\n  }\n};\n\nexports.toggleDynamicRowHeight = function (gridContextDispatcher, dynamicRowHeightStatus) {\n  if (gridContextDispatcher) {\n    gridContextDispatcher({\n      type: 'UPDATE_VALUES',\n      dynamicRowHeightStatus: !dynamicRowHeightStatus\n    });\n  }\n};\n\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableMenuUtility.js"],"names":["exports","newColumnIdx","columnDef","columnField","targetDirection","columnProvider","oldSortCriteria","currentColumnIndex","sortDirection","fieldName","sublocationCtx","appCtxService","sortCriteria","_","gridContextDispatcher","type","newColumnIndex","popupRef","filterButtonElement","document","hideColumnField","field","pinColumnData","dynamicRowHeightStatus"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * This utility module provides helpful functions for table column content.\n *\n * @module js/splmTableMenuUtility\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport appCtxService from 'js/appCtxService';\nimport localeService from 'js/localeService';\nimport messagingService from 'js/messagingService';\n\nvar exports = {};\n\nexports.columnSortChanged = ( gridId, columnDef, gridContextDispatcher, sortDirection, currentColumnIndex, isBulkEditing, columnProvider ) => {\n    if( isBulkEditing ) {\n        return;\n    }\n    var newColumnIdx = columnDef.index;\n    var columnField = columnDef.field;\n    var targetDirection = sortDirection;\n\n    if( columnProvider.sortCriteria && columnProvider.sortCriteria.length > 0 ) {\n        var oldSortCriteria = columnProvider.sortCriteria[ 0 ];\n\n        if( currentColumnIndex === newColumnIdx && oldSortCriteria.fieldName === columnField &&\n            oldSortCriteria.sortDirection.toUpperCase() === sortDirection.toUpperCase() ) {\n            return;\n        }\n    }\n\n    if( !columnProvider.sortCriteria ) {\n        columnProvider.sortCriteria = [];\n    } else {\n        columnProvider.sortCriteria.pop();\n    }\n\n    if( targetDirection !== '' ) {\n        columnProvider.sortCriteria.push( {\n            fieldName: columnField,\n            sortDirection: targetDirection\n        } );\n    }\n\n    // revisitme tstark set the focusHeader\n    // tstark - leave for refactor\n    // tableElement._tableInstance.focusHeader = columnField;\n\n    // Sets sort criteria on declColumnProviderJSON\n    columnProvider.setSortCriteria( columnProvider.sortCriteria );\n\n    // Update sort criteria in sublocation context\n    var sublocationCtx = appCtxService.getCtx( 'sublocation' );\n    if( sublocationCtx ) {\n        // LCS-137109 - Sorting new AW table elements by column not working\n        // Copy columnProvider.sortCriteria instead of using reference\n        let sortCriteria = _.clone( columnProvider.sortCriteria );\n        appCtxService.updatePartialCtx( sublocationCtx.clientScopeURI + '.sortCriteria', sortCriteria );\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', sortCriteria );\n    }\n\n    // revisitme tstark call setHeaderCellSortDirection\n    // tstark - leave for refactor\n    // tableCtrl.setHeaderCellSortDirection( currentColumnIndex, newColumnIdx, targetDirection );\n\n    if ( gridContextDispatcher ) {\n        gridContextDispatcher( {\n            type: 'UPDATE_VALUES',\n            newColumnIndex: newColumnIdx,\n            sortDirection: targetDirection,\n            currentColumnIndex: currentColumnIndex\n        } );\n    }\n};\n\nexports.closeColumnMenu = ( popupRef ) => {\n    if( popupRef ) {\n        popupRef.hide();\n    }\n};\n\nexports.setFilterDisability = function( gridId, isDisabled ) {\n    var filterButtonElement = document.querySelector( '.' + gridId + '_menu .filter-button' );\n\n    if( filterButtonElement ) {\n        if( isDisabled ) {\n            filterButtonElement.classList.add( 'disabled' );\n        } else {\n            filterButtonElement.classList.remove( 'disabled' );\n        }\n    }\n};\n\n/**\n * Determines if server is available, calls function to hide the column based on columnDef\n * @param {AwColumnInfo} columnDef - The column Def\n * @param {Object} gridContextDispatcher - dispatcher for table\n */\nexports.hideColumn = function( columnDef, gridContextDispatcher ) {\n    if ( gridContextDispatcher && columnDef ) {\n        gridContextDispatcher( {\n            type: 'UPDATE_VALUES',\n            hideColumnField: columnDef.field\n        } );\n    }\n};\n\nexports.freezeColumn = function( gridId, columnDef, isFreezeAction, defaultColumnPinIndex, gridContextDispatcher ) {\n    if ( gridContextDispatcher ) {\n        let pinColumnData = {};\n        pinColumnData.columnDef = columnDef;\n        pinColumnData.isFreezeAction = isFreezeAction;\n        pinColumnData.defaultColumnPinIndex = defaultColumnPinIndex;\n        gridContextDispatcher( {\n            type: 'UPDATE_VALUES',\n            pinColumnData:pinColumnData\n        } );\n    }\n};\n\nexports.toggleDynamicRowHeight = function( gridContextDispatcher, dynamicRowHeightStatus ) {\n    if ( gridContextDispatcher ) {\n        gridContextDispatcher( {\n            type: 'UPDATE_VALUES',\n            dynamicRowHeightStatus: !dynamicRowHeightStatus\n        } );\n    }\n};\n\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
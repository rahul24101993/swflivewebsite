{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This module is part of declarative UI framework and provides DeclViewModel processing functionalities.\n *\n * @module js/viewModelProcessingFactory\n *\n * @namespace viewModelProcessingFactory\n */import AwPromiseService from'js/awPromiseService';import modelPropertySvc from'js/modelPropertyService';import viewModelObjectSrv from'js/viewModelObjectService';import dataProviderFactory from'js/dataProviderFactory';import declDataProviderSvc from'js/declDataProviderService';import appCtxSvc from'js/appCtxService';import clientDataModel from'soa/kernel/clientDataModel';import sanitizer from'js/sanitizer';import declModelRegistrySvc from'js/declModelRegistryService';import editUtilsService from'js/editUtilsService';import messagingService from'js/messagingService';import mockModeService from'js/mockModeService';import AwInterpolateService from'js/awInterpolateService';import _ from'lodash';import eventBus from'js/eventBus';import parsingUtils from'js/parsingUtils';import declUtils from'js/declUtils';import logger from'js/logger';import Debug from'debug';import debugService from'js/debugService';import editHandlerService from'js/editHandlerService';import cfgSvc from'js/configurationService';import commandsSvc from'js/command.service';import{loadDynModule}from'js/moduleLoader';/** revisitme\n  * Hint: editHandlerFactory not ported yet\n import editHandlerFactory from 'js/editHandlerFactory';\n */ /** revisitme Shaishav\n  * Hint: Condition service is not used anywhere. Remove this\n import 'js/conditionService';\n */var tokenTrace=new Debug('viewModel:token');/**\n  * Cached reference to AngularJS & AW services\n  */ /** List of attributes would be considered for sanitization */var propertiesToSanitize={dbValue:true,dbValues:true,displayValues:true,error:true,propertyDisplayName:true,propertyName:true,propertyRadioFalseText:true,propertyRadioText:true,uiValue:true,uiValues:true,value:true};var _compoundPropNameDelimiter='__';var _compoundPropValueDelimiter=':';/**\n  * Perform the given 'action'.\n  *\n  * @param {Object} jsonData - Object loaded from the DeclViewModel JSON file\n  * @param {Object} jsonDataProvider - A specific dataProvider's definition within 'jsonData'.\n  * @param {String} dpName - The name of the 'declDataProvider' where the action is defined.\n  * @param {String} actionName - The name of the action to look for in the 'jsonData'\n  * @param {StringMap} actionMap - Map of action name to the action object from a declViewModel's JSON definition\n  *            to be updated by this function.\n  */function _processAction(jsonData,jsonDataProvider,dpName,actionName,actionMap){var actionRef=jsonDataProvider[actionName];if(actionRef){if(jsonData.actions){actionMap[actionName]=jsonData.actions[actionRef];}if(!actionMap[actionName]){logger.error('DataProvider '+dpName+' references a missing action: '+actionName+'...continuing');}}}// _processAction\n/**\n  * Define the base object used to provide all of this module's external API on.\n  *\n  * @private\n  */var exports={};/**\n  * Evaluate dataProviders from JSON, load any dependencies and set on the given 'declViewModel'.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {DeclViewModel} declViewModel - The 'DeclViewModel' to populate with the dataProvider properties of\n  *            the given JSON object.\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise is resolved with the given 'declViewModel' once any data provider dependencies\n  *         are all resolved.\n  */var _populateDataProviders=function(declViewModelJson,declViewModel,subPanelContext){var jsonData=declViewModelJson;var promises=[];const dataProviderActions=['action','initializeAction','nextAction','previousAction','focusAction','expandAction','validateAction','filterFacetAction','preferredChoicesAction'];if(jsonData.dataProviders&&!_.isEmpty(jsonData.dataProviders)){if(!declViewModel.dataProviders){declViewModel.dataProviders={};}let dataProvidersClone=_.cloneDeep(jsonData.dataProviders);let mockedDataProvider=mockModeService.isMockModeActive()&&jsonData.mock&&jsonData.mock.dataProviders;exports.initViewModel(dataProvidersClone,subPanelContext);// Short term fix to support editSupportParamKeys on subPanelContext.provider\n// Long term approach is to have this information directly on subPanelContext\n// This will be cleaned up with the tech debt story for cleanup of AwStandardPrimaryWorkarea\nlet editSupportParamKeys;if(subPanelContext){if(subPanelContext.editSupportParamKeys){editSupportParamKeys=subPanelContext.editSupportParamKeys;}else if(subPanelContext.provider&&subPanelContext.provider.editSupportParamKeys){editSupportParamKeys=subPanelContext.provider.editSupportParamKeys;}else{editSupportParamKeys=subPanelContext.selectionQueryParamKey&&[subPanelContext.selectionQueryParamKey];}}let index=0;_.forEach(dataProvidersClone,(jsonDataProvider,dpName)=>{let resolvedLOVConfig=jsonDataProvider.lovConfiguration;// TcLOV is a data-provider property.\n// If we declare any data-provider as TCLOV it would start using the standard SOA calls available for teamcenter\n// to populate and validate LOV i.e getInitialLOVVAlue, getNextLOVValue and ValidateLOV.\n// It can be used with any data-provider which is used with widgets like i.e aw-link-with-popup, aw-widget.\n// User has option to supply its own parameters (VMO and ViewModel Prop) through \"lovConfiguration\" setting defined in the LOV dataprovider.\n// Imp: If the dataprovider has action defined then data-provider type \"tcLOV\" setting is ignored.\nlet isTcLOV=!(jsonDataProvider.action||jsonDataProvider.initializeAction)&&jsonDataProvider.dataProviderType==='TcLOV';if(isTcLOV){const lovDataProviderJSON=_.cloneDeep(cfgSvc.getCfgCached('lovDataProvider'));_.forEach(dataProviderActions,actionName=>{const actName=lovDataProviderJSON.dataProviders.tcDataprovider[actionName];if(actName){// A new action Name, which shouldn't conflict with exiting action name.\nlet newActionName=actName+'_tcLOV_'+index;jsonDataProvider[actionName]=newActionName;jsonData.actions[newActionName]=lovDataProviderJSON.actions[actName];jsonData.actions[newActionName].inputData.dataProviderName=dpName;}});jsonDataProvider.response=lovDataProviderJSON.dataProviders.tcDataprovider.response;jsonDataProvider.moreValuesExist=lovDataProviderJSON.dataProviders.tcDataprovider.moreValuesExist;// Reverting back the lovConfiguration to the pristine state, as it would be evaluated multiple times\n// in declDataProviderService. If we store the evaluated lovConfiguration further evaluations becomes\n// very costly and might run into a infinite loop.\njsonDataProvider.lovConfiguration=_.cloneDeep(declViewModelJson.dataProviders[dpName].lovConfiguration);}index++;var actionMap={};if(mockedDataProvider&&mockedDataProvider[dpName]){jsonDataProvider=mockedDataProvider[dpName];}_.forEach(dataProviderActions,actionName=>{_processAction(jsonData,jsonDataProvider,dpName,actionName,actionMap);});/**\n              * Create the DeclDataProvider based on the JSON data.\n              */declViewModel.dataProviders[dpName]=dataProviderFactory.createDataProvider(jsonDataProvider,actionMap.action,dpName,declDataProviderSvc,actionMap);declViewModel.dataProviders[dpName].origJson=jsonData.dataProviders[dpName];declViewModel.dataProviders[dpName].inputDataExpressions=getInputDataExpression(jsonData.dataProviders[dpName].inputData);if(isTcLOV){declViewModel.dataProviders[dpName].resolvedLovConfig=resolvedLOVConfig;}if(jsonDataProvider.uidInResponse){declViewModel.dataProviders[dpName].uidInResponse=jsonDataProvider.uidInResponse;}if(!declUtils.isNil(jsonDataProvider.preSelection)){declViewModel.dataProviders[dpName].preSelection=jsonDataProvider.preSelection;}else{declViewModel.dataProviders[dpName].preSelection=true;}if(declViewModel.objectSetSource&&declViewModel.objectSetSource[dpName]){declViewModel.dataProviders[dpName].setValidSourceTypes(declViewModel.objectSetSource[dpName]);}if(editSupportParamKeys){if(!jsonDataProvider.inputData){jsonDataProvider.inputData={};}if(!jsonDataProvider.inputData.editSupportParamKeys){jsonDataProvider.inputData.editSupportParamKeys=editSupportParamKeys;declViewModel.dataProviders[dpName].editSupportParamKeys=editSupportParamKeys;}}/**\n              * Process cell commands\n              */if(jsonDataProvider.commands){declViewModel.dataProviders[dpName].commands=[];_.forEach(jsonDataProvider.commands,function(command,cmdId){if(jsonDataProvider.commandsAnchor){logger.error('Commands in dataProviders are not supported when using commandsAnchor.'+'\\n'+'cmdId='+cmdId+'\\n'+'commandsAnchor='+jsonDataProvider.commandsAnchor);}else{if(command.dependencies&&command.dependencies.length>0){var cmdOverlay;var promise=loadDynModule(command.dependencies).then(function(handlers){cmdOverlay={position:command.position,displayOption:command.displayOption,handler:handlers,condition:command.condition};declViewModel.dataProviders[dpName].commands.push(cmdOverlay);return commandsSvc.getCommand(cmdId);}).then(function(commandOverlay){/**\n                                          * Update the icon and title once the command overlay is\n                                          * returned\n                                          */if(commandOverlay){cmdOverlay.iconId=commandOverlay.iconId||command.id;cmdOverlay.title=commandOverlay.title||command.title;}return cmdOverlay;// Include return to assure async\n});promises.push(promise);}else if(command.action){command.iconId=command.id;declViewModel.dataProviders[dpName].commands.push(command);}}});}if(jsonDataProvider.editContext){declViewModel.dataProviders[dpName].editContext=jsonDataProvider.editContext;}});}// return AwPromiseService.instance.all( promises ).then( function() {\nreturn declViewModel;// } );\n};var sharedViewModelToken=0;/**\n  * Token for tracking execution within the view model\n  */var DeclViewModelToken=function(){var activeActionCount=0;this.addAction=function(action){tokenTrace('Action started',action);activeActionCount++;sharedViewModelToken++;};this.removeAction=function(action){tokenTrace('Action completed',action);activeActionCount--;sharedViewModelToken=sharedViewModelToken<=1?0:sharedViewModelToken-1;};this.isActive=function(){return activeActionCount!==0;};};/**\n  * Creates a new instance of this class.\n  *\n  * @class DeclViewModel\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  */var DeclViewModel=function(declViewModelJson){var vmSelf=this;// eslint-disable-line consistent-this\n/**\n      * This object is used to hold properties and states that are not intended to be exposed to the\n      * 'dataCtxTree'.\n      */vmSelf._internal={/**\n          * Token for tracking execution within the view model\n          */token:new DeclViewModelToken(),/**\n          * {Number} An increasing number assigned to this declViewModel when created and use to identify it\n          * (only for debug purposes).\n          */modelId:-1,/**\n          * {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n          */panelId:'undefined',/**\n          * {String} The unique Id to identify the view\n          */viewId:'undefined',/**\n          * {Boolean} TRUE if 'destroy' has been invoked on this instance.\n          */isDestroyed:false,/**\n          * {EventSubscriptionArray} Array of 'eventSubscriptions' currently registerd against this\n          * 'declViewModel'.\n          */eventSubscriptions:[],/**\n          * {SubPanelId2EventSubscriptionsMap} a map of <subPanelId,EventSubscriptions>.\n          */subPanelId2EventSubscriptionsMap:{},/**\n          * {DeclViewModelJson} The object returned from loading the JSON resource for this 'declViewModel'.\n          */origDeclViewModelJson:null,/**\n          * {Object} A map of a 'conditionName' property to its current true/false state.\n          */conditionStates:{},/**\n          * {Object} A map of a 'conditionExpressions' property to its current vaule.\n          */conditionExpressions:{},/**\n          * Ref to: conditions\n          */conditions:null,/**\n          * Ref to: jasonData.actions\n          */actions:null,/**\n          * Ref to: jasonData.dataParseDefinitions\n          */dataParseDefinitions:null,/**\n          * Ref to: jasonData.functions\n          */functions:null,/**\n          * Ref to: jasonData.messages\n          */messages:null,/**\n          * Ref to: jasonData.onEvent\n          */onEvent:null,/**\n          * Ref to: jasonData.onEvent\n          */grids:null,/**\n          * Ref to: jasonData.onEvent\n          */chartProviders:null,/**\n          * {StringArray} The array of sub-panel IDs that have been 'merged' into this 'target' 'declViewModel'.\n          */subPanels:null,/**\n          * {ObjectArray} An array of data objects that specify the propertyValue/propertyPath of all non-action\n          * properties in the original declViewModel JSON definition that are 'data bound' to any changes in the\n          * appContext state (e.g. propValue = {{ctx.selected}}, etc.).\n          */declViewModelJsonBoundProps:null,/**\n          * {ObjectMap} Map of appContext changes that have been collected since this declViewModel was created\n          * or after the last 'update debound' was processed.\n          */pendingContextChanges:null,/**\n          * edit configuration map. This holds the configuration for start/cancel/save edit actions\n          */editConfig:null,/**\n          * ports for sync strategy\n          */ports:null,/**\n          * Edit handlers\n          */editHandlers:null,/**\n          * This function will be called then the 'dataCtxNode' ( aka '$scope' ) this 'declViewModel'\n          * is placed on is destroyed.\n          *\n          * @param {Boolean} destroyDataProviders - TRUE if all associated dataProviders should have their 'destroy' method called.\n          */destroy:function(destroyDataProviders){vmSelf._internal.isDestroyed=true;// Any active actions or messages are going to be cut off, force clear out token\nwhile(vmSelf._internal.token.isActive()){vmSelf._internal.token.removeAction(null);}declModelRegistrySvc.unregisterModel('DeclViewModel',vmSelf,'_internal.panelId','_internal.modelId');_.forEach(this.eventSubscriptions,function(subDef){eventBus.unsubscribe(subDef);});_.forEach(this.subPanelId2EventSubscriptionsMap,function(subDefs){_.forEach(subDefs,function(subDef){eventBus.unsubscribe(subDef);});});this.eventSubscriptions=[];this.subPanelId2EventSubscriptionsMap={};/**\n              * Stop debounce for ctx change events.\n              */if(vmSelf._internal.pingUpdateViewModel&&vmSelf._internal.pingUpdateViewModel.cancel){vmSelf._internal.pingUpdateViewModel.cancel();vmSelf._internal.pingUpdateViewModel=null;}/**\n              * Clean up all dataProviders\n              */if(destroyDataProviders){_.forEach(vmSelf.dataProviders,function(uwDataProvider,dpName){uwDataProvider.destroy();vmSelf.dataProviders[dpName]=null;});_.forEach(vmSelf.grids,function(currentGrid){if(currentGrid.columnProviderInstance){currentGrid.columnProviderInstance.destroy();currentGrid.columnProviderInstance=null;}});}/**\n              * Clean up all subPanels\n              */_.forEach(vmSelf._internal.subPanels,function(subPanel){declModelRegistrySvc.unregisterModel('SubPanel',subPanel,'panelId','id');});vmSelf._internal.subPanels=null;vmSelf._internal.declViewModelJsonBoundProps=null;vmSelf._internal.pendingContextChanges=null;/**\n              * Clean up edit config\n              */if(vmSelf._internal.editConfig){editUtilsService._removeListeners(vmSelf._internal.editConfig.sourceModel);}vmSelf._internal.editConfig=null;/**\n              * Clean up edit handler\n              */if(vmSelf._internal.editContext){editHandlerService.removeEditHandler(vmSelf._internal.editContext);}/**\n              * Clean up references to external resources\n              */vmSelf._internal.origCtxNode=null;vmSelf.vmo=null;vmSelf.objects=null;},/**\n          * Based on the value of the 'skipClone' property of the given JSON object, clone a copy of the given\n          * JSON object (if necessary) and save it in a local property.\n          *\n          * @param {DeclViewModelJson} declViewModelJsonIn - The object returned from loading the JSON resource for\n          *            this 'declViewModel'.\n          */setViewModelJson:function(declViewModelJsonIn){vmSelf._internal.origDeclViewModelJson=declViewModelJsonIn;if(declViewModelJsonIn._viewModelId){vmSelf._internal.panelId=declViewModelJsonIn._viewModelId;}else{/**\n                  * revisitme\n                  * logger.error( 'setViewModelJson: No panelId given' );\n                  */}if(declViewModelJsonIn._uniqueViewModelId){vmSelf._internal.viewId=declViewModelJsonIn._uniqueViewModelId;}},/**\n          * Set all the properties in this object to all the valid corresponding properties in the given\n          * 'jsonData' object.\n          *\n          * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n          *            JSON resource for this 'declViewModel'.\n          */setJsonData:function(jsonData){if(jsonData.actions){/**\n                  * Note: For debug purposes ONLY...Include the name of the action in the action object as the\n                  * 'actionId' property.\n                  */_.forEach(jsonData.actions,function(value,name){value.actionId=name;});vmSelf._internal.actions=jsonData.actions;}if(jsonData.conditions){vmSelf._internal.conditions=jsonData.conditions;}if(jsonData.ports){vmSelf._internal.ports=jsonData.ports;}if(jsonData.dataParseDefinitions){vmSelf._internal.dataParseDefinitions=jsonData.dataParseDefinitions;}if(jsonData.functions){vmSelf._internal.functions=jsonData.functions;}if(jsonData.messages){vmSelf._internal.messages=jsonData.messages;}if(jsonData.onEvent){vmSelf._internal.onEvent=jsonData.onEvent;}if(jsonData.grids){vmSelf._internal.grids=jsonData.grids;}if(jsonData.chartProviders){vmSelf._internal.chartProviders=jsonData.chartProviders;}if(jsonData.editConfig){vmSelf._internal.editConfig=jsonData.editConfig;}if(jsonData.lifecycleHooks){vmSelf._internal.lifecycleHooks=jsonData.lifecycleHooks;}if(jsonData.editContext){vmSelf._internal.editContext=jsonData.editContext;}if(jsonData.selectionModels){vmSelf._internal.selectionModels=jsonData.selectionModels;}if(jsonData.editHandlers){vmSelf._internal.editHandlers=jsonData.editHandlers;}},/**\n          * Consolidate (i.e. merge) all the properties in this object to all the valid corresponding properties\n          * in the given 'jsonData' object.\n          *\n          * @param {DeclViewModelJson} jsonData - The '.data' property of the object returned from loading the\n          *            JSON resource for this 'declViewModel'.\n          */consolidateJsonData:function(jsonData){vmSelf._internal.actions=declUtils.consolidateObjects(vmSelf._internal.actions,jsonData.actions);vmSelf._internal.dataParseDefinitions=declUtils.consolidateObjects(vmSelf._internal.dataParseDefinitions,jsonData.dataParseDefinitions);vmSelf._internal.conditions=declUtils.consolidateObjects(vmSelf._internal.conditions,jsonData.conditions);vmSelf._internal.functions=declUtils.consolidateObjects(vmSelf._internal.functions,jsonData.functions);vmSelf._internal.messages=declUtils.consolidateObjects(vmSelf._internal.messages,jsonData.messages);vmSelf._internal.onEvent=declUtils.consolidateObjects(vmSelf._internal.onEvent,jsonData.onEvent);vmSelf._internal.grids=declUtils.consolidateObjects(vmSelf._internal.grids,jsonData.grids);vmSelf._internal.chartProviders=declUtils.consolidateObjects(vmSelf._internal.chartProviders,jsonData.chartProviders);vmSelf._internal.editConfig=declUtils.consolidateObjects(vmSelf._internal.editConfig,jsonData.editConfig);if(jsonData.ports){vmSelf._internal.ports=declUtils.consolidateObjects(vmSelf._internal.ports,jsonData.ports);}vmSelf._internal.lifecycleHooks=declUtils.consolidateObjects(vmSelf._internal.lifecycleHooks,jsonData.lifecycleHooks);if(jsonData.selectionModels){vmSelf._internal.selectionModels=declUtils.consolidateObjects(vmSelf._internal.selectionModels,jsonData.selectionModels);}}};/**\n      * ----------------------------------------------------<br>\n      * Define public API <BR>\n      * ----------------------------------------------------<br>\n      */ /**\n      * Override the default implementation to return more helpful information.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} Text used to identify the ID of the DeclViewModel (e.g. 'modelId' + an optional 'url').\n      */vmSelf.toString=function(){if(vmSelf.getPanelId()){return vmSelf._internal.modelId+'  modelName: '+vmSelf.getPanelId();}return vmSelf._internal.modelId+'  modelName: '+'???';};/**\n      * Get the tracking token for the view model\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {DeclViewModelToken} token\n      */vmSelf.getToken=function(){return vmSelf._internal.token;};/**\n      * Get ID/Name of this declViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} The ID used to load the JSON (e.g. from the 'panelContentService').\n      */vmSelf.getPanelId=function(){return vmSelf._internal.panelId;};/**\n      * Get ID of this declViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {String} The ID used for unique with aw-include\n      */vmSelf.getViewId=function(){return vmSelf._internal.viewId;};/**\n      * Get DeclAction with the given ID.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} actionId - The ID of the DeclAction to return.\n      * @return {DeclAction} The DeclAction with the given ID (or FALSEY if not found);\n      */vmSelf.getAction=function(actionId){return vmSelf._internal.actions[actionId];};/**\n      * Get port's obj with the given name.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} portName - The name of the port.\n      * @return {Object} The port's sync object and action.\n      */vmSelf.getPortById=function(portName){return vmSelf._internal.ports[portName];};/**\n      * Get the DataParseDefinition in the DeclViewModel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @param {String} id - The ID of the DataParseDefinition to return.\n      * @return {Object} The dataParseDefinition\n      */vmSelf.getDataParseDefinition=function(id){return vmSelf._internal.dataParseDefinitions[id];};/**\n      * Get the functions in the DeclViewModel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The functions\n      */vmSelf.getFunctions=function(){return vmSelf._internal.functions;};/**\n      * Get array of any subPanels defined.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {ObjectArray} The array of sub-panel that have been 'merged' into this 'target' 'declViewModel'\n      *         (or NULL if no panels have been added).\n      */vmSelf.getSubPanels=function(){return vmSelf._internal.subPanels;};/**\n      * Get sub panel of the given panel ID\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      * @return {Object} The sub-panel state object\n      */vmSelf.getSubPanel=function(subPanelId){return _.find(vmSelf._internal.subPanels,{panelId:subPanelId});};/**\n      * Gets the edit configuration object\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {Object} The edit configuration object\n      */vmSelf.getEditConfiguration=function(){return vmSelf._internal.editConfig;};/**\n      * Get lifecycle hooks\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The lifecycle hooks\n      */vmSelf.getLifecycleHooks=function(){return vmSelf._internal.lifecycleHooks;};/**\n      * Get selection models\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} The selection models\n      */vmSelf.getSelectionModels=function(){return vmSelf._internal.selectionModels;};/**\n      * Add a sub-panel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel that has been 'merged' into this 'target'\n      *            'declViewModel'.\n      */vmSelf.addSubPanel=function(subPanelId){if(!vmSelf._internal.subPanels){vmSelf._internal.subPanels=[];}// remove the old panel with the input ID if exist\nif(vmSelf.getSubPanel(subPanelId)){vmSelf.removeSubPanel(subPanelId);}var subPanel={panelId:subPanelId,contextChanged:false};if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - Add Subpanel '+subPanelId);}declModelRegistrySvc.registerModel('SubPanel',subPanel,'panelId','id');vmSelf._internal.subPanels.push(subPanel);};/**\n      * Remove specified sub panel\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      */vmSelf.removeSubPanel=function(subPanelId){if(logger.isDeclarativeLogEnabled()){logger.declarativeLog('DECLARATIVE TRACE - Remove Subpanel '+subPanelId);}// un-subscribe events for the sub-panel\nvar subscriptions=vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];_.forEach(subscriptions,function(subDef){eventBus.unsubscribe(subDef);});delete vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];_.remove(vmSelf._internal.subPanels,function(subPanel){if(subPanel.panelId===subPanelId){declModelRegistrySvc.unregisterModel('SubPanel',subPanel,'panelId','id');return true;}return false;});};/**\n      * Add the given event subscription to the collection of event subscriptions for a given subPanel ID.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} subPanelId - The ID of the sub-panel\n      * @param {Object} subDef - The event subscription to add\n      */vmSelf.addSubPanelEventSubscription=function(subPanelId,subDef){var subDefs=vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId];if(!subDefs){subDefs=[];vmSelf._internal.subPanelId2EventSubscriptionsMap[subPanelId]=subDefs;}subDefs.push(subDef);};/**\n      * ----------------------------------------------------<br>\n      * ----------------------------------------------------<br>\n      */ /**\n      * Get current condition states map.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @return {Object} A map of a 'conditionName' property to its current true/false state.\n      */vmSelf.getConditionStates=function(){if(vmSelf._internal.conditionStates){return vmSelf._internal.conditionStates;}return{};};/**\n      * This method subscribes CDM update/modify event in declViewModelObject and also register corresponding\n      * handler to that.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      */vmSelf.attachEvents=function(){var handler=function(data){var objs=data.updatedObjects;if(!objs){objs=data.modifiedObjects;}var operationName=null;if(vmSelf&&vmSelf.vmo){operationName=vmSelf.vmo.operationName;}_.forEach(objs,function(object){if(object&&vmSelf.objects){const newVmo=viewModelObjectSrv.createViewModelObject(object.uid,operationName);viewModelObjectSrv.updateSourceObjectPropertiesByViewModelObject(newVmo,vmSelf.objects);}});};var cdmUpdateEventDef=vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.updated'];if(!cdmUpdateEventDef){vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.updated']=[eventBus.subscribe('cdm.updated',handler)];}var cdmModifiedEventDef=vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.modified'];if(!cdmModifiedEventDef){vmSelf._internal.subPanelId2EventSubscriptionsMap['cdm.modified']=[eventBus.subscribe('cdm.modified',handler)];}};/**\n      * Attach a model object to this DeclViewModel. All the properties of the model object will be consolidated\n      * to DeclViewModel.\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      *\n      * @param {String} uid - The UID of model object to attach\n      * @param {String} operationName - The operation being performed on model object\n      * @param {String} owningObjUid - The UID of owning object\n      * @param {Object} serverVMO - The VMO which was returned from the server.\n      *\n      * @returns {ViewModelObject} The object created to wrap the IModelObject specified by the given model information.\n      */vmSelf.attachModelObject=function(uid,operationName,owningObjUid,serverVMO){if(uid){// Build the vmo.\nvar vmo=viewModelObjectSrv.createViewModelObject(uid,operationName,owningObjUid,serverVMO);if(vmo){vmo.operationName=operationName;vmSelf.attachEvents();// Update the underlying object properties.\nif(vmo.type==='Awp0XRTObjectSetRow'){// Get underlying target object's UID if 'awp0Target' property exists\nif(vmo.props&&vmo.props.awp0Target){var targetUID=vmo.props.awp0Target.dbValue;var targetMO=clientDataModel.getObject(targetUID);if(targetMO){var targetVMO=viewModelObjectSrv.constructViewModelObjectFromModelObject(targetMO,operationName,null,null,true);var props=targetVMO.props;_.forEach(props,function(prop){if(prop&&!vmo.props.hasOwnProperty(prop.propertyName)){if(prop.intermediateObjectUids){prop.intermediateObjectUids.push(targetUID);}else{prop.intermediateObjectUids=[targetUID];}vmo.props[prop.propertyName]=prop;}});}}}}return vmo;}return undefined;};// ======================== Edit Handler Interface ===================================================//\nif(!vmSelf._internal.eventTopicEditInProgress){vmSelf._internal.eventTopicEditInProgress=declViewModelJson&&declViewModelJson._viewModelId?declViewModelJson._viewModelId+'_editInProgress':'_editInProgress';}/**\n      * @param {*} dvmSelf declViewModel instance\n      * @param {*} isEnabled true/false\n      */var setSelectionEnabled=function(dvmSelf,isEnabled){var dataProviders=dvmSelf.dataProviders;_.forOwn(dataProviders,function(dataProvider){dataProvider.setSelectionEnabled(isEnabled);});};/**\n      * @param {*} stateName edit handler state name\n      * @param {*} dvmSelf declViewModel itself\n      */var _notifyEditStateChange=function(stateName,dvmSelf){dvmSelf._editingState=stateName;dvmSelf._editing=stateName==='starting';setSelectionEnabled(dvmSelf,dvmSelf._editing);// Add to the appCtx about the editing state\nappCtxSvc.updateCtx(dvmSelf._internal.eventTopicEditInProgress,dvmSelf._editing);eventBus.publish(dvmSelf._internal.eventTopicEditInProgress,vmSelf._editing);};// Revisitme - This should ideally be done inside destroy. Commenting it out till we get a use case to fix it properly.\n// appCtxSvc.unRegisterCtx( vmSelf._internal.eventTopicEditInProgress );\n/**\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @param {*} dvmSelf declViewModel instance\n      * @returns {*} viewModelCollection view model collection as array\n      */var collectViewModelObjects=function(dvmSelf){var dataProviders=dvmSelf.dataProviders;var viewModelCollection=[];_.forOwn(dataProviders,function(dataProvider){viewModelCollection=viewModelCollection.concat(dataProvider.viewModelCollection.getLoadedViewModelObjects());});return viewModelCollection;};/**\n      * isDirty implementation of edit-handler interface\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */vmSelf.isDirty=function(){var viewModelCollection=collectViewModelObjects(vmSelf);return editUtilsService._isDirty(viewModelCollection);};/**\n      *This function implements the start edit function edit handler interface\n      *@memberof viewModelProcessingFactory.DeclViewModel\n      *@param {Object} editOptions - additional options object to specify specfic prop to edit and autosave mode { vmo, propertyName, autoSave } (Optional)\n      *@returns {*} AwPromiseService.instance promise\n      */vmSelf.startEdit=function(editOptions){var viewModelCollection=collectViewModelObjects(vmSelf);var editConfig=vmSelf.getEditConfiguration();editConfig.sourceModel=vmSelf.getViewId();var dataCtxNode={data:vmSelf,ctx:appCtxSvc.ctx};const saveEditStateChangeCallback=function(){_notifyEditStateChange('saved',vmSelf);};return editUtilsService._startEdit(dataCtxNode,vmSelf,viewModelCollection,editConfig,saveEditStateChangeCallback,editOptions).then(function(){if(!editOptions){_notifyEditStateChange('starting',vmSelf);}});};/**\n      * This is the cancel edits implementation of edit-handler interface.\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */vmSelf.cancelEdits=function(){var viewModelCollection=collectViewModelObjects(vmSelf);var dataCtxNode={data:vmSelf,ctx:appCtxSvc.ctx};var editConfig=vmSelf.getEditConfiguration();return editUtilsService._cancelEdits(dataCtxNode,vmSelf,viewModelCollection,editConfig).then(function(){_notifyEditStateChange('canceling',vmSelf);});};/**\n      * This function implements the save edits function edit handler interface\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @returns {*} AwPromiseService.instance promise\n      */vmSelf.saveEdits=function(){var viewModelCollection=collectViewModelObjects(vmSelf);var editConfig=vmSelf.getEditConfiguration();var dataCtxNode={data:vmSelf,ctx:appCtxSvc.ctx};return editUtilsService._saveEdits(dataCtxNode,vmSelf,viewModelCollection,editConfig).then(function(){_notifyEditStateChange('saved',vmSelf);});};/**\n      *\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {*} boolean\n      */vmSelf.editInProgress=function(){return vmSelf._editing;};// ======================== End of Edit Handler Interface ===================================================//\n/**\n      * Check if this 'declViewModel' is 'destroyed' and should not be used.\n      * @memberof viewModelProcessingFactory.DeclViewModel\n      * @return {Boolean} TRUE if this DeclViewModel has had it's 'destroy' method called and should no longer be\n      *         used or accessed for any purpose.\n      */vmSelf.isDestroyed=function(){return vmSelf._internal.isDestroyed;};/**\n      * ---------------------------------------------------------------------------<BR>\n      * Property & Function definition complete....Finish initialization. <BR>\n      * ---------------------------------------------------------------------------<BR>\n      */if(declViewModelJson){vmSelf._internal.setJsonData(declViewModelJson);vmSelf._internal.setViewModelJson(declViewModelJson);}declModelRegistrySvc.registerModel('DeclViewModel',vmSelf,'_internal.panelId','_internal.modelId');};// DeclViewModel\n/**\n  * Update the property in the 'target' object with the same value as the 'source' object based on the given\n  * 'path' to that property.\n  * <P>\n  * Note: This function handles the 'special' property names used in the 'attrHolder' object used by the\n  * 'modelPropertyService' during the initial property creation.\n  *\n  * @param {String} dataPath - The path to the property in the original 'declViewModelJson' 'data' object used as\n  *            the basis of the property in the 'source' & 'target' to be updated.\n  *\n  * @param {ViewModelObject} sourceObject - The 'source' object of the value to apply.\n  *\n  * @param {ViewModelObject} targetObject - The 'target' object the value will be applies to.\n  *\n  * @return {Boolean} TRUE if the updated value requires i18n processing.\n  */export let updateDataProperty=function(dataPath,sourceObject,targetObject){/**\n      * Check if it is a 'special' name that should use the mapped property name.\n      */var lastDotNdx=dataPath.lastIndexOf('.');var leafPropName=dataPath.substring(lastDotNdx+1);if(declUtils.attrHolderPropName.indexOf(leafPropName)>-1){var parentPath=dataPath.substring(0,lastDotNdx);modelPropertySvc.updateProperty(parentPath,leafPropName,sourceObject,targetObject);return false;}var newValue=_.get(sourceObject,dataPath);_.set(targetObject,dataPath,newValue);return _.isString(newValue)&&/^{{i18n\\./.test(newValue)||_.isObject(newValue)&&/^{{i18n\\./.test(newValue.text);};/**\n  * Return a new instance of a {DeclVideModel} initialized based on the given information.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - (Optional) The object returned from loading the JSON resource\n  *            for this DeclViewModel.\n  *            <P>\n  *            Note: A clone (deep copy) of this object will be set into the new object.\n  *\n  * @return {DeclViewModel} A newly created DeclViewModel object with all properties set to their default values\n  *         other than those set via any given JSON object..\n  */export let createDeclViewModel=function(declViewModelJson){return new DeclViewModel(declViewModelJson);};/**\n  * Resolve value of ctx and subPanelContext\n  * @param {String} propValue - Prop Value like {{ctx.title}} or {{subPanelContext.title}}.\n  * @param {String} propName - Prop name of element.\n  * @param {Object} dataObj - data object which will have ctx obj or subcontext.\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  */function resolvePropValue(propValue,propName,dataObj,parentJsonObject){var newVal=parsingUtils.getStringBetweenDoubleMustaches(propValue);var val=_.get(dataObj,newVal);if(val){parentJsonObject[propName]=val;}else{val=AwInterpolateService.instance(propValue)(dataObj);if(val){parentJsonObject[propName]=val;}else{parentJsonObject[propName]='';}}}/**\n  * Recursively initialize the property values of the given JSON data object with the current value of any bound\n  * appContext properties (bound via {{ctx.*}}).\n  * <P>\n  * Note: While on the 'exports' object, this API is only meant for internal/testing use.\n  *\n  * @param {Object} parentJsonObject - The current 'parent' JSON object to visit the 'child' properties of.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  */export let initViewModel=function(parentJsonObject,subPanelContext,props){_.forEach(parentJsonObject,function(propValue,propName){// Check if starts with '{{ctx.' and ends with '}}'\nif(_.isString(propValue)&&/^{{ctx\\..*}}$/.test(propValue)){resolvePropValue(propValue,propName,appCtxSvc,parentJsonObject);}else if(_.isString(propValue)&&/^{{subPanelContext\\..*}}$/.test(propValue)){// Check if starts with '{{subPanelContext.' and ends with '}}'\nresolvePropValue(propValue,propName,{subPanelContext:subPanelContext},parentJsonObject);}else if(_.isString(propValue)&&/^{{props\\..*}}$/.test(propValue)&&props){// Check if starts with '{{props.' and ends with '}}'\nresolvePropValue(propValue,propName,{props:props},parentJsonObject);}else if(_.isObject(propValue)){exports.initViewModel(propValue,subPanelContext,props);}});};/**\n  * Sanitize String properties of viewModelProperty.\n  *\n  * @param {Object} viewModelProperty - Object to check.\n  *\n  * @return {ViewModelProperty} sanitized viewModelProperty.\n  */function _sanitize(viewModelProperty){_.forOwn(viewModelProperty,function(value,key){if(propertiesToSanitize[key]){if(_.isString(value)){viewModelProperty[key]=sanitizer.sanitizeHtmlValue(value);}else if(_.isArray(value)){viewModelProperty[key]=sanitizer.sanitizeHtmlValues(value);}}});return viewModelProperty;}/**\n  * Process JSON data, create 'ViewModelProperty' object and fill in data for further processing.\n  *\n  * @param {DeclViewModelJson} declViewModelJson - Object loaded from the DeclViewModel JSON file.\n  *\n  * @param {Object} subPanelContext - (Optional) Subpanlecontext attribute of aw-include directive\n  *\n  * @return {Promise} The promise will be resolved with a new 'declViewModel' object populated with information\n  *         from the given 'declViewModelJson'.\n  */export let processViewModel=function(declViewModelJson,subPanelContext,props){var jsonData=declViewModelJson;debugService.debug('lifeCycles',declViewModelJson._viewModelId,'init');var newDeclViewModel=exports.createDeclViewModel(declViewModelJson);/**\n      * Check if we have any 'data' objects we need to apply appContext to.\n      */if(!_.isEmpty(jsonData.data)){/**\n          * Since 'initViewModel' changes the object given to it, make a clone now to leave the original JSON\n          * object untouched.\n          */var dataClone=_.cloneDeep(jsonData.data);exports.initViewModel(dataClone,subPanelContext,props);/**\n          *\n          */var compoundObjectMap={};var compoundViewModelObjectMap={};// If 'uid' is given in view model data, attach the model object to this DeclViewModel\nif(dataClone.uid){newDeclViewModel.vmo=newDeclViewModel.attachModelObject(dataClone.uid,dataClone.operationName,dataClone.owningObjUid);newDeclViewModel.uid=dataClone.uid;}_.forEach(dataClone,function(dataProp,propName){// eslint-disable-line complexity\n/**\n              * We do not want model objects as declViewModelObjects, so do not allow this 'marker' property on\n              * the new object. This case was already handled above.\n              */if(propName==='uid'){return;}/**\n              * Do not process properties beginning with underscore as view model properties.\n              */if(_.startsWith(propName,'_')){newDeclViewModel[propName]=dataProp;return;}if(propName==='objects'){if(!newDeclViewModel.objects){newDeclViewModel.objects={};}_.forEach(dataProp,function(dataPropValues,dataPropName){var vmos=[];dataPropValues.forEach(function(dataPropValue){var viewModelObject=newDeclViewModel.attachModelObject(dataPropValue.uid,dataClone.operationName,dataClone.owningObjUid,dataPropValue);if(dataPropValue.selected){newDeclViewModel.vmo=viewModelObject;}vmos.push(viewModelObject);});// same uid may map to multiple vmo\nif(vmos.length>1){newDeclViewModel.objects[dataPropName]=vmos;}else{newDeclViewModel.objects[dataPropName]=vmos[0];}});return;}/**\n              * Create a new viewModelProperty based on the JSON data's 'data' properties\n              */let propAttrHolder=declUtils.buildPropHolder(dataProp);// If this is not a view model prop, just save the object to the data.\nif(_.isEmpty(propAttrHolder)){newDeclViewModel[propName]=dataProp;return;}/**\n              * Make sure we have a 'propName' set.\n              */if(!propAttrHolder.propName){propAttrHolder.propName=propName;}// process compound property, like revision:item_revision_id\nvar isCompoundProp=false;var vmProp=null;if(propName.indexOf(_compoundPropNameDelimiter)>0&&propAttrHolder.dbValue.indexOf(_compoundPropValueDelimiter)>0){var compoundProps=propAttrHolder.dbValue.split(_compoundPropValueDelimiter);var objectRefProp=_.get(newDeclViewModel,compoundProps[0]);if(objectRefProp.type==='OBJECT'||objectRefProp.type==='OBJECTARRAY'){isCompoundProp=true;var modelObject=null;var childFullPropertyName='';var i=0;for(i=0;i<compoundProps.length-1;i++){if(i===0){modelObject=clientDataModel.getObject(objectRefProp.dbValues[0]);}else if(modelObject){childFullPropertyName+='__';objectRefProp=_.get(modelObject.props,compoundProps[i]);modelObject=clientDataModel.getObject(objectRefProp.dbValues[0]);}childFullPropertyName+=compoundProps[i];if(!compoundObjectMap.hasOwnProperty(childFullPropertyName)){_.set(compoundObjectMap,childFullPropertyName,modelObject);}}var compoundViewModelObject=_.get(compoundViewModelObjectMap,childFullPropertyName);if(!compoundViewModelObject&&modelObject){compoundViewModelObject=viewModelObjectSrv.createViewModelObject(modelObject.uid,dataClone.operationName);_.set(compoundViewModelObjectMap,childFullPropertyName,compoundViewModelObject);}if(compoundViewModelObject){vmProp=_.get(compoundViewModelObject.props,compoundProps[i]);if(!vmProp){// skip this view model property when the compound property doesn't exist in referenced object\nreturn;}_.set(vmProp,'intermediateCompoundObjects',compoundObjectMap);}}}if(!vmProp){vmProp=modelPropertySvc.createViewModelProperty(propAttrHolder);}// other properties\nif(!isCompoundProp&&!declUtils.isNil(dataProp.dbValue)){vmProp.dbValue=dataProp.dbValue;}if(dataProp.dataProvider){// we have an lov, but the api is defined using the dataProvider\nvmProp.dataProvider=dataProp.dataProvider;// initialize lovApi here? we could if we had the prop scope...\n// instead, postpone till first expand\nvmProp.hasLov=true;// allow empty LOV entry\nvmProp.emptyLOVEntry=dataProp.emptyLOVEntry;}if(!declUtils.isNil(dataProp.uiValue)){vmProp.uiValue=dataProp.uiValue;}if(!declUtils.isNil(dataProp.propertyLabelDisplay)){vmProp.propertyLabelDisplay=dataProp.propertyLabelDisplay;}// attach method for accessing the viewModel\nvmProp.getViewModel=function(){return newDeclViewModel;};/* revisitme Shaishav\n             * Hint: Sanitization failes some examples. Need to investigate.\n             newDeclViewModel[ propName ] = _sanitize( vmProp );\n             */newDeclViewModel[propName]=vmProp;});}if(jsonData.grids){newDeclViewModel.grids=_.cloneDeep(jsonData.grids);exports.initViewModel(newDeclViewModel.grids,subPanelContext);}if(jsonData.columnProviders){newDeclViewModel.columnProviders={};var mockedColumnProvider=mockModeService.isMockModeActive()&&jsonData.mock&&jsonData.mock.columnProviders;_.forEach(jsonData.columnProviders,function(jsonColumnProvider,cpName){if(mockedColumnProvider&&mockedColumnProvider[cpName]){jsonColumnProvider=mockedColumnProvider[cpName];}newDeclViewModel.columnProviders[cpName]=jsonColumnProvider;});}if(jsonData.chartProviders){if(!newDeclViewModel.chartProviders){newDeclViewModel.chartProviders={};}newDeclViewModel.chartProviders=jsonData.chartProviders;exports.initViewModel(newDeclViewModel.chartProviders,subPanelContext,props);_.forEach(newDeclViewModel.chartProviders,function(jsonChartProvider,chartProviderName){newDeclViewModel.chartProviders[chartProviderName].name=chartProviderName;});}if(jsonData.commands){newDeclViewModel.commands=_.cloneDeep(jsonData.commands);exports.initViewModel(newDeclViewModel.commands);}if(jsonData.commandHandlers){newDeclViewModel.commandHandlers=jsonData.commandHandlers;}if(jsonData.commandPlacements){newDeclViewModel.commandPlacements=jsonData.commandPlacements;}if(jsonData.objectSetSource){newDeclViewModel.objectSetSource=jsonData.objectSetSource;}if(jsonData.objectSetSource){newDeclViewModel.objectSetSource=jsonData.objectSetSource;}if(jsonData.editContext){/**\n             * revisitme\n             * editHandlerFactory is not ported yet\n\n                editHandlerService.setEditHandler( editHandlerFactory.createEditHandler( dataSourceService\n                    .createNewDataSource( {\n                        declViewModel: newDeclViewModel\n                    } ) ), jsonData.editContext );\n\n             */ // set this handler active\neditHandlerService.setActiveEditHandlerContext(jsonData.editContext);}if(jsonData.editHandlers){newDeclViewModel.editHandlers=jsonData.editHandlers;}return _populateDataProviders(declViewModelJson,newDeclViewModel,subPanelContext);};/**\n  * Update localization texts on the properties created based on data section\n  *\n  * @param {DeclViewModel} objectRoot - The 'declViewModel' to scan for possible I18n string replacements and the\n  *            model to apply those replacements to.\n  *\n  * @param {Object} i18nValueMap - Context to search the input string from.\n  *            <P>\n  *            Note: All property names in this object are possible to be used as string replacements. However,\n  *            most uses of this service will use 'i18n.' as the prefix in their text 'path'. Therefore, the\n  *            'i18n' property of this object is the most important property.\n  *\n  * @param {Number} level - Level in the recursive walk of the i18n properties.\n  *\n  * @param {StringMap} paramValues -\n  */export let updateI18nTexts=function(objectRoot,i18nValueMap,level,paramValues){_.forEach(objectRoot,function(propValue,propName){/**\n          * Check if <BR>\n          * There is NO property value OR <BR>\n          * It is a property that is 'reserved' (scope, ctx, data) OR<BR>\n          * It is known to be invalid to traverse (propertyDescriptor*, props, modelType, etc.)\n          * <P>\n          * Note: We are doing this to avoid cyclic traversals and data known to not contains i18n bindings.\n          */if(!propValue||propValue.propertyDescriptor||/^(scope|ctx|data|props|eventData|eventMap|propertyDescriptor(|s|sMaps)|modelType|_internal|\\$.*)$/.test(propName)||_.isFunction(propValue)||_.isNumber(propValue)||_.isBoolean(propValue)||level===1&&propName==='action'){return true;}/**\n          * Skip binding to any '_internal' properties or those starting with '$' or those with 'null' values, or\n          * properties from a model object\n          */if(_.isString(propValue)){if(/^{{i18n\\./.test(propValue)){var results=propValue.match(parsingUtils.REGEX_DATABINDING);if(results&&results.length===4){var textPath=results[2];var val=_.get(i18nValueMap,textPath);if(paramValues&&!_.isEmpty(paramValues)){val=messagingService.applyMessageParamsWithoutContext(val,paramValues);}if(val){objectRoot[propName]=val;}else{// use i18n key as fall back if no i18n text found, slice the leading 'i18n.' in textPath to get key\nobjectRoot[propName]=textPath.slice(5);}}}}else if(_.isObject(propValue)&&propValue.text&&propValue.params){objectRoot[propName]=propValue.text;exports.updateI18nTexts(objectRoot,i18nValueMap,nextLevel,propValue.params);}else{if(!_.isEmpty(propValue)){var nextLevel=level+1;if(propName==='dataProviders'){/**\n                      * Resolve any i18n bindings in dataProvider command titles.\n                      */_.forEach(propValue,function(propValue2){if(propValue2&&propValue2.commands){exports.updateI18nTexts(propValue2.commands,i18nValueMap,nextLevel);}});}else{exports.updateI18nTexts(propValue,i18nValueMap,nextLevel);}}}return undefined;});};const reduceParentJsonObject=function(parentJsonObject,resolvedData,propNameArg){_.forEach(parentJsonObject,function(propValue,propName){if(_.isString(propValue)&&/^{{subPanelContext\\..*}}$/.test(propValue)&&propNameArg){_.set(resolvedData,propNameArg+'.'+propName,propValue);}else if(_.isObject(propValue)){let propNameArg2=propNameArg?propNameArg+'.'+propName:propName;reduceParentJsonObject(propValue,resolvedData,propNameArg2);}});};export let resolveSubPanelContext=function(parentJsonObject,subPanelContext,resolvedData){reduceParentJsonObject(parentJsonObject,resolvedData);exports.initViewModel(resolvedData,subPanelContext);};export let getInputDataExpression=function(jsonObject){let expressionPaths=[];_.forEach(jsonObject,function(propValue,propName){if(_.isString(propValue)&&_.startsWith(propValue,'{{')&&propName){let path=parsingUtils.getStringBetweenDoubleMustaches(propValue);expressionPaths.push({[propName]:path});}else if(_.isObject(propValue)){expressionPaths.push(...getInputDataExpression(propValue));}});return expressionPaths;};export let shouldCreateViewModelProperty=function(dataProp){var propAttrHolder={};_.forEach(dataProp,function(dataPropValue,dataPropName){if(declUtils.attrHolderPropName.indexOf(dataPropName)>-1){propAttrHolder[dataPropName]=dataPropValue;}});return!_.isEmpty(propAttrHolder);};/**\n  * Check if any view model on the page is currently active\n  *\n  * @returns {Boolean} true if active\n  */export let isAnyViewModelActive=function(){return sharedViewModelToken!==0;};exports={updateDataProperty,createDeclViewModel,initViewModel,processViewModel,updateI18nTexts,isAnyViewModelActive,resolveSubPanelContext,shouldCreateViewModelProperty};export default exports;","map":null,"metadata":{},"sourceType":"module"}
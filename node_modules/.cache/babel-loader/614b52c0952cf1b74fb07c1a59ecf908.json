{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\viewmodel\\\\AwFullScreenViewModel.json\";\n// Compiler result to JSON file\nimport { createComponent } from 'js/declViewModelService';\nimport { registerDynImportEntry } from 'js/moduleLoader';\nimport AwParseService from 'js/awParseService';\nimport AwFilterService from 'js/awFilterService';\nimport { getField } from 'js/utils';\nimport { Fragment } from 'react';\nlet filterSer = AwFilterService.instance;\nimport AwLayoutSlot from 'viewmodel/AwLayoutSlotViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport { AwClass, ExistWhen } from 'js/hocCollection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DivAwClass = AwClass('div');\n_c = DivAwClass;\nconst AwLayoutSlotExistWhen = ExistWhen(AwLayoutSlot);\n/*\nctx imports\n*/\n\n_c2 = AwLayoutSlotExistWhen;\nconst ctxImportObj = {};\n/*\nview model\n */\n\nconst declViewModelJson = {\n  \"schemaVersion\": \"1.0.0\",\n  \"data\": {\n    \"fullScreenState\": {\n      \"initialValues\": {\n        \"value\": false\n      },\n      \"meta\": {}\n    }\n  },\n  \"props\": {\n    \"header-title\": {\n      \"type\": \"string\"\n    },\n    \"header-path\": {\n      \"type\": \"string\"\n    },\n    \"header-context-title\": {\n      \"type\": \"string\"\n    },\n    \"include-component-name\": {\n      \"type\": \"string\"\n    },\n    \"context\": {\n      \"type\": \"object\"\n    }\n  },\n  \"_viewModelId\": \"AwFullScreen\",\n  \"_uniqueViewModelId\": \"AwFullScreen\",\n  \"ctx\": {}\n};\n/*\n<div aw-class=\"[{'sw-full-screen-off': data.fullScreenState.value === false },{'sw-full-screen-on sw-column': data.fullScreenState.value === true}]\">\n    <aw-layout-slot name='aw_fullScreenHeader' exist-when=\"data.fullScreenState.value === true\" class='aw-layout-fit' context=\"{ ...props.context,\n        headerTitle : props.headerTitle,\n        headerPath: props.headerPath,\n        headerContextTitle:props.headerContextTitle,\n        fullScreenState : data.fullScreenState}\"></aw-layout-slot>\n    <aw-include class=\"aw-base-scrollPanel flex-auto\" name=\"{{props.includeComponentName}}\" sub-panel-context=\"{ ...props.context, fullScreenState : data.fullScreenState }\"></aw-include>\n</div>\n\n*/\n\nconst renderFn = props => {\n  let subPanelContext = props.subPanelContext;\n  let {\n    viewModel: {\n      data,\n      dataProviders,\n      dispatch,\n      conditions,\n      selectionModels,\n      editHandlers,\n      chartProviders,\n      ports\n    },\n    grids,\n    ctx,\n    actions,\n    fields,\n    messages,\n    i18n,\n    formProp,\n    viewPath\n  } = props;\n  data = { ...data,\n    dataProviders\n  };\n\n  if (subPanelContext && subPanelContext.fields) {\n    fields = { ...fields,\n      ...subPanelContext.fields\n    };\n  }\n\n  let $index = null;\n  return /*#__PURE__*/_jsxDEV(DivAwClass, {\n    awClass: AwParseService.instance(\"[{'sw-full-screen-off': fields.fullScreenState.value === false },{'sw-full-screen-on sw-column': fields.fullScreenState.value === true}]\")({\n      props,\n      data,\n      fields,\n      dataProviders,\n      ctx,\n      i18n,\n      actions,\n      subPanelContext,\n      viewPath,\n      conditions,\n      formProp,\n      dispatch,\n      selectionModels,\n      editHandlers,\n      chartProviders,\n      ports\n    }),\n    children: [/*#__PURE__*/_jsxDEV(AwLayoutSlotExistWhen, {\n      name: \"aw_fullScreenHeader\",\n      className: \"aw-layout-fit\",\n      context: AwParseService.instance(\"{ ...props.context,\\n        headerTitle : props.headerTitle,\\n        headerPath: props.headerPath,\\n        headerContextTitle:props.headerContextTitle,\\n        fullScreenState : fields.fullScreenState}\")({\n        props,\n        data,\n        fields,\n        dataProviders,\n        ctx,\n        i18n,\n        actions,\n        subPanelContext,\n        viewPath,\n        conditions,\n        formProp,\n        dispatch,\n        selectionModels,\n        editHandlers,\n        chartProviders,\n        ports\n      }),\n      existWhen: AwParseService.instance(\"fields.fullScreenState.value === true\")({\n        props,\n        data,\n        fields,\n        dataProviders,\n        ctx,\n        i18n,\n        actions,\n        subPanelContext,\n        viewPath,\n        conditions,\n        formProp,\n        dispatch,\n        selectionModels,\n        editHandlers,\n        chartProviders,\n        ports\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwInclude, {\n      viewId: AwParseService.instance(\"props.includeComponentName\")({\n        props,\n        data,\n        fields,\n        dataProviders,\n        ctx,\n        i18n,\n        actions,\n        subPanelContext,\n        viewPath,\n        conditions,\n        formProp,\n        dispatch,\n        selectionModels,\n        editHandlers,\n        chartProviders,\n        ports\n      }),\n      viewPath: AwParseService.instance(\"viewPath\")({\n        props,\n        data,\n        fields,\n        dataProviders,\n        ctx,\n        i18n,\n        actions,\n        subPanelContext,\n        viewPath,\n        conditions,\n        formProp,\n        dispatch,\n        selectionModels,\n        editHandlers,\n        chartProviders,\n        ports\n      }),\n      className: \"aw-base-scrollPanel flex-auto\",\n      name: AwParseService.instance(\"props.includeComponentName\")({\n        props,\n        data,\n        fields,\n        dataProviders,\n        ctx,\n        i18n,\n        actions,\n        subPanelContext,\n        viewPath,\n        conditions,\n        formProp,\n        dispatch,\n        selectionModels,\n        editHandlers,\n        chartProviders,\n        ports\n      }),\n      subPanelContext: AwParseService.instance(\"{ ...props.context, fullScreenState : fields.fullScreenState }\")({\n        props,\n        data,\n        fields,\n        dataProviders,\n        ctx,\n        i18n,\n        actions,\n        subPanelContext,\n        viewPath,\n        conditions,\n        formProp,\n        dispatch,\n        selectionModels,\n        editHandlers,\n        chartProviders,\n        ports\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 13\n  }, this);\n};\n/*\ndefine component\n*/\n\n\nconst Component = createComponent(declViewModelJson, renderFn, undefined, ctxImportObj);\nexport default Component;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DivAwClass\");\n$RefreshReg$(_c2, \"AwLayoutSlotExistWhen\");","map":{"version":3,"names":["createComponent","registerDynImportEntry","AwParseService","AwFilterService","getField","Fragment","filterSer","instance","AwLayoutSlot","AwInclude","AwClass","ExistWhen","DivAwClass","AwLayoutSlotExistWhen","ctxImportObj","declViewModelJson","renderFn","props","subPanelContext","viewModel","data","dataProviders","dispatch","conditions","selectionModels","editHandlers","chartProviders","ports","grids","ctx","actions","fields","messages","i18n","formProp","viewPath","$index","Component","undefined"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/viewmodel/AwFullScreenViewModel.json"],"sourcesContent":["// Compiler result to JSON file\nimport { createComponent } from 'js/declViewModelService';\nimport { registerDynImportEntry } from 'js/moduleLoader';\nimport AwParseService from 'js/awParseService';\nimport AwFilterService from 'js/awFilterService';\nimport { getField } from 'js/utils';\nimport { Fragment } from 'react';\nlet filterSer = AwFilterService.instance;\nimport AwLayoutSlot from 'viewmodel/AwLayoutSlotViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport { AwClass,ExistWhen } from 'js/hocCollection';\nconst DivAwClass = AwClass('div');\nconst AwLayoutSlotExistWhen = ExistWhen(AwLayoutSlot);\n\n\n\n/*\nctx imports\n*/\n\nconst ctxImportObj = {  };\n\n\n\n\n/*\nview model\n */\nconst declViewModelJson = {\n    \"schemaVersion\": \"1.0.0\",\n    \"data\": {\n        \"fullScreenState\": {\n            \"initialValues\": {\n                \"value\": false\n            },\n            \"meta\": {}\n        }\n    },\n    \"props\": {\n        \"header-title\": {\n            \"type\": \"string\"\n        },\n        \"header-path\": {\n            \"type\": \"string\"\n        },\n        \"header-context-title\": {\n            \"type\": \"string\"\n        },\n        \"include-component-name\": {\n            \"type\": \"string\"\n        },\n        \"context\": {\n            \"type\": \"object\"\n        }\n    },\n    \"_viewModelId\": \"AwFullScreen\",\n    \"_uniqueViewModelId\": \"AwFullScreen\",\n    \"ctx\": {}\n};\n\n/*\n<div aw-class=\"[{'sw-full-screen-off': data.fullScreenState.value === false },{'sw-full-screen-on sw-column': data.fullScreenState.value === true}]\">\n    <aw-layout-slot name='aw_fullScreenHeader' exist-when=\"data.fullScreenState.value === true\" class='aw-layout-fit' context=\"{ ...props.context,\n        headerTitle : props.headerTitle,\n        headerPath: props.headerPath,\n        headerContextTitle:props.headerContextTitle,\n        fullScreenState : data.fullScreenState}\"></aw-layout-slot>\n    <aw-include class=\"aw-base-scrollPanel flex-auto\" name=\"{{props.includeComponentName}}\" sub-panel-context=\"{ ...props.context, fullScreenState : data.fullScreenState }\"></aw-include>\n</div>\n\n*/\nconst renderFn =(props)=> {\n    let subPanelContext = props.subPanelContext ;\n    let { viewModel: { data, dataProviders, dispatch, conditions, selectionModels, editHandlers, chartProviders, ports  }, grids, ctx, actions, fields, messages, i18n, formProp, viewPath  } = props;\n    data = {...data, dataProviders};\n    if( subPanelContext && subPanelContext.fields ){\n        fields = { ...fields, ...subPanelContext.fields };\n    }\n    let $index = null;\n    return (\n            <DivAwClass awClass={AwParseService.instance( \"[{'sw-full-screen-off': fields.fullScreenState.value === false },{'sw-full-screen-on sw-column': fields.fullScreenState.value === true}]\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )}>\n        <AwLayoutSlotExistWhen name=\"aw_fullScreenHeader\" className=\"aw-layout-fit\" context={AwParseService.instance( \"{ ...props.context,\\n        headerTitle : props.headerTitle,\\n        headerPath: props.headerPath,\\n        headerContextTitle:props.headerContextTitle,\\n        fullScreenState : fields.fullScreenState}\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )} existWhen={AwParseService.instance( \"fields.fullScreenState.value === true\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )}>\n        </AwLayoutSlotExistWhen>\n        <AwInclude viewId={AwParseService.instance( \"props.includeComponentName\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )} viewPath={AwParseService.instance( \"viewPath\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )} className=\"aw-base-scrollPanel flex-auto\" name={AwParseService.instance( \"props.includeComponentName\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )} subPanelContext={AwParseService.instance( \"{ ...props.context, fullScreenState : fields.fullScreenState }\" )( { props, data, fields, dataProviders, ctx, i18n, actions, subPanelContext, viewPath, conditions, formProp, dispatch, selectionModels, editHandlers, chartProviders, ports } )}>\n        </AwInclude>\n    </DivAwClass>\n    )\n};\n\n\n/*\ndefine component\n*/\nconst Component = createComponent( declViewModelJson, renderFn, undefined, ctxImportObj );\n\nexport default Component;"],"mappings":";AAAA;AACA,SAASA,eAAT,QAAgC,yBAAhC;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,IAAIC,SAAS,GAAGH,eAAe,CAACI,QAAhC;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,SAASC,OAAT,EAAiBC,SAAjB,QAAkC,kBAAlC;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,KAAD,CAA1B;KAAME,U;AACN,MAAMC,qBAAqB,GAAGF,SAAS,CAACH,YAAD,CAAvC;AAIA;AACA;AACA;;MANMK,qB;AAQN,MAAMC,YAAY,GAAG,EAArB;AAKA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG;EACtB,iBAAiB,OADK;EAEtB,QAAQ;IACJ,mBAAmB;MACf,iBAAiB;QACb,SAAS;MADI,CADF;MAIf,QAAQ;IAJO;EADf,CAFc;EAUtB,SAAS;IACL,gBAAgB;MACZ,QAAQ;IADI,CADX;IAIL,eAAe;MACX,QAAQ;IADG,CAJV;IAOL,wBAAwB;MACpB,QAAQ;IADY,CAPnB;IAUL,0BAA0B;MACtB,QAAQ;IADc,CAVrB;IAaL,WAAW;MACP,QAAQ;IADD;EAbN,CAVa;EA2BtB,gBAAgB,cA3BM;EA4BtB,sBAAsB,cA5BA;EA6BtB,OAAO;AA7Be,CAA1B;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGC,KAAD,IAAU;EACtB,IAAIC,eAAe,GAAGD,KAAK,CAACC,eAA5B;EACA,IAAI;IAAEC,SAAS,EAAE;MAAEC,IAAF;MAAQC,aAAR;MAAuBC,QAAvB;MAAiCC,UAAjC;MAA6CC,eAA7C;MAA8DC,YAA9D;MAA4EC,cAA5E;MAA4FC;IAA5F,CAAb;IAAmHC,KAAnH;IAA0HC,GAA1H;IAA+HC,OAA/H;IAAwIC,MAAxI;IAAgJC,QAAhJ;IAA0JC,IAA1J;IAAgKC,QAAhK;IAA0KC;EAA1K,IAAwLlB,KAA5L;EACAG,IAAI,GAAG,EAAC,GAAGA,IAAJ;IAAUC;EAAV,CAAP;;EACA,IAAIH,eAAe,IAAIA,eAAe,CAACa,MAAvC,EAA+C;IAC3CA,MAAM,GAAG,EAAE,GAAGA,MAAL;MAAa,GAAGb,eAAe,CAACa;IAAhC,CAAT;EACH;;EACD,IAAIK,MAAM,GAAG,IAAb;EACA,oBACQ,QAAC,UAAD;IAAY,OAAO,EAAElC,cAAc,CAACK,QAAf,CAAyB,0IAAzB,EAAuK;MAAEU,KAAF;MAASG,IAAT;MAAeW,MAAf;MAAuBV,aAAvB;MAAsCQ,GAAtC;MAA2CI,IAA3C;MAAiDH,OAAjD;MAA0DZ,eAA1D;MAA2EiB,QAA3E;MAAqFZ,UAArF;MAAiGW,QAAjG;MAA2GZ,QAA3G;MAAqHE,eAArH;MAAsIC,YAAtI;MAAoJC,cAApJ;MAAoKC;IAApK,CAAvK,CAArB;IAAA,wBACJ,QAAC,qBAAD;MAAuB,IAAI,EAAC,qBAA5B;MAAkD,SAAS,EAAC,eAA5D;MAA4E,OAAO,EAAEzB,cAAc,CAACK,QAAf,CAAyB,+MAAzB,EAA4O;QAAEU,KAAF;QAASG,IAAT;QAAeW,MAAf;QAAuBV,aAAvB;QAAsCQ,GAAtC;QAA2CI,IAA3C;QAAiDH,OAAjD;QAA0DZ,eAA1D;QAA2EiB,QAA3E;QAAqFZ,UAArF;QAAiGW,QAAjG;QAA2GZ,QAA3G;QAAqHE,eAArH;QAAsIC,YAAtI;QAAoJC,cAApJ;QAAoKC;MAApK,CAA5O,CAArF;MAAgf,SAAS,EAAEzB,cAAc,CAACK,QAAf,CAAyB,uCAAzB,EAAoE;QAAEU,KAAF;QAASG,IAAT;QAAeW,MAAf;QAAuBV,aAAvB;QAAsCQ,GAAtC;QAA2CI,IAA3C;QAAiDH,OAAjD;QAA0DZ,eAA1D;QAA2EiB,QAA3E;QAAqFZ,UAArF;QAAiGW,QAAjG;QAA2GZ,QAA3G;QAAqHE,eAArH;QAAsIC,YAAtI;QAAoJC,cAApJ;QAAoKC;MAApK,CAApE;IAA3f;MAAA;MAAA;MAAA;IAAA,QADI,eAGJ,QAAC,SAAD;MAAW,MAAM,EAAEzB,cAAc,CAACK,QAAf,CAAyB,4BAAzB,EAAyD;QAAEU,KAAF;QAASG,IAAT;QAAeW,MAAf;QAAuBV,aAAvB;QAAsCQ,GAAtC;QAA2CI,IAA3C;QAAiDH,OAAjD;QAA0DZ,eAA1D;QAA2EiB,QAA3E;QAAqFZ,UAArF;QAAiGW,QAAjG;QAA2GZ,QAA3G;QAAqHE,eAArH;QAAsIC,YAAtI;QAAoJC,cAApJ;QAAoKC;MAApK,CAAzD,CAAnB;MAA2P,QAAQ,EAAEzB,cAAc,CAACK,QAAf,CAAyB,UAAzB,EAAuC;QAAEU,KAAF;QAASG,IAAT;QAAeW,MAAf;QAAuBV,aAAvB;QAAsCQ,GAAtC;QAA2CI,IAA3C;QAAiDH,OAAjD;QAA0DZ,eAA1D;QAA2EiB,QAA3E;QAAqFZ,UAArF;QAAiGW,QAAjG;QAA2GZ,QAA3G;QAAqHE,eAArH;QAAsIC,YAAtI;QAAoJC,cAApJ;QAAoKC;MAApK,CAAvC,CAArQ;MAA2d,SAAS,EAAC,+BAAre;MAAqgB,IAAI,EAAEzB,cAAc,CAACK,QAAf,CAAyB,4BAAzB,EAAyD;QAAEU,KAAF;QAASG,IAAT;QAAeW,MAAf;QAAuBV,aAAvB;QAAsCQ,GAAtC;QAA2CI,IAA3C;QAAiDH,OAAjD;QAA0DZ,eAA1D;QAA2EiB,QAA3E;QAAqFZ,UAArF;QAAiGW,QAAjG;QAA2GZ,QAA3G;QAAqHE,eAArH;QAAsIC,YAAtI;QAAoJC,cAApJ;QAAoKC;MAApK,CAAzD,CAA3gB;MAAmvB,eAAe,EAAEzB,cAAc,CAACK,QAAf,CAAyB,gEAAzB,EAA6F;QAAEU,KAAF;QAASG,IAAT;QAAeW,MAAf;QAAuBV,aAAvB;QAAsCQ,GAAtC;QAA2CI,IAA3C;QAAiDH,OAAjD;QAA0DZ,eAA1D;QAA2EiB,QAA3E;QAAqFZ,UAArF;QAAiGW,QAAjG;QAA2GZ,QAA3G;QAAqHE,eAArH;QAAsIC,YAAtI;QAAoJC,cAApJ;QAAoKC;MAApK,CAA7F;IAApwB;MAAA;MAAA;MAAA;IAAA,QAHI;EAAA;IAAA;IAAA;IAAA;EAAA,QADR;AAQH,CAhBD;AAmBA;AACA;AACA;;;AACA,MAAMU,SAAS,GAAGrC,eAAe,CAAEe,iBAAF,EAAqBC,QAArB,EAA+BsB,SAA/B,EAA0CxB,YAA1C,CAAjC;AAEA,eAAeuB,SAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @module js/helloAuthenticatorService\n */\n\n/**\n * @return {Object} authenticator\n */\nexport function getAuthenticator() {\n  var exports = {};\n  /**\n   * This function determines if authentication is required. If already authenticated, none is required.\n   *\n   * @return {Promise} if promise is resolved, then no authentication is required. if promise fails, then the authenticate function will be called.\n   */\n\n  exports.checkIfSessionAuthenticated = function () {\n    return Promise.resolve();\n  };\n  /**\n   * authenticator specific function to carry out authentication. In the interactive case, we just resolve\n   * directly to continue the pipeline.\n   *\n   * @return {Promise} promise\n   */\n\n\n  exports.authenticate = function () {\n    return Promise.resolve();\n  };\n  /**\n   * this is called during the authentication process. It gets invoked after the authentication is\n   * completed/ready. It is a spot to do any session level initialization.\n   *\n   * @return {Promise} promise to be resolved after the authenticator does self initialization\n   */\n\n\n  exports.postAuthInitialization = function () {\n    return Promise.resolve();\n  };\n  /**\n   * triggers the authenticator sign out logic. Returns a promise invoked upon completion\n   *\n   * @return {Promise} promise to be invoked upon completion of the signout tasks\n   */\n\n\n  exports.signOut = function () {\n    return Promise.resolve();\n  };\n\n  return exports;\n}","map":{"version":3,"names":["getAuthenticator","exports","checkIfSessionAuthenticated","Promise","resolve","authenticate","postAuthInitialization","signOut"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/src/helloModule/src/js/helloAuthenticatorService.js"],"sourcesContent":["/**\n * @module js/helloAuthenticatorService\n */\n\n/**\n * @return {Object} authenticator\n */\nexport function getAuthenticator() {\n    var exports = {};\n\n    /**\n     * This function determines if authentication is required. If already authenticated, none is required.\n     *\n     * @return {Promise} if promise is resolved, then no authentication is required. if promise fails, then the authenticate function will be called.\n     */\n    exports.checkIfSessionAuthenticated = function() {\n        return Promise.resolve();\n    };\n\n    /**\n     * authenticator specific function to carry out authentication. In the interactive case, we just resolve\n     * directly to continue the pipeline.\n     *\n     * @return {Promise} promise\n     */\n    exports.authenticate = function() {\n        return Promise.resolve();\n    };\n\n    /**\n     * this is called during the authentication process. It gets invoked after the authentication is\n     * completed/ready. It is a spot to do any session level initialization.\n     *\n     * @return {Promise} promise to be resolved after the authenticator does self initialization\n     */\n    exports.postAuthInitialization = function() {\n        return Promise.resolve();\n    };\n\n    /**\n     * triggers the authenticator sign out logic. Returns a promise invoked upon completion\n     *\n     * @return {Promise} promise to be invoked upon completion of the signout tasks\n     */\n    exports.signOut = function() {\n        return Promise.resolve();\n    };\n\n    return exports;\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,GAA4B;EAC/B,IAAIC,OAAO,GAAG,EAAd;EAEA;AACJ;AACA;AACA;AACA;;EACIA,OAAO,CAACC,2BAAR,GAAsC,YAAW;IAC7C,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAFD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACIH,OAAO,CAACI,YAAR,GAAuB,YAAW;IAC9B,OAAOF,OAAO,CAACC,OAAR,EAAP;EACH,CAFD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACIH,OAAO,CAACK,sBAAR,GAAiC,YAAW;IACxC,OAAOH,OAAO,CAACC,OAAR,EAAP;EACH,CAFD;EAIA;AACJ;AACA;AACA;AACA;;;EACIH,OAAO,CAACM,OAAR,GAAkB,YAAW;IACzB,OAAOJ,OAAO,CAACC,OAAR,EAAP;EACH,CAFD;;EAIA,OAAOH,OAAP;AACH"},"metadata":{},"sourceType":"module"}
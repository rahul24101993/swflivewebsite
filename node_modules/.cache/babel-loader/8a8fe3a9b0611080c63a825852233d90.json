{"ast":null,"code":"var _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s4 = $RefreshSig$(); // Copyright (c) 2021 Siemens\n\n/**\n * @module js/declSelectionModelFactory\n */\n\n\nimport { useReducer, useRef, useState } from 'react';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport declDataCtxService from 'js/declarativeDataCtxService';\n\nconst selectionReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_MODE':\n      //handle deselect\n      //If object is already selected then remove it\n      return { ...state,\n        mode: action.value\n      };\n\n    case 'SET_MULTI_SELECT_ENABLED':\n      return { ...state,\n        multiSelectEnabled: action.value\n      };\n\n    case 'SET_SELECTION_ENABLED':\n      return { ...state,\n        selectionEnabled: action.value\n      };\n\n    case 'SET_SELECTION_STATE':\n      return { ...state,\n        selectionState: action.value\n      };\n\n    case 'SET_SELECTION':\n      return { ...state,\n        lastSelected: state.selected,\n        selected: action.value.selected,\n        selectionModelActivated: action.value.isSelectionModelActive\n      };\n\n    case 'SET_SM_ACTIVE':\n      return { ...state,\n        selectionModelActivated: action.value\n      };\n\n    case 'SELECT_ALL':\n      return { ...state,\n        selectedObjects: [],\n        selectAll: true\n      };\n\n    case 'SET_DP_LISTENER':\n      if (state && !state.dpListener && !action.value) {\n        return state;\n      }\n\n      return { ...state,\n        dpListener: action.value\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useBuildSelectionModel = (selectionModelJson, smName, dataCtxNode, selectionModelRef) => {\n  _s5();\n\n  _s();\n\n  declDataCtxService.applyScope(dataCtxNode.data, selectionModelJson, null, dataCtxNode, null);\n  const mode = selectionModelJson && selectionModelJson.selectionMode ? selectionModelJson.selectionMode : 'multiple';\n  return useSelectionModel(mode, null, null, smName, selectionModelRef);\n};\n\n_s5(useBuildSelectionModel, \"XUzO+WLIUReVcuJ/WEBCRAOzHdw=\", false, function () {\n  return [useSelectionModel];\n});\n\n_s(useBuildSelectionModel, \"XUzO+WLIUReVcuJ/WEBCRAOzHdw=\", false, function () {\n  return [useSelectionModel];\n});\n\nexport const useSelectionModel = (mode, tracker, inputSelectionModel, smName, selectionModelRef) => {\n  _s6();\n\n  _s2();\n\n  const [selectionModel, selectionModelDispatcher] = useReducer(selectionReducer, {\n    mode: mode,\n    smName: smName,\n    multiSelectEnabled: false,\n    selectionEnabled: mode !== 'none',\n    selectionState: 'none',\n    selected: [],\n    lastSelectionState: [],\n    selectionModelActivated: true,\n    dpListener: null\n  }); // If selection Model is already passed no need to create another state.\n\n  if (inputSelectionModel) {\n    return inputSelectionModel;\n  }\n\n  if (!selectionModelRef || !_.isEqual(selectionModelRef.getSelectionModelState(), selectionModel)) {\n    return buildSelectionModel(selectionModel, selectionModelDispatcher, tracker);\n  }\n\n  return selectionModelRef;\n};\n\n_s6(useSelectionModel, \"ojxJCdvGHJpPIvkgLwtenag6MJQ=\");\n\n_s2(useSelectionModel, \"qz3WOSgJBH64Kh+kX7llmraN7J4=\");\n\nconst buildSelectionModel = (selModel, selectionModelDispatcher, tracker) => {\n  const selectionModel = {};\n\n  if (!tracker) {\n    tracker = input => {\n      if (typeof input === 'string') {\n        return input;\n      } else if (typeof input === 'object' && input.propInternalValue) {\n        return input.propInternalValue;\n      } else if (typeof input === 'object' && input.type === 'Awp0XRTObjectSetRow') {\n        var targetObj = _.get(input, 'props.awp0Target');\n\n        if (targetObj && targetObj.dbValue) {\n          return targetObj.dbValue;\n        }\n      } else if (typeof input === 'object') {\n        return getEvaluatedId(input);\n      }\n\n      return input;\n    };\n  }\n\n  selectionModel.getSelectionModelState = () => {\n    return selModel;\n  };\n\n  selectionModel.setMode = mode => {\n    selectionModelDispatcher({\n      type: 'SET_MODE',\n      value: mode\n    });\n  };\n\n  selectionModel.getMode = () => selModel.mode;\n\n  selectionModel.addRemoveDpListener = (operation, dp) => {\n    if (operation === 'add') {\n      selectionModelDispatcher({\n        type: 'SET_DP_LISTENER',\n        value: dp\n      });\n    } else if (operation === 'remove') {\n      selectionModelDispatcher({\n        type: 'SET_DP_LISTENER',\n        value: null\n      });\n    }\n  };\n\n  selectionModel.getDpListener = () => {\n    return selModel.dpListener;\n  };\n\n  selectionModel.setMode = mode => {\n    selectionModelDispatcher({\n      type: 'SET_MODE',\n      value: mode\n    });\n  };\n\n  selectionModel.mode = selModel.mode;\n  selectionModel.selectionEnabled = selModel.selectionEnabled;\n  selectionModel.multiSelectEnabled = selModel.multiSelectEnabled;\n  selectionModel.selectionState = selModel.selectionState;\n  selectionModel.name = selModel.smName; // for debugging purpose to identify which selectionModel is in action\n\n  selectionModel.getLastSelection = () => selModel.lastSelected;\n\n  selectionModel.setSelection = function (newSelection) {\n    let isSelectionModelActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (selModel.selectionEnabled) {\n      var uidList = newSelection ? asTrackedList(newSelection, tracker) : []; // Replace selection\n\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: uidList,\n          isSelectionModelActive: isSelectionModelActive\n        }\n      }); // Auto exit multi select\n\n      checkResetMultiSelect(selectionModel);\n    }\n  };\n\n  selectionModel.getSelection = () => selModel.selected;\n\n  selectionModel.getCanExecuteSelectLoaded = () => selModel.mode === 'multiple' && selModel.selectionState !== 'all';\n\n  selectionModel.getCanExecuteDeselect = () => selModel.mode === 'multiple' && selModel.selectionState === 'all';\n\n  selectionModel.setMultiSelectionEnabled = newMultiSelectState => {\n    const mode = selModel.mode;\n    const multiSelectEnabled = selModel.multiSelectEnabled;\n\n    if (mode !== 'none' && multiSelectEnabled !== newMultiSelectState) {\n      if (newMultiSelectState && mode !== 'multiple') {\n        logger.warn('Cannot enter multi select mode when selection model is single select');\n      } else {\n        selectionModelDispatcher({\n          type: 'SET_MULTI_SELECT_ENABLED',\n          value: newMultiSelectState\n        }); // Update select / deselect command visibility\n\n        notifySelectionState(selectionModel);\n      }\n    }\n  };\n\n  selectionModel.isMultiSelectionEnabled = () => selModel.multiSelectEnabled;\n\n  selectionModel.setSelectionEnabled = isSelectionEnabled => {\n    if (selModel.mode !== 'none') {\n      selectionModelDispatcher({\n        type: 'SET_SELECTION_ENABLED',\n        value: isSelectionEnabled\n      });\n    }\n  };\n\n  selectionModel.isSelectionEnabled = () => selModel.selectionEnabled;\n\n  selectionModel.setSelectionModelActivated = isSelectionModelActive => {\n    selectionModelDispatcher({\n      type: 'SET_SM_ACTIVE',\n      value: isSelectionModelActive\n    });\n  };\n\n  selectionModel.isSelectionModelActivated = () => selModel.selectionModelActivated;\n\n  selectionModel.setSelectionState = value => selectionModelDispatcher({\n    type: 'SET_SELECTION_STATE',\n    value\n  });\n\n  selectionModel.getSelectionState = () => selModel.selectionState;\n\n  selectionModel.evaluateSelectionStatusSummary = dataProvider => {\n    if (dataProvider) {\n      if (dataProvider.viewModelCollection) {\n        // Check of there's any objects in the data provider that aren't selected\n        var loadedVmos = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n        var objectsNotSelected = loadedVmos.filter(function (x) {\n          return !selectionModel.isSelected(x);\n        }); // If everything is selected state is 'all'\n\n        if (loadedVmos.length && objectsNotSelected.length === 0) {\n          selectionModelDispatcher({\n            type: 'SET_SELECTION_STATE',\n            value: 'all'\n          });\n        } else {\n          // Otherwise it's some / none depending on what is selected\n          const selected = selModel.selected;\n          selectionModelDispatcher({\n            type: 'SET_SELECTION_STATE',\n            value: selected.length > 0 ? 'some' : 'none'\n          });\n        }\n      } // Update select / deselect command visibility\n\n\n      notifySelectionState(selectionModel);\n    } else {\n      logger.error('No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary');\n    }\n  };\n\n  selectionModel.addToSelection = newSelection => {\n    // If selection is not disabled\n    if (selModel.selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = asTrackedList(newSelection, tracker); // Add to selection if not already in there\n\n      const toUpdate = selModel.selected.concat(uidList.filter(function (uid) {\n        return selModel.selected.indexOf(uid) === -1;\n      }));\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: toUpdate,\n          isSelectionModelActive: true\n        }\n      });\n    }\n  };\n\n  selectionModel.removeFromSelection = newSelection => {\n    // If selection is not disabled\n    if (selModel.selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = asTrackedList(newSelection, tracker); // Remove any uid that is in the list of uids from the selection\n\n      const toUpdate = selModel.selected.filter(function (uid) {\n        return uidList.indexOf(uid) === -1;\n      });\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: toUpdate,\n          isSelectionModelActive: true\n        }\n      });\n      checkResetMultiSelect(selectionModel);\n    }\n  };\n\n  selectionModel.toggleSelection = function (newSelection) {\n    // If selection is not disabled\n    if (selModel.selectionEnabled) {\n      // Convert input to list of uids\n      const uidList = asTrackedList(newSelection, tracker); // Get the list of uids that are selected / not selected\n\n      const uidsNotSelected = uidList.filter(function (uid) {\n        return selModel.selected.indexOf(uid) === -1;\n      });\n      const uidsSelected = uidList.filter(function (uid) {\n        return selModel.selected.indexOf(uid) !== -1;\n      }); // Remove any objects were selected\n\n      const toUpdate = selModel.selected.filter(function (uid) {\n        return uidsSelected.indexOf(uid) === -1;\n      }) // And add the objects that were not selected\n      .concat(uidsNotSelected);\n      selectionModelDispatcher({\n        type: 'SET_SELECTION',\n        value: {\n          selected: toUpdate,\n          isSelectionModelActive: true\n        }\n      });\n      checkResetMultiSelect(selectionModel);\n    }\n  };\n\n  selectionModel.getCurrentSelectedCount = () => selModel.selected.length;\n\n  selectionModel.selectNone = () => selectionModel.setSelection([]);\n\n  selectionModel.isSelected = obj => selectionModel.getSelectedIndex(obj) !== -1;\n\n  selectionModel.getSortedSelection = objList => {\n    // Get the selected objects\n    return objList.filter(function (x) {\n      return selectionModel.isSelected(x);\n    }) // And sort by the order in selection model\n    .sort(function (a, b) {\n      var tracked = tracker ? tracker(a) : a;\n      var tracked2 = tracker ? tracker(b) : b;\n      return selModel.selected.indexOf(tracked) - selModel.selected.indexOf(tracked2);\n    });\n  };\n\n  selectionModel.getSelectedIndex = obj => {\n    var tracked = tracker ? tracker(obj) : obj;\n    return selModel.selected.indexOf(tracked);\n  };\n\n  selectionModel.updateSelectedObjects = x => {\n    logger.warn('Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()');\n    selectionModel.setSelection(x);\n  };\n\n  return selectionModel;\n};\n/**\n  * Utility to fire events that update select all / deselect all command visibility\n  */\n\n\nconst notifySelectionState = selectionModel => {\n  var canSelectLoaded = selectionModel.getCanExecuteSelectLoaded();\n  var canDeselect = selectionModel.getCanExecuteDeselect();\n  const lastSelectionState = selectionModel.lastSelectionState;\n\n  if (lastSelectionState !== undefined && (lastSelectionState.CanExecuteSelectLoaded !== canSelectLoaded || lastSelectionState.CanExecuteDeselect !== canDeselect)) {\n    lastSelectionState.CanExecuteSelectLoaded = canSelectLoaded;\n    lastSelectionState.CanExecuteDeselect = canDeselect;\n    eventBus.publish('CanExecuteSelectLoaded', {});\n    eventBus.publish('CanExecuteDeselect', {});\n  }\n};\n/**\n  * Utility to exit multi select mode when selection is cleared\n  */\n\n\nconst checkResetMultiSelect = selectionModel => {\n  const selected = selectionModel.getSelection();\n  const multiSelectEnabled = selectionModel.isMultiSelectionEnabled(); // Disable multi select when all selection is cleared\n\n  if (selected.length === 0 && !multiSelectEnabled) {\n    selectionModel.setMultiSelectionEnabled(false);\n    selectionModel.setSelectionState('none');\n  }\n};\n\nexport const asTrackedList = (newSelection, tracker) => {\n  // Ensure it is array of some sort\n  if (!_.isArray(newSelection)) {\n    newSelection = [newSelection];\n  } // Ensure everything in array is tracked\n\n\n  return tracker ? newSelection.map(tracker) : newSelection;\n};\nexport const useSelectionModels = (selectionModelsJson, dataCtxNode) => {\n  _s8();\n\n  var _s7 = $RefreshSig$();\n\n  _s4();\n\n  var _s3 = $RefreshSig$();\n\n  let selectionModelsRef = useRef({}); // Just to make sure the selectionModels name order is same in every render.\n\n  const [selectionModelNames] = useState(() => {\n    return selectionModelsJson !== undefined ? Object.keys(selectionModelsJson) : [];\n  }); //selectionModels order will never change between render cycles, hence disabling the eslint\n  //https://stackoverflow.com/questions/53906843/why-cant-react-hooks-be-called-inside-loops-or-nested-function\n  // zarq9k: any better solution ?\n\n  _s7(_s3(_s7(selectionModelNames.forEach(_s7(_s3(_s7(smName => {\n    _s7();\n\n    _s3(); // eslint-disable-next-line react-hooks/rules-of-hooks\n\n\n    selectionModelsRef.current[smName] = useBuildSelectionModel(selectionModelsJson[smName], smName, dataCtxNode, selectionModelsRef.current[smName]);\n  }, \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  }), \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  }), \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  })), \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  }), \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  }), \"L9C9gBFaLa9E2bzCHHl0oBOXl30=\", false, function () {\n    return [useBuildSelectionModel];\n  });\n\n  return selectionModelsRef.current;\n};\n\n_s8(useSelectionModels, \"zAgX4gTDJcKfByLnOLF5s1OXpy0=\");\n\n_s4(useSelectionModels, \"IZlQ83+LePKLIYTCTLLXtiCpz7o=\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/declSelectionModelFactory.js"],"names":["selectionReducer","action","mode","value","multiSelectEnabled","selectionEnabled","selectionState","lastSelected","state","selected","selectionModelActivated","isSelectionModelActive","selectedObjects","selectAll","dpListener","useBuildSelectionModel","declDataCtxService","dataCtxNode","selectionModelJson","useSelectionModel","useReducer","smName","lastSelectionState","_","selectionModelRef","buildSelectionModel","selectionModel","tracker","input","targetObj","getEvaluatedId","selectionModelDispatcher","type","selModel","operation","dp","uidList","newSelection","asTrackedList","checkResetMultiSelect","newMultiSelectState","logger","notifySelectionState","isSelectionEnabled","dataProvider","loadedVmos","objectsNotSelected","toUpdate","uidsNotSelected","uidsSelected","obj","objList","tracked","tracked2","x","canSelectLoaded","canDeselect","eventBus","useSelectionModels","selectionModelsRef","useRef","useState","selectionModelsJson","Object"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/declSelectionModelFactory\n */\nimport { useReducer, useRef, useState } from 'react';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\nimport _ from 'lodash';\nimport { getEvaluatedId } from 'js/uwUtilService';\nimport declDataCtxService from 'js/declarativeDataCtxService';\n\nconst selectionReducer = ( state, action ) => {\n    switch ( action.type ) {\n        case 'SET_MODE':\n            //handle deselect\n            //If object is already selected then remove it\n            return { ...state, mode: action.value };\n        case 'SET_MULTI_SELECT_ENABLED':\n            return { ...state, multiSelectEnabled: action.value };\n        case 'SET_SELECTION_ENABLED':\n            return { ...state, selectionEnabled: action.value };\n        case 'SET_SELECTION_STATE':\n            return { ...state, selectionState: action.value };\n        case 'SET_SELECTION':\n            return { ...state, lastSelected: state.selected, selected: action.value.selected, selectionModelActivated: action.value.isSelectionModelActive };\n        case 'SET_SM_ACTIVE':\n            return { ...state, selectionModelActivated: action.value };\n        case 'SELECT_ALL':\n            return { ...state, selectedObjects: [], selectAll: true };\n        case 'SET_DP_LISTENER':\n            if( state && !state.dpListener && !action.value ) {\n                return state;\n            }\n            return { ...state, dpListener: action.value };\n        default:\n            return state;\n    }\n};\n\nexport const useBuildSelectionModel = ( selectionModelJson, smName, dataCtxNode, selectionModelRef ) => {\n    declDataCtxService.applyScope( dataCtxNode.data, selectionModelJson, null, dataCtxNode, null );\n    const mode = selectionModelJson && selectionModelJson.selectionMode ? selectionModelJson.selectionMode : 'multiple';\n    return useSelectionModel( mode, null, null, smName, selectionModelRef );\n};\n\nexport const useSelectionModel = ( mode, tracker, inputSelectionModel, smName, selectionModelRef ) => {\n    const [ selectionModel, selectionModelDispatcher ] = useReducer( selectionReducer, {\n        mode: mode,\n        smName: smName,\n        multiSelectEnabled: false,\n        selectionEnabled: mode !== 'none',\n        selectionState: 'none',\n        selected: [],\n        lastSelectionState: [],\n        selectionModelActivated: true,\n        dpListener: null\n    } );\n\n    // If selection Model is already passed no need to create another state.\n    if( inputSelectionModel ) {\n        return inputSelectionModel;\n    }\n\n    if( !selectionModelRef || !_.isEqual( selectionModelRef.getSelectionModelState(), selectionModel ) ) {\n        return buildSelectionModel( selectionModel, selectionModelDispatcher, tracker );\n    }\n    return selectionModelRef;\n};\n\nconst buildSelectionModel = ( selModel, selectionModelDispatcher, tracker ) => {\n    const selectionModel = {};\n\n    if( !tracker ) {\n        tracker = ( input ) => {\n            if( typeof input === 'string' ) {\n                return input;\n            } else if( typeof input === 'object' && input.propInternalValue ) {\n                return input.propInternalValue;\n            } else if( typeof input === 'object' && input.type === 'Awp0XRTObjectSetRow' ) {\n                var targetObj = _.get( input, 'props.awp0Target' );\n                if( targetObj && targetObj.dbValue ) {\n                    return targetObj.dbValue;\n                }\n            } else if( typeof input === 'object' ) {\n                return getEvaluatedId( input );\n            }\n            return input;\n        };\n    }\n\n    selectionModel.getSelectionModelState = () => {\n        return selModel;\n    };\n\n    selectionModel.setMode = ( mode ) => {\n        selectionModelDispatcher( { type: 'SET_MODE', value: mode } );\n    };\n    selectionModel.getMode = () => selModel.mode;\n\n    selectionModel.addRemoveDpListener = ( operation, dp ) => {\n        if( operation === 'add' ) {\n            selectionModelDispatcher( { type: 'SET_DP_LISTENER', value: dp } );\n        } else if( operation === 'remove' ) {\n            selectionModelDispatcher( { type: 'SET_DP_LISTENER', value: null } );\n        }\n    };\n\n    selectionModel.getDpListener = () => {\n        return selModel.dpListener;\n    };\n\n    selectionModel.setMode = ( mode ) => {\n        selectionModelDispatcher( { type: 'SET_MODE', value: mode } );\n    };\n\n    selectionModel.mode = selModel.mode;\n\n    selectionModel.selectionEnabled = selModel.selectionEnabled;\n\n    selectionModel.multiSelectEnabled = selModel.multiSelectEnabled;\n\n    selectionModel.selectionState = selModel.selectionState;\n\n    selectionModel.name = selModel.smName; // for debugging purpose to identify which selectionModel is in action\n\n    selectionModel.getLastSelection = () => selModel.lastSelected;\n\n    selectionModel.setSelection = ( newSelection, isSelectionModelActive = true ) => {\n        if( selModel.selectionEnabled ) {\n            var uidList = newSelection ? asTrackedList( newSelection, tracker ) : [];\n            // Replace selection\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: uidList, isSelectionModelActive: isSelectionModelActive } } ); // Auto exit multi select\n            checkResetMultiSelect( selectionModel );\n        }\n    };\n\n    selectionModel.getSelection = () => selModel.selected;\n\n    selectionModel.getCanExecuteSelectLoaded = () => selModel.mode === 'multiple' && selModel.selectionState !== 'all';\n\n    selectionModel.getCanExecuteDeselect = () => selModel.mode === 'multiple' && selModel.selectionState === 'all';\n\n    selectionModel.setMultiSelectionEnabled = newMultiSelectState => {\n        const mode = selModel.mode;\n        const multiSelectEnabled = selModel.multiSelectEnabled;\n        if( mode !== 'none' && multiSelectEnabled !== newMultiSelectState ) {\n            if( newMultiSelectState && mode !== 'multiple' ) {\n                logger.warn( 'Cannot enter multi select mode when selection model is single select' );\n            } else {\n                selectionModelDispatcher( { type: 'SET_MULTI_SELECT_ENABLED', value: newMultiSelectState } );\n                // Update select / deselect command visibility\n                notifySelectionState( selectionModel );\n            }\n        }\n    };\n\n    selectionModel.isMultiSelectionEnabled = () => selModel.multiSelectEnabled;\n\n    selectionModel.setSelectionEnabled = isSelectionEnabled => {\n        if( selModel.mode !== 'none' ) {\n            selectionModelDispatcher( { type: 'SET_SELECTION_ENABLED', value: isSelectionEnabled } );\n        }\n    };\n\n    selectionModel.isSelectionEnabled = () => selModel.selectionEnabled;\n\n    selectionModel.setSelectionModelActivated = isSelectionModelActive => {\n        selectionModelDispatcher( { type: 'SET_SM_ACTIVE', value: isSelectionModelActive } );\n    };\n\n    selectionModel.isSelectionModelActivated = () => selModel.selectionModelActivated;\n\n    selectionModel.setSelectionState = ( value ) => selectionModelDispatcher( { type: 'SET_SELECTION_STATE', value } );\n\n    selectionModel.getSelectionState = () => selModel.selectionState;\n\n    selectionModel.evaluateSelectionStatusSummary = dataProvider => {\n        if( dataProvider ) {\n            if( dataProvider.viewModelCollection ) {\n                // Check of there's any objects in the data provider that aren't selected\n                var loadedVmos = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                var objectsNotSelected = loadedVmos.filter( function( x ) {\n                    return !selectionModel.isSelected( x );\n                } );\n                // If everything is selected state is 'all'\n                if( loadedVmos.length && objectsNotSelected.length === 0 ) {\n                    selectionModelDispatcher( { type: 'SET_SELECTION_STATE', value: 'all' } );\n                } else {\n                    // Otherwise it's some / none depending on what is selected\n                    const selected = selModel.selected;\n                    selectionModelDispatcher( { type: 'SET_SELECTION_STATE', value: selected.length > 0 ? 'some' : 'none' } );\n                }\n            }\n            // Update select / deselect command visibility\n            notifySelectionState( selectionModel );\n        } else {\n            logger.error( 'No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary' );\n        }\n    };\n\n    selectionModel.addToSelection = ( newSelection ) => {\n        // If selection is not disabled\n        if( selModel.selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = asTrackedList( newSelection, tracker );\n\n            // Add to selection if not already in there\n            const toUpdate = selModel.selected.concat( uidList.filter( function( uid ) {\n                return selModel.selected.indexOf( uid ) === -1;\n            } ) );\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: toUpdate, isSelectionModelActive: true } } );\n        }\n    };\n\n    selectionModel.removeFromSelection = ( newSelection ) => {\n        // If selection is not disabled\n        if( selModel.selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = asTrackedList( newSelection, tracker );\n\n            // Remove any uid that is in the list of uids from the selection\n            const toUpdate = selModel.selected.filter( function( uid ) {\n                return uidList.indexOf( uid ) === -1;\n            } );\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: toUpdate, isSelectionModelActive: true } } );\n            checkResetMultiSelect( selectionModel );\n        }\n    };\n\n    selectionModel.toggleSelection = function( newSelection ) {\n        // If selection is not disabled\n        if( selModel.selectionEnabled ) {\n            // Convert input to list of uids\n            const uidList = asTrackedList( newSelection, tracker );\n\n            // Get the list of uids that are selected / not selected\n            const uidsNotSelected = uidList.filter( function( uid ) {\n                return selModel.selected.indexOf( uid ) === -1;\n            } );\n            const uidsSelected = uidList.filter( function( uid ) {\n                return selModel.selected.indexOf( uid ) !== -1;\n            } );\n            // Remove any objects were selected\n            const toUpdate = selModel.selected.filter( function( uid ) {\n                return uidsSelected.indexOf( uid ) === -1;\n            } )\n            // And add the objects that were not selected\n                .concat( uidsNotSelected );\n            selectionModelDispatcher( { type: 'SET_SELECTION', value: { selected: toUpdate, isSelectionModelActive: true } } );\n            checkResetMultiSelect( selectionModel );\n        }\n    };\n\n    selectionModel.getCurrentSelectedCount = () => selModel.selected.length;\n    selectionModel.selectNone = () => selectionModel.setSelection( [] );\n    selectionModel.isSelected = ( obj ) => selectionModel.getSelectedIndex( obj ) !== -1;\n\n    selectionModel.getSortedSelection = ( objList ) => {\n        // Get the selected objects\n        return objList.filter( function( x ) {\n            return selectionModel.isSelected( x );\n        } )\n        // And sort by the order in selection model\n            .sort( function( a, b ) {\n                var tracked = tracker ? tracker( a ) : a;\n                var tracked2 = tracker ? tracker( b ) : b;\n                return selModel.selected.indexOf( tracked ) - selModel.selected.indexOf( tracked2 );\n            } );\n    };\n\n    selectionModel.getSelectedIndex = ( obj ) => {\n        var tracked = tracker ? tracker( obj ) : obj;\n        return selModel.selected.indexOf( tracked );\n    };\n\n    selectionModel.updateSelectedObjects = ( x ) => {\n        logger.warn( 'Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()' );\n        selectionModel.setSelection( x );\n    };\n\n    return selectionModel;\n};\n\n/**\n  * Utility to fire events that update select all / deselect all command visibility\n  */\nconst notifySelectionState = selectionModel => {\n    var canSelectLoaded = selectionModel.getCanExecuteSelectLoaded();\n    var canDeselect = selectionModel.getCanExecuteDeselect();\n    const lastSelectionState = selectionModel.lastSelectionState;\n    if( lastSelectionState !== undefined && ( lastSelectionState.CanExecuteSelectLoaded !== canSelectLoaded ||\n             lastSelectionState.CanExecuteDeselect !== canDeselect ) ) {\n        lastSelectionState.CanExecuteSelectLoaded = canSelectLoaded;\n        lastSelectionState.CanExecuteDeselect = canDeselect;\n\n        eventBus.publish( 'CanExecuteSelectLoaded', {} );\n        eventBus.publish( 'CanExecuteDeselect', {} );\n    }\n};\n\n/**\n  * Utility to exit multi select mode when selection is cleared\n  */\nconst checkResetMultiSelect = ( selectionModel ) => {\n    const selected = selectionModel.getSelection();\n    const multiSelectEnabled = selectionModel.isMultiSelectionEnabled();\n    // Disable multi select when all selection is cleared\n    if( selected.length === 0 && !multiSelectEnabled ) {\n        selectionModel.setMultiSelectionEnabled( false );\n        selectionModel.setSelectionState( 'none' );\n    }\n};\n\nexport const asTrackedList = ( newSelection, tracker ) => {\n    // Ensure it is array of some sort\n    if( !_.isArray( newSelection ) ) {\n        newSelection = [ newSelection ];\n    }\n    // Ensure everything in array is tracked\n    return tracker ? newSelection.map( tracker ) : newSelection;\n};\n\nexport const useSelectionModels = ( selectionModelsJson, dataCtxNode ) => {\n    let selectionModelsRef = useRef( {} );\n    // Just to make sure the selectionModels name order is same in every render.\n    const [ selectionModelNames ] = useState( () => {\n        return selectionModelsJson !== undefined ? Object.keys( selectionModelsJson ) : [];\n    } );\n    //selectionModels order will never change between render cycles, hence disabling the eslint\n    //https://stackoverflow.com/questions/53906843/why-cant-react-hooks-be-called-inside-loops-or-nested-function\n    // zarq9k: any better solution ?\n    selectionModelNames.forEach( ( smName ) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        selectionModelsRef.current[ smName ] = useBuildSelectionModel( selectionModelsJson[ smName ], smName, dataCtxNode, selectionModelsRef.current[ smName ] );\n    } );\n    return selectionModelsRef.current;\n};\n"]},"metadata":{},"sourceType":"module"}
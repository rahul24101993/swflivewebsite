{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Dom Processor - Provides performance metrics in relation to the DOM\n * NOTE: this doesn't have full functionality as the afx version!\n *\n * @module js/splmStatsDOMProcessor\n */\nimport splmStatsUtils from 'js/splmStatsUtils';\n/**\n * Instances of this class represent a profiler for DOM Information\n *\n * @class SPLMStatsDomProcessor\n */\n\nfunction SPLMStatsDomProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  /**\n   * calculating Processing Time\n   */\n\n  function calculateProcessingTime() {\n    _startProcessorTime = window.performance.now();\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  }\n\n  self.start = function () {\n    calculateProcessingTime();\n  };\n\n  self.stop = function () {\n    calculateProcessingTime();\n  };\n  /**\n   * @returns {Object} DOM Object contains element count on page, DOM Tree Depth, and # of costly widgets on page\n   * Definition of costly: N >= 6 depth OR N >= 50 watchers on the DOM structure ( element and children )\n   */\n\n\n  self.getMetrics = function () {\n    return {\n      DOM: {\n        elemCount: splmStatsUtils.getDomElementsCount(),\n        DOMTreeDepth: splmStatsUtils.getDomTreeDepth(document, 0)\n        /*\n        DOMCostlyWidgets: splmStatsUtils.getCostlyWidgets()\n        */\n\n      }\n    };\n  };\n  /**\n   * @returns {Object} Total processing time for DOM Metrics\n   */\n\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      DOMProcessorOverhead: _time\n    };\n  };\n\n  return self;\n}\n\n_c2 = SPLMStatsDomProcessor;\n_c = SPLMStatsDomProcessor;\nexport default SPLMStatsDomProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsDomProcessor\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"SPLMStatsDomProcessor\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsDOMProcessor.js"],"names":["SPLMStatsDomProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","window","calculateProcessingTime","DOM","elemCount","splmStatsUtils","DOMTreeDepth","_time","DOMProcessorOverhead"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,cAAA,MAAA,mBAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,qBAAA,GAAiC;EAC7B,IAAIC,IAAI,GAAR,IAAA;EAEA,IAAIC,eAAe,GAAnB,CAAA;EAEA,IAAIC,mBAAmB,GAAvB,CAAA;EAEA,IAAIC,iBAAiB,GAArB,CAAA;EACA;AACJ;AACA;;EACI,SAAA,uBAAA,GAAmC;IAC/BD,mBAAmB,GAAGE,MAAM,CAANA,WAAAA,CAAtBF,GAAsBE,EAAtBF;IACAC,iBAAiB,GAAGC,MAAM,CAANA,WAAAA,CAApBD,GAAoBC,EAApBD;IACAF,eAAe,IAAIE,iBAAiB,GAApCF,mBAAAA;EACH;;EAEDD,IAAI,CAAJA,KAAAA,GAAa,YAAW;IACpBK,uBAAuB;EAD3BL,CAAAA;;EAGAA,IAAI,CAAJA,IAAAA,GAAY,YAAW;IACnBK,uBAAuB;EAD3BL,CAAAA;EAIA;AACJ;AACA;AACA;;;EACIA,IAAI,CAAJA,UAAAA,GAAkB,YAAW;IACzB,OAAO;MACHM,GAAG,EAAE;QACDC,SAAS,EAAEC,cAAc,CADxB,mBACUA,EADV;QAEDC,YAAY,EAAED,cAAc,CAAdA,eAAAA,CAAAA,QAAAA,EAAAA,CAAAA;QACd;AAChB;AACA;;MALiB;IADF,CAAP;EADJR,CAAAA;EAYA;AACJ;AACA;;;EACIA,IAAI,CAAJA,iBAAAA,GAAyB,YAAW;IAChC,MAAMU,KAAK,GAAX,eAAA;IACAT,eAAe,GAAfA,CAAAA;IACA,OAAO;MAAEU,oBAAoB,EAAED;IAAxB,CAAP;EAHJV,CAAAA;;EAMA,OAAA,IAAA;AACH;;MAlDD,qB;KAASD,qB;AAoDT,eAAA,qBAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Dom Processor - Provides performance metrics in relation to the DOM\n * NOTE: this doesn't have full functionality as the afx version!\n *\n * @module js/splmStatsDOMProcessor\n */\nimport splmStatsUtils from 'js/splmStatsUtils';\n\n/**\n * Instances of this class represent a profiler for DOM Information\n *\n * @class SPLMStatsDomProcessor\n */\nfunction SPLMStatsDomProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n\n    let _startProcessorTime = 0;\n\n    let _endProcessorTime = 0;\n    /**\n     * calculating Processing Time\n     */\n    function calculateProcessingTime() {\n        _startProcessorTime = window.performance.now();\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    }\n\n    self.start = function() {\n        calculateProcessingTime();\n    };\n    self.stop = function() {\n        calculateProcessingTime();\n    };\n\n    /**\n     * @returns {Object} DOM Object contains element count on page, DOM Tree Depth, and # of costly widgets on page\n     * Definition of costly: N >= 6 depth OR N >= 50 watchers on the DOM structure ( element and children )\n     */\n    self.getMetrics = function() {\n        return {\n            DOM: {\n                elemCount: splmStatsUtils.getDomElementsCount(),\n                DOMTreeDepth: splmStatsUtils.getDomTreeDepth( document, 0 )\n                /*\n                DOMCostlyWidgets: splmStatsUtils.getCostlyWidgets()\n                */\n            }\n        };\n    };\n\n    /**\n     * @returns {Object} Total processing time for DOM Metrics\n     */\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { DOMProcessorOverhead: _time };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsDomProcessor;\n"]},"metadata":{},"sourceType":"module"}
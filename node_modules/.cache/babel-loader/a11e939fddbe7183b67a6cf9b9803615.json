{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awColumnService\n */\nimport actionSvc from 'js/actionService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport soaService from 'soa/kernel/soaService';\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awColumnFilterService from 'js/awColumnFilterService';\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport moduleLoader from 'js/moduleLoader';\nimport eventBus from 'js/eventBus';\n/**\n   * revisitme yogesh\n   * in whole file lot of scope usages\n   */\n\n/**\n   * {Number} The debug ID of the 'next' AwTableColumnProvider.\n   */\n\nvar _debug_nextColumnProviderId = 0;\n/**\n   * This class defines the name and behavior of a single column in the 'aw-table'. Column defaults are defined here\n   * and can be overriden by the view-model.\n   *\n   * @class AwTableColumnInfo\n   * @memberOf module:js/awColumnService\n   */\n\nvar AwTableColumnInfo = function () {\n  var colSelf = this;\n  /**\n     * @property {String} name - Internal (non-localized) name of the column.\n     *\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.name = '';\n  /**\n     * @property {String} displayName - User facing (localized) name of the column.\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.displayName = '';\n  /**\n     * @property {Function} api - callback functions\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.api = null;\n  /**\n     * @property {Boolean} enableColumnResizing - allow column resize?\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableColumnResizing = true;\n  /**\n     * @property { Boolean } enableRendererContribution- allow to override default cellRender template?\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableRendererContribution = true;\n  /**\n     * @property {Number|String} width - Default number of pixels or '*' for auto.\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.width = 150;\n  /**\n     * @property {Number|String} minWidth - min Number of pixels\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.minWidth = 20;\n  /**\n     * @property {Boolean} enableHiding - enable column hiding\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableHiding = true;\n  /**\n     * @property {Boolean} enableSorting - expose sorting\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableSorting = true; // sorting will come later\n\n  /**\n     * @property {Boolean} enableColumnMenu - expose column menu\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableColumnMenu = true;\n  /**\n     * @property {Boolean} ? - enable column filtering\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.isFilteringEnabled = true;\n  /**\n     * @property {Boolean} ? - enable column rearrange\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableColumnMoving = true;\n  /**\n     * @property {Boolean} ? - enable tooltip on header\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.headerTooltip = true;\n  /**\n     * @property {Boolean} isCommand - TRUE if this column is being used to handle display and management of\n     *           commands table navigation (e.g. Often the 1st column displaying the primary ID/Name of the object\n     *           in that row).\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.isTableCommand = false;\n  /**\n     * @property {Boolean} isTreeNavigation - TRUE if this column is being used to handle tree-table navigation\n     *           (e.g. node expand/collapse and any other specific display options).\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.isTreeNavigation = false;\n};\n/**\n   * @param {Number} columnOrder -\n   * @param {Boolean} hiddenFlag -\n   * @param {Number} pixelWidth -\n   * @param {String} propertyName -\n   * @param {String} sortDirection -\n   * @param {Number} sortPriority -\n   * @param {String} typeName -\n   * @param {Boolean} isFilteringEnabled - Flag for filter enabled/disabled on this column\n   */\n\n\n_c4 = AwTableColumnInfo;\n_c = AwTableColumnInfo;\n\nvar AwSoaColumnInfo = function (columnOrder, hiddenFlag, pixelWidth, propertyName, sortDirection, sortPriority, typeName, isFilteringEnabled) {\n  var scSelf = this;\n  /**\n     * {Number}\n     */\n\n  scSelf.columnOrder = columnOrder;\n  /**\n     * {Boolean}\n     */\n\n  scSelf.hiddenFlag = hiddenFlag;\n  /**\n     * {Number}\n     */\n\n  scSelf.pixelWidth = pixelWidth;\n  /**\n     * {String}\n     */\n\n  scSelf.propertyName = propertyName;\n  /**\n     * {String} ASC or DESC\n     */\n\n  scSelf.sortDirection = sortDirection;\n  /**\n     * {Number}\n     */\n\n  scSelf.sortPriority = sortPriority;\n  /**\n     * {String}\n     */\n\n  scSelf.typeName = typeName;\n  /**\n     * {Boolean}\n     */\n\n  scSelf.isFilteringEnabled = isFilteringEnabled;\n};\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Object} $scope - The AngularJS data context node.\n   * @param {OjectArray} commands - Array of command objects to associate with the 'isTableCommand' or\n   *            'isTreeNavigation' column.\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   */\n\n\n_c5 = AwSoaColumnInfo;\n_c2 = AwSoaColumnInfo;\n\nvar AwTableColumnProvider = function (declViewModel, $scope, commands, gridId, commandsAnchor) {\n  var cpSelf = this;\n  var _declViewModel = declViewModel;\n  var _$scope = $scope;\n  var _commands = commands;\n  var _gridId = gridId;\n  var _commandsAnchor = commandsAnchor;\n  /**\n     * Set the ID of this instance.\n     */\n\n  cpSelf.id = _debug_nextColumnProviderId++;\n  cpSelf.columnFilters = null;\n  cpSelf.sortCriteria = null;\n  /**\n     * {Object} _uwDataProvider - A UwDataProvider based on the dataProvider in the DeclViewModel JSON specified by\n     * the DeclGrid.\n     */\n\n  var _uwDataProvider = null;\n  /**\n     * {Object} _declColumnProviderJSON - A UwDataProvider based on the columnProvider in the DeclViewModel JSON\n     * specified by the DeclGrid.\n     */\n\n  var _declColumnProviderJSON = null;\n  /**\n     * {Boolean} _pinIconColumn - TRUE if the 1st column should be pinned to the left so that it is not scroll with\n     * the rest of the columns in the table.\n     */\n\n  var _pinIconColumn = true;\n  /**\n     * {Boolean} _soaEnabled - TRUE if this service is allowed to access soaService APIs.\n     * <P>\n     * Note: This service can be used in non\n     */\n\n  var _soaEnabled = true;\n  /**\n     * Make the little tweaks that are necessary.\n     *\n     * @param {AwTableColumnInfo} columnInfo - The column to be tweaked.\n     *\n     * @param {Boolean} isArrangeSupported - TRUE if columns should be allowed to move (but only if they wanted to in the first place).\n     *            FALSE if ALL columns should be fixed and not movable.\n     *\n     * @param {Boolean} isSortingSupported - TRUE if columns should be allowed to be corted.\n     */\n\n  function _tweakColumnInfo(columnInfo, isArrangeSupported, isSortingSupported) {\n    // make sure propDescriptor isn't null\n    columnInfo.propDescriptor = columnInfo.propDescriptor || {};\n    /**\n       * Override 'enableColumnMoving' if 'arrange' not supported.\n       */\n\n    if (!isArrangeSupported) {\n      columnInfo.enableColumnMoving = false;\n    }\n    /**\n       * Override 'enableSorting' if 'sorting' not supported.\n       */\n\n\n    if (!isSortingSupported) {\n      columnInfo.enableSorting = false;\n    }\n    /**\n       * For now, we do not have any support for column menus.\n       */\n\n\n    columnInfo.enableColumnMenus = false;\n    /**\n       * Check if we DO NOT have a 'displayName' property but we do have a 'typeName' property<BR>\n       * If so: Make the 'displayName' the localized name of the type.\n       */\n\n    if (!columnInfo.displayName) {\n      if (columnInfo.typeName) {\n        var type = cmm.getType(columnInfo.typeName);\n\n        if (type && type.propertyDescriptorsMap[columnInfo.propertyName]) {\n          columnInfo.displayName = type.propertyDescriptorsMap[columnInfo.propertyName].displayName;\n        } else {\n          columnInfo.displayName = columnInfo.propertyName;\n        }\n      } else {\n        columnInfo.typeName = columnInfo.columnSrcType;\n        columnInfo.displayName = columnInfo.propDescriptor.displayName || columnInfo.displayName;\n      }\n    }\n    /**\n       * Make sure was have a 'name' property (If not: Set it to the same as the 'propertyName' property).\n       */\n\n\n    columnInfo.name = columnInfo.name || columnInfo.propDescriptor.propertyName || columnInfo.propertyName;\n    /**\n       * If we have a 'pixelWidth' property, set the 'width' property to that value as well.\n       */\n\n    columnInfo.width = columnInfo.pixelWidth || columnInfo.width;\n    /**\n       * Make sure was have a 'visible' property (If not: Set it to the same as the 'hiddenFlag' property or just\n       * default to 'true').\n       */\n\n    if (!columnInfo.visible) {\n      if (!declUtils.isNil(columnInfo.hiddenFlag)) {\n        columnInfo.visible = !columnInfo.hiddenFlag;\n      } else {\n        columnInfo.visible = true;\n      }\n    }\n    /**\n       * Make sure we have a 'field' (use 'name' is default)\n       */\n\n\n    columnInfo.field = columnInfo.field || columnInfo.name;\n    columnInfo.name = columnInfo.typeName ? columnInfo.typeName + '.' + columnInfo.name : columnInfo.name;\n    /**\n       * Setup to handle column sorting (if necessary)\n       */\n\n    if (columnInfo.enableSorting) {\n      /**\n         * Fix for LCS-99462 - (Grid) Column sorting arrow not maintained, when switch to another view mode.\n         */\n      if (_.isEmpty(columnInfo.sort)) {\n        columnInfo.sort = {};\n      }\n\n      let sortCriteria = cpSelf.getSortCriteria();\n\n      if (sortCriteria) {\n        // loop over column provider's sort criteria here and reapply as-needed\n        try {\n          declarativeDataCtxSvc.applyScope(_declViewModel, sortCriteria, _declViewModel._internal.functions, _$scope, null);\n        } catch (error) {\n          throw new Error(error);\n        }\n\n        cpSelf.setSortCriteria(sortCriteria);\n\n        _.forEach(sortCriteria, function (currentSortCriteria) {\n          if (columnInfo.name === currentSortCriteria.fieldName || columnInfo.propertyName === currentSortCriteria.fieldName) {\n            columnInfo.sort.direction = currentSortCriteria.sortDirection.toLowerCase();\n            columnInfo.sort.priority = 0;\n          }\n        });\n      }\n\n      columnInfo.sortingAlgorithm = function (a, b, rowA, rowB, sortDir) {\n        // eslint-disable-line no-unused-vars\n        var vmPropA = rowA.entity.props[columnInfo.field];\n        var vmPropB = rowB.entity.props[columnInfo.field];\n        var valA = '';\n        var valB = '';\n\n        if (vmPropA.uiValue) {\n          valA = vmPropA.uiValue;\n        }\n\n        if (vmPropB.uiValue) {\n          valB = vmPropB.uiValue;\n        }\n\n        var strA = valA.toLowerCase();\n        var strB = valB.toLowerCase();\n        return strA === strB ? 0 : strA.localeCompare(strB);\n      };\n    }\n  } // _tweakColumnInfo\n\n  /**\n     * Build the final set of columnInfos from the given array of columnInfos.\n     *\n     * @param {ObjectArray} columnInfoIn - Array of column settings from declarative model.\n     *\n     * @return {AwTableColumnInfoArray} Array of AwTableColumnInfo initialized with the given column settings (plus\n     *         an 'icon' column as the 1st column, if requested by this columnProvider).\n     */\n\n\n  function _buildFinalColumnInfos(columnInfoIn) {\n    let finalColumnInfos = [];\n    let newColumnInfo;\n\n    if (declGrid.addIconColumn !== false && declGrid.gridOptions.addIconColumn !== false) {\n      let iconColumnFound = false;\n      let iconCellRenderer = null;\n\n      _.forEach(columnInfoIn, function (colInfo) {\n        if (colInfo.name === 'icon') {\n          iconColumnFound = true;\n          return false;\n        } // This block is added for PL table. Since icon column is hardcoded in this service,\n        // there is no way to provide a cell template at application layer. So added this hack.\n        // Once we correct the hardcoded way of creating icon column, this will no more be needed.\n\n\n        if (colInfo.isTableCommand && colInfo.iconCellRenderer) {\n          iconCellRenderer = colInfo.iconCellRenderer;\n          return false;\n        }\n      });\n\n      if (!iconColumnFound) {\n        // Setup the special icon column\n        newColumnInfo = new AwTableColumnInfo();\n        newColumnInfo.name = 'icon';\n        newColumnInfo.displayName = '';\n        newColumnInfo.width = 34;\n        newColumnInfo.enableColumnMoving = false;\n        newColumnInfo.enableColumnMenu = false;\n        newColumnInfo.enableColumnResizing = false;\n        newColumnInfo.isFilteringEnabled = columnInfoIn.isFilteringEnabled !== false;\n        newColumnInfo.enableSorting = false;\n        newColumnInfo.visible = true;\n\n        if (_pinIconColumn) {\n          newColumnInfo.pinnedLeft = true;\n        }\n\n        if (iconCellRenderer) {\n          newColumnInfo.iconCellRenderer = iconCellRenderer;\n        }\n\n        finalColumnInfos.push(newColumnInfo);\n      }\n    }\n\n    let isArrangeSupported = cpSelf.isArrangeSupported();\n    let isSortingSupported = cpSelf.isSortingSupported();\n    let needsNavigationColumn = true;\n\n    _.forEach(columnInfoIn, function (colInfo) {\n      if (colInfo.isTableCommand || colInfo.isTreeNavigation) {\n        needsNavigationColumn = false;\n        return false;\n      }\n\n      return true;\n    });\n    /**\n       * Create a new ('tweaked') AwTableColumnInfo for each of the given awColumnInfos.\n       */\n\n\n    _.forEach(columnInfoIn, function (info) {\n      newColumnInfo = new AwTableColumnInfo();\n      /**\n         * Move over all existing property values\n         */\n\n      _.forEach(info, function (value, name) {\n        newColumnInfo[name] = value;\n      });\n\n      if (needsNavigationColumn) {\n        if (_uwDataProvider && _uwDataProvider.accessMode === 'tree') {\n          newColumnInfo.isTreeNavigation = true;\n        } else {\n          newColumnInfo.isTableCommand = true;\n        }\n\n        needsNavigationColumn = false;\n      }\n\n      if ((newColumnInfo.isTreeNavigation || newColumnInfo.isTableCommand) && _commands) {\n        newColumnInfo.commands = _commands;\n      }\n\n      newColumnInfo.commandsAnchor = _commandsAnchor; // Even if sorting is supported at data provider level, if could be disabled at column level.\n      // check both values to decide sort enablement.\n\n      let sortPossibleForProp = isSortingSupported && newColumnInfo.enableSorting;\n      let typeDesc = cmm.getType(newColumnInfo.typeName);\n\n      if (typeDesc) {\n        let propDesc = typeDesc.propertyDescriptorsMap[newColumnInfo.propertyName];\n\n        if (propDesc) {\n          // if no dataType specified, use property descriptor\n          if (!newColumnInfo.dataType) {\n            newColumnInfo.dataType = propDesc.valueType;\n          }\n        }\n      }\n      /**\n         * Adjust the properties (as necessary)\n         */\n\n\n      _tweakColumnInfo(newColumnInfo, isArrangeSupported, sortPossibleForProp); // Add column filter\n\n\n      if (declGrid.gridOptions.isFilteringEnabled && newColumnInfo.isFilteringEnabled !== false) {\n        let existingFilters = [];\n        const columnFilters = cpSelf.getColumnFilters();\n\n        _.forEach(columnFilters, function (currentFilter) {\n          if (newColumnInfo.field === currentFilter.columnName) {\n            existingFilters.push(currentFilter);\n          }\n        });\n\n        awColumnFilterService.updateColumnFilter(newColumnInfo, existingFilters);\n      }\n      /**\n         * check for duplicate column before adding\n         */\n\n\n      if (finalColumnInfos.find(function (finalColumnInfo) {\n        return finalColumnInfo.name === newColumnInfo.name && finalColumnInfo.typeName === newColumnInfo.typeName;\n      })) {\n        logger.warn('Skipping duplicate column: ' + newColumnInfo.name);\n      } else {\n        finalColumnInfos.push(newColumnInfo);\n      }\n    }); // Set sort from columns if sortCriteria is empty\n\n\n    const sortCriteria = cpSelf.getSortCriteria();\n\n    if (_.isEmpty(sortCriteria)) {\n      let sortPriority = NaN;\n      let sortDirection = '';\n      let sortColumn = null;\n\n      _.forEach(finalColumnInfos, function (currentColumn) {\n        if (currentColumn.sortDirection && (isNaN(sortPriority) || currentColumn.sortPriority < sortPriority)) {\n          sortPriority = currentColumn.sortPriority;\n          sortDirection = currentColumn.sortDirection.toLowerCase().includes('desc') ? 'DESC' : 'ASC';\n          sortColumn = currentColumn;\n        }\n      });\n\n      if (sortColumn && sortColumn.enableSorting && sortDirection) {\n        sortColumn.sort.direction = sortDirection;\n        sortColumn.sort.priority = 0;\n        cpSelf.setSortCriteria([{\n          fieldName: sortColumn.field,\n          sortDirection: sortDirection\n        }]);\n      }\n    } // checking if columns are set as frozen via xrt or vmo json otherwise rendered the default frozen columns\n\n\n    finalColumnInfos = _checkForFrozenColumnsConfiguration(finalColumnInfos);\n    return finalColumnInfos;\n  } // _buildFinalColumnInfos\n\n  /**\n     * checks and froze columns specified via xrt, vmo json or defualt.\n     * 1st prefrence is given to xrt, then vmo json and at last if nothing is specified, default columns will be forzen.\n     * (i.e. 1st col for tree & 1st,2nd col for table)\n     * @param {Object} allColumns - all columns of ui grid.\n     *\n     * @return {Object} finalColumnInfos final columns config with frozen properties.\n     */\n\n\n  function _checkForFrozenColumnsConfiguration(allColumns) {\n    var xrtConfigured = _checkFrozenColumnParameterConfig(allColumns);\n\n    if (!xrtConfigured) {\n      var vmJsonConfigured = _checkFrozenColumnJsonConfig(allColumns);\n\n      if (!vmJsonConfigured) {\n        _defaultFrozenColumns(allColumns);\n      }\n    }\n\n    return allColumns;\n  }\n  /**\n     * check and froze columns as specified in xrt\n     *\n     * @param {Object} allColumns - all columns of ui grid.\n     *\n     * @return {Boolean} True if frozen column configuration is done via xrt.\n     */\n\n\n  function _checkFrozenColumnParameterConfig(allColumns) {\n    var frozenIndex = -1; // find the frozen col index\n\n    allColumns.forEach(function (col, index) {\n      if (col.parameters && col.parameters.frozen === 'true') {\n        frozenIndex = index;\n      }\n    }); // froze all columns upto xrt configured frozen col.\n\n    if (frozenIndex !== -1 && frozenIndex <= allColumns.length) {\n      for (var i = 0; i <= frozenIndex; i++) {\n        allColumns[i].pinnedLeft = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n     * check and froze columns as specified in view model json\n     *\n     * @param {Object} allColumns - all columns of ui grid.\n     *\n     * @return {Boolean} True if frozen column configuration is done via vmo json.\n     */\n\n\n  function _checkFrozenColumnJsonConfig(allColumns) {\n    if (_declViewModel && _declViewModel.columnProviders) {\n      var columnProviders = [];\n\n      for (var provider in _declViewModel.columnProviders) {\n        columnProviders.push(provider);\n      }\n\n      var frozenIndex = _declViewModel.columnProviders[columnProviders[0]].frozenColumnIndex;\n\n      if (frozenIndex === undefined) {\n        return false;\n      }\n\n      if (frozenIndex >= 0 && frozenIndex <= allColumns.length) {\n        // froze all columns upto frozenIndex specified in vmo json.\n        for (var index = 0; index <= frozenIndex; index++) {\n          allColumns[index].pinnedLeft = true;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n     * freezing default columns i.e. 1st col for tree & 1st,2nd col for table\n     *\n     * @param {Object} allColumns - all columns of ui grid.             *\n     */\n\n\n  function _defaultFrozenColumns(allColumns) {\n    if (allColumns && allColumns.length > 0) {\n      if (allColumns[0].name === 'icon') {\n        // this for table\n        // 0th column (contains icon) + 1st column must be frozen in table as an AC of AW-4227 & AW-67931\n        allColumns[0].pinnedLeft = true;\n\n        if (allColumns[1]) {\n          allColumns[1].pinnedLeft = true;\n        }\n      } else {\n        // In tree, 0th column (contains icon + name) must be frozen\n        allColumns[0].pinnedLeft = true;\n      }\n    }\n  }\n  /**\n     * @param {Object} columnProviderJSON - JSON object where the columnProvider is defined.\n     * @param {Object} passedState - State with which column provider invokes actions\n     *\n     * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n     */\n\n\n  function _initializedFromJSON(columnProviderJSON, passedState) {\n    /**\n       * Set whether this column provider should interact with SOA APIs.\n       */\n    if (!declUtils.isNil(columnProviderJSON.soaEnabled)) {\n      _soaEnabled = columnProviderJSON.soaEnabled;\n    }\n\n    if (_declColumnProviderJSON) {\n      try {\n        declarativeDataCtxSvc.applyScope(_declViewModel, _declColumnProviderJSON, null, passedState || _$scope, null);\n      } catch (error) {\n        throw new Error(error);\n      }\n\n      cpSelf.columnFilters = _declColumnProviderJSON.columnFilters;\n      cpSelf.sortCriteria = _declColumnProviderJSON.sortCriteria;\n    }\n    /**\n       * Check for column load and row property actions\n       */\n\n\n    var loadColumnAction = columnProviderJSON.loadColumnAction ? _declViewModel.getAction(columnProviderJSON.loadColumnAction) : null;\n\n    if (loadColumnAction) {\n      if (loadColumnAction.deps) {\n        return moduleLoader.loadDependentModule(loadColumnAction.deps).then(function (moduleObj) {\n          return _executeLoadColumnAction(loadColumnAction, moduleObj, passedState);\n        });\n      }\n\n      return _executeLoadColumnAction(loadColumnAction, null);\n    }\n    /**\n       * Load from the dataProvider (if possible)\n       */\n\n\n    if (!_.isEmpty(_uwDataProvider.columnConfig) && !_.isEmpty(_uwDataProvider.columnConfig.columns)) {\n      _uwDataProvider.cols = _buildFinalColumnInfos(_uwDataProvider.columnConfig.columns);\n      return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n    } else if (columnProviderJSON) {\n      if (!_.isEmpty(columnProviderJSON.columnConfig) && !_.isEmpty(columnProviderJSON.columnConfig.columns)) {\n        _uwDataProvider.cols = _buildFinalColumnInfos(columnProviderJSON.columnConfig.columns);\n        return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n      } else if (!_.isEmpty(columnProviderJSON.columns)) {\n        /**\n           /**\n           * For static column provider, setting width to auto and minWidth to 150.\n           */\n        _.forEach(columnProviderJSON.columns, function autoResizeStaticColumns(column) {\n          if (!column.width) {\n            column.width = '*';\n            column.minWidth = 150;\n          }\n        });\n\n        _updateColumnInfosFromColumnInfos(_uwDataProvider, columnProviderJSON.columns);\n\n        return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n      }\n    }\n\n    return AwPromiseService.instance.resolve([]);\n  }\n  /**\n     * @param {DeclAction} loadColumnAction - Action used to load columns.\n     * @param {Object} loadColumnModuleObj - (Optional) Module API object to use when executing the action.\n     * @param {Object} passedState - State with which column provider invokes actions\n     *\n     * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n     */\n\n\n  function _executeLoadColumnAction(loadColumnAction, loadColumnModuleObj, passedState) {\n    /**\n       * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action event\n       * processing was started.\n       */\n    var localDataCtx = declUtils.resolveLocalDataCtx(_declViewModel, passedState || _$scope);\n\n    if (loadColumnAction) {\n      return actionSvc.executeAction(_declViewModel, loadColumnAction, localDataCtx, loadColumnModuleObj).then(function (columnResult) {\n        if (columnResult && columnResult.columnInfos) {\n          _uwDataProvider.cols = _buildFinalColumnInfos(columnResult.columnInfos);\n        } else if (_uwDataProvider.columnConfig && _uwDataProvider.columnConfig.columns) {\n          _uwDataProvider.cols = _buildFinalColumnInfos(_uwDataProvider.columnConfig.columns);\n        }\n\n        return _uwDataProvider.cols;\n      });\n    }\n\n    return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n  }\n  /**\n     *\n     * @param {AwColumnInfoArray} columnInfos - Collection of Object containing the 'cok\n     */\n\n\n  function _updateColumnInfosFromColumnInfos(uwDataProvider, columnInfos) {\n    uwDataProvider.cols = _buildFinalColumnInfos(columnInfos);\n  } // _updateColumnInfosFromColumnInfos\n\n  /**\n     * ---------------------------------------------------------------------<br>\n     * Define the exposed API <BR>\n     * ---------------------------------------------------------------------<br>\n     */\n\n  /**\n     * Build the new dynamic columns, and update the grid control\n     *\n     * @param {AwTableColumnInfoArray} columnInfosIn - the new set of columns\n     * @param {Boolean} updateDataProvider - update the grid ui?\n     * @returns {Promise} to ensure _uwDataProvider.cols is updated before used.\n     */\n\n\n  cpSelf.buildDynamicColumns = function (columnInfosIn, updateDataProvider) {\n    if (_soaEnabled) {\n      var typeNames = [];\n\n      _.forEach(columnInfosIn, function (columnInfo) {\n        if (columnInfo.typeName) {\n          typeNames.push(columnInfo.typeName);\n        } else if (columnInfo.associatedTypeName) {\n          typeNames.push(columnInfo.associatedTypeName);\n        }\n      });\n\n      typeNames = _.uniq(typeNames);\n      return soaService.ensureModelTypesLoaded(typeNames).then(function () {\n        var columnInfos = _buildFinalColumnInfos(columnInfosIn);\n\n        if (updateDataProvider) {\n          var oldCols = _uwDataProvider.cols;\n          _uwDataProvider.cols = columnInfos; // preserve properties that were not included in new columns\n\n          _.forEach(oldCols, function (oldCol) {\n            _.forEach(_uwDataProvider.cols, function (currentColumn) {\n              if (currentColumn.name === oldCol.name) {\n                if (oldCol.enableColumnMoving === false) {\n                  currentColumn.enableColumnMoving = false;\n                } // Handle column filter logic\n\n\n                awColumnFilterService.updateNewColumnFilter(currentColumn, oldCol); // XRT properties\n\n                var xrtProperties = ['renderingHint', 'parameters', 'modifiable', 'isTableCommand', 'enableSorting', 'isFilteringEnabled'];\n\n                _.forEach(xrtProperties, function (propertyName) {\n                  if (currentColumn[propertyName] === undefined) {\n                    currentColumn[propertyName] = oldCol[propertyName];\n                  }\n                });\n\n                return false;\n              }\n            });\n          });\n        }\n      });\n    } else if (updateDataProvider) {\n      _uwDataProvider.cols = _buildFinalColumnInfos(columnInfosIn);\n      return Promise.resolve();\n    }\n  }; // buildDynamicColumns\n\n  /**\n     * Get the current columns\n     *\n     * @return {ArrayUwGridColumnInfo} an array of UwGridColumnInfo that represent the columns specified by EITHER\n     *         the given 'declViewModel' (columnPropNames, columnDisplayNames & nColsToFreeze) OR\n     *         'declGrid.columnDefs'\n     */\n\n\n  cpSelf.getColumns = function () {\n    if (_uwDataProvider && _uwDataProvider.cols) {\n      return _uwDataProvider.cols;\n    }\n\n    return null;\n  };\n  /**\n     * Change the size of one of the columns\n     *\n     * @param {String} name - The name of the column that has had it's size change\n     * @param {Integer} delta - The change in size of the column\n     *\n     */\n\n\n  cpSelf.columnSizeChanged = function (name, delta) {\n    var columnInfos = cpSelf.getColumns();\n\n    _.forEach(columnInfos, function (columnInfo) {\n      if (columnInfo.name === name) {\n        columnInfo.width += delta;\n        /**\n           * Previously ui-grid was enforcing min and max, but it seems we need to do it here for now Also\n           * round since IE11 is returning a float instead of an int\n           */\n\n        columnInfo.width = Math.round(Math.max(columnInfo.width, columnInfo.minWidth));\n\n        if (columnInfo.pixelWidth) {\n          columnInfo.pixelWidth = columnInfo.width;\n        }\n\n        return false;\n      }\n    });\n\n    eventBus.publish('columnArrange', {\n      name: _gridId,\n      columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n      arrangeType: 'saveColumnAction',\n      columns: columnInfos\n    });\n  };\n  /**\n     * Re-order one of the columns\n     *\n     * @param {String} name - The name of the column that has been moved\n     * @param {Integer} origPosition - column's original position\n     * @param {Integer} newPosition - column's new position\n     */\n\n\n  cpSelf.columnOrderChanged = function (name, origPosition, newPosition) {\n    var columnInfos = cpSelf.getColumns(); // assume icon is using col 0 and we don't have to adjust indexes for splicing below\n    // if not, adjust indexes\n\n    if (columnInfos[0].name !== 'icon') {\n      origPosition = origPosition > 0 ? origPosition - 1 : 0;\n      newPosition = newPosition > 0 ? newPosition - 1 : 0;\n    } // dis-allow positioning to the left of any initial un-moveable columns\n\n\n    while (columnInfos[newPosition] && columnInfos[newPosition].enableColumnMoving === false) {\n      newPosition++;\n    }\n\n    var movedColumnInfo = columnInfos.splice(origPosition, 1);\n    columnInfos.splice(newPosition, 0, movedColumnInfo[0]);\n    eventBus.publish('columnArrange', {\n      name: _gridId,\n      columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n      arrangeType: 'saveColumnAction',\n      columns: columnInfos\n    });\n  };\n  /**\n     * Hide one of the columns\n     *\n     * @param {Integer} columnIndex - The index of the column that has been hidden\n     */\n\n\n  cpSelf.hideColumn = function (columnIndex) {\n    var columnInfos = cpSelf.getColumns();\n    let operation = _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.operationType : '';\n    columnInfos[columnIndex].hiddenFlag = true;\n    eventBus.publish('columnArrange', {\n      name: _gridId,\n      columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n      arrangeType: 'saveColumnAndLoadAction',\n      columns: columnInfos,\n      operationType: operation\n    });\n  };\n  /**\n     * Get the current sort criteria\n     */\n\n\n  cpSelf.getSortCriteria = function () {\n    return cpSelf.sortCriteria;\n  };\n  /**\n     * Set the current sort criteria\n     *\n     * @param {Object[]} sortCriteria - The new sort criteria\n     */\n\n\n  cpSelf.setSortCriteria = function (sortCriteria) {\n    cpSelf.sortCriteria = sortCriteria;\n\n    if (_declColumnProviderJSON) {\n      _declColumnProviderJSON.sortCriteria = sortCriteria;\n    }\n  };\n  /**\n     * Get the current column filters\n     * @return {Object[]} columnFilters - the column filters\n     */\n\n\n  cpSelf.getColumnFilters = function () {\n    return cpSelf.columnFilters;\n  };\n  /**\n     * Set the column filters\n     * @param {Object[]} columnFilters - the column filters\n     */\n\n\n  cpSelf.setColumnFilters = function (columnFilters) {\n    cpSelf.columnFilters = columnFilters;\n\n    if (_declColumnProviderJSON) {\n      _declColumnProviderJSON.columnFilters = columnFilters;\n    }\n  };\n  /**\n     * Free up all resources held/managed by this object.\n     * <P>\n     * Note: After this function, no API call should be considered valid. This function is intended to be called\n     * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n     * objects managed by this class may be considered a 'memory leak'.\n     */\n\n\n  cpSelf.destroy = function () {\n    _declViewModel = null;\n    _uwDataProvider = null; // Note: We did not create this object, so it's not ours to destroy\n\n    _$scope = null;\n    _commands = null;\n    cpSelf = null;\n  };\n\n  cpSelf.setAdditionalPrams = function (commands, commandsAnchor, dataCtxNode) {\n    _commands = commands;\n    _commandsAnchor = commandsAnchor;\n    _$scope = dataCtxNode;\n  };\n  /**\n     * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n     *         additional declActions necessary to support column arranging.\n     */\n\n\n  cpSelf.isArrangeSupported = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n\n    if (_declViewModel.columnProviders) {\n      var colProvider = _declViewModel.columnProviders[declGrid.columnProvider];\n      assert(colProvider, 'Invalid columnProvider');\n      return colProvider.resetColumnAction && colProvider.saveColumnAndLoadAction;\n    }\n\n    return false;\n  };\n  /**\n     * @return {Boolean} TRUE support column filtering.\n     */\n\n\n  cpSelf.isFilteringSupported = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n    return declGrid.gridOptions.isFilteringEnabled === true;\n  };\n  /**\n     * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n     *         additional option or declActions necessary to support column sorting.\n     */\n\n\n  cpSelf.isSortingSupported = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n    /**\n       * Check if the declGrid options indicates if 'external' sorting is supported or not.\n       */\n\n    if (!declUtils.isNil(declGrid.gridOptions.useExternalSorting)) {\n      return declGrid.gridOptions.useExternalSorting;\n    }\n    /**\n       * Since the options did not indicate support, check if the declColumnProvider indicates sorting by the\n       * existence of a declAction for sorting.\n       */\n\n\n    if (!_declViewModel.columnProviders) {\n      return false;\n    }\n\n    var colProvider = _declViewModel.columnProviders[declGrid.columnProvider];\n    assert(colProvider, 'Invalid columnProvider');\n\n    if (!declUtils.isNil(colProvider.sortColumnAction)) {\n      return true;\n    }\n    /**\n       * Note: Since aw3.3 'useExternalSorting' is true by default. This default should be changed to FALSE, but\n       * until then we need to honor it here. The declGrid in the declViewModel should override that property if\n       * they do NOT want 'useExternalSorting' to be true.\n       */\n\n\n    return true;\n  };\n  /**\n     * @return {String} Column provider Id, it is equal to clientScopeURI for aw tables if specified.\n     */\n\n\n  cpSelf.getId = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n\n    if (_declViewModel.columnProviders) {\n      var colProvider = _declViewModel.columnProviders[declGrid.columnProvider];\n      assert(colProvider, 'Invalid columnProvider');\n      return colProvider.id;\n    }\n\n    return null;\n  };\n  /**\n     * @return {Promise} A Promise resolved with the initial array of AwTableColumnInfo.\n     */\n\n\n  cpSelf.initialize = function (passedState) {\n    /**\n       * Check for columnProvider on viewModel\n       */\n    if (_declColumnProviderJSON) {\n      return _initializedFromJSON(_declColumnProviderJSON, passedState);\n    }\n    /**\n       * Use properties placed on the 'declViewModel' as the basis of the column information.\n       * <P>\n       * Note: This is what the shf measurement table does, but should update to use col provider\n       */\n\n\n    var columnPropNames = _declViewModel.columnPropNames ? _declViewModel.columnPropNames : [];\n    var columnDisplayNames = _declViewModel.columnDisplayNames ? _declViewModel.columnDisplayNames : [];\n    var nColsToFreeze = _declViewModel.nColsToFreeze ? _declViewModel.nColsToFreeze : 0;\n    var newColumnInfos = [];\n\n    for (var index = 0; index < columnPropNames.length; index++) {\n      var columnInfo = new AwTableColumnInfo();\n      columnInfo.name = columnPropNames[index];\n\n      if (columnDisplayNames !== null && columnDisplayNames.length > index) {\n        columnInfo.displayName = columnDisplayNames[index];\n      }\n\n      if (index < nColsToFreeze) {\n        columnInfo.pinnedLeft = true;\n      }\n\n      newColumnInfos.push(columnInfo);\n    }\n\n    _uwDataProvider.cols = newColumnInfos;\n    return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n  }; // initialize\n\n  /**\n     * ---------------------------------------------------------------------------<BR>\n     * Property & Function definition complete....Finish initialization. <BR>\n     * ---------------------------------------------------------------------------<BR>\n     */\n\n  /**\n     * Validate parameters and initialize fields\n     */\n\n\n  assert(_declViewModel, 'No in DeclViewModel specified '); // assert( _gridId, 'No DeclGrid specified ' );\n\n  if (_gridId) {\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'No DeclGrid specified ');\n\n    if (_declViewModel.dataProviders && declGrid.dataProvider) {\n      _uwDataProvider = _declViewModel.dataProviders[declGrid.dataProvider];\n    }\n\n    if (_declViewModel.columnProviders && declGrid.columnProvider) {\n      _declColumnProviderJSON = _declViewModel.columnProviders[declGrid.columnProvider];\n\n      if (!_.isEmpty(_declColumnProviderJSON.columnConfig) && !_.isEmpty(_declColumnProviderJSON.columnConfig.columns)) {\n        _uwDataProvider.columnConfig = _declColumnProviderJSON.columnConfig;\n      }\n\n      if (_declColumnProviderJSON.objectSetUri) {\n        _uwDataProvider.objectSetUri = _declColumnProviderJSON.objectSetUri;\n      }\n    }\n\n    assert(_uwDataProvider, 'No DataProvider specified in DeclViewModel');\n\n    if (declGrid.hasOwnProperty('pinIconColumn')) {\n      _pinIconColumn = declGrid.pinIconColumn;\n    }\n  }\n}; // AwTableColumnProvider\n\n/**\n   * ----------------------------------------------------------------------------<BR>\n   * Define published service APIs<BR>\n   * ----------------------------------------------------------------------------<BR>\n   */\n\n\n_c6 = AwTableColumnProvider;\n_c3 = AwTableColumnProvider;\nvar exports = {};\n/**\n   * @param {Object} columnProperties - (Optional) An object who's properties will overwrite the default values of the\n   *            new AwTableColumnInfo object.\n   *\n   * @return {AwTableColumnInfo} Newly created AwTableColumnInfo object.\n   */\n\nexport let createColumnInfo = function (columnProperties) {\n  var columnInfo = new AwTableColumnInfo();\n\n  if (columnProperties) {\n    _.forEach(columnProperties, function (value, name) {\n      columnInfo[name] = value;\n    });\n  }\n\n  return columnInfo;\n};\n/**\n   * @param {AwTableColumnInfo} awColumnInfo -\n   * @param {Number} columnOrder -\n   */\n\nexport let createSoaColumnInfo = function (awColumnInfo, columnOrder) {\n  return new AwSoaColumnInfo(columnOrder, awColumnInfo.hiddenFlag, awColumnInfo.pixelWidth, awColumnInfo.propertyName, awColumnInfo.sortDirection, awColumnInfo.sortPriority, awColumnInfo.typeName, awColumnInfo.isFilteringEnabled);\n};\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Scope} $scope - The AngularJS data context node.\n   * @param {Array} commands - The list of associated commands\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   *\n   * @return {AwTableColumnProvider} Newly created AwTableColumnProvider object.\n   */\n\nexport let createColumnProvider = function (declViewModel, $scope, commands, gridId, commandsAnchor) {\n  return new AwTableColumnProvider(declViewModel, $scope, commands, gridId, commandsAnchor);\n};\nexports = {\n  createColumnInfo,\n  createSoaColumnInfo,\n  createColumnProvider\n};\nexport default exports;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AwTableColumnInfo\");\n$RefreshReg$(_c2, \"AwSoaColumnInfo\");\n$RefreshReg$(_c3, \"AwTableColumnProvider\");\n\nvar _c4, _c5, _c6;\n\n$RefreshReg$(_c4, \"AwTableColumnInfo\");\n$RefreshReg$(_c5, \"AwSoaColumnInfo\");\n$RefreshReg$(_c6, \"AwTableColumnProvider\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/awColumnService.js"],"names":["_debug_nextColumnProviderId","AwTableColumnInfo","colSelf","AwSoaColumnInfo","scSelf","AwTableColumnProvider","cpSelf","_declViewModel","_$scope","_commands","_gridId","_commandsAnchor","_uwDataProvider","_declColumnProviderJSON","_pinIconColumn","_soaEnabled","columnInfo","type","cmm","declUtils","_","sortCriteria","declarativeDataCtxSvc","currentSortCriteria","vmPropA","rowA","vmPropB","rowB","valA","valB","strA","strB","finalColumnInfos","declGrid","iconColumnFound","iconCellRenderer","colInfo","newColumnInfo","columnInfoIn","isArrangeSupported","isSortingSupported","needsNavigationColumn","sortPossibleForProp","typeDesc","propDesc","_tweakColumnInfo","existingFilters","columnFilters","currentFilter","awColumnFilterService","finalColumnInfo","logger","sortPriority","sortDirection","sortColumn","currentColumn","isNaN","fieldName","_checkForFrozenColumnsConfiguration","xrtConfigured","_checkFrozenColumnParameterConfig","vmJsonConfigured","_checkFrozenColumnJsonConfig","_defaultFrozenColumns","frozenIndex","allColumns","col","i","columnProviders","index","columnProviderJSON","passedState","loadColumnAction","_executeLoadColumnAction","_buildFinalColumnInfos","AwPromiseService","column","_updateColumnInfosFromColumnInfos","localDataCtx","columnResult","uwDataProvider","typeNames","columnInfos","oldCols","oldCol","xrtProperties","Promise","Math","eventBus","name","columnConfigId","arrangeType","columns","origPosition","newPosition","movedColumnInfo","operation","operationType","assert","colProvider","_initializedFromJSON","columnPropNames","columnDisplayNames","nColsToFreeze","newColumnInfos","exports","createColumnInfo","createSoaColumnInfo","awColumnInfo","createColumnProvider"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awColumnService\n */\nimport actionSvc from 'js/actionService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport soaService from 'soa/kernel/soaService';\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awColumnFilterService from 'js/awColumnFilterService';\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport moduleLoader from 'js/moduleLoader';\nimport eventBus from 'js/eventBus';\n\n/**\n   * revisitme yogesh\n   * in whole file lot of scope usages\n   */\n\n/**\n   * {Number} The debug ID of the 'next' AwTableColumnProvider.\n   */\nvar _debug_nextColumnProviderId = 0;\n\n/**\n   * This class defines the name and behavior of a single column in the 'aw-table'. Column defaults are defined here\n   * and can be overriden by the view-model.\n   *\n   * @class AwTableColumnInfo\n   * @memberOf module:js/awColumnService\n   */\nvar AwTableColumnInfo = function() {\n    var colSelf = this;\n\n    /**\n       * @property {String} name - Internal (non-localized) name of the column.\n       *\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.name = '';\n\n    /**\n       * @property {String} displayName - User facing (localized) name of the column.\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.displayName = '';\n\n    /**\n       * @property {Function} api - callback functions\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.api = null;\n\n    /**\n       * @property {Boolean} enableColumnResizing - allow column resize?\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableColumnResizing = true;\n\n    /**\n       * @property { Boolean } enableRendererContribution- allow to override default cellRender template?\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableRendererContribution = true;\n\n    /**\n       * @property {Number|String} width - Default number of pixels or '*' for auto.\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.width = 150;\n\n    /**\n       * @property {Number|String} minWidth - min Number of pixels\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.minWidth = 20;\n\n    /**\n       * @property {Boolean} enableHiding - enable column hiding\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableHiding = true;\n\n    /**\n       * @property {Boolean} enableSorting - expose sorting\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableSorting = true; // sorting will come later\n\n    /**\n       * @property {Boolean} enableColumnMenu - expose column menu\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableColumnMenu = true;\n\n    /**\n       * @property {Boolean} ? - enable column filtering\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.isFilteringEnabled = true;\n\n    /**\n       * @property {Boolean} ? - enable column rearrange\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableColumnMoving = true;\n\n    /**\n       * @property {Boolean} ? - enable tooltip on header\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.headerTooltip = true;\n\n    /**\n       * @property {Boolean} isCommand - TRUE if this column is being used to handle display and management of\n       *           commands table navigation (e.g. Often the 1st column displaying the primary ID/Name of the object\n       *           in that row).\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.isTableCommand = false;\n\n    /**\n       * @property {Boolean} isTreeNavigation - TRUE if this column is being used to handle tree-table navigation\n       *           (e.g. node expand/collapse and any other specific display options).\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.isTreeNavigation = false;\n};\n\n/**\n   * @param {Number} columnOrder -\n   * @param {Boolean} hiddenFlag -\n   * @param {Number} pixelWidth -\n   * @param {String} propertyName -\n   * @param {String} sortDirection -\n   * @param {Number} sortPriority -\n   * @param {String} typeName -\n   * @param {Boolean} isFilteringEnabled - Flag for filter enabled/disabled on this column\n   */\nvar AwSoaColumnInfo = function( columnOrder, hiddenFlag, pixelWidth, propertyName, sortDirection, sortPriority,\n    typeName, isFilteringEnabled ) {\n    var scSelf = this;\n\n    /**\n       * {Number}\n       */\n    scSelf.columnOrder = columnOrder;\n\n    /**\n       * {Boolean}\n       */\n    scSelf.hiddenFlag = hiddenFlag;\n\n    /**\n       * {Number}\n       */\n    scSelf.pixelWidth = pixelWidth;\n\n    /**\n       * {String}\n       */\n    scSelf.propertyName = propertyName;\n\n    /**\n       * {String} ASC or DESC\n       */\n    scSelf.sortDirection = sortDirection;\n\n    /**\n       * {Number}\n       */\n    scSelf.sortPriority = sortPriority;\n\n    /**\n       * {String}\n       */\n    scSelf.typeName = typeName;\n\n    /**\n       * {Boolean}\n       */\n    scSelf.isFilteringEnabled = isFilteringEnabled;\n};\n\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Object} $scope - The AngularJS data context node.\n   * @param {OjectArray} commands - Array of command objects to associate with the 'isTableCommand' or\n   *            'isTreeNavigation' column.\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   */\nvar AwTableColumnProvider = function( declViewModel, $scope, commands, gridId, commandsAnchor ) {\n    var cpSelf = this;\n\n    var _declViewModel = declViewModel;\n    var _$scope = $scope;\n    var _commands = commands;\n    var _gridId = gridId;\n    var _commandsAnchor = commandsAnchor;\n\n    /**\n       * Set the ID of this instance.\n       */\n    cpSelf.id = _debug_nextColumnProviderId++;\n\n    cpSelf.columnFilters = null;\n    cpSelf.sortCriteria = null;\n\n    /**\n       * {Object} _uwDataProvider - A UwDataProvider based on the dataProvider in the DeclViewModel JSON specified by\n       * the DeclGrid.\n       */\n    var _uwDataProvider = null;\n\n    /**\n       * {Object} _declColumnProviderJSON - A UwDataProvider based on the columnProvider in the DeclViewModel JSON\n       * specified by the DeclGrid.\n       */\n    var _declColumnProviderJSON = null;\n\n    /**\n       * {Boolean} _pinIconColumn - TRUE if the 1st column should be pinned to the left so that it is not scroll with\n       * the rest of the columns in the table.\n       */\n    var _pinIconColumn = true;\n\n    /**\n       * {Boolean} _soaEnabled - TRUE if this service is allowed to access soaService APIs.\n       * <P>\n       * Note: This service can be used in non\n       */\n    var _soaEnabled = true;\n\n    /**\n       * Make the little tweaks that are necessary.\n       *\n       * @param {AwTableColumnInfo} columnInfo - The column to be tweaked.\n       *\n       * @param {Boolean} isArrangeSupported - TRUE if columns should be allowed to move (but only if they wanted to in the first place).\n       *            FALSE if ALL columns should be fixed and not movable.\n       *\n       * @param {Boolean} isSortingSupported - TRUE if columns should be allowed to be corted.\n       */\n    function _tweakColumnInfo( columnInfo, isArrangeSupported, isSortingSupported ) {\n        // make sure propDescriptor isn't null\n        columnInfo.propDescriptor = columnInfo.propDescriptor || {};\n\n        /**\n           * Override 'enableColumnMoving' if 'arrange' not supported.\n           */\n        if( !isArrangeSupported ) {\n            columnInfo.enableColumnMoving = false;\n        }\n\n        /**\n           * Override 'enableSorting' if 'sorting' not supported.\n           */\n        if( !isSortingSupported ) {\n            columnInfo.enableSorting = false;\n        }\n\n        /**\n           * For now, we do not have any support for column menus.\n           */\n        columnInfo.enableColumnMenus = false;\n\n        /**\n           * Check if we DO NOT have a 'displayName' property but we do have a 'typeName' property<BR>\n           * If so: Make the 'displayName' the localized name of the type.\n           */\n        if( !columnInfo.displayName ) {\n            if( columnInfo.typeName ) {\n                var type = cmm.getType( columnInfo.typeName );\n\n                if( type && type.propertyDescriptorsMap[ columnInfo.propertyName ] ) {\n                    columnInfo.displayName = type.propertyDescriptorsMap[ columnInfo.propertyName ].displayName;\n                } else {\n                    columnInfo.displayName = columnInfo.propertyName;\n                }\n            } else {\n                columnInfo.typeName = columnInfo.columnSrcType;\n                columnInfo.displayName = columnInfo.propDescriptor.displayName || columnInfo.displayName;\n            }\n        }\n\n        /**\n           * Make sure was have a 'name' property (If not: Set it to the same as the 'propertyName' property).\n           */\n        columnInfo.name = columnInfo.name || columnInfo.propDescriptor.propertyName || columnInfo.propertyName;\n\n        /**\n           * If we have a 'pixelWidth' property, set the 'width' property to that value as well.\n           */\n        columnInfo.width = columnInfo.pixelWidth || columnInfo.width;\n\n        /**\n           * Make sure was have a 'visible' property (If not: Set it to the same as the 'hiddenFlag' property or just\n           * default to 'true').\n           */\n        if( !columnInfo.visible ) {\n            if( !declUtils.isNil( columnInfo.hiddenFlag ) ) {\n                columnInfo.visible = !columnInfo.hiddenFlag;\n            } else {\n                columnInfo.visible = true;\n            }\n        }\n\n        /**\n           * Make sure we have a 'field' (use 'name' is default)\n           */\n        columnInfo.field = columnInfo.field || columnInfo.name;\n\n        columnInfo.name = columnInfo.typeName ? columnInfo.typeName + '.' + columnInfo.name : columnInfo.name;\n\n        /**\n           * Setup to handle column sorting (if necessary)\n           */\n        if( columnInfo.enableSorting ) {\n            /**\n               * Fix for LCS-99462 - (Grid) Column sorting arrow not maintained, when switch to another view mode.\n               */\n            if( _.isEmpty( columnInfo.sort ) ) {\n                columnInfo.sort = {};\n            }\n\n            let sortCriteria = cpSelf.getSortCriteria();\n            if( sortCriteria ) {\n                // loop over column provider's sort criteria here and reapply as-needed\n                try {\n                    declarativeDataCtxSvc.applyScope( _declViewModel, sortCriteria, _declViewModel._internal.functions, _$scope, null );\n                } catch ( error ) {\n                    throw new Error( error );\n                }\n                cpSelf.setSortCriteria( sortCriteria );\n\n                _.forEach( sortCriteria, function( currentSortCriteria ) {\n                    if( columnInfo.name === currentSortCriteria.fieldName || columnInfo.propertyName === currentSortCriteria.fieldName ) {\n                        columnInfo.sort.direction = currentSortCriteria.sortDirection.toLowerCase();\n                        columnInfo.sort.priority = 0;\n                    }\n                } );\n            }\n\n            columnInfo.sortingAlgorithm = function( a, b, rowA, rowB, sortDir ) { // eslint-disable-line no-unused-vars\n                var vmPropA = rowA.entity.props[ columnInfo.field ];\n                var vmPropB = rowB.entity.props[ columnInfo.field ];\n\n                var valA = '';\n                var valB = '';\n\n                if( vmPropA.uiValue ) {\n                    valA = vmPropA.uiValue;\n                }\n\n                if( vmPropB.uiValue ) {\n                    valB = vmPropB.uiValue;\n                }\n\n                var strA = valA.toLowerCase();\n                var strB = valB.toLowerCase();\n\n                return strA === strB ? 0 : strA.localeCompare( strB );\n            };\n        }\n    } // _tweakColumnInfo\n\n    /**\n       * Build the final set of columnInfos from the given array of columnInfos.\n       *\n       * @param {ObjectArray} columnInfoIn - Array of column settings from declarative model.\n       *\n       * @return {AwTableColumnInfoArray} Array of AwTableColumnInfo initialized with the given column settings (plus\n       *         an 'icon' column as the 1st column, if requested by this columnProvider).\n       */\n    function _buildFinalColumnInfos( columnInfoIn ) {\n        let finalColumnInfos = [];\n\n        let newColumnInfo;\n\n        if( declGrid.addIconColumn !== false && declGrid.gridOptions.addIconColumn !== false ) {\n            let iconColumnFound = false;\n            let iconCellRenderer = null;\n\n            _.forEach( columnInfoIn, function( colInfo ) {\n                if( colInfo.name === 'icon' ) {\n                    iconColumnFound = true;\n                    return false;\n                }\n                // This block is added for PL table. Since icon column is hardcoded in this service,\n                // there is no way to provide a cell template at application layer. So added this hack.\n                // Once we correct the hardcoded way of creating icon column, this will no more be needed.\n                if( colInfo.isTableCommand && colInfo.iconCellRenderer ) {\n                    iconCellRenderer = colInfo.iconCellRenderer;\n                    return false;\n                }\n            } );\n\n            if( !iconColumnFound ) {\n                // Setup the special icon column\n                newColumnInfo = new AwTableColumnInfo();\n\n                newColumnInfo.name = 'icon';\n                newColumnInfo.displayName = '';\n                newColumnInfo.width = 34;\n                newColumnInfo.enableColumnMoving = false;\n                newColumnInfo.enableColumnMenu = false;\n                newColumnInfo.enableColumnResizing = false;\n                newColumnInfo.isFilteringEnabled = columnInfoIn.isFilteringEnabled !== false;\n                newColumnInfo.enableSorting = false;\n                newColumnInfo.visible = true;\n\n                if( _pinIconColumn ) {\n                    newColumnInfo.pinnedLeft = true;\n                }\n\n                if( iconCellRenderer ) {\n                    newColumnInfo.iconCellRenderer = iconCellRenderer;\n                }\n\n                finalColumnInfos.push( newColumnInfo );\n            }\n        }\n\n        let isArrangeSupported = cpSelf.isArrangeSupported();\n        let isSortingSupported = cpSelf.isSortingSupported();\n\n        let needsNavigationColumn = true;\n        _.forEach( columnInfoIn, function( colInfo ) {\n            if( colInfo.isTableCommand || colInfo.isTreeNavigation ) {\n                needsNavigationColumn = false;\n                return false;\n            }\n            return true;\n        } );\n\n        /**\n           * Create a new ('tweaked') AwTableColumnInfo for each of the given awColumnInfos.\n           */\n        _.forEach( columnInfoIn, function( info ) {\n            newColumnInfo = new AwTableColumnInfo();\n\n            /**\n               * Move over all existing property values\n               */\n            _.forEach( info, function( value, name ) {\n                newColumnInfo[ name ] = value;\n            } );\n\n            if( needsNavigationColumn ) {\n                if( _uwDataProvider && _uwDataProvider.accessMode === 'tree' ) {\n                    newColumnInfo.isTreeNavigation = true;\n                } else {\n                    newColumnInfo.isTableCommand = true;\n                }\n\n                needsNavigationColumn = false;\n            }\n\n            if( ( newColumnInfo.isTreeNavigation || newColumnInfo.isTableCommand ) && _commands ) {\n                newColumnInfo.commands = _commands;\n            }\n\n            newColumnInfo.commandsAnchor = _commandsAnchor;\n\n            // Even if sorting is supported at data provider level, if could be disabled at column level.\n            // check both values to decide sort enablement.\n\n            let sortPossibleForProp = isSortingSupported && newColumnInfo.enableSorting;\n\n            let typeDesc = cmm.getType( newColumnInfo.typeName );\n            if( typeDesc ) {\n                let propDesc = typeDesc.propertyDescriptorsMap[ newColumnInfo.propertyName ];\n                if( propDesc ) {\n                    // if no dataType specified, use property descriptor\n                    if( !newColumnInfo.dataType ) {\n                        newColumnInfo.dataType = propDesc.valueType;\n                    }\n                }\n            }\n\n            /**\n               * Adjust the properties (as necessary)\n               */\n            _tweakColumnInfo( newColumnInfo, isArrangeSupported, sortPossibleForProp );\n\n            // Add column filter\n            if( declGrid.gridOptions.isFilteringEnabled && newColumnInfo.isFilteringEnabled !== false ) {\n                let existingFilters = [];\n\n                const columnFilters = cpSelf.getColumnFilters();\n                _.forEach( columnFilters, function( currentFilter ) {\n                    if( newColumnInfo.field === currentFilter.columnName ) {\n                        existingFilters.push( currentFilter );\n                    }\n                } );\n\n                awColumnFilterService.updateColumnFilter( newColumnInfo, existingFilters );\n            }\n\n            /**\n               * check for duplicate column before adding\n               */\n            if( finalColumnInfos.find( function( finalColumnInfo ) {\n                return finalColumnInfo.name === newColumnInfo.name &&\n                          finalColumnInfo.typeName === newColumnInfo.typeName;\n            } ) ) {\n                logger.warn( 'Skipping duplicate column: ' + newColumnInfo.name );\n            } else {\n                finalColumnInfos.push( newColumnInfo );\n            }\n        } );\n        // Set sort from columns if sortCriteria is empty\n        const sortCriteria = cpSelf.getSortCriteria();\n        if( _.isEmpty( sortCriteria ) ) {\n            let sortPriority = NaN;\n            let sortDirection = '';\n            let sortColumn = null;\n            _.forEach( finalColumnInfos, function( currentColumn ) {\n                if( currentColumn.sortDirection && ( isNaN( sortPriority ) || currentColumn.sortPriority < sortPriority ) ) {\n                    sortPriority = currentColumn.sortPriority;\n                    sortDirection = currentColumn.sortDirection.toLowerCase().includes( 'desc' ) ? 'DESC' : 'ASC';\n                    sortColumn = currentColumn;\n                }\n            } );\n            if( sortColumn && sortColumn.enableSorting && sortDirection ) {\n                sortColumn.sort.direction = sortDirection;\n                sortColumn.sort.priority = 0;\n                cpSelf.setSortCriteria( [ {\n                    fieldName: sortColumn.field,\n                    sortDirection: sortDirection\n                } ] );\n            }\n        }\n        // checking if columns are set as frozen via xrt or vmo json otherwise rendered the default frozen columns\n        finalColumnInfos = _checkForFrozenColumnsConfiguration( finalColumnInfos );\n\n        return finalColumnInfos;\n    } // _buildFinalColumnInfos\n\n    /**\n       * checks and froze columns specified via xrt, vmo json or defualt.\n       * 1st prefrence is given to xrt, then vmo json and at last if nothing is specified, default columns will be forzen.\n       * (i.e. 1st col for tree & 1st,2nd col for table)\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Object} finalColumnInfos final columns config with frozen properties.\n       */\n    function _checkForFrozenColumnsConfiguration( allColumns ) {\n        var xrtConfigured = _checkFrozenColumnParameterConfig( allColumns );\n\n        if( !xrtConfigured ) {\n            var vmJsonConfigured = _checkFrozenColumnJsonConfig( allColumns );\n\n            if( !vmJsonConfigured ) {\n                _defaultFrozenColumns( allColumns );\n            }\n        }\n\n        return allColumns;\n    }\n\n    /**\n       * check and froze columns as specified in xrt\n       *\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Boolean} True if frozen column configuration is done via xrt.\n       */\n    function _checkFrozenColumnParameterConfig( allColumns ) {\n        var frozenIndex = -1;\n        // find the frozen col index\n        allColumns.forEach( function( col, index ) {\n            if( col.parameters && col.parameters.frozen === 'true' ) {\n                frozenIndex = index;\n            }\n        } );\n\n        // froze all columns upto xrt configured frozen col.\n        if( frozenIndex !== -1 && frozenIndex <= allColumns.length ) {\n            for( var i = 0; i <= frozenIndex; i++ ) {\n                allColumns[ i ].pinnedLeft = true;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n       * check and froze columns as specified in view model json\n       *\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Boolean} True if frozen column configuration is done via vmo json.\n       */\n    function _checkFrozenColumnJsonConfig( allColumns ) {\n        if( _declViewModel && _declViewModel.columnProviders ) {\n            var columnProviders = [];\n            for( var provider in _declViewModel.columnProviders ) {\n                columnProviders.push( provider );\n            }\n\n            var frozenIndex = _declViewModel.columnProviders[ columnProviders[ 0 ] ].frozenColumnIndex;\n\n            if( frozenIndex === undefined ) {\n                return false;\n            }\n\n            if( frozenIndex >= 0 && frozenIndex <= allColumns.length ) {\n                // froze all columns upto frozenIndex specified in vmo json.\n                for( var index = 0; index <= frozenIndex; index++ ) {\n                    allColumns[ index ].pinnedLeft = true;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n       * freezing default columns i.e. 1st col for tree & 1st,2nd col for table\n       *\n       * @param {Object} allColumns - all columns of ui grid.             *\n       */\n    function _defaultFrozenColumns( allColumns ) {\n        if( allColumns && allColumns.length > 0 ) {\n            if( allColumns[ 0 ].name === 'icon' ) {\n                // this for table\n                // 0th column (contains icon) + 1st column must be frozen in table as an AC of AW-4227 & AW-67931\n                allColumns[ 0 ].pinnedLeft = true;\n                if( allColumns[ 1 ] ) {\n                    allColumns[ 1 ].pinnedLeft = true;\n                }\n            } else {\n                // In tree, 0th column (contains icon + name) must be frozen\n                allColumns[ 0 ].pinnedLeft = true;\n            }\n        }\n    }\n\n    /**\n       * @param {Object} columnProviderJSON - JSON object where the columnProvider is defined.\n       * @param {Object} passedState - State with which column provider invokes actions\n       *\n       * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n       */\n    function _initializedFromJSON( columnProviderJSON, passedState ) {\n        /**\n           * Set whether this column provider should interact with SOA APIs.\n           */\n        if( !declUtils.isNil( columnProviderJSON.soaEnabled ) ) {\n            _soaEnabled = columnProviderJSON.soaEnabled;\n        }\n        if( _declColumnProviderJSON ) {\n            try {\n                declarativeDataCtxSvc.applyScope( _declViewModel, _declColumnProviderJSON, null, passedState || _$scope, null );\n            } catch ( error ) {\n                throw new Error( error );\n            }\n\n            cpSelf.columnFilters = _declColumnProviderJSON.columnFilters;\n            cpSelf.sortCriteria = _declColumnProviderJSON.sortCriteria;\n        }\n\n        /**\n           * Check for column load and row property actions\n           */\n        var loadColumnAction = columnProviderJSON.loadColumnAction ? _declViewModel\n            .getAction( columnProviderJSON.loadColumnAction ) : null;\n\n        if( loadColumnAction ) {\n            if( loadColumnAction.deps ) {\n                return moduleLoader.loadDependentModule( loadColumnAction.deps ).then(\n                    function( moduleObj ) {\n                        return _executeLoadColumnAction( loadColumnAction, moduleObj, passedState );\n                    } );\n            }\n\n            return _executeLoadColumnAction( loadColumnAction, null );\n        }\n\n        /**\n           * Load from the dataProvider (if possible)\n           */\n        if( !_.isEmpty( _uwDataProvider.columnConfig ) && !_.isEmpty( _uwDataProvider.columnConfig.columns ) ) {\n            _uwDataProvider.cols = _buildFinalColumnInfos( _uwDataProvider.columnConfig.columns );\n\n            return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n        } else if( columnProviderJSON ) {\n            if( !_.isEmpty( columnProviderJSON.columnConfig ) && !_.isEmpty( columnProviderJSON.columnConfig.columns ) ) {\n                _uwDataProvider.cols = _buildFinalColumnInfos( columnProviderJSON.columnConfig.columns );\n\n                return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n            } else if( !_.isEmpty( columnProviderJSON.columns ) ) {\n                /**\n\n                  /**\n                   * For static column provider, setting width to auto and minWidth to 150.\n                   */\n                _.forEach( columnProviderJSON.columns, function autoResizeStaticColumns( column ) {\n                    if( !column.width ) {\n                        column.width = '*';\n                        column.minWidth = 150;\n                    }\n                } );\n\n                _updateColumnInfosFromColumnInfos( _uwDataProvider, columnProviderJSON.columns );\n\n                return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n            }\n        }\n\n        return AwPromiseService.instance.resolve( [] );\n    }\n\n    /**\n       * @param {DeclAction} loadColumnAction - Action used to load columns.\n       * @param {Object} loadColumnModuleObj - (Optional) Module API object to use when executing the action.\n       * @param {Object} passedState - State with which column provider invokes actions\n       *\n       * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n       */\n    function _executeLoadColumnAction( loadColumnAction, loadColumnModuleObj, passedState ) {\n        /**\n           * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action event\n           * processing was started.\n           */\n        var localDataCtx = declUtils.resolveLocalDataCtx( _declViewModel, passedState || _$scope );\n\n        if( loadColumnAction ) {\n            return actionSvc.executeAction( _declViewModel, loadColumnAction, localDataCtx, loadColumnModuleObj )\n                .then( function( columnResult ) {\n                    if( columnResult && columnResult.columnInfos ) {\n                        _uwDataProvider.cols = _buildFinalColumnInfos( columnResult.columnInfos );\n                    } else if( _uwDataProvider.columnConfig && _uwDataProvider.columnConfig.columns ) {\n                        _uwDataProvider.cols = _buildFinalColumnInfos( _uwDataProvider.columnConfig.columns );\n                    }\n\n                    return _uwDataProvider.cols;\n                } );\n        }\n\n        return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n    }\n\n    /**\n       *\n       * @param {AwColumnInfoArray} columnInfos - Collection of Object containing the 'cok\n       */\n    function _updateColumnInfosFromColumnInfos( uwDataProvider, columnInfos ) {\n        uwDataProvider.cols = _buildFinalColumnInfos( columnInfos );\n    } // _updateColumnInfosFromColumnInfos\n\n    /**\n       * ---------------------------------------------------------------------<br>\n       * Define the exposed API <BR>\n       * ---------------------------------------------------------------------<br>\n       */\n\n    /**\n       * Build the new dynamic columns, and update the grid control\n       *\n       * @param {AwTableColumnInfoArray} columnInfosIn - the new set of columns\n       * @param {Boolean} updateDataProvider - update the grid ui?\n       * @returns {Promise} to ensure _uwDataProvider.cols is updated before used.\n       */\n    cpSelf.buildDynamicColumns = function( columnInfosIn, updateDataProvider ) {\n        if( _soaEnabled ) {\n            var typeNames = [];\n\n            _.forEach( columnInfosIn, function( columnInfo ) {\n                if( columnInfo.typeName ) {\n                    typeNames.push( columnInfo.typeName );\n                } else if( columnInfo.associatedTypeName ) {\n                    typeNames.push( columnInfo.associatedTypeName );\n                }\n            } );\n            typeNames = _.uniq( typeNames );\n\n            return soaService.ensureModelTypesLoaded( typeNames ).then( function() {\n                var columnInfos = _buildFinalColumnInfos( columnInfosIn );\n\n                if( updateDataProvider ) {\n                    var oldCols = _uwDataProvider.cols;\n                    _uwDataProvider.cols = columnInfos;\n\n                    // preserve properties that were not included in new columns\n                    _.forEach( oldCols, function( oldCol ) {\n                        _.forEach( _uwDataProvider.cols, function( currentColumn ) {\n                            if( currentColumn.name === oldCol.name ) {\n                                if( oldCol.enableColumnMoving === false ) {\n                                    currentColumn.enableColumnMoving = false;\n                                }\n                                // Handle column filter logic\n                                awColumnFilterService.updateNewColumnFilter( currentColumn, oldCol );\n                                // XRT properties\n                                var xrtProperties = [ 'renderingHint', 'parameters', 'modifiable', 'isTableCommand', 'enableSorting', 'isFilteringEnabled' ];\n\n                                _.forEach( xrtProperties, function( propertyName ) {\n                                    if( currentColumn[ propertyName ] === undefined ) {\n                                        currentColumn[ propertyName ] = oldCol[ propertyName ];\n                                    }\n                                } );\n\n                                return false;\n                            }\n                        } );\n                    } );\n                }\n            } );\n        } else if( updateDataProvider ) {\n            _uwDataProvider.cols = _buildFinalColumnInfos( columnInfosIn );\n            return Promise.resolve();\n        }\n    }; // buildDynamicColumns\n\n    /**\n       * Get the current columns\n       *\n       * @return {ArrayUwGridColumnInfo} an array of UwGridColumnInfo that represent the columns specified by EITHER\n       *         the given 'declViewModel' (columnPropNames, columnDisplayNames & nColsToFreeze) OR\n       *         'declGrid.columnDefs'\n       */\n    cpSelf.getColumns = function() {\n        if( _uwDataProvider && _uwDataProvider.cols ) {\n            return _uwDataProvider.cols;\n        }\n        return null;\n    };\n\n    /**\n       * Change the size of one of the columns\n       *\n       * @param {String} name - The name of the column that has had it's size change\n       * @param {Integer} delta - The change in size of the column\n       *\n       */\n    cpSelf.columnSizeChanged = function( name, delta ) {\n        var columnInfos = cpSelf.getColumns();\n\n        _.forEach( columnInfos, function( columnInfo ) {\n            if( columnInfo.name === name ) {\n                columnInfo.width += delta;\n\n                /**\n                   * Previously ui-grid was enforcing min and max, but it seems we need to do it here for now Also\n                   * round since IE11 is returning a float instead of an int\n                   */\n                columnInfo.width = Math.round( Math.max( columnInfo.width, columnInfo.minWidth ) );\n\n                if( columnInfo.pixelWidth ) {\n                    columnInfo.pixelWidth = columnInfo.width;\n                }\n\n                return false;\n            }\n        } );\n\n        eventBus.publish( 'columnArrange', {\n            name: _gridId,\n            columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n            arrangeType: 'saveColumnAction',\n            columns: columnInfos\n        } );\n    };\n\n    /**\n       * Re-order one of the columns\n       *\n       * @param {String} name - The name of the column that has been moved\n       * @param {Integer} origPosition - column's original position\n       * @param {Integer} newPosition - column's new position\n       */\n    cpSelf.columnOrderChanged = function( name, origPosition, newPosition ) {\n        var columnInfos = cpSelf.getColumns();\n\n        // assume icon is using col 0 and we don't have to adjust indexes for splicing below\n        // if not, adjust indexes\n        if( columnInfos[ 0 ].name !== 'icon' ) {\n            origPosition = origPosition > 0 ? origPosition - 1 : 0;\n            newPosition = newPosition > 0 ? newPosition - 1 : 0;\n        }\n\n        // dis-allow positioning to the left of any initial un-moveable columns\n        while( columnInfos[ newPosition ] && columnInfos[ newPosition ].enableColumnMoving === false ) {\n            newPosition++;\n        }\n\n        var movedColumnInfo = columnInfos.splice( origPosition, 1 );\n        columnInfos.splice( newPosition, 0, movedColumnInfo[ 0 ] );\n\n        eventBus.publish( 'columnArrange', {\n            name: _gridId,\n            columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n            arrangeType: 'saveColumnAction',\n            columns: columnInfos\n        } );\n    };\n\n    /**\n       * Hide one of the columns\n       *\n       * @param {Integer} columnIndex - The index of the column that has been hidden\n       */\n    cpSelf.hideColumn = function( columnIndex ) {\n        var columnInfos = cpSelf.getColumns();\n        let operation = _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.operationType : '';\n\n        columnInfos[ columnIndex ].hiddenFlag = true;\n\n        eventBus.publish( 'columnArrange', {\n            name: _gridId,\n            columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n            arrangeType: 'saveColumnAndLoadAction',\n            columns: columnInfos,\n            operationType: operation\n        } );\n    };\n\n    /**\n       * Get the current sort criteria\n       */\n    cpSelf.getSortCriteria = function() {\n        return cpSelf.sortCriteria;\n    };\n\n    /**\n       * Set the current sort criteria\n       *\n       * @param {Object[]} sortCriteria - The new sort criteria\n       */\n    cpSelf.setSortCriteria = function( sortCriteria ) {\n        cpSelf.sortCriteria = sortCriteria;\n        if( _declColumnProviderJSON ) {\n            _declColumnProviderJSON.sortCriteria = sortCriteria;\n        }\n    };\n\n    /**\n       * Get the current column filters\n       * @return {Object[]} columnFilters - the column filters\n       */\n    cpSelf.getColumnFilters = function() {\n        return cpSelf.columnFilters;\n    };\n\n    /**\n       * Set the column filters\n       * @param {Object[]} columnFilters - the column filters\n       */\n    cpSelf.setColumnFilters = function( columnFilters ) {\n        cpSelf.columnFilters = columnFilters;\n        if( _declColumnProviderJSON ) {\n            _declColumnProviderJSON.columnFilters = columnFilters;\n        }\n    };\n\n    /**\n       * Free up all resources held/managed by this object.\n       * <P>\n       * Note: After this function, no API call should be considered valid. This function is intended to be called\n       * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n       * objects managed by this class may be considered a 'memory leak'.\n       */\n    cpSelf.destroy = function() {\n        _declViewModel = null;\n        _uwDataProvider = null; // Note: We did not create this object, so it's not ours to destroy\n        _$scope = null;\n        _commands = null;\n\n        cpSelf = null;\n    };\n\n    cpSelf.setAdditionalPrams = function( commands, commandsAnchor, dataCtxNode ) {\n        _commands = commands;\n        _commandsAnchor = commandsAnchor;\n        _$scope = dataCtxNode;\n    };\n\n    /**\n       * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n       *         additional declActions necessary to support column arranging.\n       */\n    cpSelf.isArrangeSupported = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        if( _declViewModel.columnProviders ) {\n            var colProvider = _declViewModel.columnProviders[ declGrid.columnProvider ];\n\n            assert( colProvider, 'Invalid columnProvider' );\n\n            return colProvider.resetColumnAction && colProvider.saveColumnAndLoadAction;\n        }\n\n        return false;\n    };\n\n    /**\n       * @return {Boolean} TRUE support column filtering.\n       */\n    cpSelf.isFilteringSupported = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        return declGrid.gridOptions.isFilteringEnabled === true;\n    };\n\n    /**\n       * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n       *         additional option or declActions necessary to support column sorting.\n       */\n    cpSelf.isSortingSupported = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        /**\n           * Check if the declGrid options indicates if 'external' sorting is supported or not.\n           */\n        if( !declUtils.isNil( declGrid.gridOptions.useExternalSorting ) ) {\n            return declGrid.gridOptions.useExternalSorting;\n        }\n\n        /**\n           * Since the options did not indicate support, check if the declColumnProvider indicates sorting by the\n           * existence of a declAction for sorting.\n           */\n        if( !_declViewModel.columnProviders ) {\n            return false;\n        }\n        var colProvider = _declViewModel.columnProviders[ declGrid.columnProvider ];\n\n        assert( colProvider, 'Invalid columnProvider' );\n\n        if( !declUtils.isNil( colProvider.sortColumnAction ) ) {\n            return true;\n        }\n\n        /**\n           * Note: Since aw3.3 'useExternalSorting' is true by default. This default should be changed to FALSE, but\n           * until then we need to honor it here. The declGrid in the declViewModel should override that property if\n           * they do NOT want 'useExternalSorting' to be true.\n           */\n        return true;\n    };\n\n    /**\n       * @return {String} Column provider Id, it is equal to clientScopeURI for aw tables if specified.\n       */\n    cpSelf.getId = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        if( _declViewModel.columnProviders ) {\n            var colProvider = _declViewModel.columnProviders[ declGrid.columnProvider ];\n\n            assert( colProvider, 'Invalid columnProvider' );\n\n            return colProvider.id;\n        }\n\n        return null;\n    };\n\n    /**\n       * @return {Promise} A Promise resolved with the initial array of AwTableColumnInfo.\n       */\n    cpSelf.initialize = function( passedState ) {\n        /**\n           * Check for columnProvider on viewModel\n           */\n        if( _declColumnProviderJSON ) {\n            return _initializedFromJSON( _declColumnProviderJSON, passedState );\n        }\n\n        /**\n           * Use properties placed on the 'declViewModel' as the basis of the column information.\n           * <P>\n           * Note: This is what the shf measurement table does, but should update to use col provider\n           */\n        var columnPropNames = _declViewModel.columnPropNames ? _declViewModel.columnPropNames : [];\n        var columnDisplayNames = _declViewModel.columnDisplayNames ? _declViewModel.columnDisplayNames : [];\n        var nColsToFreeze = _declViewModel.nColsToFreeze ? _declViewModel.nColsToFreeze : 0;\n\n        var newColumnInfos = [];\n\n        for( var index = 0; index < columnPropNames.length; index++ ) {\n            var columnInfo = new AwTableColumnInfo();\n\n            columnInfo.name = columnPropNames[ index ];\n\n            if( columnDisplayNames !== null && columnDisplayNames.length > index ) {\n                columnInfo.displayName = columnDisplayNames[ index ];\n            }\n\n            if( index < nColsToFreeze ) {\n                columnInfo.pinnedLeft = true;\n            }\n\n            newColumnInfos.push( columnInfo );\n        }\n\n        _uwDataProvider.cols = newColumnInfos;\n\n        return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n    }; // initialize\n\n    /**\n       * ---------------------------------------------------------------------------<BR>\n       * Property & Function definition complete....Finish initialization. <BR>\n       * ---------------------------------------------------------------------------<BR>\n       */\n\n    /**\n       * Validate parameters and initialize fields\n       */\n    assert( _declViewModel, 'No in DeclViewModel specified ' );\n    // assert( _gridId, 'No DeclGrid specified ' );\n\n    if( _gridId ) {\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'No DeclGrid specified ' );\n\n        if( _declViewModel.dataProviders && declGrid.dataProvider ) {\n            _uwDataProvider = _declViewModel.dataProviders[ declGrid.dataProvider ];\n        }\n\n        if( _declViewModel.columnProviders && declGrid.columnProvider ) {\n            _declColumnProviderJSON = _declViewModel.columnProviders[ declGrid.columnProvider ];\n            if( !_.isEmpty( _declColumnProviderJSON.columnConfig ) && !_.isEmpty( _declColumnProviderJSON.columnConfig.columns ) ) {\n                _uwDataProvider.columnConfig = _declColumnProviderJSON.columnConfig;\n            }\n            if( _declColumnProviderJSON.objectSetUri ) {\n                _uwDataProvider.objectSetUri = _declColumnProviderJSON.objectSetUri;\n            }\n        }\n\n        assert( _uwDataProvider, 'No DataProvider specified in DeclViewModel' );\n\n        if( declGrid.hasOwnProperty( 'pinIconColumn' ) ) {\n            _pinIconColumn = declGrid.pinIconColumn;\n        }\n    }\n}; // AwTableColumnProvider\n\n/**\n   * ----------------------------------------------------------------------------<BR>\n   * Define published service APIs<BR>\n   * ----------------------------------------------------------------------------<BR>\n   */\nvar exports = {};\n\n/**\n   * @param {Object} columnProperties - (Optional) An object who's properties will overwrite the default values of the\n   *            new AwTableColumnInfo object.\n   *\n   * @return {AwTableColumnInfo} Newly created AwTableColumnInfo object.\n   */\nexport let createColumnInfo = function( columnProperties ) {\n    var columnInfo = new AwTableColumnInfo();\n\n    if( columnProperties ) {\n        _.forEach( columnProperties, function( value, name ) {\n            columnInfo[ name ] = value;\n        } );\n    }\n\n    return columnInfo;\n};\n\n/**\n   * @param {AwTableColumnInfo} awColumnInfo -\n   * @param {Number} columnOrder -\n   */\nexport let createSoaColumnInfo = function( awColumnInfo, columnOrder ) {\n    return new AwSoaColumnInfo( columnOrder, awColumnInfo.hiddenFlag, awColumnInfo.pixelWidth,\n        awColumnInfo.propertyName, awColumnInfo.sortDirection, awColumnInfo.sortPriority, awColumnInfo.typeName, awColumnInfo.isFilteringEnabled );\n};\n\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Scope} $scope - The AngularJS data context node.\n   * @param {Array} commands - The list of associated commands\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   *\n   * @return {AwTableColumnProvider} Newly created AwTableColumnProvider object.\n   */\nexport let createColumnProvider = function( declViewModel, $scope, commands, gridId, commandsAnchor ) {\n    return new AwTableColumnProvider( declViewModel, $scope, commands, gridId, commandsAnchor );\n};\n\nexports = {\n    createColumnInfo,\n    createSoaColumnInfo,\n    createColumnProvider\n};\nexport default exports;\n\n\n"]},"metadata":{},"sourceType":"module"}
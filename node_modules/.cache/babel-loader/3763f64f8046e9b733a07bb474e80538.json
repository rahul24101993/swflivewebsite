{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This service creates 'UwDataProvider' objects used for lists, grids and other collections).\n *\n * @module js/dataSourceService\n */\nimport uwPropertyService from 'js/uwPropertyService';\nimport policySvc from 'soa/kernel/propertyPolicyService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\n\nvar DataSourceService = function (dataSource) {\n  var _self = this; // eslint-disable-line consistent-this\n\n\n  var _dataProvider = null;\n  var _declViewModel = null;\n\n  var _setdataSourceService = function (dataSource) {\n    if (dataSource.declViewModel) {\n      _declViewModel = dataSource.declViewModel;\n    } else if (dataSource.dataProvider) {\n      _dataProvider = dataSource.dataProvider;\n    }\n  };\n\n  _self.getDataProvider = function () {\n    return _dataProvider;\n  };\n\n  _self.getDeclViewModel = function () {\n    return _declViewModel;\n  };\n\n  _self.getSourceObject = function () {\n    if (_dataProvider) {\n      return _dataProvider;\n    }\n\n    return _declViewModel;\n  };\n\n  _self.getContextVMO = function () {\n    if (_declViewModel) {\n      return _declViewModel.baseselection ? _declViewModel.baseselection : _declViewModel.vmo;\n    }\n\n    return null;\n  };\n\n  _self.hasxrtBasedViewModel = function () {\n    var hasxrtBasedVM = false;\n\n    var srcObj = _self.getSourceObject();\n\n    if (srcObj.xrtType === 'INFO' && !_.isEmpty(srcObj.xrtData) && !_.isEmpty(srcObj.xrtData.xrtViewModel)) {\n      hasxrtBasedVM = true;\n    } else {\n      hasxrtBasedVM = srcObj.gwtPresenters && srcObj.gwtPresenters.length > 0;\n    }\n\n    return hasxrtBasedVM;\n  };\n  /**\n   * This returns all the HTML Panels ids currently present in the View.\n   *\n   * @returns {ObjectArray} - Panel IDs\n   */\n\n\n  _self.getGwtHTMLPanelIds = function () {\n    var srcObj = _self.getSourceObject();\n\n    if (srcObj.gwtPresenters) {\n      return srcObj.gwtPresenters;\n    }\n\n    return [];\n  };\n  /**\n   * This returns all the HTML Panels ids currently present in the View.\n   *\n   * @returns {ObjectArray} - Panel IDs\n   */\n\n\n  _self.getGwtVMs = function () {\n    var srcObj = _self.getSourceObject();\n\n    if (srcObj.gwtVieModel) {\n      return srcObj.gwtVieModel;\n    }\n\n    return [];\n  };\n  /**\n   * Get all the loaded view modle objects\n   *\n   * @return {ObjectArray} Array of loaded view model objects\n   */\n\n\n  _self.getLoadedViewModelObjects = function (allowDuplicates) {\n    var loadedViewModelObjects = [];\n\n    if (_dataProvider && _dataProvider.viewModelCollection) {\n      loadedViewModelObjects = _dataProvider.getEditableObjects();\n    } else if (_declViewModel) {\n      if (_declViewModel.vmo) {\n        if (_declViewModel.data && _declViewModel.data.objects) {\n          for (let key in _declViewModel.data.objects) {\n            if (_declViewModel.data.objects[key].uid === _declViewModel.vmo.uid) {\n              loadedViewModelObjects.push(_declViewModel.data.objects[key]);\n              break;\n            }\n          }\n        } else {\n          loadedViewModelObjects.push(_declViewModel.vmo);\n        }\n      } else if (_declViewModel.getAtomicData) {\n        if (_declViewModel.getAtomicData().xrtVMO) {\n          loadedViewModelObjects.push(_declViewModel.getAtomicData().xrtVMO);\n        }\n\n        if (_declViewModel.getAtomicData().dpRef && _declViewModel.getAtomicData().dpRef.current) {\n          _.forEach(_declViewModel.getAtomicData().dpRef.current.dataProviders, function (vmCollection) {\n            if (vmCollection) {\n              loadedViewModelObjects = loadedViewModelObjects.concat(vmCollection());\n            }\n          });\n        }\n      }\n\n      if (_declViewModel.dataProviders) {\n        _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n          if (dataProvider && dataProvider.viewModelCollection) {\n            loadedViewModelObjects = loadedViewModelObjects.concat(dataProvider.viewModelCollection.getLoadedViewModelObjects());\n          }\n        });\n      }\n\n      if (_declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection) {\n        loadedViewModelObjects = loadedViewModelObjects.concat(_declViewModel.customPanel.viewModelCollection);\n      }\n    } // Weed out the duplicate ones\n\n\n    if (!allowDuplicates) {\n      loadedViewModelObjects = _.uniq(loadedViewModelObjects, false, function (vmo) {\n        return vmo.uid;\n      });\n    }\n\n    return loadedViewModelObjects;\n  };\n  /**\n   * Get all the collections in the view model.\n   *\n   * @return {ObjectArray} Array of collections.\n   */\n\n\n  _self.getAllCollectionsAndPropertyNames = function () {\n    var collections = [];\n\n    if (_declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        if (dataProvider && dataProvider.viewModelCollection) {\n          var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n          var properties = [];\n\n          _.forEach(dataProvider.cols, function (col) {\n            properties.push(col.name);\n          });\n\n          var collectionData = {\n            collection: collection,\n            properties: properties\n          };\n          collections = collections.concat(collectionData);\n        }\n      });\n    }\n\n    if (_declViewModel && _declViewModel.vmo) {\n      collections.push({\n        collection: [_declViewModel.vmo],\n        properties: []\n      });\n    }\n\n    return collections;\n  };\n  /**\n   * Get all the collection keys from the view model\n   *\n   * @returns {StringArray} - Keys.\n   */\n\n\n  _self.getCollectionKeys = function () {\n    var collectionKeys = [];\n\n    if (_declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        collectionKeys.push(dataProvider.name);\n      });\n    }\n\n    return collectionKeys;\n  };\n  /**\n   * Get all the collections in the view model.\n   *\n   * @param {String} dataBindValue - The data bind value.\n   *\n   * @return {ObjectArray} Array of collections.\n   */\n\n\n  _self.getCollectionAndPropertyNames = function (dataBindValue) {\n    var collData = {};\n\n    if (_declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        if (dataProvider && dataProvider.name === dataBindValue && dataProvider.viewModelCollection) {\n          var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n          var properties = [];\n\n          _.forEach(dataProvider.cols, function (col) {\n            properties.push(col.name);\n          });\n\n          collData.collection = collection;\n          collData.properties = properties;\n          return;\n        }\n      });\n    } else if (dataBindValue === '' && _declViewModel) {\n      var properties = [];\n\n      _.forEach(_declViewModel.vmo.props, function (prop) {\n        properties.push(prop.propertyName);\n      });\n\n      collData.properties = properties;\n      collData.collection = [_declViewModel.vmo];\n    }\n\n    return collData;\n  };\n\n  _self.setSelectionEnabled = function (isEnabled) {\n    if (_dataProvider && _dataProvider.selectionModel) {\n      _dataProvider.setSelectionEnabled(isEnabled);\n    } else if (_declViewModel && _declViewModel.dataProviders) {\n      _.forEach(_declViewModel.dataProviders, function (dataProvider) {\n        if (dataProvider && dataProvider.selectionModel) {\n          dataProvider.setSelectionEnabled(isEnabled);\n        }\n      });\n    }\n  };\n\n  _self.getPropertyMap = function () {\n    var uidtoPropNameMap = {};\n    var loadedViewModelObjs = viewModelObjectService.getVmosNotInEdit(_self.getLoadedViewModelObjects());\n\n    if (_dataProvider && _dataProvider.viewModelCollection) {\n      var propNames = _dataProvider.getPropertyNames();\n\n      _.forEach(loadedViewModelObjs, function (vmObjects) {\n        uidtoPropNameMap[vmObjects.uid] = propNames;\n      });\n    } else if (_declViewModel) {\n      var customPanelUids = []; // For custom panels, include underlying objects in uidtoPropNameMap\n\n      if (_declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection) {\n        _declViewModel.customPanel.viewModelCollection.map(function (obj) {\n          if (obj && obj.props) {\n            customPanelUids.push(obj.uid);\n\n            _.forEach(obj.props, function (prop) {\n              if (prop.parentUid !== obj.uid) {\n                customPanelUids.push(prop.parentUid);\n              }\n            });\n          }\n        });\n      }\n\n      _.forEach(loadedViewModelObjs, function (vmObjects) {\n        fetchPropNamesFromVMO(vmObjects, uidtoPropNameMap, customPanelUids);\n      });\n    }\n\n    return uidtoPropNameMap;\n  };\n  /**\n   * This function generates the uid to propertyName map\n   *\n   * @param {ViewModelObject} vmo - Object to access.\n   *\n   * @param {StringToStringMap} uidtoPropNameMap - ID Map.\n   *\n   * @param {Array} customPanelUids - array of custom panel uids (also includes parentUid of\n   *   properties if they are different)\n   */\n\n\n  function fetchPropNamesFromVMO(vmo, uidtoPropNameMap, customPanelUids) {\n    _.forEach(vmo.props, function (props) {\n      var uid = props.parentUid ? props.parentUid : vmo.uid;\n      var propNames = uidtoPropNameMap[uid] ? uidtoPropNameMap[uid] : [];\n\n      if (props && props.type) {\n        propNames.push(props.propertyName);\n      }\n\n      if (uid === vmo.uid || _.includes(customPanelUids, uid)) {\n        uidtoPropNameMap[uid] = propNames;\n      }\n    });\n  }\n\n  _self.checkEditableOnProperties = function () {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      vmo.setEditableStates(true, true, true);\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.updatePartialEditState = function (failureUids, modifiedPropsMap) {\n    const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      if (!_.includes(failureUids, vmo.uid)) {\n        vmo.setEditableStates(false, true, true);\n\n        if (modifiedPropsMap[vmo.uid]) {\n          var propsToReset = modifiedPropsMap[vmo.uid].viewModelProps;\n\n          _.forEach(propsToReset, function (prop) {\n            uwPropertyService.resetProperty(prop);\n          });\n        }\n      }\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.getAllEditableProperties = function () {\n    var allEditableProperties = [];\n\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (prop && prop.isEditable) {\n          allEditableProperties.push(prop);\n        }\n      });\n    });\n\n    return allEditableProperties;\n  };\n\n  _self.getAllModifiedProperties = function () {\n    const allModifiedProperties = [];\n    const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (uwPropertyService.isModified(prop)) {\n          allModifiedProperties.push(prop);\n        }\n      });\n    });\n\n    return allModifiedProperties;\n  };\n\n  _self.getAllAutoAssignableProperties = function () {\n    var allAutoAssignableProperties = [];\n\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        if (prop.isAutoAssignable) {\n          allAutoAssignableProperties.push(prop);\n        }\n      });\n    });\n\n    return allAutoAssignableProperties;\n  };\n\n  _self.resetUpdates = function () {\n    var modifiedProps = _self.getAllModifiedProperties();\n\n    _.forEach(modifiedProps, function (prop) {\n      uwPropertyService.resetUpdates(prop, false);\n    });\n  };\n\n  _self.replaceValuesWithNewValues = function (propArr) {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        let filteredProps = propArr.filter(function (propObj) {\n          if (propObj && propObj.propertyName === prop.propertyName) {\n            return propObj;\n          }\n\n          return undefined;\n        });\n        filteredProps.forEach(filteredProp => {\n          uwPropertyService.copyModelData(prop, filteredProp);\n          prop.dbValue = filteredProp.dbValue;\n          prop.newValue = filteredProp.newValue; // mark updated values as dirty\n\n          prop.valueUpdated = true;\n        });\n      });\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().atomicData.update(newXrtState);\n    }\n  };\n\n  _self.updateObjects = function (viewModelPropsArray) {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      _.forEach(vmo.props, function (prop) {\n        viewModelPropsArray.filter(function (vmProp) {\n          if (vmProp) {\n            vmo.props[vmProp.propertyName] = { ...vmProp\n            };\n          }\n        });\n      });\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.getAllModifiedPropertiesWithVMO = function () {\n    var allModifiedProperties = [];\n\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      var modifiedPropArray = [];\n\n      _.forEach(vmo.props, function (prop) {\n        if (uwPropertyService.isModified(prop)) {\n          modifiedPropArray.push(prop);\n        }\n      });\n\n      if (modifiedPropArray.length > 0) {\n        allModifiedProperties.push({\n          viewModelProps: modifiedPropArray,\n          viewModelObject: vmo\n        });\n      }\n    });\n\n    return allModifiedProperties;\n  };\n  /**\n   * Returns an object of this structure: { 'uid': { 'viewModelObject': ViewModelObject, 'viewModelProps': [\n   * ViewModelProperty1, ViewModelProperty2, ... ] } }\n   *\n   * @param {ObjectArray} modifiedViewModelProperties - Array of modified View Model Properties\n   * @return {Object} Map\n   */\n\n\n  _self.getModifiedPropertiesMap = function (modifiedViewModelProperties) {\n    const loadedViewModelObjs = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n    var modifiedValuesMap = {};\n\n    if (modifiedViewModelProperties && modifiedViewModelProperties.length > 0) {\n      _.forEach(modifiedViewModelProperties, function (modifiedProp) {\n        var parentUid = modifiedProp.parentUid;\n\n        if (parentUid) {\n          var vmo = getVMOFromUid(parentUid, loadedViewModelObjs);\n\n          if (!vmo) {\n            vmo = viewModelObjectService.createViewModelObject(parentUid, 'EDIT');\n          }\n\n          var vmoToPropMap = _.get(modifiedValuesMap, [parentUid]);\n\n          if (vmoToPropMap) {\n            if (vmoToPropMap.viewModelProps) {\n              vmoToPropMap.viewModelProps.push(modifiedProp);\n            }\n          } else {\n            var newVmoToPropMap = {};\n            newVmoToPropMap.viewModelObject = vmo;\n            newVmoToPropMap.viewModelProps = [modifiedProp];\n\n            _.set(modifiedValuesMap, [parentUid], newVmoToPropMap);\n          }\n        } else {\n          logger.info('Info: no parentUid found on ViewModelProperty: ' + modifiedProp.getId());\n        }\n      });\n    }\n\n    return modifiedValuesMap;\n  };\n  /**\n   * @param {String} targetUID - UID\n   * @param {ViewModelObjectArray} loadedViewModelObjs - Loaded VMOs.\n   *\n   * @return {ViewModelObject} VMO Associated with given input.\n   */\n\n\n  function getVMOFromUid(targetUID, loadedViewModelObjs) {\n    var targetVMO = null;\n\n    if (loadedViewModelObjs && loadedViewModelObjs.length > 0) {\n      _.forEach(loadedViewModelObjs, function (vmo) {\n        var uid = vmo.uid;\n\n        if (uid === targetUID) {\n          targetVMO = vmo;\n          return false;\n        }\n\n        return undefined;\n      });\n    }\n\n    return targetVMO;\n  }\n  /**\n   * Reset all 'editable' status properties from the underlying object.\n   */\n\n\n  _self.saveEditiableStates = function () {\n    var loadedVMObjects = _self.getLoadedViewModelObjects();\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      vmo.setEditableStates(false, true, true);\n    });\n\n    var modifiedPropsArr = _self.getAllModifiedProperties();\n\n    _.forEach(modifiedPropsArr, function (prop) {\n      uwPropertyService.resetProperty(prop);\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.resetEditiableStates = function () {\n    var loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects(_self.getLoadedViewModelObjects());\n\n    _.forEach(loadedVMObjects, function (vmo) {\n      vmo.clearEditiableStates(true);\n    });\n\n    if (_self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData) {\n      let newXrtState = { ..._self.getDeclViewModel().getAtomicData()\n      };\n      newXrtState.xrtVMO = loadedVMObjects[0];\n\n      _self.getDeclViewModel().setAtomicData(newXrtState);\n    }\n  };\n\n  _self.registerPropPolicy = function () {\n    var dataProvider = _self.getDataProvider();\n\n    var declViewModelObj = _self.getDeclViewModel();\n\n    var policy = null;\n\n    if (dataProvider && !_.isUndefined(dataProvider.policy)) {\n      policy = _.clone(dataProvider.policy, true);\n      updatePropPolicyForEditing(policy, 'true', dataProvider);\n      dataProvider.editPolicyId = policySvc.register(policy);\n    } else if (declViewModelObj) {\n      policy = {\n        types: []\n      };\n\n      if (!_.isUndefined(declViewModelObj.propertyPolicyRetrieved)) {\n        var policyType = {\n          properties: []\n        };\n        policyType.name = declViewModelObj.vmo.type;\n        policyType.properties = _.clone(declViewModelObj.propertyPolicyRetrieved);\n        policy.types.push(policyType);\n      }\n\n      if (declViewModelObj._policy && declViewModelObj._policy.types) {\n        _.forEach(declViewModelObj._policy.types, function (policyType) {\n          policy.types = policy.types.concat(_.clone(policyType));\n        });\n      }\n\n      var viewModelObjs = _self.getLoadedViewModelObjects();\n\n      _.forEach(viewModelObjs, function (viewModelObj) {\n        _.forEach(viewModelObj.props, function (prop) {\n          var modelObj = uwPropertyService.getSourceModelObject(prop);\n\n          if (modelObj) {\n            var typeName = modelObj.type;\n            var policyType = policy.types.filter(function (polType) {\n              if (polType && polType.name === typeName) {\n                return true;\n              }\n\n              return undefined;\n            })[0];\n\n            if (!policyType) {\n              policyType = {\n                properties: []\n              };\n              policy.types.push(policyType);\n            }\n\n            policyType.name = typeName;\n            var propName = uwPropertyService.getBasePropertyName(prop.propertyName);\n            var propRegistered = policyType.properties.filter(function (prop) {\n              return prop && prop.name === propName;\n            })[0];\n\n            if (!propRegistered) {\n              policyType.properties.push({\n                name: propName\n              });\n            }\n          }\n        });\n      });\n\n      updatePropPolicyForEditing(policy, 'true', declViewModelObj);\n      declViewModelObj.editPolicyId = policySvc.register(policy);\n    }\n  };\n\n  _self.unregisterPropPolicy = function () {\n    var dataProvider = _self.getDataProvider();\n\n    if (dataProvider && dataProvider.editPolicyId) {\n      policySvc.unregister(dataProvider.editPolicyId);\n      delete dataProvider.editPolicyId;\n    }\n\n    var declViewModelObj = _self.getDeclViewModel();\n\n    if (declViewModelObj && declViewModelObj.editPolicyId) {\n      policySvc.unregister(declViewModelObj.editPolicyId);\n      delete declViewModelObj.editPolicyId;\n    }\n  };\n  /**\n   * Can we start editing?\n   *\n   * @return {Boolean} true if we can start editing\n   */\n\n\n  _self.canStartEdit = function () {\n    var canStartEdit = false;\n    var viewModelObjectList;\n\n    var declVM = _self.getDeclViewModel();\n\n    if (declVM && declVM.vmo) {\n      viewModelObjectList = [declVM.vmo];\n    } else if (_self.getDataProvider()) {\n      viewModelObjectList = _self.getLoadedViewModelObjects(true);\n    } else if (declVM && declVM.getAtomicData) {\n      if (declVM.getAtomicData() && declVM.getAtomicData().xrtVMO) {\n        viewModelObjectList = [declVM.getAtomicData().xrtVMO];\n      }\n\n      if (declVM.getAtomicData() && declVM.getAtomicData().dpRef && declVM.getAtomicData().dpRef.current) {\n        _.forEach(declVM.getAtomicData().dpRef.current.dataProviders, function (vmCollection) {\n          if (vmCollection && viewModelObjectList) {\n            viewModelObjectList = viewModelObjectList.concat(vmCollection());\n          }\n        });\n      }\n    }\n\n    if (viewModelObjectList) {\n      for (var ndx = 0, len = viewModelObjectList.length; ndx < len; ndx++) {\n        // check 'is_modifiable' flag for modelObject\n        if (isModifiable(viewModelObjectList[ndx])) {\n          canStartEdit = true;\n          break;\n        }\n      }\n    }\n\n    return canStartEdit;\n  };\n  /**\n   * Check to see if the view model object is editable\n   *\n   * @param {ViewModelObject} viewModelObject - VMO to test.\n   *\n   * @return {Boolean} true if it's editable\n   */\n\n\n  function isModifiable(viewModelObject) {\n    return viewModelObject && viewModelObject.props && //\n    viewModelObject.props.is_modifiable && //\n    viewModelObject.props.is_modifiable.dbValues && //\n    viewModelObject.props.is_modifiable.dbValue === true;\n  }\n  /**\n   * Update the policy for editing\n   *\n   * @param {Object} policy - the policy to be updated for editing\n   * @param {String} newValue - the newValue\n   * @param {Object} dataProvider - the dataProvider\n   */\n\n\n  function updatePropPolicyForEditing(policy, newValue, dataProvider) {\n    if (dataProvider && policy.types) {\n      _.forEach(policy.types, function (policyType) {\n        if (dataProvider.cols) {\n          _.forEach(dataProvider.cols, function (col) {\n            if (col && col.typeName && col.typeName === policyType.name) {\n              var modifier = locateOrCreateModifier(policyType, 'includeIsModifiable');\n              modifier.Value = newValue;\n            }\n          });\n        } else {\n          var modifier = locateOrCreateModifier(policyType, 'includeIsModifiable');\n          modifier.Value = newValue;\n        }\n      });\n    }\n  }\n  /**\n   * Locate or create the property modifier\n   *\n   * @param {Object} policyType - the policy\n   * @param {String} name - the modifier to be created or found\n   *\n   * @returns {Object} Property modifier.\n   */\n\n\n  function locateOrCreateModifier(policyType, name) {\n    var modifier = null;\n\n    if (policyType.modifiers) {\n      for (var ii = 0; ii < policyType.modifiers.length; ii++) {\n        modifier = policyType.modifiers[ii];\n\n        if (name === modifier.name) {\n          return modifier;\n        }\n      }\n    } else {\n      policyType.modifiers = [];\n    }\n\n    modifier = {\n      name: name\n    };\n    policyType.modifiers.push(modifier);\n    return modifier;\n  }\n\n  _setdataSourceService(dataSource);\n};\n\n_c2 = DataSourceService;\n_c = DataSourceService;\nexport let createNewDataSource = function (dataSource) {\n  return new DataSourceService(dataSource);\n};\nconst exports = {\n  createNewDataSource\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataSourceService\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"DataSourceService\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/dataSourceService.js"],"names":["DataSourceService","_self","_dataProvider","_declViewModel","_setdataSourceService","dataSource","hasxrtBasedVM","srcObj","_","loadedViewModelObjects","vmCollection","dataProvider","vmo","collections","collection","properties","col","collectionData","collectionKeys","collData","dataBindValue","prop","uidtoPropNameMap","loadedViewModelObjs","viewModelObjectService","propNames","vmObjects","customPanelUids","obj","fetchPropNamesFromVMO","uid","props","loadedVMObjects","newXrtState","modifiedPropsMap","propsToReset","uwPropertyService","allEditableProperties","allModifiedProperties","allAutoAssignableProperties","modifiedProps","filteredProps","propObj","filteredProp","viewModelPropsArray","vmProp","modifiedPropArray","viewModelProps","viewModelObject","modifiedValuesMap","modifiedViewModelProperties","parentUid","modifiedProp","getVMOFromUid","vmoToPropMap","newVmoToPropMap","logger","targetVMO","modifiedPropsArr","declViewModelObj","policy","updatePropPolicyForEditing","policySvc","types","policyType","viewModelObjs","viewModelObj","modelObj","typeName","polType","propName","propRegistered","name","canStartEdit","declVM","viewModelObjectList","ndx","len","isModifiable","modifier","locateOrCreateModifier","ii","createNewDataSource","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This service creates 'UwDataProvider' objects used for lists, grids and other collections).\n *\n * @module js/dataSourceService\n */\nimport uwPropertyService from 'js/uwPropertyService';\nimport policySvc from 'soa/kernel/propertyPolicyService';\nimport viewModelObjectService from 'js/viewModelObjectService';\nimport _ from 'lodash';\nimport logger from 'js/logger';\n\nvar DataSourceService = function( dataSource ) {\n    var _self = this; // eslint-disable-line consistent-this\n\n    var _dataProvider = null;\n    var _declViewModel = null;\n\n    var _setdataSourceService = function( dataSource ) {\n        if( dataSource.declViewModel ) {\n            _declViewModel = dataSource.declViewModel;\n        } else if( dataSource.dataProvider ) {\n            _dataProvider = dataSource.dataProvider;\n        }\n    };\n\n    _self.getDataProvider = function() {\n        return _dataProvider;\n    };\n\n    _self.getDeclViewModel = function() {\n        return _declViewModel;\n    };\n\n    _self.getSourceObject = function() {\n        if( _dataProvider ) {\n            return _dataProvider;\n        }\n        return _declViewModel;\n    };\n\n    _self.getContextVMO = function() {\n        if( _declViewModel ) {\n            return _declViewModel.baseselection ? _declViewModel.baseselection : _declViewModel.vmo;\n        }\n        return null;\n    };\n\n    _self.hasxrtBasedViewModel = function() {\n        var hasxrtBasedVM = false;\n        var srcObj = _self.getSourceObject();\n        if( srcObj.xrtType === 'INFO' && !_.isEmpty( srcObj.xrtData ) &&\n            !_.isEmpty( srcObj.xrtData.xrtViewModel ) ) {\n            hasxrtBasedVM = true;\n        } else {\n            hasxrtBasedVM = srcObj.gwtPresenters && srcObj.gwtPresenters.length > 0;\n        }\n        return hasxrtBasedVM;\n    };\n\n    /**\n     * This returns all the HTML Panels ids currently present in the View.\n     *\n     * @returns {ObjectArray} - Panel IDs\n     */\n    _self.getGwtHTMLPanelIds = function() {\n        var srcObj = _self.getSourceObject();\n        if( srcObj.gwtPresenters ) {\n            return srcObj.gwtPresenters;\n        }\n        return [];\n    };\n\n    /**\n     * This returns all the HTML Panels ids currently present in the View.\n     *\n     * @returns {ObjectArray} - Panel IDs\n     */\n    _self.getGwtVMs = function() {\n        var srcObj = _self.getSourceObject();\n        if( srcObj.gwtVieModel ) {\n            return srcObj.gwtVieModel;\n        }\n        return [];\n    };\n\n    /**\n     * Get all the loaded view modle objects\n     *\n     * @return {ObjectArray} Array of loaded view model objects\n     */\n    _self.getLoadedViewModelObjects = function( allowDuplicates ) {\n        var loadedViewModelObjects = [];\n\n        if( _dataProvider && _dataProvider.viewModelCollection ) {\n            loadedViewModelObjects = _dataProvider.getEditableObjects();\n        } else if( _declViewModel ) {\n            if( _declViewModel.vmo ) {\n                if( _declViewModel.data && _declViewModel.data.objects ) {\n                    for( let key in _declViewModel.data.objects ) {\n                        if( _declViewModel.data.objects[ key ].uid === _declViewModel.vmo.uid ) {\n                            loadedViewModelObjects.push( _declViewModel.data.objects[ key ] );\n                            break;\n                        }\n                    }\n                } else {\n                    loadedViewModelObjects.push( _declViewModel.vmo );\n                }\n            } else if( _declViewModel.getAtomicData ) {\n                if( _declViewModel.getAtomicData().xrtVMO ) {\n                    loadedViewModelObjects.push( _declViewModel.getAtomicData().xrtVMO );\n                }\n\n\n                if( _declViewModel.getAtomicData().dpRef && _declViewModel.getAtomicData().dpRef.current ) {\n                    _.forEach( _declViewModel.getAtomicData().dpRef.current.dataProviders, function( vmCollection ) {\n                        if( vmCollection ) {\n                            loadedViewModelObjects = loadedViewModelObjects.concat( vmCollection() );\n                        }\n                    } );\n                }\n            }\n\n            if( _declViewModel.dataProviders ) {\n                _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                    if( dataProvider && dataProvider.viewModelCollection ) {\n                        loadedViewModelObjects = loadedViewModelObjects\n                            .concat( dataProvider.viewModelCollection.getLoadedViewModelObjects() );\n                    }\n                } );\n            }\n\n            if( _declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection ) {\n                loadedViewModelObjects = loadedViewModelObjects\n                    .concat( _declViewModel.customPanel.viewModelCollection );\n            }\n        }\n\n        // Weed out the duplicate ones\n        if( !allowDuplicates ) {\n            loadedViewModelObjects = _.uniq( loadedViewModelObjects, false, function( vmo ) {\n                return vmo.uid;\n            } );\n        }\n\n        return loadedViewModelObjects;\n    };\n\n    /**\n     * Get all the collections in the view model.\n     *\n     * @return {ObjectArray} Array of collections.\n     */\n    _self.getAllCollectionsAndPropertyNames = function() {\n        var collections = [];\n\n        if( _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                if( dataProvider && dataProvider.viewModelCollection ) {\n                    var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                    var properties = [];\n                    _.forEach( dataProvider.cols, function( col ) {\n                        properties.push( col.name );\n                    } );\n\n                    var collectionData = {\n                        collection: collection,\n                        properties: properties\n                    };\n                    collections = collections.concat( collectionData );\n                }\n            } );\n        }\n\n        if( _declViewModel && _declViewModel.vmo ) {\n            collections.push( {\n                collection: [ _declViewModel.vmo ],\n                properties: []\n            } );\n        }\n\n        return collections;\n    };\n\n    /**\n     * Get all the collection keys from the view model\n     *\n     * @returns {StringArray} - Keys.\n     */\n    _self.getCollectionKeys = function() {\n        var collectionKeys = [];\n        if( _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                collectionKeys.push( dataProvider.name );\n            } );\n        }\n        return collectionKeys;\n    };\n\n    /**\n     * Get all the collections in the view model.\n     *\n     * @param {String} dataBindValue - The data bind value.\n     *\n     * @return {ObjectArray} Array of collections.\n     */\n    _self.getCollectionAndPropertyNames = function( dataBindValue ) {\n        var collData = {};\n\n        if( _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                if( dataProvider && dataProvider.name === dataBindValue && dataProvider.viewModelCollection ) {\n                    var collection = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                    var properties = [];\n                    _.forEach( dataProvider.cols, function( col ) {\n                        properties.push( col.name );\n                    } );\n\n                    collData.collection = collection;\n                    collData.properties = properties;\n                    return;\n                }\n            } );\n        } else if( dataBindValue === '' && _declViewModel ) {\n            var properties = [];\n            _.forEach( _declViewModel.vmo.props, function( prop ) {\n                properties.push( prop.propertyName );\n            } );\n\n            collData.properties = properties;\n            collData.collection = [ _declViewModel.vmo ];\n        }\n\n        return collData;\n    };\n\n    _self.setSelectionEnabled = function( isEnabled ) {\n        if( _dataProvider && _dataProvider.selectionModel ) {\n            _dataProvider.setSelectionEnabled( isEnabled );\n        } else if( _declViewModel && _declViewModel.dataProviders ) {\n            _.forEach( _declViewModel.dataProviders, function( dataProvider ) {\n                if( dataProvider && dataProvider.selectionModel ) {\n                    dataProvider.setSelectionEnabled( isEnabled );\n                }\n            } );\n        }\n    };\n\n    _self.getPropertyMap = function() {\n        var uidtoPropNameMap = {};\n        var loadedViewModelObjs = viewModelObjectService.getVmosNotInEdit( _self.getLoadedViewModelObjects() );\n        if( _dataProvider && _dataProvider.viewModelCollection ) {\n            var propNames = _dataProvider.getPropertyNames();\n            _.forEach( loadedViewModelObjs, function( vmObjects ) {\n                uidtoPropNameMap[ vmObjects.uid ] = propNames;\n            } );\n        } else if( _declViewModel ) {\n            var customPanelUids = [];\n            // For custom panels, include underlying objects in uidtoPropNameMap\n            if( _declViewModel.customPanel && _declViewModel.customPanel.viewModelCollection ) {\n                _declViewModel.customPanel.viewModelCollection.map( function( obj ) {\n                    if( obj && obj.props ) {\n                        customPanelUids.push( obj.uid );\n                        _.forEach( obj.props, function( prop ) {\n                            if( prop.parentUid !== obj.uid ) {\n                                customPanelUids.push( prop.parentUid );\n                            }\n                        } );\n                    }\n                } );\n            }\n\n            _.forEach( loadedViewModelObjs, function( vmObjects ) {\n                fetchPropNamesFromVMO( vmObjects, uidtoPropNameMap, customPanelUids );\n            } );\n        }\n\n        return uidtoPropNameMap;\n    };\n\n    /**\n     * This function generates the uid to propertyName map\n     *\n     * @param {ViewModelObject} vmo - Object to access.\n     *\n     * @param {StringToStringMap} uidtoPropNameMap - ID Map.\n     *\n     * @param {Array} customPanelUids - array of custom panel uids (also includes parentUid of\n     *   properties if they are different)\n     */\n    function fetchPropNamesFromVMO( vmo, uidtoPropNameMap, customPanelUids ) {\n        _.forEach( vmo.props, function( props ) {\n            var uid = props.parentUid ? props.parentUid : vmo.uid;\n            var propNames = uidtoPropNameMap[ uid ] ? uidtoPropNameMap[ uid ] : [];\n            if( props && props.type ) {\n                propNames.push( props.propertyName );\n            }\n            if( uid === vmo.uid || _.includes( customPanelUids, uid ) ) {\n                uidtoPropNameMap[ uid ] = propNames;\n            }\n        } );\n    }\n\n    _self.checkEditableOnProperties = function() {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            vmo.setEditableStates( true, true, true );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.updatePartialEditState = function( failureUids, modifiedPropsMap ) {\n        const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        _.forEach( loadedVMObjects, function( vmo ) {\n            if( !_.includes( failureUids, vmo.uid ) ) {\n                vmo.setEditableStates( false, true, true );\n                if( modifiedPropsMap[ vmo.uid ] ) {\n                    var propsToReset = modifiedPropsMap[ vmo.uid ].viewModelProps;\n                    _.forEach( propsToReset, function( prop ) {\n                        uwPropertyService.resetProperty( prop );\n                    } );\n                }\n            }\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.getAllEditableProperties = function() {\n        var allEditableProperties = [];\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( prop && prop.isEditable ) {\n                    allEditableProperties.push( prop );\n                }\n            } );\n        } );\n        return allEditableProperties;\n    };\n\n    _self.getAllModifiedProperties = function() {\n        const allModifiedProperties = [];\n        const loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( uwPropertyService.isModified( prop ) ) {\n                    allModifiedProperties.push( prop );\n                }\n            } );\n        } );\n        return allModifiedProperties;\n    };\n\n    _self.getAllAutoAssignableProperties = function() {\n        var allAutoAssignableProperties = [];\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                if( prop.isAutoAssignable ) {\n                    allAutoAssignableProperties.push( prop );\n                }\n            } );\n        } );\n\n        return allAutoAssignableProperties;\n    };\n\n    _self.resetUpdates = function() {\n        var modifiedProps = _self.getAllModifiedProperties();\n        _.forEach( modifiedProps, function( prop ) {\n            uwPropertyService.resetUpdates( prop, false );\n        } );\n    };\n\n    _self.replaceValuesWithNewValues = function( propArr ) {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                let filteredProps = propArr.filter( function( propObj ) {\n                    if( propObj && propObj.propertyName === prop.propertyName ) {\n                        return propObj;\n                    }\n                    return undefined;\n                } );\n\n                filteredProps.forEach( filteredProp => {\n                    uwPropertyService.copyModelData( prop, filteredProp );\n                    prop.dbValue = filteredProp.dbValue;\n                    prop.newValue = filteredProp.newValue;\n                    // mark updated values as dirty\n                    prop.valueUpdated = true;\n                } );\n            } );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().atomicData.update( newXrtState );\n        }\n    };\n\n    _self.updateObjects = function( viewModelPropsArray ) {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            _.forEach( vmo.props, function( prop ) {\n                viewModelPropsArray.filter( function( vmProp ) {\n                    if( vmProp ) {\n                        vmo.props[ vmProp.propertyName ] = { ...vmProp };\n                    }\n                } );\n            } );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.getAllModifiedPropertiesWithVMO = function() {\n        var allModifiedProperties = [];\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            var modifiedPropArray = [];\n            _.forEach( vmo.props, function( prop ) {\n                if( uwPropertyService.isModified( prop ) ) {\n                    modifiedPropArray.push( prop );\n                }\n            } );\n            if( modifiedPropArray.length > 0 ) {\n                allModifiedProperties.push( {\n                    viewModelProps: modifiedPropArray,\n                    viewModelObject: vmo\n                } );\n            }\n        } );\n\n        return allModifiedProperties;\n    };\n\n    /**\n     * Returns an object of this structure: { 'uid': { 'viewModelObject': ViewModelObject, 'viewModelProps': [\n     * ViewModelProperty1, ViewModelProperty2, ... ] } }\n     *\n     * @param {ObjectArray} modifiedViewModelProperties - Array of modified View Model Properties\n     * @return {Object} Map\n     */\n    _self.getModifiedPropertiesMap = function( modifiedViewModelProperties ) {\n        const loadedViewModelObjs = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        var modifiedValuesMap = {};\n        if( modifiedViewModelProperties && modifiedViewModelProperties.length > 0 ) {\n            _.forEach( modifiedViewModelProperties, function( modifiedProp ) {\n                var parentUid = modifiedProp.parentUid;\n                if( parentUid ) {\n                    var vmo = getVMOFromUid( parentUid, loadedViewModelObjs );\n                    if( !vmo ) {\n                        vmo = viewModelObjectService.createViewModelObject( parentUid, 'EDIT' );\n                    }\n                    var vmoToPropMap = _.get( modifiedValuesMap, [ parentUid ] );\n                    if( vmoToPropMap ) {\n                        if( vmoToPropMap.viewModelProps ) {\n                            vmoToPropMap.viewModelProps.push( modifiedProp );\n                        }\n                    } else {\n                        var newVmoToPropMap = {};\n                        newVmoToPropMap.viewModelObject = vmo;\n                        newVmoToPropMap.viewModelProps = [ modifiedProp ];\n                        _.set( modifiedValuesMap, [ parentUid ], newVmoToPropMap );\n                    }\n                } else {\n                    logger.info( 'Info: no parentUid found on ViewModelProperty: ' + modifiedProp.getId() );\n                }\n            } );\n        }\n        return modifiedValuesMap;\n    };\n\n    /**\n     * @param {String} targetUID - UID\n     * @param {ViewModelObjectArray} loadedViewModelObjs - Loaded VMOs.\n     *\n     * @return {ViewModelObject} VMO Associated with given input.\n     */\n    function getVMOFromUid( targetUID, loadedViewModelObjs ) {\n        var targetVMO = null;\n        if( loadedViewModelObjs && loadedViewModelObjs.length > 0 ) {\n            _.forEach( loadedViewModelObjs, function( vmo ) {\n                var uid = vmo.uid;\n                if( uid === targetUID ) {\n                    targetVMO = vmo;\n                    return false;\n                }\n                return undefined;\n            } );\n        }\n        return targetVMO;\n    }\n\n    /**\n     * Reset all 'editable' status properties from the underlying object.\n     */\n    _self.saveEditiableStates = function() {\n        var loadedVMObjects = _self.getLoadedViewModelObjects();\n        _.forEach( loadedVMObjects, function( vmo ) {\n            vmo.setEditableStates( false, true, true );\n        } );\n\n        var modifiedPropsArr = _self.getAllModifiedProperties();\n\n        _.forEach( modifiedPropsArr, function( prop ) {\n            uwPropertyService.resetProperty( prop );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.resetEditiableStates = function() {\n        var loadedVMObjects = viewModelObjectService.getLoadedAndCachedViewModelObjects( _self.getLoadedViewModelObjects() );\n        _.forEach( loadedVMObjects, function( vmo ) {\n            vmo.clearEditiableStates( true );\n        } );\n\n        if( _self.getDeclViewModel() && _self.getDeclViewModel().setAtomicData ) {\n            let newXrtState = { ..._self.getDeclViewModel().getAtomicData() };\n            newXrtState.xrtVMO = loadedVMObjects[ 0 ];\n            _self.getDeclViewModel().setAtomicData( newXrtState );\n        }\n    };\n\n    _self.registerPropPolicy = function() {\n        var dataProvider = _self.getDataProvider();\n        var declViewModelObj = _self.getDeclViewModel();\n        var policy = null;\n        if( dataProvider && !_.isUndefined( dataProvider.policy ) ) {\n            policy = _.clone( dataProvider.policy, true );\n            updatePropPolicyForEditing( policy, 'true', dataProvider );\n            dataProvider.editPolicyId = policySvc.register( policy );\n        } else if( declViewModelObj ) {\n            policy = {\n                types: []\n            };\n\n            if( !_.isUndefined( declViewModelObj.propertyPolicyRetrieved ) ) {\n                var policyType = {\n                    properties: []\n                };\n                policyType.name = declViewModelObj.vmo.type;\n                policyType.properties = _.clone( declViewModelObj.propertyPolicyRetrieved );\n                policy.types.push( policyType );\n            }\n            if( declViewModelObj._policy && declViewModelObj._policy.types ) {\n                _.forEach( declViewModelObj._policy.types, function( policyType ) {\n                    policy.types = policy.types.concat( _.clone( policyType ) );\n                } );\n            }\n\n            var viewModelObjs = _self.getLoadedViewModelObjects();\n            _.forEach( viewModelObjs, function( viewModelObj ) {\n                _.forEach( viewModelObj.props, function( prop ) {\n                    var modelObj = uwPropertyService.getSourceModelObject( prop );\n                    if( modelObj ) {\n                        var typeName = modelObj.type;\n                        var policyType = policy.types.filter( function( polType ) {\n                            if( polType && polType.name === typeName ) {\n                                return true;\n                            }\n                            return undefined;\n                        } )[ 0 ];\n\n                        if( !policyType ) {\n                            policyType = {\n                                properties: []\n                            };\n                            policy.types.push( policyType );\n                        }\n\n                        policyType.name = typeName;\n                        var propName = uwPropertyService.getBasePropertyName( prop.propertyName );\n\n                        var propRegistered = policyType.properties.filter( function( prop ) {\n                            return prop && prop.name === propName;\n                        } )[ 0 ];\n\n                        if( !propRegistered ) {\n                            policyType.properties.push( {\n                                name: propName\n                            } );\n                        }\n                    }\n                } );\n            } );\n            updatePropPolicyForEditing( policy, 'true', declViewModelObj );\n            declViewModelObj.editPolicyId = policySvc.register( policy );\n        }\n    };\n\n    _self.unregisterPropPolicy = function() {\n        var dataProvider = _self.getDataProvider();\n        if( dataProvider && dataProvider.editPolicyId ) {\n            policySvc.unregister( dataProvider.editPolicyId );\n            delete dataProvider.editPolicyId;\n        }\n\n        var declViewModelObj = _self.getDeclViewModel();\n        if( declViewModelObj && declViewModelObj.editPolicyId ) {\n            policySvc.unregister( declViewModelObj.editPolicyId );\n            delete declViewModelObj.editPolicyId;\n        }\n    };\n\n    /**\n     * Can we start editing?\n     *\n     * @return {Boolean} true if we can start editing\n     */\n    _self.canStartEdit = function() {\n        var canStartEdit = false;\n        var viewModelObjectList;\n        var declVM = _self.getDeclViewModel();\n        if( declVM && declVM.vmo ) {\n            viewModelObjectList = [ declVM.vmo ];\n        } else if( _self.getDataProvider() ) {\n            viewModelObjectList = _self.getLoadedViewModelObjects( true );\n        } else if( declVM && declVM.getAtomicData ) {\n            if( declVM.getAtomicData() && declVM.getAtomicData().xrtVMO ) {\n                viewModelObjectList = [ declVM.getAtomicData().xrtVMO ];\n            }\n\n            if( declVM.getAtomicData() && declVM.getAtomicData().dpRef && declVM.getAtomicData().dpRef.current ) {\n                _.forEach( declVM.getAtomicData().dpRef.current.dataProviders, function( vmCollection ) {\n                    if( vmCollection && viewModelObjectList ) {\n                        viewModelObjectList = viewModelObjectList.concat( vmCollection() );\n                    }\n                } );\n            }\n        }\n\n        if( viewModelObjectList ) {\n            for( var ndx = 0, len = viewModelObjectList.length; ndx < len; ndx++ ) {\n                // check 'is_modifiable' flag for modelObject\n                if( isModifiable( viewModelObjectList[ ndx ] ) ) {\n                    canStartEdit = true;\n                    break;\n                }\n            }\n        }\n        return canStartEdit;\n    };\n\n    /**\n     * Check to see if the view model object is editable\n     *\n     * @param {ViewModelObject} viewModelObject - VMO to test.\n     *\n     * @return {Boolean} true if it's editable\n     */\n    function isModifiable( viewModelObject ) {\n        return viewModelObject && viewModelObject.props && //\n            viewModelObject.props.is_modifiable && //\n            viewModelObject.props.is_modifiable.dbValues && //\n            viewModelObject.props.is_modifiable.dbValue === true;\n    }\n\n    /**\n     * Update the policy for editing\n     *\n     * @param {Object} policy - the policy to be updated for editing\n     * @param {String} newValue - the newValue\n     * @param {Object} dataProvider - the dataProvider\n     */\n    function updatePropPolicyForEditing( policy, newValue, dataProvider ) {\n        if( dataProvider && policy.types ) {\n            _.forEach( policy.types, function( policyType ) {\n                if( dataProvider.cols ) {\n                    _.forEach( dataProvider.cols, function( col ) {\n                        if( col && col.typeName && col.typeName === policyType.name ) {\n                            var modifier = locateOrCreateModifier( policyType, 'includeIsModifiable' );\n                            modifier.Value = newValue;\n                        }\n                    } );\n                } else {\n                    var modifier = locateOrCreateModifier( policyType, 'includeIsModifiable' );\n                    modifier.Value = newValue;\n                }\n            } );\n        }\n    }\n\n    /**\n     * Locate or create the property modifier\n     *\n     * @param {Object} policyType - the policy\n     * @param {String} name - the modifier to be created or found\n     *\n     * @returns {Object} Property modifier.\n     */\n    function locateOrCreateModifier( policyType, name ) {\n        var modifier = null;\n\n        if( policyType.modifiers ) {\n            for( var ii = 0; ii < policyType.modifiers.length; ii++ ) {\n                modifier = policyType.modifiers[ ii ];\n                if( name === modifier.name ) {\n                    return modifier;\n                }\n            }\n        } else {\n            policyType.modifiers = [];\n        }\n\n        modifier = {\n            name: name\n        };\n\n        policyType.modifiers.push( modifier );\n\n        return modifier;\n    }\n\n    _setdataSourceService( dataSource );\n};\n\nexport let createNewDataSource = function( dataSource ) {\n    return new DataSourceService( dataSource );\n};\n\nconst exports = {\n    createNewDataSource\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
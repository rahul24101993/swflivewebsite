{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Service to set color decorators on a vmo.\n *\n * @module js/colorDecoratorService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport commandsMapSvc from 'js/commandsMapService';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\nimport _ from 'lodash';\nimport moduleLoader from 'js/moduleLoader';\nimport parsingUtil from 'js/parsingUtils';\nimport eventBus from 'js/eventBus';\nimport conditionSvc from 'js/conditionService';\n/**\n * {Object} Map of decorator name versus the decorator definition as configured in the application.\n */\n\nvar _decoratorProviders;\n/**\n * {StringMap} Map of cached dependent module names to the async loaded module objects.\n */\n\n\nvar _mapModuleNameToModuleObject = {};\n/**\n * {StringMap} Map of cached dependent module names to its proper (camelCase) associated service name.\n */\n\nvar _mapModuleNameToServiceName = {};\n/**\n * {StringMap} Map of cached decorator name i18n key to its localized values\n */\n\nvar _mapDecoratorI18nKeyToLocalizedTitle = {};\n/**\n * @param {JSONObject} decoratorJson -\n * @return {ModuleObject}\n */\n\nfunction _getModuleObject(decoratorJson) {\n  var serviceName = _mapModuleNameToServiceName[decoratorJson.deps];\n\n  if (!serviceName) {\n    serviceName = _.camelCase([decoratorJson.deps.replace('js/', '')]);\n    _mapModuleNameToServiceName[decoratorJson.deps] = serviceName;\n  }\n\n  return _mapModuleNameToModuleObject[decoratorJson.deps];\n}\n/**\n * Processes the decorators\n *\n * @param {Object} decoratatorProviders\n * @param {ViewModelObject} vmo -\n * @param {Object|null} depsMap - optional deps map\n */\n\n\nfunction _processDecorators(decoratatorProviders, vmo) {\n  var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n  _.forEach(decoratatorProviders, function (decoratorJson, decoratorName) {\n    if (!decoratorJson.subLocationName || sublocationName === decoratorJson.subLocationName) {\n      var modelTypes = decoratorJson.modelTypes;\n      var isValid = false;\n\n      if (_.isArray(modelTypes)) {\n        _.forEach(modelTypes, function (modelType) {\n          if (modelType) {\n            isValid = commandsMapSvc.isInstanceOf(modelType, vmo.modelType);\n\n            if (isValid) {\n              return false; // break\n            }\n          }\n        });\n      } else {\n        // No supplied modelType to limit to.\n        isValid = true;\n      }\n\n      if (isValid) {\n        if (decoratorJson.conditions) {\n          var declViewModel = {\n            localContext: {\n              vmo: vmo\n            }\n          };\n          var context = {\n            ctx: appCtxSvc.ctx\n          };\n          var verdict = true;\n\n          for (var condition in decoratorJson.conditions) {\n            var expression = decoratorJson.conditions[condition].expression;\n            verdict = verdict && conditionSvc.evaluateCondition(declViewModel, expression, context);\n          }\n\n          if (verdict) {\n            if (decoratorJson.title && decoratorJson.i18n) {\n              vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title)];\n            }\n\n            if (decoratorJson.cellClassName) {\n              vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n            }\n\n            if (decoratorJson.gridClassName) {\n              vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n            }\n          }\n        } else if (decoratorJson.method && decoratorJson.deps) {\n          var _depModuleObj = _getModuleObject(decoratorJson);\n\n          if (_depModuleObj[decoratorJson.method].apply(_depModuleObj, [vmo])) {\n            vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n            vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n\n            if (decoratorJson.title && decoratorJson.i18n) {\n              vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title)];\n            }\n          }\n        }\n      }\n    }\n  });\n}\n\nvar exports = {};\n/**\n * Sets cell list decorators.\n *\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - ViewModelObject(s) to set style on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\n\nexport let setDecoratorStyles = function (vmoIn, skipEvent) {\n  var unloadedDepModules = {};\n  var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n  _.forEach(_decoratorProviders, function (decoratorJson) {\n    if ((!sublocationName || sublocationName === decoratorJson.subLocationName) && !_.isEmpty(decoratorJson.deps) && !_mapModuleNameToModuleObject[decoratorJson.deps]) {\n      unloadedDepModules[decoratorJson.deps] = true;\n    }\n  }); // See if loading modules is necessary\n\n\n  if (!_.isEmpty(unloadedDepModules)) {\n    var depsArray = Object.keys(unloadedDepModules);\n    moduleLoader.loadDependentModules(depsArray).then(function (depsMap) {\n      _.forEach(depsMap, function (moduleObj, moduleName) {\n        _mapModuleNameToModuleObject['js/' + moduleName] = moduleObj;\n      });\n\n      if (_.isArray(vmoIn)) {\n        for (var ndx = 0; ndx < vmoIn.length; ndx++) {\n          _processDecorators(_decoratorProviders, vmoIn[ndx]);\n        }\n      } else {\n        _processDecorators(_decoratorProviders, vmoIn);\n      }\n\n      if (!skipEvent) {\n        eventBus.publish('decoratorsUpdated', vmoIn);\n      }\n    });\n  } else {\n    if (_.isArray(vmoIn)) {\n      for (var ndx = 0; ndx < vmoIn.length; ndx++) {\n        _processDecorators(_decoratorProviders, vmoIn[ndx]);\n      }\n    } else {\n      _processDecorators(_decoratorProviders, vmoIn);\n    }\n\n    if (!skipEvent) {\n      eventBus.publish('decoratorsUpdated', vmoIn);\n    }\n  }\n};\n/**\n * API to override generated decorators (used for testing only).\n *\n * @param {Object} decoratorsOverride\n */\n\nexport let setDecorators = function (decoratorsOverride) {\n  _decoratorProviders = decoratorsOverride;\n  _mapModuleNameToModuleObject = {};\n  _mapModuleNameToServiceName = {};\n};\nexport let loadConfiguration = async function () {\n  await cfgSvc.getCfg('decorators', false, true).then(function (decorators) {\n    _decoratorProviders = decorators; // Loop through decorators and load localized titles if any\n\n    var decoratorNames = [];\n    var promises = [];\n\n    _.forEach(_decoratorProviders, function (decoratorJson, decoratorName) {\n      if (decoratorJson.title && _.startsWith(decoratorJson.title, '{{') && decoratorJson.i18n) {\n        promises.push(awDuiLocalizationSvc.populateI18nMap(decoratorJson.i18n, false, true));\n        decoratorNames.push(decoratorName);\n      }\n    }); // update the decorator i18n title map once all localized values are available\n\n\n    Promise.all(promises).then(function (results) {\n      _.forEach(results, function (result) {\n        _.forEach(decoratorNames, function (decoratorName) {\n          var decoratorJson = _decoratorProviders[decoratorName];\n\n          if (decoratorJson.title && _.startsWith(decoratorJson.title, '{{') && decoratorJson.i18n) {\n            // decoratorJson title value will be {{i18n.xxyyzz}}\n            var i18Key = parsingUtil.getStringBetweenDoubleMustaches(decoratorJson.title);\n            var titleKey = i18Key.split('.');\n            titleKey = titleKey && titleKey.length > 1 ? titleKey[1] : titleKey[0];\n\n            if (result[titleKey]) {\n              _mapDecoratorI18nKeyToLocalizedTitle[decoratorName + '.' + i18Key] = result[titleKey];\n            }\n          }\n        });\n      });\n    });\n  });\n};\nexports = {\n  setDecoratorStyles,\n  setDecorators,\n  loadConfiguration\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/colorDecoratorService.js"],"names":["_mapModuleNameToModuleObject","_mapModuleNameToServiceName","_mapDecoratorI18nKeyToLocalizedTitle","serviceName","decoratorJson","_","sublocationName","appCtxSvc","modelTypes","isValid","commandsMapSvc","vmo","declViewModel","localContext","context","ctx","verdict","expression","conditionSvc","decoratorName","parsingUtil","_depModuleObj","_getModuleObject","exports","setDecoratorStyles","unloadedDepModules","depsArray","Object","moduleLoader","ndx","vmoIn","_processDecorators","eventBus","setDecorators","_decoratorProviders","loadConfiguration","decoratorNames","promises","awDuiLocalizationSvc","Promise","i18Key","titleKey","result"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Service to set color decorators on a vmo.\n *\n * @module js/colorDecoratorService\n */\nimport appCtxSvc from 'js/appCtxService';\nimport cfgSvc from 'js/configurationService';\nimport commandsMapSvc from 'js/commandsMapService';\nimport awDuiLocalizationSvc from 'js/awDuiLocalizationService';\nimport _ from 'lodash';\nimport moduleLoader from 'js/moduleLoader';\nimport parsingUtil from 'js/parsingUtils';\nimport eventBus from 'js/eventBus';\nimport conditionSvc from 'js/conditionService';\n\n/**\n * {Object} Map of decorator name versus the decorator definition as configured in the application.\n */\nvar _decoratorProviders;\n\n/**\n * {StringMap} Map of cached dependent module names to the async loaded module objects.\n */\nvar _mapModuleNameToModuleObject = {};\n\n/**\n * {StringMap} Map of cached dependent module names to its proper (camelCase) associated service name.\n */\nvar _mapModuleNameToServiceName = {};\n/**\n * {StringMap} Map of cached decorator name i18n key to its localized values\n */\nvar _mapDecoratorI18nKeyToLocalizedTitle = {};\n\n/**\n * @param {JSONObject} decoratorJson -\n * @return {ModuleObject}\n */\nfunction _getModuleObject( decoratorJson ) {\n    var serviceName = _mapModuleNameToServiceName[ decoratorJson.deps ];\n\n    if( !serviceName ) {\n        serviceName = _.camelCase( [ decoratorJson.deps.replace( 'js/', '' ) ] );\n\n        _mapModuleNameToServiceName[ decoratorJson.deps ] = serviceName;\n    }\n\n    return _mapModuleNameToModuleObject[ decoratorJson.deps ];\n}\n\n/**\n * Processes the decorators\n *\n * @param {Object} decoratatorProviders\n * @param {ViewModelObject} vmo -\n * @param {Object|null} depsMap - optional deps map\n */\nfunction _processDecorators( decoratatorProviders, vmo ) {\n    var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n    _.forEach( decoratatorProviders, function( decoratorJson, decoratorName ) {\n        if( !decoratorJson.subLocationName || sublocationName === decoratorJson.subLocationName ) {\n            var modelTypes = decoratorJson.modelTypes;\n            var isValid = false;\n\n            if( _.isArray( modelTypes ) ) {\n                _.forEach( modelTypes, function( modelType ) {\n                    if( modelType ) {\n                        isValid = commandsMapSvc.isInstanceOf( modelType, vmo.modelType );\n                        if( isValid ) {\n                            return false; // break\n                        }\n                    }\n                } );\n            } else {\n                // No supplied modelType to limit to.\n                isValid = true;\n            }\n\n            if( isValid ) {\n                if( decoratorJson.conditions ) {\n                    var declViewModel = {\n                        localContext: {\n                            vmo: vmo\n                        }\n                    };\n\n                    var context = {\n                        ctx: appCtxSvc.ctx\n                    };\n                    var verdict = true;\n                    for( var condition in decoratorJson.conditions ) {\n                        var expression = decoratorJson.conditions[ condition ].expression;\n                        verdict = verdict && conditionSvc.evaluateCondition( declViewModel, expression, context );\n                    }\n\n                    if( verdict ) {\n                        if( decoratorJson.title && decoratorJson.i18n ) {\n                            vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[ decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches( decoratorJson.title ) ];\n                        }\n                        if( decoratorJson.cellClassName ) {\n                            vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n                        }\n                        if( decoratorJson.gridClassName ) {\n                            vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n                        }\n                    }\n                } else if( decoratorJson.method && decoratorJson.deps ) {\n                    var _depModuleObj = _getModuleObject( decoratorJson );\n                    if( _depModuleObj[ decoratorJson.method ].apply( _depModuleObj, [ vmo ] ) ) {\n                        vmo.cellDecoratorStyle = decoratorJson.cellClassName;\n                        vmo.gridDecoratorStyle = decoratorJson.gridClassName;\n                        if( decoratorJson.title && decoratorJson.i18n ) {\n                            vmo.colorTitle = _mapDecoratorI18nKeyToLocalizedTitle[ decoratorName + '.' + parsingUtil.getStringBetweenDoubleMustaches( decoratorJson.title ) ];\n                        }\n                    }\n                }\n            }\n        }\n    } );\n}\n\nvar exports = {};\n\n/**\n * Sets cell list decorators.\n *\n * @param {ViewModelObject|ViewModelObjectArray} vmoIn - ViewModelObject(s) to set style on.\n * @param {Boolean} skipEvent - if true will skip event.\n */\nexport let setDecoratorStyles = function( vmoIn, skipEvent ) {\n    var unloadedDepModules = {};\n\n    var sublocationName = appCtxSvc.ctx.sublocation ? appCtxSvc.ctx.sublocation.nameToken : null;\n\n    _.forEach( _decoratorProviders, function( decoratorJson ) {\n        if( ( !sublocationName || sublocationName === decoratorJson.subLocationName ) &&\n            !_.isEmpty( decoratorJson.deps ) && !_mapModuleNameToModuleObject[ decoratorJson.deps ] ) {\n            unloadedDepModules[ decoratorJson.deps ] = true;\n        }\n    } );\n\n    // See if loading modules is necessary\n    if( !_.isEmpty( unloadedDepModules ) ) {\n        var depsArray = Object.keys( unloadedDepModules );\n\n        moduleLoader.loadDependentModules( depsArray ).then( function( depsMap ) {\n            _.forEach( depsMap, function( moduleObj, moduleName ) {\n                _mapModuleNameToModuleObject[ 'js/' + moduleName ] = moduleObj;\n            } );\n\n            if( _.isArray( vmoIn ) ) {\n                for( var ndx = 0; ndx < vmoIn.length; ndx++ ) {\n                    _processDecorators( _decoratorProviders, vmoIn[ ndx ] );\n                }\n            } else {\n                _processDecorators( _decoratorProviders, vmoIn );\n            }\n\n            if( !skipEvent ) {\n                eventBus.publish( 'decoratorsUpdated', vmoIn );\n            }\n        } );\n    } else {\n        if( _.isArray( vmoIn ) ) {\n            for( var ndx = 0; ndx < vmoIn.length; ndx++ ) {\n                _processDecorators( _decoratorProviders, vmoIn[ ndx ] );\n            }\n        } else {\n            _processDecorators( _decoratorProviders, vmoIn );\n        }\n\n        if( !skipEvent ) {\n            eventBus.publish( 'decoratorsUpdated', vmoIn );\n        }\n    }\n};\n\n/**\n * API to override generated decorators (used for testing only).\n *\n * @param {Object} decoratorsOverride\n */\nexport let setDecorators = function( decoratorsOverride ) {\n    _decoratorProviders = decoratorsOverride;\n    _mapModuleNameToModuleObject = {};\n    _mapModuleNameToServiceName = {};\n};\n\nexport let loadConfiguration = async function() {\n    await cfgSvc.getCfg( 'decorators', false, true ).then( function( decorators ) {\n        _decoratorProviders = decorators;\n        // Loop through decorators and load localized titles if any\n        var decoratorNames = [];\n        var promises = [];\n        _.forEach( _decoratorProviders, function( decoratorJson, decoratorName ) {\n            if( decoratorJson.title && _.startsWith( decoratorJson.title, '{{' ) && decoratorJson.i18n ) {\n                promises.push( awDuiLocalizationSvc.populateI18nMap( decoratorJson.i18n, false, true ) );\n                decoratorNames.push( decoratorName );\n            }\n        } );\n\n        // update the decorator i18n title map once all localized values are available\n        Promise.all( promises ).then( function( results ) {\n            _.forEach( results, function( result ) {\n                _.forEach( decoratorNames, function( decoratorName ) {\n                    var decoratorJson = _decoratorProviders[ decoratorName ];\n                    if( decoratorJson.title && _.startsWith( decoratorJson.title, '{{' ) && decoratorJson.i18n ) {\n                        // decoratorJson title value will be {{i18n.xxyyzz}}\n                        var i18Key = parsingUtil.getStringBetweenDoubleMustaches( decoratorJson.title );\n                        var titleKey = i18Key.split( '.' );\n                        titleKey = titleKey && titleKey.length > 1 ? titleKey[ 1 ] : titleKey[ 0 ];\n                        if( result[ titleKey ] ) {\n                            _mapDecoratorI18nKeyToLocalizedTitle[ decoratorName + '.' + i18Key ] = result[ titleKey ];\n                        }\n                    }\n                } );\n            } );\n        } );\n    } );\n};\n\nexports = {\n    setDecoratorStyles,\n    setDecorators,\n    loadConfiguration\n};\nexport default exports;\n\nloadConfiguration();\n"]},"metadata":{},"sourceType":"module"}
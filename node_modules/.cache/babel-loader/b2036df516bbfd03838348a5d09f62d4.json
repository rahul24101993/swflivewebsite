{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\declreact\\\\src\\\\js\\\\reactAppCtx.js\",\n    _s = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * @module js/reactAppCtx\n */\nimport React, { useMemo } from 'react';\nimport lodashFpSet from 'lodash/fp/set';\nimport { get, set, orderBy, isArray, uniq } from 'lodash';\nimport { init } from 'js/appCtxService';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport { createStore } from 'redux';\nimport { useSelector, Provider as ReduxProvider, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const _dispatchCtx = function () {\n  let ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    path,\n    value\n  } = action;\n\n  if (path) {\n    return lodashFpSet(path, value, ctx);\n  }\n\n  return ctx;\n}; // create store - will be decided by 1st param of the dispatchFn\n\nconst store = createStore(_dispatchCtx, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n/**\n * Hook to pull a value from from the global ctx store\n *\n * @param {String|Array} path The path to the property\n * @returns {Any} The current value in ctx\n */\n\nexport const useCtx = path => {\n  _s();\n\n  return useSelector(ctx => {\n    return {\n      path,\n      value: get(ctx, path)\n    };\n  }, (l, r) => l.value === r.value);\n};\n\n_s(useCtx, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nconst getDerivedState = (ctxCompute, _ref) => {\n  let {\n    vmDef,\n    prop,\n    data\n  } = _ref;\n  const derivedStateResult = ctxCompute(vmDef, prop, data);\n  const derivedStates = isArray(derivedStateResult) ? derivedStateResult : [derivedStateResult];\n\n  for (const s of derivedStates) {\n    if (!(s instanceof DerivedStateResult)) {\n      throw new Error('Results from the derived state calculation must be a DerivedStateResult. See https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/-/wikis/Derived-State');\n    }\n  }\n\n  return derivedStateResult;\n}; // These methods will call hooks in the same order even though they use loops and callbacks\n\n/* eslint-disable react-hooks/rules-of-hooks */\n\n/**\n * Custom hook to get the ctxCompute result and use it to run other hooks\n *\n * @param {Object} derivedStateResult Function that returns DerivedStateResult\n * @param {Object} ctxMin Context available to ctxCompute\n * @returns {Any} The computed result\n */\n\n\nconst useDerivedStateCompute = (derivedStateResult, ctxMin) => {\n  var _s2 = $RefreshSig$();\n\n  //Return the latest result of the memoized compute function\n  const processDerivedState = _ref2 => {\n    _s2();\n\n    let {\n      additionalParameters,\n      ctxParameters,\n      compute\n    } = _ref2;\n    return useMemo(() => compute({\n      ctx: ctxMin // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    }, ...additionalParameters), [...additionalParameters, ...ctxParameters.map(x => get(ctxMin, x))]);\n  };\n\n  _s2(processDerivedState, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n  return isArray(derivedStateResult) ? derivedStateResult.map(processDerivedState) : processDerivedState(derivedStateResult);\n};\n\nconst setupCtxFromDerivedStates = function (derivedStates) {\n  let entries = Object.entries(derivedStates);\n  let derivedStatesCollection = entries.reduce((acc, _ref3) => {\n    let [ctxName, derivedStates] = _ref3;\n    let value = isArray(derivedStates) ? derivedStates : [derivedStates];\n    acc.push(...value);\n    return acc;\n  }, []);\n  let allctx = orderBy(uniq(derivedStatesCollection.reduce((acc2, nxt) => {\n    return [...acc2, ...nxt.ctxParameters];\n  }, [])), ['length'], ['desc']); //allctx = uniq( allctx );\n\n  return allctx.map(useCtx).reduce((ctx, nxt) => {\n    //for some objects (such as array) set can have side effects, so avoid if values match\n    if (nxt.value) {\n      if (get(ctx, nxt.path) !== nxt.value) {\n        set(ctx, nxt.path, nxt.value);\n      }\n    } else {\n      set(ctx, nxt.path, nxt.value);\n    }\n\n    return ctx;\n  }, {});\n};\n/**\n * Custom hook that will process the \"ctx\" configuration into the final object\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Component properties\n * @param {Object} data View model data\n * @param {Object} ctxImports Imported function map\n * @returns {Object} Processed ctx, global ctx, and dispatch\n */\n\n\nexport const useDerivedState = (vmDef, prop, data, ctxImports) => {\n  var _s3 = $RefreshSig$(),\n      _s4 = $RefreshSig$();\n\n  const ctxDefs = vmDef.declViewModelJson.ctx || {};\n  let directCtx = {};\n  let derivedStates = {};\n\n  _s3(Object.entries(ctxDefs).forEach(_s3(_ref4 => {\n    _s3();\n\n    let [ctxName, ctxCompute] = _ref4;\n    ctxCompute = ctxCompute ? ctxImports[ctxName] : null;\n\n    if (ctxCompute) {\n      set(derivedStates, ctxName, getDerivedState(ctxCompute, {\n        vmDef,\n        prop,\n        data\n      }));\n    } else {\n      set(directCtx, ctxName, useCtx(ctxName).value);\n    }\n  }, \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  }), {}), \"hFonVS/c2oLwTvuG83uAXWmBELM=\", false, function () {\n    return [useCtx];\n  });\n\n  const computeFnDeps = setupCtxFromDerivedStates(derivedStates); //let entries = Object.entries( derivedStates );\n\n  const ctxMinDS = _s4(Object.entries(derivedStates).reduce(_s4((acc, _ref5) => {\n    _s4();\n\n    let [ctxName, derivedStates] = _ref5;\n    const latestResult = useDerivedStateCompute(derivedStates, computeFnDeps);\n\n    if (latestResult) {\n      if (get(acc, ctxName) !== latestResult) {\n        set(acc, ctxName, latestResult);\n      }\n    } else {\n      set(acc, ctxName, latestResult);\n    }\n\n    return acc;\n  }, \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  }), {}), \"cECUAuJpePoorEI/1Wlg8OGkV+s=\", false, function () {\n    return [useDerivedStateCompute];\n  });\n\n  const ctxMin = Object.assign({}, directCtx, ctxMinDS);\n  return {\n    //Everything in ctx. Need to be replaced by ctxMin\n    ctx: store.getState(),\n    //The derived ctx which only contains things this specific component needs\n    ctxMin,\n    //Dispatch to update ctx\n    ctxDispatch: useDispatch\n  };\n};\n/* eslint-enable react-hooks/rules-of-hooks */\n\n/**\n * Application Context Component\n * @param {object} props properties\n * @returns {function} react component\n */\n\nexport const AppCtxComponent = _ref6 => {\n  _s5();\n\n  let {\n    children\n  } = _ref6;\n  // NOTE: useMemo might not be safe here, if we see any side effect we\n  // will change it later\n  useMemo(() => init({\n    fetch: path => path ? get(store.getState(), path) : store.getState(),\n    dispatch: _ref7 => {\n      let {\n        path,\n        value\n      } = _ref7;\n      return store.dispatch({\n        type: path,\n        path,\n        value\n      });\n    }\n  }), []);\n  return /*#__PURE__*/_jsxDEV(ReduxProvider, {\n    store: store,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n\n_s5(AppCtxComponent, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n_c = AppCtxComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppCtxComponent\");","map":{"version":3,"names":["React","useMemo","lodashFpSet","get","set","orderBy","isArray","uniq","init","DerivedStateResult","createStore","useSelector","Provider","ReduxProvider","useDispatch","_dispatchCtx","ctx","action","path","value","store","window","__REDUX_DEVTOOLS_EXTENSION__","useCtx","l","r","getDerivedState","ctxCompute","vmDef","prop","data","derivedStateResult","derivedStates","s","Error","useDerivedStateCompute","ctxMin","processDerivedState","additionalParameters","ctxParameters","compute","map","x","setupCtxFromDerivedStates","entries","Object","derivedStatesCollection","reduce","acc","ctxName","push","allctx","acc2","nxt","useDerivedState","ctxImports","ctxDefs","declViewModelJson","directCtx","forEach","computeFnDeps","ctxMinDS","latestResult","assign","getState","ctxDispatch","AppCtxComponent","children","fetch","dispatch","type"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/reactAppCtx.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * @module js/reactAppCtx\n */\nimport React, { useMemo } from 'react';\nimport lodashFpSet from 'lodash/fp/set';\nimport { get, set, orderBy, isArray, uniq } from 'lodash';\nimport { init } from 'js/appCtxService';\nimport { DerivedStateResult } from 'js/derivedContextService';\n\nimport { createStore } from 'redux';\nimport { useSelector, Provider as ReduxProvider, useDispatch } from 'react-redux';\n\nexport const _dispatchCtx = ( ctx = {}, action ) => {\n    const { path, value } = action;\n\n    if( path ) {\n        return lodashFpSet( path, value, ctx );\n    }\n    return ctx;\n};\n\n// create store - will be decided by 1st param of the dispatchFn\nconst store = createStore( _dispatchCtx, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() );\n\n/**\n * Hook to pull a value from from the global ctx store\n *\n * @param {String|Array} path The path to the property\n * @returns {Any} The current value in ctx\n */\nexport const useCtx = path => useSelector( ctx => {\n    return {\n        path,\n        value: get( ctx, path )\n    };\n}, ( l, r ) => l.value === r.value );\n\nconst getDerivedState = ( ctxCompute, { vmDef, prop, data } ) => {\n    const derivedStateResult = ctxCompute( vmDef, prop, data );\n    const derivedStates = isArray( derivedStateResult ) ? derivedStateResult : [ derivedStateResult ];\n    for( const s of derivedStates ) {\n        if( !( s instanceof DerivedStateResult ) ) {\n            throw new Error( 'Results from the derived state calculation must be a DerivedStateResult. See https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/-/wikis/Derived-State' );\n        }\n    }\n    return derivedStateResult;\n};\n\n// These methods will call hooks in the same order even though they use loops and callbacks\n/* eslint-disable react-hooks/rules-of-hooks */\n/**\n * Custom hook to get the ctxCompute result and use it to run other hooks\n *\n * @param {Object} derivedStateResult Function that returns DerivedStateResult\n * @param {Object} ctxMin Context available to ctxCompute\n * @returns {Any} The computed result\n */\nconst useDerivedStateCompute = ( derivedStateResult, ctxMin ) => {\n    //Return the latest result of the memoized compute function\n    const processDerivedState = ( { additionalParameters, ctxParameters, compute } ) => {\n        return useMemo( () => compute( {\n            ctx: ctxMin\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, ...additionalParameters ), [ ...additionalParameters, ...ctxParameters.map( x => get( ctxMin, x ) ) ] );\n    };\n    return isArray( derivedStateResult ) ? derivedStateResult.map( processDerivedState ) : processDerivedState( derivedStateResult );\n};\n\nconst setupCtxFromDerivedStates = function( derivedStates ) {\n    let entries = Object.entries( derivedStates );\n    let derivedStatesCollection = entries.reduce( ( acc, [ ctxName, derivedStates ] ) => {\n        let value = isArray( derivedStates ) ? derivedStates : [ derivedStates ];\n        acc.push( ...value );\n        return acc;\n    }, [] );\n\n    let allctx = orderBy( uniq( derivedStatesCollection.reduce( ( acc2, nxt ) => {\n        return [ ...acc2, ...nxt.ctxParameters ];\n    }, [] ) ), [ 'length' ], [ 'desc' ] );\n\n    //allctx = uniq( allctx );\n\n    return allctx.map( useCtx ).reduce( ( ctx, nxt ) => {\n        //for some objects (such as array) set can have side effects, so avoid if values match\n        if( nxt.value ) {\n            if( get( ctx, nxt.path ) !== nxt.value ) {\n                set( ctx, nxt.path, nxt.value );\n            }\n        } else {\n            set( ctx, nxt.path, nxt.value );\n        }\n        return ctx;\n    }, {} );\n};\n\n/**\n * Custom hook that will process the \"ctx\" configuration into the final object\n *\n * @param {Object} vmDef View model definition\n * @param {Object} prop Component properties\n * @param {Object} data View model data\n * @param {Object} ctxImports Imported function map\n * @returns {Object} Processed ctx, global ctx, and dispatch\n */\nexport const useDerivedState = ( vmDef, prop, data, ctxImports ) => {\n    const ctxDefs = vmDef.declViewModelJson.ctx || {};\n    let directCtx = {};\n    let derivedStates = {};\n    Object.entries( ctxDefs )\n        .forEach( ( [ ctxName, ctxCompute ] ) => {\n            ctxCompute = ctxCompute ? ctxImports[ ctxName ] : null;\n            if( ctxCompute ) {\n                set( derivedStates, ctxName, getDerivedState( ctxCompute, { vmDef, prop, data } ) );\n            } else {\n                set( directCtx, ctxName, useCtx( ctxName ).value );\n            }\n        }, {} );\n\n    const computeFnDeps = setupCtxFromDerivedStates( derivedStates );\n    //let entries = Object.entries( derivedStates );\n\n    const ctxMinDS = Object.entries( derivedStates )\n        .reduce( ( acc, [ ctxName, derivedStates ] ) => {\n            const latestResult = useDerivedStateCompute( derivedStates, computeFnDeps );\n            if( latestResult ) {\n                if( get( acc, ctxName ) !== latestResult ) {\n                    set( acc, ctxName, latestResult );\n                }\n            } else {\n                set( acc, ctxName, latestResult );\n            }\n            return acc;\n        }, {} );\n    const ctxMin = Object.assign( {}, directCtx, ctxMinDS );\n\n    return {\n        //Everything in ctx. Need to be replaced by ctxMin\n        ctx: store.getState(),\n        //The derived ctx which only contains things this specific component needs\n        ctxMin,\n        //Dispatch to update ctx\n        ctxDispatch: useDispatch\n    };\n};\n/* eslint-enable react-hooks/rules-of-hooks */\n\n/**\n * Application Context Component\n * @param {object} props properties\n * @returns {function} react component\n */\nexport const AppCtxComponent = ( { children } ) => {\n    // NOTE: useMemo might not be safe here, if we see any side effect we\n    // will change it later\n    useMemo( () => init( {\n        fetch: path => path ? get( store.getState(), path ) : store.getState(),\n        dispatch: ( { path, value } ) => store.dispatch( { type: path, path, value } )\n    } ), [] );\n\n    return (\n        <ReduxProvider store={store}>\n            {children}\n        </ReduxProvider>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
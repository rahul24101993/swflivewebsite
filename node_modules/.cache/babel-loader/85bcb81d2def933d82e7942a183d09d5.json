{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Selection model factory\n *\n * @module js/selectionModelFactory\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger'; // Factory definition\n\nvar exports = {};\n/**\n * The UwSelectionModel type definition. A selection model contains a list of UIDs that are selected and has other\n * internal state information such as multi select state, selection mode, and selection status\n *\n * @param {String} mode - The initial selection mode. Defaults to 'single' if not provided.\n * @param {Function} tracker - The function used to track selection\n *\n * @class UwSelectionModel\n */\n\nvar UwSelectionModel = function (mode, tracker) {\n  var self = this;\n  /**\n   * The selection mode. Single or multiple. Defaults to single.\n   *\n   * @member mode\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   * @private\n   */\n\n  mode = mode ? mode : 'single';\n  /**\n   * Read only copy of internal selection mode. Modifications to this will not be reflected in the selection\n   * model.\n   *\n   * @member mode\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   */\n\n  self.mode = mode;\n  /**\n   * Whether selection model is currently in multi select mode. False initially.\n   *\n   * @member multiSelectEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   * @private\n   */\n\n  var multiSelectEnabled = false;\n  /**\n   * Read only copy of internal multi select state. Modifications to this will not be reflected in the selection\n   * model.\n   *\n   * @member multiSelectEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   */\n\n  self.multiSelectEnabled = multiSelectEnabled;\n  /**\n   * Whether selection is currently enabled. When false any selection updates will be ignored. True initially.\n   *\n   * @member selectionEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   * @private\n   */\n\n  var selectionEnabled = mode !== 'none';\n  /**\n   * The current selection state. none / some / all\n   *\n   * @member selectionState\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   * @private\n   */\n\n  var selectionState = 'none';\n  /**\n   * The UIDs that are currently selected.\n   *\n   * @member selected\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   * @private\n   */\n\n  var selected = [];\n  /**\n   * The selection states last time selection state was updated.\n   *\n   * @member lastSelectionState\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   * @private\n   */\n\n  var lastSelectionState = {};\n  /**\n   * Utility to fire events that update select all / deselect all command visibility\n   */\n\n  var notifySelectionState = function () {\n    var canSelectLoaded = self.getCanExecuteSelectLoaded();\n    var canDeselect = self.getCanExecuteDeselect();\n\n    if (lastSelectionState.CanExecuteSelectLoaded !== canSelectLoaded || lastSelectionState.CanExecuteDeselect !== canDeselect) {\n      lastSelectionState.CanExecuteSelectLoaded = canSelectLoaded;\n      lastSelectionState.CanExecuteDeselect = canDeselect;\n      eventBus.publish('CanExecuteSelectLoaded', {});\n      eventBus.publish('CanExecuteDeselect', {});\n    }\n  };\n  /**\n   * Utility to exit multi select mode when selection is cleared\n   */\n\n\n  var checkResetMultiSelect = function () {\n    // Disable multi select when all selection is cleared\n    if (selected.length === 0 && !multiSelectEnabled) {\n      self.setMultiSelectionEnabled(false);\n      selectionState = 'none';\n    }\n  };\n  /**\n   * Change selection mode\n   *\n   * @function setMode\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {Boolean} newMode - The new mode\n   */\n\n\n  self.setMode = function (newMode) {\n    // Toggle internal mode\n    mode = newMode; // Update external (read only) mode\n\n    self.mode = mode;\n  };\n  /**\n   * Check if multi select mode is active\n   *\n   * @function isMultiSelectionEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @return {Boolean} Whether multi select mode is active\n   */\n\n\n  self.isMultiSelectionEnabled = function () {\n    return multiSelectEnabled;\n  };\n  /**\n   * Enable / disable multi select mode\n   *\n   * @function setMultiSelectionEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {Boolean} newMultiSelectState - The new multi select state\n   */\n\n\n  self.setMultiSelectionEnabled = function (newMultiSelectState) {\n    if (mode !== 'none' && multiSelectEnabled !== newMultiSelectState) {\n      if (newMultiSelectState && mode !== 'multiple') {\n        logger.warn('Cannot enter multi select mode when selection model is single select');\n      } else {\n        // Toggle internal multi select state\n        multiSelectEnabled = newMultiSelectState; // Update the external (read only) state\n\n        self.multiSelectEnabled = multiSelectEnabled; // Update select / deselect command visibility\n\n        notifySelectionState();\n      }\n    }\n  };\n  /**\n   * Check if selection is enabled\n   *\n   * @function isSelectionEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @return {Boolean} Whether selection is enabled\n   */\n\n\n  self.isSelectionEnabled = function () {\n    return selectionEnabled;\n  };\n  /**\n   * Enable / disable selection\n   *\n   * @function setSelectionEnabled\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {Boolean} isSelectionEnabled - Enable / disable selection state\n   */\n\n\n  self.setSelectionEnabled = function (isSelectionEnabled) {\n    if (mode !== 'none') {\n      selectionEnabled = isSelectionEnabled;\n    }\n  };\n  /**\n   * Determine if select all loaded should be visible\n   *\n   * @function getCanExecuteSelectLoaded\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @return {Boolean} Whether select all loaded should be visible\n   */\n\n\n  self.getCanExecuteSelectLoaded = function () {\n    // Visible when in multi select mode and not all objects are selected\n    return mode === 'multiple' && selectionState !== 'all';\n  };\n  /**\n   * Determine if clear selection should be visible\n   *\n   * @function getCanExecuteDeselect\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @return {Boolean} Whether deselect all should be visible\n   */\n\n\n  self.getCanExecuteDeselect = function () {\n    // Visible when in multi select mode and everything is selected\n    return mode === 'multiple' && selectionState === 'all';\n  };\n  /**\n   * Determine the selection state (as it relates to data provider - none selected, some selected, all selected\n   *\n   * @function evaluateSelectionStatusSummary\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {UwDataProvider} dataProvider - The data provider to evaluate the selection state against.\n   */\n\n\n  self.evaluateSelectionStatusSummary = function (dataProvider) {\n    if (dataProvider) {\n      if (dataProvider.viewModelCollection) {\n        // Check of there's any objects in the data provider that aren't selected\n        var loadedVmos = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n        var objectsNotSelected = loadedVmos.filter(function (x) {\n          return !self.isSelected(x);\n        }); // If everything is selected state is 'all'\n\n        if (loadedVmos.length && objectsNotSelected.length === 0) {\n          selectionState = 'all';\n        } else {\n          // Otherwise it's some / none depending on what is selected\n          selectionState = selected.length > 0 ? 'some' : 'none';\n        }\n      } // Update select / deselect command visibility\n\n\n      notifySelectionState();\n    } else {\n      logger.error('No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary');\n    }\n  };\n  /**\n   * Get the current selection (as UIDs)\n   *\n   * @function getSelection\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @return {String[]} List of uids that are selected\n   */\n\n\n  self.getSelection = function () {\n    return selected;\n  };\n  /**\n   * Set the current selection\n   *\n   * @function setSelection\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String|String[]|Object|Object[]} newSelection - What to set as selection\n   */\n\n\n  self.setSelection = function (newSelection) {\n    // If selection is not disabled\n    if (selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = exports.asTrackedList(newSelection, tracker); // Replace selection\n\n      let oldSelection = selected;\n      selected = uidList; // Auto exit multi select\n\n      checkResetMultiSelect();\n\n      if (self.syncSelections) {\n        self.syncSelections(oldSelection, uidList);\n      }\n    }\n  };\n  /**\n   * Add something to the current selection\n   *\n   * @function addToSelection\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String|String[]|Object|Object[]} newSelection - What to add to selection. Can be single or multiple\n   *            view model objects or uids\n   */\n\n\n  self.addToSelection = function (newSelection) {\n    // If selection is not disabled\n    if (selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = exports.asTrackedList(newSelection, tracker); // Add to selection if not already in there\n\n      let oldSelection = selected;\n      selected = selected.concat(uidList.filter(function (uid) {\n        return selected.indexOf(uid) === -1;\n      }));\n\n      if (self.syncSelections) {\n        self.syncSelections(oldSelection, uidList);\n      }\n    }\n  };\n  /**\n   * Remove something from the current selection\n   *\n   * @function removeFromSelection\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String|String[]|Object|Object[]} newSelection - What to remove from selection. Can be single or\n   *            multiple view model objects or uids\n   */\n\n\n  self.removeFromSelection = function (newSelection) {\n    // If selection is not disabled\n    if (selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = exports.asTrackedList(newSelection, tracker); // Remove any uid that is in the list of uids from the selection\n\n      let oldSelection = selected;\n      selected = selected.filter(function (uid) {\n        return uidList.indexOf(uid) === -1;\n      });\n      checkResetMultiSelect();\n\n      if (self.syncSelections) {\n        self.syncSelections(oldSelection, uidList);\n      }\n    }\n  };\n  /**\n   * Toggle the selection of something\n   *\n   * @function toggleSelection\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String|String[]|Object|Object[]} newSelection - What to toggle the selection for. Can be single or\n   *            multiple view model objects or uids\n   */\n\n\n  self.toggleSelection = function (newSelection) {\n    // If selection is not disabled\n    if (selectionEnabled) {\n      // Convert input to list of uids\n      var uidList = exports.asTrackedList(newSelection, tracker); // Get the list of uids that are selected / not selected\n\n      var uidsNotSelected = uidList.filter(function (uid) {\n        return selected.indexOf(uid) === -1;\n      });\n      var uidsSelected = uidList.filter(function (uid) {\n        return selected.indexOf(uid) !== -1;\n      }); // Remove any objects were selected\n\n      let oldSelection = selected;\n      selected = selected.filter(function (uid) {\n        return uidsSelected.indexOf(uid) === -1;\n      }) // And add the objects that were not selected\n      .concat(uidsNotSelected);\n      checkResetMultiSelect();\n\n      if (self.syncSelections) {\n        self.syncSelections(oldSelection, uidList);\n      }\n    }\n  };\n  /**\n   * Get the number of items that are selected.\n   *\n   * @function getCurrentSelectedCount\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @return {Number} Number of selected objects\n   */\n\n\n  self.getCurrentSelectedCount = function () {\n    return selected.length;\n  };\n  /**\n   * Clear selection. Alias for setSelection([]). Does not fire the data provider event that tables expect.\n   *\n   * @function selectNone\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   */\n\n\n  self.selectNone = function () {\n    self.setSelection([]);\n  };\n  /**\n   * Check if the given object is selected\n   *\n   * @function isSelected\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String|Object} obj - Obj to check selection state for\n   *\n   * @return {Boolean} Whether the object is selected\n   */\n\n\n  self.isSelected = function (obj) {\n    return self.getSelectedIndex(obj) !== -1;\n  };\n  /**\n   * Get the index of an object in selected array, if selected\n   *\n   * @function getSelectedIndex\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String|Object} obj - Obj to check selection state for\n   *\n   * @return {Number} The index of an object in the selected array, if exists\n   */\n\n\n  self.getSelectedIndex = function (obj) {\n    var tracked = tracker ? tracker(obj) : obj;\n    return selected.indexOf(tracked);\n  };\n  /**\n   * Get any objects in the list that are selected and sort them by their order in the selection model.\n   *\n   * @function getSortedSelection\n   * @memberof module:js/selectionModelFactory~UwSelectionModel\n   *\n   * @param {String[]|Object[]} objList - List of objects to process to get selection\n   *\n   * @return {String[]|Object[]} Filtered and sorted list of objects\n   */\n\n\n  self.getSortedSelection = function (objList) {\n    // Get the selected objects\n    return objList.filter(function (x) {\n      return self.isSelected(x);\n    }) // And sort by the order in selection model\n    .sort(function (a, b) {\n      var tracked = tracker ? tracker(a) : a;\n      var tracked2 = tracker ? tracker(b) : b;\n      return selected.indexOf(tracked) - selected.indexOf(tracked2);\n    });\n  }; // Old api functions that have moved or are no longer supported Including here in case some usage was missed /\n  // added while CP was being promoted Will log an error/warning explaining how to fix\n  // Still supported but split to make goal clearer\n\n\n  self.addOrRemoveSelectedObjects = function (x, add) {\n    if (add) {\n      logger.warn('Please use selectionModel.addToSelection() instead of selectionModel.addOrRemoveSelectedObjects()');\n      self.addToSelection(x);\n    } else {\n      logger.warn('Please use selectionModel.removeFromSelection() instead of selectionModel.addOrRemoveSelectedObjects()');\n      self.removeFromSelection(x);\n    }\n  }; // Still supported but renamed to make result clearer\n\n\n  self.updateSelectedObjects = function (x) {\n    logger.warn('Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()');\n    self.setSelection(x);\n  }; // Not supported, moved to data provider\n\n\n  self.selectAll = function () {\n    logger.error('Selection model no longer supports selectAll as it does not contain model object list. Use dataProvider.selectAll() instead');\n  };\n\n  self.changeObjectsSelection = function () {\n    logger.error('Selection model no longer supports changeObjectsSelection as it does not contain model object list. Use dataProvider.changeObjectsSelection() instead');\n  };\n\n  self.getSelectedObjects = function () {\n    logger.error('Selection model no longer supports getSelectedObjects as it does not contain model object list. Use dataProvider.getSelectedObjects() instead');\n  }; // Not supported (intentionally)\n\n\n  self.updatePreSelectedObjects = function () {\n    logger.error('Selection model no longer supports pre selection');\n  };\n\n  self.getPreSelectedObjects = function () {\n    logger.error('Selection model no longer supports pre selection');\n  };\n};\n/**\n * Create a new selection model to manage selection within a data provider.\n *\n * @param {String} selectionMode - The selection mode to use initially. Defaults to 'single' if not provided.\n * @param {Function} tracker - The function used to track selection.\n *\n * @return {UwSelectionModel} The newly created DeclDataProvider object.\n *\n * @memberof module:js/selectionModelFactory\n */\n\n\n_c2 = UwSelectionModel;\n_c = UwSelectionModel;\nexport let buildSelectionModel = function (selectionMode, tracker) {\n  return new UwSelectionModel(selectionMode, tracker);\n};\n/**\n * Utility to ensure input is a list of tracked objects.\n *\n * @param {String|String[]|Object|Object[]} newSelection - The input to convert to a list of tracked objects\n * @param {Object} tracker - (Optional) The 'tracker' for the collection.\n *\n * @return {String|String[]|Object|Object[]} Resulting selection.\n */\n\nexport let asTrackedList = function (newSelection, tracker) {\n  // Ensure it is array of some sort\n  if (!_.isArray(newSelection)) {\n    newSelection = [newSelection];\n  } // Ensure everything in array is tracked\n\n\n  return tracker ? newSelection.map(tracker) : newSelection;\n};\n/**\n * Synchronously execute the 'setSelection' API on the given {UwSelectionModel} object.\n *\n * @param {UwSelectionModel} selectionModel - The {UwSelectionModel} object to set the selection on.\n * @param {String|String[]|Object|Object[]} newSelection - What to set as selection\n */\n\nexport let setSelection = function (selectionModel, newSelection) {\n  selectionModel.setSelection(newSelection);\n};\nexports = {\n  buildSelectionModel,\n  asTrackedList,\n  setSelection\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"UwSelectionModel\");\n\nvar _c2;\n\n$RefreshReg$(_c2, \"UwSelectionModel\");","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uiwidget/src/js/selectionModelFactory.js"],"names":["exports","UwSelectionModel","self","mode","multiSelectEnabled","selectionEnabled","selectionState","selected","lastSelectionState","notifySelectionState","canSelectLoaded","canDeselect","eventBus","checkResetMultiSelect","newMultiSelectState","logger","dataProvider","loadedVmos","objectsNotSelected","uidList","oldSelection","uidsNotSelected","uidsSelected","tracked","tracker","tracked2","buildSelectionModel","asTrackedList","_","newSelection","setSelection","selectionModel"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * Selection model factory\n *\n * @module js/selectionModelFactory\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport logger from 'js/logger';\n\n// Factory definition\nvar exports = {};\n\n/**\n * The UwSelectionModel type definition. A selection model contains a list of UIDs that are selected and has other\n * internal state information such as multi select state, selection mode, and selection status\n *\n * @param {String} mode - The initial selection mode. Defaults to 'single' if not provided.\n * @param {Function} tracker - The function used to track selection\n *\n * @class UwSelectionModel\n */\nvar UwSelectionModel = function( mode, tracker ) {\n    var self = this;\n\n    /**\n     * The selection mode. Single or multiple. Defaults to single.\n     *\n     * @member mode\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */\n    mode = mode ? mode : 'single';\n\n    /**\n     * Read only copy of internal selection mode. Modifications to this will not be reflected in the selection\n     * model.\n     *\n     * @member mode\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     */\n    self.mode = mode;\n\n    /**\n     * Whether selection model is currently in multi select mode. False initially.\n     *\n     * @member multiSelectEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */\n    var multiSelectEnabled = false;\n\n    /**\n     * Read only copy of internal multi select state. Modifications to this will not be reflected in the selection\n     * model.\n     *\n     * @member multiSelectEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     */\n    self.multiSelectEnabled = multiSelectEnabled;\n\n    /**\n     * Whether selection is currently enabled. When false any selection updates will be ignored. True initially.\n     *\n     * @member selectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */\n    var selectionEnabled = mode !== 'none';\n\n    /**\n     * The current selection state. none / some / all\n     *\n     * @member selectionState\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */\n    var selectionState = 'none';\n\n    /**\n     * The UIDs that are currently selected.\n     *\n     * @member selected\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */\n    var selected = [];\n\n    /**\n     * The selection states last time selection state was updated.\n     *\n     * @member lastSelectionState\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     * @private\n     */\n    var lastSelectionState = {};\n\n    /**\n     * Utility to fire events that update select all / deselect all command visibility\n     */\n    var notifySelectionState = function() {\n        var canSelectLoaded = self.getCanExecuteSelectLoaded();\n        var canDeselect = self.getCanExecuteDeselect();\n\n        if( lastSelectionState.CanExecuteSelectLoaded !== canSelectLoaded ||\n            lastSelectionState.CanExecuteDeselect !== canDeselect ) {\n            lastSelectionState.CanExecuteSelectLoaded = canSelectLoaded;\n            lastSelectionState.CanExecuteDeselect = canDeselect;\n\n            eventBus.publish( 'CanExecuteSelectLoaded', {} );\n            eventBus.publish( 'CanExecuteDeselect', {} );\n        }\n    };\n\n    /**\n     * Utility to exit multi select mode when selection is cleared\n     */\n    var checkResetMultiSelect = function() {\n        // Disable multi select when all selection is cleared\n        if( selected.length === 0 && !multiSelectEnabled ) {\n            self.setMultiSelectionEnabled( false );\n            selectionState = 'none';\n        }\n    };\n\n    /**\n     * Change selection mode\n     *\n     * @function setMode\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {Boolean} newMode - The new mode\n     */\n    self.setMode = function( newMode ) {\n        // Toggle internal mode\n        mode = newMode;\n        // Update external (read only) mode\n        self.mode = mode;\n    };\n\n    /**\n     * Check if multi select mode is active\n     *\n     * @function isMultiSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether multi select mode is active\n     */\n    self.isMultiSelectionEnabled = function() {\n        return multiSelectEnabled;\n    };\n\n    /**\n     * Enable / disable multi select mode\n     *\n     * @function setMultiSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {Boolean} newMultiSelectState - The new multi select state\n     */\n    self.setMultiSelectionEnabled = function( newMultiSelectState ) {\n        if( mode !== 'none' && multiSelectEnabled !== newMultiSelectState ) {\n            if( newMultiSelectState && mode !== 'multiple' ) {\n                logger.warn( 'Cannot enter multi select mode when selection model is single select' );\n            } else {\n                // Toggle internal multi select state\n                multiSelectEnabled = newMultiSelectState;\n\n                // Update the external (read only) state\n                self.multiSelectEnabled = multiSelectEnabled;\n\n                // Update select / deselect command visibility\n                notifySelectionState();\n            }\n        }\n    };\n\n    /**\n     * Check if selection is enabled\n     *\n     * @function isSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether selection is enabled\n     */\n    self.isSelectionEnabled = function() {\n        return selectionEnabled;\n    };\n\n    /**\n     * Enable / disable selection\n     *\n     * @function setSelectionEnabled\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {Boolean} isSelectionEnabled - Enable / disable selection state\n     */\n    self.setSelectionEnabled = function( isSelectionEnabled ) {\n        if( mode !== 'none' ) {\n            selectionEnabled = isSelectionEnabled;\n        }\n    };\n\n    /**\n     * Determine if select all loaded should be visible\n     *\n     * @function getCanExecuteSelectLoaded\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether select all loaded should be visible\n     */\n    self.getCanExecuteSelectLoaded = function() {\n        // Visible when in multi select mode and not all objects are selected\n        return mode === 'multiple' && selectionState !== 'all';\n    };\n\n    /**\n     * Determine if clear selection should be visible\n     *\n     * @function getCanExecuteDeselect\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Boolean} Whether deselect all should be visible\n     */\n    self.getCanExecuteDeselect = function() {\n        // Visible when in multi select mode and everything is selected\n        return mode === 'multiple' && selectionState === 'all';\n    };\n\n    /**\n     * Determine the selection state (as it relates to data provider - none selected, some selected, all selected\n     *\n     * @function evaluateSelectionStatusSummary\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {UwDataProvider} dataProvider - The data provider to evaluate the selection state against.\n     */\n    self.evaluateSelectionStatusSummary = function( dataProvider ) {\n        if( dataProvider ) {\n            if( dataProvider.viewModelCollection ) {\n                // Check of there's any objects in the data provider that aren't selected\n                var loadedVmos = dataProvider.viewModelCollection.getLoadedViewModelObjects();\n                var objectsNotSelected = loadedVmos.filter( function( x ) {\n                    return !self.isSelected( x );\n                } );\n                // If everything is selected state is 'all'\n                if( loadedVmos.length && objectsNotSelected.length === 0 ) {\n                    selectionState = 'all';\n                } else {\n                    // Otherwise it's some / none depending on what is selected\n                    selectionState = selected.length > 0 ? 'some' : 'none';\n                }\n            }\n            // Update select / deselect command visibility\n            notifySelectionState();\n        } else {\n            logger.error( 'No data provider given to evaluate selection status against. Data provider must now be passed to selectionModel.evaluateSelectionStatusSummary' );\n        }\n    };\n\n    /**\n     * Get the current selection (as UIDs)\n     *\n     * @function getSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {String[]} List of uids that are selected\n     */\n    self.getSelection = function() {\n        return selected;\n    };\n\n    /**\n     * Set the current selection\n     *\n     * @function setSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to set as selection\n     */\n    self.setSelection = function( newSelection ) {\n        // If selection is not disabled\n        if( selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = exports.asTrackedList( newSelection, tracker );\n\n            // Replace selection\n            let oldSelection = selected;\n            selected = uidList;\n\n            // Auto exit multi select\n            checkResetMultiSelect();\n            if( self.syncSelections ) {\n                self.syncSelections( oldSelection, uidList );\n            }\n        }\n    };\n\n    /**\n     * Add something to the current selection\n     *\n     * @function addToSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to add to selection. Can be single or multiple\n     *            view model objects or uids\n     */\n    self.addToSelection = function( newSelection ) {\n        // If selection is not disabled\n        if( selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = exports.asTrackedList( newSelection, tracker );\n\n            // Add to selection if not already in there\n            let oldSelection = selected;\n            selected = selected.concat( uidList.filter( function( uid ) {\n                return selected.indexOf( uid ) === -1;\n            } ) );\n            if( self.syncSelections ) {\n                self.syncSelections( oldSelection, uidList );\n            }\n        }\n    };\n    /**\n     * Remove something from the current selection\n     *\n     * @function removeFromSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to remove from selection. Can be single or\n     *            multiple view model objects or uids\n     */\n    self.removeFromSelection = function( newSelection ) {\n        // If selection is not disabled\n        if( selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = exports.asTrackedList( newSelection, tracker );\n\n            // Remove any uid that is in the list of uids from the selection\n            let oldSelection = selected;\n            selected = selected.filter( function( uid ) {\n                return uidList.indexOf( uid ) === -1;\n            } );\n\n            checkResetMultiSelect();\n            if( self.syncSelections ) {\n                self.syncSelections( oldSelection, uidList );\n            }\n        }\n    };\n\n    /**\n     * Toggle the selection of something\n     *\n     * @function toggleSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|String[]|Object|Object[]} newSelection - What to toggle the selection for. Can be single or\n     *            multiple view model objects or uids\n     */\n    self.toggleSelection = function( newSelection ) {\n        // If selection is not disabled\n        if( selectionEnabled ) {\n            // Convert input to list of uids\n            var uidList = exports.asTrackedList( newSelection, tracker );\n\n            // Get the list of uids that are selected / not selected\n            var uidsNotSelected = uidList.filter( function( uid ) {\n                return selected.indexOf( uid ) === -1;\n            } );\n            var uidsSelected = uidList.filter( function( uid ) {\n                return selected.indexOf( uid ) !== -1;\n            } );\n            // Remove any objects were selected\n            let oldSelection = selected;\n            selected = selected.filter( function( uid ) {\n                    return uidsSelected.indexOf( uid ) === -1;\n                } )\n                // And add the objects that were not selected\n                .concat( uidsNotSelected );\n            checkResetMultiSelect();\n            if( self.syncSelections ) {\n                self.syncSelections( oldSelection, uidList );\n            }\n        }\n    };\n\n    /**\n     * Get the number of items that are selected.\n     *\n     * @function getCurrentSelectedCount\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @return {Number} Number of selected objects\n     */\n    self.getCurrentSelectedCount = function() {\n        return selected.length;\n    };\n\n    /**\n     * Clear selection. Alias for setSelection([]). Does not fire the data provider event that tables expect.\n     *\n     * @function selectNone\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     */\n    self.selectNone = function() {\n        self.setSelection( [] );\n    };\n\n    /**\n     * Check if the given object is selected\n     *\n     * @function isSelected\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|Object} obj - Obj to check selection state for\n     *\n     * @return {Boolean} Whether the object is selected\n     */\n    self.isSelected = function( obj ) {\n        return self.getSelectedIndex( obj ) !== -1;\n    };\n\n    /**\n     * Get the index of an object in selected array, if selected\n     *\n     * @function getSelectedIndex\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String|Object} obj - Obj to check selection state for\n     *\n     * @return {Number} The index of an object in the selected array, if exists\n     */\n    self.getSelectedIndex = function( obj ) {\n        var tracked = tracker ? tracker( obj ) : obj;\n        return selected.indexOf( tracked );\n    };\n\n    /**\n     * Get any objects in the list that are selected and sort them by their order in the selection model.\n     *\n     * @function getSortedSelection\n     * @memberof module:js/selectionModelFactory~UwSelectionModel\n     *\n     * @param {String[]|Object[]} objList - List of objects to process to get selection\n     *\n     * @return {String[]|Object[]} Filtered and sorted list of objects\n     */\n    self.getSortedSelection = function( objList ) {\n        // Get the selected objects\n        return objList.filter( function( x ) {\n                return self.isSelected( x );\n            } )\n            // And sort by the order in selection model\n            .sort( function( a, b ) {\n                var tracked = tracker ? tracker( a ) : a;\n                var tracked2 = tracker ? tracker( b ) : b;\n                return selected.indexOf( tracked ) - selected.indexOf( tracked2 );\n            } );\n    };\n\n    // Old api functions that have moved or are no longer supported Including here in case some usage was missed /\n    // added while CP was being promoted Will log an error/warning explaining how to fix\n\n    // Still supported but split to make goal clearer\n    self.addOrRemoveSelectedObjects = function( x, add ) {\n        if( add ) {\n            logger.warn( 'Please use selectionModel.addToSelection() instead of selectionModel.addOrRemoveSelectedObjects()' );\n            self.addToSelection( x );\n        } else {\n            logger.warn( 'Please use selectionModel.removeFromSelection() instead of selectionModel.addOrRemoveSelectedObjects()' );\n            self.removeFromSelection( x );\n        }\n    };\n\n    // Still supported but renamed to make result clearer\n    self.updateSelectedObjects = function( x ) {\n        logger.warn( 'Please use selectionModel.setSelection() instead of selectionModel.updateSelectedObjects()' );\n        self.setSelection( x );\n    };\n\n    // Not supported, moved to data provider\n    self.selectAll = function() {\n        logger.error( 'Selection model no longer supports selectAll as it does not contain model object list. Use dataProvider.selectAll() instead' );\n    };\n    self.changeObjectsSelection = function() {\n        logger.error( 'Selection model no longer supports changeObjectsSelection as it does not contain model object list. Use dataProvider.changeObjectsSelection() instead' );\n    };\n    self.getSelectedObjects = function() {\n        logger.error( 'Selection model no longer supports getSelectedObjects as it does not contain model object list. Use dataProvider.getSelectedObjects() instead' );\n    };\n\n    // Not supported (intentionally)\n    self.updatePreSelectedObjects = function() {\n        logger.error( 'Selection model no longer supports pre selection' );\n    };\n    self.getPreSelectedObjects = function() {\n        logger.error( 'Selection model no longer supports pre selection' );\n    };\n};\n\n/**\n * Create a new selection model to manage selection within a data provider.\n *\n * @param {String} selectionMode - The selection mode to use initially. Defaults to 'single' if not provided.\n * @param {Function} tracker - The function used to track selection.\n *\n * @return {UwSelectionModel} The newly created DeclDataProvider object.\n *\n * @memberof module:js/selectionModelFactory\n */\nexport let buildSelectionModel = function( selectionMode, tracker ) {\n    return new UwSelectionModel( selectionMode, tracker );\n};\n\n/**\n * Utility to ensure input is a list of tracked objects.\n *\n * @param {String|String[]|Object|Object[]} newSelection - The input to convert to a list of tracked objects\n * @param {Object} tracker - (Optional) The 'tracker' for the collection.\n *\n * @return {String|String[]|Object|Object[]} Resulting selection.\n */\nexport let asTrackedList = function( newSelection, tracker ) {\n    // Ensure it is array of some sort\n    if( !_.isArray( newSelection ) ) {\n        newSelection = [ newSelection ];\n    }\n    // Ensure everything in array is tracked\n    return tracker ? newSelection.map( tracker ) : newSelection;\n};\n\n/**\n * Synchronously execute the 'setSelection' API on the given {UwSelectionModel} object.\n *\n * @param {UwSelectionModel} selectionModel - The {UwSelectionModel} object to set the selection on.\n * @param {String|String[]|Object|Object[]} newSelection - What to set as selection\n */\nexport let setSelection = function( selectionModel, newSelection ) {\n    selectionModel.setSelection( newSelection );\n};\n\nexports = {\n    buildSelectionModel,\n    asTrackedList,\n    setSelection\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
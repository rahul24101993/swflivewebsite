{"ast":null,"code":"// Copyright (c) 2020 Siemens\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * This file contains the utility methods of aw-layout-slot.\n * @module js/layoutSlotService\n */\nimport conditionSvc from 'js/conditionService';\nimport commandConfigUtilsvc from 'js/commandConfigUtils.service';\nimport { parseCondition } from 'js/conditionParser.service';\nimport { concat, flatten, uniq, get, set, isString, isObject, forEach } from 'lodash';\nvar exports = {};\nconst regexContext = /context[.\\w]*/;\n/**\n * Find active slots  for the given application..\n *\n * @param {Object} allSlots - all slots for active application\n * @param {Object} conditionsObj - Scope to execute the command with context\n * @param {Object} context - Scope to execute the command with context\n *\n * @return {Object} most appropriate active slot.\n */\n\nvar findActiveSlotFromContext = function (allSlots, conditionsObj, context) {\n  var mostAppropriateActionHandler = null;\n  var mostAppropriateConditionLength = -1;\n  forEach(allSlots, function (slotConfig) {\n    var conditionExpression = slotConfig.activeWhen.expression;\n    var isValidCondition = conditionSvc.evaluateCondition(context, conditionExpression);\n    var expressionLength = conditionExpression.length;\n\n    if (isObject(conditionExpression)) {\n      expressionLength = JSON.stringify(conditionExpression).length;\n    }\n\n    if (isValidCondition && expressionLength > mostAppropriateConditionLength) {\n      mostAppropriateConditionLength = expressionLength;\n      mostAppropriateActionHandler = slotConfig;\n    }\n  });\n  return mostAppropriateActionHandler;\n};\n/**\n * Find active slot  for the given slot contributions..\n *\n * @param {Object} allSlotConfigs - all slots for application\n * @param {Object} conditions - condition object\n *\n * @return {Object} most appropriate active slot.\n */\n\n\nexport let findActiveSlot = function (allSlotConfigs, conditions, context) {\n  return findActiveSlotFromContext(allSlotConfigs, conditions, context);\n};\n\nconst DeclarativeCondition = function (condition, allSlotsJson) {\n  this.id = condition.split('.').slice(-1)[0];\n  this.expression = commandConfigUtilsvc.getConditionExpression(allSlotsJson, condition);\n};\n\n_c = DeclarativeCondition;\nexport const getLayoutState = (slots, allSlotsJson, context) => {\n  const localContextMin = {};\n\n  const evaluateLocalContextMin = path => {\n    set(localContextMin, path, get(context, path));\n  };\n\n  return (slots || []).reduce((acc, slot) => {\n    if (slot.activeWhen && slot.activeWhen.condition) {\n      slot.activeWhen = new DeclarativeCondition(slot.activeWhen.condition, allSlotsJson);\n    } else if (slot.activeWhen.expression && isString(slot.activeWhen.expression)) {\n      const conditionSplits = slot.activeWhen.expression.split(' ');\n      conditionSplits.forEach(split => {\n        if (regexContext.test(split)) {\n          var fetchContextFromConditions = regexContext.exec(split)[0].replace(/context\\./, '');\n          evaluateLocalContextMin(fetchContextFromConditions);\n        }\n      });\n    }\n\n    const conditionDeps = [parseCondition(slot.activeWhen)];\n    return {\n      ctxParameters: uniq(concat(acc.ctxParameters, flatten(conditionDeps.map(x => x.ctxParameters)))),\n      additionalParameters: [localContextMin]\n    };\n  }, {\n    ctxParameters: [],\n    additionalParameters: []\n  });\n};\nexports = {\n  findActiveSlot,\n  getLayoutState\n};\nexport default exports;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeclarativeCondition\");","map":{"version":3,"names":["conditionSvc","commandConfigUtilsvc","parseCondition","concat","flatten","uniq","get","set","isString","isObject","forEach","exports","regexContext","findActiveSlotFromContext","allSlots","conditionsObj","context","mostAppropriateActionHandler","mostAppropriateConditionLength","slotConfig","conditionExpression","activeWhen","expression","isValidCondition","evaluateCondition","expressionLength","length","JSON","stringify","findActiveSlot","allSlotConfigs","conditions","DeclarativeCondition","condition","allSlotsJson","id","split","slice","getConditionExpression","getLayoutState","slots","localContextMin","evaluateLocalContextMin","path","reduce","acc","slot","conditionSplits","test","fetchContextFromConditions","exec","replace","conditionDeps","ctxParameters","map","x","additionalParameters"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/layoutSlotService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n// eslint-disable-next-line valid-jsdoc\n\n/**\n * This file contains the utility methods of aw-layout-slot.\n * @module js/layoutSlotService\n */\nimport conditionSvc from 'js/conditionService';\nimport commandConfigUtilsvc from 'js/commandConfigUtils.service';\nimport { parseCondition } from 'js/conditionParser.service';\nimport { concat, flatten, uniq, get, set, isString, isObject, forEach } from 'lodash';\n\nvar exports = {};\n\nconst regexContext = /context[.\\w]*/;\n\n/**\n * Find active slots  for the given application..\n *\n * @param {Object} allSlots - all slots for active application\n * @param {Object} conditionsObj - Scope to execute the command with context\n * @param {Object} context - Scope to execute the command with context\n *\n * @return {Object} most appropriate active slot.\n */\nvar findActiveSlotFromContext = function( allSlots, conditionsObj, context ) {\n    var mostAppropriateActionHandler = null;\n    var mostAppropriateConditionLength = -1;\n    forEach( allSlots, function( slotConfig ) {\n        var conditionExpression = slotConfig.activeWhen.expression;\n        var isValidCondition = conditionSvc.evaluateCondition( context, conditionExpression );\n        var expressionLength = conditionExpression.length;\n        if( isObject( conditionExpression ) ) {\n            expressionLength = JSON.stringify( conditionExpression ).length;\n        }\n        if( isValidCondition &&\n            expressionLength > mostAppropriateConditionLength ) {\n            mostAppropriateConditionLength = expressionLength;\n            mostAppropriateActionHandler = slotConfig;\n        }\n    } );\n    return mostAppropriateActionHandler;\n};\n\n/**\n * Find active slot  for the given slot contributions..\n *\n * @param {Object} allSlotConfigs - all slots for application\n * @param {Object} conditions - condition object\n *\n * @return {Object} most appropriate active slot.\n */\n\nexport let findActiveSlot = function( allSlotConfigs, conditions, context ) {\n    return findActiveSlotFromContext( allSlotConfigs, conditions, context );\n};\n\nconst DeclarativeCondition = function( condition, allSlotsJson ) {\n    this.id = condition.split( '.' ).slice( -1 )[ 0 ];\n    this.expression = commandConfigUtilsvc.getConditionExpression( allSlotsJson, condition );\n};\n\nexport const getLayoutState = ( slots, allSlotsJson, context ) => {\n    const localContextMin = {};\n    const evaluateLocalContextMin = ( path ) => {\n        set( localContextMin, path, get( context, path ) );\n    };\n    return ( slots || [] ).reduce( ( acc, slot ) => {\n        if( slot.activeWhen && slot.activeWhen.condition ) {\n            slot.activeWhen = new DeclarativeCondition( slot.activeWhen.condition, allSlotsJson );\n        } else if( slot.activeWhen.expression && isString( slot.activeWhen.expression ) ) {\n            const conditionSplits = slot.activeWhen.expression.split( ' ' );\n            conditionSplits.forEach( split => {\n                if( regexContext.test( split ) ) {\n                    var fetchContextFromConditions = regexContext.exec( split )[ 0 ].replace( /context\\./, '' );\n                    evaluateLocalContextMin( fetchContextFromConditions );\n                }\n            } );\n        }\n        const conditionDeps = [\n            parseCondition( slot.activeWhen )\n        ];\n        return {\n            ctxParameters: uniq( concat( acc.ctxParameters, flatten( conditionDeps.map( x => x.ctxParameters ) ) ) ),\n            additionalParameters: [ localContextMin ]\n        };\n    }, {\n        ctxParameters: [],\n        additionalParameters: []\n    } );\n};\n\nexports = {\n    findActiveSlot,\n    getLayoutState\n};\nexport default exports;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,GAArC,EAA0CC,QAA1C,EAAoDC,QAApD,EAA8DC,OAA9D,QAA6E,QAA7E;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA,MAAMC,YAAY,GAAG,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,yBAAyB,GAAG,UAAUC,QAAV,EAAoBC,aAApB,EAAmCC,OAAnC,EAA6C;EACzE,IAAIC,4BAA4B,GAAG,IAAnC;EACA,IAAIC,8BAA8B,GAAG,CAAC,CAAtC;EACAR,OAAO,CAAEI,QAAF,EAAY,UAAUK,UAAV,EAAuB;IACtC,IAAIC,mBAAmB,GAAGD,UAAU,CAACE,UAAX,CAAsBC,UAAhD;IACA,IAAIC,gBAAgB,GAAGvB,YAAY,CAACwB,iBAAb,CAAgCR,OAAhC,EAAyCI,mBAAzC,CAAvB;IACA,IAAIK,gBAAgB,GAAGL,mBAAmB,CAACM,MAA3C;;IACA,IAAIjB,QAAQ,CAAEW,mBAAF,CAAZ,EAAsC;MAClCK,gBAAgB,GAAGE,IAAI,CAACC,SAAL,CAAgBR,mBAAhB,EAAsCM,MAAzD;IACH;;IACD,IAAIH,gBAAgB,IAChBE,gBAAgB,GAAGP,8BADvB,EACwD;MACpDA,8BAA8B,GAAGO,gBAAjC;MACAR,4BAA4B,GAAGE,UAA/B;IACH;EACJ,CAZM,CAAP;EAaA,OAAOF,4BAAP;AACH,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,IAAIY,cAAc,GAAG,UAAUC,cAAV,EAA0BC,UAA1B,EAAsCf,OAAtC,EAAgD;EACxE,OAAOH,yBAAyB,CAAEiB,cAAF,EAAkBC,UAAlB,EAA8Bf,OAA9B,CAAhC;AACH,CAFM;;AAIP,MAAMgB,oBAAoB,GAAG,UAAUC,SAAV,EAAqBC,YAArB,EAAoC;EAC7D,KAAKC,EAAL,GAAUF,SAAS,CAACG,KAAV,CAAiB,GAAjB,EAAuBC,KAAvB,CAA8B,CAAC,CAA/B,EAAoC,CAApC,CAAV;EACA,KAAKf,UAAL,GAAkBrB,oBAAoB,CAACqC,sBAArB,CAA6CJ,YAA7C,EAA2DD,SAA3D,CAAlB;AACH,CAHD;;KAAMD,oB;AAKN,OAAO,MAAMO,cAAc,GAAG,CAAEC,KAAF,EAASN,YAAT,EAAuBlB,OAAvB,KAAoC;EAC9D,MAAMyB,eAAe,GAAG,EAAxB;;EACA,MAAMC,uBAAuB,GAAKC,IAAF,IAAY;IACxCpC,GAAG,CAAEkC,eAAF,EAAmBE,IAAnB,EAAyBrC,GAAG,CAAEU,OAAF,EAAW2B,IAAX,CAA5B,CAAH;EACH,CAFD;;EAGA,OAAO,CAAEH,KAAK,IAAI,EAAX,EAAgBI,MAAhB,CAAwB,CAAEC,GAAF,EAAOC,IAAP,KAAiB;IAC5C,IAAIA,IAAI,CAACzB,UAAL,IAAmByB,IAAI,CAACzB,UAAL,CAAgBY,SAAvC,EAAmD;MAC/Ca,IAAI,CAACzB,UAAL,GAAkB,IAAIW,oBAAJ,CAA0Bc,IAAI,CAACzB,UAAL,CAAgBY,SAA1C,EAAqDC,YAArD,CAAlB;IACH,CAFD,MAEO,IAAIY,IAAI,CAACzB,UAAL,CAAgBC,UAAhB,IAA8Bd,QAAQ,CAAEsC,IAAI,CAACzB,UAAL,CAAgBC,UAAlB,CAA1C,EAA2E;MAC9E,MAAMyB,eAAe,GAAGD,IAAI,CAACzB,UAAL,CAAgBC,UAAhB,CAA2Bc,KAA3B,CAAkC,GAAlC,CAAxB;MACAW,eAAe,CAACrC,OAAhB,CAAyB0B,KAAK,IAAI;QAC9B,IAAIxB,YAAY,CAACoC,IAAb,CAAmBZ,KAAnB,CAAJ,EAAiC;UAC7B,IAAIa,0BAA0B,GAAGrC,YAAY,CAACsC,IAAb,CAAmBd,KAAnB,EAA4B,CAA5B,EAAgCe,OAAhC,CAAyC,WAAzC,EAAsD,EAAtD,CAAjC;UACAT,uBAAuB,CAAEO,0BAAF,CAAvB;QACH;MACJ,CALD;IAMH;;IACD,MAAMG,aAAa,GAAG,CAClBlD,cAAc,CAAE4C,IAAI,CAACzB,UAAP,CADI,CAAtB;IAGA,OAAO;MACHgC,aAAa,EAAEhD,IAAI,CAAEF,MAAM,CAAE0C,GAAG,CAACQ,aAAN,EAAqBjD,OAAO,CAAEgD,aAAa,CAACE,GAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACF,aAA1B,CAAF,CAA5B,CAAR,CADhB;MAEHG,oBAAoB,EAAE,CAAEf,eAAF;IAFnB,CAAP;EAIH,CAnBM,EAmBJ;IACCY,aAAa,EAAE,EADhB;IAECG,oBAAoB,EAAE;EAFvB,CAnBI,CAAP;AAuBH,CA5BM;AA8BP7C,OAAO,GAAG;EACNkB,cADM;EAENU;AAFM,CAAV;AAIA,eAAe5B,OAAf"},"metadata":{},"sourceType":"module"}
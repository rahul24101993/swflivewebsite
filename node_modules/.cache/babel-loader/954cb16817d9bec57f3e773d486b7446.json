{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * Reports performance metrics to Tcanalytics\n *\n * @module js/splmStatsAnalyticsReporter\n * @publishedApolloService\n */import _ from'lodash';import{ANALYTICS_EVENT_NAME}from'js/splmStatsConstants';import splmAnalyticsService from'js/splmAnalyticsService';import splmStatsUtils from'js/splmStatsUtils';import appCtxService from'js/appCtxService';import cfgSvc from'js/configurationService';import eventBus from'js/eventBus';import{getReportAnalytics,setReportAnalytics,setLocationInformation}from'js/splmStatsUtils';/**\n * Instances of this class represent reporter for sending performance metrics to Tcanalytics\n *\n * @class SPLMStatsAnalyticsReporter\n */function SPLMStatsAnalyticsReporter(){let self=this;let _analyticsContext=null;/**\n     * Gets the key from the application context service and formats it as the context configuration ( enableCtxInfo object ) dictates\n     *\n     * @param {String} key - One of the objects in enableCtxInfo.appCtxKeys array\n     * @param {Object} ctx - Current application context queried from appCtxService\n     *\n     * @return {String} The result string after filtering/formatting the raw value form appCtxService\n     */const _processCtxKey=function(key,ctx){let notFound=false;for(let i=0;i<key.searchPaths.length;i++){let currentPath=key.searchPaths[i];let tempCtx=ctx;for(let j=0;j<currentPath.length;j++){if(tempCtx[currentPath[j]]){tempCtx=tempCtx[currentPath[j]];}else{notFound=true;break;}}if(notFound){break;}if(tempCtx!==ctx){return tempCtx;}}return null;};/**\n     * Hook point to set the context object used for filtering/formatting context information.\n     *\n     * @param {Object} obj - Context configuration object to set\n     */self.setAnalyticsContext=function(obj){_analyticsContext=obj;};/**\n     * Gets context data from appCtxService and formats it with _processCtxKey\n     *\n     * @return {Object} Processed context object to be sent to Tcanalytics\n     */const _getContextData=function(){let ctxObj=null;if(!_analyticsContext){_analyticsContext=cfgSvc.getCfgCached('analytics.splmStatsConfiguration');}ctxObj={};let ctx=appCtxService.ctx;if(_analyticsContext&&_analyticsContext.appCtxKeys){for(let i=0;i<_analyticsContext.appCtxKeys.length;i++){let k=_analyticsContext.appCtxKeys[i];let value=_processCtxKey(k,ctx);if(value){ctxObj[k.name]=value;}}}return ctxObj;};/**\n     * Formats a string on the context object to remove unecessary characters specific in the configuration object\n     *\n     * @param {String} ctxString - Unformatted context string\n     *\n     * @return {String} Processed context object to be sent to Tcanalytics\n     */const _processCtxString=function(ctxString){ctxString=ctxString.replace(/[\\w\\.:]+[\\.:]+(\\w+)/,'$1');if(_analyticsContext.appCtxValueFilters){for(let i=0;i<_analyticsContext.appCtxValueFilters.length;i++){while(ctxString.indexOf(_analyticsContext.appCtxValueFilters[i])!==-1){ctxString=ctxString.replace(_analyticsContext.appCtxValueFilters[i],'');}}}if(ctxString==='SummaryView'){ctxString='ListSummaryView';}return ctxString;};/**\n     * Checks to see if analytics are enabled, if so then log the performance object\n     *\n     * @param {Object} obj - Formatted performance object\n     */const _logAnalyticsEvent=function(obj){if(getReportAnalytics()&&!splmStatsUtils.isAnalyticsDisabled()){let eventName=_analyticsContext&&_analyticsContext.name?_analyticsContext.name:ANALYTICS_EVENT_NAME;splmAnalyticsService.logEvent('Performance::'+eventName,obj);}};/**\n     * Formats and sends our raw performance object data to the analytics logging function\n     *\n     * @param {Object} performanceObject - Raw/Unformatted performance object\n     */self.report=function(performanceObject){let ctxResult=_getContextData();let locationInformation={};if(_analyticsContext&&_analyticsContext.appCtxKeys){_.forEach(_analyticsContext.appCtxKeys,function(key){if(key.name&&ctxResult[key.name]){locationInformation['plstats'+key.name]=_processCtxString(ctxResult[key.name]);}});}setLocationInformation(locationInformation);_logAnalyticsEvent(_.assign({sanAnalyticsType:'Performance',plstatsTTI:parseFloat((performanceObject.TTI/1000).toFixed(3)),// Seconds\nplstatsScriptingTime:parseFloat(parseFloat(performanceObject.scriptTime/1000).toFixed(3)),// Seconds\nplstatsMemoryUsed:parseFloat((performanceObject.MemoryUsed/1000000).toFixed(3))||0,//MB\nplstatsSoaRequestCount:performanceObject.Network.SoaDetails.filter(function(networkCall){return networkCall.logCorrelationID!==0;}).length,plstatsTotalNetworkTime:parseFloat((performanceObject.totalNetworkTime/1000).toFixed(3)),// Seconds\nplstatsNetworkRequestSize:performanceObject.Network.requestSize,plstatsNetworkResponseSize:performanceObject.Network.responseSize,plstatsElemCount:performanceObject.DOM.elemCount,plstatsBrowserType:performanceObject.BrowserType,plstatsHttpRequestCount:performanceObject.Network.totalHttpRequests,plstatsComponentRenders:performanceObject.Component.componentRenders,plstatsUniqueComponents:performanceObject.Component.uniqueComponents},locationInformation));setReportAnalytics(false);};return self;}export default SPLMStatsAnalyticsReporter;","map":null,"metadata":{},"sourceType":"module"}
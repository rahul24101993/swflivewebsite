{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /**\n * @module js/reactHelper\n */import React,{useState}from'react';import parse from'html-react-parser';import _ from'lodash';/**\n * useReducer hook\n * @param {function} reducer reducer function\n * @param {object} initStateObj init state object\n * @param {function} initStateFn function to init state\n * @returns {Array} react hook in data-dispatch pair\n */export function useReducer(reducer,initStateObj,initStateFn){const[data,setDataState]=React.useState(initStateObj||initStateFn);// overlay for async practice, using ref\n// https://github.com/nathanbuchar/react-hook-thunk-reducer\nconst dataRef=React.useRef(data);const getData=React.useCallback(()=>dataRef.current,[dataRef]);const setData=React.useCallback(newState=>{dataRef.current=newState;setDataState(newState);},[dataRef,setDataState]);// dispatch\nconst dispatch=React.useCallback(action=>{const newData=reducer(getData(),action);// NOTE: blindly set data will cause update issue without comparison\nif(newData!==data){setData(newData);}},[reducer,getData]);return[data,dispatch,getData];}/**\n * General chainable init hook\n * @param {function} fn call back function for useEffect hook\n * @param {boolean} initialized true if former hook is done\n */export function useInitHook(fn){let initialized=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;React.useEffect(()=>initialized?fn():undefined,[initialized]);}// Follow Stu's suggestion to add a cache\nexport const convertToHtml=value=>parse(value);// revisitme Charu - please see discussion on MR476\n/**\n * Maps the objects on the child elements\n * @param {Array} children child elements\n * @param {object} context context to be mapped\n * @returns {Array} mapped child elements\n */export function mapChildren(children,context){// case1: children is functions in form of {}\n// case2: children in normal form\nchildren=_.concat([],children);let final_children=children.map(item=>typeof item==='function'?item(context):item);return React.Children.map(final_children,child=>{let{children}=child.props||{};// should always keep the children\n// case1: children is functions in form of {}\n// case2: children in normal form\nif(typeof children==='function'){children=children(context);}return/*#__PURE__*/React.cloneElement(child,context,children);});}export function forwardComponent(children,context){return/*#__PURE__*/React.forwardRef();}export const useAtomicDataReducer=declViewModelJson=>{// fieldsdata\nconst atomicDataHook={};const atomicDataRef={};for(const prop in declViewModelJson.data){if(declViewModelJson.data[prop]&&declViewModelJson.data[prop].meta){// eslint-disable-next-line react-hooks/rules-of-hooks\nconst[atomicData,dataUpdater]=useState(declViewModelJson.data[prop].initialValues);atomicDataHook[prop]=[atomicData,dataUpdater];// eslint-disable-next-line react-hooks/rules-of-hooks\nconst dataRef=React.useRef(atomicData);// eslint-disable-next-line react-hooks/rules-of-hooks\nconst getAtomicData=React.useCallback(()=>dataRef.current,[dataRef]);// eslint-disable-next-line react-hooks/rules-of-hooks\nconst setAtomicData=newState=>{dataRef.current=newState;dataUpdater(newState);};atomicDataRef[prop]={getAtomicData,setAtomicData};}}return{atomicDataHook,atomicDataRef};};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awColumnService\n */\nimport actionSvc from 'js/actionService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport soaService from 'soa/kernel/soaService';\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awColumnFilterService from 'js/awColumnFilterService';\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport moduleLoader from 'js/moduleLoader';\nimport eventBus from 'js/eventBus';\n/**\n   * revisitme yogesh\n   * in whole file lot of scope usages\n   */\n\n/**\n   * {Number} The debug ID of the 'next' AwTableColumnProvider.\n   */\n\nvar _debug_nextColumnProviderId = 0;\n/**\n   * This class defines the name and behavior of a single column in the 'aw-table'. Column defaults are defined here\n   * and can be overriden by the view-model.\n   *\n   * @class AwTableColumnInfo\n   * @memberOf module:js/awColumnService\n   */\n\nvar AwTableColumnInfo = function () {\n  var colSelf = this;\n  /**\n     * @property {String} name - Internal (non-localized) name of the column.\n     *\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.name = '';\n  /**\n     * @property {String} displayName - User facing (localized) name of the column.\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.displayName = '';\n  /**\n     * @property {Function} api - callback functions\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.api = null;\n  /**\n     * @property {Boolean} enableColumnResizing - allow column resize?\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableColumnResizing = true;\n  /**\n     * @property { Boolean } enableRendererContribution- allow to override default cellRender template?\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableRendererContribution = true;\n  /**\n     * @property {Number|String} width - Default number of pixels or '*' for auto.\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.width = 150;\n  /**\n     * @property {Number|String} minWidth - min Number of pixels\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.minWidth = 20;\n  /**\n     * @property {Boolean} enableHiding - enable column hiding\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableHiding = true;\n  /**\n     * @property {Boolean} enableSorting - expose sorting\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableSorting = true; // sorting will come later\n\n  /**\n     * @property {Boolean} enableColumnMenu - expose column menu\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableColumnMenu = true;\n  /**\n     * @property {Boolean} ? - enable column filtering\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.isFilteringEnabled = true;\n  /**\n     * @property {Boolean} ? - enable column rearrange\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.enableColumnMoving = true;\n  /**\n     * @property {Boolean} ? - enable tooltip on header\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.headerTooltip = true;\n  /**\n     * @property {Boolean} isCommand - TRUE if this column is being used to handle display and management of\n     *           commands table navigation (e.g. Often the 1st column displaying the primary ID/Name of the object\n     *           in that row).\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.isTableCommand = false;\n  /**\n     * @property {Boolean} isTreeNavigation - TRUE if this column is being used to handle tree-table navigation\n     *           (e.g. node expand/collapse and any other specific display options).\n     * @memberOf module:js/awColumnService~AwTableColumnInfo\n     */\n\n  colSelf.isTreeNavigation = false;\n};\n/**\n   * @param {Number} columnOrder -\n   * @param {Boolean} hiddenFlag -\n   * @param {Number} pixelWidth -\n   * @param {String} propertyName -\n   * @param {String} sortDirection -\n   * @param {Number} sortPriority -\n   * @param {String} typeName -\n   * @param {Boolean} isFilteringEnabled - Flag for filter enabled/disabled on this column\n   */\n\n\n_c = AwTableColumnInfo;\n\nvar AwSoaColumnInfo = function (columnOrder, hiddenFlag, pixelWidth, propertyName, sortDirection, sortPriority, typeName, isFilteringEnabled) {\n  var scSelf = this;\n  /**\n     * {Number}\n     */\n\n  scSelf.columnOrder = columnOrder;\n  /**\n     * {Boolean}\n     */\n\n  scSelf.hiddenFlag = hiddenFlag;\n  /**\n     * {Number}\n     */\n\n  scSelf.pixelWidth = pixelWidth;\n  /**\n     * {String}\n     */\n\n  scSelf.propertyName = propertyName;\n  /**\n     * {String} ASC or DESC\n     */\n\n  scSelf.sortDirection = sortDirection;\n  /**\n     * {Number}\n     */\n\n  scSelf.sortPriority = sortPriority;\n  /**\n     * {String}\n     */\n\n  scSelf.typeName = typeName;\n  /**\n     * {Boolean}\n     */\n\n  scSelf.isFilteringEnabled = isFilteringEnabled;\n};\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Object} $scope - The AngularJS data context node.\n   * @param {OjectArray} commands - Array of command objects to associate with the 'isTableCommand' or\n   *            'isTreeNavigation' column.\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   */\n\n\n_c2 = AwSoaColumnInfo;\n\nvar AwTableColumnProvider = function (declViewModel, $scope, commands, gridId, commandsAnchor) {\n  var cpSelf = this;\n  var _declViewModel = declViewModel;\n  var _$scope = $scope;\n  var _commands = commands;\n  var _gridId = gridId;\n  var _commandsAnchor = commandsAnchor;\n  /**\n     * Set the ID of this instance.\n     */\n\n  cpSelf.id = _debug_nextColumnProviderId++;\n  cpSelf.columnFilters = null;\n  cpSelf.sortCriteria = null;\n  /**\n     * {Object} _uwDataProvider - A UwDataProvider based on the dataProvider in the DeclViewModel JSON specified by\n     * the DeclGrid.\n     */\n\n  var _uwDataProvider = null;\n  /**\n     * {Object} _declColumnProviderJSON - A UwDataProvider based on the columnProvider in the DeclViewModel JSON\n     * specified by the DeclGrid.\n     */\n\n  var _declColumnProviderJSON = null;\n  /**\n     * {Boolean} _pinIconColumn - TRUE if the 1st column should be pinned to the left so that it is not scroll with\n     * the rest of the columns in the table.\n     */\n\n  var _pinIconColumn = true;\n  /**\n     * {Boolean} _soaEnabled - TRUE if this service is allowed to access soaService APIs.\n     * <P>\n     * Note: This service can be used in non\n     */\n\n  var _soaEnabled = true;\n  /**\n     * Make the little tweaks that are necessary.\n     *\n     * @param {AwTableColumnInfo} columnInfo - The column to be tweaked.\n     *\n     * @param {Boolean} isArrangeSupported - TRUE if columns should be allowed to move (but only if they wanted to in the first place).\n     *            FALSE if ALL columns should be fixed and not movable.\n     *\n     * @param {Boolean} isSortingSupported - TRUE if columns should be allowed to be corted.\n     */\n\n  function _tweakColumnInfo(columnInfo, isArrangeSupported, isSortingSupported) {\n    // make sure propDescriptor isn't null\n    columnInfo.propDescriptor = columnInfo.propDescriptor || {};\n    /**\n       * Override 'enableColumnMoving' if 'arrange' not supported.\n       */\n\n    if (!isArrangeSupported) {\n      columnInfo.enableColumnMoving = false;\n    }\n    /**\n       * Override 'enableSorting' if 'sorting' not supported.\n       */\n\n\n    if (!isSortingSupported) {\n      columnInfo.enableSorting = false;\n    }\n    /**\n       * For now, we do not have any support for column menus.\n       */\n\n\n    columnInfo.enableColumnMenus = false;\n    /**\n       * Check if we DO NOT have a 'displayName' property but we do have a 'typeName' property<BR>\n       * If so: Make the 'displayName' the localized name of the type.\n       */\n\n    if (!columnInfo.displayName) {\n      if (columnInfo.typeName) {\n        var type = cmm.getType(columnInfo.typeName);\n\n        if (type && type.propertyDescriptorsMap[columnInfo.propertyName]) {\n          columnInfo.displayName = type.propertyDescriptorsMap[columnInfo.propertyName].displayName;\n        } else {\n          columnInfo.displayName = columnInfo.propertyName;\n        }\n      } else {\n        columnInfo.typeName = columnInfo.columnSrcType;\n        columnInfo.displayName = columnInfo.propDescriptor.displayName || columnInfo.displayName;\n      }\n    }\n    /**\n       * Make sure was have a 'name' property (If not: Set it to the same as the 'propertyName' property).\n       */\n\n\n    columnInfo.name = columnInfo.name || columnInfo.propDescriptor.propertyName || columnInfo.propertyName;\n    /**\n       * If we have a 'pixelWidth' property, set the 'width' property to that value as well.\n       */\n\n    columnInfo.width = columnInfo.pixelWidth || columnInfo.width;\n    /**\n       * Make sure was have a 'visible' property (If not: Set it to the same as the 'hiddenFlag' property or just\n       * default to 'true').\n       */\n\n    if (!columnInfo.visible) {\n      if (!declUtils.isNil(columnInfo.hiddenFlag)) {\n        columnInfo.visible = !columnInfo.hiddenFlag;\n      } else {\n        columnInfo.visible = true;\n      }\n    }\n    /**\n       * Make sure we have a 'field' (use 'name' is default)\n       */\n\n\n    columnInfo.field = columnInfo.field || columnInfo.name;\n    columnInfo.name = columnInfo.typeName ? columnInfo.typeName + '.' + columnInfo.name : columnInfo.name;\n    /**\n       * Setup to handle column sorting (if necessary)\n       */\n\n    if (columnInfo.enableSorting) {\n      /**\n         * Fix for LCS-99462 - (Grid) Column sorting arrow not maintained, when switch to another view mode.\n         */\n      if (_.isEmpty(columnInfo.sort)) {\n        columnInfo.sort = {};\n      }\n\n      let sortCriteria = cpSelf.getSortCriteria();\n\n      if (sortCriteria) {\n        // loop over column provider's sort criteria here and reapply as-needed\n        try {\n          declarativeDataCtxSvc.applyScope(_declViewModel, sortCriteria, _declViewModel._internal.functions, _$scope, null);\n        } catch (error) {\n          throw new Error(error);\n        }\n\n        cpSelf.setSortCriteria(sortCriteria);\n\n        _.forEach(sortCriteria, function (currentSortCriteria) {\n          if (columnInfo.name === currentSortCriteria.fieldName || columnInfo.propertyName === currentSortCriteria.fieldName) {\n            columnInfo.sort.direction = currentSortCriteria.sortDirection.toLowerCase();\n            columnInfo.sort.priority = 0;\n          }\n        });\n      }\n\n      columnInfo.sortingAlgorithm = function (a, b, rowA, rowB, sortDir) {\n        // eslint-disable-line no-unused-vars\n        var vmPropA = rowA.entity.props[columnInfo.field];\n        var vmPropB = rowB.entity.props[columnInfo.field];\n        var valA = '';\n        var valB = '';\n\n        if (vmPropA.uiValue) {\n          valA = vmPropA.uiValue;\n        }\n\n        if (vmPropB.uiValue) {\n          valB = vmPropB.uiValue;\n        }\n\n        var strA = valA.toLowerCase();\n        var strB = valB.toLowerCase();\n        return strA === strB ? 0 : strA.localeCompare(strB);\n      };\n    }\n  } // _tweakColumnInfo\n\n  /**\n     * Build the final set of columnInfos from the given array of columnInfos.\n     *\n     * @param {ObjectArray} columnInfoIn - Array of column settings from declarative model.\n     *\n     * @return {AwTableColumnInfoArray} Array of AwTableColumnInfo initialized with the given column settings (plus\n     *         an 'icon' column as the 1st column, if requested by this columnProvider).\n     */\n\n\n  function _buildFinalColumnInfos(columnInfoIn) {\n    let finalColumnInfos = [];\n    let newColumnInfo;\n\n    if (declGrid.addIconColumn !== false && declGrid.gridOptions.addIconColumn !== false) {\n      let iconColumnFound = false;\n      let iconCellRenderer = null;\n\n      _.forEach(columnInfoIn, function (colInfo) {\n        if (colInfo.name === 'icon') {\n          iconColumnFound = true;\n          return false;\n        } // This block is added for PL table. Since icon column is hardcoded in this service,\n        // there is no way to provide a cell template at application layer. So added this hack.\n        // Once we correct the hardcoded way of creating icon column, this will no more be needed.\n\n\n        if (colInfo.isTableCommand && colInfo.iconCellRenderer) {\n          iconCellRenderer = colInfo.iconCellRenderer;\n          return false;\n        }\n      });\n\n      if (!iconColumnFound) {\n        // Setup the special icon column\n        newColumnInfo = new AwTableColumnInfo();\n        newColumnInfo.name = 'icon';\n        newColumnInfo.displayName = '';\n        newColumnInfo.width = 34;\n        newColumnInfo.enableColumnMoving = false;\n        newColumnInfo.enableColumnMenu = false;\n        newColumnInfo.enableColumnResizing = false;\n        newColumnInfo.isFilteringEnabled = columnInfoIn.isFilteringEnabled !== false;\n        newColumnInfo.enableSorting = false;\n        newColumnInfo.visible = true;\n\n        if (_pinIconColumn) {\n          newColumnInfo.pinnedLeft = true;\n        }\n\n        if (iconCellRenderer) {\n          newColumnInfo.iconCellRenderer = iconCellRenderer;\n        }\n\n        finalColumnInfos.push(newColumnInfo);\n      }\n    }\n\n    let isArrangeSupported = cpSelf.isArrangeSupported();\n    let isSortingSupported = cpSelf.isSortingSupported();\n    let needsNavigationColumn = true;\n\n    _.forEach(columnInfoIn, function (colInfo) {\n      if (colInfo.isTableCommand || colInfo.isTreeNavigation) {\n        needsNavigationColumn = false;\n        return false;\n      }\n\n      return true;\n    });\n    /**\n       * Create a new ('tweaked') AwTableColumnInfo for each of the given awColumnInfos.\n       */\n\n\n    _.forEach(columnInfoIn, function (info) {\n      newColumnInfo = new AwTableColumnInfo();\n      /**\n         * Move over all existing property values\n         */\n\n      _.forEach(info, function (value, name) {\n        newColumnInfo[name] = value;\n      });\n\n      if (needsNavigationColumn) {\n        if (_uwDataProvider && _uwDataProvider.accessMode === 'tree') {\n          newColumnInfo.isTreeNavigation = true;\n        } else {\n          newColumnInfo.isTableCommand = true;\n        }\n\n        needsNavigationColumn = false;\n      }\n\n      if ((newColumnInfo.isTreeNavigation || newColumnInfo.isTableCommand) && _commands) {\n        newColumnInfo.commands = _commands;\n      }\n\n      newColumnInfo.commandsAnchor = _commandsAnchor; // Even if sorting is supported at data provider level, if could be disabled at column level.\n      // check both values to decide sort enablement.\n\n      let sortPossibleForProp = isSortingSupported && newColumnInfo.enableSorting;\n      let typeDesc = cmm.getType(newColumnInfo.typeName);\n\n      if (typeDesc) {\n        let propDesc = typeDesc.propertyDescriptorsMap[newColumnInfo.propertyName];\n\n        if (propDesc) {\n          // if no dataType specified, use property descriptor\n          if (!newColumnInfo.dataType) {\n            newColumnInfo.dataType = propDesc.valueType;\n          }\n        }\n      }\n      /**\n         * Adjust the properties (as necessary)\n         */\n\n\n      _tweakColumnInfo(newColumnInfo, isArrangeSupported, sortPossibleForProp); // Add column filter\n\n\n      if (declGrid.gridOptions.isFilteringEnabled && newColumnInfo.isFilteringEnabled !== false) {\n        let existingFilters = [];\n        const columnFilters = cpSelf.getColumnFilters();\n\n        _.forEach(columnFilters, function (currentFilter) {\n          if (newColumnInfo.field === currentFilter.columnName) {\n            existingFilters.push(currentFilter);\n          }\n        });\n\n        awColumnFilterService.updateColumnFilter(newColumnInfo, existingFilters);\n      }\n      /**\n         * check for duplicate column before adding\n         */\n\n\n      if (finalColumnInfos.find(function (finalColumnInfo) {\n        return finalColumnInfo.name === newColumnInfo.name && finalColumnInfo.typeName === newColumnInfo.typeName;\n      })) {\n        logger.warn('Skipping duplicate column: ' + newColumnInfo.name);\n      } else {\n        finalColumnInfos.push(newColumnInfo);\n      }\n    }); // Set sort from columns if sortCriteria is empty\n\n\n    const sortCriteria = cpSelf.getSortCriteria();\n\n    if (_.isEmpty(sortCriteria)) {\n      let sortPriority = NaN;\n      let sortDirection = '';\n      let sortColumn = null;\n\n      _.forEach(finalColumnInfos, function (currentColumn) {\n        if (currentColumn.sortDirection && (isNaN(sortPriority) || currentColumn.sortPriority < sortPriority)) {\n          sortPriority = currentColumn.sortPriority;\n          sortDirection = currentColumn.sortDirection.toLowerCase().includes('desc') ? 'DESC' : 'ASC';\n          sortColumn = currentColumn;\n        }\n      });\n\n      if (sortColumn && sortColumn.enableSorting && sortDirection) {\n        sortColumn.sort.direction = sortDirection;\n        sortColumn.sort.priority = 0;\n        cpSelf.setSortCriteria([{\n          fieldName: sortColumn.field,\n          sortDirection: sortDirection\n        }]);\n      }\n    } // checking if columns are set as frozen via xrt or vmo json otherwise rendered the default frozen columns\n\n\n    finalColumnInfos = _checkForFrozenColumnsConfiguration(finalColumnInfos);\n    return finalColumnInfos;\n  } // _buildFinalColumnInfos\n\n  /**\n     * checks and froze columns specified via xrt, vmo json or defualt.\n     * 1st prefrence is given to xrt, then vmo json and at last if nothing is specified, default columns will be forzen.\n     * (i.e. 1st col for tree & 1st,2nd col for table)\n     * @param {Object} allColumns - all columns of ui grid.\n     *\n     * @return {Object} finalColumnInfos final columns config with frozen properties.\n     */\n\n\n  function _checkForFrozenColumnsConfiguration(allColumns) {\n    var xrtConfigured = _checkFrozenColumnParameterConfig(allColumns);\n\n    if (!xrtConfigured) {\n      var vmJsonConfigured = _checkFrozenColumnJsonConfig(allColumns);\n\n      if (!vmJsonConfigured) {\n        _defaultFrozenColumns(allColumns);\n      }\n    }\n\n    return allColumns;\n  }\n  /**\n     * check and froze columns as specified in xrt\n     *\n     * @param {Object} allColumns - all columns of ui grid.\n     *\n     * @return {Boolean} True if frozen column configuration is done via xrt.\n     */\n\n\n  function _checkFrozenColumnParameterConfig(allColumns) {\n    var frozenIndex = -1; // find the frozen col index\n\n    allColumns.forEach(function (col, index) {\n      if (col.parameters && col.parameters.frozen === 'true') {\n        frozenIndex = index;\n      }\n    }); // froze all columns upto xrt configured frozen col.\n\n    if (frozenIndex !== -1 && frozenIndex <= allColumns.length) {\n      for (var i = 0; i <= frozenIndex; i++) {\n        allColumns[i].pinnedLeft = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n     * check and froze columns as specified in view model json\n     *\n     * @param {Object} allColumns - all columns of ui grid.\n     *\n     * @return {Boolean} True if frozen column configuration is done via vmo json.\n     */\n\n\n  function _checkFrozenColumnJsonConfig(allColumns) {\n    if (_declViewModel && _declViewModel.columnProviders) {\n      var columnProviders = [];\n\n      for (var provider in _declViewModel.columnProviders) {\n        columnProviders.push(provider);\n      }\n\n      var frozenIndex = _declViewModel.columnProviders[columnProviders[0]].frozenColumnIndex;\n\n      if (frozenIndex === undefined) {\n        return false;\n      }\n\n      if (frozenIndex >= 0 && frozenIndex <= allColumns.length) {\n        // froze all columns upto frozenIndex specified in vmo json.\n        for (var index = 0; index <= frozenIndex; index++) {\n          allColumns[index].pinnedLeft = true;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n     * freezing default columns i.e. 1st col for tree & 1st,2nd col for table\n     *\n     * @param {Object} allColumns - all columns of ui grid.             *\n     */\n\n\n  function _defaultFrozenColumns(allColumns) {\n    if (allColumns && allColumns.length > 0) {\n      if (allColumns[0].name === 'icon') {\n        // this for table\n        // 0th column (contains icon) + 1st column must be frozen in table as an AC of AW-4227 & AW-67931\n        allColumns[0].pinnedLeft = true;\n\n        if (allColumns[1]) {\n          allColumns[1].pinnedLeft = true;\n        }\n      } else {\n        // In tree, 0th column (contains icon + name) must be frozen\n        allColumns[0].pinnedLeft = true;\n      }\n    }\n  }\n  /**\n     * @param {Object} columnProviderJSON - JSON object where the columnProvider is defined.\n     * @param {Object} passedState - State with which column provider invokes actions\n     *\n     * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n     */\n\n\n  function _initializedFromJSON(columnProviderJSON, passedState) {\n    /**\n       * Set whether this column provider should interact with SOA APIs.\n       */\n    if (!declUtils.isNil(columnProviderJSON.soaEnabled)) {\n      _soaEnabled = columnProviderJSON.soaEnabled;\n    }\n\n    if (_declColumnProviderJSON) {\n      try {\n        declarativeDataCtxSvc.applyScope(_declViewModel, _declColumnProviderJSON, null, passedState || _$scope, null);\n      } catch (error) {\n        throw new Error(error);\n      }\n\n      cpSelf.columnFilters = _declColumnProviderJSON.columnFilters;\n      cpSelf.sortCriteria = _declColumnProviderJSON.sortCriteria;\n    }\n    /**\n       * Check for column load and row property actions\n       */\n\n\n    var loadColumnAction = columnProviderJSON.loadColumnAction ? _declViewModel.getAction(columnProviderJSON.loadColumnAction) : null;\n\n    if (loadColumnAction) {\n      if (loadColumnAction.deps) {\n        return moduleLoader.loadDependentModule(loadColumnAction.deps).then(function (moduleObj) {\n          return _executeLoadColumnAction(loadColumnAction, moduleObj, passedState);\n        });\n      }\n\n      return _executeLoadColumnAction(loadColumnAction, null);\n    }\n    /**\n       * Load from the dataProvider (if possible)\n       */\n\n\n    if (!_.isEmpty(_uwDataProvider.columnConfig) && !_.isEmpty(_uwDataProvider.columnConfig.columns)) {\n      _uwDataProvider.cols = _buildFinalColumnInfos(_uwDataProvider.columnConfig.columns);\n      return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n    } else if (columnProviderJSON) {\n      if (!_.isEmpty(columnProviderJSON.columnConfig) && !_.isEmpty(columnProviderJSON.columnConfig.columns)) {\n        _uwDataProvider.cols = _buildFinalColumnInfos(columnProviderJSON.columnConfig.columns);\n        return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n      } else if (!_.isEmpty(columnProviderJSON.columns)) {\n        /**\n           /**\n           * For static column provider, setting width to auto and minWidth to 150.\n           */\n        _.forEach(columnProviderJSON.columns, function autoResizeStaticColumns(column) {\n          if (!column.width) {\n            column.width = '*';\n            column.minWidth = 150;\n          }\n        });\n\n        _updateColumnInfosFromColumnInfos(_uwDataProvider, columnProviderJSON.columns);\n\n        return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n      }\n    }\n\n    return AwPromiseService.instance.resolve([]);\n  }\n  /**\n     * @param {DeclAction} loadColumnAction - Action used to load columns.\n     * @param {Object} loadColumnModuleObj - (Optional) Module API object to use when executing the action.\n     * @param {Object} passedState - State with which column provider invokes actions\n     *\n     * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n     */\n\n\n  function _executeLoadColumnAction(loadColumnAction, loadColumnModuleObj, passedState) {\n    /**\n       * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action event\n       * processing was started.\n       */\n    var localDataCtx = declUtils.resolveLocalDataCtx(_declViewModel, passedState || _$scope);\n\n    if (loadColumnAction) {\n      return actionSvc.executeAction(_declViewModel, loadColumnAction, localDataCtx, loadColumnModuleObj).then(function (columnResult) {\n        if (columnResult && columnResult.columnInfos) {\n          _uwDataProvider.cols = _buildFinalColumnInfos(columnResult.columnInfos);\n        } else if (_uwDataProvider.columnConfig && _uwDataProvider.columnConfig.columns) {\n          _uwDataProvider.cols = _buildFinalColumnInfos(_uwDataProvider.columnConfig.columns);\n        }\n\n        return _uwDataProvider.cols;\n      });\n    }\n\n    return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n  }\n  /**\n     *\n     * @param {AwColumnInfoArray} columnInfos - Collection of Object containing the 'cok\n     */\n\n\n  function _updateColumnInfosFromColumnInfos(uwDataProvider, columnInfos) {\n    uwDataProvider.cols = _buildFinalColumnInfos(columnInfos);\n  } // _updateColumnInfosFromColumnInfos\n\n  /**\n     * ---------------------------------------------------------------------<br>\n     * Define the exposed API <BR>\n     * ---------------------------------------------------------------------<br>\n     */\n\n  /**\n     * Build the new dynamic columns, and update the grid control\n     *\n     * @param {AwTableColumnInfoArray} columnInfosIn - the new set of columns\n     * @param {Boolean} updateDataProvider - update the grid ui?\n     * @returns {Promise} to ensure _uwDataProvider.cols is updated before used.\n     */\n\n\n  cpSelf.buildDynamicColumns = function (columnInfosIn, updateDataProvider) {\n    if (_soaEnabled) {\n      var typeNames = [];\n\n      _.forEach(columnInfosIn, function (columnInfo) {\n        if (columnInfo.typeName) {\n          typeNames.push(columnInfo.typeName);\n        } else if (columnInfo.associatedTypeName) {\n          typeNames.push(columnInfo.associatedTypeName);\n        }\n      });\n\n      typeNames = _.uniq(typeNames);\n      return soaService.ensureModelTypesLoaded(typeNames).then(function () {\n        var columnInfos = _buildFinalColumnInfos(columnInfosIn);\n\n        if (updateDataProvider) {\n          var oldCols = _uwDataProvider.cols;\n          _uwDataProvider.cols = columnInfos; // preserve properties that were not included in new columns\n\n          _.forEach(oldCols, function (oldCol) {\n            _.forEach(_uwDataProvider.cols, function (currentColumn) {\n              if (currentColumn.name === oldCol.name) {\n                if (oldCol.enableColumnMoving === false) {\n                  currentColumn.enableColumnMoving = false;\n                } // Handle column filter logic\n\n\n                awColumnFilterService.updateNewColumnFilter(currentColumn, oldCol); // XRT properties\n\n                var xrtProperties = ['renderingHint', 'parameters', 'modifiable', 'isTableCommand', 'enableSorting', 'isFilteringEnabled'];\n\n                _.forEach(xrtProperties, function (propertyName) {\n                  if (currentColumn[propertyName] === undefined) {\n                    currentColumn[propertyName] = oldCol[propertyName];\n                  }\n                });\n\n                return false;\n              }\n            });\n          });\n        }\n      });\n    } else if (updateDataProvider) {\n      _uwDataProvider.cols = _buildFinalColumnInfos(columnInfosIn);\n      return Promise.resolve();\n    }\n  }; // buildDynamicColumns\n\n  /**\n     * Get the current columns\n     *\n     * @return {ArrayUwGridColumnInfo} an array of UwGridColumnInfo that represent the columns specified by EITHER\n     *         the given 'declViewModel' (columnPropNames, columnDisplayNames & nColsToFreeze) OR\n     *         'declGrid.columnDefs'\n     */\n\n\n  cpSelf.getColumns = function () {\n    if (_uwDataProvider && _uwDataProvider.cols) {\n      return _uwDataProvider.cols;\n    }\n\n    return null;\n  };\n  /**\n     * Change the size of one of the columns\n     *\n     * @param {String} name - The name of the column that has had it's size change\n     * @param {Integer} delta - The change in size of the column\n     *\n     */\n\n\n  cpSelf.columnSizeChanged = function (name, delta) {\n    var columnInfos = cpSelf.getColumns();\n\n    _.forEach(columnInfos, function (columnInfo) {\n      if (columnInfo.name === name) {\n        columnInfo.width += delta;\n        /**\n           * Previously ui-grid was enforcing min and max, but it seems we need to do it here for now Also\n           * round since IE11 is returning a float instead of an int\n           */\n\n        columnInfo.width = Math.round(Math.max(columnInfo.width, columnInfo.minWidth));\n\n        if (columnInfo.pixelWidth) {\n          columnInfo.pixelWidth = columnInfo.width;\n        }\n\n        return false;\n      }\n    });\n\n    eventBus.publish('columnArrange', {\n      name: _gridId,\n      columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n      arrangeType: 'saveColumnAction',\n      columns: columnInfos\n    });\n  };\n  /**\n     * Re-order one of the columns\n     *\n     * @param {String} name - The name of the column that has been moved\n     * @param {Integer} origPosition - column's original position\n     * @param {Integer} newPosition - column's new position\n     */\n\n\n  cpSelf.columnOrderChanged = function (name, origPosition, newPosition) {\n    var columnInfos = cpSelf.getColumns(); // assume icon is using col 0 and we don't have to adjust indexes for splicing below\n    // if not, adjust indexes\n\n    if (columnInfos[0].name !== 'icon') {\n      origPosition = origPosition > 0 ? origPosition - 1 : 0;\n      newPosition = newPosition > 0 ? newPosition - 1 : 0;\n    } // dis-allow positioning to the left of any initial un-moveable columns\n\n\n    while (columnInfos[newPosition] && columnInfos[newPosition].enableColumnMoving === false) {\n      newPosition++;\n    }\n\n    var movedColumnInfo = columnInfos.splice(origPosition, 1);\n    columnInfos.splice(newPosition, 0, movedColumnInfo[0]);\n    eventBus.publish('columnArrange', {\n      name: _gridId,\n      columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n      arrangeType: 'saveColumnAction',\n      columns: columnInfos\n    });\n  };\n  /**\n     * Hide one of the columns\n     *\n     * @param {Integer} columnIndex - The index of the column that has been hidden\n     */\n\n\n  cpSelf.hideColumn = function (columnIndex) {\n    var columnInfos = cpSelf.getColumns();\n    let operation = _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.operationType : '';\n    columnInfos[columnIndex].hiddenFlag = true;\n    eventBus.publish('columnArrange', {\n      name: _gridId,\n      columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n      arrangeType: 'saveColumnAndLoadAction',\n      columns: columnInfos,\n      operationType: operation\n    });\n  };\n  /**\n     * Get the current sort criteria\n     */\n\n\n  cpSelf.getSortCriteria = function () {\n    return cpSelf.sortCriteria;\n  };\n  /**\n     * Set the current sort criteria\n     *\n     * @param {Object[]} sortCriteria - The new sort criteria\n     */\n\n\n  cpSelf.setSortCriteria = function (sortCriteria) {\n    cpSelf.sortCriteria = sortCriteria;\n\n    if (_declColumnProviderJSON) {\n      _declColumnProviderJSON.sortCriteria = sortCriteria;\n    }\n  };\n  /**\n     * Get the current column filters\n     * @return {Object[]} columnFilters - the column filters\n     */\n\n\n  cpSelf.getColumnFilters = function () {\n    return cpSelf.columnFilters;\n  };\n  /**\n     * Set the column filters\n     * @param {Object[]} columnFilters - the column filters\n     */\n\n\n  cpSelf.setColumnFilters = function (columnFilters) {\n    cpSelf.columnFilters = columnFilters;\n\n    if (_declColumnProviderJSON) {\n      _declColumnProviderJSON.columnFilters = columnFilters;\n    }\n  };\n  /**\n     * Free up all resources held/managed by this object.\n     * <P>\n     * Note: After this function, no API call should be considered valid. This function is intended to be called\n     * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n     * objects managed by this class may be considered a 'memory leak'.\n     */\n\n\n  cpSelf.destroy = function () {\n    _declViewModel = null;\n    _uwDataProvider = null; // Note: We did not create this object, so it's not ours to destroy\n\n    _$scope = null;\n    _commands = null;\n    cpSelf = null;\n  };\n\n  cpSelf.setAdditionalPrams = function (commands, commandsAnchor, dataCtxNode) {\n    _commands = commands;\n    _commandsAnchor = commandsAnchor;\n    _$scope = dataCtxNode;\n  };\n  /**\n     * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n     *         additional declActions necessary to support column arranging.\n     */\n\n\n  cpSelf.isArrangeSupported = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n\n    if (_declViewModel.columnProviders) {\n      var colProvider = _declViewModel.columnProviders[declGrid.columnProvider];\n      assert(colProvider, 'Invalid columnProvider');\n      return colProvider.resetColumnAction && colProvider.saveColumnAndLoadAction;\n    }\n\n    return false;\n  };\n  /**\n     * @return {Boolean} TRUE support column filtering.\n     */\n\n\n  cpSelf.isFilteringSupported = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n    return declGrid.gridOptions.isFilteringEnabled === true;\n  };\n  /**\n     * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n     *         additional option or declActions necessary to support column sorting.\n     */\n\n\n  cpSelf.isSortingSupported = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n    /**\n       * Check if the declGrid options indicates if 'external' sorting is supported or not.\n       */\n\n    if (!declUtils.isNil(declGrid.gridOptions.useExternalSorting)) {\n      return declGrid.gridOptions.useExternalSorting;\n    }\n    /**\n       * Since the options did not indicate support, check if the declColumnProvider indicates sorting by the\n       * existence of a declAction for sorting.\n       */\n\n\n    if (!_declViewModel.columnProviders) {\n      return false;\n    }\n\n    var colProvider = _declViewModel.columnProviders[declGrid.columnProvider];\n    assert(colProvider, 'Invalid columnProvider');\n\n    if (!declUtils.isNil(colProvider.sortColumnAction)) {\n      return true;\n    }\n    /**\n       * Note: Since aw3.3 'useExternalSorting' is true by default. This default should be changed to FALSE, but\n       * until then we need to honor it here. The declGrid in the declViewModel should override that property if\n       * they do NOT want 'useExternalSorting' to be true.\n       */\n\n\n    return true;\n  };\n  /**\n     * @return {String} Column provider Id, it is equal to clientScopeURI for aw tables if specified.\n     */\n\n\n  cpSelf.getId = function () {\n    declUtils.assertValidModel(_declViewModel);\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'Invalid declGrid');\n\n    if (_declViewModel.columnProviders) {\n      var colProvider = _declViewModel.columnProviders[declGrid.columnProvider];\n      assert(colProvider, 'Invalid columnProvider');\n      return colProvider.id;\n    }\n\n    return null;\n  };\n  /**\n     * @return {Promise} A Promise resolved with the initial array of AwTableColumnInfo.\n     */\n\n\n  cpSelf.initialize = function (passedState) {\n    /**\n       * Check for columnProvider on viewModel\n       */\n    if (_declColumnProviderJSON) {\n      return _initializedFromJSON(_declColumnProviderJSON, passedState);\n    }\n    /**\n       * Use properties placed on the 'declViewModel' as the basis of the column information.\n       * <P>\n       * Note: This is what the shf measurement table does, but should update to use col provider\n       */\n\n\n    var columnPropNames = _declViewModel.columnPropNames ? _declViewModel.columnPropNames : [];\n    var columnDisplayNames = _declViewModel.columnDisplayNames ? _declViewModel.columnDisplayNames : [];\n    var nColsToFreeze = _declViewModel.nColsToFreeze ? _declViewModel.nColsToFreeze : 0;\n    var newColumnInfos = [];\n\n    for (var index = 0; index < columnPropNames.length; index++) {\n      var columnInfo = new AwTableColumnInfo();\n      columnInfo.name = columnPropNames[index];\n\n      if (columnDisplayNames !== null && columnDisplayNames.length > index) {\n        columnInfo.displayName = columnDisplayNames[index];\n      }\n\n      if (index < nColsToFreeze) {\n        columnInfo.pinnedLeft = true;\n      }\n\n      newColumnInfos.push(columnInfo);\n    }\n\n    _uwDataProvider.cols = newColumnInfos;\n    return AwPromiseService.instance.resolve(_uwDataProvider.cols);\n  }; // initialize\n\n  /**\n     * ---------------------------------------------------------------------------<BR>\n     * Property & Function definition complete....Finish initialization. <BR>\n     * ---------------------------------------------------------------------------<BR>\n     */\n\n  /**\n     * Validate parameters and initialize fields\n     */\n\n\n  assert(_declViewModel, 'No in DeclViewModel specified '); // assert( _gridId, 'No DeclGrid specified ' );\n\n  if (_gridId) {\n    var declGrid = _declViewModel.grids[_gridId];\n    assert(declGrid, 'No DeclGrid specified ');\n\n    if (_declViewModel.dataProviders && declGrid.dataProvider) {\n      _uwDataProvider = _declViewModel.dataProviders[declGrid.dataProvider];\n    }\n\n    if (_declViewModel.columnProviders && declGrid.columnProvider) {\n      _declColumnProviderJSON = _declViewModel.columnProviders[declGrid.columnProvider];\n\n      if (!_.isEmpty(_declColumnProviderJSON.columnConfig) && !_.isEmpty(_declColumnProviderJSON.columnConfig.columns)) {\n        _uwDataProvider.columnConfig = _declColumnProviderJSON.columnConfig;\n      }\n\n      if (_declColumnProviderJSON.objectSetUri) {\n        _uwDataProvider.objectSetUri = _declColumnProviderJSON.objectSetUri;\n      }\n    }\n\n    assert(_uwDataProvider, 'No DataProvider specified in DeclViewModel');\n\n    if (declGrid.hasOwnProperty('pinIconColumn')) {\n      _pinIconColumn = declGrid.pinIconColumn;\n    }\n  }\n}; // AwTableColumnProvider\n\n/**\n   * ----------------------------------------------------------------------------<BR>\n   * Define published service APIs<BR>\n   * ----------------------------------------------------------------------------<BR>\n   */\n\n\n_c3 = AwTableColumnProvider;\nvar exports = {};\n/**\n   * @param {Object} columnProperties - (Optional) An object who's properties will overwrite the default values of the\n   *            new AwTableColumnInfo object.\n   *\n   * @return {AwTableColumnInfo} Newly created AwTableColumnInfo object.\n   */\n\nexport let createColumnInfo = function (columnProperties) {\n  var columnInfo = new AwTableColumnInfo();\n\n  if (columnProperties) {\n    _.forEach(columnProperties, function (value, name) {\n      columnInfo[name] = value;\n    });\n  }\n\n  return columnInfo;\n};\n/**\n   * @param {AwTableColumnInfo} awColumnInfo -\n   * @param {Number} columnOrder -\n   */\n\nexport let createSoaColumnInfo = function (awColumnInfo, columnOrder) {\n  return new AwSoaColumnInfo(columnOrder, awColumnInfo.hiddenFlag, awColumnInfo.pixelWidth, awColumnInfo.propertyName, awColumnInfo.sortDirection, awColumnInfo.sortPriority, awColumnInfo.typeName, awColumnInfo.isFilteringEnabled);\n};\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Scope} $scope - The AngularJS data context node.\n   * @param {Array} commands - The list of associated commands\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   *\n   * @return {AwTableColumnProvider} Newly created AwTableColumnProvider object.\n   */\n\nexport let createColumnProvider = function (declViewModel, $scope, commands, gridId, commandsAnchor) {\n  return new AwTableColumnProvider(declViewModel, $scope, commands, gridId, commandsAnchor);\n};\nexports = {\n  createColumnInfo,\n  createSoaColumnInfo,\n  createColumnProvider\n};\nexport default exports;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AwTableColumnInfo\");\n$RefreshReg$(_c2, \"AwSoaColumnInfo\");\n$RefreshReg$(_c3, \"AwTableColumnProvider\");","map":{"version":3,"names":["actionSvc","cmm","soaService","declarativeDataCtxSvc","AwPromiseService","awColumnFilterService","assert","_","logger","declUtils","moduleLoader","eventBus","_debug_nextColumnProviderId","AwTableColumnInfo","colSelf","name","displayName","api","enableColumnResizing","enableRendererContribution","width","minWidth","enableHiding","enableSorting","enableColumnMenu","isFilteringEnabled","enableColumnMoving","headerTooltip","isTableCommand","isTreeNavigation","AwSoaColumnInfo","columnOrder","hiddenFlag","pixelWidth","propertyName","sortDirection","sortPriority","typeName","scSelf","AwTableColumnProvider","declViewModel","$scope","commands","gridId","commandsAnchor","cpSelf","_declViewModel","_$scope","_commands","_gridId","_commandsAnchor","id","columnFilters","sortCriteria","_uwDataProvider","_declColumnProviderJSON","_pinIconColumn","_soaEnabled","_tweakColumnInfo","columnInfo","isArrangeSupported","isSortingSupported","propDescriptor","enableColumnMenus","type","getType","propertyDescriptorsMap","columnSrcType","visible","isNil","field","isEmpty","sort","getSortCriteria","applyScope","_internal","functions","error","Error","setSortCriteria","forEach","currentSortCriteria","fieldName","direction","toLowerCase","priority","sortingAlgorithm","a","b","rowA","rowB","sortDir","vmPropA","entity","props","vmPropB","valA","valB","uiValue","strA","strB","localeCompare","_buildFinalColumnInfos","columnInfoIn","finalColumnInfos","newColumnInfo","declGrid","addIconColumn","gridOptions","iconColumnFound","iconCellRenderer","colInfo","pinnedLeft","push","needsNavigationColumn","info","value","accessMode","sortPossibleForProp","typeDesc","propDesc","dataType","valueType","existingFilters","getColumnFilters","currentFilter","columnName","updateColumnFilter","find","finalColumnInfo","warn","NaN","sortColumn","currentColumn","isNaN","includes","_checkForFrozenColumnsConfiguration","allColumns","xrtConfigured","_checkFrozenColumnParameterConfig","vmJsonConfigured","_checkFrozenColumnJsonConfig","_defaultFrozenColumns","frozenIndex","col","index","parameters","frozen","length","i","columnProviders","provider","frozenColumnIndex","undefined","_initializedFromJSON","columnProviderJSON","passedState","soaEnabled","loadColumnAction","getAction","deps","loadDependentModule","then","moduleObj","_executeLoadColumnAction","columnConfig","columns","cols","instance","resolve","autoResizeStaticColumns","column","_updateColumnInfosFromColumnInfos","loadColumnModuleObj","localDataCtx","resolveLocalDataCtx","executeAction","columnResult","columnInfos","uwDataProvider","buildDynamicColumns","columnInfosIn","updateDataProvider","typeNames","associatedTypeName","uniq","ensureModelTypesLoaded","oldCols","oldCol","updateNewColumnFilter","xrtProperties","Promise","getColumns","columnSizeChanged","delta","Math","round","max","publish","columnConfigId","arrangeType","columnOrderChanged","origPosition","newPosition","movedColumnInfo","splice","hideColumn","columnIndex","operation","operationType","setColumnFilters","destroy","setAdditionalPrams","dataCtxNode","assertValidModel","grids","colProvider","columnProvider","resetColumnAction","saveColumnAndLoadAction","isFilteringSupported","useExternalSorting","sortColumnAction","getId","initialize","columnPropNames","columnDisplayNames","nColsToFreeze","newColumnInfos","dataProviders","dataProvider","objectSetUri","hasOwnProperty","pinIconColumn","exports","createColumnInfo","columnProperties","createSoaColumnInfo","awColumnInfo","createColumnProvider"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/awColumnService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module defines the primary classes used to manage the 'aw-table' directive (used by decl grid).\n *\n * @module js/awColumnService\n */\nimport actionSvc from 'js/actionService';\nimport cmm from 'soa/kernel/clientMetaModel';\nimport soaService from 'soa/kernel/soaService';\nimport declarativeDataCtxSvc from 'js/declarativeDataCtxService';\nimport AwPromiseService from 'js/awPromiseService';\nimport awColumnFilterService from 'js/awColumnFilterService';\nimport assert from 'js/assert';\nimport _ from 'lodash';\nimport logger from 'js/logger';\nimport declUtils from 'js/declUtils';\nimport moduleLoader from 'js/moduleLoader';\nimport eventBus from 'js/eventBus';\n\n/**\n   * revisitme yogesh\n   * in whole file lot of scope usages\n   */\n\n/**\n   * {Number} The debug ID of the 'next' AwTableColumnProvider.\n   */\nvar _debug_nextColumnProviderId = 0;\n\n/**\n   * This class defines the name and behavior of a single column in the 'aw-table'. Column defaults are defined here\n   * and can be overriden by the view-model.\n   *\n   * @class AwTableColumnInfo\n   * @memberOf module:js/awColumnService\n   */\nvar AwTableColumnInfo = function() {\n    var colSelf = this;\n\n    /**\n       * @property {String} name - Internal (non-localized) name of the column.\n       *\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.name = '';\n\n    /**\n       * @property {String} displayName - User facing (localized) name of the column.\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.displayName = '';\n\n    /**\n       * @property {Function} api - callback functions\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.api = null;\n\n    /**\n       * @property {Boolean} enableColumnResizing - allow column resize?\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableColumnResizing = true;\n\n    /**\n       * @property { Boolean } enableRendererContribution- allow to override default cellRender template?\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableRendererContribution = true;\n\n    /**\n       * @property {Number|String} width - Default number of pixels or '*' for auto.\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.width = 150;\n\n    /**\n       * @property {Number|String} minWidth - min Number of pixels\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.minWidth = 20;\n\n    /**\n       * @property {Boolean} enableHiding - enable column hiding\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableHiding = true;\n\n    /**\n       * @property {Boolean} enableSorting - expose sorting\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableSorting = true; // sorting will come later\n\n    /**\n       * @property {Boolean} enableColumnMenu - expose column menu\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableColumnMenu = true;\n\n    /**\n       * @property {Boolean} ? - enable column filtering\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.isFilteringEnabled = true;\n\n    /**\n       * @property {Boolean} ? - enable column rearrange\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.enableColumnMoving = true;\n\n    /**\n       * @property {Boolean} ? - enable tooltip on header\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.headerTooltip = true;\n\n    /**\n       * @property {Boolean} isCommand - TRUE if this column is being used to handle display and management of\n       *           commands table navigation (e.g. Often the 1st column displaying the primary ID/Name of the object\n       *           in that row).\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.isTableCommand = false;\n\n    /**\n       * @property {Boolean} isTreeNavigation - TRUE if this column is being used to handle tree-table navigation\n       *           (e.g. node expand/collapse and any other specific display options).\n       * @memberOf module:js/awColumnService~AwTableColumnInfo\n       */\n    colSelf.isTreeNavigation = false;\n};\n\n/**\n   * @param {Number} columnOrder -\n   * @param {Boolean} hiddenFlag -\n   * @param {Number} pixelWidth -\n   * @param {String} propertyName -\n   * @param {String} sortDirection -\n   * @param {Number} sortPriority -\n   * @param {String} typeName -\n   * @param {Boolean} isFilteringEnabled - Flag for filter enabled/disabled on this column\n   */\nvar AwSoaColumnInfo = function( columnOrder, hiddenFlag, pixelWidth, propertyName, sortDirection, sortPriority,\n    typeName, isFilteringEnabled ) {\n    var scSelf = this;\n\n    /**\n       * {Number}\n       */\n    scSelf.columnOrder = columnOrder;\n\n    /**\n       * {Boolean}\n       */\n    scSelf.hiddenFlag = hiddenFlag;\n\n    /**\n       * {Number}\n       */\n    scSelf.pixelWidth = pixelWidth;\n\n    /**\n       * {String}\n       */\n    scSelf.propertyName = propertyName;\n\n    /**\n       * {String} ASC or DESC\n       */\n    scSelf.sortDirection = sortDirection;\n\n    /**\n       * {Number}\n       */\n    scSelf.sortPriority = sortPriority;\n\n    /**\n       * {String}\n       */\n    scSelf.typeName = typeName;\n\n    /**\n       * {Boolean}\n       */\n    scSelf.isFilteringEnabled = isFilteringEnabled;\n};\n\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Object} $scope - The AngularJS data context node.\n   * @param {OjectArray} commands - Array of command objects to associate with the 'isTableCommand' or\n   *            'isTreeNavigation' column.\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   */\nvar AwTableColumnProvider = function( declViewModel, $scope, commands, gridId, commandsAnchor ) {\n    var cpSelf = this;\n\n    var _declViewModel = declViewModel;\n    var _$scope = $scope;\n    var _commands = commands;\n    var _gridId = gridId;\n    var _commandsAnchor = commandsAnchor;\n\n    /**\n       * Set the ID of this instance.\n       */\n    cpSelf.id = _debug_nextColumnProviderId++;\n\n    cpSelf.columnFilters = null;\n    cpSelf.sortCriteria = null;\n\n    /**\n       * {Object} _uwDataProvider - A UwDataProvider based on the dataProvider in the DeclViewModel JSON specified by\n       * the DeclGrid.\n       */\n    var _uwDataProvider = null;\n\n    /**\n       * {Object} _declColumnProviderJSON - A UwDataProvider based on the columnProvider in the DeclViewModel JSON\n       * specified by the DeclGrid.\n       */\n    var _declColumnProviderJSON = null;\n\n    /**\n       * {Boolean} _pinIconColumn - TRUE if the 1st column should be pinned to the left so that it is not scroll with\n       * the rest of the columns in the table.\n       */\n    var _pinIconColumn = true;\n\n    /**\n       * {Boolean} _soaEnabled - TRUE if this service is allowed to access soaService APIs.\n       * <P>\n       * Note: This service can be used in non\n       */\n    var _soaEnabled = true;\n\n    /**\n       * Make the little tweaks that are necessary.\n       *\n       * @param {AwTableColumnInfo} columnInfo - The column to be tweaked.\n       *\n       * @param {Boolean} isArrangeSupported - TRUE if columns should be allowed to move (but only if they wanted to in the first place).\n       *            FALSE if ALL columns should be fixed and not movable.\n       *\n       * @param {Boolean} isSortingSupported - TRUE if columns should be allowed to be corted.\n       */\n    function _tweakColumnInfo( columnInfo, isArrangeSupported, isSortingSupported ) {\n        // make sure propDescriptor isn't null\n        columnInfo.propDescriptor = columnInfo.propDescriptor || {};\n\n        /**\n           * Override 'enableColumnMoving' if 'arrange' not supported.\n           */\n        if( !isArrangeSupported ) {\n            columnInfo.enableColumnMoving = false;\n        }\n\n        /**\n           * Override 'enableSorting' if 'sorting' not supported.\n           */\n        if( !isSortingSupported ) {\n            columnInfo.enableSorting = false;\n        }\n\n        /**\n           * For now, we do not have any support for column menus.\n           */\n        columnInfo.enableColumnMenus = false;\n\n        /**\n           * Check if we DO NOT have a 'displayName' property but we do have a 'typeName' property<BR>\n           * If so: Make the 'displayName' the localized name of the type.\n           */\n        if( !columnInfo.displayName ) {\n            if( columnInfo.typeName ) {\n                var type = cmm.getType( columnInfo.typeName );\n\n                if( type && type.propertyDescriptorsMap[ columnInfo.propertyName ] ) {\n                    columnInfo.displayName = type.propertyDescriptorsMap[ columnInfo.propertyName ].displayName;\n                } else {\n                    columnInfo.displayName = columnInfo.propertyName;\n                }\n            } else {\n                columnInfo.typeName = columnInfo.columnSrcType;\n                columnInfo.displayName = columnInfo.propDescriptor.displayName || columnInfo.displayName;\n            }\n        }\n\n        /**\n           * Make sure was have a 'name' property (If not: Set it to the same as the 'propertyName' property).\n           */\n        columnInfo.name = columnInfo.name || columnInfo.propDescriptor.propertyName || columnInfo.propertyName;\n\n        /**\n           * If we have a 'pixelWidth' property, set the 'width' property to that value as well.\n           */\n        columnInfo.width = columnInfo.pixelWidth || columnInfo.width;\n\n        /**\n           * Make sure was have a 'visible' property (If not: Set it to the same as the 'hiddenFlag' property or just\n           * default to 'true').\n           */\n        if( !columnInfo.visible ) {\n            if( !declUtils.isNil( columnInfo.hiddenFlag ) ) {\n                columnInfo.visible = !columnInfo.hiddenFlag;\n            } else {\n                columnInfo.visible = true;\n            }\n        }\n\n        /**\n           * Make sure we have a 'field' (use 'name' is default)\n           */\n        columnInfo.field = columnInfo.field || columnInfo.name;\n\n        columnInfo.name = columnInfo.typeName ? columnInfo.typeName + '.' + columnInfo.name : columnInfo.name;\n\n        /**\n           * Setup to handle column sorting (if necessary)\n           */\n        if( columnInfo.enableSorting ) {\n            /**\n               * Fix for LCS-99462 - (Grid) Column sorting arrow not maintained, when switch to another view mode.\n               */\n            if( _.isEmpty( columnInfo.sort ) ) {\n                columnInfo.sort = {};\n            }\n\n            let sortCriteria = cpSelf.getSortCriteria();\n            if( sortCriteria ) {\n                // loop over column provider's sort criteria here and reapply as-needed\n                try {\n                    declarativeDataCtxSvc.applyScope( _declViewModel, sortCriteria, _declViewModel._internal.functions, _$scope, null );\n                } catch ( error ) {\n                    throw new Error( error );\n                }\n                cpSelf.setSortCriteria( sortCriteria );\n\n                _.forEach( sortCriteria, function( currentSortCriteria ) {\n                    if( columnInfo.name === currentSortCriteria.fieldName || columnInfo.propertyName === currentSortCriteria.fieldName ) {\n                        columnInfo.sort.direction = currentSortCriteria.sortDirection.toLowerCase();\n                        columnInfo.sort.priority = 0;\n                    }\n                } );\n            }\n\n            columnInfo.sortingAlgorithm = function( a, b, rowA, rowB, sortDir ) { // eslint-disable-line no-unused-vars\n                var vmPropA = rowA.entity.props[ columnInfo.field ];\n                var vmPropB = rowB.entity.props[ columnInfo.field ];\n\n                var valA = '';\n                var valB = '';\n\n                if( vmPropA.uiValue ) {\n                    valA = vmPropA.uiValue;\n                }\n\n                if( vmPropB.uiValue ) {\n                    valB = vmPropB.uiValue;\n                }\n\n                var strA = valA.toLowerCase();\n                var strB = valB.toLowerCase();\n\n                return strA === strB ? 0 : strA.localeCompare( strB );\n            };\n        }\n    } // _tweakColumnInfo\n\n    /**\n       * Build the final set of columnInfos from the given array of columnInfos.\n       *\n       * @param {ObjectArray} columnInfoIn - Array of column settings from declarative model.\n       *\n       * @return {AwTableColumnInfoArray} Array of AwTableColumnInfo initialized with the given column settings (plus\n       *         an 'icon' column as the 1st column, if requested by this columnProvider).\n       */\n    function _buildFinalColumnInfos( columnInfoIn ) {\n        let finalColumnInfos = [];\n\n        let newColumnInfo;\n\n        if( declGrid.addIconColumn !== false && declGrid.gridOptions.addIconColumn !== false ) {\n            let iconColumnFound = false;\n            let iconCellRenderer = null;\n\n            _.forEach( columnInfoIn, function( colInfo ) {\n                if( colInfo.name === 'icon' ) {\n                    iconColumnFound = true;\n                    return false;\n                }\n                // This block is added for PL table. Since icon column is hardcoded in this service,\n                // there is no way to provide a cell template at application layer. So added this hack.\n                // Once we correct the hardcoded way of creating icon column, this will no more be needed.\n                if( colInfo.isTableCommand && colInfo.iconCellRenderer ) {\n                    iconCellRenderer = colInfo.iconCellRenderer;\n                    return false;\n                }\n            } );\n\n            if( !iconColumnFound ) {\n                // Setup the special icon column\n                newColumnInfo = new AwTableColumnInfo();\n\n                newColumnInfo.name = 'icon';\n                newColumnInfo.displayName = '';\n                newColumnInfo.width = 34;\n                newColumnInfo.enableColumnMoving = false;\n                newColumnInfo.enableColumnMenu = false;\n                newColumnInfo.enableColumnResizing = false;\n                newColumnInfo.isFilteringEnabled = columnInfoIn.isFilteringEnabled !== false;\n                newColumnInfo.enableSorting = false;\n                newColumnInfo.visible = true;\n\n                if( _pinIconColumn ) {\n                    newColumnInfo.pinnedLeft = true;\n                }\n\n                if( iconCellRenderer ) {\n                    newColumnInfo.iconCellRenderer = iconCellRenderer;\n                }\n\n                finalColumnInfos.push( newColumnInfo );\n            }\n        }\n\n        let isArrangeSupported = cpSelf.isArrangeSupported();\n        let isSortingSupported = cpSelf.isSortingSupported();\n\n        let needsNavigationColumn = true;\n        _.forEach( columnInfoIn, function( colInfo ) {\n            if( colInfo.isTableCommand || colInfo.isTreeNavigation ) {\n                needsNavigationColumn = false;\n                return false;\n            }\n            return true;\n        } );\n\n        /**\n           * Create a new ('tweaked') AwTableColumnInfo for each of the given awColumnInfos.\n           */\n        _.forEach( columnInfoIn, function( info ) {\n            newColumnInfo = new AwTableColumnInfo();\n\n            /**\n               * Move over all existing property values\n               */\n            _.forEach( info, function( value, name ) {\n                newColumnInfo[ name ] = value;\n            } );\n\n            if( needsNavigationColumn ) {\n                if( _uwDataProvider && _uwDataProvider.accessMode === 'tree' ) {\n                    newColumnInfo.isTreeNavigation = true;\n                } else {\n                    newColumnInfo.isTableCommand = true;\n                }\n\n                needsNavigationColumn = false;\n            }\n\n            if( ( newColumnInfo.isTreeNavigation || newColumnInfo.isTableCommand ) && _commands ) {\n                newColumnInfo.commands = _commands;\n            }\n\n            newColumnInfo.commandsAnchor = _commandsAnchor;\n\n            // Even if sorting is supported at data provider level, if could be disabled at column level.\n            // check both values to decide sort enablement.\n\n            let sortPossibleForProp = isSortingSupported && newColumnInfo.enableSorting;\n\n            let typeDesc = cmm.getType( newColumnInfo.typeName );\n            if( typeDesc ) {\n                let propDesc = typeDesc.propertyDescriptorsMap[ newColumnInfo.propertyName ];\n                if( propDesc ) {\n                    // if no dataType specified, use property descriptor\n                    if( !newColumnInfo.dataType ) {\n                        newColumnInfo.dataType = propDesc.valueType;\n                    }\n                }\n            }\n\n            /**\n               * Adjust the properties (as necessary)\n               */\n            _tweakColumnInfo( newColumnInfo, isArrangeSupported, sortPossibleForProp );\n\n            // Add column filter\n            if( declGrid.gridOptions.isFilteringEnabled && newColumnInfo.isFilteringEnabled !== false ) {\n                let existingFilters = [];\n\n                const columnFilters = cpSelf.getColumnFilters();\n                _.forEach( columnFilters, function( currentFilter ) {\n                    if( newColumnInfo.field === currentFilter.columnName ) {\n                        existingFilters.push( currentFilter );\n                    }\n                } );\n\n                awColumnFilterService.updateColumnFilter( newColumnInfo, existingFilters );\n            }\n\n            /**\n               * check for duplicate column before adding\n               */\n            if( finalColumnInfos.find( function( finalColumnInfo ) {\n                return finalColumnInfo.name === newColumnInfo.name &&\n                          finalColumnInfo.typeName === newColumnInfo.typeName;\n            } ) ) {\n                logger.warn( 'Skipping duplicate column: ' + newColumnInfo.name );\n            } else {\n                finalColumnInfos.push( newColumnInfo );\n            }\n        } );\n        // Set sort from columns if sortCriteria is empty\n        const sortCriteria = cpSelf.getSortCriteria();\n        if( _.isEmpty( sortCriteria ) ) {\n            let sortPriority = NaN;\n            let sortDirection = '';\n            let sortColumn = null;\n            _.forEach( finalColumnInfos, function( currentColumn ) {\n                if( currentColumn.sortDirection && ( isNaN( sortPriority ) || currentColumn.sortPriority < sortPriority ) ) {\n                    sortPriority = currentColumn.sortPriority;\n                    sortDirection = currentColumn.sortDirection.toLowerCase().includes( 'desc' ) ? 'DESC' : 'ASC';\n                    sortColumn = currentColumn;\n                }\n            } );\n            if( sortColumn && sortColumn.enableSorting && sortDirection ) {\n                sortColumn.sort.direction = sortDirection;\n                sortColumn.sort.priority = 0;\n                cpSelf.setSortCriteria( [ {\n                    fieldName: sortColumn.field,\n                    sortDirection: sortDirection\n                } ] );\n            }\n        }\n        // checking if columns are set as frozen via xrt or vmo json otherwise rendered the default frozen columns\n        finalColumnInfos = _checkForFrozenColumnsConfiguration( finalColumnInfos );\n\n        return finalColumnInfos;\n    } // _buildFinalColumnInfos\n\n    /**\n       * checks and froze columns specified via xrt, vmo json or defualt.\n       * 1st prefrence is given to xrt, then vmo json and at last if nothing is specified, default columns will be forzen.\n       * (i.e. 1st col for tree & 1st,2nd col for table)\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Object} finalColumnInfos final columns config with frozen properties.\n       */\n    function _checkForFrozenColumnsConfiguration( allColumns ) {\n        var xrtConfigured = _checkFrozenColumnParameterConfig( allColumns );\n\n        if( !xrtConfigured ) {\n            var vmJsonConfigured = _checkFrozenColumnJsonConfig( allColumns );\n\n            if( !vmJsonConfigured ) {\n                _defaultFrozenColumns( allColumns );\n            }\n        }\n\n        return allColumns;\n    }\n\n    /**\n       * check and froze columns as specified in xrt\n       *\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Boolean} True if frozen column configuration is done via xrt.\n       */\n    function _checkFrozenColumnParameterConfig( allColumns ) {\n        var frozenIndex = -1;\n        // find the frozen col index\n        allColumns.forEach( function( col, index ) {\n            if( col.parameters && col.parameters.frozen === 'true' ) {\n                frozenIndex = index;\n            }\n        } );\n\n        // froze all columns upto xrt configured frozen col.\n        if( frozenIndex !== -1 && frozenIndex <= allColumns.length ) {\n            for( var i = 0; i <= frozenIndex; i++ ) {\n                allColumns[ i ].pinnedLeft = true;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n       * check and froze columns as specified in view model json\n       *\n       * @param {Object} allColumns - all columns of ui grid.\n       *\n       * @return {Boolean} True if frozen column configuration is done via vmo json.\n       */\n    function _checkFrozenColumnJsonConfig( allColumns ) {\n        if( _declViewModel && _declViewModel.columnProviders ) {\n            var columnProviders = [];\n            for( var provider in _declViewModel.columnProviders ) {\n                columnProviders.push( provider );\n            }\n\n            var frozenIndex = _declViewModel.columnProviders[ columnProviders[ 0 ] ].frozenColumnIndex;\n\n            if( frozenIndex === undefined ) {\n                return false;\n            }\n\n            if( frozenIndex >= 0 && frozenIndex <= allColumns.length ) {\n                // froze all columns upto frozenIndex specified in vmo json.\n                for( var index = 0; index <= frozenIndex; index++ ) {\n                    allColumns[ index ].pinnedLeft = true;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n       * freezing default columns i.e. 1st col for tree & 1st,2nd col for table\n       *\n       * @param {Object} allColumns - all columns of ui grid.             *\n       */\n    function _defaultFrozenColumns( allColumns ) {\n        if( allColumns && allColumns.length > 0 ) {\n            if( allColumns[ 0 ].name === 'icon' ) {\n                // this for table\n                // 0th column (contains icon) + 1st column must be frozen in table as an AC of AW-4227 & AW-67931\n                allColumns[ 0 ].pinnedLeft = true;\n                if( allColumns[ 1 ] ) {\n                    allColumns[ 1 ].pinnedLeft = true;\n                }\n            } else {\n                // In tree, 0th column (contains icon + name) must be frozen\n                allColumns[ 0 ].pinnedLeft = true;\n            }\n        }\n    }\n\n    /**\n       * @param {Object} columnProviderJSON - JSON object where the columnProvider is defined.\n       * @param {Object} passedState - State with which column provider invokes actions\n       *\n       * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n       */\n    function _initializedFromJSON( columnProviderJSON, passedState ) {\n        /**\n           * Set whether this column provider should interact with SOA APIs.\n           */\n        if( !declUtils.isNil( columnProviderJSON.soaEnabled ) ) {\n            _soaEnabled = columnProviderJSON.soaEnabled;\n        }\n        if( _declColumnProviderJSON ) {\n            try {\n                declarativeDataCtxSvc.applyScope( _declViewModel, _declColumnProviderJSON, null, passedState || _$scope, null );\n            } catch ( error ) {\n                throw new Error( error );\n            }\n\n            cpSelf.columnFilters = _declColumnProviderJSON.columnFilters;\n            cpSelf.sortCriteria = _declColumnProviderJSON.sortCriteria;\n        }\n\n        /**\n           * Check for column load and row property actions\n           */\n        var loadColumnAction = columnProviderJSON.loadColumnAction ? _declViewModel\n            .getAction( columnProviderJSON.loadColumnAction ) : null;\n\n        if( loadColumnAction ) {\n            if( loadColumnAction.deps ) {\n                return moduleLoader.loadDependentModule( loadColumnAction.deps ).then(\n                    function( moduleObj ) {\n                        return _executeLoadColumnAction( loadColumnAction, moduleObj, passedState );\n                    } );\n            }\n\n            return _executeLoadColumnAction( loadColumnAction, null );\n        }\n\n        /**\n           * Load from the dataProvider (if possible)\n           */\n        if( !_.isEmpty( _uwDataProvider.columnConfig ) && !_.isEmpty( _uwDataProvider.columnConfig.columns ) ) {\n            _uwDataProvider.cols = _buildFinalColumnInfos( _uwDataProvider.columnConfig.columns );\n\n            return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n        } else if( columnProviderJSON ) {\n            if( !_.isEmpty( columnProviderJSON.columnConfig ) && !_.isEmpty( columnProviderJSON.columnConfig.columns ) ) {\n                _uwDataProvider.cols = _buildFinalColumnInfos( columnProviderJSON.columnConfig.columns );\n\n                return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n            } else if( !_.isEmpty( columnProviderJSON.columns ) ) {\n                /**\n\n                  /**\n                   * For static column provider, setting width to auto and minWidth to 150.\n                   */\n                _.forEach( columnProviderJSON.columns, function autoResizeStaticColumns( column ) {\n                    if( !column.width ) {\n                        column.width = '*';\n                        column.minWidth = 150;\n                    }\n                } );\n\n                _updateColumnInfosFromColumnInfos( _uwDataProvider, columnProviderJSON.columns );\n\n                return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n            }\n        }\n\n        return AwPromiseService.instance.resolve( [] );\n    }\n\n    /**\n       * @param {DeclAction} loadColumnAction - Action used to load columns.\n       * @param {Object} loadColumnModuleObj - (Optional) Module API object to use when executing the action.\n       * @param {Object} passedState - State with which column provider invokes actions\n       *\n       * @return {Promise} Promise resolved with the loaded AwColumnInfos.\n       */\n    function _executeLoadColumnAction( loadColumnAction, loadColumnModuleObj, passedState ) {\n        /**\n           * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action event\n           * processing was started.\n           */\n        var localDataCtx = declUtils.resolveLocalDataCtx( _declViewModel, passedState || _$scope );\n\n        if( loadColumnAction ) {\n            return actionSvc.executeAction( _declViewModel, loadColumnAction, localDataCtx, loadColumnModuleObj )\n                .then( function( columnResult ) {\n                    if( columnResult && columnResult.columnInfos ) {\n                        _uwDataProvider.cols = _buildFinalColumnInfos( columnResult.columnInfos );\n                    } else if( _uwDataProvider.columnConfig && _uwDataProvider.columnConfig.columns ) {\n                        _uwDataProvider.cols = _buildFinalColumnInfos( _uwDataProvider.columnConfig.columns );\n                    }\n\n                    return _uwDataProvider.cols;\n                } );\n        }\n\n        return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n    }\n\n    /**\n       *\n       * @param {AwColumnInfoArray} columnInfos - Collection of Object containing the 'cok\n       */\n    function _updateColumnInfosFromColumnInfos( uwDataProvider, columnInfos ) {\n        uwDataProvider.cols = _buildFinalColumnInfos( columnInfos );\n    } // _updateColumnInfosFromColumnInfos\n\n    /**\n       * ---------------------------------------------------------------------<br>\n       * Define the exposed API <BR>\n       * ---------------------------------------------------------------------<br>\n       */\n\n    /**\n       * Build the new dynamic columns, and update the grid control\n       *\n       * @param {AwTableColumnInfoArray} columnInfosIn - the new set of columns\n       * @param {Boolean} updateDataProvider - update the grid ui?\n       * @returns {Promise} to ensure _uwDataProvider.cols is updated before used.\n       */\n    cpSelf.buildDynamicColumns = function( columnInfosIn, updateDataProvider ) {\n        if( _soaEnabled ) {\n            var typeNames = [];\n\n            _.forEach( columnInfosIn, function( columnInfo ) {\n                if( columnInfo.typeName ) {\n                    typeNames.push( columnInfo.typeName );\n                } else if( columnInfo.associatedTypeName ) {\n                    typeNames.push( columnInfo.associatedTypeName );\n                }\n            } );\n            typeNames = _.uniq( typeNames );\n\n            return soaService.ensureModelTypesLoaded( typeNames ).then( function() {\n                var columnInfos = _buildFinalColumnInfos( columnInfosIn );\n\n                if( updateDataProvider ) {\n                    var oldCols = _uwDataProvider.cols;\n                    _uwDataProvider.cols = columnInfos;\n\n                    // preserve properties that were not included in new columns\n                    _.forEach( oldCols, function( oldCol ) {\n                        _.forEach( _uwDataProvider.cols, function( currentColumn ) {\n                            if( currentColumn.name === oldCol.name ) {\n                                if( oldCol.enableColumnMoving === false ) {\n                                    currentColumn.enableColumnMoving = false;\n                                }\n                                // Handle column filter logic\n                                awColumnFilterService.updateNewColumnFilter( currentColumn, oldCol );\n                                // XRT properties\n                                var xrtProperties = [ 'renderingHint', 'parameters', 'modifiable', 'isTableCommand', 'enableSorting', 'isFilteringEnabled' ];\n\n                                _.forEach( xrtProperties, function( propertyName ) {\n                                    if( currentColumn[ propertyName ] === undefined ) {\n                                        currentColumn[ propertyName ] = oldCol[ propertyName ];\n                                    }\n                                } );\n\n                                return false;\n                            }\n                        } );\n                    } );\n                }\n            } );\n        } else if( updateDataProvider ) {\n            _uwDataProvider.cols = _buildFinalColumnInfos( columnInfosIn );\n            return Promise.resolve();\n        }\n    }; // buildDynamicColumns\n\n    /**\n       * Get the current columns\n       *\n       * @return {ArrayUwGridColumnInfo} an array of UwGridColumnInfo that represent the columns specified by EITHER\n       *         the given 'declViewModel' (columnPropNames, columnDisplayNames & nColsToFreeze) OR\n       *         'declGrid.columnDefs'\n       */\n    cpSelf.getColumns = function() {\n        if( _uwDataProvider && _uwDataProvider.cols ) {\n            return _uwDataProvider.cols;\n        }\n        return null;\n    };\n\n    /**\n       * Change the size of one of the columns\n       *\n       * @param {String} name - The name of the column that has had it's size change\n       * @param {Integer} delta - The change in size of the column\n       *\n       */\n    cpSelf.columnSizeChanged = function( name, delta ) {\n        var columnInfos = cpSelf.getColumns();\n\n        _.forEach( columnInfos, function( columnInfo ) {\n            if( columnInfo.name === name ) {\n                columnInfo.width += delta;\n\n                /**\n                   * Previously ui-grid was enforcing min and max, but it seems we need to do it here for now Also\n                   * round since IE11 is returning a float instead of an int\n                   */\n                columnInfo.width = Math.round( Math.max( columnInfo.width, columnInfo.minWidth ) );\n\n                if( columnInfo.pixelWidth ) {\n                    columnInfo.pixelWidth = columnInfo.width;\n                }\n\n                return false;\n            }\n        } );\n\n        eventBus.publish( 'columnArrange', {\n            name: _gridId,\n            columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n            arrangeType: 'saveColumnAction',\n            columns: columnInfos\n        } );\n    };\n\n    /**\n       * Re-order one of the columns\n       *\n       * @param {String} name - The name of the column that has been moved\n       * @param {Integer} origPosition - column's original position\n       * @param {Integer} newPosition - column's new position\n       */\n    cpSelf.columnOrderChanged = function( name, origPosition, newPosition ) {\n        var columnInfos = cpSelf.getColumns();\n\n        // assume icon is using col 0 and we don't have to adjust indexes for splicing below\n        // if not, adjust indexes\n        if( columnInfos[ 0 ].name !== 'icon' ) {\n            origPosition = origPosition > 0 ? origPosition - 1 : 0;\n            newPosition = newPosition > 0 ? newPosition - 1 : 0;\n        }\n\n        // dis-allow positioning to the left of any initial un-moveable columns\n        while( columnInfos[ newPosition ] && columnInfos[ newPosition ].enableColumnMoving === false ) {\n            newPosition++;\n        }\n\n        var movedColumnInfo = columnInfos.splice( origPosition, 1 );\n        columnInfos.splice( newPosition, 0, movedColumnInfo[ 0 ] );\n\n        eventBus.publish( 'columnArrange', {\n            name: _gridId,\n            columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n            arrangeType: 'saveColumnAction',\n            columns: columnInfos\n        } );\n    };\n\n    /**\n       * Hide one of the columns\n       *\n       * @param {Integer} columnIndex - The index of the column that has been hidden\n       */\n    cpSelf.hideColumn = function( columnIndex ) {\n        var columnInfos = cpSelf.getColumns();\n        let operation = _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.operationType : '';\n\n        columnInfos[ columnIndex ].hiddenFlag = true;\n\n        eventBus.publish( 'columnArrange', {\n            name: _gridId,\n            columnConfigId: _uwDataProvider.columnConfig ? _uwDataProvider.columnConfig.columnConfigId : null,\n            arrangeType: 'saveColumnAndLoadAction',\n            columns: columnInfos,\n            operationType: operation\n        } );\n    };\n\n    /**\n       * Get the current sort criteria\n       */\n    cpSelf.getSortCriteria = function() {\n        return cpSelf.sortCriteria;\n    };\n\n    /**\n       * Set the current sort criteria\n       *\n       * @param {Object[]} sortCriteria - The new sort criteria\n       */\n    cpSelf.setSortCriteria = function( sortCriteria ) {\n        cpSelf.sortCriteria = sortCriteria;\n        if( _declColumnProviderJSON ) {\n            _declColumnProviderJSON.sortCriteria = sortCriteria;\n        }\n    };\n\n    /**\n       * Get the current column filters\n       * @return {Object[]} columnFilters - the column filters\n       */\n    cpSelf.getColumnFilters = function() {\n        return cpSelf.columnFilters;\n    };\n\n    /**\n       * Set the column filters\n       * @param {Object[]} columnFilters - the column filters\n       */\n    cpSelf.setColumnFilters = function( columnFilters ) {\n        cpSelf.columnFilters = columnFilters;\n        if( _declColumnProviderJSON ) {\n            _declColumnProviderJSON.columnFilters = columnFilters;\n        }\n    };\n\n    /**\n       * Free up all resources held/managed by this object.\n       * <P>\n       * Note: After this function, no API call should be considered valid. This function is intended to be called\n       * when the $scope of any associated viewModel is also being 'destroyed'. After this call (and a GC event), any\n       * objects managed by this class may be considered a 'memory leak'.\n       */\n    cpSelf.destroy = function() {\n        _declViewModel = null;\n        _uwDataProvider = null; // Note: We did not create this object, so it's not ours to destroy\n        _$scope = null;\n        _commands = null;\n\n        cpSelf = null;\n    };\n\n    cpSelf.setAdditionalPrams = function( commands, commandsAnchor, dataCtxNode ) {\n        _commands = commands;\n        _commandsAnchor = commandsAnchor;\n        _$scope = dataCtxNode;\n    };\n\n    /**\n       * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n       *         additional declActions necessary to support column arranging.\n       */\n    cpSelf.isArrangeSupported = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        if( _declViewModel.columnProviders ) {\n            var colProvider = _declViewModel.columnProviders[ declGrid.columnProvider ];\n\n            assert( colProvider, 'Invalid columnProvider' );\n\n            return colProvider.resetColumnAction && colProvider.saveColumnAndLoadAction;\n        }\n\n        return false;\n    };\n\n    /**\n       * @return {Boolean} TRUE support column filtering.\n       */\n    cpSelf.isFilteringSupported = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        return declGrid.gridOptions.isFilteringEnabled === true;\n    };\n\n    /**\n       * @return {Boolean} TRUE if the declColumnProvider associated with this tableColumnProvider specifies the\n       *         additional option or declActions necessary to support column sorting.\n       */\n    cpSelf.isSortingSupported = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        /**\n           * Check if the declGrid options indicates if 'external' sorting is supported or not.\n           */\n        if( !declUtils.isNil( declGrid.gridOptions.useExternalSorting ) ) {\n            return declGrid.gridOptions.useExternalSorting;\n        }\n\n        /**\n           * Since the options did not indicate support, check if the declColumnProvider indicates sorting by the\n           * existence of a declAction for sorting.\n           */\n        if( !_declViewModel.columnProviders ) {\n            return false;\n        }\n        var colProvider = _declViewModel.columnProviders[ declGrid.columnProvider ];\n\n        assert( colProvider, 'Invalid columnProvider' );\n\n        if( !declUtils.isNil( colProvider.sortColumnAction ) ) {\n            return true;\n        }\n\n        /**\n           * Note: Since aw3.3 'useExternalSorting' is true by default. This default should be changed to FALSE, but\n           * until then we need to honor it here. The declGrid in the declViewModel should override that property if\n           * they do NOT want 'useExternalSorting' to be true.\n           */\n        return true;\n    };\n\n    /**\n       * @return {String} Column provider Id, it is equal to clientScopeURI for aw tables if specified.\n       */\n    cpSelf.getId = function() {\n        declUtils.assertValidModel( _declViewModel );\n\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'Invalid declGrid' );\n\n        if( _declViewModel.columnProviders ) {\n            var colProvider = _declViewModel.columnProviders[ declGrid.columnProvider ];\n\n            assert( colProvider, 'Invalid columnProvider' );\n\n            return colProvider.id;\n        }\n\n        return null;\n    };\n\n    /**\n       * @return {Promise} A Promise resolved with the initial array of AwTableColumnInfo.\n       */\n    cpSelf.initialize = function( passedState ) {\n        /**\n           * Check for columnProvider on viewModel\n           */\n        if( _declColumnProviderJSON ) {\n            return _initializedFromJSON( _declColumnProviderJSON, passedState );\n        }\n\n        /**\n           * Use properties placed on the 'declViewModel' as the basis of the column information.\n           * <P>\n           * Note: This is what the shf measurement table does, but should update to use col provider\n           */\n        var columnPropNames = _declViewModel.columnPropNames ? _declViewModel.columnPropNames : [];\n        var columnDisplayNames = _declViewModel.columnDisplayNames ? _declViewModel.columnDisplayNames : [];\n        var nColsToFreeze = _declViewModel.nColsToFreeze ? _declViewModel.nColsToFreeze : 0;\n\n        var newColumnInfos = [];\n\n        for( var index = 0; index < columnPropNames.length; index++ ) {\n            var columnInfo = new AwTableColumnInfo();\n\n            columnInfo.name = columnPropNames[ index ];\n\n            if( columnDisplayNames !== null && columnDisplayNames.length > index ) {\n                columnInfo.displayName = columnDisplayNames[ index ];\n            }\n\n            if( index < nColsToFreeze ) {\n                columnInfo.pinnedLeft = true;\n            }\n\n            newColumnInfos.push( columnInfo );\n        }\n\n        _uwDataProvider.cols = newColumnInfos;\n\n        return AwPromiseService.instance.resolve( _uwDataProvider.cols );\n    }; // initialize\n\n    /**\n       * ---------------------------------------------------------------------------<BR>\n       * Property & Function definition complete....Finish initialization. <BR>\n       * ---------------------------------------------------------------------------<BR>\n       */\n\n    /**\n       * Validate parameters and initialize fields\n       */\n    assert( _declViewModel, 'No in DeclViewModel specified ' );\n    // assert( _gridId, 'No DeclGrid specified ' );\n\n    if( _gridId ) {\n        var declGrid = _declViewModel.grids[ _gridId ];\n\n        assert( declGrid, 'No DeclGrid specified ' );\n\n        if( _declViewModel.dataProviders && declGrid.dataProvider ) {\n            _uwDataProvider = _declViewModel.dataProviders[ declGrid.dataProvider ];\n        }\n\n        if( _declViewModel.columnProviders && declGrid.columnProvider ) {\n            _declColumnProviderJSON = _declViewModel.columnProviders[ declGrid.columnProvider ];\n            if( !_.isEmpty( _declColumnProviderJSON.columnConfig ) && !_.isEmpty( _declColumnProviderJSON.columnConfig.columns ) ) {\n                _uwDataProvider.columnConfig = _declColumnProviderJSON.columnConfig;\n            }\n            if( _declColumnProviderJSON.objectSetUri ) {\n                _uwDataProvider.objectSetUri = _declColumnProviderJSON.objectSetUri;\n            }\n        }\n\n        assert( _uwDataProvider, 'No DataProvider specified in DeclViewModel' );\n\n        if( declGrid.hasOwnProperty( 'pinIconColumn' ) ) {\n            _pinIconColumn = declGrid.pinIconColumn;\n        }\n    }\n}; // AwTableColumnProvider\n\n/**\n   * ----------------------------------------------------------------------------<BR>\n   * Define published service APIs<BR>\n   * ----------------------------------------------------------------------------<BR>\n   */\nvar exports = {};\n\n/**\n   * @param {Object} columnProperties - (Optional) An object who's properties will overwrite the default values of the\n   *            new AwTableColumnInfo object.\n   *\n   * @return {AwTableColumnInfo} Newly created AwTableColumnInfo object.\n   */\nexport let createColumnInfo = function( columnProperties ) {\n    var columnInfo = new AwTableColumnInfo();\n\n    if( columnProperties ) {\n        _.forEach( columnProperties, function( value, name ) {\n            columnInfo[ name ] = value;\n        } );\n    }\n\n    return columnInfo;\n};\n\n/**\n   * @param {AwTableColumnInfo} awColumnInfo -\n   * @param {Number} columnOrder -\n   */\nexport let createSoaColumnInfo = function( awColumnInfo, columnOrder ) {\n    return new AwSoaColumnInfo( columnOrder, awColumnInfo.hiddenFlag, awColumnInfo.pixelWidth,\n        awColumnInfo.propertyName, awColumnInfo.sortDirection, awColumnInfo.sortPriority, awColumnInfo.typeName, awColumnInfo.isFilteringEnabled );\n};\n\n/**\n   * Create the column provider\n   *\n   * @param {DeclViewModel} declViewModel - The 'declViewModel' with the properties to use.\n   * @param {Scope} $scope - The AngularJS data context node.\n   * @param {Array} commands - The list of associated commands\n   * @param {String} gridId - The ID of the associated 'declGrid'.\n   *\n   * @return {AwTableColumnProvider} Newly created AwTableColumnProvider object.\n   */\nexport let createColumnProvider = function( declViewModel, $scope, commands, gridId, commandsAnchor ) {\n    return new AwTableColumnProvider( declViewModel, $scope, commands, gridId, commandsAnchor );\n};\n\nexports = {\n    createColumnInfo,\n    createSoaColumnInfo,\n    createColumnProvider\n};\nexport default exports;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
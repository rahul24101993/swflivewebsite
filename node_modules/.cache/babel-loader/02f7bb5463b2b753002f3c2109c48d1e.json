{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwCommandListService.js\",\n    _this = this; // Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandListService\n */\n\n\nimport AwCommand from 'viewmodel/AwCommandViewModel';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';\n/**\n * Popup configuration for the overflow popup on command bars\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst overflowPopupOptions = {\n  advancePositioning: true,\n  autoFocus: true,\n  clickOutsideToClose: true,\n  closeWhenEsc: true,\n  flipBehavior: 'opposite',\n  resizeContainer: 'div.aw-layout-popup',\n  selectedElementCSS: '.aw-state-selected',\n  toggleMode: true,\n  whenParentScrolls: 'follow'\n};\n/**\n * Get class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */\n\nconst getCommandLabelClass = showCommandLabels => {\n  if (showCommandLabels === false) {\n    return 'aw-commands-noLabel';\n  }\n\n  if (showCommandLabels === true) {\n    return 'aw-commands-showIconLabel';\n  } //No override, use the global show/hide\n\n\n  return '';\n};\n/**\n * Get where the extended tooltip for the overflow button should be positioned\n *\n * @param {String} alignment Alignment\n * @returns {String} Extended tooltip position\n */\n\n\nconst getTooltipPlacement = function (alignment) {\n  var placement = 'top';\n\n  if (alignment === 'VERTICAL') {\n    placement = 'left';\n  }\n\n  return placement;\n};\n\nexport const awCommandListRenderFunction = _ref => {\n  let {\n    alignment,\n    visibilityLoader,\n    commandContext,\n    anchor,\n    ctxMin: {\n      commandDisplays: cd\n    },\n    className,\n    showCommandLabels,\n    elementRefList,\n    overflow,\n    hideMore,\n    trace = () => null,\n    reverse = false,\n    actions: {\n      overflowPopup\n    },\n    i18n,\n    viewModel: {\n      _observer,\n      _overflownCommands\n    }\n  } = _ref;\n  const commandDisplays = reverse ? cd.reverse() : cd;\n  const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';\n  const commandLabelsClass = getCommandLabelClass(showCommandLabels); //The element used to determine overflow\n\n  const commandBarMain = elementRefList.get('commandBarMain');\n  let overflownCommandsCount = 0;\n  const visibleCommands = commandDisplays.filter(x => {\n    if (x.visible) {\n      _overflownCommands[x.id] && overflownCommandsCount++;\n      return true;\n    }\n\n    return null;\n  });\n  trace(`${visibleCommands.length} commands are visible, computing command overflow`);\n  const hasOverflow = overflownCommandsCount > 0;\n  const noOverflowCls = !hasOverflow ? 'aw-no-overflow' : 'aw-use-commandOverflow';\n  trace('Non overflow command count', visibleCommands.length - overflownCommandsCount, 'has overflow', hasOverflow);\n  /**\n   * Callback for when a command within the overflow popup is clicked\n   *\n   * @param {Boolean} hasPopup Whether the command that was clicked will open a popup\n   */\n\n  const childCommandClickCallback = hasPopup => {\n    if (hasPopup !== true) {\n      overflowPopup.hide();\n    }\n  };\n  /**\n   * Get a click handler for the command overflow button\n   *\n   * @returns {Function} Click handler\n   */\n\n\n  const getOverflowClickHandler = () => {\n    return e => {\n      e.stopPropagation();\n\n      if (overflowPopup.open) {\n        overflowPopup.hide();\n      } else {\n        overflowPopup.show({ ...overflowPopupOptions,\n          placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'\n        });\n      }\n    };\n  };\n  /**\n   * Render the extended tooltip for the overflow button\n   *\n   * @returns {JSX} Extended tooltip element\n   */\n\n\n  const renderOverflowExtendedTooltip = () => {\n    return /*#__PURE__*/_jsxDEV(AwExtendedTooltip, {\n      reference: overflowPopup.reference,\n      extendedTooltipContext: {\n        title: i18n.MORE_BUTTON_TITLE\n      },\n      extendedTooltipOptions: {\n        isCommand: true,\n        placement: getTooltipPlacement(alignment)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 16\n    }, this);\n  };\n  /**\n   * Render the horizontal overflow toggle button\n   *\n   * @returns {JSX} Horizontal overflow element\n   */\n\n\n  const renderHorizontalOverflowButton = () => {\n    const overflowClickHandler = getOverflowClickHandler();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-toolbarIcon aw-commands-moreButton\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `aw-commands-commandToolbarIconButton aw-use-commandOverflow ${overflowPopup.open ? 'aw-state-selected' : ''}`,\n        title: i18n.MORE_BUTTON_TITLE,\n        \"aria-label\": i18n.MORE_BUTTON_TITLE,\n        onClick: overflowClickHandler,\n        ref: overflowPopup.reference,\n        children: /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: 'cmdMore',\n          className: 'aw-commands-svg'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), renderOverflowExtendedTooltip()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 16\n    }, this);\n  };\n  /**\n   * Render the vertical overflow toggle button\n   *\n   * @returns {JSX} Horizontal overflow element\n   */\n\n\n  const renderVerticalOverflowButton = () => {\n    const overflowLabel = overflowPopup.open ? i18n.LESS_LINK_TEXT : i18n.MORE_LINK_TEXT;\n    const overflowClickHandler = getOverflowClickHandler();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aw-command-overflowIcon\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `aw-commands-commandIconButton aw-commands-commandWrapperVertical ${overflowPopup.open ? 'aw-state-selected' : ''}`,\n        title: overflowLabel,\n        \"aria-label\": overflowLabel,\n        onClick: overflowClickHandler,\n        ref: overflowPopup.reference,\n        children: [/*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: 'miscChevronDown',\n          className: `aw-commands-svg ${overflowPopup.open ? 'aw-icon-rotate' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-commands-commandIconButtonText\",\n          children: overflowLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), renderOverflowExtendedTooltip()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 16\n    }, this);\n  };\n\n  const getOverflownCommands = () => {\n    return visibleCommands.filter(command => {\n      if (command && _overflownCommands[command.id]) {\n        return true;\n      }\n\n      return null;\n    });\n  };\n  /**\n   * Render the overflow popup content\n   *\n   * @returns {JSX} content\n   */\n\n\n  const renderOverflowPopupContent = () => {\n    return overflowPopup.open && /*#__PURE__*/_jsxDEV(AwPopup, { ...overflowPopup.options,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aw-popup-command-bar\",\n        children: getOverflownCommands().map(command => /*#__PURE__*/_jsxDEV(AwPopupCommandCell, {\n          commandContext: commandContext,\n          command: command,\n          alignment: alignment,\n          visibilityLoader: visibilityLoader,\n          overflow: true,\n          childCommandClickCallback: childCommandClickCallback\n        }, command && command.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 38\n    }, this);\n  };\n\n  const isOverflowenabled = (alignment === 'HORIZONTAL' || !alignment) && overflow !== true ? null : true;\n\n  const renderCommands = function () {\n    let disableOverflow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return visibleCommands.map(command => /*#__PURE__*/_jsxDEV(AwCommand, {\n      commandContext: commandContext,\n      command: command,\n      alignment: alignment,\n      visibilityLoader: visibilityLoader,\n      overflow: _overflownCommands[command.id] ? true : null,\n      commandObserver: disableOverflow ? null : _observer\n    }, command && command.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, _this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `aw-command-bar ${alignmentCls} ${overflow ? 'aw-use-commandOverflow' : ''}`,\n    anchor: anchor,\n    ref: commandBarMain,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `aw-commands-wrapper ${commandLabelsClass} ${noOverflowCls}`,\n      children: [isOverflowenabled && _observer && renderCommands(), !isOverflowenabled && renderCommands(true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), hasOverflow && !hideMore && alignment === 'VERTICAL' ? renderVerticalOverflowButton() : null, hasOverflow && !hideMore && alignment !== 'VERTICAL' ? renderHorizontalOverflowButton() : null, renderOverflowPopupContent()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwCommandListService.js"],"names":["overflowPopupOptions","advancePositioning","autoFocus","clickOutsideToClose","closeWhenEsc","flipBehavior","resizeContainer","selectedElementCSS","toggleMode","whenParentScrolls","getCommandLabelClass","showCommandLabels","getTooltipPlacement","placement","alignment","awCommandListRenderFunction","ctxMin","commandDisplays","cd","trace","reverse","actions","overflowPopup","viewModel","_overflownCommands","alignmentCls","commandLabelsClass","commandBarMain","elementRefList","overflownCommandsCount","visibleCommands","x","length","hasOverflow","noOverflowCls","childCommandClickCallback","hasPopup","getOverflowClickHandler","e","renderOverflowExtendedTooltip","title","i18n","MORE_BUTTON_TITLE","isCommand","renderHorizontalOverflowButton","overflowClickHandler","renderVerticalOverflowButton","overflowLabel","getOverflownCommands","command","renderOverflowPopupContent","isOverflowenabled","overflow","renderCommands","disableOverflow","_observer"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/AwCommandListService\n */\nimport AwCommand from 'viewmodel/AwCommandViewModel';\nimport AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';\n\n/**\n * Popup configuration for the overflow popup on command bars\n */\nconst overflowPopupOptions = {\n    advancePositioning: true,\n    autoFocus: true,\n    clickOutsideToClose: true,\n    closeWhenEsc: true,\n    flipBehavior: 'opposite',\n    resizeContainer: 'div.aw-layout-popup',\n    selectedElementCSS: '.aw-state-selected',\n    toggleMode: true,\n    whenParentScrolls: 'follow'\n};\n\n/**\n * Get class to use based on the \"showCommandLabels\" option\n *\n * @param {Boolean} showCommandLabels true/false\n * @returns {String} Class to use\n */\nconst getCommandLabelClass = ( showCommandLabels ) => {\n    if( showCommandLabels === false ) {\n        return 'aw-commands-noLabel';\n    }\n    if( showCommandLabels === true ) {\n        return 'aw-commands-showIconLabel';\n    }\n    //No override, use the global show/hide\n    return '';\n};\n\n/**\n * Get where the extended tooltip for the overflow button should be positioned\n *\n * @param {String} alignment Alignment\n * @returns {String} Extended tooltip position\n */\nconst getTooltipPlacement = function( alignment ) {\n    var placement = 'top';\n    if( alignment === 'VERTICAL' ) {\n        placement = 'left';\n    }\n    return placement;\n};\n\nexport const awCommandListRenderFunction = ( { alignment, visibilityLoader, commandContext, anchor, ctxMin: { commandDisplays: cd },\n    className, showCommandLabels, elementRefList, overflow, hideMore, trace = () => null, reverse = false,\n    actions: { overflowPopup }, i18n, viewModel: { _observer, _overflownCommands } } ) => {\n    const commandDisplays = reverse ? cd.reverse() : cd;\n    const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';\n    const commandLabelsClass =  getCommandLabelClass( showCommandLabels );\n    //The element used to determine overflow\n    const commandBarMain = elementRefList.get( 'commandBarMain' );\n    let overflownCommandsCount = 0;\n    const visibleCommands = commandDisplays.filter( x => {\n        if ( x.visible ) {\n            _overflownCommands[ x.id ] && overflownCommandsCount++;\n            return true;\n        }\n        return null;\n    } );\n    trace( `${visibleCommands.length} commands are visible, computing command overflow` );\n\n    const hasOverflow = overflownCommandsCount > 0;\n    const noOverflowCls = !hasOverflow ? 'aw-no-overflow' : 'aw-use-commandOverflow';\n    trace( 'Non overflow command count', visibleCommands.length - overflownCommandsCount, 'has overflow', hasOverflow );\n\n    /**\n     * Callback for when a command within the overflow popup is clicked\n     *\n     * @param {Boolean} hasPopup Whether the command that was clicked will open a popup\n     */\n    const childCommandClickCallback = ( hasPopup ) => {\n        if( hasPopup !== true ) {\n            overflowPopup.hide();\n        }\n    };\n\n    /**\n     * Get a click handler for the command overflow button\n     *\n     * @returns {Function} Click handler\n     */\n    const getOverflowClickHandler = () => {\n        return ( e ) => {\n            e.stopPropagation();\n            if( overflowPopup.open ) {\n                overflowPopup.hide();\n            } else {\n                overflowPopup.show( {\n                    ...overflowPopupOptions,\n                    placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'\n                } );\n            }\n        };\n    };\n\n    /**\n     * Render the extended tooltip for the overflow button\n     *\n     * @returns {JSX} Extended tooltip element\n     */\n    const renderOverflowExtendedTooltip = () => {\n        return <AwExtendedTooltip\n            reference={overflowPopup.reference}\n            extendedTooltipContext={{ title: i18n.MORE_BUTTON_TITLE }}\n            extendedTooltipOptions={{ isCommand: true, placement : getTooltipPlacement( alignment ) }}>\n        </AwExtendedTooltip>;\n    };\n\n    /**\n     * Render the horizontal overflow toggle button\n     *\n     * @returns {JSX} Horizontal overflow element\n     */\n    const renderHorizontalOverflowButton = () => {\n        const overflowClickHandler = getOverflowClickHandler( );\n        return <div className='aw-toolbarIcon aw-commands-moreButton'>\n            <button type='button'\n                className={`aw-commands-commandToolbarIconButton aw-use-commandOverflow ${ overflowPopup.open ? 'aw-state-selected' : '' }`}\n                title={i18n.MORE_BUTTON_TITLE}\n                aria-label={i18n.MORE_BUTTON_TITLE}\n                onClick={overflowClickHandler}\n                ref={overflowPopup.reference}>\n                <AwIcon iconId={'cmdMore'} className={'aw-commands-svg'}></AwIcon>\n            </button>\n            { renderOverflowExtendedTooltip() }\n        </div>;\n    };\n\n    /**\n     * Render the vertical overflow toggle button\n     *\n     * @returns {JSX} Horizontal overflow element\n     */\n    const renderVerticalOverflowButton = () => {\n        const overflowLabel = overflowPopup.open ? i18n.LESS_LINK_TEXT : i18n.MORE_LINK_TEXT;\n        const overflowClickHandler = getOverflowClickHandler();\n        return <div className='aw-command-overflowIcon'>\n            <button type='button'\n                className={`aw-commands-commandIconButton aw-commands-commandWrapperVertical ${ overflowPopup.open ? 'aw-state-selected' : '' }`}\n                title={overflowLabel}\n                aria-label={overflowLabel}\n                onClick={overflowClickHandler}\n                ref={overflowPopup.reference}>\n                <AwIcon iconId={'miscChevronDown'} className={`aw-commands-svg ${overflowPopup.open ? 'aw-icon-rotate' : ''}`}></AwIcon>\n                <div className='aw-commands-commandIconButtonText'>{overflowLabel}</div>\n            </button>\n            { renderOverflowExtendedTooltip() }\n        </div>;\n    };\n\n    const getOverflownCommands = () => {\n        return visibleCommands.filter( ( command ) => {\n            if( command && _overflownCommands[ command.id ] ) {\n                return true;\n            }\n            return null;\n        } );\n    };\n\n    /**\n     * Render the overflow popup content\n     *\n     * @returns {JSX} content\n     */\n    const renderOverflowPopupContent = () => {\n        return overflowPopup.open && <AwPopup {...overflowPopup.options}>\n            <div className='aw-popup-command-bar'>\n                { getOverflownCommands().map( command =>\n                    <AwPopupCommandCell commandContext={commandContext} key={command && command.id}\n                        command={command} alignment={alignment} visibilityLoader={visibilityLoader}\n                        overflow={true} childCommandClickCallback={childCommandClickCallback}></AwPopupCommandCell> )}\n            </div>\n        </AwPopup>;\n    };\n\n    const isOverflowenabled = ( alignment === 'HORIZONTAL' || !alignment ) && overflow !== true ? null : true;\n    const renderCommands = ( disableOverflow = false ) => {\n        return visibleCommands.map( command =>\n            <AwCommand commandContext={commandContext}\n                key={command && command.id}\n                command={command} alignment={alignment}\n                visibilityLoader={visibilityLoader}\n                overflow={_overflownCommands[ command.id ] ? true : null}\n                commandObserver={disableOverflow ? null : _observer}></AwCommand> );\n    };\n\n    return (\n        <div className={`aw-command-bar ${alignmentCls} ${overflow ? 'aw-use-commandOverflow' : ''}` } anchor={anchor} ref={commandBarMain}>\n            {/* Non overflow commands */}\n            <div className={`aw-commands-wrapper ${commandLabelsClass} ${noOverflowCls}`}>\n                { isOverflowenabled && _observer && renderCommands()}\n                { !isOverflowenabled && renderCommands( true )}\n            </div>\n            {/* Vertical overflow button */}\n            { hasOverflow && !hideMore && alignment === 'VERTICAL' ? renderVerticalOverflowButton() : null }\n            {/* Horizontal overflow button */}\n            { hasOverflow && !hideMore && alignment !== 'VERTICAL' ? renderHorizontalOverflowButton() : null }\n            {/* Overflow popup */}\n            { renderOverflowPopupContent() }\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
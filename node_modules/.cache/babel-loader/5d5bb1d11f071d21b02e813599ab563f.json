{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/localeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport cfgSvc from 'js/configurationService';\nimport localStrg from 'js/localStorage'; // revisitme - should be 'config/installedLocales'\n\nimport 'js/installedLocales';\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * The country (i.e. region) code of the current locale that will be appended to the textBundle name to resolve the\n * text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)).\n *\n * @private\n */\n\nvar _bundleSuffix = '';\n/**\n * Locale value set up-to-date once login is complete.\n * <P>\n * Note: Until login, the default values we be as shown here.\n *\n * @private\n */\n\nvar _localeCode;\n/**\n * Cache of installed locales\n * @private\n */\n\n\nvar _installedLocales;\n/**\n * Local Storage key for last used locale.\n * @private\n */\n\n\nvar getBrowserSessionLocaleKey = 'locale';\n/**\n * Default locale if local storage locale is undefined\n * @private\n */\n\nvar getDefaultLocaleCode = 'en';\nlet exports;\n/**\n * @return {String[]} array of installed locales\n */\n\nexport let getInstalledLocales = function () {\n  return _installedLocales;\n};\n/**\n * @param {String} locale - input locale\n * @return {String|null} resolved locale\n */\n\nfunction matchInstalledLocales(locale) {\n  locale = locale.replace(/-/g, '_');\n\n  if (_installedLocales.indexOf(locale) > -1) {\n    return locale;\n  } // search by the 2 character locale\n\n\n  var localeShort = locale.substring(0, 2).toLowerCase();\n\n  var ndx = _installedLocales.indexOf(localeShort);\n\n  if (ndx > -1) {\n    return _installedLocales[ndx];\n  } // search by ignoring case\n\n\n  var resolvedLocale;\n\n  _.forEach(_installedLocales, function (installedLocale) {\n    if (locale.toLowerCase() === installedLocale.toLowerCase()) {\n      resolvedLocale = installedLocale;\n      return false; // break\n    }\n  });\n\n  if (!resolvedLocale) {\n    // search based upon only the first 2 characters\n    _.forEach(_installedLocales, function (installedLocale) {\n      if (localeShort && installedLocale.startsWith(localeShort)) {\n        resolvedLocale = installedLocale;\n        return false; // break\n      }\n    });\n  }\n\n  return resolvedLocale;\n}\n/**\n * Return the current locale from the URL or browsers 'userAgent'\n *\n * @return {String} The 'locale' code for the current browser session based on a 'locale=' query in the URL or the\n *         browsers 'userAgent' (e.g. 'en_US', 'zh_CN', etc.).\n */\n\n\nfunction resolveLocale() {\n  var localeCode;\n  /**\n   * (1) Look for the 'locale' in the URL and if found extract the value from it.\n   */\n\n  var localeFromURL = browserUtils.getUrlAttributes().locale;\n\n  if (localeFromURL) {\n    localeCode = matchInstalledLocales(localeFromURL);\n\n    if (!localeCode) {\n      // Remove invalid locale settings from URL\n      browserUtils.removeUrlAttribute('locale');\n    }\n  }\n\n  if (!localeCode) {\n    /**\n     * (2) Check localStorage for a last used locale\n     */\n    localeCode = localStrg.get(getBrowserSessionLocaleKey);\n\n    if (localeCode) {\n      localeCode = matchInstalledLocales(localeCode);\n    }\n  }\n\n  if (!localeCode) {\n    /**\n     * (3) Check if we should simply assume the browser's current locale setting.\n     */\n    var navigator = browserUtils.getWindowNavigator();\n\n    if (navigator) {\n      localeCode = matchInstalledLocales(navigator.userLanguage || navigator.language);\n    }\n  }\n\n  if (!localeCode) {\n    /**\n     * (4) Fallback to initial locale in installed array\n     */\n    localeCode = _installedLocales[0];\n  }\n\n  setLocaleInt(localeCode);\n  return localeCode;\n}\n/**\n * Sets the selected locale in local storage\n *\n * @param {Object} loginPageLocale - selected locale\n * @ignore\n */\n\n\nexport let setLocaleInLocalStorage = function (loginPageLocale) {\n  localStrg.publish(getBrowserSessionLocaleKey, loginPageLocale);\n  setLocaleInDOM();\n};\n/**\n * Sets the selected locale in DOM html tag\n */\n\nfunction setLocaleInDOM() {\n  let localeCode = localStrg.get(getBrowserSessionLocaleKey);\n  let element = document.getElementsByTagName('HTML')[0];\n  let attLang = document.createAttribute('lang');\n  attLang.value = localeCode ? localeCode.replace(/_/g, '-') : getDefaultLocaleCode;\n  element.setAttributeNode(attLang);\n}\n/**\n * @param {String} localeCode - locale code\n */\n\n\nfunction setLocaleInt(localeCode) {\n  _localeCode = localeCode;\n  /**\n   * Create the text bundle suffix.\n   */\n\n  if (/^en/.test(localeCode)) {\n    _bundleSuffix = '';\n  } else {\n    _bundleSuffix = '_' + localeCode;\n  }\n}\n/**\n * Initializes user language and country code variables for this service.\n * <P>\n * Note: We handle some special cases to where we want just the language code without the region code (a.k.a.\n * country code).\n *\n * @param {String} localeCode - The locale in standard 'language_Country' format e.g. 'en_US'.\n * @return {String} resolved locale\n * @ignore\n */\n\n\nexport let setLocale = function (localeCode) {\n  localeCode = matchInstalledLocales(localeCode); // Update localStorage with new value\n\n  exports.setLocaleInLocalStorage(localeCode); // Remove from the URL after storing in localStorage\n\n  browserUtils.removeUrlAttribute('locale');\n\n  if (localeCode !== _localeCode) {\n    setLocaleInt(localeCode);\n    eventBus.publish('locale.changed', _localeCode);\n  }\n\n  return localeCode;\n};\n/**\n * Returns the i18n code for the current user language *with* any country or region code.\n * <P>\n * Note: This value set up-to-date once login is complete. Until then, it will return a default locale code of\n * 'en_US'.\n *\n * @return {String} Current Locale value e.g. 'en_US'\n */\n\nexport let getLocale = function () {\n  return _localeCode;\n};\n/**\n * Returns baseName in the path.\n *\n * @param {String} path - path of the resource.\n * @return {String} baseName of the resource.\n */\n\nvar baseName = function (path) {\n  if (!path) {\n    return 'BaseMessages';\n  }\n\n  var base = path.substring(path.lastIndexOf('/') + 1);\n\n  if (base.lastIndexOf('.') !== -1) {\n    base = base.substring(0, base.lastIndexOf('.'));\n  }\n\n  return base;\n};\n/**\n * Returns a promise that will be 'resolved' with the localized string text bundle object for the given i18n\n * 'resource'.\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n *\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @return {Promise} A promise that will be 'resolved' with the localized string text bundle object for the\n *         given i18n 'resource' (or 'null' if the resource is not found or the 'localeService' has not be injected\n *         correctly.).\n */\n\n\nexport let getTextPromise = function (resource, useNative) {\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfg('i18n' + _bundleSuffix + '.' + resourceFinal, false, useNative);\n};\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\n\nexport let getLocalizedText = function (resource, key, useNative) {\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfg('i18n' + _bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative);\n};\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} localeCode - The locale language that the key text will be retrieved from\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\n\nexport let getLocalizedTextBundlePromise = function (localeCode, resource, key, useNative) {\n  var bundleSuffix = '';\n\n  if (/^en/.test(localeCode)) {\n    bundleSuffix = '';\n  } else {\n    bundleSuffix = '_' + localeCode;\n  }\n\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfg('LoginLocale' + bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative);\n};\n/**\n * Returns localized text from the given resource with the given key for all installed languages\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @return {Promise} Promise containing the localized text\n */\n\nexport let getMultiLanguageListPromise = function (resource, key) {\n  var _installedLocales = getInstalledLocales();\n\n  const loginLocale = resource === 'LoginLocale';\n  let languagePromise = AwPromiseService.instance;\n  var localePromises = [];\n  var localeResponses = {};\n\n  for (var i = 0; i < _installedLocales.length; i++) {\n    const locale = _installedLocales[i];\n\n    if (loginLocale) {\n      key = locale;\n    }\n\n    localePromises.push(getLocalizedTextBundlePromise(locale, resource, key).then(function (textBundle) {\n      localeResponses[locale] = textBundle;\n    }));\n  }\n\n  return new languagePromise(function (resolve, reject) {\n    AwPromiseService.instance.all(localePromises).then(function () {\n      resolve(sortObject(localeResponses));\n    }, reject);\n  });\n}; // eslint-disable-next-line require-jsdoc\n\nfunction sortObject(obj) {\n  return Object.keys(obj).sort().reduce(function (result, key) {\n    result[key] = obj[key];\n    return result;\n  }, {});\n}\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource.key to load\n * @param {Boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\n\n\nexport let getLocalizedTextFromKey = async function (resource, useNative) {\n  return cfgSvc.getCfg('i18n' + _bundleSuffix + '.' + resource, false, useNative);\n};\n/**\n * Returns the country (i.e. region) code of the current locale that will be appended to the textBundle name to\n * resolve the text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)). *\n *\n * @return {String} i18n code for the current user region *without* any language code.\n * @ignore\n */\n\nexport let getBundleSuffix = function () {\n  return _bundleSuffix;\n};\n/**\n * Returns the i18n code for the current user language *without* any country or region code.\n *\n * @return {String} The i18n code for the current user language *without* any country or region code.\n * @ignore\n */\n\nexport let getLanguageCode = function () {\n  return _localeCode.substring(0, 2);\n};\n/**\n * Returns a string from cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {String} key - Name of the message to return.\n * @param {String[]} params - Array of message parameters.\n *\n * @return {String} Message with param substitutions.\n */\n\nexport let getMessage = function (key, params) {\n  var msg = getLoadedText()[key];\n  msg && params && params.forEach(function (item, index) {\n    msg = msg.replace(`{${index}}`, params[index]);\n  });\n  return msg;\n};\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle to return.\n *\n * @return {Object} Cached textBundle resource (or NULL if the bundle has not been cached yet).\n */\n\nexport let getLoadedText = function (resource) {\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfgCached('i18n' + _bundleSuffix + '.' + resourceFinal);\n};\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle.key to return.\n *\n * @return {String} Cached localized text from textBundle\n */\n\nexport let getLoadedTextFromKey = function (resource) {\n  return cfgSvc.getCfgCached('i18n' + _bundleSuffix + '.' + resource);\n};\n/**\n * Gets the default language based on locale stored in 1) the URL (if 'locale' attributes is defined) or 2) local\n * storage.\n *\n * @param {Object} installedLanguages - default selected locale\n * @param {StringMap} localeTextBundle - (Optional) Text bundle containing a mapping of locale code to locale specific name of the language (eg localeTextBundle.en_US = English).\n * @returns {String} Default language based on locale stored in local storage.\n * @ignore\n */\n\nexport let getDefaultLanguage = function (installedLanguages, localeTextBundle) {\n  var defaultLang = {};\n  var locale = resolveLocale();\n\n  if (localeTextBundle) {\n    if (locale) {\n      defaultLang.dbValue = locale;\n      defaultLang.uiValue = localeTextBundle[locale];\n      defaultLang.isSelected = true;\n      return defaultLang;\n    }\n  } // Override the selected language with local storage locale value\n\n\n  if (locale) {\n    _.forEach(installedLanguages, function (installedLanguage) {\n      if (installedLanguage.dbValue === locale) {\n        installedLanguage.isSelected = true;\n        defaultLang = installedLanguage;\n      }\n    });\n  }\n\n  if (_.isEmpty(defaultLang)) {\n    defaultLang.dbValue = 'en_US';\n    defaultLang.uiValue = 'English';\n    defaultLang.isSelected = true;\n    locale = defaultLang.dbValue;\n  }\n\n  if (locale && locale !== exports.getLocale()) {\n    exports.setLocale(locale);\n  }\n\n  return defaultLang;\n};\nexports = {\n  getInstalledLocales,\n  setLocaleInLocalStorage,\n  setLocale,\n  getLocale,\n  getTextPromise,\n  getLocalizedText,\n  getBundleSuffix,\n  getLanguageCode,\n  getMessage,\n  getLoadedText,\n  getDefaultLanguage,\n  getLocalizedTextFromKey,\n  getLoadedTextFromKey,\n  getMultiLanguageListPromise,\n  getLocalizedTextBundlePromise\n};\nexport default exports;\n_installedLocales = cfgSvc.getCfgCached('installedLocales');\n/**\n * Look for the default 'locale' in the URL and if found extract the value from it.\n */\n\nexports.setLocale(resolveLocale());","map":{"version":3,"names":["_","eventBus","browserUtils","cfgSvc","localStrg","AwPromiseService","_bundleSuffix","_localeCode","_installedLocales","getBrowserSessionLocaleKey","getDefaultLocaleCode","exports","getInstalledLocales","matchInstalledLocales","locale","replace","indexOf","localeShort","substring","toLowerCase","ndx","resolvedLocale","forEach","installedLocale","startsWith","resolveLocale","localeCode","localeFromURL","getUrlAttributes","removeUrlAttribute","get","navigator","getWindowNavigator","userLanguage","language","setLocaleInt","setLocaleInLocalStorage","loginPageLocale","publish","setLocaleInDOM","element","document","getElementsByTagName","attLang","createAttribute","value","setAttributeNode","test","setLocale","getLocale","baseName","path","base","lastIndexOf","getTextPromise","resource","useNative","resourceFinal","getCfg","getLocalizedText","key","getLocalizedTextBundlePromise","bundleSuffix","getMultiLanguageListPromise","loginLocale","languagePromise","instance","localePromises","localeResponses","i","length","push","then","textBundle","resolve","reject","all","sortObject","obj","Object","keys","sort","reduce","result","getLocalizedTextFromKey","getBundleSuffix","getLanguageCode","getMessage","params","msg","getLoadedText","item","index","getCfgCached","getLoadedTextFromKey","getDefaultLanguage","installedLanguages","localeTextBundle","defaultLang","dbValue","uiValue","isSelected","installedLanguage","isEmpty"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/localeService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/localeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport cfgSvc from 'js/configurationService';\nimport localStrg from 'js/localStorage';\n// revisitme - should be 'config/installedLocales'\nimport 'js/installedLocales';\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * The country (i.e. region) code of the current locale that will be appended to the textBundle name to resolve the\n * text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)).\n *\n * @private\n */\nvar _bundleSuffix = '';\n\n/**\n * Locale value set up-to-date once login is complete.\n * <P>\n * Note: Until login, the default values we be as shown here.\n *\n * @private\n */\nvar _localeCode;\n\n/**\n * Cache of installed locales\n * @private\n */\nvar _installedLocales;\n\n/**\n * Local Storage key for last used locale.\n * @private\n */\nvar getBrowserSessionLocaleKey = 'locale';\n\n/**\n * Default locale if local storage locale is undefined\n * @private\n */\nvar getDefaultLocaleCode = 'en';\n\nlet exports;\n\n/**\n * @return {String[]} array of installed locales\n */\nexport let getInstalledLocales = function() {\n    return _installedLocales;\n};\n\n/**\n * @param {String} locale - input locale\n * @return {String|null} resolved locale\n */\nfunction matchInstalledLocales( locale ) {\n    locale = locale.replace( /-/g, '_' );\n    if( _installedLocales.indexOf( locale ) > -1 ) {\n        return locale;\n    }\n\n    // search by the 2 character locale\n    var localeShort = locale.substring( 0, 2 ).toLowerCase();\n    var ndx = _installedLocales.indexOf( localeShort );\n    if( ndx > -1 ) {\n        return _installedLocales[ ndx ];\n    }\n\n    // search by ignoring case\n    var resolvedLocale;\n    _.forEach( _installedLocales, function( installedLocale ) {\n        if( locale.toLowerCase() === installedLocale.toLowerCase() ) {\n            resolvedLocale = installedLocale;\n            return false; // break\n        }\n    } );\n    if( !resolvedLocale ) {\n        // search based upon only the first 2 characters\n        _.forEach( _installedLocales, function( installedLocale ) {\n            if( localeShort && installedLocale.startsWith( localeShort ) ) {\n                resolvedLocale = installedLocale;\n                return false; // break\n            }\n        } );\n    }\n    return resolvedLocale;\n}\n\n/**\n * Return the current locale from the URL or browsers 'userAgent'\n *\n * @return {String} The 'locale' code for the current browser session based on a 'locale=' query in the URL or the\n *         browsers 'userAgent' (e.g. 'en_US', 'zh_CN', etc.).\n */\nfunction resolveLocale() {\n    var localeCode;\n\n    /**\n     * (1) Look for the 'locale' in the URL and if found extract the value from it.\n     */\n    var localeFromURL = browserUtils.getUrlAttributes().locale;\n    if( localeFromURL ) {\n        localeCode = matchInstalledLocales( localeFromURL );\n        if( !localeCode ) {\n            // Remove invalid locale settings from URL\n            browserUtils.removeUrlAttribute( 'locale' );\n        }\n    }\n\n    if( !localeCode ) {\n        /**\n         * (2) Check localStorage for a last used locale\n         */\n        localeCode = localStrg.get( getBrowserSessionLocaleKey );\n        if( localeCode ) {\n            localeCode = matchInstalledLocales( localeCode );\n        }\n    }\n\n    if( !localeCode ) {\n        /**\n         * (3) Check if we should simply assume the browser's current locale setting.\n         */\n        var navigator = browserUtils.getWindowNavigator();\n        if( navigator ) {\n            localeCode = matchInstalledLocales( navigator.userLanguage || navigator.language );\n        }\n    }\n\n    if( !localeCode ) {\n        /**\n         * (4) Fallback to initial locale in installed array\n         */\n        localeCode = _installedLocales[ 0 ];\n    }\n\n    setLocaleInt( localeCode );\n\n    return localeCode;\n}\n\n/**\n * Sets the selected locale in local storage\n *\n * @param {Object} loginPageLocale - selected locale\n * @ignore\n */\nexport let setLocaleInLocalStorage = function( loginPageLocale ) {\n    localStrg.publish( getBrowserSessionLocaleKey, loginPageLocale );\n    setLocaleInDOM();\n};\n\n/**\n * Sets the selected locale in DOM html tag\n */\nfunction setLocaleInDOM() {\n    let localeCode = localStrg.get( getBrowserSessionLocaleKey );\n    let element = document.getElementsByTagName( 'HTML' )[ 0 ];\n    let attLang = document.createAttribute( 'lang' );\n    attLang.value = localeCode ? localeCode.replace( /_/g, '-' ) : getDefaultLocaleCode;\n    element.setAttributeNode( attLang );\n}\n\n/**\n * @param {String} localeCode - locale code\n */\nfunction setLocaleInt( localeCode ) {\n    _localeCode = localeCode;\n\n    /**\n     * Create the text bundle suffix.\n     */\n    if( /^en/.test( localeCode ) ) {\n        _bundleSuffix = '';\n    } else {\n        _bundleSuffix = '_' + localeCode;\n    }\n}\n\n/**\n * Initializes user language and country code variables for this service.\n * <P>\n * Note: We handle some special cases to where we want just the language code without the region code (a.k.a.\n * country code).\n *\n * @param {String} localeCode - The locale in standard 'language_Country' format e.g. 'en_US'.\n * @return {String} resolved locale\n * @ignore\n */\nexport let setLocale = function( localeCode ) {\n    localeCode = matchInstalledLocales( localeCode );\n\n    // Update localStorage with new value\n    exports.setLocaleInLocalStorage( localeCode );\n\n    // Remove from the URL after storing in localStorage\n    browserUtils.removeUrlAttribute( 'locale' );\n\n    if( localeCode !== _localeCode ) {\n        setLocaleInt( localeCode );\n\n        eventBus.publish( 'locale.changed', _localeCode );\n    }\n\n    return localeCode;\n};\n\n/**\n * Returns the i18n code for the current user language *with* any country or region code.\n * <P>\n * Note: This value set up-to-date once login is complete. Until then, it will return a default locale code of\n * 'en_US'.\n *\n * @return {String} Current Locale value e.g. 'en_US'\n */\nexport let getLocale = function() {\n    return _localeCode;\n};\n\n/**\n * Returns baseName in the path.\n *\n * @param {String} path - path of the resource.\n * @return {String} baseName of the resource.\n */\nvar baseName = function( path ) {\n    if( !path ) {\n        return 'BaseMessages';\n    }\n    var base = path.substring( path.lastIndexOf( '/' ) + 1 );\n    if( base.lastIndexOf( '.' ) !== -1 ) {\n        base = base.substring( 0, base.lastIndexOf( '.' ) );\n    }\n    return base;\n};\n\n/**\n * Returns a promise that will be 'resolved' with the localized string text bundle object for the given i18n\n * 'resource'.\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n *\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @return {Promise} A promise that will be 'resolved' with the localized string text bundle object for the\n *         given i18n 'resource' (or 'null' if the resource is not found or the 'localeService' has not be injected\n *         correctly.).\n */\nexport let getTextPromise = function( resource, useNative ) {\n    var resourceFinal = baseName( resource );\n    return cfgSvc.getCfg( 'i18n' + _bundleSuffix + '.' + resourceFinal, false, useNative );\n};\n\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\nexport let getLocalizedText = function( resource, key, useNative ) {\n    var resourceFinal = baseName( resource );\n    return cfgSvc.getCfg( 'i18n' + _bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative );\n};\n\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} localeCode - The locale language that the key text will be retrieved from\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\nexport let getLocalizedTextBundlePromise = function( localeCode, resource, key, useNative ) {\n    var bundleSuffix = '';\n    if( /^en/.test( localeCode ) ) {\n        bundleSuffix = '';\n    } else {\n        bundleSuffix = '_' + localeCode;\n    }\n    var resourceFinal = baseName( resource );\n    return cfgSvc.getCfg( 'LoginLocale' + bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative );\n};\n\n/**\n * Returns localized text from the given resource with the given key for all installed languages\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @return {Promise} Promise containing the localized text\n */\nexport let getMultiLanguageListPromise = function( resource, key ) {\n    var _installedLocales = getInstalledLocales();\n    const loginLocale = resource === 'LoginLocale';\n\n    let languagePromise = AwPromiseService.instance;\n\n    var localePromises = [];\n    var localeResponses = {};\n\n    for( var i = 0; i < _installedLocales.length; i++ ) {\n        const locale = _installedLocales[ i ];\n        if( loginLocale ) {\n            key = locale;\n        }\n        localePromises.push(\n            getLocalizedTextBundlePromise( locale, resource, key ).then( function( textBundle ) {\n                localeResponses[ locale ] = textBundle;\n            } )\n        );\n    }\n\n    return new languagePromise( function( resolve, reject ) {\n        AwPromiseService.instance.all(\n            localePromises\n        ).then( function() {\n            resolve( sortObject( localeResponses ) );\n        }, reject );\n    } );\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction sortObject( obj ) {\n    return Object.keys( obj ).sort().reduce( function( result, key ) {\n        result[key] = obj[key];\n        return result;\n    }, {} );\n}\n\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource.key to load\n * @param {Boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\nexport let getLocalizedTextFromKey = async function( resource, useNative ) {\n    return cfgSvc.getCfg( 'i18n' + _bundleSuffix + '.' + resource, false, useNative );\n};\n\n/**\n * Returns the country (i.e. region) code of the current locale that will be appended to the textBundle name to\n * resolve the text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)). *\n *\n * @return {String} i18n code for the current user region *without* any language code.\n * @ignore\n */\nexport let getBundleSuffix = function() {\n    return _bundleSuffix;\n};\n\n/**\n * Returns the i18n code for the current user language *without* any country or region code.\n *\n * @return {String} The i18n code for the current user language *without* any country or region code.\n * @ignore\n */\nexport let getLanguageCode = function() {\n    return _localeCode.substring( 0, 2 );\n};\n\n/**\n * Returns a string from cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {String} key - Name of the message to return.\n * @param {String[]} params - Array of message parameters.\n *\n * @return {String} Message with param substitutions.\n */\nexport let getMessage = function( key, params ) {\n    var msg = getLoadedText()[key];\n\n    msg && params && params.forEach( function( item, index ) {\n        msg = msg.replace( `{${index}}`, params[index] );\n    } );\n    return msg;\n};\n\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle to return.\n *\n * @return {Object} Cached textBundle resource (or NULL if the bundle has not been cached yet).\n */\nexport let getLoadedText = function( resource ) {\n    var resourceFinal = baseName( resource );\n\n    return cfgSvc.getCfgCached( 'i18n' + _bundleSuffix + '.' + resourceFinal );\n};\n\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle.key to return.\n *\n * @return {String} Cached localized text from textBundle\n */\nexport let getLoadedTextFromKey = function( resource ) {\n    return cfgSvc.getCfgCached( 'i18n' + _bundleSuffix + '.' + resource );\n};\n\n/**\n * Gets the default language based on locale stored in 1) the URL (if 'locale' attributes is defined) or 2) local\n * storage.\n *\n * @param {Object} installedLanguages - default selected locale\n * @param {StringMap} localeTextBundle - (Optional) Text bundle containing a mapping of locale code to locale specific name of the language (eg localeTextBundle.en_US = English).\n * @returns {String} Default language based on locale stored in local storage.\n * @ignore\n */\nexport let getDefaultLanguage = function( installedLanguages, localeTextBundle ) {\n    var defaultLang = {};\n\n    var locale = resolveLocale();\n\n    if( localeTextBundle ) {\n        if( locale ) {\n            defaultLang.dbValue = locale;\n            defaultLang.uiValue = localeTextBundle[ locale ];\n            defaultLang.isSelected = true;\n\n            return defaultLang;\n        }\n    }\n\n    // Override the selected language with local storage locale value\n    if( locale ) {\n        _.forEach( installedLanguages, function( installedLanguage ) {\n            if( installedLanguage.dbValue === locale ) {\n                installedLanguage.isSelected = true;\n                defaultLang = installedLanguage;\n            }\n        } );\n    }\n\n    if( _.isEmpty( defaultLang ) ) {\n        defaultLang.dbValue = 'en_US';\n        defaultLang.uiValue = 'English';\n        defaultLang.isSelected = true;\n        locale = defaultLang.dbValue;\n    }\n\n    if( locale && locale !== exports.getLocale() ) {\n        exports.setLocale( locale );\n    }\n\n    return defaultLang;\n};\n\nexports = {\n    getInstalledLocales,\n    setLocaleInLocalStorage,\n    setLocale,\n    getLocale,\n    getTextPromise,\n    getLocalizedText,\n    getBundleSuffix,\n    getLanguageCode,\n    getMessage,\n    getLoadedText,\n    getDefaultLanguage,\n    getLocalizedTextFromKey,\n    getLoadedTextFromKey,\n    getMultiLanguageListPromise,\n    getLocalizedTextBundlePromise\n};\nexport default exports;\n\n_installedLocales = cfgSvc.getCfgCached( 'installedLocales' );\n\n/**\n * Look for the default 'locale' in the URL and if found extract the value from it.\n */\nexports.setLocale( resolveLocale() );\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
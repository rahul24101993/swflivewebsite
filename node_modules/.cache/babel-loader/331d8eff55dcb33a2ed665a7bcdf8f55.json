{"ast":null,"code":"/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used for PLTable as Column Filter Service\n *\n * @module js/awColumnFilterService\n *\n */\nimport messagingService from 'js/messagingService';\nimport dateTimeService from 'js/dateTimeService';\nimport localeService from 'js/localeService';\nimport appContextService from 'js/appCtxService';\nimport propertyService from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport columnFilterUtility from 'js/awColumnFilterUtility';\nvar _localeTextBundle = {};\nvar exports = {};\n/*********************************\n * Temporary Constants for Facet *\n ********************************/\n\nconst numberFacetsToShow = 10;\nconst facetCheckboxHeight = 33;\nconst SELECT_ALL_PROPERTY = 'awSelectAllOption';\n/**\n * Determines if value is valid number to process.\n *\n * @param {Number|String} value - Number value\n *\n * @returns {Boolean} true if valid number\n */\n\nvar isValidNumber = function (value) {\n  return isFinite(value) && value !== null && value !== '';\n};\n/**\n * Check if property has a default value.\n *\n * @param {Object} property - property to check values\n * @returns {boolean} true is has blank value\n */\n\n\nconst isDefaultFilterValue = function (property) {\n  return property && (_.isNil(property.dbValue) || property.dbValue === '');\n};\n/**\n * Check if existing filters have not equal facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and not equals\n */\n\n\nconst isExistingFacetValueNotEquals = function (columnFilters, value) {\n  let isExistingNotEqualsFacet = false;\n\n  _.forEach(columnFilters, function (filter) {\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS && filter.values && filter.values.includes(value)) {\n      isExistingNotEqualsFacet = true;\n      return false;\n    }\n  });\n\n  return isExistingNotEqualsFacet;\n};\n/**\n * Check if existing filters have equals facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and equals\n */\n\n\nconst isExistingFacetValueEquals = function (columnFilters, value) {\n  let isExistingEqualsFacet = false;\n\n  _.forEach(columnFilters, function (filter) {\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS && filter.values && filter.values.includes(value)) {\n      isExistingEqualsFacet = true;\n      return false;\n    }\n  });\n\n  return isExistingEqualsFacet;\n};\n/**\n * Get the default selection of facets based on existing filters.\n *\n * @param {Array} columnFilters\n * @returns true if existing filters have not equals, false if equals\n */\n\n\nconst getDefaultFacetSelectionValue = function (columnFilters) {\n  let defaultSelectionValue = null;\n\n  _.forEach(columnFilters, function (filter) {\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS) {\n      defaultSelectionValue = false;\n      return false;\n    }\n\n    if (filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS) {\n      defaultSelectionValue = true;\n      return false;\n    }\n  });\n\n  return defaultSelectionValue;\n};\n/**\n * Initialize the column menu's default variables.\n *\n * @param {Object} column - column information\n * @param {Object} viewModelData - menu view model data\n * @param {Object} operation - column filtering operation\n */\n\n\nexport let initializeMenu = function (column, columnFilterData) {\n  let columnMenuData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let registerContext = false;\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (!columnMenuContext) {\n    columnMenuContext = {};\n    registerContext = true;\n  }\n\n  columnMenuContext.isFacetsInitialized = false;\n  columnMenuContext.isFacetLoading = false;\n  columnMenuContext.isSelectedFacetValues = false;\n  columnMenuContext.isMenuIntialized = true;\n\n  if (column.filter) {\n    // Set the defaultFacetSection for when an existing facet filter was applied\n    columnMenuContext.defaultFacetSelection = getDefaultFacetSelectionValue(column.filter.columnFilters);\n\n    if (columnMenuContext.defaultFacetSelection === false) {\n      columnMenuContext.isSelectedFacetValues = true;\n    }\n  }\n\n  registerContext && appContextService.registerCtx('columnMenuContext', columnMenuContext);\n  columnMenuData = { ...columnFilterData,\n    ...columnMenuData\n  };\n  return {\n    columnMenuData: columnMenuData\n  };\n};\n/**\n * Sets the filter information on the column filter and the column provider filters used for SOA.\n *\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n * @param {Array} newProviderFilters new column provider filters to set\n * @param {Object} updatedColumn column with the updated filter attached\n */\n\nexport let setFilters = function (columnProvider, dataProvider, newProviderFilters, updatedColumn) {\n  const updatedColumnFilters = columnFilterUtility.addOrReplaceColumnFilter(columnProvider.getColumnFilters(), newProviderFilters);\n  columnProvider.setColumnFilters(updatedColumnFilters); // Set all filters as stale except for column in newProviderFilters\n\n  _.forEach(dataProvider.cols, function (col) {\n    if (col.field === updatedColumn.field) {\n      // Need to preserve whether show filters was on/off\n      const oldShowFilterFacets = col.filter.showFilterFacets;\n      exports.updateColumnFilter(col, newProviderFilters);\n      col.filter.showFilterFacets = oldShowFilterFacets;\n    } else {\n      exports.setColumnFilterStale(col);\n    }\n  });\n};\n/**\n * Check if text filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\n\nvar isTextFilterInputDefault = function (column, viewModelData) {\n  var isInputDefault = false;\n\n  if (!column.filter.isFilterApplied && isDefaultFilterValue(viewModelData.textValue)) {\n    isInputDefault = true;\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if date filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\n\n\nvar isDateFilterInputDefault = function (column, viewModelData) {\n  var isInputDefault = false;\n\n  if (!column.filter.isFilterApplied && viewModelData.startDate && dateTimeService.isNullDate(viewModelData.startDate.dbValue) && viewModelData.endDate && dateTimeService.isNullDate(viewModelData.endDate.dbValue) && viewModelData.startDate.dateApi && !viewModelData.startDate.dateApi.dateValue && viewModelData.endDate.dateApi && !viewModelData.endDate.dateApi.dateValue) {\n    isInputDefault = true;\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if numeric filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\n\n\nvar isNumericFilterInputDefault = function (column, viewModelData) {\n  var isInputDefault = false;\n\n  if (!column.filter.isFilterApplied) {\n    const opeartionValue = viewModelData.operation.dbValue;\n\n    switch (opeartionValue) {\n      case columnFilterUtility.OPERATION_TYPE.RANGE:\n        isInputDefault = isDefaultFilterValue(viewModelData.startNumber) && isDefaultFilterValue(viewModelData.endNumber);\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.GREATER:\n        isInputDefault = isDefaultFilterValue(viewModelData.numberValue);\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.LESS:\n        isInputDefault = isDefaultFilterValue(viewModelData.numberValue);\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.EQUALS:\n        isInputDefault = isDefaultFilterValue(viewModelData.numberValue);\n        break;\n    }\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if all facets are checked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are selected\n */\n\n\nvar isFacetInputDefault = function (facetDataProvider) {\n  var isInputDefault = true;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n  if (facetObjects) {\n    _.forEach(facetObjects, function (currentValue) {\n      if (!currentValue.dbValue && currentValue.serverValue !== SELECT_ALL_PROPERTY) {\n        isInputDefault = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return isInputDefault;\n};\n/**\n * Check if all facets are unchecked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are deselected\n */\n\n\nvar areAllFacetsUnchecked = function (facetDataProvider) {\n  var allFacetsUnchecked;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n  if (facetObjects && !isFacetInputDefault(facetDataProvider)) {\n    allFacetsUnchecked = true;\n\n    _.forEach(facetObjects, function (currentValue) {\n      if (currentValue.dbValue) {\n        allFacetsUnchecked = false;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return allFacetsUnchecked;\n};\n/**\n * Disable filtering in menu.\n *\n * @param {Object} column column definition object\n */\n\n\nvar disableFiltering = function (isFilterDisabled) {\n  if (isFilterDisabled.update) {\n    isFilterDisabled.update({\n      value: true\n    });\n  } else {\n    isFilterDisabled.value = true;\n  }\n};\n/**\n * Enable filtering in menu.\n *\n * @param {Object} column column definition object\n */\n\n\nvar enableFiltering = function (isFilterDisabled) {\n  if (isFilterDisabled.update) {\n    isFilterDisabled.update({\n      value: false\n    });\n  } else {\n    isFilterDisabled.value = false;\n  }\n};\n/**\n * Clear an filter errors from the menu.\n *\n * @param {Object} context - menu context information\n */\n\n\nvar clearContextAttributes = function (context) {\n  if (context.filterError) {\n    delete context.filterError; // remove error if exists\n  }\n};\n/**\n * Validate the text information coming from the filter column menu UI.\n *\n * @param {Object} textValue - The text value coming from the filter menu\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if textValue is valid\n */\n\n\nexport let doTextValidation = function (textValue, viewModelData) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext) {\n    clearContextAttributes(columnMenuContext);\n  }\n\n  return true;\n};\n/**\n * Validate the numeric information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if numeric information is valid\n */\n\nexport let doNumericValidation = function (viewModelData) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext) {\n    clearContextAttributes(columnMenuContext);\n\n    if (_.isNumber(viewModelData.startNumber.dbValue) && _.isNumber(viewModelData.endNumber.dbValue) && viewModelData.startNumber.dbValue > viewModelData.endNumber.dbValue) {\n      columnMenuContext.filterError = true;\n      messagingService.showError(_localeTextBundle.invalidNumberRange);\n    }\n\n    return !columnMenuContext.filterError;\n  }\n\n  return true;\n};\n/**\n * Create a column filter from the facet values in column.\n *\n * @param {Object} column - column definition object\n * @returns {Object} filter object created from facet values\n */\n\nexport let processFacetValuesInFilter = function (column, facetDataProvider) {\n  var facetFilter = null;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (facetObjects) {\n    var facetUiValues = [];\n\n    _.forEach(facetObjects, function (currentValue) {\n      if (currentValue.serverValue !== SELECT_ALL_PROPERTY && (columnMenuContext.isSelectedFacetValues && currentValue.dbValue === true || !columnMenuContext.isSelectedFacetValues && currentValue.dbValue === false)) {\n        facetUiValues.push(currentValue.serverValue);\n      }\n    });\n\n    if (columnMenuContext.isSelectedFacetValues) {\n      facetFilter = columnFilterUtility.createCaseSensitiveEqualsFilter(column.field, facetUiValues);\n    } else {\n      facetFilter = columnFilterUtility.createCaseSensitiveNotEqualsFilter(column.field, facetUiValues);\n    }\n  }\n\n  return facetFilter;\n};\n/**\n * Creates a text filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\n\nvar createTextFilter = function (eventData) {\n  var filter = null;\n\n  if (eventData) {\n    filter = columnFilterUtility.createFilter(eventData.operation, eventData.columnName, [eventData.textValue]);\n  }\n\n  return filter;\n};\n\nexport let updateTableWithColumnFilters = function (gridContextDispatcher, column, columnFilters) {\n  const columnFilterInfo = {\n    column: column,\n    filters: columnFilters\n  };\n  gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    columnFilterInfo: columnFilterInfo\n  });\n};\n/**\n * Add/remove the text filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\n\nexport let doTextFiltering = function (column, viewModelData, facetDataProvider, gridContextDispatcher) {\n  // client side validation\n  let newFilters = null;\n\n  if (exports.doTextValidation(viewModelData)) {\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    const isFacetInputDefaultResult = isFacetInputDefault(facetDataProvider);\n\n    if (viewModelData.textValue || !isFacetInputDefaultResult) {\n      newFilters = [];\n\n      if (viewModelData.textValue && viewModelData.textValue.dbValue) {\n        const filterData = {\n          columnName: column.field,\n          operation: viewModelData.operation.dbValue,\n          textValue: viewModelData.textValue.dbValue\n        };\n        var textColumnFilter = createTextFilter(filterData);\n        newFilters.push(textColumnFilter);\n      }\n\n      if (!isFacetInputDefaultResult) {\n        const facetFilter = exports.processFacetValuesInFilter(column, facetDataProvider);\n\n        if (facetFilter && facetFilter.values && facetFilter.values.length) {\n          newFilters.push(facetFilter);\n        }\n      }\n    }\n  }\n\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext.filterError !== true && gridContextDispatcher) {\n    updateTableWithColumnFilters(gridContextDispatcher, column, newFilters);\n  }\n\n  return newFilters;\n};\n/**\n * Validate the date information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if date is valid\n */\n\nexport let doDateValidation = function (viewModelData) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext) {\n    clearContextAttributes(columnMenuContext);\n\n    if (!dateTimeService.isNullDate(viewModelData.startDate.dbValue) && !dateTimeService.isNullDate(viewModelData.endDate.dbValue)) {\n      var startDateTime = _.isNumber(viewModelData.startDate.dbValue) ? viewModelData.startDate.dbValue : new Date(viewModelData.startDate.dbValue).getTime();\n      var endDateTime = _.isNumber(viewModelData.endDate.dbValue) ? viewModelData.endDate.dbValue : new Date(viewModelData.endDate.dbValue).getTime();\n\n      if (startDateTime > endDateTime) {\n        columnMenuContext.filterError = true;\n        messagingService.showError(_localeTextBundle.invalidDate);\n      }\n    }\n\n    return !columnMenuContext.filterError;\n  }\n\n  return true;\n};\n/**\n * Creates a date filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\n\nvar createDateFilter = function (eventData) {\n  var filter = null; // Set columnProvider.columnFilters so dataProvider/actions can use the information\n\n  if (!dateTimeService.isNullDate(eventData.startDate) && !dateTimeService.isNullDate(eventData.endDate)) {\n    var startDateUtc = dateTimeService.formatUTC(new Date(eventData.startDate));\n    var endDate = new Date(eventData.endDate);\n    var endDateUtc = dateTimeService.formatUTC(endDate.setHours(23, 59, 59, 999));\n    filter = columnFilterUtility.createRangeFilter(eventData.columnName, [startDateUtc, endDateUtc]);\n  } else if (!dateTimeService.isNullDate(eventData.startDate)) {\n    startDateUtc = dateTimeService.formatUTC(new Date(eventData.startDate));\n    filter = columnFilterUtility.createGreaterThanEqualsFilter(eventData.columnName, [startDateUtc]);\n  } else if (!dateTimeService.isNullDate(eventData.endDate)) {\n    endDate = new Date(eventData.endDate);\n    endDateUtc = dateTimeService.formatUTC(endDate.setHours(23, 59, 59, 999));\n    filter = columnFilterUtility.createLessThanEqualsFilter(eventData.columnName, [endDateUtc]);\n  }\n\n  return filter;\n};\n/**\n * Add/remove the date filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\n\n\nexport let doDateFiltering = function (column, viewModelData, facetDataProvider, gridContextDispatcher) {\n  let newFilters = null; // Client validation\n\n  const isFacetInputDefaultResult = isFacetInputDefault(facetDataProvider);\n\n  if (exports.doDateValidation(viewModelData) || !isFacetInputDefaultResult) {\n    newFilters = [];\n    const filterData = {\n      columnName: column.field,\n      startDate: viewModelData.startDate.dbValue,\n      endDate: viewModelData.endDate.dbValue\n    };\n    var filter = createDateFilter(filterData);\n\n    if (filter) {\n      newFilters.push(filter);\n    }\n\n    if (!isFacetInputDefaultResult) {\n      const facetFilter = exports.processFacetValuesInFilter(column, facetDataProvider);\n\n      if (facetFilter && facetFilter.values && facetFilter.values.length) {\n        newFilters.push(facetFilter);\n      }\n    }\n  }\n\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext.filterError !== true && gridContextDispatcher) {\n    updateTableWithColumnFilters(gridContextDispatcher, column, newFilters);\n  }\n\n  return newFilters;\n};\n/**\n * Creates a numeric filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\n\nvar createNumericFilter = function (eventData) {\n  var filter = null; // Set columnProvider.columnFilters so dataProvider/actions can use the information\n\n  if (eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber(eventData.startNumber) && isValidNumber(eventData.endNumber)) {\n    filter = columnFilterUtility.createRangeFilter(eventData.columnName, [eventData.startNumber, eventData.endNumber]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber(eventData.startNumber)) {\n    filter = columnFilterUtility.createGreaterThanEqualsFilter(eventData.columnName, [eventData.startNumber]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber(eventData.endNumber)) {\n    filter = columnFilterUtility.createLessThanEqualsFilter(eventData.columnName, [eventData.endNumber]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.GREATER && isValidNumber(eventData.numberValue)) {\n    filter = columnFilterUtility.createGreaterThanFilter(eventData.columnName, [eventData.numberValue]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.LESS && isValidNumber(eventData.numberValue)) {\n    filter = columnFilterUtility.createLessThanFilter(eventData.columnName, [eventData.numberValue]);\n  } else if (eventData.operation === columnFilterUtility.OPERATION_TYPE.EQUALS && isValidNumber(eventData.numberValue)) {\n    filter = columnFilterUtility.createEqualsFilter(eventData.columnName, [eventData.numberValue]);\n  }\n\n  return filter;\n};\n/**\n * Add/remove the numeric filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\n\n\nexport let doNumericFiltering = function (column, viewModelData, facetDataProvider, gridContextDispatcher) {\n  let newFilters = null;\n  const isFacetInputDefaultResult = isFacetInputDefault(facetDataProvider);\n\n  if (exports.doNumericValidation(viewModelData) || !isFacetInputDefaultResult) {\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    newFilters = [];\n    const filterData = {\n      columnName: column.field,\n      operation: viewModelData.operation.dbValue,\n      numberValue: viewModelData.numberValue.dbValue,\n      startNumber: viewModelData.startNumber.dbValue,\n      endNumber: viewModelData.endNumber.dbValue\n    };\n    var filter = createNumericFilter(filterData);\n\n    if (filter) {\n      newFilters.push(filter);\n    }\n\n    if (!isFacetInputDefaultResult) {\n      const facetFilter = exports.processFacetValuesInFilter(column, facetDataProvider);\n\n      if (facetFilter && facetFilter.values && facetFilter.values.length) {\n        newFilters.push(facetFilter);\n      }\n    }\n  }\n\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext.filterError !== true && gridContextDispatcher) {\n    updateTableWithColumnFilters(gridContextDispatcher, column, newFilters);\n  }\n\n  return newFilters;\n};\n/**\n * Find the type of filter to use by the column type.\n *\n * @param {String} columnType - Repersents the data type of the column\n *\n * @returns {String} The type of filter to use in the column menu\n */\n\nexport let getFilterTypeByColumnType = function (columnType) {\n  var returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n\n  if (columnType) {\n    if (_.isString(columnType)) {\n      columnType = columnType.toUpperCase();\n    }\n\n    var columnTypeString = columnType.toString();\n\n    switch (columnTypeString) {\n      case 'DOUBLE':\n      case 'INTEGER':\n      case 'FLOAT':\n      case '3': // Client Property Type\n\n      case '4': // Client Property Type Double\n\n      case '5': // Client Property Type Integer\n\n      case '7':\n        // Client Property Type Short\n        returnFilterType = columnFilterUtility.FILTER_VIEW.NUMERIC;\n        break;\n\n      case 'DATE':\n      case '2':\n        // Client Property Type Date\n        returnFilterType = columnFilterUtility.FILTER_VIEW.DATE;\n        break;\n\n      case 'STRING':\n      default:\n        returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n    }\n  }\n\n  return returnFilterType;\n};\n/**\n * Add filter information to the column object.\n *\n * @param {Object} column - Column to add filter information to\n * @param {String} currentFilterView - Filter view\n * @param {Array} existingFilters - Existing filter view to reference\n */\n\nexport let addFilterValue = function (column, currentFilterView, existingFilters) {\n  existingFilters = existingFilters || [];\n\n  switch (currentFilterView) {\n    case columnFilterUtility.FILTER_VIEW.NUMERIC:\n      column.filter = {\n        isFilterApplied: false,\n        isDirty: false,\n        view: currentFilterView,\n        summaryText: '',\n        operation: {\n          dbValue: 'equals',\n          uiValue: _localeTextBundle.equalsOperation,\n          hasLov: true,\n          isEditable: true,\n          isEnabled: true,\n          propApi: {},\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL',\n          propertyName: 'operation',\n          type: 'STRING',\n          operationType: 'childcommand'\n        },\n        numberValue: {\n          dbValue: '',\n          isEnabled: true,\n          type: 'DOUBLE',\n          isRequired: false,\n          isEditable: true,\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n        },\n        startNumber: {\n          dbValue: '',\n          isEnabled: true,\n          type: 'DOUBLE',\n          isRequired: false,\n          isEditable: true,\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n        },\n        endNumber: {\n          dbValue: '',\n          isEnabled: true,\n          type: 'DOUBLE',\n          isRequired: false,\n          isEditable: true,\n          propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n        }\n      };\n      exports.setExistingNumericFilter(column.filter, existingFilters);\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.DATE:\n      column.filter = {\n        isFilterApplied: false,\n        view: currentFilterView,\n        summaryText: '',\n        startDate: {\n          dbValue: '',\n          dateApi: {},\n          isEnabled: true,\n          type: 'DATE'\n        },\n        endDate: {\n          dbValue: '',\n          dateApi: {},\n          isEnabled: true,\n          type: 'DATE'\n        }\n      };\n      exports.setExistingDateFilter(column.filter, existingFilters);\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.TEXT:\n    default:\n      column.filter = {\n        isFilterApplied: false,\n        isDirty: false,\n        view: currentFilterView,\n        summaryText: '',\n        columnFilters: [],\n        operation: {\n          dbValue: 'contains',\n          value: 'contains',\n          uiValue: _localeTextBundle.containsOperation\n        },\n        textValue: {\n          dbValue: ''\n        }\n      };\n      exports.setExistingTextFilter(column.filter, existingFilters); // default to equals for custom filter\n\n      if (currentFilterView !== columnFilterUtility.FILTER_VIEW.TEXT) {\n        column.filter.operation.dbValue = 'equals';\n        column.filter.operation.uiValue = _localeTextBundle.equalsOperation;\n\n        if (existingFilters.length > 0) {\n          column.filter.isFilterApplied = true;\n        }\n      }\n\n  } // Set values common to all types\n\n\n  column.filter.isSelectedFacetValues = false;\n  column.filter.blanksI18n = _localeTextBundle.blanks;\n  column.filter.noMatchesFoundI18n = _localeTextBundle.noMatchesFound;\n  column.filter.selectAllDefault = true;\n  column.filter.showFilterFacets = false;\n  exports.checkExistingFacetFilter(column.filter, existingFilters);\n\n  if (column.filter.isFilterApplied) {\n    column.filter.columnFilters = existingFilters;\n    column.filter.summaryText = exports.createFilterSummary(existingFilters, column.filter.view);\n  } else {\n    column.filter.columnFilters = [];\n  }\n};\n/**\n * Sets the existing filters on to the new numeric filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\n\nexport let setExistingNumericFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (currentFilter) {\n    if (columnFilterUtility.isValidRangeColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n      newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n      newFilter.startNumber.dbValue = Number(currentFilter.values[0]);\n      newFilter.endNumber.dbValue = Number(currentFilter.values[1]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidGreaterThanEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n      newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n      newFilter.startNumber.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidLessThanEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n      newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n      newFilter.endNumber.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidGreaterThanColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.GREATER;\n      newFilter.operation.uiValue = _localeTextBundle.greaterThanOperation;\n      newFilter.numberValue.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidLessThanColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.LESS;\n      newFilter.operation.uiValue = _localeTextBundle.lessThanOperation;\n      newFilter.numberValue.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n      newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n      newFilter.numberValue.dbValue = Number(currentFilter.values[0]);\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Sets the existing filters on to the new date filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\n\nexport let setExistingDateFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (currentFilter) {\n    if (columnFilterUtility.isValidRangeColumnFilter(currentFilter)) {\n      var startDate = new Date(currentFilter.values[0]);\n      var endDate = new Date(currentFilter.values[1]);\n      newFilter.startDate.dbValue = startDate.getTime();\n      newFilter.endDate.dbValue = endDate.getTime();\n      newFilter.isFilterApplied = true;\n    } else if (columnFilterUtility.isValidGreaterThanEqualsColumnFilter(currentFilter)) {\n      startDate = new Date(currentFilter.values[0]);\n      newFilter.startDate.dbValue = startDate.getTime();\n      newFilter.isFilterApplied = true;\n    } else if (columnFilterUtility.isValidLessThanEqualsColumnFilter(currentFilter)) {\n      endDate = new Date(currentFilter.values[0]);\n      newFilter.endDate.dbValue = endDate.getTime();\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Sets the existing filters on to the new text filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\n\nexport let setExistingTextFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (currentFilter) {\n    if (columnFilterUtility.isValidContainsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.CONTAINS;\n      newFilter.operation.uiValue = _localeTextBundle.containsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidNotContainsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS;\n      newFilter.operation.uiValue = _localeTextBundle.notContainsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidStartsWithColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.STARTS_WITH;\n      newFilter.operation.uiValue = _localeTextBundle.startsWithOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidEndsWithColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.ENDS_WITH;\n      newFilter.operation.uiValue = _localeTextBundle.endsWithOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n      return false;\n    } else if (columnFilterUtility.isValidEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n      newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n    } else if (columnFilterUtility.isValidNotEqualsColumnFilter(currentFilter)) {\n      newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_EQUALS;\n      newFilter.operation.uiValue = _localeTextBundle.notEqualsOperation;\n      newFilter.textValue.dbValue = currentFilter.values[0];\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Sets if filter is Applied for facets based on existing filters\n * @param {Object} newFilter - the new filter object that was created\n * @param {Object} existingFilters - The existing filters\n */\n\nexport let checkExistingFacetFilter = function (newFilter, existingFilters) {\n  _.forEach(existingFilters, function (filter) {\n    if ((filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS || filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS) && filter.values && filter.values.length > 0) {\n      newFilter.showFilterFacets = true;\n      newFilter.selectAllDefault = false;\n      newFilter.isFilterApplied = true;\n    }\n  });\n};\n/**\n * Update the column with filter information.\n *\n * @param {Object} column columnInfo\n * @param {Array} existingFilters existing column filter\n */\n\nexport let updateColumnFilter = function (column, existingFilters) {\n  var currentFilterView = column.filterDefinition;\n\n  if (!currentFilterView) {\n    currentFilterView = exports.getFilterTypeByColumnType(column.dataType);\n  }\n\n  exports.addFilterValue(column, currentFilterView, existingFilters);\n};\n/**\n * Reset the column with default filter information.\n *\n * @param {Object} column columnInfo\n */\n\nexport let resetColumnFilter = function (column) {\n  exports.updateColumnFilter(column, []);\n};\n/**\n * Removes column filters that no longer apply to the table.\n *\n * @param {Object} columnProvider - Column provider used to store the filters\n * @param {Array} columns - columns in the table\n */\n\nexport let removeStaleFilters = function (columnProvider, columns) {\n  if (columnProvider && columns && columns.length) {\n    var columnFilters = columnProvider.getColumnFilters();\n\n    if (columnFilters && columnFilters.length) {\n      var newColumnFilters = _.filter(columnFilters, function (currentFilter) {\n        var isValidFilter = false;\n\n        _.forEach(columns, function (currentColumn) {\n          if ((currentFilter.columnName === currentColumn.propertyName || currentFilter.columnName === currentColumn.field) && !currentColumn.hiddenFlag) {\n            isValidFilter = true;\n            return false;\n          }\n\n          return true;\n        });\n\n        return isValidFilter;\n      });\n\n      columnProvider.setColumnFilters(newColumnFilters);\n    }\n  }\n};\n/**\n * Create a filter summary text of the applied filter.\n *\n * @param {Array} columnFilters - Column filter objects that contains operation and values\n * @param {String} filterView - filter view in use\n *\n * @returns {String} returns the text summary of the applied filter\n */\n\nexport let createFilterSummary = function (columnFilters, filterView) {\n  var filterSummary = '';\n  var filterCount = columnFilters.length;\n\n  if (!columnFilters || filterCount < 1) {\n    return filterSummary;\n  }\n\n  for (var i = 0; i < filterCount; i++) {\n    var columnFilter = columnFilters[i];\n    var firstValue = columnFilter.values[0];\n    var secondValue = columnFilter.values.length > 1 ? columnFilter.values[1] : ''; // Convert date values to readable strings\n\n    if (filterView === columnFilterUtility.FILTER_VIEW.DATE) {\n      var firstValueDateTime = Date.parse(firstValue);\n\n      if (firstValueDateTime) {\n        var firstValueDate = new Date(firstValueDateTime);\n        firstValue = firstValueDate.toLocaleDateString();\n      }\n\n      if (secondValue) {\n        var secondValueDateTime = Date.parse(secondValue);\n\n        if (secondValueDateTime) {\n          var secondValueDate = new Date(secondValueDateTime);\n          secondValue = secondValueDate.toLocaleDateString();\n        }\n      }\n    }\n\n    var arrayAsString = '';\n\n    for (var j = 0; j < columnFilter.values.length; j++) {\n      if (j > 0 && j < columnFilter.values.length) {\n        arrayAsString += ',';\n      }\n\n      var value = columnFilter.values[j];\n\n      if (value === '') {\n        arrayAsString += _localeTextBundle.blanks;\n      } else {\n        arrayAsString += value;\n      }\n    } // Set the filter summary text based on the operation type\n\n\n    switch (columnFilter.operation) {\n      case columnFilterUtility.OPERATION_TYPE.RANGE:\n        filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\" ';\n        filterSummary += _localeTextBundle.andFilterTooltip + ' ';\n        filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n        filterSummary += ' \"' + secondValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.GREATER:\n        filterSummary += _localeTextBundle.greaterThanFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.GREATER_EQUALS:\n        filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.LESS:\n        filterSummary += _localeTextBundle.lessThanFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.LESS_EQUALS:\n        filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.EQUALS:\n      case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS:\n        filterSummary += _localeTextBundle.equalsFilterTooltip;\n        filterSummary += ' \"' + arrayAsString + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.NOT_EQUALS:\n      case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS:\n        filterSummary += _localeTextBundle.notEqualsFilterTooltip;\n        filterSummary += ' \"' + arrayAsString + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.CONTAINS:\n        filterSummary += _localeTextBundle.containsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS:\n        filterSummary += _localeTextBundle.notContainsFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.STARTS_WITH:\n        filterSummary += _localeTextBundle.startsWithFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      case columnFilterUtility.OPERATION_TYPE.ENDS_WITH:\n        filterSummary += _localeTextBundle.endWithFilterTooltip;\n        filterSummary += ' \"' + firstValue + '\"';\n        break;\n\n      default:\n        filterSummary += filterView;\n    }\n\n    if (filterCount > 1 && i === 0) {\n      filterSummary += ', ';\n    }\n  }\n\n  return filterSummary;\n};\n/**\n * Remove all the filters from the column provider, reset the dataProvider column filters.\n *\n * @param {Object} dataProvider data provider that contains the columns\n * @param {Object} columnProvider column provider that contains the column filters\n */\n\nexport let removeAllFilters = function (dataProvider, columnProvider) {\n  var columns = dataProvider.cols;\n\n  for (var i = 0; i < columns.length; i++) {\n    exports.setColumnFilterStale(columns[i]);\n    exports.resetColumnFilter(columns[i]);\n  }\n\n  columnProvider.setColumnFilters([]);\n};\n/**\n * Check if any of the columns have a filter applied.\n *\n * @param {Object} dataProvider data provider containing all the columns\n * @returns {Boolean} true/false based on if any column has a filter applied\n */\n\nexport let isColumnFilterApplied = function (dataProvider) {\n  var columns = dataProvider.cols;\n\n  for (var i = 0; i < columns.length; i++) {\n    if (columns[i].filter && columns[i].filter.isFilterApplied) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Select All toggle has been switched, switch all facets to checked/unchecked.\n *\n * @param {boolean} selectAllValue - Value if select all is checked\n * @param {Object} facetDataProvider - data provider of facet list\n * @returns {boolean} selectAllValue\n */\n\nexport let selectAllInputChanged = function (gridContextDispatcher, column, viewModelData, selectAllValue, facetDataProvider, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n  columnMenuContext.isSelectedFacetValues = !selectAllValue;\n  const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n  _.forEach(facetObjects, function (currentFacetObject) {\n    propertyService.setValue(currentFacetObject, selectAllValue);\n  });\n\n  const columnMenuData = {\n    columnName: column.field\n  };\n  columnMenuData.facetValues = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n  columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n  exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n  checkForFilterDisability(column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled);\n  return selectAllValue;\n};\n\nconst getTypeFilter = (column, viewModel) => {\n  var typeFilter = null;\n  var eventData = null;\n\n  if (column.filter.view === columnFilterUtility.FILTER_VIEW.TEXT && viewModel.data.textValue.dbValue) {\n    eventData = {\n      columnName: column.field,\n      operation: viewModel.data.operation.dbValue,\n      textValue: viewModel.data.textValue.dbValue\n    };\n    typeFilter = createTextFilter(eventData);\n  } else if (column.filter.view === columnFilterUtility.FILTER_VIEW.NUMERIC) {\n    eventData = {\n      columnName: column.field,\n      operation: viewModel.data.operation.dbValue,\n      numberValue: viewModel.data.numberValue.dbValue,\n      startNumber: viewModel.data.startNumber.dbValue,\n      endNumber: viewModel.data.endNumber.dbValue\n    };\n\n    if (exports.doNumericValidation(viewModel.data)) {\n      typeFilter = createNumericFilter(eventData);\n    }\n  } else if (column.filter.view === columnFilterUtility.FILTER_VIEW.DATE) {\n    eventData = {\n      columnName: column.field,\n      startDate: viewModel.data.startDate.dbValue,\n      endDate: viewModel.data.endDate.dbValue\n    };\n\n    if (exports.doDateValidation(viewModel.data)) {\n      typeFilter = createDateFilter(eventData);\n    }\n  }\n\n  return typeFilter;\n};\n/**\n * Call the 'getFacets' function from the dataProvider if available.\n *\n * @param {Object} gridContextDispatcher - table data dispatcher\n * @param {Object} column - column definition object\n * @param {Object} viewModel - view model of the table\n * @param {Object} subPanelContext - menu context information\n * @param {Object} facetDataProvider - The data provider of the facets.\n * @param {Boolean} reload - if reloading facets\n * @param {Object} isFilterDisabled - atomic data to determine filter disability\n */\n\n\nexport let loadFacetValues = async function (gridContextDispatcher, column, viewModel, subPanelContext, facetDataProvider, reload, isFilterDisabled) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (columnMenuContext && !columnMenuContext.isFacetLoading) {\n    columnMenuContext.isFacetLoading = true;\n\n    if (subPanelContext.hasFilterFacetAction && viewModel.data.showFilters.dbValue) {\n      let filterFacetValues = [];\n      let filterFacetValuesTotalFound = 0;\n\n      if (!column.filter.isStale && column.filter.facetValues && reload) {\n        filterFacetValues = column.filter.facetValues;\n        filterFacetValuesTotalFound = column.filter.facetValuesTotalFound;\n        facetDataProvider.update(filterFacetValues, filterFacetValuesTotalFound);\n        exports.checkForFilterDisability(column, viewModel.data, subPanelContext.hasFilterFacetAction, facetDataProvider, subPanelContext.gridContext.isBulkediting, isFilterDisabled);\n      } else {\n        var filters = [];\n        var typeFilter = getTypeFilter(column, viewModel);\n\n        if (typeFilter) {\n          filters.push(typeFilter);\n        } // Add other column's filters to input\n\n\n        _.forEach(subPanelContext.existingColumnFilters, function (existingFilter) {\n          if (existingFilter.columnName !== column.propertyName && existingFilter.columnName !== column.field) {\n            filters.push(existingFilter);\n          }\n        });\n\n        var startIndex = 0;\n        const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n        let defaultFacetValue = columnMenuContext.defaultFacetSelection !== false;\n\n        if (!reload && facetObjects) {\n          startIndex = facetObjects.length - 1;\n        } else if (columnMenuContext.isFacetsInitialized && reload) {\n          // reset show all since data is being reloaded\n          defaultFacetValue = true;\n        }\n\n        var filterFacetInput = {\n          column: column,\n          columnFilters: filters,\n          maxToReturn: 50,\n          startIndex: startIndex\n        };\n        let filterFacetResults = await subPanelContext.getFilterFacetsAction(filterFacetInput);\n        const selectAllProperty = {\n          propertyDisplayName: _localeTextBundle.selectAll,\n          typex: 'BOOLEAN',\n          serverValue: SELECT_ALL_PROPERTY\n        };\n\n        if (filterFacetResults && filterFacetResults.values && filterFacetResults.values.length) {\n          // Add select all if reload\n          if (reload) {\n            filterFacetValues.push(selectAllProperty);\n\n            if (columnMenuContext.isFacetsInitialized) {\n              propertyService.setValue(selectAllProperty, true);\n            } else {\n              propertyService.setValue(selectAllProperty, column.filter.selectAllDefault);\n            }\n          }\n\n          _.forEach(filterFacetResults.values, function (value) {\n            let fieldValue = value;\n\n            if (!fieldValue) {\n              fieldValue = column.filter.blanksI18n;\n            }\n\n            const facetProperty = {\n              propertyDisplayName: fieldValue,\n              typex: 'BOOLEAN',\n              serverValue: value\n            };\n            let facetValue = defaultFacetValue; // Load existing facet selections into values\n\n            if (!columnMenuContext.isFacetsInitialized && column.filter.columnFilters.length) {\n              if (isExistingFacetValueNotEquals(column.filter.columnFilters, value)) {\n                facetValue = false;\n              }\n\n              if (!facetValue && isExistingFacetValueEquals(column.filter.columnFilters, value)) {\n                facetValue = true;\n              }\n            }\n\n            propertyService.setValue(facetProperty, facetValue);\n            filterFacetValues.push(facetProperty);\n          });\n\n          filterFacetValuesTotalFound = filterFacetResults.totalFound + 1;\n\n          if (reload) {\n            facetDataProvider.update(filterFacetValues, filterFacetValuesTotalFound);\n          }\n        } else {\n          facetDataProvider.update([]);\n        }\n\n        const columnMenuData = {\n          columnName: column.field\n        };\n        let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n        if (!reload) {\n          facetProperties = _.concat(facetProperties, filterFacetValues);\n        }\n\n        columnMenuData.facetValues = facetProperties;\n        columnMenuData.facetValuesTotalFound = filterFacetValuesTotalFound;\n        columnMenuData.isStale = false;\n        exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n      }\n\n      columnMenuContext.isFacetsInitialized = true;\n      columnMenuContext.isFacetLoading = false;\n      return {\n        results: filterFacetValues,\n        totalFound: filterFacetValuesTotalFound\n      };\n    }\n\n    columnMenuContext.isFacetLoading = false;\n  }\n\n  return {\n    results: [],\n    totalFound: 0\n  };\n};\n/**\n * Update the facet values, waiting for user entry.\n */\n\nexport let updateFacetValuesDebounce = _.debounce(loadFacetValues, 500, {\n  maxWait: 10000,\n  trailing: true,\n  leading: false\n});\n/**\n * Remove a filter from the columnProvider and reset the column's filter.\n *\n * @param {Object} column column def object\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n */\n\nexport let removeFilter = function (column, columnProvider, dataProvider) {\n  let columnFiltersToUpdate = columnProvider.getColumnFilters();\n  columnFilterUtility.removeColumnFilter(columnFiltersToUpdate, column.field);\n  columnProvider.setColumnFilters(columnFiltersToUpdate); // Set all filters as stale\n\n  _.forEach(dataProvider.cols, function (col) {\n    if (col.field === column.field) {\n      exports.resetColumnFilter(col);\n    } else {\n      exports.setColumnFilterStale(col);\n    }\n  });\n};\n/**\n * Remove a filter action from the menu button.\n *\n * @param {Object} column column def object\n */\n\nexport let clearFilterFromMenu = function (column, gridContextDispatcher) {\n  const columnMenuContext = appContextService.getCtx('columnMenuContext');\n  columnMenuContext.isClearActionUsed = true;\n  const columnFilterInfo = {\n    column: column\n  };\n  gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    columnFilterInfo: columnFilterInfo,\n    columnMenuData: {\n      columnName: column.field\n    }\n  }); // Return empty array because there are no filters\n\n  return [];\n};\n/**\n * Save the information of type-based filter.\n *\n * @param {Object} column - table column information\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let updateViewTypeMenuData = function (gridContextDispatcher, column, viewModelData) {\n  const columnMenuData = {\n    columnName: column.field\n  };\n\n  switch (column.filter.view) {\n    case columnFilterUtility.FILTER_VIEW.NUMERIC:\n      columnMenuData.startNumber = viewModelData.startNumber;\n      columnMenuData.endNumber = viewModelData.endNumber;\n      columnMenuData.numberValue = viewModelData.numberValue;\n      columnMenuData.operation = viewModelData.operation;\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.DATE:\n      columnMenuData.startDate = viewModelData.startDate;\n      columnMenuData.endDate = viewModelData.endDate;\n      break;\n\n    case columnFilterUtility.FILTER_VIEW.TEXT:\n      columnMenuData.textValue = viewModelData.textValue;\n      columnMenuData.operation = viewModelData.operation;\n      break;\n  }\n\n  if (columnMenuData.operation) {\n    columnMenuData.operation.dbValue = viewModelData.operation.dbValue;\n  }\n\n  columnMenuData.isStale = true;\n  exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n  return columnMenuData;\n};\n/**\n * Validate filter enable/disable based on text filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let textEnableFilterToggle = function (isFilterDisabled, column, viewModelData, isBulkEditing) {\n  if (isTextFilterInputDefault(column, viewModelData) || isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    enableFiltering(isFilterDisabled);\n  }\n};\n/**\n * Text value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let textFilterInputChanged = function (gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (column.filter && columnMenuContext && columnMenuContext.isMenuIntialized) {\n    exports.updateViewTypeMenuData(gridContextDispatcher, column, viewModelData);\n    exports.textEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n  }\n};\n/**\n * Validate filter enable/disable based on date filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let dateEnableFilterToggle = function (isFilterDisabled, column, viewModelData, isBulkEditing) {\n  if (isDateFilterInputDefault(column, viewModelData) || isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    enableFiltering(isFilterDisabled);\n  }\n};\n/**\n * Date value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let dateFilterInputChanged = function (gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (column.filter && columnMenuContext && columnMenuContext.isMenuIntialized) {\n    exports.updateViewTypeMenuData(gridContextDispatcher, column, viewModelData);\n    exports.dateEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n  }\n};\n/**\n * Validate filter enable/disable based on numeric filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let numericEnableFilterToggle = function (isFilterDisabled, column, viewModelData, isBulkEditing) {\n  if (isNumericFilterInputDefault(column, viewModelData) || isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    enableFiltering(isFilterDisabled);\n  }\n};\n/**\n * Numeric value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let numericFilterInputChanged = function (gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled) {\n  let columnMenuContext = appContextService.getCtx('columnMenuContext');\n\n  if (column.filter && columnMenuContext && columnMenuContext.isMenuIntialized) {\n    exports.updateViewTypeMenuData(gridContextDispatcher, column, viewModelData);\n    exports.numericEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n  }\n};\n/**\n * Facet value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n * @param {Object} facetDataProvider - facet values data provider\n * @param {Object} facetParameters - facet information from checkbox that was changed\n */\n\nexport let filterFacetInputChanged = function (gridContextDispatcher, column, viewModelData, facetDataProvider, facetParameters, isBulkEditing, isFilterDisabled) {\n  if (column.filter) {\n    if (facetParameters.item.serverValue === SELECT_ALL_PROPERTY) {\n      return selectAllInputChanged(gridContextDispatcher, column, viewModelData, facetParameters.checked, facetDataProvider, isBulkEditing, isFilterDisabled);\n    }\n\n    let selectAllFacet = null;\n    let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n\n    _.forEach(facetProperties, function (currentFacet) {\n      if (currentFacet.serverValue === SELECT_ALL_PROPERTY) {\n        selectAllFacet = currentFacet;\n        return false;\n      }\n    });\n\n    const isFacetInputDefaultValue = isFacetInputDefault(facetDataProvider);\n\n    if (selectAllFacet && selectAllFacet.dbValue === false && isFacetInputDefaultValue) {\n      propertyService.setValue(selectAllFacet, true);\n    } else if (selectAllFacet && selectAllFacet.dbValue === true && facetParameters.checked === false) {\n      propertyService.setValue(selectAllFacet, false);\n    }\n\n    const columnMenuData = {\n      columnName: column.field\n    };\n    columnMenuData.facetValues = facetProperties;\n    columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n    exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n    checkForFilterDisability(column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled);\n    return selectAllFacet ? selectAllFacet.dbValue : true;\n  }\n\n  return true;\n};\n/**\n * Check for filter disability state based on the filter view.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let checkForFilterDisability = function (column, viewModelData, hasFilterFacetAction, facetDataProvider, isBulkEditing, isFilterDisabled) {\n  if (isBulkEditing) {\n    disableFiltering(isFilterDisabled);\n  } else {\n    if (hasFilterFacetAction && areAllFacetsUnchecked(facetDataProvider)) {\n      disableFiltering(isFilterDisabled);\n    } else if (hasFilterFacetAction && !isFacetInputDefault(facetDataProvider)) {\n      enableFiltering(isFilterDisabled);\n    } else if (column.filter && column.filter.view) {\n      switch (column.filter.view) {\n        case columnFilterUtility.FILTER_VIEW.NUMERIC:\n          exports.numericEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n          break;\n\n        case columnFilterUtility.FILTER_VIEW.DATE:\n          exports.dateEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n          break;\n\n        case columnFilterUtility.FILTER_VIEW.TEXT:\n          exports.textEnableFilterToggle(isFilterDisabled, column, viewModelData, isBulkEditing);\n          break;\n\n        default:\n          // enable filtering button by default when custom filter\n          enableFiltering(isFilterDisabled);\n      }\n    }\n  }\n};\n/**\n * Show Facet Filters Toggle button changed function\n * Saves the toggle state for that column and calls dataprovider for\n * facets if needed\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\n\nexport let showFiltersToggleChanged = function (gridContextDispatcher, column, viewModelData) {\n  const columnMenuData = {\n    columnName: column.field\n  };\n  columnMenuData.showFilters = viewModelData.showFilters;\n  exports.updateColumnMenuData(gridContextDispatcher, columnMenuData);\n};\n/**\n * Save the menu information to be loaded if re-opened.\n *\n * @param {String} columnName - Column that menu was used\n * @param {Object} columnMenuData - menu information to be saved\n */\n\nexport let updateColumnMenuData = function (gridContextDispatcher, columnMenuData) {\n  gridContextDispatcher({\n    type: 'UPDATE_VALUES',\n    columnMenuData: columnMenuData\n  });\n};\n/**\n * Sets the column's filter as stale\n *\n * @param {Object} column - column definition object\n */\n\nexport let setColumnFilterStale = function (column) {\n  if (column.filter) {\n    column.filter.isStale = true;\n  }\n};\n/**\n * Copies over filter data from old column to new one\n * and sets the filter as stale on hidden\n *\n * @param {Object} newColumn - new column info\n * @param {Object} oldColumn - old column info\n */\n\nexport let updateNewColumnFilter = function (newColumn, oldColumn) {\n  if (newColumn.field === oldColumn.field && newColumn.filter && oldColumn.filter) {\n    newColumn.filter.isSelectedFacetValues = oldColumn.filter.isSelectedFacetValues;\n    newColumn.filter.isStale = newColumn.hiddenFlag || oldColumn.filter.isStale;\n    newColumn.filter = { ...newColumn.filter,\n      ...oldColumn.filter.columnMenuData\n    };\n\n    if (oldColumn.filter.columnMenuData && oldColumn.filter.columnMenuData.showFilters && oldColumn.filter.columnMenuData.showFilters.dbValue || oldColumn.filter.showFilterFacets) {\n      newColumn.filter.showFilterFacets = true;\n    }\n  }\n};\n/**\n * Load the locale text.\n */\n\nexport let loadConfiguration = async function () {\n  _localeTextBundle.invalidNumberRange = await localeService.getLocalizedTextFromKey('UIMessages.invalidNumberRange');\n  _localeTextBundle.invalidDate = await localeService.getLocalizedTextFromKey('UIMessages.invalidDate');\n  _localeTextBundle.equalsOperation = await localeService.getLocalizedTextFromKey('UIMessages.equalsOperation');\n  _localeTextBundle.containsOperation = await localeService.getLocalizedTextFromKey('UIMessages.containsOperation');\n  _localeTextBundle.selectAll = await localeService.getLocalizedTextFromKey('UIMessages.selectAll');\n  _localeTextBundle.blanks = await localeService.getLocalizedTextFromKey('UIMessages.blanks');\n  _localeTextBundle.noMatchesFound = await localeService.getLocalizedTextFromKey('UIMessages.noMatchesFound');\n  _localeTextBundle.rangeOperation = await localeService.getLocalizedTextFromKey('UIMessages.rangeOperation');\n  _localeTextBundle.greaterThanOperation = await localeService.getLocalizedTextFromKey('UIMessages.greaterThanOperation');\n  _localeTextBundle.lessThanOperation = await localeService.getLocalizedTextFromKey('UIMessages.lessThanOperation');\n  _localeTextBundle.notContainsOperation = await localeService.getLocalizedTextFromKey('UIMessages.notContainsOperation');\n  _localeTextBundle.startsWithOperation = await localeService.getLocalizedTextFromKey('UIMessages.startsWithOperation');\n  _localeTextBundle.endsWithOperation = await localeService.getLocalizedTextFromKey('UIMessages.endsWithOperation');\n  _localeTextBundle.notEqualsOperation = await localeService.getLocalizedTextFromKey('UIMessages.notEqualsOperation');\n  _localeTextBundle.andFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.andFilterTooltip');\n  _localeTextBundle.greaterThanFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.greaterThanFilterTooltip');\n  _localeTextBundle.greaterThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.greaterThanEqualsFilterTooltip');\n  _localeTextBundle.lessThanFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.lessThanFilterTooltip');\n  _localeTextBundle.lessThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.lessThanEqualsFilterTooltip');\n  _localeTextBundle.equalsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.equalsFilterTooltip');\n  _localeTextBundle.notEqualsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.notEqualsFilterTooltip');\n  _localeTextBundle.containsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.containsFilterTooltip');\n  _localeTextBundle.notContainsFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.notContainsFilterTooltip');\n  _localeTextBundle.startsWithFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.startsWithFilterTooltip');\n  _localeTextBundle.endWithFilterTooltip = await localeService.getLocalizedTextFromKey('UIMessages.endWithFilterTooltip');\n};\n/**\n * Setup to listen to changes in locale.\n *\n * @param {String} locale - String with the updated locale value.\n */\n\neventBus.subscribe('locale.changed', function () {\n  loadConfiguration();\n}, 'awColumnFilterService');\nexports = {\n  loadConfiguration,\n  doTextValidation,\n  doNumericValidation,\n  processFacetValuesInFilter,\n  doTextFiltering,\n  doDateValidation,\n  doDateFiltering,\n  doNumericFiltering,\n  getFilterTypeByColumnType,\n  addFilterValue,\n  setExistingNumericFilter,\n  setExistingDateFilter,\n  setExistingTextFilter,\n  checkExistingFacetFilter,\n  updateColumnFilter,\n  resetColumnFilter,\n  removeStaleFilters,\n  createFilterSummary,\n  removeAllFilters,\n  isColumnFilterApplied,\n  loadFacetValues,\n  updateFacetValuesDebounce,\n  removeFilter,\n  textEnableFilterToggle,\n  textFilterInputChanged,\n  dateEnableFilterToggle,\n  dateFilterInputChanged,\n  numericEnableFilterToggle,\n  numericFilterInputChanged,\n  filterFacetInputChanged,\n  checkForFilterDisability,\n  showFiltersToggleChanged,\n  setColumnFilterStale,\n  updateNewColumnFilter,\n  setFilters,\n  initializeMenu,\n  selectAllInputChanged,\n  clearFilterFromMenu,\n  updateViewTypeMenuData,\n  updateColumnMenuData,\n  updateTableWithColumnFilters\n};\nexport default exports;\nloadConfiguration();","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/awColumnFilterService.js"],"names":["_localeTextBundle","exports","numberFacetsToShow","facetCheckboxHeight","SELECT_ALL_PROPERTY","isValidNumber","isFinite","value","isDefaultFilterValue","property","_","isExistingFacetValueNotEquals","isExistingNotEqualsFacet","filter","columnFilterUtility","isExistingFacetValueEquals","isExistingEqualsFacet","getDefaultFacetSelectionValue","defaultSelectionValue","initializeMenu","columnMenuData","registerContext","columnMenuContext","appContextService","column","setFilters","updatedColumnFilters","columnProvider","dataProvider","col","updatedColumn","oldShowFilterFacets","isTextFilterInputDefault","isInputDefault","viewModelData","isDateFilterInputDefault","dateTimeService","isNumericFilterInputDefault","opeartionValue","isFacetInputDefault","facetObjects","facetDataProvider","currentValue","areAllFacetsUnchecked","allFacetsUnchecked","disableFiltering","isFilterDisabled","enableFiltering","clearContextAttributes","context","doTextValidation","doNumericValidation","messagingService","processFacetValuesInFilter","facetFilter","facetUiValues","createTextFilter","eventData","updateTableWithColumnFilters","columnFilterInfo","filters","columnFilters","gridContextDispatcher","type","doTextFiltering","newFilters","isFacetInputDefaultResult","filterData","columnName","operation","textValue","dbValue","textColumnFilter","doDateValidation","startDateTime","endDateTime","createDateFilter","startDateUtc","endDate","endDateUtc","doDateFiltering","startDate","createNumericFilter","doNumericFiltering","numberValue","startNumber","endNumber","getFilterTypeByColumnType","returnFilterType","columnType","columnTypeString","addFilterValue","existingFilters","isFilterApplied","isDirty","view","summaryText","uiValue","hasLov","isEditable","isEnabled","propApi","propertyLabelDisplay","propertyName","operationType","isRequired","dateApi","containsOperation","currentFilterView","setExistingNumericFilter","newFilter","Number","currentFilter","setExistingDateFilter","setExistingTextFilter","checkExistingFacetFilter","updateColumnFilter","resetColumnFilter","removeStaleFilters","columns","newColumnFilters","isValidFilter","currentColumn","createFilterSummary","filterSummary","filterCount","i","columnFilter","firstValue","secondValue","filterView","firstValueDateTime","Date","firstValueDate","secondValueDateTime","secondValueDate","arrayAsString","j","removeAllFilters","isColumnFilterApplied","selectAllInputChanged","propertyService","field","checkForFilterDisability","getTypeFilter","typeFilter","viewModel","loadFacetValues","subPanelContext","filterFacetValues","filterFacetValuesTotalFound","existingFilter","startIndex","defaultFacetValue","filterFacetInput","maxToReturn","filterFacetResults","selectAllProperty","propertyDisplayName","typex","serverValue","fieldValue","facetProperty","facetValue","facetProperties","results","totalFound","updateFacetValuesDebounce","maxWait","trailing","leading","removeFilter","columnFiltersToUpdate","clearFilterFromMenu","updateViewTypeMenuData","textEnableFilterToggle","textFilterInputChanged","dateEnableFilterToggle","dateFilterInputChanged","numericEnableFilterToggle","numericFilterInputChanged","filterFacetInputChanged","facetParameters","selectAllFacet","currentFacet","isFacetInputDefaultValue","hasFilterFacetAction","showFiltersToggleChanged","updateColumnMenuData","setColumnFilterStale","updateNewColumnFilter","newColumn","oldColumn","loadConfiguration","localeService","eventBus"],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n// Copyright (c) 2020 Siemens\n\n/**\n * This service is used for PLTable as Column Filter Service\n *\n * @module js/awColumnFilterService\n *\n */\nimport messagingService from 'js/messagingService';\nimport dateTimeService from 'js/dateTimeService';\nimport localeService from 'js/localeService';\nimport appContextService from 'js/appCtxService';\nimport propertyService from 'js/uwPropertyService';\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport columnFilterUtility from 'js/awColumnFilterUtility';\n\nvar _localeTextBundle = {};\n\nvar exports = {};\n\n/*********************************\n * Temporary Constants for Facet *\n ********************************/\nconst numberFacetsToShow = 10;\nconst facetCheckboxHeight = 33;\nconst SELECT_ALL_PROPERTY = 'awSelectAllOption';\n\n/**\n * Determines if value is valid number to process.\n *\n * @param {Number|String} value - Number value\n *\n * @returns {Boolean} true if valid number\n */\nvar isValidNumber = function( value ) {\n    return isFinite( value ) && value !== null && value !== '';\n};\n\n/**\n * Check if property has a default value.\n *\n * @param {Object} property - property to check values\n * @returns {boolean} true is has blank value\n */\nconst isDefaultFilterValue = function( property ) {\n    return property && ( _.isNil( property.dbValue ) || property.dbValue === '' );\n};\n\n/**\n * Check if existing filters have not equal facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and not equals\n */\nconst isExistingFacetValueNotEquals = function( columnFilters, value ) {\n    let isExistingNotEqualsFacet = false;\n    _.forEach( columnFilters, function( filter ) {\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS && filter.values && filter.values.includes( value ) ) {\n            isExistingNotEqualsFacet = true;\n            return false;\n        }\n    } );\n    return isExistingNotEqualsFacet;\n};\n\n/**\n * Check if existing filters have equals facets.\n *\n * @param {Array} columnFilters\n * @param {String} value\n * @returns {boolean} true if facets are existing and equals\n */\nconst isExistingFacetValueEquals = function( columnFilters, value ) {\n    let isExistingEqualsFacet = false;\n    _.forEach( columnFilters, function( filter ) {\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS && filter.values && filter.values.includes( value ) ) {\n            isExistingEqualsFacet = true;\n            return false;\n        }\n    } );\n    return isExistingEqualsFacet;\n};\n\n/**\n * Get the default selection of facets based on existing filters.\n *\n * @param {Array} columnFilters\n * @returns true if existing filters have not equals, false if equals\n */\nconst getDefaultFacetSelectionValue = function( columnFilters ) {\n    let defaultSelectionValue = null;\n    _.forEach( columnFilters, function( filter ) {\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS ) {\n            defaultSelectionValue = false;\n            return false;\n        }\n        if( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS ) {\n            defaultSelectionValue = true;\n            return false;\n        }\n    } );\n    return defaultSelectionValue;\n};\n\n/**\n * Initialize the column menu's default variables.\n *\n * @param {Object} column - column information\n * @param {Object} viewModelData - menu view model data\n * @param {Object} operation - column filtering operation\n */\nexport let initializeMenu = function( column, columnFilterData, columnMenuData = {} ) {\n    let registerContext = false;\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( !columnMenuContext ) {\n        columnMenuContext = {};\n        registerContext = true;\n    }\n    columnMenuContext.isFacetsInitialized = false;\n    columnMenuContext.isFacetLoading = false;\n    columnMenuContext.isSelectedFacetValues = false;\n    columnMenuContext.isMenuIntialized = true;\n    if( column.filter ) {\n        // Set the defaultFacetSection for when an existing facet filter was applied\n        columnMenuContext.defaultFacetSelection = getDefaultFacetSelectionValue( column.filter.columnFilters );\n        if( columnMenuContext.defaultFacetSelection === false ) {\n            columnMenuContext.isSelectedFacetValues = true;\n        }\n    }\n    registerContext && appContextService.registerCtx( 'columnMenuContext', columnMenuContext );\n\n    columnMenuData = { ...columnFilterData, ...columnMenuData };\n\n    return { columnMenuData: columnMenuData };\n};\n\n/**\n * Sets the filter information on the column filter and the column provider filters used for SOA.\n *\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n * @param {Array} newProviderFilters new column provider filters to set\n * @param {Object} updatedColumn column with the updated filter attached\n */\nexport let setFilters = function( columnProvider, dataProvider, newProviderFilters, updatedColumn ) {\n    const updatedColumnFilters = columnFilterUtility.addOrReplaceColumnFilter( columnProvider.getColumnFilters(), newProviderFilters );\n    columnProvider.setColumnFilters( updatedColumnFilters );\n\n    // Set all filters as stale except for column in newProviderFilters\n    _.forEach( dataProvider.cols, function( col ) {\n        if( col.field === updatedColumn.field ) {\n            // Need to preserve whether show filters was on/off\n            const oldShowFilterFacets = col.filter.showFilterFacets;\n            exports.updateColumnFilter( col, newProviderFilters );\n            col.filter.showFilterFacets = oldShowFilterFacets;\n        } else {\n            exports.setColumnFilterStale( col );\n        }\n    } );\n};\n\n/**\n * Check if text filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\nvar isTextFilterInputDefault = function( column, viewModelData ) {\n    var isInputDefault = false;\n    if( !column.filter.isFilterApplied && isDefaultFilterValue( viewModelData.textValue ) ) {\n        isInputDefault = true;\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if date filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\nvar isDateFilterInputDefault = function( column, viewModelData ) {\n    var isInputDefault = false;\n    if( !column.filter.isFilterApplied && viewModelData.startDate &&\n        dateTimeService.isNullDate( viewModelData.startDate.dbValue ) &&\n        viewModelData.endDate &&\n        dateTimeService.isNullDate( viewModelData.endDate.dbValue ) &&\n        viewModelData.startDate.dateApi && !viewModelData.startDate.dateApi.dateValue &&\n        viewModelData.endDate.dateApi && !viewModelData.endDate.dateApi.dateValue ) {\n        isInputDefault = true;\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if numeric filter inputs are default values.\n *\n * @param {Object} column column definition object\n * @returns {Boolean} whether input values are all original values\n */\nvar isNumericFilterInputDefault = function( column, viewModelData ) {\n    var isInputDefault = false;\n    if( !column.filter.isFilterApplied ) {\n        const opeartionValue = viewModelData.operation.dbValue;\n        switch ( opeartionValue ) {\n            case columnFilterUtility.OPERATION_TYPE.RANGE:\n                isInputDefault = isDefaultFilterValue( viewModelData.startNumber ) && isDefaultFilterValue( viewModelData.endNumber );\n                break;\n            case columnFilterUtility.OPERATION_TYPE.GREATER:\n                isInputDefault = isDefaultFilterValue( viewModelData.numberValue );\n                break;\n            case columnFilterUtility.OPERATION_TYPE.LESS:\n                isInputDefault = isDefaultFilterValue( viewModelData.numberValue );\n                break;\n            case columnFilterUtility.OPERATION_TYPE.EQUALS:\n                isInputDefault = isDefaultFilterValue( viewModelData.numberValue );\n                break;\n        }\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if all facets are checked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are selected\n */\nvar isFacetInputDefault = function( facetDataProvider ) {\n    var isInputDefault = true;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    if( facetObjects ) {\n        _.forEach( facetObjects, function( currentValue ) {\n            if( !currentValue.dbValue && currentValue.serverValue !== SELECT_ALL_PROPERTY ) {\n                isInputDefault = false;\n                return false;\n            }\n            return true;\n        } );\n    }\n    return isInputDefault;\n};\n\n/**\n * Check if all facets are unchecked\n *\n * @param {Object} column column definition object\n * @returns {Boolean} true if all facets are deselected\n */\nvar areAllFacetsUnchecked = function( facetDataProvider ) {\n    var allFacetsUnchecked;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    if( facetObjects && !isFacetInputDefault( facetDataProvider ) ) {\n        allFacetsUnchecked = true;\n        _.forEach( facetObjects, function( currentValue ) {\n            if( currentValue.dbValue ) {\n                allFacetsUnchecked = false;\n                return false;\n            }\n            return true;\n        } );\n    }\n    return allFacetsUnchecked;\n};\n\n/**\n * Disable filtering in menu.\n *\n * @param {Object} column column definition object\n */\nvar disableFiltering = function( isFilterDisabled ) {\n    if ( isFilterDisabled.update ) {\n        isFilterDisabled.update( { value: true } );\n    } else {\n        isFilterDisabled.value = true;\n    }\n};\n\n/**\n * Enable filtering in menu.\n *\n * @param {Object} column column definition object\n */\nvar enableFiltering = function( isFilterDisabled ) {\n    if ( isFilterDisabled.update ) {\n        isFilterDisabled.update( { value: false } );\n    } else {\n        isFilterDisabled.value = false;\n    }\n};\n\n/**\n * Clear an filter errors from the menu.\n *\n * @param {Object} context - menu context information\n */\nvar clearContextAttributes = function( context ) {\n    if( context.filterError ) {\n        delete context.filterError; // remove error if exists\n    }\n};\n\n/**\n * Validate the text information coming from the filter column menu UI.\n *\n * @param {Object} textValue - The text value coming from the filter menu\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if textValue is valid\n */\nexport let doTextValidation = function( textValue, viewModelData ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext ) {\n        clearContextAttributes( columnMenuContext );\n    }\n    return true;\n};\n\n/**\n * Validate the numeric information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if numeric information is valid\n */\nexport let doNumericValidation = function( viewModelData ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext ) {\n        clearContextAttributes( columnMenuContext );\n\n        if( _.isNumber( viewModelData.startNumber.dbValue ) && _.isNumber( viewModelData.endNumber.dbValue ) && viewModelData.startNumber.dbValue > viewModelData.endNumber.dbValue ) {\n            columnMenuContext.filterError = true;\n            messagingService.showError( _localeTextBundle.invalidNumberRange );\n        }\n        return !columnMenuContext.filterError;\n    }\n    return true;\n};\n\n/**\n * Create a column filter from the facet values in column.\n *\n * @param {Object} column - column definition object\n * @returns {Object} filter object created from facet values\n */\nexport let processFacetValuesInFilter = function( column, facetDataProvider ) {\n    var facetFilter = null;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( facetObjects ) {\n        var facetUiValues = [];\n        _.forEach( facetObjects, function( currentValue ) {\n            if( currentValue.serverValue !== SELECT_ALL_PROPERTY &&\n                ( columnMenuContext.isSelectedFacetValues && currentValue.dbValue === true ||\n                    !columnMenuContext.isSelectedFacetValues && currentValue.dbValue === false ) ) {\n                facetUiValues.push( currentValue.serverValue );\n            }\n        } );\n\n        if( columnMenuContext.isSelectedFacetValues ) {\n            facetFilter = columnFilterUtility.createCaseSensitiveEqualsFilter( column.field, facetUiValues );\n        } else {\n            facetFilter = columnFilterUtility.createCaseSensitiveNotEqualsFilter( column.field, facetUiValues );\n        }\n    }\n    return facetFilter;\n};\n\n/**\n * Creates a text filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\nvar createTextFilter = function( eventData ) {\n    var filter = null;\n    if( eventData ) {\n        filter = columnFilterUtility.createFilter( eventData.operation, eventData.columnName, [ eventData.textValue ] );\n    }\n    return filter;\n};\n\nexport let updateTableWithColumnFilters = function( gridContextDispatcher, column, columnFilters ) {\n    const columnFilterInfo = {\n        column: column,\n        filters: columnFilters\n    };\n    gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        columnFilterInfo: columnFilterInfo\n    } );\n};\n\n/**\n * Add/remove the text filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\nexport let doTextFiltering = function( column, viewModelData, facetDataProvider, gridContextDispatcher ) {\n    // client side validation\n    let newFilters = null;\n    if( exports.doTextValidation( viewModelData ) ) {\n        // Set columnProvider.columnFilters so dataProvider/actions can use the information\n        const isFacetInputDefaultResult = isFacetInputDefault( facetDataProvider );\n        if( viewModelData.textValue || !isFacetInputDefaultResult ) {\n            newFilters = [];\n            if( viewModelData.textValue && viewModelData.textValue.dbValue ) {\n                const filterData = {\n                    columnName: column.field,\n                    operation: viewModelData.operation.dbValue,\n                    textValue: viewModelData.textValue.dbValue\n                };\n                var textColumnFilter = createTextFilter( filterData );\n                newFilters.push( textColumnFilter );\n            }\n            if( !isFacetInputDefaultResult ) {\n                const facetFilter = exports.processFacetValuesInFilter( column, facetDataProvider );\n                if( facetFilter && facetFilter.values && facetFilter.values.length ) {\n                    newFilters.push( facetFilter );\n                }\n            }\n        }\n    }\n\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if ( columnMenuContext.filterError !== true && gridContextDispatcher ) {\n        updateTableWithColumnFilters( gridContextDispatcher, column, newFilters );\n    }\n    return newFilters;\n};\n\n/**\n * Validate the date information coming from the filter column menu UI.\n *\n * @param {Object} viewModelData - The viewModel data used for validation\n *\n * @returns {Boolean} true if date is valid\n */\nexport let doDateValidation = function( viewModelData ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext ) {\n        clearContextAttributes( columnMenuContext );\n\n        if( !dateTimeService.isNullDate( viewModelData.startDate.dbValue ) && !dateTimeService.isNullDate( viewModelData.endDate.dbValue ) ) {\n            var startDateTime = _.isNumber( viewModelData.startDate.dbValue ) ? viewModelData.startDate.dbValue : new Date( viewModelData.startDate.dbValue ).getTime();\n            var endDateTime = _.isNumber( viewModelData.endDate.dbValue ) ? viewModelData.endDate.dbValue : new Date( viewModelData.endDate.dbValue ).getTime();\n            if( startDateTime > endDateTime ) {\n                columnMenuContext.filterError = true;\n                messagingService.showError( _localeTextBundle.invalidDate );\n            }\n        }\n        return !columnMenuContext.filterError;\n    }\n    return true;\n};\n\n/**\n * Creates a date filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\nvar createDateFilter = function( eventData ) {\n    var filter = null;\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    if( !dateTimeService.isNullDate( eventData.startDate ) && !dateTimeService.isNullDate( eventData.endDate ) ) {\n        var startDateUtc = dateTimeService.formatUTC( new Date( eventData.startDate ) );\n        var endDate = new Date( eventData.endDate );\n        var endDateUtc = dateTimeService.formatUTC( endDate.setHours( 23, 59, 59, 999 ) );\n        filter = columnFilterUtility.createRangeFilter( eventData.columnName, [ startDateUtc, endDateUtc ] );\n    } else if( !dateTimeService.isNullDate( eventData.startDate ) ) {\n        startDateUtc = dateTimeService.formatUTC( new Date( eventData.startDate ) );\n        filter = columnFilterUtility.createGreaterThanEqualsFilter( eventData.columnName, [ startDateUtc ] );\n    } else if( !dateTimeService.isNullDate( eventData.endDate ) ) {\n        endDate = new Date( eventData.endDate );\n        endDateUtc = dateTimeService.formatUTC( endDate.setHours( 23, 59, 59, 999 ) );\n        filter = columnFilterUtility.createLessThanEqualsFilter( eventData.columnName, [ endDateUtc ] );\n    }\n    return filter;\n};\n\n/**\n * Add/remove the date filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\nexport let doDateFiltering = function( column, viewModelData, facetDataProvider, gridContextDispatcher ) {\n    let newFilters = null;\n    // Client validation\n    const isFacetInputDefaultResult = isFacetInputDefault( facetDataProvider );\n    if( exports.doDateValidation( viewModelData ) || !isFacetInputDefaultResult ) {\n        newFilters = [];\n        const filterData = {\n            columnName: column.field,\n            startDate: viewModelData.startDate.dbValue,\n            endDate: viewModelData.endDate.dbValue\n        };\n        var filter = createDateFilter( filterData );\n        if( filter ) {\n            newFilters.push( filter );\n        }\n        if( !isFacetInputDefaultResult ) {\n            const facetFilter = exports.processFacetValuesInFilter( column, facetDataProvider );\n            if( facetFilter && facetFilter.values && facetFilter.values.length ) {\n                newFilters.push( facetFilter );\n            }\n        }\n    }\n\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if ( columnMenuContext.filterError !== true && gridContextDispatcher ) {\n        updateTableWithColumnFilters( gridContextDispatcher, column, newFilters );\n    }\n    return newFilters;\n};\n\n/**\n * Creates a numeric filter based on column filter information\n *\n * @param {Object} eventData - Event Data for filter\n * @returns {Object} filter object\n */\nvar createNumericFilter = function( eventData ) {\n    var filter = null;\n    // Set columnProvider.columnFilters so dataProvider/actions can use the information\n    if( eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE &&\n        isValidNumber( eventData.startNumber ) && isValidNumber( eventData.endNumber ) ) {\n        filter = columnFilterUtility.createRangeFilter( eventData.columnName, [ eventData.startNumber, eventData.endNumber ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber( eventData.startNumber ) ) {\n        filter = columnFilterUtility.createGreaterThanEqualsFilter( eventData.columnName, [ eventData.startNumber ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.RANGE && isValidNumber( eventData.endNumber ) ) {\n        filter = columnFilterUtility.createLessThanEqualsFilter( eventData.columnName, [ eventData.endNumber ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.GREATER && isValidNumber( eventData.numberValue ) ) {\n        filter = columnFilterUtility.createGreaterThanFilter( eventData.columnName, [ eventData.numberValue ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.LESS && isValidNumber( eventData.numberValue ) ) {\n        filter = columnFilterUtility.createLessThanFilter( eventData.columnName, [ eventData.numberValue ] );\n    } else if( eventData.operation === columnFilterUtility.OPERATION_TYPE.EQUALS && isValidNumber( eventData.numberValue ) ) {\n        filter = columnFilterUtility.createEqualsFilter( eventData.columnName, [ eventData.numberValue ] );\n    }\n    return filter;\n};\n\n/**\n * Add/remove the numeric filter information to the column provider.\n *\n * @param {Object} column - Column object\n * @param {Object} viewModelData - The viewModel data used for validation\n * @param {Object} facetDataProvider - The data provider of the facets.\n */\nexport let doNumericFiltering = function( column, viewModelData, facetDataProvider, gridContextDispatcher ) {\n    let newFilters = null;\n    const isFacetInputDefaultResult = isFacetInputDefault( facetDataProvider );\n    if( exports.doNumericValidation( viewModelData ) || !isFacetInputDefaultResult ) {\n        // Set columnProvider.columnFilters so dataProvider/actions can use the information\n        newFilters = [];\n        const filterData = {\n            columnName: column.field,\n            operation: viewModelData.operation.dbValue,\n            numberValue: viewModelData.numberValue.dbValue,\n            startNumber: viewModelData.startNumber.dbValue,\n            endNumber: viewModelData.endNumber.dbValue\n        };\n        var filter = createNumericFilter( filterData );\n        if( filter ) {\n            newFilters.push( filter );\n        }\n        if( !isFacetInputDefaultResult ) {\n            const facetFilter = exports.processFacetValuesInFilter( column, facetDataProvider );\n            if( facetFilter && facetFilter.values && facetFilter.values.length ) {\n                newFilters.push( facetFilter );\n            }\n        }\n    }\n\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if ( columnMenuContext.filterError !== true && gridContextDispatcher ) {\n        updateTableWithColumnFilters( gridContextDispatcher, column, newFilters );\n    }\n    return newFilters;\n};\n\n/**\n * Find the type of filter to use by the column type.\n *\n * @param {String} columnType - Repersents the data type of the column\n *\n * @returns {String} The type of filter to use in the column menu\n */\nexport let getFilterTypeByColumnType = function( columnType ) {\n    var returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n\n    if( columnType ) {\n        if( _.isString( columnType ) ) {\n            columnType = columnType.toUpperCase();\n        }\n\n        var columnTypeString = columnType.toString();\n\n        switch ( columnTypeString ) {\n            case 'DOUBLE':\n            case 'INTEGER':\n            case 'FLOAT':\n            case '3': // Client Property Type\n            case '4': // Client Property Type Double\n            case '5': // Client Property Type Integer\n            case '7': // Client Property Type Short\n                returnFilterType = columnFilterUtility.FILTER_VIEW.NUMERIC;\n                break;\n            case 'DATE':\n            case '2': // Client Property Type Date\n                returnFilterType = columnFilterUtility.FILTER_VIEW.DATE;\n                break;\n            case 'STRING':\n            default:\n                returnFilterType = columnFilterUtility.FILTER_VIEW.TEXT;\n        }\n    }\n\n    return returnFilterType;\n};\n\n/**\n * Add filter information to the column object.\n *\n * @param {Object} column - Column to add filter information to\n * @param {String} currentFilterView - Filter view\n * @param {Array} existingFilters - Existing filter view to reference\n */\nexport let addFilterValue = function( column, currentFilterView, existingFilters ) {\n    existingFilters = existingFilters || [];\n\n    switch ( currentFilterView ) {\n        case columnFilterUtility.FILTER_VIEW.NUMERIC:\n            column.filter = {\n                isFilterApplied: false,\n                isDirty: false,\n                view: currentFilterView,\n                summaryText: '',\n                operation: {\n                    dbValue: 'equals',\n                    uiValue: _localeTextBundle.equalsOperation,\n                    hasLov: true,\n                    isEditable: true,\n                    isEnabled: true,\n                    propApi: {},\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL',\n                    propertyName: 'operation',\n                    type: 'STRING',\n                    operationType: 'childcommand'\n                },\n                numberValue: {\n                    dbValue: '',\n                    isEnabled: true,\n                    type: 'DOUBLE',\n                    isRequired: false,\n                    isEditable: true,\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n                },\n                startNumber: {\n                    dbValue: '',\n                    isEnabled: true,\n                    type: 'DOUBLE',\n                    isRequired: false,\n                    isEditable: true,\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n                },\n                endNumber: {\n                    dbValue: '',\n                    isEnabled: true,\n                    type: 'DOUBLE',\n                    isRequired: false,\n                    isEditable: true,\n                    propertyLabelDisplay: 'NO_PROPERTY_LABEL'\n                }\n            };\n            exports.setExistingNumericFilter( column.filter, existingFilters );\n            break;\n        case columnFilterUtility.FILTER_VIEW.DATE:\n            column.filter = {\n                isFilterApplied: false,\n                view: currentFilterView,\n                summaryText: '',\n                startDate: {\n                    dbValue: '',\n                    dateApi: {},\n                    isEnabled: true,\n                    type: 'DATE'\n                },\n                endDate: {\n                    dbValue: '',\n                    dateApi: {},\n                    isEnabled: true,\n                    type: 'DATE'\n                }\n            };\n            exports.setExistingDateFilter( column.filter, existingFilters );\n            break;\n        case columnFilterUtility.FILTER_VIEW.TEXT:\n        default:\n            column.filter = {\n                isFilterApplied: false,\n                isDirty: false,\n                view: currentFilterView,\n                summaryText: '',\n                columnFilters: [],\n                operation: {\n                    dbValue: 'contains',\n                    value: 'contains',\n                    uiValue: _localeTextBundle.containsOperation\n                },\n                textValue: {\n                    dbValue: ''\n                }\n            };\n            exports.setExistingTextFilter( column.filter, existingFilters );\n            // default to equals for custom filter\n            if( currentFilterView !== columnFilterUtility.FILTER_VIEW.TEXT ) {\n                column.filter.operation.dbValue = 'equals';\n                column.filter.operation.uiValue = _localeTextBundle.equalsOperation;\n                if ( existingFilters.length > 0 ) {\n                    column.filter.isFilterApplied = true;\n                }\n            }\n    }\n\n    // Set values common to all types\n    column.filter.isSelectedFacetValues = false;\n    column.filter.blanksI18n = _localeTextBundle.blanks;\n    column.filter.noMatchesFoundI18n = _localeTextBundle.noMatchesFound;\n    column.filter.selectAllDefault = true;\n    column.filter.showFilterFacets = false;\n\n    exports.checkExistingFacetFilter( column.filter, existingFilters );\n\n    if( column.filter.isFilterApplied ) {\n        column.filter.columnFilters = existingFilters;\n        column.filter.summaryText = exports.createFilterSummary( existingFilters, column.filter.view );\n    } else {\n        column.filter.columnFilters = [];\n    }\n};\n\n/**\n * Sets the existing filters on to the new numeric filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\nexport let setExistingNumericFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( currentFilter ) {\n        if( columnFilterUtility.isValidRangeColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n            newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n            newFilter.startNumber.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.endNumber.dbValue = Number( currentFilter.values[ 1 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidGreaterThanEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n            newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n            newFilter.startNumber.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidLessThanEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.RANGE;\n            newFilter.operation.uiValue = _localeTextBundle.rangeOperation;\n            newFilter.endNumber.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidGreaterThanColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.GREATER;\n            newFilter.operation.uiValue = _localeTextBundle.greaterThanOperation;\n            newFilter.numberValue.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidLessThanColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.LESS;\n            newFilter.operation.uiValue = _localeTextBundle.lessThanOperation;\n            newFilter.numberValue.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n            newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n            newFilter.numberValue.dbValue = Number( currentFilter.values[ 0 ] );\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Sets the existing filters on to the new date filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\nexport let setExistingDateFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( currentFilter ) {\n        if( columnFilterUtility.isValidRangeColumnFilter( currentFilter ) ) {\n            var startDate = new Date( currentFilter.values[ 0 ] );\n            var endDate = new Date( currentFilter.values[ 1 ] );\n            newFilter.startDate.dbValue = startDate.getTime();\n            newFilter.endDate.dbValue = endDate.getTime();\n            newFilter.isFilterApplied = true;\n        } else if( columnFilterUtility.isValidGreaterThanEqualsColumnFilter( currentFilter ) ) {\n            startDate = new Date( currentFilter.values[ 0 ] );\n            newFilter.startDate.dbValue = startDate.getTime();\n            newFilter.isFilterApplied = true;\n        } else if( columnFilterUtility.isValidLessThanEqualsColumnFilter( currentFilter ) ) {\n            endDate = new Date( currentFilter.values[ 0 ] );\n            newFilter.endDate.dbValue = endDate.getTime();\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Sets the existing filters on to the new text filter.\n *\n * @param {Object} newFilter The new filter that was created.\n * @param {Array} existingFilters All the existing filters from column provider.\n */\nexport let setExistingTextFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( currentFilter ) {\n        if( columnFilterUtility.isValidContainsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.CONTAINS;\n            newFilter.operation.uiValue = _localeTextBundle.containsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidNotContainsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS;\n            newFilter.operation.uiValue = _localeTextBundle.notContainsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidStartsWithColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.STARTS_WITH;\n            newFilter.operation.uiValue = _localeTextBundle.startsWithOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidEndsWithColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.ENDS_WITH;\n            newFilter.operation.uiValue = _localeTextBundle.endsWithOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n            return false;\n        } else if( columnFilterUtility.isValidEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.EQUALS;\n            newFilter.operation.uiValue = _localeTextBundle.equalsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n        } else if( columnFilterUtility.isValidNotEqualsColumnFilter( currentFilter ) ) {\n            newFilter.operation.dbValue = columnFilterUtility.OPERATION_TYPE.NOT_EQUALS;\n            newFilter.operation.uiValue = _localeTextBundle.notEqualsOperation;\n            newFilter.textValue.dbValue = currentFilter.values[ 0 ];\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Sets if filter is Applied for facets based on existing filters\n * @param {Object} newFilter - the new filter object that was created\n * @param {Object} existingFilters - The existing filters\n */\nexport let checkExistingFacetFilter = function( newFilter, existingFilters ) {\n    _.forEach( existingFilters, function( filter ) {\n        if( ( filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS || filter.operation === columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS ) &&\n            filter.values && filter.values.length > 0 ) {\n            newFilter.showFilterFacets = true;\n            newFilter.selectAllDefault = false;\n            newFilter.isFilterApplied = true;\n        }\n    } );\n};\n\n/**\n * Update the column with filter information.\n *\n * @param {Object} column columnInfo\n * @param {Array} existingFilters existing column filter\n */\nexport let updateColumnFilter = function( column, existingFilters ) {\n    var currentFilterView = column.filterDefinition;\n\n    if( !currentFilterView ) {\n        currentFilterView = exports.getFilterTypeByColumnType( column.dataType );\n    }\n\n    exports.addFilterValue( column, currentFilterView, existingFilters );\n};\n\n/**\n * Reset the column with default filter information.\n *\n * @param {Object} column columnInfo\n */\nexport let resetColumnFilter = function( column ) {\n    exports.updateColumnFilter( column, [] );\n};\n\n/**\n * Removes column filters that no longer apply to the table.\n *\n * @param {Object} columnProvider - Column provider used to store the filters\n * @param {Array} columns - columns in the table\n */\nexport let removeStaleFilters = function( columnProvider, columns ) {\n    if( columnProvider && columns && columns.length ) {\n        var columnFilters = columnProvider.getColumnFilters();\n        if( columnFilters && columnFilters.length ) {\n            var newColumnFilters = _.filter( columnFilters, function( currentFilter ) {\n                var isValidFilter = false;\n                _.forEach( columns, function( currentColumn ) {\n                    if( ( currentFilter.columnName === currentColumn.propertyName || currentFilter.columnName === currentColumn.field ) && !currentColumn.hiddenFlag ) {\n                        isValidFilter = true;\n                        return false;\n                    }\n                    return true;\n                } );\n                return isValidFilter;\n            } );\n            columnProvider.setColumnFilters( newColumnFilters );\n        }\n    }\n};\n\n/**\n * Create a filter summary text of the applied filter.\n *\n * @param {Array} columnFilters - Column filter objects that contains operation and values\n * @param {String} filterView - filter view in use\n *\n * @returns {String} returns the text summary of the applied filter\n */\nexport let createFilterSummary = function( columnFilters, filterView ) {\n    var filterSummary = '';\n    var filterCount = columnFilters.length;\n    if( !columnFilters || filterCount < 1 ) {\n        return filterSummary;\n    }\n\n    for( var i = 0; i < filterCount; i++ ) {\n        var columnFilter = columnFilters[ i ];\n        var firstValue = columnFilter.values[ 0 ];\n        var secondValue = columnFilter.values.length > 1 ? columnFilter.values[ 1 ] : '';\n\n        // Convert date values to readable strings\n        if( filterView === columnFilterUtility.FILTER_VIEW.DATE ) {\n            var firstValueDateTime = Date.parse( firstValue );\n            if( firstValueDateTime ) {\n                var firstValueDate = new Date( firstValueDateTime );\n                firstValue = firstValueDate.toLocaleDateString();\n            }\n            if( secondValue ) {\n                var secondValueDateTime = Date.parse( secondValue );\n                if( secondValueDateTime ) {\n                    var secondValueDate = new Date( secondValueDateTime );\n                    secondValue = secondValueDate.toLocaleDateString();\n                }\n            }\n        }\n\n        var arrayAsString = '';\n        for( var j = 0; j < columnFilter.values.length; j++ ) {\n            if( j > 0 && j < columnFilter.values.length ) {\n                arrayAsString += ',';\n            }\n\n            var value = columnFilter.values[ j ];\n            if( value === '' ) {\n                arrayAsString += _localeTextBundle.blanks;\n            } else {\n                arrayAsString += value;\n            }\n        }\n\n        // Set the filter summary text based on the operation type\n        switch ( columnFilter.operation ) {\n            case columnFilterUtility.OPERATION_TYPE.RANGE:\n                filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\" ';\n                filterSummary += _localeTextBundle.andFilterTooltip + ' ';\n                filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n                filterSummary += ' \"' + secondValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.GREATER:\n                filterSummary += _localeTextBundle.greaterThanFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.GREATER_EQUALS:\n                filterSummary += _localeTextBundle.greaterThanEqualsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.LESS:\n                filterSummary += _localeTextBundle.lessThanFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.LESS_EQUALS:\n                filterSummary += _localeTextBundle.lessThanEqualsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.EQUALS:\n            case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_EQUALS:\n                filterSummary += _localeTextBundle.equalsFilterTooltip;\n                filterSummary += ' \"' + arrayAsString + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.NOT_EQUALS:\n            case columnFilterUtility.OPERATION_TYPE.CASE_SENSITIVE_NOT_EQUALS:\n                filterSummary += _localeTextBundle.notEqualsFilterTooltip;\n                filterSummary += ' \"' + arrayAsString + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.CONTAINS:\n                filterSummary += _localeTextBundle.containsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.NOT_CONTAINS:\n                filterSummary += _localeTextBundle.notContainsFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.STARTS_WITH:\n                filterSummary += _localeTextBundle.startsWithFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            case columnFilterUtility.OPERATION_TYPE.ENDS_WITH:\n                filterSummary += _localeTextBundle.endWithFilterTooltip;\n                filterSummary += ' \"' + firstValue + '\"';\n                break;\n            default:\n                filterSummary += filterView;\n        }\n\n        if( filterCount > 1 && i === 0 ) {\n            filterSummary += ', ';\n        }\n    }\n    return filterSummary;\n};\n\n/**\n * Remove all the filters from the column provider, reset the dataProvider column filters.\n *\n * @param {Object} dataProvider data provider that contains the columns\n * @param {Object} columnProvider column provider that contains the column filters\n */\nexport let removeAllFilters = function( dataProvider, columnProvider ) {\n    var columns = dataProvider.cols;\n    for( var i = 0; i < columns.length; i++ ) {\n        exports.setColumnFilterStale( columns[ i ] );\n        exports.resetColumnFilter( columns[ i ] );\n    }\n    columnProvider.setColumnFilters( [] );\n};\n\n/**\n * Check if any of the columns have a filter applied.\n *\n * @param {Object} dataProvider data provider containing all the columns\n * @returns {Boolean} true/false based on if any column has a filter applied\n */\nexport let isColumnFilterApplied = function( dataProvider ) {\n    var columns = dataProvider.cols;\n    for( var i = 0; i < columns.length; i++ ) {\n        if( columns[ i ].filter && columns[ i ].filter.isFilterApplied ) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n * Select All toggle has been switched, switch all facets to checked/unchecked.\n *\n * @param {boolean} selectAllValue - Value if select all is checked\n * @param {Object} facetDataProvider - data provider of facet list\n * @returns {boolean} selectAllValue\n */\nexport let selectAllInputChanged = function( gridContextDispatcher, column, viewModelData, selectAllValue, facetDataProvider, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    columnMenuContext.isSelectedFacetValues = !selectAllValue;\n    const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    _.forEach( facetObjects, function( currentFacetObject ) {\n        propertyService.setValue( currentFacetObject, selectAllValue );\n    } );\n\n    const columnMenuData = { columnName: column.field };\n    columnMenuData.facetValues = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n    columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n    exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n\n    checkForFilterDisability( column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled );\n    return selectAllValue;\n};\n\nconst getTypeFilter = ( column, viewModel ) => {\n    var typeFilter = null;\n    var eventData = null;\n    if ( column.filter.view === columnFilterUtility.FILTER_VIEW.TEXT && viewModel.data.textValue.dbValue ) {\n        eventData = {\n            columnName: column.field,\n            operation: viewModel.data.operation.dbValue,\n            textValue: viewModel.data.textValue.dbValue\n        };\n        typeFilter = createTextFilter( eventData );\n    } else if ( column.filter.view === columnFilterUtility.FILTER_VIEW.NUMERIC ) {\n        eventData = {\n            columnName: column.field,\n            operation: viewModel.data.operation.dbValue,\n            numberValue: viewModel.data.numberValue.dbValue,\n            startNumber: viewModel.data.startNumber.dbValue,\n            endNumber: viewModel.data.endNumber.dbValue\n        };\n        if ( exports.doNumericValidation( viewModel.data ) ) {\n            typeFilter = createNumericFilter( eventData );\n        }\n    } else if ( column.filter.view === columnFilterUtility.FILTER_VIEW.DATE ) {\n        eventData = {\n            columnName: column.field,\n            startDate: viewModel.data.startDate.dbValue,\n            endDate: viewModel.data.endDate.dbValue\n        };\n        if ( exports.doDateValidation( viewModel.data ) ) {\n            typeFilter = createDateFilter( eventData );\n        }\n    }\n    return typeFilter;\n};\n\n/**\n * Call the 'getFacets' function from the dataProvider if available.\n *\n * @param {Object} gridContextDispatcher - table data dispatcher\n * @param {Object} column - column definition object\n * @param {Object} viewModel - view model of the table\n * @param {Object} subPanelContext - menu context information\n * @param {Object} facetDataProvider - The data provider of the facets.\n * @param {Boolean} reload - if reloading facets\n * @param {Object} isFilterDisabled - atomic data to determine filter disability\n */\nexport let loadFacetValues = async function( gridContextDispatcher, column, viewModel, subPanelContext, facetDataProvider, reload, isFilterDisabled ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( columnMenuContext && !columnMenuContext.isFacetLoading ) {\n        columnMenuContext.isFacetLoading = true;\n        if( subPanelContext.hasFilterFacetAction && viewModel.data.showFilters.dbValue ) {\n            let filterFacetValues = [];\n            let filterFacetValuesTotalFound = 0;\n            if( !column.filter.isStale && column.filter.facetValues && reload ) {\n                filterFacetValues = column.filter.facetValues;\n                filterFacetValuesTotalFound = column.filter.facetValuesTotalFound;\n                facetDataProvider.update( filterFacetValues, filterFacetValuesTotalFound );\n                exports.checkForFilterDisability( column, viewModel.data, subPanelContext.hasFilterFacetAction, facetDataProvider, subPanelContext.gridContext.isBulkediting, isFilterDisabled );\n            } else {\n                var filters = [];\n                var typeFilter = getTypeFilter( column, viewModel );\n\n                if( typeFilter ) {\n                    filters.push( typeFilter );\n                }\n\n                // Add other column's filters to input\n                _.forEach( subPanelContext.existingColumnFilters, function( existingFilter ) {\n                    if( existingFilter.columnName !== column.propertyName && existingFilter.columnName !== column.field ) {\n                        filters.push( existingFilter );\n                    }\n                } );\n\n                var startIndex = 0;\n                const facetObjects = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n                let defaultFacetValue = columnMenuContext.defaultFacetSelection !== false;\n                if( !reload && facetObjects ) {\n                    startIndex = facetObjects.length - 1;\n                } else if( columnMenuContext.isFacetsInitialized && reload ) {\n                    // reset show all since data is being reloaded\n                    defaultFacetValue = true;\n                }\n\n                var filterFacetInput = {\n                    column: column,\n                    columnFilters: filters,\n                    maxToReturn: 50,\n                    startIndex: startIndex\n                };\n\n                let filterFacetResults = await subPanelContext.getFilterFacetsAction( filterFacetInput );\n\n                const selectAllProperty = {\n                    propertyDisplayName: _localeTextBundle.selectAll,\n                    typex: 'BOOLEAN',\n                    serverValue: SELECT_ALL_PROPERTY\n                };\n\n                if( filterFacetResults && filterFacetResults.values && filterFacetResults.values.length ) {\n                    // Add select all if reload\n                    if( reload ) {\n                        filterFacetValues.push( selectAllProperty );\n                        if( columnMenuContext.isFacetsInitialized ) {\n                            propertyService.setValue( selectAllProperty, true );\n                        } else {\n                            propertyService.setValue( selectAllProperty, column.filter.selectAllDefault );\n                        }\n                    }\n\n                    _.forEach( filterFacetResults.values, function( value ) {\n                        let fieldValue = value;\n                        if( !fieldValue ) {\n                            fieldValue = column.filter.blanksI18n;\n                        }\n                        const facetProperty = {\n                            propertyDisplayName: fieldValue,\n                            typex: 'BOOLEAN',\n                            serverValue: value\n                        };\n                        let facetValue = defaultFacetValue;\n\n                        // Load existing facet selections into values\n                        if( !columnMenuContext.isFacetsInitialized && column.filter.columnFilters.length ) {\n                            if( isExistingFacetValueNotEquals( column.filter.columnFilters, value ) ) {\n                                facetValue = false;\n                            }\n\n                            if( !facetValue && isExistingFacetValueEquals( column.filter.columnFilters, value ) ) {\n                                facetValue = true;\n                            }\n                        }\n\n                        propertyService.setValue( facetProperty, facetValue );\n                        filterFacetValues.push( facetProperty );\n                    } );\n                    filterFacetValuesTotalFound = filterFacetResults.totalFound + 1;\n                    if( reload ) {\n                        facetDataProvider.update( filterFacetValues, filterFacetValuesTotalFound );\n                    }\n                } else {\n                    facetDataProvider.update( [] );\n                }\n\n                const columnMenuData = { columnName: column.field };\n                let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n                if( !reload ) {\n                    facetProperties = _.concat( facetProperties, filterFacetValues );\n                }\n                columnMenuData.facetValues = facetProperties;\n                columnMenuData.facetValuesTotalFound = filterFacetValuesTotalFound;\n                columnMenuData.isStale = false;\n                exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n            }\n\n            columnMenuContext.isFacetsInitialized = true;\n            columnMenuContext.isFacetLoading = false;\n\n            return {\n                results: filterFacetValues,\n                totalFound: filterFacetValuesTotalFound\n            };\n        }\n        columnMenuContext.isFacetLoading = false;\n    }\n    return {\n        results: [],\n        totalFound: 0\n    };\n};\n\n/**\n * Update the facet values, waiting for user entry.\n */\nexport let updateFacetValuesDebounce = _.debounce( loadFacetValues, 500, {\n    maxWait: 10000,\n    trailing: true,\n    leading: false\n} );\n\n/**\n * Remove a filter from the columnProvider and reset the column's filter.\n *\n * @param {Object} column column def object\n * @param {Object} columnProvider column provider for the data\n * @param {Object} dataProvider data provider for the data\n */\nexport let removeFilter = function( column, columnProvider, dataProvider ) {\n    let columnFiltersToUpdate = columnProvider.getColumnFilters();\n    columnFilterUtility.removeColumnFilter( columnFiltersToUpdate, column.field );\n    columnProvider.setColumnFilters( columnFiltersToUpdate );\n\n    // Set all filters as stale\n    _.forEach( dataProvider.cols, function( col ) {\n        if( col.field === column.field ) {\n            exports.resetColumnFilter( col );\n        } else {\n            exports.setColumnFilterStale( col );\n        }\n    } );\n};\n\n/**\n * Remove a filter action from the menu button.\n *\n * @param {Object} column column def object\n */\nexport let clearFilterFromMenu = function( column, gridContextDispatcher ) {\n    const columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    columnMenuContext.isClearActionUsed = true;\n\n    const columnFilterInfo = {\n        column: column\n    };\n    gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        columnFilterInfo: columnFilterInfo,\n        columnMenuData: {\n            columnName: column.field\n        }\n    } );\n\n    // Return empty array because there are no filters\n    return [];\n};\n\n/**\n * Save the information of type-based filter.\n *\n * @param {Object} column - table column information\n * @param {Object} viewModelData - column menu view model data\n */\nexport let updateViewTypeMenuData = function( gridContextDispatcher, column, viewModelData ) {\n    const columnMenuData = { columnName: column.field };\n\n    switch ( column.filter.view ) {\n        case columnFilterUtility.FILTER_VIEW.NUMERIC:\n            columnMenuData.startNumber = viewModelData.startNumber;\n            columnMenuData.endNumber = viewModelData.endNumber;\n            columnMenuData.numberValue = viewModelData.numberValue;\n            columnMenuData.operation = viewModelData.operation;\n            break;\n        case columnFilterUtility.FILTER_VIEW.DATE:\n            columnMenuData.startDate = viewModelData.startDate;\n            columnMenuData.endDate = viewModelData.endDate;\n            break;\n        case columnFilterUtility.FILTER_VIEW.TEXT:\n            columnMenuData.textValue = viewModelData.textValue;\n            columnMenuData.operation = viewModelData.operation;\n            break;\n    }\n\n    if( columnMenuData.operation ) {\n        columnMenuData.operation.dbValue = viewModelData.operation.dbValue;\n    }\n\n    columnMenuData.isStale = true;\n\n    exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n    return columnMenuData;\n};\n\n/**\n * Validate filter enable/disable based on text filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let textEnableFilterToggle = function( isFilterDisabled, column, viewModelData, isBulkEditing ) {\n    if( isTextFilterInputDefault( column, viewModelData ) || isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        enableFiltering( isFilterDisabled );\n    }\n};\n\n/**\n * Text value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let textFilterInputChanged = function( gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( column.filter && columnMenuContext && columnMenuContext.isMenuIntialized ) {\n        exports.updateViewTypeMenuData( gridContextDispatcher, column, viewModelData );\n        exports.textEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n    }\n};\n\n/**\n * Validate filter enable/disable based on date filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let dateEnableFilterToggle = function( isFilterDisabled, column, viewModelData, isBulkEditing ) {\n    if( isDateFilterInputDefault( column, viewModelData ) || isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        enableFiltering( isFilterDisabled );\n    }\n};\n\n/**\n * Date value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let dateFilterInputChanged = function( gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( column.filter && columnMenuContext && columnMenuContext.isMenuIntialized ) {\n        exports.updateViewTypeMenuData( gridContextDispatcher, column, viewModelData );\n        exports.dateEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n    }\n};\n\n/**\n * Validate filter enable/disable based on numeric filter.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let numericEnableFilterToggle = function( isFilterDisabled, column, viewModelData, isBulkEditing ) {\n    if( isNumericFilterInputDefault( column, viewModelData ) || isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        enableFiltering( isFilterDisabled );\n    }\n};\n\n/**\n * Numeric value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let numericFilterInputChanged = function( gridContextDispatcher, column, viewModelData, isBulkEditing, isFilterDisabled ) {\n    let columnMenuContext = appContextService.getCtx( 'columnMenuContext' );\n    if( column.filter && columnMenuContext && columnMenuContext.isMenuIntialized ) {\n        exports.updateViewTypeMenuData( gridContextDispatcher, column, viewModelData );\n        exports.numericEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n    }\n};\n\n/**\n * Facet value changes, revalidate filtering state.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n * @param {Object} facetDataProvider - facet values data provider\n * @param {Object} facetParameters - facet information from checkbox that was changed\n */\nexport let filterFacetInputChanged = function( gridContextDispatcher, column, viewModelData, facetDataProvider, facetParameters, isBulkEditing, isFilterDisabled ) {\n    if( column.filter ) {\n        if( facetParameters.item.serverValue === SELECT_ALL_PROPERTY ) {\n            return selectAllInputChanged( gridContextDispatcher, column, viewModelData, facetParameters.checked, facetDataProvider, isBulkEditing, isFilterDisabled );\n        }\n\n        let selectAllFacet = null;\n        let facetProperties = facetDataProvider.getViewModelCollection().getLoadedViewModelObjects();\n        _.forEach( facetProperties, function( currentFacet ) {\n            if( currentFacet.serverValue === SELECT_ALL_PROPERTY ) {\n                selectAllFacet = currentFacet;\n                return false;\n            }\n        } );\n\n        const isFacetInputDefaultValue = isFacetInputDefault( facetDataProvider );\n\n        if( selectAllFacet && selectAllFacet.dbValue === false && isFacetInputDefaultValue ) {\n            propertyService.setValue( selectAllFacet, true );\n        } else if( selectAllFacet && selectAllFacet.dbValue === true && facetParameters.checked === false ) {\n            propertyService.setValue( selectAllFacet, false );\n        }\n\n        const columnMenuData = { columnName: column.field };\n        columnMenuData.facetValues = facetProperties;\n        columnMenuData.facetValuesTotalFound = facetDataProvider.getViewModelCollection().getTotalObjectsFound();\n        exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n\n        checkForFilterDisability( column, viewModelData, true, facetDataProvider, isBulkEditing, isFilterDisabled );\n\n        return selectAllFacet ? selectAllFacet.dbValue : true;\n    }\n    return true;\n};\n\n/**\n * Check for filter disability state based on the filter view.\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let checkForFilterDisability = function( column, viewModelData, hasFilterFacetAction, facetDataProvider, isBulkEditing, isFilterDisabled ) {\n    if( isBulkEditing ) {\n        disableFiltering( isFilterDisabled );\n    } else {\n        if( hasFilterFacetAction && areAllFacetsUnchecked( facetDataProvider ) ) {\n            disableFiltering( isFilterDisabled );\n        } else if( hasFilterFacetAction && !isFacetInputDefault( facetDataProvider ) ) {\n            enableFiltering( isFilterDisabled );\n        } else if( column.filter && column.filter.view ) {\n            switch ( column.filter.view ) {\n                case columnFilterUtility.FILTER_VIEW.NUMERIC:\n                    exports.numericEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n                    break;\n                case columnFilterUtility.FILTER_VIEW.DATE:\n                    exports.dateEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n                    break;\n                case columnFilterUtility.FILTER_VIEW.TEXT:\n                    exports.textEnableFilterToggle( isFilterDisabled, column, viewModelData, isBulkEditing );\n                    break;\n                default: // enable filtering button by default when custom filter\n                    enableFiltering( isFilterDisabled );\n            }\n        }\n    }\n};\n\n/**\n * Show Facet Filters Toggle button changed function\n * Saves the toggle state for that column and calls dataprovider for\n * facets if needed\n *\n * @param {Object} column - column definition object\n * @param {Object} viewModelData - column menu view model data\n */\nexport let showFiltersToggleChanged = function( gridContextDispatcher, column, viewModelData ) {\n    const columnMenuData = { columnName: column.field };\n\n    columnMenuData.showFilters = viewModelData.showFilters;\n    exports.updateColumnMenuData( gridContextDispatcher, columnMenuData );\n};\n\n/**\n * Save the menu information to be loaded if re-opened.\n *\n * @param {String} columnName - Column that menu was used\n * @param {Object} columnMenuData - menu information to be saved\n */\nexport let updateColumnMenuData = function( gridContextDispatcher, columnMenuData ) {\n    gridContextDispatcher( {\n        type: 'UPDATE_VALUES',\n        columnMenuData: columnMenuData\n    } );\n};\n\n/**\n * Sets the column's filter as stale\n *\n * @param {Object} column - column definition object\n */\nexport let setColumnFilterStale = function( column ) {\n    if( column.filter ) {\n        column.filter.isStale = true;\n    }\n};\n\n/**\n * Copies over filter data from old column to new one\n * and sets the filter as stale on hidden\n *\n * @param {Object} newColumn - new column info\n * @param {Object} oldColumn - old column info\n */\nexport let updateNewColumnFilter = function( newColumn, oldColumn ) {\n    if( newColumn.field === oldColumn.field && newColumn.filter && oldColumn.filter ) {\n        newColumn.filter.isSelectedFacetValues = oldColumn.filter.isSelectedFacetValues;\n        newColumn.filter.isStale = newColumn.hiddenFlag || oldColumn.filter.isStale;\n\n        newColumn.filter = { ...newColumn.filter, ...oldColumn.filter.columnMenuData };\n        if( oldColumn.filter.columnMenuData &&\n            oldColumn.filter.columnMenuData.showFilters &&\n            oldColumn.filter.columnMenuData.showFilters.dbValue ||\n            oldColumn.filter.showFilterFacets ) {\n            newColumn.filter.showFilterFacets = true;\n        }\n    }\n};\n\n/**\n * Load the locale text.\n */\nexport let loadConfiguration = async function() {\n    _localeTextBundle.invalidNumberRange = await localeService.getLocalizedTextFromKey( 'UIMessages.invalidNumberRange' );\n    _localeTextBundle.invalidDate = await localeService.getLocalizedTextFromKey( 'UIMessages.invalidDate' );\n    _localeTextBundle.equalsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.equalsOperation' );\n    _localeTextBundle.containsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.containsOperation' );\n    _localeTextBundle.selectAll = await localeService.getLocalizedTextFromKey( 'UIMessages.selectAll' );\n    _localeTextBundle.blanks = await localeService.getLocalizedTextFromKey( 'UIMessages.blanks' );\n    _localeTextBundle.noMatchesFound = await localeService.getLocalizedTextFromKey( 'UIMessages.noMatchesFound' );\n    _localeTextBundle.rangeOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.rangeOperation' );\n    _localeTextBundle.greaterThanOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.greaterThanOperation' );\n    _localeTextBundle.lessThanOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.lessThanOperation' );\n    _localeTextBundle.notContainsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.notContainsOperation' );\n    _localeTextBundle.startsWithOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.startsWithOperation' );\n    _localeTextBundle.endsWithOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.endsWithOperation' );\n    _localeTextBundle.notEqualsOperation = await localeService.getLocalizedTextFromKey( 'UIMessages.notEqualsOperation' );\n\n    _localeTextBundle.andFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.andFilterTooltip' );\n    _localeTextBundle.greaterThanFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.greaterThanFilterTooltip' );\n    _localeTextBundle.greaterThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.greaterThanEqualsFilterTooltip' );\n    _localeTextBundle.lessThanFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.lessThanFilterTooltip' );\n    _localeTextBundle.lessThanEqualsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.lessThanEqualsFilterTooltip' );\n    _localeTextBundle.equalsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.equalsFilterTooltip' );\n    _localeTextBundle.notEqualsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.notEqualsFilterTooltip' );\n    _localeTextBundle.containsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.containsFilterTooltip' );\n    _localeTextBundle.notContainsFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.notContainsFilterTooltip' );\n    _localeTextBundle.startsWithFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.startsWithFilterTooltip' );\n    _localeTextBundle.endWithFilterTooltip = await localeService.getLocalizedTextFromKey( 'UIMessages.endWithFilterTooltip' );\n};\n\n/**\n * Setup to listen to changes in locale.\n *\n * @param {String} locale - String with the updated locale value.\n */\neventBus.subscribe( 'locale.changed', function() {\n    loadConfiguration();\n}, 'awColumnFilterService' );\n\nexports = {\n    loadConfiguration,\n    doTextValidation,\n    doNumericValidation,\n    processFacetValuesInFilter,\n    doTextFiltering,\n    doDateValidation,\n    doDateFiltering,\n    doNumericFiltering,\n    getFilterTypeByColumnType,\n    addFilterValue,\n    setExistingNumericFilter,\n    setExistingDateFilter,\n    setExistingTextFilter,\n    checkExistingFacetFilter,\n    updateColumnFilter,\n    resetColumnFilter,\n    removeStaleFilters,\n    createFilterSummary,\n    removeAllFilters,\n    isColumnFilterApplied,\n    loadFacetValues,\n    updateFacetValuesDebounce,\n    removeFilter,\n    textEnableFilterToggle,\n    textFilterInputChanged,\n    dateEnableFilterToggle,\n    dateFilterInputChanged,\n    numericEnableFilterToggle,\n    numericFilterInputChanged,\n    filterFacetInputChanged,\n    checkForFilterDisability,\n    showFiltersToggleChanged,\n    setColumnFilterStale,\n    updateNewColumnFilter,\n    setFilters,\n    initializeMenu,\n    selectAllInputChanged,\n    clearFilterFromMenu,\n    updateViewTypeMenuData,\n    updateColumnMenuData,\n    updateTableWithColumnFilters\n};\nexport default exports;\n\nloadConfiguration();\n"]},"metadata":{},"sourceType":"module"}
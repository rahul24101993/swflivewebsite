{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwPropertyLovValService.js\";\n// Copyright (c) 2021 Siemens\n\n/* eslint-disable complexity */\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AWLovList from 'viewmodel/AwLovListViewModel';\nimport AWPropertyLovChild from 'viewmodel/AwPropertyLovChildViewModel';\nimport AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';\nimport AwTextBoxVal from 'viewmodel/AwTextBoxValViewModel';\nimport { getValClass } from 'js/componentUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport keyCode from 'js/keyCode';\nimport _ from 'lodash';\nimport wcagService from 'js/wcagService';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPropertyLabel from 'viewmodel/AwPropertyLabelViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV = 5; //Sets totalNumber of objects in dataprovider before filter and lovUsage ( exhaustive/suggestive )\n\nconst setInitialDataProviderInfo = (dataProvider, initialDataProviderInfo, popupOpen) => {\n  let initialLength = 0;\n\n  if (dataProvider.viewModelCollection && dataProvider.viewModelCollection.loadedVMObjects.length > 0) {\n    initialLength = dataProvider.viewModelCollection.loadedVMObjects.length;\n  } else if (initialLength === 0 && dataProvider.vmCollectionObj && dataProvider.vmCollectionObj.vmCollection && dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length > 0) {\n    initialLength = dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length;\n  }\n\n  if (initialDataProviderInfo.current === null && (initialLength > 0 || !_.isUndefined(dataProvider.lovUsage))) {\n    //Get length of objects on initialload - we cant use totalFound because\n    //totalFound changes as we filter and some implementation does not have totalFound populated\n    let initalPrePoulatedDataLen = initialLength > 0 && popupOpen === undefined ? initialLength : undefined;\n    let initialInfo = {\n      initialTotalFound: initialLength,\n      initalPrePoulatedDataLen\n    };\n\n    if (dataProvider.hasOwnProperty('lovUsage') && dataProvider.lovUsage === 'SUGGESTIVE_LOV') {\n      initialInfo.lovUsage = 'SUGGESTIVE_LOV';\n    }\n\n    initialDataProviderInfo.current = initialInfo;\n  }\n\n  if (initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen !== undefined && initialDataProviderInfo.current.initalPrePoulatedDataLen !== initialLength && initialLength > 0) {\n    //When popup opens and new initialLength is populated then update initialTotalFound\n    delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n    initialDataProviderInfo.current.initialTotalFound = initialLength;\n  }\n}; // Gets isSearchable and isSelectOnly flag which is helped to decide LOV UI and behaviors\n\n\nconst getSelectOnlyAndSearchableFlags = (prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter) => {\n  // isSelectOnly: true = exhaustive list; false = non-list val can be suggested\n  let isSelectOnly = _.isUndefined(prop.fielddata.isSelectOnly) ? true : prop.fielddata.isSelectOnly;\n\n  if (initialDataProviderInfo.current && !_.isUndefined(initialDataProviderInfo.current.lovUsage) && initialDataProviderInfo.current.lovUsage === 'SUGGESTIVE_LOV') {\n    isSelectOnly = false;\n  }\n\n  let initialTotalFound = initialDataProviderInfo.current === null || initialDataProviderInfo.current.initialTotalFound === undefined ? 0 : initialDataProviderInfo.current.initialTotalFound; // Based on PO input, we have to display filter Box if no of values are more than 5\n\n  const isSearchable = isSelectOnly === false || isCheckBoxArryLOV || isSelectOnly === true && hideFilter === false ? true : initialTotalFound > MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV;\n  return {\n    isSelectOnly,\n    isSearchable\n  };\n};\n\nconst updateInitialDataProviderInfo = initialDataProviderInfo => {\n  //If initalPrePoulatedDataLen still exists after popup open, we need to delete this as it is no more releavant\n  // This can happen if initalPrePoulatedDataLen ===  dataProvider.len when popup is opened\n  //If this is not updated then during filter isSearchable flag which depends on dataProvider.len gives false result\n  if (initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen) {\n    delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n  }\n};\n/**\n * render function for AwLovVal\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\n\nexport const awLovValRenderFunction = props => {\n  const {\n    actions,\n    fields,\n    elementRefList,\n    autoCorrect,\n    action,\n    viewModel,\n    hideFilter,\n    ...prop\n  } = props;\n  const field = prop;\n  const {\n    isListbox\n  } = props;\n  let {\n    data: {\n      blankLovEntry,\n      dirty,\n      _most_recent_entry,\n      parentSelectedHandled\n    },\n    searchBoxLOVFilterStr,\n    dispatch\n  } = viewModel;\n  const selectIndex = elementRefList.get('selectIndex');\n  const checkLovEntries = elementRefList.get('checkLovEntries');\n  const isValidationInProgress = elementRefList.get('isValidationInProgress');\n  const initialDataProviderInfo = elementRefList.get('initialDataProviderInfo');\n  const dynProvider = elementRefList.get('dynDataprovider');\n  let dataProvider = field.fielddata.dataProvider ? field.fielddata.dataProvider : dynProvider && dynProvider.current;\n\n  let getFilteredEntries = () => validEntries.current.map(_ref => {\n    let {\n      propDisplayValue,\n      propInternalValue\n    } = _ref;\n    return {\n      propDisplayValue,\n      propInternalValue\n    };\n  });\n\n  const hint = prop.fielddata.renderingHint;\n  const typex = prop.typex;\n  const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n  const isArray = prop.fielddata.isArray;\n\n  if (!dataProvider) {\n    return;\n  } //zarq9k: This would be cleaned up when we have the infrastruture to pass ref from viewmodel.\n\n\n  let lovEntryRef = dataProvider.getLovEntryRef();\n  setInitialDataProviderInfo(dataProvider, initialDataProviderInfo, actions.lovPopup.open);\n  let {\n    isSelectOnly,\n    isSearchable\n  } = getSelectOnlyAndSearchableFlags(prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter);\n  let staticFilterStr = null;\n  let validEntries = elementRefList.get('validEntries');\n  let {\n    lovPopup\n  } = actions; // provide application opportunity to override the size\n\n  let overridePopupOptions = () => {\n    let result = {\n      width: lovPopup.reference.current.offsetWidth,\n      autoFocus: true\n    };\n    prop.maxHeight && (result.maxHeight = prop.maxHeight);\n    return result;\n  };\n\n  let isPropDateTypeAndNonArray = () => typex && DATE_TYPES.includes(typex) && !prop.fielddata.isArray;\n\n  let isInValidSearchForExhaustiveLOV = () => !DATE_TYPES.includes(typex) && selectIndex.current === null && isSelectOnly === true;\n\n  let isArrayWithValidateAction = prop.fielddata.isArray && !_.isEmpty(dataProvider.validateAction) && !isCheckBoxArryLOV;\n\n  let isValidationErrorVisible = () => props.error && props.error.length > 0;\n\n  const resetFilterStr = () => {\n    if (lovEntryRef.current && lovEntryRef.current.lovEntry) {\n      lovEntryRef.current.lovEntry.filterString = null;\n    }\n\n    prop.setLovVal({\n      lovEntry: null\n    }, 'resetFilterStr');\n  };\n\n  let hooks = {\n    whenOpened: () => {\n      isValidationInProgress.current = false;\n      searchBoxLOVFilterStr.error = null;\n    },\n    whenClosed: popupRef => {\n      // TODO: add comment explaining why validate is needed or not needed here\n      if ((isCheckBoxArryLOV || DATE_TYPES.includes(typex)) && lovEntryRef.current && lovEntryRef.current.lovEntry) {\n        validateLOVEntry(lovEntryRef.current.lovEntry);\n      }\n\n      resetFilterStr(); // reset searchBoxLOVFilterStr\n\n      fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.update(null);\n      lovEntryRef.current = null;\n    }\n  };\n\n  const showPopup = function () {\n    let resetFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    // case1: normal show, we want a reset each time.\n    // case2: filter change - onChangeHandler, don't want a reset\n    if (resetFilter) {\n      resetFilterStr(); // save the original, used to recover when esc\n\n      let recent_entry = {\n        propDisplayValue: field.fielddata.uiValue,\n        propInternalValue: prop.value\n      };\n      dispatch({\n        path: 'data._most_recent_entry',\n        value: recent_entry\n      });\n    }\n\n    lovPopup.show({\n      hooks,\n      ...overridePopupOptions()\n    });\n  };\n\n  const storeLatestLOVEntry = lovEntry => {\n    if (lovEntryRef.current) {\n      lovEntryRef.current.lovEntry = lovEntry;\n    } else {\n      lovEntryRef.current = {\n        lovEntry\n      };\n    }\n  }; // This function would be invoked when some value has been selected from the dropdown popup\n\n\n  const setLovEntryAndClose = (receivedLOVEntry, event, op, isAddingTypedValue) => {\n    storeLatestLOVEntry(receivedLOVEntry);\n    let dateApi = null;\n\n    if (prop.fielddata.dateApi) {\n      dateApi = prop.fielddata.dateApi;\n    }\n\n    if (dateApi && dateApi.isDateEnabled && dateApi.isTimeEnabled && prop.fielddata.isArray) {\n      //If date and time enabled and if its array update only after time is selected\n      prop.onTimeSelectedOrEntered(event.target.value || receivedLOVEntry.propInternalValue);\n      lovPopup.hide();\n    } else {\n      receivedLOVEntry.filteredLOVEntries = getFilteredEntries();\n\n      if (!DATE_TYPES.includes(typex) && !isCheckBoxArryLOV) {\n        op = 'validateandadd'; //For array vaidation is in progress for other it is not\n\n        isValidationInProgress.current = true;\n      }\n\n      let lovEntry = receivedLOVEntry;\n\n      if (isAddingTypedValue === true) {\n        // If isAddingTypedValue === true means user is adding typed value and not from selected list\n        // lovEntry is what user has typed in and not from the list displayed in popup\n        lovEntry = { ...receivedLOVEntry\n        };\n        lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n        lovEntry.propInternalValue = searchBoxLOVFilterStr.dbValue;\n        lovEntry.propDisplayValue = searchBoxLOVFilterStr.dbValue;\n      }\n\n      if (lovEntry.filterString === undefined) {\n        //After value is added in Array should show correct filter\n        lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n      }\n\n      prop.setLovVal({\n        lovEntry,\n        dataProvider,\n        checkLovEntries,\n        dateApi\n      }, op).then(uiProp => {\n        isValidationInProgress.current = false;\n        let isErrorEncountered = false;\n\n        if (!_.isEmpty(uiProp) && !_.isEmpty(uiProp.error)) {\n          isErrorEncountered = true;\n          searchBoxLOVFilterStr.error = uiProp.error;\n        }\n\n        if (!isErrorEncountered && !(isCheckBoxArryLOV || isArray === true)) {\n          lovPopup.hide();\n        } // record the checked items\n        // propInternalValue may in object\n\n\n        let key = _.isObject(lovEntry.propInternalValue) ? lovEntry.propDisplayValue : lovEntry.propInternalValue;\n\n        if (op === 'checked') {\n          lovEntry.isChecked = true;\n          checkLovEntries.current[key] = lovEntry;\n        } else if (op === 'unchecked') {\n          checkLovEntries.current[key].isChecked = false;\n          delete checkLovEntries.current[key];\n        }\n\n        if (isErrorEncountered) {\n          dispatch({\n            path: 'data.dirty',\n            value: dirty++\n          });\n        }\n      });\n    }\n  };\n\n  const validateLOVEntry = lovEntry => {\n    // This behaviour is only for aw-listbox\".\n    // 1, nothing match\n    if (autoCorrect) {\n      if (validEntries.current.length === 0) {\n        // reverting back the value if incorrect value has typed in\n        const uiValue = prop.value;\n        lovEntry = {\n          propDisplayValue: uiValue,\n          propInternalValue: uiValue\n        };\n      } else if (lovEntryRef.current.lovEntry && lovEntryRef.current.lovEntry.filterString) {\n        // 2, partial match, then take the first\n        lovEntry = validEntries.current[0];\n      }\n\n      storeLatestLOVEntry(lovEntry);\n      prop.setLovVal({\n        lovEntry,\n        dataProvider\n      }, null);\n    } else {\n      if (isPropDateTypeAndNonArray()) {\n        prop.setLovVal({\n          lovEntry,\n          dataProvider,\n          dateApi: prop.fielddata.dateApi\n        }, null);\n      } else {\n        if (isValidationInProgress.current === false) {\n          if (isArrayWithValidateAction) {\n            lovEntry.filteredLOVEntries = getFilteredEntries();\n            prop.setLovVal({\n              lovEntry,\n              dataProvider\n            }, 'validateandadd');\n          } else {\n            //There was no validation action hence validate\n            prop.setLovVal({\n              lovEntry,\n              dataProvider\n            }, 'validate');\n          }\n        }\n      }\n    }\n  };\n  /**\n   * onChangeHandler is invoked, when user manually types-in some value in the LOV textbox.\n   * In that case we need to extract the uivalue and store it as filterStr.\n   * This filterStr would later used to pass to the server or in case of static lov's\n   * (lov's without dataprovider action) filter the result locally.\n   * @param {*} event\n   */\n\n\n  const onChangeHandler = event => {\n    if (isCheckBoxArryLOV) {\n      prop.onChange(event);\n    }\n\n    if (event.target) {\n      field.fielddata.uiValue = event.target.value;\n\n      if (!lovPopup.open) {\n        showPopup(false);\n      }\n\n      let lovEntry = {\n        propDisplayValue: field.fielddata.uiValue,\n        propInternalValue: field.fielddata.uiValue,\n        filterString: field.fielddata.uiValue,\n        isSearchable\n      };\n      prop.setLovVal({\n        lovEntry,\n        dataProvider\n      }, 'filter');\n      storeLatestLOVEntry(lovEntry);\n    }\n  };\n\n  const onFilterChangeHandler = (filter, previous) => {\n    let lovEntry = {\n      propDisplayValue: filter,\n      propInternalValue: filter,\n      filterString: filter,\n      isSearchable\n    };\n    updateInitialDataProviderInfo(initialDataProviderInfo);\n    storeLatestLOVEntry(lovEntry);\n    prop.setLovVal({\n      lovEntry,\n      dataProvider\n    }, 'filter');\n  };\n\n  const onBlurHandler = e => {\n    if (e.target.value === '' && isListbox) {\n      storeLatestLOVEntry(_most_recent_entry);\n    }\n  };\n\n  const isTimeEnteredManually = dateApi => isPropDateTypeAndNonArray() && dateApi && dateApi.isTimeEnabled && dateApi.timeValue;\n\n  const keyPressed = (event, isAddingTypedValue) => {\n    // handle SPACE key\n    if (wcagService.getKeyName(event) === keyCode.SPACE && !lovPopup.open) {\n      event.preventDefault();\n      showPopup();\n      return;\n    }\n\n    let dateApi = prop.fielddata.dateApi;\n\n    if (event.key === keyCode.ENTER || event.type === 'click') {\n      event.preventDefault();\n\n      if (DATE_TYPES.includes(typex) && isValidationErrorVisible() && !props.isListbox) {\n        return;\n      }\n\n      if (lovPopup.open) {\n        // if has any hover item\n        if (isAddingTypedValue !== true && selectIndex.current !== null && validEntries.current && validEntries.current[selectIndex.current] && !isTimeEnteredManually(dateApi)) {\n          let hoverItem = validEntries.current[selectIndex.current];\n\n          if (hoverItem.handleSelection) {\n            hoverItem.handleSelection(event);\n            event.persist();\n            event.target.value = '';\n            return;\n          }\n        } else if (isInValidSearchForExhaustiveLOV()) {\n          //For exhaustive LOV, if there is no filtered value and user hits enter,\n          // simply close popup\n          lovPopup.hide();\n        } else {\n          //Wait for validation to complete before closing popup\n          // the current entry\n          let lovEntry = lovEntryRef.current.lovEntry;\n\n          if (!autoCorrect) {\n            // Below line would cause re-rendering automatically\n            if (isValidationInProgress.current === false) {\n              isValidationInProgress.current = true;\n              lovEntry.filteredLOVEntries = getFilteredEntries();\n              prop.setLovVal({\n                lovEntry,\n                dataProvider,\n                dateApi\n              }, 'validateandadd').then(uiProp => {\n                let isErrorEncountered = false;\n\n                if (!_.isEmpty(uiProp) && !_.isEmpty(uiProp.error)) {\n                  isErrorEncountered = true;\n                  searchBoxLOVFilterStr.error = uiProp.error;\n                }\n\n                if (!isErrorEncountered && !isArray) {\n                  lovPopup.hide();\n                }\n\n                isValidationInProgress.current = false;\n                dispatch({\n                  path: 'data.dirty',\n                  value: dirty++\n                });\n              });\n            }\n\n            event.target.value = '';\n          }\n        }\n      } else {\n        showPopup();\n      }\n    } else {\n      evalKey(event);\n    }\n  };\n\n  const scrollAttention = () => {\n    let chosenElem = dom.get('.aw-list-itemFocused', lovPopup.options.popupReference.current);\n    chosenElem && chosenElem.scrollIntoView && chosenElem.scrollIntoView({\n      block: 'center',\n      behavior: 'smooth'\n    });\n  }; // find the index in the lovEntries array of the value of current attention\n\n\n  const getAttnIndex = function () {\n    let lovEntries = validEntries.current;\n\n    if (lovEntries.length && lovPopup.open) {\n      return lovEntries.map(lovEntry => lovEntry.attn).indexOf(true);\n    }\n  };\n\n  const evalKey = function (event) {\n    let code = event.key || event.code; // recover _most_recent_entry when esc\n\n    if (code === keyCode.ESCAPE && lovPopup.open) {\n      storeLatestLOVEntry(_most_recent_entry);\n      prop.setLovVal({\n        lovEntry: _most_recent_entry\n      });\n    }\n\n    if (code === keyCode.TAB && lovPopup.open) {\n      // on tab, accept the current text, don't auto-complete\n      if (isSelectOnly === true || lovEntryRef.current === null) {\n        //For exhaustive LOVs only hide or if for suggestive user hits tab w/o entering\n        lovPopup.hide();\n      }\n    }\n\n    if (code === keyCode.ARROW_UP || code === keyCode.ARROW_DOWN) {\n      event.stopPropagation();\n      event.cancelBubble = true;\n\n      if (!lovPopup.open) {\n        showPopup();\n        return;\n      }\n\n      var attnIndex = getAttnIndex();\n\n      if (attnIndex < 0) {\n        attnIndex = selectIndex.current || _getDefaultAttention();\n      }\n\n      let lovEntries = validEntries.current;\n\n      if (code === keyCode.ARROW_DOWN) {\n        // down arrow: move the attention down\n        if (lovEntries.length > attnIndex + 1) {\n          lovEntries[attnIndex].attn = false;\n          lovEntries[attnIndex + 1].attn = true;\n          selectIndex.current = attnIndex + 1;\n        }\n      } else {\n        // up arrow\n        if (attnIndex > 0) {\n          lovEntries[attnIndex].attn = false;\n          lovEntries[attnIndex - 1].attn = true;\n          selectIndex.current = attnIndex - 1;\n        }\n      } // trigger UI update and scrollAttention\n\n\n      dispatch({\n        path: 'data.dirty',\n        value: dirty++\n      });\n      scrollAttention();\n    }\n  }; // syncLovEntries\n\n\n  const updateValidEntries = entries => {\n    validEntries.current = entries || [];\n  };\n\n  const handleClick = event => {\n    if (event.key === keyCode.ENTER || event.type === 'click') {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (!lovPopup.open) {\n        showPopup(true);\n      } else {\n        lovPopup.hide();\n      }\n    }\n  };\n\n  if (prop.parentSelected === undefined && parentSelectedHandled === true) {\n    dispatch({\n      path: 'data.parentSelectedHandled',\n      value: undefined\n    });\n  }\n\n  if (prop.parentSelected && parentSelectedHandled === undefined) {\n    handleClick(event);\n    dispatch({\n      path: 'data.parentSelectedHandled',\n      value: true\n    });\n  }\n\n  let uiValue = field.fielddata.uiValue;\n  let classes = [];\n  let DATE_TYPES = ['DATETIME', 'DATEARRAY', 'DATE'];\n  classes.push(getValClass(prop));\n  let iconId = null;\n  let timeClassName = '';\n\n  if (prop.fielddata.dateApi && prop.fielddata.dateApi.isNotLov && DATE_TYPES.includes(typex)) {\n    uiValue = prop.fielddata.dateApi.timeValue;\n    iconId = 'cmdTime';\n    timeClassName = 'sw-time-lov-val';\n  } else {\n    iconId = 'miscSortedDescending';\n  } // If the LOV does not have any dataProvider action, then only we will consider it as client side filtering.\n  // This is as per the current afx-master logic.\n  // If it is checkboxArray LOV with hint 'checkboxoptionlov', then the data.searchBoxLOVFilterStr.uiValue\n  // would be considered as the filterString.\n\n\n  if (isCheckBoxArryLOV && fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.fielddata) {\n    staticFilterStr = fields.searchBoxLOVFilterStr.fielddata.uiValue;\n  } else if (!isCheckBoxArryLOV && lovEntryRef.current && lovEntryRef.current.lovEntry) {\n    staticFilterStr = lovEntryRef.current.lovEntry.filterString;\n\n    if (isValidationErrorVisible() && !prop.isListbox && !isArrayWithValidateAction) {\n      lovEntryRef.current.lovEntry.filterString = null;\n      staticFilterStr = null;\n    }\n  }\n\n  const renderChildComponent = () => isCheckBoxArryLOV ? /*#__PURE__*/_jsxDEV(AwPropertyCheckboxLovChild, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 60\n  }, this) : /*#__PURE__*/_jsxDEV(AWPropertyLovChild, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 93\n  }, this); // listbox don't have the blank entry, hence start  with 0\n  // other lovs have a blank entry, hence start with 1\n\n\n  const _getDefaultAttention = () => prop.fielddata.emptyLOVEntry === false ? 0 : 1;\n\n  const getDefaultAttention = () => {\n    let lovEntries = validEntries.current;\n    let defaultAttnStr = fields.searchBoxLOVFilterStr.dirty === 'true' ? fields.searchBoxLOVFilterStr.fielddata.uiValue : uiValue;\n    let result = lovEntries.map(item => item.propDisplayValue).indexOf(defaultAttnStr);\n    return result > -1 ? result : _getDefaultAttention();\n  };\n\n  let getErrorLabelProp = () => {\n    return { ...prop,\n      className: 'aw-jswidgets-cbaSearch',\n      required: false,\n      displayErrorLabel: false,\n      error: [searchBoxLOVFilterStr.error]\n    };\n  };\n\n  let addButtonClick = event => {\n    //Add button is displayed for suggestive LOV only hence when user cliks AddButton, add typed value and not from selected list\n    let isAddingTypedValue = true;\n    keyPressed(event, isAddingTypedValue);\n  };\n\n  let onButtonBlur = event => {\n    //Check on Blur if it does not go to input ( previous to add button) element\n    if (event.relatedTarget && event.relatedTarget.tagName !== 'INPUT') {\n      lovPopup.hide();\n    }\n  };\n\n  let onSearchBoxKeyDown = event => {\n    // if LOV is exhaustive/suggestive, onEnter --> isAddingTypedValue = false\n    let isAddingTypedValue = event.key !== keyCode.ENTER;\n    keyPressed(event, isAddingTypedValue); // enter keyboard mode regardless of key pressed?\n    // needed to pass tests atm, discuss with ux\n\n    document.body.classList.add('keyboard');\n  };\n\n  const isAddButtonDisabled = () => {\n    let isDisabled = _.isEmpty(fields.searchBoxLOVFilterStr.value);\n\n    let isValidEntry = validEntries.current !== null && validEntries.current.length > 0 && selectIndex.current !== null && !_.isUndefined(validEntries.current[selectIndex.current].propDisplayValue);\n\n    if (isValidEntry && fields.searchBoxLOVFilterStr.value === validEntries.current[selectIndex.current].propDisplayValue) {\n      isDisabled = true;\n    }\n\n    return isDisabled;\n  };\n\n  const generateContent = () => {\n    let content = /*#__PURE__*/_jsxDEV(AWLovList, {\n      context: props // syncLovEntries={syncLovEntries}\n      ,\n      blankLovEntry: blankLovEntry,\n      action: action,\n      lovlist: \"true\",\n      field: field,\n      dataProvider: dataProvider,\n      staticFilterStr: staticFilterStr,\n      updateValidEntries: updateValidEntries,\n      autoCorrect: autoCorrect,\n      lovPopup: lovPopup,\n      isCheckBoxArryLOV: isCheckBoxArryLOV,\n      selectIndex: selectIndex,\n      getDefaultAttention: getDefaultAttention,\n      checkLovEntries: checkLovEntries,\n      setlovEntry: (selLovEntry, event, op) => {\n        setLovEntryAndClose(selLovEntry, event, op, false);\n      },\n      children: renderChildComponent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 23\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: (isCheckBoxArryLOV ? 'aw-checkboxarray-lovParent ' : '') + 'sw-lov-contentContainer',\n      children: [!DATE_TYPES.includes(typex) && isSearchable && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: (_.isEmpty(searchBoxLOVFilterStr.error) ? '' : 'sw-errorFlag ') + 'aw-jswidgets-cbaSearch aw-widget-iconParent sw-lov-textbox-container sw-noDirtyStyle',\n        children: [/*#__PURE__*/_jsxDEV(AwTextBoxVal, { ...Object.assign({}, fields.searchBoxLOVFilterStr, {\n            autocomplete: 'off',\n            autocorrect: 'off',\n            autocapitalize: 'off'\n          }),\n          ...generateFilterProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 21\n        }, this), isSelectOnly || isCheckBoxArryLOV ? /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: \"cmdSearch\",\n          className: \"aw-widget-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 59\n        }, this) : /*#__PURE__*/_jsxDEV(AwButton, {\n          onBlur: onButtonBlur,\n          className: isAddButtonDisabled() ? 'disabled' : '',\n          action: addButtonClick,\n          children: props.i18n.ADD_BUTTON_TITLE\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 17\n      }, this), !_.isEmpty(searchBoxLOVFilterStr.error) && /*#__PURE__*/_jsxDEV(AwPropertyLabel, { ...getErrorLabelProp()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 60\n      }, this), content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 16\n    }, this);\n  };\n\n  const hasUserTypedAValue = () => {\n    return lovEntryRef.current && lovEntryRef.current.lovEntry && (lovEntryRef.current.lovEntry.filterString || typeof lovEntryRef.current.lovEntry.propInternalValue === 'string');\n  };\n\n  const getValueIfUserTypedTime = () => hasUserTypedAValue() ? uiValue : '';\n\n  const generateDateArrayLOVContent = () => {\n    let { ...restGeneratedProps\n    } = generateProps;\n    let dateProps = {\n      onClick: handleClick,\n      onChange: onChangeHandler,\n      dirty: prop.dirty,\n      onKeyDown: keyPressed\n    };\n    let allProps = { ...restGeneratedProps,\n      ...dateProps\n    };\n    return isValidationErrorVisible() && !prop.isListbox ? /*#__PURE__*/_jsxDEV(\"input\", { ...allProps,\n      value: uiValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", { ...allProps,\n      value: field.fielddata.isArray ? getValueIfUserTypedTime() : uiValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 13\n    }, this);\n  }; // lov select field\n\n\n  const generateProps = {\n    'aria-label': prop.label,\n    'data-locator': prop.label,\n    'aria-required': prop.isRequired,\n    className: classes.join(' '),\n    onBlur: onBlurHandler,\n    type: 'text',\n    placeholder: field.placeholder,\n    ref: lovPopup.reference,\n    dirty: prop.dirty,\n    onClick: handleClick,\n    onKeyDown: keyPressed,\n    disabled: prop.disabled\n  }; // lov filter field\n  // TODO: i18n on placeholder and use unique label/locator\n\n  const generateFilterProps = {\n    'aria-label': prop.label,\n    'data-locator': prop.label,\n    className: classes.join(' '),\n    onSwChange: onFilterChangeHandler,\n    type: 'text',\n    placeholder: isSelectOnly ? 'Search' : 'Search or Create',\n    ref: lovPopup.reference,\n    dirty: false,\n    onKeyDown: onSearchBoxKeyDown,\n    disabled: prop.disabled\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-lov-container\",\n    children: [/*#__PURE__*/_jsxDEV(AwPic, {\n      className: \"sw-lov-thumb\",\n      iconId: field.fielddata.iconName,\n      source: field.fielddata.iconSource\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 13\n    }, this), DATE_TYPES.includes(typex) && generateDateArrayLOVContent(), !DATE_TYPES.includes(typex) && /*#__PURE__*/_jsxDEV(\"input\", { ...generateProps,\n      value: isArray && !isCheckBoxArryLOV ? null : uiValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: prop.disabled ? 'sw-widget-iconContainer disabled' : 'sw-widget-iconContainer',\n      role: \"button\",\n      \"aria-label\": prop.name,\n      tabIndex: \"-1\",\n      onKeyDown: keyPressed,\n      onClick: handleClick,\n      children: /*#__PURE__*/_jsxDEV(AwIcon, {\n        iconId: iconId,\n        className: 'aw-widget-icon ' + timeClassName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...lovPopup.options,\n      className: \"sw-lov-popup\",\n      children: [\" \", generateContent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 659,\n    columnNumber: 9\n  }, this);\n};\nexport const onMount = (prop, elementRefList) => {\n  let field = prop.fielddata;\n  const hint = field.renderingHint;\n  const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n  let values = prop.value;\n\n  if (isCheckBoxArryLOV) {\n    let checkLovEntries = elementRefList.get('checkLovEntries');\n    checkLovEntries.current = {};\n\n    if (values && values.length > 0) {\n      // we create placeHolders based on the default prop values\n      // generate place-holder array for selected values that may or may not be loaded\n      checkLovEntries.current = _.reduce(values, (result, value, inx) => {\n        let disp = field.uiValues[inx] || field.displayValues[inx] || value;\n        let item = {\n          propDisplayValue: disp,\n          propInternalValue: value,\n          isChecked: true\n        };\n        let key = _.isObject(value) ? disp : value;\n        result[key] = item;\n        return result;\n      }, {});\n    }\n  }\n}; // clear internal states when prop value was cleared\n\nexport const updateCheckLovEntries = (prop, elementRefList) => {\n  let field = prop.fielddata;\n  const hint = field.renderingHint;\n  const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n\n  if (isCheckBoxArryLOV) {\n    let checkLovEntries = elementRefList.get('checkLovEntries');\n    let values = prop.value; // clear case\n\n    if (!values || values.length === 0) {\n      checkLovEntries.current = {};\n    } // async set initial values\n\n\n    if (values.length > 0) {\n      if (!checkLovEntries.current) {\n        checkLovEntries.current = {};\n      }\n\n      let checked = checkLovEntries.current; // update checkLovEntries based on values,\n      // case application set the values programly\n\n      _.reduce(values, (result, value, inx) => {\n        let disp = field.uiValues[inx] || field.displayValues[inx] || value;\n        let key = _.isObject(value) ? disp : value;\n\n        if (!checked[key]) {\n          checked[key] = {\n            propDisplayValue: disp,\n            propInternalValue: value,\n            isChecked: true\n          };\n        }\n      }, {});\n    }\n  }\n};","map":{"version":3,"names":["AwPopup","AwIcon","AWLovList","AWPropertyLovChild","AwPropertyCheckboxLovChild","AwTextBoxVal","getValClass","DOMAPIs","dom","keyCode","_","wcagService","AwButton","AwPropertyLabel","AwPic","MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV","setInitialDataProviderInfo","dataProvider","initialDataProviderInfo","popupOpen","initialLength","viewModelCollection","loadedVMObjects","length","vmCollectionObj","vmCollection","current","isUndefined","lovUsage","initalPrePoulatedDataLen","undefined","initialInfo","initialTotalFound","hasOwnProperty","getSelectOnlyAndSearchableFlags","prop","isCheckBoxArryLOV","hideFilter","isSelectOnly","fielddata","isSearchable","updateInitialDataProviderInfo","awLovValRenderFunction","props","actions","fields","elementRefList","autoCorrect","action","viewModel","field","isListbox","data","blankLovEntry","dirty","_most_recent_entry","parentSelectedHandled","searchBoxLOVFilterStr","dispatch","selectIndex","get","checkLovEntries","isValidationInProgress","dynProvider","getFilteredEntries","validEntries","map","propDisplayValue","propInternalValue","hint","renderingHint","typex","isArray","lovEntryRef","getLovEntryRef","lovPopup","open","staticFilterStr","overridePopupOptions","result","width","reference","offsetWidth","autoFocus","maxHeight","isPropDateTypeAndNonArray","DATE_TYPES","includes","isInValidSearchForExhaustiveLOV","isArrayWithValidateAction","isEmpty","validateAction","isValidationErrorVisible","error","resetFilterStr","lovEntry","filterString","setLovVal","hooks","whenOpened","whenClosed","popupRef","validateLOVEntry","update","showPopup","resetFilter","recent_entry","uiValue","value","path","show","storeLatestLOVEntry","setLovEntryAndClose","receivedLOVEntry","event","op","isAddingTypedValue","dateApi","isDateEnabled","isTimeEnabled","onTimeSelectedOrEntered","target","hide","filteredLOVEntries","dbValue","then","uiProp","isErrorEncountered","key","isObject","isChecked","onChangeHandler","onChange","onFilterChangeHandler","filter","previous","onBlurHandler","e","isTimeEnteredManually","timeValue","keyPressed","getKeyName","SPACE","preventDefault","ENTER","type","hoverItem","handleSelection","persist","evalKey","scrollAttention","chosenElem","options","popupReference","scrollIntoView","block","behavior","getAttnIndex","lovEntries","attn","indexOf","code","ESCAPE","TAB","ARROW_UP","ARROW_DOWN","stopPropagation","cancelBubble","attnIndex","_getDefaultAttention","updateValidEntries","entries","handleClick","parentSelected","classes","push","iconId","timeClassName","isNotLov","renderChildComponent","emptyLOVEntry","getDefaultAttention","defaultAttnStr","item","getErrorLabelProp","className","required","displayErrorLabel","addButtonClick","onButtonBlur","relatedTarget","tagName","onSearchBoxKeyDown","document","body","classList","add","isAddButtonDisabled","isDisabled","isValidEntry","generateContent","content","selLovEntry","Object","assign","autocomplete","autocorrect","autocapitalize","generateFilterProps","i18n","ADD_BUTTON_TITLE","hasUserTypedAValue","getValueIfUserTypedTime","generateDateArrayLOVContent","restGeneratedProps","generateProps","dateProps","onClick","onKeyDown","allProps","label","isRequired","join","onBlur","placeholder","ref","disabled","onSwChange","iconName","iconSource","name","onMount","values","reduce","inx","disp","uiValues","displayValues","updateCheckLovEntries","checked"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwPropertyLovValService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable complexity */\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AWLovList from 'viewmodel/AwLovListViewModel';\nimport AWPropertyLovChild from 'viewmodel/AwPropertyLovChildViewModel';\nimport AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';\nimport AwTextBoxVal from 'viewmodel/AwTextBoxValViewModel';\nimport { getValClass } from 'js/componentUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport keyCode from 'js/keyCode';\nimport _ from 'lodash';\nimport wcagService from 'js/wcagService';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPropertyLabel from 'viewmodel/AwPropertyLabelViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\n\nconst MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV = 5;\n\n//Sets totalNumber of objects in dataprovider before filter and lovUsage ( exhaustive/suggestive )\nconst setInitialDataProviderInfo = ( dataProvider, initialDataProviderInfo, popupOpen ) => {\n    let initialLength = 0;\n    if( dataProvider.viewModelCollection && dataProvider.viewModelCollection.loadedVMObjects.length > 0 ) {\n        initialLength = dataProvider.viewModelCollection.loadedVMObjects.length;\n    } else if( initialLength === 0 && dataProvider.vmCollectionObj && dataProvider.vmCollectionObj.vmCollection && dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length > 0 ) {\n        initialLength = dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length;\n    }\n\n    if( initialDataProviderInfo.current === null && ( initialLength > 0 || !_.isUndefined( dataProvider.lovUsage ) ) ) {\n        //Get length of objects on initialload - we cant use totalFound because\n        //totalFound changes as we filter and some implementation does not have totalFound populated\n        let initalPrePoulatedDataLen = initialLength > 0 && popupOpen === undefined ? initialLength : undefined;\n        let initialInfo = {\n            initialTotalFound: initialLength,\n            initalPrePoulatedDataLen\n        };\n        if( dataProvider.hasOwnProperty( 'lovUsage' ) && dataProvider.lovUsage === 'SUGGESTIVE_LOV' ) {\n            initialInfo.lovUsage = 'SUGGESTIVE_LOV';\n        }\n        initialDataProviderInfo.current = initialInfo;\n    }\n    if( initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen !== undefined &&\n        initialDataProviderInfo.current.initalPrePoulatedDataLen !== initialLength && initialLength > 0 ) {\n        //When popup opens and new initialLength is populated then update initialTotalFound\n        delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n        initialDataProviderInfo.current.initialTotalFound = initialLength;\n    }\n};\n\n// Gets isSearchable and isSelectOnly flag which is helped to decide LOV UI and behaviors\nconst getSelectOnlyAndSearchableFlags = ( prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter ) => {\n    // isSelectOnly: true = exhaustive list; false = non-list val can be suggested\n    let isSelectOnly = _.isUndefined( prop.fielddata.isSelectOnly ) ? true : prop.fielddata.isSelectOnly;\n\n    if( initialDataProviderInfo.current && !_.isUndefined( initialDataProviderInfo.current.lovUsage ) && initialDataProviderInfo.current.lovUsage === 'SUGGESTIVE_LOV' ) {\n        isSelectOnly = false;\n    }\n\n    let initialTotalFound = initialDataProviderInfo.current === null || initialDataProviderInfo.current.initialTotalFound === undefined ? 0 : initialDataProviderInfo.current.initialTotalFound;\n\n    // Based on PO input, we have to display filter Box if no of values are more than 5\n    const isSearchable = isSelectOnly === false || isCheckBoxArryLOV || isSelectOnly === true && hideFilter === false ? true :\n        initialTotalFound > MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV;\n\n    return { isSelectOnly, isSearchable };\n};\n\nconst updateInitialDataProviderInfo = ( initialDataProviderInfo ) => {\n    //If initalPrePoulatedDataLen still exists after popup open, we need to delete this as it is no more releavant\n    // This can happen if initalPrePoulatedDataLen ===  dataProvider.len when popup is opened\n    //If this is not updated then during filter isSearchable flag which depends on dataProvider.len gives false result\n    if( initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen ) {\n        delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n    }\n};\n/**\n * render function for AwLovVal\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awLovValRenderFunction = ( props ) => {\n    const {\n        actions,\n        fields,\n        elementRefList,\n        autoCorrect,\n        action,\n        viewModel,\n        hideFilter,\n        ...prop\n    } = props;\n\n    const field = prop;\n    const { isListbox } = props;\n    let { data: { blankLovEntry, dirty, _most_recent_entry, parentSelectedHandled }, searchBoxLOVFilterStr, dispatch } = viewModel;\n\n    const selectIndex = elementRefList.get( 'selectIndex' );\n    const checkLovEntries = elementRefList.get( 'checkLovEntries' );\n    const isValidationInProgress = elementRefList.get( 'isValidationInProgress' );\n    const initialDataProviderInfo = elementRefList.get( 'initialDataProviderInfo' );\n    const dynProvider = elementRefList.get( 'dynDataprovider' );\n    let dataProvider = field.fielddata.dataProvider ? field.fielddata.dataProvider : dynProvider && dynProvider.current;\n\n    let getFilteredEntries = () => validEntries.current.map( ( { propDisplayValue, propInternalValue } ) => {\n        return { propDisplayValue, propInternalValue };\n    } );\n\n    const hint = prop.fielddata.renderingHint;\n    const typex = prop.typex;\n    const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n    const isArray = prop.fielddata.isArray;\n\n    if( !dataProvider ) {\n        return;\n    }\n\n    //zarq9k: This would be cleaned up when we have the infrastruture to pass ref from viewmodel.\n    let lovEntryRef = dataProvider.getLovEntryRef();\n    setInitialDataProviderInfo( dataProvider, initialDataProviderInfo, actions.lovPopup.open );\n\n    let { isSelectOnly, isSearchable } = getSelectOnlyAndSearchableFlags( prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter );\n\n    let staticFilterStr = null;\n    let validEntries = elementRefList.get( 'validEntries' );\n    let { lovPopup } = actions;\n\n    // provide application opportunity to override the size\n    let overridePopupOptions = () => {\n        let result = { width: lovPopup.reference.current.offsetWidth, autoFocus: true };\n        prop.maxHeight && ( result.maxHeight = prop.maxHeight );\n        return result;\n    };\n\n    let isPropDateTypeAndNonArray = () => typex && DATE_TYPES.includes( typex ) && !prop.fielddata.isArray;\n    let isInValidSearchForExhaustiveLOV = () => !DATE_TYPES.includes( typex ) && selectIndex.current === null && isSelectOnly === true;\n\n    let isArrayWithValidateAction = prop.fielddata.isArray && !_.isEmpty( dataProvider.validateAction ) && !isCheckBoxArryLOV;\n    let isValidationErrorVisible = () => props.error && props.error.length > 0;\n\n    const resetFilterStr = () => {\n        if( lovEntryRef.current && lovEntryRef.current.lovEntry ) {\n            lovEntryRef.current.lovEntry.filterString = null;\n        }\n        prop.setLovVal( { lovEntry: null }, 'resetFilterStr' );\n    };\n\n    let hooks = {\n        whenOpened: () => {\n            isValidationInProgress.current = false;\n            searchBoxLOVFilterStr.error = null;\n        },\n        whenClosed: ( popupRef ) => {\n            // TODO: add comment explaining why validate is needed or not needed here\n            if( ( isCheckBoxArryLOV || DATE_TYPES.includes( typex ) ) && lovEntryRef.current && lovEntryRef.current.lovEntry ) {\n                validateLOVEntry( lovEntryRef.current.lovEntry );\n            }\n\n            resetFilterStr();\n            // reset searchBoxLOVFilterStr\n            fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.update( null );\n            lovEntryRef.current = null;\n        }\n    };\n\n    const showPopup = ( resetFilter = true ) => {\n        // case1: normal show, we want a reset each time.\n        // case2: filter change - onChangeHandler, don't want a reset\n        if( resetFilter ) {\n            resetFilterStr();\n\n            // save the original, used to recover when esc\n            let recent_entry = {\n                propDisplayValue: field.fielddata.uiValue,\n                propInternalValue: prop.value\n            };\n            dispatch( { path: 'data._most_recent_entry', value: recent_entry } );\n        }\n\n        lovPopup.show( {\n            hooks,\n            ...overridePopupOptions()\n        } );\n    };\n\n    const storeLatestLOVEntry = ( lovEntry ) => {\n        if( lovEntryRef.current ) {\n            lovEntryRef.current.lovEntry = lovEntry;\n        } else {\n            lovEntryRef.current = { lovEntry };\n        }\n    };\n\n    // This function would be invoked when some value has been selected from the dropdown popup\n    const setLovEntryAndClose = ( receivedLOVEntry, event, op, isAddingTypedValue ) => {\n        storeLatestLOVEntry( receivedLOVEntry );\n        let dateApi = null;\n        if( prop.fielddata.dateApi ) {\n            dateApi = prop.fielddata.dateApi;\n        }\n\n        if( dateApi && dateApi.isDateEnabled && dateApi.isTimeEnabled && prop.fielddata.isArray ) {\n            //If date and time enabled and if its array update only after time is selected\n            prop.onTimeSelectedOrEntered( event.target.value || receivedLOVEntry.propInternalValue );\n            lovPopup.hide();\n        } else {\n            receivedLOVEntry.filteredLOVEntries = getFilteredEntries();\n            if( !DATE_TYPES.includes( typex ) && !isCheckBoxArryLOV ) {\n                op = 'validateandadd';\n                //For array vaidation is in progress for other it is not\n                isValidationInProgress.current = true;\n            }\n            let lovEntry = receivedLOVEntry;\n            if( isAddingTypedValue === true ) {\n                // If isAddingTypedValue === true means user is adding typed value and not from selected list\n                // lovEntry is what user has typed in and not from the list displayed in popup\n                lovEntry = { ...receivedLOVEntry };\n                lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n                lovEntry.propInternalValue = searchBoxLOVFilterStr.dbValue;\n                lovEntry.propDisplayValue = searchBoxLOVFilterStr.dbValue;\n            }\n            if( lovEntry.filterString === undefined ) {\n                //After value is added in Array should show correct filter\n                lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n            }\n            prop.setLovVal( { lovEntry, dataProvider, checkLovEntries, dateApi }, op )\n                .then( ( uiProp ) => {\n                    isValidationInProgress.current = false;\n                    let isErrorEncountered = false;\n                    if( !_.isEmpty( uiProp ) && !_.isEmpty( uiProp.error ) ) {\n                        isErrorEncountered = true;\n                        searchBoxLOVFilterStr.error = uiProp.error;\n                    }\n                    if( !isErrorEncountered && !( isCheckBoxArryLOV || isArray === true ) ) {\n                        lovPopup.hide();\n                    }\n\n                    // record the checked items\n                    // propInternalValue may in object\n                    let key = _.isObject( lovEntry.propInternalValue ) ? lovEntry.propDisplayValue : lovEntry.propInternalValue;\n                    if( op === 'checked' ) {\n                        lovEntry.isChecked = true;\n                        checkLovEntries.current[ key ] = lovEntry;\n                    } else if( op === 'unchecked' ) {\n                        checkLovEntries.current[ key ].isChecked = false;\n                        delete checkLovEntries.current[ key ];\n                    }\n                    if( isErrorEncountered ) {\n                        dispatch( { path: 'data.dirty', value: dirty++ } );\n                    }\n                } );\n        }\n    };\n\n    const validateLOVEntry = ( lovEntry ) => {\n        // This behaviour is only for aw-listbox\".\n        // 1, nothing match\n        if( autoCorrect ) {\n            if( validEntries.current.length === 0 ) {\n                // reverting back the value if incorrect value has typed in\n                const uiValue = prop.value;\n                lovEntry = {\n                    propDisplayValue: uiValue,\n                    propInternalValue: uiValue\n                };\n            } else if( lovEntryRef.current.lovEntry && lovEntryRef.current.lovEntry.filterString ) {\n                // 2, partial match, then take the first\n                lovEntry = validEntries.current[ 0 ];\n            }\n            storeLatestLOVEntry( lovEntry );\n\n            prop.setLovVal( { lovEntry, dataProvider }, null );\n        } else {\n            if( isPropDateTypeAndNonArray() ) {\n                prop.setLovVal( { lovEntry, dataProvider, dateApi: prop.fielddata.dateApi }, null );\n            } else {\n                if( isValidationInProgress.current === false ) {\n                    if( isArrayWithValidateAction ) {\n                        lovEntry.filteredLOVEntries = getFilteredEntries();\n                        prop.setLovVal( { lovEntry, dataProvider }, 'validateandadd' );\n                    } else {\n                        //There was no validation action hence validate\n                        prop.setLovVal( { lovEntry, dataProvider }, 'validate' );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * onChangeHandler is invoked, when user manually types-in some value in the LOV textbox.\n     * In that case we need to extract the uivalue and store it as filterStr.\n     * This filterStr would later used to pass to the server or in case of static lov's\n     * (lov's without dataprovider action) filter the result locally.\n     * @param {*} event\n     */\n    const onChangeHandler = ( event ) => {\n        if( isCheckBoxArryLOV ) {\n            prop.onChange( event );\n        }\n        if( event.target ) {\n            field.fielddata.uiValue = event.target.value;\n            if( !lovPopup.open ) {\n                showPopup( false );\n            }\n            let lovEntry = {\n                propDisplayValue: field.fielddata.uiValue,\n                propInternalValue: field.fielddata.uiValue,\n                filterString: field.fielddata.uiValue,\n                isSearchable\n            };\n            prop.setLovVal( { lovEntry, dataProvider }, 'filter' );\n            storeLatestLOVEntry( lovEntry );\n        }\n    };\n\n    const onFilterChangeHandler = ( filter, previous ) => {\n        let lovEntry = {\n            propDisplayValue: filter,\n            propInternalValue: filter,\n            filterString: filter,\n            isSearchable\n        };\n        updateInitialDataProviderInfo( initialDataProviderInfo );\n        storeLatestLOVEntry( lovEntry );\n        prop.setLovVal( { lovEntry, dataProvider }, 'filter' );\n    };\n\n    const onBlurHandler = ( e ) => {\n        if( e.target.value === '' && isListbox ) {\n            storeLatestLOVEntry( _most_recent_entry );\n        }\n    };\n\n    const isTimeEnteredManually = ( dateApi ) => isPropDateTypeAndNonArray() && dateApi && dateApi.isTimeEnabled && dateApi.timeValue;\n\n    const keyPressed = ( event, isAddingTypedValue ) => {\n        // handle SPACE key\n        if( wcagService.getKeyName( event ) === keyCode.SPACE && !lovPopup.open ) {\n            event.preventDefault();\n            showPopup();\n            return;\n        }\n        let dateApi = prop.fielddata.dateApi;\n        if( event.key === keyCode.ENTER || event.type === 'click' ) {\n            event.preventDefault();\n            if( DATE_TYPES.includes( typex ) && isValidationErrorVisible() && !props.isListbox ) {\n                return;\n            }\n            if( lovPopup.open ) {\n                // if has any hover item\n                if( isAddingTypedValue !== true && selectIndex.current !== null && validEntries.current && validEntries.current[ selectIndex.current ] && !isTimeEnteredManually( dateApi ) ) {\n                    let hoverItem = validEntries.current[ selectIndex.current ];\n                    if( hoverItem.handleSelection ) {\n                        hoverItem.handleSelection( event );\n                        event.persist();\n                        event.target.value = '';\n                        return;\n                    }\n                } else if( isInValidSearchForExhaustiveLOV() ) {\n                    //For exhaustive LOV, if there is no filtered value and user hits enter,\n                    // simply close popup\n                    lovPopup.hide();\n                } else {\n                    //Wait for validation to complete before closing popup\n                    // the current entry\n                    let lovEntry = lovEntryRef.current.lovEntry;\n\n                    if( !autoCorrect ) {\n                        // Below line would cause re-rendering automatically\n                        if( isValidationInProgress.current === false ) {\n                            isValidationInProgress.current = true;\n                            lovEntry.filteredLOVEntries = getFilteredEntries();\n                            prop.setLovVal( { lovEntry, dataProvider, dateApi }, 'validateandadd' ).then( ( uiProp ) => {\n                                let isErrorEncountered = false;\n                                if( !_.isEmpty( uiProp ) && !_.isEmpty( uiProp.error ) ) {\n                                    isErrorEncountered = true;\n                                    searchBoxLOVFilterStr.error = uiProp.error;\n                                }\n                                if( !isErrorEncountered && !isArray ) {\n                                    lovPopup.hide();\n                                }\n                                isValidationInProgress.current = false;\n                                dispatch( { path: 'data.dirty', value: dirty++ } );\n                            } );\n                        }\n                        event.target.value = '';\n                    }\n                }\n            } else {\n                showPopup();\n            }\n        } else {\n            evalKey( event );\n        }\n    };\n\n    const scrollAttention = () => {\n        let chosenElem = dom.get( '.aw-list-itemFocused', lovPopup.options.popupReference.current );\n        chosenElem && chosenElem.scrollIntoView && chosenElem.scrollIntoView( {\n            block: 'center',\n            behavior: 'smooth'\n        } );\n    };\n\n    // find the index in the lovEntries array of the value of current attention\n    const getAttnIndex = function() {\n        let lovEntries = validEntries.current;\n        if( lovEntries.length && lovPopup.open ) {\n            return lovEntries.map( ( lovEntry ) => lovEntry.attn ).indexOf( true );\n        }\n    };\n\n    const evalKey = function( event ) {\n        let code = event.key || event.code;\n\n        // recover _most_recent_entry when esc\n        if( code === keyCode.ESCAPE && lovPopup.open ) {\n            storeLatestLOVEntry( _most_recent_entry );\n            prop.setLovVal( { lovEntry: _most_recent_entry } );\n        }\n\n        if( code === keyCode.TAB && lovPopup.open ) {\n            // on tab, accept the current text, don't auto-complete\n            if( isSelectOnly === true || lovEntryRef.current === null ) {\n                //For exhaustive LOVs only hide or if for suggestive user hits tab w/o entering\n                lovPopup.hide();\n            }\n        }\n        if( code === keyCode.ARROW_UP || code === keyCode.ARROW_DOWN ) {\n            event.stopPropagation();\n            event.cancelBubble = true;\n\n            if( !lovPopup.open ) {\n                showPopup();\n                return;\n            }\n\n            var attnIndex = getAttnIndex();\n            if( attnIndex < 0 ) {\n                attnIndex = selectIndex.current || _getDefaultAttention();\n            }\n\n            let lovEntries = validEntries.current;\n            if( code === keyCode.ARROW_DOWN ) {\n                // down arrow: move the attention down\n                if( lovEntries.length > attnIndex + 1 ) {\n                    lovEntries[ attnIndex ].attn = false;\n                    lovEntries[ attnIndex + 1 ].attn = true;\n                    selectIndex.current = attnIndex + 1;\n                }\n            } else {\n                // up arrow\n                if( attnIndex > 0 ) {\n                    lovEntries[ attnIndex ].attn = false;\n                    lovEntries[ attnIndex - 1 ].attn = true;\n                    selectIndex.current = attnIndex - 1;\n                }\n            }\n\n            // trigger UI update and scrollAttention\n            dispatch( { path: 'data.dirty', value: dirty++ } );\n            scrollAttention();\n        }\n    };\n\n    // syncLovEntries\n    const updateValidEntries = ( entries ) => {\n        validEntries.current = entries || [];\n    };\n\n    const handleClick = ( event ) => {\n        if( event.key === keyCode.ENTER || event.type === 'click' ) {\n            event.stopPropagation();\n            event.preventDefault();\n            if( !lovPopup.open ) {\n                showPopup( true );\n            } else {\n                lovPopup.hide();\n            }\n        }\n    };\n\n    if( prop.parentSelected === undefined && parentSelectedHandled === true ) {\n        dispatch( { path: 'data.parentSelectedHandled', value: undefined } );\n    }\n    if( prop.parentSelected && parentSelectedHandled === undefined ) {\n        handleClick( event );\n        dispatch( { path: 'data.parentSelectedHandled', value: true } );\n    }\n\n    let uiValue = field.fielddata.uiValue;\n    let classes = [];\n    let DATE_TYPES = [ 'DATETIME', 'DATEARRAY', 'DATE' ];\n    classes.push( getValClass( prop ) );\n    let iconId = null;\n    let timeClassName = '';\n    if( prop.fielddata.dateApi && prop.fielddata.dateApi.isNotLov && DATE_TYPES.includes( typex ) ) {\n        uiValue = prop.fielddata.dateApi.timeValue;\n        iconId = 'cmdTime';\n        timeClassName = 'sw-time-lov-val';\n    } else {\n        iconId = 'miscSortedDescending';\n    }\n\n    // If the LOV does not have any dataProvider action, then only we will consider it as client side filtering.\n    // This is as per the current afx-master logic.\n    // If it is checkboxArray LOV with hint 'checkboxoptionlov', then the data.searchBoxLOVFilterStr.uiValue\n    // would be considered as the filterString.\n    if( isCheckBoxArryLOV && fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.fielddata ) {\n        staticFilterStr = fields.searchBoxLOVFilterStr.fielddata.uiValue;\n    } else if( !isCheckBoxArryLOV && lovEntryRef.current && lovEntryRef.current.lovEntry ) {\n        staticFilterStr = lovEntryRef.current.lovEntry.filterString;\n        if( isValidationErrorVisible() && !prop.isListbox && !isArrayWithValidateAction ) {\n            lovEntryRef.current.lovEntry.filterString = null;\n            staticFilterStr = null;\n        }\n    }\n\n    const renderChildComponent = () => isCheckBoxArryLOV ? <AwPropertyCheckboxLovChild /> : <AWPropertyLovChild />;\n\n    // listbox don't have the blank entry, hence start  with 0\n    // other lovs have a blank entry, hence start with 1\n    const _getDefaultAttention = () => prop.fielddata.emptyLOVEntry === false ? 0 : 1;\n\n    const getDefaultAttention = () => {\n        let lovEntries = validEntries.current;\n        let defaultAttnStr = fields.searchBoxLOVFilterStr.dirty === 'true' ? fields.searchBoxLOVFilterStr.fielddata.uiValue : uiValue;\n        let result = lovEntries.map( ( item ) => item.propDisplayValue ).indexOf( defaultAttnStr );\n        return result > -1 ? result : _getDefaultAttention();\n    };\n\n    let getErrorLabelProp = () => {\n        return { ...prop, className: 'aw-jswidgets-cbaSearch', required: false, displayErrorLabel: false, error: [ searchBoxLOVFilterStr.error ] };\n    };\n\n    let addButtonClick = ( event ) => {\n        //Add button is displayed for suggestive LOV only hence when user cliks AddButton, add typed value and not from selected list\n        let isAddingTypedValue = true;\n        keyPressed( event, isAddingTypedValue );\n    };\n\n    let onButtonBlur = ( event ) => {\n        //Check on Blur if it does not go to input ( previous to add button) element\n        if( event.relatedTarget && event.relatedTarget.tagName !== 'INPUT' ) {\n            lovPopup.hide();\n        }\n    };\n\n    let onSearchBoxKeyDown = ( event ) => {\n        // if LOV is exhaustive/suggestive, onEnter --> isAddingTypedValue = false\n        let isAddingTypedValue = event.key !== keyCode.ENTER;\n        keyPressed( event, isAddingTypedValue );\n        // enter keyboard mode regardless of key pressed?\n        // needed to pass tests atm, discuss with ux\n        document.body.classList.add( 'keyboard' );\n    };\n\n    const isAddButtonDisabled = () => {\n        let isDisabled = _.isEmpty( fields.searchBoxLOVFilterStr.value );\n        let isValidEntry = validEntries.current !== null && validEntries.current.length > 0 && selectIndex.current !== null &&\n            !_.isUndefined( validEntries.current[ selectIndex.current ].propDisplayValue );\n        if( isValidEntry && fields.searchBoxLOVFilterStr.value === validEntries.current[ selectIndex.current ].propDisplayValue ) {\n            isDisabled = true;\n        }\n        return isDisabled;\n    };\n\n    const generateContent = () => {\n        let content = <AWLovList\n            context={props}\n            // syncLovEntries={syncLovEntries}\n            blankLovEntry={blankLovEntry}\n            action={action}\n            lovlist='true'\n            field={field}\n            dataProvider={dataProvider}\n            staticFilterStr={staticFilterStr}\n            updateValidEntries={updateValidEntries}\n            autoCorrect={autoCorrect}\n            lovPopup={lovPopup}\n            isCheckBoxArryLOV={isCheckBoxArryLOV}\n            selectIndex={selectIndex}\n            getDefaultAttention={getDefaultAttention}\n            checkLovEntries={checkLovEntries}\n            setlovEntry={( selLovEntry, event, op ) => { setLovEntryAndClose( selLovEntry, event, op, false ); }} >\n            {\n                renderChildComponent()\n            }\n        </AWLovList>;\n\n        return <div className={ ( isCheckBoxArryLOV ? 'aw-checkboxarray-lovParent ' : '' ) + 'sw-lov-contentContainer' }>\n            { !DATE_TYPES.includes( typex ) && isSearchable &&\n                <div className={ ( _.isEmpty( searchBoxLOVFilterStr.error ) ? '' : 'sw-errorFlag ' ) + 'aw-jswidgets-cbaSearch aw-widget-iconParent sw-lov-textbox-container sw-noDirtyStyle' }>\n                    <AwTextBoxVal { ...Object.assign( {}, fields.searchBoxLOVFilterStr, { autocomplete: 'off', autocorrect: 'off', autocapitalize: 'off' } ) }\n                        { ...generateFilterProps }>\n                    </AwTextBoxVal>\n                    { isSelectOnly || isCheckBoxArryLOV ? <AwIcon iconId='cmdSearch' className='aw-widget-icon'></AwIcon> :\n                        <AwButton onBlur={ onButtonBlur } className={ isAddButtonDisabled() ? 'disabled' : '' } action={addButtonClick}>{ props.i18n.ADD_BUTTON_TITLE }</AwButton> }\n                </div>}\n            { !_.isEmpty( searchBoxLOVFilterStr.error ) && <AwPropertyLabel { ...getErrorLabelProp() }></AwPropertyLabel> }\n            { content }\n        </div>;\n    };\n\n    const hasUserTypedAValue = () => {\n        return lovEntryRef.current && lovEntryRef.current.lovEntry &&\n            ( lovEntryRef.current.lovEntry.filterString || typeof lovEntryRef.current.lovEntry.propInternalValue === 'string' );\n    };\n\n    const getValueIfUserTypedTime = () => hasUserTypedAValue() ? uiValue : '';\n\n    const generateDateArrayLOVContent = () => {\n        let { ...restGeneratedProps } = generateProps;\n        let dateProps = {\n            onClick: handleClick,\n            onChange: onChangeHandler,\n            dirty: prop.dirty,\n            onKeyDown: keyPressed\n        };\n        let allProps = { ...restGeneratedProps, ...dateProps };\n\n        return isValidationErrorVisible() && !prop.isListbox ?\n            <input {...allProps} value={uiValue} /> :\n            <input {...allProps} value={field.fielddata.isArray ? getValueIfUserTypedTime() : uiValue} />;\n    };\n\n    // lov select field\n    const generateProps = {\n        'aria-label': prop.label,\n        'data-locator': prop.label,\n        'aria-required': prop.isRequired,\n        className: classes.join( ' ' ),\n        onBlur: onBlurHandler,\n        type: 'text',\n        placeholder: field.placeholder,\n        ref: lovPopup.reference,\n        dirty: prop.dirty,\n        onClick: handleClick,\n        onKeyDown: keyPressed,\n        disabled: prop.disabled\n    };\n\n    // lov filter field\n    // TODO: i18n on placeholder and use unique label/locator\n    const generateFilterProps = {\n        'aria-label': prop.label,\n        'data-locator': prop.label,\n        className: classes.join( ' ' ),\n        onSwChange: onFilterChangeHandler,\n        type: 'text',\n        placeholder: isSelectOnly ? 'Search' : 'Search or Create',\n        ref: lovPopup.reference,\n        dirty: false,\n        onKeyDown: onSearchBoxKeyDown,\n        disabled: prop.disabled\n    };\n\n    return (\n        <div className='sw-lov-container'>\n            <AwPic className='sw-lov-thumb' iconId={field.fielddata.iconName} source={field.fielddata.iconSource}></AwPic>\n\n            { DATE_TYPES.includes( typex ) && generateDateArrayLOVContent() }\n            { !DATE_TYPES.includes( typex ) && <input  {...generateProps} value={ isArray && !isCheckBoxArryLOV ? null : uiValue} /> }\n\n            <div className={ prop.disabled ? 'sw-widget-iconContainer disabled' : 'sw-widget-iconContainer' } role='button' aria-label={prop.name} tabIndex='-1' onKeyDown={keyPressed} onClick={handleClick}>\n                <AwIcon iconId={iconId} className={'aw-widget-icon ' + timeClassName}></AwIcon>\n            </div>\n            <AwPopup {...lovPopup.options} className='sw-lov-popup'> {generateContent()}</AwPopup>\n        </div>\n    );\n};\n\nexport const onMount = ( prop, elementRefList ) => {\n    let field = prop.fielddata;\n    const hint = field.renderingHint;\n    const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n\n    let values = prop.value;\n    if( isCheckBoxArryLOV ) {\n        let checkLovEntries = elementRefList.get( 'checkLovEntries' );\n        checkLovEntries.current = {};\n\n        if( values && values.length > 0 ) {\n            // we create placeHolders based on the default prop values\n            // generate place-holder array for selected values that may or may not be loaded\n            checkLovEntries.current = _.reduce( values, ( result, value, inx ) => {\n                let disp = field.uiValues[ inx ] || field.displayValues[ inx ] || value;\n                let item = {\n                    propDisplayValue: disp,\n                    propInternalValue: value,\n                    isChecked: true\n                };\n                let key = _.isObject( value ) ? disp : value;\n                result[ key ] = item;\n                return result;\n            }, {} );\n        }\n    }\n};\n\n// clear internal states when prop value was cleared\nexport const updateCheckLovEntries = ( prop, elementRefList ) => {\n    let field = prop.fielddata;\n    const hint = field.renderingHint;\n    const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n\n    if( isCheckBoxArryLOV ) {\n        let checkLovEntries = elementRefList.get( 'checkLovEntries' );\n        let values = prop.value;\n\n        // clear case\n        if( !values || values.length === 0 ) {\n            checkLovEntries.current = {};\n        }\n\n        // async set initial values\n        if( values.length > 0 ) {\n            if( !checkLovEntries.current ) { checkLovEntries.current = {}; }\n            let checked = checkLovEntries.current;\n\n            // update checkLovEntries based on values,\n            // case application set the values programly\n            _.reduce( values, ( result, value, inx ) => {\n                let disp = field.uiValues[ inx ] || field.displayValues[ inx ] || value;\n                let key = _.isObject( value ) ? disp : value;\n                if( !checked[ key ] ) {\n                    checked[ key ] = {\n                        propDisplayValue: disp,\n                        propInternalValue: value,\n                        isChecked: true\n                    };\n                }\n            }, {} );\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
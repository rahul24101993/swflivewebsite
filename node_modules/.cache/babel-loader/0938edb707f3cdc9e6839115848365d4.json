{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/**\n * Memory Processor\n *\n * @module js/splmStatsMemProcessor\n */\n\n/**\n * Instances of this class represent a profiler for Memory Usage\n *\n * @class SPLMStatsMemProcessor\n */\nfunction SPLMStatsMemProcessor() {\n  let self = this;\n  let _processingTime = 0;\n  let _startProcessorTime = 0;\n  let _endProcessorTime = 0;\n  let _memoryCaptures = [];\n\n  const _reset = function () {\n    _memoryCaptures = [];\n  };\n\n  self.start = function () {\n    _startProcessorTime = window.performance.now();\n\n    _reset();\n\n    if (window.performance && window.performance.memory) {\n      _memoryCaptures.push({\n        _usedJSHeapSize: (window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100).toFixed(2) + '%',\n        _bytesUsed: window.performance.memory.usedJSHeapSize\n      });\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.stop = function () {\n    _startProcessorTime = window.performance.now();\n\n    if (window.performance && window.performance.memory) {\n      _memoryCaptures.push({\n        _usedJSHeapSize: (window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100).toFixed(2) + '%',\n        _bytesUsed: window.performance.memory.usedJSHeapSize\n      });\n    }\n\n    _endProcessorTime = window.performance.now();\n    _processingTime += _endProcessorTime - _startProcessorTime;\n  };\n\n  self.getProcessingTime = function () {\n    const _time = _processingTime;\n    _processingTime = 0;\n    return {\n      MemProcessorOverhead: _time\n    };\n  };\n\n  self.getMetrics = function () {\n    if (window.performance && window.performance.memory) {\n      let memoryConsumption = _memoryCaptures[_memoryCaptures.length - 1]._bytesUsed - _memoryCaptures[0]._bytesUsed; //end minus beginning\n\n      return {\n        MemoryConsumption: memoryConsumption,\n        //Bytes base value\n        MemoryUsed: _memoryCaptures[_memoryCaptures.length - 1]._bytesUsed,\n        MemoryStart: _memoryCaptures[_memoryCaptures.length - 1]._bytesUsed,\n        MemoryEnd: _memoryCaptures[0]._bytesUsed\n      };\n    }\n\n    return {\n      MemoryConsumption: 0,\n      MemoryUsed: 0\n    };\n  };\n\n  return self;\n}\n\n_c = SPLMStatsMemProcessor;\nexport default SPLMStatsMemProcessor;\n\nvar _c;\n\n$RefreshReg$(_c, \"SPLMStatsMemProcessor\");","map":{"version":3,"names":["SPLMStatsMemProcessor","self","_processingTime","_startProcessorTime","_endProcessorTime","_memoryCaptures","_reset","start","window","performance","now","memory","push","_usedJSHeapSize","usedJSHeapSize","jsHeapSizeLimit","toFixed","_bytesUsed","stop","getProcessingTime","_time","MemProcessorOverhead","getMetrics","memoryConsumption","length","MemoryConsumption","MemoryUsed","MemoryStart","MemoryEnd"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/plstats/src/js/splmStatsMemProcessor.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n\n/**\n * Memory Processor\n *\n * @module js/splmStatsMemProcessor\n */\n\n/**\n * Instances of this class represent a profiler for Memory Usage\n *\n * @class SPLMStatsMemProcessor\n */\nfunction SPLMStatsMemProcessor() {\n    let self = this;\n\n    let _processingTime = 0;\n\n    let _startProcessorTime = 0;\n\n    let _endProcessorTime = 0;\n\n    let _memoryCaptures = [];\n\n    const _reset = function() {\n        _memoryCaptures = [];\n    };\n\n    self.start = function() {\n        _startProcessorTime = window.performance.now();\n        _reset();\n\n        if( window.performance && window.performance.memory ) {\n            _memoryCaptures.push( {\n                _usedJSHeapSize: ( window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100 ).toFixed( 2 ) + '%',\n                _bytesUsed: window.performance.memory.usedJSHeapSize\n            } );\n        }\n\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.stop = function() {\n        _startProcessorTime = window.performance.now();\n        if( window.performance && window.performance.memory ) {\n            _memoryCaptures.push( {\n                _usedJSHeapSize: ( window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100 ).toFixed( 2 ) + '%',\n                _bytesUsed: window.performance.memory.usedJSHeapSize\n            } );\n        }\n        _endProcessorTime = window.performance.now();\n        _processingTime += _endProcessorTime - _startProcessorTime;\n    };\n\n    self.getProcessingTime = function() {\n        const _time = _processingTime;\n        _processingTime = 0;\n        return { MemProcessorOverhead: _time };\n    };\n\n    self.getMetrics = function() {\n        if( window.performance && window.performance.memory ) {\n            let memoryConsumption = _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed - _memoryCaptures[ 0 ]._bytesUsed; //end minus beginning\n            return {\n                MemoryConsumption: memoryConsumption, //Bytes base value\n                MemoryUsed: _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed,\n                MemoryStart: _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed,\n                MemoryEnd: _memoryCaptures[ 0 ]._bytesUsed\n            };\n        }\n        return {\n            MemoryConsumption: 0,\n            MemoryUsed: 0\n        };\n    };\n\n    return self;\n}\n\nexport default SPLMStatsMemProcessor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
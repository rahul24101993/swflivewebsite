{"ast":null,"code":"// Copyright (c) 2022 Siemens\n\n/**\n * This service manages the gateway functionality.\n *\n * @module js/tileService\n */\nimport { getBaseUrlPath } from 'app';\nimport commandSvc from 'js/command.service';\nimport localeSvc from 'js/localeService';\nimport navigationSvc from 'js/navigationService';\nimport viewModelService from 'js/viewModelService';\nimport declDataProviderService from 'js/declDataProviderService';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport * as cas from 'js/centralAggregationService';\nimport analyticsSvc from 'js/analyticsService';\nimport browserUtils from 'js/browserUtils';\nconst COMMANDARGS_DELIMITER = '&';\nconst LOCALE_TOKEN = '${locale}';\n/**\n * Process concatenated command argument string, splits it based off delimiter '&' and returns an array\n *\n * @param {String} cmdArgString - concatenated command argument string\n * @return {Array} Array of command arguments after splitting them based off '&'\n */\n\nfunction processCommandArgs(cmdArgString) {\n  let cmdArgArray = [];\n\n  if (cmdArgString) {\n    cmdArgArray = cmdArgString.split(COMMANDARGS_DELIMITER);\n  }\n\n  return cmdArgArray;\n}\n/**\n * Decode action parameters value\n *\n * @param {Object} actionParams - tile action parameters\n * @return {Object} action parameters after decoding them\n */\n\n\nfunction decodeActionParams(actionParams) {\n  const actionParamsIn = {};\n\n  if (actionParams) {\n    _.forEach(actionParams, function (value, key) {\n      /**\n       * GWT uses a non-standard encoding with + instead of %20.\n       * TODO: This should be removed once server side URL building is removed or updated\n       */\n      value = value.replace(/\\+/g, '%20'); // Custom decoding from GWT - double encoded, '=' replaced with \\2\n\n      actionParamsIn[key] = decodeURIComponent(decodeURIComponent(value)).replace(/\\\\2/g, '=');\n    });\n  }\n\n  return actionParamsIn;\n}\n/**\n *  Construct url with query parameters for tile\n * @param {String} url - URL of tile action\n * @param {Object} actionParams  - tile action parameters\n * @return {String} constructed full URL\n */\n\n\nconst _constructActionURL = function (url, actionParams) {\n  let fullUrl = url;\n  const decodedActionParams = decodeActionParams(actionParams);\n  const param = $.param(decodedActionParams);\n\n  if (param && param.length > 0) {\n    fullUrl += '?' + param;\n  }\n\n  return fullUrl;\n};\n/**\n * Process all action types which are related to url i.e.\n * <br> 0 - Default <br>\n * <br> 1 - External Url <br>\n * <br> 2 - Static Resource <br>\n *\n * @param {Object} tileAction - tile action object\n */\n\n\nfunction processUrlAction(tileAction) {\n  if (tileAction) {\n    const action = {\n      actionType: 'Navigate'\n    };\n\n    if (tileAction.actionType === 1) {\n      // External URL\n      if (tileAction.url.indexOf('http') === 0) {\n        window.open(_constructActionURL(tileAction.url, tileAction.actionParams), '', '');\n      } else {\n        window.open(_constructActionURL(browserUtils.getBaseURL() + tileAction.url, tileAction.actionParams), '', '');\n      }\n    } else if (tileAction.actionType === 2) {\n      // Static resource\n      const locale = localeSvc.getLocale(); // Get the relative path for the resource. Replace the locale token if present.\n\n      const relativeUrlPath = '/' + tileAction.url.replace(LOCALE_TOKEN, locale);\n\n      if (_.endsWith(tileAction.url, '.pdf')) {\n        action.navigateTo = 'com_siemens_splm_clientfx_pdfjs_showPdfFileSubLocation';\n        navigationSvc.navigate(action, decodeActionParams({\n          file: relativeUrlPath,\n          uid: ''\n        }));\n      } else {\n        // Prepend the module path\n        const staticResourceLocation = getBaseUrlPath() + relativeUrlPath; // Open the link provided for the tile in a new tab in the same window\n        // Pass in empty string for name. This will open the link in another tab in the same window.\n\n        action.navigateIn = 'newTab';\n        action.navigateTo = staticResourceLocation;\n        navigationSvc.navigate(action);\n      }\n    } else {\n      // default\n      const REGEX_DOT = /\\./g;\n      let urlIn = tileAction.url;\n\n      if (REGEX_DOT.test(tileAction.url)) {\n        urlIn = tileAction.url.replace(REGEX_DOT, '_');\n      }\n\n      action.navigateTo = urlIn;\n      navigationSvc.navigate(action, decodeActionParams(tileAction.actionParams));\n    }\n  }\n}\n/**\n * Process command action type i.e.\n * <br> 3 - Command <br>\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\n\n\nfunction processCommandAction(tileAction, context, runActionWithViewModel) {\n  if (tileAction) {\n    let cmdArgs;\n\n    if (context) {\n      context.commandContext = context.commandContext || {};\n    }\n\n    if (tileAction.actionParams) {\n      cmdArgs = processCommandArgs(tileAction.actionParams.cmdArg);\n\n      if (context) {\n        context.commandContext.cmdArgs = cmdArgs;\n        context.commandContext.cmdId = tileAction.actionParams.cmdId;\n      }\n    }\n\n    commandSvc.executeCommand(tileAction.commandId, cmdArgs, context, context.commandContext, runActionWithViewModel);\n  }\n}\n/**\n * Perform operation for gateway tile after clicking it, according to its action Type\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\n\n\nfunction performAction(tileAction, context, runActionWithViewModel) {\n  let sanTileActionCmdId = '';\n\n  if (tileAction) {\n    if (tileAction.url) {\n      processUrlAction(tileAction);\n      sanTileActionCmdId = 'URL';\n    } else if (tileAction.commandId) {\n      processCommandAction(tileAction, context, runActionWithViewModel);\n      sanTileActionCmdId = tileAction.commandId;\n    } else {\n      const declViewModel = viewModelService.getViewModel(context, true);\n\n      if (declViewModel) {\n        declDataProviderService.executeLoadAction(tileAction, declViewModel._internal.origDeclViewModelJson, context);\n      }\n    }\n  }\n\n  const sanTileData = {};\n  sanTileData.sanAnalyticsType = 'Tile';\n  sanTileData.sanCommandId = 'Tile';\n\n  if (context && context.tile && context.tile.displayName) {\n    sanTileData.sanCommandTitle = context.tile.displayName;\n  }\n\n  sanTileData.sanTileAction = sanTileActionCmdId;\n  analyticsSvc.logCommands(sanTileData);\n  cas.notify({\n    widgetInfo: {\n      sanCommandId: 'Tile',\n      commandAnchor: 'Tile',\n      tileInfo: context.tile\n    },\n    userGesture: 'Tile',\n    subject: {}\n  });\n}\n\nexport default {\n  processCommandArgs,\n  decodeActionParams,\n  processUrlAction,\n  processCommandAction,\n  performAction\n};","map":{"version":3,"names":["getBaseUrlPath","commandSvc","localeSvc","navigationSvc","viewModelService","declDataProviderService","$","_","cas","analyticsSvc","browserUtils","COMMANDARGS_DELIMITER","LOCALE_TOKEN","processCommandArgs","cmdArgString","cmdArgArray","split","decodeActionParams","actionParams","actionParamsIn","forEach","value","key","replace","decodeURIComponent","_constructActionURL","url","fullUrl","decodedActionParams","param","length","processUrlAction","tileAction","action","actionType","indexOf","window","open","getBaseURL","locale","getLocale","relativeUrlPath","endsWith","navigateTo","navigate","file","uid","staticResourceLocation","navigateIn","REGEX_DOT","urlIn","test","processCommandAction","context","runActionWithViewModel","cmdArgs","commandContext","cmdArg","cmdId","executeCommand","commandId","performAction","sanTileActionCmdId","declViewModel","getViewModel","executeLoadAction","_internal","origDeclViewModelJson","sanTileData","sanAnalyticsType","sanCommandId","tile","displayName","sanCommandTitle","sanTileAction","logCommands","notify","widgetInfo","commandAnchor","tileInfo","userGesture","subject"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/tile/src/js/tileService.js"],"sourcesContent":["// Copyright (c) 2022 Siemens\n\n/**\n * This service manages the gateway functionality.\n *\n * @module js/tileService\n */\nimport { getBaseUrlPath } from 'app';\nimport commandSvc from 'js/command.service';\nimport localeSvc from 'js/localeService';\nimport navigationSvc from 'js/navigationService';\nimport viewModelService from 'js/viewModelService';\nimport declDataProviderService from 'js/declDataProviderService';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport * as cas from 'js/centralAggregationService';\nimport analyticsSvc from 'js/analyticsService';\nimport browserUtils from 'js/browserUtils';\n\nconst COMMANDARGS_DELIMITER = '&';\nconst LOCALE_TOKEN = '${locale}';\n\n/**\n * Process concatenated command argument string, splits it based off delimiter '&' and returns an array\n *\n * @param {String} cmdArgString - concatenated command argument string\n * @return {Array} Array of command arguments after splitting them based off '&'\n */\nfunction processCommandArgs( cmdArgString ) {\n    let cmdArgArray = [];\n    if( cmdArgString ) {\n        cmdArgArray = cmdArgString.split( COMMANDARGS_DELIMITER );\n    }\n\n    return cmdArgArray;\n}\n\n/**\n * Decode action parameters value\n *\n * @param {Object} actionParams - tile action parameters\n * @return {Object} action parameters after decoding them\n */\nfunction decodeActionParams( actionParams ) {\n    const actionParamsIn = {};\n    if( actionParams ) {\n        _.forEach( actionParams, function( value, key ) {\n            /**\n             * GWT uses a non-standard encoding with + instead of %20.\n             * TODO: This should be removed once server side URL building is removed or updated\n             */\n            value = value.replace( /\\+/g, '%20' );\n            // Custom decoding from GWT - double encoded, '=' replaced with \\2\n            actionParamsIn[ key ] = decodeURIComponent(\n                decodeURIComponent( value ) ).replace( /\\\\2/g, '=' );\n        } );\n    }\n\n    return actionParamsIn;\n}\n\n/**\n *  Construct url with query parameters for tile\n * @param {String} url - URL of tile action\n * @param {Object} actionParams  - tile action parameters\n * @return {String} constructed full URL\n */\nconst _constructActionURL = function( url, actionParams ) {\n    let fullUrl = url;\n    const decodedActionParams = decodeActionParams( actionParams );\n    const param = $.param( decodedActionParams );\n    if( param && param.length > 0 ) {\n        fullUrl += '?' + param;\n    }\n    return fullUrl;\n};\n\n/**\n * Process all action types which are related to url i.e.\n * <br> 0 - Default <br>\n * <br> 1 - External Url <br>\n * <br> 2 - Static Resource <br>\n *\n * @param {Object} tileAction - tile action object\n */\nfunction processUrlAction( tileAction ) {\n    if( tileAction ) {\n        const action = { actionType: 'Navigate' };\n\n        if( tileAction.actionType === 1 ) { // External URL\n            if( tileAction.url.indexOf( 'http' ) === 0 ) {\n                window.open( _constructActionURL( tileAction.url, tileAction.actionParams ), '', '' );\n            } else {\n                window.open( _constructActionURL( browserUtils.getBaseURL() + tileAction.url, tileAction.actionParams ), '', '' );\n            }\n        } else if( tileAction.actionType === 2 ) { // Static resource\n            const locale = localeSvc.getLocale();\n            // Get the relative path for the resource. Replace the locale token if present.\n            const relativeUrlPath = '/' + tileAction.url.replace( LOCALE_TOKEN, locale );\n\n            if( _.endsWith( tileAction.url, '.pdf' ) ) {\n                action.navigateTo = 'com_siemens_splm_clientfx_pdfjs_showPdfFileSubLocation';\n                navigationSvc.navigate( action, decodeActionParams( {\n                    file: relativeUrlPath,\n                    uid: ''\n                } ) );\n            } else {\n                // Prepend the module path\n                const staticResourceLocation = getBaseUrlPath() + relativeUrlPath;\n                // Open the link provided for the tile in a new tab in the same window\n                // Pass in empty string for name. This will open the link in another tab in the same window.\n                action.navigateIn = 'newTab';\n                action.navigateTo = staticResourceLocation;\n                navigationSvc.navigate( action );\n            }\n        } else { // default\n            const REGEX_DOT = /\\./g;\n            let urlIn = tileAction.url;\n\n            if( REGEX_DOT.test( tileAction.url ) ) {\n                urlIn = tileAction.url.replace( REGEX_DOT, '_' );\n            }\n\n            action.navigateTo = urlIn;\n            navigationSvc.navigate( action, decodeActionParams( tileAction.actionParams ) );\n        }\n    }\n}\n\n/**\n * Process command action type i.e.\n * <br> 3 - Command <br>\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\nfunction processCommandAction( tileAction, context, runActionWithViewModel ) {\n    if( tileAction ) {\n        let cmdArgs;\n\n        if( context ) {\n            context.commandContext = context.commandContext || {};\n        }\n\n        if( tileAction.actionParams ) {\n            cmdArgs = processCommandArgs( tileAction.actionParams.cmdArg );\n            if( context ) {\n                context.commandContext.cmdArgs = cmdArgs;\n                context.commandContext.cmdId = tileAction.actionParams.cmdId;\n            }\n        }\n\n        commandSvc.executeCommand( tileAction.commandId, cmdArgs, context, context.commandContext, runActionWithViewModel );\n    }\n}\n\n/**\n * Perform operation for gateway tile after clicking it, according to its action Type\n *\n * @param {Object} tileAction - tile action object\n * @param {Object} context - 'dataCtxNode' (a.k.a AngularJS '$scope')\n * @param {boolean} runActionWithViewModel - run action w/ viewModel?\n */\nfunction performAction( tileAction, context, runActionWithViewModel ) {\n    let sanTileActionCmdId = '';\n    if( tileAction ) {\n        if( tileAction.url ) {\n            processUrlAction( tileAction );\n            sanTileActionCmdId = 'URL';\n        } else if( tileAction.commandId ) {\n            processCommandAction( tileAction, context, runActionWithViewModel );\n            sanTileActionCmdId = tileAction.commandId;\n        } else {\n            const declViewModel = viewModelService.getViewModel( context, true );\n            if( declViewModel ) {\n                declDataProviderService.executeLoadAction( tileAction, declViewModel._internal.origDeclViewModelJson, context );\n            }\n        }\n    }\n\n    const sanTileData = {};\n    sanTileData.sanAnalyticsType = 'Tile';\n    sanTileData.sanCommandId = 'Tile';\n    if( context && context.tile && context.tile.displayName ) {\n        sanTileData.sanCommandTitle = context.tile.displayName;\n    }\n    sanTileData.sanTileAction = sanTileActionCmdId;\n    analyticsSvc.logCommands( sanTileData );\n    cas.notify( {\n        widgetInfo: {\n            sanCommandId: 'Tile',\n            commandAnchor: 'Tile',\n            tileInfo: context.tile\n        },\n        userGesture: 'Tile',\n        subject: {}\n    } );\n}\n\nexport default {\n    processCommandArgs,\n    decodeActionParams,\n    processUrlAction,\n    processCommandAction,\n    performAction\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
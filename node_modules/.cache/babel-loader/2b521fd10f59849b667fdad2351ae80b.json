{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * @module js/tcCommandVisibilityService2\n */import appCtxService from'js/appCtxService';import DataLoader from'dataloader';import{postUnchecked,getPendingRequestsCount}from'soa/kernel/soaService';import Debug from'debug';import async from'js/async.service';/**\n * How long to wait after the last \"request\" to load visibility before actually making the SOA call.\n * Because command bars will not render if server visibility is not ready this is also the minimum\n * delay before a command bar will appear.\n *\n * Will probably be reworked in the future\n */const commandBatchLoadTime=100;const trace=new Debug('command:tcCommandVisibilityService2');/**\n  * Unlock detection function\n  *\n  * @returns {Boolean} If the service is unlocked\n  */var unlockFunction=function(){if(getPendingRequestsCount()!==0){trace('Visibility service is locked - SOA is active');return false;}return true;};/**\n * Get a dataloader that batches up calls to the getVisibleCommands SOA\n * @returns {DataLoader} Server visibility dataloader\n */export const getServerVisibilityLoader=()=>{return new DataLoader(async getVisibleCommandsInfo=>{const input={getVisibleCommandsInfo};trace('Making batched SOA call to load visibility',input);const response=await postUnchecked('Internal-AWS2-2016-03-UiConfig','getVisibleCommands',input,{});//New SOA is needed to fully support this use case. SOA accepts multiple sets of info as input but only returns a single list of visible commands\nreturn getVisibleCommandsInfo.map(()=>response.visibleCommandsInfo);},{//Only batching of requests done at this level. Caching managed at lower levels (ex sublocation)\ncache:false,batchScheduleFn:callback=>{return async.debouncePromise(callback,commandBatchLoadTime,{isUnlocked:unlockFunction})();}});};/**\n * Startup function to create a shared dataloader and add to ctx\n */export const addServerVisibilityLoaderToCtx=()=>{trace('Adding shared visibility loader to ctx');appCtxService.registerPartialCtx('services.awCommandVisibilityLoader',getServerVisibilityLoader());};export default{addServerVisibilityLoaderToCtx,getServerVisibilityLoader};","map":null,"metadata":{},"sourceType":"module"}
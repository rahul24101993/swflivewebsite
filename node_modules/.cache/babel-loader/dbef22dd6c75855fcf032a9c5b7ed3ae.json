{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * This service manages the subscription and publishing of the events. It is based on the 'PostalJS' API.\n * <P>\n * For more details, see: {@link https://github.com/postaljs/postal.js|PostalJS}\n * <P>\n *\n * @module js/eventBus\n *\n * @publishedApolloService\n *\n */import _ from'lodash';import postal from'postal';import browserUtils from'js/browserUtils';import logger from'js/logger';import debugService from'js/debugService';/**\n * {Boolean} TRUE if subscribe/unsubscribe activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusActivity' attribute in the current document's\n * URL.\n */var _logActivity=false;/**\n * {Boolean} TRUE if the 'soa.getVisibleCommands' topic (a particularly high volume of subscribe/unsubscribe events)\n * should be logged to the console. FALSE if they should not be logged to allow lower volume issues to be more\n * easily traced.\n * <P>\n * Note: This flag is controlled by the existence of the 'logEventBusCommandVisibility' attribute in the current\n * document's URL.\n */var _logCommandVisibility=false;/**\n * {Boolean} TRUE if 'publish' activity should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logPublishActivity' attribute in the current document's\n * URL.\n * <P>\n * Note: If the attribute has NO value, all publish event topic will be logged. If it has a value it is interpreted\n * as a comma separated list of topics to limit logging to.\n */var _logPublishActivity;/**\n * {Boolean} TRUE if 'publish' activity from the client data model (cdm) should be logged to the console.\n * <P>\n * Note: This flag is controlled by the existence of the 'logCdmPublishActivity' attribute in the current document's\n * URL.\n */var _logCdmPublishActivity;/**\n * {StringArray} Topic names to limit logging to.\n */var _logPublishActivityKeys;/**\n * {Map} Map of topic-to-active-topic-subcription-count (used only when _logActivity is TRUE).\n */var _topic2CountMap={};/**\n * {Map} Map of topic-to-published-count (used only when _logActivity is TRUE).\n */var _topic2PublishCountMap={};/**\n * Set debug options based on URL attributes.\n */var urlAttrs=browserUtils.getUrlAttributes();_logActivity=urlAttrs.logEventBusActivity!==undefined;_logCommandVisibility=urlAttrs.logEventBusCommandVisibility!==undefined;if(urlAttrs.logPublishActivity!==undefined){_logPublishActivity=true;if(!_.isEmpty(urlAttrs.logPublishActivity)){_logPublishActivityKeys=urlAttrs.logPublishActivity.split(',');}}_logCdmPublishActivity=urlAttrs.logCdmPublishActivity!==undefined;/**\n * Add modeule objects to the given array.\n *\n * @param {String} msg - Message to append information to.\n * @param {ViewModelObjectArray} modelObjects - Array of modelObjects to append info for.\n *\n * @returns {String} A message string with new information lines appended.\n */function _appendModelObjects(msg,modelObjects){if(!_.isEmpty(modelObjects)){_.forEach(modelObjects,function(mo,ndx){var begLength=msg.length;msg+='\\n';msg+='  [';msg+=ndx;msg+=']: type: ';msg+=mo.type;for(var char=msg.length-begLength;char<40;char++){msg+=' ';}msg+=' uid: ';msg+=mo.uid;});}else{msg+='  (empty)';}return msg;}// _appendModelObjects\n/**\n * Increment/decrement count of subsriptions to the given topic.\n *\n * @param {String} topic -\n * @param {Number} increment -\n *\n * @returns {Number} Updated count for the given topic.\n */function _changeTopicSubscriptionCount(topic,increment){var count=_topic2CountMap[topic];if(!count){count=0;}var newCount=count+increment;_topic2CountMap[topic]=newCount;return newCount;}/**\n * Define public API\n * @ignore\n */var exports={};/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listeneing for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */export let subscribePostal=function(options){return exports.subscribeOnChannel(options);};/**\n * This function wraps the 'subscribe' function in the underlying 'postal' API. The 'options' allows listening for\n * a given 'topic' on the given event 'channel'. When the event is published the given function will be invoked and\n * passed the 'eventData'.\n *\n * @param {Object} options - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * options - An object that contains:\n *     channel - (optional) the channel name (string)\n *     topic - (required!) the topic name (string)\n *     callback - (required!) the callback to be fired when the subscription receives a message.\n *     This callback can take up to two arguments (in this order):\n *          data - just the data published as the message body\n *          envelope - the full envelope which includes (at a minimum):\n *              channel - the channel on which the message was published\n *              topic - the topic used when the message was published\n *              timeStamp - the date/time the message was published\n *              data - same as the first argument, the data published with the message\n * </pre>\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object.\n * @ignore\n */export let subscribeOnChannel=function(options){return postal.subscribe(options);};/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */export let publishPostal=function(envelope,cb){exports.publishOnChannel(envelope,cb);};/**\n * This function wraps the 'publish' function in the underlying 'postal' API.\n *\n * @param {Object} envelope - Option object specifying the 'topic' channel' and call back function (see 'postal' API\n *            for more details).\n *\n * <pre>\n * envelope - an object that contains:\n *     channel - (optional) channel name (string). Uses DEFAULT_CHANNEL if no channel is provided.\n *     topic - (required!) the topic string\n *     data - (optional) value of any type. This is effectively the message body.\n * </pre>\n *\n * @param {Function} cb - Function invoked when the publish is complete and is passed information about the status\n *            of the publish operation.\n * @ignore\n */export let publishOnChannel=function(envelope,cb){postal.publish(envelope,cb);};/**\n * Subscribe to the given 'topic' on the event channel. When the event is published, the given function will\n * be invoked and passed the 'eventData'.\n *\n * @param {String} topic - Topic to subscribe to. A '#' character is interpreted as a wildcard.\n *\n * @param {Function} callbackFn - Function to be invoked and passed 'eventData' when the event is published.\n *\n * @param {String} subId - An optional ID to associate with this subscription.\n *\n * @return {Object} A 'PostalJS' SubscriptionDefinition object. Needed while unsuscribing the event topic using {@link module:js/eventBus.unsubscribe|unsubscribe}.\n */export let subscribe=function(topic,callbackFn,subId){var subDef=postal.subscribe({channel:'soajs',topic:topic,callback:callbackFn});if(_logActivity||_logPublishActivity){var count=_changeTopicSubscriptionCount(subDef.topic,1);if(_logActivity&&(_logCommandVisibility||topic!=='soa.getVisibleCommands')){if(subId){console.log('Subscribe Topic: \"'+topic+'\" count: '+count+' id: '+subId);// eslint-disable-line no-console\nsubDef.id=subId;}else{console.log('Subscribe Topic: \"'+topic+'\" count: '+count);// eslint-disable-line no-console\n}}}return subDef;};/**\n * Publish the given 'topic' on the event channel. The given 'eventData' will be passed to each subscribers\n * callback function.\n *\n * @param {String} topic - Topic to publish.\n * @param {Object} eventData - Optional data to pass to the subscribed callback functions.\n * @param {Boolean} isCustomEvent - true if event stated in *viewModel.json\n */export let publish=function(topic,eventData,isCustomEvent){debugService.debug('globalEvents',topic);var doLogging=false;if(_logPublishActivity){if(_logCommandVisibility){doLogging=!/^(log|progress.start|progress.end|StartSaveAutoBookmarkEvent)$/.test(topic);}else{doLogging=!/^(log|progress.start|progress.end|soa.getVisibleCommands|StartSaveAutoBookmarkEvent)$/.test(topic);}}/**\n     * Check if we are listing ALL or just a select few topics (and this topic is one)\n     */if(doLogging&&(!_logPublishActivityKeys||_.indexOf(_logPublishActivityKeys,topic)!==-1)){var msg='Publish Topic: ';var nListeners=_topic2CountMap[topic]?_topic2CountMap[topic]:0;if(nListeners===0){msg+=' (!) ';}msg+=topic;if(eventData){if(eventData.name==='state'){msg+='  event: ';msg+=JSON.stringify(eventData,['name','target']);msg+=' value: ';_.forEach(eventData.value.params,function(value,name){if(value){var msg2='';msg2+='\\n';msg2+=name;while(msg2.length<15){msg2+=' ';}msg2+=' = ';msg2+='\"';msg2+=value;msg2+='\"';msg+=msg2;}});msg+='\\n';}else if(eventData.name==='selected'||eventData.name==='pselected'){msg+='  event: ';msg+=JSON.stringify(eventData,['name','target']);msg+='  selected: ';msg+=eventData.value;}else if(_logCdmPublishActivity){if(topic==='cdm.new'){msg=_appendModelObjects(msg,eventData.newObjects);}else if(topic==='cdm.modified'){msg=_appendModelObjects(msg,eventData.modifiedObjects);}else if(topic==='cdm.updated'||topic==='cdm.modified'){msg=_appendModelObjects(msg,eventData.updatedObjects);}}else if(topic==='primaryWorkArea.selectionChangeEvent'){msg+='  selection: ';msg+=JSON.stringify(eventData.selectionModel.getSelection());}else{msg+='  event: ';msg+=JSON.stringify(eventData,['name','target']);}}if(nListeners>0){msg+='  nListeners: ';msg+=nListeners;}if(_topic2PublishCountMap[topic]){_topic2PublishCountMap[topic]++;}else{_topic2PublishCountMap[topic]=1;}msg+='  totalCount: ';msg+=_topic2PublishCountMap[topic];console.log(msg);// eslint-disable-line no-console\n}if(!isCustomEvent&&logger.isDeclarativeLogEnabled()){debugService.debugEventPub({},{name:topic},{panelId:'SystemEvent'},{},eventData);}postal.publish({channel:'soajs',topic:topic,data:eventData});};/**\n * Removes the given subscription from the event channel so that the callback will no longer be invoked.\n *\n * @param {Object} subDef - A 'PostalJS' SubscriptionDefinition object returned by {@link module:js/eventBus.subscribe|subscribe}\n */export let unsubscribe=function(subDef){if(_logActivity||_logPublishActivity){var count=_changeTopicSubscriptionCount(subDef.topic,-1);if(_logActivity&&(_logCommandVisibility||subDef.topic!=='soa.getVisibleCommands')){if(subDef.id){console.log('   Unsubscribe Topic: \"'+subDef.topic+'\" count: '+count+// eslint-disable-line no-console\n' id: '+subDef.id);}else{console.log('   Unsubscribe Topic: \"'+subDef.topic+'\" count: '+count);// eslint-disable-line no-console\n}}}postal.unsubscribe(subDef);};logger.setEventBus(exports);exports={subscribePostal,subscribeOnChannel,publishPostal,publishOnChannel,subscribe,publish,unsubscribe};export default exports;","map":null,"metadata":{},"sourceType":"module"}
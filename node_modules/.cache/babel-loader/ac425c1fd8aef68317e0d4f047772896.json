{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * Defines {@link centralAggregationService} .\n * @module js/centralAggregationService\n */\nimport tabRegistryService from 'js/tabRegistry.service';\nimport commandHighlightService from 'js/commandHighlightService';\nimport appCtxService from 'js/appCtxService';\nimport localStorage from 'js/localStorage';\nimport htmlUtils from 'js/htmlUtils';\nlet _services = [];\n/**\n *\n * @param {String} xpath xpath to evaluate.\n * @param {DOMElement} contextNode element to evaluate upon.\n * @returns {DOMElement} null or the found html element.\n */\n\nexport function getElement(xpath, contextNode) {\n  return htmlUtils.getElementByXpath(xpath, contextNode);\n}\n/**\n * Helper function to get the command bar + anchor of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} command bar information. commandBarAnchor, the xpath to\n * the command bar, and the updated context node.\n */\n\nconst getCommandBarInfo = (contextNode, xpath) => {\n  const cmdBarXpath = './ancestor::*[contains(@class, \\'aw-command-bar\\')]';\n  const cmdBar = htmlUtils.getElementByXpath(cmdBarXpath, contextNode);\n\n  if (cmdBar) {\n    const cmdBarAnchor = cmdBar.getAttribute('anchor');\n    const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor + '\\']';\n    return {\n      cmdBarAnchor: cmdBarAnchor,\n      xpath: cmdBarXpath,\n      contextNode: contextNode\n    };\n  }\n\n  let cmdBarAnchor = '';\n  const popupCmdBarXpath = './ancestor::*[contains(@class, \\'aw-popup-command-bar\\')]';\n  const popupCmdBar = htmlUtils.getElementByXpath(popupCmdBarXpath, contextNode);\n\n  if (popupCmdBar) {\n    cmdBarAnchor = popupCmdBar.getAttribute('anchor');\n  }\n  /**\n   * if there is no command bar from the clicked command, it is an overflow or group command\n   * check the command bar that the overflow command or group command is a part of\n   *      1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n   *          a. singular command bar\n   *          b. multiple command bars\n   *      2. if it is a group command, find the group command id and anchor\n   */\n\n\n  const overflowButtonXpath = '//*[contains(@class,\\'aw-commands-moreButton\\')]//*[contains(@class, \\'aw-state-selected\\')]';\n  const overflowButton = htmlUtils.getElementByXpath(overflowButtonXpath, document);\n\n  if (overflowButton) {\n    // 1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n    const cmdBar2 = htmlUtils.getElementByXpath(cmdBarXpath, overflowButton);\n\n    if (cmdBar2) {\n      const cmdBarAnchor2 = cmdBar2.getAttribute('anchor');\n      const cmdBarXpath2 = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor2 + '\\']';\n      return {\n        cmdBarAnchor: cmdBarAnchor2,\n        grpCmdBarAnchor: undefined,\n        grpCmdId: undefined,\n        xpath: cmdBarXpath2,\n        contextNode: htmlUtils.getElementByXpath(cmdBarXpath + xpath, overflowButton)\n      };\n    } // singular command bar is not found, searching multiple command bars\n\n\n    const cmdBarsXpath = './ancestor::*[contains(@class, \\'aw-commandBars\\')]';\n    const cmdBars = htmlUtils.getElementByXpath(cmdBarsXpath, overflowButton);\n\n    if (cmdBars) {\n      const cmd = htmlUtils.getElementByXpath(xpath, cmdBars);\n\n      if (cmd) {\n        const cmdBar3 = htmlUtils.getElementByXpath(cmdBarXpath, cmd);\n\n        if (cmdBar3) {\n          const cmdBarAnchor3 = cmdBar3.getAttribute('anchor');\n          const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor3 + '\\']';\n          return {\n            cmdBarAnchor: cmdBarAnchor3,\n            grpCmdBarAnchor: undefined,\n            grpCmdId: undefined,\n            xpath: cmdBarXpath,\n            contextNode: cmd\n          };\n        }\n      }\n    }\n  } else {\n    const grpCmdXpath = '//*[contains(@class, \\'aw-state-selected\\') and @data-command-id]//*[contains(@class, \\'aw-widgets-groupCommand\\')]/ancestor::*[@data-command-id]';\n    const grpCmd = htmlUtils.getElementByXpath(grpCmdXpath, document); // 2. if it is a group command, find the group command id and anchor\n\n    if (grpCmd) {\n      const grpCmdId = grpCmd.getAttribute('data-command-id');\n      const grpCmdAnchorElem = htmlUtils.getElementByXpath(cmdBarXpath, grpCmd);\n      let grpCmdAnchor = grpCmdAnchorElem ? grpCmdAnchorElem.getAttribute('anchor') : undefined;\n      return {\n        cmdBarAnchor: cmdBarAnchor,\n        grpCmdBarAnchor: grpCmdAnchor,\n        grpCmdId: grpCmdId,\n        xpath: '',\n        contextNode: grpCmd\n      };\n    }\n  }\n\n  return {\n    cmdBarAnchor: cmdBarAnchor,\n    grpCmdBarAnchor: undefined,\n    grpCmdId: undefined,\n    xpath: '',\n    contextNode: contextNode\n  };\n};\n/**\n * Helper function to get the containing property of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} property information. Property name and its xpath.\n */\n\n\nconst getPropertyInfo = contextNode => {\n  const propXpath = './ancestor::*[contains(@class, \\'sw-property\\')]//*[contains(@class, \\'sw-property-name\\')]';\n  const propNameElement = htmlUtils.getElementByXpath(propXpath, contextNode);\n\n  if (propNameElement) {\n    const propName = propNameElement.getInnerHTML();\n    return {\n      propName: propName,\n      xpath: '//*[contains(@class, \\'sw-property-name\\') and text()=\\'' + propName + '\\']/ancestor::*[contains(@class, \\'sw-property\\')]'\n    };\n  }\n\n  return {\n    propName: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing section of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} section information. Section titleKey and its xpath.\n */\n\n\nconst getSectionInfo = contextNode => {\n  const sectionXpath = './ancestor::*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\')]';\n  const section = htmlUtils.getElementByXpath(sectionXpath, contextNode);\n\n  if (section) {\n    const sectionTitleKey = section.getAttribute('titlekey');\n    const sectionTitleKeyXpath = '//*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\') and @titlekey=\\'' + sectionTitleKey + '\\']';\n    return {\n      sectionTitleKey: sectionTitleKey,\n      xpath: sectionTitleKeyXpath\n    };\n  }\n\n  return {\n    sectionTitleKey: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing secondary workarea tab of contextNode\n * using xpath to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} secondary workarea tab information. Secondary workarea tab key\n * and its xpath.\n */\n\n\nconst getSwaTabInfo = contextNode => {\n  const swaTabsXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n  const swaTab = htmlUtils.getElementByXpath(swaTabsXpath, contextNode);\n\n  if (swaTab) {\n    const swaTabKey = swaTab.getAttribute('tabkey');\n    const swaTabKeyXpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\'' + swaTabKey + '\\']/ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n    return {\n      swaTabKey: swaTabKey,\n      xpath: swaTabKeyXpath\n    };\n  }\n\n  return {\n    swaTabKey: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing primary workarea tab of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} primary workarea information. Primary workarea tab key and its xpath.\n */\n\n\nconst getPwaTabInfo = contextNode => {\n  const pwaTabsXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]//*[contains(@class, \\'aw-layout-subLocationTitles\\')]' + '//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n  const pwaTab = htmlUtils.getElementByXpath(pwaTabsXpath, contextNode);\n\n  if (pwaTab) {\n    const pwaTabName = pwaTab.getAttribute('tabkey');\n    const pwaTabNameXpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\'' + pwaTabName + '\\']/ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n    return {\n      pwaTabName: pwaTabName,\n      xpath: pwaTabNameXpath\n    };\n  }\n\n  return {\n    pwaTabName: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing view of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} view information. xpath to the containing view.\n */\n\n\nconst getViewInfo = (contextNode, xpath) => {\n  const viewXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n  const view = htmlUtils.getElementByXpath(viewXpath, contextNode);\n\n  if (view) {\n    const result = document.evaluate('//*[contains(@class, \\'sw-showobject-page\\')]', document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\n    let index = 1; //multiple work areas\n\n    let node = result.iterateNext();\n\n    while (node) {\n      const elem = htmlUtils.getElementByXpath('(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']' + xpath, document);\n\n      if (elem === contextNode) {\n        break;\n      } else {\n        index += 1;\n      }\n\n      node = result.iterateNext();\n    }\n\n    return '(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']';\n  }\n\n  return '';\n};\n/**\n * Helper function to get the currently selected type.\n *\n * @returns {String} the selected type.\n */\n\n\nconst getSelectedTypeInfo = () => {\n  return appCtxService.ctx.selected && appCtxService.ctx.selected !== null && appCtxService.ctx.selected.type ? appCtxService.ctx.selected.type : '';\n};\n/**\n * Helper function to get the current selection mode.\n *\n * @returns {String} the selection mode.\n */\n\n\nconst getSelectionModeInfo = () => {\n  const mselected = appCtxService.ctx.mselected;\n\n  if (mselected && mselected !== null && mselected.length >= 1) {\n    for (let index = 1; index < mselected.length; index++) {\n      if (mselected[index].type !== mselected[index - 1].type) {\n        return 'MULTIPLE';\n      }\n    }\n\n    return mselected.length > 1 ? 'MULTIPLE' : 'SINGLE';\n  }\n\n  return 'SINGLE';\n};\n/**\n * Helper function to get the current user context information (user/role/group/workspace).\n *\n * @returns {Object} user context information. User uid, role uid, group uid, and workspace id.\n */\n\n\nconst getUserContextInfo = () => {\n  let user = '';\n  let role = '';\n  let group = '';\n  let workspace = '';\n\n  if (appCtxService.ctx && appCtxService.ctx.userSession && appCtxService.ctx.userSession.props) {\n    user = appCtxService.ctx.userSession.props.user.dbValues[0];\n    role = appCtxService.ctx.userSession.props.role.dbValues[0];\n    group = appCtxService.ctx.userSession.props.group.dbValues[0];\n\n    if (appCtxService.ctx.workspace) {\n      workspace = appCtxService.ctx.workspace.workspaceId;\n    }\n  }\n\n  return {\n    user: user,\n    role: role,\n    group: group,\n    workspace: workspace\n  };\n};\n/**\n * Helper function to get command information from contextNode.\n *\n * @param {HTMLElement} contextNode - button element that contains command id attribute\n * @returns {Object} command information. Command id, command bar anchor, property name,\n * section titlekey, secondary workarea tab, primary workarea tab, view xpath, user,\n * role, group, workspace, selected type, and selection mode.\n */\n\n\nconst getCommandInfo = contextNode => {\n  let localContextNode = contextNode;\n  const cmdId = contextNode.getAttribute('data-command-id');\n  let xpath = '//*[@data-command-id=\\'' + cmdId + '\\']';\n  const cmdBarInfo = getCommandBarInfo(localContextNode, xpath);\n  xpath = cmdBarInfo.grpCmdId ? '//*[@data-command-id=\\'' + cmdBarInfo.grpCmdId + '\\']' : cmdBarInfo.xpath + xpath;\n  localContextNode = cmdBarInfo.contextNode;\n  const propInfo = getPropertyInfo(localContextNode);\n  xpath = propInfo.xpath + xpath;\n  const sectionInfo = getSectionInfo(localContextNode);\n  xpath = sectionInfo.xpath + xpath;\n  const swaTabInfo = getSwaTabInfo(localContextNode);\n  xpath = swaTabInfo.xpath + xpath;\n  const pwaTabInfo = getPwaTabInfo(localContextNode);\n  xpath = pwaTabInfo.xpath + xpath;\n  xpath = getViewInfo(localContextNode, xpath) + xpath;\n  const userContextInfo = getUserContextInfo();\n  return {\n    xpath: xpath,\n    commandId: cmdId,\n    commandBarAnchor: cmdBarInfo.cmdBarAnchor,\n    grpCmdId: cmdBarInfo.grpCmdId,\n    grpCmdAnchor: cmdBarInfo.grpCmdBarAnchor,\n    propName: propInfo.propName,\n    sectionTitleKey: sectionInfo.sectionTitleKey,\n    swaTab: swaTabInfo.swaTabKey,\n    pwaTab: pwaTabInfo.pwaTabKey,\n    selectedType: getSelectedTypeInfo(),\n    selectionMode: getSelectionModeInfo(),\n    user: userContextInfo.user,\n    role: userContextInfo.role,\n    group: userContextInfo.group,\n    workspace: userContextInfo.workspace\n  };\n};\n/**\n *\n * @param {HTMLElement} contextNode - anchor element that contains tab key attribute\n * @returns {Object} tab information\n */\n\n\nconst getTabInfo = contextNode => {\n  let localContextNode = contextNode;\n  const tabKey = localContextNode.getAttribute('tabkey'); // determine if we are in overflow\n\n  const overflowXpath = '//*[contains(@class, \\'sw-tab-overflowContainer\\')]//*[contains(@class, \\'sw-tab-overflowButton\\') and contains(@class, \\'aw-jswidget-controlArrowRotateRight\\')]';\n  const overflowButtonElem = htmlUtils.getElementByXpath(overflowXpath, document);\n\n  if (overflowButtonElem) {\n    // in overflow, get the hidden tab\n    const hiddenTabXpath = './ancestor::*[contains(@class, \\'sw-tab-overflowContainer\\')]/ancestor::*//*[@role=\\'tablist\\' and contains(@class, \\'sw-tabContainer\\')]//*[@role=\\'tab\\']//*[@tabkey=\\'' + tabKey + '\\']';\n    const hiddenTabElem = htmlUtils.getElementByXpath(hiddenTabXpath, overflowButtonElem);\n\n    if (hiddenTabElem) {\n      localContextNode = hiddenTabElem;\n    }\n  }\n\n  const tabName = localContextNode.getAttribute('aria-label');\n  let xpath = '//*[@tabkey=\\'' + tabKey + '\\']';\n  const swaXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n  const swaElem = htmlUtils.getElementByXpath(swaXpath, localContextNode);\n\n  if (swaElem) {\n    // clicked on swa tab\n    xpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]' + xpath;\n    const pwaTabInfo = getPwaTabInfo(localContextNode);\n    xpath = pwaTabInfo.xpath + xpath;\n    xpath = getViewInfo(localContextNode, xpath) + xpath;\n  } else {\n    const pwaXpath = './ancestor::*[contains(@class, \\'sw-tabContainer\\')]/ancestor::*[contains(@class, \\'aw-layout-subLocationTitles\\')]';\n    const pwaElem = htmlUtils.getElementByXpath(pwaXpath, localContextNode);\n\n    if (pwaElem) {\n      xpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]' + xpath;\n      xpath = getViewInfo(localContextNode, xpath) + xpath;\n    }\n  }\n\n  const userContextInfo = getUserContextInfo();\n  return {\n    xpath: xpath,\n    tabName: tabName,\n    selectedType: getSelectedTypeInfo(),\n    selectionMode: getSelectionModeInfo(),\n    user: userContextInfo.user,\n    role: userContextInfo.role,\n    group: userContextInfo.group,\n    workspace: userContextInfo.workspace\n  };\n};\n/**\n *\n * @param {HTMLElement} contextNode - aw-tile element\n * @returns {Object} tile information\n */\n\n\nconst getTileInfo = contextNode => {\n  const tileName = contextNode.getAttribute('title');\n  const userContextInfo = getUserContextInfo();\n  return {\n    xpath: '//*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\' and @title=\\'' + tileName + '\\']',\n    tileName: tileName,\n    selectedType: getSelectedTypeInfo(),\n    selectionMode: getSelectionModeInfo(),\n    user: userContextInfo.user,\n    role: userContextInfo.role,\n    group: userContextInfo.group,\n    workspace: userContextInfo.workspace\n  };\n}; // TODO: (mm) decide if this function is needed. This function is just pushing to localStorage.\n\n\nconst tempFn = (key, info) => {\n  let infos = [];\n  const result = localStorage.get(key);\n\n  if (result) {\n    infos = JSON.parse(result);\n    let found = false;\n    let index = 0;\n\n    for (let element of infos) {\n      if (element.xpath === info.xpath && element.selectedType === info.selectedType && element.user === info.user && element.group === info.group && element.role === info.role && element.workspace === info.workspace) {\n        found = true;\n        break;\n      }\n\n      index += 1;\n    }\n\n    if (found) {\n      // move to front\n      const elem = infos[index];\n      infos.splice(index, 1);\n      infos.unshift(elem);\n    } else {\n      if (infos.length === 5) {\n        infos.pop();\n      }\n\n      infos.push(info);\n    }\n  } else {\n    infos.push(info);\n  }\n\n  localStorage.publish(key, JSON.stringify(infos));\n};\n/**\n * Global click listener on the \"bubble down\" so this code is invoked first.\n * Collect information from the DOM for commands/tabs/tiles and notify all services.\n */\n\n\nexport function initClickListener() {\n  document.addEventListener('click', function (event) {\n    const commandElement = htmlUtils.getElementByXpath('./ancestor-or-self::*[@data-command-id]', event.target);\n\n    if (commandElement) {\n      const cmdInfo = getCommandInfo(commandElement);\n      tempFn('commandInformation', cmdInfo);\n      notify2(cmdInfo);\n      return;\n    }\n\n    const tabElement = htmlUtils.getElementByXpath('./ancestor-or-self::*[@tabkey]', event.target);\n\n    if (tabElement) {\n      const tabInfo = getTabInfo(tabElement);\n      tempFn('tabInformation', tabInfo);\n      notify2(tabInfo);\n      return;\n    }\n\n    const tileXpath = './ancestor-or-self::*[not(@data-locator=\\'tile-resizeButton\\')]/ancestor::*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\']';\n    const tileElement = htmlUtils.getElementByXpath(tileXpath, event.target);\n\n    if (tileElement) {\n      const tileInfo = getTileInfo(tileElement);\n      tempFn('tileInformation', tileInfo);\n      notify2(tileInfo);\n    }\n  }, true);\n}\n/**\n * Register a service\n *\n * @param {String} serviceName name of service to register\n * @param {Object} service instance to register\n */\n\nexport function registerService(serviceName, service) {\n  _services.push({\n    name: serviceName,\n    instance: service\n  });\n}\n/**\n * Remove service registration\n *\n * @param {String} serviceName service name to un-register\n */\n\nexport function unregisterService(serviceName) {\n  _services = _services.filter(function (value) {\n    return value.name !== serviceName;\n  });\n}\n/**\n * capture current user gesture and publish-\n * TODO: (mm) delete this function and it's references\n * then re-name notify2 to notify\n * @param  {...currentContext} payload for callee service\n * @returns {Function} callback function for subscribed services\n */\n\nexport const notify = async function () {};\n/**\n * Notify the registered services of the click information\n * gathered by the global click listener.\n *\n * @param  {Object} clickInfo - information gathered by the global click listener.\n */\n\nexport function notify2(clickInfo) {\n  for (let service of _services) {\n    service.instance.notify(clickInfo);\n  }\n}\n/**\n * Highlight widget as per widget context\n * TODO: (mm) move or delete this function, doesn't belong here.\n * @param {String} widgetType - can be tab, tile or command\n * @param {String} widgetId - 123\n * @param {String} selector params like target tab, command selector\n */\n\nexport const highlightWidget = async (widgetType, widgetId, selector) => {\n  if (widgetType.toLowerCase() === 'tab') {\n    tabRegistryService.highlightTab(widgetId, selector);\n  } else {\n    commandHighlightService.highlightCommand(widgetId, selector);\n  }\n};\nconst exports = {\n  registerService,\n  unregisterService,\n  notify,\n  highlightWidget,\n  initClickListener\n};\nexport default exports;","map":{"version":3,"names":["tabRegistryService","commandHighlightService","appCtxService","localStorage","htmlUtils","_services","getElement","xpath","contextNode","getElementByXpath","getCommandBarInfo","cmdBarXpath","cmdBar","cmdBarAnchor","getAttribute","popupCmdBarXpath","popupCmdBar","overflowButtonXpath","overflowButton","document","cmdBar2","cmdBarAnchor2","cmdBarXpath2","grpCmdBarAnchor","undefined","grpCmdId","cmdBarsXpath","cmdBars","cmd","cmdBar3","cmdBarAnchor3","grpCmdXpath","grpCmd","grpCmdAnchorElem","grpCmdAnchor","getPropertyInfo","propXpath","propNameElement","propName","getInnerHTML","getSectionInfo","sectionXpath","section","sectionTitleKey","sectionTitleKeyXpath","getSwaTabInfo","swaTabsXpath","swaTab","swaTabKey","swaTabKeyXpath","getPwaTabInfo","pwaTabsXpath","pwaTab","pwaTabName","pwaTabNameXpath","getViewInfo","viewXpath","view","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","index","node","iterateNext","elem","getSelectedTypeInfo","ctx","selected","type","getSelectionModeInfo","mselected","length","getUserContextInfo","user","role","group","workspace","userSession","props","dbValues","workspaceId","getCommandInfo","localContextNode","cmdId","cmdBarInfo","propInfo","sectionInfo","swaTabInfo","pwaTabInfo","userContextInfo","commandId","commandBarAnchor","pwaTabKey","selectedType","selectionMode","getTabInfo","tabKey","overflowXpath","overflowButtonElem","hiddenTabXpath","hiddenTabElem","tabName","swaXpath","swaElem","pwaXpath","pwaElem","getTileInfo","tileName","tempFn","key","info","infos","get","JSON","parse","found","element","splice","unshift","pop","push","publish","stringify","initClickListener","addEventListener","event","commandElement","target","cmdInfo","notify2","tabElement","tabInfo","tileXpath","tileElement","tileInfo","registerService","serviceName","service","name","instance","unregisterService","filter","value","notify","clickInfo","highlightWidget","widgetType","widgetId","selector","toLowerCase","highlightTab","highlightCommand","exports"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/centralAggregationService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n/**\n * Defines {@link centralAggregationService} .\n * @module js/centralAggregationService\n */\nimport tabRegistryService from 'js/tabRegistry.service';\nimport commandHighlightService from 'js/commandHighlightService';\nimport appCtxService from 'js/appCtxService';\nimport localStorage from 'js/localStorage';\nimport htmlUtils from 'js/htmlUtils';\n\nlet _services = [];\n\n/**\n *\n * @param {String} xpath xpath to evaluate.\n * @param {DOMElement} contextNode element to evaluate upon.\n * @returns {DOMElement} null or the found html element.\n */\nexport function getElement( xpath, contextNode ) {\n    return htmlUtils.getElementByXpath( xpath, contextNode );\n}\n\n/**\n * Helper function to get the command bar + anchor of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} command bar information. commandBarAnchor, the xpath to\n * the command bar, and the updated context node.\n */\nconst getCommandBarInfo = ( contextNode, xpath ) => {\n    const cmdBarXpath = './ancestor::*[contains(@class, \\'aw-command-bar\\')]';\n    const cmdBar = htmlUtils.getElementByXpath( cmdBarXpath, contextNode );\n    if( cmdBar ) {\n        const cmdBarAnchor = cmdBar.getAttribute( 'anchor' );\n        const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor + '\\']';\n        return {\n            cmdBarAnchor: cmdBarAnchor,\n            xpath: cmdBarXpath,\n            contextNode: contextNode\n        };\n    }\n\n    let cmdBarAnchor = '';\n    const popupCmdBarXpath = './ancestor::*[contains(@class, \\'aw-popup-command-bar\\')]';\n    const popupCmdBar = htmlUtils.getElementByXpath( popupCmdBarXpath, contextNode );\n    if( popupCmdBar ) {\n        cmdBarAnchor = popupCmdBar.getAttribute( 'anchor' );\n    }\n\n    /**\n     * if there is no command bar from the clicked command, it is an overflow or group command\n     * check the command bar that the overflow command or group command is a part of\n     *      1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n     *          a. singular command bar\n     *          b. multiple command bars\n     *      2. if it is a group command, find the group command id and anchor\n     */\n    const overflowButtonXpath = '//*[contains(@class,\\'aw-commands-moreButton\\')]//*[contains(@class, \\'aw-state-selected\\')]';\n    const overflowButton = htmlUtils.getElementByXpath( overflowButtonXpath, document );\n    if( overflowButton ) {\n        // 1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n        const cmdBar2 = htmlUtils.getElementByXpath( cmdBarXpath, overflowButton );\n        if( cmdBar2 ) {\n            const cmdBarAnchor2 = cmdBar2.getAttribute( 'anchor' );\n            const cmdBarXpath2 = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor2 + '\\']';\n            return {\n                cmdBarAnchor: cmdBarAnchor2,\n                grpCmdBarAnchor: undefined,\n                grpCmdId: undefined,\n                xpath: cmdBarXpath2,\n                contextNode: htmlUtils.getElementByXpath( cmdBarXpath + xpath, overflowButton )\n            };\n        }\n\n        // singular command bar is not found, searching multiple command bars\n        const cmdBarsXpath = './ancestor::*[contains(@class, \\'aw-commandBars\\')]';\n        const cmdBars = htmlUtils.getElementByXpath( cmdBarsXpath, overflowButton );\n        if( cmdBars ) {\n            const cmd = htmlUtils.getElementByXpath( xpath, cmdBars );\n            if( cmd ) {\n                const cmdBar3 = htmlUtils.getElementByXpath( cmdBarXpath, cmd );\n                if( cmdBar3 ) {\n                    const cmdBarAnchor3 = cmdBar3.getAttribute( 'anchor' );\n                    const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor3 + '\\']';\n                    return {\n                        cmdBarAnchor: cmdBarAnchor3,\n                        grpCmdBarAnchor: undefined,\n                        grpCmdId: undefined,\n                        xpath: cmdBarXpath,\n                        contextNode: cmd\n                    };\n                }\n            }\n        }\n    } else {\n        const grpCmdXpath = '//*[contains(@class, \\'aw-state-selected\\') and @data-command-id]//*[contains(@class, \\'aw-widgets-groupCommand\\')]/ancestor::*[@data-command-id]';\n        const grpCmd = htmlUtils.getElementByXpath( grpCmdXpath, document );\n        // 2. if it is a group command, find the group command id and anchor\n        if( grpCmd ) {\n            const grpCmdId = grpCmd.getAttribute( 'data-command-id' );\n            const grpCmdAnchorElem = htmlUtils.getElementByXpath( cmdBarXpath, grpCmd );\n            let grpCmdAnchor = grpCmdAnchorElem ? grpCmdAnchorElem.getAttribute( 'anchor' ) : undefined;\n            return {\n                cmdBarAnchor: cmdBarAnchor,\n                grpCmdBarAnchor: grpCmdAnchor,\n                grpCmdId: grpCmdId,\n                xpath: '',\n                contextNode: grpCmd\n            };\n        }\n    }\n    return {\n        cmdBarAnchor: cmdBarAnchor,\n        grpCmdBarAnchor: undefined,\n        grpCmdId: undefined,\n        xpath: '',\n        contextNode: contextNode\n    };\n};\n\n/**\n * Helper function to get the containing property of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} property information. Property name and its xpath.\n */\nconst getPropertyInfo = ( contextNode ) => {\n    const propXpath = './ancestor::*[contains(@class, \\'sw-property\\')]//*[contains(@class, \\'sw-property-name\\')]';\n    const propNameElement = htmlUtils.getElementByXpath( propXpath, contextNode );\n    if( propNameElement ) {\n        const propName = propNameElement.getInnerHTML();\n        return {\n            propName: propName,\n            xpath: '//*[contains(@class, \\'sw-property-name\\') and text()=\\'' + propName + '\\']/ancestor::*[contains(@class, \\'sw-property\\')]'\n        };\n    }\n    return {\n        propName: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing section of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} section information. Section titleKey and its xpath.\n */\nconst getSectionInfo = ( contextNode ) => {\n    const sectionXpath = './ancestor::*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\')]';\n    const section = htmlUtils.getElementByXpath( sectionXpath, contextNode );\n    if( section ) {\n        const sectionTitleKey = section.getAttribute( 'titlekey' );\n        const sectionTitleKeyXpath = '//*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\') and @titlekey=\\'' + sectionTitleKey + '\\']';\n        return {\n            sectionTitleKey: sectionTitleKey,\n            xpath: sectionTitleKeyXpath\n        };\n    }\n    return {\n        sectionTitleKey: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing secondary workarea tab of contextNode\n * using xpath to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} secondary workarea tab information. Secondary workarea tab key\n * and its xpath.\n */\nconst getSwaTabInfo = ( contextNode ) => {\n    const swaTabsXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n    const swaTab = htmlUtils.getElementByXpath( swaTabsXpath, contextNode );\n    if( swaTab ) {\n        const swaTabKey = swaTab.getAttribute( 'tabkey' );\n        const swaTabKeyXpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\''\n         + swaTabKey + '\\']/ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n        return {\n            swaTabKey: swaTabKey,\n            xpath: swaTabKeyXpath\n        };\n    }\n    return {\n        swaTabKey: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing primary workarea tab of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} primary workarea information. Primary workarea tab key and its xpath.\n */\nconst getPwaTabInfo = ( contextNode ) => {\n    const pwaTabsXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]//*[contains(@class, \\'aw-layout-subLocationTitles\\')]'\n     + '//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n    const pwaTab = htmlUtils.getElementByXpath( pwaTabsXpath, contextNode );\n    if( pwaTab ) {\n        const pwaTabName = pwaTab.getAttribute( 'tabkey' );\n        const pwaTabNameXpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\''\n         + pwaTabName + '\\']/ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n        return {\n            pwaTabName: pwaTabName,\n            xpath: pwaTabNameXpath\n        };\n    }\n    return {\n        pwaTabName: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing view of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} view information. xpath to the containing view.\n */\nconst getViewInfo = ( contextNode, xpath ) => {\n    const viewXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n    const view = htmlUtils.getElementByXpath( viewXpath, contextNode );\n    if( view ) {\n        const result = document.evaluate( '//*[contains(@class, \\'sw-showobject-page\\')]', document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null );\n        let index = 1;\n        //multiple work areas\n        let node = result.iterateNext();\n        while( node ) {\n            const elem = htmlUtils.getElementByXpath( '(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']' + xpath, document );\n            if( elem === contextNode ) {\n                break;\n            } else {\n                index += 1;\n            }\n            node = result.iterateNext();\n        }\n        return '(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']';\n    }\n    return '';\n};\n\n/**\n * Helper function to get the currently selected type.\n *\n * @returns {String} the selected type.\n */\nconst getSelectedTypeInfo = () => {\n    return appCtxService.ctx.selected && appCtxService.ctx.selected !== null && appCtxService.ctx.selected.type ? appCtxService.ctx.selected.type : '';\n};\n\n/**\n * Helper function to get the current selection mode.\n *\n * @returns {String} the selection mode.\n */\nconst getSelectionModeInfo = () => {\n    const mselected = appCtxService.ctx.mselected;\n    if( mselected && mselected !== null && mselected.length >= 1 ) {\n        for( let index = 1; index < mselected.length; index++ ) {\n            if( mselected[ index ].type !== mselected[ index - 1 ].type ) {\n                return 'MULTIPLE';\n            }\n        }\n        return mselected.length > 1 ? 'MULTIPLE' : 'SINGLE';\n    }\n    return 'SINGLE';\n};\n\n/**\n * Helper function to get the current user context information (user/role/group/workspace).\n *\n * @returns {Object} user context information. User uid, role uid, group uid, and workspace id.\n */\nconst getUserContextInfo = () => {\n    let user = '';\n    let role = '';\n    let group = '';\n    let workspace = '';\n    if( appCtxService.ctx && appCtxService.ctx.userSession && appCtxService.ctx.userSession.props ) {\n        user = appCtxService.ctx.userSession.props.user.dbValues[ 0 ];\n        role = appCtxService.ctx.userSession.props.role.dbValues[ 0 ];\n        group = appCtxService.ctx.userSession.props.group.dbValues[ 0 ];\n        if( appCtxService.ctx.workspace ) {\n            workspace = appCtxService.ctx.workspace.workspaceId;\n        }\n    }\n    return {\n        user: user,\n        role: role,\n        group: group,\n        workspace: workspace\n    };\n};\n\n/**\n * Helper function to get command information from contextNode.\n *\n * @param {HTMLElement} contextNode - button element that contains command id attribute\n * @returns {Object} command information. Command id, command bar anchor, property name,\n * section titlekey, secondary workarea tab, primary workarea tab, view xpath, user,\n * role, group, workspace, selected type, and selection mode.\n */\nconst getCommandInfo = ( contextNode ) => {\n    let localContextNode = contextNode;\n    const cmdId = contextNode.getAttribute( 'data-command-id' );\n    let xpath = '//*[@data-command-id=\\'' + cmdId + '\\']';\n\n    const cmdBarInfo = getCommandBarInfo( localContextNode, xpath );\n    xpath = cmdBarInfo.grpCmdId ? '//*[@data-command-id=\\'' + cmdBarInfo.grpCmdId + '\\']' : cmdBarInfo.xpath + xpath;\n    localContextNode = cmdBarInfo.contextNode;\n    const propInfo = getPropertyInfo( localContextNode );\n    xpath = propInfo.xpath + xpath;\n    const sectionInfo = getSectionInfo( localContextNode );\n    xpath = sectionInfo.xpath + xpath;\n    const swaTabInfo = getSwaTabInfo( localContextNode );\n    xpath = swaTabInfo.xpath + xpath;\n    const pwaTabInfo = getPwaTabInfo( localContextNode );\n    xpath = pwaTabInfo.xpath + xpath;\n    xpath = getViewInfo( localContextNode, xpath ) + xpath;\n    const userContextInfo = getUserContextInfo();\n\n    return {\n        xpath: xpath,\n        commandId: cmdId,\n        commandBarAnchor: cmdBarInfo.cmdBarAnchor,\n        grpCmdId: cmdBarInfo.grpCmdId,\n        grpCmdAnchor: cmdBarInfo.grpCmdBarAnchor,\n        propName: propInfo.propName,\n        sectionTitleKey: sectionInfo.sectionTitleKey,\n        swaTab: swaTabInfo.swaTabKey,\n        pwaTab: pwaTabInfo.pwaTabKey,\n        selectedType: getSelectedTypeInfo(),\n        selectionMode: getSelectionModeInfo(),\n        user: userContextInfo.user,\n        role: userContextInfo.role,\n        group: userContextInfo.group,\n        workspace: userContextInfo.workspace\n    };\n};\n\n/**\n *\n * @param {HTMLElement} contextNode - anchor element that contains tab key attribute\n * @returns {Object} tab information\n */\nconst getTabInfo = ( contextNode ) => {\n    let localContextNode = contextNode;\n    const tabKey = localContextNode.getAttribute( 'tabkey' );\n    // determine if we are in overflow\n    const overflowXpath = '//*[contains(@class, \\'sw-tab-overflowContainer\\')]//*[contains(@class, \\'sw-tab-overflowButton\\') and contains(@class, \\'aw-jswidget-controlArrowRotateRight\\')]';\n    const overflowButtonElem = htmlUtils.getElementByXpath( overflowXpath, document );\n    if( overflowButtonElem ) {\n        // in overflow, get the hidden tab\n        const hiddenTabXpath = './ancestor::*[contains(@class, \\'sw-tab-overflowContainer\\')]/ancestor::*//*[@role=\\'tablist\\' and contains(@class, \\'sw-tabContainer\\')]//*[@role=\\'tab\\']//*[@tabkey=\\''\n         + tabKey + '\\']';\n        const hiddenTabElem = htmlUtils.getElementByXpath( hiddenTabXpath, overflowButtonElem );\n        if( hiddenTabElem ) {\n            localContextNode = hiddenTabElem;\n        }\n    }\n    const tabName = localContextNode.getAttribute( 'aria-label' );\n    let xpath = '//*[@tabkey=\\'' + tabKey + '\\']';\n    const swaXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n    const swaElem = htmlUtils.getElementByXpath( swaXpath, localContextNode );\n\n    if( swaElem ) {\n        // clicked on swa tab\n        xpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]' + xpath;\n        const pwaTabInfo = getPwaTabInfo( localContextNode );\n        xpath = pwaTabInfo.xpath + xpath;\n        xpath = getViewInfo( localContextNode, xpath ) + xpath;\n    } else {\n        const pwaXpath = './ancestor::*[contains(@class, \\'sw-tabContainer\\')]/ancestor::*[contains(@class, \\'aw-layout-subLocationTitles\\')]';\n        const pwaElem = htmlUtils.getElementByXpath( pwaXpath, localContextNode );\n        if( pwaElem ) {\n            xpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]' + xpath;\n            xpath = getViewInfo( localContextNode, xpath ) + xpath;\n        }\n    }\n    const userContextInfo = getUserContextInfo();\n\n    return {\n        xpath: xpath,\n        tabName: tabName,\n        selectedType: getSelectedTypeInfo(),\n        selectionMode: getSelectionModeInfo(),\n        user: userContextInfo.user,\n        role: userContextInfo.role,\n        group: userContextInfo.group,\n        workspace: userContextInfo.workspace\n    };\n};\n\n/**\n *\n * @param {HTMLElement} contextNode - aw-tile element\n * @returns {Object} tile information\n */\nconst getTileInfo = ( contextNode ) => {\n    const tileName = contextNode.getAttribute( 'title' );\n    const userContextInfo = getUserContextInfo();\n    return {\n        xpath: '//*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\' and @title=\\'' + tileName + '\\']',\n        tileName: tileName,\n        selectedType: getSelectedTypeInfo(),\n        selectionMode: getSelectionModeInfo(),\n        user: userContextInfo.user,\n        role: userContextInfo.role,\n        group: userContextInfo.group,\n        workspace: userContextInfo.workspace\n    };\n};\n\n// TODO: (mm) decide if this function is needed. This function is just pushing to localStorage.\nconst tempFn = ( key, info ) => {\n    let infos = [];\n    const result = localStorage.get( key );\n    if( result ) {\n        infos = JSON.parse( result );\n        let found = false;\n        let index = 0;\n        for( let element of infos ) {\n            if( element.xpath === info.xpath && element.selectedType === info.selectedType && element.user === info.user\n                && element.group === info.group && element.role === info.role && element.workspace === info.workspace ) {\n                found = true;\n                break;\n            }\n            index += 1;\n        }\n        if( found ) {\n            // move to front\n            const elem = infos[index];\n            infos.splice( index, 1 );\n            infos.unshift( elem );\n        } else {\n            if( infos.length === 5 ) {\n                infos.pop();\n            }\n            infos.push( info );\n        }\n    } else {\n        infos.push( info );\n    }\n    localStorage.publish( key, JSON.stringify( infos ) );\n};\n\n/**\n * Global click listener on the \"bubble down\" so this code is invoked first.\n * Collect information from the DOM for commands/tabs/tiles and notify all services.\n */\nexport function initClickListener() {\n    document.addEventListener( 'click', function( event ) {\n        const commandElement = htmlUtils.getElementByXpath( './ancestor-or-self::*[@data-command-id]', event.target );\n        if( commandElement ) {\n            const cmdInfo = getCommandInfo( commandElement );\n            tempFn( 'commandInformation', cmdInfo );\n            notify2( cmdInfo );\n            return;\n        }\n\n        const tabElement = htmlUtils.getElementByXpath( './ancestor-or-self::*[@tabkey]', event.target );\n        if( tabElement ) {\n            const tabInfo = getTabInfo( tabElement );\n            tempFn( 'tabInformation', tabInfo );\n            notify2( tabInfo );\n            return;\n        }\n\n        const tileXpath = './ancestor-or-self::*[not(@data-locator=\\'tile-resizeButton\\')]/ancestor::*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\']';\n        const tileElement = htmlUtils.getElementByXpath( tileXpath, event.target );\n        if( tileElement ) {\n            const tileInfo = getTileInfo( tileElement );\n            tempFn( 'tileInformation', tileInfo );\n            notify2( tileInfo );\n        }\n    }, true );\n}\n\n/**\n * Register a service\n *\n * @param {String} serviceName name of service to register\n * @param {Object} service instance to register\n */\nexport function registerService( serviceName, service ) {\n    _services.push( { name: serviceName, instance: service } );\n}\n\n/**\n * Remove service registration\n *\n * @param {String} serviceName service name to un-register\n */\nexport function unregisterService( serviceName ) {\n    _services = _services.filter( function( value ) {\n        return value.name !== serviceName;\n    } );\n}\n\n/**\n * capture current user gesture and publish-\n * TODO: (mm) delete this function and it's references\n * then re-name notify2 to notify\n * @param  {...currentContext} payload for callee service\n * @returns {Function} callback function for subscribed services\n */\nexport const notify = async( ...currentContext ) => {};\n\n/**\n * Notify the registered services of the click information\n * gathered by the global click listener.\n *\n * @param  {Object} clickInfo - information gathered by the global click listener.\n */\nexport function notify2( clickInfo ) {\n    for( let service of _services ) {\n        service.instance.notify( clickInfo );\n    }\n}\n\n/**\n * Highlight widget as per widget context\n * TODO: (mm) move or delete this function, doesn't belong here.\n * @param {String} widgetType - can be tab, tile or command\n * @param {String} widgetId - 123\n * @param {String} selector params like target tab, command selector\n */\nexport const highlightWidget = async( widgetType, widgetId, selector ) => {\n    if( widgetType.toLowerCase() === 'tab' ) {\n        tabRegistryService.highlightTab( widgetId, selector );\n    } else {\n        commandHighlightService.highlightCommand( widgetId, selector );\n    }\n};\nconst exports = {\n    registerService,\n    unregisterService,\n    notify,\n    highlightWidget,\n    initClickListener\n};\nexport default exports;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
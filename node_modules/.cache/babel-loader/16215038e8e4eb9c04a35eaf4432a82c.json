{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * Defines {@link centralAggregationService} .\n * @module js/centralAggregationService\n */\nimport tabRegistryService from 'js/tabRegistry.service';\nimport commandHighlightService from 'js/commandHighlightService';\nimport appCtxService from 'js/appCtxService';\nimport localStorage from 'js/localStorage';\nimport htmlUtils from 'js/htmlUtils';\nlet _services = [];\n/**\n *\n * @param {String} xpath xpath to evaluate.\n * @param {DOMElement} contextNode element to evaluate upon.\n * @returns {DOMElement} null or the found html element.\n */\n\nexport function getElement(xpath, contextNode) {\n  return htmlUtils.getElementByXpath(xpath, contextNode);\n}\n/**\n * Helper function to get the command bar + anchor of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} command bar information. commandBarAnchor, the xpath to\n * the command bar, and the updated context node.\n */\n\nconst getCommandBarInfo = (contextNode, xpath) => {\n  const cmdBarXpath = './ancestor::*[contains(@class, \\'aw-command-bar\\')]';\n  const cmdBar = htmlUtils.getElementByXpath(cmdBarXpath, contextNode);\n\n  if (cmdBar) {\n    const cmdBarAnchor = cmdBar.getAttribute('anchor');\n    const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor + '\\']';\n    return {\n      cmdBarAnchor: cmdBarAnchor,\n      xpath: cmdBarXpath,\n      contextNode: contextNode\n    };\n  }\n\n  let cmdBarAnchor = '';\n  const popupCmdBarXpath = './ancestor::*[contains(@class, \\'aw-popup-command-bar\\')]';\n  const popupCmdBar = htmlUtils.getElementByXpath(popupCmdBarXpath, contextNode);\n\n  if (popupCmdBar) {\n    cmdBarAnchor = popupCmdBar.getAttribute('anchor');\n  }\n  /**\n   * if there is no command bar from the clicked command, it is an overflow or group command\n   * check the command bar that the overflow command or group command is a part of\n   *      1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n   *          a. singular command bar\n   *          b. multiple command bars\n   *      2. if it is a group command, find the group command id and anchor\n   */\n\n\n  const overflowButtonXpath = '//*[contains(@class,\\'aw-commands-moreButton\\')]//*[contains(@class, \\'aw-state-selected\\')]';\n  const overflowButton = htmlUtils.getElementByXpath(overflowButtonXpath, document);\n\n  if (overflowButton) {\n    // 1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n    const cmdBar2 = htmlUtils.getElementByXpath(cmdBarXpath, overflowButton);\n\n    if (cmdBar2) {\n      const cmdBarAnchor2 = cmdBar2.getAttribute('anchor');\n      const cmdBarXpath2 = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor2 + '\\']';\n      return {\n        cmdBarAnchor: cmdBarAnchor2,\n        grpCmdBarAnchor: undefined,\n        grpCmdId: undefined,\n        xpath: cmdBarXpath2,\n        contextNode: htmlUtils.getElementByXpath(cmdBarXpath + xpath, overflowButton)\n      };\n    } // singular command bar is not found, searching multiple command bars\n\n\n    const cmdBarsXpath = './ancestor::*[contains(@class, \\'aw-commandBars\\')]';\n    const cmdBars = htmlUtils.getElementByXpath(cmdBarsXpath, overflowButton);\n\n    if (cmdBars) {\n      const cmd = htmlUtils.getElementByXpath(xpath, cmdBars);\n\n      if (cmd) {\n        const cmdBar3 = htmlUtils.getElementByXpath(cmdBarXpath, cmd);\n\n        if (cmdBar3) {\n          const cmdBarAnchor3 = cmdBar3.getAttribute('anchor');\n          const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor3 + '\\']';\n          return {\n            cmdBarAnchor: cmdBarAnchor3,\n            grpCmdBarAnchor: undefined,\n            grpCmdId: undefined,\n            xpath: cmdBarXpath,\n            contextNode: cmd\n          };\n        }\n      }\n    }\n  } else {\n    const grpCmdXpath = '//*[contains(@class, \\'aw-state-selected\\') and @data-command-id]//*[contains(@class, \\'aw-widgets-groupCommand\\')]/ancestor::*[@data-command-id]';\n    const grpCmd = htmlUtils.getElementByXpath(grpCmdXpath, document); // 2. if it is a group command, find the group command id and anchor\n\n    if (grpCmd) {\n      const grpCmdId = grpCmd.getAttribute('data-command-id');\n      const grpCmdAnchorElem = htmlUtils.getElementByXpath(cmdBarXpath, grpCmd);\n      let grpCmdAnchor = grpCmdAnchorElem ? grpCmdAnchorElem.getAttribute('anchor') : undefined;\n      return {\n        cmdBarAnchor: cmdBarAnchor,\n        grpCmdBarAnchor: grpCmdAnchor,\n        grpCmdId: grpCmdId,\n        xpath: '',\n        contextNode: grpCmd\n      };\n    }\n  }\n\n  return {\n    cmdBarAnchor: cmdBarAnchor,\n    grpCmdBarAnchor: undefined,\n    grpCmdId: undefined,\n    xpath: '',\n    contextNode: contextNode\n  };\n};\n/**\n * Helper function to get the containing property of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} property information. Property name and its xpath.\n */\n\n\nconst getPropertyInfo = contextNode => {\n  const propXpath = './ancestor::*[contains(@class, \\'sw-property\\')]//*[contains(@class, \\'sw-property-name\\')]';\n  const propNameElement = htmlUtils.getElementByXpath(propXpath, contextNode);\n\n  if (propNameElement) {\n    const propName = propNameElement.getInnerHTML();\n    return {\n      propName: propName,\n      xpath: '//*[contains(@class, \\'sw-property-name\\') and text()=\\'' + propName + '\\']/ancestor::*[contains(@class, \\'sw-property\\')]'\n    };\n  }\n\n  return {\n    propName: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing section of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} section information. Section titleKey and its xpath.\n */\n\n\nconst getSectionInfo = contextNode => {\n  const sectionXpath = './ancestor::*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\')]';\n  const section = htmlUtils.getElementByXpath(sectionXpath, contextNode);\n\n  if (section) {\n    const sectionTitleKey = section.getAttribute('titlekey');\n    const sectionTitleKeyXpath = '//*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\') and @titlekey=\\'' + sectionTitleKey + '\\']';\n    return {\n      sectionTitleKey: sectionTitleKey,\n      xpath: sectionTitleKeyXpath\n    };\n  }\n\n  return {\n    sectionTitleKey: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing secondary workarea tab of contextNode\n * using xpath to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} secondary workarea tab information. Secondary workarea tab key\n * and its xpath.\n */\n\n\nconst getSwaTabInfo = contextNode => {\n  const swaTabsXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n  const swaTab = htmlUtils.getElementByXpath(swaTabsXpath, contextNode);\n\n  if (swaTab) {\n    const swaTabKey = swaTab.getAttribute('tabkey');\n    const swaTabKeyXpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\'' + swaTabKey + '\\']/ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n    return {\n      swaTabKey: swaTabKey,\n      xpath: swaTabKeyXpath\n    };\n  }\n\n  return {\n    swaTabKey: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing primary workarea tab of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} primary workarea information. Primary workarea tab key and its xpath.\n */\n\n\nconst getPwaTabInfo = contextNode => {\n  const pwaTabsXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]//*[contains(@class, \\'aw-layout-subLocationTitles\\')]' + '//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n  const pwaTab = htmlUtils.getElementByXpath(pwaTabsXpath, contextNode);\n\n  if (pwaTab) {\n    const pwaTabName = pwaTab.getAttribute('tabkey');\n    const pwaTabNameXpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\'' + pwaTabName + '\\']/ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n    return {\n      pwaTabName: pwaTabName,\n      xpath: pwaTabNameXpath\n    };\n  }\n\n  return {\n    pwaTabName: undefined,\n    xpath: ''\n  };\n};\n/**\n * Helper function to get the containing view of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} view information. xpath to the containing view.\n */\n\n\nconst getViewInfo = (contextNode, xpath) => {\n  const viewXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n  const view = htmlUtils.getElementByXpath(viewXpath, contextNode);\n\n  if (view) {\n    const result = document.evaluate('//*[contains(@class, \\'sw-showobject-page\\')]', document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\n    let index = 1; //multiple work areas\n\n    let node = result.iterateNext();\n\n    while (node) {\n      const elem = htmlUtils.getElementByXpath('(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']' + xpath, document);\n\n      if (elem === contextNode) {\n        break;\n      } else {\n        index += 1;\n      }\n\n      node = result.iterateNext();\n    }\n\n    return '(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']';\n  }\n\n  return '';\n};\n/**\n * Helper function to get the currently selected type.\n *\n * @returns {String} the selected type.\n */\n\n\nconst getSelectedTypeInfo = () => {\n  return appCtxService.ctx.selected && appCtxService.ctx.selected !== null && appCtxService.ctx.selected.type ? appCtxService.ctx.selected.type : '';\n};\n/**\n * Helper function to get the current selection mode.\n *\n * @returns {String} the selection mode.\n */\n\n\nconst getSelectionModeInfo = () => {\n  const mselected = appCtxService.ctx.mselected;\n\n  if (mselected && mselected !== null && mselected.length >= 1) {\n    for (let index = 1; index < mselected.length; index++) {\n      if (mselected[index].type !== mselected[index - 1].type) {\n        return 'MULTIPLE';\n      }\n    }\n\n    return mselected.length > 1 ? 'MULTIPLE' : 'SINGLE';\n  }\n\n  return 'SINGLE';\n};\n/**\n * Helper function to get the current user context information (user/role/group/workspace).\n *\n * @returns {Object} user context information. User uid, role uid, group uid, and workspace id.\n */\n\n\nconst getUserContextInfo = () => {\n  let user = '';\n  let role = '';\n  let group = '';\n  let workspace = '';\n\n  if (appCtxService.ctx && appCtxService.ctx.userSession && appCtxService.ctx.userSession.props) {\n    user = appCtxService.ctx.userSession.props.user.dbValues[0];\n    role = appCtxService.ctx.userSession.props.role.dbValues[0];\n    group = appCtxService.ctx.userSession.props.group.dbValues[0];\n\n    if (appCtxService.ctx.workspace) {\n      workspace = appCtxService.ctx.workspace.workspaceId;\n    }\n  }\n\n  return {\n    user: user,\n    role: role,\n    group: group,\n    workspace: workspace\n  };\n};\n/**\n * Helper function to get command information from contextNode.\n *\n * @param {HTMLElement} contextNode - button element that contains command id attribute\n * @returns {Object} command information. Command id, command bar anchor, property name,\n * section titlekey, secondary workarea tab, primary workarea tab, view xpath, user,\n * role, group, workspace, selected type, and selection mode.\n */\n\n\nconst getCommandInfo = contextNode => {\n  let localContextNode = contextNode;\n  const cmdId = contextNode.getAttribute('data-command-id');\n  let xpath = '//*[@data-command-id=\\'' + cmdId + '\\']';\n  const cmdBarInfo = getCommandBarInfo(localContextNode, xpath);\n  xpath = cmdBarInfo.grpCmdId ? '//*[@data-command-id=\\'' + cmdBarInfo.grpCmdId + '\\']' : cmdBarInfo.xpath + xpath;\n  localContextNode = cmdBarInfo.contextNode;\n  const propInfo = getPropertyInfo(localContextNode);\n  xpath = propInfo.xpath + xpath;\n  const sectionInfo = getSectionInfo(localContextNode);\n  xpath = sectionInfo.xpath + xpath;\n  const swaTabInfo = getSwaTabInfo(localContextNode);\n  xpath = swaTabInfo.xpath + xpath;\n  const pwaTabInfo = getPwaTabInfo(localContextNode);\n  xpath = pwaTabInfo.xpath + xpath;\n  xpath = getViewInfo(localContextNode, xpath) + xpath;\n  const userContextInfo = getUserContextInfo();\n  return {\n    xpath: xpath,\n    commandId: cmdId,\n    commandBarAnchor: cmdBarInfo.cmdBarAnchor,\n    grpCmdId: cmdBarInfo.grpCmdId,\n    grpCmdAnchor: cmdBarInfo.grpCmdBarAnchor,\n    propName: propInfo.propName,\n    sectionTitleKey: sectionInfo.sectionTitleKey,\n    swaTab: swaTabInfo.swaTabKey,\n    pwaTab: pwaTabInfo.pwaTabKey,\n    selectedType: getSelectedTypeInfo(),\n    selectionMode: getSelectionModeInfo(),\n    user: userContextInfo.user,\n    role: userContextInfo.role,\n    group: userContextInfo.group,\n    workspace: userContextInfo.workspace\n  };\n};\n/**\n *\n * @param {HTMLElement} contextNode - anchor element that contains tab key attribute\n * @returns {Object} tab information\n */\n\n\nconst getTabInfo = contextNode => {\n  let localContextNode = contextNode;\n  const tabKey = localContextNode.getAttribute('tabkey'); // determine if we are in overflow\n\n  const overflowXpath = '//*[contains(@class, \\'sw-tab-overflowContainer\\')]//*[contains(@class, \\'sw-tab-overflowButton\\') and contains(@class, \\'aw-jswidget-controlArrowRotateRight\\')]';\n  const overflowButtonElem = htmlUtils.getElementByXpath(overflowXpath, document);\n\n  if (overflowButtonElem) {\n    // in overflow, get the hidden tab\n    const hiddenTabXpath = './ancestor::*[contains(@class, \\'sw-tab-overflowContainer\\')]/ancestor::*//*[@role=\\'tablist\\' and contains(@class, \\'sw-tabContainer\\')]//*[@role=\\'tab\\']//*[@tabkey=\\'' + tabKey + '\\']';\n    const hiddenTabElem = htmlUtils.getElementByXpath(hiddenTabXpath, overflowButtonElem);\n\n    if (hiddenTabElem) {\n      localContextNode = hiddenTabElem;\n    }\n  }\n\n  const tabName = localContextNode.getAttribute('aria-label');\n  let xpath = '//*[@tabkey=\\'' + tabKey + '\\']';\n  const swaXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n  const swaElem = htmlUtils.getElementByXpath(swaXpath, localContextNode);\n\n  if (swaElem) {\n    // clicked on swa tab\n    xpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]' + xpath;\n    const pwaTabInfo = getPwaTabInfo(localContextNode);\n    xpath = pwaTabInfo.xpath + xpath;\n    xpath = getViewInfo(localContextNode, xpath) + xpath;\n  } else {\n    const pwaXpath = './ancestor::*[contains(@class, \\'sw-tabContainer\\')]/ancestor::*[contains(@class, \\'aw-layout-subLocationTitles\\')]';\n    const pwaElem = htmlUtils.getElementByXpath(pwaXpath, localContextNode);\n\n    if (pwaElem) {\n      xpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]' + xpath;\n      xpath = getViewInfo(localContextNode, xpath) + xpath;\n    }\n  }\n\n  const userContextInfo = getUserContextInfo();\n  return {\n    xpath: xpath,\n    tabName: tabName,\n    selectedType: getSelectedTypeInfo(),\n    selectionMode: getSelectionModeInfo(),\n    user: userContextInfo.user,\n    role: userContextInfo.role,\n    group: userContextInfo.group,\n    workspace: userContextInfo.workspace\n  };\n};\n/**\n *\n * @param {HTMLElement} contextNode - aw-tile element\n * @returns {Object} tile information\n */\n\n\nconst getTileInfo = contextNode => {\n  const tileName = contextNode.getAttribute('title');\n  const userContextInfo = getUserContextInfo();\n  return {\n    xpath: '//*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\' and @title=\\'' + tileName + '\\']',\n    tileName: tileName,\n    selectedType: getSelectedTypeInfo(),\n    selectionMode: getSelectionModeInfo(),\n    user: userContextInfo.user,\n    role: userContextInfo.role,\n    group: userContextInfo.group,\n    workspace: userContextInfo.workspace\n  };\n}; // TODO: (mm) decide if this function is needed. This function is just pushing to localStorage.\n\n\nconst tempFn = (key, info) => {\n  let infos = [];\n  const result = localStorage.get(key);\n\n  if (result) {\n    infos = JSON.parse(result);\n    let found = false;\n    let index = 0;\n\n    for (let element of infos) {\n      if (element.xpath === info.xpath && element.selectedType === info.selectedType && element.user === info.user && element.group === info.group && element.role === info.role && element.workspace === info.workspace) {\n        found = true;\n        break;\n      }\n\n      index += 1;\n    }\n\n    if (found) {\n      // move to front\n      const elem = infos[index];\n      infos.splice(index, 1);\n      infos.unshift(elem);\n    } else {\n      if (infos.length === 5) {\n        infos.pop();\n      }\n\n      infos.push(info);\n    }\n  } else {\n    infos.push(info);\n  }\n\n  localStorage.publish(key, JSON.stringify(infos));\n};\n/**\n * Global click listener on the \"bubble down\" so this code is invoked first.\n * Collect information from the DOM for commands/tabs/tiles and notify all services.\n */\n\n\nexport function initClickListener() {\n  document.addEventListener('click', function (event) {\n    const commandElement = htmlUtils.getElementByXpath('./ancestor-or-self::*[@data-command-id]', event.target);\n\n    if (commandElement) {\n      const cmdInfo = getCommandInfo(commandElement);\n      tempFn('commandInformation', cmdInfo);\n      notify2(cmdInfo);\n      return;\n    }\n\n    const tabElement = htmlUtils.getElementByXpath('./ancestor-or-self::*[@tabkey]', event.target);\n\n    if (tabElement) {\n      const tabInfo = getTabInfo(tabElement);\n      tempFn('tabInformation', tabInfo);\n      notify2(tabInfo);\n      return;\n    }\n\n    const tileXpath = './ancestor-or-self::*[not(@data-locator=\\'tile-resizeButton\\')]/ancestor::*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\']';\n    const tileElement = htmlUtils.getElementByXpath(tileXpath, event.target);\n\n    if (tileElement) {\n      const tileInfo = getTileInfo(tileElement);\n      tempFn('tileInformation', tileInfo);\n      notify2(tileInfo);\n    }\n  }, true);\n}\n/**\n * Register a service\n *\n * @param {String} serviceName name of service to register\n * @param {Object} service instance to register\n */\n\nexport function registerService(serviceName, service) {\n  _services.push({\n    name: serviceName,\n    instance: service\n  });\n}\n/**\n * Remove service registration\n *\n * @param {String} serviceName service name to un-register\n */\n\nexport function unregisterService(serviceName) {\n  _services = _services.filter(function (value) {\n    return value.name !== serviceName;\n  });\n}\n/**\n * capture current user gesture and publish-\n * TODO: (mm) delete this function and it's references\n * then re-name notify2 to notify\n * @param  {...currentContext} payload for callee service\n * @returns {Function} callback function for subscribed services\n */\n\nexport const notify = async function () {};\n/**\n * Notify the registered services of the click information\n * gathered by the global click listener.\n *\n * @param  {Object} clickInfo - information gathered by the global click listener.\n */\n\nexport function notify2(clickInfo) {\n  for (let service of _services) {\n    service.instance.notify(clickInfo);\n  }\n}\n/**\n * Highlight widget as per widget context\n * TODO: (mm) move or delete this function, doesn't belong here.\n * @param {String} widgetType - can be tab, tile or command\n * @param {String} widgetId - 123\n * @param {String} selector params like target tab, command selector\n */\n\nexport const highlightWidget = async (widgetType, widgetId, selector) => {\n  if (widgetType.toLowerCase() === 'tab') {\n    tabRegistryService.highlightTab(widgetId, selector);\n  } else {\n    commandHighlightService.highlightCommand(widgetId, selector);\n  }\n};\nconst exports = {\n  registerService,\n  unregisterService,\n  notify,\n  highlightWidget,\n  initClickListener\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/centralAggregationService.js"],"names":["_services","htmlUtils","getCommandBarInfo","cmdBarXpath","cmdBar","cmdBarAnchor","xpath","contextNode","popupCmdBarXpath","popupCmdBar","overflowButtonXpath","overflowButton","cmdBar2","cmdBarAnchor2","cmdBarXpath2","grpCmdBarAnchor","grpCmdId","cmdBarsXpath","cmdBars","cmd","cmdBar3","cmdBarAnchor3","grpCmdXpath","grpCmd","grpCmdAnchorElem","grpCmdAnchor","getPropertyInfo","propXpath","propNameElement","propName","getSectionInfo","sectionXpath","section","sectionTitleKey","sectionTitleKeyXpath","getSwaTabInfo","swaTabsXpath","swaTab","swaTabKey","swaTabKeyXpath","getPwaTabInfo","pwaTabsXpath","pwaTab","pwaTabName","pwaTabNameXpath","getViewInfo","viewXpath","view","result","document","XPathResult","index","node","elem","getSelectedTypeInfo","appCtxService","getSelectionModeInfo","mselected","getUserContextInfo","user","role","group","workspace","getCommandInfo","localContextNode","cmdId","cmdBarInfo","propInfo","sectionInfo","swaTabInfo","pwaTabInfo","userContextInfo","commandId","commandBarAnchor","selectedType","selectionMode","getTabInfo","tabKey","overflowXpath","overflowButtonElem","hiddenTabXpath","hiddenTabElem","tabName","swaXpath","swaElem","pwaXpath","pwaElem","getTileInfo","tileName","tempFn","infos","localStorage","JSON","found","element","info","commandElement","event","cmdInfo","notify2","tabElement","tabInfo","tileXpath","tileElement","tileInfo","name","instance","service","value","notify","highlightWidget","widgetType","tabRegistryService","commandHighlightService","exports","initClickListener"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n/**\n * Defines {@link centralAggregationService} .\n * @module js/centralAggregationService\n */\nimport tabRegistryService from 'js/tabRegistry.service';\nimport commandHighlightService from 'js/commandHighlightService';\nimport appCtxService from 'js/appCtxService';\nimport localStorage from 'js/localStorage';\nimport htmlUtils from 'js/htmlUtils';\n\nlet _services = [];\n\n/**\n *\n * @param {String} xpath xpath to evaluate.\n * @param {DOMElement} contextNode element to evaluate upon.\n * @returns {DOMElement} null or the found html element.\n */\nexport function getElement( xpath, contextNode ) {\n    return htmlUtils.getElementByXpath( xpath, contextNode );\n}\n\n/**\n * Helper function to get the command bar + anchor of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} command bar information. commandBarAnchor, the xpath to\n * the command bar, and the updated context node.\n */\nconst getCommandBarInfo = ( contextNode, xpath ) => {\n    const cmdBarXpath = './ancestor::*[contains(@class, \\'aw-command-bar\\')]';\n    const cmdBar = htmlUtils.getElementByXpath( cmdBarXpath, contextNode );\n    if( cmdBar ) {\n        const cmdBarAnchor = cmdBar.getAttribute( 'anchor' );\n        const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor + '\\']';\n        return {\n            cmdBarAnchor: cmdBarAnchor,\n            xpath: cmdBarXpath,\n            contextNode: contextNode\n        };\n    }\n\n    let cmdBarAnchor = '';\n    const popupCmdBarXpath = './ancestor::*[contains(@class, \\'aw-popup-command-bar\\')]';\n    const popupCmdBar = htmlUtils.getElementByXpath( popupCmdBarXpath, contextNode );\n    if( popupCmdBar ) {\n        cmdBarAnchor = popupCmdBar.getAttribute( 'anchor' );\n    }\n\n    /**\n     * if there is no command bar from the clicked command, it is an overflow or group command\n     * check the command bar that the overflow command or group command is a part of\n     *      1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n     *          a. singular command bar\n     *          b. multiple command bars\n     *      2. if it is a group command, find the group command id and anchor\n     */\n    const overflowButtonXpath = '//*[contains(@class,\\'aw-commands-moreButton\\')]//*[contains(@class, \\'aw-state-selected\\')]';\n    const overflowButton = htmlUtils.getElementByXpath( overflowButtonXpath, document );\n    if( overflowButton ) {\n        // 1. if it is an overflow command, find the actual hidden command in the DOM with it's anchor\n        const cmdBar2 = htmlUtils.getElementByXpath( cmdBarXpath, overflowButton );\n        if( cmdBar2 ) {\n            const cmdBarAnchor2 = cmdBar2.getAttribute( 'anchor' );\n            const cmdBarXpath2 = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor2 + '\\']';\n            return {\n                cmdBarAnchor: cmdBarAnchor2,\n                grpCmdBarAnchor: undefined,\n                grpCmdId: undefined,\n                xpath: cmdBarXpath2,\n                contextNode: htmlUtils.getElementByXpath( cmdBarXpath + xpath, overflowButton )\n            };\n        }\n\n        // singular command bar is not found, searching multiple command bars\n        const cmdBarsXpath = './ancestor::*[contains(@class, \\'aw-commandBars\\')]';\n        const cmdBars = htmlUtils.getElementByXpath( cmdBarsXpath, overflowButton );\n        if( cmdBars ) {\n            const cmd = htmlUtils.getElementByXpath( xpath, cmdBars );\n            if( cmd ) {\n                const cmdBar3 = htmlUtils.getElementByXpath( cmdBarXpath, cmd );\n                if( cmdBar3 ) {\n                    const cmdBarAnchor3 = cmdBar3.getAttribute( 'anchor' );\n                    const cmdBarXpath = '//*[contains(@class, \\'aw-command-bar\\') and @anchor=\\'' + cmdBarAnchor3 + '\\']';\n                    return {\n                        cmdBarAnchor: cmdBarAnchor3,\n                        grpCmdBarAnchor: undefined,\n                        grpCmdId: undefined,\n                        xpath: cmdBarXpath,\n                        contextNode: cmd\n                    };\n                }\n            }\n        }\n    } else {\n        const grpCmdXpath = '//*[contains(@class, \\'aw-state-selected\\') and @data-command-id]//*[contains(@class, \\'aw-widgets-groupCommand\\')]/ancestor::*[@data-command-id]';\n        const grpCmd = htmlUtils.getElementByXpath( grpCmdXpath, document );\n        // 2. if it is a group command, find the group command id and anchor\n        if( grpCmd ) {\n            const grpCmdId = grpCmd.getAttribute( 'data-command-id' );\n            const grpCmdAnchorElem = htmlUtils.getElementByXpath( cmdBarXpath, grpCmd );\n            let grpCmdAnchor = grpCmdAnchorElem ? grpCmdAnchorElem.getAttribute( 'anchor' ) : undefined;\n            return {\n                cmdBarAnchor: cmdBarAnchor,\n                grpCmdBarAnchor: grpCmdAnchor,\n                grpCmdId: grpCmdId,\n                xpath: '',\n                contextNode: grpCmd\n            };\n        }\n    }\n    return {\n        cmdBarAnchor: cmdBarAnchor,\n        grpCmdBarAnchor: undefined,\n        grpCmdId: undefined,\n        xpath: '',\n        contextNode: contextNode\n    };\n};\n\n/**\n * Helper function to get the containing property of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} property information. Property name and its xpath.\n */\nconst getPropertyInfo = ( contextNode ) => {\n    const propXpath = './ancestor::*[contains(@class, \\'sw-property\\')]//*[contains(@class, \\'sw-property-name\\')]';\n    const propNameElement = htmlUtils.getElementByXpath( propXpath, contextNode );\n    if( propNameElement ) {\n        const propName = propNameElement.getInnerHTML();\n        return {\n            propName: propName,\n            xpath: '//*[contains(@class, \\'sw-property-name\\') and text()=\\'' + propName + '\\']/ancestor::*[contains(@class, \\'sw-property\\')]'\n        };\n    }\n    return {\n        propName: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing section of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} section information. Section titleKey and its xpath.\n */\nconst getSectionInfo = ( contextNode ) => {\n    const sectionXpath = './ancestor::*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\')]';\n    const section = htmlUtils.getElementByXpath( sectionXpath, contextNode );\n    if( section ) {\n        const sectionTitleKey = section.getAttribute( 'titlekey' );\n        const sectionTitleKeyXpath = '//*[contains(@class, \\'sw-section\\') and contains(@class, \\'aw-panelSection\\') and @titlekey=\\'' + sectionTitleKey + '\\']';\n        return {\n            sectionTitleKey: sectionTitleKey,\n            xpath: sectionTitleKeyXpath\n        };\n    }\n    return {\n        sectionTitleKey: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing secondary workarea tab of contextNode\n * using xpath to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} secondary workarea tab information. Secondary workarea tab key\n * and its xpath.\n */\nconst getSwaTabInfo = ( contextNode ) => {\n    const swaTabsXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n    const swaTab = htmlUtils.getElementByXpath( swaTabsXpath, contextNode );\n    if( swaTab ) {\n        const swaTabKey = swaTab.getAttribute( 'tabkey' );\n        const swaTabKeyXpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\''\n         + swaTabKey + '\\']/ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n        return {\n            swaTabKey: swaTabKey,\n            xpath: swaTabKeyXpath\n        };\n    }\n    return {\n        swaTabKey: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing primary workarea tab of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @returns {Object} primary workarea information. Primary workarea tab key and its xpath.\n */\nconst getPwaTabInfo = ( contextNode ) => {\n    const pwaTabsXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]//*[contains(@class, \\'aw-layout-subLocationTitles\\')]'\n     + '//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\')]';\n    const pwaTab = htmlUtils.getElementByXpath( pwaTabsXpath, contextNode );\n    if( pwaTab ) {\n        const pwaTabName = pwaTab.getAttribute( 'tabkey' );\n        const pwaTabNameXpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]//*[contains(@class, \\'sw-tab-selected\\') and @tabkey=\\''\n         + pwaTabName + '\\']/ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n        return {\n            pwaTabName: pwaTabName,\n            xpath: pwaTabNameXpath\n        };\n    }\n    return {\n        pwaTabName: undefined,\n        xpath: ''\n    };\n};\n\n/**\n * Helper function to get the containing view of contextNode using xpath\n * to fish the DOM.\n *\n * @param {DOMElement} contextNode - context element to search\n * @param {*} xpath - xpath to update the contextNode if needed\n * @returns {Object} view information. xpath to the containing view.\n */\nconst getViewInfo = ( contextNode, xpath ) => {\n    const viewXpath = './ancestor::*[contains(@class, \\'sw-showobject-page\\')]';\n    const view = htmlUtils.getElementByXpath( viewXpath, contextNode );\n    if( view ) {\n        const result = document.evaluate( '//*[contains(@class, \\'sw-showobject-page\\')]', document, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null );\n        let index = 1;\n        //multiple work areas\n        let node = result.iterateNext();\n        while( node ) {\n            const elem = htmlUtils.getElementByXpath( '(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']' + xpath, document );\n            if( elem === contextNode ) {\n                break;\n            } else {\n                index += 1;\n            }\n            node = result.iterateNext();\n        }\n        return '(//*[contains(@class, \\'sw-showobject-page\\')])[' + index + ']';\n    }\n    return '';\n};\n\n/**\n * Helper function to get the currently selected type.\n *\n * @returns {String} the selected type.\n */\nconst getSelectedTypeInfo = () => {\n    return appCtxService.ctx.selected && appCtxService.ctx.selected !== null && appCtxService.ctx.selected.type ? appCtxService.ctx.selected.type : '';\n};\n\n/**\n * Helper function to get the current selection mode.\n *\n * @returns {String} the selection mode.\n */\nconst getSelectionModeInfo = () => {\n    const mselected = appCtxService.ctx.mselected;\n    if( mselected && mselected !== null && mselected.length >= 1 ) {\n        for( let index = 1; index < mselected.length; index++ ) {\n            if( mselected[ index ].type !== mselected[ index - 1 ].type ) {\n                return 'MULTIPLE';\n            }\n        }\n        return mselected.length > 1 ? 'MULTIPLE' : 'SINGLE';\n    }\n    return 'SINGLE';\n};\n\n/**\n * Helper function to get the current user context information (user/role/group/workspace).\n *\n * @returns {Object} user context information. User uid, role uid, group uid, and workspace id.\n */\nconst getUserContextInfo = () => {\n    let user = '';\n    let role = '';\n    let group = '';\n    let workspace = '';\n    if( appCtxService.ctx && appCtxService.ctx.userSession && appCtxService.ctx.userSession.props ) {\n        user = appCtxService.ctx.userSession.props.user.dbValues[ 0 ];\n        role = appCtxService.ctx.userSession.props.role.dbValues[ 0 ];\n        group = appCtxService.ctx.userSession.props.group.dbValues[ 0 ];\n        if( appCtxService.ctx.workspace ) {\n            workspace = appCtxService.ctx.workspace.workspaceId;\n        }\n    }\n    return {\n        user: user,\n        role: role,\n        group: group,\n        workspace: workspace\n    };\n};\n\n/**\n * Helper function to get command information from contextNode.\n *\n * @param {HTMLElement} contextNode - button element that contains command id attribute\n * @returns {Object} command information. Command id, command bar anchor, property name,\n * section titlekey, secondary workarea tab, primary workarea tab, view xpath, user,\n * role, group, workspace, selected type, and selection mode.\n */\nconst getCommandInfo = ( contextNode ) => {\n    let localContextNode = contextNode;\n    const cmdId = contextNode.getAttribute( 'data-command-id' );\n    let xpath = '//*[@data-command-id=\\'' + cmdId + '\\']';\n\n    const cmdBarInfo = getCommandBarInfo( localContextNode, xpath );\n    xpath = cmdBarInfo.grpCmdId ? '//*[@data-command-id=\\'' + cmdBarInfo.grpCmdId + '\\']' : cmdBarInfo.xpath + xpath;\n    localContextNode = cmdBarInfo.contextNode;\n    const propInfo = getPropertyInfo( localContextNode );\n    xpath = propInfo.xpath + xpath;\n    const sectionInfo = getSectionInfo( localContextNode );\n    xpath = sectionInfo.xpath + xpath;\n    const swaTabInfo = getSwaTabInfo( localContextNode );\n    xpath = swaTabInfo.xpath + xpath;\n    const pwaTabInfo = getPwaTabInfo( localContextNode );\n    xpath = pwaTabInfo.xpath + xpath;\n    xpath = getViewInfo( localContextNode, xpath ) + xpath;\n    const userContextInfo = getUserContextInfo();\n\n    return {\n        xpath: xpath,\n        commandId: cmdId,\n        commandBarAnchor: cmdBarInfo.cmdBarAnchor,\n        grpCmdId: cmdBarInfo.grpCmdId,\n        grpCmdAnchor: cmdBarInfo.grpCmdBarAnchor,\n        propName: propInfo.propName,\n        sectionTitleKey: sectionInfo.sectionTitleKey,\n        swaTab: swaTabInfo.swaTabKey,\n        pwaTab: pwaTabInfo.pwaTabKey,\n        selectedType: getSelectedTypeInfo(),\n        selectionMode: getSelectionModeInfo(),\n        user: userContextInfo.user,\n        role: userContextInfo.role,\n        group: userContextInfo.group,\n        workspace: userContextInfo.workspace\n    };\n};\n\n/**\n *\n * @param {HTMLElement} contextNode - anchor element that contains tab key attribute\n * @returns {Object} tab information\n */\nconst getTabInfo = ( contextNode ) => {\n    let localContextNode = contextNode;\n    const tabKey = localContextNode.getAttribute( 'tabkey' );\n    // determine if we are in overflow\n    const overflowXpath = '//*[contains(@class, \\'sw-tab-overflowContainer\\')]//*[contains(@class, \\'sw-tab-overflowButton\\') and contains(@class, \\'aw-jswidget-controlArrowRotateRight\\')]';\n    const overflowButtonElem = htmlUtils.getElementByXpath( overflowXpath, document );\n    if( overflowButtonElem ) {\n        // in overflow, get the hidden tab\n        const hiddenTabXpath = './ancestor::*[contains(@class, \\'sw-tab-overflowContainer\\')]/ancestor::*//*[@role=\\'tablist\\' and contains(@class, \\'sw-tabContainer\\')]//*[@role=\\'tab\\']//*[@tabkey=\\''\n         + tabKey + '\\']';\n        const hiddenTabElem = htmlUtils.getElementByXpath( hiddenTabXpath, overflowButtonElem );\n        if( hiddenTabElem ) {\n            localContextNode = hiddenTabElem;\n        }\n    }\n    const tabName = localContextNode.getAttribute( 'aria-label' );\n    let xpath = '//*[@tabkey=\\'' + tabKey + '\\']';\n    const swaXpath = './ancestor::*[contains(@class, \\'sw-secondary-workarea\\')]';\n    const swaElem = htmlUtils.getElementByXpath( swaXpath, localContextNode );\n\n    if( swaElem ) {\n        // clicked on swa tab\n        xpath = '//*[contains(@class, \\'sw-secondary-workarea\\')]' + xpath;\n        const pwaTabInfo = getPwaTabInfo( localContextNode );\n        xpath = pwaTabInfo.xpath + xpath;\n        xpath = getViewInfo( localContextNode, xpath ) + xpath;\n    } else {\n        const pwaXpath = './ancestor::*[contains(@class, \\'sw-tabContainer\\')]/ancestor::*[contains(@class, \\'aw-layout-subLocationTitles\\')]';\n        const pwaElem = htmlUtils.getElementByXpath( pwaXpath, localContextNode );\n        if( pwaElem ) {\n            xpath = '//*[contains(@class, \\'aw-layout-subLocationTitles\\')]//*[contains(@class, \\'sw-tabContainer\\')]' + xpath;\n            xpath = getViewInfo( localContextNode, xpath ) + xpath;\n        }\n    }\n    const userContextInfo = getUserContextInfo();\n\n    return {\n        xpath: xpath,\n        tabName: tabName,\n        selectedType: getSelectedTypeInfo(),\n        selectionMode: getSelectionModeInfo(),\n        user: userContextInfo.user,\n        role: userContextInfo.role,\n        group: userContextInfo.group,\n        workspace: userContextInfo.workspace\n    };\n};\n\n/**\n *\n * @param {HTMLElement} contextNode - aw-tile element\n * @returns {Object} tile information\n */\nconst getTileInfo = ( contextNode ) => {\n    const tileName = contextNode.getAttribute( 'title' );\n    const userContextInfo = getUserContextInfo();\n    return {\n        xpath: '//*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\' and @title=\\'' + tileName + '\\']',\n        tileName: tileName,\n        selectedType: getSelectedTypeInfo(),\n        selectionMode: getSelectionModeInfo(),\n        user: userContextInfo.user,\n        role: userContextInfo.role,\n        group: userContextInfo.group,\n        workspace: userContextInfo.workspace\n    };\n};\n\n// TODO: (mm) decide if this function is needed. This function is just pushing to localStorage.\nconst tempFn = ( key, info ) => {\n    let infos = [];\n    const result = localStorage.get( key );\n    if( result ) {\n        infos = JSON.parse( result );\n        let found = false;\n        let index = 0;\n        for( let element of infos ) {\n            if( element.xpath === info.xpath && element.selectedType === info.selectedType && element.user === info.user\n                && element.group === info.group && element.role === info.role && element.workspace === info.workspace ) {\n                found = true;\n                break;\n            }\n            index += 1;\n        }\n        if( found ) {\n            // move to front\n            const elem = infos[index];\n            infos.splice( index, 1 );\n            infos.unshift( elem );\n        } else {\n            if( infos.length === 5 ) {\n                infos.pop();\n            }\n            infos.push( info );\n        }\n    } else {\n        infos.push( info );\n    }\n    localStorage.publish( key, JSON.stringify( infos ) );\n};\n\n/**\n * Global click listener on the \"bubble down\" so this code is invoked first.\n * Collect information from the DOM for commands/tabs/tiles and notify all services.\n */\nexport function initClickListener() {\n    document.addEventListener( 'click', function( event ) {\n        const commandElement = htmlUtils.getElementByXpath( './ancestor-or-self::*[@data-command-id]', event.target );\n        if( commandElement ) {\n            const cmdInfo = getCommandInfo( commandElement );\n            tempFn( 'commandInformation', cmdInfo );\n            notify2( cmdInfo );\n            return;\n        }\n\n        const tabElement = htmlUtils.getElementByXpath( './ancestor-or-self::*[@tabkey]', event.target );\n        if( tabElement ) {\n            const tabInfo = getTabInfo( tabElement );\n            tempFn( 'tabInformation', tabInfo );\n            notify2( tabInfo );\n            return;\n        }\n\n        const tileXpath = './ancestor-or-self::*[not(@data-locator=\\'tile-resizeButton\\')]/ancestor::*[contains(@class, \\'aw-tile-tileContainer\\') and @data-locator=\\'tile-container\\']';\n        const tileElement = htmlUtils.getElementByXpath( tileXpath, event.target );\n        if( tileElement ) {\n            const tileInfo = getTileInfo( tileElement );\n            tempFn( 'tileInformation', tileInfo );\n            notify2( tileInfo );\n        }\n    }, true );\n}\n\n/**\n * Register a service\n *\n * @param {String} serviceName name of service to register\n * @param {Object} service instance to register\n */\nexport function registerService( serviceName, service ) {\n    _services.push( { name: serviceName, instance: service } );\n}\n\n/**\n * Remove service registration\n *\n * @param {String} serviceName service name to un-register\n */\nexport function unregisterService( serviceName ) {\n    _services = _services.filter( function( value ) {\n        return value.name !== serviceName;\n    } );\n}\n\n/**\n * capture current user gesture and publish-\n * TODO: (mm) delete this function and it's references\n * then re-name notify2 to notify\n * @param  {...currentContext} payload for callee service\n * @returns {Function} callback function for subscribed services\n */\nexport const notify = async( ...currentContext ) => {};\n\n/**\n * Notify the registered services of the click information\n * gathered by the global click listener.\n *\n * @param  {Object} clickInfo - information gathered by the global click listener.\n */\nexport function notify2( clickInfo ) {\n    for( let service of _services ) {\n        service.instance.notify( clickInfo );\n    }\n}\n\n/**\n * Highlight widget as per widget context\n * TODO: (mm) move or delete this function, doesn't belong here.\n * @param {String} widgetType - can be tab, tile or command\n * @param {String} widgetId - 123\n * @param {String} selector params like target tab, command selector\n */\nexport const highlightWidget = async( widgetType, widgetId, selector ) => {\n    if( widgetType.toLowerCase() === 'tab' ) {\n        tabRegistryService.highlightTab( widgetId, selector );\n    } else {\n        commandHighlightService.highlightCommand( widgetId, selector );\n    }\n};\nconst exports = {\n    registerService,\n    unregisterService,\n    notify,\n    highlightWidget,\n    initClickListener\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"//@<COPYRIGHT>@\n//==================================================\n//Copyright 2022.\n//Siemens Product Lifecycle Management Software Inc.\n//All Rights Reserved.\n//==================================================\n//@<COPYRIGHT>@\n\n/*global\n */\n\n/**\n * @module js/searchStateHelperService\n */\nimport appCtxService from 'js/appCtxService';\nexport const getForceChartParameterValue = searchState => {\n  let forceChart = true;\n\n  if (searchState && searchState.selectFirstObjectPreference) {\n    let firstObjectSelectionPref = appCtxService.getCtx('preferences.' + searchState.selectFirstObjectPreference);\n    firstObjectSelectionPref = firstObjectSelectionPref && firstObjectSelectionPref[0] ? firstObjectSelectionPref[0].toLowerCase() : undefined;\n    forceChart = firstObjectSelectionPref !== 'true';\n  }\n\n  return forceChart;\n};\nexport const getAutoUpdateFilteringPreferenceValue = () => {\n  let autoApplyFilters = true;\n  let autoApplyFiltersPreference = appCtxService.getCtx('preferences.AWC_Search_Auto_Update_Filters');\n  autoApplyFiltersPreference = autoApplyFiltersPreference && autoApplyFiltersPreference[0] ? autoApplyFiltersPreference[0].toLowerCase() : undefined;\n  autoApplyFilters = autoApplyFiltersPreference !== 'false';\n  return autoApplyFilters;\n};\nexport const getValueForShowAutoUpdateFilteringOption = () => {\n  let showAutoUpdateFilteringOption = true;\n  let showAutoUpdateFiltersPreferenceValue = appCtxService.getCtx('preferences.AWC_Search_Show_Auto_Update_Filters');\n  showAutoUpdateFiltersPreferenceValue = showAutoUpdateFiltersPreferenceValue && showAutoUpdateFiltersPreferenceValue[0] ? showAutoUpdateFiltersPreferenceValue[0].toLowerCase() : undefined;\n  showAutoUpdateFilteringOption = showAutoUpdateFiltersPreferenceValue !== 'false';\n  return showAutoUpdateFilteringOption;\n};\nexport const constructBaseSearchCriteria = (searchContext, stateParams) => {\n  const preferences = appCtxService.getCtx('preferences');\n  const colorFilteringValue = preferences.AWC_ColorFiltering[0];\n  searchContext.colorToggle = searchContext.showChartColorBars ? colorFilteringValue : 'false';\n  searchContext.forceChart = searchStateHelperService.getForceChartParameterValue(searchContext);\n  searchContext.bulkFiltering = searchContext.bulkFiltering !== false;\n  searchContext.showAutoUpdateFilteringOption = searchStateHelperService.getValueForShowAutoUpdateFilteringOption();\n  searchContext.bulkFilteringPreference = 'AWC_Search_Auto_Update_Filters';\n  searchContext.autoApplyFilters = searchContext.bulkFiltering ? searchStateHelperService.getAutoUpdateFilteringPreferenceValue() : true;\n  searchContext.bulkFiltersApplied = false;\n  const searchPreFilters = appCtxService.getCtx('searchPreFilters');\n  const ownerPreFilters = searchPreFilters ? searchPreFilters.ownPrefilters : undefined;\n  const categoryPreFilters = searchPreFilters ? searchPreFilters.catPrefilters : undefined;\n\n  switch (searchContext.provider) {\n    case 'Awp0FullTextSearchProvider':\n      {\n        searchContext.criteria = searchContext.criteria ? searchContext.criteria : {};\n        searchContext.criteria.limitedFilterCategoriesEnabled = searchContext.criteria && searchContext.criteria.limitedFilterCategoriesEnabled ? searchContext.criteria.limitedFilterCategoriesEnabled : preferences.AWC_Limited_Filter_Categories_Enabled[0];\n        searchContext.criteria.listOfExpandedCategories = '';\n\n        if (categoryPreFilters && categoryPreFilters.selectedCategory && categoryPreFilters.selectedCategory.length > 0 || ownerPreFilters && ownerPreFilters.selectedCategory && ownerPreFilters.selectedCategory.length > 0) {\n          searchContext.criteria.forceThreshold = 'true';\n        } else if (stateParams && stateParams.hasOwnProperty('filter') && stateParams.filter && stateParams.filter.length > 0) {\n          searchContext.criteria.forceThreshold = 'false';\n        }\n\n        if (stateParams && stateParams.hasOwnProperty('savedSearchUid')) {\n          searchContext.criteria.savedSearchUid = stateParams.savedSearchUid;\n        }\n      }\n  }\n\n  return searchContext;\n};\nexport const getCriteriaForNewSearch = (searchState, urlSearchString) => {\n  let criteria = searchState.criteria;\n\n  if (criteria) {\n    criteria.searchString = urlSearchString;\n\n    switch (searchState.provider) {\n      case 'Awp0FullTextSearchProvider':\n        {\n          criteria.forceThreshold = 'true';\n          criteria.listOfExpandedCategories = '';\n        }\n    }\n  }\n\n  return criteria;\n};\nexport const getCriteriaAfterFilterSelection = searchState => {\n  let criteria = searchState.criteria;\n\n  switch (searchState.provider) {\n    case 'Awp0FullTextSearchProvider':\n      {\n        criteria.forceThreshold = 'false';\n\n        if (searchState.additionalSearchString && searchState.additionalSearchString.length > 0) {\n          criteria.searchString = searchState.additionalSearchString;\n        }\n      }\n  }\n\n  return criteria;\n};\nconst searchStateHelperService = {\n  constructBaseSearchCriteria,\n  getForceChartParameterValue,\n  getCriteriaForNewSearch,\n  getCriteriaAfterFilterSelection,\n  getAutoUpdateFilteringPreferenceValue,\n  getValueForShowAutoUpdateFilteringOption\n};\nexport default searchStateHelperService;","map":{"version":3,"names":["appCtxService","getForceChartParameterValue","searchState","forceChart","selectFirstObjectPreference","firstObjectSelectionPref","getCtx","toLowerCase","undefined","getAutoUpdateFilteringPreferenceValue","autoApplyFilters","autoApplyFiltersPreference","getValueForShowAutoUpdateFilteringOption","showAutoUpdateFilteringOption","showAutoUpdateFiltersPreferenceValue","constructBaseSearchCriteria","searchContext","stateParams","preferences","colorFilteringValue","AWC_ColorFiltering","colorToggle","showChartColorBars","searchStateHelperService","bulkFiltering","bulkFilteringPreference","bulkFiltersApplied","searchPreFilters","ownerPreFilters","ownPrefilters","categoryPreFilters","catPrefilters","provider","criteria","limitedFilterCategoriesEnabled","AWC_Limited_Filter_Categories_Enabled","listOfExpandedCategories","selectedCategory","length","forceThreshold","hasOwnProperty","filter","savedSearchUid","getCriteriaForNewSearch","urlSearchString","searchString","getCriteriaAfterFilterSelection","additionalSearchString"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/searchStateHelperService.js"],"sourcesContent":["//@<COPYRIGHT>@\n//==================================================\n//Copyright 2022.\n//Siemens Product Lifecycle Management Software Inc.\n//All Rights Reserved.\n//==================================================\n//@<COPYRIGHT>@\n\n/*global\n */\n\n/**\n * @module js/searchStateHelperService\n */\nimport appCtxService from 'js/appCtxService';\n\nexport const getForceChartParameterValue = ( searchState ) => {\n    let forceChart = true;\n    if( searchState && searchState.selectFirstObjectPreference ) {\n        let firstObjectSelectionPref = appCtxService.getCtx( 'preferences.' + searchState.selectFirstObjectPreference );\n        firstObjectSelectionPref = firstObjectSelectionPref && firstObjectSelectionPref[ 0 ] ? firstObjectSelectionPref[ 0 ].toLowerCase() : undefined;\n        forceChart = firstObjectSelectionPref !== 'true';\n    }\n    return forceChart;\n};\n\nexport const getAutoUpdateFilteringPreferenceValue = () => {\n    let autoApplyFilters = true;\n    let autoApplyFiltersPreference = appCtxService.getCtx( 'preferences.AWC_Search_Auto_Update_Filters' );\n    autoApplyFiltersPreference = autoApplyFiltersPreference && autoApplyFiltersPreference[ 0 ] ? autoApplyFiltersPreference[ 0 ].toLowerCase() : undefined;\n    autoApplyFilters = autoApplyFiltersPreference !== 'false';\n    return autoApplyFilters;\n};\n\nexport const getValueForShowAutoUpdateFilteringOption = () => {\n    let showAutoUpdateFilteringOption = true;\n    let showAutoUpdateFiltersPreferenceValue = appCtxService.getCtx( 'preferences.AWC_Search_Show_Auto_Update_Filters' );\n    showAutoUpdateFiltersPreferenceValue = showAutoUpdateFiltersPreferenceValue && showAutoUpdateFiltersPreferenceValue[ 0 ] ? showAutoUpdateFiltersPreferenceValue[ 0 ].toLowerCase() : undefined;\n    showAutoUpdateFilteringOption = showAutoUpdateFiltersPreferenceValue !== 'false';\n    return showAutoUpdateFilteringOption;\n};\n\nexport const constructBaseSearchCriteria = ( searchContext, stateParams ) => {\n    const preferences = appCtxService.getCtx( 'preferences' );\n    const colorFilteringValue = preferences.AWC_ColorFiltering[ 0 ];\n    searchContext.colorToggle = searchContext.showChartColorBars ? colorFilteringValue : 'false';\n    searchContext.forceChart = searchStateHelperService.getForceChartParameterValue( searchContext );\n    searchContext.bulkFiltering = searchContext.bulkFiltering !== false;\n    searchContext.showAutoUpdateFilteringOption = searchStateHelperService.getValueForShowAutoUpdateFilteringOption();\n    searchContext.bulkFilteringPreference = 'AWC_Search_Auto_Update_Filters';\n    searchContext.autoApplyFilters = searchContext.bulkFiltering ? searchStateHelperService.getAutoUpdateFilteringPreferenceValue() : true;\n    searchContext.bulkFiltersApplied = false;\n    const searchPreFilters = appCtxService.getCtx( 'searchPreFilters' );\n    const ownerPreFilters = searchPreFilters ? searchPreFilters.ownPrefilters : undefined;\n    const categoryPreFilters = searchPreFilters ? searchPreFilters.catPrefilters : undefined;\n\n    switch ( searchContext.provider ) {\n        case 'Awp0FullTextSearchProvider': {\n            searchContext.criteria = searchContext.criteria ? searchContext.criteria : {};\n            searchContext.criteria.limitedFilterCategoriesEnabled = searchContext.criteria && searchContext.criteria.limitedFilterCategoriesEnabled ?\n                searchContext.criteria.limitedFilterCategoriesEnabled : preferences.AWC_Limited_Filter_Categories_Enabled[ 0 ];\n            searchContext.criteria.listOfExpandedCategories = '';\n            if( categoryPreFilters && categoryPreFilters.selectedCategory && categoryPreFilters.selectedCategory.length > 0\n                || ownerPreFilters && ownerPreFilters.selectedCategory && ownerPreFilters.selectedCategory.length > 0 ) {\n                searchContext.criteria.forceThreshold = 'true';\n            } else if( stateParams && stateParams.hasOwnProperty( 'filter' ) && stateParams.filter && stateParams.filter.length > 0 ) {\n                searchContext.criteria.forceThreshold = 'false';\n            }\n            if( stateParams && stateParams.hasOwnProperty( 'savedSearchUid' ) ) {\n                searchContext.criteria.savedSearchUid = stateParams.savedSearchUid;\n            }\n        }\n    }\n    return searchContext;\n};\n\nexport const getCriteriaForNewSearch = ( searchState, urlSearchString ) => {\n    let criteria = searchState.criteria;\n    if( criteria ) {\n        criteria.searchString = urlSearchString;\n        switch ( searchState.provider ) {\n            case 'Awp0FullTextSearchProvider': {\n                criteria.forceThreshold = 'true';\n                criteria.listOfExpandedCategories = '';\n            }\n        }\n    }\n    return criteria;\n};\n\nexport const getCriteriaAfterFilterSelection = ( searchState ) => {\n    let criteria = searchState.criteria;\n    switch ( searchState.provider ) {\n        case 'Awp0FullTextSearchProvider': {\n            criteria.forceThreshold = 'false';\n            if( searchState.additionalSearchString && searchState.additionalSearchString.length > 0 ) {\n                criteria.searchString = searchState.additionalSearchString;\n            }\n        }\n    }\n    return criteria;\n};\n\nconst searchStateHelperService = {\n    constructBaseSearchCriteria,\n    getForceChartParameterValue,\n    getCriteriaForNewSearch,\n    getCriteriaAfterFilterSelection,\n    getAutoUpdateFilteringPreferenceValue,\n    getValueForShowAutoUpdateFilteringOption\n};\n\nexport default searchStateHelperService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
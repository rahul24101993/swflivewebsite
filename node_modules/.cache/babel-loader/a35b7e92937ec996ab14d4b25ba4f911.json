{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-disable valid-jsdoc */ /**\n * Defines {@link page.service} which serves basic queries related to page.\n *\n * @module js/page.service\n */import AwPromiseService from'js/awPromiseService';import State from'js/awStateService';import appCtxService from'js/appCtxService';import workspaceValidationService from'js/workspaceValidationService';import _ from'lodash';import conditionService from'js/conditionService';import viewModelProcessingFactory from'js/viewModelProcessingFactory';/** object to export */var exports={};/** Reference to $state service */ /** Reference to $parse service */ /** Reference to appCtxService service */ /** Reference to {@angular.$q} service */ /** Reference to {@$rootScope} */ /** Reference to {@workspaceValidationService} */ /**\n * Evaluate the provided expression against given environment.\n *\n * @param expression to evaluate.\n * @param evaluationEnvironment against expression to evaluate.\n * @return true if expression is true other-wise false\n */var _evaluateExpression=function(expression,evaluationEnvironment){var declViewModel=viewModelProcessingFactory.createDeclViewModel({_viewModelId:'__pageSvc'});var verdict=conditionService.parseExpression(declViewModel,expression,evaluationEnvironment);declViewModel._internal.destroy();return verdict;};/**\n * Build evaluationEnvironment.\n *\n * @param state a state\n * @param additionalEvalEnvironment provided by consumer\n * @return evaluationEnvironment.\n */var _buildEvaluationEnvironment=function(state,additionalEvalEnvironment){return _.assign({},{data:_.clone(state.data),params:_.clone(state.params),ctx:_.clone(appCtxService.ctx)},additionalEvalEnvironment);};/**\n * The method resolve a promise with a list of states which confirm:<br>\n * <ul>\n * <li>The return state should be child state of the parentState, If parentState is not provided, the return state\n * should be child state of the current state's parent</li>\n * <li>And the state's visibleWhen should be evaluates to true.</li>\n * </ul>\n * The visibleWhen's expression can be as defined below while defining a state.<br>\n * <code>\n * \"aState\": {\n *     \"data\":{\"priority\":0},\n *     \"controller\": \"controllerOfThisState\",\n *     \"parent\": \"parentState\",\n *     \"url\": \"/someUrl\",\n *     \"visibleWhen\":{\"expression\":\"ctx.someVariable==1\"}\n *            }\n * </code>\n * Supported contexts: parentState.data, parentState.params, appCtxService.ctx any other additionalEvalEnvironment\n * provided to the method.\n *\n * @param {String} parentState is used to get the children, if not provided current state's parent ({@$state.current.parent})\n *            will be considered as a parent state.\n * @return promise <array>\n *\n */export let getAvailableSubpages=function(parentState,additionalEvalEnv){let parentStateObj={};var additionalEvalEnvironment=additionalEvalEnv?additionalEvalEnv:{};var defferd=AwPromiseService.instance.defer();var availableStates=[];var _parentState=parentState;if(!_parentState){_parentState=State.instance.current.parent;}State.instance.get().filter(function(state){if(state.name===_parentState){parentStateObj=state;}return state.parent===_parentState;}).forEach(function(state){if(state.visibleWhen!==undefined&&(state.visibleWhen.expression||state.visibleWhen.condition)){var expression=state.visibleWhen.expression?state.visibleWhen.expression:state.visibleWhen.condition.expression;var visibleWhen=_evaluateExpression(expression,_buildEvaluationEnvironment(State.instance.get(_parentState),{...parentStateObj,...additionalEvalEnvironment}));if(visibleWhen){availableStates.push(state);}}else{availableStates.push(state);}});var availableSubPages=availableStates.filter(function(aSubPage){return workspaceValidationService.isValidPage(aSubPage.name);});defferd.resolve(availableSubPages);return defferd.promise;};/**\n * Return a default sub-page for a given page.This method uses\n * <code>state.data.priority<code> to decide a default sub-page.\n * A page will have a default sub-page X, if following are true:\n * 1) X is a visible(available) page.\n * 2) X has highest priority(state.data.priority) value among available sub-pages.\n * 3) X is available in current workspace.\n *\n * @param {Object} page , a state object.\n * @return promise<page>\n */export let getDefaultSubPage=function(page){return getAvailableSubpages(page).then(function(availableSubPages){if(availableSubPages&&availableSubPages.length>0){availableSubPages.sort(function(o1,o2){return _.parseInt(o1.data.priority)-_.parseInt(o2.data.priority);});return availableSubPages[0];}return null;});};/**\n * If a (parent) page(or location) is revealed application should should find out a visible sub-page (sub-location)\n * which has a highest priority and should reveal it.\n *\n * @param {Object} page - a state\n * @param {Object} toParams\n */export let navigateToDefaultSubPage=function(page,toParams){getDefaultSubPage(page.name).then(function(defaultSubPage){if(defaultSubPage){return State.instance.go(defaultSubPage.name,toParams);}});};export let registerSubLocationContext=function(){var provider=State.instance.current.data;// Update the sublocation context\nvar initialContext={clientScopeURI:provider.clientScopeURI,historyNameToken:provider.name,label:provider.label,nameToken:provider.nameToken};appCtxService.registerCtx('sublocation',initialContext);};exports={getAvailableSubpages,getDefaultSubPage,navigateToDefaultSubPage,registerSubLocationContext};export default exports;","map":null,"metadata":{},"sourceType":"module"}
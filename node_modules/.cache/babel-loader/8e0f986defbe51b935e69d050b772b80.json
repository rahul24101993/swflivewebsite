{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * General profier for async worker\n *\n * https://github.com/GoogleChromeLabs/tti-polyfill\n *\n * @module js/splmStatsProfiler\n */import{now}from'js/splmStatsUtils';import{LAST_DIGEST_BUSY_WAIT}from'js/splmStatsConstants';// DOM Node type in browser\nexport const STATE={IDLE:0,HOLD:1,WAIT:2,DONE:3};// pre save origin set timeout call\nconst globalSetTimeout=setTimeout;export const createProfiler=function(){let watchers=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let interval=arguments.length>1&&arguments[1]!==undefined?arguments[1]:LAST_DIGEST_BUSY_WAIT;let _promise;let _state=STATE.IDLE;const _watchers=[...watchers];// addWatcher intreface to add more flexibility\nconst addWatcher=watcher=>_watchers.push(watcher);const profile=()=>{_promise=_promise||new Promise((resolve,reject)=>{// start time\nconst startTime=now();const completePageLoad=()=>{_watchers.forEach(watcher=>{watcher.unregister();});// WAIT => DONE\n_state=STATE.DONE;resolve(now()-startTime-interval);};let timeoutID=globalSetTimeout(completePageLoad,interval);let _requestCnt=0;const _onStart=()=>{if(_requestCnt===0){timeoutID=clearTimeout(timeoutID);// WAIT => HOLD\n_state=STATE.HOLD;}_requestCnt++;// console.log( `Profiler rquestCnt: ${_requestCnt} (onStart)` );\n};const _onDone=()=>{_requestCnt=_requestCnt>0?_requestCnt-1:0;if(_requestCnt===0){// for the case onDone come in 1stly as side effect.\ntimeoutID=clearTimeout(timeoutID);timeoutID=globalSetTimeout(completePageLoad,interval);// HOLD => WAIT\n_state=STATE.WAIT;}// console.log( `Profiler rquestCnt: ${_requestCnt} (onDone)` );\n};_watchers.forEach(watcher=>{watcher.register(_onStart,_onDone);});// IDLE => WAIT\n_state=STATE.WAIT;});return _promise;};return{get state(){return _state;},get active(){return _state===STATE.HOLD||_state===STATE.WAIT;},addWatcher,profile};};const Profiler=()=>createProfiler([]);export default Profiler;","map":null,"metadata":{},"sourceType":"module"}
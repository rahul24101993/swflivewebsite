{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwPropertyLovValService.js\"; // Copyright (c) 2021 Siemens\n\n/* eslint-disable complexity */\n\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AWLovList from 'viewmodel/AwLovListViewModel';\nimport AWPropertyLovChild from 'viewmodel/AwPropertyLovChildViewModel';\nimport AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';\nimport AwTextBoxVal from 'viewmodel/AwTextBoxValViewModel';\nimport { getValClass } from 'js/componentUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport keyCode from 'js/keyCode';\nimport _ from 'lodash';\nimport wcagService from 'js/wcagService';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPropertyLabel from 'viewmodel/AwPropertyLabelViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV = 5; //Sets totalNumber of objects in dataprovider before filter and lovUsage ( exhaustive/suggestive )\n\nconst setInitialDataProviderInfo = (dataProvider, initialDataProviderInfo, popupOpen) => {\n  let initialLength = 0;\n\n  if (dataProvider.viewModelCollection && dataProvider.viewModelCollection.loadedVMObjects.length > 0) {\n    initialLength = dataProvider.viewModelCollection.loadedVMObjects.length;\n  } else if (initialLength === 0 && dataProvider.vmCollectionObj && dataProvider.vmCollectionObj.vmCollection && dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length > 0) {\n    initialLength = dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length;\n  }\n\n  if (initialDataProviderInfo.current === null && (initialLength > 0 || !_.isUndefined(dataProvider.lovUsage))) {\n    //Get length of objects on initialload - we cant use totalFound because\n    //totalFound changes as we filter and some implementation does not have totalFound populated\n    let initalPrePoulatedDataLen = initialLength > 0 && popupOpen === undefined ? initialLength : undefined;\n    let initialInfo = {\n      initialTotalFound: initialLength,\n      initalPrePoulatedDataLen\n    };\n\n    if (dataProvider.hasOwnProperty('lovUsage') && dataProvider.lovUsage === 'SUGGESTIVE_LOV') {\n      initialInfo.lovUsage = 'SUGGESTIVE_LOV';\n    }\n\n    initialDataProviderInfo.current = initialInfo;\n  }\n\n  if (initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen !== undefined && initialDataProviderInfo.current.initalPrePoulatedDataLen !== initialLength && initialLength > 0) {\n    //When popup opens and new initialLength is populated then update initialTotalFound\n    delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n    initialDataProviderInfo.current.initialTotalFound = initialLength;\n  }\n}; // Gets isSearchable and isSelectOnly flag which is helped to decide LOV UI and behaviors\n\n\nconst getSelectOnlyAndSearchableFlags = (prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter) => {\n  // isSelectOnly: true = exhaustive list; false = non-list val can be suggested\n  let isSelectOnly = _.isUndefined(prop.fielddata.isSelectOnly) ? true : prop.fielddata.isSelectOnly;\n\n  if (initialDataProviderInfo.current && !_.isUndefined(initialDataProviderInfo.current.lovUsage) && initialDataProviderInfo.current.lovUsage === 'SUGGESTIVE_LOV') {\n    isSelectOnly = false;\n  }\n\n  let initialTotalFound = initialDataProviderInfo.current === null || initialDataProviderInfo.current.initialTotalFound === undefined ? 0 : initialDataProviderInfo.current.initialTotalFound; // Based on PO input, we have to display filter Box if no of values are more than 5\n\n  const isSearchable = isSelectOnly === false || isCheckBoxArryLOV || isSelectOnly === true && hideFilter === false ? true : initialTotalFound > MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV;\n  return {\n    isSelectOnly,\n    isSearchable\n  };\n};\n\nconst updateInitialDataProviderInfo = initialDataProviderInfo => {\n  //If initalPrePoulatedDataLen still exists after popup open, we need to delete this as it is no more releavant\n  // This can happen if initalPrePoulatedDataLen ===  dataProvider.len when popup is opened\n  //If this is not updated then during filter isSearchable flag which depends on dataProvider.len gives false result\n  if (initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen) {\n    delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n  }\n};\n/**\n * render function for AwLovVal\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\n\nexport const awLovValRenderFunction = props => {\n  const {\n    actions,\n    fields,\n    elementRefList,\n    autoCorrect,\n    action,\n    viewModel,\n    hideFilter,\n    ...prop\n  } = props;\n  const field = prop;\n  const {\n    isListbox\n  } = props;\n  let {\n    data: {\n      blankLovEntry,\n      dirty,\n      _most_recent_entry,\n      parentSelectedHandled\n    },\n    searchBoxLOVFilterStr,\n    dispatch\n  } = viewModel;\n  const selectIndex = elementRefList.get('selectIndex');\n  const checkLovEntries = elementRefList.get('checkLovEntries');\n  const isValidationInProgress = elementRefList.get('isValidationInProgress');\n  const initialDataProviderInfo = elementRefList.get('initialDataProviderInfo');\n  const dynProvider = elementRefList.get('dynDataprovider');\n  let dataProvider = field.fielddata.dataProvider ? field.fielddata.dataProvider : dynProvider && dynProvider.current;\n\n  let getFilteredEntries = () => validEntries.current.map(_ref => {\n    let {\n      propDisplayValue,\n      propInternalValue\n    } = _ref;\n    return {\n      propDisplayValue,\n      propInternalValue\n    };\n  });\n\n  const hint = prop.fielddata.renderingHint;\n  const typex = prop.typex;\n  const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n  const isArray = prop.fielddata.isArray;\n\n  if (!dataProvider) {\n    return;\n  } //zarq9k: This would be cleaned up when we have the infrastruture to pass ref from viewmodel.\n\n\n  let lovEntryRef = dataProvider.getLovEntryRef();\n  setInitialDataProviderInfo(dataProvider, initialDataProviderInfo, actions.lovPopup.open);\n  let {\n    isSelectOnly,\n    isSearchable\n  } = getSelectOnlyAndSearchableFlags(prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter);\n  let staticFilterStr = null;\n  let validEntries = elementRefList.get('validEntries');\n  let {\n    lovPopup\n  } = actions; // provide application opportunity to override the size\n\n  let overridePopupOptions = () => {\n    let result = {\n      width: lovPopup.reference.current.offsetWidth,\n      autoFocus: true\n    };\n    prop.maxHeight && (result.maxHeight = prop.maxHeight);\n    return result;\n  };\n\n  let isPropDateTypeAndNonArray = () => typex && DATE_TYPES.includes(typex) && !prop.fielddata.isArray;\n\n  let isInValidSearchForExhaustiveLOV = () => !DATE_TYPES.includes(typex) && selectIndex.current === null && isSelectOnly === true;\n\n  let isArrayWithValidateAction = prop.fielddata.isArray && !_.isEmpty(dataProvider.validateAction) && !isCheckBoxArryLOV;\n\n  let isValidationErrorVisible = () => props.error && props.error.length > 0;\n\n  const resetFilterStr = () => {\n    if (lovEntryRef.current && lovEntryRef.current.lovEntry) {\n      lovEntryRef.current.lovEntry.filterString = null;\n    }\n\n    prop.setLovVal({\n      lovEntry: null\n    }, 'resetFilterStr');\n  };\n\n  let hooks = {\n    whenOpened: () => {\n      isValidationInProgress.current = false;\n      searchBoxLOVFilterStr.error = null;\n    },\n    whenClosed: popupRef => {\n      // TODO: add comment explaining why validate is needed or not needed here\n      if ((isCheckBoxArryLOV || DATE_TYPES.includes(typex)) && lovEntryRef.current && lovEntryRef.current.lovEntry) {\n        validateLOVEntry(lovEntryRef.current.lovEntry);\n      }\n\n      resetFilterStr(); // reset searchBoxLOVFilterStr\n\n      fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.update(null);\n      lovEntryRef.current = null;\n    }\n  };\n\n  const showPopup = function () {\n    let resetFilter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true; // case1: normal show, we want a reset each time.\n    // case2: filter change - onChangeHandler, don't want a reset\n\n    if (resetFilter) {\n      resetFilterStr(); // save the original, used to recover when esc\n\n      let recent_entry = {\n        propDisplayValue: field.fielddata.uiValue,\n        propInternalValue: prop.value\n      };\n      dispatch({\n        path: 'data._most_recent_entry',\n        value: recent_entry\n      });\n    }\n\n    lovPopup.show({\n      hooks,\n      ...overridePopupOptions()\n    });\n  };\n\n  const storeLatestLOVEntry = lovEntry => {\n    if (lovEntryRef.current) {\n      lovEntryRef.current.lovEntry = lovEntry;\n    } else {\n      lovEntryRef.current = {\n        lovEntry\n      };\n    }\n  }; // This function would be invoked when some value has been selected from the dropdown popup\n\n\n  const setLovEntryAndClose = (receivedLOVEntry, event, op, isAddingTypedValue) => {\n    storeLatestLOVEntry(receivedLOVEntry);\n    let dateApi = null;\n\n    if (prop.fielddata.dateApi) {\n      dateApi = prop.fielddata.dateApi;\n    }\n\n    if (dateApi && dateApi.isDateEnabled && dateApi.isTimeEnabled && prop.fielddata.isArray) {\n      //If date and time enabled and if its array update only after time is selected\n      prop.onTimeSelectedOrEntered(event.target.value || receivedLOVEntry.propInternalValue);\n      lovPopup.hide();\n    } else {\n      receivedLOVEntry.filteredLOVEntries = getFilteredEntries();\n\n      if (!DATE_TYPES.includes(typex) && !isCheckBoxArryLOV) {\n        op = 'validateandadd'; //For array vaidation is in progress for other it is not\n\n        isValidationInProgress.current = true;\n      }\n\n      let lovEntry = receivedLOVEntry;\n\n      if (isAddingTypedValue === true) {\n        // If isAddingTypedValue === true means user is adding typed value and not from selected list\n        // lovEntry is what user has typed in and not from the list displayed in popup\n        lovEntry = { ...receivedLOVEntry\n        };\n        lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n        lovEntry.propInternalValue = searchBoxLOVFilterStr.dbValue;\n        lovEntry.propDisplayValue = searchBoxLOVFilterStr.dbValue;\n      }\n\n      if (lovEntry.filterString === undefined) {\n        //After value is added in Array should show correct filter\n        lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n      }\n\n      prop.setLovVal({\n        lovEntry,\n        dataProvider,\n        checkLovEntries,\n        dateApi\n      }, op).then(uiProp => {\n        isValidationInProgress.current = false;\n        let isErrorEncountered = false;\n\n        if (!_.isEmpty(uiProp) && !_.isEmpty(uiProp.error)) {\n          isErrorEncountered = true;\n          searchBoxLOVFilterStr.error = uiProp.error;\n        }\n\n        if (!isErrorEncountered && !(isCheckBoxArryLOV || isArray === true)) {\n          lovPopup.hide();\n        } // record the checked items\n        // propInternalValue may in object\n\n\n        let key = _.isObject(lovEntry.propInternalValue) ? lovEntry.propDisplayValue : lovEntry.propInternalValue;\n\n        if (op === 'checked') {\n          lovEntry.isChecked = true;\n          checkLovEntries.current[key] = lovEntry;\n        } else if (op === 'unchecked') {\n          checkLovEntries.current[key].isChecked = false;\n          delete checkLovEntries.current[key];\n        }\n\n        if (isErrorEncountered) {\n          dispatch({\n            path: 'data.dirty',\n            value: dirty++\n          });\n        }\n      });\n    }\n  };\n\n  const validateLOVEntry = lovEntry => {\n    // This behaviour is only for aw-listbox\".\n    // 1, nothing match\n    if (autoCorrect) {\n      if (validEntries.current.length === 0) {\n        // reverting back the value if incorrect value has typed in\n        const uiValue = prop.value;\n        lovEntry = {\n          propDisplayValue: uiValue,\n          propInternalValue: uiValue\n        };\n      } else if (lovEntryRef.current.lovEntry && lovEntryRef.current.lovEntry.filterString) {\n        // 2, partial match, then take the first\n        lovEntry = validEntries.current[0];\n      }\n\n      storeLatestLOVEntry(lovEntry);\n      prop.setLovVal({\n        lovEntry,\n        dataProvider\n      }, null);\n    } else {\n      if (isPropDateTypeAndNonArray()) {\n        prop.setLovVal({\n          lovEntry,\n          dataProvider,\n          dateApi: prop.fielddata.dateApi\n        }, null);\n      } else {\n        if (isValidationInProgress.current === false) {\n          if (isArrayWithValidateAction) {\n            lovEntry.filteredLOVEntries = getFilteredEntries();\n            prop.setLovVal({\n              lovEntry,\n              dataProvider\n            }, 'validateandadd');\n          } else {\n            //There was no validation action hence validate\n            prop.setLovVal({\n              lovEntry,\n              dataProvider\n            }, 'validate');\n          }\n        }\n      }\n    }\n  };\n  /**\n   * onChangeHandler is invoked, when user manually types-in some value in the LOV textbox.\n   * In that case we need to extract the uivalue and store it as filterStr.\n   * This filterStr would later used to pass to the server or in case of static lov's\n   * (lov's without dataprovider action) filter the result locally.\n   * @param {*} event\n   */\n\n\n  const onChangeHandler = event => {\n    if (isCheckBoxArryLOV) {\n      prop.onChange(event);\n    }\n\n    if (event.target) {\n      field.fielddata.uiValue = event.target.value;\n\n      if (!lovPopup.open) {\n        showPopup(false);\n      }\n\n      let lovEntry = {\n        propDisplayValue: field.fielddata.uiValue,\n        propInternalValue: field.fielddata.uiValue,\n        filterString: field.fielddata.uiValue,\n        isSearchable\n      };\n      prop.setLovVal({\n        lovEntry,\n        dataProvider\n      }, 'filter');\n      storeLatestLOVEntry(lovEntry);\n    }\n  };\n\n  const onFilterChangeHandler = (filter, previous) => {\n    let lovEntry = {\n      propDisplayValue: filter,\n      propInternalValue: filter,\n      filterString: filter,\n      isSearchable\n    };\n    updateInitialDataProviderInfo(initialDataProviderInfo);\n    storeLatestLOVEntry(lovEntry);\n    prop.setLovVal({\n      lovEntry,\n      dataProvider\n    }, 'filter');\n  };\n\n  const onBlurHandler = e => {\n    if (e.target.value === '' && isListbox) {\n      storeLatestLOVEntry(_most_recent_entry);\n    }\n  };\n\n  const isTimeEnteredManually = dateApi => isPropDateTypeAndNonArray() && dateApi && dateApi.isTimeEnabled && dateApi.timeValue;\n\n  const keyPressed = (event, isAddingTypedValue) => {\n    // handle SPACE key\n    if (wcagService.getKeyName(event) === keyCode.SPACE && !lovPopup.open) {\n      event.preventDefault();\n      showPopup();\n      return;\n    }\n\n    let dateApi = prop.fielddata.dateApi;\n\n    if (event.key === keyCode.ENTER || event.type === 'click') {\n      event.preventDefault();\n\n      if (DATE_TYPES.includes(typex) && isValidationErrorVisible() && !props.isListbox) {\n        return;\n      }\n\n      if (lovPopup.open) {\n        // if has any hover item\n        if (isAddingTypedValue !== true && selectIndex.current !== null && validEntries.current && validEntries.current[selectIndex.current] && !isTimeEnteredManually(dateApi)) {\n          let hoverItem = validEntries.current[selectIndex.current];\n\n          if (hoverItem.handleSelection) {\n            hoverItem.handleSelection(event);\n            event.persist();\n            event.target.value = '';\n            return;\n          }\n        } else if (isInValidSearchForExhaustiveLOV()) {\n          //For exhaustive LOV, if there is no filtered value and user hits enter,\n          // simply close popup\n          lovPopup.hide();\n        } else {\n          //Wait for validation to complete before closing popup\n          // the current entry\n          let lovEntry = lovEntryRef.current.lovEntry;\n\n          if (!autoCorrect) {\n            // Below line would cause re-rendering automatically\n            if (isValidationInProgress.current === false) {\n              isValidationInProgress.current = true;\n              lovEntry.filteredLOVEntries = getFilteredEntries();\n              prop.setLovVal({\n                lovEntry,\n                dataProvider,\n                dateApi\n              }, 'validateandadd').then(uiProp => {\n                let isErrorEncountered = false;\n\n                if (!_.isEmpty(uiProp) && !_.isEmpty(uiProp.error)) {\n                  isErrorEncountered = true;\n                  searchBoxLOVFilterStr.error = uiProp.error;\n                }\n\n                if (!isErrorEncountered && !isArray) {\n                  lovPopup.hide();\n                }\n\n                isValidationInProgress.current = false;\n                dispatch({\n                  path: 'data.dirty',\n                  value: dirty++\n                });\n              });\n            }\n\n            event.target.value = '';\n          }\n        }\n      } else {\n        showPopup();\n      }\n    } else {\n      evalKey(event);\n    }\n  };\n\n  const scrollAttention = () => {\n    let chosenElem = dom.get('.aw-list-itemFocused', lovPopup.options.popupReference.current);\n    chosenElem && chosenElem.scrollIntoView && chosenElem.scrollIntoView({\n      block: 'center',\n      behavior: 'smooth'\n    });\n  }; // find the index in the lovEntries array of the value of current attention\n\n\n  const getAttnIndex = function () {\n    let lovEntries = validEntries.current;\n\n    if (lovEntries.length && lovPopup.open) {\n      return lovEntries.map(lovEntry => lovEntry.attn).indexOf(true);\n    }\n  };\n\n  const evalKey = function (event) {\n    let code = event.key || event.code; // recover _most_recent_entry when esc\n\n    if (code === keyCode.ESCAPE && lovPopup.open) {\n      storeLatestLOVEntry(_most_recent_entry);\n      prop.setLovVal({\n        lovEntry: _most_recent_entry\n      });\n    }\n\n    if (code === keyCode.TAB && lovPopup.open) {\n      // on tab, accept the current text, don't auto-complete\n      if (isSelectOnly === true || lovEntryRef.current === null) {\n        //For exhaustive LOVs only hide or if for suggestive user hits tab w/o entering\n        lovPopup.hide();\n      }\n    }\n\n    if (code === keyCode.ARROW_UP || code === keyCode.ARROW_DOWN) {\n      event.stopPropagation();\n      event.cancelBubble = true;\n\n      if (!lovPopup.open) {\n        showPopup();\n        return;\n      }\n\n      var attnIndex = getAttnIndex();\n\n      if (attnIndex < 0) {\n        attnIndex = selectIndex.current || _getDefaultAttention();\n      }\n\n      let lovEntries = validEntries.current;\n\n      if (code === keyCode.ARROW_DOWN) {\n        // down arrow: move the attention down\n        if (lovEntries.length > attnIndex + 1) {\n          lovEntries[attnIndex].attn = false;\n          lovEntries[attnIndex + 1].attn = true;\n          selectIndex.current = attnIndex + 1;\n        }\n      } else {\n        // up arrow\n        if (attnIndex > 0) {\n          lovEntries[attnIndex].attn = false;\n          lovEntries[attnIndex - 1].attn = true;\n          selectIndex.current = attnIndex - 1;\n        }\n      } // trigger UI update and scrollAttention\n\n\n      dispatch({\n        path: 'data.dirty',\n        value: dirty++\n      });\n      scrollAttention();\n    }\n  }; // syncLovEntries\n\n\n  const updateValidEntries = entries => {\n    validEntries.current = entries || [];\n  };\n\n  const handleClick = event => {\n    if (event.key === keyCode.ENTER || event.type === 'click') {\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (!lovPopup.open) {\n        showPopup(true);\n      } else {\n        lovPopup.hide();\n      }\n    }\n  };\n\n  if (prop.parentSelected === undefined && parentSelectedHandled === true) {\n    dispatch({\n      path: 'data.parentSelectedHandled',\n      value: undefined\n    });\n  }\n\n  if (prop.parentSelected && parentSelectedHandled === undefined) {\n    handleClick(event);\n    dispatch({\n      path: 'data.parentSelectedHandled',\n      value: true\n    });\n  }\n\n  let uiValue = field.fielddata.uiValue;\n  let classes = [];\n  let DATE_TYPES = ['DATETIME', 'DATEARRAY', 'DATE'];\n  classes.push(getValClass(prop));\n  let iconId = null;\n  let timeClassName = '';\n\n  if (prop.fielddata.dateApi && prop.fielddata.dateApi.isNotLov && DATE_TYPES.includes(typex)) {\n    uiValue = prop.fielddata.dateApi.timeValue;\n    iconId = 'cmdTime';\n    timeClassName = 'sw-time-lov-val';\n  } else {\n    iconId = 'miscSortedDescending';\n  } // If the LOV does not have any dataProvider action, then only we will consider it as client side filtering.\n  // This is as per the current afx-master logic.\n  // If it is checkboxArray LOV with hint 'checkboxoptionlov', then the data.searchBoxLOVFilterStr.uiValue\n  // would be considered as the filterString.\n\n\n  if (isCheckBoxArryLOV && fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.fielddata) {\n    staticFilterStr = fields.searchBoxLOVFilterStr.fielddata.uiValue;\n  } else if (!isCheckBoxArryLOV && lovEntryRef.current && lovEntryRef.current.lovEntry) {\n    staticFilterStr = lovEntryRef.current.lovEntry.filterString;\n\n    if (isValidationErrorVisible() && !prop.isListbox && !isArrayWithValidateAction) {\n      lovEntryRef.current.lovEntry.filterString = null;\n      staticFilterStr = null;\n    }\n  }\n\n  const renderChildComponent = () => isCheckBoxArryLOV ? /*#__PURE__*/_jsxDEV(AwPropertyCheckboxLovChild, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 60\n  }, this) : /*#__PURE__*/_jsxDEV(AWPropertyLovChild, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 93\n  }, this); // listbox don't have the blank entry, hence start  with 0\n  // other lovs have a blank entry, hence start with 1\n\n\n  const _getDefaultAttention = () => prop.fielddata.emptyLOVEntry === false ? 0 : 1;\n\n  const getDefaultAttention = () => {\n    let lovEntries = validEntries.current;\n    let defaultAttnStr = fields.searchBoxLOVFilterStr.dirty === 'true' ? fields.searchBoxLOVFilterStr.fielddata.uiValue : uiValue;\n    let result = lovEntries.map(item => item.propDisplayValue).indexOf(defaultAttnStr);\n    return result > -1 ? result : _getDefaultAttention();\n  };\n\n  let getErrorLabelProp = () => {\n    return { ...prop,\n      className: 'aw-jswidgets-cbaSearch',\n      required: false,\n      displayErrorLabel: false,\n      error: [searchBoxLOVFilterStr.error]\n    };\n  };\n\n  let addButtonClick = event => {\n    //Add button is displayed for suggestive LOV only hence when user cliks AddButton, add typed value and not from selected list\n    let isAddingTypedValue = true;\n    keyPressed(event, isAddingTypedValue);\n  };\n\n  let onButtonBlur = event => {\n    //Check on Blur if it does not go to input ( previous to add button) element\n    if (event.relatedTarget && event.relatedTarget.tagName !== 'INPUT') {\n      lovPopup.hide();\n    }\n  };\n\n  let onSearchBoxKeyDown = event => {\n    // if LOV is exhaustive/suggestive, onEnter --> isAddingTypedValue = false\n    let isAddingTypedValue = event.key !== keyCode.ENTER;\n    keyPressed(event, isAddingTypedValue); // enter keyboard mode regardless of key pressed?\n    // needed to pass tests atm, discuss with ux\n\n    document.body.classList.add('keyboard');\n  };\n\n  const isAddButtonDisabled = () => {\n    let isDisabled = _.isEmpty(fields.searchBoxLOVFilterStr.value);\n\n    let isValidEntry = validEntries.current !== null && validEntries.current.length > 0 && selectIndex.current !== null && !_.isUndefined(validEntries.current[selectIndex.current].propDisplayValue);\n\n    if (isValidEntry && fields.searchBoxLOVFilterStr.value === validEntries.current[selectIndex.current].propDisplayValue) {\n      isDisabled = true;\n    }\n\n    return isDisabled;\n  };\n\n  const generateContent = () => {\n    let content = /*#__PURE__*/_jsxDEV(AWLovList, {\n      context: props // syncLovEntries={syncLovEntries}\n      ,\n      blankLovEntry: blankLovEntry,\n      action: action,\n      lovlist: \"true\",\n      field: field,\n      dataProvider: dataProvider,\n      staticFilterStr: staticFilterStr,\n      updateValidEntries: updateValidEntries,\n      autoCorrect: autoCorrect,\n      lovPopup: lovPopup,\n      isCheckBoxArryLOV: isCheckBoxArryLOV,\n      selectIndex: selectIndex,\n      getDefaultAttention: getDefaultAttention,\n      checkLovEntries: checkLovEntries,\n      setlovEntry: (selLovEntry, event, op) => {\n        setLovEntryAndClose(selLovEntry, event, op, false);\n      },\n      children: renderChildComponent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 23\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: (isCheckBoxArryLOV ? 'aw-checkboxarray-lovParent ' : '') + 'sw-lov-contentContainer',\n      children: [!DATE_TYPES.includes(typex) && isSearchable && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: (_.isEmpty(searchBoxLOVFilterStr.error) ? '' : 'sw-errorFlag ') + 'aw-jswidgets-cbaSearch aw-widget-iconParent sw-lov-textbox-container sw-noDirtyStyle',\n        children: [/*#__PURE__*/_jsxDEV(AwTextBoxVal, { ...Object.assign({}, fields.searchBoxLOVFilterStr, {\n            autocomplete: 'off',\n            autocorrect: 'off',\n            autocapitalize: 'off'\n          }),\n          ...generateFilterProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 21\n        }, this), isSelectOnly || isCheckBoxArryLOV ? /*#__PURE__*/_jsxDEV(AwIcon, {\n          iconId: \"cmdSearch\",\n          className: \"aw-widget-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 59\n        }, this) : /*#__PURE__*/_jsxDEV(AwButton, {\n          onBlur: onButtonBlur,\n          className: isAddButtonDisabled() ? 'disabled' : '',\n          action: addButtonClick,\n          children: props.i18n.ADD_BUTTON_TITLE\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 17\n      }, this), !_.isEmpty(searchBoxLOVFilterStr.error) && /*#__PURE__*/_jsxDEV(AwPropertyLabel, { ...getErrorLabelProp()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 60\n      }, this), content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 16\n    }, this);\n  };\n\n  const hasUserTypedAValue = () => {\n    return lovEntryRef.current && lovEntryRef.current.lovEntry && (lovEntryRef.current.lovEntry.filterString || typeof lovEntryRef.current.lovEntry.propInternalValue === 'string');\n  };\n\n  const getValueIfUserTypedTime = () => hasUserTypedAValue() ? uiValue : '';\n\n  const generateDateArrayLOVContent = () => {\n    let { ...restGeneratedProps\n    } = generateProps;\n    let dateProps = {\n      onClick: handleClick,\n      onChange: onChangeHandler,\n      dirty: prop.dirty,\n      onKeyDown: keyPressed\n    };\n    let allProps = { ...restGeneratedProps,\n      ...dateProps\n    };\n    return isValidationErrorVisible() && !prop.isListbox ? /*#__PURE__*/_jsxDEV(\"input\", { ...allProps,\n      value: uiValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", { ...allProps,\n      value: field.fielddata.isArray ? getValueIfUserTypedTime() : uiValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 13\n    }, this);\n  }; // lov select field\n\n\n  const generateProps = {\n    'aria-label': prop.label,\n    'data-locator': prop.label,\n    'aria-required': prop.isRequired,\n    className: classes.join(' '),\n    onBlur: onBlurHandler,\n    type: 'text',\n    placeholder: field.placeholder,\n    ref: lovPopup.reference,\n    dirty: prop.dirty,\n    onClick: handleClick,\n    onKeyDown: keyPressed,\n    disabled: prop.disabled\n  }; // lov filter field\n  // TODO: i18n on placeholder and use unique label/locator\n\n  const generateFilterProps = {\n    'aria-label': prop.label,\n    'data-locator': prop.label,\n    className: classes.join(' '),\n    onSwChange: onFilterChangeHandler,\n    type: 'text',\n    placeholder: isSelectOnly ? 'Search' : 'Search or Create',\n    ref: lovPopup.reference,\n    dirty: false,\n    onKeyDown: onSearchBoxKeyDown,\n    disabled: prop.disabled\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sw-lov-container\",\n    children: [/*#__PURE__*/_jsxDEV(AwPic, {\n      className: \"sw-lov-thumb\",\n      iconId: field.fielddata.iconName,\n      source: field.fielddata.iconSource\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 13\n    }, this), DATE_TYPES.includes(typex) && generateDateArrayLOVContent(), !DATE_TYPES.includes(typex) && /*#__PURE__*/_jsxDEV(\"input\", { ...generateProps,\n      value: isArray && !isCheckBoxArryLOV ? null : uiValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 48\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: prop.disabled ? 'sw-widget-iconContainer disabled' : 'sw-widget-iconContainer',\n      role: \"button\",\n      \"aria-label\": prop.name,\n      tabIndex: \"-1\",\n      onKeyDown: keyPressed,\n      onClick: handleClick,\n      children: /*#__PURE__*/_jsxDEV(AwIcon, {\n        iconId: iconId,\n        className: 'aw-widget-icon ' + timeClassName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AwPopup, { ...lovPopup.options,\n      className: \"sw-lov-popup\",\n      children: [\" \", generateContent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 659,\n    columnNumber: 9\n  }, this);\n};\nexport const onMount = (prop, elementRefList) => {\n  let field = prop.fielddata;\n  const hint = field.renderingHint;\n  const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n  let values = prop.value;\n\n  if (isCheckBoxArryLOV) {\n    let checkLovEntries = elementRefList.get('checkLovEntries');\n    checkLovEntries.current = {};\n\n    if (values && values.length > 0) {\n      // we create placeHolders based on the default prop values\n      // generate place-holder array for selected values that may or may not be loaded\n      checkLovEntries.current = _.reduce(values, (result, value, inx) => {\n        let disp = field.uiValues[inx] || field.displayValues[inx] || value;\n        let item = {\n          propDisplayValue: disp,\n          propInternalValue: value,\n          isChecked: true\n        };\n        let key = _.isObject(value) ? disp : value;\n        result[key] = item;\n        return result;\n      }, {});\n    }\n  }\n}; // clear internal states when prop value was cleared\n\nexport const updateCheckLovEntries = (prop, elementRefList) => {\n  let field = prop.fielddata;\n  const hint = field.renderingHint;\n  const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n\n  if (isCheckBoxArryLOV) {\n    let checkLovEntries = elementRefList.get('checkLovEntries');\n    let values = prop.value; // clear case\n\n    if (!values || values.length === 0) {\n      checkLovEntries.current = {};\n    } // async set initial values\n\n\n    if (values.length > 0) {\n      if (!checkLovEntries.current) {\n        checkLovEntries.current = {};\n      }\n\n      let checked = checkLovEntries.current; // update checkLovEntries based on values,\n      // case application set the values programly\n\n      _.reduce(values, (result, value, inx) => {\n        let disp = field.uiValues[inx] || field.displayValues[inx] || value;\n        let key = _.isObject(value) ? disp : value;\n\n        if (!checked[key]) {\n          checked[key] = {\n            propDisplayValue: disp,\n            propInternalValue: value,\n            isChecked: true\n          };\n        }\n      }, {});\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwPropertyLovValService.js"],"names":["DOMAPIs","MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV","setInitialDataProviderInfo","initialLength","dataProvider","initialDataProviderInfo","_","initalPrePoulatedDataLen","popupOpen","initialInfo","initialTotalFound","getSelectOnlyAndSearchableFlags","isSelectOnly","prop","isSearchable","hideFilter","updateInitialDataProviderInfo","awLovValRenderFunction","props","field","isListbox","data","parentSelectedHandled","dispatch","selectIndex","elementRefList","checkLovEntries","isValidationInProgress","dynProvider","getFilteredEntries","propInternalValue","hint","typex","isCheckBoxArryLOV","isArray","lovEntryRef","actions","staticFilterStr","validEntries","lovPopup","overridePopupOptions","result","width","autoFocus","isPropDateTypeAndNonArray","DATE_TYPES","isInValidSearchForExhaustiveLOV","isArrayWithValidateAction","isValidationErrorVisible","resetFilterStr","lovEntry","hooks","whenOpened","searchBoxLOVFilterStr","whenClosed","popupRef","validateLOVEntry","fields","showPopup","resetFilter","recent_entry","propDisplayValue","value","path","storeLatestLOVEntry","setLovEntryAndClose","dateApi","event","receivedLOVEntry","op","isAddingTypedValue","uiProp","isErrorEncountered","key","dirty","uiValue","onChangeHandler","filterString","onFilterChangeHandler","onBlurHandler","e","isTimeEnteredManually","keyPressed","wcagService","keyCode","hoverItem","evalKey","scrollAttention","chosenElem","dom","block","behavior","getAttnIndex","lovEntries","code","_most_recent_entry","attnIndex","_getDefaultAttention","updateValidEntries","entries","handleClick","undefined","classes","getValClass","iconId","timeClassName","renderChildComponent","getDefaultAttention","defaultAttnStr","item","getErrorLabelProp","className","required","displayErrorLabel","error","addButtonClick","onButtonBlur","onSearchBoxKeyDown","document","isAddButtonDisabled","isDisabled","isValidEntry","generateContent","content","autocomplete","autocorrect","autocapitalize","generateFilterProps","ADD_BUTTON_TITLE","hasUserTypedAValue","getValueIfUserTypedTime","generateDateArrayLOVContent","restGeneratedProps","dateProps","onClick","onChange","onKeyDown","allProps","generateProps","onBlur","type","placeholder","ref","disabled","onSwChange","iconSource","onMount","values","disp","isChecked","updateCheckLovEntries","checked"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable complexity */\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwIcon from 'viewmodel/AwIconViewModel';\nimport AWLovList from 'viewmodel/AwLovListViewModel';\nimport AWPropertyLovChild from 'viewmodel/AwPropertyLovChildViewModel';\nimport AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';\nimport AwTextBoxVal from 'viewmodel/AwTextBoxValViewModel';\nimport { getValClass } from 'js/componentUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport keyCode from 'js/keyCode';\nimport _ from 'lodash';\nimport wcagService from 'js/wcagService';\nimport AwButton from 'viewmodel/AwButtonViewModel';\nimport AwPropertyLabel from 'viewmodel/AwPropertyLabelViewModel';\nimport AwPic from 'viewmodel/AwPicViewModel';\n\nconst MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV = 5;\n\n//Sets totalNumber of objects in dataprovider before filter and lovUsage ( exhaustive/suggestive )\nconst setInitialDataProviderInfo = ( dataProvider, initialDataProviderInfo, popupOpen ) => {\n    let initialLength = 0;\n    if( dataProvider.viewModelCollection && dataProvider.viewModelCollection.loadedVMObjects.length > 0 ) {\n        initialLength = dataProvider.viewModelCollection.loadedVMObjects.length;\n    } else if( initialLength === 0 && dataProvider.vmCollectionObj && dataProvider.vmCollectionObj.vmCollection && dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length > 0 ) {\n        initialLength = dataProvider.vmCollectionObj.vmCollection.loadedVMObjects.length;\n    }\n\n    if( initialDataProviderInfo.current === null && ( initialLength > 0 || !_.isUndefined( dataProvider.lovUsage ) ) ) {\n        //Get length of objects on initialload - we cant use totalFound because\n        //totalFound changes as we filter and some implementation does not have totalFound populated\n        let initalPrePoulatedDataLen = initialLength > 0 && popupOpen === undefined ? initialLength : undefined;\n        let initialInfo = {\n            initialTotalFound: initialLength,\n            initalPrePoulatedDataLen\n        };\n        if( dataProvider.hasOwnProperty( 'lovUsage' ) && dataProvider.lovUsage === 'SUGGESTIVE_LOV' ) {\n            initialInfo.lovUsage = 'SUGGESTIVE_LOV';\n        }\n        initialDataProviderInfo.current = initialInfo;\n    }\n    if( initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen !== undefined &&\n        initialDataProviderInfo.current.initalPrePoulatedDataLen !== initialLength && initialLength > 0 ) {\n        //When popup opens and new initialLength is populated then update initialTotalFound\n        delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n        initialDataProviderInfo.current.initialTotalFound = initialLength;\n    }\n};\n\n// Gets isSearchable and isSelectOnly flag which is helped to decide LOV UI and behaviors\nconst getSelectOnlyAndSearchableFlags = ( prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter ) => {\n    // isSelectOnly: true = exhaustive list; false = non-list val can be suggested\n    let isSelectOnly = _.isUndefined( prop.fielddata.isSelectOnly ) ? true : prop.fielddata.isSelectOnly;\n\n    if( initialDataProviderInfo.current && !_.isUndefined( initialDataProviderInfo.current.lovUsage ) && initialDataProviderInfo.current.lovUsage === 'SUGGESTIVE_LOV' ) {\n        isSelectOnly = false;\n    }\n\n    let initialTotalFound = initialDataProviderInfo.current === null || initialDataProviderInfo.current.initialTotalFound === undefined ? 0 : initialDataProviderInfo.current.initialTotalFound;\n\n    // Based on PO input, we have to display filter Box if no of values are more than 5\n    const isSearchable = isSelectOnly === false || isCheckBoxArryLOV || isSelectOnly === true && hideFilter === false ? true :\n        initialTotalFound > MIN_LENGTH_TO_DISPLAY_FILTER_FOR_EXHAUSTIVE_LOV;\n\n    return { isSelectOnly, isSearchable };\n};\n\nconst updateInitialDataProviderInfo = ( initialDataProviderInfo ) => {\n    //If initalPrePoulatedDataLen still exists after popup open, we need to delete this as it is no more releavant\n    // This can happen if initalPrePoulatedDataLen ===  dataProvider.len when popup is opened\n    //If this is not updated then during filter isSearchable flag which depends on dataProvider.len gives false result\n    if( initialDataProviderInfo.current && initialDataProviderInfo.current.initalPrePoulatedDataLen ) {\n        delete initialDataProviderInfo.current.initalPrePoulatedDataLen;\n    }\n};\n/**\n * render function for AwLovVal\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awLovValRenderFunction = ( props ) => {\n    const {\n        actions,\n        fields,\n        elementRefList,\n        autoCorrect,\n        action,\n        viewModel,\n        hideFilter,\n        ...prop\n    } = props;\n\n    const field = prop;\n    const { isListbox } = props;\n    let { data: { blankLovEntry, dirty, _most_recent_entry, parentSelectedHandled }, searchBoxLOVFilterStr, dispatch } = viewModel;\n\n    const selectIndex = elementRefList.get( 'selectIndex' );\n    const checkLovEntries = elementRefList.get( 'checkLovEntries' );\n    const isValidationInProgress = elementRefList.get( 'isValidationInProgress' );\n    const initialDataProviderInfo = elementRefList.get( 'initialDataProviderInfo' );\n    const dynProvider = elementRefList.get( 'dynDataprovider' );\n    let dataProvider = field.fielddata.dataProvider ? field.fielddata.dataProvider : dynProvider && dynProvider.current;\n\n    let getFilteredEntries = () => validEntries.current.map( ( { propDisplayValue, propInternalValue } ) => {\n        return { propDisplayValue, propInternalValue };\n    } );\n\n    const hint = prop.fielddata.renderingHint;\n    const typex = prop.typex;\n    const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n    const isArray = prop.fielddata.isArray;\n\n    if( !dataProvider ) {\n        return;\n    }\n\n    //zarq9k: This would be cleaned up when we have the infrastruture to pass ref from viewmodel.\n    let lovEntryRef = dataProvider.getLovEntryRef();\n    setInitialDataProviderInfo( dataProvider, initialDataProviderInfo, actions.lovPopup.open );\n\n    let { isSelectOnly, isSearchable } = getSelectOnlyAndSearchableFlags( prop, initialDataProviderInfo, isCheckBoxArryLOV, hideFilter );\n\n    let staticFilterStr = null;\n    let validEntries = elementRefList.get( 'validEntries' );\n    let { lovPopup } = actions;\n\n    // provide application opportunity to override the size\n    let overridePopupOptions = () => {\n        let result = { width: lovPopup.reference.current.offsetWidth, autoFocus: true };\n        prop.maxHeight && ( result.maxHeight = prop.maxHeight );\n        return result;\n    };\n\n    let isPropDateTypeAndNonArray = () => typex && DATE_TYPES.includes( typex ) && !prop.fielddata.isArray;\n    let isInValidSearchForExhaustiveLOV = () => !DATE_TYPES.includes( typex ) && selectIndex.current === null && isSelectOnly === true;\n\n    let isArrayWithValidateAction = prop.fielddata.isArray && !_.isEmpty( dataProvider.validateAction ) && !isCheckBoxArryLOV;\n    let isValidationErrorVisible = () => props.error && props.error.length > 0;\n\n    const resetFilterStr = () => {\n        if( lovEntryRef.current && lovEntryRef.current.lovEntry ) {\n            lovEntryRef.current.lovEntry.filterString = null;\n        }\n        prop.setLovVal( { lovEntry: null }, 'resetFilterStr' );\n    };\n\n    let hooks = {\n        whenOpened: () => {\n            isValidationInProgress.current = false;\n            searchBoxLOVFilterStr.error = null;\n        },\n        whenClosed: ( popupRef ) => {\n            // TODO: add comment explaining why validate is needed or not needed here\n            if( ( isCheckBoxArryLOV || DATE_TYPES.includes( typex ) ) && lovEntryRef.current && lovEntryRef.current.lovEntry ) {\n                validateLOVEntry( lovEntryRef.current.lovEntry );\n            }\n\n            resetFilterStr();\n            // reset searchBoxLOVFilterStr\n            fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.update( null );\n            lovEntryRef.current = null;\n        }\n    };\n\n    const showPopup = ( resetFilter = true ) => {\n        // case1: normal show, we want a reset each time.\n        // case2: filter change - onChangeHandler, don't want a reset\n        if( resetFilter ) {\n            resetFilterStr();\n\n            // save the original, used to recover when esc\n            let recent_entry = {\n                propDisplayValue: field.fielddata.uiValue,\n                propInternalValue: prop.value\n            };\n            dispatch( { path: 'data._most_recent_entry', value: recent_entry } );\n        }\n\n        lovPopup.show( {\n            hooks,\n            ...overridePopupOptions()\n        } );\n    };\n\n    const storeLatestLOVEntry = ( lovEntry ) => {\n        if( lovEntryRef.current ) {\n            lovEntryRef.current.lovEntry = lovEntry;\n        } else {\n            lovEntryRef.current = { lovEntry };\n        }\n    };\n\n    // This function would be invoked when some value has been selected from the dropdown popup\n    const setLovEntryAndClose = ( receivedLOVEntry, event, op, isAddingTypedValue ) => {\n        storeLatestLOVEntry( receivedLOVEntry );\n        let dateApi = null;\n        if( prop.fielddata.dateApi ) {\n            dateApi = prop.fielddata.dateApi;\n        }\n\n        if( dateApi && dateApi.isDateEnabled && dateApi.isTimeEnabled && prop.fielddata.isArray ) {\n            //If date and time enabled and if its array update only after time is selected\n            prop.onTimeSelectedOrEntered( event.target.value || receivedLOVEntry.propInternalValue );\n            lovPopup.hide();\n        } else {\n            receivedLOVEntry.filteredLOVEntries = getFilteredEntries();\n            if( !DATE_TYPES.includes( typex ) && !isCheckBoxArryLOV ) {\n                op = 'validateandadd';\n                //For array vaidation is in progress for other it is not\n                isValidationInProgress.current = true;\n            }\n            let lovEntry = receivedLOVEntry;\n            if( isAddingTypedValue === true ) {\n                // If isAddingTypedValue === true means user is adding typed value and not from selected list\n                // lovEntry is what user has typed in and not from the list displayed in popup\n                lovEntry = { ...receivedLOVEntry };\n                lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n                lovEntry.propInternalValue = searchBoxLOVFilterStr.dbValue;\n                lovEntry.propDisplayValue = searchBoxLOVFilterStr.dbValue;\n            }\n            if( lovEntry.filterString === undefined ) {\n                //After value is added in Array should show correct filter\n                lovEntry.filterString = searchBoxLOVFilterStr.dbValue;\n            }\n            prop.setLovVal( { lovEntry, dataProvider, checkLovEntries, dateApi }, op )\n                .then( ( uiProp ) => {\n                    isValidationInProgress.current = false;\n                    let isErrorEncountered = false;\n                    if( !_.isEmpty( uiProp ) && !_.isEmpty( uiProp.error ) ) {\n                        isErrorEncountered = true;\n                        searchBoxLOVFilterStr.error = uiProp.error;\n                    }\n                    if( !isErrorEncountered && !( isCheckBoxArryLOV || isArray === true ) ) {\n                        lovPopup.hide();\n                    }\n\n                    // record the checked items\n                    // propInternalValue may in object\n                    let key = _.isObject( lovEntry.propInternalValue ) ? lovEntry.propDisplayValue : lovEntry.propInternalValue;\n                    if( op === 'checked' ) {\n                        lovEntry.isChecked = true;\n                        checkLovEntries.current[ key ] = lovEntry;\n                    } else if( op === 'unchecked' ) {\n                        checkLovEntries.current[ key ].isChecked = false;\n                        delete checkLovEntries.current[ key ];\n                    }\n                    if( isErrorEncountered ) {\n                        dispatch( { path: 'data.dirty', value: dirty++ } );\n                    }\n                } );\n        }\n    };\n\n    const validateLOVEntry = ( lovEntry ) => {\n        // This behaviour is only for aw-listbox\".\n        // 1, nothing match\n        if( autoCorrect ) {\n            if( validEntries.current.length === 0 ) {\n                // reverting back the value if incorrect value has typed in\n                const uiValue = prop.value;\n                lovEntry = {\n                    propDisplayValue: uiValue,\n                    propInternalValue: uiValue\n                };\n            } else if( lovEntryRef.current.lovEntry && lovEntryRef.current.lovEntry.filterString ) {\n                // 2, partial match, then take the first\n                lovEntry = validEntries.current[ 0 ];\n            }\n            storeLatestLOVEntry( lovEntry );\n\n            prop.setLovVal( { lovEntry, dataProvider }, null );\n        } else {\n            if( isPropDateTypeAndNonArray() ) {\n                prop.setLovVal( { lovEntry, dataProvider, dateApi: prop.fielddata.dateApi }, null );\n            } else {\n                if( isValidationInProgress.current === false ) {\n                    if( isArrayWithValidateAction ) {\n                        lovEntry.filteredLOVEntries = getFilteredEntries();\n                        prop.setLovVal( { lovEntry, dataProvider }, 'validateandadd' );\n                    } else {\n                        //There was no validation action hence validate\n                        prop.setLovVal( { lovEntry, dataProvider }, 'validate' );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * onChangeHandler is invoked, when user manually types-in some value in the LOV textbox.\n     * In that case we need to extract the uivalue and store it as filterStr.\n     * This filterStr would later used to pass to the server or in case of static lov's\n     * (lov's without dataprovider action) filter the result locally.\n     * @param {*} event\n     */\n    const onChangeHandler = ( event ) => {\n        if( isCheckBoxArryLOV ) {\n            prop.onChange( event );\n        }\n        if( event.target ) {\n            field.fielddata.uiValue = event.target.value;\n            if( !lovPopup.open ) {\n                showPopup( false );\n            }\n            let lovEntry = {\n                propDisplayValue: field.fielddata.uiValue,\n                propInternalValue: field.fielddata.uiValue,\n                filterString: field.fielddata.uiValue,\n                isSearchable\n            };\n            prop.setLovVal( { lovEntry, dataProvider }, 'filter' );\n            storeLatestLOVEntry( lovEntry );\n        }\n    };\n\n    const onFilterChangeHandler = ( filter, previous ) => {\n        let lovEntry = {\n            propDisplayValue: filter,\n            propInternalValue: filter,\n            filterString: filter,\n            isSearchable\n        };\n        updateInitialDataProviderInfo( initialDataProviderInfo );\n        storeLatestLOVEntry( lovEntry );\n        prop.setLovVal( { lovEntry, dataProvider }, 'filter' );\n    };\n\n    const onBlurHandler = ( e ) => {\n        if( e.target.value === '' && isListbox ) {\n            storeLatestLOVEntry( _most_recent_entry );\n        }\n    };\n\n    const isTimeEnteredManually = ( dateApi ) => isPropDateTypeAndNonArray() && dateApi && dateApi.isTimeEnabled && dateApi.timeValue;\n\n    const keyPressed = ( event, isAddingTypedValue ) => {\n        // handle SPACE key\n        if( wcagService.getKeyName( event ) === keyCode.SPACE && !lovPopup.open ) {\n            event.preventDefault();\n            showPopup();\n            return;\n        }\n        let dateApi = prop.fielddata.dateApi;\n        if( event.key === keyCode.ENTER || event.type === 'click' ) {\n            event.preventDefault();\n            if( DATE_TYPES.includes( typex ) && isValidationErrorVisible() && !props.isListbox ) {\n                return;\n            }\n            if( lovPopup.open ) {\n                // if has any hover item\n                if( isAddingTypedValue !== true && selectIndex.current !== null && validEntries.current && validEntries.current[ selectIndex.current ] && !isTimeEnteredManually( dateApi ) ) {\n                    let hoverItem = validEntries.current[ selectIndex.current ];\n                    if( hoverItem.handleSelection ) {\n                        hoverItem.handleSelection( event );\n                        event.persist();\n                        event.target.value = '';\n                        return;\n                    }\n                } else if( isInValidSearchForExhaustiveLOV() ) {\n                    //For exhaustive LOV, if there is no filtered value and user hits enter,\n                    // simply close popup\n                    lovPopup.hide();\n                } else {\n                    //Wait for validation to complete before closing popup\n                    // the current entry\n                    let lovEntry = lovEntryRef.current.lovEntry;\n\n                    if( !autoCorrect ) {\n                        // Below line would cause re-rendering automatically\n                        if( isValidationInProgress.current === false ) {\n                            isValidationInProgress.current = true;\n                            lovEntry.filteredLOVEntries = getFilteredEntries();\n                            prop.setLovVal( { lovEntry, dataProvider, dateApi }, 'validateandadd' ).then( ( uiProp ) => {\n                                let isErrorEncountered = false;\n                                if( !_.isEmpty( uiProp ) && !_.isEmpty( uiProp.error ) ) {\n                                    isErrorEncountered = true;\n                                    searchBoxLOVFilterStr.error = uiProp.error;\n                                }\n                                if( !isErrorEncountered && !isArray ) {\n                                    lovPopup.hide();\n                                }\n                                isValidationInProgress.current = false;\n                                dispatch( { path: 'data.dirty', value: dirty++ } );\n                            } );\n                        }\n                        event.target.value = '';\n                    }\n                }\n            } else {\n                showPopup();\n            }\n        } else {\n            evalKey( event );\n        }\n    };\n\n    const scrollAttention = () => {\n        let chosenElem = dom.get( '.aw-list-itemFocused', lovPopup.options.popupReference.current );\n        chosenElem && chosenElem.scrollIntoView && chosenElem.scrollIntoView( {\n            block: 'center',\n            behavior: 'smooth'\n        } );\n    };\n\n    // find the index in the lovEntries array of the value of current attention\n    const getAttnIndex = function() {\n        let lovEntries = validEntries.current;\n        if( lovEntries.length && lovPopup.open ) {\n            return lovEntries.map( ( lovEntry ) => lovEntry.attn ).indexOf( true );\n        }\n    };\n\n    const evalKey = function( event ) {\n        let code = event.key || event.code;\n\n        // recover _most_recent_entry when esc\n        if( code === keyCode.ESCAPE && lovPopup.open ) {\n            storeLatestLOVEntry( _most_recent_entry );\n            prop.setLovVal( { lovEntry: _most_recent_entry } );\n        }\n\n        if( code === keyCode.TAB && lovPopup.open ) {\n            // on tab, accept the current text, don't auto-complete\n            if( isSelectOnly === true || lovEntryRef.current === null ) {\n                //For exhaustive LOVs only hide or if for suggestive user hits tab w/o entering\n                lovPopup.hide();\n            }\n        }\n        if( code === keyCode.ARROW_UP || code === keyCode.ARROW_DOWN ) {\n            event.stopPropagation();\n            event.cancelBubble = true;\n\n            if( !lovPopup.open ) {\n                showPopup();\n                return;\n            }\n\n            var attnIndex = getAttnIndex();\n            if( attnIndex < 0 ) {\n                attnIndex = selectIndex.current || _getDefaultAttention();\n            }\n\n            let lovEntries = validEntries.current;\n            if( code === keyCode.ARROW_DOWN ) {\n                // down arrow: move the attention down\n                if( lovEntries.length > attnIndex + 1 ) {\n                    lovEntries[ attnIndex ].attn = false;\n                    lovEntries[ attnIndex + 1 ].attn = true;\n                    selectIndex.current = attnIndex + 1;\n                }\n            } else {\n                // up arrow\n                if( attnIndex > 0 ) {\n                    lovEntries[ attnIndex ].attn = false;\n                    lovEntries[ attnIndex - 1 ].attn = true;\n                    selectIndex.current = attnIndex - 1;\n                }\n            }\n\n            // trigger UI update and scrollAttention\n            dispatch( { path: 'data.dirty', value: dirty++ } );\n            scrollAttention();\n        }\n    };\n\n    // syncLovEntries\n    const updateValidEntries = ( entries ) => {\n        validEntries.current = entries || [];\n    };\n\n    const handleClick = ( event ) => {\n        if( event.key === keyCode.ENTER || event.type === 'click' ) {\n            event.stopPropagation();\n            event.preventDefault();\n            if( !lovPopup.open ) {\n                showPopup( true );\n            } else {\n                lovPopup.hide();\n            }\n        }\n    };\n\n    if( prop.parentSelected === undefined && parentSelectedHandled === true ) {\n        dispatch( { path: 'data.parentSelectedHandled', value: undefined } );\n    }\n    if( prop.parentSelected && parentSelectedHandled === undefined ) {\n        handleClick( event );\n        dispatch( { path: 'data.parentSelectedHandled', value: true } );\n    }\n\n    let uiValue = field.fielddata.uiValue;\n    let classes = [];\n    let DATE_TYPES = [ 'DATETIME', 'DATEARRAY', 'DATE' ];\n    classes.push( getValClass( prop ) );\n    let iconId = null;\n    let timeClassName = '';\n    if( prop.fielddata.dateApi && prop.fielddata.dateApi.isNotLov && DATE_TYPES.includes( typex ) ) {\n        uiValue = prop.fielddata.dateApi.timeValue;\n        iconId = 'cmdTime';\n        timeClassName = 'sw-time-lov-val';\n    } else {\n        iconId = 'miscSortedDescending';\n    }\n\n    // If the LOV does not have any dataProvider action, then only we will consider it as client side filtering.\n    // This is as per the current afx-master logic.\n    // If it is checkboxArray LOV with hint 'checkboxoptionlov', then the data.searchBoxLOVFilterStr.uiValue\n    // would be considered as the filterString.\n    if( isCheckBoxArryLOV && fields.searchBoxLOVFilterStr && fields.searchBoxLOVFilterStr.fielddata ) {\n        staticFilterStr = fields.searchBoxLOVFilterStr.fielddata.uiValue;\n    } else if( !isCheckBoxArryLOV && lovEntryRef.current && lovEntryRef.current.lovEntry ) {\n        staticFilterStr = lovEntryRef.current.lovEntry.filterString;\n        if( isValidationErrorVisible() && !prop.isListbox && !isArrayWithValidateAction ) {\n            lovEntryRef.current.lovEntry.filterString = null;\n            staticFilterStr = null;\n        }\n    }\n\n    const renderChildComponent = () => isCheckBoxArryLOV ? <AwPropertyCheckboxLovChild /> : <AWPropertyLovChild />;\n\n    // listbox don't have the blank entry, hence start  with 0\n    // other lovs have a blank entry, hence start with 1\n    const _getDefaultAttention = () => prop.fielddata.emptyLOVEntry === false ? 0 : 1;\n\n    const getDefaultAttention = () => {\n        let lovEntries = validEntries.current;\n        let defaultAttnStr = fields.searchBoxLOVFilterStr.dirty === 'true' ? fields.searchBoxLOVFilterStr.fielddata.uiValue : uiValue;\n        let result = lovEntries.map( ( item ) => item.propDisplayValue ).indexOf( defaultAttnStr );\n        return result > -1 ? result : _getDefaultAttention();\n    };\n\n    let getErrorLabelProp = () => {\n        return { ...prop, className: 'aw-jswidgets-cbaSearch', required: false, displayErrorLabel: false, error: [ searchBoxLOVFilterStr.error ] };\n    };\n\n    let addButtonClick = ( event ) => {\n        //Add button is displayed for suggestive LOV only hence when user cliks AddButton, add typed value and not from selected list\n        let isAddingTypedValue = true;\n        keyPressed( event, isAddingTypedValue );\n    };\n\n    let onButtonBlur = ( event ) => {\n        //Check on Blur if it does not go to input ( previous to add button) element\n        if( event.relatedTarget && event.relatedTarget.tagName !== 'INPUT' ) {\n            lovPopup.hide();\n        }\n    };\n\n    let onSearchBoxKeyDown = ( event ) => {\n        // if LOV is exhaustive/suggestive, onEnter --> isAddingTypedValue = false\n        let isAddingTypedValue = event.key !== keyCode.ENTER;\n        keyPressed( event, isAddingTypedValue );\n        // enter keyboard mode regardless of key pressed?\n        // needed to pass tests atm, discuss with ux\n        document.body.classList.add( 'keyboard' );\n    };\n\n    const isAddButtonDisabled = () => {\n        let isDisabled = _.isEmpty( fields.searchBoxLOVFilterStr.value );\n        let isValidEntry = validEntries.current !== null && validEntries.current.length > 0 && selectIndex.current !== null &&\n            !_.isUndefined( validEntries.current[ selectIndex.current ].propDisplayValue );\n        if( isValidEntry && fields.searchBoxLOVFilterStr.value === validEntries.current[ selectIndex.current ].propDisplayValue ) {\n            isDisabled = true;\n        }\n        return isDisabled;\n    };\n\n    const generateContent = () => {\n        let content = <AWLovList\n            context={props}\n            // syncLovEntries={syncLovEntries}\n            blankLovEntry={blankLovEntry}\n            action={action}\n            lovlist='true'\n            field={field}\n            dataProvider={dataProvider}\n            staticFilterStr={staticFilterStr}\n            updateValidEntries={updateValidEntries}\n            autoCorrect={autoCorrect}\n            lovPopup={lovPopup}\n            isCheckBoxArryLOV={isCheckBoxArryLOV}\n            selectIndex={selectIndex}\n            getDefaultAttention={getDefaultAttention}\n            checkLovEntries={checkLovEntries}\n            setlovEntry={( selLovEntry, event, op ) => { setLovEntryAndClose( selLovEntry, event, op, false ); }} >\n            {\n                renderChildComponent()\n            }\n        </AWLovList>;\n\n        return <div className={ ( isCheckBoxArryLOV ? 'aw-checkboxarray-lovParent ' : '' ) + 'sw-lov-contentContainer' }>\n            { !DATE_TYPES.includes( typex ) && isSearchable &&\n                <div className={ ( _.isEmpty( searchBoxLOVFilterStr.error ) ? '' : 'sw-errorFlag ' ) + 'aw-jswidgets-cbaSearch aw-widget-iconParent sw-lov-textbox-container sw-noDirtyStyle' }>\n                    <AwTextBoxVal { ...Object.assign( {}, fields.searchBoxLOVFilterStr, { autocomplete: 'off', autocorrect: 'off', autocapitalize: 'off' } ) }\n                        { ...generateFilterProps }>\n                    </AwTextBoxVal>\n                    { isSelectOnly || isCheckBoxArryLOV ? <AwIcon iconId='cmdSearch' className='aw-widget-icon'></AwIcon> :\n                        <AwButton onBlur={ onButtonBlur } className={ isAddButtonDisabled() ? 'disabled' : '' } action={addButtonClick}>{ props.i18n.ADD_BUTTON_TITLE }</AwButton> }\n                </div>}\n            { !_.isEmpty( searchBoxLOVFilterStr.error ) && <AwPropertyLabel { ...getErrorLabelProp() }></AwPropertyLabel> }\n            { content }\n        </div>;\n    };\n\n    const hasUserTypedAValue = () => {\n        return lovEntryRef.current && lovEntryRef.current.lovEntry &&\n            ( lovEntryRef.current.lovEntry.filterString || typeof lovEntryRef.current.lovEntry.propInternalValue === 'string' );\n    };\n\n    const getValueIfUserTypedTime = () => hasUserTypedAValue() ? uiValue : '';\n\n    const generateDateArrayLOVContent = () => {\n        let { ...restGeneratedProps } = generateProps;\n        let dateProps = {\n            onClick: handleClick,\n            onChange: onChangeHandler,\n            dirty: prop.dirty,\n            onKeyDown: keyPressed\n        };\n        let allProps = { ...restGeneratedProps, ...dateProps };\n\n        return isValidationErrorVisible() && !prop.isListbox ?\n            <input {...allProps} value={uiValue} /> :\n            <input {...allProps} value={field.fielddata.isArray ? getValueIfUserTypedTime() : uiValue} />;\n    };\n\n    // lov select field\n    const generateProps = {\n        'aria-label': prop.label,\n        'data-locator': prop.label,\n        'aria-required': prop.isRequired,\n        className: classes.join( ' ' ),\n        onBlur: onBlurHandler,\n        type: 'text',\n        placeholder: field.placeholder,\n        ref: lovPopup.reference,\n        dirty: prop.dirty,\n        onClick: handleClick,\n        onKeyDown: keyPressed,\n        disabled: prop.disabled\n    };\n\n    // lov filter field\n    // TODO: i18n on placeholder and use unique label/locator\n    const generateFilterProps = {\n        'aria-label': prop.label,\n        'data-locator': prop.label,\n        className: classes.join( ' ' ),\n        onSwChange: onFilterChangeHandler,\n        type: 'text',\n        placeholder: isSelectOnly ? 'Search' : 'Search or Create',\n        ref: lovPopup.reference,\n        dirty: false,\n        onKeyDown: onSearchBoxKeyDown,\n        disabled: prop.disabled\n    };\n\n    return (\n        <div className='sw-lov-container'>\n            <AwPic className='sw-lov-thumb' iconId={field.fielddata.iconName} source={field.fielddata.iconSource}></AwPic>\n\n            { DATE_TYPES.includes( typex ) && generateDateArrayLOVContent() }\n            { !DATE_TYPES.includes( typex ) && <input  {...generateProps} value={ isArray && !isCheckBoxArryLOV ? null : uiValue} /> }\n\n            <div className={ prop.disabled ? 'sw-widget-iconContainer disabled' : 'sw-widget-iconContainer' } role='button' aria-label={prop.name} tabIndex='-1' onKeyDown={keyPressed} onClick={handleClick}>\n                <AwIcon iconId={iconId} className={'aw-widget-icon ' + timeClassName}></AwIcon>\n            </div>\n            <AwPopup {...lovPopup.options} className='sw-lov-popup'> {generateContent()}</AwPopup>\n        </div>\n    );\n};\n\nexport const onMount = ( prop, elementRefList ) => {\n    let field = prop.fielddata;\n    const hint = field.renderingHint;\n    const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n\n    let values = prop.value;\n    if( isCheckBoxArryLOV ) {\n        let checkLovEntries = elementRefList.get( 'checkLovEntries' );\n        checkLovEntries.current = {};\n\n        if( values && values.length > 0 ) {\n            // we create placeHolders based on the default prop values\n            // generate place-holder array for selected values that may or may not be loaded\n            checkLovEntries.current = _.reduce( values, ( result, value, inx ) => {\n                let disp = field.uiValues[ inx ] || field.displayValues[ inx ] || value;\n                let item = {\n                    propDisplayValue: disp,\n                    propInternalValue: value,\n                    isChecked: true\n                };\n                let key = _.isObject( value ) ? disp : value;\n                result[ key ] = item;\n                return result;\n            }, {} );\n        }\n    }\n};\n\n// clear internal states when prop value was cleared\nexport const updateCheckLovEntries = ( prop, elementRefList ) => {\n    let field = prop.fielddata;\n    const hint = field.renderingHint;\n    const isCheckBoxArryLOV = hint === 'checkboxoptionlov';\n\n    if( isCheckBoxArryLOV ) {\n        let checkLovEntries = elementRefList.get( 'checkLovEntries' );\n        let values = prop.value;\n\n        // clear case\n        if( !values || values.length === 0 ) {\n            checkLovEntries.current = {};\n        }\n\n        // async set initial values\n        if( values.length > 0 ) {\n            if( !checkLovEntries.current ) { checkLovEntries.current = {}; }\n            let checked = checkLovEntries.current;\n\n            // update checkLovEntries based on values,\n            // case application set the values programly\n            _.reduce( values, ( result, value, inx ) => {\n                let disp = field.uiValues[ inx ] || field.displayValues[ inx ] || value;\n                let key = _.isObject( value ) ? disp : value;\n                if( !checked[ key ] ) {\n                    checked[ key ] = {\n                        propDisplayValue: disp,\n                        propInternalValue: value,\n                        isChecked: true\n                    };\n                }\n            }, {} );\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
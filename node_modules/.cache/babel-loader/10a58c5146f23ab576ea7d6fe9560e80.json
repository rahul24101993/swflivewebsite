{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/tooltip\n */\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport wcagSvc from 'js/wcagService';\nimport keyCode from 'js/keyCode';\n\nclass Tooltip {\n  constructor(target, options, show, hide) {\n    this.target = target;\n    this.options = options;\n    this._show = show;\n    this._hide = hide;\n    this.popupRef = null;\n    this.initialize();\n  }\n\n  initialize() {\n    this.show = () => {\n      this.showId = setTimeout(this._show, this.options.showDuration);\n    };\n\n    this.hide = () => {\n      clearTimeout(this.showId);\n      this.hideId = setTimeout(this._hide, this.options.hideDuration);\n    };\n\n    this.keyFocusHandler = this._keyFocusHandler.bind(this);\n    this.keyBlurHandler = this._keyBlurHandler.bind(this);\n    this.setHooks();\n  }\n\n  configure(tooltipObj) {\n    // attach trigger event\n    let focusTarget = this.target;\n\n    if (this.target.classList.contains('aw-command')) {\n      focusTarget = this.target.children[0];\n    }\n\n    dom.on(this.target, 'mouseenter', this.show);\n    dom.on(this.target, 'mouseleave,click', this.hide);\n    dom.on(focusTarget, 'focus', this.keyFocusHandler);\n    dom.on(focusTarget, 'blur', this.keyBlurHandler); // required by useEffect to clear resource\n\n    return () => {\n      dom.off(this.target, 'mouseenter', this.show);\n      dom.off(this.target, 'mouseleave,click', this.hide);\n      dom.off(focusTarget, 'focus', this.keyFocusHandler);\n      dom.off(focusTarget, 'blur', this.keyBlurHandler);\n      tooltipObj = null;\n    };\n  }\n\n  _keyFocusHandler() {\n    if (wcagSvc.areWeInKeyboardMode() && event) {\n      let key = wcagSvc.getKeyName(event);\n\n      if (key !== keyCode.ESC) {\n        // escape key should not directly impact tooltip popupRef\n        this.show();\n      }\n    }\n  }\n\n  _keyBlurHandler() {\n    if (wcagSvc.areWeInKeyboardMode() && event) {\n      let key = wcagSvc.getKeyName(event);\n\n      if (key !== keyCode.ESC) {\n        // escape key should not directly impact tooltip popupRef\n        this.hide();\n      }\n    }\n  }\n\n  setHooks() {\n    this.hooks = {\n      hooks: {\n        whenOpened: popupRef => {\n          this.popupRef = popupRef;\n          let {\n            panelEl\n          } = popupRef; // enable move-in feature when tooltip fully shows up\n\n          setTimeout(() => {\n            if (this.popupRef) {\n              panelEl.addEventListener('mouseenter', event => {\n                event.stopImmediatePropagation();\n                clearTimeout(this.hideId);\n              });\n              panelEl.addEventListener('mouseleave', event => {\n                event.stopImmediatePropagation();\n                this.hide();\n              });\n            }\n          }, 150);\n        },\n        whenClosed: popupRef => {\n          this.popupRef = null;\n        }\n      }\n    };\n  } // end\n\n\n}\n\nexport { Tooltip };","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/popup/src/js/tooltip.js"],"names":["DOMAPIs","constructor","initialize","setTimeout","clearTimeout","configure","focusTarget","dom","tooltipObj","_keyFocusHandler","wcagSvc","key","keyCode","_keyBlurHandler","setHooks","hooks","whenOpened","popupRef","panelEl","event","whenClosed"],"mappings":"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","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/tooltip\n */\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport wcagSvc from 'js/wcagService';\nimport keyCode from 'js/keyCode';\n\nclass Tooltip {\n    constructor( target, options, show, hide ) {\n        this.target = target;\n        this.options = options;\n        this._show = show;\n        this._hide = hide;\n        this.popupRef = null;\n        this.initialize();\n    }\n\n    initialize() {\n        this.show = () => { this.showId = setTimeout( this._show, this.options.showDuration ); };\n        this.hide = () => {\n            clearTimeout( this.showId );\n            this.hideId = setTimeout( this._hide, this.options.hideDuration );\n        };\n        this.keyFocusHandler = this._keyFocusHandler.bind( this );\n        this.keyBlurHandler = this._keyBlurHandler.bind( this );\n        this.setHooks();\n    }\n\n    configure( tooltipObj ) {\n        // attach trigger event\n        let focusTarget = this.target;\n        if( this.target.classList.contains( 'aw-command' ) ) {\n            focusTarget = this.target.children[ 0 ];\n        }\n        dom.on( this.target, 'mouseenter', this.show );\n        dom.on( this.target, 'mouseleave,click', this.hide );\n        dom.on( focusTarget, 'focus', this.keyFocusHandler );\n        dom.on( focusTarget, 'blur', this.keyBlurHandler );\n        // required by useEffect to clear resource\n        return () => {\n            dom.off( this.target, 'mouseenter', this.show );\n            dom.off( this.target, 'mouseleave,click', this.hide );\n            dom.off( focusTarget, 'focus', this.keyFocusHandler );\n            dom.off( focusTarget, 'blur', this.keyBlurHandler );\n            tooltipObj = null;\n        };\n    }\n\n    _keyFocusHandler() {\n        if( wcagSvc.areWeInKeyboardMode() && event ) {\n            let key = wcagSvc.getKeyName( event );\n            if( key !== keyCode.ESC ) { // escape key should not directly impact tooltip popupRef\n                this.show();\n            }\n        }\n    }\n\n    _keyBlurHandler() {\n        if( wcagSvc.areWeInKeyboardMode() && event ) {\n            let key = wcagSvc.getKeyName( event );\n            if( key !== keyCode.ESC ) { // escape key should not directly impact tooltip popupRef\n                this.hide();\n            }\n        }\n    }\n\n    setHooks() {\n        this.hooks = {\n            hooks: {\n                whenOpened: ( popupRef ) => {\n                    this.popupRef = popupRef;\n                    let { panelEl } = popupRef;\n\n                    // enable move-in feature when tooltip fully shows up\n                    setTimeout( () => {\n                        if( this.popupRef ) {\n                            panelEl.addEventListener( 'mouseenter', ( event ) => {\n                                event.stopImmediatePropagation();\n                                clearTimeout( this.hideId );\n                            } );\n\n                            panelEl.addEventListener( 'mouseleave', ( event ) => {\n                                event.stopImmediatePropagation();\n                                this.hide();\n                            } );\n                        }\n                    }, 150 );\n                },\n                whenClosed: ( popupRef ) => {\n                    this.popupRef = null;\n                }\n            }\n        };\n    }\n    // end\n}\n\nexport {\n    Tooltip\n};\n"]},"metadata":{},"sourceType":"module"}
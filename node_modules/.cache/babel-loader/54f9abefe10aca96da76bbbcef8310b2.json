{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Define the common styles shared for button and chip\n * @module \"js/buttonStyles\"\n */\nconst ACCENT_CAUTION = 'accent-caution'; // Define the map from button type to CSS class\n\nconst buttonStyles = {\n  base: 'base-button',\n  accent: 'base-button',\n  //only applicable for selection chip\n  caution: 'caution',\n  sole: ACCENT_CAUTION,\n  positive: 'positive',\n  negative: 'negative',\n  chromeless: 'chromeless',\n  'accent-high-contrast': 'accent-highContrast',\n  'accent-mid-contrast': 'accent-midContrast',\n  'accent-positive': 'accent-positive',\n  'accent-caution': ACCENT_CAUTION,\n  'accent-negative': 'accent-negative',\n  'accent-marketing': ACCENT_CAUTION\n};\n/**\n * Get button style, if button type is undefined or not supported, return the style of default type.\n * @param {String} buttonType the button type\n * @param {String} defaultType the default button type.\n * @returns {String} button CSS class\n */\n\nexport let getButtonStyle = function (buttonType) {\n  var btnClass = '';\n\n  if (buttonType && buttonStyles.hasOwnProperty(buttonType)) {\n    btnClass = buttonStyles[buttonType];\n  }\n\n  return btnClass;\n};\nexport default {\n  getButtonStyle\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/uielements/src/js/buttonStyles.js"],"names":["ACCENT_CAUTION","buttonStyles","base","accent","caution","sole","positive","negative","chromeless","getButtonStyle","btnClass","buttonType"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AAEA,MAAMA,cAAc,GAApB,gBAAA,C,CACA;;AACA,MAAMC,YAAY,GAAG;EACjBC,IAAI,EADa,aAAA;EAEjBC,MAAM,EAFW,aAAA;EAEM;EACvBC,OAAO,EAHU,SAAA;EAIjBC,IAAI,EAJa,cAAA;EAKjBC,QAAQ,EALS,UAAA;EAMjBC,QAAQ,EANS,UAAA;EAOjBC,UAAU,EAPO,YAAA;EAQjB,wBARiB,qBAAA;EASjB,uBATiB,oBAAA;EAUjB,mBAViB,iBAAA;EAWjB,kBAXiB,cAAA;EAYjB,mBAZiB,iBAAA;EAajB,oBAAoBR;AAbH,CAArB;AAgBA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIS,cAAc,GAAG,UAAA,UAAA,EAAuB;EAC/C,IAAIC,QAAQ,GAAZ,EAAA;;EACA,IAAIC,UAAU,IAAIV,YAAY,CAAZA,cAAAA,CAAlB,UAAkBA,CAAlB,EAA8D;IAC1DS,QAAQ,GAAGT,YAAY,CAAvBS,UAAuB,CAAvBA;EACH;;EAED,OAAA,QAAA;AANG,CAAA;AASP,eAAe;EAAED;AAAF,CAAf","sourcesContent":["// Copyright (c) 2020 Siemens\n/**\n * Define the common styles shared for button and chip\n * @module \"js/buttonStyles\"\n */\n\nconst ACCENT_CAUTION = 'accent-caution';\n// Define the map from button type to CSS class\nconst buttonStyles = {\n    base: 'base-button',\n    accent: 'base-button', //only applicable for selection chip\n    caution: 'caution',\n    sole: ACCENT_CAUTION,\n    positive: 'positive',\n    negative: 'negative',\n    chromeless: 'chromeless',\n    'accent-high-contrast': 'accent-highContrast',\n    'accent-mid-contrast': 'accent-midContrast',\n    'accent-positive': 'accent-positive',\n    'accent-caution': ACCENT_CAUTION,\n    'accent-negative': 'accent-negative',\n    'accent-marketing': ACCENT_CAUTION\n};\n\n/**\n * Get button style, if button type is undefined or not supported, return the style of default type.\n * @param {String} buttonType the button type\n * @param {String} defaultType the default button type.\n * @returns {String} button CSS class\n */\nexport let getButtonStyle = function( buttonType ) {\n    var btnClass = '';\n    if( buttonType && buttonStyles.hasOwnProperty( buttonType ) ) {\n        btnClass = buttonStyles[ buttonType ];\n    }\n\n    return btnClass;\n};\n\nexport default { getButtonStyle };\n"]},"metadata":{},"sourceType":"module"}
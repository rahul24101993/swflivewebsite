{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n// Copyright (c) 2021 Siemens\n\n/**\n * @module js/declEditHandlerFactory\n */\nimport { useReducer, useState } from 'react';\nimport _ from 'lodash';\nimport declDataCtxService from 'js/declarativeDataCtxService';\nimport editHandlerFactory from 'js/editHandlerFactory';\nimport editHandlerService from 'js/editHandlerService';\nimport dataSourceService from 'js/dataSourceService';\n\nconst editHandlerReducer = (state, action) => {\n  if (action.type === 'SET_EDIT_STATE_CHANGED') {\n    return { ...state,\n      _editing: action.value\n    };\n  }\n\n  return state;\n};\n\nconst useEditStateChangeObserver = () => {\n  _s();\n\n  // cursor hook\n  const [editHandlerState, editStateChangeDispatcher] = useReducer(editHandlerReducer, {\n    // revisitme: move startIndex logic to here\n    _editing: false\n  });\n  return {\n    editHandlerState,\n    editStateChangeDispatcher\n  };\n};\n\n_s(useEditStateChangeObserver, \"gdAViTs4IQ0jAbYBdA7BsoBOEqc=\");\n\nexport const useBuildEditHandler = (editHandlerJson, ehName, viewModel, dataCtxNode, editHandlerRef, fields) => {\n  _s2();\n\n  let editHandlerJsonIn = { ...editHandlerJson\n  };\n  declDataCtxService.applyScope(viewModel, editHandlerJsonIn, null, dataCtxNode);\n  return useEditHandler(editHandlerJsonIn, ehName, viewModel, editHandlerRef, fields);\n};\n\n_s2(useBuildEditHandler, \"QID1gQmpyEFpWPN6sRmFKYTNXFA=\", false, function () {\n  return [useEditHandler];\n});\n\nexport const useEditHandler = (editHandlerJson, ehName, viewModel, editHandlerRef, fields) => {\n  _s3();\n\n  const {\n    editHandlerState,\n    editStateChangeDispatcher\n  } = useEditStateChangeObserver();\n  return buildEditHandler(editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields);\n};\n\n_s3(useEditHandler, \"hFJIMVCbTVbKwJYoSzCR1TxEf5w=\", false, function () {\n  return [useEditStateChangeObserver];\n});\n\nconst buildEditHandler = (editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields) => {\n  if (!editHandlerRef.current || !editHandlerService.getEditHandler(editHandlerJson.context) && editHandlerJson.dataSource) {\n    editHandlerRef.current = editHandlerFactory.createEditHandler(dataSourceService.createNewDataSource({\n      declViewModel: { ...viewModel.atomicDataRef.xrtState,\n        panelId: viewModel._internal.panelId,\n        context: editHandlerJson.context,\n        atomicData: fields.xrtState\n      }\n    }));\n    editHandlerService.setEditHandler(editHandlerRef.current, editHandlerJson.context);\n\n    if (editHandlerJson.setActive) {\n      editHandlerService.setActiveEditHandlerContext(editHandlerJson.context);\n    }\n\n    if (_.get(editHandlerRef.current, 'setDataUpdater')) {\n      editHandlerRef.current.setDataUpdater(editStateChangeDispatcher);\n    }\n  }\n\n  editHandlerService.updateStates(editHandlerRef.current, editHandlerJson.context);\n  editHandlerRef.current._editing = editHandlerState._editing;\n  return editHandlerRef.current;\n};\n/**\n  * Edit handlers hook\n  * @param {Object} viewModel View model\n  */\n\n\nexport function useEditHandlers(editHandlersJson, viewModel, dataCtxNode, editHandlerRef, fields) {\n  _s5();\n\n  var _s4 = $RefreshSig$();\n\n  let editHandlers = {}; // Just to make sure the editHandlers name order is same in every render.\n\n  const [editHandlerNames] = useState(() => {\n    return editHandlersJson ? Object.keys(editHandlersJson) : [];\n  });\n\n  _s4(editHandlerNames.forEach(_s4(ehName => {\n    _s4();\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    editHandlers[ehName] = useBuildEditHandler(editHandlersJson[ehName], ehName, viewModel, dataCtxNode, editHandlerRef, fields);\n  }, \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  })), \"oCJuUqix5IXmrBjs45UqiipZSrM=\", false, function () {\n    return [useBuildEditHandler];\n  });\n\n  return editHandlers;\n}\n/**\n *\n * @param {String} context - edit handler context key\n */\n\n_s5(useEditHandlers, \"SRzuSwwujKI6wfJBbfIHkxE8D0A=\");\n\nexport function removeEditHandler(context) {\n  editHandlerService.removeEditHandler(context);\n}","map":{"version":3,"names":["useReducer","useState","_","declDataCtxService","editHandlerFactory","editHandlerService","dataSourceService","editHandlerReducer","state","action","type","_editing","value","useEditStateChangeObserver","editHandlerState","editStateChangeDispatcher","useBuildEditHandler","editHandlerJson","ehName","viewModel","dataCtxNode","editHandlerRef","fields","editHandlerJsonIn","applyScope","useEditHandler","buildEditHandler","current","getEditHandler","context","dataSource","createEditHandler","createNewDataSource","declViewModel","atomicDataRef","xrtState","panelId","_internal","atomicData","setEditHandler","setActive","setActiveEditHandlerContext","get","setDataUpdater","updateStates","useEditHandlers","editHandlersJson","editHandlers","editHandlerNames","Object","keys","forEach","removeEditHandler"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/declEditHandlerFactory.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/declEditHandlerFactory\n */\nimport { useReducer, useState } from 'react';\nimport _ from 'lodash';\nimport declDataCtxService from 'js/declarativeDataCtxService';\nimport editHandlerFactory from 'js/editHandlerFactory';\nimport editHandlerService from 'js/editHandlerService';\nimport dataSourceService from 'js/dataSourceService';\n\nconst editHandlerReducer = ( state, action ) => {\n    if( action.type === 'SET_EDIT_STATE_CHANGED' ) {\n        return { ...state, _editing: action.value };\n    }\n\n    return state;\n};\n\nconst useEditStateChangeObserver = () => {\n    // cursor hook\n    const [ editHandlerState, editStateChangeDispatcher ] = useReducer( editHandlerReducer, {\n        // revisitme: move startIndex logic to here\n        _editing: false\n    } );\n\n    return {\n        editHandlerState,\n        editStateChangeDispatcher\n    };\n};\n\nexport const useBuildEditHandler = ( editHandlerJson, ehName, viewModel, dataCtxNode, editHandlerRef, fields ) => {\n    let editHandlerJsonIn = { ...editHandlerJson };\n    declDataCtxService.applyScope( viewModel, editHandlerJsonIn, null, dataCtxNode );\n    return useEditHandler( editHandlerJsonIn, ehName, viewModel, editHandlerRef, fields );\n};\n\nexport const useEditHandler = ( editHandlerJson, ehName, viewModel, editHandlerRef, fields ) => {\n    const { editHandlerState, editStateChangeDispatcher } = useEditStateChangeObserver();\n\n    return buildEditHandler( editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields );\n};\n\nconst buildEditHandler = ( editHandlerJson, ehName, viewModel, editHandlerRef, editStateChangeDispatcher, editHandlerState, fields ) => {\n    if( !editHandlerRef.current || !editHandlerService.getEditHandler( editHandlerJson.context ) && editHandlerJson.dataSource ) {\n        editHandlerRef.current = editHandlerFactory.createEditHandler( dataSourceService.createNewDataSource( {\n            declViewModel: { ...viewModel.atomicDataRef.xrtState,\n                panelId: viewModel._internal.panelId,\n                context: editHandlerJson.context,\n                atomicData: fields.xrtState\n            }\n        } ) );\n        editHandlerService.setEditHandler( editHandlerRef.current, editHandlerJson.context );\n\n        if( editHandlerJson.setActive ) {\n            editHandlerService.setActiveEditHandlerContext( editHandlerJson.context );\n        }\n\n        if( _.get( editHandlerRef.current, 'setDataUpdater' ) ) {\n            editHandlerRef.current.setDataUpdater( editStateChangeDispatcher );\n        }\n    }\n\n    editHandlerService.updateStates( editHandlerRef.current, editHandlerJson.context );\n    editHandlerRef.current._editing = editHandlerState._editing;\n\n    return editHandlerRef.current;\n};\n\n/**\n  * Edit handlers hook\n  * @param {Object} viewModel View model\n  */\nexport function useEditHandlers( editHandlersJson, viewModel, dataCtxNode, editHandlerRef, fields ) {\n    let editHandlers = {};\n    // Just to make sure the editHandlers name order is same in every render.\n    const [ editHandlerNames ] = useState( () => {\n        return editHandlersJson ? Object.keys( editHandlersJson ) : [];\n    } );\n\n    editHandlerNames.forEach( ( ehName ) => {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        editHandlers[ ehName ] = useBuildEditHandler( editHandlersJson[ ehName ], ehName, viewModel, dataCtxNode, editHandlerRef, fields );\n    } );\n    return editHandlers;\n}\n\n/**\n *\n * @param {String} context - edit handler context key\n */\nexport function removeEditHandler( context ) {\n    editHandlerService.removeEditHandler( context );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
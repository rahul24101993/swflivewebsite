{"ast":null,"code":"// Copyright (c) 2021 Siemens\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport viewModeService from 'js/viewMode.service';\nconst trace = new Debug('selection');\n\nconst updateGlobalSelections = (parentSelectionData, selectionInfo) => {\n  parentSelectionData && parentSelectionData.update(selectionInfo);\n};\n\nconst handlePrimarySelectionChange = (localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelectionModel) => {\n  let selectionInfo = {\n    selected: [],\n    pselected: undefined,\n    source: undefined\n  };\n\n  if (localSelectionData.selected && localSelectionData.selected.length > 0) {\n    selectionInfo.selected = localSelectionData.selected;\n    selectionInfo.pselected = baseSelection || undefined;\n    selectionInfo.source = localSelectionData.source;\n  } else if (baseSelection) {\n    selectionInfo.selected = [baseSelection];\n    selectionInfo.pselected = baseSelection;\n    selectionInfo.source = 'base';\n  }\n\n  updateGlobalSelections(parentSelectionData, selectionInfo);\n  dispatch && dispatch({\n    path: 'data.primarySelection',\n    value: localSelectionData.selected\n  });\n\n  if (!primarySelectionModel.isSelectionModelActivated()) {\n    primarySelectionModel.setSelectionModelActivated(true);\n  }\n};\n\nconst handleSecondarySelectionChange = (localSelectionData, baseSelection, parentSelectionData, primarySelection, primarySelectionModel) => {\n  let selectionInfo = {\n    selected: [],\n    pselected: undefined,\n    source: undefined\n  };\n\n  if (localSelectionData.selected && localSelectionData.selected.length > 0) {\n    const parentSelection = primarySelection && primarySelection.length === 1 ? primarySelection : [baseSelection];\n    selectionInfo.selected = localSelectionData.selected;\n    selectionInfo.pselected = parentSelection[0];\n    selectionInfo.source = localSelectionData.source;\n    selectionInfo.relationInfo = localSelectionData.relationInfo;\n    primarySelectionModel.setSelectionModelActivated(false);\n  } else if (primarySelection && primarySelection.length) {\n    selectionInfo.selected = primarySelection;\n    selectionInfo.pselected = baseSelection;\n    selectionInfo.source = 'primary';\n    primarySelectionModel.setSelectionModelActivated(true);\n  } else if (baseSelection) {\n    selectionInfo.selected = [baseSelection];\n    selectionInfo.pselected = baseSelection;\n    selectionInfo.source = 'base';\n  }\n\n  updateGlobalSelections(parentSelectionData, selectionInfo);\n};\n\nexport const defaultSelectionChangeHandler = (localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, primarySelectionModel) => {\n  if (localSelectionData && localSelectionData.selected) {\n    if (localSelectionData.source === 'primary') {\n      handlePrimarySelectionChange(localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelectionModel);\n    } else if (localSelectionData.source === 'secondary') {\n      handleSecondarySelectionChange(localSelectionData, baseSelection, parentSelectionData, primarySelection, primarySelectionModel);\n    }\n\n    if (sublocationState && (!sublocationState.focusComponent || sublocationState.focusComponent !== localSelectionData.source)) {\n      sublocationState.update({ ...sublocationState.value,\n        focusComponent: localSelectionData.source\n      });\n    }\n\n    trace('AwWorkarea selectionData: ', localSelectionData);\n  }\n};\nexport const handleSelectionChange = (localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, parentPWASelectionModel, localPWASelectionModel) => {\n  if (!_.isEmpty(localSelectionData)) {\n    defaultSelectionChangeHandler(localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, parentPWASelectionModel || localPWASelectionModel);\n  }\n};\nexport const getContext = (vmDef, props) => {\n  return [new DerivedStateResult({\n    ctxParameters: [],\n    additionalParameters: [props.subPanelContext, props.baseSelection],\n    compute: () => {\n      return { ...props.subPanelContext,\n        baseSelection: props.baseSelection\n      };\n    }\n  })];\n};\nexport const cleanupViewModeData = () => {\n  viewModeService.changeViewMode('None');\n  viewModeService.setAvailableViewModes([]);\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/AwWorkareaService.js"],"names":["trace","updateGlobalSelections","parentSelectionData","handlePrimarySelectionChange","selectionInfo","selected","pselected","source","undefined","localSelectionData","baseSelection","dispatch","path","value","primarySelectionModel","handleSecondarySelectionChange","parentSelection","primarySelection","defaultSelectionChangeHandler","sublocationState","focusComponent","handleSelectionChange","_","parentPWASelectionModel","getContext","ctxParameters","additionalParameters","props","compute","cleanupViewModeData","viewModeService"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\nimport _ from 'lodash';\nimport Debug from 'debug';\nimport { DerivedStateResult } from 'js/derivedContextService';\nimport viewModeService from 'js/viewMode.service';\n\nconst trace = new Debug( 'selection' );\n\nconst updateGlobalSelections = ( parentSelectionData, selectionInfo ) => {\n    parentSelectionData && parentSelectionData.update( selectionInfo );\n};\n\nconst handlePrimarySelectionChange = ( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelectionModel ) => {\n    let selectionInfo = { selected: [], pselected: undefined, source: undefined };\n    if( localSelectionData.selected && localSelectionData.selected.length > 0 ) {\n        selectionInfo.selected = localSelectionData.selected;\n        selectionInfo.pselected = baseSelection || undefined;\n        selectionInfo.source = localSelectionData.source;\n    } else if( baseSelection ) {\n        selectionInfo.selected = [ baseSelection ];\n        selectionInfo.pselected = baseSelection;\n        selectionInfo.source = 'base';\n    }\n    updateGlobalSelections( parentSelectionData, selectionInfo );\n    dispatch && dispatch( { path: 'data.primarySelection', value: localSelectionData.selected } );\n    if( !primarySelectionModel.isSelectionModelActivated() ) {\n        primarySelectionModel.setSelectionModelActivated( true );\n    }\n};\n\nconst handleSecondarySelectionChange = ( localSelectionData, baseSelection, parentSelectionData, primarySelection, primarySelectionModel ) => {\n    let selectionInfo = { selected: [], pselected: undefined, source: undefined };\n    if( localSelectionData.selected && localSelectionData.selected.length > 0 ) {\n        const parentSelection = primarySelection && primarySelection.length === 1 ? primarySelection : [ baseSelection ];\n        selectionInfo.selected = localSelectionData.selected;\n        selectionInfo.pselected = parentSelection[ 0 ];\n        selectionInfo.source = localSelectionData.source;\n        selectionInfo.relationInfo = localSelectionData.relationInfo;\n        primarySelectionModel.setSelectionModelActivated( false );\n    } else if( primarySelection && primarySelection.length ) {\n        selectionInfo.selected = primarySelection;\n        selectionInfo.pselected = baseSelection;\n        selectionInfo.source = 'primary';\n        primarySelectionModel.setSelectionModelActivated( true );\n    } else if( baseSelection ) {\n        selectionInfo.selected = [ baseSelection ];\n        selectionInfo.pselected = baseSelection;\n        selectionInfo.source = 'base';\n    }\n    updateGlobalSelections( parentSelectionData, selectionInfo );\n};\n\nexport const defaultSelectionChangeHandler = ( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, primarySelectionModel ) => {\n    if( localSelectionData && localSelectionData.selected ) {\n        if( localSelectionData.source === 'primary' ) {\n            handlePrimarySelectionChange( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelectionModel );\n        } else if( localSelectionData.source === 'secondary' ) {\n            handleSecondarySelectionChange( localSelectionData, baseSelection, parentSelectionData, primarySelection, primarySelectionModel );\n        }\n        if( sublocationState && ( !sublocationState.focusComponent || sublocationState.focusComponent !== localSelectionData.source ) ) {\n            sublocationState.update( { ...sublocationState.value, focusComponent: localSelectionData.source } );\n        }\n        trace( 'AwWorkarea selectionData: ', localSelectionData );\n    }\n};\n\nexport const handleSelectionChange = ( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, parentPWASelectionModel, localPWASelectionModel ) => {\n    if( !_.isEmpty( localSelectionData ) ) {\n        defaultSelectionChangeHandler( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, parentPWASelectionModel || localPWASelectionModel );\n    }\n};\n\nexport const getContext = ( vmDef, props ) => {\n    return [ new DerivedStateResult( {\n        ctxParameters: [],\n        additionalParameters: [ props.subPanelContext, props.baseSelection ],\n        compute: () => {\n            return {\n                ...props.subPanelContext,\n                baseSelection: props.baseSelection\n            };\n        }\n    } ) ];\n};\n\nexport const cleanupViewModeData = () => {\n    viewModeService.changeViewMode( 'None' );\n    viewModeService.setAvailableViewModes( [] );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable require-jsdoc */\n\n/**\n * @module js/popupService\n */\nimport _ from 'lodash';\nimport utils from 'js/popupUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport positionService from 'js/positionService';\nimport appCtxService from 'js/appCtxService';\nconst manager = new utils.PopupManager();\nconst MIN_SIZE = 50;\nconst BUFFER_SIZE = 20; // the default popup options\n\nconst _defaultOptions = {\n  // enable open multiple popups at the same time\n  // multiple: false,\n  // pre-defined popup configures provided by framework. accept values: modal, balloon, tooltip\n  // preset: null,\n  // enable close the popup when click outside the popup\n  clickOutsideToClose: true,\n  // auto update popup position or close popup when the reference element moves, accept values: 'follow', 'close'\n  whenParentScrolls: 'follow',\n  // use outside scroll event to do scroll detection, then based on option whenParentScrolls to close or do follow\n  // if set to false, scroll detection will fall back to naive mode: where scroll happens from body to reference.\n  useOutsideScrollEvent: true,\n  // modal mode\n  // hasMask: false,\n  // has arrow / bubble\n  // hasArrow: false,\n  arrowOptions: {\n    // specify where to align the arrow, relative to reference element,\n    // valid value: auto / center / start / end\n    // auto: based on the popup alignment, arrow should be smart position itself.\n    alignment: 'auto',\n    // specify the alignment offset in px, relative to reference element,\n    // could be positive / negative\n    // special used for start / end case.\n    offset: 0,\n    // specify the shift offset in px, relative to popup element,\n    // must be positive\n    shift: 5\n  },\n  // the default parent element where the popup element mount to, accept native Element or css selector\n  // only valid when enableAppend is true, disable it by set enableAppend = false\n  parent: document.body,\n  // set to false when user uses popup in multiple level / nested case\n  enableAppend: true,\n  // the reference element which trigger the popup, accept native Element or css selector\n  // reference: null,\n  // enable popup overlapping on reference element\n  // overlapOnReference: false,\n  // expect to position popup relative to the reference element\n  relative: true,\n  // Use this option when you want to position popup on the current mouse position. It could be the native targetEvent which triggers to show the popup, or any event with clientX, clientY information\n  // targetEvent: null,\n  // support add custom styles from application.\n  // required for aw-navigate-breadcrumb and aw-search-breadcrumb\n  // className: '',\n  // popup container size, unit should be included and it could be any. optional\n  // height: '',\n  // width: '',\n  // maxWidth: '',\n  // maxHeight: '',\n  // minHeight: '',\n  // minWidth: '',\n  // define the minimal size a popup could be, it's required because:\n  // 1, prevent popup too small\n  // 2, smart flip side and alignment to support smart position\n  minSize: MIN_SIZE,\n  // UX requirement: define the gap/buffer size for drop shadow when the available space is highly limited\n  marginBufferSize: BUFFER_SIZE,\n  // enable popup draggable or not\n  // draggable: false,\n  // placement options: ['top-start','top','top-end','right-start','right','right-end',\n  // 'bottom-end','bottom','bottom-start','left-end','left','left-start']\n  placement: 'bottom-start',\n  // smart position behavior, accept values: 'fixed', 'opposite', 'clockwise', 'counterclockwise'\n  // define how the position engine to search a available space to place the popup.\n  flipBehavior: 'opposite',\n  // popup lifeCycle hooks\n  hooks: {\n    whenOpened: null,\n    whenUpdated: null,\n    whenClosed: null\n  } // Only available for command popup action case - whether to show a popup independent(not nested) of that command. By default command popup are nested.\n  // independent: false\n\n};\n/**\n * the default preset options for AFX provided popups,\n * user can override by explicitly configure options\n */\n\nconst _popupPresets = {\n  modal: {\n    options: {\n      relative: false,\n      hasMask: true,\n      innerClassName: 'aw-popup-Modal',\n      clickOutsideToClose: false,\n      adaptiveShift: true,\n      draggable: true,\n      handle: '.aw-layout-panelTitle, .panel-header',\n      whenParentScrolls: 'close'\n    }\n  },\n  balloon: {\n    options: {\n      ownContainer: true,\n      hasArrow: true,\n      innerClassName: 'aw-popup-balloon',\n      clickOutsideToClose: true,\n      adaptiveShift: true,\n      placement: ['top', 'bottom', 'left', 'right'],\n      flipBehavior: 'opposite',\n      padding: {\n        x: 4,\n        y: 4\n      },\n      arrowOptions: {\n        // specify where to align the arrow, relative to reference element,\n        // valid value: auto / center / start / end\n        alignment: 'auto',\n        // specify the alignment offset in px, relative to reference element,\n        // could be positive / negative\n        // special used for start / end case.\n        offset: 5,\n        // specify the shift offset in px, relative to popup element,\n        // must be positive\n        shift: 15\n      }\n    }\n  },\n  tooltip: {\n    options: {\n      autoFocus: false,\n      showDuration: 100,\n      hideDuration: 100,\n      ownContainer: true,\n      placement: ['top', 'bottom', 'right', 'left'],\n      flipBehavior: 'opposite',\n      whenParentScrolls: 'close',\n      adaptiveShift: true,\n      // prevent tooltip cut off in corner case\n      resizeToClose: true,\n      advancePositioning: true,\n      // prevent overlap or flash when popup content growing\n      hasArrow: true,\n      padding: {\n        x: 4,\n        y: 4\n      },\n      arrowOptions: {\n        alignment: 'center'\n      },\n      minSize: 5,\n      hasPadding: true,\n      forceCloseOthers: false,\n      innerClassName: 'sw-popup-tooltip sw-popup-easein'\n    }\n  } // EXTENDED FUTURE\n\n}; // popup node name,\n\nconst POPUP_NODE_SELECTOR = 'div.sw-popup';\n/**\n * serves as advanced version of hide api\n *\n * close popup by the popupEl or target event. null to force close all popups\n *\n * @param {Object | String} popupEl - the popupEl to close. accept native Element element or css selector\n * @param {String} excludeId - the popupEl to exclude\n * @param {Boolean} force - force to close all popups on current page\n * @returns {Promise} promise with the close result, true or false\n */\n\nfunction close(popupEl) {\n  let excludeId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let elements = []; // if specified and still available on DOM\n\n  popupEl = utils.getElement(utils.extendSelector(popupEl));\n\n  if (popupEl) {\n    elements = _.concat([], popupEl);\n  } // default to force close all popups if no element specified.\n\n\n  if (!popupEl) {\n    elements = dom.getAll(POPUP_NODE_SELECTOR);\n  }\n\n  let tasks = [];\n\n  _.forEach(elements, function (elem) {\n    if (excludeId && excludeId === elem.id) {\n      return;\n    }\n\n    const popupRef = manager.get(elem.id);\n    popupRef && tasks.push(popupRef.hide(force));\n  });\n\n  return Promise.all(tasks).then(() => true);\n}\n\nfunction processExistingPopups(options) {\n  let result = true;\n  const {\n    reference\n  } = options;\n\n  if (options.multiple === true) {\n    // prevent create duplicate popup instance for one referenceEl\n    // if the referenceEl already has a popup, show again just by bring the popup to foreground,\n    // return popupRef or true\n    result = utils.handleOpenedPopup(reference, manager);\n  } else {\n    // if in singleton mode, always force close others\n    // process others\n    // return true\n    if (options.forceCloseOthers !== false) {\n      const id = reference ? reference.getAttribute(utils.POPUP_ID_ATTRIBUTE) : null;\n      close(null, id);\n      result = true;\n    } // process self\n    // return null or true\n\n\n    if (options.toggleMode === true) {\n      // if the referenceEl already has a popup, close it and return null to indicate exit\n      result = utils.handleOpenedPopup(reference, manager, true);\n    }\n  }\n\n  return result;\n}\n\nfunction deepAssign() {\n  function customize(objValue, srcValue, key) {\n    // simple assign by default\n    let result = srcValue; // go deeper for these keys\n\n    if (['arrowOptions', 'hooks'].indexOf(key) !== -1) {\n      result = _.assign({}, objValue, srcValue);\n    }\n\n    return result;\n  }\n\n  return _.assignWith({}, ...arguments, customize); //return _.partialRight( _.assignWith, customize )( ...arguments );\n}\n\nconst getReference = function (reference) {\n  let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // case ref\n\n  if (reference && _.has(reference, 'current')) {\n    if (force) {\n      return reference.current;\n    }\n\n    return reference.current || reference;\n  } // case native dom or normal selector\n\n\n  return utils.getElement(reference);\n};\n\nconst componentMounted = (options, popupEl) => {\n  // re-evaluate reference\n  const reference = getReference(options.reference, true);\n  let popupRef = new utils.PanelRef(popupEl, { ...options,\n    reference\n  });\n  options.showDeferred.current && options.showDeferred.current.resolve(popupRef);\n  manager.add(popupRef);\n  popupRef.attach();\n  updatePosition(popupRef);\n  return function componentWillUnMounted() {\n    options.hideDeferred.current && options.hideDeferred.current.resolve(true);\n    options.showDeferred.current && options.showDeferred.current.resolve(true);\n    manager.remove(popupRef);\n    popupRef.detach(); // clean up resources\n\n    options.showDeferred.current = null;\n    options.hideDeferred.current = null;\n    popupRef = null;\n  };\n};\n\nfunction consolidateOptions(options, hide, update) {\n  // backup user options\n  const userOptions = deepAssign({}, options); // merge presetOptions if any preset defined\n\n  let presetOptions = {};\n  const preset = options.preset;\n\n  if (preset && _.has(_popupPresets, preset)) {\n    presetOptions = _popupPresets[preset].options;\n  }\n\n  options = deepAssign({}, _defaultOptions, presetOptions, options);\n  options.userOptions = userOptions;\n  options.parent = utils.getElement(options.parent) || document.body;\n  options.reference = getReference(options.reference);\n  options.manager = manager;\n  inflateOptions(options); // apis being passed around(to subview) to control popups, only initial once\n\n  if (!options.api) {\n    const getCurrent = () => manager.get(options.popupReference.current.id);\n\n    options.api = {\n      // hide this popup\n      // hide()\n      hide,\n      // update options for this popup\n      // update({ height: 500 } )\n      update,\n      // get this popup - return popupRef\n      // getCurrent()\n      getCurrent,\n      // update position for this popup\n      // updatePosition()\n      updatePosition: () => updatePosition(getCurrent())\n    };\n  }\n\n  const beforeOpen = () => {\n    // re-evaluate reference\n    options.reference = getReference(options.reference, true);\n    return processExistingPopups(options);\n  };\n\n  const handlePrevents = e => {\n    e.stopPropagation();\n  };\n\n  Object.assign(options, {\n    componentMounted,\n    beforeOpen,\n    handlePrevents\n  });\n  return options;\n}\n\nfunction inflateOptions(options) {\n  if (options.multiple === true) {\n    options.forceUid = true;\n    options.useCloseContext = true;\n  }\n\n  if (options.whenParentScrolls === 'follow') {\n    options.followParentScroll = true;\n  } else {\n    options.followParentScroll = false;\n    options.closeWhenParentScroll = true;\n  }\n\n  if (options.toggleMode) {\n    options.ignoreReferenceClick = true;\n  }\n\n  if (options.preset === 'modal') {\n    options.relative = false;\n  }\n\n  if (options.hasMask) {\n    options.isModal = true;\n  } // legacy compatible\n  // 'isModal' was deprecated, suggest use 'preset' only\n\n\n  if (options.hasMask && !_.has(options, 'isModal')) {\n    options.isModal = true;\n  } //if preset is not included in options but hasArrow is true, user a wants balloon popup\n\n\n  if (!_.has(options, 'preset') && options.hasArrow && !options.innerClassName) {\n    options.innerClassName = 'aw-popup-balloon';\n  }\n\n  if (options.isModal && !_.has(options, 'preset')) {\n    options.preset = 'modal';\n  } // end\n  // improve the flexibility to support both single value and array values.\n\n\n  if (options.placement && _.isArray(options.placement)) {\n    [options.placement, ...options.alternativePlacements] = options.placement;\n  }\n}\n\nfunction setPositionAtMousePosition(popupEl, event) {\n  const popup = utils.getContainerElement(popupEl);\n  const resizeContainer = utils.getResizeContainer(popupEl);\n  const height = popup.offsetHeight;\n  const width = popup.offsetWidth;\n  const position = utils.getMousePosition(event);\n  let left = position.x;\n  let top = position.y; // Check if context menu would go outside of visible window, and move up if needed\n\n  let resizeInfo = null;\n  const maxYNeeded = top + height;\n\n  if (maxYNeeded >= window.innerHeight) {\n    top -= height; // case go out of boundary\n\n    if (top < 0) {\n      resizeInfo = { ...resizeInfo,\n        'max-height': position.y\n      };\n      top = 0;\n    }\n  }\n\n  const maxXNeeded = left + width;\n\n  if (maxXNeeded >= window.innerWidth) {\n    left -= width; // case go out of boundary\n\n    if (left < 0) {\n      resizeInfo = { ...resizeInfo,\n        'max-width': position.x\n      };\n      left = 0;\n    }\n  }\n\n  if (resizeContainer) {\n    // clear resize info case application use cache\n    dom.setStyles(resizeContainer, {\n      'max-height': null,\n      'max-width': null\n    }); // resize if needed\n\n    resizeInfo && dom.setStyles(resizeContainer, resizeInfo);\n  } // position itself\n\n\n  dom.setStyles(popup, {\n    left: left + 'px',\n    top: top + 'px'\n  });\n}\n\nfunction setPositionAtPage(popupEl, options) {\n  const popup = utils.getContainerElement(popupEl);\n  const height = popup.offsetHeight;\n  const width = popup.offsetWidth;\n  const w = window.innerWidth;\n  const h = window.innerHeight;\n  const {\n    placement,\n    resizeContainer,\n    ignoreLimit\n  } = options;\n  const container = utils.getResizeContainer(popupEl, resizeContainer);\n  container && !ignoreLimit && dom.setStyles(container, {\n    'max-width': w * 0.6,\n    'max-height': h * 0.8\n  });\n  const left = (w - width) / 2;\n  let top = (h - height) / 2;\n\n  if (placement === 'top') {\n    top = 0;\n  }\n\n  dom.setStyles(popup, {\n    left,\n    top\n  });\n} // positioning\n\n\nfunction updatePosition(popupRef) {\n  const options = popupRef.options;\n  const popupEl = popupRef.panelEl;\n\n  if (options.disableUpdate) {\n    return;\n  } // case1: position at the mouse position\n\n\n  if (options.targetEvent) {\n    setPositionAtMousePosition(popupEl, options.targetEvent); // case2: position relative to reference element\n  } else if (options.reference && options.relative) {\n    const reference = utils.getElement(options.reference); // referenceEl could be destroyed in detachMode. need to get it again.\n    // if ( options.detachMode ) { reference = utils.getElement( utils.extendSelector( options.userOptions.reference ) ); }\n\n    setPosition(popupEl, reference, options);\n  } else {\n    // case3: position at the page center by default, or top center\n    if (options.draggable) {\n      options.disableUpdate = true;\n    }\n\n    setPositionAtPage(popupEl, options);\n  }\n\n  popupRef.triggerHook('update');\n}\n\nfunction setPosition(popupEl, referenceEl, options) {\n  const containerEl = utils.getContainerElement(popupEl);\n\n  if (!referenceEl || !containerEl) {\n    return;\n  }\n\n  if (!dom.inDOM(referenceEl)) {\n    close(popupEl);\n    return;\n  }\n\n  if (options && options.placement) {\n    const offset = positionService.calculateOffsets(referenceEl, containerEl, options);\n    const {\n      popup,\n      arrow\n    } = offset;\n    const {\n      top,\n      bottom,\n      left,\n      right\n    } = popup;\n    dom.setStyles(containerEl, {\n      top,\n      bottom,\n      left,\n      right\n    });\n\n    if (options.hasArrow && arrow) {\n      const arrowEl = utils.getArrowElement(containerEl);\n      arrowEl && dom.setStyles(arrowEl, arrow, true);\n    }\n  }\n}\n\nconst adaptiveOptions = options => {\n  options = options || {};\n  let result = options; // old fashion\n\n  if (options.declView || options.options) {\n    result = { ...options.options,\n      ...options.locals,\n      // apply first level and any overrides\n      ...options\n    }; // rename\n\n    if (options.declView) {\n      result.view = options.declView;\n    } // clear the garbage to avoid pollution\n\n\n    delete result.options;\n    delete result.locals;\n    delete result.declView;\n  }\n\n  return result;\n};\n/*\n * @alternative use popup action and popup view, ref: https://gitlab.industrysoftware.automation.siemens.com/Apollo/swf/-/wikis/popup-design-and-interface\n *\n */\n\n\nfunction show(options) {\n  const globalPopup = appCtxService.getCtx('globalPopup');\n\n  if (globalPopup) {\n    const finalOptions = adaptiveOptions(options);\n    return globalPopup.show(finalOptions);\n  }\n}\n/**\n * Schedules an update by popupEl or popupRef. It will run on the next UI update available.\n *\n * @param {Object} popupEl - the popupEl / popupRef to update.\n *\n * @returns {Promise} promise with the updated popupRef\n */\n\n\nfunction update(popupEl) {\n  const popupRef = manager.get(popupEl.id);\n  popupRef && popupRef.scheduleUpdate();\n  return Promise.resolve(popupRef);\n}\n/*\n * @alternative use popup action and popup view, ref: https://gitlab.industrysoftware.automation.siemens.com/Apollo/swf/-/wikis/popup-design-and-interface\n *\n */\n// support hide as an alias for post compatibility\n\n\nconst hide = close;\nexport { show, hide, close, update, consolidateOptions };\nconst popupService = {\n  show,\n  hide,\n  close,\n  update,\n  consolidateOptions\n};\nexport { popupService };\nexport default popupService;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/popup/src/js/popupService.js"],"names":["DOMAPIs","manager","utils","MIN_SIZE","BUFFER_SIZE","_defaultOptions","clickOutsideToClose","whenParentScrolls","useOutsideScrollEvent","arrowOptions","alignment","offset","shift","parent","document","enableAppend","relative","minSize","marginBufferSize","placement","flipBehavior","hooks","whenOpened","whenUpdated","whenClosed","_popupPresets","modal","options","hasMask","innerClassName","adaptiveShift","draggable","handle","balloon","ownContainer","hasArrow","padding","x","y","tooltip","autoFocus","showDuration","hideDuration","resizeToClose","advancePositioning","hasPadding","forceCloseOthers","POPUP_NODE_SELECTOR","excludeId","force","elements","popupEl","_","dom","tasks","elem","popupRef","Promise","result","reference","id","close","getReference","componentMounted","updatePosition","userOptions","deepAssign","presetOptions","preset","inflateOptions","getCurrent","beforeOpen","processExistingPopups","handlePrevents","e","Object","popup","resizeContainer","height","width","position","left","top","resizeInfo","maxYNeeded","window","maxXNeeded","w","h","ignoreLimit","container","setPositionAtMousePosition","setPosition","setPositionAtPage","containerEl","positionService","arrow","right","arrowEl","adaptiveOptions","globalPopup","appCtxService","finalOptions","hide","popupService","consolidateOptions"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable valid-jsdoc */\n/* eslint-disable require-jsdoc */\n\n/**\n * @module js/popupService\n */\nimport _ from 'lodash';\nimport utils from 'js/popupUtils';\nimport { DOMAPIs as dom } from 'js/domUtils';\nimport positionService from 'js/positionService';\nimport appCtxService from 'js/appCtxService';\n\nconst manager = new utils.PopupManager();\nconst MIN_SIZE = 50;\nconst BUFFER_SIZE = 20;\n\n// the default popup options\nconst _defaultOptions = {\n    // enable open multiple popups at the same time\n    // multiple: false,\n\n    // pre-defined popup configures provided by framework. accept values: modal, balloon, tooltip\n    // preset: null,\n\n    // enable close the popup when click outside the popup\n    clickOutsideToClose: true,\n\n    // auto update popup position or close popup when the reference element moves, accept values: 'follow', 'close'\n    whenParentScrolls: 'follow',\n\n    // use outside scroll event to do scroll detection, then based on option whenParentScrolls to close or do follow\n    // if set to false, scroll detection will fall back to naive mode: where scroll happens from body to reference.\n    useOutsideScrollEvent: true,\n\n    // modal mode\n    // hasMask: false,\n\n    // has arrow / bubble\n    // hasArrow: false,\n\n    arrowOptions: {\n        // specify where to align the arrow, relative to reference element,\n        // valid value: auto / center / start / end\n        // auto: based on the popup alignment, arrow should be smart position itself.\n        alignment: 'auto',\n        // specify the alignment offset in px, relative to reference element,\n        // could be positive / negative\n        // special used for start / end case.\n        offset: 0,\n        // specify the shift offset in px, relative to popup element,\n        // must be positive\n        shift: 5\n    },\n\n    // the default parent element where the popup element mount to, accept native Element or css selector\n    // only valid when enableAppend is true, disable it by set enableAppend = false\n    parent: document.body,\n\n    // set to false when user uses popup in multiple level / nested case\n    enableAppend: true,\n\n    // the reference element which trigger the popup, accept native Element or css selector\n    // reference: null,\n\n    // enable popup overlapping on reference element\n    // overlapOnReference: false,\n\n    // expect to position popup relative to the reference element\n    relative: true,\n\n    // Use this option when you want to position popup on the current mouse position. It could be the native targetEvent which triggers to show the popup, or any event with clientX, clientY information\n    // targetEvent: null,\n\n    // support add custom styles from application.\n    // required for aw-navigate-breadcrumb and aw-search-breadcrumb\n    // className: '',\n\n    // popup container size, unit should be included and it could be any. optional\n    // height: '',\n    // width: '',\n    // maxWidth: '',\n    // maxHeight: '',\n    // minHeight: '',\n    // minWidth: '',\n\n    // define the minimal size a popup could be, it's required because:\n    // 1, prevent popup too small\n    // 2, smart flip side and alignment to support smart position\n    minSize: MIN_SIZE,\n\n    // UX requirement: define the gap/buffer size for drop shadow when the available space is highly limited\n    marginBufferSize: BUFFER_SIZE,\n\n    // enable popup draggable or not\n    // draggable: false,\n\n    // placement options: ['top-start','top','top-end','right-start','right','right-end',\n    // 'bottom-end','bottom','bottom-start','left-end','left','left-start']\n    placement: 'bottom-start',\n\n    // smart position behavior, accept values: 'fixed', 'opposite', 'clockwise', 'counterclockwise'\n    // define how the position engine to search a available space to place the popup.\n    flipBehavior: 'opposite',\n\n    // popup lifeCycle hooks\n    hooks: {\n        whenOpened: null,\n        whenUpdated: null,\n        whenClosed: null\n    }\n\n    // Only available for command popup action case - whether to show a popup independent(not nested) of that command. By default command popup are nested.\n    // independent: false\n};\n\n/**\n * the default preset options for AFX provided popups,\n * user can override by explicitly configure options\n */\nconst _popupPresets = {\n    modal: {\n        options: {\n            relative: false,\n            hasMask: true,\n            innerClassName: 'aw-popup-Modal',\n            clickOutsideToClose: false,\n            adaptiveShift: true,\n            draggable: true,\n            handle: '.aw-layout-panelTitle, .panel-header',\n            whenParentScrolls: 'close'\n        }\n    },\n    balloon: {\n        options: {\n            ownContainer: true,\n            hasArrow: true,\n            innerClassName: 'aw-popup-balloon',\n            clickOutsideToClose: true,\n            adaptiveShift: true,\n            placement: [ 'top', 'bottom', 'left', 'right' ],\n            flipBehavior: 'opposite',\n            padding: {\n                x: 4,\n                y: 4\n            },\n            arrowOptions: {\n                // specify where to align the arrow, relative to reference element,\n                // valid value: auto / center / start / end\n                alignment: 'auto',\n                // specify the alignment offset in px, relative to reference element,\n                // could be positive / negative\n                // special used for start / end case.\n                offset: 5,\n                // specify the shift offset in px, relative to popup element,\n                // must be positive\n                shift: 15\n            }\n        }\n    },\n    tooltip: {\n        options: {\n            autoFocus: false,\n            showDuration: 100,\n            hideDuration: 100,\n            ownContainer: true,\n            placement: [ 'top', 'bottom', 'right', 'left' ],\n            flipBehavior: 'opposite',\n            whenParentScrolls: 'close',\n            adaptiveShift: true, // prevent tooltip cut off in corner case\n            resizeToClose: true,\n            advancePositioning: true, // prevent overlap or flash when popup content growing\n            hasArrow: true,\n            padding: { x: 4, y: 4 },\n            arrowOptions: {\n                alignment: 'center'\n            },\n            minSize: 5,\n            hasPadding: true,\n            forceCloseOthers: false,\n            innerClassName: 'sw-popup-tooltip sw-popup-easein'\n        }\n    }\n    // EXTENDED FUTURE\n};\n\n// popup node name,\nconst POPUP_NODE_SELECTOR = 'div.sw-popup';\n\n/**\n * serves as advanced version of hide api\n *\n * close popup by the popupEl or target event. null to force close all popups\n *\n * @param {Object | String} popupEl - the popupEl to close. accept native Element element or css selector\n * @param {String} excludeId - the popupEl to exclude\n * @param {Boolean} force - force to close all popups on current page\n * @returns {Promise} promise with the close result, true or false\n */\nfunction close( popupEl, excludeId = null, force = false ) {\n    let elements = [];\n    // if specified and still available on DOM\n    popupEl = utils.getElement( utils.extendSelector( popupEl ) );\n    if( popupEl ) {\n        elements = _.concat( [], popupEl );\n    }\n    // default to force close all popups if no element specified.\n    if( !popupEl ) {\n        elements = dom.getAll( POPUP_NODE_SELECTOR );\n    }\n\n    let tasks = [];\n    _.forEach( elements, function( elem ) {\n        if( excludeId && excludeId === elem.id ) { return; }\n        const popupRef = manager.get( elem.id );\n        popupRef && tasks.push( popupRef.hide( force ) );\n    } );\n\n    return Promise.all( tasks ).then( () => true );\n}\n\nfunction processExistingPopups( options ) {\n    let result = true;\n    const { reference } = options;\n    if( options.multiple === true ) {\n        // prevent create duplicate popup instance for one referenceEl\n        // if the referenceEl already has a popup, show again just by bring the popup to foreground,\n        // return popupRef or true\n        result = utils.handleOpenedPopup( reference, manager );\n    } else {\n        // if in singleton mode, always force close others\n        // process others\n        // return true\n        if( options.forceCloseOthers !== false ) {\n            const id = reference ? reference.getAttribute( utils.POPUP_ID_ATTRIBUTE ) : null;\n            close( null, id );\n            result = true;\n        }\n        // process self\n        // return null or true\n        if( options.toggleMode === true ) {\n            // if the referenceEl already has a popup, close it and return null to indicate exit\n            result = utils.handleOpenedPopup( reference, manager, true );\n        }\n    }\n    return result;\n}\n\nfunction deepAssign() {\n    function customize( objValue, srcValue, key ) {\n        // simple assign by default\n        let result = srcValue;\n        // go deeper for these keys\n        if( [ 'arrowOptions', 'hooks' ].indexOf( key ) !== -1 ) {\n            result = _.assign( {}, objValue, srcValue );\n        }\n        return result;\n    }\n    return _.assignWith( {}, ...arguments, customize );\n    //return _.partialRight( _.assignWith, customize )( ...arguments );\n}\n\nconst getReference = ( reference, force = false ) => {\n    // case ref\n    if( reference && _.has( reference, 'current' ) ) {\n        if( force ) { return reference.current; }\n        return reference.current || reference;\n    }\n    // case native dom or normal selector\n    return utils.getElement( reference );\n};\n\nconst componentMounted = ( options, popupEl ) => {\n    // re-evaluate reference\n    const reference = getReference( options.reference, true );\n    let popupRef = new utils.PanelRef( popupEl, { ...options, reference } );\n\n    options.showDeferred.current && options.showDeferred.current.resolve( popupRef );\n\n    manager.add( popupRef );\n    popupRef.attach();\n    updatePosition( popupRef );\n\n    return function componentWillUnMounted() {\n        options.hideDeferred.current && options.hideDeferred.current.resolve( true );\n        options.showDeferred.current && options.showDeferred.current.resolve( true );\n        manager.remove( popupRef );\n        popupRef.detach();\n\n        // clean up resources\n        options.showDeferred.current = null;\n        options.hideDeferred.current = null;\n        popupRef = null;\n    };\n};\n\nfunction consolidateOptions( options, hide, update ) {\n    // backup user options\n    const userOptions = deepAssign( {}, options );\n\n    // merge presetOptions if any preset defined\n    let presetOptions = {};\n    const preset = options.preset;\n    if( preset && _.has( _popupPresets, preset ) ) {\n        presetOptions = _popupPresets[ preset ].options;\n    }\n\n    options = deepAssign( {}, _defaultOptions, presetOptions, options );\n    options.userOptions = userOptions;\n    options.parent = utils.getElement( options.parent ) || document.body;\n    options.reference = getReference( options.reference );\n    options.manager = manager;\n    inflateOptions( options );\n\n    // apis being passed around(to subview) to control popups, only initial once\n    if( !options.api ) {\n        const getCurrent = () => manager.get( options.popupReference.current.id );\n\n        options.api = {\n            // hide this popup\n            // hide()\n            hide,\n            // update options for this popup\n            // update({ height: 500 } )\n            update,\n            // get this popup - return popupRef\n            // getCurrent()\n            getCurrent,\n            // update position for this popup\n            // updatePosition()\n            updatePosition: () => updatePosition( getCurrent() )\n        };\n    }\n\n    const beforeOpen = () => {\n        // re-evaluate reference\n        options.reference = getReference( options.reference, true );\n        return processExistingPopups( options );\n    };\n    const handlePrevents = ( e ) => {\n        e.stopPropagation();\n    };\n    Object.assign( options, { componentMounted, beforeOpen, handlePrevents } );\n    return options;\n}\n\nfunction inflateOptions( options ) {\n    if( options.multiple === true ) {\n        options.forceUid = true;\n        options.useCloseContext = true;\n    }\n    if( options.whenParentScrolls === 'follow' ) {\n        options.followParentScroll = true;\n    } else {\n        options.followParentScroll = false;\n        options.closeWhenParentScroll = true;\n    }\n    if( options.toggleMode ) {\n        options.ignoreReferenceClick = true;\n    }\n    if( options.preset === 'modal' ) {\n        options.relative = false;\n    }\n    if( options.hasMask ) {\n        options.isModal = true;\n    }\n\n    // legacy compatible\n    // 'isModal' was deprecated, suggest use 'preset' only\n    if( options.hasMask && !_.has( options, 'isModal' ) ) {\n        options.isModal = true;\n    }\n    //if preset is not included in options but hasArrow is true, user a wants balloon popup\n    if( !_.has( options, 'preset' ) && options.hasArrow && !options.innerClassName ) {\n        options.innerClassName = 'aw-popup-balloon';\n    }\n    if( options.isModal && !_.has( options, 'preset' ) ) {\n        options.preset = 'modal';\n    }\n    // end\n\n    // improve the flexibility to support both single value and array values.\n    if( options.placement && _.isArray( options.placement ) ) {\n        [ options.placement, ...options.alternativePlacements ] = options.placement;\n    }\n}\n\nfunction setPositionAtMousePosition( popupEl, event ) {\n    const popup = utils.getContainerElement( popupEl );\n    const resizeContainer = utils.getResizeContainer( popupEl );\n    const height = popup.offsetHeight;\n    const width = popup.offsetWidth;\n    const position = utils.getMousePosition( event );\n    let left = position.x;\n    let top = position.y;\n\n    // Check if context menu would go outside of visible window, and move up if needed\n    let resizeInfo = null;\n    const maxYNeeded = top + height;\n    if( maxYNeeded >= window.innerHeight ) {\n        top -= height;\n        // case go out of boundary\n        if( top < 0 ) {\n            resizeInfo = { ...resizeInfo, 'max-height': position.y };\n            top = 0;\n        }\n    }\n    const maxXNeeded = left + width;\n    if( maxXNeeded >= window.innerWidth ) {\n        left -= width;\n        // case go out of boundary\n        if( left < 0 ) {\n            resizeInfo = { ...resizeInfo, 'max-width': position.x };\n            left = 0;\n        }\n    }\n\n    if( resizeContainer ) {\n        // clear resize info case application use cache\n        dom.setStyles( resizeContainer, { 'max-height': null, 'max-width': null } );\n        // resize if needed\n        resizeInfo && dom.setStyles( resizeContainer, resizeInfo );\n    }\n    // position itself\n    dom.setStyles( popup, {\n        left: left + 'px',\n        top: top + 'px'\n    } );\n}\n\nfunction setPositionAtPage( popupEl, options ) {\n    const popup = utils.getContainerElement( popupEl );\n    const height = popup.offsetHeight;\n    const width = popup.offsetWidth;\n\n    const w = window.innerWidth;\n    const h = window.innerHeight;\n\n    const { placement, resizeContainer, ignoreLimit } = options;\n    const container = utils.getResizeContainer( popupEl, resizeContainer );\n    container && !ignoreLimit && dom.setStyles( container, { 'max-width': w * 0.6, 'max-height': h * 0.8 } );\n\n    const left = ( w - width ) / 2;\n    let top = ( h - height ) / 2;\n    if( placement === 'top' ) {\n        top = 0;\n    }\n\n    dom.setStyles( popup, { left, top } );\n}\n\n// positioning\nfunction updatePosition( popupRef ) {\n    const options = popupRef.options;\n    const popupEl = popupRef.panelEl;\n\n    if( options.disableUpdate ) { return; }\n\n    // case1: position at the mouse position\n    if( options.targetEvent ) {\n        setPositionAtMousePosition( popupEl, options.targetEvent );\n        // case2: position relative to reference element\n    } else if( options.reference && options.relative ) {\n        const reference = utils.getElement( options.reference );\n        // referenceEl could be destroyed in detachMode. need to get it again.\n        // if ( options.detachMode ) { reference = utils.getElement( utils.extendSelector( options.userOptions.reference ) ); }\n        setPosition( popupEl, reference, options );\n    } else {\n        // case3: position at the page center by default, or top center\n        if( options.draggable ) {\n            options.disableUpdate = true;\n        }\n        setPositionAtPage( popupEl, options );\n    }\n    popupRef.triggerHook( 'update' );\n}\n\nfunction setPosition( popupEl, referenceEl, options ) {\n    const containerEl = utils.getContainerElement( popupEl );\n    if( !referenceEl || !containerEl ) { return; }\n\n    if( !dom.inDOM( referenceEl ) ) {\n        close( popupEl );\n        return;\n    }\n\n    if( options && options.placement ) {\n        const offset = positionService.calculateOffsets( referenceEl, containerEl, options );\n\n        const { popup, arrow } = offset;\n        const { top, bottom, left, right } = popup;\n        dom.setStyles( containerEl, { top, bottom, left, right } );\n\n        if( options.hasArrow && arrow ) {\n            const arrowEl = utils.getArrowElement( containerEl );\n            arrowEl && dom.setStyles( arrowEl, arrow, true );\n        }\n    }\n}\n\nconst adaptiveOptions = ( options ) => {\n    options = options || {};\n    let result = options;\n    // old fashion\n    if( options.declView || options.options ) {\n        result = {\n            ...options.options,\n            ...options.locals,\n            // apply first level and any overrides\n            ...options\n        };\n        // rename\n        if( options.declView ) {\n            result.view = options.declView;\n        }\n\n        // clear the garbage to avoid pollution\n        delete result.options;\n        delete result.locals;\n        delete result.declView;\n    }\n    return result;\n};\n\n/*\n * @alternative use popup action and popup view, ref: https://gitlab.industrysoftware.automation.siemens.com/Apollo/swf/-/wikis/popup-design-and-interface\n *\n */\nfunction show( options ) {\n    const globalPopup = appCtxService.getCtx( 'globalPopup' );\n    if( globalPopup ) {\n        const finalOptions = adaptiveOptions( options );\n        return globalPopup.show( finalOptions );\n    }\n}\n\n/**\n * Schedules an update by popupEl or popupRef. It will run on the next UI update available.\n *\n * @param {Object} popupEl - the popupEl / popupRef to update.\n *\n * @returns {Promise} promise with the updated popupRef\n */\nfunction update( popupEl ) {\n    const popupRef = manager.get( popupEl.id );\n    popupRef && popupRef.scheduleUpdate();\n    return Promise.resolve( popupRef );\n}\n\n/*\n * @alternative use popup action and popup view, ref: https://gitlab.industrysoftware.automation.siemens.com/Apollo/swf/-/wikis/popup-design-and-interface\n *\n */\n// support hide as an alias for post compatibility\nconst hide = close;\n\nexport {\n    show,\n    hide,\n    close,\n    update,\n    consolidateOptions\n};\n\nconst popupService = {\n    show,\n    hide,\n    close,\n    update,\n    consolidateOptions\n};\nexport { popupService };\nexport default popupService;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _arguments = typeof arguments === \"undefined\" ? void 0 : arguments; // Copyright (c) 2020 Siemens\n\n/* eslint-env es6 */\n\n/* eslint-disable no-undef */\n\n\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * This module provides abstraction for core setTimeout() JS services with additional digestCycle trigger supported by AngularJS.\n *\n * @module js/awTimeoutService\n */\n\nexport const instance = function (func) {\n  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let invokeApply = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (typeof func !== 'function') {\n    invokeApply = timeout;\n    timeout = func;\n    func = null;\n  }\n\n  let timeoutId;\n  let promise = AwPromiseService.instance(resolve => {\n    timeoutId = setTimeout(() => {\n      if (func) {\n        var args = [].slice.call(_arguments, 3 || 0);\n        resolve(func.apply(null, args));\n      } else {\n        resolve(null);\n      }\n    }, timeout);\n  });\n  promise.timeoutId = timeoutId;\n  return promise;\n};\n\ninstance.cancel = promise => {\n  if (promise && promise.timeoutId) {\n    clearTimeout(promise.timeoutId);\n  }\n};\n\nvar exports = {\n  instance\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/services/src/js/awTimeoutService.js"],"names":["instance","timeout","invokeApply","func","promise","resolve","timeoutId","setTimeout","args","clearTimeout","exports"],"mappings":"wEAAA;;AACA;;AACA;;;AACA,OAAA,gBAAA,MAAA,qBAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,QAAQ,GAAG,UAAA,IAAA,EAA6C;EAAA,IAArCC,OAAqC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAA3B,CAA2B;EAAA,IAAxBC,WAAwB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAV,IAAU;;EACjE,IAAI,OAAA,IAAA,KAAJ,UAAA,EAAiC;IAC7BA,WAAW,GAAXA,OAAAA;IACAD,OAAO,GAAPA,IAAAA;IACAE,IAAI,GAAJA,IAAAA;EACH;;EACD,IAAA,SAAA;EACA,IAAIC,OAAO,GAAG,gBAAgB,CAAhB,QAAA,CAA2BC,OAAO,IAAI;IAChDC,SAAS,GAAGC,UAAU,CAAE,MAAM;MAC1B,IAAA,IAAA,EAAW;QACP,IAAIC,IAAI,GAAG,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,EAA0B,KAArC,CAAW,CAAX;QACAH,OAAO,CAAEF,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAATE,IAASF,CAAF,CAAPE;MAFJ,CAAA,MAGO;QACHA,OAAO,CAAPA,IAAO,CAAPA;MACH;IANiB,CAAA,EAAtBC,OAAsB,CAAtBA;EADJ,CAAc,CAAd;EAUAF,OAAO,CAAPA,SAAAA,GAAAA,SAAAA;EACA,OAAA,OAAA;AAlBG,CAAA;;AAqBPJ,QAAQ,CAARA,MAAAA,GAAoBI,OAAF,IAAe;EAC7B,IAAIA,OAAO,IAAIA,OAAO,CAAtB,SAAA,EAAmC;IAC/BK,YAAY,CAAEL,OAAO,CAArBK,SAAY,CAAZA;EACH;AAHLT,CAAAA;;AAMA,IAAIU,OAAO,GAAG;EACVV;AADU,CAAd;AAIA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n/* eslint-env es6 */\n/* eslint-disable no-undef */\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * This module provides abstraction for core setTimeout() JS services with additional digestCycle trigger supported by AngularJS.\n *\n * @module js/awTimeoutService\n */\n\nexport const instance = ( func, timeout = 0, invokeApply = true ) => {\n    if( typeof func !== 'function' ) {\n        invokeApply = timeout;\n        timeout = func;\n        func = null;\n    }\n    let timeoutId;\n    let promise = AwPromiseService.instance( resolve => {\n        timeoutId = setTimeout( () => {\n            if( func ) {\n                var args = [].slice.call( arguments, 3 || 0 );\n                resolve( func.apply( null, args ) );\n            } else {\n                resolve( null );\n            }\n        }, timeout );\n    } );\n    promise.timeoutId = timeoutId;\n    return promise;\n};\n\ninstance.cancel = ( promise ) => {\n    if( promise && promise.timeoutId ) {\n        clearTimeout( promise.timeoutId );\n    }\n};\n\nvar exports = {\n    instance\n};\n\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
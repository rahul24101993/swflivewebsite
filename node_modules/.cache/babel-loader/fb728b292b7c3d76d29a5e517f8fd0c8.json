{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/localeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport cfgSvc from 'js/configurationService';\nimport localStrg from 'js/localStorage'; // revisitme - should be 'config/installedLocales'\n\nimport 'js/installedLocales';\nimport AwPromiseService from 'js/awPromiseService';\n/**\n * The country (i.e. region) code of the current locale that will be appended to the textBundle name to resolve the\n * text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)).\n *\n * @private\n */\n\nvar _bundleSuffix = '';\n/**\n * Locale value set up-to-date once login is complete.\n * <P>\n * Note: Until login, the default values we be as shown here.\n *\n * @private\n */\n\nvar _localeCode;\n/**\n * Cache of installed locales\n * @private\n */\n\n\nvar _installedLocales;\n/**\n * Local Storage key for last used locale.\n * @private\n */\n\n\nvar getBrowserSessionLocaleKey = 'locale';\n/**\n * Default locale if local storage locale is undefined\n * @private\n */\n\nvar getDefaultLocaleCode = 'en';\nlet exports;\n/**\n * @return {String[]} array of installed locales\n */\n\nexport let getInstalledLocales = function () {\n  return _installedLocales;\n};\n/**\n * @param {String} locale - input locale\n * @return {String|null} resolved locale\n */\n\nfunction matchInstalledLocales(locale) {\n  locale = locale.replace(/-/g, '_');\n\n  if (_installedLocales.indexOf(locale) > -1) {\n    return locale;\n  } // search by the 2 character locale\n\n\n  var localeShort = locale.substring(0, 2).toLowerCase();\n\n  var ndx = _installedLocales.indexOf(localeShort);\n\n  if (ndx > -1) {\n    return _installedLocales[ndx];\n  } // search by ignoring case\n\n\n  var resolvedLocale;\n\n  _.forEach(_installedLocales, function (installedLocale) {\n    if (locale.toLowerCase() === installedLocale.toLowerCase()) {\n      resolvedLocale = installedLocale;\n      return false; // break\n    }\n  });\n\n  if (!resolvedLocale) {\n    // search based upon only the first 2 characters\n    _.forEach(_installedLocales, function (installedLocale) {\n      if (localeShort && installedLocale.startsWith(localeShort)) {\n        resolvedLocale = installedLocale;\n        return false; // break\n      }\n    });\n  }\n\n  return resolvedLocale;\n}\n/**\n * Return the current locale from the URL or browsers 'userAgent'\n *\n * @return {String} The 'locale' code for the current browser session based on a 'locale=' query in the URL or the\n *         browsers 'userAgent' (e.g. 'en_US', 'zh_CN', etc.).\n */\n\n\nfunction resolveLocale() {\n  var localeCode;\n  /**\n   * (1) Look for the 'locale' in the URL and if found extract the value from it.\n   */\n\n  var localeFromURL = browserUtils.getUrlAttributes().locale;\n\n  if (localeFromURL) {\n    localeCode = matchInstalledLocales(localeFromURL);\n\n    if (!localeCode) {\n      // Remove invalid locale settings from URL\n      browserUtils.removeUrlAttribute('locale');\n    }\n  }\n\n  if (!localeCode) {\n    /**\n     * (2) Check localStorage for a last used locale\n     */\n    localeCode = localStrg.get(getBrowserSessionLocaleKey);\n\n    if (localeCode) {\n      localeCode = matchInstalledLocales(localeCode);\n    }\n  }\n\n  if (!localeCode) {\n    /**\n     * (3) Check if we should simply assume the browser's current locale setting.\n     */\n    var navigator = browserUtils.getWindowNavigator();\n\n    if (navigator) {\n      localeCode = matchInstalledLocales(navigator.userLanguage || navigator.language);\n    }\n  }\n\n  if (!localeCode) {\n    /**\n     * (4) Fallback to initial locale in installed array\n     */\n    localeCode = _installedLocales[0];\n  }\n\n  setLocaleInt(localeCode);\n  return localeCode;\n}\n/**\n * Sets the selected locale in local storage\n *\n * @param {Object} loginPageLocale - selected locale\n * @ignore\n */\n\n\nexport let setLocaleInLocalStorage = function (loginPageLocale) {\n  localStrg.publish(getBrowserSessionLocaleKey, loginPageLocale);\n  setLocaleInDOM();\n};\n/**\n * Sets the selected locale in DOM html tag\n */\n\nfunction setLocaleInDOM() {\n  let localeCode = localStrg.get(getBrowserSessionLocaleKey);\n  let element = document.getElementsByTagName('HTML')[0];\n  let attLang = document.createAttribute('lang');\n  attLang.value = localeCode ? localeCode.replace(/_/g, '-') : getDefaultLocaleCode;\n  element.setAttributeNode(attLang);\n}\n/**\n * @param {String} localeCode - locale code\n */\n\n\nfunction setLocaleInt(localeCode) {\n  _localeCode = localeCode;\n  /**\n   * Create the text bundle suffix.\n   */\n\n  if (/^en/.test(localeCode)) {\n    _bundleSuffix = '';\n  } else {\n    _bundleSuffix = '_' + localeCode;\n  }\n}\n/**\n * Initializes user language and country code variables for this service.\n * <P>\n * Note: We handle some special cases to where we want just the language code without the region code (a.k.a.\n * country code).\n *\n * @param {String} localeCode - The locale in standard 'language_Country' format e.g. 'en_US'.\n * @return {String} resolved locale\n * @ignore\n */\n\n\nexport let setLocale = function (localeCode) {\n  localeCode = matchInstalledLocales(localeCode); // Update localStorage with new value\n\n  exports.setLocaleInLocalStorage(localeCode); // Remove from the URL after storing in localStorage\n\n  browserUtils.removeUrlAttribute('locale');\n\n  if (localeCode !== _localeCode) {\n    setLocaleInt(localeCode);\n    eventBus.publish('locale.changed', _localeCode);\n  }\n\n  return localeCode;\n};\n/**\n * Returns the i18n code for the current user language *with* any country or region code.\n * <P>\n * Note: This value set up-to-date once login is complete. Until then, it will return a default locale code of\n * 'en_US'.\n *\n * @return {String} Current Locale value e.g. 'en_US'\n */\n\nexport let getLocale = function () {\n  return _localeCode;\n};\n/**\n * Returns baseName in the path.\n *\n * @param {String} path - path of the resource.\n * @return {String} baseName of the resource.\n */\n\nvar baseName = function (path) {\n  if (!path) {\n    return 'BaseMessages';\n  }\n\n  var base = path.substring(path.lastIndexOf('/') + 1);\n\n  if (base.lastIndexOf('.') !== -1) {\n    base = base.substring(0, base.lastIndexOf('.'));\n  }\n\n  return base;\n};\n/**\n * Returns a promise that will be 'resolved' with the localized string text bundle object for the given i18n\n * 'resource'.\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n *\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @return {Promise} A promise that will be 'resolved' with the localized string text bundle object for the\n *         given i18n 'resource' (or 'null' if the resource is not found or the 'localeService' has not be injected\n *         correctly.).\n */\n\n\nexport let getTextPromise = function (resource, useNative) {\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfg('i18n' + _bundleSuffix + '.' + resourceFinal, false, useNative);\n};\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\n\nexport let getLocalizedText = function (resource, key, useNative) {\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfg('i18n' + _bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative);\n};\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} localeCode - The locale language that the key text will be retrieved from\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\n\nexport let getLocalizedTextBundlePromise = function (localeCode, resource, key, useNative) {\n  var bundleSuffix = '';\n\n  if (/^en/.test(localeCode)) {\n    bundleSuffix = '';\n  } else {\n    bundleSuffix = '_' + localeCode;\n  }\n\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfg('LoginLocale' + bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative);\n};\n/**\n * Returns localized text from the given resource with the given key for all installed languages\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @return {Promise} Promise containing the localized text\n */\n\nexport let getMultiLanguageListPromise = function (resource, key) {\n  var _installedLocales = getInstalledLocales();\n\n  const loginLocale = resource === 'LoginLocale';\n  let languagePromise = AwPromiseService.instance;\n  var localePromises = [];\n  var localeResponses = {};\n\n  for (var i = 0; i < _installedLocales.length; i++) {\n    const locale = _installedLocales[i];\n\n    if (loginLocale) {\n      key = locale;\n    }\n\n    localePromises.push(getLocalizedTextBundlePromise(locale, resource, key).then(function (textBundle) {\n      localeResponses[locale] = textBundle;\n    }));\n  }\n\n  return new languagePromise(function (resolve, reject) {\n    AwPromiseService.instance.all(localePromises).then(function () {\n      resolve(sortObject(localeResponses));\n    }, reject);\n  });\n}; // eslint-disable-next-line require-jsdoc\n\nfunction sortObject(obj) {\n  return Object.keys(obj).sort().reduce(function (result, key) {\n    result[key] = obj[key];\n    return result;\n  }, {});\n}\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource.key to load\n * @param {Boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\n\n\nexport let getLocalizedTextFromKey = async function (resource, useNative) {\n  return cfgSvc.getCfg('i18n' + _bundleSuffix + '.' + resource, false, useNative);\n};\n/**\n * Returns the country (i.e. region) code of the current locale that will be appended to the textBundle name to\n * resolve the text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)). *\n *\n * @return {String} i18n code for the current user region *without* any language code.\n * @ignore\n */\n\nexport let getBundleSuffix = function () {\n  return _bundleSuffix;\n};\n/**\n * Returns the i18n code for the current user language *without* any country or region code.\n *\n * @return {String} The i18n code for the current user language *without* any country or region code.\n * @ignore\n */\n\nexport let getLanguageCode = function () {\n  return _localeCode.substring(0, 2);\n};\n/**\n * Returns a string from cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {String} key - Name of the message to return.\n * @param {String[]} params - Array of message parameters.\n *\n * @return {String} Message with param substitutions.\n */\n\nexport let getMessage = function (key, params) {\n  var msg = getLoadedText()[key];\n  msg && params && params.forEach(function (item, index) {\n    msg = msg.replace(`{${index}}`, params[index]);\n  });\n  return msg;\n};\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle to return.\n *\n * @return {Object} Cached textBundle resource (or NULL if the bundle has not been cached yet).\n */\n\nexport let getLoadedText = function (resource) {\n  var resourceFinal = baseName(resource);\n  return cfgSvc.getCfgCached('i18n' + _bundleSuffix + '.' + resourceFinal);\n};\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle.key to return.\n *\n * @return {String} Cached localized text from textBundle\n */\n\nexport let getLoadedTextFromKey = function (resource) {\n  return cfgSvc.getCfgCached('i18n' + _bundleSuffix + '.' + resource);\n};\n/**\n * Gets the default language based on locale stored in 1) the URL (if 'locale' attributes is defined) or 2) local\n * storage.\n *\n * @param {Object} installedLanguages - default selected locale\n * @param {StringMap} localeTextBundle - (Optional) Text bundle containing a mapping of locale code to locale specific name of the language (eg localeTextBundle.en_US = English).\n * @returns {String} Default language based on locale stored in local storage.\n * @ignore\n */\n\nexport let getDefaultLanguage = function (installedLanguages, localeTextBundle) {\n  var defaultLang = {};\n  var locale = resolveLocale();\n\n  if (localeTextBundle) {\n    if (locale) {\n      defaultLang.dbValue = locale;\n      defaultLang.uiValue = localeTextBundle[locale];\n      defaultLang.isSelected = true;\n      return defaultLang;\n    }\n  } // Override the selected language with local storage locale value\n\n\n  if (locale) {\n    _.forEach(installedLanguages, function (installedLanguage) {\n      if (installedLanguage.dbValue === locale) {\n        installedLanguage.isSelected = true;\n        defaultLang = installedLanguage;\n      }\n    });\n  }\n\n  if (_.isEmpty(defaultLang)) {\n    defaultLang.dbValue = 'en_US';\n    defaultLang.uiValue = 'English';\n    defaultLang.isSelected = true;\n    locale = defaultLang.dbValue;\n  }\n\n  if (locale && locale !== exports.getLocale()) {\n    exports.setLocale(locale);\n  }\n\n  return defaultLang;\n};\nexports = {\n  getInstalledLocales,\n  setLocaleInLocalStorage,\n  setLocale,\n  getLocale,\n  getTextPromise,\n  getLocalizedText,\n  getBundleSuffix,\n  getLanguageCode,\n  getMessage,\n  getLoadedText,\n  getDefaultLanguage,\n  getLocalizedTextFromKey,\n  getLoadedTextFromKey,\n  getMultiLanguageListPromise,\n  getLocalizedTextBundlePromise\n};\nexport default exports;\n_installedLocales = cfgSvc.getCfgCached('installedLocales');\n/**\n * Look for the default 'locale' in the URL and if found extract the value from it.\n */\n\nexports.setLocale(resolveLocale());","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/kernel/src/js/localeService.js"],"names":["_bundleSuffix","getBrowserSessionLocaleKey","getDefaultLocaleCode","getInstalledLocales","locale","_installedLocales","localeShort","ndx","_","installedLocale","resolvedLocale","localeFromURL","browserUtils","localeCode","matchInstalledLocales","localStrg","navigator","setLocaleInt","setLocaleInLocalStorage","setLocaleInDOM","element","document","attLang","_localeCode","setLocale","exports","eventBus","getLocale","baseName","base","path","getTextPromise","resourceFinal","cfgSvc","getLocalizedText","getLocalizedTextBundlePromise","bundleSuffix","getMultiLanguageListPromise","loginLocale","resource","languagePromise","AwPromiseService","localePromises","localeResponses","i","key","resolve","sortObject","result","obj","getLocalizedTextFromKey","getBundleSuffix","getLanguageCode","getMessage","msg","getLoadedText","index","params","getLoadedTextFromKey","getDefaultLanguage","defaultLang","resolveLocale","localeTextBundle","installedLanguage"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAA,CAAA,MAAA,QAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AACA,OAAA,MAAA,MAAA,yBAAA;AACA,OAAA,SAAA,MAAA,iBAAA,C,CACA;;AACA,OAAA,qBAAA;AACA,OAAA,gBAAA,MAAA,qBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,aAAa,GAAjB,EAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAA,WAAA;AAEA;AACA;AACA;AACA;;;AACA,IAAA,iBAAA;AAEA;AACA;AACA;AACA;;;AACA,IAAIC,0BAA0B,GAA9B,QAAA;AAEA;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB,GAAxB,IAAA;AAEA,IAAA,OAAA;AAEA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,YAAW;EACxC,OAAA,iBAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;;AACA,SAAA,qBAAA,CAAA,MAAA,EAAyC;EACrCC,MAAM,GAAGA,MAAM,CAANA,OAAAA,CAAAA,IAAAA,EAATA,GAASA,CAATA;;EACA,IAAIC,iBAAiB,CAAjBA,OAAAA,CAAAA,MAAAA,IAAsC,CAA1C,CAAA,EAA+C;IAC3C,OAAA,MAAA;EAHiC,CAAA,CAMrC;;;EACA,IAAIC,WAAW,GAAGF,MAAM,CAANA,SAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAlB,WAAkBA,EAAlB;;EACA,IAAIG,GAAG,GAAGF,iBAAiB,CAAjBA,OAAAA,CAAV,WAAUA,CAAV;;EACA,IAAIE,GAAG,GAAG,CAAV,CAAA,EAAe;IACX,OAAOF,iBAAiB,CAAxB,GAAwB,CAAxB;EAViC,CAAA,CAarC;;;EACA,IAAA,cAAA;;EACAG,CAAC,CAADA,OAAAA,CAAAA,iBAAAA,EAA8B,UAAA,eAAA,EAA4B;IACtD,IAAIJ,MAAM,CAANA,WAAAA,OAAyBK,eAAe,CAA5C,WAA6BA,EAA7B,EAA6D;MACzDC,cAAc,GAAdA,eAAAA;MACA,OAFyD,KAEzD,CAFyD,CAE3C;IACjB;EAJLF,CAAAA;;EAMA,IAAI,CAAJ,cAAA,EAAsB;IAClB;IACAA,CAAC,CAADA,OAAAA,CAAAA,iBAAAA,EAA8B,UAAA,eAAA,EAA4B;MACtD,IAAIF,WAAW,IAAIG,eAAe,CAAfA,UAAAA,CAAnB,WAAmBA,CAAnB,EAA+D;QAC3DC,cAAc,GAAdA,eAAAA;QACA,OAF2D,KAE3D,CAF2D,CAE7C;MACjB;IAJLF,CAAAA;EAMH;;EACD,OAAA,cAAA;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,aAAA,GAAyB;EACrB,IAAA,UAAA;EAEA;AACJ;AACA;;EACI,IAAIG,aAAa,GAAGC,YAAY,CAAZA,gBAAAA,GAApB,MAAA;;EACA,IAAA,aAAA,EAAoB;IAChBC,UAAU,GAAGC,qBAAqB,CAAlCD,aAAkC,CAAlCA;;IACA,IAAI,CAAJ,UAAA,EAAkB;MACd;MACAD,YAAY,CAAZA,kBAAAA,CAAAA,QAAAA;IACH;EACJ;;EAED,IAAI,CAAJ,UAAA,EAAkB;IACd;AACR;AACA;IACQC,UAAU,GAAGE,SAAS,CAATA,GAAAA,CAAbF,0BAAaE,CAAbF;;IACA,IAAA,UAAA,EAAiB;MACbA,UAAU,GAAGC,qBAAqB,CAAlCD,UAAkC,CAAlCA;IACH;EACJ;;EAED,IAAI,CAAJ,UAAA,EAAkB;IACd;AACR;AACA;IACQ,IAAIG,SAAS,GAAGJ,YAAY,CAA5B,kBAAgBA,EAAhB;;IACA,IAAA,SAAA,EAAgB;MACZC,UAAU,GAAGC,qBAAqB,CAAEE,SAAS,CAATA,YAAAA,IAA0BA,SAAS,CAAvEH,QAAkC,CAAlCA;IACH;EACJ;;EAED,IAAI,CAAJ,UAAA,EAAkB;IACd;AACR;AACA;IACQA,UAAU,GAAGR,iBAAiB,CAA9BQ,CAA8B,CAA9BA;EACH;;EAEDI,YAAY,CAAZA,UAAY,CAAZA;EAEA,OAAA,UAAA;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIC,uBAAuB,GAAG,UAAA,eAAA,EAA4B;EAC7DH,SAAS,CAATA,OAAAA,CAAAA,0BAAAA,EAAAA,eAAAA;EACAI,cAAc;AAFX,CAAA;AAKP;AACA;AACA;;AACA,SAAA,cAAA,GAA0B;EACtB,IAAIN,UAAU,GAAGE,SAAS,CAATA,GAAAA,CAAjB,0BAAiBA,CAAjB;EACA,IAAIK,OAAO,GAAGC,QAAQ,CAARA,oBAAAA,CAAAA,MAAAA,EAAd,CAAcA,CAAd;EACA,IAAIC,OAAO,GAAGD,QAAQ,CAARA,eAAAA,CAAd,MAAcA,CAAd;EACAC,OAAO,CAAPA,KAAAA,GAAgBT,UAAU,GAAGA,UAAU,CAAVA,OAAAA,CAAAA,IAAAA,EAAH,GAAGA,CAAH,GAA1BS,oBAAAA;EACAF,OAAO,CAAPA,gBAAAA,CAAAA,OAAAA;AACH;AAED;AACA;AACA;;;AACA,SAAA,YAAA,CAAA,UAAA,EAAoC;EAChCG,WAAW,GAAXA,UAAAA;EAEA;AACJ;AACA;;EACI,IAAI,MAAA,IAAA,CAAJ,UAAI,CAAJ,EAA+B;IAC3BvB,aAAa,GAAbA,EAAAA;EADJ,CAAA,MAEO;IACHA,aAAa,GAAG,MAAhBA,UAAAA;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIwB,SAAS,GAAG,UAAA,UAAA,EAAuB;EAC1CX,UAAU,GAAGC,qBAAqB,CADQ,UACR,CAAlCD,CAD0C,CAG1C;;EACAY,OAAO,CAAPA,uBAAAA,CAJ0C,UAI1CA,EAJ0C,CAM1C;;EACAb,YAAY,CAAZA,kBAAAA,CAAAA,QAAAA;;EAEA,IAAIC,UAAU,KAAd,WAAA,EAAiC;IAC7BI,YAAY,CAAZA,UAAY,CAAZA;IAEAS,QAAQ,CAARA,OAAAA,CAAAA,gBAAAA,EAAAA,WAAAA;EACH;;EAED,OAAA,UAAA;AAfG,CAAA;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,YAAW;EAC9B,OAAA,WAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,UAAA,IAAA,EAAiB;EAC5B,IAAI,CAAJ,IAAA,EAAY;IACR,OAAA,cAAA;EACH;;EACD,IAAIC,IAAI,GAAGC,IAAI,CAAJA,SAAAA,CAAgBA,IAAI,CAAJA,WAAAA,CAAAA,GAAAA,IAA3B,CAAWA,CAAX;;EACA,IAAID,IAAI,CAAJA,WAAAA,CAAAA,GAAAA,MAA4B,CAAhC,CAAA,EAAqC;IACjCA,IAAI,GAAGA,IAAI,CAAJA,SAAAA,CAAAA,CAAAA,EAAmBA,IAAI,CAAJA,WAAAA,CAA1BA,GAA0BA,CAAnBA,CAAPA;EACH;;EACD,OAAA,IAAA;AARJ,CAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIE,cAAc,GAAG,UAAA,QAAA,EAAA,SAAA,EAAgC;EACxD,IAAIC,aAAa,GAAGJ,QAAQ,CAA5B,QAA4B,CAA5B;EACA,OAAOK,MAAM,CAANA,MAAAA,CAAe,SAAA,aAAA,GAAA,GAAA,GAAfA,aAAAA,EAAAA,KAAAA,EAAP,SAAOA,CAAP;AAFG,CAAA;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAA,QAAA,EAAA,GAAA,EAAA,SAAA,EAAqC;EAC/D,IAAIF,aAAa,GAAGJ,QAAQ,CAA5B,QAA4B,CAA5B;EACA,OAAOK,MAAM,CAANA,MAAAA,CAAe,SAAA,aAAA,GAAA,GAAA,GAAA,aAAA,GAAA,GAAA,GAAfA,GAAAA,EAAAA,KAAAA,EAAP,SAAOA,CAAP;AAFG,CAAA;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,6BAA6B,GAAG,UAAA,UAAA,EAAA,QAAA,EAAA,GAAA,EAAA,SAAA,EAAiD;EACxF,IAAIC,YAAY,GAAhB,EAAA;;EACA,IAAI,MAAA,IAAA,CAAJ,UAAI,CAAJ,EAA+B;IAC3BA,YAAY,GAAZA,EAAAA;EADJ,CAAA,MAEO;IACHA,YAAY,GAAG,MAAfA,UAAAA;EACH;;EACD,IAAIJ,aAAa,GAAGJ,QAAQ,CAA5B,QAA4B,CAA5B;EACA,OAAOK,MAAM,CAANA,MAAAA,CAAe,gBAAA,YAAA,GAAA,GAAA,GAAA,aAAA,GAAA,GAAA,GAAfA,GAAAA,EAAAA,KAAAA,EAAP,SAAOA,CAAP;AARG,CAAA;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAII,2BAA2B,GAAG,UAAA,QAAA,EAAA,GAAA,EAA0B;EAC/D,IAAIhC,iBAAiB,GAAGF,mBAAxB,EAAA;;EACA,MAAMmC,WAAW,GAAGC,QAAQ,KAA5B,aAAA;EAEA,IAAIC,eAAe,GAAGC,gBAAgB,CAAtC,QAAA;EAEA,IAAIC,cAAc,GAAlB,EAAA;EACA,IAAIC,eAAe,GAAnB,EAAA;;EAEA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGvC,iBAAiB,CAArC,MAAA,EAA8CuC,CAA9C,EAAA,EAAoD;IAChD,MAAMxC,MAAM,GAAGC,iBAAiB,CAAhC,CAAgC,CAAhC;;IACA,IAAA,WAAA,EAAkB;MACdwC,GAAG,GAAHA,MAAAA;IACH;;IACDH,cAAc,CAAdA,IAAAA,CACI,6BAA6B,CAAA,MAAA,EAAA,QAAA,EAA7B,GAA6B,CAA7B,CAAA,IAAA,CAA6D,UAAA,UAAA,EAAuB;MAChFC,eAAe,CAAfA,MAAe,CAAfA,GAAAA,UAAAA;IAFRD,CACI,CADJA;EAKH;;EAED,OAAO,IAAA,eAAA,CAAqB,UAAA,OAAA,EAAA,MAAA,EAA4B;IACpDD,gBAAgB,CAAhBA,QAAAA,CAAAA,GAAAA,CAAAA,cAAAA,EAAAA,IAAAA,CAEQ,YAAW;MACfK,OAAO,CAAEC,UAAU,CAAnBD,eAAmB,CAAZ,CAAPA;IAHJL,CAAAA,EAAAA,MAAAA;EADJ,CAAO,CAAP;AArBG,CAAA,C,CA8BP;;AACA,SAAA,UAAA,CAAA,GAAA,EAA2B;EACvB,OAAO,MAAM,CAAN,IAAA,CAAA,GAAA,EAAA,IAAA,GAAA,MAAA,CAAkC,UAAA,MAAA,EAAA,GAAA,EAAwB;IAC7DO,MAAM,CAANA,GAAM,CAANA,GAAcC,GAAG,CAAjBD,GAAiB,CAAjBA;IACA,OAAA,MAAA;EAFG,CAAA,EAAP,EAAO,CAAP;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIE,uBAAuB,GAAG,gBAAA,QAAA,EAAA,SAAA,EAAsC;EACvE,OAAOjB,MAAM,CAANA,MAAAA,CAAe,SAAA,aAAA,GAAA,GAAA,GAAfA,QAAAA,EAAAA,KAAAA,EAAP,SAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIkB,eAAe,GAAG,YAAW;EACpC,OAAA,aAAA;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,eAAe,GAAG,YAAW;EACpC,OAAO7B,WAAW,CAAXA,SAAAA,CAAAA,CAAAA,EAAP,CAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI8B,UAAU,GAAG,UAAA,GAAA,EAAA,MAAA,EAAwB;EAC5C,IAAIC,GAAG,GAAGC,aAAa,GAAvB,GAAuB,CAAvB;EAEAD,GAAG,IAAHA,MAAAA,IAAiB,MAAM,CAAN,OAAA,CAAgB,UAAA,IAAA,EAAA,KAAA,EAAwB;IACrDA,GAAG,GAAGA,GAAG,CAAHA,OAAAA,CAAc,IAAGE,KAAjBF,GAAAA,EAA2BG,MAAM,CAAvCH,KAAuC,CAAjCA,CAANA;EADJA,CAAiB,CAAjBA;EAGA,OAAA,GAAA;AANG,CAAA;AASP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAA,QAAA,EAAqB;EAC5C,IAAIvB,aAAa,GAAGJ,QAAQ,CAA5B,QAA4B,CAA5B;EAEA,OAAOK,MAAM,CAANA,YAAAA,CAAqB,SAAA,aAAA,GAAA,GAAA,GAA5B,aAAOA,CAAP;AAHG,CAAA;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIyB,oBAAoB,GAAG,UAAA,QAAA,EAAqB;EACnD,OAAOzB,MAAM,CAANA,YAAAA,CAAqB,SAAA,aAAA,GAAA,GAAA,GAA5B,QAAOA,CAAP;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI0B,kBAAkB,GAAG,UAAA,kBAAA,EAAA,gBAAA,EAAiD;EAC7E,IAAIC,WAAW,GAAf,EAAA;EAEA,IAAIxD,MAAM,GAAGyD,aAAb,EAAA;;EAEA,IAAA,gBAAA,EAAuB;IACnB,IAAA,MAAA,EAAa;MACTD,WAAW,CAAXA,OAAAA,GAAAA,MAAAA;MACAA,WAAW,CAAXA,OAAAA,GAAsBE,gBAAgB,CAAtCF,MAAsC,CAAtCA;MACAA,WAAW,CAAXA,UAAAA,GAAAA,IAAAA;MAEA,OAAA,WAAA;IACH;EAZwE,CAAA,CAe7E;;;EACA,IAAA,MAAA,EAAa;IACTpD,CAAC,CAADA,OAAAA,CAAAA,kBAAAA,EAA+B,UAAA,iBAAA,EAA8B;MACzD,IAAIuD,iBAAiB,CAAjBA,OAAAA,KAAJ,MAAA,EAA2C;QACvCA,iBAAiB,CAAjBA,UAAAA,GAAAA,IAAAA;QACAH,WAAW,GAAXA,iBAAAA;MACH;IAJLpD,CAAAA;EAMH;;EAED,IAAIA,CAAC,CAADA,OAAAA,CAAJ,WAAIA,CAAJ,EAA+B;IAC3BoD,WAAW,CAAXA,OAAAA,GAAAA,OAAAA;IACAA,WAAW,CAAXA,OAAAA,GAAAA,SAAAA;IACAA,WAAW,CAAXA,UAAAA,GAAAA,IAAAA;IACAxD,MAAM,GAAGwD,WAAW,CAApBxD,OAAAA;EACH;;EAED,IAAIA,MAAM,IAAIA,MAAM,KAAKqB,OAAO,CAAhC,SAAyBA,EAAzB,EAA+C;IAC3CA,OAAO,CAAPA,SAAAA,CAAAA,MAAAA;EACH;;EAED,OAAA,WAAA;AApCG,CAAA;AAuCPA,OAAO,GAAG;EAAA,mBAAA;EAAA,uBAAA;EAAA,SAAA;EAAA,SAAA;EAAA,cAAA;EAAA,gBAAA;EAAA,eAAA;EAAA,eAAA;EAAA,UAAA;EAAA,aAAA;EAAA,kBAAA;EAAA,uBAAA;EAAA,oBAAA;EAAA,2BAAA;EAeNU;AAfM,CAAVV;AAiBA,eAAA,OAAA;AAEApB,iBAAiB,GAAG4B,MAAM,CAANA,YAAAA,CAApB5B,kBAAoB4B,CAApB5B;AAEA;AACA;AACA;;AACAoB,OAAO,CAAPA,SAAAA,CAAmBoC,aAAnBpC,EAAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/localeService\n *\n * @publishedApolloService\n */\nimport _ from 'lodash';\nimport eventBus from 'js/eventBus';\nimport browserUtils from 'js/browserUtils';\nimport cfgSvc from 'js/configurationService';\nimport localStrg from 'js/localStorage';\n// revisitme - should be 'config/installedLocales'\nimport 'js/installedLocales';\nimport AwPromiseService from 'js/awPromiseService';\n\n/**\n * The country (i.e. region) code of the current locale that will be appended to the textBundle name to resolve the\n * text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)).\n *\n * @private\n */\nvar _bundleSuffix = '';\n\n/**\n * Locale value set up-to-date once login is complete.\n * <P>\n * Note: Until login, the default values we be as shown here.\n *\n * @private\n */\nvar _localeCode;\n\n/**\n * Cache of installed locales\n * @private\n */\nvar _installedLocales;\n\n/**\n * Local Storage key for last used locale.\n * @private\n */\nvar getBrowserSessionLocaleKey = 'locale';\n\n/**\n * Default locale if local storage locale is undefined\n * @private\n */\nvar getDefaultLocaleCode = 'en';\n\nlet exports;\n\n/**\n * @return {String[]} array of installed locales\n */\nexport let getInstalledLocales = function() {\n    return _installedLocales;\n};\n\n/**\n * @param {String} locale - input locale\n * @return {String|null} resolved locale\n */\nfunction matchInstalledLocales( locale ) {\n    locale = locale.replace( /-/g, '_' );\n    if( _installedLocales.indexOf( locale ) > -1 ) {\n        return locale;\n    }\n\n    // search by the 2 character locale\n    var localeShort = locale.substring( 0, 2 ).toLowerCase();\n    var ndx = _installedLocales.indexOf( localeShort );\n    if( ndx > -1 ) {\n        return _installedLocales[ ndx ];\n    }\n\n    // search by ignoring case\n    var resolvedLocale;\n    _.forEach( _installedLocales, function( installedLocale ) {\n        if( locale.toLowerCase() === installedLocale.toLowerCase() ) {\n            resolvedLocale = installedLocale;\n            return false; // break\n        }\n    } );\n    if( !resolvedLocale ) {\n        // search based upon only the first 2 characters\n        _.forEach( _installedLocales, function( installedLocale ) {\n            if( localeShort && installedLocale.startsWith( localeShort ) ) {\n                resolvedLocale = installedLocale;\n                return false; // break\n            }\n        } );\n    }\n    return resolvedLocale;\n}\n\n/**\n * Return the current locale from the URL or browsers 'userAgent'\n *\n * @return {String} The 'locale' code for the current browser session based on a 'locale=' query in the URL or the\n *         browsers 'userAgent' (e.g. 'en_US', 'zh_CN', etc.).\n */\nfunction resolveLocale() {\n    var localeCode;\n\n    /**\n     * (1) Look for the 'locale' in the URL and if found extract the value from it.\n     */\n    var localeFromURL = browserUtils.getUrlAttributes().locale;\n    if( localeFromURL ) {\n        localeCode = matchInstalledLocales( localeFromURL );\n        if( !localeCode ) {\n            // Remove invalid locale settings from URL\n            browserUtils.removeUrlAttribute( 'locale' );\n        }\n    }\n\n    if( !localeCode ) {\n        /**\n         * (2) Check localStorage for a last used locale\n         */\n        localeCode = localStrg.get( getBrowserSessionLocaleKey );\n        if( localeCode ) {\n            localeCode = matchInstalledLocales( localeCode );\n        }\n    }\n\n    if( !localeCode ) {\n        /**\n         * (3) Check if we should simply assume the browser's current locale setting.\n         */\n        var navigator = browserUtils.getWindowNavigator();\n        if( navigator ) {\n            localeCode = matchInstalledLocales( navigator.userLanguage || navigator.language );\n        }\n    }\n\n    if( !localeCode ) {\n        /**\n         * (4) Fallback to initial locale in installed array\n         */\n        localeCode = _installedLocales[ 0 ];\n    }\n\n    setLocaleInt( localeCode );\n\n    return localeCode;\n}\n\n/**\n * Sets the selected locale in local storage\n *\n * @param {Object} loginPageLocale - selected locale\n * @ignore\n */\nexport let setLocaleInLocalStorage = function( loginPageLocale ) {\n    localStrg.publish( getBrowserSessionLocaleKey, loginPageLocale );\n    setLocaleInDOM();\n};\n\n/**\n * Sets the selected locale in DOM html tag\n */\nfunction setLocaleInDOM() {\n    let localeCode = localStrg.get( getBrowserSessionLocaleKey );\n    let element = document.getElementsByTagName( 'HTML' )[ 0 ];\n    let attLang = document.createAttribute( 'lang' );\n    attLang.value = localeCode ? localeCode.replace( /_/g, '-' ) : getDefaultLocaleCode;\n    element.setAttributeNode( attLang );\n}\n\n/**\n * @param {String} localeCode - locale code\n */\nfunction setLocaleInt( localeCode ) {\n    _localeCode = localeCode;\n\n    /**\n     * Create the text bundle suffix.\n     */\n    if( /^en/.test( localeCode ) ) {\n        _bundleSuffix = '';\n    } else {\n        _bundleSuffix = '_' + localeCode;\n    }\n}\n\n/**\n * Initializes user language and country code variables for this service.\n * <P>\n * Note: We handle some special cases to where we want just the language code without the region code (a.k.a.\n * country code).\n *\n * @param {String} localeCode - The locale in standard 'language_Country' format e.g. 'en_US'.\n * @return {String} resolved locale\n * @ignore\n */\nexport let setLocale = function( localeCode ) {\n    localeCode = matchInstalledLocales( localeCode );\n\n    // Update localStorage with new value\n    exports.setLocaleInLocalStorage( localeCode );\n\n    // Remove from the URL after storing in localStorage\n    browserUtils.removeUrlAttribute( 'locale' );\n\n    if( localeCode !== _localeCode ) {\n        setLocaleInt( localeCode );\n\n        eventBus.publish( 'locale.changed', _localeCode );\n    }\n\n    return localeCode;\n};\n\n/**\n * Returns the i18n code for the current user language *with* any country or region code.\n * <P>\n * Note: This value set up-to-date once login is complete. Until then, it will return a default locale code of\n * 'en_US'.\n *\n * @return {String} Current Locale value e.g. 'en_US'\n */\nexport let getLocale = function() {\n    return _localeCode;\n};\n\n/**\n * Returns baseName in the path.\n *\n * @param {String} path - path of the resource.\n * @return {String} baseName of the resource.\n */\nvar baseName = function( path ) {\n    if( !path ) {\n        return 'BaseMessages';\n    }\n    var base = path.substring( path.lastIndexOf( '/' ) + 1 );\n    if( base.lastIndexOf( '.' ) !== -1 ) {\n        base = base.substring( 0, base.lastIndexOf( '.' ) );\n    }\n    return base;\n};\n\n/**\n * Returns a promise that will be 'resolved' with the localized string text bundle object for the given i18n\n * 'resource'.\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n *\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n *\n * @return {Promise} A promise that will be 'resolved' with the localized string text bundle object for the\n *         given i18n 'resource' (or 'null' if the resource is not found or the 'localeService' has not be injected\n *         correctly.).\n */\nexport let getTextPromise = function( resource, useNative ) {\n    var resourceFinal = baseName( resource );\n    return cfgSvc.getCfg( 'i18n' + _bundleSuffix + '.' + resourceFinal, false, useNative );\n};\n\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\nexport let getLocalizedText = function( resource, key, useNative ) {\n    var resourceFinal = baseName( resource );\n    return cfgSvc.getCfg( 'i18n' + _bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative );\n};\n\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} localeCode - The locale language that the key text will be retrieved from\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @param {boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\nexport let getLocalizedTextBundlePromise = function( localeCode, resource, key, useNative ) {\n    var bundleSuffix = '';\n    if( /^en/.test( localeCode ) ) {\n        bundleSuffix = '';\n    } else {\n        bundleSuffix = '_' + localeCode;\n    }\n    var resourceFinal = baseName( resource );\n    return cfgSvc.getCfg( 'LoginLocale' + bundleSuffix + '.' + resourceFinal + '.' + key, false, useNative );\n};\n\n/**\n * Returns localized text from the given resource with the given key for all installed languages\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource to load\n *            (or null to return the 'BaseMessages' resource).\n * @param {String} key - The text key for the text which need to be localized\n * @return {Promise} Promise containing the localized text\n */\nexport let getMultiLanguageListPromise = function( resource, key ) {\n    var _installedLocales = getInstalledLocales();\n    const loginLocale = resource === 'LoginLocale';\n\n    let languagePromise = AwPromiseService.instance;\n\n    var localePromises = [];\n    var localeResponses = {};\n\n    for( var i = 0; i < _installedLocales.length; i++ ) {\n        const locale = _installedLocales[ i ];\n        if( loginLocale ) {\n            key = locale;\n        }\n        localePromises.push(\n            getLocalizedTextBundlePromise( locale, resource, key ).then( function( textBundle ) {\n                localeResponses[ locale ] = textBundle;\n            } )\n        );\n    }\n\n    return new languagePromise( function( resolve, reject ) {\n        AwPromiseService.instance.all(\n            localePromises\n        ).then( function() {\n            resolve( sortObject( localeResponses ) );\n        }, reject );\n    } );\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction sortObject( obj ) {\n    return Object.keys( obj ).sort().reduce( function( result, key ) {\n        result[key] = obj[key];\n        return result;\n    }, {} );\n}\n\n/**\n * Returns localized text from the given resource with the given key\n *\n * @param {String} resource - Name of the country-neutral (i.e. w/o country-code or extension) i18n resource.key to load\n * @param {Boolean} useNative - use browser native API to execute. Don't use it in return before beyond angular is done\n * @return {Promise} Promise containing the localized text\n */\nexport let getLocalizedTextFromKey = async function( resource, useNative ) {\n    return cfgSvc.getCfg( 'i18n' + _bundleSuffix + '.' + resource, false, useNative );\n};\n\n/**\n * Returns the country (i.e. region) code of the current locale that will be appended to the textBundle name to\n * resolve the text bundle resource (e.g. '' (English), '_de' (German), '_zh_TW' (Chinese)). *\n *\n * @return {String} i18n code for the current user region *without* any language code.\n * @ignore\n */\nexport let getBundleSuffix = function() {\n    return _bundleSuffix;\n};\n\n/**\n * Returns the i18n code for the current user language *without* any country or region code.\n *\n * @return {String} The i18n code for the current user language *without* any country or region code.\n * @ignore\n */\nexport let getLanguageCode = function() {\n    return _localeCode.substring( 0, 2 );\n};\n\n/**\n * Returns a string from cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {String} key - Name of the message to return.\n * @param {String[]} params - Array of message parameters.\n *\n * @return {String} Message with param substitutions.\n */\nexport let getMessage = function( key, params ) {\n    var msg = getLoadedText()[key];\n\n    msg && params && params.forEach( function( item, index ) {\n        msg = msg.replace( `{${index}}`, params[index] );\n    } );\n    return msg;\n};\n\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle to return.\n *\n * @return {Object} Cached textBundle resource (or NULL if the bundle has not been cached yet).\n */\nexport let getLoadedText = function( resource ) {\n    var resourceFinal = baseName( resource );\n\n    return cfgSvc.getCfgCached( 'i18n' + _bundleSuffix + '.' + resourceFinal );\n};\n\n/**\n * Returns the cached textBundle resource (or NULL if the bundle has not been cached yet).\n *\n * @param {Object} resource - Name of the textBundle.key to return.\n *\n * @return {String} Cached localized text from textBundle\n */\nexport let getLoadedTextFromKey = function( resource ) {\n    return cfgSvc.getCfgCached( 'i18n' + _bundleSuffix + '.' + resource );\n};\n\n/**\n * Gets the default language based on locale stored in 1) the URL (if 'locale' attributes is defined) or 2) local\n * storage.\n *\n * @param {Object} installedLanguages - default selected locale\n * @param {StringMap} localeTextBundle - (Optional) Text bundle containing a mapping of locale code to locale specific name of the language (eg localeTextBundle.en_US = English).\n * @returns {String} Default language based on locale stored in local storage.\n * @ignore\n */\nexport let getDefaultLanguage = function( installedLanguages, localeTextBundle ) {\n    var defaultLang = {};\n\n    var locale = resolveLocale();\n\n    if( localeTextBundle ) {\n        if( locale ) {\n            defaultLang.dbValue = locale;\n            defaultLang.uiValue = localeTextBundle[ locale ];\n            defaultLang.isSelected = true;\n\n            return defaultLang;\n        }\n    }\n\n    // Override the selected language with local storage locale value\n    if( locale ) {\n        _.forEach( installedLanguages, function( installedLanguage ) {\n            if( installedLanguage.dbValue === locale ) {\n                installedLanguage.isSelected = true;\n                defaultLang = installedLanguage;\n            }\n        } );\n    }\n\n    if( _.isEmpty( defaultLang ) ) {\n        defaultLang.dbValue = 'en_US';\n        defaultLang.uiValue = 'English';\n        defaultLang.isSelected = true;\n        locale = defaultLang.dbValue;\n    }\n\n    if( locale && locale !== exports.getLocale() ) {\n        exports.setLocale( locale );\n    }\n\n    return defaultLang;\n};\n\nexports = {\n    getInstalledLocales,\n    setLocaleInLocalStorage,\n    setLocale,\n    getLocale,\n    getTextPromise,\n    getLocalizedText,\n    getBundleSuffix,\n    getLanguageCode,\n    getMessage,\n    getLoadedText,\n    getDefaultLanguage,\n    getLocalizedTextFromKey,\n    getLoadedTextFromKey,\n    getMultiLanguageListPromise,\n    getLocalizedTextBundlePromise\n};\nexport default exports;\n\n_installedLocales = cfgSvc.getCfgCached( 'installedLocales' );\n\n/**\n * Look for the default 'locale' in the URL and if found extract the value from it.\n */\nexports.setLocale( resolveLocale() );\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * @module js/viewMode.service\n */\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\nlet exports = {};\nexport let _viewModeContext = 'ViewModeContext';\nvar _availableViewModeContext = 'supportedViewModes';\n\nvar _getViewModeContext = function () {\n  var ctx = appCtxService.getCtx(_viewModeContext);\n  return ctx ? ctx : {};\n};\n/**\n * Change view mode\n *\n * @param {String} newViewMode - View mode key to change to.\n */\n\n\nexport let changeViewMode = function (viewMode) {\n  var currentCtx = _getViewModeContext();\n\n  currentCtx[_viewModeContext] = viewMode;\n  appCtxService.registerCtx(_viewModeContext, currentCtx);\n};\n/**\n * Get the current view mode\n *\n * @return {String} The current view mode\n */\n\nexport let getViewMode = function () {\n  return _getViewModeContext()[_viewModeContext];\n};\n/**\n * Update which view modes are supported\n *\n * @param {String[]} viewModes - View modes that are available. Converted to Object to make conditions easier.\n */\n\nexport let setAvailableViewModes = function (viewModes) {\n  var currentCtx = _getViewModeContext(); // Convert array to object - makes declarative conditions simpler\n\n\n  currentCtx[_availableViewModeContext] = {};\n\n  if (_.isArray(viewModes)) {\n    _.forEach(viewModes, function (x) {\n      currentCtx[_availableViewModeContext][x] = {};\n    });\n  }\n\n  appCtxService.updateCtx(_viewModeContext, currentCtx);\n};\n/**\n * Get the available view modes\n *\n * @return {String[]} The supported view modes\n */\n\nexport let getAvailableViewModes = function () {\n  var viewModes = _getViewModeContext()[_availableViewModeContext];\n\n  return viewModes ? Object.keys(viewModes) : [];\n};\nexports = {\n  changeViewMode,\n  getViewMode,\n  setAvailableViewModes,\n  getAvailableViewModes,\n  _viewModeContext\n};\nexport default exports;","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pagelevelcomponents/src/js/viewMode.service.js"],"names":["exports","_viewModeContext","_availableViewModeContext","_getViewModeContext","ctx","appCtxService","changeViewMode","currentCtx","getViewMode","setAvailableViewModes","_","getAvailableViewModes","viewModes","Object"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAA,aAAA,MAAA,kBAAA;AACA,OAAA,CAAA,MAAA,QAAA;AAEA,IAAIA,OAAO,GAAX,EAAA;AAEA,OAAO,IAAIC,gBAAgB,GAApB,iBAAA;AAEP,IAAIC,yBAAyB,GAA7B,oBAAA;;AAEA,IAAIC,mBAAmB,GAAG,YAAW;EACjC,IAAIC,GAAG,GAAGC,aAAa,CAAbA,MAAAA,CAAV,gBAAUA,CAAV;EACA,OAAOD,GAAG,GAAA,GAAA,GAAV,EAAA;AAFJ,CAAA;AAKA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIE,cAAc,GAAG,UAAA,QAAA,EAAqB;EAC7C,IAAIC,UAAU,GAAGJ,mBAAjB,EAAA;;EACAI,UAAU,CAAVA,gBAAU,CAAVA,GAAAA,QAAAA;EACAF,aAAa,CAAbA,WAAAA,CAAAA,gBAAAA,EAAAA,UAAAA;AAHG,CAAA;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,WAAW,GAAG,YAAW;EAChC,OAAOL,mBAAmB,GAA1B,gBAA0B,CAA1B;AADG,CAAA;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,qBAAqB,GAAG,UAAA,SAAA,EAAsB;EACrD,IAAIF,UAAU,GAAGJ,mBADoC,EACrD,CADqD,CAErD;;;EACAI,UAAU,CAAVA,yBAAU,CAAVA,GAAAA,EAAAA;;EACA,IAAIG,CAAC,CAADA,OAAAA,CAAJ,SAAIA,CAAJ,EAA6B;IACzBA,CAAC,CAADA,OAAAA,CAAAA,SAAAA,EAAsB,UAAA,CAAA,EAAc;MAChCH,UAAU,CAAVA,yBAAU,CAAVA,CAAAA,CAAAA,IAAAA,EAAAA;IADJG,CAAAA;EAGH;;EACDL,aAAa,CAAbA,SAAAA,CAAAA,gBAAAA,EAAAA,UAAAA;AATG,CAAA;AAYP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,qBAAqB,GAAG,YAAW;EAC1C,IAAIC,SAAS,GAAGT,mBAAmB,GAAnC,yBAAmC,CAAnC;;EACA,OAAOS,SAAS,GAAGC,MAAM,CAANA,IAAAA,CAAH,SAAGA,CAAH,GAAhB,EAAA;AAFG,CAAA;AAKPb,OAAO,GAAG;EAAA,cAAA;EAAA,WAAA;EAAA,qBAAA;EAAA,qBAAA;EAKNC;AALM,CAAVD;AAOA,eAAA,OAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * @module js/viewMode.service\n */\nimport appCtxService from 'js/appCtxService';\nimport _ from 'lodash';\n\nlet exports = {};\n\nexport let _viewModeContext = 'ViewModeContext';\n\nvar _availableViewModeContext = 'supportedViewModes';\n\nvar _getViewModeContext = function() {\n    var ctx = appCtxService.getCtx( _viewModeContext );\n    return ctx ? ctx : {};\n};\n\n/**\n * Change view mode\n *\n * @param {String} newViewMode - View mode key to change to.\n */\nexport let changeViewMode = function( viewMode ) {\n    var currentCtx = _getViewModeContext();\n    currentCtx[ _viewModeContext ] = viewMode;\n    appCtxService.registerCtx( _viewModeContext, currentCtx );\n};\n\n/**\n * Get the current view mode\n *\n * @return {String} The current view mode\n */\nexport let getViewMode = function() {\n    return _getViewModeContext()[ _viewModeContext ];\n};\n\n/**\n * Update which view modes are supported\n *\n * @param {String[]} viewModes - View modes that are available. Converted to Object to make conditions easier.\n */\nexport let setAvailableViewModes = function( viewModes ) {\n    var currentCtx = _getViewModeContext();\n    // Convert array to object - makes declarative conditions simpler\n    currentCtx[ _availableViewModeContext ] = {};\n    if( _.isArray( viewModes ) ) {\n        _.forEach( viewModes, function( x ) {\n            currentCtx[ _availableViewModeContext ][ x ] = {};\n        } );\n    }\n    appCtxService.updateCtx( _viewModeContext, currentCtx );\n};\n\n/**\n * Get the available view modes\n *\n * @return {String[]} The supported view modes\n */\nexport let getAvailableViewModes = function() {\n    var viewModes = _getViewModeContext()[ _availableViewModeContext ];\n    return viewModes ? Object.keys( viewModes ) : [];\n};\n\nexports = {\n    changeViewMode,\n    getViewMode,\n    setAvailableViewModes,\n    getAvailableViewModes,\n    _viewModeContext\n};\nexport default exports;\n"]},"metadata":{},"sourceType":"module"}
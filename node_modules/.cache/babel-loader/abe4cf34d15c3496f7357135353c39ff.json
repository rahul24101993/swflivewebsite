{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/* eslint-env es6 */ /**\n * JavaScript Processor to get total scripting time\n *\n * @module js/splmStatsJsProcessor\n */import{addProc,removeProc}from'js/splmStatsJsService';/**\n * JavaScript Processor to get total scripting time\n *\n * @class SPLMStatsJsProcessor\n */function SPLMStatsJsProcessor(){let self=this;let _processingTime=0;let _startProcessorTime=0;let _endProcessorTime=0;let _scriptJournals=[];/**\n     * @returns {Float} Total scripting time for angular events\n     */const _processScriptTime=function(){_startProcessorTime=window.performance.now();let totalTime=0;_scriptJournals.forEach(function(obj){totalTime+=obj.endTime-obj.startTime;});_endProcessorTime=window.performance.now();_processingTime+=_endProcessorTime-_startProcessorTime;return totalTime;};/**\n     *\n     * @param {Object} data - startTime, endTime, name of process to track scripting time\n     */let _proc={start:()=>{},done:function(data){_startProcessorTime=window.performance.now();_scriptJournals.push(data);_endProcessorTime=window.performance.now();_processingTime+=_endProcessorTime-_startProcessorTime;}};const _reset=function(){_scriptJournals=[];};self.start=function(){_startProcessorTime=window.performance.now();_reset();addProc(_proc);_endProcessorTime=window.performance.now();_processingTime+=_endProcessorTime-_startProcessorTime;};self.stop=function(){_startProcessorTime=window.performance.now();removeProc(_proc);_endProcessorTime=window.performance.now();_processingTime+=_endProcessorTime-_startProcessorTime;};self.getProcessingTime=function(){const _time=_processingTime;_processingTime=0;return{JsProcessorOverhead:_time};};/**\n     * @returns {Object} Object containg Total Scripting Time\n     */self.getMetrics=function(){return{scriptTime:_processScriptTime()};};return self;}export default SPLMStatsJsProcessor;","map":null,"metadata":{},"sourceType":"module"}
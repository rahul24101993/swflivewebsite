{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwGlobalPopupService.js\";\nimport AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awGlobalPopupRenderFunction = _ref => {\n  let {\n    actions\n  } = _ref;\n  const {\n    globalPopup\n  } = actions;\n  const {\n    options,\n    reference,\n    open\n  } = globalPopup;\n\n  const renderPopoverContent = () => {\n    let fill = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"empty\"\n    }, void 0, false);\n\n    if (options.view) {\n      // pass down props through options.context\n      fill = /*#__PURE__*/_jsxDEV(AwInclude, {\n        name: options.view,\n        ...options.context\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 20\n      }, this);\n    } else if (options.content) {\n      fill = options.content;\n    }\n\n    return open && /*#__PURE__*/_jsxDEV(AwPopup, { ...options,\n      children: fill\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 24\n    }, this);\n  };\n\n  return renderPopoverContent();\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwGlobalPopupService.js"],"names":["awGlobalPopupRenderFunction","actions","globalPopup","open","renderPopoverContent","fill","options","context"],"mappings":";AAAA,OAAA,OAAA,MAAA,4BAAA;AACA,OAAA,SAAA,MAAA,8BAAA;;;AAEA,OAAO,MAAMA,2BAA2B,GAAG,IAAA,IAAmB;EAAA,IAAjB;IAAEC;EAAF,IAAiB,IAAA;EAC1D,MAAM;IAAEC;EAAF,IAAN,OAAA;EAEA,MAAM;IAAA,OAAA;IAAA,SAAA;IAAsBC;EAAtB,IAAN,WAAA;;EACA,MAAMC,oBAAoB,GAAG,MAAI;IAC7B,IAAIC,IAAI,GAAA,aAAG,OAAA,CAAA,SAAA,EAAA;MAAA,QAAA,EAAA;IAAA,CAAA,EAAA,KAAA,CAAA,EAAX,KAAW,CAAX;;IACA,IAAIC,OAAO,CAAX,IAAA,EAAmB;MACf;MACAD,IAAI,GAAA,aAAG,OAAA,CAAA,SAAA,EAAA;QAAW,IAAI,EAAEC,OAAO,CAAxB,IAAA;QAAA,GAAmCA,OAAO,CAACC;MAA3C,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;QAAA,QAAA,EAAA,YAAA;QAAA,UAAA,EAAA,EAAA;QAAA,YAAA,EAAA;MAAA,CAAA,EAAPF,IAAO,CAAPA;IAFJ,CAAA,MAGM,IAAIC,OAAO,CAAX,OAAA,EAAsB;MACxBD,IAAI,GAAGC,OAAO,CAAdD,OAAAA;IACH;;IACD,OAAOF,IAAI,IAAA,aAAI,OAAA,CAAA,OAAA,EAAA,EAAA,GAAA,OAAA;MAAA,QAAA,EAAuBE;IAAvB,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA,EAAA;MAAA,YAAA,EAAA;IAAA,CAAA,EAAf,IAAe,CAAf;EARJ,CAAA;;EAWA,OAAOD,oBAAP,EAAA;AAfG,CAAA","sourcesContent":["import AwPopup from 'viewmodel/AwPopupViewModel';\nimport AwInclude from 'viewmodel/AwIncludeViewModel';\n\nexport const awGlobalPopupRenderFunction = ( { actions } ) => {\n    const { globalPopup } = actions;\n\n    const { options, reference, open } = globalPopup;\n    const renderPopoverContent = ()=>{\n        let fill = <>empty</>;\n        if( options.view ) {\n            // pass down props through options.context\n            fill = <AwInclude name={options.view} {...options.context}/>;\n        }else if( options.content ) {\n            fill = options.content;\n        }\n        return open && <AwPopup {...options}>{fill}</AwPopup>;\n    };\n\n    return renderPopoverContent();\n};\n"]},"metadata":{},"sourceType":"module"}
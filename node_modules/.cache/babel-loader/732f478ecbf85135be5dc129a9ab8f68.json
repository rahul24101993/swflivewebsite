{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * Definition of splmTableTranspose\n *\n * @module js/splmTableTranspose\n */\nimport _ from 'lodash';\n/**\n * Get the first column for a transposed table\n *\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\n\nconst getFirstColumn = function () {\n  return {\n    name: '',\n    field: 'transposedColumnProperty',\n    displayName: '',\n    pinnedLeft: true,\n    enableColumnMenu: false,\n    enableColumnMoving: false,\n    enableSorting: false,\n    enableColumnResizing: true,\n    enableRendererContribution: true,\n    modifiable: false,\n    width: 125\n  };\n};\n\nconst columnsChanged = function (columns, vmos) {\n  if (columns && columns.length === vmos.length + 1) {\n    for (let i = 0; i < vmos.length; i++) {\n      let vmoFound = false;\n      let vmo = vmos[i];\n\n      for (let j = 0; j < columns.length; j++) {\n        let column = columns[j];\n\n        if (vmo.uid === column.field) {\n          vmoFound = true;\n        }\n      }\n\n      if (vmoFound === false) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return true;\n};\n/**\n * Create a column to use in transpose\n *\n * @param {*} vmo A vmo to base the column on\n * @returns {*} A column generated for a transposed table\n */\n\n\nexport const getColumn = function (vmo) {\n  let displayName;\n\n  if (vmo.displayName) {\n    displayName = vmo.displayName;\n  } else if (vmo.props.object_string) {\n    displayName = vmo.props.object_string.uiValues[0];\n  } else if (vmo.props.object_name) {\n    displayName = vmo.props.object_name.uiValues[0];\n  } else {\n    displayName = '';\n  }\n\n  let column = {\n    field: vmo.uid,\n    name: vmo.uid,\n    displayName: displayName,\n    enableColumnMoving: true,\n    enableColumnResizing: true,\n    enablePinning: false,\n    width: 300,\n    vmo: vmo,\n    enableRendererContribution: true,\n    headerTooltip: true,\n    modifiable: false\n  };\n\n  if (vmo.column) {\n    let mergedColumn = Object.assign(vmo.column, column);\n    mergedColumn.width = mergedColumn.drawnWidth;\n    return mergedColumn;\n  }\n\n  return column;\n};\n/**\n * Get the first column for a transposed table\n *\n * @param {Array} columns the previous columns\n * @param {Array} vmos the vmos in order\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\n\nexport const getTransposedColumns = function (columns, vmos) {\n  let orderedVmos = vmos; // Maintain column order on recreation, if columns are same\n\n  if (!columnsChanged(columns, vmos)) {\n    orderedVmos = [];\n    columns = _.sortBy(columns, 'index');\n\n    for (let i = 1; i < columns.length; i++) {\n      let uid = columns[i].field;\n\n      for (let j = 0; j < vmos.length; j++) {\n        let vmo = vmos[j];\n\n        if (vmo.uid === uid) {\n          vmo.column = columns[i];\n          orderedVmos.push(vmo);\n          break;\n        }\n      }\n    }\n  }\n\n  return [getFirstColumn()].concat(orderedVmos.map(getColumn));\n};\nexport const getTransposedVmos = function (columns, viewModelObjects) {\n  for (let i = 0; i < columns.length; i++) {\n    columns[i].visible = !columns[i].hasOwnProperty('visible') || columns[i].visible;\n  }\n\n  let visibleColumns = _.filter(columns, function (column) {\n    if (column.visible) {\n      return column;\n    }\n\n    return false;\n  });\n\n  let columnVmos = [];\n\n  for (let i = 0; i < visibleColumns.length; i++) {\n    let column = visibleColumns[i];\n    let columnVmo = {\n      props: {\n        transposedColumnProperty: {\n          uiValue: column.displayName,\n          dbValue: column.field\n        }\n      }\n    }; // Icon column is special for icon cell rendering. Add property to distinguish it from other generated vmos.\n\n    if (column.name === 'icon') {\n      columnVmo.name = 'icon';\n    }\n\n    for (let j = 0; j < viewModelObjects.length; j++) {\n      let object = viewModelObjects[j]; // Add icon image data for later use in icon cell rendering\n\n      if (column.name === 'icon') {\n        columnVmo.props[object.uid] = {\n          thumbnailURL: object.thumbnailURL,\n          typeIconURL: object.typeIconURL,\n          iconURL: object.iconURL\n        };\n      } else {\n        columnVmo.props[object.uid] = object.props[column.field];\n      }\n    }\n\n    columnVmos.push(columnVmo);\n  }\n\n  return columnVmos;\n};\nexport default {\n  getColumn,\n  getTransposedColumns,\n  getTransposedVmos\n};","map":{"version":3,"names":["_","getFirstColumn","name","field","displayName","pinnedLeft","enableColumnMenu","enableColumnMoving","enableSorting","enableColumnResizing","enableRendererContribution","modifiable","width","columnsChanged","columns","vmos","length","i","vmoFound","vmo","j","column","uid","getColumn","props","object_string","uiValues","object_name","enablePinning","headerTooltip","mergedColumn","Object","assign","drawnWidth","getTransposedColumns","orderedVmos","sortBy","push","concat","map","getTransposedVmos","viewModelObjects","visible","hasOwnProperty","visibleColumns","filter","columnVmos","columnVmo","transposedColumnProperty","uiValue","dbValue","object","thumbnailURL","typeIconURL","iconURL"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/pltable/src/js/splmTableTranspose.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n/**\n * Definition of splmTableTranspose\n *\n * @module js/splmTableTranspose\n */\nimport _ from 'lodash';\n\n/**\n * Get the first column for a transposed table\n *\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\nconst getFirstColumn = function() {\n    return {\n        name: '',\n        field: 'transposedColumnProperty',\n        displayName: '',\n        pinnedLeft: true,\n        enableColumnMenu: false,\n        enableColumnMoving: false,\n        enableSorting: false,\n        enableColumnResizing: true,\n        enableRendererContribution: true,\n        modifiable: false,\n        width: 125\n    };\n};\n\nconst columnsChanged = function( columns, vmos ) {\n    if( columns && columns.length === vmos.length + 1 ) {\n        for( let i = 0; i < vmos.length; i++ ) {\n            let vmoFound = false;\n            let vmo = vmos[ i ];\n            for( let j = 0; j < columns.length; j++ ) {\n                let column = columns[ j ];\n                if( vmo.uid === column.field ) {\n                    vmoFound = true;\n                }\n            }\n            if( vmoFound === false ) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return true;\n};\n\n/**\n * Create a column to use in transpose\n *\n * @param {*} vmo A vmo to base the column on\n * @returns {*} A column generated for a transposed table\n */\nexport const getColumn = function( vmo ) {\n    let displayName;\n    if( vmo.displayName ) {\n        displayName = vmo.displayName;\n    } else if ( vmo.props.object_string ) {\n        displayName = vmo.props.object_string.uiValues[0];\n    } else if( vmo.props.object_name ) {\n        displayName = vmo.props.object_name.uiValues[0];\n    }else {\n        displayName = '';\n    }\n\n    let column = {\n        field: vmo.uid,\n        name: vmo.uid,\n        displayName: displayName,\n        enableColumnMoving: true,\n        enableColumnResizing: true,\n        enablePinning: false,\n        width: 300,\n        vmo: vmo,\n        enableRendererContribution: true,\n        headerTooltip: true,\n        modifiable: false\n    };\n\n    if( vmo.column ) {\n        let mergedColumn = Object.assign( vmo.column, column );\n        mergedColumn.width = mergedColumn.drawnWidth;\n        return mergedColumn;\n    }\n\n    return column;\n};\n\n/**\n * Get the first column for a transposed table\n *\n * @param {Array} columns the previous columns\n * @param {Array} vmos the vmos in order\n * @returns {Object} The static first column used by a transposed table, representing the property\n */\nexport const getTransposedColumns = function( columns, vmos ) {\n    let orderedVmos = vmos;\n    // Maintain column order on recreation, if columns are same\n    if( !columnsChanged( columns, vmos ) ) {\n        orderedVmos = [];\n        columns = _.sortBy( columns, 'index' );\n        for( let i = 1; i < columns.length; i++ ) {\n            let uid = columns[ i ].field;\n            for( let j = 0; j < vmos.length; j++ ) {\n                let vmo = vmos[ j ];\n                if( vmo.uid === uid ) {\n                    vmo.column = columns[ i ];\n                    orderedVmos.push( vmo );\n                    break;\n                }\n            }\n        }\n    }\n    return [ getFirstColumn() ].concat( orderedVmos.map( getColumn ) );\n};\n\nexport const getTransposedVmos = function( columns, viewModelObjects ) {\n    for( let i = 0; i < columns.length; i++ ) {\n        columns[ i ].visible = !columns[ i ].hasOwnProperty( 'visible' ) || columns[ i ].visible;\n    }\n\n    let visibleColumns = _.filter( columns, function( column ) {\n        if( column.visible ) {\n            return column;\n        }\n        return false;\n    } );\n\n    let columnVmos = [];\n    for( let i = 0; i < visibleColumns.length; i++ ) {\n        let column = visibleColumns[ i ];\n        let columnVmo = {\n            props: {\n                transposedColumnProperty: {\n                    uiValue: column.displayName,\n                    dbValue: column.field\n                }\n            }\n        };\n\n        // Icon column is special for icon cell rendering. Add property to distinguish it from other generated vmos.\n        if( column.name === 'icon' ) {\n            columnVmo.name = 'icon';\n        }\n\n        for( let j = 0; j < viewModelObjects.length; j++ ) {\n            let object = viewModelObjects[ j ];\n            // Add icon image data for later use in icon cell rendering\n            if( column.name === 'icon' ) {\n                columnVmo.props[ object.uid ] = {\n                    thumbnailURL: object.thumbnailURL,\n                    typeIconURL: object.typeIconURL,\n                    iconURL: object.iconURL\n                };\n            } else {\n                columnVmo.props[ object.uid ] = object.props[ column.field ];\n            }\n        }\n        columnVmos.push( columnVmo );\n    }\n\n    return columnVmos;\n};\n\nexport default {\n    getColumn,\n    getTransposedColumns,\n    getTransposedVmos\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
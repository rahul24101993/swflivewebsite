{"ast":null,"code":"// Copyright (c) 2020 Siemens\n/**\n * {@httpIconProviderService} icon provider prepares &lt;img&gt; tag is requires based on configuration provided in\n * solution definition. It uses {@defaultIconProviderService} to use build time prepared cache.\n *\n * @module js/httpIconProviderService\n */import defaultIconProviderService from'js/defaultIconProviderService';import iconRepositoryService from'js/iconRepositoryService';var exports={};/**\n * Returns the &lt;img&gt; tag for the given icon name\n *\n * @private\n *\n * @param {String} name - The name of the icon to return.\n *\n * @return {String} The &lt;img&gt; tag for the given icon name (or NULL if the icon file was not deployed).\n */function _getIMGTag(name){if(!name){return null;}var iconUrl=iconRepositoryService.getIconFileUrl(name+'.svg');if(iconUrl){return'<img class=\"aw-base-icon\" src=\"'+iconUrl+'\" draggable=\"false\" ondragstart=\"return false;\" alt=\"'+name+'\" />';}return null;}/**\n * Returns the &lt;IMG&gt; tag for the given type name.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name.\n */export let getTypeIcon=function(typeName){var icon=defaultIconProviderService.getTypeIcon(typeName);if(!icon){icon=_getIMGTag(typeName);}return icon;};/**\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix) to get an icon for.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */export let getTypeIconFileTag=function(typeName,typeIconFileName){if(!typeIconFileName){return null;}var iconUrl=iconRepositoryService.getIconFileUrl(typeIconFileName);if(iconUrl){return'<img class=\"aw-base-icon\" src=\"'+iconUrl+'\" draggable=\"false\" ondragstart=\"return false;\" alt=\"'+typeName+'\" />';}return null;};/**\n * Returns URL.\n *\n * @param {String} typeIconFileName - The name of the icon file associated with the typeName.\n *\n * @return {String} The &lt;IMG&gt; tag for the given type name\n */export let getTypeIconFileUrl=function(typeIconFileName){return iconRepositoryService.getIconFileUrl(typeIconFileName);};/**\n * Returns URL.\n *\n * @param {String} typeName - The 'type' name (w/o the 'type' prefix and no number suffix) to get an icon for.\n *\n * @return {String} The path to the icon image on the web server\n */export let getTypeIconURL=function(typeName){var iconUrl=defaultIconProviderService.getTypeIconURL(typeName);if(!iconUrl){iconUrl=iconRepositoryService.getIconFileUrl(typeName+'.svg');}return iconUrl;};/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */export let getTileIcon=async function(name){var icon=await defaultIconProviderService.getTileIcon(name);if(!icon){icon=_getIMGTag('home'+name);}return icon;};/**\n * Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n *\n * @param {String} name - The icon name suffix to get an icon definition for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt;or &lt;img&gt;.\n */export let getMiscIcon=async function(name){var icon=await defaultIconProviderService.getMiscIcon(name);if(!icon){icon=_getIMGTag('misc'+name);}return icon;};/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} name - The icon name.\n *\n * @return {String} SVG definition string for the icon\n */export let getCmdIcon=async function(name){var icon=await defaultIconProviderService.getCmdIcon(name);if(!icon){icon=_getIMGTag('cmd'+name);}return icon;};/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;.\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */export let getAwIcon=async function(iconName){var icon=await defaultIconProviderService.getAwIcon(iconName);if(!icon){icon=_getIMGTag(iconName);}return icon;};/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String}Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n */export let getIndicatorIcon=async function(iconName){var icon=await defaultIconProviderService.getIndicatorIcon(iconName);if(!icon){icon=_getIMGTag('indicator'+iconName);}return icon;};/**\n * Returns the HTML &lt;SVG&gt; or &lt;img&gt;\n *\n * @param {String} iconName - the icon name to get an icon for.\n *\n * @return {String} SVG definition string or img tag .\n */export let getIcon=async function(iconName){var icon=await defaultIconProviderService.getIcon(iconName);if(!icon){icon=_getIMGTag(iconName);}return icon;};exports={getTypeIcon,getTypeIconFileTag,getTypeIconFileUrl,getTypeIconURL,getTileIcon,getMiscIcon,getCmdIcon,getAwIcon,getIndicatorIcon,getIcon};export default exports;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// Copyright (c) 2021 Siemens\n\n/**\n * @module js/gridProviderUtils\n */\nimport { useState, useEffect, useRef } from 'react';\nimport { useInitHook, useReducer } from 'js/reactHelper';\nimport awColumnSvc from 'js/awColumnService';\n\nconst gridContextReducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_VALUES':\n      return { ...state,\n        ...action\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useGridContext = prop => {\n  _s();\n\n  const [gridContextPlaceholder, gridContextDispatcher] = useReducer(gridContextReducer, {\n    columnDef: null,\n    isBulkEditing: false,\n    columnConfig: undefined,\n    currentColumnIndex: -1,\n    popupRef: null,\n    editVmo: null,\n    editPropertyName: '',\n    contextVmo: [],\n    sortDirection: 'none',\n    newColumnIndex: -1,\n    defaultColumnPinIndex: -1,\n    pinColumnData: {},\n    dynamicRowHeightStatus: false\n  });\n\n  if (prop.gridContextDispatcher && prop.gridContextPlaceholder) {\n    return [prop.gridContextPlaceholder, prop.gridContextDispatcher];\n  }\n\n  return [gridContextPlaceholder, gridContextDispatcher];\n};\n\n_s(useGridContext, \"283H/4Tk67C5KsG3PCq8GGDNuhk=\");\n\nexport const processGrids = (gridDefs, viewModel, ctx) => {\n  // revisitme - need to be refactor maybe\n  // gridDefs = _.cloneDeep( gridDefs );\n  for (const gridDefKey in gridDefs) {\n    let gridInstance = gridDefs[gridDefKey];\n    const dataCtxNode = {\n      data: viewModel,\n      ctx\n    };\n\n    if (gridInstance.dataProvider) {\n      if (!gridInstance.gridOptions) {\n        gridInstance.gridOptions = {};\n      }\n    }\n\n    gridInstance.dataCtxNode = dataCtxNode;\n    gridInstance.gridid = gridDefKey;\n  }\n\n  return gridDefs;\n};\nexport const useGrid = (prop, panelId, gridContextPlaceholder, gridContextDispatcher, runActionWithViewModel) => {\n  _s2();\n\n  let columns;\n  let gridContextColumns;\n  const tableCallbackRef = useRef();\n  let loadedVmObjects;\n  let sortDirection;\n  let newColumnIndex;\n  let currentColumnIndex;\n  let pinColumnData;\n  let dynamicRowHeightStatus;\n  let hideColumnField;\n  let columnFilterInfo;\n  let columnMenuData;\n  let columnArrangeData;\n  let selectedColumn = gridContextPlaceholder && gridContextPlaceholder.selectedColumn;\n\n  if (prop.gridid && panelId === 'AwSplmTable' && prop.reusable !== 'true') {\n    const {\n      vmCollectionObj,\n      columnConfig\n    } = prop.dataProviderInstance;\n    loadedVmObjects = vmCollectionObj.vmCollection.loadedVMObjects;\n\n    if (gridContextPlaceholder.columnConfig) {\n      gridContextColumns = gridContextPlaceholder.columnConfig.columns;\n    }\n\n    if (columnConfig !== undefined && columnConfig.columns) {\n      columns = columnConfig.columns;\n    }\n\n    if (gridContextPlaceholder) {\n      sortDirection = gridContextPlaceholder.sortDirection;\n      newColumnIndex = gridContextPlaceholder.newColumnIndex;\n      currentColumnIndex = gridContextPlaceholder.currentColumnIndex;\n      pinColumnData = gridContextPlaceholder.pinColumnData;\n      dynamicRowHeightStatus = gridContextPlaceholder.dynamicRowHeightStatus;\n      hideColumnField = gridContextPlaceholder.hideColumnField;\n      columnFilterInfo = gridContextPlaceholder.columnFilterInfo;\n      columnMenuData = gridContextPlaceholder.columnMenuData;\n      columnArrangeData = gridContextPlaceholder.columnArrangeData;\n    }\n\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateDeclGridObject(prop);\n    }\n  } //OnMount\n\n\n  useInitHook(() => {\n    if (prop.gridid && panelId === 'AwSplmTable') {\n      //Need to set gridContextDispatcher on dataProviderInstance for arrange reset\n      prop.dataProviderInstance.gridContextDispatcher = gridContextDispatcher;\n\n      if (prop.reusable !== 'true') {\n        const {\n          vmCollectionObj\n        } = prop.dataProviderInstance;\n        const element = prop.dataProviderInstance.getRootReference();\n        prop.dataCtxNode.i18n = prop.dataCtxNode.data.i18n;\n        prop.dataCtxNode.gridContextDispatcher = gridContextDispatcher;\n        prop.dataCtxNode.gridContextPlaceholder = gridContextPlaceholder;\n        import('js/awSPLMTableNativeService').then(awSPLMTableNativeService => {\n          tableCallbackRef.current = awSPLMTableNativeService.initializeTable(element.current, vmCollectionObj.vmCollection, prop.dataCtxNode, prop, runActionWithViewModel);\n        });\n      }\n    } //OnUnMount\n\n\n    return () => {\n      if (tableCallbackRef.current) {\n        tableCallbackRef.current.destroy();\n      }\n    };\n  }, prop.i18nLoaded === true);\n  const selectionModel = prop.dataProviderInstance && prop.dataProviderInstance.selectionModel;\n  const selectionModelActivated = selectionModel && selectionModel.isSelectionModelActivated();\n  useEffect(() => {\n    const updateTableContents = async () => {\n      if (tableCallbackRef.current) {\n        if (prop.dataProviderInstance.initializationComplete === false) {\n          await tableCallbackRef.current.completeInitialization();\n        }\n\n        tableCallbackRef.current.updateState(prop.dataCtxNode.data);\n        const {\n          vmCollectionObj\n        } = prop.dataProviderInstance;\n        tableCallbackRef.current.updateVmCollection(vmCollectionObj.vmCollection);\n      }\n    };\n\n    updateTableContents();\n  }, [loadedVmObjects]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateContentRowSelection();\n    }\n  }, [selectionModelActivated]);\n  useEffect(() => {\n    const updateTableColumns = async columns => {\n      if (tableCallbackRef.current) {\n        if (prop.dataProviderInstance.initializationComplete === false) {\n          await tableCallbackRef.current.completeInitialization();\n        } else {\n          tableCallbackRef.current.updateTableColumns(columns);\n        }\n      }\n    };\n\n    updateTableColumns(columns);\n  }, [columns]);\n  useEffect(() => {\n    if (prop.dataProviderInstance && prop.dataProviderInstance.columnConfig && gridContextColumns) {\n      prop.dataProviderInstance.columnConfig.columns = gridContextColumns;\n\n      if (tableCallbackRef.current) {\n        tableCallbackRef.current.updateTableColumns(gridContextColumns);\n      }\n    }\n  }, [gridContextColumns]); // Column selection with enableColumnSelection grid option\n\n  useEffect(() => {\n    if (tableCallbackRef.current && selectedColumn) {\n      if (selectionModel && selectedColumn.vmo) {\n        selectionModel.setSelection([selectedColumn.vmo]);\n        selectionModel.selectionData.update({\n          selected: [selectedColumn.vmo]\n        });\n      }\n\n      tableCallbackRef.current.selectTableColumn(selectedColumn);\n    }\n  }, [selectedColumn]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateSortDirection(currentColumnIndex, newColumnIndex, sortDirection);\n    }\n  }, [newColumnIndex, sortDirection]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateDynamicRowHeight(dynamicRowHeightStatus);\n    }\n  }, [dynamicRowHeightStatus]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updatePinColumn(pinColumnData.columnDef, pinColumnData.isFreezeAction, pinColumnData.defaultColumnPinIndex);\n    }\n  }, [pinColumnData]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.hideColumn(hideColumnField);\n    }\n  }, [hideColumnField]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.columnFilterApplied(columnFilterInfo);\n    }\n  }, [columnFilterInfo]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.columnsArranged(columnArrangeData);\n    }\n  }, [columnArrangeData]);\n  useEffect(() => {\n    if (tableCallbackRef.current) {\n      tableCallbackRef.current.updateColumnMenuData(columnMenuData);\n    }\n  }, [columnMenuData]);\n};\n\n_s2(useGrid, \"kIVB7BdiocQv5AgazCK+0/Lrqq8=\", false, function () {\n  return [useInitHook];\n});\n\nexport const useGrids = (grids, dataCtxNode, dataProviders, gridContextPlaceholder, gridContextDispatcher, declViewModel, getProps) => {\n  _s3();\n\n  // Just to make sure the dp name order is same in every render.\n  const [gridNames] = useState(() => {\n    return grids !== undefined ? Object.keys(grids) : [];\n  });\n  gridNames.forEach(gridName => {\n    const dpInstance = dataProviders[grids[gridName].dataProvider];\n    grids[gridName].dataProviderInstance = dpInstance;\n    grids[gridName].i18n = dataCtxNode.data.i18n;\n    grids[gridName].gridContextPlaceholder = gridContextPlaceholder;\n    grids[gridName].gridContextDispatcher = gridContextDispatcher;\n    grids[gridName].propsCallback = getProps;\n\n    if (!grids[gridName].columnProviderInstance) {\n      grids[gridName].columnProviderInstance = awColumnSvc.createColumnProvider(declViewModel, dataCtxNode, dpInstance.commands, gridName, dpInstance.json.commandsAnchor);\n    }\n  });\n};\n\n_s3(useGrids, \"qZXjlXPw02lDYh+FhdE0Y+c4g1o=\");\n\nexport default {\n  processGrids,\n  useGrid,\n  useGrids,\n  useGridContext\n};","map":{"version":3,"names":["useState","useEffect","useRef","useInitHook","useReducer","awColumnSvc","gridContextReducer","state","action","type","useGridContext","prop","gridContextPlaceholder","gridContextDispatcher","columnDef","isBulkEditing","columnConfig","undefined","currentColumnIndex","popupRef","editVmo","editPropertyName","contextVmo","sortDirection","newColumnIndex","defaultColumnPinIndex","pinColumnData","dynamicRowHeightStatus","processGrids","gridDefs","viewModel","ctx","gridDefKey","gridInstance","dataCtxNode","data","dataProvider","gridOptions","gridid","useGrid","panelId","runActionWithViewModel","columns","gridContextColumns","tableCallbackRef","loadedVmObjects","hideColumnField","columnFilterInfo","columnMenuData","columnArrangeData","selectedColumn","reusable","vmCollectionObj","dataProviderInstance","vmCollection","loadedVMObjects","current","updateDeclGridObject","element","getRootReference","i18n","then","awSPLMTableNativeService","initializeTable","destroy","i18nLoaded","selectionModel","selectionModelActivated","isSelectionModelActivated","updateTableContents","initializationComplete","completeInitialization","updateState","updateVmCollection","updateContentRowSelection","updateTableColumns","vmo","setSelection","selectionData","update","selected","selectTableColumn","updateSortDirection","updateDynamicRowHeight","updatePinColumn","isFreezeAction","hideColumn","columnFilterApplied","columnsArranged","updateColumnMenuData","useGrids","grids","dataProviders","declViewModel","getProps","gridNames","Object","keys","forEach","gridName","dpInstance","propsCallback","columnProviderInstance","createColumnProvider","commands","json","commandsAnchor"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declreact/src/js/gridProviderUtils.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/gridProviderUtils\n */\nimport { useState, useEffect, useRef } from 'react';\nimport { useInitHook, useReducer } from 'js/reactHelper';\nimport awColumnSvc from 'js/awColumnService';\n\nconst gridContextReducer = ( state, action ) => {\n    switch ( action.type ) {\n        case 'UPDATE_VALUES':\n            return {\n                ...state,\n                ...action\n            };\n        default:\n            return state;\n    }\n};\n\nexport const useGridContext = ( prop ) => {\n    const [ gridContextPlaceholder, gridContextDispatcher ] = useReducer( gridContextReducer, {\n        columnDef: null,\n        isBulkEditing: false,\n        columnConfig: undefined,\n        currentColumnIndex: -1,\n        popupRef: null,\n        editVmo: null,\n        editPropertyName: '',\n        contextVmo: [],\n        sortDirection: 'none',\n        newColumnIndex: -1,\n        defaultColumnPinIndex: -1,\n        pinColumnData: {},\n        dynamicRowHeightStatus: false\n    } );\n\n    if( prop.gridContextDispatcher && prop.gridContextPlaceholder ) {\n        return [ prop.gridContextPlaceholder, prop.gridContextDispatcher ];\n    }\n\n    return [ gridContextPlaceholder, gridContextDispatcher ];\n};\n\nexport const processGrids = ( gridDefs, viewModel, ctx ) => {\n    // revisitme - need to be refactor maybe\n    // gridDefs = _.cloneDeep( gridDefs );\n\n    for( const gridDefKey in gridDefs ) {\n        let gridInstance = gridDefs[ gridDefKey ];\n        const dataCtxNode = {\n            data: viewModel,\n            ctx\n        };\n        if( gridInstance.dataProvider ) {\n            if( !gridInstance.gridOptions ) {\n                gridInstance.gridOptions = {};\n            }\n        }\n        gridInstance.dataCtxNode = dataCtxNode;\n        gridInstance.gridid = gridDefKey;\n    }\n    return gridDefs;\n};\n\nexport const useGrid = ( prop, panelId, gridContextPlaceholder, gridContextDispatcher, runActionWithViewModel ) => {\n    let columns;\n    let gridContextColumns;\n    const tableCallbackRef = useRef();\n    let loadedVmObjects;\n    let sortDirection;\n    let newColumnIndex;\n    let currentColumnIndex;\n    let pinColumnData;\n    let dynamicRowHeightStatus;\n    let hideColumnField;\n    let columnFilterInfo;\n    let columnMenuData;\n    let columnArrangeData;\n    let selectedColumn = gridContextPlaceholder && gridContextPlaceholder.selectedColumn;\n\n    if( prop.gridid && panelId === 'AwSplmTable' && prop.reusable !== 'true' ) {\n        const { vmCollectionObj, columnConfig } = prop.dataProviderInstance;\n        loadedVmObjects = vmCollectionObj.vmCollection.loadedVMObjects;\n        if( gridContextPlaceholder.columnConfig ) {\n            gridContextColumns = gridContextPlaceholder.columnConfig.columns;\n        }\n        if( columnConfig !== undefined && columnConfig.columns ) {\n            columns = columnConfig.columns;\n        }\n\n        if( gridContextPlaceholder ) {\n            sortDirection = gridContextPlaceholder.sortDirection;\n            newColumnIndex = gridContextPlaceholder.newColumnIndex;\n            currentColumnIndex = gridContextPlaceholder.currentColumnIndex;\n            pinColumnData = gridContextPlaceholder.pinColumnData;\n            dynamicRowHeightStatus = gridContextPlaceholder.dynamicRowHeightStatus;\n            hideColumnField = gridContextPlaceholder.hideColumnField;\n            columnFilterInfo = gridContextPlaceholder.columnFilterInfo;\n            columnMenuData = gridContextPlaceholder.columnMenuData;\n            columnArrangeData = gridContextPlaceholder.columnArrangeData;\n        }\n\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateDeclGridObject( prop );\n        }\n    }\n\n    //OnMount\n    useInitHook( () => {\n        if( prop.gridid && panelId === 'AwSplmTable' ) {\n            //Need to set gridContextDispatcher on dataProviderInstance for arrange reset\n            prop.dataProviderInstance.gridContextDispatcher = gridContextDispatcher;\n\n            if ( prop.reusable !== 'true' ) {\n                const { vmCollectionObj } = prop.dataProviderInstance;\n                const element = prop.dataProviderInstance.getRootReference();\n                prop.dataCtxNode.i18n = prop.dataCtxNode.data.i18n;\n                prop.dataCtxNode.gridContextDispatcher = gridContextDispatcher;\n                prop.dataCtxNode.gridContextPlaceholder = gridContextPlaceholder;\n                import( 'js/awSPLMTableNativeService' ).then( ( awSPLMTableNativeService ) => {\n                    tableCallbackRef.current = awSPLMTableNativeService.initializeTable( element.current, vmCollectionObj.vmCollection, prop.dataCtxNode, prop, runActionWithViewModel );\n                } );\n            }\n        }\n        //OnUnMount\n        return () => {\n            if( tableCallbackRef.current ) {\n                tableCallbackRef.current.destroy();\n            }\n        };\n    }, prop.i18nLoaded === true );\n\n    const selectionModel = prop.dataProviderInstance && prop.dataProviderInstance.selectionModel;\n    const selectionModelActivated = selectionModel && selectionModel.isSelectionModelActivated();\n\n    useEffect( () => {\n        const updateTableContents = async() => {\n            if( tableCallbackRef.current ) {\n                if( prop.dataProviderInstance.initializationComplete === false ) {\n                    await tableCallbackRef.current.completeInitialization();\n                }\n                tableCallbackRef.current.updateState( prop.dataCtxNode.data );\n                const { vmCollectionObj } = prop.dataProviderInstance;\n                tableCallbackRef.current.updateVmCollection( vmCollectionObj.vmCollection );\n            }\n        };\n        updateTableContents();\n    }, [ loadedVmObjects ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateContentRowSelection();\n        }\n    }, [ selectionModelActivated ] );\n\n    useEffect( () => {\n        const updateTableColumns = async( columns ) => {\n            if( tableCallbackRef.current ) {\n                if( prop.dataProviderInstance.initializationComplete === false ) {\n                    await tableCallbackRef.current.completeInitialization();\n                } else {\n                    tableCallbackRef.current.updateTableColumns( columns );\n                }\n            }\n        };\n        updateTableColumns( columns );\n    }, [ columns ] );\n\n    useEffect( () => {\n        if ( prop.dataProviderInstance && prop.dataProviderInstance.columnConfig && gridContextColumns ) {\n            prop.dataProviderInstance.columnConfig.columns = gridContextColumns;\n            if( tableCallbackRef.current ) {\n                tableCallbackRef.current.updateTableColumns( gridContextColumns );\n            }\n        }\n    }, [ gridContextColumns ] );\n\n    // Column selection with enableColumnSelection grid option\n    useEffect( () => {\n        if( tableCallbackRef.current && selectedColumn ) {\n            if( selectionModel && selectedColumn.vmo ) {\n                selectionModel.setSelection( [ selectedColumn.vmo ] );\n                selectionModel.selectionData.update( {\n                    selected: [ selectedColumn.vmo ]\n                } );\n            }\n            tableCallbackRef.current.selectTableColumn( selectedColumn );\n        }\n    }, [ selectedColumn ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateSortDirection( currentColumnIndex, newColumnIndex, sortDirection );\n        }\n    }, [ newColumnIndex, sortDirection ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateDynamicRowHeight( dynamicRowHeightStatus );\n        }\n    }, [ dynamicRowHeightStatus ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updatePinColumn( pinColumnData.columnDef, pinColumnData.isFreezeAction, pinColumnData.defaultColumnPinIndex );\n        }\n    }, [ pinColumnData ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.hideColumn( hideColumnField );\n        }\n    }, [ hideColumnField ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.columnFilterApplied( columnFilterInfo );\n        }\n    }, [ columnFilterInfo ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.columnsArranged( columnArrangeData );\n        }\n    }, [ columnArrangeData ] );\n\n    useEffect( () => {\n        if( tableCallbackRef.current ) {\n            tableCallbackRef.current.updateColumnMenuData( columnMenuData );\n        }\n    }, [ columnMenuData ] );\n};\n\nexport const useGrids = ( grids, dataCtxNode, dataProviders, gridContextPlaceholder, gridContextDispatcher, declViewModel, getProps ) => {\n    // Just to make sure the dp name order is same in every render.\n    const [ gridNames ] = useState( () => {\n        return grids !== undefined ? Object.keys( grids ) : [];\n    } );\n    gridNames.forEach( ( gridName ) => {\n        const dpInstance = dataProviders[ grids[ gridName ].dataProvider ];\n        grids[ gridName ].dataProviderInstance = dpInstance;\n        grids[ gridName ].i18n = dataCtxNode.data.i18n;\n        grids[ gridName ].gridContextPlaceholder = gridContextPlaceholder;\n        grids[ gridName ].gridContextDispatcher = gridContextDispatcher;\n        grids[ gridName ].propsCallback = getProps;\n        if( !grids[ gridName ].columnProviderInstance ) {\n            grids[ gridName ].columnProviderInstance = awColumnSvc.createColumnProvider( declViewModel, dataCtxNode,\n                dpInstance.commands, gridName, dpInstance.json.commandsAnchor );\n        }\n    } );\n};\n\nexport default {\n    processGrids,\n    useGrid,\n    useGrids,\n    useGridContext\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
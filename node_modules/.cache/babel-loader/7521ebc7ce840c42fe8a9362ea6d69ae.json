{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwLovListService.js\"; // Copyright (c) 2021 Siemens\n\n/* eslint-disable complexity */\n\n/* eslint-disable @swf/swf/no-react-usage */\n\nimport React from 'react';\nimport _ from 'lodash';\n/**\n * render function for AwList\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awLovListRenderFunction = props => {\n  const {\n    i18n,\n    viewModel,\n    actions,\n    blankLovEntry,\n    checkLovEntries,\n    context,\n    ...prop\n  } = props;\n  const {\n    children,\n    field,\n    setlovEntry,\n    lovPopup,\n    staticFilterStr,\n    isCheckBoxArryLOV,\n    dataProvider\n  } = prop;\n  const {\n    data,\n    dispatch\n  } = viewModel;\n  let vmCollectionObj = [];\n  let scrollElement;\n  let lovEntries = [];\n  let preferredChoices = [];\n  let {\n    selectedEntries = [],\n    dirty\n  } = data;\n  let restEntries = [];\n  let hasPreferredChoices = false;\n\n  const renderChildWithItem = lovEntry => {\n    return React.Children.map(children, child => {\n      let key = lovEntry.propInternalValue !== '' ? lovEntry.propInternalValue : '_blank_';\n      return /*#__PURE__*/React.cloneElement(child, {\n        field,\n        lovEntry,\n        dataProvider,\n        setLovEntry: setlovEntry,\n        key,\n        prop\n      });\n    });\n  };\n\n  if (dataProvider) {\n    scrollElement = dataProvider.getRootReference();\n    let paginationOption = dataProvider.getPagination();\n\n    if (!paginationOption) {\n      dataProvider.setPagination({\n        root: scrollElement,\n        rootMargin: '5px',\n        threshold: 1,\n        bottomAnchorSelector: '.page-bottom'\n      });\n    }\n\n    vmCollectionObj = dataProvider.vmCollectionObj;\n  } // there are applications using object as propInternalValue,\n  // in this case, comparator expected to use propDisplayValue as key\n\n\n  let propInternalValueInObject = false;\n\n  if (vmCollectionObj && vmCollectionObj.dataLoaded && vmCollectionObj.vmCollection && vmCollectionObj.vmCollection.loadedVMObjects.length > 0) {\n    lovEntries = [...vmCollectionObj.vmCollection.loadedVMObjects]; // check for any preferred values\n\n    if (vmCollectionObj.preferredChoices && vmCollectionObj.preferredChoices.length > 0) {\n      preferredChoices = [...vmCollectionObj.preferredChoices];\n      hasPreferredChoices = true;\n    }\n\n    propInternalValueInObject = Boolean(_.find(lovEntries, item => _.isObject(item.propInternalValue)));\n  }\n\n  const comparator = (item1, item2) => {\n    let key = propInternalValueInObject ? 'propDisplayValue' : 'propInternalValue';\n    return item1[key] === item2[key];\n  }; // As per the previous code...we are assuming if dataprovider does not have action\n  // It means it is static and client-side filtering can be done.\n  // apply filter if not null\n\n\n  if (staticFilterStr && _.isString(staticFilterStr) && (context.isListbox || !(dataProvider.action || dataProvider.initializeAction))) {\n    // alway keep the empty entry if has\n    lovEntries = applyFilter(lovEntries, staticFilterStr, true);\n  } // syncLovEntries\n\n\n  prop.updateValidEntries(lovEntries);\n\n  if (hasPreferredChoices) {\n    // MRU can always be filtered client-side\n    preferredChoices = applyFilter(preferredChoices, staticFilterStr); // denote last preferred choice for styling purposes\n\n    if (preferredChoices.length) {\n      preferredChoices[preferredChoices.length - 1].lastMru = true;\n    }\n  }\n\n  if (lovEntries.length > 0) {\n    if (!isCheckBoxArryLOV) {\n      // prepend preferredChoices to top of list\n      lovEntries = preferredChoices.concat(lovEntries); // syncLovEntries\n\n      prop.updateValidEntries(lovEntries); // honor emptyLOVEntry\n\n      if (field.fielddata.emptyLOVEntry !== false) {\n        lovEntries.splice(0, 0, blankLovEntry);\n      } // initialize attention\n\n\n      if (prop.selectIndex.current === null) {\n        prop.selectIndex.current = prop.getDefaultAttention();\n      } // set attention\n\n\n      let inx = prop.selectIndex.current;\n\n      _.forEach(lovEntries, (item, jnx) => {\n        item.attn = inx === jnx;\n      });\n    } else {\n      // isCheckBoxArryLOV\n      // need to filter the checked lov at the top\n      // apply filter if has selectedEntries and has filter\n      // selectedEntries may have placeHolders, we should replace then with valid (if matched) lovEntries\n      let selectedEntries_fixed = [];\n\n      if (staticFilterStr || dirty) {\n        // replace the selectedEntries with latest if dirty\n        selectedEntries = getLatestCheckLovEntries(checkLovEntries.current); // remember the list had been filtered, and we should pull latest CheckLovEntries each time\n\n        if (!dirty) {\n          dispatch({\n            path: 'data.dirty',\n            value: true\n          });\n        }\n      }\n\n      if (selectedEntries) {\n        // replace with valid (if matched) lovEntries\n        for (let index = 0; index < selectedEntries.length; index++) {\n          const item = selectedEntries[index];\n\n          let entry = _.find(lovEntries, i => comparator(i, item)); // only pick the valid ones:\n          // 1, case all data loaded, we only pick the ones already in lovEntries, entry maybe valid or null\n          // 2, case data partial loaded, we need to keep the placeholders, ensure entry always valid\n\n\n          if (vmCollectionObj.hasMoreValuesExist && !entry) {\n            entry = item;\n          }\n\n          if (entry) {\n            selectedEntries_fixed.push({ ...entry,\n              isChecked: true\n            });\n          }\n        }\n\n        selectedEntries = selectedEntries_fixed; // apply filter\n\n        staticFilterStr && (selectedEntries = applyFilter(selectedEntries_fixed, staticFilterStr)); // cbLov is a bit complex...\n        // selected values float to top and DON'T duplicate values in list below\n        // preferredChoices can be duplicates though\n        // rm any selected entries from preferred choices array\n\n        preferredChoices = _.differenceWith(preferredChoices, selectedEntries, (item1, item2) => comparator(item1, item2)); // reset lastMru\n\n        preferredChoices.forEach(function (choice) {\n          choice.lastMru = false;\n        }); // set lastMru state on last in list\n\n        if (preferredChoices.length) {\n          preferredChoices[preferredChoices.length - 1].lastMru = true;\n        }\n      } // filter out selected entries and preferred choices to avoid duplicates\n\n\n      restEntries = _.differenceWith(lovEntries, selectedEntries.concat(preferredChoices), (item1, item2) => comparator(item1, item2)); // prepend preferred choices to top\n\n      restEntries = preferredChoices.concat(restEntries); // syncLovEntries\n\n      prop.updateValidEntries(selectedEntries.concat(restEntries));\n    }\n  }\n\n  const hasValidEntries = () => {\n    return lovEntries && lovEntries.length > 0;\n  };\n\n  const transform = item => renderChildWithItem(item);\n\n  const renderContents = () => {\n    let result = [];\n\n    if (isCheckBoxArryLOV) {\n      // selectedEntries\n      if (selectedEntries && selectedEntries.length > 0) {\n        let part1 = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"afx-selected-vals\",\n          children: selectedEntries.map(transform)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 29\n        }, this);\n\n        result.push(part1);\n      } // others\n\n\n      if (restEntries && restEntries.length > 0) {\n        let part2 = restEntries.map(transform);\n        result.push(part2);\n      }\n    } else {\n      if (hasValidEntries()) {\n        result.push(lovEntries.map(transform));\n      }\n    }\n\n    return result;\n  };\n\n  const NO_LOV_VALUES = i18n.NO_LOV_VALUES;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aw-base-scrollPanel\",\n    ref: scrollElement,\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"listbox\",\n      \"aria-label\": field.name,\n      className: \"sw-column flex-shrink\",\n      children: [renderContents(), !hasValidEntries() && !vmCollectionObj.fetching && /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"aw-jswidgets-lov-novals\",\n        title: NO_LOV_VALUES,\n        children: NO_LOV_VALUES\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 72\n      }, this), vmCollectionObj.fetching && /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"aw-jswidgets-loadingItem\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"aw-jswidgets-loading\",\n          children: \"\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 49\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-bottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n};\nexport const onMount = prop => {\n  prop.selectIndex.current = null;\n  const {\n    isCheckBoxArryLOV,\n    checkLovEntries\n  } = prop;\n\n  if (isCheckBoxArryLOV && checkLovEntries.current) {\n    return getLatestCheckLovEntries(checkLovEntries.current);\n  }\n};\n\nconst getLatestCheckLovEntries = checkLovEntries => {\n  return _.reduce(checkLovEntries, (result, value, key) => {\n    result.push(value);\n    return result;\n  }, []);\n};\n\nconst applyFilter = function (collection, filterString) {\n  let keepNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!filterString) {\n    return collection;\n  }\n\n  return collection.filter(item => {\n    return keepNull && !item.propDisplayValue || // only filter it when it's a string\n    _.isString(item.propInternalValue) && item.propInternalValue.toLowerCase().indexOf(filterString.toLowerCase()) !== -1 || item.propDisplayValue.toLowerCase().indexOf(filterString.toLowerCase()) !== -1;\n  });\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwLovListService.js"],"names":["awLovListRenderFunction","props","prop","dataProvider","dispatch","vmCollectionObj","lovEntries","preferredChoices","selectedEntries","dirty","restEntries","hasPreferredChoices","renderChildWithItem","lovEntry","child","key","setLovEntry","scrollElement","paginationOption","root","rootMargin","threshold","bottomAnchorSelector","propInternalValueInObject","Boolean","_","item","comparator","item1","item2","staticFilterStr","context","applyFilter","field","inx","selectedEntries_fixed","getLatestCheckLovEntries","checkLovEntries","path","value","index","entry","i","isChecked","choice","hasValidEntries","transform","renderContents","result","part1","part2","NO_LOV_VALUES","i18n","onMount","isCheckBoxArryLOV","keepNull","filterString"],"mappings":"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","sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable complexity */\n/* eslint-disable @swf/swf/no-react-usage */\nimport React from 'react';\nimport _ from 'lodash';\n\n/**\n * render function for AwList\n * @param {*} props context for render function interpolation\n * @returns {JSX.Element} react component\n */\nexport const awLovListRenderFunction = ( props ) => {\n    const { i18n, viewModel, actions, blankLovEntry, checkLovEntries, context, ...prop } = props;\n    const { children, field, setlovEntry, lovPopup, staticFilterStr, isCheckBoxArryLOV, dataProvider } = prop;\n    const { data, dispatch } = viewModel;\n    let vmCollectionObj = [];\n    let scrollElement;\n    let lovEntries = [];\n    let preferredChoices = [];\n    let { selectedEntries = [], dirty } = data;\n    let restEntries = [];\n    let hasPreferredChoices = false;\n\n    const renderChildWithItem = ( lovEntry ) => {\n        return React.Children.map( children, child => {\n            let key = lovEntry.propInternalValue !== '' ? lovEntry.propInternalValue : '_blank_';\n            return React.cloneElement( child, { field, lovEntry, dataProvider, setLovEntry: setlovEntry, key, prop } );\n        } );\n    };\n\n    if( dataProvider ) {\n        scrollElement = dataProvider.getRootReference();\n        let paginationOption = dataProvider.getPagination();\n        if( !paginationOption ) {\n            dataProvider.setPagination( {\n                root: scrollElement,\n                rootMargin: '5px',\n                threshold: 1,\n                bottomAnchorSelector: '.page-bottom'\n            } );\n        }\n        vmCollectionObj = dataProvider.vmCollectionObj;\n    }\n\n    // there are applications using object as propInternalValue,\n    // in this case, comparator expected to use propDisplayValue as key\n    let propInternalValueInObject = false;\n\n    if( vmCollectionObj && vmCollectionObj.dataLoaded && vmCollectionObj.vmCollection && vmCollectionObj.vmCollection.loadedVMObjects.length > 0 ) {\n        lovEntries = [ ...vmCollectionObj.vmCollection.loadedVMObjects ];\n\n        // check for any preferred values\n        if( vmCollectionObj.preferredChoices && vmCollectionObj.preferredChoices.length > 0 ) {\n            preferredChoices = [ ...vmCollectionObj.preferredChoices ];\n            hasPreferredChoices = true;\n        }\n\n        propInternalValueInObject = Boolean( _.find( lovEntries, ( item ) => _.isObject( item.propInternalValue ) ) );\n    }\n\n    const comparator = ( item1, item2 ) => {\n        let key = propInternalValueInObject ? 'propDisplayValue' : 'propInternalValue';\n        return item1[ key ] === item2[ key ];\n    };\n\n    // As per the previous code...we are assuming if dataprovider does not have action\n    // It means it is static and client-side filtering can be done.\n    // apply filter if not null\n    if( staticFilterStr && _.isString( staticFilterStr ) &&\n        ( context.isListbox || !( dataProvider.action || dataProvider.initializeAction ) )\n    ) {\n        // alway keep the empty entry if has\n        lovEntries = applyFilter( lovEntries, staticFilterStr, true );\n    }\n\n    // syncLovEntries\n    prop.updateValidEntries( lovEntries );\n\n    if( hasPreferredChoices ) {\n        // MRU can always be filtered client-side\n        preferredChoices = applyFilter( preferredChoices, staticFilterStr );\n\n        // denote last preferred choice for styling purposes\n        if( preferredChoices.length ) {\n            preferredChoices[ preferredChoices.length - 1 ].lastMru = true;\n        }\n    }\n\n    if( lovEntries.length > 0 ) {\n        if ( !isCheckBoxArryLOV ) {\n            // prepend preferredChoices to top of list\n            lovEntries = preferredChoices.concat( lovEntries );\n\n            // syncLovEntries\n            prop.updateValidEntries( lovEntries );\n\n            // honor emptyLOVEntry\n            if( field.fielddata.emptyLOVEntry !== false ) {\n                lovEntries.splice( 0, 0, blankLovEntry );\n            }\n\n            // initialize attention\n            if( prop.selectIndex.current === null ) {\n                prop.selectIndex.current = prop.getDefaultAttention();\n            }\n\n            // set attention\n            let inx = prop.selectIndex.current;\n            _.forEach( lovEntries, ( item, jnx ) => {\n                item.attn = inx === jnx;\n            } );\n        } else {\n            // isCheckBoxArryLOV\n            // need to filter the checked lov at the top\n            // apply filter if has selectedEntries and has filter\n            // selectedEntries may have placeHolders, we should replace then with valid (if matched) lovEntries\n            let selectedEntries_fixed = [];\n            if( staticFilterStr || dirty ) {\n                // replace the selectedEntries with latest if dirty\n                selectedEntries = getLatestCheckLovEntries( checkLovEntries.current );\n\n                // remember the list had been filtered, and we should pull latest CheckLovEntries each time\n                if( !dirty ) { dispatch( { path: 'data.dirty', value: true } ); }\n            }\n\n            if( selectedEntries ) {\n                // replace with valid (if matched) lovEntries\n                for( let index = 0; index < selectedEntries.length; index++ ) {\n                    const item = selectedEntries[ index ];\n                    let entry = _.find( lovEntries, ( i ) => comparator( i, item ) );\n\n                    // only pick the valid ones:\n                    // 1, case all data loaded, we only pick the ones already in lovEntries, entry maybe valid or null\n                    // 2, case data partial loaded, we need to keep the placeholders, ensure entry always valid\n                    if( vmCollectionObj.hasMoreValuesExist && !entry ) {\n                        entry = item;\n                    }\n\n                    if( entry ) {\n                        selectedEntries_fixed.push( { ...entry, isChecked: true } );\n                    }\n                }\n                selectedEntries = selectedEntries_fixed;\n\n                // apply filter\n                staticFilterStr && ( selectedEntries = applyFilter( selectedEntries_fixed, staticFilterStr ) );\n\n                // cbLov is a bit complex...\n                // selected values float to top and DON'T duplicate values in list below\n                // preferredChoices can be duplicates though\n                // rm any selected entries from preferred choices array\n                preferredChoices = _.differenceWith( preferredChoices, selectedEntries, ( item1, item2 ) => comparator( item1, item2 ) );\n\n                // reset lastMru\n                preferredChoices.forEach( function( choice ) {\n                    choice.lastMru = false;\n                } );\n\n                // set lastMru state on last in list\n                if( preferredChoices.length ) {\n                    preferredChoices[ preferredChoices.length - 1 ].lastMru = true;\n                }\n            }\n\n            // filter out selected entries and preferred choices to avoid duplicates\n            restEntries = _.differenceWith( lovEntries, selectedEntries.concat( preferredChoices ), ( item1, item2 ) => comparator( item1, item2 ) );\n\n            // prepend preferred choices to top\n            restEntries = preferredChoices.concat( restEntries );\n\n            // syncLovEntries\n            prop.updateValidEntries( selectedEntries.concat( restEntries ) );\n        }\n    }\n\n    const hasValidEntries = () => {\n        return lovEntries && lovEntries.length > 0;\n    };\n\n    const transform = ( item ) => renderChildWithItem( item );\n    const renderContents = () => {\n        let result = [];\n\n        if( isCheckBoxArryLOV ) {\n            // selectedEntries\n            if( selectedEntries && selectedEntries.length > 0 ) {\n                let part1 = <div className='afx-selected-vals'>\n                    { selectedEntries.map( transform ) }\n                </div>;\n                result.push( part1 );\n            }\n            // others\n            if( restEntries && restEntries.length > 0 ) {\n                let part2 = restEntries.map( transform );\n                result.push( part2 );\n            }\n        } else {\n            if( hasValidEntries() ) {\n                result.push( lovEntries.map( transform ) );\n            }\n        }\n        return result;\n    };\n\n    const NO_LOV_VALUES = i18n.NO_LOV_VALUES;\n\n    return (\n        <div className='aw-base-scrollPanel' ref={scrollElement}>\n            <ul role='listbox' aria-label={field.name} className='sw-column flex-shrink' >\n                {\n                    renderContents()\n                }\n                {\n                    !hasValidEntries() && !vmCollectionObj.fetching && <li className='aw-jswidgets-lov-novals' title={NO_LOV_VALUES}>{NO_LOV_VALUES}</li>\n                }\n                {\n                    vmCollectionObj.fetching && <li className='aw-jswidgets-loadingItem'>\n                        <div className='aw-jswidgets-loading'>&nbsp;</div>\n                    </li>\n                }\n            </ul>\n            <div className='page-bottom'></div>\n        </div>\n    );\n};\n\nexport const onMount = ( prop ) => {\n    prop.selectIndex.current = null;\n\n    const { isCheckBoxArryLOV, checkLovEntries } = prop;\n    if( isCheckBoxArryLOV && checkLovEntries.current ) {\n        return getLatestCheckLovEntries( checkLovEntries.current );\n    }\n};\n\nconst getLatestCheckLovEntries = ( checkLovEntries ) => {\n    return _.reduce( checkLovEntries, ( result, value, key ) => {\n        result.push( value );\n        return result;\n    }, [] );\n};\n\nconst applyFilter = ( collection, filterString, keepNull = false ) => {\n    if( !filterString ) { return collection; }\n    return collection.filter( ( item ) => {\n        return keepNull && !item.propDisplayValue ||\n            // only filter it when it's a string\n            _.isString( item.propInternalValue ) && item.propInternalValue.toLowerCase().indexOf( filterString.toLowerCase() ) !== -1 ||\n            item.propDisplayValue.toLowerCase().indexOf( filterString.toLowerCase() ) !== -1;\n    } );\n};\n"]},"metadata":{},"sourceType":"module"}
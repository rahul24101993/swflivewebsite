{"ast":null,"code":"// Copyright (c) 2021 Siemens\n/**\n * @module js/lovProviderUtils\n */import{useEffect,useRef}from'react';import appCtxSvc from'js/appCtxService';import{useInitHook}from'js/reactHelper';import{useDataProvider}from'js/dataProviderUtils';import{loadAction,validateLovAction,createDynamicDataProvider}from'js/dataProviderFactory';/**\n *  This particular hook is specific to dynamic dataprovider for LOV means not applicable for static dataprovider LOVS\n * @param {} dataProvider\n * @param {*} viewModel\n */const useDynamicDataProviderForLOV=(dataProvider,viewModel,prop)=>{dataProvider.vmCollectionObj=useDataProvider(dataProvider).vmCollectionObj;// align dataCtxNode , check declViewModelProcessingFactory.js L216\nlet initial={data:viewModel};let dataCtxNode=useRef(initial);// dataCtxNode should be reactive,\n// ref issue: https://gitlab.industrysoftware.automation.siemens.com/Apollo/swf/-/issues/887\n// update the viewModel and prop accordingly\ndataCtxNode.current.data=viewModel;if(prop){dataCtxNode.current.parameters={prop};}useEffect(()=>{if(!dataProvider.loadAction&&!dataProvider.validateLovAction){dataProvider.loadAction=async(vmCollection,startIndex,pageObject)=>{return loadAction(dataProvider,dataCtxNode.current,vmCollection,startIndex,pageObject);};dataProvider.validateLovAction=async input=>{return validateLovAction(input,dataProvider,dataCtxNode.current);};}return()=>{if(dataProvider){dataProvider.destroy();}};},[]);};const useDataProviderInLovPopup=prop=>{//OnMount\nlet currentLovEntry=null;let dataProvider=prop.dataProvider;/**\n     * This ref brings mutually exclusive behavior between init and useEffect hook.\n     * It prevents multiple REST calls.\n     */let exclusiveHook=useRef({});let lovConfig=useRef({});currentLovEntry={propDisplayValue:prop.field.fielddata.uiValue,propInternalValue:prop.field.typex==='DATETIME'||prop.field.typex==='DATE'?Date.parse(prop.field.value):String(prop.field.value)};// If the LOV type is checkbox array , then the UI value is never updated manually.\n// It is updated by selecting on the checkbox.\n// Hence, we never need to do the filtering.\n// For checkboxarray lov filtering is done from another textbox which appears inside the LOV popup.\n// So, added a check to make sure filtering never changes for checkbox array LOVs.\nlet filterString=prop.staticFilterStr;lovConfig.current={filterString};useInitHook(()=>{if(dataProvider){exclusiveHook.current={isExecuted:true};dataProvider.resetDataProvider({});dataProvider.selectionModel.setSelection(currentLovEntry);// TODO: how to support auto focus selection??\n// reset attention\nprop.selectIndex&&(prop.selectIndex.current=null);let lovInfo={ctxLovPropName:prop.field.name,ctxLovPropVMO:prop.field.vmo};appCtxSvc.registerCtx('aw.lovInfo',lovInfo);}});useEffect(()=>{let timeout=setTimeout(()=>{if(dataProvider&&!exclusiveHook.current.isExecuted){// reset attention\nprop.selectIndex&&(prop.selectIndex.current=null);dataProvider.resetDataProvider();}},500);return()=>{exclusiveHook.current={isExecuted:false};clearTimeout(timeout);};},[dataProvider,lovConfig.current.filterString]);};export const useLOVs=function(fields,prop,viewModel){let{elementRefList}=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};// useInit( () => {\n//     if( viewModel.data.name === 'dataProviderLOV' ) {\n//         useDynamicDataProviderForLOV( dataProvider, viewModel, prop );\n//     }\n// });\nlet lovEntryRef=useRef(null);if(prop.lovlist){// eslint-disable-next-line react-hooks/rules-of-hooks\nuseDataProviderInLovPopup(prop);}if(viewModel.data.name==='dataProviderLOV'){let dataProvider=prop.fielddata.dataProvider?prop.fielddata.dataProvider:elementRefList.get('dynDataprovider').current;if(!dataProvider){dataProvider=prop.isListbox?createDynamicDataProvider(1):createDynamicDataProvider();elementRefList.get('dynDataprovider').current=dataProvider;}if(dataProvider.getLovEntryRef()===null){dataProvider.setLovEntryRef(lovEntryRef);}//The hook is being called conditionally since it is only supposed to be invoked for dynamic dataproviders\n//It is made sure that the dataprovider is always available before this stage\n//thereby providing a gaurantee that the hooks will always be invoked in the same order for a particular component\nif(dataProvider.dynamicDp){// eslint-disable-next-line react-hooks/rules-of-hooks\nuseDynamicDataProviderForLOV(dataProvider,viewModel,prop);}}};export default{useLOVs};","map":null,"metadata":{},"sourceType":"module"}
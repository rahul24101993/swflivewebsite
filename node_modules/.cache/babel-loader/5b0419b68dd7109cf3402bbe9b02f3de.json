{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\components\\\\src\\\\js\\\\AwToggleButtonValService.js\";\n// Copyright (c) 2021 Siemens\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n/**\n * render function for AwToggleButtonVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet onChangeActionHandler = undefined;\nlet getAriaChecked = undefined;\nexport const awToggleButtonValRenderFunction = props => {\n  const {\n    viewModel,\n    ctxMin,\n    actions,\n    i18n,\n    fields,\n    grids,\n    formProp,\n    messages,\n    ...prop\n  } = props;\n  let filteredAttrs = sanitizer.sanitizeHTMLTagProps(prop, 'input');\n  const inputClass = getValClass(prop);\n\n  const doAction = ev => {\n    prop.onChange(ev);\n    return prop.action ? prop.action(ev) : '';\n  };\n\n  const onKeyPress = (event, prop) => {\n    if (prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.length > 0) {\n      for (let index = 0; index < prop.fielddata.displayValsModel.length; index++) {\n        if (prop.fielddata.displayValsModel[index].isInEditMode) {\n          event.updateArray = true;\n          event.index = index;\n          break;\n        }\n      }\n    }\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      prop.onChange(event);\n    }\n  };\n\n  if (prop.typex === 'BOOLEANARRAY') {\n    let ariaChecked = getAriaChecked === undefined ? false : getAriaChecked();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sw-toggle-val-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sw-toggle-val\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: prop.value,\n          \"data-locator\": prop.label,\n          \"aria-checked\": ariaChecked,\n          onChange: onChangeActionHandler,\n          onKeyPress: event => onKeyPress(event, prop)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"slider round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"sw-toggle-val\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...filteredAttrs,\n      type: \"checkbox\",\n      \"aria-checked\": prop.value,\n      onChange: doAction,\n      className: inputClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"slider round\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\nexport const initialize = (props, _ref) => {\n  let {\n    dispatch,\n    dirty\n  } = _ref;\n  let currentVal = undefined;\n\n  if (props.typex === 'BOOLEANARRAY') {\n    onChangeActionHandler = event => {\n      currentVal = event === undefined ? false : event.target.checked;\n      dispatch({\n        path: 'data.dirty',\n        value: dirty++\n      });\n      return () => {\n        return currentVal;\n      };\n    };\n\n    getAriaChecked = onChangeActionHandler();\n  }\n};","map":{"version":3,"names":["sanitizer","getValClass","onChangeActionHandler","undefined","getAriaChecked","awToggleButtonValRenderFunction","props","viewModel","ctxMin","actions","i18n","fields","grids","formProp","messages","prop","filteredAttrs","sanitizeHTMLTagProps","inputClass","doAction","ev","onChange","action","onKeyPress","event","fielddata","displayValsModel","length","index","isInEditMode","updateArray","key","preventDefault","typex","ariaChecked","value","label","initialize","dispatch","dirty","currentVal","target","checked","path"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/components/src/js/AwToggleButtonValService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\nimport sanitizer from 'js/sanitizer';\nimport { getValClass } from 'js/componentUtils';\n\n/**\n * render function for AwToggleButtonVal\n * @param {*} param0 context for render function interpolation\n * @returns {JSX.Element} react component\n */\nlet onChangeActionHandler = undefined;\nlet getAriaChecked = undefined;\nexport const awToggleButtonValRenderFunction = ( props ) => {\n    const {\n        viewModel,\n        ctxMin,\n        actions,\n        i18n,\n        fields,\n        grids,\n        formProp,\n        messages,\n        ...prop\n    } = props;\n\n    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'input' );\n    const inputClass = getValClass( prop );\n\n    const doAction = ( ev ) => {\n        prop.onChange( ev );\n        return prop.action ? prop.action( ev ) : '';\n    };\n\n    const onKeyPress = ( event, prop ) => {\n        if( prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.length > 0 ) {\n            for( let index = 0; index < prop.fielddata.displayValsModel.length; index++ ) {\n                if( prop.fielddata.displayValsModel[ index ].isInEditMode ) {\n                    event.updateArray = true;\n                    event.index = index;\n                    break;\n                }\n            }\n        }\n\n        if( event.key === 'Enter' ) {\n            event.preventDefault();\n            prop.onChange( event );\n        }\n    };\n\n    if( prop.typex === 'BOOLEANARRAY' ) {\n        let ariaChecked = getAriaChecked === undefined ? false : getAriaChecked();\n        return (\n            <div className='sw-toggle-val-container'>\n                <div className='sw-toggle-val'>\n                    <input type='checkbox' value={prop.value} data-locator={prop.label} aria-checked={ariaChecked}\n                        onChange={onChangeActionHandler} onKeyPress={( event ) => onKeyPress( event, prop )}/>\n                    <span className='slider round'></span>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <span className='sw-toggle-val'>\n            <input {...filteredAttrs} type='checkbox' aria-checked={prop.value} onChange={doAction} className={inputClass}>\n            </input>\n            <span className='slider round'></span>\n        </span>\n    );\n};\n\nexport  const initialize = ( props, { dispatch, dirty } )=>{\n    let currentVal = undefined;\n    if( props.typex === 'BOOLEANARRAY' ) {\n        onChangeActionHandler = ( event ) =>{\n            currentVal = event === undefined ? false : event.target.checked;\n            dispatch( { path: 'data.dirty', value: dirty++ } );\n            return ()=>{\n                return currentVal;\n            };\n        };\n        getAriaChecked = onChangeActionHandler();\n    }\n};\n"],"mappings":";AAAA;AACA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,qBAAqB,GAAGC,SAA5B;AACA,IAAIC,cAAc,GAAGD,SAArB;AACA,OAAO,MAAME,+BAA+B,GAAKC,KAAF,IAAa;EACxD,MAAM;IACFC,SADE;IAEFC,MAFE;IAGFC,OAHE;IAIFC,IAJE;IAKFC,MALE;IAMFC,KANE;IAOFC,QAPE;IAQFC,QARE;IASF,GAAGC;EATD,IAUFT,KAVJ;EAYA,IAAIU,aAAa,GAAGhB,SAAS,CAACiB,oBAAV,CAAgCF,IAAhC,EAAsC,OAAtC,CAApB;EACA,MAAMG,UAAU,GAAGjB,WAAW,CAAEc,IAAF,CAA9B;;EAEA,MAAMI,QAAQ,GAAKC,EAAF,IAAU;IACvBL,IAAI,CAACM,QAAL,CAAeD,EAAf;IACA,OAAOL,IAAI,CAACO,MAAL,GAAcP,IAAI,CAACO,MAAL,CAAaF,EAAb,CAAd,GAAkC,EAAzC;EACH,CAHD;;EAKA,MAAMG,UAAU,GAAG,CAAEC,KAAF,EAAST,IAAT,KAAmB;IAClC,IAAIA,IAAI,CAACU,SAAL,CAAeC,gBAAf,IAAmCX,IAAI,CAACU,SAAL,CAAeC,gBAAf,CAAgCC,MAAhC,GAAyC,CAAhF,EAAoF;MAChF,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,IAAI,CAACU,SAAL,CAAeC,gBAAf,CAAgCC,MAA5D,EAAoEC,KAAK,EAAzE,EAA8E;QAC1E,IAAIb,IAAI,CAACU,SAAL,CAAeC,gBAAf,CAAiCE,KAAjC,EAAyCC,YAA7C,EAA4D;UACxDL,KAAK,CAACM,WAAN,GAAoB,IAApB;UACAN,KAAK,CAACI,KAAN,GAAcA,KAAd;UACA;QACH;MACJ;IACJ;;IAED,IAAIJ,KAAK,CAACO,GAAN,KAAc,OAAlB,EAA4B;MACxBP,KAAK,CAACQ,cAAN;MACAjB,IAAI,CAACM,QAAL,CAAeG,KAAf;IACH;EACJ,CAfD;;EAiBA,IAAIT,IAAI,CAACkB,KAAL,KAAe,cAAnB,EAAoC;IAChC,IAAIC,WAAW,GAAG9B,cAAc,KAAKD,SAAnB,GAA+B,KAA/B,GAAuCC,cAAc,EAAvE;IACA,oBACI;MAAK,SAAS,EAAC,yBAAf;MAAA,uBACI;QAAK,SAAS,EAAC,eAAf;QAAA,wBACI;UAAO,IAAI,EAAC,UAAZ;UAAuB,KAAK,EAAEW,IAAI,CAACoB,KAAnC;UAA0C,gBAAcpB,IAAI,CAACqB,KAA7D;UAAoE,gBAAcF,WAAlF;UACI,QAAQ,EAAEhC,qBADd;UACqC,UAAU,EAAIsB,KAAF,IAAaD,UAAU,CAAEC,KAAF,EAAST,IAAT;QADxE;UAAA;UAAA;UAAA;QAAA,QADJ,eAGI;UAAM,SAAS,EAAC;QAAhB;UAAA;UAAA;UAAA;QAAA,QAHJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EASH;;EAED,oBACI;IAAM,SAAS,EAAC,eAAhB;IAAA,wBACI,sBAAWC,aAAX;MAA0B,IAAI,EAAC,UAA/B;MAA0C,gBAAcD,IAAI,CAACoB,KAA7D;MAAoE,QAAQ,EAAEhB,QAA9E;MAAwF,SAAS,EAAED;IAAnG;MAAA;MAAA;MAAA;IAAA,QADJ,eAGI;MAAM,SAAS,EAAC;IAAhB;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH,CA1DM;AA4DP,OAAQ,MAAMmB,UAAU,GAAG,CAAE/B,KAAF,WAAgC;EAAA,IAAvB;IAAEgC,QAAF;IAAYC;EAAZ,CAAuB;EACvD,IAAIC,UAAU,GAAGrC,SAAjB;;EACA,IAAIG,KAAK,CAAC2B,KAAN,KAAgB,cAApB,EAAqC;IACjC/B,qBAAqB,GAAKsB,KAAF,IAAY;MAChCgB,UAAU,GAAGhB,KAAK,KAAKrB,SAAV,GAAsB,KAAtB,GAA8BqB,KAAK,CAACiB,MAAN,CAAaC,OAAxD;MACAJ,QAAQ,CAAE;QAAEK,IAAI,EAAE,YAAR;QAAsBR,KAAK,EAAEI,KAAK;MAAlC,CAAF,CAAR;MACA,OAAO,MAAI;QACP,OAAOC,UAAP;MACH,CAFD;IAGH,CAND;;IAOApC,cAAc,GAAGF,qBAAqB,EAAtC;EACH;AACJ,CAZO"},"metadata":{},"sourceType":"module"}
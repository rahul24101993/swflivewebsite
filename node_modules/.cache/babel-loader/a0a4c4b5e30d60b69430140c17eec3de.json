{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rahukl57\\\\Desktop\\\\SWF\\\\CreatingOwnComponentUsingJsx\\\\node_modules\\\\@swf\\\\core\\\\src\\\\command\\\\src\\\\js\\\\AwToolbarService.js\"; // Copyright (c) 2021 Siemens\n\n/* eslint-disable max-len */\n\nimport { awCommandBarInitFunction, refreshServerVisibility } from 'js/AwCommandBarService';\nimport AwToolbarInternal from 'viewmodel/AwToolbarInternalViewModel';\nimport Debug from 'debug'; // eslint-disable-next-line complexity\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const awToolbarRenderFunction = props => {\n  const {\n    visibilityLoader,\n    reverse = false,\n    reverseSecond = false,\n    overflow = true,\n    orientation = 'HORIZONTAL',\n    firstAnchor,\n    secondAnchor,\n    showCommandLabels,\n    context,\n    viewModel: {\n      data: {\n        firstCommandList = null,\n        secondCommandList = null,\n        visibleServerCommands,\n        trace\n      }\n    }\n  } = props;\n  return firstCommandList && secondCommandList && /*#__PURE__*/_jsxDEV(AwToolbarInternal, {\n    alignment: orientation,\n    commandContext: context,\n    firstAnchor: firstAnchor,\n    firstCommandList: firstCommandList,\n    overflow: overflow,\n    reverse: reverse,\n    reverseSecond: reverseSecond,\n    secondAnchor: secondAnchor,\n    secondCommandList: secondCommandList,\n    showCommandLabels: showCommandLabels,\n    trace: trace,\n    visibilityLoader: visibilityLoader,\n    visibleServerCommands: visibleServerCommands\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 53\n  }, this);\n};\n/**\n * Initialize the toolbar\n *\n * @param {Object} options options\n * @returns {Object} Toolbar init data\n */\n\nexport const awToolbarInitFunction = async _ref => {\n  let {\n    firstAnchor = '',\n    secondAnchor = ''\n  } = _ref;\n  const trace = new Debug(`command:AwCommandBar:${firstAnchor}+${secondAnchor}`);\n  trace('Loading commands');\n  const [{\n    commandList: firstCommandList\n  }, {\n    commandList: secondCommandList\n  }] = await Promise.all([awCommandBarInitFunction({\n    anchor: firstAnchor\n  }), awCommandBarInitFunction({\n    anchor: secondAnchor\n  })]);\n  trace('Loaded command list', firstCommandList, secondCommandList);\n  return {\n    firstCommandList: firstCommandList || [],\n    secondCommandList: secondCommandList || [],\n    trace\n  };\n};\n/**\n * Refresh server visibility for the toolbar\n *\n * @param {Object} options options\n * @returns {Object} Updated server visibility\n */\n\nexport const refreshServerVisibilityToolbar = async _ref2 => {\n  let {\n    firstCommandList,\n    secondCommandList,\n    visibilityLoader,\n    trace\n  } = _ref2;\n\n  if (!firstCommandList || !secondCommandList || !visibilityLoader) {\n    return null;\n  }\n\n  return refreshServerVisibility({\n    commandList: [...firstCommandList, ...secondCommandList],\n    visibilityLoader,\n    trace\n  });\n};","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/command/src/js/AwToolbarService.js"],"names":["awToolbarRenderFunction","props","reverse","reverseSecond","overflow","orientation","viewModel","data","firstCommandList","secondCommandList","trace","visibleServerCommands","awToolbarInitFunction","firstAnchor","secondAnchor","commandList","awCommandBarInitFunction","anchor","refreshServerVisibilityToolbar","refreshServerVisibility"],"mappings":"4JAAA;;AACA;;AACA,SAAA,wBAAA,EAAA,uBAAA,QAAA,wBAAA;AACA,OAAA,iBAAA,MAAA,sCAAA;AACA,OAAA,KAAA,MAAA,OAAA,C,CAEA;;;AACA,OAAO,MAAMA,uBAAuB,GAAKC,KAAF,IAAa;EAChD,MAAM;IAAA,gBAAA;IAEFC,OAAO,GAFL,KAAA;IAGFC,aAAa,GAHX,KAAA;IAIFC,QAAQ,GAJN,IAAA;IAKFC,WAAW,GALT,YAAA;IAAA,WAAA;IAAA,YAAA;IAAA,iBAAA;IAAA,OAAA;IAUFC,SAAS,EAAE;MAAEC,IAAI,EAAE;QAAEC,gBAAgB,GAAlB,IAAA;QAA2BC,iBAAiB,GAA5C,IAAA;QAAA,qBAAA;QAA4EC;MAA5E;IAAR;EAVT,IAAN,KAAA;EAaA,OAAOF,gBAAgB,IAAhBA,iBAAAA,IAAAA,aAAyC,OAAA,CAAA,iBAAA,EAAA;IAC5C,SAAS,EADmC,WAAA;IAE5C,cAAc,EAF8B,OAAA;IAG5C,WAAW,EAHiC,WAAA;IAI5C,gBAAgB,EAJ4B,gBAAA;IAK5C,QAAQ,EALoC,QAAA;IAM5C,OAAO,EANqC,OAAA;IAO5C,aAAa,EAP+B,aAAA;IAQ5C,YAAY,EARgC,YAAA;IAS5C,iBAAiB,EAT2B,iBAAA;IAU5C,iBAAiB,EAV2B,iBAAA;IAW5C,KAAK,EAXuC,KAAA;IAY5C,gBAAgB,EAZ4B,gBAAA;IAa5C,qBAAqB,EAAGG;EAboB,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,EAAA;IAAA,QAAA,EAAA,YAAA;IAAA,UAAA,EAAA,EAAA;IAAA,YAAA,EAAA;EAAA,CAAA,EAAhD,IAAgD,CAAhD;AAdG,CAAA;AA+BP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAA,IAAA,IAG9B;EAAA,IAHqC;IACxCC,WAAW,GAD6B,EAAA;IAExCC,YAAY,GAAG;EAFyB,IAGrC,IAAA;EACH,MAAMJ,KAAK,GAAG,IAAA,KAAA,CAAY,wBAAuBG,WAAY,IAAGC,YAAhE,EAAc,CAAd;EACAJ,KAAK,CAALA,kBAAK,CAALA;EACA,MAAM,CAAE;IAAEK,WAAW,EAAEP;EAAf,CAAF,EAAqC;IAAEO,WAAW,EAAEN;EAAf,CAArC,IAA4E,MAAM,OAAO,CAAP,GAAA,CAAa,CACjGO,wBAAwB,CAAE;IAAEC,MAAM,EAAEJ;EAAV,CAAF,CADyE,EAEjGG,wBAAwB,CAAE;IAAEC,MAAM,EAAEH;EAAV,CAAF,CAFyE,CAAb,CAAxF;EAGAJ,KAAK,CAAA,qBAAA,EAAA,gBAAA,EAALA,iBAAK,CAALA;EACA,OAAO;IACHF,gBAAgB,EAAEA,gBAAgB,IAD/B,EAAA;IAEHC,iBAAiB,EAAEA,iBAAiB,IAFjC,EAAA;IAGHC;EAHG,CAAP;AAVG,CAAA;AAiBP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMQ,8BAA8B,GAAG,MAAA,KAAA,IAKvC;EAAA,IAL8C;IAAA,gBAAA;IAAA,iBAAA;IAAA,gBAAA;IAIjDR;EAJiD,IAK9C,KAAA;;EACH,IAAI,CAAA,gBAAA,IAAqB,CAArB,iBAAA,IAA2C,CAA/C,gBAAA,EAAmE;IAC/D,OAAA,IAAA;EACH;;EACD,OAAOS,uBAAuB,CAAE;IAC5BJ,WAAW,EAAE,CAAE,GAAF,gBAAA,EAAuB,GADR,iBACf,CADe;IAAA,gBAAA;IAG5BL;EAH4B,CAAF,CAA9B;AATG,CAAA","sourcesContent":["// Copyright (c) 2021 Siemens\n/* eslint-disable max-len */\nimport { awCommandBarInitFunction, refreshServerVisibility } from 'js/AwCommandBarService';\nimport AwToolbarInternal from 'viewmodel/AwToolbarInternalViewModel';\nimport Debug from 'debug';\n\n// eslint-disable-next-line complexity\nexport const awToolbarRenderFunction = ( props ) => {\n    const {\n        visibilityLoader,\n        reverse = false,\n        reverseSecond = false,\n        overflow = true,\n        orientation = 'HORIZONTAL',\n        firstAnchor,\n        secondAnchor,\n        showCommandLabels,\n        context,\n        viewModel: { data: { firstCommandList = null, secondCommandList = null, visibleServerCommands, trace } }\n    } = props;\n\n    return firstCommandList && secondCommandList && <AwToolbarInternal\n        alignment={orientation}\n        commandContext={context}\n        firstAnchor={firstAnchor}\n        firstCommandList={ firstCommandList }\n        overflow={overflow}\n        reverse={reverse}\n        reverseSecond={reverseSecond}\n        secondAnchor={secondAnchor}\n        secondCommandList={ secondCommandList }\n        showCommandLabels={showCommandLabels}\n        trace={trace}\n        visibilityLoader={visibilityLoader}\n        visibleServerCommands={ visibleServerCommands }>\n    </AwToolbarInternal>;\n};\n\n/**\n * Initialize the toolbar\n *\n * @param {Object} options options\n * @returns {Object} Toolbar init data\n */\nexport const awToolbarInitFunction = async( {\n    firstAnchor = '',\n    secondAnchor = ''\n} ) => {\n    const trace = new Debug( `command:AwCommandBar:${firstAnchor}+${secondAnchor}` );\n    trace( 'Loading commands' );\n    const [ { commandList: firstCommandList }, { commandList: secondCommandList } ] = await Promise.all( [\n        awCommandBarInitFunction( { anchor: firstAnchor } ),\n        awCommandBarInitFunction( { anchor: secondAnchor } ) ] );\n    trace( 'Loaded command list', firstCommandList, secondCommandList );\n    return {\n        firstCommandList: firstCommandList || [],\n        secondCommandList: secondCommandList || [],\n        trace\n    };\n};\n\n/**\n * Refresh server visibility for the toolbar\n *\n * @param {Object} options options\n * @returns {Object} Updated server visibility\n */\nexport const refreshServerVisibilityToolbar = async( {\n    firstCommandList,\n    secondCommandList,\n    visibilityLoader,\n    trace\n} ) => {\n    if( !firstCommandList || !secondCommandList || !visibilityLoader ) {\n        return null;\n    }\n    return refreshServerVisibility( {\n        commandList: [ ...firstCommandList, ...secondCommandList ],\n        visibilityLoader,\n        trace\n    } );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do outgoing calls in batch\n *\n * @module js/batchActionService\n *\n * @namespace batchActionService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport conditionSvc from 'js/conditionService';\nimport declarativeDataCtxService from 'js/declarativeDataCtxService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport moduleLoader from 'js/moduleLoader';\nimport logger from 'js/logger';\n/**\n * Define public API\n */\n\nvar exports = {};\n/**\n * Execute the given 'all actions in Steps' using the given related parameters\n *\n * @param {DeclViewModel} declViewModel - The DeclViewModel the DeclAction is a member of.\n * @param {DeclAction} batchActions - The DeclAction to execute.\n * @param {Object} dataCtxNode - The data context to use during execution.\n *\n */\n\nexport let executeBatchActions = function (declViewModel, batchActions, dataCtxNode, actionService) {\n  var tasks = [];\n\n  if (!declUtils.isValidModelAndDataCtxNode(declViewModel, dataCtxNode)) {\n    return undefined;\n  }\n\n  if (batchActions.steps) {\n    for (var step = 0; step < batchActions.steps.length; step++) {\n      tasks.push(exports._executeActionWrapper(batchActions.steps[step], declViewModel, dataCtxNode, actionService));\n    }\n  }\n\n  return tasks.reduce(function (promiseChain, task) {\n    return promiseChain.then(function (respData) {\n      return task(respData);\n    });\n  }, AwPromiseService.instance.resolve());\n};\n/**\n * Execute the given 'action' using the given related parameters\n *\n * @param {DeclViewModel} declViewModel - The DeclViewModel the DeclAction is a member of.\n * @param {DeclAction} step - The DeclAction to execute.\n * @param {Object} dataCtxNode - The data context to use during execution.\n * @param {Object} index - The current index of action in Steps\n * @param {Object[]} steps - The steps under 'batch' action type\n * @param {Object} actionService - The referance to action service\n * @param {Object} actionResp - the action Response\n *\n */\n\nconst parseConditonExp = (expression, evaluationEnv) => {\n  //This is not acomplete fix, needs to be revisited - LCS-565498\n  const exp = conditionSvc.getRealExpression(expression, evaluationEnv);\n\n  if (_.isString(exp)) {\n    return exp;\n  } //If the condition is object based, return the original expression\n\n\n  return expression;\n};\n\nexport let _executeActionWrapper = function (stepDef, declViewModel, dataCtxNode, actionService) {\n  return function (actionResp) {\n    var action = null;\n    var outputFlag = false;\n    var inputArgs = null;\n\n    if (declViewModel._internal.actions) {\n      action = declViewModel._internal.actions[stepDef.action];\n    }\n\n    var conditionResult = false;\n\n    if (stepDef.outputArg && action) {\n      outputFlag = true;\n      action.outputArg = _.cloneDeep(stepDef.outputArg);\n    }\n\n    let localContext = declUtils.getLatestContext(dataCtxNode, declViewModel);\n    localContext.response = actionResp;\n    localContext = { ...localContext,\n      ...declViewModel.atomicData\n    };\n\n    if (stepDef.condition) {\n      var conditionExpression = parseConditonExp(stepDef.condition, declViewModel._internal);\n\n      if (conditionExpression !== null) {\n        conditionResult = conditionSvc.evaluateCondition(localContext, conditionExpression);\n      } // if conditionResult is undefined or null we should consider result as false.\n\n\n      if (!conditionResult) {\n        conditionResult = false;\n      }\n    }\n\n    var isEventExecutable = stepDef.condition && conditionResult || !stepDef.condition;\n\n    if (isEventExecutable) {\n      if (stepDef.inputArg) {\n        inputArgs = _.cloneDeep(stepDef.inputArg);\n\n        try {\n          declarativeDataCtxService.applyScope(localContext.data, inputArgs, null, actionResp, null);\n        } catch (error) {\n          throw new Error(error);\n        }\n\n        if (localContext && localContext.scope) {\n          localContext.scope.parameters = inputArgs ? inputArgs : null;\n        } else {\n          localContext = { ...localContext,\n            parameters: inputArgs ? inputArgs : null\n          };\n        }\n      }\n\n      if (action.deps) {\n        /** action ID will be used for better logging */\n        action.actionId = stepDef.action;\n\n        var doAction = function (depModuleObj) {\n          if (declViewModel.isDestroyed()) {\n            logger.warn('Attempt to execute a command after its DeclViewModel was destroyed...' + '\\n' + 'Action was therefore not executed...continuing.' + '\\n' + //\n            'DeclViewModel: ' + declViewModel + '\\n' + //\n            'Action       : ' + stepDef.action);\n          } else {\n            /**\n             * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action\n             * event processing was started.\n             */\n            var localDataCtx = declUtils.resolveLocalDataCtx(localContext.data, localContext); // _deps will be undefined when try to load viewModelService inside itself\n\n            var _depModuleObj = depModuleObj;\n            return actionService.executeAction(localContext.data, action, localDataCtx, _depModuleObj, outputFlag);\n          }\n\n          return undefined;\n        };\n\n        return moduleLoader.loadDependentModule(action.deps).then(doAction);\n      }\n\n      return actionService.executeAction(localContext.data, action, localContext, null, outputFlag);\n    }\n\n    return AwPromiseService.instance.resolve(actionResp);\n  };\n};\nexports = {\n  executeBatchActions,\n  _executeActionWrapper\n};\nexport default exports;","map":{"version":3,"names":["AwPromiseService","conditionSvc","declarativeDataCtxService","_","declUtils","moduleLoader","logger","exports","executeBatchActions","declViewModel","batchActions","dataCtxNode","actionService","tasks","isValidModelAndDataCtxNode","undefined","steps","step","length","push","_executeActionWrapper","reduce","promiseChain","task","then","respData","instance","resolve","parseConditonExp","expression","evaluationEnv","exp","getRealExpression","isString","stepDef","actionResp","action","outputFlag","inputArgs","_internal","actions","conditionResult","outputArg","cloneDeep","localContext","getLatestContext","response","atomicData","condition","conditionExpression","evaluateCondition","isEventExecutable","inputArg","applyScope","data","error","Error","scope","parameters","deps","actionId","doAction","depModuleObj","isDestroyed","warn","localDataCtx","resolveLocalDataCtx","_depModuleObj","executeAction","loadDependentModule"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/declarativeui/src/js/batchActionService.js"],"sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module provides a way for declarative framework to do outgoing calls in batch\n *\n * @module js/batchActionService\n *\n * @namespace batchActionService\n */\nimport AwPromiseService from 'js/awPromiseService';\nimport conditionSvc from 'js/conditionService';\nimport declarativeDataCtxService from 'js/declarativeDataCtxService';\nimport _ from 'lodash';\nimport declUtils from 'js/declUtils';\nimport moduleLoader from 'js/moduleLoader';\nimport logger from 'js/logger';\n\n/**\n * Define public API\n */\nvar exports = {};\n\n/**\n * Execute the given 'all actions in Steps' using the given related parameters\n *\n * @param {DeclViewModel} declViewModel - The DeclViewModel the DeclAction is a member of.\n * @param {DeclAction} batchActions - The DeclAction to execute.\n * @param {Object} dataCtxNode - The data context to use during execution.\n *\n */\n\nexport let executeBatchActions = function( declViewModel, batchActions, dataCtxNode, actionService ) {\n    var tasks = [];\n    if( !declUtils.isValidModelAndDataCtxNode( declViewModel, dataCtxNode ) ) {\n        return undefined;\n    }\n    if( batchActions.steps ) {\n        for( var step = 0; step < batchActions.steps.length; step++ ) {\n            tasks.push( exports._executeActionWrapper( batchActions.steps[ step ], declViewModel, dataCtxNode, actionService ) );\n        }\n    }\n    return tasks.reduce( function( promiseChain, task ) {\n        return promiseChain.then( function( respData ) {\n            return task( respData );\n        } );\n    }, AwPromiseService.instance.resolve() );\n};\n\n/**\n * Execute the given 'action' using the given related parameters\n *\n * @param {DeclViewModel} declViewModel - The DeclViewModel the DeclAction is a member of.\n * @param {DeclAction} step - The DeclAction to execute.\n * @param {Object} dataCtxNode - The data context to use during execution.\n * @param {Object} index - The current index of action in Steps\n * @param {Object[]} steps - The steps under 'batch' action type\n * @param {Object} actionService - The referance to action service\n * @param {Object} actionResp - the action Response\n *\n */\nconst parseConditonExp = ( expression, evaluationEnv ) => {\n    //This is not acomplete fix, needs to be revisited - LCS-565498\n    const exp = conditionSvc.getRealExpression( expression, evaluationEnv );\n    if( _.isString( exp ) ) {\n        return exp;\n    }\n    //If the condition is object based, return the original expression\n    return expression;\n};\nexport let _executeActionWrapper = function( stepDef, declViewModel, dataCtxNode, actionService ) {\n    return function( actionResp ) {\n        var action = null;\n        var outputFlag = false;\n        var inputArgs = null;\n\n        if( declViewModel._internal.actions ) {\n            action = declViewModel._internal.actions[ stepDef.action ];\n        }\n\n        var conditionResult = false;\n\n        if( stepDef.outputArg && action ) {\n            outputFlag = true;\n            action.outputArg = _.cloneDeep( stepDef.outputArg );\n        }\n\n        let localContext = declUtils.getLatestContext( dataCtxNode, declViewModel );\n        localContext.response = actionResp;\n        localContext = { ...localContext, ...declViewModel.atomicData };\n\n        if( stepDef.condition ) {\n            var conditionExpression = parseConditonExp( stepDef.condition, declViewModel._internal );\n            if( conditionExpression !== null ) {\n                conditionResult = conditionSvc.evaluateCondition( localContext, conditionExpression );\n            }\n            // if conditionResult is undefined or null we should consider result as false.\n            if( !conditionResult ) {\n                conditionResult = false;\n            }\n        }\n        var isEventExecutable = stepDef.condition && conditionResult || !stepDef.condition;\n        if( isEventExecutable ) {\n            if( stepDef.inputArg ) {\n                inputArgs = _.cloneDeep( stepDef.inputArg );\n                try {\n                    declarativeDataCtxService.applyScope( localContext.data, inputArgs, null, actionResp, null );\n                } catch ( error ) {\n                    throw new Error( error );\n                }\n                if( localContext && localContext.scope ) {\n                    localContext.scope.parameters = inputArgs ? inputArgs : null;\n                } else {\n                    localContext = { ...localContext, parameters: inputArgs ? inputArgs : null };\n                }\n            }\n            if( action.deps ) {\n                /** action ID will be used for better logging */\n                action.actionId = stepDef.action;\n\n                var doAction = function( depModuleObj ) {\n                    if( declViewModel.isDestroyed() ) {\n                        logger.warn( 'Attempt to execute a command after its DeclViewModel was destroyed...' +\n                            '\\n' + 'Action was therefore not executed...continuing.' + '\\n' + //\n                            'DeclViewModel: ' + declViewModel + '\\n' + //\n                            'Action       : ' + stepDef.action );\n                    } else {\n                        /**\n                         * Check if the $scope we need has been destroyed (due to DOM manipulation) since the action\n                         * event processing was started.\n                         */\n                        var localDataCtx = declUtils.resolveLocalDataCtx( localContext.data, localContext );\n\n                        // _deps will be undefined when try to load viewModelService inside itself\n                        var _depModuleObj = depModuleObj;\n                        return actionService.executeAction( localContext.data, action, localDataCtx, _depModuleObj, outputFlag );\n                    }\n                    return undefined;\n                };\n                return moduleLoader.loadDependentModule( action.deps ).then( doAction );\n            }\n            return actionService.executeAction( localContext.data, action, localContext, null, outputFlag );\n        }\n        return AwPromiseService.instance.resolve( actionResp );\n    };\n};\n\nexports = {\n    executeBatchActions,\n    _executeActionWrapper\n};\nexport default exports;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,yBAAP,MAAsC,8BAAtC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;AACA;AACA;;AACA,IAAIC,OAAO,GAAG,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,mBAAmB,GAAG,UAAUC,aAAV,EAAyBC,YAAzB,EAAuCC,WAAvC,EAAoDC,aAApD,EAAoE;EACjG,IAAIC,KAAK,GAAG,EAAZ;;EACA,IAAI,CAACT,SAAS,CAACU,0BAAV,CAAsCL,aAAtC,EAAqDE,WAArD,CAAL,EAA0E;IACtE,OAAOI,SAAP;EACH;;EACD,IAAIL,YAAY,CAACM,KAAjB,EAAyB;IACrB,KAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGP,YAAY,CAACM,KAAb,CAAmBE,MAA7C,EAAqDD,IAAI,EAAzD,EAA8D;MAC1DJ,KAAK,CAACM,IAAN,CAAYZ,OAAO,CAACa,qBAAR,CAA+BV,YAAY,CAACM,KAAb,CAAoBC,IAApB,CAA/B,EAA2DR,aAA3D,EAA0EE,WAA1E,EAAuFC,aAAvF,CAAZ;IACH;EACJ;;EACD,OAAOC,KAAK,CAACQ,MAAN,CAAc,UAAUC,YAAV,EAAwBC,IAAxB,EAA+B;IAChD,OAAOD,YAAY,CAACE,IAAb,CAAmB,UAAUC,QAAV,EAAqB;MAC3C,OAAOF,IAAI,CAAEE,QAAF,CAAX;IACH,CAFM,CAAP;EAGH,CAJM,EAIJzB,gBAAgB,CAAC0B,QAAjB,CAA0BC,OAA1B,EAJI,CAAP;AAKH,CAfM;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAG,CAAEC,UAAF,EAAcC,aAAd,KAAiC;EACtD;EACA,MAAMC,GAAG,GAAG9B,YAAY,CAAC+B,iBAAb,CAAgCH,UAAhC,EAA4CC,aAA5C,CAAZ;;EACA,IAAI3B,CAAC,CAAC8B,QAAF,CAAYF,GAAZ,CAAJ,EAAwB;IACpB,OAAOA,GAAP;EACH,CALqD,CAMtD;;;EACA,OAAOF,UAAP;AACH,CARD;;AASA,OAAO,IAAIT,qBAAqB,GAAG,UAAUc,OAAV,EAAmBzB,aAAnB,EAAkCE,WAAlC,EAA+CC,aAA/C,EAA+D;EAC9F,OAAO,UAAUuB,UAAV,EAAuB;IAC1B,IAAIC,MAAM,GAAG,IAAb;IACA,IAAIC,UAAU,GAAG,KAAjB;IACA,IAAIC,SAAS,GAAG,IAAhB;;IAEA,IAAI7B,aAAa,CAAC8B,SAAd,CAAwBC,OAA5B,EAAsC;MAClCJ,MAAM,GAAG3B,aAAa,CAAC8B,SAAd,CAAwBC,OAAxB,CAAiCN,OAAO,CAACE,MAAzC,CAAT;IACH;;IAED,IAAIK,eAAe,GAAG,KAAtB;;IAEA,IAAIP,OAAO,CAACQ,SAAR,IAAqBN,MAAzB,EAAkC;MAC9BC,UAAU,GAAG,IAAb;MACAD,MAAM,CAACM,SAAP,GAAmBvC,CAAC,CAACwC,SAAF,CAAaT,OAAO,CAACQ,SAArB,CAAnB;IACH;;IAED,IAAIE,YAAY,GAAGxC,SAAS,CAACyC,gBAAV,CAA4BlC,WAA5B,EAAyCF,aAAzC,CAAnB;IACAmC,YAAY,CAACE,QAAb,GAAwBX,UAAxB;IACAS,YAAY,GAAG,EAAE,GAAGA,YAAL;MAAmB,GAAGnC,aAAa,CAACsC;IAApC,CAAf;;IAEA,IAAIb,OAAO,CAACc,SAAZ,EAAwB;MACpB,IAAIC,mBAAmB,GAAGrB,gBAAgB,CAAEM,OAAO,CAACc,SAAV,EAAqBvC,aAAa,CAAC8B,SAAnC,CAA1C;;MACA,IAAIU,mBAAmB,KAAK,IAA5B,EAAmC;QAC/BR,eAAe,GAAGxC,YAAY,CAACiD,iBAAb,CAAgCN,YAAhC,EAA8CK,mBAA9C,CAAlB;MACH,CAJmB,CAKpB;;;MACA,IAAI,CAACR,eAAL,EAAuB;QACnBA,eAAe,GAAG,KAAlB;MACH;IACJ;;IACD,IAAIU,iBAAiB,GAAGjB,OAAO,CAACc,SAAR,IAAqBP,eAArB,IAAwC,CAACP,OAAO,CAACc,SAAzE;;IACA,IAAIG,iBAAJ,EAAwB;MACpB,IAAIjB,OAAO,CAACkB,QAAZ,EAAuB;QACnBd,SAAS,GAAGnC,CAAC,CAACwC,SAAF,CAAaT,OAAO,CAACkB,QAArB,CAAZ;;QACA,IAAI;UACAlD,yBAAyB,CAACmD,UAA1B,CAAsCT,YAAY,CAACU,IAAnD,EAAyDhB,SAAzD,EAAoE,IAApE,EAA0EH,UAA1E,EAAsF,IAAtF;QACH,CAFD,CAEE,OAAQoB,KAAR,EAAgB;UACd,MAAM,IAAIC,KAAJ,CAAWD,KAAX,CAAN;QACH;;QACD,IAAIX,YAAY,IAAIA,YAAY,CAACa,KAAjC,EAAyC;UACrCb,YAAY,CAACa,KAAb,CAAmBC,UAAnB,GAAgCpB,SAAS,GAAGA,SAAH,GAAe,IAAxD;QACH,CAFD,MAEO;UACHM,YAAY,GAAG,EAAE,GAAGA,YAAL;YAAmBc,UAAU,EAAEpB,SAAS,GAAGA,SAAH,GAAe;UAAvD,CAAf;QACH;MACJ;;MACD,IAAIF,MAAM,CAACuB,IAAX,EAAkB;QACd;QACAvB,MAAM,CAACwB,QAAP,GAAkB1B,OAAO,CAACE,MAA1B;;QAEA,IAAIyB,QAAQ,GAAG,UAAUC,YAAV,EAAyB;UACpC,IAAIrD,aAAa,CAACsD,WAAd,EAAJ,EAAkC;YAC9BzD,MAAM,CAAC0D,IAAP,CAAa,0EACT,IADS,GACF,iDADE,GACkD,IADlD,GACyD;YAClE,iBAFS,GAEWvD,aAFX,GAE2B,IAF3B,GAEkC;YAC3C,iBAHS,GAGWyB,OAAO,CAACE,MAHhC;UAIH,CALD,MAKO;YACH;AACxB;AACA;AACA;YACwB,IAAI6B,YAAY,GAAG7D,SAAS,CAAC8D,mBAAV,CAA+BtB,YAAY,CAACU,IAA5C,EAAkDV,YAAlD,CAAnB,CALG,CAOH;;YACA,IAAIuB,aAAa,GAAGL,YAApB;YACA,OAAOlD,aAAa,CAACwD,aAAd,CAA6BxB,YAAY,CAACU,IAA1C,EAAgDlB,MAAhD,EAAwD6B,YAAxD,EAAsEE,aAAtE,EAAqF9B,UAArF,CAAP;UACH;;UACD,OAAOtB,SAAP;QACH,CAlBD;;QAmBA,OAAOV,YAAY,CAACgE,mBAAb,CAAkCjC,MAAM,CAACuB,IAAzC,EAAgDnC,IAAhD,CAAsDqC,QAAtD,CAAP;MACH;;MACD,OAAOjD,aAAa,CAACwD,aAAd,CAA6BxB,YAAY,CAACU,IAA1C,EAAgDlB,MAAhD,EAAwDQ,YAAxD,EAAsE,IAAtE,EAA4EP,UAA5E,CAAP;IACH;;IACD,OAAOrC,gBAAgB,CAAC0B,QAAjB,CAA0BC,OAA1B,CAAmCQ,UAAnC,CAAP;EACH,CAzED;AA0EH,CA3EM;AA6EP5B,OAAO,GAAG;EACNC,mBADM;EAENY;AAFM,CAAV;AAIA,eAAeb,OAAf"},"metadata":{},"sourceType":"module"}
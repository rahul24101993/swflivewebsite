{"ast":null,"code":"// Copyright (c) 2020 Siemens\n\n/**\n * This module includes the various AngularJS directives that present and control date and/or time entry widgets to the\n * user.\n * <P>\n * Note: We include 'jqueryui' as a parameter to be sure it finished loading before we get here.\n *\n * @module js/uwDirectiveDateTimeService\n */\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport Debug from 'debug';\nimport flatpickr from 'flatpickr';\nvar trace = new Debug('uwDirectiveDateTimeService');\nvar _checked = false;\nlet exports;\n/**\n * Set (if necessary) the locale specific properties of the JQueryUI date picker based on the currently set\n * locale.\n */\n\nexport let assureDateTimeLocale = function () {\n  if (!_checked) {\n    _checked = true;\n    var promise = dateTimeSvc.getJQueryDatePickerTextBundle();\n\n    if (promise) {\n      promise.then(function (jqTextBundle) {\n        if (jqTextBundle) {//TODO: Map this to Flatpickr's localize (need to import it's bundles)\n          // https://flatpickr.js.org/localization/#using-modules\n          // $.datepicker.regional[ localeSvc.getLanguageCode() ] = jqTextBundle;\n          // $.datepicker.setDefaults( jqTextBundle );\n        }\n      });\n    }\n  }\n};\n/**\n * Returns a new Date object based on the given Date value and the current format string using JQuery UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {String} dateString - the date string to be converted to a date object\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {Date} A new JS Date object based on the given object.\n */\n\nexport let parseDate = function (dateString, format) {\n  if (!format) {\n    format = dateTimeSvc.getDateFormat();\n  }\n\n  return flatpickr.parseDate(dateString, format);\n};\n/**\n * Returns a new Date string value based on the given Date Object and the current format string using JQuery\n * UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {Object} dateTime - the Date object to be formatted\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {String} formatted date\n */\n\nexport let formatDate = function (dateTime, format) {\n  if (!format) {\n    format = dateTimeSvc.getDateFormat();\n  }\n\n  return flatpickr.formatDate(dateTime, format);\n};\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\n\nexport let convertDateToMsec = function (queryVal) {\n  if (typeof queryVal !== 'number') {\n    try {\n      queryVal = new Date(queryVal).getTime();\n    } catch (e) {\n      trace('Invalid Date format', e);\n    }\n  }\n\n  return queryVal > 0 ? queryVal : Infinity;\n};\nexports = {\n  assureDateTimeLocale,\n  parseDate,\n  formatDate,\n  convertDateToMsec\n};\nexport default exports;\n/**\n * Setup to listen to changes in locale.\n *\n * @param {Object} localeInfo - Updated locale info\n *\n * @return {Void}\n */\n\neventBus.subscribe('dateTime.changed', function (localeInfo) {\n  // eslint-disable-line no-unused-vars\n  _checked = false;\n  exports.assureDateTimeLocale();\n}, 'uwDirectiveDateTimeService');","map":{"version":3,"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/propertyrender/src/js/uwDirectiveDateTimeService.js"],"names":["trace","_checked","assureDateTimeLocale","promise","dateTimeSvc","parseDate","format","flatpickr","formatDate","convertDateToMsec","queryVal","exports","eventBus"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,WAAA,MAAA,oBAAA;AACA,OAAA,SAAA,MAAA,kBAAA;AACA,OAAA,QAAA,MAAA,aAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,WAAA;AAEA,IAAIA,KAAK,GAAG,IAAA,KAAA,CAAZ,4BAAY,CAAZ;AAEA,IAAIC,QAAQ,GAAZ,KAAA;AAEA,IAAA,OAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,oBAAoB,GAAG,YAAW;EACzC,IAAI,CAAJ,QAAA,EAAgB;IACZD,QAAQ,GAARA,IAAAA;IAEA,IAAIE,OAAO,GAAGC,WAAW,CAAzB,6BAAcA,EAAd;;IAEA,IAAA,OAAA,EAAc;MACVD,OAAO,CAAPA,IAAAA,CAAc,UAAA,YAAA,EAAyB;QACnC,IAAA,YAAA,EAAmB,CACf;UACA;UAEA;UACA;QACH;MAPLA,CAAAA;IASH;EACJ;AAjBE,CAAA;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,SAAS,GAAG,UAAA,UAAA,EAAA,MAAA,EAA+B;EAClD,IAAI,CAAJ,MAAA,EAAc;IACVC,MAAM,GAAGF,WAAW,CAApBE,aAASF,EAATE;EACH;;EACD,OAAOC,SAAS,CAATA,SAAAA,CAAAA,UAAAA,EAAP,MAAOA,CAAP;AAJG,CAAA;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,UAAU,GAAG,UAAA,QAAA,EAAA,MAAA,EAA6B;EACjD,IAAI,CAAJ,MAAA,EAAc;IACVF,MAAM,GAAGF,WAAW,CAApBE,aAASF,EAATE;EACH;;EACD,OAAOC,SAAS,CAATA,UAAAA,CAAAA,QAAAA,EAAP,MAAOA,CAAP;AAJG,CAAA;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,iBAAiB,GAAG,UAAA,QAAA,EAAqB;EAChD,IAAI,OAAA,QAAA,KAAJ,QAAA,EAAmC;IAC/B,IAAI;MACAC,QAAQ,GAAG,IAAA,IAAA,CAAA,QAAA,EAAXA,OAAW,EAAXA;IADJ,CAAA,CAEE,OAAA,CAAA,EAAY;MACVV,KAAK,CAAA,qBAAA,EAALA,CAAK,CAALA;IACH;EACJ;;EACD,OAAOU,QAAQ,GAARA,CAAAA,GAAAA,QAAAA,GAAP,QAAA;AARG,CAAA;AAWPC,OAAO,GAAG;EAAA,oBAAA;EAAA,SAAA;EAAA,UAAA;EAINF;AAJM,CAAVE;AAMA,eAAA,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,QAAQ,CAARA,SAAAA,CAAAA,kBAAAA,EAAwC,UAAA,UAAA,EAAuB;EAAE;EAC7DX,QAAQ,GAARA,KAAAA;EAEAU,OAAO,CAAPA,oBAAAA;AAHJC,CAAAA,EAAAA,4BAAAA","sourcesContent":["// Copyright (c) 2020 Siemens\n\n/**\n * This module includes the various AngularJS directives that present and control date and/or time entry widgets to the\n * user.\n * <P>\n * Note: We include 'jqueryui' as a parameter to be sure it finished loading before we get here.\n *\n * @module js/uwDirectiveDateTimeService\n */\nimport dateTimeSvc from 'js/dateTimeService';\nimport localeSvc from 'js/localeService';\nimport eventBus from 'js/eventBus';\nimport Debug from 'debug';\nimport flatpickr from 'flatpickr';\n\nvar trace = new Debug( 'uwDirectiveDateTimeService' );\n\nvar _checked = false;\n\nlet exports;\n\n/**\n * Set (if necessary) the locale specific properties of the JQueryUI date picker based on the currently set\n * locale.\n */\nexport let assureDateTimeLocale = function() {\n    if( !_checked ) {\n        _checked = true;\n\n        var promise = dateTimeSvc.getJQueryDatePickerTextBundle();\n\n        if( promise ) {\n            promise.then( function( jqTextBundle ) {\n                if( jqTextBundle ) {\n                    //TODO: Map this to Flatpickr's localize (need to import it's bundles)\n                    // https://flatpickr.js.org/localization/#using-modules\n\n                    // $.datepicker.regional[ localeSvc.getLanguageCode() ] = jqTextBundle;\n                    // $.datepicker.setDefaults( jqTextBundle );\n                }\n            } );\n        }\n    }\n};\n\n/**\n * Returns a new Date object based on the given Date value and the current format string using JQuery UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {String} dateString - the date string to be converted to a date object\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {Date} A new JS Date object based on the given object.\n */\nexport let parseDate = function( dateString, format ) {\n    if( !format ) {\n        format = dateTimeSvc.getDateFormat();\n    }\n    return flatpickr.parseDate( dateString, format );\n};\n\n/**\n * Returns a new Date string value based on the given Date Object and the current format string using JQuery\n * UI\n * <P>\n * Note: This method handles some corner cases found in (at least) the Firefox browser.\n *\n * @param {Object} dateTime - the Date object to be formatted\n * @param {String} format (OPTIONAL) - the date format to be used\n *\n * @return {String} formatted date\n */\nexport let formatDate = function( dateTime, format ) {\n    if( !format ) {\n        format = dateTimeSvc.getDateFormat();\n    }\n    return flatpickr.formatDate( dateTime, format );\n};\n\n/**\n * get date  in milliseconds\n *\n * @param {Object} queryVal value\n *\n * @return {Date} - in milliseconds\n */\nexport let convertDateToMsec = function( queryVal ) {\n    if( typeof queryVal !== 'number' ) {\n        try {\n            queryVal = new Date( queryVal ).getTime();\n        } catch ( e ) {\n            trace( 'Invalid Date format', e );\n        }\n    }\n    return queryVal > 0 ? queryVal : Infinity;\n};\n\nexports = {\n    assureDateTimeLocale,\n    parseDate,\n    formatDate,\n    convertDateToMsec\n};\nexport default exports;\n\n/**\n * Setup to listen to changes in locale.\n *\n * @param {Object} localeInfo - Updated locale info\n *\n * @return {Void}\n */\neventBus.subscribe( 'dateTime.changed', function( localeInfo ) { // eslint-disable-line no-unused-vars\n    _checked = false;\n\n    exports.assureDateTimeLocale();\n}, 'uwDirectiveDateTimeService' );\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Copyright (c) 2021 Siemens\n\n/**\n * @module js/awSearchSublocationService\n */\nimport _ from 'lodash';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport appCtxService from 'js/appCtxService';\nimport AwStateService from 'js/awStateService';\nimport localeService from 'js/localeService';\nimport searchStateHelperService from 'js/searchStateHelperService';\nimport { tabCallbackApi } from 'js/awSearchLocationService';\nimport selectionService from 'js/selection.service';\nimport Debug from 'debug';\nconst trace = new Debug('selection');\nexport const updateSearchContext = provider => {\n  // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria\n  // This sort criteria will be shared across all views in a sublocation in a given session.\n  var sortCriteria = appCtxService.getCtx(provider.clientScopeURI + '.sortCriteria');\n\n  if (sortCriteria === undefined || sortCriteria === '') {\n    appCtxService.updatePartialCtx(provider.clientScopeURI + '.sortCriteria', []);\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', []);\n  } else {\n    appCtxService.updatePartialCtx('sublocation.sortCriteria', sortCriteria);\n  }\n};\n/**\n * This API would re-create the VMO's from the URL on Mount of subLocation.\n * @param {*} searchString\n * @param {*} totalFound\n * @param {*} provider\n */\n\nexport const createStateFromUrl = (provider, searchStateProp, searchState, searchStateUpdater, skipURL, searchCriteria, pwaSelectionModel) => {\n  if (skipURL) {\n    return;\n  }\n\n  const [defaultSearchStateData, updateAtomicData] = getSearchState(searchStateProp, searchState, searchStateUpdater);\n  const stateProvider = AwStateService.instance;\n  const changedParams = stateProvider.params;\n  const searchContext = provider.context && provider.context.search ? provider.context.search : {};\n  const providerSelectionQueryParamKey = provider.selectionQueryParamKey ? provider.selectionQueryParamKey : 's_uid';\n  let selectionQueryParamValue;\n  let selectionQueryParamKey;\n  let searchString = '';\n  let filterStringFromUrl = '';\n\n  if (changedParams.hasOwnProperty('searchCriteria')) {\n    searchString = changedParams.searchCriteria ? changedParams.searchCriteria : searchString;\n  }\n\n  if (changedParams.hasOwnProperty('filter')) {\n    filterStringFromUrl = changedParams.filter ? changedParams.filter : filterStringFromUrl;\n  }\n\n  if (changedParams.hasOwnProperty(providerSelectionQueryParamKey)) {\n    selectionQueryParamValue = changedParams[providerSelectionQueryParamKey];\n    selectionQueryParamKey = providerSelectionQueryParamKey;\n  }\n\n  const bcLabel = stateProvider.current.data && stateProvider.current.data.label ? stateProvider.current.data.label : '';\n  let updatedSearchContext = searchStateHelperService.constructBaseSearchCriteria(searchContext, changedParams);\n  const searchStateData = { ...updatedSearchContext\n  };\n  const chartTitle = searchContext.chartTitle; // Need to evaluate from props.chartTitle i18n\n\n  let promise = chartTitle ? localeService.getLocalizedText(chartTitle.source, chartTitle.key) : new Promise(resolve => resolve());\n  let searchStr = searchStateData.criteria && searchStateData.criteria.hasOwnProperty('searchString') && searchStateData.criteria.searchString.length > 0 ? searchStateData.criteria.searchString : searchString;\n  return promise.then(chartTitleValue => {\n    const {\n      activeFilterMap\n    } = createSearchFilterMapFromUrl(provider);\n    const activeFilters = searchFilterService.getFilters();\n    searchStateData.criteria = Object.assign({}, searchStateData.criteria, searchCriteria);\n    searchStateData.criteria.searchString = searchStr;\n    let resolvedData = {\n      searchStringPrimary: searchStr,\n      searchStringSecondary: '',\n      label: bcLabel,\n      filterString: filterStringFromUrl,\n      totalFound: searchContext.showLoadingText ? undefined : 0,\n      loadDataAction: searchContext.loadDataAction,\n      provider: searchContext.provider,\n      sortType: searchContext.sortType,\n      chartTitle: chartTitleValue,\n      objectsGroupedByProperty: null,\n      activeFilters: activeFilters,\n      activeFilterMap: activeFilterMap,\n      searchInProgress: searchStr && searchStr.length > 0 || filterStringFromUrl && filterStringFromUrl.length > 0,\n      searchFilterMap: {},\n      selectionQueryParam: {\n        key: selectionQueryParamKey,\n        value: selectionQueryParamValue\n      }\n    };\n    Object.assign(searchStateData, resolvedData);\n\n    if (updateAtomicData) {\n      updateAtomicData(searchStateData);\n    } else {\n      defaultSearchStateData.update(searchStateData);\n    }\n\n    updateSearchPWASelectionModel(pwaSelectionModel, resolvedData.selectionQueryParam);\n  });\n};\nexport const createSearchFilterMapFromUrl = provider => {\n  let searchContext = searchFilterService.buildSearchFilters(provider.context);\n  return {\n    activeFilterMap: searchContext.activeFilterMap\n  };\n};\nexport const getSearchFilterStringFromActiveFilterMap = activeFilters => {\n  let searchFilterMap = {};\n\n  if (activeFilters && activeFilters.length > 0) {\n    for (let index = 0; index < activeFilters.length; index++) {\n      let eachActiveFilterCategory = activeFilters[index];\n      searchFilterMap[eachActiveFilterCategory.name] = eachActiveFilterCategory.values;\n    }\n  }\n\n  return searchFilterService.buildFilterString(searchFilterMap);\n};\nexport const getActiveFilters = searchFilterCategories => {\n  const allSelectedFilters = searchFilterCategories.map(category => {\n    if (category && category.filterValues && category.filterValues.length > 0) {\n      return category.filterValues.filter(filterObject => {\n        return filterObject.selected.value;\n      });\n    }\n\n    return [];\n  });\n  return _.flatten(allSelectedFilters);\n};\nexport const lazyUpdate = (searchState, updateAtomicData) => {\n  // update URL if there are selection in filter panel\n  if (searchState && searchState.activeFilters) {\n    let searchCriteria = AwStateService.instance.params.searchCriteria;\n    const filterString = searchFilterService.buildFilterString(searchState.activeFilters);\n\n    if (searchState.filterString !== filterString && (searchState.autoApplyFilters || searchState.bulkFiltersApplied)) {\n      const selectedFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState(searchState.activeFilters);\n      let updatedCriteria = searchStateHelperService.getCriteriaAfterFilterSelection(searchState);\n      let forceChart = searchStateHelperService.getForceChartParameterValue(searchState);\n      searchFilterService.doSearch(null, updatedCriteria ? updatedCriteria.searchString : null, searchState.activeFilters);\n\n      if (updateAtomicData) {\n        updateAtomicData({ ...searchState,\n          criteria: updatedCriteria,\n          forceChart: forceChart,\n          filterString: filterString,\n          activeFilterMap: selectedFiltersInfo.activeFilterMap,\n          searchInProgress: true,\n          categories: undefined,\n          additionalSearchString: undefined\n        });\n      } else {\n        let newSearchState = { ...searchState.value\n        };\n        newSearchState.criteria = updatedCriteria;\n        newSearchState.forceChart = forceChart;\n        newSearchState.filterString = filterString;\n        newSearchState.activeFilterMap = selectedFiltersInfo.activeFilterMap;\n        newSearchState.searchInProgress = true;\n        newSearchState.categories = undefined;\n        newSearchState.additionalSearchString = undefined;\n        searchState.update(newSearchState);\n      }\n    } else if (filterString !== searchState.selectedFiltersString && !searchState.autoApplyFilters && !searchState.bulkFiltersApplied) {\n      searchState.selectedFiltersString = filterString;\n      const pendingFilterMapInfo = searchFilterService.getPendingFiltersMap(searchState.activeFilters, searchState.activeFilterMap);\n      const positivePendingFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState(pendingFilterMapInfo.positivePendingFilterMap);\n      const negativePendingFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState(pendingFilterMapInfo.negativePendingFilterMap);\n\n      if (updateAtomicData) {\n        updateAtomicData({ ...searchState,\n          positivePendingFilters: positivePendingFiltersInfo.activeFilters,\n          negativePendingFilters: negativePendingFiltersInfo.activeFilters,\n          positivePendingFilterMap: positivePendingFiltersInfo.activeFilterMap,\n          negativePendingFilterMap: negativePendingFiltersInfo.activeFilterMap\n        });\n      } else {\n        let newSearchState = { ...searchState.value\n        };\n        newSearchState.positivePendingFilters = positivePendingFiltersInfo.activeFilters;\n        newSearchState.negativePendingFilters = negativePendingFiltersInfo.activeFilters;\n        newSearchState.positivePendingFilterMap = positivePendingFiltersInfo.activeFilterMap;\n        newSearchState.negativePendingFilterMap = negativePendingFiltersInfo.activeFilterMap;\n        searchState.update(newSearchState);\n      }\n    } else if (searchCriteria && searchState.criteria && searchState.criteria.searchString !== searchCriteria) {\n      searchFilterService.doSearch(null, searchState.criteria.searchString, searchState.activeFilters);\n\n      if (updateAtomicData) {\n        updateAtomicData({ ...searchState,\n          categories: undefined\n        });\n      } else {\n        let newSearchState = { ...searchState.value\n        };\n        newSearchState.categories = undefined;\n        searchState.update(newSearchState);\n      }\n    }\n  } else if (AwStateService.instance.params.filter) {\n    //Or no change in filter panel but prefilter is changed\n    if (searchState.filterString !== AwStateService.instance.params.filter) {\n      if (updateAtomicData) {\n        updateAtomicData({ ...searchState,\n          filterString: AwStateService.instance.params.filter\n        });\n      } else {\n        let newSearchState = { ...searchState.value\n        };\n        newSearchState.filterString = AwStateService.instance.params.filter;\n        searchState.update(newSearchState);\n      }\n    }\n  }\n};\n\nlet debounceUpdateURL = _.debounce((searchState, updateAtomicData) => {\n  lazyUpdate(searchState, updateAtomicData);\n}, 800);\n\nexport const updateURL = (searchStateProp, searchState, searchStateUpdater, skipURL) => {\n  if (skipURL) {\n    return;\n  }\n\n  const [searchStateData, updateAtomicData] = getSearchState(searchStateProp, searchState, searchStateUpdater);\n  debounceUpdateURL(searchStateData, updateAtomicData);\n};\nexport const updateSearchCriteria = (searchStateAtomicDataRef, searchStateUpdater, searchCriteria) => {\n  let searchState = searchStateAtomicDataRef.getAtomicData();\n  const criteria = Object.assign({}, searchState.criteria, searchCriteria);\n  searchStateUpdater.searchState({ ...searchState,\n    criteria\n  });\n};\n\nconst getSearchState = (searchStateProp, searchState, searchStateUpdater) => {\n  const searchStateData = searchStateProp ? searchStateProp : searchState;\n\n  if (searchStateProp && searchStateProp.update) {\n    return [searchStateData, undefined];\n  }\n\n  return [searchStateData, searchStateUpdater.searchState];\n};\n\nexport const syncStateFromUrl = (searchStateProp, searchStateData, searchStateUpdater) => {\n  const [searchState, updateAtomicData] = getSearchState(searchStateProp, searchStateData, searchStateUpdater);\n  const stateProvider = AwStateService.instance;\n  const changedParams = stateProvider.params;\n  let urlSearchString = null;\n  let urlFilterString = '';\n\n  if (changedParams.hasOwnProperty('searchCriteria')) {\n    urlSearchString = changedParams.searchCriteria;\n  }\n\n  if (changedParams.hasOwnProperty('filter')) {\n    urlFilterString = changedParams.filter ? changedParams.filter : urlFilterString;\n  }\n\n  if (urlSearchString && searchState && searchState.criteria && searchState.criteria.searchString !== urlSearchString || urlFilterString !== searchState.filterString) {\n    const prefilterMap = searchFilterService.getFilterMapWithPrefilters();\n    const activeFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState(prefilterMap);\n    let newSearchCriteria = {\n      criteria: searchStateHelperService.getCriteriaForNewSearch(searchState, urlSearchString),\n      searchStringPrimary: urlSearchString,\n      searchStringSecondary: '',\n      activeFilters: prefilterMap,\n      activeFilterMap: activeFiltersInfo.activeFilterMap,\n      categories: [],\n      filterString: urlFilterString,\n      searchFilterCategories: [],\n      categoriesExpandCollapseMap: undefined,\n      allCategoriesVisible: undefined,\n      searchInProgress: true,\n      totalFound: searchState.showLoadingText ? undefined : 0,\n      forceChart: searchStateHelperService.getForceChartParameterValue(searchState)\n    };\n    newSearchCriteria.criteriaJSONString = JSON.stringify(newSearchCriteria.criteria);\n\n    if (updateAtomicData) {\n      updateAtomicData({ ...searchState,\n        ...newSearchCriteria\n      });\n    } else {\n      let newSearchState = { ...searchState.value\n      };\n      Object.assign(newSearchState, newSearchCriteria);\n      searchState.update(newSearchState);\n    }\n  }\n};\nexport const getSelectedFiltersMap = categories => {\n  var searchFilterMap = {};\n\n  for (const [key, value] of Object.entries(categories)) {\n    if (value) {\n      let filtersForCurrentCategory = [];\n\n      if (value.filterValues && value.filterValues.length > 0) {\n        value.filterValues.forEach(val => {\n          if (val.selected.dbValue) {\n            switch (value.type) {\n              case 'NumericFilter':\n                {\n                  let numericValue = filterPanelUtils.INTERNAL_NUMERIC_FILTER + val.internalName;\n                  filtersForCurrentCategory.push(numericValue);\n                  break;\n                }\n\n              case 'DateFilter':\n                {\n                  let selectedDateFilters = searchFilterMap[val.categoryName] ? searchFilterMap[val.categoryName] : [];\n                  selectedDateFilters.push(val.internalName);\n                  searchFilterMap[val.categoryName] = selectedDateFilters;\n                  break;\n                }\n\n              default:\n                filtersForCurrentCategory.push(val.internalName);\n                break;\n            }\n          }\n        });\n      }\n\n      if (value.numericRangeString) {\n        filtersForCurrentCategory.push(value.numericRangeString);\n      }\n\n      if (value.dateRangeString) {\n        filtersForCurrentCategory.push(value.dateRangeString);\n      }\n\n      if (filtersForCurrentCategory.length) {\n        searchFilterMap[value.internalName] = filtersForCurrentCategory;\n      }\n    }\n  }\n\n  return searchFilterService.removeDependentDateFilters(searchFilterMap);\n};\n/**\n * update pwa selection model with selection query param value\n * @param {*} selectionModel selection model\n * @param {*} selectionQueryParam selection query param object with key, value\n */\n\nexport const updateSearchPWASelectionModel = (selectionModel, selectionQueryParam) => {\n  const pwaSelection = selectionModel.getSelection();\n\n  if (!pwaSelection.length && selectionQueryParam && selectionQueryParam.value) {\n    selectionModel.setSelection([selectionQueryParam.value]);\n  }\n};\nexport const getActiveSublocationTab = sublocationsTabs => {\n  let activeSublocTab = '';\n\n  if (sublocationsTabs && sublocationsTabs.length > 0) {\n    let activeSublocTabObj = sublocationsTabs.filter(tab => {\n      return tab.selectedTab;\n    })[0];\n    activeSublocTab = activeSublocTabObj.id || activeSublocTabObj.tabKey || activeSublocTabObj.name;\n  }\n\n  return activeSublocTab;\n};\n/**\n    * update charts data on selection change\n    * @param {*} searchStateProp search state from parent\n    * @param {*} searchState search state from view model data\n    * @param {*} searchStateUpdater search state updater\n*/\n\nexport const updateChartsDataOnSelectionChange = (searchStateProp, searchState, searchStateUpdater) => {\n  const [searchStateData, updateSearchState] = getSearchState(searchStateProp, searchState, searchStateUpdater);\n\n  if (searchStateData && searchStateData.pwaSelection) {\n    const selectedObjects = searchStateData.pwaSelection;\n    const forceChart = !selectedObjects || selectedObjects.length === 0;\n    const recreateChartProvider = forceChart ? 'true' : 'false';\n\n    if (updateSearchState) {\n      updateSearchState({ ...searchStateData,\n        forceChart,\n        recreateChartProvider\n      });\n    } else {\n      let newSearchStateData = { ...searchStateData.value\n      };\n      newSearchStateData.forceChart = forceChart;\n      newSearchStateData.recreateChartProvider = recreateChartProvider;\n      searchStateData.update(newSearchStateData);\n    }\n  }\n};\nexport const updateSublocationTabs = (sublocationsTabs, primarySublocTabState) => {\n  if (sublocationsTabs && primarySublocTabState.dbValue && primarySublocTabState.dbValue.primaryActiveTabId && primarySublocTabState.dbValue.primaryActiveTabId !== '') {\n    tabCallbackApi(undefined, primarySublocTabState.dbValue.primaryActiveTabId, sublocationsTabs);\n  }\n};\nexport const updateGlobalSelection = (localSelectionData, parentSelectionData) => {\n  if (!_.isEmpty(localSelectionData)) {\n    parentSelectionData ? parentSelectionData.update(localSelectionData) : selectionService.updateSelection(localSelectionData.selected, localSelectionData.pselected, localSelectionData.relationInfo);\n    trace('AwSearchSublocationService selectionData: ', localSelectionData);\n  }\n};\nexport const updateSelectionQueryParamInURL = (searchStateProp, searchState) => {\n  const searchStateData = searchStateProp ? searchStateProp : searchState; // update URL if selectionQueryParam applicable\n\n  if (searchStateData.selectionQueryParam && searchStateData.selectionQueryParam.key) {\n    let uid = searchStateData.pwaSelection && searchStateData.pwaSelection.length === 1 ? searchStateData.pwaSelection[0].uid : null;\n    AwStateService.instance.go('.', {\n      [searchStateData.selectionQueryParam.key]: uid\n    });\n  }\n};\nexport const updateSearchStateWithSelectionData = (searchStateProp, searchState, selectionData) => {\n  const searchStateData = searchStateProp ? searchStateProp : searchState;\n\n  if (!_.isEmpty(selectionData)) {\n    let newSearchState = searchStateData ? { ...searchStateData.value\n    } : undefined;\n\n    if (newSearchState) {\n      if (selectionData.source === 'primary') {\n        newSearchState.pwaSelection = selectionData.selected ? selectionData.selected : [];\n      } else if (selectionData.source === 'base' || selectionData.source === undefined) {\n        newSearchState.pwaSelection = [];\n      }\n\n      searchStateData.update(newSearchState);\n    }\n  }\n};\nconst awSearchSublocationService = {\n  updateSearchContext,\n  createStateFromUrl,\n  createSearchFilterMapFromUrl,\n  getSearchFilterStringFromActiveFilterMap,\n  getActiveFilters,\n  lazyUpdate,\n  updateURL,\n  updateSearchCriteria,\n  syncStateFromUrl,\n  getSelectedFiltersMap,\n  updateSearchPWASelectionModel,\n  getActiveSublocationTab,\n  updateChartsDataOnSelectionChange,\n  updateSublocationTabs,\n  updateGlobalSelection,\n  updateSearchStateWithSelectionData,\n  updateSelectionQueryParamInURL\n};\nexport default awSearchSublocationService;","map":{"version":3,"names":["_","searchFilterService","filterPanelUtils","appCtxService","AwStateService","localeService","searchStateHelperService","tabCallbackApi","selectionService","Debug","trace","updateSearchContext","provider","sortCriteria","getCtx","clientScopeURI","undefined","updatePartialCtx","createStateFromUrl","searchStateProp","searchState","searchStateUpdater","skipURL","searchCriteria","pwaSelectionModel","defaultSearchStateData","updateAtomicData","getSearchState","stateProvider","instance","changedParams","params","searchContext","context","search","providerSelectionQueryParamKey","selectionQueryParamKey","selectionQueryParamValue","searchString","filterStringFromUrl","hasOwnProperty","filter","bcLabel","current","data","label","updatedSearchContext","constructBaseSearchCriteria","searchStateData","chartTitle","promise","getLocalizedText","source","key","Promise","resolve","searchStr","criteria","length","then","chartTitleValue","activeFilterMap","createSearchFilterMapFromUrl","activeFilters","getFilters","Object","assign","resolvedData","searchStringPrimary","searchStringSecondary","filterString","totalFound","showLoadingText","loadDataAction","sortType","objectsGroupedByProperty","searchInProgress","searchFilterMap","selectionQueryParam","value","update","updateSearchPWASelectionModel","buildSearchFilters","getSearchFilterStringFromActiveFilterMap","index","eachActiveFilterCategory","name","values","buildFilterString","getActiveFilters","searchFilterCategories","allSelectedFilters","map","category","filterValues","filterObject","selected","flatten","lazyUpdate","autoApplyFilters","bulkFiltersApplied","selectedFiltersInfo","buildSearchFiltersFromSearchState","updatedCriteria","getCriteriaAfterFilterSelection","forceChart","getForceChartParameterValue","doSearch","categories","additionalSearchString","newSearchState","selectedFiltersString","pendingFilterMapInfo","getPendingFiltersMap","positivePendingFiltersInfo","positivePendingFilterMap","negativePendingFiltersInfo","negativePendingFilterMap","positivePendingFilters","negativePendingFilters","debounceUpdateURL","debounce","updateURL","updateSearchCriteria","searchStateAtomicDataRef","getAtomicData","syncStateFromUrl","urlSearchString","urlFilterString","prefilterMap","getFilterMapWithPrefilters","activeFiltersInfo","newSearchCriteria","getCriteriaForNewSearch","categoriesExpandCollapseMap","allCategoriesVisible","criteriaJSONString","JSON","stringify","getSelectedFiltersMap","entries","filtersForCurrentCategory","forEach","val","dbValue","type","numericValue","INTERNAL_NUMERIC_FILTER","internalName","push","selectedDateFilters","categoryName","numericRangeString","dateRangeString","removeDependentDateFilters","selectionModel","pwaSelection","getSelection","setSelection","getActiveSublocationTab","sublocationsTabs","activeSublocTab","activeSublocTabObj","tab","selectedTab","id","tabKey","updateChartsDataOnSelectionChange","updateSearchState","selectedObjects","recreateChartProvider","newSearchStateData","updateSublocationTabs","primarySublocTabState","primaryActiveTabId","updateGlobalSelection","localSelectionData","parentSelectionData","isEmpty","updateSelection","pselected","relationInfo","updateSelectionQueryParamInURL","uid","go","updateSearchStateWithSelectionData","selectionData","awSearchSublocationService"],"sources":["C:/Users/rahukl57/Desktop/SWF/CreatingOwnComponentUsingJsx/node_modules/@swf/core/src/searchcore/src/js/awSearchSublocationService.js"],"sourcesContent":["// Copyright (c) 2021 Siemens\n\n/**\n * @module js/awSearchSublocationService\n */\nimport _ from 'lodash';\nimport searchFilterService from 'js/aw.searchFilter.service';\nimport filterPanelUtils from 'js/filterPanelUtils';\nimport appCtxService from 'js/appCtxService';\nimport AwStateService from 'js/awStateService';\nimport localeService from 'js/localeService';\nimport searchStateHelperService from 'js/searchStateHelperService';\nimport { tabCallbackApi } from 'js/awSearchLocationService';\nimport selectionService from 'js/selection.service';\nimport Debug from 'debug';\n\nconst trace = new Debug( 'selection' );\n\nexport const updateSearchContext = ( provider ) => {\n    // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria\n    // This sort criteria will be shared across all views in a sublocation in a given session.\n    var sortCriteria = appCtxService.getCtx( provider.clientScopeURI + '.sortCriteria' );\n    if( sortCriteria === undefined || sortCriteria === '' ) {\n        appCtxService.updatePartialCtx( provider.clientScopeURI + '.sortCriteria', [] );\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', [] );\n    } else {\n        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', sortCriteria );\n    }\n};\n\n/**\n * This API would re-create the VMO's from the URL on Mount of subLocation.\n * @param {*} searchString\n * @param {*} totalFound\n * @param {*} provider\n */\nexport const createStateFromUrl = ( provider, searchStateProp, searchState, searchStateUpdater, skipURL, searchCriteria, pwaSelectionModel ) => {\n    if( skipURL ) {\n        return;\n    }\n\n    const [ defaultSearchStateData, updateAtomicData ] = getSearchState( searchStateProp, searchState, searchStateUpdater );\n    const stateProvider = AwStateService.instance;\n    const changedParams = stateProvider.params;\n    const searchContext = provider.context && provider.context.search ? provider.context.search : {};\n    const providerSelectionQueryParamKey = provider.selectionQueryParamKey ? provider.selectionQueryParamKey : 's_uid';\n    let selectionQueryParamValue;\n    let selectionQueryParamKey;\n    let searchString = '';\n    let filterStringFromUrl = '';\n    if( changedParams.hasOwnProperty( 'searchCriteria' ) ) {\n        searchString = changedParams.searchCriteria ? changedParams.searchCriteria : searchString;\n    }\n    if( changedParams.hasOwnProperty( 'filter' ) ) {\n        filterStringFromUrl = changedParams.filter ? changedParams.filter : filterStringFromUrl;\n    }\n    if( changedParams.hasOwnProperty( providerSelectionQueryParamKey ) ) {\n        selectionQueryParamValue = changedParams[ providerSelectionQueryParamKey ];\n        selectionQueryParamKey = providerSelectionQueryParamKey;\n    }\n    const bcLabel = stateProvider.current.data && stateProvider.current.data.label ? stateProvider.current.data.label : '';\n    let updatedSearchContext = searchStateHelperService.constructBaseSearchCriteria( searchContext, changedParams );\n    const searchStateData = { ...updatedSearchContext };\n    const chartTitle = searchContext.chartTitle; // Need to evaluate from props.chartTitle i18n\n    let promise = chartTitle ? localeService.getLocalizedText( chartTitle.source, chartTitle.key ) : new Promise( ( resolve ) => resolve() );\n    let searchStr = searchStateData.criteria && searchStateData.criteria.hasOwnProperty( 'searchString' ) &&\n        searchStateData.criteria.searchString.length > 0 ? searchStateData.criteria.searchString : searchString;\n    return promise.then( ( chartTitleValue ) => {\n        const { activeFilterMap } = createSearchFilterMapFromUrl( provider );\n        const activeFilters = searchFilterService.getFilters();\n        searchStateData.criteria = Object.assign( {}, searchStateData.criteria, searchCriteria );\n        searchStateData.criteria.searchString = searchStr;\n        let resolvedData = {\n            searchStringPrimary: searchStr,\n            searchStringSecondary: '',\n            label: bcLabel,\n            filterString: filterStringFromUrl,\n            totalFound: searchContext.showLoadingText ? undefined : 0,\n            loadDataAction: searchContext.loadDataAction,\n            provider: searchContext.provider,\n            sortType: searchContext.sortType,\n            chartTitle: chartTitleValue,\n            objectsGroupedByProperty: null,\n            activeFilters: activeFilters,\n            activeFilterMap: activeFilterMap,\n            searchInProgress: searchStr && searchStr.length > 0 || filterStringFromUrl && filterStringFromUrl.length > 0,\n            searchFilterMap: {},\n            selectionQueryParam: {\n                key: selectionQueryParamKey,\n                value: selectionQueryParamValue\n            }\n        };\n        Object.assign( searchStateData, resolvedData );\n        if( updateAtomicData ) {\n            updateAtomicData( searchStateData );\n        } else {\n            defaultSearchStateData.update( searchStateData );\n        }\n        updateSearchPWASelectionModel( pwaSelectionModel, resolvedData.selectionQueryParam );\n    } );\n};\n\nexport const createSearchFilterMapFromUrl = ( provider ) => {\n    let searchContext = searchFilterService.buildSearchFilters( provider.context );\n    return {\n        activeFilterMap: searchContext.activeFilterMap\n    };\n};\n\nexport const getSearchFilterStringFromActiveFilterMap = ( activeFilters ) => {\n    let searchFilterMap = {};\n    if( activeFilters && activeFilters.length > 0 ) {\n        for( let index = 0; index < activeFilters.length; index++ ) {\n            let eachActiveFilterCategory = activeFilters[ index ];\n            searchFilterMap[ eachActiveFilterCategory.name ] = eachActiveFilterCategory.values;\n        }\n    }\n    return searchFilterService.buildFilterString( searchFilterMap );\n};\n\nexport const getActiveFilters = ( searchFilterCategories ) => {\n    const allSelectedFilters = searchFilterCategories.map( ( category ) => {\n        if( category && category.filterValues && category.filterValues.length > 0 ) {\n            return category.filterValues.filter( ( filterObject ) => {\n                return filterObject.selected.value;\n            } );\n        }\n        return [];\n    } );\n    return _.flatten( allSelectedFilters );\n};\n\nexport const lazyUpdate = ( searchState, updateAtomicData ) => {\n    // update URL if there are selection in filter panel\n    if( searchState && searchState.activeFilters ) {\n        let searchCriteria = AwStateService.instance.params.searchCriteria;\n        const filterString = searchFilterService.buildFilterString( searchState.activeFilters );\n        if( searchState.filterString !== filterString && ( searchState.autoApplyFilters || searchState.bulkFiltersApplied ) ) {\n            const selectedFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState( searchState.activeFilters );\n            let updatedCriteria = searchStateHelperService.getCriteriaAfterFilterSelection( searchState );\n            let forceChart = searchStateHelperService.getForceChartParameterValue( searchState );\n            searchFilterService.doSearch( null, updatedCriteria ? updatedCriteria.searchString : null, searchState.activeFilters );\n            if( updateAtomicData ) {\n                updateAtomicData( {\n                    ...searchState,\n                    criteria: updatedCriteria,\n                    forceChart: forceChart,\n                    filterString: filterString,\n                    activeFilterMap: selectedFiltersInfo.activeFilterMap,\n                    searchInProgress: true,\n                    categories: undefined,\n                    additionalSearchString: undefined\n                } );\n            } else {\n                let newSearchState = { ...searchState.value };\n                newSearchState.criteria = updatedCriteria;\n                newSearchState.forceChart = forceChart;\n                newSearchState.filterString = filterString;\n                newSearchState.activeFilterMap = selectedFiltersInfo.activeFilterMap;\n                newSearchState.searchInProgress = true;\n                newSearchState.categories = undefined;\n                newSearchState.additionalSearchString = undefined;\n                searchState.update( newSearchState );\n            }\n        } else if( filterString !== searchState.selectedFiltersString && !searchState.autoApplyFilters && !searchState.bulkFiltersApplied ) {\n            searchState.selectedFiltersString = filterString;\n            const pendingFilterMapInfo = searchFilterService.getPendingFiltersMap( searchState.activeFilters, searchState.activeFilterMap );\n            const positivePendingFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState( pendingFilterMapInfo.positivePendingFilterMap );\n            const negativePendingFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState( pendingFilterMapInfo.negativePendingFilterMap );\n            if( updateAtomicData ) {\n                updateAtomicData( {\n                    ...searchState,\n                    positivePendingFilters: positivePendingFiltersInfo.activeFilters,\n                    negativePendingFilters: negativePendingFiltersInfo.activeFilters,\n                    positivePendingFilterMap: positivePendingFiltersInfo.activeFilterMap,\n                    negativePendingFilterMap: negativePendingFiltersInfo.activeFilterMap\n                } );\n            } else {\n                let newSearchState = { ...searchState.value };\n                newSearchState.positivePendingFilters = positivePendingFiltersInfo.activeFilters;\n                newSearchState.negativePendingFilters = negativePendingFiltersInfo.activeFilters;\n                newSearchState.positivePendingFilterMap = positivePendingFiltersInfo.activeFilterMap;\n                newSearchState.negativePendingFilterMap = negativePendingFiltersInfo.activeFilterMap;\n                searchState.update( newSearchState );\n            }\n        } else if( searchCriteria && searchState.criteria && searchState.criteria.searchString !== searchCriteria ) {\n            searchFilterService.doSearch( null, searchState.criteria.searchString, searchState.activeFilters );\n            if( updateAtomicData ) {\n                updateAtomicData( { ...searchState, categories: undefined } );\n            } else {\n                let newSearchState = { ...searchState.value };\n                newSearchState.categories = undefined;\n                searchState.update( newSearchState );\n            }\n        }\n    } else if( AwStateService.instance.params.filter ) {\n        //Or no change in filter panel but prefilter is changed\n        if( searchState.filterString !== AwStateService.instance.params.filter ) {\n            if( updateAtomicData ) {\n                updateAtomicData( { ...searchState, filterString: AwStateService.instance.params.filter } );\n            } else {\n                let newSearchState = { ...searchState.value };\n                newSearchState.filterString = AwStateService.instance.params.filter;\n                searchState.update( newSearchState );\n            }\n        }\n    }\n};\n\nlet debounceUpdateURL = _.debounce( ( searchState, updateAtomicData ) => {\n    lazyUpdate( searchState, updateAtomicData );\n}, 800 );\n\nexport const updateURL = ( searchStateProp, searchState, searchStateUpdater, skipURL ) => {\n    if( skipURL ) {\n        return;\n    }\n    const [ searchStateData, updateAtomicData ] = getSearchState( searchStateProp, searchState, searchStateUpdater );\n    debounceUpdateURL( searchStateData, updateAtomicData );\n};\n\nexport const updateSearchCriteria = ( searchStateAtomicDataRef, searchStateUpdater, searchCriteria ) => {\n    let searchState = searchStateAtomicDataRef.getAtomicData();\n    const criteria = Object.assign( {}, searchState.criteria, searchCriteria );\n    searchStateUpdater.searchState( { ...searchState, criteria } );\n};\n\nconst getSearchState = ( searchStateProp, searchState, searchStateUpdater ) => {\n    const searchStateData = searchStateProp ? searchStateProp : searchState;\n    if( searchStateProp && searchStateProp.update ) {\n        return [ searchStateData, undefined ];\n    }\n    return [ searchStateData, searchStateUpdater.searchState ];\n};\n\nexport const syncStateFromUrl = ( searchStateProp, searchStateData, searchStateUpdater ) => {\n    const [ searchState, updateAtomicData ] = getSearchState( searchStateProp, searchStateData, searchStateUpdater );\n    const stateProvider = AwStateService.instance;\n    const changedParams = stateProvider.params;\n    let urlSearchString = null;\n    let urlFilterString = '';\n    if( changedParams.hasOwnProperty( 'searchCriteria' ) ) {\n        urlSearchString = changedParams.searchCriteria;\n    }\n    if( changedParams.hasOwnProperty( 'filter' ) ) {\n        urlFilterString = changedParams.filter ? changedParams.filter : urlFilterString;\n    }\n    if( urlSearchString && searchState && searchState.criteria && searchState.criteria.searchString !== urlSearchString || urlFilterString !==\n        searchState.filterString ) {\n        const prefilterMap = searchFilterService.getFilterMapWithPrefilters();\n        const activeFiltersInfo = searchFilterService.buildSearchFiltersFromSearchState( prefilterMap );\n        let newSearchCriteria = {\n            criteria: searchStateHelperService.getCriteriaForNewSearch( searchState, urlSearchString ),\n            searchStringPrimary: urlSearchString,\n            searchStringSecondary: '',\n            activeFilters: prefilterMap,\n            activeFilterMap: activeFiltersInfo.activeFilterMap,\n            categories: [],\n            filterString: urlFilterString,\n            searchFilterCategories: [],\n            categoriesExpandCollapseMap: undefined,\n            allCategoriesVisible: undefined,\n            searchInProgress: true,\n            totalFound: searchState.showLoadingText ? undefined : 0,\n            forceChart: searchStateHelperService.getForceChartParameterValue( searchState )\n        };\n        newSearchCriteria.criteriaJSONString  = JSON.stringify( newSearchCriteria.criteria );\n        if( updateAtomicData ) {\n            updateAtomicData( { ...searchState, ...newSearchCriteria } );\n        } else {\n            let newSearchState = { ...searchState.value };\n            Object.assign( newSearchState, newSearchCriteria );\n            searchState.update( newSearchState );\n        }\n    }\n};\n\nexport const getSelectedFiltersMap = ( categories ) => {\n    var searchFilterMap = {};\n    for( const [ key, value ] of Object.entries( categories ) ) {\n        if( value ) {\n            let filtersForCurrentCategory = [];\n            if( value.filterValues && value.filterValues.length > 0 ) {\n                value.filterValues.forEach( ( val ) => {\n                    if( val.selected.dbValue ) {\n                        switch ( value.type ) {\n                            case 'NumericFilter': {\n                                let numericValue = filterPanelUtils.INTERNAL_NUMERIC_FILTER + val.internalName;\n                                filtersForCurrentCategory.push( numericValue );\n                                break;\n                            }\n                            case 'DateFilter': {\n                                let selectedDateFilters = searchFilterMap[ val.categoryName ] ? searchFilterMap[ val.categoryName ] : [];\n                                selectedDateFilters.push( val.internalName );\n                                searchFilterMap[ val.categoryName ] = selectedDateFilters;\n                                break;\n                            }\n                            default:\n                                filtersForCurrentCategory.push( val.internalName );\n                                break;\n                        }\n                    }\n                } );\n            }\n            if( value.numericRangeString ) {\n                filtersForCurrentCategory.push( value.numericRangeString );\n            }\n            if( value.dateRangeString ) {\n                filtersForCurrentCategory.push( value.dateRangeString );\n            }\n            if( filtersForCurrentCategory.length ) {\n                searchFilterMap[ value.internalName ] = filtersForCurrentCategory;\n            }\n        }\n    }\n    return searchFilterService.removeDependentDateFilters( searchFilterMap );\n};\n\n/**\n * update pwa selection model with selection query param value\n * @param {*} selectionModel selection model\n * @param {*} selectionQueryParam selection query param object with key, value\n */\nexport const updateSearchPWASelectionModel = ( selectionModel, selectionQueryParam ) => {\n    const pwaSelection = selectionModel.getSelection();\n    if( !pwaSelection.length && selectionQueryParam && selectionQueryParam.value ) {\n        selectionModel.setSelection( [ selectionQueryParam.value ] );\n    }\n};\n\nexport const getActiveSublocationTab = ( sublocationsTabs ) => {\n    let activeSublocTab = '';\n    if( sublocationsTabs && sublocationsTabs.length > 0 ) {\n        let activeSublocTabObj = sublocationsTabs.filter( ( tab ) => {\n            return tab.selectedTab;\n        } )[ 0 ];\n        activeSublocTab = activeSublocTabObj.id || activeSublocTabObj.tabKey || activeSublocTabObj.name;\n    }\n    return activeSublocTab;\n};\n\n/**\n    * update charts data on selection change\n    * @param {*} searchStateProp search state from parent\n    * @param {*} searchState search state from view model data\n    * @param {*} searchStateUpdater search state updater\n*/\nexport const updateChartsDataOnSelectionChange = ( searchStateProp, searchState, searchStateUpdater ) => {\n    const [ searchStateData, updateSearchState ] = getSearchState( searchStateProp, searchState, searchStateUpdater );\n    if( searchStateData && searchStateData.pwaSelection ) {\n        const selectedObjects = searchStateData.pwaSelection;\n        const forceChart = !selectedObjects || selectedObjects.length === 0;\n        const recreateChartProvider = forceChart ? 'true' : 'false';\n        if( updateSearchState ) {\n            updateSearchState( { ...searchStateData, forceChart, recreateChartProvider } );\n        } else {\n            let newSearchStateData = { ...searchStateData.value };\n            newSearchStateData.forceChart = forceChart;\n            newSearchStateData.recreateChartProvider = recreateChartProvider;\n            searchStateData.update( newSearchStateData );\n        }\n    }\n};\n\nexport const updateSublocationTabs = ( sublocationsTabs, primarySublocTabState ) => {\n    if( sublocationsTabs && primarySublocTabState.dbValue && primarySublocTabState.dbValue.primaryActiveTabId && primarySublocTabState.dbValue.primaryActiveTabId !== '' ) {\n        tabCallbackApi( undefined, primarySublocTabState.dbValue.primaryActiveTabId, sublocationsTabs );\n    }\n};\n\nexport const updateGlobalSelection = ( localSelectionData, parentSelectionData ) => {\n    if( !_.isEmpty( localSelectionData ) ) {\n        parentSelectionData ? parentSelectionData.update( localSelectionData ) : selectionService.updateSelection( localSelectionData.selected, localSelectionData.pselected, localSelectionData\n            .relationInfo );\n        trace( 'AwSearchSublocationService selectionData: ', localSelectionData );\n    }\n};\n\nexport const updateSelectionQueryParamInURL = ( searchStateProp, searchState ) => {\n    const searchStateData = searchStateProp ? searchStateProp : searchState;\n    // update URL if selectionQueryParam applicable\n    if( searchStateData.selectionQueryParam && searchStateData.selectionQueryParam.key ) {\n        let uid = searchStateData.pwaSelection && searchStateData.pwaSelection.length === 1 ? searchStateData.pwaSelection[ 0 ].uid : null;\n        AwStateService.instance.go( '.', {\n            [ searchStateData.selectionQueryParam.key ]: uid\n        } );\n    }\n};\n\nexport const updateSearchStateWithSelectionData = ( searchStateProp, searchState, selectionData ) => {\n    const searchStateData = searchStateProp ? searchStateProp : searchState;\n    if( !_.isEmpty( selectionData ) ) {\n        let newSearchState = searchStateData ? { ...searchStateData.value } : undefined;\n        if( newSearchState ) {\n            if( selectionData.source === 'primary' ) {\n                newSearchState.pwaSelection = selectionData.selected ? selectionData.selected : [];\n            } else if( selectionData.source === 'base' || selectionData.source === undefined ) {\n                newSearchState.pwaSelection = [];\n            }\n            searchStateData.update( newSearchState );\n        }\n    }\n};\n\nconst awSearchSublocationService = {\n    updateSearchContext,\n    createStateFromUrl,\n    createSearchFilterMapFromUrl,\n    getSearchFilterStringFromActiveFilterMap,\n    getActiveFilters,\n    lazyUpdate,\n    updateURL,\n    updateSearchCriteria,\n    syncStateFromUrl,\n    getSelectedFiltersMap,\n    updateSearchPWASelectionModel,\n    getActiveSublocationTab,\n    updateChartsDataOnSelectionChange,\n    updateSublocationTabs,\n    updateGlobalSelection,\n    updateSearchStateWithSelectionData,\n    updateSelectionQueryParamInURL\n};\n\nexport default awSearchSublocationService;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,mBAAP,MAAgC,4BAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,wBAAP,MAAqC,6BAArC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,KAAK,GAAG,IAAID,KAAJ,CAAW,WAAX,CAAd;AAEA,OAAO,MAAME,mBAAmB,GAAKC,QAAF,IAAgB;EAC/C;EACA;EACA,IAAIC,YAAY,GAAGV,aAAa,CAACW,MAAd,CAAsBF,QAAQ,CAACG,cAAT,GAA0B,eAAhD,CAAnB;;EACA,IAAIF,YAAY,KAAKG,SAAjB,IAA8BH,YAAY,KAAK,EAAnD,EAAwD;IACpDV,aAAa,CAACc,gBAAd,CAAgCL,QAAQ,CAACG,cAAT,GAA0B,eAA1D,EAA2E,EAA3E;IACAZ,aAAa,CAACc,gBAAd,CAAgC,0BAAhC,EAA4D,EAA5D;EACH,CAHD,MAGO;IACHd,aAAa,CAACc,gBAAd,CAAgC,0BAAhC,EAA4DJ,YAA5D;EACH;AACJ,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,kBAAkB,GAAG,CAAEN,QAAF,EAAYO,eAAZ,EAA6BC,WAA7B,EAA0CC,kBAA1C,EAA8DC,OAA9D,EAAuEC,cAAvE,EAAuFC,iBAAvF,KAA8G;EAC5I,IAAIF,OAAJ,EAAc;IACV;EACH;;EAED,MAAM,CAAEG,sBAAF,EAA0BC,gBAA1B,IAA+CC,cAAc,CAAER,eAAF,EAAmBC,WAAnB,EAAgCC,kBAAhC,CAAnE;EACA,MAAMO,aAAa,GAAGxB,cAAc,CAACyB,QAArC;EACA,MAAMC,aAAa,GAAGF,aAAa,CAACG,MAApC;EACA,MAAMC,aAAa,GAAGpB,QAAQ,CAACqB,OAAT,IAAoBrB,QAAQ,CAACqB,OAAT,CAAiBC,MAArC,GAA8CtB,QAAQ,CAACqB,OAAT,CAAiBC,MAA/D,GAAwE,EAA9F;EACA,MAAMC,8BAA8B,GAAGvB,QAAQ,CAACwB,sBAAT,GAAkCxB,QAAQ,CAACwB,sBAA3C,GAAoE,OAA3G;EACA,IAAIC,wBAAJ;EACA,IAAID,sBAAJ;EACA,IAAIE,YAAY,GAAG,EAAnB;EACA,IAAIC,mBAAmB,GAAG,EAA1B;;EACA,IAAIT,aAAa,CAACU,cAAd,CAA8B,gBAA9B,CAAJ,EAAuD;IACnDF,YAAY,GAAGR,aAAa,CAACP,cAAd,GAA+BO,aAAa,CAACP,cAA7C,GAA8De,YAA7E;EACH;;EACD,IAAIR,aAAa,CAACU,cAAd,CAA8B,QAA9B,CAAJ,EAA+C;IAC3CD,mBAAmB,GAAGT,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA8CF,mBAApE;EACH;;EACD,IAAIT,aAAa,CAACU,cAAd,CAA8BL,8BAA9B,CAAJ,EAAqE;IACjEE,wBAAwB,GAAGP,aAAa,CAAEK,8BAAF,CAAxC;IACAC,sBAAsB,GAAGD,8BAAzB;EACH;;EACD,MAAMO,OAAO,GAAGd,aAAa,CAACe,OAAd,CAAsBC,IAAtB,IAA8BhB,aAAa,CAACe,OAAd,CAAsBC,IAAtB,CAA2BC,KAAzD,GAAiEjB,aAAa,CAACe,OAAd,CAAsBC,IAAtB,CAA2BC,KAA5F,GAAoG,EAApH;EACA,IAAIC,oBAAoB,GAAGxC,wBAAwB,CAACyC,2BAAzB,CAAsDf,aAAtD,EAAqEF,aAArE,CAA3B;EACA,MAAMkB,eAAe,GAAG,EAAE,GAAGF;EAAL,CAAxB;EACA,MAAMG,UAAU,GAAGjB,aAAa,CAACiB,UAAjC,CA3B4I,CA2B/F;;EAC7C,IAAIC,OAAO,GAAGD,UAAU,GAAG5C,aAAa,CAAC8C,gBAAd,CAAgCF,UAAU,CAACG,MAA3C,EAAmDH,UAAU,CAACI,GAA9D,CAAH,GAAyE,IAAIC,OAAJ,CAAeC,OAAF,IAAeA,OAAO,EAAnC,CAAjG;EACA,IAAIC,SAAS,GAAGR,eAAe,CAACS,QAAhB,IAA4BT,eAAe,CAACS,QAAhB,CAAyBjB,cAAzB,CAAyC,cAAzC,CAA5B,IACZQ,eAAe,CAACS,QAAhB,CAAyBnB,YAAzB,CAAsCoB,MAAtC,GAA+C,CADnC,GACuCV,eAAe,CAACS,QAAhB,CAAyBnB,YADhE,GAC+EA,YAD/F;EAEA,OAAOY,OAAO,CAACS,IAAR,CAAgBC,eAAF,IAAuB;IACxC,MAAM;MAAEC;IAAF,IAAsBC,4BAA4B,CAAElD,QAAF,CAAxD;IACA,MAAMmD,aAAa,GAAG9D,mBAAmB,CAAC+D,UAApB,EAAtB;IACAhB,eAAe,CAACS,QAAhB,GAA2BQ,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmBlB,eAAe,CAACS,QAAnC,EAA6ClC,cAA7C,CAA3B;IACAyB,eAAe,CAACS,QAAhB,CAAyBnB,YAAzB,GAAwCkB,SAAxC;IACA,IAAIW,YAAY,GAAG;MACfC,mBAAmB,EAAEZ,SADN;MAEfa,qBAAqB,EAAE,EAFR;MAGfxB,KAAK,EAAEH,OAHQ;MAIf4B,YAAY,EAAE/B,mBAJC;MAKfgC,UAAU,EAAEvC,aAAa,CAACwC,eAAd,GAAgCxD,SAAhC,GAA4C,CALzC;MAMfyD,cAAc,EAAEzC,aAAa,CAACyC,cANf;MAOf7D,QAAQ,EAAEoB,aAAa,CAACpB,QAPT;MAQf8D,QAAQ,EAAE1C,aAAa,CAAC0C,QART;MASfzB,UAAU,EAAEW,eATG;MAUfe,wBAAwB,EAAE,IAVX;MAWfZ,aAAa,EAAEA,aAXA;MAYfF,eAAe,EAAEA,eAZF;MAafe,gBAAgB,EAAEpB,SAAS,IAAIA,SAAS,CAACE,MAAV,GAAmB,CAAhC,IAAqCnB,mBAAmB,IAAIA,mBAAmB,CAACmB,MAApB,GAA6B,CAb5F;MAcfmB,eAAe,EAAE,EAdF;MAefC,mBAAmB,EAAE;QACjBzB,GAAG,EAAEjB,sBADY;QAEjB2C,KAAK,EAAE1C;MAFU;IAfN,CAAnB;IAoBA4B,MAAM,CAACC,MAAP,CAAelB,eAAf,EAAgCmB,YAAhC;;IACA,IAAIzC,gBAAJ,EAAuB;MACnBA,gBAAgB,CAAEsB,eAAF,CAAhB;IACH,CAFD,MAEO;MACHvB,sBAAsB,CAACuD,MAAvB,CAA+BhC,eAA/B;IACH;;IACDiC,6BAA6B,CAAEzD,iBAAF,EAAqB2C,YAAY,CAACW,mBAAlC,CAA7B;EACH,CAhCM,CAAP;AAiCH,CAhEM;AAkEP,OAAO,MAAMhB,4BAA4B,GAAKlD,QAAF,IAAgB;EACxD,IAAIoB,aAAa,GAAG/B,mBAAmB,CAACiF,kBAApB,CAAwCtE,QAAQ,CAACqB,OAAjD,CAApB;EACA,OAAO;IACH4B,eAAe,EAAE7B,aAAa,CAAC6B;EAD5B,CAAP;AAGH,CALM;AAOP,OAAO,MAAMsB,wCAAwC,GAAKpB,aAAF,IAAqB;EACzE,IAAIc,eAAe,GAAG,EAAtB;;EACA,IAAId,aAAa,IAAIA,aAAa,CAACL,MAAd,GAAuB,CAA5C,EAAgD;IAC5C,KAAK,IAAI0B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGrB,aAAa,CAACL,MAA1C,EAAkD0B,KAAK,EAAvD,EAA4D;MACxD,IAAIC,wBAAwB,GAAGtB,aAAa,CAAEqB,KAAF,CAA5C;MACAP,eAAe,CAAEQ,wBAAwB,CAACC,IAA3B,CAAf,GAAmDD,wBAAwB,CAACE,MAA5E;IACH;EACJ;;EACD,OAAOtF,mBAAmB,CAACuF,iBAApB,CAAuCX,eAAvC,CAAP;AACH,CATM;AAWP,OAAO,MAAMY,gBAAgB,GAAKC,sBAAF,IAA8B;EAC1D,MAAMC,kBAAkB,GAAGD,sBAAsB,CAACE,GAAvB,CAA8BC,QAAF,IAAgB;IACnE,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,YAArB,IAAqCD,QAAQ,CAACC,YAAT,CAAsBpC,MAAtB,GAA+B,CAAxE,EAA4E;MACxE,OAAOmC,QAAQ,CAACC,YAAT,CAAsBrD,MAAtB,CAAgCsD,YAAF,IAAoB;QACrD,OAAOA,YAAY,CAACC,QAAb,CAAsBjB,KAA7B;MACH,CAFM,CAAP;IAGH;;IACD,OAAO,EAAP;EACH,CAP0B,CAA3B;EAQA,OAAO/E,CAAC,CAACiG,OAAF,CAAWN,kBAAX,CAAP;AACH,CAVM;AAYP,OAAO,MAAMO,UAAU,GAAG,CAAE9E,WAAF,EAAeM,gBAAf,KAAqC;EAC3D;EACA,IAAIN,WAAW,IAAIA,WAAW,CAAC2C,aAA/B,EAA+C;IAC3C,IAAIxC,cAAc,GAAGnB,cAAc,CAACyB,QAAf,CAAwBE,MAAxB,CAA+BR,cAApD;IACA,MAAM+C,YAAY,GAAGrE,mBAAmB,CAACuF,iBAApB,CAAuCpE,WAAW,CAAC2C,aAAnD,CAArB;;IACA,IAAI3C,WAAW,CAACkD,YAAZ,KAA6BA,YAA7B,KAA+ClD,WAAW,CAAC+E,gBAAZ,IAAgC/E,WAAW,CAACgF,kBAA3F,CAAJ,EAAsH;MAClH,MAAMC,mBAAmB,GAAGpG,mBAAmB,CAACqG,iCAApB,CAAuDlF,WAAW,CAAC2C,aAAnE,CAA5B;MACA,IAAIwC,eAAe,GAAGjG,wBAAwB,CAACkG,+BAAzB,CAA0DpF,WAA1D,CAAtB;MACA,IAAIqF,UAAU,GAAGnG,wBAAwB,CAACoG,2BAAzB,CAAsDtF,WAAtD,CAAjB;MACAnB,mBAAmB,CAAC0G,QAApB,CAA8B,IAA9B,EAAoCJ,eAAe,GAAGA,eAAe,CAACjE,YAAnB,GAAkC,IAArF,EAA2FlB,WAAW,CAAC2C,aAAvG;;MACA,IAAIrC,gBAAJ,EAAuB;QACnBA,gBAAgB,CAAE,EACd,GAAGN,WADW;UAEdqC,QAAQ,EAAE8C,eAFI;UAGdE,UAAU,EAAEA,UAHE;UAIdnC,YAAY,EAAEA,YAJA;UAKdT,eAAe,EAAEwC,mBAAmB,CAACxC,eALvB;UAMde,gBAAgB,EAAE,IANJ;UAOdgC,UAAU,EAAE5F,SAPE;UAQd6F,sBAAsB,EAAE7F;QARV,CAAF,CAAhB;MAUH,CAXD,MAWO;QACH,IAAI8F,cAAc,GAAG,EAAE,GAAG1F,WAAW,CAAC2D;QAAjB,CAArB;QACA+B,cAAc,CAACrD,QAAf,GAA0B8C,eAA1B;QACAO,cAAc,CAACL,UAAf,GAA4BA,UAA5B;QACAK,cAAc,CAACxC,YAAf,GAA8BA,YAA9B;QACAwC,cAAc,CAACjD,eAAf,GAAiCwC,mBAAmB,CAACxC,eAArD;QACAiD,cAAc,CAAClC,gBAAf,GAAkC,IAAlC;QACAkC,cAAc,CAACF,UAAf,GAA4B5F,SAA5B;QACA8F,cAAc,CAACD,sBAAf,GAAwC7F,SAAxC;QACAI,WAAW,CAAC4D,MAAZ,CAAoB8B,cAApB;MACH;IACJ,CA3BD,MA2BO,IAAIxC,YAAY,KAAKlD,WAAW,CAAC2F,qBAA7B,IAAsD,CAAC3F,WAAW,CAAC+E,gBAAnE,IAAuF,CAAC/E,WAAW,CAACgF,kBAAxG,EAA6H;MAChIhF,WAAW,CAAC2F,qBAAZ,GAAoCzC,YAApC;MACA,MAAM0C,oBAAoB,GAAG/G,mBAAmB,CAACgH,oBAApB,CAA0C7F,WAAW,CAAC2C,aAAtD,EAAqE3C,WAAW,CAACyC,eAAjF,CAA7B;MACA,MAAMqD,0BAA0B,GAAGjH,mBAAmB,CAACqG,iCAApB,CAAuDU,oBAAoB,CAACG,wBAA5E,CAAnC;MACA,MAAMC,0BAA0B,GAAGnH,mBAAmB,CAACqG,iCAApB,CAAuDU,oBAAoB,CAACK,wBAA5E,CAAnC;;MACA,IAAI3F,gBAAJ,EAAuB;QACnBA,gBAAgB,CAAE,EACd,GAAGN,WADW;UAEdkG,sBAAsB,EAAEJ,0BAA0B,CAACnD,aAFrC;UAGdwD,sBAAsB,EAAEH,0BAA0B,CAACrD,aAHrC;UAIdoD,wBAAwB,EAAED,0BAA0B,CAACrD,eAJvC;UAKdwD,wBAAwB,EAAED,0BAA0B,CAACvD;QALvC,CAAF,CAAhB;MAOH,CARD,MAQO;QACH,IAAIiD,cAAc,GAAG,EAAE,GAAG1F,WAAW,CAAC2D;QAAjB,CAArB;QACA+B,cAAc,CAACQ,sBAAf,GAAwCJ,0BAA0B,CAACnD,aAAnE;QACA+C,cAAc,CAACS,sBAAf,GAAwCH,0BAA0B,CAACrD,aAAnE;QACA+C,cAAc,CAACK,wBAAf,GAA0CD,0BAA0B,CAACrD,eAArE;QACAiD,cAAc,CAACO,wBAAf,GAA0CD,0BAA0B,CAACvD,eAArE;QACAzC,WAAW,CAAC4D,MAAZ,CAAoB8B,cAApB;MACH;IACJ,CArBM,MAqBA,IAAIvF,cAAc,IAAIH,WAAW,CAACqC,QAA9B,IAA0CrC,WAAW,CAACqC,QAAZ,CAAqBnB,YAArB,KAAsCf,cAApF,EAAqG;MACxGtB,mBAAmB,CAAC0G,QAApB,CAA8B,IAA9B,EAAoCvF,WAAW,CAACqC,QAAZ,CAAqBnB,YAAzD,EAAuElB,WAAW,CAAC2C,aAAnF;;MACA,IAAIrC,gBAAJ,EAAuB;QACnBA,gBAAgB,CAAE,EAAE,GAAGN,WAAL;UAAkBwF,UAAU,EAAE5F;QAA9B,CAAF,CAAhB;MACH,CAFD,MAEO;QACH,IAAI8F,cAAc,GAAG,EAAE,GAAG1F,WAAW,CAAC2D;QAAjB,CAArB;QACA+B,cAAc,CAACF,UAAf,GAA4B5F,SAA5B;QACAI,WAAW,CAAC4D,MAAZ,CAAoB8B,cAApB;MACH;IACJ;EACJ,CA7DD,MA6DO,IAAI1G,cAAc,CAACyB,QAAf,CAAwBE,MAAxB,CAA+BU,MAAnC,EAA4C;IAC/C;IACA,IAAIrB,WAAW,CAACkD,YAAZ,KAA6BlE,cAAc,CAACyB,QAAf,CAAwBE,MAAxB,CAA+BU,MAAhE,EAAyE;MACrE,IAAIf,gBAAJ,EAAuB;QACnBA,gBAAgB,CAAE,EAAE,GAAGN,WAAL;UAAkBkD,YAAY,EAAElE,cAAc,CAACyB,QAAf,CAAwBE,MAAxB,CAA+BU;QAA/D,CAAF,CAAhB;MACH,CAFD,MAEO;QACH,IAAIqE,cAAc,GAAG,EAAE,GAAG1F,WAAW,CAAC2D;QAAjB,CAArB;QACA+B,cAAc,CAACxC,YAAf,GAA8BlE,cAAc,CAACyB,QAAf,CAAwBE,MAAxB,CAA+BU,MAA7D;QACArB,WAAW,CAAC4D,MAAZ,CAAoB8B,cAApB;MACH;IACJ;EACJ;AACJ,CA3EM;;AA6EP,IAAIU,iBAAiB,GAAGxH,CAAC,CAACyH,QAAF,CAAY,CAAErG,WAAF,EAAeM,gBAAf,KAAqC;EACrEwE,UAAU,CAAE9E,WAAF,EAAeM,gBAAf,CAAV;AACH,CAFuB,EAErB,GAFqB,CAAxB;;AAIA,OAAO,MAAMgG,SAAS,GAAG,CAAEvG,eAAF,EAAmBC,WAAnB,EAAgCC,kBAAhC,EAAoDC,OAApD,KAAiE;EACtF,IAAIA,OAAJ,EAAc;IACV;EACH;;EACD,MAAM,CAAE0B,eAAF,EAAmBtB,gBAAnB,IAAwCC,cAAc,CAAER,eAAF,EAAmBC,WAAnB,EAAgCC,kBAAhC,CAA5D;EACAmG,iBAAiB,CAAExE,eAAF,EAAmBtB,gBAAnB,CAAjB;AACH,CANM;AAQP,OAAO,MAAMiG,oBAAoB,GAAG,CAAEC,wBAAF,EAA4BvG,kBAA5B,EAAgDE,cAAhD,KAAoE;EACpG,IAAIH,WAAW,GAAGwG,wBAAwB,CAACC,aAAzB,EAAlB;EACA,MAAMpE,QAAQ,GAAGQ,MAAM,CAACC,MAAP,CAAe,EAAf,EAAmB9C,WAAW,CAACqC,QAA/B,EAAyClC,cAAzC,CAAjB;EACAF,kBAAkB,CAACD,WAAnB,CAAgC,EAAE,GAAGA,WAAL;IAAkBqC;EAAlB,CAAhC;AACH,CAJM;;AAMP,MAAM9B,cAAc,GAAG,CAAER,eAAF,EAAmBC,WAAnB,EAAgCC,kBAAhC,KAAwD;EAC3E,MAAM2B,eAAe,GAAG7B,eAAe,GAAGA,eAAH,GAAqBC,WAA5D;;EACA,IAAID,eAAe,IAAIA,eAAe,CAAC6D,MAAvC,EAAgD;IAC5C,OAAO,CAAEhC,eAAF,EAAmBhC,SAAnB,CAAP;EACH;;EACD,OAAO,CAAEgC,eAAF,EAAmB3B,kBAAkB,CAACD,WAAtC,CAAP;AACH,CAND;;AAQA,OAAO,MAAM0G,gBAAgB,GAAG,CAAE3G,eAAF,EAAmB6B,eAAnB,EAAoC3B,kBAApC,KAA4D;EACxF,MAAM,CAAED,WAAF,EAAeM,gBAAf,IAAoCC,cAAc,CAAER,eAAF,EAAmB6B,eAAnB,EAAoC3B,kBAApC,CAAxD;EACA,MAAMO,aAAa,GAAGxB,cAAc,CAACyB,QAArC;EACA,MAAMC,aAAa,GAAGF,aAAa,CAACG,MAApC;EACA,IAAIgG,eAAe,GAAG,IAAtB;EACA,IAAIC,eAAe,GAAG,EAAtB;;EACA,IAAIlG,aAAa,CAACU,cAAd,CAA8B,gBAA9B,CAAJ,EAAuD;IACnDuF,eAAe,GAAGjG,aAAa,CAACP,cAAhC;EACH;;EACD,IAAIO,aAAa,CAACU,cAAd,CAA8B,QAA9B,CAAJ,EAA+C;IAC3CwF,eAAe,GAAGlG,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA8CuF,eAAhE;EACH;;EACD,IAAID,eAAe,IAAI3G,WAAnB,IAAkCA,WAAW,CAACqC,QAA9C,IAA0DrC,WAAW,CAACqC,QAAZ,CAAqBnB,YAArB,KAAsCyF,eAAhG,IAAmHC,eAAe,KAClI5G,WAAW,CAACkD,YADhB,EAC+B;IAC3B,MAAM2D,YAAY,GAAGhI,mBAAmB,CAACiI,0BAApB,EAArB;IACA,MAAMC,iBAAiB,GAAGlI,mBAAmB,CAACqG,iCAApB,CAAuD2B,YAAvD,CAA1B;IACA,IAAIG,iBAAiB,GAAG;MACpB3E,QAAQ,EAAEnD,wBAAwB,CAAC+H,uBAAzB,CAAkDjH,WAAlD,EAA+D2G,eAA/D,CADU;MAEpB3D,mBAAmB,EAAE2D,eAFD;MAGpB1D,qBAAqB,EAAE,EAHH;MAIpBN,aAAa,EAAEkE,YAJK;MAKpBpE,eAAe,EAAEsE,iBAAiB,CAACtE,eALf;MAMpB+C,UAAU,EAAE,EANQ;MAOpBtC,YAAY,EAAE0D,eAPM;MAQpBtC,sBAAsB,EAAE,EARJ;MASpB4C,2BAA2B,EAAEtH,SATT;MAUpBuH,oBAAoB,EAAEvH,SAVF;MAWpB4D,gBAAgB,EAAE,IAXE;MAYpBL,UAAU,EAAEnD,WAAW,CAACoD,eAAZ,GAA8BxD,SAA9B,GAA0C,CAZlC;MAapByF,UAAU,EAAEnG,wBAAwB,CAACoG,2BAAzB,CAAsDtF,WAAtD;IAbQ,CAAxB;IAeAgH,iBAAiB,CAACI,kBAAlB,GAAwCC,IAAI,CAACC,SAAL,CAAgBN,iBAAiB,CAAC3E,QAAlC,CAAxC;;IACA,IAAI/B,gBAAJ,EAAuB;MACnBA,gBAAgB,CAAE,EAAE,GAAGN,WAAL;QAAkB,GAAGgH;MAArB,CAAF,CAAhB;IACH,CAFD,MAEO;MACH,IAAItB,cAAc,GAAG,EAAE,GAAG1F,WAAW,CAAC2D;MAAjB,CAArB;MACAd,MAAM,CAACC,MAAP,CAAe4C,cAAf,EAA+BsB,iBAA/B;MACAhH,WAAW,CAAC4D,MAAZ,CAAoB8B,cAApB;IACH;EACJ;AACJ,CAxCM;AA0CP,OAAO,MAAM6B,qBAAqB,GAAK/B,UAAF,IAAkB;EACnD,IAAI/B,eAAe,GAAG,EAAtB;;EACA,KAAK,MAAM,CAAExB,GAAF,EAAO0B,KAAP,CAAX,IAA6Bd,MAAM,CAAC2E,OAAP,CAAgBhC,UAAhB,CAA7B,EAA4D;IACxD,IAAI7B,KAAJ,EAAY;MACR,IAAI8D,yBAAyB,GAAG,EAAhC;;MACA,IAAI9D,KAAK,CAACe,YAAN,IAAsBf,KAAK,CAACe,YAAN,CAAmBpC,MAAnB,GAA4B,CAAtD,EAA0D;QACtDqB,KAAK,CAACe,YAAN,CAAmBgD,OAAnB,CAA8BC,GAAF,IAAW;UACnC,IAAIA,GAAG,CAAC/C,QAAJ,CAAagD,OAAjB,EAA2B;YACvB,QAASjE,KAAK,CAACkE,IAAf;cACI,KAAK,eAAL;gBAAsB;kBAClB,IAAIC,YAAY,GAAGhJ,gBAAgB,CAACiJ,uBAAjB,GAA2CJ,GAAG,CAACK,YAAlE;kBACAP,yBAAyB,CAACQ,IAA1B,CAAgCH,YAAhC;kBACA;gBACH;;cACD,KAAK,YAAL;gBAAmB;kBACf,IAAII,mBAAmB,GAAGzE,eAAe,CAAEkE,GAAG,CAACQ,YAAN,CAAf,GAAsC1E,eAAe,CAAEkE,GAAG,CAACQ,YAAN,CAArD,GAA4E,EAAtG;kBACAD,mBAAmB,CAACD,IAApB,CAA0BN,GAAG,CAACK,YAA9B;kBACAvE,eAAe,CAAEkE,GAAG,CAACQ,YAAN,CAAf,GAAsCD,mBAAtC;kBACA;gBACH;;cACD;gBACIT,yBAAyB,CAACQ,IAA1B,CAAgCN,GAAG,CAACK,YAApC;gBACA;YAdR;UAgBH;QACJ,CAnBD;MAoBH;;MACD,IAAIrE,KAAK,CAACyE,kBAAV,EAA+B;QAC3BX,yBAAyB,CAACQ,IAA1B,CAAgCtE,KAAK,CAACyE,kBAAtC;MACH;;MACD,IAAIzE,KAAK,CAAC0E,eAAV,EAA4B;QACxBZ,yBAAyB,CAACQ,IAA1B,CAAgCtE,KAAK,CAAC0E,eAAtC;MACH;;MACD,IAAIZ,yBAAyB,CAACnF,MAA9B,EAAuC;QACnCmB,eAAe,CAAEE,KAAK,CAACqE,YAAR,CAAf,GAAwCP,yBAAxC;MACH;IACJ;EACJ;;EACD,OAAO5I,mBAAmB,CAACyJ,0BAApB,CAAgD7E,eAAhD,CAAP;AACH,CAvCM;AAyCP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,6BAA6B,GAAG,CAAE0E,cAAF,EAAkB7E,mBAAlB,KAA2C;EACpF,MAAM8E,YAAY,GAAGD,cAAc,CAACE,YAAf,EAArB;;EACA,IAAI,CAACD,YAAY,CAAClG,MAAd,IAAwBoB,mBAAxB,IAA+CA,mBAAmB,CAACC,KAAvE,EAA+E;IAC3E4E,cAAc,CAACG,YAAf,CAA6B,CAAEhF,mBAAmB,CAACC,KAAtB,CAA7B;EACH;AACJ,CALM;AAOP,OAAO,MAAMgF,uBAAuB,GAAKC,gBAAF,IAAwB;EAC3D,IAAIC,eAAe,GAAG,EAAtB;;EACA,IAAID,gBAAgB,IAAIA,gBAAgB,CAACtG,MAAjB,GAA0B,CAAlD,EAAsD;IAClD,IAAIwG,kBAAkB,GAAGF,gBAAgB,CAACvH,MAAjB,CAA2B0H,GAAF,IAAW;MACzD,OAAOA,GAAG,CAACC,WAAX;IACH,CAFwB,EAEpB,CAFoB,CAAzB;IAGAH,eAAe,GAAGC,kBAAkB,CAACG,EAAnB,IAAyBH,kBAAkB,CAACI,MAA5C,IAAsDJ,kBAAkB,CAAC5E,IAA3F;EACH;;EACD,OAAO2E,eAAP;AACH,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,iCAAiC,GAAG,CAAEpJ,eAAF,EAAmBC,WAAnB,EAAgCC,kBAAhC,KAAwD;EACrG,MAAM,CAAE2B,eAAF,EAAmBwH,iBAAnB,IAAyC7I,cAAc,CAAER,eAAF,EAAmBC,WAAnB,EAAgCC,kBAAhC,CAA7D;;EACA,IAAI2B,eAAe,IAAIA,eAAe,CAAC4G,YAAvC,EAAsD;IAClD,MAAMa,eAAe,GAAGzH,eAAe,CAAC4G,YAAxC;IACA,MAAMnD,UAAU,GAAG,CAACgE,eAAD,IAAoBA,eAAe,CAAC/G,MAAhB,KAA2B,CAAlE;IACA,MAAMgH,qBAAqB,GAAGjE,UAAU,GAAG,MAAH,GAAY,OAApD;;IACA,IAAI+D,iBAAJ,EAAwB;MACpBA,iBAAiB,CAAE,EAAE,GAAGxH,eAAL;QAAsByD,UAAtB;QAAkCiE;MAAlC,CAAF,CAAjB;IACH,CAFD,MAEO;MACH,IAAIC,kBAAkB,GAAG,EAAE,GAAG3H,eAAe,CAAC+B;MAArB,CAAzB;MACA4F,kBAAkB,CAAClE,UAAnB,GAAgCA,UAAhC;MACAkE,kBAAkB,CAACD,qBAAnB,GAA2CA,qBAA3C;MACA1H,eAAe,CAACgC,MAAhB,CAAwB2F,kBAAxB;IACH;EACJ;AACJ,CAfM;AAiBP,OAAO,MAAMC,qBAAqB,GAAG,CAAEZ,gBAAF,EAAoBa,qBAApB,KAA+C;EAChF,IAAIb,gBAAgB,IAAIa,qBAAqB,CAAC7B,OAA1C,IAAqD6B,qBAAqB,CAAC7B,OAAtB,CAA8B8B,kBAAnF,IAAyGD,qBAAqB,CAAC7B,OAAtB,CAA8B8B,kBAA9B,KAAqD,EAAlK,EAAuK;IACnKvK,cAAc,CAAES,SAAF,EAAa6J,qBAAqB,CAAC7B,OAAtB,CAA8B8B,kBAA3C,EAA+Dd,gBAA/D,CAAd;EACH;AACJ,CAJM;AAMP,OAAO,MAAMe,qBAAqB,GAAG,CAAEC,kBAAF,EAAsBC,mBAAtB,KAA+C;EAChF,IAAI,CAACjL,CAAC,CAACkL,OAAF,CAAWF,kBAAX,CAAL,EAAuC;IACnCC,mBAAmB,GAAGA,mBAAmB,CAACjG,MAApB,CAA4BgG,kBAA5B,CAAH,GAAsDxK,gBAAgB,CAAC2K,eAAjB,CAAkCH,kBAAkB,CAAChF,QAArD,EAA+DgF,kBAAkB,CAACI,SAAlF,EAA6FJ,kBAAkB,CACnLK,YADoE,CAAzE;IAEA3K,KAAK,CAAE,4CAAF,EAAgDsK,kBAAhD,CAAL;EACH;AACJ,CANM;AAQP,OAAO,MAAMM,8BAA8B,GAAG,CAAEnK,eAAF,EAAmBC,WAAnB,KAAoC;EAC9E,MAAM4B,eAAe,GAAG7B,eAAe,GAAGA,eAAH,GAAqBC,WAA5D,CAD8E,CAE9E;;EACA,IAAI4B,eAAe,CAAC8B,mBAAhB,IAAuC9B,eAAe,CAAC8B,mBAAhB,CAAoCzB,GAA/E,EAAqF;IACjF,IAAIkI,GAAG,GAAGvI,eAAe,CAAC4G,YAAhB,IAAgC5G,eAAe,CAAC4G,YAAhB,CAA6BlG,MAA7B,KAAwC,CAAxE,GAA4EV,eAAe,CAAC4G,YAAhB,CAA8B,CAA9B,EAAkC2B,GAA9G,GAAoH,IAA9H;IACAnL,cAAc,CAACyB,QAAf,CAAwB2J,EAAxB,CAA4B,GAA5B,EAAiC;MAC7B,CAAExI,eAAe,CAAC8B,mBAAhB,CAAoCzB,GAAtC,GAA6CkI;IADhB,CAAjC;EAGH;AACJ,CATM;AAWP,OAAO,MAAME,kCAAkC,GAAG,CAAEtK,eAAF,EAAmBC,WAAnB,EAAgCsK,aAAhC,KAAmD;EACjG,MAAM1I,eAAe,GAAG7B,eAAe,GAAGA,eAAH,GAAqBC,WAA5D;;EACA,IAAI,CAACpB,CAAC,CAACkL,OAAF,CAAWQ,aAAX,CAAL,EAAkC;IAC9B,IAAI5E,cAAc,GAAG9D,eAAe,GAAG,EAAE,GAAGA,eAAe,CAAC+B;IAArB,CAAH,GAAkC/D,SAAtE;;IACA,IAAI8F,cAAJ,EAAqB;MACjB,IAAI4E,aAAa,CAACtI,MAAd,KAAyB,SAA7B,EAAyC;QACrC0D,cAAc,CAAC8C,YAAf,GAA8B8B,aAAa,CAAC1F,QAAd,GAAyB0F,aAAa,CAAC1F,QAAvC,GAAkD,EAAhF;MACH,CAFD,MAEO,IAAI0F,aAAa,CAACtI,MAAd,KAAyB,MAAzB,IAAmCsI,aAAa,CAACtI,MAAd,KAAyBpC,SAAhE,EAA4E;QAC/E8F,cAAc,CAAC8C,YAAf,GAA8B,EAA9B;MACH;;MACD5G,eAAe,CAACgC,MAAhB,CAAwB8B,cAAxB;IACH;EACJ;AACJ,CAbM;AAeP,MAAM6E,0BAA0B,GAAG;EAC/BhL,mBAD+B;EAE/BO,kBAF+B;EAG/B4C,4BAH+B;EAI/BqB,wCAJ+B;EAK/BM,gBAL+B;EAM/BS,UAN+B;EAO/BwB,SAP+B;EAQ/BC,oBAR+B;EAS/BG,gBAT+B;EAU/Ba,qBAV+B;EAW/B1D,6BAX+B;EAY/B8E,uBAZ+B;EAa/BQ,iCAb+B;EAc/BK,qBAd+B;EAe/BG,qBAf+B;EAgB/BU,kCAhB+B;EAiB/BH;AAjB+B,CAAnC;AAoBA,eAAeK,0BAAf"},"metadata":{},"sourceType":"module"}
// Copyright (c) 2022 Siemens

const path = require( 'path' );
const { readJSONSync, removeSync, writeJSONSync } = require( 'fs-extra' );
let modulePathMap = new Map();

const handledPrefixes = new Set( [ 'i18n', 'image', 'images', 'js', 'test', 'viewmodel', 'config' ] );
const handledFiles = new Set( [ '@swf/core/test/testUtils' ] );

const modulePathMapFilePath = path.resolve(
    `${process.cwd()}/out/test/jest_module_map.json`
);

/**
 * Resolve a module with it's path on the disk
 *
 * @param {String} request - Module string request
 * @param {Object} options - Jest config options object
 * @returns {String} - Resolved path
 */
function customResolve( request, options ) {
    if( modulePathMap.size === 0 ) {
        const moduleMapJsonObject = readJSONSync( modulePathMapFilePath );
        Object.keys( moduleMapJsonObject ).map( ( key ) => modulePathMap.set( key, moduleMapJsonObject[ key ] ) );
    }
    if( modulePathMap.has( request ) ) {
        return options.defaultResolver( modulePathMap.get( request ), options );
    }
    return options.defaultResolver( request, options );
}

/**
 * Initialize the module map and thin out the moduleNameMapper
 *
 * @param {Object} moduleNameMapper - Array map of module regex key to path on disk
 * @returns {Object} - Minimized moduleNameMapper
 */
customResolve.initialize = function initialize( moduleNameMapper ) {
    let minimizedMapper;
    if( moduleNameMapper ) {
        modulePathMap.clear();
        for( const keyRES in moduleNameMapper ) {
            const newKey = keyRES.replace( '^', '' ).replace( '$', '' );
            if( handledPrefixes.has( newKey.split( '/' )[ 0 ] ) || handledFiles.has( newKey ) ) {
                modulePathMap.set( newKey, moduleNameMapper[ keyRES ] );
            } else {
                if( !minimizedMapper ) {
                    minimizedMapper = {};
                }
                minimizedMapper[ keyRES ] = moduleNameMapper[ keyRES ];
            }
        }
        let moduleMapJsonObject = {};
        for( let key of modulePathMap.keys() ) {
            moduleMapJsonObject[ key ] = modulePathMap.get( key );
        }
        removeSync( modulePathMapFilePath, { force: true } );
        writeJSONSync( modulePathMapFilePath, moduleMapJsonObject, { spaces: 2 } );
    }
    return minimizedMapper;
};

module.exports = customResolve;

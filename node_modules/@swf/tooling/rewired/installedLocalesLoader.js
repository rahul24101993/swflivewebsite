// Copyright (c) 2022 Siemens
/* eslint-disable sonarjs/cognitive-complexity */

const glob = require( 'glob' );
const _ = require( 'lodash' );
const { getEffectiveModules, getModuleCache, getSelectedSite } = require( './utils' );
const { basename } = require( 'path' );
const { Stopwatch } = require( './perfUtils' );

/**
 * main function of decl loader
 * @param {string} source input file content
 * @returns {string} modified source as return value
 */
module.exports = function loader( source ) {
    const stopwatch = new Stopwatch( 'installedLocalesLoader' );

    const effectiveModules = getEffectiveModules();
    const moduleCache = getModuleCache();
    let locales = [];
    effectiveModules.forEach( moduleName => {
        const moduleData = moduleCache[ moduleName ];
        const i18nFiles = glob.sync( `${moduleData.srcPath}/src/i18n/*.json` );
        i18nFiles.forEach( fileName => {
            let localeName;
            fileName = basename( fileName, '.json' );
            if( /_[\w]{2}_[\w]{2}$/.test( fileName ) ) {
                localeName = fileName.substring( fileName.length - 5 );
            } else if( /_[\w]{2}$/.test( fileName ) ) {
                localeName = fileName.substring( fileName.length - 2 );
            } else {
                localeName = 'en_US';
            }
            if( !locales.includes( localeName ) ) {
                locales.push( localeName );
            }
        } );
    } );

    /**
     * - regarding to installedLocales:
     *   - it depends on on how man JSON config our customer has in src
     *   - it depends on war_mySite.json
     */
    const siteJson = getSelectedSite();
    if( siteJson ) {
        _.remove( siteJson.locale, elem => {
            return _.isEmpty( elem );
        } );
    }
    if( siteJson && !_.isEmpty( siteJson.locale ) ) {
        const localesResolved = [];
        for( const locale of siteJson.locale ) {
            if( locales.includes( locale ) ) {
                localesResolved.push( locale );
            } else if( locale.length > 2 ) {
                const localeShort = locale.substring( 0, 2 ).toLowerCase();
                if( locales.includes( localeShort ) ) {
                    localesResolved.push( localeShort );
                }
            }
            // If we want to map en_UK to en_US, we'd add support here...
        }
        locales = localesResolved;
    } else {
        // add all installed locales
        locales = locales.sort( ( a, b ) => {
            if( a === 'en_US' ) { return -1; }
            if( b === 'en_US' ) { return 1; }
            return a.localeCompare( b );
        } );
    }
    const output = source.replace( 'AFX_CONFIG_ENTRY', JSON.stringify( locales ) );
    stopwatch.end();
    return output;
};

// Copyright (c) 2022 Siemens

const { getKitCache, getEffectiveKitNames, getSelectedSite, getEffectiveAlias } = require( './utils' );
const logger = require( '../js/logger' );
const { filter } = require( 'lodash' );
const { Stopwatch } = require( './perfUtils' );

// TODO Remove these as soon as they are fixed. Only temporarily added to avoid further regressions.
const tempExceptions = [
    'js/commandsSublocationService'
];

/**
 * main function of decl loader
 * @param {string} source input file content
 * @returns {string} modified source as return value
 */
module.exports = function loader( source ) {
    const stopwatch = new Stopwatch( 'moduleLoaderLoader' );

    // get all JSONs which needs to be stitch
    // revisitme - if we want to do better later, we can add those kit.json to the watch dependency of this loader
    const kitCache = getKitCache();

    const effectiveKits = getEffectiveKitNames();

    const kitsToScan = filter( kitCache, ( kit ) => effectiveKits.includes( kit.content.name ) );

    const aliasMap = getEffectiveAlias();

    // somehow get root kit JSON path here
    const siteDef = getSelectedSite();

    const kitJson = kitCache[ siteDef.content.solutionName ];

    if( !kitJson || !kitJson.content ) {
        throw new Error( `Unable to locate solution kit named ${siteDef.content.solutionName}!` );
    }

    if( !kitJson.content.solutionDef || !kitJson.content.solutionDef.workspaces ) {
        throw new Error( `Kit ${siteDef.content.solutionName} does not have a solutionDef or solutionDef.allWorkspaces defined!` );
    }

    const kitDepDefs = Object.values( kitsToScan ).reduce( ( sum, v ) => {
        if( v.content.extraDeps ) {
            v.content.extraDeps.forEach( v => sum[ v ] = true );
        }
        return sum;
    }, {} );

    // https://gitlab.industrysoftware.automation.siemens.com/Apollo/swf/-/issues/236
    if( kitJson.content.solutionDef.commandVisibility ) {
        kitDepDefs[ kitJson.content.solutionDef.commandVisibility ] = true;
    }

    const res = [];
    res.push( 'AFX_CONFIG_ENTRY' );
    Object.keys( kitDepDefs ).forEach( dep => {
        if( aliasMap[ dep ] ) {
            res.push( `registerDynImportEntry('${dep}', () => import('${dep}'));` );
        } else {
            try {
                // if no alias found check in node_modules first
                require.resolve( dep );
                res.push( `registerDynImportEntry('${dep}', () => import('${dep}'));` );
            } catch ( error ) {
                const msg = `The dependency '${dep}' included in kit.json extra deps configuration could not be found in kit dependency hierarchy.`;
                if( !tempExceptions.includes( dep ) ) {
                    throw new Error( msg );
                } else {
                    logger.warn( msg );
                }
            }
        }
    } );

    const output = source.replace( 'AFX_CONFIG_ENTRY', res.join( '\n' ) );
    stopwatch.end();
    return output;
};

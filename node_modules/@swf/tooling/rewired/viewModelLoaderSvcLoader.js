// Copyright (c) 2022 Siemens

const {
    getKitCache,
    normalizePath,
    getSelectedSite,
    getResolvedSourcePaths
} = require( './utils' );
const _ = require( 'lodash' );
const { Stopwatch } = require( './perfUtils' );

/**
 * main function of decl loader
 * @param {string} source input file content
 * @returns {string} modified source as return value
 */
module.exports = function loader( source ) {
    const stopwatch = new Stopwatch( 'viewModelLoaderSvcLoader' );

    // Generate module regex
    const sourcePaths = getResolvedSourcePaths();
    // get all JSONs which needs to be stitch
    // revisitme - if we want to do better later, we can add those kit.json to the watch dependency of this loader
    const kitCache = getKitCache();

    // somehow get root kit JSON path here
    const siteDef = getSelectedSite();

    // 1st check
    const kitJson = kitCache[ siteDef.content.solutionName ];

    if( !kitJson || !kitJson.content ) {
        throw new Error( `Unable to locate solution kit named ${siteDef.content.solutionName}!` );
    }
    if( !kitJson.content.solutionDef || !kitJson.content.solutionDef.workspaces ) {
        throw new Error( `Kit ${siteDef.content.solutionName} does not have a solutionDef or solutionDef.allWorkspaces defined!` );
    }

    const configs = Object.values( kitCache ).reduce( ( sum, v ) => ( {
        ...sum,
        ...v.content.configuration
    } ), {} );

    const res = [];
    res.push( 'AFX_VIEW_MODEL_REGISTRATION' );
    // https://stackoverflow.com/questions/50038473/is-it-possible-to-use-require-context-to-with-dynamic-imports-for-webpack
    const requiredPaths = _.map( sourcePaths, ( modules, srcPath ) =>
        `require.context('${normalizePath( srcPath )}',true,/(${modules.join( '|' )})[\\\\/]src[\\\\/](assets[\\\\/])?viewmodel[\\\\/][^\\\\/]*ViewModel\\.json$/, 'lazy' )` );
    res.push( `    registerViewModels( [
        ${requiredPaths.join( ',' )}
    ] );` );

    const output = source.replace( 'AFX_VIEW_MODEL_REGISTRATION', res.join( '\n' ) );
    stopwatch.end();
    return output;
};

// Copyright (c) 2022 Siemens

const { join } = require( 'path' );
const { writeFileSync } = require( 'fs-extra' );
const logger = require( '../js/logger' );

const argv = require( 'yargs' )
    .options( {
        perf: {
            description: 'performance monitoring?',
            default: /true/i.test( process.env.MEASURE_PERFORMANCE ),
            boolean: true
        },
        perfOut: {
            description: 'performance monitoring output file',
            default: process.env.PERFORMANCE_OUTPUT_FILENAME || '',
            normalize: true
        }
    } )
    .argv;

const enabled = argv.perf || argv.perfOut.length > 0;
// logger.warn( `perf = ${argv.perf}   perfOut = ${argv.perfOut}  enabled = ${enabled}` );

/**
 * Performance Metrics. For now it is [ key: string ]: number
 */
const perfMetrics = {};

/**
 * @param {Object} config - config
 * @param {Object} stopwatchTotal - stop watch for the total run
 * @returns {Object} config
 */
function initializePerfMonitor( config, stopwatchTotal ) {
    if( enabled ) {
        // Uncomment for performance testing
        const smpFileName = argv.perfOut;
        // const format = smpFormat ? smpFormat.toLowerCase() : 'human';
        const outputFn = ( log ) => {
            stopwatchTotal.end();

            logger.info( log );

            logger.info( JSON.stringify( perfMetrics, null, 2 ) ); // FIXME make this look like the speed-measure-webpack-plugin

            if( smpFileName ) {
                writeFileSync( join( process.cwd(), smpFileName ), log );
            }
        };
        const SpeedMeasurePlugin = require( 'speed-measure-webpack-plugin' );
        const smp = new SpeedMeasurePlugin( { outputFormat: smpFileName ? 'json' : 'human', outputTarget: outputFn } );
        return smp.wrap( config );
    }
}

/**
 * Stop watch
 *
 * @param {String} name - stop watch name
 */
function Stopwatch( name ) {
    this.hrstart = process.hrtime();
    this.name = name;
}

/**
 * End stop watch
 */
Stopwatch.prototype.end = function() {
    if( enabled ) {
        const hrend = process.hrtime( this.hrstart );
        const time = Math.trunc( ( hrend[ 0 ] * 1e9 + hrend[ 1 ] ) / 1000000 ) / 1000;
        perfMetrics[ this.name ] = ( perfMetrics[ this.name ] || 0 ) + time;
    }
};

module.exports = {
    initializePerfMonitor,
    Stopwatch
};

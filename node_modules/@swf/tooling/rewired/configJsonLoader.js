// Copyright (c) 2022 Siemens
/* eslint-disable sonarjs/cognitive-complexity */
/* eslint-disable complexity */

const _ = require( 'lodash' );
const { Stopwatch } = require( './perfUtils' );

/**
 * @param {Object} configuration - configuration
 * @param {Object} key - key
 * @return {String} modified source
 */
function getConfigurationDeps( configuration, key ) {
    let deps = [];
    if( key === 'contributions' ) {
        if( configuration ) {
            for( const contributionDeps of Object.values( configuration ) ) {
                deps = deps.concat( contributionDeps );
            }
        }
    } else if( key === 'commandsViewModel' || key === 'syncStrategy' || key === 'dragAndDrop' || key === 'lovDataProvider' ) {
        if( configuration.actions ) {
            for( const action of Object.values( configuration.actions ) ) {
                if( action.deps ) {
                    deps.push( action.deps );
                }
            }
        }
        // if( key === 'commandsViewModel' && configuration.commands ) {
        //     for( const command of Object.values( configuration.commands ) ) {
        //         if( command.iconId ) {
        //             const imgAlias = _.filter( imageAlias, alias => alias.includes( command.iconId ) );
        //             if( imgAlias.length ) {
        //                 deps.push( imgAlias[ 0 ] );
        //             }
        //         }
        //     }
        // }
    } else if( key === 'saveHandlers' ) {
        if( configuration ) {
            for( const entry of Object.values( configuration ) ) {
                if( entry.target && entry.target.deps ) {
                    deps.push( entry.target.deps );
                }
            }
        }
    } else if( key === 'hosting' ) {
        if( configuration ) {
            if( configuration.initialModules ) {
                for( const module of configuration.initialModules ) {
                    if( module.module ) {
                        deps.push( module.module );
                    }
                }
            }
            if( configuration.postHandshakeModules ) {
                for( const module of configuration.postHandshakeModules ) {
                    if( module.module ) {
                        deps.push( module.module );
                    }
                }
            }
            if( configuration.queries ) {
                for( const module of Object.values( configuration.queries ) ) {
                    if( module.module ) {
                        deps.push( module.module );
                    }
                }
            }
        }
    } else if( key === 'paste' || key === 'states' ) {
        _.mixin( {
            toPairsDeep: obj => _.flatMap( _.toPairs( obj ), ( [ k, v ] ) =>
                _.isObjectLike( v ) && k !== 'deps' && k !== 'dep' && k !== 'dependencies' ? _.toPairsDeep( v ) : [
                    [ k, v ]
                ] )
        } );
        deps.push( _( configuration )
            .toPairsDeep()
            .filter( ( [ k, v ] ) => k === 'deps' || k === 'dep' )
            .map( 1 )
            .flatten()
            .value() );
        if( key === 'states' ) {
            _.forEach( configuration, config => config.view ? deps.push( `viewmodel/${config.view}ViewModel` ) : null );
        }
    } else if( key === 'secondaryWorkareaTabs' ) {
        const configToUse = configuration.tabs ? configuration.tabs : configuration;
        _.forEach( configToUse, config => {
            config.view ? deps.push( `viewmodel/${config.view}ViewModel` ) : null;
            config.deps ? deps.push( config.deps ) : null;
        } );
    } else if( key === 'adapters' ) {
        _.forEach( configuration, config => {
            config.target && config.target.deps ? deps.push( config.target.deps ) : null;
        } );
    } else if( key === 'nodeTemplates' ) {
        if( configuration ) {
            for( const entry of Object.values( configuration ) ) {
                if( entry.templateUrl ) {
                    deps.push( entry.templateUrl );
                }
            }
        }
    } else if( configuration ) {
        for( const item of Object.values( configuration ) ) {
            if( item.dependencies && item.dependencies.length > 0 ) {
                deps = deps.concat( item.dependencies );
            }
            if( item.dep ) {
                deps.push( item.dep );
            }
            if( item.deps ) {
                deps.push( item.deps );
            }
        }
    }
    return deps;
}

/**
 * main function of decl loader
 *
 * @param {String} source input file content
 * @param {String} filePath file path
 * @return {String} modified output
 */
module.exports = function loader( source, filePath ) {
    const stopwatch = new Stopwatch( 'configJsonLoader' );
    const resourcePath = filePath ? filePath : this.resource.replace( /\\/g, '/' );
    const type = resourcePath.replace( /.*[\\/]([^\\/]*)\.json$/, '$1' );

    let configuration = JSON.parse( source.trim() );
    const deps = _.filter( _.uniq( _.flatten( getConfigurationDeps( configuration, type ) ) ), _.isString );
    const output = `
import { registerDynImportEntry } from 'js/moduleLoader';
${deps.map( dep => `registerDynImportEntry('${dep}', () => import('${dep}'));` ).join( '\n' )};
export default ${JSON.stringify( configuration, null, 4 )};
`.trim();
    stopwatch.end();
    return output;
};

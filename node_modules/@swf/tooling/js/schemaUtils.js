/* eslint-disable no-implicit-globals */

const _ = require( 'lodash' );
const Ajv = require( 'ajv' );
const { existsSync } = require( 'fs' );

const logger = require( './logger' );
const trace = logger.createTrace( __filename );

const ajv = Ajv( { allErrors: true } ); // eslint-disable-line new-cap
ajv.addMetaSchema( require( 'ajv/lib/refs/json-schema-draft-06.json' ) );

/**
 * check if the customer schema is mergeable
 *
 * @param {Object} customerSchema - the customer's viewModel schema file content
 * @param {Object} schema - framework's viewModel schema file content
 * @return {boolean} is custom schema mergeable?
 */
function isCustomSchemaMergeable( customerSchema, schema ) {
    let isMergeable = true;
    if( customerSchema && schema ) {
        // check if it has the same data object's structure as schema
        const prop = [ '$schema', 'type', 'properties' ];
        _.forIn( schema, function( value, key ) {
            if( prop.includes( key ) &&
                !customerSchema.hasOwnProperty( key ) ) {
                isMergeable = false;
                return false;
            }
        } );
        // check if the schema version is the same
        if( customerSchema.schemaVersion && schema.schemaVersion && customerSchema.schemaVersion !== schema.schemaVersion ) {
            isMergeable = false;
            return false;
        }
        // check if customer's schema contains the same properties as framework
        const customProp = customerSchema.properties;
        if( customProp && schema.properties ) {
            _.forIn( customProp, function( value, key ) {
                if( schema.properties.hasOwnProperty( key ) ) {
                    isMergeable = false;
                    return false; // break
                }
            } );
        }
        return isMergeable;
    }
}

/**
 * check if the customer schema is mergeable
 *
 * @param {Object} file - file
 * @param {String} contents - file contents
 * @param {Object} issues - issues
 * @param {String} jsonFileName - JSON file name
 */
function parseSchema( file, contents, issues, jsonFileName ) {
    const json = JSON.parse( contents );

    let schemaFile = __dirname + '/../conf/' + jsonFileName + '.json'; // default value if no schemaversion is provided
    if( json.schemaVersion ) {
        schemaFile = __dirname + '/../conf/' + jsonFileName + '-' + json.schemaVersion + '.json';
    }
    if( !existsSync( schemaFile ) ) {
        issues.errors.push( 'No' + jsonFileName + 'file found, please check your schemaVersion: ' + json.schemaVersion );
    } else {
        let customSchemaFile = 'declarativeSchema/' + jsonFileName + '.json'; // default value if no schemaVersion is provided
        if( json.schemaVersion ) {
            customSchemaFile = 'declarativeSchema/' + jsonFileName + '-' + json.schemaVersion + '.json';
        }
        customSchemaFile = process.cwd() + '\\' + customSchemaFile;
        const schema = require( schemaFile );
        const jsonFilePath = require( file.path );

        if( existsSync( customSchemaFile ) ) {
            const customerSchema = require( customSchemaFile );
            if( isCustomSchemaMergeable( customerSchema, schema ) ) {
                // do schema merge
                _.merge( schema, customerSchema );
                valiateSchema( schema, jsonFilePath, issues );
                // need to re import schemaFile because we did merge before
                delete require.cache[ require.resolve( schemaFile ) ];
            } else {
                issues.errors.push( 'Format of the customer schema is not correct' );
            }
        } else {
            valiateSchema( schema, jsonFilePath, issues );
        }
    }
}

/**
 * Validate the file over schema
 *
 * @param {Object} schema - schema object
 * @param {File} jsonFilePath - The file object
 * @param {Object} issues - object containing the array of warnings and issues to add to.
 */
function valiateSchema( schema, jsonFilePath, issues ) {
    if( !ajv.validate( schema, jsonFilePath ) ) {
        let msg = ajv.errorsText();
        trace( 'schema', schema );
        trace( 'jsonFilePath', jsonFilePath );
        trace( 'issues', issues );
        trace( 'msg', msg );
        throw new Error( msg );
    }
}

module.exports = {
    isCustomSchemaMergeable: isCustomSchemaMergeable,
    parseSchema: parseSchema,
    valiateSchema: valiateSchema
};

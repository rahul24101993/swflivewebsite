const yargs = require( 'yargs' );
const gulp = require( 'gulp' );
const util = require( './util' );
const tap = require( 'gulp-tap' );
const logger = require( './logger' );
const { execSync } = require( 'child_process' );
const through = require( 'through2' );

let logSummary = ( viewNameHavingDataI18n ) => {
    logger.info( 'Below Files modified : ' );
    viewNameHavingDataI18n.forEach( ( fileName ) => {
        logger.info( fileName, '', true );
    } );
};

let findAndReplaceI18nInstance = ( fileContents ) => {
    return fileContents.replace( /data.i18n/g, 'i18n' );
};

let getViewNamesHavingDataI18n = ( path ) => {
    let viewNameHavingDataI18n = [];
    return new Promise( ( resolve, reject ) => {
        util.stream2Promise( gulp.src( `${path}/**/*View.html` )
            .pipe(
                through.obj( ( file, encoding, callback ) => {
                    try {
                        let contents = ( file.contents ).toString( encoding );
                        if( contents.length ) {
                            let dataI18nExp = contents.match( /data.i18n/g );
                            if( dataI18nExp && dataI18nExp.length > 0 ) {
                                viewNameHavingDataI18n.push( file.path );
                                if( argv.awc && argv._.includes( 'run' ) ) {
                                    execSync( `dt co ${file.path}`, ( error ) => {
                                        if( error ) {
                                            logger.verbose( 'file checkout failed..' );
                                            logger.error( error );
                                        }
                                    } );
                                } else {
                                    return callback();
                                }
                                contents = findAndReplaceI18nInstance( contents );
                                if( argv._.includes( 'run' ) ) {
                                    file.contents = Buffer.from( contents );
                                } else {
                                    return callback();
                                }
                            }
                        } else {
                            return callback();
                        }
                    } catch ( e ) {
                        logger.error( e );
                        logger.info( file.path );
                    }

                    callback( null, file );
                } )
            ).pipe( gulp.dest( path ) )
        ).then( () => {
            resolve( viewNameHavingDataI18n );
        } ).catch( ( e ) => {
            logger.error( e );
            process.exit( 1 );
        } )
    } );
}

let findAndReplaceDataI18n = async ( pathOfProject ) => {
    const stopwatch = new logger.Stopwatch();
    let viewNameHavingDataI18n = await getViewNamesHavingDataI18n( pathOfProject );
    logSummary( viewNameHavingDataI18n );
    logger.verbose( `Conversion is completed in ${stopwatch.end()}` );
};

const argv = yargs
    .command( 'run', 'Replace all data.i18n with i18n across all *View.html files', {} )
    .command( 'dryRun', 'List all files which will be updated', {} )
    .options( {
        codePath: {
            alias: 'p',
            description: 'Dir path of project',
            demandOption: true,
            type: 'string'
        },
        awc: {
            alias: 'a',
            description: 'Specify if processing AW client code',
            type: 'boolean'
        }
    } )
    .help()
    .demandCommand( 1, 'Please provide either run or dryRun command' )
    .alias( 'help', 'h' )
    .argv;

( async () => {
    findAndReplaceDataI18n( argv.codePath );
} )();

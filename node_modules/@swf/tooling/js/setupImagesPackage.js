/* eslint-env node */

const ROOT = process.env.LERNA_ROOT_PATH;
const CORE_DIR = `${ROOT}/core`;
const fse = require( 'fs-extra' );
const gulp = require( 'gulp' );
const { stream2Promise, compileSVGToReactComponent } = require( './util' );
const through = require( 'through2' );
const rename = require( 'gulp-rename' );
const path = require( 'path' );
const { transformSync } = require( "@babel/core" );
const lookupMap = {};

//Setup images project
const setupProject = async () => {
    const projectPath = `${ROOT}/images`;
    //Create Images folder
    await fse.ensureDir( projectPath );
    //Copy .npmIgnore and .npmrc files from @swf/core
    await fse.copyFile( `${ROOT}/core/.npmrc`, `${projectPath}/.npmrc` );
    await fse.copyFile( `${ROOT}/core/.npmignore`, `${projectPath}/.npmignore` );
    await fse.ensureDir( `${projectPath}/image` );
    //Read core package.json to get version and other configs
    const coreJson = await fse.readJson( `${ROOT}/core/package.json` );
    const packageJsonContent = {
        name: "@swf/images",
        version: coreJson.version,
        description: "This repo conteins compiled SVG images from @swf/core",
        publishConfig: coreJson.publishConfig,
        author: coreJson.author,
        license: coreJson.license
    };
    await fse.writeJson( `${projectPath}/package.json`, packageJsonContent, { spaces: 4 } );
}

//Compile SVG images
const compileImages = async () => {
    const gulpSrc = gulp.src( `${CORE_DIR}/src/image/*.svg` )
        .pipe( through.obj( ( file, encoding, callback ) => {
            let fileContents = ( file.contents ).toString( encoding );
            const filePath = file.path;
            const lookupKey = `image/${path.basename( filePath )}`;
            lookupMap[ lookupKey ] = `./image/${path.basename( filePath, '.svg' )}.js`;
            compileSVGToReactComponent( fileContents, filePath ).then( result => {
                const response = transformSync( result, {
                    babelrc: false,
                    configFile: false,
                    code: true,
                    presets: [
                        [
                            require.resolve( '@babel/preset-react' )
                        ]
                    ]
                } )
                file.contents = Buffer.from( response.code );
                return callback( null, file );
            } );
        } ) )
        .pipe( rename( path => {
            return {
                dirname: path.dirname,
                basename: path.basename,
                extname: ".js"
            };
        } ) )
        .pipe( gulp.dest( `${ROOT}/images/image` ) );
    return stream2Promise( gulpSrc );
};

const createLookupJson = async () => {
    await fse.writeJson( `${ROOT}/images/lookup.json`, lookupMap );
};

const updateLernaConfig = async () => {
    const lernaJson = await fse.readJson( `${ROOT}/lerna.json` );
    lernaJson.packages.push( 'images' );
    await fse.writeJson( `${ROOT}/lerna.json`, lernaJson, { spaces: 4 } );
};

( async () => {
    await setupProject();
    await compileImages();
    await createLookupJson();
    await updateLernaConfig();
} )().catch( err => {
    console.log( err );
} );

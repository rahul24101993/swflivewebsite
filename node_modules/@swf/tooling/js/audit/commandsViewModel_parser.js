const logger = require( '../logger' );
const concat = ( a, b ) => [ ...a, ...b ];

/**
 * Get all matches of a regex in the given string
 *
 * @param {RegExp} re Regex to used
 * @param {String} s String to search
 * @returns {Array<String>} List of all matches
 */
const getAllMatches = function( re, s ) {
    const result = [];
    let m = re.exec( s );
    while( m ) {
        result.push( m[ 1 ] );
        m = re.exec( s );
    }
    return result;
};

/**
 * Dependencies detected:
 *   JS service usage (from actions)
 *   View model usage (from actions - specific to js/commandPanel.service)
 *   Command condition usage (within command and from handler)
 *   Action usage (from handler and onEvent)
 */
module.exports = {
    id: 'commandsViewModel',
    /**
     * Get the dependencies detected from the commandsViewModel
     */
    getDependencies: async( loader ) => {
        const commandsViewModel = await loader.getJson( 'commandsViewModel.json' );
        //services referenced by JSFunction / JSFunction async actions
        const js = Object.values( commandsViewModel.actions || {} )
            .filter( action => action.actionType === 'JSFunction' || action.actionType === 'JSFunctionAsync' )
            .map( action => {
                const jsonString = JSON.stringify( action, null, 2 )
                    .replace( /("deps":.*)/, logger.warnColor.underline( '$1' ) );
                return {
                    id: action.deps,
                    meta: {
                        file: loader.getPath( 'commandsViewModel.json' ),
                        sample: jsonString
                    }
                };
            } );
        //view models referenced by actions using commandPanel.service
        const viewModel = Object.values( commandsViewModel.actions || {} )
            //inputData check should not be necessary but OAR module in AW has bad action
            .filter( action => action.method === 'activateCommandPanel' && action.deps === 'js/commandPanel.service' && action.inputData )
            .map( action => {
                const firstKey = Object.keys( action.inputData )[ 0 ];
                const keyRe = new RegExp( `("${firstKey}":.*)` );
                const jsonString = JSON.stringify( action, null, 2 )
                    .replace( keyRe, logger.warnColor.underline( '$1' ) );
                return {
                    id: action.inputData[ firstKey ],
                    meta: {
                        file: loader.getPath( 'commandsViewModel.json' ),
                        sample: jsonString
                    }
                };
            } );
        //conditions used by handlers
        const handlerConditions = Object.values( commandsViewModel.commandHandlers || {} )
            .map( handler => {
                return [ 'activeWhen', 'visibleWhen', 'selectWhen', 'enableWhen' ].map( function( condType ) {
                        if( handler[ condType ] && typeof handler[ condType ] === 'object' && handler[ condType ].condition ) {
                            const conditionName = handler[ condType ].condition.split( '.' ).slice( -1 )[ 0 ];
                            const jsonString = JSON.stringify( handler, null, 2 )
                                .replace( conditionName, logger.warnColor.underline( conditionName ) );
                            return {
                                id: conditionName,
                                meta: {
                                    file: loader.getPath( 'commandsViewModel.json' ),
                                    sample: jsonString
                                }
                            };
                        }
                    } )
                    .filter( x => x );
            } )
            .reduce( concat, [] );
        //conditions used by other conditions
        /**
         * Get all nested conditions from a condition expression. See unit tests for examples.
         *
         * @param {String|Object} s condition expression
         * @returns {String[]} nested conditions
         */
        const getConditions = function( s ) {
            const re = /conditions\.([a-zA-Z]\w*)(\W*|$)/g;
            if( typeof s === 'string' ) {
                //if string just get regex matches
                const matches = getAllMatches( re, s );
                return matches.map( m => {
                    return {
                        id: m,
                        meta: {
                            file: loader.getPath( 'commandsViewModel.json' ),
                            sample: s.replace( `conditions.${m}`, logger.warnColor.underline( `conditions.${m}` ) )
                        }
                    };
                } );
            }
            if( typeof s === 'object' ) {
                //if object recursively seach and combine results
                return Object.values( s )
                    .reduce( ( acc, nxt ) => acc.concat( getConditions( nxt ) ), [] );
            }
            return [];
        };
        const reusedConditions = Object.values( commandsViewModel.conditions || {} )
            .map( getConditions )
            .reduce( concat, [] );
        const commandConditions = [ ...handlerConditions, ...reusedConditions ];
        //actions used by handlers
        const handlerActions = Object.values( commandsViewModel.commandHandlers || {} )
            .filter( x => x.action )
            .map( handler => {
                const jsonString = JSON.stringify( handler, null, 2 )
                    .replace( /("action":.*)/, logger.warnColor.underline( '$1' ) );
                return {
                    id: handler.action,
                    meta: {
                        file: loader.getPath( 'commandsViewModel.json' ),
                        sample: jsonString
                    }
                };
            } );
        //actions used by onEvent
        const eventActions = ( commandsViewModel.onEvent || [] )
            .filter( x => x.action )
            .map( eventListener => {
                const jsonString = JSON.stringify( eventListener, null, 2 )
                    .replace( /("action":.*)/, logger.warnColor.underline( '$1' ) );
                return {
                    id: eventListener.action,
                    meta: {
                        file: loader.getPath( 'commandsViewModel.json' ),
                        sample: jsonString
                    }
                };
            } );
        const commandActions = [ ...handlerActions, ...eventActions ];
        return {
            js,
            'view model': viewModel,
            'command action': commandActions,
            'command condition': commandConditions
        };
    }
};

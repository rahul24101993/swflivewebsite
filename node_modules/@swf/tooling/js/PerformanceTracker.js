const { performance, PerformanceObserver } = require( "perf_hooks" )
const fs = require( 'fs' );
const v8 = require( 'v8' );
class PerformanceTracker {
    constructor() {
        this.perfObserver = new PerformanceObserver( ( items, observer ) => {
            this.printPerformanceLog( items.getEntries() );
            observer.disconnect();
        } );
    }
    printPerformanceLog( performanceEntries ) {
        console.log( "\n*****Performance Testing Logs*****\n" )

        const heapUsed = process.memoryUsage().heapUsed / 1048576;
        const stats = {
            'duration': performanceEntries[ 0 ].duration.toFixed( 2 ) + ' ms',
            'memoryUsage': heapUsed.toFixed( 2 ) + ' MB'
        }
        console.table( stats );
    }
    performPerformanceTestingForGivenSyncFunction( func ) {
        this.perfObserver.observe( { entryTypes: [ 'function' ], buffered: true } );
        const perfWrapper = performance.timerify( func )
        perfWrapper();
    };
    async performPerformanceTestingForGivenAsyncFunction( func ) {
        this.perfObserver.observe( { entryTypes: [ 'measure' ], buffered: true } );
        performance.mark( "performance-testing-start" )
        await func()
        performance.mark( "performance-testing-end" )
        performance.measure( "performance-testing", "performance-testing-start", "performance-testing-end" )
    };
    createHeapSnapshot() {
        const snapshotStream = v8.getHeapSnapshot();
        const fileName = `${process.cwd()}/out/${Date.now()}.heapsnapshot`;
        const fileStream = fs.createWriteStream( fileName );
        snapshotStream.pipe( fileStream );
        console.log( `heap snapshot is saved in ${fileName}` )
    }
}

module.exports = PerformanceTracker;

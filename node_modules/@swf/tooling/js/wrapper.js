// Copyright (c) 2021 Siemens
/* eslint-disable sonarjs/cognitive-complexity */

const logger = require( './logger' );
const { spawn } = require( './util' );

const cmdSuffix = process.platform === 'win32' && '.cmd' || ''; // path.join( process.env.NODEJS_HOME, 'npm.cmd' );
const msgPrefix = '+ ';

const stopwatchAll = new logger.Stopwatch();
let cycleCount = -1;

( async function() {
    const args = [];
    for( let ndx = 2; ndx < process.argv.length; ndx++ ) {
        args.push( process.argv[ ndx ] );
    }

    let tail = false;
    let stopwatchBuild;
    let devserver = false;
    let syntaxError = false;
    const code = await spawn( `react-app-rewired${cmdSuffix}`, args, null, null, line => {
        if( /SyntaxError/.test( line ) ) {
            syntaxError = true;
        } else if( /Creating an optimized production build.../.test( line ) ) {
            stopwatchBuild = new logger.Stopwatch();
        } else if( /^Compiled successfully/.test( line ) ) {
            if( devserver ) {
                cycleCount++;
            } else {
                tail = true; // output this line but nothing more
            }
            if( stopwatchBuild ) { logger.success( `${line}${stopwatchBuild.end()}` ); }
            return true;
        } else if( /^To ignore, add/.test( line ) ) {
            if( devserver ) {
                cycleCount++;
            } else {
                tail = true; // output this line but nothing more
            }
            if( stopwatchBuild ) { logger.warn( `production build complete with issues${stopwatchBuild.end()}` ); }
            return true;
        } else if( /^Starting the development server/.test( line ) ) {
            stopwatchBuild = new logger.Stopwatch();
            devserver = true;
        } else if( /^Compiling\.\.\./.test( line ) ) {
            stopwatchBuild = new logger.Stopwatch();
            logger.info( `Change detected. ${line}` );
            return true;
        }
        return tail || line.trim().length === 0;
    }, msgPrefix );
    if( code !== 0 || syntaxError ) {
        process.exitCode = code;
        throw Error();
    } else {
        logger.success( `Successful${stopwatchAll.end()}` );
    }
} )().catch( err => {
    process.exitCode = process.exitCode || 1;
    logger.error( `FAILED! Exit code = ${process.exitCode}${stopwatchAll.end()}` );
} );

process.on( 'SIGINT', () => {
    logger.warn( 'SIGINT' );
    if( cycleCount > -1 ) {
        logger.verbose( `development server refreshed ${cycleCount} times` );
    }
    logger.verbose( `Runtime${stopwatchAll.end()}` );
    process.exitCode = 2;
} );

const yargs = require( 'yargs' );
const gulp = require( 'gulp' );
const util = require( './util' );
const tap = require( 'gulp-tap' );
const logger = require( './logger' );

let viewModelConverted = [];

let getDirectiveName = ( filePath ) => {
    let splittedString = filePath.split( '\\' );
    return splittedString[ splittedString.length - 1 ];
};

let logSummary = () => {
    logger.info( `${viewModelConverted.length} files are converted`, '', true );
    viewModelConverted.forEach( ( fileName ) => {
        logger.info( fileName, '', true );
    } );
};

let getVMNamesHavingImports = ( path ) => {
    let viewModelNameAndContentMap = new Map();
    return new Promise( ( resolve, reject ) => {
        util.stream2Promise( gulp.src( `${path}/**/*ViewModel.json` )
            .pipe(
                tap( file => {
                    try{
                        let componentName = getDirectiveName( file.path );
                        let contents =  file.contents.toString( 'utf8' );
                        if( contents.length ) {
                            let importIndex = contents.indexOf( '"imports": [' );
                            let importCloseIndex = contents.indexOf( ']', importIndex );
                            importCloseIndex += 2;
                            while( contents[importCloseIndex] !== '"' && contents[importCloseIndex] !== '}' ) {
                                importCloseIndex++;
                            }
                            let newContent;
                            if( importIndex !== -1 ) {
                                if( contents[importCloseIndex] === '}' ) {
                                    while( contents[importIndex] !== ',' && contents[importIndex] !== '{' ) {
                                        importIndex--;
                                    }
                                }
                                if( contents[importIndex] === '{' ) {
                                    importIndex++;
                                }
                                newContent = contents.substring( 0, importIndex ) + contents.substring( importCloseIndex );
                                file.contents = Buffer.from( newContent );
                                viewModelConverted.push( componentName );
                                viewModelNameAndContentMap.set( componentName, newContent );
                            }
                        }
                    } catch( e ) {
                        logger.error( e );
                        logger.info( file.path );
                    }
                } )
            ).pipe( gulp.dest( path ) )
        ).then( () => {
            resolve( viewModelNameAndContentMap );
        } ).catch( ( e ) => {
            logger.error( e );
            process.exit( 1 );
        } );
    } );
};

let removeImportFieldVM = async( pathOfProject ) => {
    const stopwatch = new logger.Stopwatch();
    let viewModelNameAndContentMap = await getVMNamesHavingImports( pathOfProject );
    logSummary();
    logger.verbose( `Conversion is complete ${stopwatch.end()}` );
};

const argv = yargs
    .command( 'run', 'give path to viewmodel folder', {} )
    .options( {
        codePath: {
            alias: 'p',
            description: 'Dir path of project',
            demandOption: true,
            type: 'string'
        }
    } )
    .help()
    .demandCommand( 1, 'Please provide either run or dryRun command' )
    .alias( 'help', 'h' )
    .argv;

( async() => {
    removeImportFieldVM( argv.codePath );
} )();

const util = require( __dirname + '/util' );
const logger = require( __dirname + '/logger' );
const generator = require( __dirname + '/generator' );

const readline = require( 'readline' );
const rl = readline.createInterface( process.stdin, process.stdout );
rl.question( 'Enter solution name : ', function( solutionName ) {
    rl.close();

    const msgPrefix = 'solutionCreator: ';
    const moduleName = 'helloModule';

    // Ensure a 'src' directory exists
    util.mkdir( 'src' )
        .then( function() {
            return generator.run( [ '-t', 'solution', '-n', solutionName ] );
        }, function() {
            // error creating module
            logger.error( 'solution creation failed', msgPrefix );
        } )
        .then( function() {
            // Create a workspace
            return generator.run( [ '-t', 'module', '-n', moduleName ] );
        }, function() {
            // error creating module
            logger.error( 'module creation failed', msgPrefix );
        } )
        .then( function() {
            // Create a workspace
            return generator.run( [ '-t', 'workspace', '-id', 'newWorkspace', '-n', 'newWorkspace', '-wt', 'Inclusive', '-dp', 'hello', '-module', moduleName ] );
        }, function() {
            // error creating module
            logger.error( 'workspace creation failed', msgPrefix );
        } )
        .then( function() {
            // Create a state
            return generator.run( [ '-t', 'state', '-n', 'hello', '-url', 'hello', '-view', 'hello', '-module', moduleName ] );
        }, function() {
            // error creating module
            logger.error( 'states creation failed', msgPrefix );
        } )
        .then( function() {
            // Create an authenticator
            return generator.run( [ '-t', 'authenticator', '-n', 'helloAuthenticator', '-module', moduleName ] );
        }, function() {
            // error creating module
            logger.error( 'authenticator creation failed', msgPrefix );
        } )
        .then( function() {
            // Add a build.json file
            const buildJson = {
                srcPaths: [
                    'node_modules/@swf/core/@(repo|src|test)',
                    'src'
                ]
            };
            return util.writeFile( 'build.json', JSON.stringify( buildJson, null, 4 ) );
        } )
        .then( function() {
            // Provide feedback that solution has been created
            logger.info( 'Generated starter solution ' + solutionName, msgPrefix );
            logger.info( 'Run the commands below:', msgPrefix );
            logger.info( ' To install packages: npm install', msgPrefix );
            logger.info( ' To build: npm run build site_' + solutionName, msgPrefix );
            logger.info( ' To run: npm run start', msgPrefix );
        } ).catch( ( error ) => {
            logger.error( error, msgPrefix );
            logger.error( 'Are you running Solution Creator command in a directory which has \'ROOT\' set? This probably means, the directory already has a solution.', msgPrefix );
            logger.error( 'Solution Creator command should be run in a fresh directory where \'ROOT\' is not set. Create a new directory for running the solution creator.', msgPrefix );
        } );
} );

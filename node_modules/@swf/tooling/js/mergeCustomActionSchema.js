const _ = require( 'lodash' );
const logger = require( './logger' );

/*
 * Validate the merged custom action template over existing apollo schema
 *
 * @param {Object} customActionTemplateSchema - custom actionTemplate schema object
 * @param {Object} schema - schema object
 * @param {Object} issues - object containing the array of warnings and issues to add to.
 * @return {Boolean} true/false
 */
module.exports.isCustomActionTemplateMergeable = function( customActionTemplateSchema, schema, issues ) {
    // check whether it's mergeable or not
    let isMergeable = true;

    const existingActionList = schema.definitions.actionDef.oneOf;
    const newActionList = customActionTemplateSchema.definitions.actionDef.oneOf;

    // check whether the name of custom actionType is conflicting with Apollo's actionType
    let commonActions = _.intersection( existingActionList.map( function( action ) {
        return action.if.properties.actionType.const;
    } ), newActionList.map( function( action ) {
        return action.if.properties.actionType.const;
    } ) );

    if( commonActions && commonActions.length ) {
        logger.error( 'Error in custom action schema : Overriding existing Apollo\'s ActionType Name !!  ' + commonActions );
        return false;
    }

    // check whether the definition of custom actionType is conflicting with Apollo's actionType
    _.forIn( customActionTemplateSchema.definitions, function( value, key ) {
        if( schema.definitions[ key ] && key !== 'actionDef' ) {
            isMergeable = false;
            return false;
        }
    } );

    if( !isMergeable ) {
        issues.errors.push( 'Error in custom action schema : Overriding Apollo\'s ActionType Definitions !!' );
        return false;
    }
    return true;
};

/**
 * merging custom actionTemplate with existing schema
 *
 * @param {Object} customActionTemplateSchema - custom actionTemplate schema object
 * @param {Object} schema - schema object
 * @param {Object} issues - object containing the array of warnings and issues to add to.
 * @return {Boolean} true/false
 */
module.exports.mergeCustomActionTemplateWithApolloActionTemplate = function( customActionTemplateSchema, schema, issues ) {
    const existingActionList = _.cloneDeep( schema.definitions.actionDef.oneOf );
    const newActionList = _.cloneDeep( customActionTemplateSchema.definitions.actionDef.oneOf );

    if( module.exports.isCustomActionTemplateMergeable( customActionTemplateSchema, schema, issues ) ) {
        _.merge( schema.definitions, customActionTemplateSchema.definitions );
        schema.definitions.actionDef.oneOf = _.union( newActionList, existingActionList );
        return schema;
    }

    return false;
};

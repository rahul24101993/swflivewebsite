const { existsSync } = require( 'fs' );
const gulp = require( 'gulp' );
const tap = require( 'gulp-tap' );

const logger = require( './logger' );
const { stream2Promise, writeFile } = require( './util' );
const { createCache, genTasks } = require( './genTasks' );

const trace = logger.createTrace( __filename );

let buildJson;
if( existsSync( process.cwd() + '/build.json' ) ) {
    buildJson = require( `${process.cwd()}/build.json` );
} else if( existsSync( `${process.cwd()}/src/build.json` ) ) {
    buildJson = require( `${process.cwd()}/src/build.json` );
}

const stopwatch = new logger.Stopwatch();

let srcPaths = [
    'build.json',
    '!out/**',
    '!**/conf/generator/**'
];
if( buildJson && buildJson.srcPaths ) {
    for( const srcPath of buildJson.srcPaths ) {
        if( /^!/.test( srcPath ) ) {
            srcPaths.push( srcPath );
        } else {
            srcPaths.push( `${srcPath}/**/@(kit|module|site_*|war_*).json` );
        }
    }
} else {
    buildJson = {
        srcPaths: [
            'node_modules/@swf/core/@(repo|src|test)',
            'src'
        ]
    };
    logger.warn( `No build.json found at root of project. Please add one with srcPaths to speed up createCache.\n${JSON.stringify( buildJson, null, 4 )}` );
    srcPaths.push( '**/@(kit|module|site_*).json' );
}
srcPaths.sort();
trace( 'srcPaths', srcPaths );

let cache;
const gulpSrc = gulp.src( srcPaths, { follow: true } )
    .pipe( tap( file => {
        trace( 'processing', file.path );
    } ) )
    .pipe( createCache() );
stream2Promise( gulpSrc ).then( () => {
    cache = genTasks();
    return writeFile( 'out/generatedTasks.js', cache.taskFile );
} ).then( () => {
    delete cache.taskFile;
    return writeFile( 'out/cache.json', JSON.stringify( cache, null, 2 ) );
} ).then( () => {
    logger.success( `Generation complete${stopwatch.end()}` );
} ).catch( logger.pipeErrorHandler );

/* eslint-disable max-len */
/* eslint-disable complexity */
/* eslint-disable sonarjs/cognitive-complexity */
// Copyright (c) 2020 Siemens
/* eslint-env node */

const {
    mapExprToAwParse,
    mapExprToAwFilter,
    BaseIndent,
    Node
} = require( './utils' );
const utils = require( '../rewired/utils' );

const nodeName = 'AW-DEFAULT-GROUP-CELL';

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE && node.nodeName === nodeName;
};

/**
 * Compile view input to target framework format
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string
 */
const compile = ( node, context ) => {
    // process indent
    let level = context.level;
    let indent = BaseIndent.repeat( level );

    let elem = node;
    let compName = utils.kebabCaseToPascalCase( elem.nodeName.toLowerCase() );

    // before compile
    /*
<aw-list-filter prop='data.filterBox2' dataprovider='dataProviders.performSearch2' is-group-list='true'>
    <aw-default-group-cell item="item" group-by="region">
        <group-header-cell>
            <aw-header-cell title="{{item.region}}"></aw-header-cell>
            <aw-header-cell title="{{item.region}}/{{item.Title}}"></aw-header-cell>
            <div>{{item.region}}/{{item.Title}}</div>
            <aw-command-panel-section caption="{{item.Title}}" context="item">
            </aw-command-panel-section>
        </group-header-cell>
        <cell>
            <aw-country-cell vmo="item"></aw-country-cell>
        </cell>
    </aw-default-group-cell>
</aw-list-filter>
*/
    // after compile
    /*
<AwListFilter>
    {( { item, index } )=>{
        return <AwDefaultGroupCell item={item} key={index} groupBy='region'>
            <GroupHeaderCell>
                <AwHeaderCell title={item.region}>
                </AwHeaderCell>
                <AwHeaderCell title={`${item.region}/${item.Title} )}`}>
                </AwHeaderCell>
                <div>
                    {item.region}/{item.Title}}
                </div>
                <AwCommandPanelSection caption={item.Title} context={item}>
                </AwCommandPanelSection>
            </GroupHeaderCell>
            <Cell>
                <AwCountryCell vmo={item}>
                </AwCountryCell>
            </Cell>
        </AwDefaultGroupCell>;
    } }
</AwListFilter>
*/
    let contents = [];
    let tagLine = `${indent}`;
    let groupBy = node.getAttribute( 'group-by' );

    let children = mapChildNodes( elem, context );
    tagLine += `<${compName} item={item} key={index} groupBy="${groupBy}">
            ${children}
        </${compName}>
       `;
    contents.push( tagLine );

    return contents;
};

const mapChildNodes = ( node, context ) => {
    // process indent
    let contents = [];
    const childLength = node.childNodes.length;
    if( childLength > 0 ) {
        for( let i = 0; i < childLength; i++ ) {
            let childDomNode = node.childNodes[ i ];
            let childContents = context.compileFn( childDomNode, {
                ...context,
                level: context.level + 1,
                isDefaultGroupCell: true,
                locals: {
                    ...context.locals,
                    item: true,
                    index: true
                }
            } );

            if( childContents ) {
                contents.push( childContents.join( '\n' ) );
            }
        }
    }
    return contents.join( '\n' );
};

module.exports = {
    when,
    compile
};

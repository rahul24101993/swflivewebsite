/* eslint-disable complexity */
/* eslint-disable sonarjs/cognitive-complexity */
// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * exist-when Node Compiler
 */
const {
    mapExprToAwParse,
    mapExprToAwFilter,
    BaseIndent,
    Node
} = require( './utils' );

const Attr = 'aw-repeat';

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE &&
        node.hasAttribute( Attr );
};

/**
 * Compile view input to target framework format
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string
 */
const compile = ( node, context ) => {
    // process indent
    let contents = [];
    let level = context.level !== undefined ? context.level : 0;
    let indent = BaseIndent.repeat( level );
    let expr = node.getAttribute( Attr );

    node.removeAttribute( Attr );

    // revisitme - blindly ignore '|' with filtering, discussion and further work is required
    //  aw-repeat="item : data.categories.refineCategories | filterInFiltersSearch :data.filterInFilterBox.dbValue:this track by $index">
    // let match = expr.match( /^\s*(\S+)(\s+in\s+|\s*:\s*)(\S+)/ );
    let match = expr.match( /^\s*(\S+)(\s+in\s+|\s*:\s*\s*)(\S+)((\s*\|\s*)(\S+)(\s*:\s*)(\S+))*/ );
    if( match ) {
        let varExpr = match[ 1 ];
        let setExpr = match[ 3 ];
        let subContentString = '';
        if( level === 1 ) {
            contents.push( '<Fragment>' );
        }
        if( match[ 5 ] ) {
            subContentString = mapExprToAwFilter( expr.split( '|' ).splice( 1 ), setExpr, context, true );
        }
        if( subContentString.length > 0 ) {
            contents.push( `${indent}${context.isExprContext ? '' : '{ '}${subContentString}.map( ( [ $index, ${varExpr} ] ) => (` );
        } else {
            contents.push( `${indent}${context.isExprContext ? '' : '{ '}Object.entries( ${mapExprToAwParse( setExpr, { ...context.locals } )} || [] ).map( ( [ $index, ${varExpr} ] ) => (` );
        }

        let childContents = context.compileFn( node, {
            ...context,
            level: context.level + 1,
            isRepeatParent: true,
            childExp: varExpr,
            parentExp: setExpr,
            index: true,
            isExprContext: true,
            locals: {
                ...context.locals,
                [ varExpr ]: true,
                $index: true
            }
        } );

        contents.push( childContents.join( '\n' ) );

        contents.push( `${indent}) )${context.isExprContext ? '' : ' }'}` );
        if( level === 1 ) {
            contents.push( '</Fragment>' );
        }
    } else {
        throw Error( `Wrong ${Attr} input as ${JSON.stringify( expr )}. Should be 'aw-repeat="var:setVar"'` );
    }

    return contents;
};

module.exports = {
    when,
    compile
};

/* eslint-disable complexity */
/* eslint-disable sonarjs/cognitive-complexity */
// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * aw-highlight-property-html Node Compiler
 */
const {
    Node
} = require( './utils' );

const Attr = 'aw-highlight-property-html';
const Attr1 = 'display-val';
const Attr2 = 'aw-parse-html';

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE &&
        ( node.hasAttribute( Attr ) || node.hasAttribute( Attr1 ) || node.hasAttribute( Attr2 ) );
};

/**
 * Compile view input to target framework format
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    // indent in text node will add noise
    let exprHighLight = node.hasAttribute( Attr );
    if( exprHighLight ) {
        exprHighLight = node.getAttribute( Attr );
        node.removeAttribute( Attr );
        node.setAttribute( Attr + '-hoc', `{{${exprHighLight}}}` );
        let expr1 = node.getAttribute( Attr1 );
        if( expr1 ) {
            expr1 = expr1.trim();
            node.removeAttribute( Attr1 );
            node.setAttribute( Attr1 + '-hoc', `{{${expr1}}}` );
        }
    }
    let expr2 = node.hasAttribute( Attr2 );
    if( expr2 ) {
        expr2 = node.getAttribute( Attr2 );
        node.removeAttribute( Attr2 );
        expr2 = expr2.trim();
        node.setAttribute( Attr2 + '-hoc', `{{${expr2}}}` );
        let expr3 = node.getAttribute( Attr1 );
        if( expr3 ) {
            expr3 = expr3.trim();
            node.removeAttribute( Attr1 );
            node.setAttribute( Attr1 + '-hoc', `{{${expr3}}}` );
        }
    }

    return context.compileFn( node, context );
};

module.exports = {
    when,
    compile
};

/* eslint-disable complexity */
/* eslint-disable sonarjs/cognitive-complexity */
// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * depend-on Node Compiler
 */
const {
    Node
} = require( './utils' );

const Attr = 'depend-on';
const Attr1 = 'on-change';

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE &&
        node.hasAttribute( Attr );
};

/**
 * Compile view input to target framework format
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    let exprDependOn = node.getAttribute( Attr );
    if( exprDependOn ) {
        exprDependOn = exprDependOn.replace( /(\r\n|\n|\r)/gm, '' ).trim();
        if( !exprDependOn.startsWith( 'data' ) ) {
            exprDependOn = 'data.' + exprDependOn;
        }
        node.removeAttribute( Attr );
        node.setAttribute( Attr + '-hoc', `{{${exprDependOn}}}` );
        let expr1 = node.getAttribute( Attr1 );
        if( expr1 ) {
            expr1 = expr1.trim();
            if( !expr1.startsWith( 'actions' ) ) {
                expr1 = 'actions.' + expr1;
            }
            node.removeAttribute( Attr1 );
            node.setAttribute( Attr1 + '-hoc', `{{${expr1}}}` );
        }
    }
    return context.compileFn( node, context );
};

module.exports = {
    when,
    compile
};

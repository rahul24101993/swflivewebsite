/* eslint-disable complexity */
/* eslint-disable sonarjs/cognitive-complexity */
// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * exist-when Node Compiler
 */
const {
    Node
} = require( './utils' );

const utils = require( '../rewired/utils' );
const _ = require( 'lodash' );

const Attr = 'extended-tooltip';
const Attr1 = 'ext-tooltip-data';

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE &&
        node.hasAttribute( Attr );
};

/**
 * Compile view input to target framework format
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    let helperAttrs = [ 'extended-tooltip-context' ];
    // indent in text node will add noise
    let hasExtendedTooltip = node.hasAttribute( Attr );
    let exprToolTip = node.getAttribute( Attr );
    if( hasExtendedTooltip ) {
        node.removeAttribute( Attr );
        // extended-tooltip can be used in two ways 1. as literal string 2. As object
        // <div extended-tooltip="abc"/> here abc is assumed as a view name
        // <div extended-tooltip="data.abc"/> Here in the abc section of the viewmodel, the actual viewname
        // 1st usecase becomes <div ExtendedTooltip='abc'/>
        // 2nd usecase becomes <div ExtendedTooltip={data.abc}/>
        // node.removeAttribute( Attr );
        // revisitme : extended tooltip usages are complex and not supported yet hence disabling the support for now
        //node.setAttribute( Attr + '-hoc', `{{${exprToolTip}}}` );
        //node.setAttribute( Attr1 + '-hoc', '{{data}}' );
        node.setAttribute( Attr1, "data" );
        node.setAttribute( Attr + '-hoc', `${exprToolTip.indexOf( '.' ) === -1 ? exprToolTip : '{{' + exprToolTip + '}}'}` );
    }
    return context.compileFn( node, context );
};

module.exports = {
    when,
    compile
};

// Copyright (c) 2020 Siemens
/* eslint-env node */
// SONG
/**
 * aw-graph element Node Compiler
 */
const {
    mapChildNodes,
    mapExprToAwParse,
    BaseIndent,
    Node
} = require( './utils' );

const nodeMap = {
    // 'AW-GRAPH': 'AwGraph',
    'AW-GRAPHING-COMPONENT': 'AwGraphingComponent'
};

const attrToIgnore = [ 'legend-data', 'is-main', 'graph-model', 'update-hook' ]

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE && Object.keys( nodeMap ).indexOf( node.nodeName ) > -1;
};

/**
 * Compile view input to target JSX
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    let tagName = nodeMap[ node.nodeName ];

    // process indent
    let level = context.level;
    let indent = BaseIndent.repeat( level );

    let elem = node;

    // old way
    // <aw-graph graph-model="data.graphModel" legend-data="data.legend" is-main="false"/>

    // new way
    // <AwGraph graphModel= {xxx} legendData={xxx} updateHook={ {data, dispatch, conditions} } isMain={false}/>
    let updateHook = elem.hasAttribute( 'update-hook' ) ? elem.getAttribute( 'update-hook' ) : null;

    let contents = [];
    let tagLine = `${indent}<${tagName}`;
    let graphModel = node.getAttribute( 'graph-model' );
    tagLine += ` graphModel={${mapExprToAwParse( graphModel, context.locals )}}`;

    let legendData = node.getAttribute( 'legend-data' );
    if( legendData ) {
        tagLine += ` legendData={${mapExprToAwParse( legendData, context.locals )}}`;
    }

    let isMain = node.getAttribute( 'is-main' );
    if( isMain ) {
        tagLine += ` isMain={${isMain !== 'false'}}`;
    }

    let hookValue = updateHook || '{data, conditions, dispatch }';
    tagLine += ` updateHook={${hookValue}}`;
    tagLine += ` ></${tagName}>`;
    contents.push( tagLine );

    return contents;
};

module.exports = {
    when,
    compile
};

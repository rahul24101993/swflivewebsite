// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * Compiler Design
 * https://github.com/Few-UI/few/blob/master/src/few-view-factory.js
 *
 * - Compiler Factory
 *   - define:  add compiler to array, order matters
 *   - compile: pick proper compiler and compile
 *
 * - Compiler
 *   - compile
 *     - input
 *       - node: raw DOM Node
 *       - ctx
 *         - deps: custom element dependency as key-value pair ( value dosen't matter for now )
 *         - level: current node level in the compile tree
 *         - index: curren node index in siblings
 *
 *     - output
 *       - contents:  text result as string array (line based)
 *       - deps: new dependencies defined by aw-include
 *       - scope: other compile ctx you want to pass out. For example:
 *         - slotScope: is current element has aw-transclude
 *
 *   - when
 *     - condition to decide if current compiler is valid for based on the input
 *
 *   - name: name of the compiler ( not sure at this moment )
 */

/**
 * create compiler
 * @param {array} procs procs
 * @returns {string} JSX template as string
 */
const createCompiler = procs => {
    const _procs = [
        // dummy proc
        {
            when: () => false,
            compile: () => null
        },
        ...procs
    ];

    return {
        add: proc => _procs.push( proc ),
        compile: ( node, context ) => ( _procs.find( e => e.when( node, context ) ) || _procs[ 0 ] ).compile( node, context )
    };
};

module.exports = createCompiler;

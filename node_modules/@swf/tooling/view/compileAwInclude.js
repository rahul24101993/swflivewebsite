// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * aw-include element Node Compiler
 */
const {
    BaseIndent,
    mapChildNodes,
    mapExprToAwParse,
    Node,
    evaluateAttr,
    getCompName
} = require( './utils' );

const utils = require( '../rewired/utils' );

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeName === 'AW-INCLUDE' && node.nodeType === Node.ELEMENT_NODE; //aw-include
};

/**
 * Compile view input to target JSX
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    // process indent
    let level = context.level !== undefined ? context.level : 0;
    let indent = BaseIndent.repeat( level );

    let viewDesc = null;

    let elem = node;

    let compName = utils.kebabCaseToPascalCase( elem.nodeName.toLowerCase() );

    if( utils.getViewDep( compName ) ) {
        viewDesc = utils.getViewDep( compName ).props;
    }

    let eleName = getCompName( elem );

    let contents = [];
    let currLine = [];

    currLine.push( `${indent}<${eleName}` );

    let viewName = node.getAttribute( 'name' );

    let hasViewId = node.hasAttribute( 'view-id' );
    if( !hasViewId ) {
        let match = viewName.startsWith( '{{' ) && viewName.endsWith( '}}' );
        if( match ) {
            let expr = mapExprToAwParse( viewName.substr( 2, viewName.length - 4 ), context.locals );
            currLine.push( `viewId={${expr}}` );
        } else {
            currLine.push( `viewId="${viewName}"` );
        }

        currLine.push( `viewPath={${mapExprToAwParse( 'viewPath', context.locals )}}` );
    }

    currLine = evaluateAttr( elem, currLine, context, viewDesc, [] );

    contents.push( currLine.join( ' ' ) + '>' );

    // process children
    contents = contents.concat( mapChildNodes( elem, {
        ...context,
        index: false
    } ) );
    // end tag

    contents.push( `${indent}</${eleName}>` );

    return contents;
};

module.exports = {
    when,
    compile
};

// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * aw-chip element Node Compiler
 */
const {
    mapChildNodes,
    mapExprToAwParse,
    BaseIndent,
    Node,
    evaluateAttr,
    getCompName
} = require( './utils' );

const utils = require( '../rewired/utils' );

const attrToIgnore = [ 'dataprovider' ];

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node ) => {
    return node.nodeType === Node.ELEMENT_NODE &&
        node.nodeName === 'AW-CHIP-LIST';
};

/**
 * Compile view input to target JSX
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    // process indent
    let level = context.level;
    let indent = BaseIndent.repeat( level );

    let elem = node;

    // old way
    // <aw-chip-list prop="xxx" dataprovider="xxx" chip="xxx" action="xxx" button-type="xxx" ui-icon-action="xxx" >
    //     </XXX>
    // </aw-chip-list>

    // new way
    // <AwChipList prop= {xxx} dataProvider="xxx" chip= {xxx} action={actions.xxx} buttonType={xxx} uiIconAction={xxx} chipCondition={ {conditions} }>
    //      </XXX>
    // </AwChipList>

    let compName = utils.kebabCaseToPascalCase( elem.nodeName.toLowerCase() );

    let viewDesc = null;

    if( utils.getViewDep( compName ) ) {
        viewDesc = utils.getViewDep( compName ).props;
    }

    let eleName = getCompName( elem );

    let contents = [];
    let currLine = [];

    currLine.push( `${indent}<${eleName}` );

    let dataProviderName = node.getAttribute( 'dataprovider' ).split( 'dataProviders.' )[ 1 ];

    if( dataProviderName ) {
        currLine.push( ` dataprovider={dataProviders.${dataProviderName}}` );
    }

    let conditionValue = '{conditions}';
    let parsedConditionVal = mapExprToAwParse( conditionValue, context.locals );
    currLine.push( ` chipCondition={${parsedConditionVal}}` );

    currLine = evaluateAttr( elem, currLine, context, viewDesc, attrToIgnore );

    contents.push( currLine.join( ' ' ) + '>' );

    // process children
    contents = contents.concat( mapChildNodes( elem, context ) );

    // end tag
    contents.push( `${indent}</${eleName}>` );

    return contents;
};

module.exports = {
    when,
    compile
};

// Copyright (c) 2020 Siemens
/* eslint-env node */

/**
 * aw-list element Node Compiler
 */
const {
    mapChildNodes,
    BaseIndent,
    Node
} = require( './utils' );

/**
 * Evaluate condition for current compiler
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {boolean} true if condition matches
 */
const when = ( node, context ) => {
    let keys = Object.keys( context.popupCompileContext || {} );
    let action = node.getAttribute && node.getAttribute( 'action' );
    if( action && keys.indexOf( action ) > -1 ) {
        return true;
    }
};

/**
 * Compile view input to target JSX
 * @param {Node} node input DOM Node
 * @param {context} context input context
 * @returns {Array} compile output as string array
 */
const compile = ( node, context ) => {
    // process indent
    let level = context.level;
    let indent = BaseIndent.repeat( level );
    let action = node.getAttribute( 'action' );
    const { popupCompileContext } = context;

    // old way
    // <Any prop="data.box1" action="displayPopup"></Any>


    // new way
    // <AwPopupWrapper popup={actions.displayPopup__popupAction}>
    //     <Any {...getField('data.box1', fields)} action={actions.displayPopup__popupAction.show}>
    //     </Any>
    // </AwPopupWrapper>

    let contents = [];
    // add wrapper
    let tagLine = `${indent}<AwPopupWrapper popup={actions.${popupCompileContext[action]}}>`;
    contents.push( tagLine );

    // refresh to new popup action
    // again process node with other default compile
    let show = popupCompileContext.requireContext ? 'showWithContext({ context:{data, i18n} })' : 'show';
    node.setAttribute( 'action', `${popupCompileContext[action]}.${show}` );
    contents = contents.concat( context.compileFn( node, {
        ...context,
        level: level + 1,
        // assume it will be in JSX context
        isExprContext: false
    } ) );

    // end tag
    contents.push( `${indent}</AwPopupWrapper>` );

    return contents;
};

module.exports = {
    when,
    compile
};

/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );

const messages = {
    nameInputMsg: logger.infoColor( '\nGive the theme a name. This will be used as the title of your theme and scss file.\n' ) + 'Theme name: ',
    colorInputMsg: logger.infoColor( `
Give the theme a base color. This will be used as the primary color of your theme with different shades as secondary colors.
This can be a CSS color name such as ${logger.nameColor( 'red' )} or a hex color such as ${logger.nameColor( '#FF0000' )} \n` ) + 'Color: '
};

const filesToCreate = {
    'ui-__theme-name__.scss': {
        dir: 'src/'
    }
};

// This was annoying to track down
const cssColorNameList = [ 'AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet',
    'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan',
    'DarkGoldenRod', 'DarkGray', 'DarkGrey', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'Darkorange', 'DarkOrchid', 'DarkRed', 'DarkSalmon',
    'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkSlateGrey', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DimGrey', 'DodgerBlue',
    'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Grey', 'Green', 'GreenYellow', 'HoneyDew',
    'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan',
    'LightGoldenRodYellow', 'LightGray', 'LightGrey', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSlateGrey',
    'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple',
    'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite',
    'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff',
    'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver',
    'SkyBlue', 'SlateBlue', 'SlateGray', 'SlateGrey', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White',
    'WhiteSmoke', 'Yellow', 'YellowGreen'
];

module.exports.name = 'theme';
module.exports.description =
    `Generates a theme.
A theme can change the colors that are used in your site. The default themes are Light and Dark`;
module.exports.execute = function() {
    return generatorUtils.getModule().then( function( targetModuleJson ) {
        // Build commandsViewModel in module.json if necessary
        if( !targetModuleJson.commandsViewModel ) {
            targetModuleJson.commandsViewModel = {};
        }
        // Ensure it has all the necessary properties
        [ 'commands', 'commandHandlers', 'commandPlacements', 'actions', 'conditions', 'i18n' ].map( function( key ) {
            if( !targetModuleJson.commandsViewModel[ key ] ) {
                targetModuleJson.commandsViewModel[ key ] = {};
            }
        } );
        let commandsViewModel = targetModuleJson.commandsViewModel;

        commandsViewModel.commandPlacements[ `${targetModuleJson.name}_Awp0ShowLightThemePlacement` ] = {
            id: 'Awp0ShowLightTheme',
            priority: 1,
            parentGroupId: 'Awp0ChangeTheme'
        };

        let isValidThemeName = function( input ) {
            if( commandsViewModel[ input ] ) {
                logger.warn( `Command with name ${logger.nameColor( input )} already exists` );
                return false;
            }
            return input;
        };
        return generatorUtils.getUserInput( '-n', messages.nameInputMsg, isValidThemeName ).then( function( name ) {
            let placementId = `${name}Placement`;
            let actionId = `set${name}`;
            let handlerId = `${name}Handler`;
            let i18nId = `${name}Title`;

            let condIdA = `supports${name}`;
            let condIdB = `is${name}`;

            // Add the command
            commandsViewModel.commands[ name ] = {
                iconId: 'cmdSettings',
                title: `{{i18n.${i18nId}}}`
            };

            // Add the handler
            commandsViewModel.commandHandlers[ handlerId ] = {
                id: name,
                action: actionId,
                activeWhen: true,
                visibleWhen: {
                    condition: `conditions.${condIdA}`
                },
                selectWhen: {
                    condition: `conditions.${condIdB}`
                }
            };

            // Add the placement
            commandsViewModel.commandPlacements[ placementId ] = {
                id: name,
                uiAnchor: 'aw_globalToolbar',
                priority: 3,
                parentGroupId: 'Awp0ChangeTheme'
            };

            // Add the conditions
            commandsViewModel.conditions[ condIdA ] = {
                expression: '!ctx.changeThemeDisabled'
            };
            commandsViewModel.conditions[ condIdB ] = {
                expression: `ctx.theme === 'ui-${name}'`
            };

            // Add the i18n
            commandsViewModel.i18n[ i18nId ] = [ targetModuleJson.name + 'Messages' ];

            // Add the action
            commandsViewModel.actions[ actionId ] = {
                actionType: 'JSFunction',
                method: 'setTheme',
                inputData: {
                    0: `ui-${name}`
                },
                deps: 'js/theme.service'
            };

            // Static CSS color or a HEX value
            let isValidColor = function( input ) {
                if( !input ) {
                    return false;
                }
                var colorListMatch = cssColorNameList.filter( function( s ) {
                    return s.toUpperCase() === input.toUpperCase();
                } );
                return colorListMatch.length || /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test( input );
            };

            return generatorUtils.getUserInput( '-color', messages.colorInputMsg, isValidColor ).then( function( color ) {
                let placeholder2Value = {
                    '${theme-name}': name, // eslint-disable-line no-template-curly-in-string
                    'refresh__theme-name__': name,
                    '__theme-name__': name,
                    '${theme-color}': color // eslint-disable-line no-template-curly-in-string
                };
                let messages = {};
                messages[ name + 'Title' ] = name;

                return Promise.all( [ generatorUtils.updateModuleMessages( targetModuleJson, messages ),
                    generatorUtils.writeBuildJson( targetModuleJson ),
                    generatorUtils.createFiles( targetModuleJson, filesToCreate, placeholder2Value )
                ] ).then( function() {
                    logger.info( `Created theme ${logger.nameColor( name )} in module ${logger.nameColor( targetModuleJson.name )}` );
                } );
            } );
        } );
    } );
};

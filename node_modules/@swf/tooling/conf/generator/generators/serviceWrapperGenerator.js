/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */
// node .\build\js\generator.js -t serviceWrapper -module awservices -path D:\Shaishav\AWC\temp\angularServices.json

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );
const fs = require( 'fs' );

const messages = {
    description: 'Generates wrapper services.',
    pathInputMsg: '\n' + logger.infoColor( 'Give the map of angular service name to expected service prefix.\n' ) + 'Map path: '
};

const filesToCreate = {
    'aw__service_name__Service.js': {
        dir: 'src/js/'
    }
};

let ngServiceToServiceNameMapping = {
    $http: 'Http',
    $locale: 'Locale'
};

module.exports.name = 'serviceWrapper';
module.exports.description = messages.description;

module.exports.execute = function() {
    return generatorUtils.getModule().then( targetModuleJson => {
        let isValidPath = function( input ) {
            if( input === 'a' ) {
                logger.warn( `Path ${input} is invalid` );
                return false;
            }
            return input;
        };
        logger.error( JSON.stringify( targetModuleJson ) );
        return generatorUtils.getUserInput( '-path', messages.pathInputMsg, isValidPath ).then( pathInput => {
            let promisesList = [];

            if( fs.existsSync( pathInput ) ) {
                let output = fs.readFileSync( pathInput );
                ngServiceToServiceNameMapping = JSON.parse( output );
            } else {
                logger.error( `File ${pathInput} doesn't exist. Using ${JSON.stringify( ngServiceToServiceNameMapping )}` );
            }

            for( var ngService in ngServiceToServiceNameMapping ) {
                let placeholder2Value = {
                    '__ng-service-name__' : ngService,
                    __service_name__ : ngServiceToServiceNameMapping[ ngService ]
                };

                promisesList.push( generatorUtils.createFiles( targetModuleJson, filesToCreate, placeholder2Value ) );
            }

            return Promise.all( promisesList ).then( () => {
                return logger.info( `All services created in ${logger.nameColor( pathInput )}` );
            } );
        } );
    } );
};


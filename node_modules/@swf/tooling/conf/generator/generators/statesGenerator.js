/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );

const messages = {
    description: 'Generates a state. A state is a page within a solution. The page\'s display is a declarative view and view model',
    nameInputMsg: '\n' + logger.infoColor( 'Give the state a name. This is the identifier for the state or the page in your solution.\n' ) + 'State name: ',
    urlInputMsg: '\n' + logger.infoColor( 'Give the url a name. This is the display url of your state.\n' ) + 'URL name: ',
    viewInputMsg: '\n' + logger.infoColor( 'Give the view a name. This is the identifier for the view and viewModel your state will use.\n' ) + 'View name: '
};

var filesToCreate = {
    '__state-view__ViewModel.json': {
        dir: 'src/viewmodel/'
    },
    '__state-view__View.html': {
        dir: 'src/html/'
    }
};

module.exports.name = 'state';
module.exports.description = messages.description;

module.exports.execute = function() {
    return generatorUtils.getModule().then( function( targetModuleJson ) {
        // Initialize the states
        if( !targetModuleJson.states ) {
            targetModuleJson.states = {};
        }
        var isValidStateName = function( input ) {
            if( !input ) {
                return false;
            }
            if( input.indexOf( '.' ) !== -1 ) {
                logger.warn( 'Dots are reserved and cannot be used in state names' );
                return false;
            }
            if( targetModuleJson.states[ input ] ) {
                logger.warn( `${input} is already defined in module ${targetModuleJson.name}` );
                return false;
            }
            return true;
        };
        return generatorUtils.getUserInput( '-n', messages.nameInputMsg, isValidStateName ).then( function( stateName ) {
            return generatorUtils.getUserInput( '-url', messages.urlInputMsg ).then( function( url ) {
                return generatorUtils.getUserInput( '-view', messages.viewInputMsg ).then( function( view ) {
                    targetModuleJson.states[ stateName ] = {
                        url: '/' + url,
                        data: {},
                        view: view,
                        dependencies: []
                    };
                    let messageUpdate = {
                        helloText: '!! Hello World !!'
                    };
                    let placeholder2Value = {
                        '${state-name}': stateName, // eslint-disable-line no-template-curly-in-string
                        '__state-name__': stateName,
                        '__state-view__': view,
                        '__module-name__': targetModuleJson.name
                    };
                    // Update the message json file
                    return Promise.all( [ generatorUtils.updateModuleMessages( targetModuleJson, messageUpdate ),
                        generatorUtils.writeBuildJson( targetModuleJson ),
                        generatorUtils.createFiles( targetModuleJson, filesToCreate, placeholder2Value )
                    ] ).then( function() {
                        logger.info( `Added new state ${logger.nameColor( stateName )} in module ${logger.nameColor( targetModuleJson.name )}` );
                        logger.info( `You can access your new state at ${logger.nameColor( 'http://localhost:3000/#/' + url )} after rebuilding` );
                    } );
                } );
            } );
        } );
    } );
};

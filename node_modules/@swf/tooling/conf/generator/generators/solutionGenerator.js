/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );
const util = require( '../../../js/util' );
const fs = require( 'fs' );

const packageJsonPath = process.cwd() + '\\package.json';
//Check package json exist or not  in the application
let exisitingPackageJson = fs.existsSync( packageJsonPath );

const filesToCreate = {
    'site___solution-name__.json': {
        dir: 'solution/'
    },
    'index.html': {
        dir: 'solution/src/'
    },
    'package.json': {
        dir: '../'
    }
};

module.exports.name = 'solution';
module.exports.description = 'Generates a solution.';
module.exports.execute = function() {
    return generatorUtils.getUserInput( '-n', 'Enter the solution name: ' ).then( async function( solutionName ) {
        logger.info( 'Creating solution ' + solutionName );

        // Create the site module
        let siteModuleJson = {
            name: 'siteModule',
            description: 'Site module for solution.',
            pathOffset: '.'
        };
        let moduleFileName = 'src/solution/module.json';
        let moduleJsonPromise = util.writeFile( moduleFileName, JSON.stringify( siteModuleJson, null, 4 ) );

        // Create the solution kit
        let solutionKitJson = {
            name: `${solutionName}-kit`,
            level: 6,
            solutionDef: {
                solutionId: `${solutionName}-solution`,
                solutionName: `${solutionName}-solution`,
                solutionVersion: '1.0',
                browserTitle: `${solutionName}`,
                brandName: `Brand ${solutionName}`,
                companyName: 'Siemens PLM Software',
                copyrightText: 'Copyright Â© ' + new Date().getFullYear() + ' Siemens Product Lifecycle Management Software Inc.',
                workspaces: [],
                authenticator: `${solutionName}Authenticator`,
                imageRepositoryConfiguration: {
                    actionType: 'GET',
                    url: '{{baseUrl}}'
                }
            },
            kitDeps: [ 'afx' ],
            modules: [ 'siteModule' ]
        };

        let solutionKitFileName = 'src/solution/kit.json';
        let kitJsonPromise = util.writeFile( solutionKitFileName, JSON.stringify( solutionKitJson, null, 4 ) );
        let placeholder2Value = {
            '__solution-name__': solutionName
        };
        //Check if the version of afx is not next for exiting package json
        let afxVersion;
        let afxGatewayVersion;
        if( exisitingPackageJson ) {
            let packageContent = require( packageJsonPath );
            let dependenciesContent = packageContent.dependencies;
            if( dependenciesContent.afx !== 'next' ) {
                afxVersion = dependenciesContent.afx;
            }
            if( dependenciesContent[ 'afx-gateway' ] !== 'next' ) {
                afxGatewayVersion = dependenciesContent[ 'afx-gateway' ];
            }
        }

        let createFilePromise = generatorUtils.createFiles( {
            __src: process.cwd() + '/src/module.json'
        }, filesToCreate, placeholder2Value );

        const overwritePackage = async function() {
            delete require.cache[ require.resolve( packageJsonPath ) ];
            let newPackageContent = require( packageJsonPath );
            if( newPackageContent ) {
                newPackageContent.dependencies.afx = afxVersion || 'next';
                newPackageContent.dependencies[ 'afx-gateway' ] = afxGatewayVersion || 'next';
                return fs.writeFile( packageJsonPath, JSON.stringify( newPackageContent, null, 4 ), ( err ) => {
                    if( err ) {
                        logger.info( 'Version of dependencies cannot be updated in package.json' );
                    }
                } );
            }
        };

        await Promise.all( [ moduleJsonPromise, kitJsonPromise, createFilePromise ] );
        if( exisitingPackageJson && ( afxVersion || afxGatewayVersion ) ) {
            overwritePackage();
        }
    } );
};

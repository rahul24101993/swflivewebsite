/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );
const _ = require( 'lodash' );

const validCFTypes = [ 'large-t', 'large', 'medium', 'small', '1', '2', '3', '4' ];
const templateTagRootFile = '__cf-location-name__';
const templateTagLocationFile = '__cf-location-name-';
const messages = {
    description: `Generates 'starter code' files for common-app-frame.
It is minimal 'declarative' code that creates basic working structure for a location, in alignment with CTO guidelines.
It creates rootView/ViewModel & locationView/ViewModel files inside a module which can always be enhanced later`,

    cfTypeInputMsg: '\n' + logger.infoColor( 'From following:' ) +
        logger.nameColor( '\n1. Large-T' ) + logger.infoColor( ' (default): LARGE sized Header with "subLocation" tabs INSIDE it.' ) +
        logger.nameColor( '\n2. Large            ' ) + logger.infoColor( ': LARGE sized Header with"subLocation" tabs BELOW it.' ) +
        logger.nameColor( '\n3. Medium           ' ) + logger.infoColor( ': MEDIUM sized Header with just title and logo.' ) +
        logger.nameColor( '\n4. Small            ' ) + logger.infoColor( ': SMALL sized Header With Logo only.\n\n' ) +
        'Select Template Type or Number: (Large-T) ',

    cfNameInputMsg: '\n' + logger.infoColor( `Give this frame a name (e.g. commonFrame).
Generated rootView and locationView files will use this identifier in their name and content.\n\n` ) +
        'Frame name: (commonFrame) ',

    cfFinalConfirmationMsg: '\nIs this OK? (yes) '
};

module.exports.name = 'commonFrame';
module.exports.description = messages.description;
module.exports.execute = function() {
    var getName = function( x ) {
        return x.name;
    };
    return generatorUtils.loadAllJson( [ 'src/**/module.json' ], getName ).then( moduleMap => {
        return generatorUtils.selectJson( moduleMap, 'module' ).then( function( targetModuleJson ) {
            // Initialize the states.json if not already present in this 'selected' module
            if( !targetModuleJson.states ) {
                targetModuleJson.states = {};
            }

            const validators = {
                isValidCFType: function( input ) {
                    if( !input ) {
                        return false;
                    }
                    if( !validCFTypes.includes( input.toLowerCase() ) ) {
                        logger.warn( `"${input}" is NOT a valid Common-Frame Type` );
                        return false;
                    }
                    return true;
                },
                isValidCommonFrameName: function( input ) {
                    if( !input ) {
                        return false;
                    }
                    if( input.indexOf( '.' ) !== -1 ) {
                        logger.warn( 'Dots are reserved and cannot be used for Common-Frame file names' );
                        return false;
                    }
                    if( targetModuleJson.states[ input + 'Root' ] ) {
                        logger.warn( `Common-Frame named "${input}" is already defined in module ${targetModuleJson.name}` );
                        return false;
                    }
                    return true;
                },
                isValidConfirmation: function( input ) {
                    if( !input ) {
                        return false;
                    }
                    return true;
                }
            };

            // Get the CF Type from user, if no-input take 'large-t' as default value
            return generatorUtils.getUserInput( '-n', messages.cfTypeInputMsg, validators.isValidCFType, 'large-t' ).then( function( cfType ) {
                // Get the CF Type from user, if no-input take 'commonFrame' as default value
                if( !isNaN( cfType ) ) {
                    cfType = validCFTypes[ parseInt( cfType ) - 1 ];
                } else {
                    cfType = cfType.toLowerCase();
                }
                return generatorUtils.getUserInput( '-n', messages.cfNameInputMsg, validators.isValidCommonFrameName, 'commonFrame' ).then( function( cfName ) {
                    /* eslint-disable-next-line no-console */
                    console.log(
                        logger.infoColor( '\nSelections Made: ' ) + logger.infoColor( '\nModule  -> ' ) + logger.nameColor( targetModuleJson.name ) +
                        logger.infoColor( '\nCF Type -> ' ) + logger.nameColor( cfType ) +
                        logger.infoColor( '\nCF Name -> ' ) + logger.nameColor( cfName ) );

                    // Get the final confirmation from user, if no-input take 'yes' as default value
                    return generatorUtils.getUserInput( '-n', messages.cfFinalConfirmationMsg, validators.isValidConfirmation, 'yes' ).then( function( confirmation ) {
                        // Valid confirmations are y, yes or ya (case insensitive)
                        if( !/\byes\b|\by\b|\bya\b/i.test( confirmation ) ) {
                            logger.error( 'Common-Frame Generation cancelled by user.' );
                        } else {
                            // Add a new 'abstract' state, which can be used by other locations
                            targetModuleJson.states[ cfName + 'Root' ] = {
                                abstract: true,
                                view: cfName + 'Root'
                            };

                            logger.info(
                                `Added location state ${logger.nameColor( cfName + 'Root' )} to ${logger.nameColor( targetModuleJson.name )} module's states.json`
                                );
                            var filesToCreate = {};
                            _.set( filesToCreate, `["${templateTagRootFile}RootView.html"]`, {
                                dir: 'src/html/'
                            } );
                            _.set( filesToCreate, `["${templateTagLocationFile}${cfType}__LocationView.html"]`, {
                                dir: 'src/html/'
                            } );
                            _.set( filesToCreate, `["${templateTagRootFile}RootViewModel.json"]`, {
                                dir: 'src/viewmodel/'
                            } );
                            _.set( filesToCreate, `["${templateTagLocationFile}${cfType}__LocationViewModel.json"]`, {
                                dir: 'src/viewmodel/'
                            } );

                            var placeholder2Value = {};

                            _.set( placeholder2Value, templateTagRootFile, cfName );
                            _.set( placeholder2Value, templateTagLocationFile + cfType + '__', cfName );

                            // Create required CommonFrame files & Update the module json and its states file
                            return Promise.all( [ generatorUtils.writeBuildJson( targetModuleJson ),
                                generatorUtils.createFiles( targetModuleJson, filesToCreate, placeholder2Value )
                            ] ).then( function() {
                                logger.success(
                                    `You can now use ${logger.nameColor( cfName + 'Root' )} and ${logger.nameColor( cfName + 'Location' )} views in any (states.json) location.`
                                    );
                            } ).catch( function( error ) {
                                logger.warn(
                                    `Error while writing to ${logger.nameColor( 'states.json' )} file in module ${logger.nameColor( targetModuleJson.name )}". If needed, please checkout this file and manually make entry for "${cfName}Root" and use it in any location. \nFor more info about manual entry, visit: ${logger.nameColor( 'https://gitlab.industrysoftware.automation.siemens.com/Apollo/afx/wikis/Common-Application-Frame#statesjson-changes' )}`
                                    );
                            } );
                        }
                    } );
                } );
            } );
        } );
    } );
};

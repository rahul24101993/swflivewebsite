const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );

const messages = {
    nameInputMsg: logger.infoColor( '\nGive the command a name. This is a unique identifier referenced by handlers and placements.\n' ) + 'Command name: ',
    iconInputMsg: logger.infoColor( '\nChoose an icon to use for this command. Available icons are:\n' )
};

const filesToCreate = {
    '__command-name__Service.js': {
        dir: 'src/js/'
    },
    '__command-name__ViewModel.json': {
        dir: 'src/viewmodel/'
    },
    '__command-name__View.html': {
        dir: 'src/html/'
    }
};

module.exports.name = 'command';
module.exports.description = 'Generates a zero compile command.';
module.exports.execute = function() {
    let getName = function( x ) {
        return x.name;
    };
    let concat = function( a, b ) {
        return a.concat( b );
    };
    return generatorUtils.getModule().then( function( targetModuleJson ) {
        // Build commandsViewModel in module.json if necessary
        if( !targetModuleJson.commandsViewModel ) {
            targetModuleJson.commandsViewModel = {};
        }
        // Ensure it has all the necessary properties
        [ 'commands', 'commandHandlers', 'commandPlacements', 'actions', 'conditions', 'i18n' ].map( function( key ) {
            if( !targetModuleJson.commandsViewModel[ key ] ) {
                targetModuleJson.commandsViewModel[ key ] = {};
            }
        } );
        let commandsViewModel = targetModuleJson.commandsViewModel;
        let isValidCommandName = function( input ) {
            if( commandsViewModel.commands[ input ] ) {
                logger.warn( `Command with name ${logger.nameColor( input )} already exists` );
                return false;
            }
            return input;
        };
        return generatorUtils.getUserInput( '-n', messages.nameInputMsg, isValidCommandName ).then( function( name ) {
            return generatorUtils.getAvailableIcons().then( function( iconNameList ) {
                // Limit console output to icons that start with cmd
                let cmdIconList = iconNameList.filter( iconName => /^cmd/.test( iconName ) );
                let iconMsg = messages.iconInputMsg + cmdIconList.map( function( x ) {
                    return logger.nameColor( x );
                } ).join( ',' ) + '\n\nIcon name: ';
                // Don't limit to icons that start with cmd
                let isValidIcon = function( input ) {
                    return iconNameList.includes( input );
                };
                return generatorUtils.getUserInput( '-icon', iconMsg, isValidIcon ).then( function( icon ) {
                    return generatorUtils.loadAllJson( [ 'components/activeworkspace/repo/kit/**/module.json', 'repo/kit/**/module.json', 'src/**/module.json' ], getName ).then( function( allModulesMap ) {
                        let anchorCountMap = Object.values( allModulesMap )
                            .map( function( x ) {
                                return x.commandsViewModel || {};
                            } )
                            .map( function( x ) {
                                return x.commandPlacements ? Object.values( x.commandPlacements ) : [];
                            } )
                            .reduce( concat )
                            .map( function( x ) {
                                return x.uiAnchor;
                            } )
                            .reduce( function( acc, nxt ) {
                                acc[ nxt ] = acc[ nxt ] ? acc[ nxt ] + 1 : 1;
                                return acc;
                            }, {} );
                        let sortedAnchorList = Object.keys( anchorCountMap ).sort( function( a, b ) {
                            return anchorCountMap[ b ] - anchorCountMap[ a ];
                        } );
                        let anchorListToDisplay = sortedAnchorList.slice( 0, 10 );

                        let isValidPlacement = function( input ) {
                            if( input ) {
                                if( !anchorCountMap[ input ] ) {
                                    logger.warn( `${logger.nameColor( input )} is not a known placement` );
                                }
                                return true;
                            }
                            return false;
                        };

                        let placementInputMsg = logger.infoColor( `\nChoose a placement for this command.
This placement should match the ${logger.nameColor( 'anchor' )} of the command bar you want this command to appear in.
Common placements are:
${anchorListToDisplay.map( function( x ) { return logger.nameColor( x ); } ).join( '\n' )}` ) + '\n\nPlacement name: ';

                        return generatorUtils.getUserInput( '-placement', placementInputMsg, isValidPlacement ).then( function( placement ) {
                            const placementId = name + placement;
                            const actionId = 'activate' + name;
                            const handlerId = name + 'Handler';
                            const i18nId = name + 'Title';
                            const description = name + 'Description';

                            // Add the command
                            commandsViewModel.commands[ name ] = {
                                iconId: icon,
                                title: '{{i18n.' + i18nId + '}}',
                                description: '{{i18n.' + description + '}}'
                            };
                            // Add the handler
                            commandsViewModel.commandHandlers[ handlerId ] = {
                                id: name,
                                action: actionId,
                                activeWhen: true,
                                visibleWhen: {
                                    condition: 'conditions.true'
                                }
                            };
                            // Add the placement
                            commandsViewModel.commandPlacements[ placementId ] = {
                                id: name,
                                uiAnchor: placement,
                                priority: 100
                            };
                            // Add a sample condition
                            commandsViewModel.conditions.objectIsSelected = {
                                expression: 'ctx.selected'
                            };
                            // Add the i18n
                            commandsViewModel.i18n[ i18nId ] = [ targetModuleJson.name + 'Messages' ];
                            commandsViewModel.i18n[ description ] = [ targetModuleJson.name + 'Messages' ];

                            let messages = {
                                header: 'Header',
                                body: 'Body',
                                footer: 'Footer',
                                checkBoxName: 'Enable the OK button in footer',
                                save: 'Ok',
                                textValue: 'Contents here'
                            };
                            messages[ name + 'Title' ] = name;
                            messages[ name + 'Description' ] = name + 'Description';
                            let placeholder2Value = {
                                '${command-name}': name, // eslint-disable-line no-template-curly-in-string
                                '__command-name__': name,
                                '__module-name__': targetModuleJson.name
                            };

                            // Set the action to panel open for nav / tools and info
                            if( [ 'aw_navigation', 'aw_toolsAndInfo' ].includes( placement ) ) {
                                commandsViewModel.actions[ actionId ] = {
                                    actionType: 'JSFunction',
                                    method: 'activateCommandPanel',
                                    deps: 'js/commandPanel.service',
                                    inputData: {
                                        commandId: name,
                                        location: placement
                                    }
                                };
                                // Don't generate service
                                delete filesToCreate[ '__command-name__Service.js' ];
                            } else {
                                // Otherwise do a simple service with alert
                                commandsViewModel.actions[ actionId ] = {
                                    actionType: 'JSFunction',
                                    method: 'alert',
                                    deps: 'js/' + name + 'Service',
                                    inputData: {
                                        text: 'Hello ' + name + '!'
                                    }
                                };
                                // Don't generate panel
                                delete filesToCreate[ '__command-name__ViewModel.json' ];
                                delete filesToCreate[ '__command-name__View.html' ];
                            }

                            return Promise.all( [ generatorUtils.updateModuleMessages( targetModuleJson, messages ),
                                generatorUtils.writeBuildJson( targetModuleJson ),
                                generatorUtils.createFiles( targetModuleJson, filesToCreate, placeholder2Value )
                            ] ).then( function() {
                                logger.info( `Created command ${logger.nameColor( name )} in module ${logger.nameColor( targetModuleJson.name )}` );
                            } );
                        } );
                    } );
                } );
            } );
        } );
    } );
};

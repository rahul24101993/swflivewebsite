const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );

const filesToCreate = {
    '__authenticator-name__Service.js': {
        dir: 'src/js/'
    }
};

const messages = {
    nameInputMsg: 'Enter the authenticator name: '
};

module.exports.name = 'authenticator';
module.exports.description = 'Generates an authenticator.';
module.exports.execute = function() {
    return generatorUtils.getModule().then( function( targetModuleJson ) {
        return generatorUtils.getKit().then( function( kitJson ) {
            // Can only add authenticator to solution kit
            if( !kitJson.solutionDef ) {
                logger.warn( 'Kit is not a solution kit.' );
                return;
            }
            return generatorUtils.getUserInput( '-n', messages.nameInputMsg ).then( function( authenticatorName ) {
                // Add authenticator to module
                targetModuleJson.authenticator = targetModuleJson.authenticator || {};
                targetModuleJson.authenticator[ authenticatorName ] = {
                    dep: `js/${authenticatorName}Service`
                };
                if( kitJson.solutionDef.authenticator ) {
                    logger.info( `Replacing authenticator ${logger.nameColor( kitJson.solutionDef.authenticator )}` );
                }
                kitJson.solutionDef.authenticator = authenticatorName;
                let placeholder2Value = {
                    '__authenticator-name__': authenticatorName
                };
                return Promise.all( [ generatorUtils.writeBuildJson( kitJson ),
                    generatorUtils.writeBuildJson( targetModuleJson ),
                    generatorUtils.createFiles( targetModuleJson, filesToCreate, placeholder2Value )
                ] ).then( function() {
                    logger.info( `Created authenticator ${logger.nameColor( authenticatorName )} in kit ${logger.nameColor( kitJson.name )} and module ${logger.nameColor( targetModuleJson.name )}` );
                } );
            } );
        } );
    } );
};

/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */

const path = require( 'path' );

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );
const util = require( '../../../js/util' );

const messages = {
    description: 'Generates a workspace.',
    nameInputMsg: '\n' + logger.infoColor( 'Give the workspace a name. This is the identifier of the workspace.\n' ) + 'Workspace name: ',
    idInputMsg: '\n' + logger.infoColor( 'Give the workspace an ID. This is the unique identifier of the workspace.\n' ) + 'ID: ',
    typeInputMsg: '\n' + logger.infoColor( 'Give the workspace a type. \nPossible value could be:\nInclusive\nExclusive\n\n' ) + 'Type: ',
    dpInputMsg: '\n' + logger.infoColor( 'Give the workspace a default page. This is the default page to navigate to for the workspace.\n' ) + 'Default page: '
};

module.exports.name = 'workspace';
module.exports.description = messages.description;

module.exports.execute = function() {
    return generatorUtils.getModule().then( targetModuleJson => {
        return getSolutionKitJson().then( solutionKitJson => {
            return getInputs().then( inputs => {
                let id = inputs.id;
                let type = inputs.type;
                let dp = inputs.dp;
                let name = inputs.name;

                let __dir = path.dirname( solutionKitJson.__src );

                let workspaceJsonWithExclusive = {
                    schemaVersion: '1.0.0',
                    workspaceId: id,
                    workspaceName: {
                        source: `/i18n/${targetModuleJson.name}Messages`,
                        key: id + 'Name'
                    },
                    workspaceType: type,
                    defaultPage: dp,
                    availablePages: [ dp ]
                };

                let workspaceJsonWithInclusive = {
                    schemaVersion: '1.0.0',
                    workspaceId: id,
                    workspaceName: {
                        source: `/i18n/${targetModuleJson.name}Messages`,
                        key: id + 'Name'
                    },
                    workspaceType: type,
                    defaultPage: dp
                };

                let workspaceJson = workspaceJsonWithExclusive;

                if( type === 'Inclusive' ) {
                    workspaceJson = workspaceJsonWithInclusive;
                }

                let fileName = `${__dir}/workspace_${id}.json`;

                let messageUpdate = {};
                messageUpdate[ id + 'Name' ] = name;

                addWorkspaceToKit( id, solutionKitJson );

                return Promise.all( [ util.writeFile( fileName, JSON.stringify( workspaceJson, null, 4 ) ),
                    generatorUtils.updateModuleMessages( targetModuleJson, messageUpdate ),
                    generatorUtils.writeBuildJson( targetModuleJson ),
                    generatorUtils.writeBuildJson( solutionKitJson )
                ] ).then( () => {
                    return logger.info( `Added new workspace ${name}` );
                } );
            } );
        } );
    } );
};

/**
 * Check if input is a workspace type
 *
 * @param {String} input Input from user
 * @returns {Boolean} Whether input is valid
 */
var isValidWorkspaceType = function( input ) {
    return [ 'Inclusive', 'Exclusive' ].includes( input );
};

/**
 * Get all of the necessary user input
 *
 * @returns {Promise} Promise resolved with inputs
 */
var getInputs = function() {
    let id;
    let name;
    let type;
    return generatorUtils.getUserInput( '-id', messages.idInputMsg ).then( idIn => {
        id = idIn;
        return generatorUtils.getUserInput( '-n', messages.nameInputMsg );
    } ).then( nameIn => {
        name = nameIn;
        return generatorUtils.getUserInput( '-wt', messages.typeInputMsg, isValidWorkspaceType );
    } ).then( typeIn => {
        type = typeIn;
        return generatorUtils.getUserInput( '-dp', messages.dpInputMsg );
    } ).then( dp => {
        return {
            id: id,
            name: name,
            type: type,
            dp: dp
        };
    } );
};

/**
 * Add a workspace to the kit in the current directory
 *
 * @param {String} workspaceId - The ID of the workspace to add
 * @param {Object} kitJson - Kit json to update
 */
var addWorkspaceToKit = function( workspaceId, kitJson ) {
    if( kitJson === null ) {
        logger.warn( 'No solution kit found. ' + workspaceId + ' can not be added.' );
        return;
    }
    if( !kitJson.solutionDef.workspaces ) {
        kitJson.solutionDef.workspaces = [];
    }
    if( kitJson.solutionDef.workspaces.includes( workspaceId ) ) {
        logger.info( 'Solution kit.json already has an entry for workspace ' + workspaceId );
    } else {
        kitJson.solutionDef.workspaces.push( workspaceId );
    }
    // Add this workspace as default workspace, if there is not already set
    if( !kitJson.solutionDef.defaultWorkspace ) {
        kitJson.solutionDef.defaultWorkspace = workspaceId;
        logger.info( 'Using workspace ' + workspaceId + ' as default workspace in solution' );
    }
};

/**
 * Get the solution kit json, i.e a kit json with 'solutionDef'
 *
 * @returns {Promise} Promise resolved with solution kit json
 */
var getSolutionKitJson = function() {
    return generatorUtils.loadAllJson( [ 'src/**/kit.json' ], x => {
        return x.name;
    } ).then( kitJsonMap => {
        var solutionKits = Object.values( kitJsonMap ).filter( x => {
            return x.solutionDef;
        } );
        // TODO: Future work - ask user to pick kit if more than one
        return solutionKits[ 0 ];
    } );
};

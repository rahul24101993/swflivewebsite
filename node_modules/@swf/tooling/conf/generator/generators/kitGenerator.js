/* eslint-disable require-jsdoc */
/* eslint-disable no-multi-assign */
/* eslint-disable no-implicit-globals */

const generatorUtils = require( '../../../js/generator' );
const logger = require( '../../../js/logger' );

const messages = {
    nameInputMsg: `${logger.infoColor( 'Give a name to the kit. This is a unique identifier used by the build system.' )}

Kit name: `
};

const getName = function( x ) {
    return x.name;
};

const concat = function( a, b ) {
    return a.concat( b );
};

var getKitInfo = function() {
    return generatorUtils.loadAllJson( [
        'src/**/kit.json',
        '!**/repo*/**',
        '!**/*test*/**'
    ], getName ).then( kitJsonMap => {
        let alreadyIncludedModules = Object.values( kitJsonMap )
            .map( kitJson => kitJson.modules )
            .reduce( concat, [] )
            .reduce( ( acc, nxt ) => {
                if( acc.indexOf( nxt ) === -1 ) {
                    acc.push( nxt );
                }
                return acc;
            }, [] )
            .sort();
        delete kitJsonMap.samples;
        return {
            kitDeps: Object.keys( kitJsonMap ),
            alreadyIncludedModules: alreadyIncludedModules
        };
    } );
};

module.exports.name = 'kit';
module.exports.description =
    `Generates a kit.json.
A kit.json is a combination of modules which will be included in the site build`;
module.exports.execute = function() {
    return generatorUtils.loadAllJson( [
        'src/**/kit.json',
        '!**/repo*/**',
        '!**/*test*/**'
    ], getName ).then( existingKitJson => {
        var checkValidKit = function( input ) {
            if( existingKitJson[ input ] ) {
                logger.warn( `A kit named ${logger.nameColor( input )} already exists` );
                return false;
            }
            return input;
        };
        let kitName;
        let existingModuleJson;
        return generatorUtils.getUserInput( '-n', messages.nameInputMsg, checkValidKit ).then( kitNameIn => {
            kitName = kitNameIn;
            return generatorUtils.loadAllJson( [ 'src/**/module.json', '!**/repo*/**', '!**/*test*/**' ], getName );
        } ).then( existingModuleJsonIn => {
            existingModuleJson = existingModuleJsonIn;
            return getKitInfo();
        } ).then( kitInfo => {
            let __dir = `${generatorUtils.config.rootDir}/src/${kitName}`;
            let __src = `${__dir}/kit.json`;
            let modules = Object.keys( existingModuleJson ).filter( moduleName => kitInfo.alreadyIncludedModules.indexOf( moduleName ) === -1 );
            let kitJson = {
                name: kitName,
                level: 7,
                kitDeps: kitInfo.kitDeps,
                modules: modules,
                __src: __src
            };
            for( const moduleName of modules ) {
                logger.info( `Included module ${logger.nameColor( moduleName )} in kit ${logger.nameColor( kitName )}` );
            }
            return generatorUtils.writeBuildJson( kitJson ).then( () => {
                return logger.info( `Created kit ${logger.nameColor( kitName )} in ${__dir}` );
            } );
        } );
    } );
};

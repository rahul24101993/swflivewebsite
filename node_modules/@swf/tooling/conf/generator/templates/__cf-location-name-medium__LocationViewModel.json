{
    "schemaVersion": "1.0.0",
    "data": {
        "locationPanelStyle": "",
        "layoutSummaryOnly": "false"
    },
    "actions": {
        "checkNarrowMode": {
            "actionType": "JSFunction",
            "method": "checkNarrowMode",
            "deps": "js/aw.narrowMode.service"
        },
        "registerLocationContextAndConstructHeader": {
            "actionType": "batchJob",
            "steps": [ {
                "action": "getLocationName"
            }, {
                "action": "registerLocationName"
            }, {
                "action": "registerKeyBoardEvents"
            }, {
                "action": "subscribeForUnloadEvent"
            }, {
                "action": "constructTitles"
            }, {
                "action": "setTitlesInCtx"
            } ]
        },
        "getLocationName": {
            "actionType": "JSFunction",
            "method": "normalizeStateName",
            "deps": "js/defaultLocationService",
            "outputData": {
                "normalizeStateName": ""
            }
        },
        "registerLocationName": {
            "actionType": "modifyCtx",
            "inputData": {
                "methodType": "update",
                "name": "locationContext",
                "value": {
                    "ActiveWorkspace:Location": "{{data.normalizeStateName}}"
                }
            }
        },
        "registerKeyBoardEvents": {
            "actionType": "JSFunction",
            "method": "registerKeyDownEvent",
            "deps": "js/keyboardService"
        },
        "subscribeForUnloadEvent": {
            "actionType": "JSFunction",
            "method": "subscribeForLocationUnloadEvent",
            "inputData": {
                "name": "__cf-location-name__Location"
            },
            "deps": "js/defaultLocationService"
        },
        "constructTitles": {
            "actionType": "JSFunctionAsync",
            "method": "getTitles",
            "deps": "js/awHeaderService",
            "outputData": {
                "browserTitle": "result.browserTitle",
                "browserSubTitle": "result.browserSubTitle",
                "headerTitle": "result.headerTitle"
            }
        },
        "setTitlesInCtx": {
            "actionType": "modifyCtx",
            "inputData": {
                "methodType": "update",
                "name": "location.titles",
                "value": {
                    "browserTitle": "{{data.browserTitle}}",
                    "browserSubTitle": "{{data.browserSubTitle}}",
                    "headerTitle": "{{data.headerTitle}}"
                }
            }
        },
        "updateBreadcrumbAction": {
            "actionType": "JSFunction",
            "method": "updateBreadCrumb",
            "deps": "js/awHeaderService",
            "inputData": {
                "eventData": "{{data.eventMap['refreshBreadCrumb']}}"
            },
            "outputData": {
                "breadCrumbProvider": "result.breadCrumbProvider",
                "breadcrumbConfig": "result.breadcrumbConfig",
                "objFound": "result.objFound"
            }
        },
        "resetBreadcrumbAction": {
            "actionType": "JSFunction",
            "method": "resetBreadCrumb",
            "deps": "js/awHeaderService",
            "outputData": {
                "breadCrumbProvider": "result.breadCrumbProvider"
            }
        },
        "updateTitles": {
            "actionType": "JSFunction",
            "method": "updateDocumentTitles",
            "deps": "js/awHeaderService"
        }
    },
    "dataProviders": {},
    "functions": {},
    "onEvent": [ {
        "eventId": "aw.windowResize",
        "action": "checkNarrowMode"
    }, {
        "eventId": "refreshBreadCrumb",
        "cacheEventData": true,
        "action": "updateBreadcrumbAction"
    }, {
        "eventId": "resetBreadCrumb",
        "action": "resetBreadcrumbAction"
    }, {
        "eventId": "appCtx.update",
        "condition": "name === 'location.titles'",
        "action": "updateTitles"
    } ],
    "i18n": {},
    "messages": {},
    "conditions": {},
    "lifecycleHooks": {
        "onMount": "registerLocationContextAndConstructHeader"
    }
}

/* eslint-disable require-jsdoc */
/* eslint-env amd, es6, node */

const chmod = require( 'gulp-chmod' );
const _ = require( 'lodash' );
const gulp = global.gulp;
const { platform } = require( 'os' );
const logger = require( './js/logger' );
const { spawn, stream2Promise } = require( './js/util' );
const LOG_PREFIX = 'sonar/';
const npmCmd = process.platform === 'win32' && 'npm.cmd' || 'npm'; // path.join( process.env.NODEJS_HOME, 'npm.cmd' );
const { updateSourcePath } = require( './js/codeCoverageHelper' );
const sonarScannerVersion = '4.5';

/**
 */
async function preSonar() {
    // Any sonar tasks depends on fx-tcui_compile, because that generates the version constants.
    await stream2Promise( gulp.src( [
        `node_modules/@swf/tooling/sonar-scanner-${sonarScannerVersion}/**`,
        `sonar-scanner-${sonarScannerVersion}/**`
    ], { allowEmpty: true } )
        .pipe( chmod( 0o777 ) ) // Make the files writeable when written
        .pipe( gulp.dest( `${process.cwd()}/out/sonar/sonar-scanner-${sonarScannerVersion}` ) )
    );
}

/**
 * This function does all the actual work of running Sonar related tests.
 *
 * @param {String} filePath - file path to module.json
 */

async function runSonar( filePath ) {
    try {
        await preSonar();
        if( filePath ) {
            const moduleJson = global.cache.filePath2moduleJson[ filePath ];
            process.env.SONAR_ROOT = moduleJson.name;
        } else {
            delete process.env.SONAR_ROOT;
        }

        let logFile;
        const sonarUrl = process.env.SONAR_URL;
        const sonarOutDir = `${process.cwd()}/out/sonar`;

        const env = { ...process.env };
        env.SONAR_SCANNER_HOME = `${sonarOutDir}/sonar-scanner-${sonarScannerVersion}`;
        env.SONAR_SCANNER_OPTS = `-Xmx4g -Dsonar.host.url=${sonarUrl} -Dproject.settings=${sonarOutDir}/sonar-project.properties`;
        const processSonar = require( './js/sonar' );
        await processSonar( sonarOutDir );

        let cmd = `${env.SONAR_SCANNER_HOME}/bin/sonar-scanner`;
        if( platform() === 'win32' ) { cmd += '.bat'; }
        if( process.env.DECORATOR ) {
            const decorator = !( process.env.CI_MERGE_REQUEST_TITLE && /.*\[SKIP_SONAR_ANALYSIS\]/.test( process.env.CI_MERGE_REQUEST_TITLE ) );
            env.SONAR_SCANNER_OPTS += ` -Dsonar.qualitygate.wait=${decorator}`;
        }
        if( process.env.SONAR_TOKEN ) {
            env.SONAR_SCANNER_OPTS += ` -Dsonar.login=${process.env.SONAR_TOKEN}`;
        } else {
            env.SONAR_SCANNER_OPTS += ` -Dsonar.login=${process.env.SONAR_USERNAME} -Dsonar.password=${process.env.SONAR_PASSWORD}`;
        }

        if( process.env.SONAR_NODE_MAXSPACE ) {
            env.SONAR_SCANNER_OPTS += ` -Dsonar.javascript.node.maxspace=${process.env.SONAR_NODE_MAXSPACE}`;
        }

        if( process.env.SONAR_DEBUG === true ) {
            env.SONAR_SCANNER_OPTS += ' -Dsonar.verbose=true';
        }

        logger.info( 'Executing Sonar server communication. This is a long-running process.', LOG_PREFIX );
        logger.debug( `SONAR_SCANNER_HOME=${env.SONAR_SCANNER_HOME}`, LOG_PREFIX );
        logger.debug( `SONAR_SCANNER_OPTS=${env.SONAR_SCANNER_OPTS}`, LOG_PREFIX );
        const code = await spawn( cmd, [
            // '--debug'
        ], {
            env: env
        }, null, line => {
            return /(WARN: Class not found: )/.test( line );
        }, 'sonar-scanner: ' );
        if( code ) {
            throw new Error( `Sonar update failed. Log file: ${logFile}` );
        }

        logger.success( `Sonar update successful. Log file: ${logFile}`, LOG_PREFIX );
    } catch ( err ) {
        logger.pipeErrorHandler( err );
    }
}

gulp.task( 'executeUnitTests', async executeUnitTests => {
    let testFailure = false;
    const code = await spawn( npmCmd, [ 'run', 'test:coverage' ], { cwd: process.cwd() }, null, line => {
        if( /Summary of all failing tests/.test( line.trim() ) ) {
            testFailure = true;
        }
    } );
    if( code || testFailure ) {
        logger.error( 'Unit test execution failed', LOG_PREFIX );
        process.exit( 1 );
    }
    logger.success( 'Unit test executed successfully', LOG_PREFIX );
    return true;
} );

gulp.task( 'sonar', gulp.series( 'executeUnitTests',
    async function sonar() {
        await global.cacheLoaded();
        updateSourcePath();
        await runSonar();
    } ) );

/* eslint-disable no-await-in-loop */
// Copyright (c) 2020 Siemens

/**
 * Defines {@link tabRegistryService} which manages tabs.
 *
 * @module js/tabRegistry.service
 */
import Debug from 'debug';
import AwPromiseService from 'js/awPromiseService';
import eventBus from 'js/eventBus';
import htmlUtils from 'js/htmlUtils';
import wcagSvc from 'js/wcagService';

const registry = {};
const trace = new Debug( 'tabRegistryService' );


/**
 * Register a tab set
 *
 * @param {String} tabSetId ID that the tab set has registered with
 * @param {List<Object>} tabs List of tabs in tab set (all tabs, not just visible)
 * @param {Object} registryData Callback to change tabs and the tabs that are currently visible
 * @throws Error if tabSetId is already registered
 */
export function registerTabSet( tabSetId, {
    changeTab,
    highlightTab,
    tabs
} ) {
    trace( `Tab set ${tabSetId} registered: ${tabs.map( t => t.tabKey )}` );
    if( registry[ tabSetId ] ) {
        throw new Error( `Tab set with ID ${tabSetId} is already registered` );
    }
    registry[ tabSetId ] = {
        changeTab,
        highlightTab,
        tabs
    };
    // Announce tabset registration
    eventBus.publish( tabSetId + '.tabSetRegistered' );
}

/**
 * Remove registration of a tab set
 *
 * @param {String} tabSetId ID that the tab set has registered with
 */
export function unregisterTabSet( tabSetId ) {
    trace( `Tab set ${tabSetId} unregistered` );
    delete registry[ tabSetId ];
    // Announce tabset un-registration
    eventBus.publish( tabSetId + '.tabSetUnregistered' );
}

/**
 * Get the list of tabs currently visible in the tab set
 *
 * @param {String} tabSetId ID that the tab set has registered with
 * @returns {List<Object>} List of tabs visible in the tab set. Null if tab set is not registered.
 */
export function getVisibleTabs( tabSetId ) {
    const registration = registry[ tabSetId ];
    return registration ? registration.tabs : null;
}

/**
 * Change the selected tab in the targeted tab set
 *
 * @param {String} tabSetId ID that the tab set has registered with
 * @param {String} targetTabId ID of the tab to change to
 * @returns {Promise<Void>} Promise resolved when tab transition is complete. Rejected if transition fails or tab is not visible.
 */
export function changeTab( tabSetId, targetTabId ) {
    const targetTab = ( getVisibleTabs( tabSetId ) || [] ).filter( tab => tab.tabKey === targetTabId )[0];
    const ps = AwPromiseService.instance; //inline instead of global because of unit tests
    return targetTab ? ps.resolve( registry[ tabSetId ].changeTab( targetTab ) ) : ps.reject( `${targetTabId} is not available in tab set` );
}

/**
 * Highlight tab in the targeted tab set
 *
 * @param {String} tabSetId ID that the tab set has registered with
 * @param {String} targetTabId ID of the tab to be highlighted
 * @returns {Promise<Void>} Promise resolved when tab highlight is complete. Rejected if tab is not visible.
 */
export function highlightTab( tabSetId, targetTabId ) {
    const targetTab = ( getVisibleTabs( tabSetId ) || [] ).filter( tab => tab.tabKey === targetTabId )[0];
    const ps = AwPromiseService.instance; //inline instead of global because of unit tests
    return targetTab ? ps.resolve( registry[ tabSetId ].highlightTab( targetTab ) ) : ps.reject( `${targetTabId} is not available in tab set` );
}

const retryMaxCount = 10;

const idleTimeMs = 50;

/**
 * Delay the execution for a given ms
 *
 * @function delay
 * @param {Number} ms - amount of milliseconds to wait
 * @return {Promise} promise - resolved after x amount of milliseconds
 */
const delay = function( ms ) {
    return new Promise( resolve => setTimeout( resolve, ms ) );
};

/**
 * Get the Tab Element based off ID and xPath
 *
 * @function getTabElement
 * @param {String} tabId - ID of the tab to be highlighted
 * @param {String} xPath - xPath to the tab
 * @returns {Element} - the html element to the tab
 */
export const getTabElement = async function( tabId, xPath ) {
    let tabElement = htmlUtils.getElementByXpath( xPath, document.body );
    if( tabElement ) {
        let tabIndex = tabElement.getAttribute( 'tabindex' );
        if( parseInt( tabIndex ) > -1 ) {
            return tabElement;
        }
        // tab is in overflow
        const tabContainer = tabElement.closest( '.sw-tabContainer' );
        if( tabContainer ) {
            const overflowBtn = tabContainer.nextElementSibling;
            if( overflowBtn ) {
                overflowBtn.querySelector( 'button' ).click();
                let retryCounter = 0;
                let popupTabElement;
                let loadingElement;

                setTimeout( function() {
                    retryCounter = retryMaxCount; // After 10 seconds just quit
                }, 10000 );

                while( retryCounter < retryMaxCount ) {
                    loadingElement = htmlUtils.getElementByXpath( '//div[contains(@class, \'aw-popup-command-bar\')]//div[contains(@class, \'aw-jswidgets-loading\')]', document.body );
                    if( !loadingElement ) {
                        popupTabElement = htmlUtils.getElementByXpath( `//li[@tabkey='${tabId}']`, document.body );
                        if( popupTabElement ) {
                            return popupTabElement;
                        }
                        retryCounter++;
                    }
                    await delay( idleTimeMs );
                }
            }
        }
    }
};


/**
 * Click on the tab
 *
 * @function clickOnTab
 * @param {String} tabId - ID of the tab to be highlighted
 * @param {String} xPath - xPath to the tab
 */
export const clickOnTab = async function( tabId, xPath ) {
    const tabElement = await getTabElement( tabId, xPath );
    if( tabElement ) {
        tabElement.click();
    }
};

/**
 * @function highlightTabBasedOnXPath
 * @param {String} tabId - ID of the tab to be highlighted
 * @param {String} xPath - xPath to the tab
 */
export const highlightTabBasedOnXPath = async function( tabId, xPath ) {
    const tabElement = await getTabElement( tabId, xPath );
    if( tabElement ) {
        wcagSvc.afxFocusElement( tabElement );
    }
};

const exports = {
    changeTab,
    highlightTab,
    getVisibleTabs,
    registerTabSet,
    unregisterTabSet,
    clickOnTab,
    highlightTabBasedOnXPath
};
export default exports;

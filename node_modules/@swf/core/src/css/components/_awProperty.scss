// Copyright (c) 2020 Siemens

// base
textarea,
input,
input[type="text"],
input[type="password"] {
    font-family: $font_family;
    font-size: $fontsize_normal;
    padding: $input_padding;
    box-sizing: border-box;
    border-width: $input_border_width;
    border-style: solid;
    border-radius: 2px;
    font-weight: normal;
    font-style: normal;
    font-stretch: normal;
    line-height: $global_line_height;
    letter-spacing: normal;

    &:focus,
    &:hover {
        outline: none;
        border-width: $default_focus_border_width;
        // compute the padding so widget doesn't change size when border grows
        padding: $input_padding + $input_border_width - $default_focus_border_width;
    }

    &:disabled,
    &.sw-changed:disabled {
        padding: $input_padding;
        border-width: $input_border_width;
    }

    &.sw-property-val.sw-changed.active {
        border-width: $default_focus_border_width;
    }
}

.sw-fit-content {
    width: fit-content;
}

input[type="checkbox"],
input[type="radio"] {
    width: auto;
    margin: 0;
}

.sw-property {
    &.sw-component {

        &.sw-autoSize {
            height: auto;
        }
    }

    &.sw-required {
        .sw-property-name {
            padding-left: rem-calc(14);
            position: relative;

            &:before {
                content: "*";
                font-weight: 700;
                font-size: $fontsize_3x_large;
                position: absolute;
                left: 0;
                top: -5px;
            }
        }
    }

    &.sw-row {
        // default prop row to have bottom margin regardless of container - need to override this in col, header, etc....
        margin-bottom: $margin_normal;

        &.sw-autoSize {
            width: auto;
        }

        .sw-property-name,
        .sw-property-nameWrapper {
            width: 40%;
            max-width: rem-calc(200);
            text-align: left;
            align-self: flex-start;
        }

        // align label for toggle / radio / checkbox
        &.sw-nonText {

            .sw-property-name,
            .sw-property-nameWrapper {
                align-self: center;
            }
        }

        .sw-property-val,
        .sw-lov-container {
            width: 60%;
        }
    }

    &.sw-reverse {
        &.sw-component .sw-property-name:not(:empty)::after {
            content: unset;
        }

        &.sw-row {
            .sw-toggle-val {
                margin-right: 0;
            }
            .sw-property-name {
                flex: 3;
                max-width: 100%;
                min-width: 20%;
            }

            .sw-property-val {
                flex: 2;
                max-width: rem-calc(200);
                min-width: rem-calc(100);
            }

            // to reverse direction of a reversed element in a component
            // because default for boolean controls is reversed initially
            &.sw-labelLeft {
                flex-direction: row;
                width: 100%;

                // revisitMe: Craig. needed?
                .sw-property-name {
                    flex: 1 1 auto;
                }
            }
        }
    }
}

.sw-property-name,
.sw-errorSeparator,
.sw-errorHint {
    width: 100%;
    max-width: none;
    min-width: rem-calc(100);
    font-weight: 600;
    overflow: hidden;
    text-overflow: ellipsis;
}

.sw-property-val {
    flex: auto;
    width: 100%;
    display: block;
    word-break: break-word;
}

.sw-disabled {
    .sw-property-name {
        cursor: default;
    }
}

.sw-readOnly {

    .sw-property-val,
    input[type="text"]:disabled.sw-property-val,
    .aw-jswidgets-arrayWidgetContainer {
        border: none;
        box-shadow: none;
        background: none;
        padding: 0;
    }

    textarea.sw-property-val {
        resize: none;
    }
}

// validation errors
.sw-errorFlag {
    position: relative;

    .sw-property-name {
        padding-left: $padding_xlarge;

        // error flag icon
        &::before {
            content: "\26A0";
            left: 0;
            position: absolute;
        }
    }

    &.sw-row .sw-property-name {
        &::before {
            left: 0;
        }
    }

    textarea,
    input[type="text"],
    input[type="password"],
    input[type="text"].sw-changed,
    input[type="password"].sw-changed {
        &:last-child {
            background-position: calc(100% - 8px) 50%;
        }

        background-image: url(~image/indicatorWarningSign16.svg);
        background-position: calc(100% - 32px) 50%;
        background-origin: border-box;
        background-repeat: no-repeat;
        background-size: 16px 16px;
    }
}

.sw-lov-container {
    display: flex;
    position: relative;
    width: 100%;

    // override margin-right on input
    &.sw-component.sw-row>*:not(:last-child) {
        margin-right: 0;
    }

    // make room for conditional pic
    .sw-lov-thumb+input.sw-property-val {
        padding-left: rem-calc(32);

        &:hover,
        &:focus {
            padding-left: rem-calc(31);
        }
    }

    input.sw-property-val {
        padding-right: rem-calc(24);
        text-overflow: ellipsis;
        cursor: pointer;
        user-select: none;
    }

    >.sw-lov-thumb {
        position: absolute;
        align-self: center;
        height: $lov_icon_size;
        width: $lov_icon_size;
        left: $margin_normal;

        svg {
            height: 100%;
        }
    }
}

.sw-time-lov-val {
    &.aw-widget-icon {
        width: 16px;
        height: 16px;
    }
}

.sw-widget-iconContainer {
    cursor: pointer;
    position: absolute;
    right: 0;
    width: 32px;
    height: 32px;
}

// placeholder styling for LCS-660264
.sw-property .sw-property-valWrapper {
    width: 60%;
    display: flex;

    .sw-property-val {
        flex: none;
        margin-right: $margin_normal;
    }

    .sw-property-val,
    .sw-property-name {
        overflow-wrap: break-word;
        width: auto;
    }
}

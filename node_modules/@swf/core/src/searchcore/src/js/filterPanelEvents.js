// Copyright (c) 2020 Siemens

/**
 * Note: This module does not return an API object. The API is only available when the service defined this module is
 * injected by AngularJS.
 *
 * @module js/filterPanelEvents
 */

import filterPanelUtils from 'js/filterPanelUtils';
import searchFilterSvc from 'js/aw.searchFilter.service';
import _ from 'lodash';
import analyticsSvc from 'js/analyticsService';
import 'js/uwDirectiveDateTimeService';

/**
 * publish event to select hierarchy category
 *
 * @function selectHierarchyCategory
 * @memberOf filterPanelEvents
 *
 * @param {Object}category - filter category
 *
 */
export let selectHierarchyCategory = function( category ) {
    // if there is a hierarchy filter selected, clear it. Otherwise do the default category selection
    if( !_.isUndefined( category.filterValues.parentnodes[ 0 ] ) && category.filterValues.parentnodes[ 0 ].selected ) {
        var interName = filterPanelUtils.INTERNAL_OBJECT_FILTER + category.filterValues.parentnodes[ 0 ].stringValue;
        searchFilterSvc.addOrRemoveFilter( category.internalName, interName, undefined, 'ObjectFilter' );
    }
};

/**
 * publish event to select Hierarhcy filter
 *
 * @function selectHierarchyFilter
 * @memberOf filterPanelEvents
 *
 * @param {Object} category - the category of the selected filter
 * @param {Object} node - the selected hierarhcy node (same structure as search filter)
 */
export let selectHierarchyFilter = function( category, node ) {
    var interName = filterPanelUtils.INTERNAL_OBJECT_FILTER + node.stringValue;
    /*
     * The logic in 'filterSelected' is to handle the case when the user has selected the current parent node.
     * 'isLast' is used to determine if the user has clicked the parent node. In this case we want to deselect the
     * filter. Setting 'selected' to true forces the 'clearFilter' method to be called in
     * SearchFilterCommandHandler.java
     */
    if( node.isLast || node.selected ) {
        searchFilterSvc.addOrRemoveFilter( category.internalName, interName, undefined, 'ObjectFilter' );
    } else if( !node.selected ) {
        searchFilterSvc.addOrRemoveFilter( category.internalName, interName, true, 'ObjectFilter' );
    }
};

/**
 * publish event to select date range
 *
 * @function selectFilterAnalytics
 * @memberOf filterPanelEvents
 *
 * @param {Number} idx - index
 * @param {Object} interName - internal name
 * @param {Object} category - the category of the selected filter
 */
export let selectFilterAnalytics = function( idx, interName, category ) {
    var sanEvent = {};
    sanEvent.sanAnalyticsType = 'Commands';

    if( idx === -1 && interName ) {
        sanEvent.sanCommandId = 'addSearchFilter';
        sanEvent.sanCommandTitle = 'Add Search Filter';
    } else {
        sanEvent.sanCommandId = 'removeSearchFilter';
        sanEvent.sanCommandTitle = 'Remove Search Filter';
    }
    sanEvent.sanCmdLocation = 'primarySearchPanel';
    sanEvent.sanCategoryType = 'Other';

    var outOfTheBoxValues = [ 'Categorization.category', 'WorkspaceObject.object_type', 'POM_application_object.owning_user',
        'POM_application_object.owning_group', 'WorkspaceObject.release_status_list', 'WorkspaceObject.date_released',
        'POM_application_object.last_mod_date', 'POM_application_object.last_mod_user', 'WorkspaceObject.project_list'
    ];

    if( outOfTheBoxValues.includes( category.internalName ) ) {
        sanEvent.sanCategoryType = category.internalName;
    }
    analyticsSvc.logCommands( sanEvent );
};

export default {
    selectHierarchyCategory,
    selectHierarchyFilter,
    selectFilterAnalytics
};

//@<COPYRIGHT>@
//==================================================
//Copyright 2022.
//Siemens Product Lifecycle Management Software Inc.
//All Rights Reserved.
//==================================================
//@<COPYRIGHT>@

/*global
 */

/**
 * @module js/searchStateHelperService
 */
import appCtxService from 'js/appCtxService';

export const getForceChartParameterValue = ( searchState ) => {
    let forceChart = true;
    if( searchState && searchState.selectFirstObjectPreference ) {
        let firstObjectSelectionPref = appCtxService.getCtx( 'preferences.' + searchState.selectFirstObjectPreference );
        firstObjectSelectionPref = firstObjectSelectionPref && firstObjectSelectionPref[ 0 ] ? firstObjectSelectionPref[ 0 ].toLowerCase() : undefined;
        forceChart = firstObjectSelectionPref !== 'true';
    }
    return forceChart;
};

export const getAutoUpdateFilteringPreferenceValue = () => {
    let autoApplyFilters = true;
    let autoApplyFiltersPreference = appCtxService.getCtx( 'preferences.AWC_Search_Auto_Update_Filters' );
    autoApplyFiltersPreference = autoApplyFiltersPreference && autoApplyFiltersPreference[ 0 ] ? autoApplyFiltersPreference[ 0 ].toLowerCase() : undefined;
    autoApplyFilters = autoApplyFiltersPreference !== 'false';
    return autoApplyFilters;
};

export const getValueForShowAutoUpdateFilteringOption = () => {
    let showAutoUpdateFilteringOption = true;
    let showAutoUpdateFiltersPreferenceValue = appCtxService.getCtx( 'preferences.AWC_Search_Show_Auto_Update_Filters' );
    showAutoUpdateFiltersPreferenceValue = showAutoUpdateFiltersPreferenceValue && showAutoUpdateFiltersPreferenceValue[ 0 ] ? showAutoUpdateFiltersPreferenceValue[ 0 ].toLowerCase() : undefined;
    showAutoUpdateFilteringOption = showAutoUpdateFiltersPreferenceValue !== 'false';
    return showAutoUpdateFilteringOption;
};

export const constructBaseSearchCriteria = ( searchContext, stateParams ) => {
    const preferences = appCtxService.getCtx( 'preferences' );
    const colorFilteringValue = preferences.AWC_ColorFiltering[ 0 ];
    searchContext.colorToggle = searchContext.showChartColorBars ? colorFilteringValue : 'false';
    searchContext.forceChart = searchStateHelperService.getForceChartParameterValue( searchContext );
    searchContext.bulkFiltering = searchContext.bulkFiltering !== false;
    searchContext.showAutoUpdateFilteringOption = searchStateHelperService.getValueForShowAutoUpdateFilteringOption();
    searchContext.bulkFilteringPreference = 'AWC_Search_Auto_Update_Filters';
    searchContext.autoApplyFilters = searchContext.bulkFiltering ? searchStateHelperService.getAutoUpdateFilteringPreferenceValue() : true;
    searchContext.bulkFiltersApplied = false;
    const searchPreFilters = appCtxService.getCtx( 'searchPreFilters' );
    const ownerPreFilters = searchPreFilters ? searchPreFilters.ownPrefilters : undefined;
    const categoryPreFilters = searchPreFilters ? searchPreFilters.catPrefilters : undefined;

    switch ( searchContext.provider ) {
        case 'Awp0FullTextSearchProvider': {
            searchContext.criteria = searchContext.criteria ? searchContext.criteria : {};
            searchContext.criteria.limitedFilterCategoriesEnabled = searchContext.criteria && searchContext.criteria.limitedFilterCategoriesEnabled ?
                searchContext.criteria.limitedFilterCategoriesEnabled : preferences.AWC_Limited_Filter_Categories_Enabled[ 0 ];
            searchContext.criteria.listOfExpandedCategories = '';
            if( categoryPreFilters && categoryPreFilters.selectedCategory && categoryPreFilters.selectedCategory.length > 0
                || ownerPreFilters && ownerPreFilters.selectedCategory && ownerPreFilters.selectedCategory.length > 0 ) {
                searchContext.criteria.forceThreshold = 'true';
            } else if( stateParams && stateParams.hasOwnProperty( 'filter' ) && stateParams.filter && stateParams.filter.length > 0 ) {
                searchContext.criteria.forceThreshold = 'false';
            }
            if( stateParams && stateParams.hasOwnProperty( 'savedSearchUid' ) ) {
                searchContext.criteria.savedSearchUid = stateParams.savedSearchUid;
            }
        }
    }
    return searchContext;
};

export const getCriteriaForNewSearch = ( searchState, urlSearchString ) => {
    let criteria = searchState.criteria;
    if( criteria ) {
        criteria.searchString = urlSearchString;
        switch ( searchState.provider ) {
            case 'Awp0FullTextSearchProvider': {
                criteria.forceThreshold = 'true';
                criteria.listOfExpandedCategories = '';
            }
        }
    }
    return criteria;
};

export const getCriteriaAfterFilterSelection = ( searchState ) => {
    let criteria = searchState.criteria;
    switch ( searchState.provider ) {
        case 'Awp0FullTextSearchProvider': {
            criteria.forceThreshold = 'false';
            if( searchState.additionalSearchString && searchState.additionalSearchString.length > 0 ) {
                criteria.searchString = searchState.additionalSearchString;
            }
        }
    }
    return criteria;
};

const searchStateHelperService = {
    constructBaseSearchCriteria,
    getForceChartParameterValue,
    getCriteriaForNewSearch,
    getCriteriaAfterFilterSelection,
    getAutoUpdateFilteringPreferenceValue,
    getValueForShowAutoUpdateFilteringOption
};

export default searchStateHelperService;

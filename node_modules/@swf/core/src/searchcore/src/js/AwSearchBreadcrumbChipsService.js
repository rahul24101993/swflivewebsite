import AwChip from 'viewmodel/AwChipViewModel';
import AwButton from 'viewmodel/AwButtonViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import resizeObserverSvc from 'js/resizeObserver.service';
import AwSearchBreadcrumbChipsUtils from 'js/AwSearchBreadcrumbChipsUtils';
import _ from 'lodash';

export let doNothing = () => {
    //NO OP
};

export const attachResizeObserver = ( viewModel, elementRefList ) => {
    const ref = elementRefList.get( 'chiplist' );
    const { dispatch } = viewModel;

    const addResizeObserver = () => {
        if( resizeObserverSvc.supportsResizeObserver() ) {
            const callback = _.debounce( () => {
                if( ref && ref.current && ref.current.parentElement && ref.current.parentElement.parentElement ) {
                    const data = viewModel.getData();
                    var overflowReturn = AwSearchBreadcrumbChipsUtils.calculateOverflow( elementRefList, data.visibleChipArea, data.visibleHeightChipArea, data.breadcrumbChips,
                        data.overflowConfig.overflownChips, data.displayBreadcrumbChips, data.inHeader, data.searchFilterCategoryExpandMore, false );
                    var overflowConfig = {
                        overflownChips: overflowReturn.overflownChips,
                        hideMore: true
                    };
                    dispatch && dispatch( { path: 'data', value:
                    { displayBreadcrumbChips: overflowReturn.displayChips, displayOverflowButton: overflowReturn.displayOverflowButton, overflowConfig: overflowConfig } } );
                }
            }, 5, {
                maxWait: 50,
                trailing: true,
                leading: false
            } );
            ref.current.resizeObserver = resizeObserverSvc.observe( ref.current.parentElement.parentElement, callback );
        }
    };
    addResizeObserver();
};

export const onUnMount = ( elementRefList ) => {
    if( elementRefList ) {
        const ref = elementRefList.get( 'chiplist' );
        ref.current && ref.current.resizeObserver && ref.current.resizeObserver();
    }
};

export const AwSearchBreadcrumbChipsRenderFunction = ( props ) => {
    const { viewModel, actions, elementRefList } = props;
    const { data, i18n } = viewModel;
    let { chipOverflowPopup } = actions;
    let chiplistRef = elementRefList.get( 'chiplist' ).current;
    const chipCondition = {
        conditions: {
        }
    };

    const openOverflow = () => {
        if( !chipOverflowPopup.open ) {
            chipOverflowPopup.show( {
                width: 'auto',
                height: 'auto'
            } );
        }
    };

    const closePopup = () => {
        chipOverflowPopup.hide();
    };

    let loadedVMO = data.displayBreadcrumbChips;
    return (
        <div className={ data.inHeader ? 'aw-search-breadcrumb-chips' : 'aw-search-breadcrumb-chipsPanel' }>
            <div className={'aw-layout-flexbox ' + ( data.inHeader ? 'aw-widgets-chipList' : 'aw-widgets-chipListPanel' )} ref={elementRefList.get( 'chiplist' )}>
                { data.displayBreadcrumbChips && data.displayBreadcrumbChips.length > 0 && loadedVMO.map( ( chipModel, index ) => {
                    return (
                        <AwChip
                            chip={chipModel}
                            action={doNothing()}
                            uiIconAction={actions.removeFilterAction}
                            key={index}
                            chipCondition={chipCondition}>
                            { chipModel.children && chipModel.children.map( ( chipChildModel, childIndex ) => {
                                return (
                                    <AwChip
                                        chip={chipChildModel}
                                        action={doNothing()}
                                        uiIconAction={actions.removeFilterAction}
                                        key={childIndex}
                                        chipCondition={chipCondition}>
                                    </AwChip>
                                );
                            } )}
                        </AwChip>
                    );
                } )}
                {data.overflowConfig.overflownChips && data.overflowConfig.overflownChips.length > 0 &&
                    <div className={ data.inHeader ? 'sw-chip-overflowContainer' : 'sw-chip-overflowContainerPanel' } ref={chipOverflowPopup.reference}>
                    <AwButton
                        className={ data.inHeader ? 'sw-chip-overflowButton' : 'sw-chip-overflowButtonPanel' }
                        action={openOverflow}
                        closeAction={closePopup}
                        buttonType='chromeless'
                        label= {data.displayOverflowButton}>
                        {data.displayOverflowButton}
                    </AwButton>
                    <AwPopup {...chipOverflowPopup.options}>
                        <div className={'aw-layout-flexbox sw-column aw-search-overflow ' + ( data.inHeader ? 'aw-widgets-overflow-chipList' : 'aw-widgets-overflow-chipListPanel' )}>
                            { data.overflowConfig.overflownChips.map( ( chipModel, overflowIndex ) => {
                                return (
                                    <AwChip
                                        chip={chipModel}
                                        action={doNothing()}
                                        uiIconAction={actions.removeFilterAction}
                                        key={overflowIndex}
                                        chipCondition={chipCondition}>
                                        { chipModel.children && chipModel.children.map( ( chipChildModel, childOverflowIndex ) => {
                                            return (
                                                <AwChip
                                                    chip={chipChildModel}
                                                    action={doNothing()}
                                                    uiIconAction={actions.removeFilterAction}
                                                    key={childOverflowIndex}
                                                    chipCondition={chipCondition}>
                                                </AwChip>
                                            );
                                        } )}
                                    </AwChip>
                                );
                            } )}
                        </div>
                    </AwPopup>
                </div>
                }
                {data.breadcrumbChips && data.breadcrumbChips.length > 0 &&
                    <AwButton className='aw-search-clearAll' buttonType='chromeless' action={actions.clearAllAction} label={i18n.clear}>{i18n.clear}</AwButton>
                }
            </div>
        </div>
    );
};

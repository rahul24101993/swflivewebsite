// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * This utility module provides helpful functions for table column content.
 *
 * @module js/splmTableMenuUtility
 */
import _ from 'lodash';
import eventBus from 'js/eventBus';
import appCtxService from 'js/appCtxService';
import localeService from 'js/localeService';
import messagingService from 'js/messagingService';

var exports = {};

exports.columnSortChanged = ( gridId, columnDef, gridContextDispatcher, sortDirection, currentColumnIndex, isBulkEditing, columnProvider ) => {
    if( isBulkEditing ) {
        return;
    }
    var newColumnIdx = columnDef.index;
    var columnField = columnDef.field;
    var targetDirection = sortDirection;

    if( columnProvider.sortCriteria && columnProvider.sortCriteria.length > 0 ) {
        var oldSortCriteria = columnProvider.sortCriteria[ 0 ];

        if( currentColumnIndex === newColumnIdx && oldSortCriteria.fieldName === columnField &&
            oldSortCriteria.sortDirection.toUpperCase() === sortDirection.toUpperCase() ) {
            return;
        }
    }

    if( !columnProvider.sortCriteria ) {
        columnProvider.sortCriteria = [];
    } else {
        columnProvider.sortCriteria.pop();
    }

    if( targetDirection !== '' ) {
        columnProvider.sortCriteria.push( {
            fieldName: columnField,
            sortDirection: targetDirection
        } );
    }

    // revisitme tstark set the focusHeader
    // tstark - leave for refactor
    // tableElement._tableInstance.focusHeader = columnField;

    // Sets sort criteria on declColumnProviderJSON
    columnProvider.setSortCriteria( columnProvider.sortCriteria );

    // Update sort criteria in sublocation context
    var sublocationCtx = appCtxService.getCtx( 'sublocation' );
    if( sublocationCtx ) {
        // LCS-137109 - Sorting new AW table elements by column not working
        // Copy columnProvider.sortCriteria instead of using reference
        let sortCriteria = _.clone( columnProvider.sortCriteria );
        appCtxService.updatePartialCtx( sublocationCtx.clientScopeURI + '.sortCriteria', sortCriteria );
        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', sortCriteria );
    }

    // revisitme tstark call setHeaderCellSortDirection
    // tstark - leave for refactor
    // tableCtrl.setHeaderCellSortDirection( currentColumnIndex, newColumnIdx, targetDirection );

    if ( gridContextDispatcher ) {
        gridContextDispatcher( {
            type: 'UPDATE_VALUES',
            newColumnIndex: newColumnIdx,
            sortDirection: targetDirection,
            currentColumnIndex: currentColumnIndex
        } );
    }
};

exports.closeColumnMenu = ( popupRef ) => {
    if( popupRef ) {
        popupRef.hide();
    }
};

exports.setFilterDisability = function( gridId, isDisabled ) {
    var filterButtonElement = document.querySelector( '.' + gridId + '_menu .filter-button' );

    if( filterButtonElement ) {
        if( isDisabled ) {
            filterButtonElement.classList.add( 'disabled' );
        } else {
            filterButtonElement.classList.remove( 'disabled' );
        }
    }
};

/**
 * Determines if server is available, calls function to hide the column based on columnDef
 * @param {AwColumnInfo} columnDef - The column Def
 * @param {Object} gridContextDispatcher - dispatcher for table
 */
exports.hideColumn = function( columnDef, gridContextDispatcher ) {
    if ( gridContextDispatcher && columnDef ) {
        gridContextDispatcher( {
            type: 'UPDATE_VALUES',
            hideColumnField: columnDef.field
        } );
    }
};

exports.freezeColumn = function( gridId, columnDef, isFreezeAction, defaultColumnPinIndex, gridContextDispatcher ) {
    if ( gridContextDispatcher ) {
        let pinColumnData = {};
        pinColumnData.columnDef = columnDef;
        pinColumnData.isFreezeAction = isFreezeAction;
        pinColumnData.defaultColumnPinIndex = defaultColumnPinIndex;
        gridContextDispatcher( {
            type: 'UPDATE_VALUES',
            pinColumnData:pinColumnData
        } );
    }
};

exports.toggleDynamicRowHeight = function( gridContextDispatcher, dynamicRowHeightStatus ) {
    if ( gridContextDispatcher ) {
        gridContextDispatcher( {
            type: 'UPDATE_VALUES',
            dynamicRowHeightStatus: !dynamicRowHeightStatus
        } );
    }
};

export default exports;

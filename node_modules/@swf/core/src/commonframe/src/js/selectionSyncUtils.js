// Copyright (c) 2021 Siemens

/**
 * @module js/selectionSyncUtils
 */
import AwStateService from 'js/awStateService';
import AwUrlMatcherFactoryService from 'js/awUrlMatcherFactoryService';
import _ from 'lodash';

export const getSelectionParamsToSync = ( selectedObjects, selectionQueryParamKey, baseSelection ) => {
    let newParams = {};
    let selectedUids = !_.isEmpty( selectedObjects ) ? selectedObjects.map( selectionObj => selectionObj.uid ) : [];
    var stateParams = AwStateService.instance.params;
    if( stateParams.hasOwnProperty( selectionQueryParamKey ) ) {
        // If a single object is selected update s_uid
        if( selectedUids.length === 1 ) {
            newParams[ selectionQueryParamKey ] = selectedUids[ 0 ];
        } else if( selectedUids.length === 0 ) {
            // revisitme Charu - add support for getParentUid
            // If nothing is selected use base selection
            if( baseSelection && baseSelection.uid ) {
                newParams[ selectionQueryParamKey ] = baseSelection.uid;
            } else {
                newParams[ selectionQueryParamKey ] = stateParams.uid;
            }
        } else {
            // Otherwise clear parameter
            newParams[ selectionQueryParamKey ] = null;
        }
    }
    return { newParams };
};

// revisitme Charu - add support for 'initial' - when to reload the location
export const syncURLWithNewParams = ( newParams, initial = true ) => {
    AwStateService.instance.go( '.', newParams, {
        location: initial ? 'replace' : true
    } );
};

export const getChangedStateParams = eventData => {
    if( _.isEmpty( eventData ) ) {
        return { changedParams: AwStateService.instance.params };
    }
    let oldParams = parseUrl( eventData.oldUrl );
    let newParams = parseUrl( eventData.newUrl );
    let changedParams = {};
    for( var i in newParams ) {
        if( newParams[ i ] !== oldParams[ i ] ) {
            changedParams[ i ] = newParams[ i ];
        }
    }
    return { changedParams: changedParams };
};

const parseUrl = url => {
    let params = {};
    let urlMatcherFactory = AwUrlMatcherFactoryService.instance;
    var paramsStart = url.lastIndexOf( '?' );
    var paramsStr = '';
    if( paramsStart > -1 ) {
        paramsStr = url.substr( paramsStart + 1 );
        var paramPairs = paramsStr.split( '&' );
        for( var i = 0; i < paramPairs.length; i++ ) {
            var keyValue = paramPairs[ i ].split( '=' );
            if( keyValue.length === 2 ) {
                params[ keyValue[ 0 ] ] = urlMatcherFactory.type( 'string' )
                    .decode( decodeURIComponent( keyValue[ 1 ] ) );
            }
        }
    }
    return params;
};

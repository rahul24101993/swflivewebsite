// Copyright (c) 2020 Siemens

/**
 * This service is used to map the declarative resolve configuration to the ui router resolve state functionality.
 *

 * @module js/stateResolveService
 */
import _ from 'lodash';
import moduleLoader from 'js/moduleLoader';
import AwPromiseService from 'js/awPromiseService';
import appCtxService from 'js/appCtxService';
import viewModelProcessingFactory from 'js/viewModelProcessingFactory';
import actionService from 'js/actionService';

/**
 * Filter parameters that are not set and build the new object.
 *
 * @param {Object} stateParams - Routing state params.
 * @return {Object} params - processed paramater object.
 */
var processParameters = function( stateParams ) {
    return Object.keys( stateParams )
        // Filter parameters that are not set
        .filter( function( param ) {
            return stateParams[ param ];
        } )
        // Build the new object
        .reduce( function( acc, nxt ) {
            acc[ nxt ] = stateParams[ nxt ];
            return acc;
        }, {} );
};

/**
 * Get the state params object with processed params.
 *
 * @param {Object} stateParams - Routing state params.
 * @return {Object} params - Object of original state params and processed params.
 */
var getStateParamsObject = function( stateParams ) {
    return {
        params: stateParams,
        processed: processParameters( stateParams )
    };
};

/**
 * Create declarative functions from resolveAction object and set it on the state.resolve
 *
 * @param {Object} state - Routing state.
 * @returns {Array} returns array of the resolveActions
 */
export const getResolvedActions = function( state ) {
    let resolveActions = [];
    _.forEach( state.resolveActions, function( action, actionName ) {
        resolveActions.push( {
            token: `${actionName}Response`,
            deps: [ '$transition$' ],
            resolveFn: ( transition ) => {
                //execute declarative action here
                var defer = AwPromiseService.instance.defer();
                var declarativeViewModelId = '__stateResolveSvc';
                var declViewModel = viewModelProcessingFactory.createDeclViewModel( {
                    _viewModelId: declarativeViewModelId
                } );
                var dataCtxNode = {
                    ctx: appCtxService.ctx,
                    data: declViewModel
                };
                // Update the state params on app ctx.
                dataCtxNode.ctx.state = getStateParamsObject( transition.params() );
                moduleLoader.loadDependentModule( action.deps ).then( function( depModuleObj ) {
                    actionService.executeAction( declViewModel, action, dataCtxNode, depModuleObj ).then( function success( response ) {
                        defer.resolve( response );
                    }, function reject( error ) {
                        defer.reject( error );
                    } ).finally( function() {
                        declViewModel._internal.destroy();
                    } );
                } );
                return defer.promise;
            }
        } );
    } );
    if( state.resolve ) {
        resolveActions = Array.isArray( state.resolve ) ? state.resolve.concat( resolveActions ) : resolveActions;
    }
    return resolveActions;
};

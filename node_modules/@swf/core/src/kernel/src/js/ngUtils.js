// Copyright (c) 2020 Siemens
/* eslint-env es6 */
/**
 * revisitme
 * lot of angularism here.
import AwCompileService from 'js/awCompileService';

 */

/**
 * This module provides reusable functions related to handling AngujarJS operations.
 *
 * @module js/ngUtils
 */

let exports;

/**
 * Locate the closest parent element
 * http://stackoverflow.com/a/24107550/888165
 *
 * @param {DOMElement} element element to start search
 *
 * @param {String} selector css selector to use in locating closest element
 *
 * @param {Int} maxLevelsUp the maximum levels up to search
 *
 * @returns {DOMElement} the closest parent element
 */
export let closestElement = function( element, selector, maxLevelsUp ) {
    if( element && typeof element.length !== 'undefined' && element.length ) {
        element = element[ 0 ];
    }

    var matchesFn;

    // find vendor prefix
    [ 'matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector' ].some( function( fn ) {
        if( typeof document.body[ fn ] === 'function' ) {
            matchesFn = fn;
            return true;
        }
        return false;
    } );

    // traverse parents
    var parent;
    var currLevelUp = 1;
    while( element ) {
        if( maxLevelsUp !== undefined && currLevelUp > maxLevelsUp ) {
            return null;
        }

        parent = element.parentElement;
        if( parent && parent[ matchesFn ]( selector ) ) {
            return parent;
        }
        element = parent;
        currLevelUp++;
    }

    return null;
};

/**
 * Destroys and removes the passed in DOMElement
 *
 * @param {DOMElement} element - DOMElement
 */
export let destroyElement = function( element ) {
    var parentElement = element.parentElement;
    if( parentElement ) {
        parentElement.removeChild( element );
    }
};

/**
 * Destroys and removes the passed in DOMElements based under input DOM Element
 *
 * @param {DOMElement} element - DOMElement that has DOM Elements as child elements
 * @param {String} className - class name to locate compiled elements
 */
export let destroyChildElements = function( element, className ) {
    var compiledElements = element.getElementsByClassName( className );
    for( var i = compiledElements.length; i > 0; i-- ) {
        var elem = compiledElements[ i - 1 ];
        exports.destroyElement( elem );
    }
};

exports = {
    closestElement,
    destroyElement,
    destroyChildElements
};
export default exports;

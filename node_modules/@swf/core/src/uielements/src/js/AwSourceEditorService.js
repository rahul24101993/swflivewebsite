// Copyright (c) 2021 Siemens

/**
 * @module js/AwSourceEditorService
 */
import _ from 'lodash';
import MonacoEditor from 'react-monaco-editor';

// the content of source editor needs to be re initialzed to remove auto highlight
export const srcEditorContentChange = ( editorRef ) => {
    const editormodel = editorRef.getModels()[0];
    editormodel.setValue( editormodel.getValue() );
};

export const awSourceEditorRenderFunction = ( props ) => {
    const { name, config, viewModel } = props;
    let fileConfig = Object.assign( {}, config );
    let content = _.isObject( props.value ) ?  { ...props.value } : props.value;
    let defaultConfig = {
        language: 'text',
        options: {
            readOnly: false,
            wordWrap: 'off',
            lineNumbers: 'on',
            automaticLayout: false,
            minimap: {},
            fontFamily: 'monospace'
        },
        onChange: ( newContents, event ) => props.update( newContents ),
        editorDidMount: ( editorRef, monaco ) => { viewModel.dispatch( { path: 'data.monacoEditorInstance', value: monaco.editor } ); }
    };
    let fileTypeLanguageMap = {
        js: 'javascript',
        txt: 'text',
        ts: 'typescript'
    };
    fileConfig = _.defaultsDeep( fileConfig, defaultConfig );
    if( config && content && !_.isEmpty( config ) && !_.isEmpty( content ) ) {
        let fileContent = content.data ? content.data : content;
        let fileType = content.config && content.config.url ? content.config.url.split( '.' ).pop() : null;
        fileConfig.language = fileType && fileTypeLanguageMap[ fileType.toLowerCase() ] !== undefined ? fileTypeLanguageMap[ fileType ] : fileType || config.language;
        fileConfig.height = config.height ? config.height + 'px' : 'inherit';
        fileConfig.width = config.width ? config.width + 'px' : 'inherit';
        fileConfig.theme = config.theme;
        fileConfig.value = fileType === 'json' && _.isObject( fileContent ) ? JSON.stringify( fileContent, null, 4 ) : fileContent;
    }
    return name  && <MonacoEditor { ...fileConfig } ></MonacoEditor>;
};

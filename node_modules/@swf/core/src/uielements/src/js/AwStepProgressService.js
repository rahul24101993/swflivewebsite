// Copyright (c) 2020 Siemens

/**
 * @module js/AwStepProgressService
 */
import _ from 'lodash';
import wcagSvc from 'js/wcagService';

let markCompleted = ( step ) => {
    step.isCompleted = true;
    step.isCurrentActive = false;
    step.isInProgress = false;
};

let markInProgressStep = ( step ) => {
    step.isCompleted = false;
    step.isCurrentActive = true;
    step.isInProgress = true;
};

let isEqual = ( thisStep, thatStep ) => {
    if( thisStep.dbValue && thatStep.dbValue && thisStep.dbValue === thatStep.dbValue ) {
        return true;
    }
    if( thisStep.uiValue && thatStep.uiValue && thisStep.uiValue === thatStep.uiValue ) {
        return true;
    }
    return false;
};

let isStepClickable = ( step ) => {
    return !step.isCurrentActive && ( step.isCompleted || step.isInProgress );
};

var hasStepCompleted = isStepClickable;

let addClass = ( step ) => step.isCurrentActive ? 'aw-progress-bar-text-current' : 'aw-progress-bar-text';

let getCurrentActiveStepNo = ( steps ) => {
    let stepNo = steps.findIndex( step => {
        return step.isCurrentActive;
    } );
    return stepNo + 1;
};

let stepProgressType = ( clickable ) => {
    return clickable ? 'ClickableStepProgress' : 'StepProgress';
};

export const awStepProgressRenderFunction = ( props ) => {
    let { steps, clickable, currentStep, completedStep, viewModel, i18n } = props;

    if( !steps ) {
        return;
    }
    const { data, dispatch } = viewModel;

    if( !data.isStepLinkClicked ) {
        if( completedStep ) {
            markCompleted( completedStep );
            steps.map( aStep => {
                if( isEqual( aStep, completedStep ) ) {
                    markCompleted( aStep );
                }
            } );
        }
        if( currentStep ) {
            markInProgressStep( currentStep );
            steps.map( aStep => {
                if( isEqual( aStep, currentStep ) ) {
                    markInProgressStep( aStep );
                }
            } );
        }
    }

    let moveToStep = ( selectedStep ) => {
        if( clickable ) {
            props.stepClickAction( selectedStep );
            dispatch( { path: 'data.isStepLinkClicked', value: true } );
        }
    };

    let handleKeyPress = ( event, selectedStep ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            moveToStep( selectedStep );
        }
    };

    data.isStepLinkClicked = false;
    const getLabel = ( step ) => step.isCompleted ? i18n.COMPLETED : i18n.CURRENT;
    const getLabelContainer = ( step ) => ( step.isCompleted || step.isCurrentActive ) && <span className='hidden'>{getLabel( step )} </span>;

    let stepsElements = steps.map( ( step, index ) => {
        return (
            <li key={ index } data-locator={ step.propertyDisplayName } title={ step.propertyDisplayName } className={ step.isCurrentActive ? 'aw-step-progressCurrentChevron' : 'aw-step-progressChevron' }>
                { clickable &&
                    <div data-locator='aw-step-progressChevronText' className='aw-step-progressChevronText' role='button' aria-disabled={ !isStepClickable( step ) }>
                        { getLabelContainer( step )}
                        { !isStepClickable( step ) &&
                            <span className={ addClass( step ) }>{ step.propertyDisplayName }</span>
                        }
                        { isStepClickable( step ) &&
                            <a href='javscript: void(0);' onClick={ () => moveToStep( step ) } className={ addClass( step ) } tabIndex='0' onKeyDown={ ( e ) => handleKeyPress( e, step ) }>
                                { step.propertyDisplayName }
                            </a>
                        }
                    </div>
                }
                { !clickable &&
                    <div data-locator='aw-step-progressChevronText' className='aw-step-progressChevronText' role='button' aria-disabled='true'>
                        { getLabelContainer( step )}
                        { !hasStepCompleted( step ) &&
                            <span className={ addClass( step ) }>{ step.propertyDisplayName }</span>
                        }
                        { hasStepCompleted( step ) &&
                            <span className='aw-progress-bar-completed'>{ step.propertyDisplayName }</span>
                        }
                    </div>
                }
            </li>
        );
    } );

    return (
        <div data-locator={ stepProgressType( clickable ) } >
            <div>
                <ul className='aw-step-progressChevronContainer'>
                    { stepsElements }
                </ul>
            </div>
        </div>
    );
};

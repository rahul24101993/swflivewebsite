// Copyright (c) 2020 Siemens

/**
 * This service is used to the saveHandler object based on configuration.
 *
 * @module js/saveHandlerService
 */
import adapterParser from 'js/adapterParserService';
import appCtxService from 'js/appCtxService';
import _ from 'lodash';
import cfgSvc from 'js/configurationService';

var exports = {};

/**
 * ############################################################<BR>
 * Define the public functions exposed by this module.<BR>
 * ############################################################<BR>
 */

/**
 * This method returns the adapted objects based on a given object. This takes an array of source objects on which
 * the conditions will be applied. If any of the source object satisfies the condition, it takes the target object
 * corresponding to the sourceobject and returns it.
 *
 * @param {Array} sourceObjects - source objects
 * @param {Array} evaluationContext - additional evaluation context needs to be passed to saveHandlers configuration
 * @return {Promise} Resolved with an array of adapted objects containing the results of the operation.
 */
export let getSaveServiceHandlers = async function( sourceObjects, evaluationContext ) {
    sourceObjects.push( appCtxService.ctx );
    if( evaluationContext ) {
        sourceObjects.push( evaluationContext );
    }
    return await cfgSvc.getCfg( 'saveHandlers' ).then( function( saveHandlers ) {
        return adapterParser.getAdaptedObjects( sourceObjects, saveHandlers ).then(
            function( adaptedObjects ) {
                _.forEach( sourceObjects, function( n ) {
                    adaptedObjects = _.without( adaptedObjects, n );
                } );
                return adaptedObjects;
            } );
    } );
};

exports = {
    getSaveServiceHandlers
};
export default exports;

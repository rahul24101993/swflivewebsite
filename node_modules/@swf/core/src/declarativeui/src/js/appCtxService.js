// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * This service provides helpful APIs to register/unregister/update context variables used to hold application state.
 *
 * @module js/appCtxService
 *
 * @publishedApolloService
 */
import _ from 'lodash';
import eventBus from 'js/eventBus';
import debugService from 'js/debugService';

/**
 * delegate object with 2 API: fetch and dispatch
 * Still put a 'default value' for testability
 */
let _ctxObj = {
    _ctx: {},
    fetch: path => path ? _.get( _ctxObj._ctx, path ) : _ctxObj._ctx,
    dispatch: ( { path, value } ) => value === undefined ? _.unset( _ctxObj._ctx, path ) : _.set( _ctxObj._ctx, path, value )
};

/**
 * Init appCtxService
 * @param {object} state state object which has getValue and setValue API
 */
export function init( state ) {
    _ctxObj = state;
}

/**
 * Register application context variable
 *
 * @param {String} name - The name of context variable
 * @param {Object} value - The value of context variable
 */
export let registerCtx = function( path, value ) {
    debugService.debug( 'ctx', path, 'register' );
    _ctxObj.dispatch( { path, value } );

    // Announce app context registration
    eventBus.publish( 'appCtx.register', {
        name: path,
        value: value
    } );
};

/**
 * Register part of a context
 *
 * @param {String} path - Path to the context
 * @param {Object} value - The value of context variable
 * @ignore
 */
export let registerPartialCtx = function( path, value ) {
    debugService.debug( 'ctx', path, 'register' );

    _ctxObj.dispatch( { path, value } );

    // Announce app context registration
    var splitPath = path.split( '.' );
    var context = splitPath.shift();
    eventBus.publish( 'appCtx.register', {
        name: context,
        target: splitPath.join( '.' ),
        value: value
    } );
};

/**
 * Unregister application context variable
 *
 * @param {String} path - The name of context variable
 */
export let unRegisterCtx = function( path ) {
    debugService.debug( 'ctx', path, 'unregister' );
    _ctxObj.dispatch( { path, value: undefined } );

    // Announce app context un-registration
    eventBus.publish( 'appCtx.register', {
        name: path
    } );
};

/**
 * Update application context and Announce app context update by publishing an {@link module:js/eventBus|event}
 * 'appCtx.update' with eventData as {"name": ctxVariableName, "value": ctxVariableValue}
 *
 * @param {String} path - The name of context variable
 * @param {Object} value - The value of context variable
 */
export let updateCtx = function( path, value ) {
    debugService.debug( 'ctx', path, 'modify' );
    _ctxObj.dispatch( { path, value } );

    // Announce app context update
    eventBus.publish( 'appCtx.update', {
        name: path,
        value: value
    } );
};

/**
 * Get application context variable value
 *
 * @param {String} path - Path to the context
 * @returns {Object} Value (if any) at the indicated context path location.
 */
export let getCtx = function( path ) {
    return _ctxObj.fetch( path );
};

/**
 * Update part of a context
 *
 * @param {String} path - Path to the context
 * @param {Object} value - The value of context variable
 * @ignore
 */
export let updatePartialCtx = function( path, value ) {
    debugService.debug( 'ctx', path, 'modify' );

    var currValue = _ctxObj.fetch( path );

    // This will typically be done using angular binding, so we don't want an event potentially every $digest
    if( value !== currValue ) {
        _ctxObj.dispatch( { path, value } );

        // Announce update
        var splitPath = path.split( '.' );
        var context = splitPath.shift();
        eventBus.publish( 'appCtx.update', {
            name: context,
            value: _ctxObj.fetch(),
            target: splitPath.join( '.' )
        } );
    }
};

/**
 * Update app context from object
 *
 * @param {Object} ctxObject - The source context objeect containing properties that need to be update on global ctx
 */
export let updateCtxFromObject = function( ctxObject ) {
    if( ctxObject ) {
        _.forEach( ctxObject, function( value, name ) {
            exports.updateCtx( name, value );
        } );
    }
};

const exports = {
    get ctx() {
        return _ctxObj.fetch();
    },
    registerCtx,
    registerPartialCtx,
    updateCtx,
    updatePartialCtx,
    unRegisterCtx,
    getCtx,
    updateCtxFromObject
};
export default exports;

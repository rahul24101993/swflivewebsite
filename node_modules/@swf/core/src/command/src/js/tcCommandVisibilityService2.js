// Copyright (c) 2020 Siemens

/**
 * @module js/tcCommandVisibilityService2
 */
import appCtxService from 'js/appCtxService';
import DataLoader from 'dataloader';
import { postUnchecked, getPendingRequestsCount  } from 'soa/kernel/soaService';
import Debug from 'debug';
import async from 'js/async.service';

/**
 * How long to wait after the last "request" to load visibility before actually making the SOA call.
 * Because command bars will not render if server visibility is not ready this is also the minimum
 * delay before a command bar will appear.
 *
 * Will probably be reworked in the future
 */
const commandBatchLoadTime = 100;

const trace = new Debug( 'command:tcCommandVisibilityService2' );

/**
  * Unlock detection function
  *
  * @returns {Boolean} If the service is unlocked
  */
 var unlockFunction = function() {
    if( getPendingRequestsCount() !== 0 ) {
        trace( 'Visibility service is locked - SOA is active' );
        return false;
    }
    return true;
};

/**
 * Get a dataloader that batches up calls to the getVisibleCommands SOA
 * @returns {DataLoader} Server visibility dataloader
 */
export const getServerVisibilityLoader = () => {
    return new DataLoader( async getVisibleCommandsInfo => {
        const input = {
            getVisibleCommandsInfo
        };
        trace( 'Making batched SOA call to load visibility', input );
        const response = await postUnchecked( 'Internal-AWS2-2016-03-UiConfig', 'getVisibleCommands', input, {} );
        //New SOA is needed to fully support this use case. SOA accepts multiple sets of info as input but only returns a single list of visible commands
        return getVisibleCommandsInfo.map( () => response.visibleCommandsInfo );
    }, {
        //Only batching of requests done at this level. Caching managed at lower levels (ex sublocation)
        cache: false,
        batchScheduleFn: ( callback ) =>  {
            return async.debouncePromise( callback, commandBatchLoadTime, { isUnlocked: unlockFunction } )();
        }
    } );
};

/**
 * Startup function to create a shared dataloader and add to ctx
 */
export const addServerVisibilityLoaderToCtx = () => {
    trace( 'Adding shared visibility loader to ctx' );
    appCtxService.registerPartialCtx( 'services.awCommandVisibilityLoader', getServerVisibilityLoader() );
};

export default {
    addServerVisibilityLoaderToCtx,
    getServerVisibilityLoader
};

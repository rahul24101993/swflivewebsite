/* eslint-disable no-await-in-loop */
// Copyright (c) 2022 Siemens

/**
 * Defines {@link NgServices.commandHighlightService} which manages highlighting commands.
 *
 * @module js/commandHighlightService
 *
 * @namespace commandHighlightService
 */
import configurationService from 'js/configurationService';
import _ from 'lodash';
import AwTimeoutService from 'js/awTimeoutService';
import wcagSvc from 'js/wcagService';
import htmlUtils from 'js/htmlUtils';

let exports;

const notInFooterButton = 'not(aw-footer button)';

const notInFooterLi = 'not(aw-footer li)';

const retryMaxCount = 10;

const idleTimeMs = 50;

/**
 * Delay the execution for a given ms
 *
 * @function delay
 * @param {Number} ms - amount of milliseconds to wait
 * @return {Promise} promise - resolved after x amount of milliseconds
 */
const delay = function( ms ) {
    return new Promise( resolve => setTimeout( resolve, ms ) );
};

/**
 * Click a command with the given name. Differs from original step def as it will also locate the command within a
 * group if necessary.
 *
 * @function getCommandPlacements
 * @param {String} commandId - ID of the command to check for
 * @param {Object} placementInfo - Object with "anchors" and "groups" properties
 */
export const getCommandPlacements = async function( commandId ) {
    const commandsViewModel = await configurationService.getCfg( 'commandsViewModel' );

    const placements = _.filter( commandsViewModel.commandPlacements, placement => commandId === placement.id );

    const placementInfo = placements.reduce( ( acc, nxt ) => {
        if( nxt.parentGroupId ) {
            acc.groups[ nxt.parentGroupId ] = true;
        } else {
            acc.anchors[ nxt.uiAnchor ] = true;
        }
        return acc;
    }, {
        anchors: {},
        groups: {}
    } );

    placementInfo.anchors = Object.keys( placementInfo.anchors );
    placementInfo.groups = Object.keys( placementInfo.groups );
    return placementInfo;
};

/**
 * Poll the popup until it populates with a given command ID
 *
 * @function getCommandInPopup
 * @param {String} commandId - the ID to search the page for
 * @return {Element} popupCmdElement - command element in the popup
 */
export const getCommandInPopup = async function( commandId ) {
    let retryCounter = 0;
    let popupCmdElement;
    let loadingElement;

    setTimeout( function() {
        retryCounter = retryMaxCount; // After 10 seconds just quit
    }, 10000 );

    while( retryCounter < retryMaxCount ) {
        loadingElement = htmlUtils.getElementByXpath( '//div[contains(@class, \'aw-popup-command-bar\')]//div[contains(@class,\'aw-jswidgets-loading\')]', document.body );
        if( !loadingElement ) {
            popupCmdElement = htmlUtils.getElementByXpath( `//li[@command-id='${commandId}']`, document.body );
            if( popupCmdElement ) {
                return popupCmdElement;
            }
            retryCounter++;
        }
        await delay( idleTimeMs );
    }
};

/**
 * Check if the group command has a given command ID inside it
 *
 * @function checkGroupForElement
 * @param {String} commandId - the ID to search the popup for
 * @param {String} groupCommandLocation - groupCommand element to click
 * @return {Element} commandElement - the command element with ID we were looking for
 */
export const checkGroupForElement = async function( commandId, groupCommandLocation ) {
    let $timeout = AwTimeoutService.instance;
    // Slight delay as the overflow loading is not instant
    if( groupCommandLocation ) {
        await $timeout( () => {
            groupCommandLocation.click();
        }, 500, false );

        const commandElement = await exports.getCommandInPopup( commandId );

        if( commandElement ) {
            return commandElement;
        }
    }
};

/**
 * Clicks an element if it exists
 *
 * @function clickElement
 * @param {String} element - the element to click
 */
const clickElement = function( element ) {
    if( element ) {
        element.click();
    }
};

/**
 * Click the commandOverflow and check if the command is in the popup
 *
 * @function clickCommandOverflowAndCheckPopup
 * @param {Element} element - the aw-command element
 * @param {Element} commandOverflow - the command-overflow element
 * @param {String} commandId - the final command ID to return
 * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not
 * @return {Element} element - the element in a popup
 */
export const clickCommandOverflowAndCheckPopup = async function( element, commandOverflow, commandId, checkPopupForCmd ) {
    let $timeout = AwTimeoutService.instance;
    await $timeout( () => {
        clickElement( commandOverflow );
    }, 100, false );
    if( checkPopupForCmd ) {
        const elementInPopup = await getCommandInPopup( commandId );
        if( elementInPopup ) {
            return elementInPopup;
        }
    }
};

/**
 * Click the overflow button ie '...' or 'More' and then get the command ID element in that popup
 *
 * @function clickOverflowAndGetCommand
 * @param {Element} element - the aw-command element
 * @param {String} commandId - the final command ID to return
 * @param {boolean} checkPopupForCmd - whether to poll the popup for the command or not
 * @return {Element} element - the element in a popup
 */
export const clickOverflowAndGetCommand = async function( element, commandId, checkPopupForCmd = true ) {
    let commandOverflow;
    let toolbar = element.closest( '.aw-toolbar-layout' );
    if( toolbar ) {
        let childCommandBars = toolbar.querySelectorAll( '.aw-command-bar' );
        for( const commandBar of childCommandBars ) {
            const anchor = commandBar.getAttribute( 'anchor' );
            commandOverflow = htmlUtils.getElementByXpath( `//div[@anchor='${anchor}']//div[contains(@class, 'aw-commands-moreButton')]//button`, document.body );
            if( commandOverflow ) {
                return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );
            }
        }
        if( !commandOverflow ) {
            //look in toolbar
            commandOverflow = toolbar.querySelector( '.aw-commands-moreButton button' );
            if( commandOverflow ) {
                return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );
            }
        }
    }
    let commandBar = element.closest( '.aw-command-bar' );
    if( commandBar ) {
        const anchor = commandBar.getAttribute( 'anchor' );
        commandOverflow = htmlUtils.getElementByXpath( `//div[@anchor='${anchor}']//div[contains(@class, 'aw-command-overflowIcon')]//button`, document.body );
        return exports.clickCommandOverflowAndCheckPopup( element, commandOverflow, commandId, checkPopupForCmd );
    }
};

/**
 * Get the correct HTML element for a given command ID
 *
 * @function getCommandElement
 * @param {String} commandId - the ID to search the page for
 * @param {String} xPath - xPath of the command in the DOM
 * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)
 * @return {Element} element - the command element
 */
export const getCommandElement = async function( commandId, xPath, grpCmdAnchor ) {
    let element = htmlUtils.getElementByXpath( xPath, document.body );

    if( element ) {
        const tabIndex = element.getAttribute( 'tabindex' );
        if( tabIndex && parseInt( tabIndex ) < 0 ) {
            //overflow
            return await exports.clickOverflowAndGetCommand( element, commandId );
        }
        return element;
    }
    const commandPlacements = await exports.getCommandPlacements( commandId );

    for( const groupId of commandPlacements.groups ) {
        let groupCommandLocation = htmlUtils.getElementByXpath( `//div[@anchor='${grpCmdAnchor}']//button[@command-id='${groupId}']`, document.body );
        if( groupCommandLocation ) {
            const tabIndex = groupCommandLocation.getAttribute( 'tabindex' );
            if( tabIndex && parseInt( tabIndex ) < 0 ) {
                // overflow
                let groupCommandElement = await exports.clickOverflowAndGetCommand( groupCommandLocation, groupId );
                let commandElement = await exports.checkGroupForElement( commandId, groupCommandElement );
                if( commandElement ) {
                    return commandElement;
                }
            }
            let commandElement = await exports.checkGroupForElement( commandId, groupCommandLocation );
            if( commandElement ) {
                return commandElement;
            }
        }
    }
};

/**
 * Highlight a given command ID in the LHN/PWA/Right wall
 *
 * @function highlightCommand
 * @param {String} commandId - command ID to highlight
 * @param {String} xPath - xPath of the command in the DOM
 * @param {String} grpCmdAnchor - the anchor of the group command (if applicable)
 * @return {Element} commandElement - the command element with ID we were looking for
 */
export const highlightCommand = async function( commandId, xPath, grpCmdAnchor ) {
    let commandElement = await exports.getCommandElement( commandId, xPath, grpCmdAnchor );
    if( commandElement ) {
        wcagSvc.afxFocusElement( commandElement );
    }
    return commandElement;
};

/**
 * Click on a given command ID
 *
 * @function clickOnCommand
 * @param {String} commandId - command ID to click on
 * @param {String} xPath - xPath of the command in the DOM
 * @return {Element} commandElement - the command element with ID we were looking for
 */
export const clickOnCommand = async function( commandId, xPath ) {
    let commandElement = await exports.getCommandElement( commandId, xPath );
    if( commandElement ) {
        commandElement.click();
    }
};

exports = {
    getCommandPlacements,
    getCommandInPopup,
    checkGroupForElement,
    clickCommandOverflowAndCheckPopup,
    clickOverflowAndGetCommand,
    getCommandElement,
    highlightCommand,
    clickOnCommand
};

export default exports;

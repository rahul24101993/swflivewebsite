// Copyright (c) 2021 Siemens

/**
 * @module js/AwCommandListService
 */
import AwCommand from 'viewmodel/AwCommandViewModel';
import AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';
import AwIcon from 'viewmodel/AwIconViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';

/**
 * Popup configuration for the overflow popup on command bars
 */
const overflowPopupOptions = {
    advancePositioning: true,
    autoFocus: true,
    clickOutsideToClose: true,
    closeWhenEsc: true,
    flipBehavior: 'opposite',
    resizeContainer: 'div.aw-layout-popup',
    selectedElementCSS: '.aw-state-selected',
    toggleMode: true,
    whenParentScrolls: 'follow'
};

/**
 * Get class to use based on the "showCommandLabels" option
 *
 * @param {Boolean} showCommandLabels true/false
 * @returns {String} Class to use
 */
const getCommandLabelClass = ( showCommandLabels ) => {
    if( showCommandLabels === false ) {
        return 'aw-commands-noLabel';
    }
    if( showCommandLabels === true ) {
        return 'aw-commands-showIconLabel';
    }
    //No override, use the global show/hide
    return '';
};

/**
 * Get where the extended tooltip for the overflow button should be positioned
 *
 * @param {String} alignment Alignment
 * @returns {String} Extended tooltip position
 */
const getTooltipPlacement = function( alignment ) {
    var placement = 'top';
    if( alignment === 'VERTICAL' ) {
        placement = 'left';
    }
    return placement;
};

export const awCommandListRenderFunction = ( { alignment, visibilityLoader, commandContext, anchor, ctxMin: { commandDisplays: cd },
    className, showCommandLabels, elementRefList, overflow, hideMore, trace = () => null, reverse = false,
    actions: { overflowPopup }, i18n, viewModel: { _observer, _overflownCommands } } ) => {
    const commandDisplays = reverse ? cd.reverse() : cd;
    const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';
    const commandLabelsClass =  getCommandLabelClass( showCommandLabels );
    //The element used to determine overflow
    const commandBarMain = elementRefList.get( 'commandBarMain' );
    let overflownCommandsCount = 0;
    const visibleCommands = commandDisplays.filter( x => {
        if ( x.visible ) {
            _overflownCommands[ x.id ] && overflownCommandsCount++;
            return true;
        }
        return null;
    } );
    trace( `${visibleCommands.length} commands are visible, computing command overflow` );

    const hasOverflow = overflownCommandsCount > 0;
    const noOverflowCls = !hasOverflow ? 'aw-no-overflow' : 'aw-use-commandOverflow';
    trace( 'Non overflow command count', visibleCommands.length - overflownCommandsCount, 'has overflow', hasOverflow );

    /**
     * Callback for when a command within the overflow popup is clicked
     *
     * @param {Boolean} hasPopup Whether the command that was clicked will open a popup
     */
    const childCommandClickCallback = ( hasPopup ) => {
        if( hasPopup !== true ) {
            overflowPopup.hide();
        }
    };

    /**
     * Get a click handler for the command overflow button
     *
     * @returns {Function} Click handler
     */
    const getOverflowClickHandler = () => {
        return ( e ) => {
            e.stopPropagation();
            if( overflowPopup.open ) {
                overflowPopup.hide();
            } else {
                overflowPopup.show( {
                    ...overflowPopupOptions,
                    placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'
                } );
            }
        };
    };

    /**
     * Render the extended tooltip for the overflow button
     *
     * @returns {JSX} Extended tooltip element
     */
    const renderOverflowExtendedTooltip = () => {
        return <AwExtendedTooltip
            reference={overflowPopup.reference}
            extendedTooltipContext={{ title: i18n.MORE_BUTTON_TITLE }}
            extendedTooltipOptions={{ isCommand: true, placement : getTooltipPlacement( alignment ) }}>
        </AwExtendedTooltip>;
    };

    /**
     * Render the horizontal overflow toggle button
     *
     * @returns {JSX} Horizontal overflow element
     */
    const renderHorizontalOverflowButton = () => {
        const overflowClickHandler = getOverflowClickHandler( );
        return <div className='aw-toolbarIcon aw-commands-moreButton'>
            <button type='button'
                className={`aw-commands-commandToolbarIconButton aw-use-commandOverflow ${ overflowPopup.open ? 'aw-state-selected' : '' }`}
                title={i18n.MORE_BUTTON_TITLE}
                aria-label={i18n.MORE_BUTTON_TITLE}
                onClick={overflowClickHandler}
                ref={overflowPopup.reference}>
                <AwIcon iconId={'cmdMore'} className={'aw-commands-svg'}></AwIcon>
            </button>
            { renderOverflowExtendedTooltip() }
        </div>;
    };

    /**
     * Render the vertical overflow toggle button
     *
     * @returns {JSX} Horizontal overflow element
     */
    const renderVerticalOverflowButton = () => {
        const overflowLabel = overflowPopup.open ? i18n.LESS_LINK_TEXT : i18n.MORE_LINK_TEXT;
        const overflowClickHandler = getOverflowClickHandler();
        return <div className='aw-command-overflowIcon'>
            <button type='button'
                className={`aw-commands-commandIconButton aw-commands-commandWrapperVertical ${ overflowPopup.open ? 'aw-state-selected' : '' }`}
                title={overflowLabel}
                aria-label={overflowLabel}
                onClick={overflowClickHandler}
                ref={overflowPopup.reference}>
                <AwIcon iconId={'miscChevronDown'} className={`aw-commands-svg ${overflowPopup.open ? 'aw-icon-rotate' : ''}`}></AwIcon>
                <div className='aw-commands-commandIconButtonText'>{overflowLabel}</div>
            </button>
            { renderOverflowExtendedTooltip() }
        </div>;
    };

    const getOverflownCommands = () => {
        return visibleCommands.filter( ( command ) => {
            if( command && _overflownCommands[ command.id ] ) {
                return true;
            }
            return null;
        } );
    };

    /**
     * Render the overflow popup content
     *
     * @returns {JSX} content
     */
    const renderOverflowPopupContent = () => {
        return overflowPopup.open && <AwPopup {...overflowPopup.options}>
            <div className='aw-popup-command-bar'>
                { getOverflownCommands().map( command =>
                    <AwPopupCommandCell commandContext={commandContext} key={command && command.id}
                        command={command} alignment={alignment} visibilityLoader={visibilityLoader}
                        overflow={true} childCommandClickCallback={childCommandClickCallback}></AwPopupCommandCell> )}
            </div>
        </AwPopup>;
    };

    const isOverflowenabled = ( alignment === 'HORIZONTAL' || !alignment ) && overflow !== true ? null : true;
    const renderCommands = ( disableOverflow = false ) => {
        return visibleCommands.map( command =>
            <AwCommand commandContext={commandContext}
                key={command && command.id}
                command={command} alignment={alignment}
                visibilityLoader={visibilityLoader}
                overflow={_overflownCommands[ command.id ] ? true : null}
                commandObserver={disableOverflow ? null : _observer}></AwCommand> );
    };

    return (
        <div className={`aw-command-bar ${alignmentCls} ${overflow ? 'aw-use-commandOverflow' : ''}` } anchor={anchor} ref={commandBarMain}>
            {/* Non overflow commands */}
            <div className={`aw-commands-wrapper ${commandLabelsClass} ${noOverflowCls}`}>
                { isOverflowenabled && _observer && renderCommands()}
                { !isOverflowenabled && renderCommands( true )}
            </div>
            {/* Vertical overflow button */}
            { hasOverflow && !hideMore && alignment === 'VERTICAL' ? renderVerticalOverflowButton() : null }
            {/* Horizontal overflow button */}
            { hasOverflow && !hideMore && alignment !== 'VERTICAL' ? renderHorizontalOverflowButton() : null }
            {/* Overflow popup */}
            { renderOverflowPopupContent() }
        </div>
    );
};

import AwCommand from 'viewmodel/AwCommandViewModel';
import AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';
import AwIcon from 'viewmodel/AwIconViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import AwPopupCommandCell from 'viewmodel/AwPopupCommandCellViewModel';
import { getCommandStates } from 'js/command.service';
import { getCompClass } from 'js/componentUtils';

/**
 * Configuration for the overflow popup
 */
const overflowPopupOptions = {
    advancePositioning: true,
    autoFocus: true,
    clickOutsideToClose: true,
    closeWhenEsc: true,
    flipBehavior: 'opposite',
    resizeContainer: 'div.aw-layout-popup',
    selectedElementCSS: '.aw-state-selected',
    toggleMode: true,
    whenParentScrolls: 'follow',
    forceCloseOthers: false
};

/**
 * Get any class to use based on the "showCommandLabels" option
 *
 * @param {Boolean} showCommandLabels true/false
 * @returns {String} Class to use
 */
const getCommandLabelClass = ( showCommandLabels ) => {
    if( showCommandLabels === false ) {
        return 'aw-commands-noLabel';
    }
    if( showCommandLabels === true ) {
        return 'aw-commands-showIconLabel';
    }
    return '';
};

export const awToolbarInternalRenderFunction = ( { alignment, visibilityLoader, commandContext, firstAnchor, secondAnchor, ctxMin: { firstCommandDisplays: fcd, secondCommandDisplays: scd },
    className, showCommandLabels, elementRefList, overflow, hideMore, trace = () => null, reverse = false, reverseSecond = false,
    actions: { overflowPopup }, i18n, viewModel: { _observer, _overflownCommands  } } ) => {
    //Reverse the second cmd displays for backward compibility with ng
    scd = scd.reverse();
    const firstCommandDisplays = reverse ? fcd.reverse() : fcd;
    let secondCommandDisplays = reverseSecond ? scd.reverse() : scd;

    const alignmentCls = alignment === 'VERTICAL' ? 'aw-commands-commandBarVertical' : 'aw-commands-commandBarHorizontal';
    const commandLabelsClass = getCommandLabelClass( showCommandLabels );
    const commandBarMain = elementRefList.get( 'commandBarMain' );

    const childCommandClickCallback = ( hasPopup ) => {
        if( hasPopup ) {
            return;
        }
        overflowPopup.hide();
    };

    // give vertical toolbar a default background color
    const orientationCls = alignment === 'VERTICAL' ? ' aw-toolbar-vertical aw-layout-infoCommandbar' : ' aw-toolbar-horizontal';
    const renderCommand =  command => {
        return <AwCommand commandContext={commandContext}
            key={command && command.id}
            command={command}
            alignment={alignment}
            visibilityLoader={visibilityLoader}
            commandObserver={_observer}
            overflow={_overflownCommands[ command.id ] ? true : null}></AwCommand>;
    };
    const isVisible = command => command && command.visible;

    const renderVerticalContent = ( alignmentCls, secondBarClass, firstAnchor, secondAnchor, renderOverflowButton, overflownCommandsCount ) => {
        return <div className='aw-commandBars aw-commandBar-vertical'>
            <div className='sw-row'>
                <div className={`aw-command-bar ${alignmentCls}` } anchor={firstAnchor}>
                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>
                        { renderOverflowButton ? _observer && firstCommandDisplays.filter( isVisible ).map( renderCommand ) : firstCommandDisplays.filter( isVisible ).map( renderCommand ) }
                    </div>
                </div>
            </div>
            <div className='sw-row aw-bottom-bar'>
                <div className={`aw-command-bar ${alignmentCls} ${secondBarClass}` } anchor={secondAnchor}>
                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>
                        { renderOverflowButton ? _observer && secondCommandDisplays.filter( isVisible ).map( renderCommand ) : secondCommandDisplays.filter( isVisible ).map( renderCommand ) }
                    </div>
                </div>
            </div>
            {/* Overflow button */}
            { renderOverflowButton && overflownCommandsCount ? renderOverflowButton() : null }
        </div>;
    };

    const renderWithOverflow = () => {
        let overflownCommandsCount = 0;
        const isVisibleCmd = cmd => {
            if( cmd && cmd.visible ) {
                _overflownCommands[ cmd.id ] && overflownCommandsCount++;
                return true;
            }
            return null;
        };

        const secondBarClass = alignment === 'VERTICAL' ? 'aw-second-barVertical' : 'aw-second-barHorizontal';
        const firstVisibleCommands = firstCommandDisplays.filter( isVisibleCmd );
        const secondVisibleCommands = secondCommandDisplays.filter( isVisibleCmd );
        const visibleCommandCount = firstVisibleCommands.length + secondVisibleCommands.length;
        trace( `${visibleCommandCount} commands are visible, computing command overflow` );

        const overflowClickHandler = ( e ) => {
            e.stopPropagation();
            if( overflowPopup.open ) {
                overflowPopup.hide();
            } else {
                overflowPopup.show( {
                    ...overflowPopupOptions,
                    placement: alignment === 'VERTICAL' ? 'left-start' : 'bottom-start'
                } );
            }
        };

        const getOverflownCommands = () => {
            let firstOverflownCmds = [];
            let secondOverflownCmds = [];

            for( const cmdId in _overflownCommands ) {
                let overflownCmd = firstVisibleCommands.find( command =>  command && command.id === cmdId );
                if( !overflownCmd ) {
                    overflownCmd = secondVisibleCommands.find( command =>  command && command.id === cmdId );
                    overflownCmd && secondOverflownCmds.unshift( overflownCmd );
                } else {
                    firstOverflownCmds.unshift( overflownCmd );
                }
            }
            return firstOverflownCmds.concat( secondOverflownCmds );
        };

        const renderOverflowPopup = () => {
            return overflowPopup.open && <AwPopup {...overflowPopup.options}>
                <div className='aw-popup-command-bar'>
                    { getOverflownCommands().map( command =>
                        <AwPopupCommandCell commandContext={commandContext} key={command && command.id}
                            command={command} alignment={alignment} visibilityLoader={visibilityLoader}
                            overflow={true} childCommandClickCallback={childCommandClickCallback}></AwPopupCommandCell> )}
                </div>
            </AwPopup>;
        };

        const renderOverflowButton = () => {
            return <div className={'aw-toolbarIcon aw-commands-moreButton aw-command-overflowIcon'}>
                <button type='button'
                    className={`aw-commands-commandToolbarIconButton ${ overflowPopup.open ? 'aw-state-selected' : '' }`}
                    aria-label={i18n.MORE_BUTTON_TITLE}
                    onClick={overflowClickHandler}
                    ref={overflowPopup.reference}>
                    <AwIcon iconId='cmdMore' className='aw-commands-svg'></AwIcon>
                </button>
                <AwExtendedTooltip
                    reference={overflowPopup.reference}
                    extendedTooltipContext={{ title: i18n.MORE_BUTTON_TITLE }}
                    extendedTooltipOptions={{ isCommand: true, placement : 'left' }}>
                </AwExtendedTooltip>
            </div>;
        };

        const renderHorizontalContent = () => {
            return <div className='aw-commandBars aw-commandBar-horizontal'>
                { firstVisibleCommands.length ? <div className={`aw-command-bar aw-use-commandOverflow ${alignmentCls}` } anchor={firstAnchor}>
                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>
                        { _observer && firstVisibleCommands.map( renderCommand )}
                    </div>
                </div> : <div className='aw-commandBars aw-commandBar-horizontal'></div> }
                { secondVisibleCommands.length ? <div className={`aw-command-bar aw-use-commandOverflow ${alignmentCls} ${secondBarClass}` } anchor={secondAnchor}>
                    <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>
                        { _observer && secondVisibleCommands.map( renderCommand )}
                    </div>
                </div> : null }
                {/* Overflow button */}
                { overflownCommandsCount ? renderOverflowButton() : null }
            </div>;
        };

        return <div className={ getCompClass( 'aw-toolbar-layout', { className } ) + ' ' + orientationCls} ref={commandBarMain}>
            {/* Non overflow commands */}
            { alignment === 'VERTICAL' ? renderVerticalContent( alignmentCls, secondBarClass, firstAnchor, secondAnchor, renderOverflowButton, overflownCommandsCount ) : renderHorizontalContent() }
            {/* Overflow popup */}
            { renderOverflowPopup() }
        </div>;
    };

    const renderToolbarNoOverflow = () => {
        const cmdBarOrientationCls = alignment === 'VERTICAL' ? 'aw-commandBar-vertical' : 'aw-commandBar-horizontal';
        const secondBarClass = alignment === 'VERTICAL' ? 'aw-second-barVertical' : 'aw-second-barHorizontal';

        return (
            <div className={ getCompClass( 'aw-toolbar-layout aw-toolbar-nooverflow', { className } ) + ' ' + orientationCls} ref={commandBarMain}>
                {alignment === 'VERTICAL' ? renderVerticalContent( alignmentCls, secondBarClass, firstAnchor, secondAnchor, null ) : <div className={'aw-commandBars ' + cmdBarOrientationCls}>
                    <div className={`aw-command-bar ${alignmentCls} ` } anchor={firstAnchor}>
                        <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>
                            { firstCommandDisplays.filter( isVisible ).map( renderCommand )}
                        </div>
                    </div>
                    <div className={`aw-command-bar ${alignmentCls}  ${secondBarClass}` } anchor={secondAnchor}>
                        <div className={`aw-commands-wrapper ${commandLabelsClass} aw-no-overflow`}>
                            { secondCommandDisplays.filter( isVisible ).map( renderCommand )}
                        </div>
                    </div>
                </div>}
            </div>

        );
    };

    if( overflow && overflow !== 'false' ) {
        return renderWithOverflow();
    }
    return renderToolbarNoOverflow();
};

/**
 * Derived state config for first set of CommandOverlay
 *
 * @param {*} vmDef vmDef
 * @param {*} param1 param1
 * @returns {[DerivedStateResult]} result
 */
export const getFirstCommandStates = ( vmDef, { firstCommandList = [], commandContext = {}, visibleServerCommands = {} } ) => {
    return getCommandStates( vmDef, { commandList: firstCommandList,  commandContext, visibleServerCommands } );
};

/**
 * Derived state config for second set of CommandOverlay
 *
 * @param {*} vmDef vmDef
 * @param {*} param1 param1
 * @returns {[DerivedStateResult]} result
 */
export const getSecondCommandStates = ( vmDef, { secondCommandList = [], commandContext = {}, visibleServerCommands = {} } ) => {
    return getCommandStates( vmDef, { commandList: secondCommandList,  commandContext, visibleServerCommands } );
};

// Copyright (c) 2021 Siemens

/**
 * @module js/AwCommandBarService
 */
import AwCommandList from 'viewmodel/AwCommandListViewModel';
import { getCommands } from './command.service';
import { getServerConditionUsage } from './commandVisibilityService';
import Debug from 'debug';

/**
 * Wrapper component to handle initialization of AwCommandBar
 *
 * @param {Object} param0 Declarative render context
 * @returns {JSX.Element} React component
 */
export const awCommandBarRenderFunction = ( { alignment, visibilityLoader, context, anchor, showCommandLabels,
    viewModel: { data: { commandList = null, visibleServerCommands, trace } }, className, overflow, hideMore, reverse } ) => {
    //If a server visibility loader is configured do not display commands until the server visibility is loaded
    return  commandList &&
        <AwCommandList
            alignment={ alignment }
            anchor={ anchor }
            commandContext={ context }
            commandList={ commandList }
            hideMore={hideMore}
            overflow={ overflow }
            showCommandLabels={ showCommandLabels }
            trace={trace}
            visibilityLoader={ visibilityLoader }
            reverse={reverse}
            visibleServerCommands={ visibleServerCommands }>
        </AwCommandList>;
};

/**
 * Get the unprocessed commands for the given anchor
 *
 * @param {Object} param0 Input parameters
 * @returns {List<CommandOverlay>} List of command data for the given anchor
 */
export const awCommandBarInitFunction = async( {
    anchor
} ) => {
    if( !anchor ) {
        return [];
    }
    const trace = new Debug( `command:AwCommandBar:${anchor}` );
    trace( 'Loading commands' );
    return getCommands( anchor )
        .then( list => {
            trace( 'Loaded command list', list );
            return {
                commandList: list,
                trace
            };
        } );
};

/**
 * Get the unprocessed commands for the given anchor
 *
 * @param {Object} param0 Input parameters
 * @param {Object} param0.commandList The list of commands to get server visibility for
 * @param {Object} param0.visibilityLoader The server visibility dataloader
 * @returns {Object} Current command visibility states
 */
export const refreshServerVisibility = async( {
    commandList,
    visibilityLoader,
    trace
} ) => {
    if( !commandList || !visibilityLoader ) {
        return null;
    }
    const serverCommandIds = commandList.map( cmd => {
        const x = getServerConditionUsage( cmd );
        cmd.trace( 'Server command visibility to be loaded', x );
        return x;
    } ).reduce( ( acc, nxt ) => acc.concat( nxt ), [] );
    trace( 'Loading server visibility', serverCommandIds, commandList );
    return visibilityLoader.loadMany( serverCommandIds )
        .then( results => results.reduce( ( acc, result, idx ) => {
            acc[ serverCommandIds[ idx ] ] = result;
            return acc;
        }, {} ) );
};

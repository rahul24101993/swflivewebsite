// Copyright (c) 2021 Siemens
/* eslint-disable max-len */
import { awCommandBarInitFunction, refreshServerVisibility } from 'js/AwCommandBarService';
import AwToolbarInternal from 'viewmodel/AwToolbarInternalViewModel';
import Debug from 'debug';

// eslint-disable-next-line complexity
export const awToolbarRenderFunction = ( props ) => {
    const {
        visibilityLoader,
        reverse = false,
        reverseSecond = false,
        overflow = true,
        orientation = 'HORIZONTAL',
        firstAnchor,
        secondAnchor,
        showCommandLabels,
        context,
        viewModel: { data: { firstCommandList = null, secondCommandList = null, visibleServerCommands, trace } }
    } = props;

    return firstCommandList && secondCommandList && <AwToolbarInternal
        alignment={orientation}
        commandContext={context}
        firstAnchor={firstAnchor}
        firstCommandList={ firstCommandList }
        overflow={overflow}
        reverse={reverse}
        reverseSecond={reverseSecond}
        secondAnchor={secondAnchor}
        secondCommandList={ secondCommandList }
        showCommandLabels={showCommandLabels}
        trace={trace}
        visibilityLoader={visibilityLoader}
        visibleServerCommands={ visibleServerCommands }>
    </AwToolbarInternal>;
};

/**
 * Initialize the toolbar
 *
 * @param {Object} options options
 * @returns {Object} Toolbar init data
 */
export const awToolbarInitFunction = async( {
    firstAnchor = '',
    secondAnchor = ''
} ) => {
    const trace = new Debug( `command:AwCommandBar:${firstAnchor}+${secondAnchor}` );
    trace( 'Loading commands' );
    const [ { commandList: firstCommandList }, { commandList: secondCommandList } ] = await Promise.all( [
        awCommandBarInitFunction( { anchor: firstAnchor } ),
        awCommandBarInitFunction( { anchor: secondAnchor } ) ] );
    trace( 'Loaded command list', firstCommandList, secondCommandList );
    return {
        firstCommandList: firstCommandList || [],
        secondCommandList: secondCommandList || [],
        trace
    };
};

/**
 * Refresh server visibility for the toolbar
 *
 * @param {Object} options options
 * @returns {Object} Updated server visibility
 */
export const refreshServerVisibilityToolbar = async( {
    firstCommandList,
    secondCommandList,
    visibilityLoader,
    trace
} ) => {
    if( !firstCommandList || !secondCommandList || !visibilityLoader ) {
        return null;
    }
    return refreshServerVisibility( {
        commandList: [ ...firstCommandList, ...secondCommandList ],
        visibilityLoader,
        trace
    } );
};

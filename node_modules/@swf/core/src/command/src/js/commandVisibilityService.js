// Copyright (c) 2020 Siemens

/**
 * This service is used to manage command visibility.
 *
 * @module js/commandVisibilityService
 */
import functional from 'js/functionalUtility.service';

/**
 * Get any usages of "visibleServerCommands" context from the condition string
 *
 * @param {String} s The string condition to check
 * @return {String[]} Values in visibleServerCommands that are checked
 */
const getServerConditions = function( s ) {
    var re = /ctx\.visibleServerCommands\.([a-zA-Z]\w*)(\W*|$)/g;
    var result = [];
    var m = re.exec( s );
    while( m ) {
        result.push( m[ 1 ] );
        m = re.exec( s );
    }
    return result;
};

/**
 * Parse a condition expression for any usages of server visibility
 *
 * @param {String|Object} condition Condition expression
 * @returns {[String]} List of server visibility usages
 */
export const getServerVisibilityUsage = ( condition ) => {
    if( typeof condition === 'string' ) {
        return getServerConditions( condition );
    }
    //If object based condition recursivly parse the object values
    return Object.values( condition )
        .map( getServerVisibilityUsage )
        .reduce( functional.concat, [] );
};

/**
 * Get the list of server conditions used by a command
 *
 * @param {CommandOverlay} command Command to check
 * @returns {[String]} List of server visibility usages
 */
export const getServerConditionUsage = command => {
    const directReferences = command.handlers.map( handler => {
        return [
            ...getServerVisibilityUsage( handler.activeWhen.expression ),
            ...handler.enableWhen ? getServerVisibilityUsage( handler.enableWhen.expression ) : [],
            ...handler.selectWhen ? getServerVisibilityUsage( handler.selectWhen.expression ) : [],
            ...handler.visibleWhen ? getServerVisibilityUsage( handler.visibleWhen.expression ) : []
        ];
    } ).reduce( ( acc, nxt ) => acc.concat( nxt ), [] );
    const childReferences = command.children
        .map( getServerConditionUsage )
        .reduce( ( acc, nxt ) => acc.concat( nxt ), [] );
    return [ ...directReferences, ...childReferences ];
};

export default {
    getServerVisibilityUsage,
    getServerConditionUsage
};

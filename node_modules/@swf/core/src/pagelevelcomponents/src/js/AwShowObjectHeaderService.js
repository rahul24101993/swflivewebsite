/* eslint-disable max-len */
// Copyright (c) 2021 Siemens

import AwVisualIndicator from 'viewmodel/AwVisualIndicatorViewModel';
import AwModelIcon from 'viewmodel/AwModelIconViewModel';
import AwHeaderProperties from 'viewmodel/AwHeaderPropertiesViewModel';
import localeSvc from 'js/localeService';
import configurationSvc from 'js/configurationService';
import _ from 'lodash';
import eventBus from 'js/eventBus';

export const getHeaderProps = ( headerPropsData, headerData ) => {
    if( !headerPropsData || !headerData ) {
        return null;
    }
    let headerProps = [];
    for( const headerProp of headerPropsData ) {
        if( headerProp.propertyName && headerData[ headerProp.propertyName ] ) {
            headerProps.push( {
                property: headerData[ headerProp.propertyName ],
                renderingHint: headerProp.renderingHint,
                renderingStyle: headerProp.renderingStyle
            } );
        }
    }
    return headerProps;
};

export const initialize = async( ) => {
    let contributedHeaders = await configurationSvc.getCfg( 'headerContributions' );
    if( contributedHeaders ) {
        contributedHeaders = _.sortBy( contributedHeaders, [ function( o ) {
            return o.priority;
        } ] );
        contributedHeaders.reverse();
    }

    //Revisit: Ria, Frank
    //Why is back button title processing required here?
    const backButtonTitle = await localeSvc.getLocalizedText( 'UIMessages', 'backBtn' );
    return {
        backButtonTitle: backButtonTitle,
        contributedHeaderViews: contributedHeaders || []
    };
};

export const onUnmount = ( subscriptions ) => {
    if( subscriptions && subscriptions.length > 0 ) {
        subscriptions.forEach( subscription => {
            eventBus.unsubscribe( subscription );
        } );
    }
};

export const awShowObjectHeaderRenderFunction = ( props ) => {
    return view( props );
};

const view = ( props ) => {
    const { viewModel, i18n, ctx } = props;
    const {
        subPanelContext
    } = props;

    const headerVMO = props.headerVMO ? props.headerVMO : props.headervmo;
    const children = props.children || [];

    const { data } = viewModel;

    const {
        contributedHeaderViews,
        headerProps
    } = data;

    const getSearchView = () => {
        return <div className='aw-layout-flexRowContainer align-center'>
            {children[1]}
            {children[2]}
        </div>;
    };

    const getBreadcrumbConfigView = () => {
        if( children[ 0 ] ) {
            return (
                <div className='aw-layout-flexRow aw-layout-breadCrumbContainer'>
                    {children[0]}
                </div>
            );
        }
        return null;
    };

    const getHeaderPropsView = () => {
        return <div className='aw-layout-headerPropContainer aw-layout-flexRowContainer'>
            {/* <!-- Header Visual Indicator --> */}
            <div className='aw-layout-flexRowContainer AwVisualIndicatorContainer'>
                {headerVMO && headerVMO.indicators && <AwVisualIndicator vmo={headerVMO}></AwVisualIndicator>}
            </div>
            {contributedHeaderViews ? <AwHeaderProperties props={{ headerProps, contributedHeaders: contributedHeaderViews, context: subPanelContext }}></AwHeaderProperties> : ''}
        </div>;
    };

    return <div className='aw-layout-flexColumn'>
        <header aria-label={i18n.applicationHeader} className='sw-row aw-layout-header'>
            <div className='aw-layout-headerLeft aw-layout-flexRow align-center'>
                {headerVMO && headerVMO.props && <AwModelIcon vmo={headerVMO}/>}

                <div className='aw-layout-flexColumn aw-layout-headerContent'>
                    <div className='aw-layout-flexRowContainer aw-layout-locationTitlePanel'>
                        {getBreadcrumbConfigView()}
                    </div>

                    {getHeaderPropsView()}

                </div>
            </div>

            {getSearchView()}
        </header>
    </div>;
};

// Copyright (c) 2021 Siemens

/**
 * @module js/urlArgsUtilsService
 */
import AwStateService from 'js/awStateService';
import AwTimeoutService from 'js/awTimeoutService';
import commandService from 'js/command.service';
import logger from 'js/logger';
import appCtxService from 'js/appCtxService';

let _urlCommandCheckPromise = null;

export const executeUrlCommand = ( commandContext, { runActionWithViewModel } = {} ) => {
    const commandId = AwStateService.instance.params.cmdId || AwStateService.instance.params.commandID;
    if( commandId && !_urlCommandCheckPromise && runActionWithViewModel ) {
        //Flag to avoid execution of cmd action multiple times.
        //Keeping this as a local variable for now, considering that even if there are
        //multiple components calling this particular api, the url is singleton
        //Hence, the execution should only happen once
        _urlCommandCheckPromise = true;
        return AwTimeoutService.instance( function() {
            let cmdContext = { ctx: appCtxService.getCtx(), commandContext };
            return commandService.executeCommand( commandId,
                AwStateService.instance.params.cmdArg, {}, cmdContext, runActionWithViewModel )
                // Log error or success message
                .then(
                    function() {
                        logger.trace( 'Executed command: ' + commandId +
                            ' with args ' + AwStateService.instance.params.cmdArg + ' from url' );
                    },
                    function( errorMessage ) {
                        logger.error( errorMessage );
                    } )
                // clear cmdId and cmdArg
                .then( function() {
                    if( AwStateService.instance.params.commandId ) {
                        return;
                    }
                    return AwStateService.instance.go( '.', {
                        cmdId: null,
                        cmdArg: null
                    }, {
                        location: 'replace'
                    } );
                } ).then( function() {
                    _urlCommandCheckPromise = null;
                } );
        }, 500 );
    }
};

export default {
    executeUrlCommand
};

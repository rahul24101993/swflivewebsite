import _ from 'lodash';
import Debug from 'debug';
import { DerivedStateResult } from 'js/derivedContextService';

const trace = new Debug( 'selection' );

export const resetSelectionData = ( localSelectionData, parentSelectionData ) => {
    if( localSelectionData && localSelectionData.selected && localSelectionData.selected.length > 0 && parentSelectionData ) {
        localSelectionData.selected = [];
        parentSelectionData.update( { ...localSelectionData, source: 'secondary' } );
    }
};

export const handleSelectionChange = ( localSelectionData, parentSelectionData ) => {
    if( !_.isEmpty( localSelectionData ) && parentSelectionData ) {
        parentSelectionData.update( { ...localSelectionData, source: 'secondary' } );
        trace( 'AwSecondaryWorkarea selectionData: ', localSelectionData );
    }
};

export const getContext = ( vmDef, props ) => {
    return [ new DerivedStateResult( {
        ctxParameters: [],
        additionalParameters: [ props.subPanelContext, props.searchState ],
        compute: () => {
            return {
                ...props.subPanelContext,
                searchState:props.searchState
            };
        }
    } ) ];
};

// Copyright (c) 2021 Siemens
import _ from 'lodash';
import Debug from 'debug';
import { DerivedStateResult } from 'js/derivedContextService';
import viewModeService from 'js/viewMode.service';

const trace = new Debug( 'selection' );

const updateGlobalSelections = ( parentSelectionData, selectionInfo ) => {
    parentSelectionData && parentSelectionData.update( selectionInfo );
};

const handlePrimarySelectionChange = ( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelectionModel ) => {
    let selectionInfo = { selected: [], pselected: undefined, source: undefined };
    if( localSelectionData.selected && localSelectionData.selected.length > 0 ) {
        selectionInfo.selected = localSelectionData.selected;
        selectionInfo.pselected = baseSelection || undefined;
        selectionInfo.source = localSelectionData.source;
    } else if( baseSelection ) {
        selectionInfo.selected = [ baseSelection ];
        selectionInfo.pselected = baseSelection;
        selectionInfo.source = 'base';
    }
    updateGlobalSelections( parentSelectionData, selectionInfo );
    dispatch && dispatch( { path: 'data.primarySelection', value: localSelectionData.selected } );
    if( !primarySelectionModel.isSelectionModelActivated() ) {
        primarySelectionModel.setSelectionModelActivated( true );
    }
};

const handleSecondarySelectionChange = ( localSelectionData, baseSelection, parentSelectionData, primarySelection, primarySelectionModel ) => {
    let selectionInfo = { selected: [], pselected: undefined, source: undefined };
    if( localSelectionData.selected && localSelectionData.selected.length > 0 ) {
        const parentSelection = primarySelection && primarySelection.length === 1 ? primarySelection : [ baseSelection ];
        selectionInfo.selected = localSelectionData.selected;
        selectionInfo.pselected = parentSelection[ 0 ];
        selectionInfo.source = localSelectionData.source;
        selectionInfo.relationInfo = localSelectionData.relationInfo;
        primarySelectionModel.setSelectionModelActivated( false );
    } else if( primarySelection && primarySelection.length ) {
        selectionInfo.selected = primarySelection;
        selectionInfo.pselected = baseSelection;
        selectionInfo.source = 'primary';
        primarySelectionModel.setSelectionModelActivated( true );
    } else if( baseSelection ) {
        selectionInfo.selected = [ baseSelection ];
        selectionInfo.pselected = baseSelection;
        selectionInfo.source = 'base';
    }
    updateGlobalSelections( parentSelectionData, selectionInfo );
};

export const defaultSelectionChangeHandler = ( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, primarySelectionModel ) => {
    if( localSelectionData && localSelectionData.selected ) {
        if( localSelectionData.source === 'primary' ) {
            handlePrimarySelectionChange( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelectionModel );
        } else if( localSelectionData.source === 'secondary' ) {
            handleSecondarySelectionChange( localSelectionData, baseSelection, parentSelectionData, primarySelection, primarySelectionModel );
        }
        if( sublocationState && ( !sublocationState.focusComponent || sublocationState.focusComponent !== localSelectionData.source ) ) {
            sublocationState.update( { ...sublocationState.value, focusComponent: localSelectionData.source } );
        }
        trace( 'AwWorkarea selectionData: ', localSelectionData );
    }
};

export const handleSelectionChange = ( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, parentPWASelectionModel, localPWASelectionModel ) => {
    if( !_.isEmpty( localSelectionData ) ) {
        defaultSelectionChangeHandler( localSelectionData, baseSelection, parentSelectionData, dispatch, primarySelection, sublocationState, parentPWASelectionModel || localPWASelectionModel );
    }
};

export const getContext = ( vmDef, props ) => {
    return [ new DerivedStateResult( {
        ctxParameters: [],
        additionalParameters: [ props.subPanelContext, props.baseSelection ],
        compute: () => {
            return {
                ...props.subPanelContext,
                baseSelection: props.baseSelection
            };
        }
    } ) ];
};

export const cleanupViewModeData = () => {
    viewModeService.changeViewMode( 'None' );
    viewModeService.setAvailableViewModes( [] );
};

import _ from 'lodash';
import searchFilterService from 'js/aw.searchFilter.service';
import appCtxService from 'js/appCtxService';
import AwStateService from 'js/awStateService';
import Debug from 'debug';
import selectionService from 'js/selection.service';
import { DerivedStateResult } from 'js/derivedContextService';
import { getEvaluatedId } from 'js/uwUtilService';

const trace = new Debug( 'selection' );

const updateSearchContext = ( provider ) => {
    // Set the sort criteria for sublocation if its not already populated in ctx.ClientScopeURI.sortCriteria
    // This sort criteria will be shared across all views in a sublocation in a given session.
    var sortCriteria = appCtxService.getCtx( provider.clientScopeURI + '.sortCriteria' );
    if( sortCriteria === undefined || sortCriteria === '' ) {
        appCtxService.updatePartialCtx( provider.clientScopeURI + '.sortCriteria', [] );
        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', [] );
    } else {
        appCtxService.updatePartialCtx( 'sublocation.sortCriteria', sortCriteria );
    }

    appCtxService.updateCtx( 'search.activeFilterMap', {} );
    // revisitme- dependency of serch ctx should be removed and replaced by subPanelContext.searchContext
    // but search is dependent on this, refactor those usages and remove this code
    // listen to state change
    const onLocationChange = function( changedParams ) {
        if( provider.params ) {
            // Build up filter map and array
            var searchContext = searchFilterService.buildSearchFilters( provider.context );

            // Put the searchCriteria property on the state into the params
            if( provider.params.hasOwnProperty( 'searchCriteria' ) ) {
                if( !searchContext.criteria ) {
                    searchContext.criteria = {};
                }

                searchContext.criteria.searchString = provider.params.searchCriteria ? provider.params.searchCriteria :
                    '';
            }

            // Otherwise just update the context
            var contextChanged = !_.isEqual( appCtxService.getCtx( 'search' ), searchContext );
            if( contextChanged ) {
                appCtxService.registerCtx( 'search', searchContext );
            }
        }
    };

    AwStateService.instance.transitionHooks.onSuccess( {}, ( transition ) => {
        onLocationChange( transition.params() );
    } );

    return onLocationChange( AwStateService.instance.params );
};

export const initializeDefaultSublocation = ( provider ) => {
    // init breadcrumb
    let breadcrumbConfig = provider.breadcrumbConfig ? Object.assign( {}, provider.breadcrumbConfig ) : {};
    if( !breadcrumbConfig.id ) {
        breadcrumbConfig.id = 'wabc';
    }
    appCtxService.registerCtx( 'breadCrumbConfig', breadcrumbConfig );
    // search context logic
    updateSearchContext( provider );
};

export const cleanUp = () => {
    appCtxService.unRegisterCtx( 'breadCrumbConfig' );
};

export const handleSelectionChange = ( localSelectionData, parentSelectionData, selectionQueryParamKey = 's_uid' ) => {
    if( !_.isEmpty( localSelectionData ) ) {
        if( parentSelectionData ) {
            parentSelectionData.update( localSelectionData );
        } else {
            selectionService.updateSelection( localSelectionData.selected, localSelectionData.pselected, localSelectionData
                .relationInfo );

            if( selectionQueryParamKey && AwStateService.instance.params.hasOwnProperty( selectionQueryParamKey ) ) {
                var newParams = {};
                if( localSelectionData.selected.length === 1 && localSelectionData.source === 'primary' ) {
                    newParams[ selectionQueryParamKey ] = getEvaluatedId( localSelectionData.selected[ 0 ] );
                } else if( localSelectionData.source !== 'secondary' ) {
                    newParams[ selectionQueryParamKey ] = null;
                }
                AwStateService.instance.go( '.', newParams );
            }
        }
        trace( 'AwDefaultSublocation selectionData: ', localSelectionData );
    }
};

export const getContext = ( vmDef, props ) => {
    return [ new DerivedStateResult( {
        ctxParameters: [],
        additionalParameters: [ props.subPanelContext, props.selectionData, props.baseSelection, props.sublocationState ],
        compute: () => {
            let selectionQueryParamKey = props.subPanelContext && props.subPanelContext.selectionQueryParamKey ? props.subPanelContext.selectionQueryParamKey : 's_uid';
            let pageContext = {
                ...props.subPanelContext.pageContext,
                secondaryActiveTabId: props.sublocationState && props.sublocationState.secondaryActiveTabId,
                sublocationState: props.sublocationState
            };

            return {
                providerForBaseSublocation: {
                    ...props.subPanelContext,
                    selectionQueryParamKey: selectionQueryParamKey
                },
                subPanelContextForBaseSublocation: {
                    selectionData: props.selectionData,
                    baseSelection: props.baseSelection,
                    pageContext: pageContext
                },
                subPanelContextForAwWorkarea: {
                    ...props.subPanelContext,
                    baseSelection: props.baseSelection,
                    selectionQueryParamKey: selectionQueryParamKey,
                    pageContext: pageContext
                }
            };
        }
    } ) ];
};

export const getStdContext = ( vmDef, props ) => {
    return [ new DerivedStateResult( {
        ctxParameters: [],
        additionalParameters: [ props.subPanelContext, props.provider, props.baseSelection, props.sublocationState ],
        compute: () => {
            let pageContext = {};
            if( props.subPanelContext && props.subPanelContext.pageContext ) {
                pageContext = {
                    ...props.subPanelContext.pageContext,
                    secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,
                    sublocationState: props.sublocationState
                };
            } else {
                pageContext = {
                    secondaryActiveTabId: props.sublocationState.secondaryActiveTabId !== '' ? props.sublocationState.secondaryActiveTabId : undefined,
                    sublocationState: props.sublocationState
                };
            }
            return {
                ...props.subPanelContext,
                ...props.provider,
                baseSelection: props.baseSelection,
                pageContext: pageContext
            };
        }
    } ) ];
};

export const updateSelection = ( selectionModel, parentSelectionModel, selectionQueryParamKey = 's_uid', originalParams = {} ) => {
    let changeInParams = {};
    const changedParams = AwStateService.instance.params;
    for( var i in changedParams ) {
        if( changedParams[ i ] !== originalParams[ i ] ) {
            changeInParams[ i ] = changedParams[ i ];
        }
    }
    let activeSelectionModel = parentSelectionModel || selectionModel;
    if( changeInParams.hasOwnProperty( selectionQueryParamKey ) && activeSelectionModel.getCurrentSelectedCount() < 2 ) {
        const selection = AwStateService.instance.params[ selectionQueryParamKey ] ? [ AwStateService.instance.params[ selectionQueryParamKey ] ] : [];
        activeSelectionModel.setSelection( selection );
    }
    return {
        changedParams: changedParams
    };
};

// Copyright (c) 2021 Siemens
import cfgSvc from 'js/configurationService';

/**
 * Shared scope issue in existing implementation
 * Todo mentioned in afx:
 * The directive definition in exisiting aw-page implemenation mentions $scope instead of scope.
 * Because of this typo, aw-page is currently sharing scope with whatever uses it
 * We will need to revisit and evaluate the usecases once we are able to consume and test AwPage
 */

export const getBrowserTitle = async() => {
    const solution = await cfgSvc.getCfg( 'solutionDef' );
    return solution ? solution.browserTitle : 'Teamcenter';
};

/**
 * Setting title on Narrow mode related listeners
 * @param {object}declViewModel - the view model obj
 */
export const setOnNarrowModeTitle = ( declViewModel ) => {
    const { data, dispatch } = declViewModel;
    data.layoutSummaryOnly = false;
    if( data.preNarrowTitle ) {
        data.headerTitle = data.preNarrowTitle;
        data.preNarrowTitle = null;
    }
    dispatch( { path: 'data', value: { ...data } } );
};

export const handleNarrowModeChange = ( eventData, data ) => {
    if( !eventData.isEnterNarrowMode ) {
        setOnNarrowModeTitle( data );
    }
};

export const onSubLocationContentSelectionChange = ( eventData, declViewModel ) => {
    const { data, dispatch } = declViewModel;
    if( eventData.isPrimaryWorkArea && eventData.haveObjectsSelected && window.innerWidth < 460 ) {
        data.layoutSummaryOnly = true;
        let activeTab = data.subLocationTabs && data.subLocationTabs.filter( ( tab ) => {
            return tab.selectedTab;
        } )[ 0 ];

        if( !activeTab ) {
            activeTab = {
                name: 'null'
            };
        }

        if( data.preNarrowTitle ) {
            data.headerTitle = data.preNarrowTitle + ' (' + activeTab.name + ')';
        } else {
            data.preNarrowTitle = data.headerTitle;
            data.headerTitle = data.headerTitle + ' (' + activeTab.name + ')';
        }
        dispatch( { path: 'data', value: { ...data } } );
    }
};

export const awPageRenderFunction = ( props ) => {
    const {
        browserSubTitle,
        browserTitle,
        headerTitle,
        layoutSummaryOnly,
        locationPanelStyle,
        subLocationTabs,
        children,
        viewModel,
        ctx
    } = props;

    const { data } = viewModel;
    data.layoutSummaryOnly = data.layoutSummaryOnly || layoutSummaryOnly;
    data.preNarrowTitle = data.preNarrowTitle || null;
    data.headerTitle = data.headerTitle || headerTitle;
    data.browserTitle = browserTitle || data.browserTitle;
    data.subLocationTabs = subLocationTabs || [];

    if( data.browserTitle ) {
        document.title = data.browserTitle +
            ( browserSubTitle ? ' - ' + browserSubTitle : '' );
    }

    const getClassName = () => {
        let locationPanelStyleFinal = locationPanelStyle + ' locationPanel';
        let layoutSummaryOnlyFinal = data.layoutSummaryOnly ? ' aw-layout-summaryOnly' : '';
        let fullscreenFinal = '';
        return `aw-layout-flexRowContainer aw-layout-flexbox aw-layout-locationPanel ${locationPanelStyleFinal} ${layoutSummaryOnlyFinal} ${fullscreenFinal}`;
    };

    return <div className={getClassName()}>
        <div className='sw-column aw-layout-nowrap flex-auto'>
            <div className='aw-layout-defaultHeader aw-layout-nowrap sw-row'>{children[0]}</div>
            <div className='sw-row flex-auto aw-layout-nowrap aw-layout-subLocation afx-content-background'>
                <div className='sw-column aw-layout-nowrap flex-auto'>
                    {children[1]}
                </div>
            </div>
        </div>
    </div>;
};

const exports = {
    getBrowserTitle
};
export default exports;

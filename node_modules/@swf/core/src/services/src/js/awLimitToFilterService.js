// Copyright (c) 2020 Siemens
/* eslint-env es6 */
/* eslint-disable require-jsdoc */
/**
 * aw limitTo Filter 
 * Creates a new array or string containing only a specified number of elements.
 * The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of limit.
 * Other array-like objects are also supported.
 * If a number is used as input, it is converted to a string.
 *
 * @module js/awLimitToFilterService
 */

function toInt( str ) {
    return parseInt( str, 10 );
}
var isNumberNaN = Number.isNaN || function isNumberNaN( num ) {
    return num !== num;
};

function isString( value ) { return typeof value === 'string'; }

function isNumber( value ) { return typeof value === 'number'; }

function sliceFn( input, begin, end ) {
    if( isString( input ) ) {
        return input.slice( begin, end );
    }
    return [].slice.call( input, begin, end );
}

function isArray( arr ) {
    return Array.isArray( arr ) || arr instanceof Array;
}
/**
 * 
 * @param {*} input Array/array-like, string or number to be limited.
 * @param {*} limit The length of the returned array or string. If the limit number is positive, limit number of items from the beginning of the source array/string are copied.
 *  If the number is negative, limit number of items from the end of the source array/string are copied. The limit will be trimmed if it exceeds array.length.
 *  If limit is undefined, the input will be returned unchanged.
 * @param {*} begin Index at which to begin limitation. As a negative index, begin indicates an offset from the end of input. Defaults to 0.
 * @returns {Array} A new sub-array or substring of length limit or less if the input had less than limit elements.
 */
function limitToFilter( input, limit, begin ) {
    //check array like input
    if( !( isArray( input ) || isString( input ) || isNumber( input ) ) ) {
        return input;
    }
    if( isNumberNaN( limit ) ) {
        return input;
    }
    if( Math.abs( Number( limit ) ) === Infinity ) {
        limit = Number( limit );
    } else {
        limit = toInt( limit );
    }

    if( isNumber( input ) ) {
        input = input.toString();
    }

    begin = !begin || isNaN( begin ) ? 0 : toInt( begin );
    begin = begin < 0 ? Math.max( 0, input.length + begin ) : begin;

    if( limit >= 0 ) {
        return sliceFn( input, begin, begin + limit );
    }
    if( begin === 0 ) {
        return sliceFn( input, limit, input.length );
    }
    return sliceFn( input, Math.max( 0, begin + limit ), begin );
}

export default {
    limitToFilter
};

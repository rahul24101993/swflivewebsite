// Copyright (c) 2020 Siemens
/**
 * TODO
 * <P>
 * Note: This modules does not create an injectable service.
 *
 * @module js/awFileService
 */

/**
 * Get file name from path
 *
 * @param {String} filePath - The file path to get
 *
 * @return {String} file name
 */
export let getFileFromPath = function( filePath ) {
    if( filePath !== null ) {
        let seperatorIndex = filePath.lastIndexOf( '\\' );
        if( seperatorIndex === -1 ) {
            seperatorIndex = filePath.lastIndexOf( '/' );
        }
        return filePath.substring( seperatorIndex + 1 );
    }

    return null;
};

/**
 * Get file name without extension from file name
 *
 * @param {String} fileName file name
 * @return {String} file name without extension
 */
export let getFileNameWithoutExtension = function( fileName ) {
    const extIndex = fileName.lastIndexOf( '.' );
    if( extIndex > -1 ) {
        return fileName.substring( 0, extIndex );
    }
    return fileName;
};

/**
 * Get file name extension from file name
 *
 * @param {String} fileName file name
 * @return {String} file name extension
 */
export let getFileExtension = function( fileName ) {
    const extIndex = fileName.lastIndexOf( '.' );
    if( extIndex > -1 ) {
        return fileName.substring( extIndex );
    }
    return '';
};

/**
 * Look for support of the 'files' in the 'dataTranfer' area of the event.
 *
 * @param {DragEvent} event - The event to test.
 *
 * @return {boolean} TRUE if the 'files' property is found in the 'dataTransfer' property of the event.
 */
export let dataTransferContainsFiles = function( event ) {
    if( event.dataTransfer ) {
        const types = event.dataTransfer.types;

        if( types ) {
            for( let i = 0; i < types.length; ++i ) {
                if( types[ i ] === 'Files' ) {
                    return true;
                }
            }
        }
    }
    return false;
};

/**
 * check if the current file extension match the filter types.
 *
 * @param {String } typeFilter - The types that file need match .
 * @param {String } fileExt - The file need match .
 *
 * @return {boolean} TRUE if the 'file' match the 'typeFilter'.
 */
export let fileMatchTypes = function( typeFilter, fileExt ) {
    if( typeFilter ) {
        const validFileExtensions = typeFilter.split( ',' );
        if( fileExt !== '' ) {
            fileExt = fileExt.replace( '.', '' );
        }
        for( let ndx = 0; ndx < validFileExtensions.length; ndx++ ) {
            let validFileExt = validFileExtensions[ ndx ].trim();
            if( validFileExt !== null ) {
                validFileExt = validFileExt.replace( '.', '' );
                if( fileExt !== '' &&
                    fileExt.toLowerCase() === validFileExt.toLowerCase() ) {
                    return true;
                }
            }
        }
        return false;
    }
    return true;
};

export default {
    getFileFromPath,
    getFileNameWithoutExtension,
    getFileExtension,
    dataTransferContainsFiles,
    fileMatchTypes
};

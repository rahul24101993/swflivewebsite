/* eslint-disable require-jsdoc */
// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * This module provides the native implementation of the cacheFactory.
 *
 * @module js/awCacheFactoryService
 */
import _ from 'lodash';

let caches = {};

function cacheFactory( cacheId ) {
    if( cacheId in caches ) {
        throw new Error( `awCacheFactory, CacheId ${cacheId} is already taken!` );
    }

    var size = 0;
    var stats = Object.assign( {}, { id: cacheId } );
    var data = createMap();

    /**
     * A cache object used to store and retrieve data
     */
    return caches[ cacheId ] = {

        /**
         * Inserts a named entry into the cache object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function( key, value ) {
            if( isUndefined( value ) ) { return; }
            if( !( key in data ) ) { size++; }
            data[ key ] = value;
            return value;
        },

        /**
         * Retrieves named data stored in the cache object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function( key ) {
            return data[ key ];
        },

        /**
         * Removes an entry from the cache object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function( key ) {
            if( !( key in data ) ) { return; }
            delete data[ key ];
            size--;
        },

        /**
         * Clears the cache object of any entries.
         */
        removeAll: function() {
            data = createMap();
            size = 0;
        },

        /**
         * Destroys the cache object entirely,
         * removing it from the cacheFactory set.
         */
        destroy: function() {
            data = null;
            stats = null;
            delete caches[ cacheId ];
        },

        /**
         * Retrieve information regarding a particular cache
         *
         * @returns {object} an object with the id, size properties
         */
        info: function() {
            return Object.assign( {}, stats, { size: size } );
        }
    };
}

function createMap() {
    return Object.create( null );
}

/**
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined( value ) {
    return typeof value === 'undefined';
}

/**
 * Get information about all the caches that have been created
 *
 * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
 */
cacheFactory.info = function() {
    var info = {};
    _.forEach( caches, function( cache, cacheId ) {
        info[ cacheId ] = cache.info();
    } );
    return info;
};

/**
 * Get access to a cache object by the `cacheId` used when it was created.
 *
 * @param {string} cacheId Name or id of a cache to access.
 * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
 */
cacheFactory.get = function( cacheId ) {
    return caches[ cacheId ];
};

export let instance = cacheFactory;

export default {
    instance
};

/* eslint-disable no-console */
// Copyright (c) 2020 Siemens
/* eslint-env es6 */
import _ from 'lodash';
import eventBus from 'js/eventBus';
import appCtxService from 'js/appCtxService';

/**
 * awStateService
 *
 * @module js/awStateService
 */
let routerStateSvc;
let stateServiceObject = {
    instance: {
        //test purpose only, will be overriden by router
        go: () => {},
        params: {},
        transitionHooks: {
            onEnter: () => {},
            onSuccess: () => {},
            onBefore: () => {}
        }
    }
};

const subscribeHooks = ( transitionService, locationService ) => {
    if( locationService.path() && !/^(\/|undefined)/.test( locationService.path() ) &&
        window && window.location ) {
        // The following block is to support remapping of "invalid" URLs
        // #state -> #/state
        // #state;uid=123 => #/state?uid=123
        const pathElems = locationService.path().split( ';' );
        let newPath = pathElems[ 0 ];
        for( let ii = 1; ii < pathElems.length; ii++ ) {
            if( ii === 1 ) {
                newPath += `?${pathElems[ii]}`;
            } else {
                newPath += `&${pathElems[ii]}`;
            }
        }
        // Update URL & reload page
        window.location.hash = `#/${newPath}`;
        window.location.reload( false ); // force page refresh
    }
    eventBus.publish( 'transitionHooks', {
        transitionService
    } );
    locationService.onChange( ( event ) => {
        eventBus.publish( 'locationChangeSuccess', {
            event: event,
            newUrl: event.newURL,
            oldUrl: event.oldURL
        } );
        // Update the state params on appCtx
        updateStateParamsOnAppCtx( stateServiceObject.instance.params );
        // support legacy usages of location change complete event
        eventBus.publish( 'LOCATION_CHANGE_COMPLETE' );
    } );
    transitionService.onSuccess( {}, ( transition ) => {
        // Update the state params on appCtx
        updateStateParamsOnAppCtx( transition.params() );
        eventBus.publish( 'stateChangeSuccess', {
            transitionParams: transition.params()
        } );
    } );
};
export const initializeStateService = ( router ) => {
    routerStateSvc = router.stateService;
    stateServiceObject.instance = {
        go: routerStateSvc.go,
        get: routerStateSvc.get,
        href: routerStateSvc.href,
        get current() {
            return routerStateSvc.current;
        },
        get params() {
            return _.reduce( routerStateSvc.params, ( sum, curr, key ) => ( {
                ...sum,
                [ key ]: curr && typeof curr === 'string' ? decodeURIComponent( encodeURIComponent( curr ) ) : curr
            } ), {} );
        },
        transitionTo: routerStateSvc.transitionTo,
        transitionHooks: {
            /**
             * Replacement of $stateChangeStart
             */
            onEnter: router.transitionService.onEnter,
            /**
             * Replacement of $stateChangeSuccess
             */
            onSuccess: router.transitionService.onSuccess,
            /**
             * Replacement of $stateChangeError
             */
            onError: router.transitionService.onError,
            onBefore: router.transitionService.onBefore
        },
        /**
         * Replacement of $stateNotFound
         */
        onInvalid: routerStateSvc.onInvalid,
        reload : routerStateSvc.reload
    };
    subscribeHooks( router.transitionService, router.locationService );
    // Suppress console errors, we are deliberately aborting the state transition at few places
    routerStateSvc.defaultErrorHandler( function( error ) {
        // do nothing- suppress errors
    } );
};

const updateStateParamsOnAppCtx = ( stateParams ) => {
    var processParameters = function processParameters( stateParams ) {
        return Object.keys( stateParams ) // Filter parameters that are not set
            .filter( function( param ) {
                return stateParams[ param ];
            } ) // Build the new object
            .reduce( function( acc, nxt ) {
                acc[ nxt ] = stateParams[ nxt ];
                return acc;
            }, {} );
    };

    appCtxService.registerCtx( 'state', {
        params: stateParams,
        processed: processParameters( stateParams )
    } );
};

export default stateServiceObject;

// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * Memory Processor
 *
 * @module js/splmStatsMemProcessor
 */

/**
 * Instances of this class represent a profiler for Memory Usage
 *
 * @class SPLMStatsMemProcessor
 */
function SPLMStatsMemProcessor() {
    let self = this;

    let _processingTime = 0;

    let _startProcessorTime = 0;

    let _endProcessorTime = 0;

    let _memoryCaptures = [];

    const _reset = function() {
        _memoryCaptures = [];
    };

    self.start = function() {
        _startProcessorTime = window.performance.now();
        _reset();

        if( window.performance && window.performance.memory ) {
            _memoryCaptures.push( {
                _usedJSHeapSize: ( window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100 ).toFixed( 2 ) + '%',
                _bytesUsed: window.performance.memory.usedJSHeapSize
            } );
        }

        _endProcessorTime = window.performance.now();
        _processingTime += _endProcessorTime - _startProcessorTime;
    };

    self.stop = function() {
        _startProcessorTime = window.performance.now();
        if( window.performance && window.performance.memory ) {
            _memoryCaptures.push( {
                _usedJSHeapSize: ( window.performance.memory.usedJSHeapSize / window.performance.memory.jsHeapSizeLimit * 100 ).toFixed( 2 ) + '%',
                _bytesUsed: window.performance.memory.usedJSHeapSize
            } );
        }
        _endProcessorTime = window.performance.now();
        _processingTime += _endProcessorTime - _startProcessorTime;
    };

    self.getProcessingTime = function() {
        const _time = _processingTime;
        _processingTime = 0;
        return { MemProcessorOverhead: _time };
    };

    self.getMetrics = function() {
        if( window.performance && window.performance.memory ) {
            let memoryConsumption = _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed - _memoryCaptures[ 0 ]._bytesUsed; //end minus beginning
            return {
                MemoryConsumption: memoryConsumption, //Bytes base value
                MemoryUsed: _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed,
                MemoryStart: _memoryCaptures[ _memoryCaptures.length - 1 ]._bytesUsed,
                MemoryEnd: _memoryCaptures[ 0 ]._bytesUsed
            };
        }
        return {
            MemoryConsumption: 0,
            MemoryUsed: 0
        };
    };

    return self;
}

export default SPLMStatsMemProcessor;

// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * Main Entry of PLStats
 *
 * @module js/splmStatsService
 */
import locationService from 'js/splmStatsLocationService';
import jsService from 'js/splmStatsJsService';
import xhrService from 'js/splmStatsXhrService';
import mutationService from 'js/splmStatsMutationService';
import browserUtils from 'js/browserUtils';
import cfgSvc from 'js/configurationService';

import Benchmark from 'js/splmStatsBenchmark';
import Performance from 'js/splmStatsPerformance';

import DOMProcessor from 'js/splmStatsDOMProcessor';
import JSProcessor from 'js/splmStatsJsProcessor';
import MEMProcessor from 'js/splmStatsMemProcessor';
import XHRProcessor from 'js/splmStatsXhrProcessor';
import ComponentProcessor from 'js/splmStatsComponentProcessor';

import ClickListener from 'js/splmStatsClickListener';
import LocationListener from 'js/splmStatsLocationListener';

import AnalyticsReporter from 'js/splmStatsAnalyticsReporter';
import CucumberReporter from 'js/splmStatsCucumberReporter';
import DebugReporter from 'js/splmStatsDebugReporter';
import MobileReporter from 'js/splmStatsMobileReporter';
import ClientReporter from 'js/splmStatsClientReporter';

import { createProfiler as createBaseProfiler } from 'js/splmStatsProfiler';
import { LAST_DIGEST_BUSY_WAIT } from 'js/splmStatsConstants';
import splmStatsUtils from './splmStatsUtils';

const _defaultAnalyticsConfig = {
    splmStatsConfiguration: {
        name: 'ActiveWorkspaceTest',
        appCtxValueFilters: [
            'com.siemens.splm.clientfx.tcui.xrt.',
            'com.siemens.splm.client.search.',
            'com.siemens.splm.client.',
            'teamcenter.search.search',
            'SubLocation',
            'Location'
        ],
        appCtxKeys: [ {
            name: 'Location',
            searchPaths: [
                [ 'locationContext', 'ActiveWorkspace:Location' ]
            ]
        },
        {
            name: 'Sublocation',
            searchPaths: [
                [ 'locationContext', 'ActiveWorkspace:SubLocation' ]
            ]
        },
        {
            name: 'ViewMode',
            searchPaths: [
                [ 'ViewModeContext', 'ViewModeContext' ]
            ]
        },
        {
            name: 'PrimaryPage',
            searchPaths: [
                [ 'xrtPageContext', 'primaryXrtPageID' ]
            ]
        },
        {
            name: 'SecondaryPage',
            searchPaths: [
                [ 'xrtPageContext', 'secondaryXrtPageID' ]
            ]
        },
        {
            name: 'clientScopeURI',
            searchPaths: [
                [ 'sublocation', 'clientScopeURI' ]
            ]
        },
        {
            name: 'SelectedObjectType',
            searchPaths: [
                [ 'selected', 'type' ]
            ]
        }
        ],
        triggers: {
            commands: []
        }
    }
};

const componentProcessor = new ComponentProcessor();
var plStatsEnabled = false;
const clientReporter = new ClientReporter();
const isAnalyticsConfigured = ( analyticsConfigObject ) => {
    return analyticsConfigObject && Object.keys( analyticsConfigObject ).length > 0;
};

export const install = () => {
    xhrService.install();
    mutationService.install();
    locationService.install();
};

export const uninstall = () => {
    xhrService.uninstall();
    mutationService.uninstall();
    locationService.uninstall();
};

export const createProfiler = ( watchers = [], interval = LAST_DIGEST_BUSY_WAIT ) => {
    // Provide resetWait function as default
    const resetWatcher = {
        register: ( start, done ) => {
            resetWatcher.resetWait = () => ( start() || true ) && done();
        },
        unregister: () => {
            delete resetWatcher.resetWait;
        }
    };

    // JS watcher
    const jsWatcher = {};
    jsWatcher.register = ( start, done ) => {
        jsWatcher.proc = { start, done };
        jsService.addProc( jsWatcher.proc );
    };

    jsWatcher.unregister = () => {
        jsService.removeProc( jsWatcher.proc );
        delete jsWatcher.proc;
    };

    // Location watcher
    const locWatcher = {};
    locWatcher.register = ( start, done ) => {
        locWatcher.proc = { start, done };
        locationService.addProc( locWatcher.proc );
    };
    locWatcher.unregister = () => {
        locationService.removeProc( locWatcher.proc );
        delete locWatcher.proc;
    };

    // XHR watcher
    const xhrWatcher = {};
    xhrWatcher.register = ( start, done ) => {
        xhrWatcher.proc = { start, done };
        xhrService.addProc( xhrWatcher.proc );
    };
    xhrWatcher.unregister = () => {
        xhrService.removeProc( xhrWatcher.proc );
        delete xhrWatcher.proc;
    };

    // Browser mutation watcher
    const mutationWatcher = {};
    mutationWatcher.register = ( start, done ) => {
        mutationWatcher.proc = { start, done };
        mutationService.addProc( mutationWatcher.proc );
    };
    mutationWatcher.unregister = () => {
        mutationService.removeProc( mutationWatcher.proc );
        delete mutationWatcher.proc;
    };

    const profiler = createBaseProfiler( [
        ...watchers,
        jsWatcher,
        xhrWatcher,
        resetWatcher,
        mutationWatcher
    ], interval );

    profiler.resetWait = () => resetWatcher.resetWait();

    return profiler;
};

/**
 * Create default benckmark for PLStats
 * @returns {Benchmark} benchmark object
 */
export function createBenchmark() {
    const benchmark = new Benchmark();
    benchmark.addProcessor( 'JS', new JSProcessor() );
    benchmark.addProcessor( 'DOM', new DOMProcessor() );
    benchmark.addProcessor( 'XHR', new XHRProcessor() );
    benchmark.addProcessor( 'MEM', new MEMProcessor() );
    benchmark.addProcessor( 'Components', componentProcessor );
    benchmark.includeProcessorTime();
    return benchmark;
}

/**
 * Creates cucumber monitor/reporter for automation tests
 * @returns {Performance} performance object
 */
export function createCucumberMonitor() {
    enablePLStats();
    const benchmark = createBenchmark();

    benchmark.addReporter( new DebugReporter() );
    benchmark.addReporter( new CucumberReporter() );

    const perf = new Performance( { createProfiler } );

    perf.setBenchmark( benchmark );

    perf.addListener( new ClickListener() );
    perf.addListener( new LocationListener() );

    return perf;
}

/**
 * Create default monitor for PLStats
 * @returns {Performance} default performance object object
 */
export function createPerformance() {
    const benchmark = createBenchmark();
    enablePLStats();

    benchmark.addReporter( new DebugReporter() );

    const perf = new Performance( { createProfiler } );

    perf.setBenchmark( benchmark );

    perf.addListener( new ClickListener() );
    perf.addListener( new LocationListener() );

    return perf;

    // then enable and run
}

/**
 * Adds analytics cfg
 */
export function installAnalyticsConfig() {
    let analyticsConfigObject = cfgSvc.getCfgCached( 'analytics' );
    if( !isAnalyticsConfigured( analyticsConfigObject ) ) {
        // handle unit test scenario when analytics isn't set
        cfgSvc.add( 'analytics', _defaultAnalyticsConfig );
    } else if( !isAnalyticsConfigured( analyticsConfigObject.splmStatsConfiguration ) ) {
        // merge into existing analytics root object
        cfgSvc.add( 'analytics.splmStatsConfiguration', _defaultAnalyticsConfig.splmStatsConfiguration );
    }
}

/**
 * Function to check if PLStats is enabled
 * @returns {Boolean} plStatsEnabled
 */
export function isPLStatsEnabled() {
    return plStatsEnabled;
}

/**
 * Function to enable flag for plStats
 */
export function enablePLStats() {
    plStatsEnabled = true;
    jsService.install();
}

/**
 * Function to disable flag for plStats
 */
export function disablePLStats() {
    plStatsEnabled = false;
    jsService.uninstall();
}

/**
 * Track Component details for PLStats reporting
 * @param {string} componentName - Name of component
 * @param {float} renderTime - Time component took to render
 */
export function trackComponent( componentName ) {
    componentProcessor.endComponentRenderTime();
    if( isPLStatsEnabled() ) {
        componentProcessor.addComponent( componentName );
    }
}

/**
 * Function to start component render timer
 */
export function startComponentRenderTime() {
    if( isPLStatsEnabled() ) {
        componentProcessor.startComponentRenderTime();
    }
}

/**
 *
 * @returns {Object} PLStatsData - Object containing PLStats Data to display on performance monitor panel
 */
export function getPLStatsData() {
    return clientReporter.getPLStatsData();
}

/**
 * Initializes profiler
 * @param {Boolean} usePLStatsClient - Flag for if plStats is enabled from client
 * @returns {Object} performance - Object to track performance object from client
 */
export function initProfiler( usePLStatsClient = false ) {
    let performance = null;
    const urlAttrs = browserUtils.getUrlAttributes();
    const usePLStats = urlAttrs.usePLStats !== undefined;
    if( usePLStats || !splmStatsUtils.isAnalyticsDisabled() || usePLStatsClient ) {
        // Enable profiler/performance by default
        enablePLStats();
        const benchmark = createBenchmark();
        benchmark.addReporter( new AnalyticsReporter() );

        if( usePLStats || usePLStatsClient ) {
            benchmark.addReporter( new DebugReporter() );
        }
        if( ( usePLStats || usePLStatsClient ) && browserUtils.isMobileOS ) {
            benchmark.addReporter( new MobileReporter() );
        }
        if( usePLStatsClient ) {
            benchmark.addReporter( clientReporter );
        }
        performance = new Performance( { createProfiler } );
        performance.setBenchmark( benchmark );

        performance.addListener( new ClickListener() );
        performance.addListener( new LocationListener() );

        performance.enable();
        performance.run();
    }
    return performance;
}

export default {
    install,
    uninstall,
    createProfiler,
    createBenchmark,
    createCucumberMonitor,
    createPerformance,
    installAnalyticsConfig,
    isPLStatsEnabled,
    enablePLStats,
    disablePLStats,
    trackComponent,
    startComponentRenderTime,
    getPLStatsData,
    initProfiler
};

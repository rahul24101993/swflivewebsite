/**
 * Client reporter that will update global app context to update view if enabled
 *
 * @module js/splmStatsClientReporter
 */

import eventBus from 'js/eventBus';

/**
 * Client reporter that will update global app context to update view if enabled
 *
 * @class SPLMStatsClientReporter
 */
function SPLMStatsClientReporter() {
    let self = this;
    var _plStatsData = {};

    /**
     *
     * @returns {Object} _plStatsData - Object holding plStatsData to display on performance monitor panel
     */
    self.getPLStatsData = function() {
        return _plStatsData;
    };

    /**
     * @param {Object} performanceObject - Performance object to be extracted and global app context to be updated
     */
    self.report = function( performanceObject ) {
        let browserType = performanceObject.BrowserType;
        let tti = ( performanceObject.TTI / 1000 ).toFixed( 2 ) + ' s';
        // let scriptingTime = ( performanceObject.scriptTime / 1000 ).toFixed( 2 ) + ' s';
        let totalNetworkTime = ( performanceObject.totalNetworkTime / 1000 ).toFixed( 2 ) + ' s';
        let soaCount = performanceObject.Network.SoaDetails.filter( function( networkCall ) {
            return networkCall.logCorrelationID !== 0;
        } ).length;
        let totalHttpRequests = performanceObject.Network.totalHttpRequests;
        let memoryStart = performanceObject.MemoryStart;
        let memoryEnd = performanceObject.MemoryEnd;
        let memoryUsed = performanceObject.MemoryUsed;
        let memoryConsumed = performanceObject.MemoryConsumption;
        if( memoryUsed === 0 || memoryConsumed === 0 ) {
            memoryStart = 'Not Supported';
            memoryEnd = 'Not Supported';
        } else {
            memoryStart = ( memoryStart / 1024000 ).toFixed( 0 ) + ' MB';
            memoryEnd = ( memoryEnd / 1024000 ).toFixed( 0 ) + ' MB';
        }
        let domNodeCount = performanceObject.DOM.elemCount;
        let domTreeDepth = performanceObject.DOM.DOMTreeDepth;
        let uniqueComponents = performanceObject.Component.uniqueComponents;
        let componentRenders = performanceObject.Component.componentRenders;

        _plStatsData = {
            browserType,
            tti,
            totalNetworkTime,
            soaCount,
            totalHttpRequests,
            memoryStart,
            memoryEnd,
            domNodeCount,
            domTreeDepth,
            uniqueComponents,
            componentRenders
        };
        eventBus.publish( 'plStats.update' );
    };
}

export default SPLMStatsClientReporter;

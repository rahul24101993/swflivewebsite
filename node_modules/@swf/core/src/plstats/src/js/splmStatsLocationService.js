// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * @module js/splmStatsLocationService
 */
// import { wrapFunction } from 'js/splmStatsJsService';
import { setReportAnalytics } from 'js/splmStatsUtils';

const POPSTATE = 'popState';
const HASHCHANGE = 'hashchange';

let _procs = [];

const globalHistoryPushState = history.pushState;

const globalHistoryReplaceState = history.replaceState;

const wrapFunction = function( thisArg, func ) {
    return ( ...args ) => {
        if( _procs.length === 0 ) {
            return func.apply( thisArg, args );
        }

        try {
            _procs.forEach( function( proc ) {
                proc.start();
            } );
        } catch ( ex ) {
            // TODO: Do nothing for now, will fill it up before EOD 1905
        }
        const res = func.apply( thisArg, args );
        try {
            _procs.forEach( function( proc ) {
                proc.stop();
            } );
        } catch ( ex ) {
            // TODO: Do nothing for now, will fill it up before EOD 1905
        }
        return res;
    };
};

const watcherFn = wrapFunction( null, () => null );

export const install = function() {
    history.pushState = wrapFunction( history, globalHistoryPushState );

    history.replaceState = wrapFunction( history, globalHistoryReplaceState );

    // instead of popstate hashchange gives the old and new url information.
    // win.addEventListener( 'popstate', () => {
    //     win.dispatchEvent( new Event( 'locationchange' ) );
    // } );

    // https://developer.mozilla.org/zh-CN/docs/Web/API/Window/onhashchange
    window.addEventListener( HASHCHANGE, () => {
        watcherFn();
        setReportAnalytics( true );
    } );
};

export const uninstall = function() {
    history.pushState = globalHistoryPushState;
    history.replaceState = globalHistoryReplaceState;
    window.removeEventListener( HASHCHANGE, watcherFn );
};

export const addProc = function( proc ) {
    _procs.push( proc );
};

export const removeProc = function( proc ) {
    _procs = _procs.filter( procObj => proc !== procObj );
};

export default {
    install,
    uninstall,
    addProc,
    removeProc
};

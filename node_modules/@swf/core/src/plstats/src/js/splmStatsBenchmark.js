// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * Benchmark object to record the performance metrics
 *
 * @module js/splmStatsBenchmark
 */
import { getBrowserType } from 'js/splmStatsUtils';

/**
 * Instances of this class represent a processor for HTTP Request/Response
 *
 * @class SPLMStatsProfiler
 */
function SPLMStatsBenchmark() {
    let self = this;

    let _processorMap = {};
    let _reporters = [];

    // Context string as identifier
    let _title = '';

    let _processingTime = false;

    self.includeProcessorTime = function() {
        _processingTime = true;
    };

    self.getIncludeProcessorTime = function() {
        return _processingTime;
    };

    self.start = function() {
        for( let key in _processorMap ) {
            _processorMap[ key ].start();
        }
    };

    self.stop = function() {
        for( let key in _processorMap ) {
            _processorMap[ key ].stop();
        }
    };

    self.getMetrics = function() {
        let metrics = {};
        for( let key in _processorMap ) {
            let processor = _processorMap[ key ];
            Object.assign( metrics, processor.getMetrics() );
            Object.assign( metrics, processor.getProcessingTime() );
        }
        metrics.title = _title;
        metrics.BrowserType = getBrowserType();
        return metrics;
    };

    self.report = function( elapsed ) {
        let metrics = self.getMetrics();

        if( elapsed ) {
            metrics.TTI = elapsed;
        }
        _reporters.forEach( function( reporter ) {
            reporter.report( metrics );
        } );
    };

    self.addProcessor = function( name, processor ) {
        _processorMap[ name ] = processor;
    };

    self.addReporter = function( reporter ) {
        _reporters.push( reporter );
    };

    self.setTitle = function( title ) {
        _title = title;
    };

    return self;
}

export default SPLMStatsBenchmark;

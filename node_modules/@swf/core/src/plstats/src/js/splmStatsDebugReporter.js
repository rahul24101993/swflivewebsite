// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * Debug Reporter that will send performance info to console if enabled
 *
 * @module js/splmStatsDebugReporter
 */
import _ from 'lodash';
import { getLocationInformation } from 'js/splmStatsUtils';


/**
 * Debug Reporter that will send performance info to console if enabled
 *
 * @class SPLMStatsDebugReporter
 */
function SPLMStatsDebugReporter() {
    let self = this;

    const repeat = function( str, n ) {
        let newStr = '';
        for( let i = 0; i < n; i++ ) {
            newStr += str;
        }
        return newStr;
    };

    const _getFormattedPrint = function( performanceObj ) {
        const Table = function( report ) {
            let self = this;
            let _rows = {};
            let _skeletonStruct = '';

            self.addRow = function( row, colIdx ) {
                if( !_rows[ colIdx ] ) {
                    _rows[ colIdx ] = {};
                    _rows[ colIdx ].rowList = [];
                    _rows[ colIdx ].maxWidth = 0;
                }
                _rows[ colIdx ].rowList.push( row );
                if( _rows[ colIdx ].maxWidth < row.length ) {
                    _rows[ colIdx ].maxWidth = row.length;
                }
            };

            self.buildSkeleton = function() {
                let _skel = 'PLStats Performance Summary\n';
                let columns = Object.keys( _rows );

                _rows[ '0' ].maxWidth = 1 + _rows[ 0 ].maxWidth;
                _rows[ '1' ].maxWidth = 1 + ( _rows[ 1 ].maxWidth > 13 ? _rows[ 1 ].maxWidth : 13 );

                /* SETUP TOP */
                for( let i = 0; i < columns.length; i++ ) {
                    _skel += '+' + repeat( '-', _rows[ i ].maxWidth );
                }
                _skel += '+\n';
                _skel += '|' + ' Metric' + repeat( ' ', _rows[ 0 ].maxWidth - ' Metric'.length );
                _skel += '|' + repeat( ' ', _rows[ 1 ].maxWidth - ' Value |'.length + 1 ) + ' Value |';
                _skel += '\n';

                /* SETUP MIDDLE PORTION */
                for( let ii = 0; ii < columns.length; ii++ ) {
                    _skel += '+' + repeat( '-', _rows[ ii ].maxWidth );
                }
                _skel += '+\n';

                /* Print Data Here */
                for( let j = 0; j < _rows[ 0 ].rowList.length; j++ ) {
                    _skel += '|' + ' ' + _rows[ 0 ].rowList[ j ] + repeat( ' ', _rows[ 0 ].maxWidth - ( ' ' + _rows[ 0 ].rowList[ j ] ).length );
                    _skel += '|' + repeat( ' ', 1 + _rows[ 1 ].maxWidth - String( ' ' + _rows[ 1 ].rowList[ j ] + '|' ).length ) + ' ' + _rows[ 1 ].rowList[ j ] + '|';
                    _skel += '\n';
                }

                /* SETUP BOTTOM */
                for( let k = 0; k < columns.length; k++ ) {
                    _skel += '+' + repeat( '-', _rows[ k ].maxWidth );
                }
                _skel += '+\n';
                _skeletonStruct = _skel;
                return _skel;
            };

            /* Any processing that needs to be done to report performance object... => String */

            let memoryUsed = report.MemoryUsed;
            let memoryConsumed = report.MemoryConsumption;
            let memoryStart = report.MemoryStart;
            let memoryEnd = report.MemoryEnd;

            let soaCount = 0;
            let totalHttpRequests = report.Network.totalHttpRequests;

            if( memoryUsed === 0 || memoryConsumed === 0 ) {
                memoryStart = 'Not Supported';
                memoryEnd = 'Not Supported';
            } else {
                memoryStart = ( memoryStart / 1024000 ).toFixed( 0 ) + 'MB';
                memoryEnd = ( memoryEnd / 1024000 ).toFixed( 0 ) + 'MB';
            }

            soaCount = report.Network.SoaDetails.filter( function( networkCall ) {
                return networkCall.logCorrelationID !== 0;
            } ).length;

            self.addRow( ' Browser Type', 0 );
            self.addRow( report.BrowserType + ' ', 1 );

            self.addRow( ' ', 0 );
            self.addRow( ' ', 1 );

            self.addRow( ' Total Time', 0 );
            self.addRow( ( report.TTI / 1000 ).toFixed( 2 ) + 's ', 1 );


            // TODO: Get scripting time recording correctly again/not included with networking time.
            //self.addRow( ' Scripting Time', 0 );
            //self.addRow( ( report.scriptTime / 1000 ).toFixed( 1 ) + 's ', 1 );

            self.addRow( ' Total Network Time', 0 );
            self.addRow( ( report.totalNetworkTime / 1000 ).toFixed( 2 ) + 's ', 1 );

            self.addRow( ' ', 0 );
            self.addRow( ' ', 1 );

            self.addRow( ' Total SOA Requests', 0 );
            self.addRow( soaCount + ' ', 1 );
            self.addRow( ' Total HTTP Requests', 0 );
            self.addRow( totalHttpRequests + ' ', 1 );

            self.addRow( ' ', 0 );
            self.addRow( ' ', 1 );

            self.addRow( ' Memory At Start', 0 );
            self.addRow( memoryStart + ' ', 1 );

            self.addRow( ' Memory At Stop', 0 );
            self.addRow( memoryEnd + ' ', 1 );

            self.addRow( ' ', 0 );
            self.addRow( ' ', 1 );

            self.addRow( ' DOM Node Count', 0 );
            self.addRow( report.DOM.elemCount + ' ', 1 );

            self.addRow( ' DOM Tree Depth', 0 );
            self.addRow( report.DOM.DOMTreeDepth + ' ', 1 );

            self.addRow( ' ', 0 );
            self.addRow( ' ', 1 );

            self.addRow( ' Number of Unique Components', 0 );
            self.addRow( report.Component.uniqueComponents + ' ', 1 );

            self.addRow( ' Number of Component Renders', 0 );
            self.addRow( report.Component.componentRenders + ' ', 1 );

            // self.addRow( ' Estimated Render Time', 0 );
            // self.addRow( ( report.Component.componentsRenderTime / 1000 ).toFixed( 2 ) + 's ', 1 );

            self.buildSkeleton();

            return self;
        };
        return new Table( performanceObj ).buildSkeleton();
    };

    /**
     * @param {Object} performanceObject - Performance object to be formatted and sent to console
     */
    self.report = function( performanceObject ) {
        if( performanceObject.TTI < 50 ) {
            return;
        }
        let memoryStart = performanceObject.MemoryStart;
        let memoryEnd = performanceObject.MemoryEnd;
        if( performanceObject.MemoryUsed === 0 || performanceObject.MemoryConsumption === 0 ) {
            memoryStart = 'Not Supported';
            memoryEnd = 'Not Supported';
        } else {
            memoryStart = ( memoryStart / 1024 ).toFixed( 3 ) + 'kb';
            memoryEnd = ( memoryEnd / 1024 ).toFixed( 3 ) + 'kb';
        }
        performanceObject.Network[ '*TotalNetworkTime' ] = performanceObject.totalNetworkTime.toFixed( 3 ) + 'ms';

        console.log( _getFormattedPrint( performanceObject ) );
        console.log( 'PLStats Performance Telemetry Internal Debug: * = denotes sent to analytics if enabled', {
            '*TotalTime': performanceObject.TTI.toFixed( 3 ) + 'ms',
            '*ScriptingTime': performanceObject.scriptTime.toFixed( 3 ) + 'ms',
            '*Type': performanceObject.BrowserType,
            Title: performanceObject.title,
            DOM: {
                '*NodeCount': performanceObject.DOM.elemCount,
                TreeDepth: performanceObject.DOM.DOMTreeDepth,
                'CostlyWidgets( >= 50 watchers || >= 7 Descendant DOM Depth )': performanceObject.DOM.DOMCostlyWidgets
            },
            Network: performanceObject.Network,
            Memory: {
                '*MemoryAtStart': memoryStart,
                '*MemoryAtStop': memoryEnd
            },
            Components: {
                'Number of Unique Components': performanceObject.Component.uniqueComponents,
                'Number of Component Renders': performanceObject.Component.componentRenders,
                details: performanceObject.Component.componentDetails
            },
            LocationInformation: getLocationInformation(),
            _processorOverhead: {
                DOM: performanceObject.DOMProcessorOverhead.toFixed( 3 ) + 'ms',
                Memory: performanceObject.MemProcessorOverhead.toFixed( 3 ) + 'ms',
                NETWORK: performanceObject.XHRProcessorOverhead.toFixed( 3 ) + 'ms',
                SCRIPT: performanceObject.JsProcessorOverhead.toFixed( 3 ) + 'ms',
                COMPONENTS: performanceObject.ComponentOverhead.toFixed( 3 ) + 'ms'
            }
        } );
    };
    return self;
}

export default SPLMStatsDebugReporter;

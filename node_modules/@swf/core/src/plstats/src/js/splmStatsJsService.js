// Copyright (c) 2021 Siemens
/* eslint-env es6 */

/**
 * This utility module provides low-level support for JS Injection.
 *
 * NOTE: better to install it in bootstrap step
 *
 * @module js/splmStatsJsService
 */

let _procs = [];

let _enabled = false;

let _setTimeout = null;

let _appendChildFn = null;

/**
 * install JS service
 */
export const install = function() {
    if( !_enabled ) {
        _setTimeout = window.setTimeout;
        window.setTimeout = function() {
            const _realFunc = arguments[ 0 ];
            arguments[ 0 ] = wrapFunction( null, _realFunc );
            return _setTimeout.apply( this, arguments );
        };

        // try to fix webpack script load issue
        _appendChildFn = document.head.appendChild;
        document.head.appendChild = ( ...args ) => {
            if( enabled() && _procs.length > 0 ) {
                const elem = args[ 0 ];
                // restirct it to only onload script exist
                if( elem.tagName === 'SCRIPT' && elem.src && elem.onload ) {
                    // wrap onLoad script
                    const _onloadFn = elem.onload;
                    const _onerrorFn = elem.onerror || ( () => {} );

                    elem.onload = ( ...args ) => {
                        if( enabled() && _procs.length > 0 ) {
                            const endTime = window.performance.now();
                            // console.log( `Done: ${elem.src}` );
                            const res = _onloadFn.apply( null, args );
                            try {
                                _procs.forEach( function( proc ) {
                                    proc.done( {
                                        name: name,
                                        startTime: endTime,
                                        endTime: endTime
                                    } );
                                } );
                            } catch ( ex ) {
                                // TODO: Do nothing for now, will fill it up before EOD 1905
                            }
                            return res;
                        }
                        return _onloadFn.apply( null, args );
                    };

                    elem.onerror = ( ...args ) => {
                        if( enabled() && _procs.length > 0 ) {
                            const endTime = window.performance.now();
                            // console.log( `Done: ${elem.src}` );
                            const res = _onerrorFn.apply( null, args );
                            try {
                                _procs.forEach( function( proc ) {
                                    proc.done( {
                                        name: name,
                                        startTime: endTime,
                                        endTime: endTime
                                    } );
                                } );
                            } catch ( ex ) {
                                // TODO: Do nothing for now, will fill it up before EOD 1905
                            }
                            return res;
                        }
                        return _onerrorFn.apply( null, args );
                    };

                    try {
                        _procs.forEach( function( proc ) {
                            proc.start();
                        } );
                    } catch ( ex ) {
                        // TODO: Do nothing for now, will fill it up before EOD 1905
                    }

                    return _appendChildFn.apply( document.head, args );
                }
            }
            return _appendChildFn.apply( document.head, args );
        };

        _enabled = true;
    }
};

/**
 * Wrapping JS function with plStats injection
 *
 * @param {Object} thisArg - Explicit passing of the "this" object for whatever function we are replacing
 * @param {Function} func - Function we are replacing
 * @param {String} name - the name (if any) of the function/object we are replacing
 *
 * @returns {Object} result - The result of whatever function we are replacing. Must be careful to return this value for functions (not setTimeout) that
 * are expecting a return value
 */
export const wrapFunction = function( thisArg, func, name ) {
    return function _splmStatsJsWrapperFunction() {
        if( !func || !func.apply ) {
            return undefined;
        }

        if( enabled() && _procs.length > 0 ) {
            const startTime = window.performance.now();
            try {
                _procs.forEach( function( proc ) {
                    proc.start();
                } );
            } catch ( ex ) {
                // TODO: Do nothing for now, will fill it up before EOD 1905
            }
            const res = func.apply( thisArg, arguments );
            const endTime = window.performance.now();

            try {
                _procs.forEach( function( proc ) {
                    proc.done( {
                        name: name,
                        startTime: startTime,
                        endTime: endTime
                    } );
                } );
            } catch ( ex ) {
                // TODO: Do nothing for now, will fill it up before EOD 1905
            }

            return res;
        }
        return func.apply( thisArg, arguments );
    };
};

/**
 * @returns {Boolean} Has JSService already underwent wrapping? If so we dont want to do it again
 */
export const enabled = function() {
    return _enabled;
};

/**
 * Angular caches setTimeout after it is initialized so this doesn't do anything
 */
export const uninstall = function() {
    if( _enabled ) {
        window.setTimeout = _setTimeout;
        document.head.appendChild = _appendChildFn;
        _setTimeout = null;
        _enabled = false;
    }
};

export const addProc = function( proc ) {
    _procs.push( proc );
};

export const removeProc = function( proc ) {
    _procs = _procs.filter( procObj => proc !== procObj );
};

export default {
    install,
    wrapFunction,
    enabled,
    uninstall,
    addProc,
    removeProc
};

// Copyright (c) 2020 Siemens
/* eslint-env es6 */

/**
 * JavaScript Processor to get total scripting time
 *
 * @module js/splmStatsJsProcessor
 */
import { addProc, removeProc } from 'js/splmStatsJsService';

/**
 * JavaScript Processor to get total scripting time
 *
 * @class SPLMStatsJsProcessor
 */
function SPLMStatsJsProcessor() {
    let self = this;

    let _processingTime = 0;
    let _startProcessorTime = 0;
    let _endProcessorTime = 0;

    let _scriptJournals = [];

    /**
     * @returns {Float} Total scripting time for angular events
     */
    const _processScriptTime = function() {
        _startProcessorTime = window.performance.now();

        let totalTime = 0;
        _scriptJournals.forEach( function( obj ) {
            totalTime += obj.endTime - obj.startTime;
        } );

        _endProcessorTime = window.performance.now();
        _processingTime += _endProcessorTime - _startProcessorTime;
        return totalTime;
    };

    /**
     *
     * @param {Object} data - startTime, endTime, name of process to track scripting time
     */
    let _proc = {
        start: () => {},
        done: function( data ) {
            _startProcessorTime = window.performance.now();
            _scriptJournals.push( data );
            _endProcessorTime = window.performance.now();
            _processingTime += _endProcessorTime - _startProcessorTime;
        }
    };

    const _reset = function() {
        _scriptJournals = [];
    };

    self.start = function() {
        _startProcessorTime = window.performance.now();
        _reset();
        addProc( _proc );
        _endProcessorTime = window.performance.now();
        _processingTime += _endProcessorTime - _startProcessorTime;
    };

    self.stop = function() {
        _startProcessorTime = window.performance.now();
        removeProc( _proc );
        _endProcessorTime = window.performance.now();
        _processingTime += _endProcessorTime - _startProcessorTime;
    };

    self.getProcessingTime = function() {
        const _time = _processingTime;
        _processingTime = 0;
        return { JsProcessorOverhead: _time };
    };
    /**
     * @returns {Object} Object containg Total Scripting Time
     */
    self.getMetrics = function() {
        return {
            scriptTime: _processScriptTime()
        };
    };

    return self;
}

export default SPLMStatsJsProcessor;

import AwTextbox from 'viewmodel/AwTextboxViewModel';
import AwList from 'viewmodel/AwListViewModel';
import _ from 'lodash';

export const awListFilterRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        grids,
        formProp,
        messages,
        ...otherProps
    } = props;
    const { dataprovider, fixedCellHeight, isGroupList, doubleClickAction, hasFloatingCellCommands, prop, children, itemOptions, showDropArea, dndHandler, commandContext } = otherProps;
    const { data, dispatch } = viewModel;

    let listProps = { dataprovider, itemOptions, commandContext };
    if( fixedCellHeight && !isGroupList ) {
        listProps.fixedCellHeight = true;
    } else if( !fixedCellHeight && !isGroupList ) {
        listProps.hasFloatingCellCommands = true;
    } else {
        listProps.isGroupList = true;
        listProps.hasFloatingCellCommands = true;
    }

    listProps.showDropArea = showDropArea;
    listProps.dndHandler = dndHandler;
    if( doubleClickAction ) {
        listProps.doubleClickAction = doubleClickAction;
    }
    // Per Ux standard, ensure place holder text if not already
    // clear children to prevent future AwTextbox pollution
    let textBoxProps = { ...prop || otherProps, children: null };
    // don't show a label on filter box
    textBoxProps.fielddata.propertyDisplayName = '';
    if( !textBoxProps.placeholder ) {
        textBoxProps.placeholder = i18n.FILTER_TEXT;
    }

    // Set timer delay of 1.5 seconds before initiating dataprovider.
    const onChange = ( newValue, oldValue, immediate = false ) => {
        if( !_.isNull( data._timerid ) ) {
            clearTimeout( data._timerid );
        }

        // trigger a immediate filter for enter case
        if( immediate ) {
            dataprovider.resetDataProvider();
            return;
        }

        // else trigger a delay filter
        if( newValue !== oldValue ) {
            let timerid = setTimeout( () => {
                dataprovider.resetDataProvider();
            }, 1500 );

            // update previous timerid
            dispatch( { path: 'data._timerid', value: timerid } );
        }
    };

    return (
        // use Fragment
        <>
            <AwTextbox {...textBoxProps} className='sw-noDirtyStyle' onSwChange={onChange}></AwTextbox>
            <div className='sw-row sw-listAfterFilter'>
                <AwList {...listProps}>{children}</AwList>
            </div>
        </>
    );
};

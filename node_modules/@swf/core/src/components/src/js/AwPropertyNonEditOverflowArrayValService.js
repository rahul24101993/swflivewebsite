import { noop } from 'js/declUtils';
import AwIcon from 'viewmodel/AwIconViewModel';
import AwStateService from 'js/awStateService';
import { getCompClass } from 'js/componentUtils';

const renderDisplayValList = ( displayNode, index, prop, dispatcher, fitIndex ) => {
    return (
        <li className='aw-jswidgets-arrayValueOverflowCellListItem' key={index}>
            <div className='aw-widgets-propertyNonEditValue'>
                <a href={noop}
                    className='aw-widgets-propertyValueLink'
                    onClick={()=>{ openObjectLinkPage( index, prop, dispatcher ); }}
                >
                    {displayNode.displayValue}
                </a>
                {
                    index < fitIndex - 1 &&
                        <div>,&nbsp;</div>
                }
            </div>
        </li>
    );
};

const renderObjectLinkFromOverflowList = ( displayNode, index, prop, dispatcher ) => {
    return (
        <li className='aw-widgets-cellListItem aw-widgets-cellTop' key={index}>
            <a href={noop}
                className='aw-jswidgets-arrayValueOverflowCellListItem'
                onClick={()=>{ openObjectLinkPage( index, prop, dispatcher ); }}
            >
                {displayNode.displayValue + ',&nbsp;'}
            </a>
        </li>
    );
};

export const awPropertyNonEditOverflowArrayValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    let { dispatch } = viewModel;
    let availableWidth = '100%';
    let stringValue = '';
    let overflowIndex = 0;
    let fitIndex = prop.fielddata.displayValsModel.length || 0;
    let iconClass = viewModel.isClicked ? 'aw-jswidget-controlArrow aw-jswidget-controlArrowRotateRight' : 'aw-jswidget-controlArrow';
    let displayValueClass = viewModel.isClicked ? 'aw-layout-overflowPopupCellist aw-layout-popup afx-content-background aw-base-scrollPanel' : 'hidden';
    return (
        <div>
            <div className={getCompClass( 'aw-layout-fxbreadCrumbs', props )}>
                <ul className='aw-jswidgets-arrayNonEditValueOverflowCellList sw-property-val'>
                    {
                        prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.map( ( displayNode, index ) =>
                            renderDisplayValList( displayNode, index, prop, dispatch, fitIndex )
                        )
                    }
                </ul>
                {
                    viewModel.isOverflow &&
                <AwIcon onClick={( e )=>{ openOverflowPopup( e, viewModel ); }} className={iconClass} iconId='miscChevronRight'></AwIcon>
                }
                {
                    prop.type !== 'OBJECT' && prop.type !== 'OBJECTARRAY' && stringValue !== '' &&
                <div className='aw-widgets-propertyNonEditValue' style={{ width: availableWidth }}>
                    <div className='aw-jswidget-textOverflow' title={stringValue}>
                        {stringValue}
                    </div>
                </div>
                }
            </div>
            <div className={displayValueClass} style={{ left: viewModel.leftPosition }}>
                <div className='aw-widgets-cellListWidgetContainer'>
                    <ul className='aw-widgets-cellListWidget'>
                        {
                            prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.map( ( displayNode, index ) => {
                                if( index >= overflowIndex ) {
                                    return renderObjectLinkFromOverflowList( displayNode, index, prop, dispatch );
                                }
                            } )
                        }
                    </ul>
                </div>
            </div>

        </div>
    );
};

const openObjectLinkPage = ( index, prop, dispatcher ) => {
    let uiProperty = { ...prop };
    let uid = uiProperty.value[ index ];
    var toParams = {
        uid: uid
    };
    var options = {
        inherit: false
    };

    AwStateService.instance.go( 'com_siemens_splm_clientfx_tcui_xrt_showObject', toParams, options );
    dispatcher( { path: 'data.isClicked', value: false } );
};

const openOverflowPopup = ( event, viewModel ) => {
    event.stopPropagation();
    let data = { ...viewModel.getData() };
    data.leftPosition = event.clientX;
    data.isClicked = !data.isClicked;
    viewModel.dispatch( { path: 'data', value: { ...data } } );
};

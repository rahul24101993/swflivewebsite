import { noop } from 'js/declUtils';
import AwIcon from 'viewmodel/AwIconViewModel';
import wcagSvc from 'js/wcagService';
import eventBus from 'js/eventBus';

/**
 * render function for AwSearchResultFilter
 * In angular days, the add panel had recipes while the global search had breadcrumbs.
 * In BA, they all use the same breadcrumbs. So this component is not used anywhere today. Removing named event is not required.
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awSearchResultFilterRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    let showObjectRecipes = viewModel.showObjectRecipes;

    const openObjectRecipesKeyPress = ( event ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            openObjectRecipes( viewModel );
        }
    };

    const removeObjectSet = ( event, isCategory, filterValue ) => {
        let context = {
            prop: { ...prop },
            filterValue: filterValue
        };
        eventBus.publish( 'awSearchTab.filtersRemoved', context );
    };

    const removeBreadcrumbAddPanelKeyPress = ( event ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            removeObjectSet( event, true, null );
        }
    };

    const clearBreadcrumbAddPanelKeyPress = ( event, filterVal ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            removeObjectSet( event, false, filterVal );
        }
    };

    const getFilteredValues = ( filterVal ) => {
        return (
            <div>
                <div className='aw-tcWidgets-inContextSearchRecipeLabelValueContainer' title={filterVal.name}>
                    <div className='aw-tcWidgets-inContextSearchRecipeLabel inactive invisible'>{prop.searchResultCategory}: </div>
                    <div className='aw-tcWidgets-inContextSearchRecipeValue'>{filterVal.name}</div>
                </div>
                <AwIcon iconId='cmdDelete' onClick={( e )=>{ removeObjectSet( e, false, filterVal ); }} className='aw-commands-commandIconButton aw-aria-border' onKeyDown={( e )=>clearBreadcrumbAddPanelKeyPress( e, filterVal )} title={i18n.REMOVE_BUTTON_TITLE} tabindex='0'></AwIcon>
            </div>
        );
    };

    return (
        <div className='aw-tcWidgets-inContextSearchRecipeContainer' title={prop.searchResultCategory}>
            <div className='aw-uiWidgets-inContextSearchRecipeContent'>
                <div className='aw-tcWidgets-inContextSearchRecipeLabelValueContainer'>
                    <div className='aw-tcWidgets-inContextSearchRecipeLabel inactive'>{prop.searchResultCategory}:</div>
                    {
                        prop.filterValues.length === 1 &&
                        <div className='aw-tcWidgets-inContextSearchRecipeValue' title={prop.filterValues[0].name}>{prop.filterValues[0].name}</div>
                    }
                    {
                        prop.filterValues.length > 1 &&
                        <a
                            className='aw-tcWidgets-inContextSearchRecipeLink aw-aria-border aw-aria-border'
                            tabIndex='0'
                            href={noop}
                            onClick={()=> openObjectRecipes( viewModel )}
                            onKeyDown={( e )=>openObjectRecipesKeyPress( e )}>
                            {prop.filterValues.length} Selected
                        </a>
                    }
                </div>
                {
                    prop.filterValues.length !== 0 &&
                    <AwIcon onClick={( e )=>{ removeObjectSet( e, true, null ); }} className='aw-commands-commandIconButton aw-aria-border' onKeyDown={( e )=>removeBreadcrumbAddPanelKeyPress( e )} iconId='cmdDelete' title={i18n.REMOVE_BUTTON_TITLE} tabindex='0'></AwIcon>
                }
            </div>
            {
                showObjectRecipes &&  prop.filterValues.length > 1 &&
                <div>
                    {
                        prop.filterValues.map( ( filterVal )=>getFilteredValues( filterVal ) )
                    }
                </div>

            }
        </div>
    );
};

const openObjectRecipes = ( viewModel ) => {
    let data = { ...viewModel.getData() };
    data.showObjectRecipes = !data.showObjectRecipes;
    viewModel.dispatch( { path: 'data,', value: { ...data } } );
};

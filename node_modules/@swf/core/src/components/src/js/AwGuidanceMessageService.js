import AwButton from 'viewmodel/AwButtonViewModel';
import AwIcon from 'viewmodel/AwIconViewModel';
import AwLink from 'viewmodel/AwLinkViewModel';
import { convertToHtml } from 'js/reactHelper';

const GUIDANCE_MSG_STYLES = {
    ERROR: 'guidance-container-type-error',
    WARNING: 'guidance-container-type-warning',
    INFO: 'guidance-container-type-information',
    SUCCESS: 'guidance-container-type-success'
};

const GUIDANCE_MSG_ICONS = {
    ERROR: 'indicatorCancelled',
    WARNING: 'indicatorWarning',
    INFO: 'indicatorInfo',
    SUCCESS: 'indicatorCompleted'
};

const GUIDANCE_MSG_TYPES = {
    INFO: 'generalInfo',
    WARNING: 'warningInfo',
    ERROR: 'errorInfo',
    SUCCESS: 'successInfo'
};

const applyLinkParams = ( messageString, messageParams ) => {
    if( !messageString ) {
        return [];
    }

    const outputString = [];
    const msgParts = messageString.split( /(\{@msgTxtLink[0-9]*\})/g );

    for( const msgStr of msgParts ) {
        if( /\{@msgTxtLink[0-9]*\}/g.test( msgStr ) ) {
            const index = msgStr.split( '{@msgTxtLink' ).pop().split( '}' )[ 0 ];
            outputString.push( <AwLink {...messageParams[ index ].prop} action={messageParams[ index ].action}></AwLink> );
            continue;
        } else {
            outputString.push( convertToHtml( `<span>${msgStr}</span>` ) );
        }
    }

    return outputString;
};

export const closeGuidanceMessage = () => {
    return true;
};

export const awGuidanceMessageRenderFunction = ( props ) => {
    const { i18n, actions, viewModel } = props;
    const { data } = viewModel;
    const { message, icon } = props;
    if( message && !data.hideMessage ) {
        const guidanceMsgDef = message.messageDefn;
        const guidanceMessageText = applyLinkParams( message.localizedMessage, guidanceMsgDef && guidanceMsgDef.messageTextLinks );
        const messageType = guidanceMsgDef && guidanceMsgDef.messageType.toUpperCase();
        let bannerStyleClass = props.bannerStyle !== 'false' ? 'guidance-container-banner' : 'guidance-container-fullWidth';
        const iconId = icon ? icon : GUIDANCE_MSG_ICONS[ messageType ];
        const messageTypeGuidance = i18n[ GUIDANCE_MSG_TYPES[ messageType ] ];
        const guidanceMessageClass = GUIDANCE_MSG_STYLES[ messageType ] + ' ' + bannerStyleClass;
        const isCloseButtonHidden = props.closable && ( /^false$/i ).test( props.closable ) === true;
        return (
            <div className={'sw-guidanceMessage' + ' ' + guidanceMessageClass}>
                <div className='sw-guidanceMsg-container'>
                    <div className='sw-guidanceMsg-textContainer'>
                        {props.showIcon !== 'false' ? <AwIcon className='sw-guidanceMsg-typeIndicator' iconId={iconId}></AwIcon> : ''}
                        <div className='sw-guidanceMsg-text'>
                            {props.showType !== 'false' ?
                                <span className='sw-guidanceMsg-guideText'>{messageTypeGuidance}&nbsp;-&nbsp;</span> : ''}
                            {guidanceMessageText}
                        </div>
                    </div>
                    <div className='flex-shrink'>
                        {props.children}
                    </div>
                </div>
                {!isCloseButtonHidden ? <AwButton aria-label={i18n.closeMessage} className='sw-guidanceMsg-closeButton' iconId='cmdClosePanel' action={actions.closeMessage}></AwButton> : ''}
            </div>
        );
    }
};

import AwInclude from 'viewmodel/AwIncludeViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import parsingUtils from 'js/parsingUtils';
import _ from 'lodash';
import utils from 'js/popupUtils';
import Debug from 'debug';
const trace = new Debug( 'AwExtendedTooltip' );

const isJSONObject = ( jsonString ) => {
    try {
        JSON.parse( jsonString );
        if( typeof jsonString === 'string' && jsonString.length === 0 ) {
            return false;
        }
    } catch ( e ) {
        return false;
    }
    return true;
};

export const awExtendedTooltipRenderFunction = ( props ) => {
    let { extendedTooltipPopup } = props.actions;
    let { extTooltipData, extendedTooltip, extendedTooltipContext, reference } = props;

    const initializer = () => {
        trace( 'initialize tooltip with props: ', props );
        // set default view
        extendedTooltip = extendedTooltip || 'ExtendedTooltipDefault';
        if( _.isString( extendedTooltip ) && extendedTooltip.indexOf( '.' ) === -1 && !isJSONObject( extendedTooltip ) ) {
            extendedTooltip = { view: extendedTooltip };
        } else if( _.isString( extendedTooltip ) && extendedTooltip.indexOf( '.' ) > 0 ) {
            let key = extendedTooltip.split( '.' )[ 1 ];
            extendedTooltip = _.get( extTooltipData, key ).view ? _.get( extTooltipData, key ) : null;
        }

        if( extendedTooltip.extendedTooltipContent ) {
            let content = extendedTooltip.extendedTooltipContent;
            if( extTooltipData && _.startsWith( content, '{{' ) ) {
                let viewModelProp = parsingUtils.getStringBetweenDoubleMustaches( content );
                content = _.get( { data: extTooltipData }, viewModelProp );
            }
            extendedTooltip.content = content;
        }
        // init subPanelContext, subPanelContext always should be an object.
        // there are cases where application(ACE) pass in string values due to wrong usage.
        if( !extendedTooltip.subPanelContext && extendedTooltipContext ) {
            // retrieve context by get, so that we can support any level path access: eg: data.tooltips.tooltip1
            let contextValue = extendedTooltipContext;
            if( typeof contextValue === 'object' ) {
                // extendedTooltip.subPanelContext = contextValue || {};
            }
        }
        // return Promise.resolve();
    };

    // modify ref belongs to side effect, should wrap with useEffect
    // //override placement based on dynamic configuration
    // extendedTooltipPopup.reference.current = prop.reference.current;
    // extendedTooltipPopup.userOptions.current = extendedTooltipOptions;

    const getContent = () => {
        if( reference.current !== null ) {
            utils.removeNativeTitle( reference.current );
        }
        extendedTooltipPopup.options && Object.assign( extendedTooltipPopup.options, utils.tooltipAdapteOption( extendedTooltipPopup.options, reference.current ) );
        if( !extendedTooltipPopup.options.placement ) {
            extendedTooltipPopup.options.placement = 'left';
        }
        initializer();
        const { view, content } = extendedTooltip;
        let result = content;
        if( view ) { result = <AwInclude name={view} subPanelContext={extendedTooltipContext}/>; }
        return <AwPopup {...extendedTooltipPopup.options}>
            <div className={ `sw-column aw-popup-tooltipContainer ${ !view ? 'font-bold new-line' : '' }` }> { result } </div>
        </AwPopup>;
    };

    return extendedTooltipPopup.open && getContent();
};

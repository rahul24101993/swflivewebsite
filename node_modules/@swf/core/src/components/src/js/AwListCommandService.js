import AwIcon from 'viewmodel/AwIconViewModel';
import conditionService from 'js/conditionService';
import AwExtendedTooltip from 'viewmodel/AwExtendedTooltipViewModel';
import wcagSvc from 'js/wcagService';
import { noop } from 'js/declUtils';

const setDisplayOption = ( displayOption ) => {
    let options = {};
    switch ( displayOption ) {
        case 'ON_HOVER':
            options.showOnHover = true;
            break;
        case 'ON_HOVER_AND_SELECTION':
            options.showOnHover = true;
            options.showOnSelection = true;
            break;
        case 'ON_SELECTION':
            options.showOnSelection = true;
            break;
        case 'ALWAYS':
            options.showAlways = true;
            break;
        default:
            options.showOnHover = true;
            options.showOnSelection = true;
            break;
    }
    return options;
};

const setPosition = ( position ) => {
    // unify
    position = ( position || 'TOP_RIGHT' ).toLowerCase().replace( /_(.)/, ( match, key1 ) => key1.toUpperCase() );
    let input = 'topRight';
    if( [ 'topRight', 'middleRight', 'bottomRight',
        'topLeft', 'middleLeft', 'bottomLeft'
    ].indexOf( position ) !== -1 ) {
        input = position;
    }
    let firstChar = input[ 0 ];
    input = input.replace( firstChar, firstChar.toUpperCase() );
    return `aw-commands-cellCommand${input}`;
};

export const awListCommandRenderFunction = ( props ) => {
    const { viewModel, ctx, elementRefList, command, vmo, itemOptions } = props;
    let cmdElement = elementRefList.get( 'cmdElement' );
    let { data } = viewModel;
    let commandContext = { vmo };
    let $scope = { command, vmo, parameters: commandContext };

    var position = null;
    var displayOption = null;
    if( command && vmo ) {
        $scope.cellCommandVisiblilty = true;
        position = $scope.command.position;
        displayOption = $scope.command.displayOption;
        if( command.handler && command.handler.setCommandContext ) {
            command.handler.setCommandContext( $scope.vmo, $scope );
        }

        if( command.action && command.condition ) {
            const evaluationEnvironment = { ctx, data };
            $scope.cellCommandVisiblilty = conditionService.evaluateCondition( data, command.condition, evaluationEnvironment );
        }
    }
    $scope.positionClass = setPosition( position );
    Object.assign( $scope, setDisplayOption( displayOption ) );

    const executeCommand = ( event ) => {
        event.stopPropagation();

        if( command.handler && command.handler.execute ) {
            command.handler.execute( vmo, $scope );
        } else if( command.action ) {
            const dataCtxNode = {
                commandContext,
                data: viewModel,
                ctx: ctx,
                ports: viewModel.ports
            };
            if( itemOptions.actions && itemOptions.actions[ command.action ] ) {
                itemOptions.actions[ command.action ]( null, { vmo } );
            }
        }
    };

    let getClassName = () => {
        let result = `${$scope.positionClass} `;
        if( !$scope.cellCommandVisiblilty || $scope.showOnSelection && !vmo.selected ) {
            result += 'hiddenCell ';
        }
        if( $scope.cellCommandVisiblilty && $scope.showOnHover && !vmo.selected ) {
            result += 'aw-widgets-cellListCellCommandHover ';
        }
        if( $scope.showAlways || $scope.showOnSelection && vmo.selected ) {
            result += 'visible ';
        }
        return result.trim();
    };

    const handleKeyDown = ( event ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            executeCommand( event );
        }
    };

    return (
        <a href={noop} role='button' tabIndex='0' onClick={executeCommand} onKeyDown={( e )=> handleKeyDown( e )} className={`sw-aria-border aw-commands-cellCommandCommon ${getClassName()}`}
            title={command.title && command.title.value ? command.title.value : command.title}
            aria-label={command.title && command.title.value ? command.title.value : command.title}
            ref={cmdElement}>
            <div className='aw-commands-svg'>
                <AwIcon iconId={command.iconId}></AwIcon>
            </div>

            <AwExtendedTooltip
                reference={cmdElement}
                extendedTooltipOptions={null}
                extendedTooltipContext={command}
                extendedTooltip={null} >
            </AwExtendedTooltip>
        </a>
    );
};

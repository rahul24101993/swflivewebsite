// Copyright (c) 2021 Siemens
import AwIconButton from 'viewmodel/AwIconButtonViewModel';
import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';
import { getValClass } from 'js/componentUtils';
import commandPanelService from 'js/commandPanel.service';

/**
 * render function for AwList
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awObjectValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    const { hasLov, isArray } = prop.fielddata;
    if( hasLov ) {
        return <AwPropertyLovVal {...prop} ></AwPropertyLovVal>;
    }
    const uiValue = prop.fielddata.uiValue;
    if( uiValue === null || uiValue === undefined || uiValue.length === 0 || isArray ) {
        return (
            // if no uiValue, show add button
            <div className = 'sw-fit-content' >
                <AwIconButton command={fields.addObject} className={ getValClass( prop )}></AwIconButton>
            </div>

        );
    }
    return (
        <span className='aw-layout-flexRow align-center aw-jswidgets-objectLinkContainer'>
            <span className = 'aw-jswidgets-objectLink' >{uiValue}</span>
            <AwIconButton command={fields.removeObject} className={ getValClass( prop )}></AwIconButton>
        </span>
    );
};

export const addObjectHandler = ( props ) => {
    const { vmo, name, activeState } = props;
    let uiProperty;
    if( vmo ) {
        uiProperty = vmo.props[ name ];
    } else {
        uiProperty = props;
    }
    if( uiProperty.propApi && uiProperty.propApi.showAddObject ) {
        uiProperty.propApi.showAddObject( uiProperty.propertyName );
    } else {
        let filterType;
        if( uiProperty.propertyDescriptor &&
            uiProperty.propertyDescriptor.constantsMap &&
            uiProperty.propertyDescriptor.constantsMap.ReferencedTypeName ) {
            filterType = uiProperty.referenceTypeName !== undefined && uiProperty.referenceTypeName.length > 0 ? uiProperty.referenceTypeName : uiProperty.propertyDescriptor.constantsMap
                .ReferencedTypeName;
        }
        let searchFilter;
        if( props && props.parameterMap ) {
            searchFilter = props.parameterMap.searchFilter;
        }
        let context = {
            title: uiProperty.propertyDisplayName,
            recreatePanel: true,
            supportGoBack: true,
            isolateMode: true,
            viewModelProperty: {
                onChange: props.onChange
            },
            addTypeRef: true,
            filterTypes: filterType,
            searchFilter: searchFilter,
            vmo: vmo
        };
        // add reference title: Add <reference property>
        context.title = uiProperty.propertyDisplayName;

        if( activeState && activeState.activeView ) {
            let newActiveState = { ...activeState.getValue() };
            newActiveState.activeView = 'AddReferenceSub';
            newActiveState.context = context;
            activeState.update( newActiveState );
        } else {
            // Reference view can be leverage to pass a custom component
            if( props.referenceView ) {
                commandPanelService.activateCommandPanel( props.referenceView, 'aw_toolsAndInfo', context );
            } else {
                commandPanelService.activateCommandPanel( 'Awp0AddReference', 'aw_toolsAndInfo', context );
            }
        }
    }
};

export const removeObjectHandler = ( props ) => {
    event.preventDefault();

    props.onChange( {
        target: {
            value: {
                uid: ''
            }
        }
    } );
};

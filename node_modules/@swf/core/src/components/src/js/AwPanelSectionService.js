// Copyright (c) 2021 Siemens
import _ from 'lodash';
import AwCommandBar from 'viewmodel/AwCommandBarViewModel';
import eventBus from 'js/eventBus';
import { includeComponent } from 'js/moduleLoader';

export const awPanelSectionRenderFunction = ( props ) => {
    let { anchor, caption, titlekey, name, collapsed, toggleAction, children, viewModel, ctx, includeComponentName } = props;
    const { data, dispatch } = viewModel;

    // section is expanded by default
    let initiallyCollapsed = false;
    let isCollapsible = collapsed !== 'disabled';

    // collapsed var is the initial state from props and is a string ('true'/'false'/undefined/'disabled')
    if( collapsed === true || collapsed === 'true' ) {
        initiallyCollapsed = true;
    }

    const onToggle = ( e ) => {
        // don't bubble event; stops propagation to parent in nested section case...
        e.stopPropagation();

        // get state from dom
        let collapsedState = e.target.open !== true;

        if( !data._toggled ) {
            // trip gate on first expand
            dispatch( { path: 'data', value: { _toggled: true } } );

            // smother event on the initial auto-expand from browser
            if( !initiallyCollapsed ) {
                return true;
            }
        }

        const publishData = {
            isCollapsed: collapsedState,
            name: name,
            caption: caption
        };

        // publish event
        if( props.isCommandPanelSection ) {
            eventBus.publish( 'awCommandPanelSection.collapse', publishData );
        } else {
            eventBus.publish( 'awPanelSection.collapse', publishData );
        }

        if( toggleAction ) {
            // defer is added to let the render cycle complete
            _.defer( function() {
                toggleAction( publishData );
            } );
        }
    };

    const getSummaryClass = () => {
        let classVal = 'sw-column sw-panel-summary';
        return isCollapsible ? classVal + ' aw-layout-collapsiblePanelSectionTitle collapsible' : classVal + ' notCollapsible';
    };

    const getCommandbar = ( withLabel = false ) => {
        if( !anchor ) { return null; }
        if( Boolean( ctx.toggleLabel ) === withLabel ) {
            if( withLabel ) {
                return <div className='sw-row'><AwCommandBar className='aw-layout-workareaCommandbar' anchor={ anchor } alignment='HORIZONTAL' context={ props.context }></AwCommandBar></div>;
            }
            return <div className='sw-column flex-grow align-right sw-panel-bar'><AwCommandBar className='aw-layout-workareaCommandbar' anchor={ anchor } alignment='HORIZONTAL' context={ props.context }></AwCommandBar></div>;
        }
        return null;
    };

    const getIncludeComponent = () => {
        if( includeComponentName ) {
            return <div className='sw-column flex-grow align-right sw-panel-bar align-self-center'> {includeComponent( includeComponentName, { subPanelContext : props.context } )} </div>;
        }
        return null;
    };

    // getContents should not get called until section is expanded
    const getContents = () => {
        // TODO: ssu remove sw-section after stepDef update
        return <div className='sw-section sw-section-content sw-column'>{ children }</div>;
    };

    return (
        <details
            // TODO: rm aw-panelSection class
            className='sw-section aw-panelSection flex-shrink align-self-stretch'
            caption={caption}
            titleKey={titlekey}
            open={!initiallyCollapsed}
            onToggle={onToggle}>
            { caption && <summary
                role='button'
                tabIndex={isCollapsible ? 0 : -1}
                className={getSummaryClass()}>
                <div className='sw-row sw-sectionTitleContainer'>
                    <div className='sw-column sw-sectionTitle' title={caption}>{caption}</div>
                    { getCommandbar() }
                    { getIncludeComponent() }
                </div>
                {caption && getCommandbar( true )}
            </summary> }
            { !caption && <summary className='noSummary'></summary> }
            { !initiallyCollapsed || data._toggled ? getContents() : '' }
        </details>
    );
};

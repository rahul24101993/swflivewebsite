// Copyright (c) 2021 Siemens
/* eslint-disable indent */
import AwTextareaVal from 'viewmodel/AwTextareaValViewModel';
import AwIntegerVal from 'viewmodel/AwIntegerValViewModel';
import AwDateTimeVal from 'viewmodel/AwDateTimeValViewModel';
import AwDoubleVal from 'viewmodel/AwDoubleValViewModel';
import AwPropertyStringVal from 'viewmodel/AwPropertyStringValViewModel';
import AwToggleButtonVal from 'viewmodel/AwToggleButtonValViewModel';
import AwRadioButtonVal from 'viewmodel/AwRadiobuttonValViewModel';
import AwCheckBoxVal from 'viewmodel/AwCheckboxValViewModel';
import AwPropertyObjectVal from 'viewmodel/AwPropertyObjectValViewModel';
import { getValClass } from 'js/componentUtils';

const renderWidgetBasedOnTypex = prop => {
    switch ( prop.typex ) {
        case 'DOUBLEARRAY':
            return <AwDoubleVal {...prop} className={ getValClass( prop ) }/>;
        case 'DATEARRAY':
            return <AwDateTimeVal {...prop} className={ getValClass( prop ) }/>;
        case 'INTEGERARRAY':
            return <AwIntegerVal {...prop} className={ getValClass( prop ) }/>;
        case 'STRINGARRAY':
            return <AwPropertyStringVal {...prop} className={ getValClass( prop ) }/>;
        case 'BOOLEANARRAY':
            if( prop.fielddata.renderingHint === 'radiobutton' ) {
                return <AwRadioButtonVal prop={prop} className={ getValClass( prop ) }/>;
            } else if( prop.fielddata.renderingHint === 'togglebutton' ) {
                return <AwToggleButtonVal {...prop} className={ getValClass( prop ) }/>;
            }
            return <AwCheckBoxVal className={getValClass( prop )} {...prop}></AwCheckBoxVal>;
        case 'OBJECTARRAY':
            return <AwPropertyObjectVal {...prop} className={ getValClass( prop ) }/>;
        default:
            return <AwTextareaVal {...prop} className={ getValClass( prop ) }/>;
    }
};

export const awPropertyArrayEditValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;
    return renderWidgetBasedOnTypex( prop );
};

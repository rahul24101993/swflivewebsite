// Copyright (c) 2021 Siemens
import AwDateVal from 'viewmodel/AwDateValViewModel';
import AwTimeVal from 'viewmodel/AwTimeValViewModel';
import { getValClass } from 'js/componentUtils';
import AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';
import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';
import dateTimeSvc from 'js/dateTimeService';
import uwPropSvc from 'js/uwPropertyService';
import uwSupportSvc from 'js/uwSupportService';

export const awDatetimeValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;
    const isEnabled = prop.fielddata.isEnabled;
    const hasLov = prop.fielddata.hasLov;
    const isArray = prop.fielddata.isArray;
    const { data, dispatch } = viewModel;

    let fielddata = { ...prop.fielddata };
    let dateApi = { ...prop.fielddata.dateApi };
    dateApi.isNotLov = true;
    fielddata.dateApi = dateApi;

    let otherProps = { ...prop, fielddata };

    if( data._isRefreshNeeded ) {
        otherProps.parentSelected = true;
        data._isRefreshNeeded = false;
    }

    if( fielddata.dateApi.isDateEnabled && fielddata.dateApi.isTimeEnabled ) {
        //If date and time enabled then time popup should be handled
        otherProps.onChange = ( event ) => {
            if( !isArray ) {
                prop.onChange( event );
            } else {
                data.selectedDate = event.target.value;
                dispatch( { path: 'data._isRefreshNeeded', value: true } );
            }
        };

        otherProps.onTimeSelectedOrEntered = ( timeValue ) => {
            let timeInMilliSec = dateTimeSvc.getTimeInMilliSec( timeValue );
            let dateAndTime;
            if( timeInMilliSec === null ) {
                dateAndTime = null;
            } else{
                dateAndTime = data.selectedDate ?
                    new Date( Number( data.selectedDate ) + timeInMilliSec ) :
                    new Date( Number( dateTimeSvc.getDefaultDate( fielddata.dateApi ) ) + timeInMilliSec );
            }
            prop.onChange( { target: { value: dateAndTime } } );
            dispatch( { path: 'data._isRefreshNeeded', value: false } );
        };
    }

    let labelDisplay;
    if( prop && prop.labeldisplay ) {
        labelDisplay = uwSupportSvc.retrievePropertyLabelDisplay( prop.labeldisplay );
        uwPropSvc.setPropertyLabelDisplay( prop, labelDisplay );
    }

    const getApplicableClasses = () => {
        return getValClass( otherProps );
    };

    const renderDateTime = () => {
        if( !isEnabled ) {
            otherProps.fielddata.uiValue = otherProps.value;
            return (
                <AwPropertyNonEditVal {...otherProps}></AwPropertyNonEditVal>
            );
        }

        if( hasLov ) {
            return (
                <AwPropertyLovVal {...otherProps} ></AwPropertyLovVal>
            );
        }

        if( !prop.fielddata.dateApi.isTimeEnabled ) {
            return (
                <AwDateVal {...otherProps} className={getApplicableClasses()} ></AwDateVal>
            );
        } else if( !prop.fielddata.dateApi.isDateEnabled ) {
            return (
                <AwTimeVal {...otherProps}></AwTimeVal>
            );
        }

        // renderFn for Date and Time
        return (
            <div className={ getApplicableClasses( ) + ' sw-row sw-date-time-container propertyLabelTopContainer'}>
                <AwDateVal {...otherProps}></AwDateVal>
                <AwTimeVal {...otherProps}></AwTimeVal>
            </div>
        );
    };

    if( isArray ) {
        return (
            <div className={ getApplicableClasses( ) + ' sw-row sw-date-time-container propertyLabelTopContainer'}>
                <AwDateVal {...otherProps}></AwDateVal>
                <AwTimeVal {...otherProps}></AwTimeVal>
            </div>
        );
    }
    if( labelDisplay === 'NO_PROPERTY_LABEL' ) {
        return renderDateTime();
    }
    return renderDateTime();
};

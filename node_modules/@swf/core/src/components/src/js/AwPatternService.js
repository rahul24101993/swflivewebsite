import AwIcon from 'viewmodel/AwIconViewModel';
import AwButton from 'viewmodel/AwButtonViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import _ from 'lodash';
import eventBus from 'js/eventBus';
import modelPropertyService from 'js/modelPropertyService';
import uwPropertyService from 'js/uwPropertyService';
import localeService from 'js/localeService';
import logger from 'js/logger';
import { noop } from 'js/declUtils';

export const initialize = ( elementRefList, prop ) => {
    let assignBtnTitle = null;
    let isSinglePattern = false;
    let isMultiplePattern = false;
    let patternProp = null;
    let selectedPattern = null;

    if( prop.patterns && _.isArray( prop.patterns ) ) {
        if( prop.patterns.length === 1 ) {
            isSinglePattern = true;
        } else if( prop.patterns.length > 1 ) {
            isMultiplePattern = true;

            // Create a view model property for the patterns drop down
            var listBoxProp = {
                type: 'STRING'
            };

            patternProp = modelPropertyService.createViewModelProperty( listBoxProp );

            // Set the default value on the view model prop
            if( prop.preferredPattern &&
                prop.patterns.indexOf( prop.preferredPattern ) !== -1 ) {
                patternProp.dbValue = prop.preferredPattern;
            } else {
                patternProp.dbValue = prop.patterns[ 0 ];
            }
            selectedPattern = patternProp.dbValue;
        }
    } else if( prop.patternAutoAssignFlags && !_.isUndefined( prop.preferredPattern ) ) {
        selectedPattern = prop.preferredPattern;
    }

    let p1 = localeService.getLocalizedText( 'awAddDirectiveMessages', 'assignButtonTitle' ).then( function( result ) {
        assignBtnTitle = result;
    } );

    return Promise.all( [ p1 ] ).then( () => {
        return {
            patternProp,
            selectedPattern,
            isSinglePattern,
            isMultiplePattern,
            assignBtnTitle
        };
    } );
};

const updatePatternState = ( dispatch, value, data ) => {
    let updateValue = {
        selectedPattern: value,
        patternProp: { ...data._states.patternProp, dbValue: value }
    };
    dispatch( { path: 'data._states', value: { ...data._states, ...updateValue } } );
};

/**
 * render function for awPattern
 * @returns {JSX.Element} react component
 */
export const awPatternRenderFunction = ( { prop, actions, viewModel, elementRefList } ) => {
    let { dropDown } = actions;
    let { data, dispatch } = viewModel;
    let {
        patternProp,
        selectedPattern,
        isSinglePattern,
        isMultiplePattern,
        assignBtnTitle
    } = data ? data._states || {} : {};

    if( !prop ) {
        logger.warn( 'AwPattern prop is undefined.' );
        return;
    }

    let autoAssign = prop.fielddata && prop.fielddata.isAutoAssign === false && prop.fielddata.patternAutoAssignFlags && prop.fielddata.patternAutoAssignFlags[ selectedPattern ] === true ||
        isSinglePattern && prop.fielddata && prop.fielddata.patternAutoAssignFlags && prop.fielddata.patternAutoAssignFlags[ prop.fielddata.patterns[ 0 ] ] === true;

    // onClick handler
    const setSelectedPatternHandler = function( event, pattern ) {
        if( event.key && event.key !== 'Enter' ) {
            return;
        }

        // case click or enter
        let newValue = pattern;
        let oldValue = patternProp && patternProp.dbValue;
        if( !_.isUndefined( newValue ) && newValue !== oldValue &&
            prop.fielddata.patterns.indexOf( newValue ) > -1 &&
            newValue !== selectedPattern ) {
            updatePatternState( dispatch, newValue, data );
            if( prop.fielddata.isAutoAssign === undefined || prop.fielddata.isAutoAssign === true || prop.fielddata.isAutoAssignable === true ) {
                const publishData = {
                    prop: prop,
                    newPattern: newValue
                };
                eventBus.publish( 'awPattern.newPatternSelected', publishData );
                if( prop && prop.fielddata && prop.fielddata.action ) {
                    // defer is added to let the render cycle complete
                    _.defer( function() {
                        prop.fielddata.action( publishData );
                    } );
                }
                if( prop.onChange ) {
                    event.target.value = newValue;
                    prop.onChange( event );
                }
            } else {
                uwPropertyService.setValue( prop, '' );
            }
        }

        dropDown.hide();
    };
    const toggleDropdown = function( event ) {
        if( event.key && event.key !== 'Enter' ) {
            return;
        }

        // case click or enter
        dropDown.show( {
            reference: elementRefList.get( 'input' ).current,
            width: elementRefList.get( 'input' ).current.offsetWidth
        } );
    };

    // The function will read the pattern from patternProp and will publish an event which will generate the next value as per the pattern
    const autoAssignIDs = function() {
        var pattern = prop.fielddata.preferredPattern;
        if( patternProp && patternProp.dbValue ) {
            pattern = patternProp.dbValue;
        }
        const publishData = {
            prop,
            newPattern: pattern
        };
        eventBus.publish( 'awPattern.newPatternSelected', publishData );
        if( prop && prop.fielddata && prop.fielddata.action ) {
            // defer is added to let the render cycle complete
            _.defer( function() {
                prop.fielddata.action( publishData );
            } );
        }
    };

    return <div className='aw-widgets-namingRuleGroup'>
        { isSinglePattern && <div className='aw-widgets-propertylabel'>{prop.fielddata.patterns[0]}</div>}
        { isMultiplePattern && <div className='aw-layout-flexRowContainer aw-widget-iconParent' onClick={toggleDropdown} role='button'
            tabIndex='0' onKeyPress={toggleDropdown}>
            <input ref={elementRefList.get( 'input' )}
                type='text'
                value={patternProp && patternProp.dbValue}
                onChange={noop}
                className={dropDown.open ? 'aw-jswidgets-choice aw-jswidgets-expanded' : 'aw-jswidgets-choice'}/>
            <AwIcon iconId='miscChevronDown' className='aw-widget-icon'></AwIcon>
        </div>}

        {autoAssign && <AwButton className='aw-widgets-assignIdButton' action={autoAssignIDs}>{ assignBtnTitle }</AwButton> }

        {dropDown.open && <AwPopup {...dropDown.options}>
            <div className='aw-base-scrollPanel'>
                <ul role='listbox' tabIndex={0}  className='sw-column'>
                    {prop.fielddata.patterns.map( ( pattern )=>{
                        return <li key={pattern}>
                            <div className='sw-aria-border aw-widgets-cellListItem aw-widgets-cellTop' onClick={( event )=>setSelectedPatternHandler( event, pattern )} role='button'
                                tabIndex='0' onKeyPress={( event )=>setSelectedPatternHandler( event, pattern )}>
                                <div className='sw-row'>
                                    <div className='sw-cell-valName' title={pattern}>{pattern}</div>
                                </div>
                            </div>
                        </li>;
                    } )}
                </ul>
            </div>
        </AwPopup>}
    </div>;
};

// Copyright (c) 2021 Siemens
import sanitizer from 'js/sanitizer';
import { getValClass } from 'js/componentUtils';

/**
 * render function for AwToggleButtonVal
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
let onChangeActionHandler = undefined;
let getAriaChecked = undefined;
export const awToggleButtonValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'input' );
    const inputClass = getValClass( prop );

    const doAction = ( ev ) => {
        prop.onChange( ev );
        return prop.action ? prop.action( ev ) : '';
    };

    const onKeyPress = ( event, prop ) => {
        if( prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.length > 0 ) {
            for( let index = 0; index < prop.fielddata.displayValsModel.length; index++ ) {
                if( prop.fielddata.displayValsModel[ index ].isInEditMode ) {
                    event.updateArray = true;
                    event.index = index;
                    break;
                }
            }
        }

        if( event.key === 'Enter' ) {
            event.preventDefault();
            prop.onChange( event );
        }
    };

    if( prop.typex === 'BOOLEANARRAY' ) {
        let ariaChecked = getAriaChecked === undefined ? false : getAriaChecked();
        return (
            <div className='sw-toggle-val-container'>
                <div className='sw-toggle-val'>
                    <input type='checkbox' value={prop.value} data-locator={prop.label} aria-checked={ariaChecked}
                        onChange={onChangeActionHandler} onKeyPress={( event ) => onKeyPress( event, prop )}/>
                    <span className='slider round'></span>
                </div>
            </div>
        );
    }

    return (
        <span className='sw-toggle-val'>
            <input {...filteredAttrs} type='checkbox' aria-checked={prop.value} onChange={doAction} className={inputClass}>
            </input>
            <span className='slider round'></span>
        </span>
    );
};

export  const initialize = ( props, { dispatch, dirty } )=>{
    let currentVal = undefined;
    if( props.typex === 'BOOLEANARRAY' ) {
        onChangeActionHandler = ( event ) =>{
            currentVal = event === undefined ? false : event.target.checked;
            dispatch( { path: 'data.dirty', value: dirty++ } );
            return ()=>{
                return currentVal;
            };
        };
        getAriaChecked = onChangeActionHandler();
    }
};

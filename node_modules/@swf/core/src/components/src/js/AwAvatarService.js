import AwIcon from 'viewmodel/AwIconViewModel';
import logger from 'js/logger';
import _ from 'lodash';
import AwPic from 'viewmodel/AwPicViewModel';

const onAvatarClick = function( e, prop ) {
    return prop.action ? prop.action( e ) : '';
};

const getInitialsFromString = function( str ) {
    if( !str ) {
        return '';
    }

    let output = '';
    let strings = [];
    if( str.indexOf( ',' ) !== -1 ) {
        strings = str.split( ',' );
        if( strings && strings.length ) {
            output += strings[ 1 ].trim()[ 0 ] + strings[ 0 ][ 0 ];
        }
    } else {
        strings = str.split( ' ' );
        _.forEach( strings, function( word ) {
            if( word !== '' ) {
                output += word[ 0 ];
            }
        } );
    }

    return output;
};

/**
 * render function for AwAvatar
 * @param {*} props context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awAvatarRenderFunction = ( props ) => {
    let initials = null;
    if( props.fullLayout ) {
        if( !props.name ) {
            logger.error( 'name attribute is required if full-layout is used' );
        }
        let textPositionClass = '';
        switch ( props.textPosition ) {
            case 'BOTTOM':
                textPositionClass = 'sw-column align-center';
                break;
            case 'RIGHT':
                textPositionClass = 'sw-row';
        }
        return (
            <button type='button' data-locator={props.textPosition} aria-label={props.i18n.USER_PROFILE} className={'sw-avatar-layout ' + textPositionClass} onClick={( e ) => onAvatarClick( e, props )}>
                <div data-locator='avatar-generic' className='sw-avatar-generic sw-avatar-small sw-avatar-layoutImg'>
                    <AwPic className='sw-avatar-icon sw-avatar-image' alt={props.i18n.USER_PROFILE} source={props.source}></AwPic>
                </div>
                <div className='sw-avatar-text'>
                    {props.fielddata.propertyDisplayName}
                </div>
            </button>
        );
    }

    let avatarIcon = props.icon || 'cmdUser';
    let avatarSize = props.size || 'small';
    let sizeClass = '';
    switch ( avatarSize ) {
        case 'xsmall':
            sizeClass = 'sw-avatar-xsmall';
            break;
        case 'small':
            sizeClass = 'sw-avatar-small';
            break;
        case 'medium':
            sizeClass = 'sw-avatar-medium';
            break;
        case 'large':
            sizeClass = 'sw-avatar-large';
            break;
        case 'xlarge':
            sizeClass = 'sw-avatar-xlarge';
            break;
    }

    if( !_.isNil( props.initials ) ) {
        initials = getInitialsFromString( props.initials );
    } else if( props.fielddata ) {
        let val = props.fielddata.propertyDisplayName;
        if( _.isNil( val ) || val === '' ) {
            val = props.fielddata.uiValue ? props.fielddata.uiValue : props.name;
        }
        initials = getInitialsFromString( val );
    }
    if( initials && initials.length > 2 ) {
        initials = '';
    }
    let innerHtml = initials ? <span data-locator='sw-avatar-initials' className='sw-avatar-name sw-avatar-initials'>{initials}</span> :
        <div data-locator='sw-avatar-normalIcon' className='sw-avatar-name sw-avatar-normalIcon'>
            <AwIcon className='aw-base-icon' iconId={avatarIcon}></AwIcon>
        </div>;
    if( props.source ) {
        innerHtml = <img data-locator='sw-avatar-image' src={props.source} alt={props.i18n.USER_PROFILE} className='sw-avatar-image'></img>;
    }
    return (
        <button type='button' data-locator={ 'avatar-generic ' + avatarSize} aria-label={props.i18n.USER_PROFILE} className={'sw-avatar-generic ' + sizeClass} onClick={( e ) => onAvatarClick( e, props )}>
            {innerHtml}
        </button>
    );
};

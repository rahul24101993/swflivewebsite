// Copyright (c) 2021 Siemens
import AwPropertyImage from 'viewmodel/AwPropertyImageViewModel';
import AwNode from 'viewmodel/AwNodeViewModel';
import wcagSvc from 'js/wcagService';
import { mapChildren } from 'js/reactHelper';
import _ from 'lodash';

let BASE_MARGIN = 16;
const collapse = ( viewModel, node ) => {
    node.expanded = false;
    const { data, dispatch } = viewModel;
    dispatch( { path: 'data._isRefreshNeeded', value: { _isRefreshNeeded: !data._isRefreshNeeded } } );
};

const expand = ( viewModel, node ) => {
    const { data, dispatch } = viewModel;
    node.expanded = true;
    dispatch( { path: 'data._isRefreshNeeded', value: { _isRefreshNeeded: !data._isRefreshNeeded } } );
};

const toggleSelection = ( event, node, prop ) => {
    prop.toggleSelectionHandler( event, node );
};

const handleKeyDown = ( event, node, prop ) => {
    if( wcagSvc.isValidKeyPress( event ) ) {
        toggleSelection( event, node, prop );
    }
};

export const awNodeRenderFunction = ( props ) => {
    const { viewModel, tree, level, children, ...prop } = props;


    const getLevelMargin = ( node, level ) => {
        let calculatedMargin = BASE_MARGIN * level;
        if( !node.children || node.children.length === 0 ) {
            calculatedMargin += 16;
        }
        return { marginLeft: `${calculatedMargin }px` };
    };
    if( tree === undefined ) {
        return;
    }
    let candidate = _.concat( [], children );

    return (
        <ul className='aw-ui-tree'>
            {
                tree.map( ( node, index ) => {
                    return (
                        <li className='aw-ui-treeNode' key={index}>
                            <div className={'aw-ui-treeNode-valueContainer sw-aria-border' + ( node.selected ? ' aw-state-selected' : '' ) }
                                tabIndex='0' role='tree'
                                style={getLevelMargin( node, props.level )} >
                                { node.children && node.children.length > 0 && node.expanded &&
                                    <AwPropertyImage name ='miscExpandedTree' className='expanded'
                                        onClickHandler={ ( ) => collapse( viewModel, node ) } >
                                    </AwPropertyImage>
                                }
                                { node.children && node.children.length > 0 && !node.expanded &&
                                    <AwPropertyImage name ='miscExpandedTree' className='collapsed'
                                        onClickHandler={ ( ) => expand( viewModel, node )  } >
                                    </AwPropertyImage>
                                }
                                <span tabIndex='-1'
                                    aria-expanded={node.expanded} role='treeitem' className='aw-ui-treeNodeValue'
                                    onKeyDown = { ( e ) => handleKeyDown( e, node, props ) }
                                    onClick={ ( e )=>toggleSelection( e, node, props ) } >
                                    {  mapChildren( candidate, {  node, index } ) }
                                </span>
                            </div>
                            {
                                node.expanded && node.children &&
                               <AwNode level= {level + 1} tree= {node.children} toggleSelectionHandler={props.toggleSelectionHandler}  >
                                   {children}
                               </AwNode>
                            }
                        </li>
                    );
                } )
            }
        </ul>
    );
};

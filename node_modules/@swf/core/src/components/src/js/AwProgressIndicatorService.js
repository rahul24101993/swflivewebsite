import eventBus from 'js/eventBus';
import _ from 'lodash';

export const awProgressIndicatorRenderFunction = ( props ) => {
    let showProgressBar = props.viewModel.data.progressIndicatorStatus;
    let progressBarCss = showProgressBar ? 'aw-layout-progressBar' : 'aw-layout-progressBar hide';
    return (
        <div className='aw-layout-progressBarContainer' >
            <div className={progressBarCss} role='progressbar' aria-label={props.i18n.LOADING_TEXT} aria-busy={showProgressBar} >
                <div className='aw-layout-progressBarCylon'></div>
            </div>
        </div>
    );
};

export const registerEvents = function( name, viewModel, progressIndicatorRef ) {
    progressIndicatorRef.current = {
        count: 0,
        progressIndicatorStatus: false
    };
    let subscriptions = subscribeToEvents( name, viewModel );
    return {
        subscriptions,
        progressIndicatorRef
    };
};

/**
 * Subscribe to custom Events
 * @param {Object} props object
 */
const subscribeToEvents = ( name, data ) => {
    let startEventName = name ? name + '-progress.start' : 'progress.start';
    let endEventName = name ? name + '-progress.end' : 'progress.end';
    let subscriptions = [];
    subscriptions.push( eventBus.subscribe( startEventName, () => {
        startProgressIndicator( data );
    } ) );

    subscriptions.push( eventBus.subscribe( endEventName, () => {
        stopProgressIndicator( data );
    } ) );
    return subscriptions;
};

const animationTimer = 1000;
const startIndicator = _.debounce( ( viewModel ) => {
    let data = viewModel.getData();
    let progressIndicatorRef = data.progressIndicatorRef;
    let count = progressIndicatorRef.current.count;
    if( count > 0 ) {
        viewModel.dispatch( { path: 'data.progressIndicatorStatus', value: true } );
    }
}, animationTimer, false );

/**
 * Start the progress Indicator
 * @param {Object} viewModel object
 */
export const startProgressIndicator = ( viewModel ) => {
    let data = viewModel.getData();
    let progressIndicatorRef = data.progressIndicatorRef;
    let count = progressIndicatorRef.current.count;
    count += 1;
    progressIndicatorRef.current = {
        count,
        progressIndicatorStatus: true
    };
    if( !data.progressIndicatorStatus ) {
        startIndicator( viewModel );
    }
};

/**
 * Stop the progress Indicator
 * @param {Object} viewModel objects
 */
export const stopProgressIndicator = ( viewModel ) => {
    let data = viewModel.getData();
    let progressIndicatorRef = data.progressIndicatorRef;
    let count = progressIndicatorRef.current.count;
    count -= 1;
    progressIndicatorRef.current = {
        count: count <= 0 ? 0 : count,
        progressIndicatorStatus: false
    };
    if( count <= 0 ) {
        viewModel.dispatch( { path: 'data.progressIndicatorStatus', value: false } );
    }
};

export const destroyIndicatorSubscription = ( subscriptions ) => {
    if( subscriptions && subscriptions.length > 0 ) {
        subscriptions.forEach( subscription => {
            eventBus.unsubscribe( subscription );
        } );
    }
};

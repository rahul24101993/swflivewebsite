// Copyright (c) 2021 Siemens
import AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';
import AwCommandBar from 'viewmodel/AwCommandBarViewModel';
import { getValClass } from 'js/componentUtils';
import sanitizer from 'js/sanitizer';

/**
 * render function for AwTextareaVal
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awTextareaValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'textarea' );
    const textAreaClass = getValClass( prop );

    // use simple non-edit val if not editing
    if( !prop.fielddata.isEditable || prop.modifiable === false ) {
        return (
            <AwPropertyNonEditVal {...prop}></AwPropertyNonEditVal>
        );
    }

    var keyPressed = ( event ) => {
        if( event.key === 'Enter' || event.type === 'blur' && prop.typex === 'STRINGARRAY' ) {
            event.preventDefault();
            prop.onChange( event );
            event.target.value = '';
        }
    };

    let numberOfLines = 3;
    if( prop.fielddata.numberOfLines ) {
        numberOfLines = prop.fielddata.numberOfLines;
    }
    if( !filteredAttrs.value ) {
        filteredAttrs.value = '';
    }
    if( prop.typex === 'STRINGARRAY' ) {
        return (
            <textarea rows={numberOfLines}
                aria-required={prop.isRequired}
                data-locator={prop.label}
                placeholder={prop.placeholder}
                className={textAreaClass}
                maxLength={prop.maxLength}
                onBlur={keyPressed}
                onKeyPress={keyPressed}/>
        );
    }
    if( prop.fielddata.uwAnchor ) {
        const commandConext = {
            ...prop.fielddata,
            dbValue: prop.fielddata.displayValues
        };
        return (
            <div className='sw-row'>
                <textarea {...filteredAttrs} rows={numberOfLines} className={textAreaClass} />
                <AwCommandBar anchor={prop.fielddata.uwAnchor} alignment='HORIZONTAL' context={commandConext}></AwCommandBar>
            </div>
        );
    }
    return (
        <textarea {...filteredAttrs} rows={numberOfLines} className={textAreaClass} />
    );
};

import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';
import AwTextareaVal from 'viewmodel/AwTextareaValViewModel';
import AwTextBoxVal from 'viewmodel/AwTextBoxValViewModel';
import AwPropertyRichTextAreaVal from 'viewmodel/AwPropertyRichTextAreaValViewModel';
import AwPropertyRenderingHint from 'viewmodel/AwPropertyRenderingHintViewModel';
import { getValClass } from 'js/componentUtils';

/**
 * render function for AwPropertyStringVal
 * @deprecated afx@4.3.0
 * @alternative <AwWidget>
 * @obsoleteIn afx@6.0.0
 * @returns {JSX.Element} react component
 */
export const awPropertyStringValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    const renderPropertyBasedOnProps = () => {
        const { hasLov, renderingHint, isRichText } = prop.fielddata;
        const { maxLength } = prop;

        if( hasLov ) {
            return <AwPropertyLovVal {...prop} ></AwPropertyLovVal>;
        } else if( !hasLov && renderingHint ) {
            return <AwPropertyRenderingHint {...prop} ></AwPropertyRenderingHint>;
        } else if( !hasLov && !renderingHint ) {
            const { inTableCell } = prop;
            if( maxLength && maxLength < 60 && !isRichText ) {
                return (
                    <AwTextBoxVal {...prop} ></AwTextBoxVal>
                );
            } else if( isRichText ) {
                if( inTableCell ) {
                    return (
                        <div className='aw-layout-popup aw-propertyrenderjs-tableCellArrayValPopup'>
                            <AwPropertyRichTextAreaVal {...prop} ></AwPropertyRichTextAreaVal>
                        </div>
                    );
                }
                return <AwPropertyRichTextAreaVal {...prop} ></AwPropertyRichTextAreaVal>;
            } else if( ( !maxLength || maxLength >= 60 ) && !isRichText ) {
                if( inTableCell ) {
                    return (
                        <div className='aw-layout-popup aw-propertyrenderjs-tableCellArrayValPopup'>
                            <AwTextareaVal {...prop}  className={ getValClass( prop ) } ></AwTextareaVal>
                        </div>

                    );
                }
                return <AwTextareaVal {...prop}  className={ getValClass( prop ) } ></AwTextareaVal>;
            }
        }
        // default
        return <AwTextareaVal  {...prop}  className={ getValClass( prop ) }></AwTextareaVal>;
    };
    return renderPropertyBasedOnProps();
};

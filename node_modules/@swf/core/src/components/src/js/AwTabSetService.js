import _ from 'lodash';
import eventBus from 'js/eventBus';
import conditionService from 'js/conditionService';
import AwTabContainer from 'viewmodel/AwTabContainerViewModel';
import AwCommandSubPanel from 'viewmodel/AwCommandSubPanelViewModel';
import analyticsSvc from 'js/analyticsService';
import { ShowWhen } from 'js/hocCollection';

const AwShowWhenProvider = ShowWhen( AwCommandSubPanel );

/**
 * Method to publish analytics to server
 * @param {Number} tabModelId - id of the clicked tab
 * @param {String} tabModelName - name of the clicked tab
 */
const publishAnalytics = ( tabModelId, tabModelName ) => {
    let sanEventData = {
        sanAnalyticsType: 'Tab',
        sanCommandId: tabModelId,
        sanCommandTitle: tabModelName
    };
    analyticsSvc.logCommands( sanEventData );
};

const evaluateTabConditions = ( tab, conditions, evaluationEnvironment, expName ) => {
    if( typeof tab[ expName ] === 'object' ) {
        const conditionName = tab[ expName ].condition.slice( 11 );
        return conditions[ conditionName ];
    }
    return conditionService.parseExpression( {}, tab[ expName ], evaluationEnvironment );
};

const createTabsModel = ( tabs, conditions, evaluationEnvironment, manullySelectedTabId ) => {
    return tabs.map( tab => {
        //Assuming name will be unique
        tab.pageId = tab.tabKey || tab.pageId || tab.panelId || tab.name;
        tab.displayTab = true;
        if( manullySelectedTabId ) {
            tab.selectedTab = manullySelectedTabId === tab.pageId || false;
        } else {
            tab.selectedTab = tab.selectedTab === true || false;
            tab.autoSelectTabOnLoad = tab.selectedTab === true || false;
        }
        if( tab.visibleWhen && !evaluateTabConditions( tab, conditions, evaluationEnvironment, 'visibleWhen' ) ) {
            tab.displayTab = false;
        }
        if( !manullySelectedTabId && tab.selectWhen ) {
            if( evaluateTabConditions( tab, conditions, evaluationEnvironment, 'selectWhen' ) ) {
                tab.selectedTab = true;
            } else {
                tab.selectedTab = false;
            }
        }
        return tab;
    } );
};

export const updateTabSelection = ( declViewModel ) => {
    const { data, dispatch, eventData } = declViewModel;
    const tabToSelect = _.find( data.tabsModel, ( tab ) => {
        return tab.tabKey && eventData && tab.tabKey === eventData.tabKey || tab.pageId &&
            tab.pageId === eventData.pageId || tab.panelId &&
            tab.panelId === eventData.panelId;
    } );

    if( tabToSelect && data.manullySelectedTabId !== tabToSelect.pageId ) {
        data.tabsModel = data.tabsModel.map( ( tab ) => {
            if( tab.pageId === tabToSelect.pageId ) {
                tab.selectedTab = true;
            } else {
                tab.selectedTab = false;
            }
            return tab;
        } );
        dispatch( { path: 'data', value: { ...data } } );
    }
};

export const awTabSetRenderFunction = ( props ) => {
    const { tabs, updateHook, action, closeAction, subPanelContext, viewModel, ctx } = props;
    const { data, dispatch } = viewModel;
    const { conditions } = updateHook;
    const evaluationEnvironment = {
        ctx: ctx,
        data: updateHook.data
    };

    const loadSubPanels = ( props ) => {
        const { ctx, ctxMin, viewModel, actions, i18n, fields, grids, formProp, messages, ...prop } = props;
        let pData = updateHook.data;
        if( !action && pData ) {
            let selectedTab = pData.selectedTab || {};
            return data.tabsModel.map( ( subPanel ) => {
                let panelId = subPanel.panelId;
                if( panelId ) {
                    let reCreatePanel = subPanel.recreatePanel || false;
                    let condition = reCreatePanel ? selectedTab.panelId === panelId : true;
                    //const currentPanel = subPanelContext.pData.activeView !== panelId ? subPanelContext.pData.activeView : currentPanel;
                    return (
                        condition && <AwShowWhenProvider
                            showWhen= {selectedTab.panelId === panelId}
                            key={panelId}
                            panelId = {panelId}
                            {...prop}>
                        </AwShowWhenProvider>
                    );
                }
            } );
        }
    };

    const selectTab = ( pageId, pageName ) => {
        let tabToSelect = data.tabsModel.find( tab => tab.pageId === pageId );

        if(  tabToSelect && ( !updateHook.data.selectedTab || updateHook.data.selectedTab && !_.isEqual( updateHook.data.selectedTab.pageId, pageId ) ) ) {
            tabToSelect.selectedTab = true;
            updateHook.data.selectedTab = tabToSelect;
            updateHook.data.pageId = tabToSelect.pageId;
            updateHook.data.tabTitle = tabToSelect.name;
            updateHook.data.manullySelectedTabId = tabToSelect.pageId;
            updateHook.dispatch( { path: 'data', value: { ...updateHook.data } } );
            if( action ) {
                //Component updating the parent, is an anti-pattern but needed for backward compatibility
                //Revisit: This event used to pass $scope as eventData, what is the replacement for the same
                props.action();
            }
            publishAnalytics( tabToSelect.pageId, tabToSelect.name );
            eventBus.publish( 'awTab.selected', {
                //scope: $scope
            } );
        }
    };

    const compareTabSelections = ( oriTabs ) => {
        let isEqual = true;
        for( let oriTab of origTabs ) {
            if( oriTab.selectedTab === undefined ) {
                isEqual = false;
                break;
            }
        }
        return isEqual;
    };

    const onTabClose = async( closedTab ) => {
        if( closeAction ) {
            closeAction( { closedTab: closedTab } );
        }
    };

    let origTabs = _.cloneDeep( tabs );

    data.tabsModel = createTabsModel( tabs, conditions, evaluationEnvironment, data.manullySelectedTabId );

    if( !compareTabSelections( origTabs ) ) {
        dispatch( { path: 'data', value: { ...data } } );
    }

    data.manullySelectedTabId = null;
    const visibleTabs = data.tabsModel.filter( tab => tab.displayTab === true );
    const cmdSubPanelBased = data.tabsModel.filter( tab => tab.hasOwnProperty( 'panelId' ) ).length > 0;

    return (
        <div className='sw-column sw-tabSet'>
            <AwTabContainer tabsModel={visibleTabs} callback={selectTab} tabSetId={props.tabSetId ? props.tabSetId : null} onTabClose={onTabClose}></AwTabContainer>
            <div className='sw-row'>
                <div className='aw-jswidget-tabPage sw-column vw-100'>
                    {props.children}
                    {cmdSubPanelBased && loadSubPanels( props )}
                </div>
            </div>
        </div>
    );
};

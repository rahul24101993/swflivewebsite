import { noop } from 'js/declUtils';
import AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';
import clickableTitleService from 'js/clickableTitleService';
import _ from 'lodash';
import { AwHighlightPropertyHtml, DisplayVal } from 'js/hocCollection';

const SpanAwHighlightPropertyHtmlDisplayVal = DisplayVal( AwHighlightPropertyHtml( 'span' ) );
/**
 * render function for AwClickableTitle
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awClickableTitleRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        runActionWithViewModel,
        ...prop
    } = props;
    let { cellTitleId, source, title, vmo } = props;
    let commandContext = {
        vmo: vmo
    };
    let isTitleClickable = clickableTitleService.hasClickableCellTitleActions();

    const doIt = ( event ) => {
        clickableTitleService.doIt( event, commandContext, runActionWithViewModel );
    };

    let titleClass = [];
    switch ( source ) {
        case 'table':
            titleClass = [ 'aw-jswidgets-text' ];
            break;
        case 'splmtable':
            titleClass = [ 'aw-splm-tableCellText' ];
            break;
        case 'tree':
            titleClass = [ 'aw-jswidgets-dataGridCellText' ];
            break;
        default:
            break;
    }

    return (
        <div className='aw-base-normal'>
            {
                isTitleClickable && source === 'list' &&
                <a href={noop} onClick={( e )=> doIt( e )} data-locator='aw-clickable-title' className='aw-widgets-cellListCellTitle aw-widgets-propertyValueLink aw-uiwidgets-cellClickableTitle' celltitleid={cellTitleId}>
                    {title}
                </a>
            }
            {
                // revisitme: include aw-highlight-property-html to <span> once the attribute directive is implemented using HOC
                !isTitleClickable && source === 'list' &&
                <SpanAwHighlightPropertyHtmlDisplayVal title={title} className='aw-widgets-cellListCellTitle' celltitleid={cellTitleId} awHighlightPropertyHtml displayVal={title}>
                    { title }
                </SpanAwHighlightPropertyHtmlDisplayVal>
            }

            {
                isTitleClickable && [ 'table', 'splmtable', 'tree' ].includes( source ) &&
                <div className={titleClass}>
                    <a data-locator='aw-clickable-title' className='aw-widgets-propertyValueLink aw-uiwidgets-clickableTitle' href={noop} onClick={( e )=> doIt( e )}>{title}</a>
                </div>
            }
            {
                !isTitleClickable && source === 'table' &&
                <AwPropertyNonEditVal {...prop} inTableCell='true'></AwPropertyNonEditVal>
            }
            {
                !isTitleClickable && [ 'splmtable', 'tree' ].includes( source ) &&
                <div className={titleClass}>{title}</div>
            }
        </div>
    );
};

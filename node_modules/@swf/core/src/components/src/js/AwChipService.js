import AwIcon from 'viewmodel/AwIconViewModel';
import AwButton from 'viewmodel/AwButtonViewModel';
import logger from 'js/logger';
import buttonStyles from 'js/buttonStyles';
import { EnableWhen } from 'js/hocCollection';
import AwPopup from 'viewmodel/AwPopupViewModel';

const EnableWhenDiv = EnableWhen( 'div' );

const ChipTypes = {
    STATIC: 'STATIC',
    BUTTON: 'BUTTON',
    SELECTION: 'SELECTION'
};

const DEFAULT_CHIP_STYLE = 'base';

// the map from unselected button type to selected button type
const SelectionChipStyleMap = {
    base: 'accent-mid-contrast',
    accent: 'accent-high-contrast',
    caution: 'accent-caution',
    positive: 'accent-positive',
    negative: 'accent-negative'
};

const uiIconClicked = function( chip, event, uiIconAction, actions ) {
    event.stopPropagation();

    actions.hintPopup.hide();
    // perform action when UI icon get clicked
    return uiIconAction ? uiIconAction( { chip: chip } ) : '';
};

const handleChipClick = ( chip, action, dispatch, data, actions ) => {
    // perform action for non static chip

    if( chip.children && !actions.hintPopup.open ) {
        actions.hintPopup.show( {
            width: 'auto'
        } );
    } else {
        if( chip.chipType !== ChipTypes.STATIC ) {
            if( action ) {
                action( { chip: chip } );
            }
        }
        if( chip.chipType === ChipTypes.SELECTION ) {
            chip.selected = !chip.selected;
            dispatch( { path: 'data', value: { ...data } } );
        }
    }
};

export const awChipRenderFunction = ( props ) => {
    const { chip, buttonType, action, actions, uiIconAction, chipCondition, viewModel } = props;
    const { data, dispatch } = viewModel;
    const { conditions } = chipCondition;
    let { hintPopup } = actions;
    const chipClasses = [ 'aw-widgets-chip' ];
    //let isChipEnabled = true;

    const evaluateChipEnableWhen = () => {
        if( chip.enableWhen && chip.enableWhen.condition ) {
            const conditionName = chip.enableWhen.condition.split( 'conditions.' )[ 1 ];
            return conditions[ conditionName ];
        }
        return true;
    };

    const closePopup = () => {
        hintPopup.hide();
    };

    if( !chip ) {
        logger.error( 'Chip model object is undefined, failed to render aw-chip.' );
        return undefined;
    }

    let showLabel = true;
    if( chip.showLabel !== undefined ) {
        showLabel = Boolean( chip.showLabel );
    }

    let showIcon = true;
    if( chip.showIcon !== undefined ) {
        showIcon = Boolean( chip.showIcon );

        //always make label visible when both icon and label are configured hidden.
        if( !showIcon && !showLabel ) {
            showLabel = true;
        }
    }

    let chipType = null;
    if( chip.chipType && ChipTypes[ chip.chipType ] ) {
        chipType = chip.chipType;
    } else {
        logger.warn( 'Chip type "' + chipType + '" is invalid.' );
        chipType = action ? ChipTypes.BUTTON : ChipTypes.STATIC;
    }

    // the button type defined in chip data model will take precedence than the 'buttonType' scope data
    let buttonTypeForChip = chip.buttonType || buttonType || DEFAULT_CHIP_STYLE;
    chipClasses.push( buttonStyles.getButtonStyle( buttonTypeForChip ) );

    if( chip.selected ) {
        chipClasses.push( 'aw-widgets-chipSelected' );
    }

    if( chipType === ChipTypes.STATIC ) {
        chipClasses.push( 'aw-widgets-staticChip' );
    }

    if( chip.className ) {
        chipClasses.push( chip.className );
    }

    if( !evaluateChipEnableWhen() ) {
        chipClasses.push( 'disabled' );
    }

    return (
        <div role='button' tabIndex={0} aria-label={chip.labelDisplayName}
            className={chipClasses.join( ' ' )}
            onClick={() => handleChipClick( chip, action, dispatch, data, actions )}
            ref={hintPopup.reference}
            onKeyPress={handleChipClick}>
            {chip.iconId && showIcon && <AwIcon className='aw-widgets-chipIcon' iconId={chip.iconId}></AwIcon>}
            {showLabel && <div className='aw-widgets-chipLabel' title={chip.labelDisplayName}>{chip.labelDisplayName}</div>}
            {chipType === ChipTypes.SELECTION && chip.selected && <div className='aw-widgets-chipCheckmark'></div>}
            {chip.uiIconId && <AwButton aria-label={chip.labelDisplayName} className='aw-widgets-chipUIIcon' iconId={chip.uiIconId} action={( e ) => uiIconClicked( chip, e, uiIconAction, actions )}></AwButton>}
            {<AwPopup {...hintPopup.options}>
                { chip.children && chip.children.map( ( childChip, index ) => {
                    return (
                        <div role='button' tabIndex={0}
                            className={chipClasses.join( ' ' )}
                            key={index}
                            onClick={() => handleChipClick( childChip, action, dispatch, data, actions )}
                            onKeyPress={handleChipClick}>
                            {childChip.iconId && showIcon && <AwIcon className='aw-widgets-chipIcon aw-widgets-chipChildIcon' iconId={childChip.iconId}></AwIcon>}
                            {showLabel && <div className='aw-widgets-chipLabel aw-widgets-chipChildLabel' title={childChip.labelDisplayName}>{childChip.labelDisplayName}</div>}
                            {chipType === ChipTypes.SELECTION && childChip.selected && <div className='aw-widgets-chipCheckmark aw-widgets-chipChildCheckmark'></div>}
                            {childChip.uiIconId && <AwButton className='aw-widgets-chipUIIcon aw-widgets-chipChildUIIcon' iconId={childChip.uiIconId} action={( e ) => uiIconClicked( childChip, e, uiIconAction, actions )}></AwButton>}
                        </div>
                    );
                } )}
            </AwPopup>}
        </div>

    );
};

import AwIcon from 'viewmodel/AwIconViewModel';
import AWPropertyLovChild from 'viewmodel/AwPropertyLovChildViewModel';
import AwPic from 'viewmodel/AwPicViewModel';
import { getListItemClasses } from 'js/componentUtils';
import { handleSelectionEvent } from 'js/selectionHelper';
import wcagSvc from 'js/wcagService';

export const awPropertyLovChildRenderFunction = ( props ) => {
    let { lovEntry, dataProvider, setLovEntry, elementRefList, prop } = props;
    let viewModel = props.viewModel;

    const isSelected = dataProvider.selectionModel.isSelected( lovEntry );
    const selectionEnabled = dataProvider.selectionModel.isSelectionEnabled();
    const isFocused = lovEntry.attn;
    const isGroupList = null;
    const fixedCellHeight = null;
    const item = elementRefList.get( 'item' );
    const mruFlag = lovEntry.lastMru ? 'sw-lov-lastMru' : '';
    const { i18n } = props;
    const ariaLabelValue = lovEntry.propDisplayValue ? lovEntry.propDisplayValue : i18n.BlankLabel;

    const handleSelection = ( event, lovEntry ) => {
        event && event.stopPropagation();
        if( lovEntry.hasChildren ) {
            if( !viewModel.data.indicator ) {
                viewModel.dispatch( { path: 'data', value: { indicator: true } } );
            } else {
                viewModel.dispatch( { path: 'data', value: { indicator: false } } );
            }
        } else {
            if( dataProvider && dataProvider.selectionModel.isSelectionEnabled() ) {
                let changed = lovEntry && prop && prop.field.value !== lovEntry.propInternalValue;
                if( changed ) {
                    handleSelectionEvent( [ lovEntry ], dataProvider.selectionModel, event, dataProvider.vmCollectionObj.vmCollection );
                }
                setLovEntry( lovEntry, event );

                // call selection action if defined
                setTimeout( () => prop && prop.action && prop.action( { lovEntry, event } ) );
            }
        }
    };

    lovEntry.handleSelection = ( event ) => {
        handleSelection( event, lovEntry );
    };

    const handleKeyDown = ( event, vmo ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            handleSelection( event, vmo );
        } else {
            wcagSvc.handleMoveUpOrDown( event, event.currentTarget.parentElement.parentElement );
        }
    };

    const expandClass = () => {
        let className = [ 'aw-jswidgets-lovchildren' ];
        if( viewModel.data.indicator ) {
            className.push( 'expanded' );
        }
        return className.join( ' ' );
    };

    return (
        <li role='option'
            aria-selected={isSelected}
            onClick={( e )=>handleSelection( e, lovEntry )}
            onKeyDown={( e )=>handleKeyDown( e, lovEntry )}
            ref={item}
            aria-label={ariaLabelValue}
            className={mruFlag}>
            <div className={ getListItemClasses( isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused ) }>
                <div className='sw-row'>
                    {
                        lovEntry.hasChildren && <div className='aw-jswidgets-lovIndicatorContainer'>
                            <div className={expandClass()}>
                                <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon  >
                            </div>
                        </div>
                    }
                    <AwPic className='sw-lov-thumb' iconId={lovEntry.iconName} source={lovEntry.iconSource}></AwPic>
                    <div className={'sw-cell-val sw-column'}>
                        <div className='sw-cell-valName'
                            title={lovEntry.propDisplayValue}>{lovEntry.propDisplayValue}
                        </div>
                        <div className='sw-cell-valDesc'
                            title={ lovEntry.propDisplayDescription }>{ lovEntry.propDisplayDescription }
                        </div>
                    </div>
                </div>
            </div>
            {
                lovEntry.hasChildren && viewModel.data.indicator && lovEntry.getChildren().map( ( childLOVEntry, index ) =>
                    <ul className='aw-widgets-cellhierarchyItem' key= {index}>
                        <AWPropertyLovChild
                            lovEntry = {childLOVEntry}
                            dataProvider={dataProvider}
                            setLovEntry={setLovEntry}>
                        </AWPropertyLovChild>
                    </ul>
                )
            }
        </li>
    );
};



import AwIcon from 'viewmodel/AwIconViewModel';
import AwCellCommandBar from 'viewmodel/AwCellCommandBarViewModel';
import AwClickabelTitle from 'viewmodel/AwClickableTitleViewModel';
import AwInclude from 'viewmodel/AwIncludeViewModel';
import _ from 'lodash';
/**
 * render function for AwNotificationCelll
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awNotificationCellRenderFunction = ( props ) => {
    const { viewModel } = props;
    let vmo = props.vmo || props.item;

    if( typeof vmo === 'string' && !_.isUndefined( props.item ) ) {
        vmo = { ...props.item };
    }

    let _notificationRead = vmo._notificationRead ? vmo._notificationRead : viewModel._notificationRead;

    const onNotificationClickAction = () => {
        viewModel.dispatch( { path: 'data._notificationRead', value: true } );
    };

    const notificationLevels = {
        HIGH: 'high',
        MEDIUM: 'medium',
        LOW: 'low'
    };

    let isCustomViewIncluded = vmo.viewName !== undefined;

    let notificationCellClass = [ 'aw-notification-cell' ];
    let notificationTitleClass = [ 'aw-notification-cell-title' ];
    let notificationCellCommandClass = [ 'aw-notification-cell-command' ];

    switch ( vmo.notificationLevel ) {
        case notificationLevels.HIGH:
            notificationCellClass.push( 'aw-notification-cell-importance-high' );
            notificationTitleClass.push( 'aw-notification-cell-title-high' );
            break;
        case notificationLevels.MEDIUM:
            notificationCellClass.push( 'aw-notification-cell-importance-medium' );
            notificationTitleClass.push( 'aw-notification-cell-title-medium' );
            break;
        case notificationLevels.LOW:
            notificationCellClass.push( 'aw-notification-cell-importance-low' );
            notificationTitleClass.push( 'aw-notification-cell-title-low' );
            break;

        default:
            break;
    }

    if( _notificationRead ) {
        notificationCellClass.push( 'aw-notification-cell-read' );
    }
    if( !isCustomViewIncluded ) {
        notificationTitleClass.push( 'aw-notification-cell-title-no-custom-include' );
        notificationCellCommandClass.push( 'aw-notification-cell-command-no-custom-include' );
    }

    const renderCellProperties = ( cellProp ) => {
        return (
            <div id='cellProperties' aw-repeat='cellProp:vmo.cellProperties'>
                <div className='aw-widgets-cellListCellProperties'>
                    <label className='aw-notification-cell-prop'>{cellProp.key}:</label>
                    <label className='aw-notification-cell-prop' title={cellProp.value}>{cellProp.value}</label>
                </div>
            </div>
        );
    };
    const context = {
        vmo: vmo
    };

    return (
        <div role='button' tabIndex={0} onKeyPress={()=> onNotificationClickAction()} className={notificationCellClass.join( ' ' )} onClick={()=> onNotificationClickAction()}>
            <div className='aw-sub-notification-cell'>
                {
                    vmo.typeIconURL &&
                    <div className='aw-notification-cellListCellImage'>
                        <AwIcon iconId={vmo.typeIconURL}></AwIcon>
                    </div>
                }
                <div className='aw-notification-cellListCellContent'>
                    <div className={notificationCellCommandClass.join( ' ' )}>
                        <AwCellCommandBar anchor='aw_notification_cellCommandsExt' context={context}></AwCellCommandBar>
                    </div>
                    <div className={notificationTitleClass.join( ' ' )}>
                        <AwClickabelTitle title={vmo.cellHeader1} source='list' vmo={vmo}></AwClickabelTitle>
                    </div>
                    {
                        ( vmo.cellProperties || [] ).map( ( cellProp )=> renderCellProperties( cellProp ) )
                    }
                </div>
            </div>
            {
                vmo.viewName &&
                <div className='sw-row aw-notification-cell-customInclude'>
                    <AwInclude name={vmo.viewName}></AwInclude>
                </div>
            }
        </div>
    );
};

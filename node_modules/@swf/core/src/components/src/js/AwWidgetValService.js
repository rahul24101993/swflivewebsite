import AwTextBoxVal from 'viewmodel/AwTextBoxValViewModel';
import AwIntegerVal from 'viewmodel/AwIntegerValViewModel';
import AwCheckboxVal from 'viewmodel/AwCheckboxValViewModel';
import AwDateVal from 'viewmodel/AwDateValViewModel';
import AwDoubleVal from 'viewmodel/AwDoubleValViewModel';
import AwTimeVal from 'viewmodel/AwTimeValViewModel';
import AwDateTimeVal from 'viewmodel/AwDateTimeValViewModel';
import AwRadiobuttonVal from 'viewmodel/AwRadiobuttonValViewModel';
import AwToggleButtonVal from 'viewmodel/AwToggleButtonValViewModel';
import AwTextareaVal from 'viewmodel/AwTextareaValViewModel';
import AwPropertyArrayVal from 'viewmodel/AwPropertyArrayValViewModel';
import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';
import AwPropertyTriStateVal from 'viewmodel/AwPropertyTriStateValViewModel';
import AwPropertyObjectVal from 'viewmodel/AwPropertyObjectValViewModel';
import AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';
import AwPropertyArrayNonEditVal from 'viewmodel/AwPropertyArrayNonEditValViewModel';
import AwPropertyRichTextAreaVal from 'viewmodel/AwPropertyRichTextAreaValViewModel';
import AwPropertyNonEditOverflowArrayVal from 'viewmodel/AwPropertyNonEditOverflowArrayValViewModel';
import AwLovEditVal from 'viewmodel/AwLovEditViewModel';
import { includeComponent } from 'js/moduleLoader';
import { isComponentRegistered } from 'js/componentRegistry';
/**
 * render function for AwWidget
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awWidgetValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        modifiable,
        ...prop
    } = props;
    const { renderingHint, ...propData } = prop;
    const hint = propData.fielddata.renderingHint || renderingHint;

    const renderingHints = [ 'textarea', 'checkboxoptionlov', 'textbox', 'label', 'triState', 'textfield', 'radiobutton', 'togglebutton', 'checkbox', 'static', 'wrap',
        'longtext', 'date', 'editLov', 'overflow', 'password', 'objectlink', 'commandbutton'
    ];
    var isHintKeyword = renderingHints.includes( hint );
    if( hint !== undefined && hint !== '' && !isHintKeyword && /^[A-Z][A-Za-z]*$/.test( hint ) && isComponentRegistered( hint ) ) {
        return includeComponent( hint, propData );
    }
    const isRichText = propData.fielddata.isRichText;

    const { maxLength } = propData;

    // use simple non-edit val if not editing
    if( !propData.fielddata.isEditable || hint === 'label' || modifiable === false ) {
        if( propData.fielddata.isArray ) {
            if( hint === 'overflow' ) {
                return (
                    <AwPropertyNonEditOverflowArrayVal {...propData}></AwPropertyNonEditOverflowArrayVal>
                );
            } else if( hint === 'checkboxoptionlov' && propData.typex === 'CHECKBOXARRAY' ) {
                return (
                    <AwPropertyNonEditVal {...propData}></AwPropertyNonEditVal>
                );
            }
            return (
                <AwPropertyArrayNonEditVal {...propData}></AwPropertyArrayNonEditVal>
            );
        }
        return (
            <AwPropertyNonEditVal {...propData}></AwPropertyNonEditVal>
        );
    }
    switch ( propData.typex ) {
        case 'CHECKBOXARRAY':
        case 'DOUBLEARRAY':
        case 'DATEARRAY':
        case 'INTEGERARRAY':
        case 'STRINGARRAY':
        case 'BOOLEANARRAY':
        case 'OBJECTARRAY': {
            switch ( hint ) {
                case 'checkboxoptionlov':
                    return <AwPropertyLovVal {...prop}></AwPropertyLovVal>;
                default:
                    return <AwPropertyArrayVal {...propData}></AwPropertyArrayVal>;
            }
        }
        case 'INTEGER':
            return <AwIntegerVal {...propData}></AwIntegerVal>;

        case 'DOUBLE':
            return <AwDoubleVal {...propData}></AwDoubleVal>;

        case 'BOOLEAN':
            switch ( hint ) {
                case 'radiobutton':
                    return <AwRadiobuttonVal prop={propData}></AwRadiobuttonVal>;

                case 'togglebutton':
                    return <AwToggleButtonVal {...propData}></AwToggleButtonVal>;

                case 'triState':
                    return <AwPropertyTriStateVal {...propData}></AwPropertyTriStateVal>;
                default:
                    return <AwCheckboxVal {...propData}></AwCheckboxVal>;
            }

        case 'DATE':
            return <AwDateVal {...propData}></AwDateVal>;
        case 'DATETIME':
            return <AwDateTimeVal {...propData}></AwDateTimeVal>;

        case 'OBJECT':
            return <AwPropertyObjectVal {...propData}></AwPropertyObjectVal>;

        case 'CHAR':
        case 'STRING':
            if( propData.type === 'password' ) {
                return <AwTextBoxVal {...propData} ></AwTextBoxVal>;
            } else if( hint && hint === 'editLov' ) {
                return <AwLovEditVal {...propData} ></AwLovEditVal>;
            } else if( prop.fielddata.hasLov ) {
                return <AwPropertyLovVal {...propData} ></AwPropertyLovVal>;
            } else if( !prop.fielddata.hasLov && ( hint || hint !== '' ) ) {
                const { inTableCell } = propData;
                if( hint === 'textfield' || hint === 'textbox' || maxLength && maxLength < 60 && !isRichText ) {
                    return (
                        <AwTextBoxVal {...propData} ></AwTextBoxVal>
                    );
                } else if( isRichText ) {
                    if( inTableCell ) {
                        return (
                            <div className='aw-layout-popup aw-propertyrenderjs-tableCellArrayValPopup'>
                                <AwPropertyRichTextAreaVal {...propData} ></AwPropertyRichTextAreaVal>
                            </div>
                        );
                    }
                    return <AwPropertyRichTextAreaVal {...propData} ></AwPropertyRichTextAreaVal>;
                } else if( ( !maxLength || maxLength >= 60 ) && !isRichText && ( hint === 'textarea' || hint === 'longtext' ) ) {
                    if( inTableCell ) {
                        return (
                            <div className='aw-layout-popup aw-propertyrenderjs-tableCellArrayValPopup'>
                                <AwTextareaVal {...propData}></AwTextareaVal>
                            </div>

                        );
                    }
                    return <AwTextareaVal {...propData}></AwTextareaVal>;
                }
            }
            // default
            return <AwTextareaVal {...propData}></AwTextareaVal>;

        default:
            return <AwTextBoxVal {...propData}></AwTextBoxVal>;
    }
};

import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';

/**
 *
 * @param {String} link url to open a new tab
 */
export const loadTriStateInfo = ( data ) => {
    let lovEntries = [];
    lovEntries.push( {
        propDisplayValue: data.propertyRadioTrueText,
        propInternalValue: true
    }, {
        propDisplayValue: data.propertyRadioFalseText,
        propInternalValue: false
    } );
    let result = {
        triStateValues: lovEntries,
        totalFound: lovEntries.length
    };
    return result;
};

/**
 * render function for AwPropertyTriStateVal
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awPropertyTriStateValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    let fielddata = { ...prop.fielddata };
    fielddata.hasLov = true;
    fielddata.isSelectOnly = true;
    fielddata.propertyLabelDisplay = 'NO_PROPERTY_LABEL';
    fielddata.dataProvider = viewModel.dataProviders.triStateProvider;
    let finalProps = { ...prop, fielddata };
    let vmData = { ...viewModel.getData() };
    if( vmData.propertyRadioTrueText !== prop.fielddata.propertyRadioTrueText &&
        vmData.propertyRadioFalseText !== prop.fielddata.propertyRadioFalseText ) {
        vmData.propertyRadioTrueText = prop.fielddata.propertyRadioTrueText;
        vmData.propertyRadioFalseText = prop.fielddata.propertyRadioFalseText;
        viewModel.dispatch( { path: 'data', value: vmData } );
    }
    return (
        <AwPropertyLovVal {...finalProps} ></AwPropertyLovVal>
    );
};

import AwListCommand from 'viewmodel/AwListCommandViewModel';
import AwCellCommandBar from 'viewmodel/AwCellCommandBarViewModel';
import conditionService from 'js/conditionService';
import AwIcon from 'viewmodel/AwIconViewModel';
import { noop } from 'js/declUtils';

export const awStaticListCommandRenderFunction = ( props ) => {
    const { viewModel, ctx } = props;
    const { data } = viewModel;
    const { item, index, itemOptions, dataprovider, fixedCellHeight, isGroupList } = props;
    const { selectionModel, selectedObjects, json, commands } = dataprovider;
    const { multiSelectEnabled } = selectionModel;
    const { commandsAnchor } = json;

    // Setup context based on item
    const context = { vmo: item, itemOptions, context: props.context };

    // TODO
    const conditionFilter = ( command ) => {
        const evaluationEnvironment = { ctx, data };
        return !command.condition || conditionService.evaluateCondition( data, command.condition, evaluationEnvironment );
    };

    let [ listCommands, cellCommands ] = [];
    // <!-- any use case for this ?  -->
    if( !commandsAnchor ) {
        listCommands = commands ? commands.reduce( ( total, command, index ) => {
            // TODO
            if( conditionFilter( command ) ) {
                const cellProps = { command, itemOptions, vmo: item };
                const listCommand = <AwListCommand {...cellProps} key={index}></AwListCommand>;
                total.push( listCommand );
            }
            return total;
        }, [] ) : null;
    } else {
        const cellProps = { context, anchor: commandsAnchor };
        cellCommands = <AwCellCommandBar {...cellProps} key={index}></AwCellCommandBar>;
    }

    const processFixedCellHeight = () => {
        if( fixedCellHeight && multiSelectEnabled && item.selected ) {
            return <a href={noop} className='aw-commands-cellCommandCommon'>
                <div className='aw-commands-svg'>
                    <AwIcon iconId='cmdCheckmark'></AwIcon>
                </div>
            </a>;
        }
    };

    return (
        <div className='aw-widgets-cellListCellCommands aw-widgets-cellInteraction' key={index}>
            { processFixedCellHeight() }

            { !multiSelectEnabled && ( selectedObjects.length === 1 || !item.selected )
                &&
                <div className='aw-widgets-cellCommandsContainer aw-cell-command-bar'>
                    {listCommands}
                    {cellCommands}
                </div>
            }
        </div>
    );
};

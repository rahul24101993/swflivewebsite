import AwList from 'viewmodel/AwListViewModel';
import AwLinkPopupMenuItem from 'viewmodel/AwLinkPopupMenuItemViewModel';
import eventBus from 'js/eventBus';
import _ from 'lodash';

const getDisplayText = displayProperty => item => {
    let result = item.propDisplayValue || item.staticDisplayValue;

    // case object has props
    if( item.props ) {
        let displayStr;
        if( displayProperty ) {
            displayStr = _.get( item, displayProperty );
        } else {
            displayStr = _.get( item.props, 'object_string' );
        }
        result = displayStr.uiValue;
    }

    return result;
};

export const awLinkPopupMenuRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    const {
        linkProp,
        dataProvider,
        options,
        linkPopup,
        propKey,
        displayProperty,
        updateCallback
    } = prop;

    const text = getDisplayText( displayProperty );

    // 1, set selection value back to awlink
    // 2, close popup
    const selectionHandler = ( vmo ) => {
        // if selected a different item, then set selection value back to awlink
        const displayValue = vmo && text( vmo );
        if( displayValue && displayValue !== linkProp.fielddata[ propKey ] ) {
            // we don't need to cache title, it should always came from prop
            // update link display value
            // updateCallback( displayValue );

            // update linkProp
            // take care legacy
            const lovEntry = {
                propInternalValue: vmo.propInternalValue || vmo.staticInternalValue,
                propDisplayValue: displayValue
            };
            linkProp.setLovVal( { lovEntry, dataProvider }, '' )
                .then( linkProp.setLovVal( { lovEntry, dataProvider }, 'validate' ) );
        }

        // why event? remove this in future
        // - dataProvider already have <dpName>.selectionChangeEvent

        // aw require a propertyName in their conditions
        let propertyName = linkProp.name && linkProp.name.split( '.' ).pop();

        let property = { propertyName, ...vmo, dbValue: { ...vmo } };
        if( displayProperty ) {
            const updatedprop = _.get( vmo, displayProperty );
            property = { propertyName, ...updatedprop, dbValue: { ...vmo } };
        }
        var eventData = {
            property,
            // previousSelect: $scope.previousSelect,
            propScope: vmo
        };
        eventBus.publish( 'awlinkPopup.selected', eventData );

        linkPopup.hide();
    };

    // ng-afx - link menu specific selection checker
    // dp use uid as selection checker
    const selectionCheck = ( vmo ) => {
        return text( vmo ) === linkProp.fielddata[ propKey ];
    };

    const listOptions = { selectionHandler, selectionCheck };
    const itemOptions = options;
    return (
        <AwList dataprovider={dataProvider}
            listOptions={listOptions}
            itemOptions={itemOptions} >
            <AwLinkPopupMenuItem text={text}/>
        </AwList>
    );
};

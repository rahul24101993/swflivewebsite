// Copyright (c) 2021 Siemens
import navigationTokenService from 'js/navigationTokenService';
import { AwHighlightPropertyHtml, DisplayVal } from 'js/hocCollection';
import AwCommandBar from 'viewmodel/AwCommandBarViewModel';
import sanitizer from 'js/sanitizer';

const SpanAwHighlightPropertyHtmlDisplayVal = DisplayVal( AwHighlightPropertyHtml( 'span' ) );
const LinkAwHighlightPropertyHtmlDisplayVal = DisplayVal( AwHighlightPropertyHtml( 'a' ) );

const openObjectLinkPage = ( event, prop ) => {
    if( event.target.tagName.toLowerCase() === 'a' && event.target.href !== '' ) {
        return;
    }

    // This is to prevent this event being lost in table if link is in a cell.
    event.stopPropagation();
};
const hasOldValue = function( fieldData ) {
    return fieldData.oldValue !== undefined && fieldData.oldValue || fieldData.oldValues !== undefined && fieldData.oldValues;
};
export const awPropertyNonEditValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;
    const { dispatch, data } = viewModel;

    let filteredAttrs = sanitizer.sanitizeHTMLTagProps( prop, 'span' );

    if( ( prop.typex === 'OBJECT' || prop.typex === 'OBJECTARRAY' ) && prop.value ) {
        if( !data.urlLoadingInprogress && data.propUid !== prop.value ) {
            let uidToBeEvaluated = null;
            if( prop.fielddata && prop.fielddata.isArray ) {
                uidToBeEvaluated = prop.value[ prop.index ];
            } else {
                uidToBeEvaluated = prop.value;
            }
            dispatch( { path: 'data.urlLoadingInprogress', value: true } );
            navigationTokenService.getNavigationContent( {}, uidToBeEvaluated ).then( function( urlDetails ) {
                if( urlDetails ) {
                    const associatedURL = {
                        url: urlDetails.urlContent,
                        target: urlDetails.target
                    };
                    dispatch( { path: 'data', value: { associatedURL, propUid: prop.value, urlLoadingInprogress: false } } );
                }
            } );
        }
        if( data.associatedURL ) {
            let oldValue = prop.typex === 'OBJECTARRAY' && prop.fielddata.oldValues ? prop.fielddata.oldValues[ prop.index ] : prop.fielddata.oldValue;
            let uiValue = prop.typex === 'OBJECTARRAY' ? prop.fielddata.uiValues[ prop.index ] : prop.fielddata && prop.fielddata.uiValue;
            return oldValue ? <div className='propertyLabelTopContainer'>
                <LinkAwHighlightPropertyHtmlDisplayVal className='sw-widgets-propertyValueLink sw-property-val sw-aria-border'
                    href={data.associatedURL.url}
                    target={data.associatedURL.target}
                    onClick={( ev ) => openObjectLinkPage( ev, prop )}
                    awHighlightPropertyHtml displayVal={prop.fielddata.uiValue}
                > { uiValue }</LinkAwHighlightPropertyHtmlDisplayVal>
                <span className='aw-jswidgets-oldText' >{oldValue}</span>
            </div> : <LinkAwHighlightPropertyHtmlDisplayVal className='sw-widgets-propertyValueLink sw-property-val sw-aria-border'
                href={data.associatedURL.url}
                target={data.associatedURL.target}
                onClick={( ev ) => openObjectLinkPage( ev, prop )}
                awHighlightPropertyHtml displayVal={prop.fielddata.uiValue}
            > { uiValue }</LinkAwHighlightPropertyHtmlDisplayVal>;
        }
    } else if( prop.typex === 'CHECKBOXARRAY' ) {
        let str = prop.fielddata.displayValues.join( ',' );
        return (
            <SpanAwHighlightPropertyHtmlDisplayVal {...filteredAttrs} className='sw-property-val' awHighlightPropertyHtml displayVal={str}>{str}</SpanAwHighlightPropertyHtmlDisplayVal>
        );
    } else {
        if( prop.fielddata.uwAnchor && !prop.fielddata.isArray ) {
            const commandConext = {
                ...prop.fielddata,
                dbValue: prop.fielddata.displayValues
            };
            return(
                hasOldValue( prop.fielddata ) ? <div className='sw-property-valWrapper'>
                    <SpanAwHighlightPropertyHtmlDisplayVal {...filteredAttrs} className='sw-property-val aw-jswidgets-change' awHighlightPropertyHtml displayVal={prop.fielddata.uiValue}>{prop.fielddata.uiValue}</SpanAwHighlightPropertyHtmlDisplayVal>
                    {prop.fielddata.oldValue && <span className='aw-jswidgets-oldText' >{prop.fielddata.oldValue}</span>}
                    <AwCommandBar anchor={prop.fielddata.uwAnchor} alignment='HORIZONTAL' context={commandConext}></AwCommandBar>
                </div> : <div className='sw-property-valWrapper'>
                    <SpanAwHighlightPropertyHtmlDisplayVal {...filteredAttrs} className='sw-property-val' awHighlightPropertyHtml displayVal={prop.fielddata.uiValue}>{prop.fielddata.uiValue}</SpanAwHighlightPropertyHtmlDisplayVal>
                    <AwCommandBar anchor={prop.fielddata.uwAnchor} alignment='HORIZONTAL' context={commandConext}></AwCommandBar>
                </div>
            );
        } else if( prop.fielddata.isArray && prop.fielddata.displayValsModel ) {
            return (
                prop.fielddata.oldValues !== undefined && prop.fielddata.oldValues ? <div className='propertyLabelTopContainer'>
                    <SpanAwHighlightPropertyHtmlDisplayVal className='sw-property-val aw-jswidgets-change' awHighlightPropertyHtml displayVal={prop.fielddata.displayValsModel[prop.index] && prop.fielddata.displayValsModel[prop.index].displayValue}>
                        {prop.fielddata.displayValsModel[prop.index] && prop.fielddata.displayValsModel[prop.index].displayValue}
                    </SpanAwHighlightPropertyHtmlDisplayVal>
                    <span className='aw-jswidgets-oldText' >{prop.fielddata.oldValues[prop.index]}</span>
                </div> : <SpanAwHighlightPropertyHtmlDisplayVal className='sw-property-val' awHighlightPropertyHtml displayVal={prop.fielddata.displayValsModel[prop.index] && prop.fielddata.displayValsModel[prop.index].displayValue}>
                    {prop.fielddata.displayValsModel[prop.index] && prop.fielddata.displayValsModel[prop.index].displayValue}
                </SpanAwHighlightPropertyHtmlDisplayVal>
            );
        }
        return (
            hasOldValue( prop.fielddata ) ? <div className='propertyLabelTopContainer'>
                <SpanAwHighlightPropertyHtmlDisplayVal className='sw-property-val aw-jswidgets-change' awHighlightPropertyHtml displayVal={prop.fielddata.uiValue}>{prop.fielddata.uiValue}</SpanAwHighlightPropertyHtmlDisplayVal>
                { prop.fielddata.oldValue && <span className='aw-jswidgets-oldText' >{prop.fielddata.oldValue}</span> }
            </div> :
                <SpanAwHighlightPropertyHtmlDisplayVal {...filteredAttrs} className='sw-property-val' awHighlightPropertyHtml displayVal={prop.fielddata.uiValue}>{prop.fielddata.uiValue}</SpanAwHighlightPropertyHtmlDisplayVal>
        );
    }
};

import AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';
import AwCommandBar from 'viewmodel/AwCommandBarViewModel';
import { AwHighlightPropertyHtml, DisplayVal } from 'js/hocCollection';

const renderProperty = ( prop, index ) => {
    const hasMoreOldValues = prop.fielddata.displayValues && prop.fielddata.oldValues ? prop.fielddata.displayValues.length < prop.fielddata.oldValues.length : false;
    const oldValueCount = hasMoreOldValues ? prop.fielddata.oldValues.length - prop.fielddata.displayValues.length : -1;

    return (
        <>
            <li className='aw-jswidgets-arrayValueCellListItem' key={index}>
                <AwPropertyNonEditVal {...prop} index={index} ></AwPropertyNonEditVal>
            </li> {
                hasMoreOldValues &&
                    <li className='aw-jswidgets-arrayValueCellListItem'>
                        {
                            prop.fielddata.oldValues
                                .filter( ( element, index ) => index >= oldValueCount )
                                .map( ( oldValue, index ) =>{
                                    return <span className='aw-jswidgets-oldText' awHighlightPropertyHtml displayVal={oldValue} key={index}></span>;
                                } )
                        }
                    </li>
            }
        </>
    );
};

export const awPropertyArrayNonEditValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;
    let commandConext = {};
    if( prop.fielddata.uwAnchor ) {
        commandConext = {
            ...prop.fielddata,
            dbValue: prop.fielddata.displayValues
        };
        return (
            <div className='sw-property-val sw-column'>
                <div className='aw-jswidgets-arrayWidgetContainer'>
                    <ul className='aw-jswidgets-arrayEditValueCellList'>
                        {
                            prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.map( ( displayNode, index ) =>
                                renderProperty( prop, index )
                            )
                        }
                    </ul>
                    <AwCommandBar anchor={prop.fielddata.uwAnchor} alignment='HORIZONTAL' context={commandConext}></AwCommandBar>
                </div>
            </div>
        );
    }
    return (
        <div className='sw-property-val sw-column'>
            <div className='aw-jswidgets-arrayWidgetContainer'>
                <ul className='aw-jswidgets-arrayEditValueCellList'>
                    {
                        prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.map( ( displayNode, index ) =>
                            renderProperty( prop, index )
                        )
                    }
                </ul>
            </div>
        </div>
    );
};

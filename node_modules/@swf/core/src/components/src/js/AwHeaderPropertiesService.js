import AwHeaderProps from 'viewmodel/AwHeaderPropsViewModel';
import AwInclude from 'viewmodel/AwIncludeViewModel';
import conditionSvc from 'js/conditionService';
import { DerivedStateResult } from 'js/derivedContextService';

const getHeaderState = ( header ) => {
    if( header.visibleWhen ) {
        const conditionSplits = header.visibleWhen.split( ' ' );
        let abc = [];
        conditionSplits.forEach( split => {
            if( /^!?ctx\.?/.test( split ) ) {
                abc.push( split.replace( /^!?ctx\.?/, '' ) );
            }
        } );
        return abc;
    }
    return [];
};

export const getApplicableViews = ( vmDef, props ) => {
    const { contributedHeaders, context } = props.props;
    return contributedHeaders.map( contributedHeader => {
        const ctxParameters = getHeaderState( contributedHeader );
        const compute = ( { ctx } ) => {
            var isActive = conditionSvc.evaluateCondition( {
                ctx: ctx,
                subPanelContext: context
                //The selection info was being sent in ng-afx, not sure why it is needed
                //Keeping it here for reference if a usecase is found
                //selection: selection,
            }, contributedHeader.visibleWhen );

            if( isActive ) {
                return contributedHeader.view;
            }
            return null;
        };
        return new DerivedStateResult( {
            ctxParameters,
            additionalParameters: [ context ],
            compute
        } );
    } );
};

export const awHeaderPropertiesRenderFn = ( props ) => {
    const {
        ctxMin,
        ...prop
    } = props;
    const { headerProps, context } = prop.props;
    const { contributedHeaders } = ctxMin;
    let headerContributedView = contributedHeaders && contributedHeaders.find( header => header !== null );

    let headerPropsRenderers = [];
    if( headerContributedView ) {
        headerPropsRenderers.push( <div key={'headerPropertiesRender0'} className='aw-layout-flexRowContainer aw-layout-headerContribution' >
            <AwInclude name={headerContributedView} subPanelContext={context}></AwInclude>
        </div> );
    }
    if( headerProps && headerProps.length ) {
        headerPropsRenderers.push( <div key={'headerPropertiesRender1'}  className='aw-layout-flexRowContainer aw-layout-headerContribution'>
            <AwHeaderProps headerProperties={headerProps}></AwHeaderProps>
        </div> );
    }
    return headerPropsRenderers;
};

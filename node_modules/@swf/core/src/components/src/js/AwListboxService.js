/* eslint-disable valid-jsdoc */
import AwWidget from 'viewmodel/AwWidgetViewModel';

/**
 * render function for AwListbox
 * @deprecated afx@4.2.0.
 * @alternative AwWidget with List LOV, reference ListLOVExampleService.js
 * @obsoleteIn afx@5.1.0
 * @returns {JSX.Element} react component
 *
 * previous:
 * <aw-listbox prop="data.listBox1" list="data.listBox1Values.dbValue" action="selectionChange" />
 *
 *
 * now:
 *
 * <AwListbox {...listBox1} action={selectionChange} list={listBox1Values.dbValue} />
 *
 * or
 *
 * <AwListbox {...listBox1} action={selectionChange} />
 * <AwWidget {...listBox1} action={selectionChange} />
 *
 * "listBox1": {
        "displayName": "Active Workspace Based Applications",
        "name": "listBox1",
        "type": "STRING",
        "isRequired": true,
        "dataProvider": "dataProviderListBox1Values",   // the 'dataProvider' attribute to replace 'list' option
        "dbValue": "Showcase",
        "uiValue": "Showcase"
 * }
 *
 */
export const awListboxRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;
    const { isSelectOnly } = prop;

    // listbox always has emptyLOVEntry false
    prop.fielddata.emptyLOVEntry = false;
    const finalProps = {
        ...prop, // mapped from fields
        autoCorrect: true, // reverting back the value if incorrect value has typed in
        isSelectOnly: isSelectOnly,
        isListbox: true
    };

    return <AwWidget {...finalProps} />;
};

export const onUpdate = ( props ) => {
    const {
        actions,
        fields,
        action,
        viewModel,
        list,
        ...prop
    } = props;

    const field = prop;
    let uiValue = field.fielddata.uiValue;

    // listbox expected to select the first item when no initial value
    // list maybe loaded async
    if( !uiValue && list && list.length > 0 ) {
        const selectedListItem = list.find( listItem => listItem.selected );
        let lovEntry = selectedListItem ? selectedListItem : list[ 0 ];
        prop.setLovVal( { lovEntry }, null );
        // call selection action if defined
        setTimeout( () => action && action( { lovEntry } ) );
    }
};

import _ from 'lodash';
import AwTile from 'viewmodel/AwTileViewModel';
import domUtils from 'js/domUtils';
const eleRef = domUtils.DOMAPIs;
export const awTileGroupRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        handleDragAndDrop,
        ...prop
    } = props;
    const { tileGroup } = prop;
    const handleDrag = (  event, tile  ) => {
        let targetVMO = [];
        let target = eleRef.closest( event.target, '.aw-tile-group' ) || eleRef.closest( event.target, '.aw-widgets-droppable' );
        if( !targetVMO.length && tile && tileGroup ) {
            targetVMO.push( { tile: tile, tileGroup: tileGroup } );
        }
        handleDragAndDrop.drag( event, target, targetVMO );
    };

    const handleDrop = (  event, tile  ) => {
        let targetVMODrop = [];
        let targetDrop = eleRef.closest( event.target, '.aw-tile-group' ) || eleRef.closest( event.target, '.aw-widgets-droppable' );
        if( targetDrop && tile && tileGroup ) {
            targetVMODrop = [ { tile: tile, tileGroup: tileGroup } ];
        }
        handleDragAndDrop.drop( event, targetDrop, targetVMODrop );
    };
    const handleTileGroupDragAndDrop = { drag: handleDrag, drop: handleDrop, draggable: true };
    return (
        <div className='aw-tile-group'onDragEnter={handleDrop} onDragOver={handleDrop}
            onDrop={handleDrop} onDragLeave={handleDrop}>
            {
                prop.tileGroup.tiles.map( ( tile, index ) =>
                    getTiles( tile, index, prop, handleTileGroupDragAndDrop )
                )
            }
        </div>
    );
};

const getTileGroupClasses = ( tile ) => {
    let className = [ 'aw-tile-tileMain aw-layout-flexColumn aw-theme-tileText aw-tile-draggable' ];
    className.push( tile.editing ? 'aw-tile-tileEdit' : '' );
    return className.join( ' ' );
};


const getTiles = ( tile, index, prop, handleTileGroupDragAndDrop ) => {
    let classes = getTileGroupClasses( tile );
    let orderObj = {
        order: index
    };

    tile.editTileCallback = prop.tileGroup.editTileCallback;
    tile.isGatewayInEditMode = prop.tileGroup.isGatewayInEditMode;
    // tile.updateToParent( tileIdx, value ) as dispatch
    // do we need a createTile just like createField?
    return (
        <div key={index + tile.displayName} data-locator='tile-main' className={classes} draggable={tile.editing ? tile.editing : false} style={orderObj}>
            <AwTile tile={tile} handleTileGroupDragAndDrop={handleTileGroupDragAndDrop} unPinTileCallback={prop.unPinTileCallback} tileClickCallback={prop.tileClickCallback}></AwTile>
        </div>
    );
};

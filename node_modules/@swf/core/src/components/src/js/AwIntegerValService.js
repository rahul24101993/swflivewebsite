// Copyright (c) 2021 Siemens
import AwPropertyNonEditVal from 'viewmodel/AwPropertyNonEditValViewModel';
import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';
import sanitizer from 'js/sanitizer';
import { getValClass } from 'js/componentUtils';

export const awIntegerValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;
    // use simple non-edit val if not editing
    if( !prop.fielddata.isEditable ) {
        return (
            <AwPropertyNonEditVal {...prop}></AwPropertyNonEditVal>
        );
    }

    let sanitizedProps = sanitizer.sanitizeHTMLTagProps( prop, 'input' );
    const inputClass = getValClass( props );

    const handleChange = ( event ) => {
        let newVal = event.target.value.replace( /[^\+|\-|0-9]/g, '' );
        if( ( newVal.indexOf( '-' ) > -1 || newVal.indexOf( '+' ) > -1 ) && newVal.length > 1 ) {
            prop.onChange( event );
        }
        event.target.value = newVal;
    };

    const handleArrayChange = ( event ) => {
        let newVal = event.target.value.replace( /[^\+|\-|0-9]/g, '' );
        if( !isNaN( Number( event.target.value ) ) && event.key === 'Enter' ) {
            prop.onChange( event );
        }
        event.target.value = newVal;
    };

    const keyPressed = ( event ) => {
        if( event.target.value !== '' && !isNaN( Number( event.target.value ) ) && ( event.key === 'Enter' ||
                event.type === 'blur' && prop.typex === 'INTEGERARRAY' ) ) {
            let val = parseInt( event.target.value, 10 );
            event.target.value = val;
            event.preventDefault();
            prop.onChange( event );
            event.target.value = '';
        }
    };

    if( prop.fielddata.renderingHint === 'label' ) {
        return (
            <AwPropertyNonEditVal {...prop} ></AwPropertyNonEditVal>
        );
    } else if( !prop.fielddata.renderingHint && prop.fielddata.hasLov ) {
        return (
            <AwPropertyLovVal {...prop} onChange={handleChange}></AwPropertyLovVal>
        );
    } else if( prop.typex === 'INTEGERARRAY' ) {
        return (
            <input type='text' maxLength={prop.maxLength} aria-required={prop.isRequired} data-locator={prop.label} placeholder={prop.placeholder} className={inputClass} onChange={handleArrayChange} onBlur={keyPressed} onKeyPress={keyPressed}/>
        );
    }
    return (
        <input {...sanitizedProps} autoComplete='off' type='text' className={inputClass}/>
    );
};

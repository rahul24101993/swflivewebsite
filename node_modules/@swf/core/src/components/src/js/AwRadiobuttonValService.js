// Copyright (c) 2021 Siemens
import _ from 'lodash';
import sanitizer from 'js/sanitizer';
import { getValClass } from 'js/componentUtils';

/**
 * render function for AwRadiobuttonVal
 * @param {*} props context for render function
 * @returns {JSX.Element} react component
 */
export const awRadiobuttonValRenderFunction = ( props ) => {
    const { vals } = props;
    //Revistme: why prop.prop?
    const property = props.prop;
    let valueList = vals;
    let sanitizedProps = sanitizer.sanitizeHTMLTagProps( property, 'input' );
    const inputClass = getValClass( props );

    if( !valueList ) {
        valueList = [ {
            propDisplayValue: property.fielddata.propertyRadioTrueText,
            propInternalValue: true
        }, {
            propDisplayValue: property.fielddata.propertyRadioFalseText,
            propInternalValue: false
        } ];
    }

    const doAction = ( ev ) => {
        property.onChange( ev );
        return property.action ? property.action( ev ) : '';
    };

    const onKeyPress = ( event, prop ) => {
        if( prop.fielddata.displayValsModel && prop.fielddata.displayValsModel.length > 0 ) {
            for( let index = 0; index < prop.fielddata.displayValsModel.length; index++ ) {
                if( prop.fielddata.displayValsModel[ index ].isInEditMode ) {
                    event.updateArray = true;
                    event.index = index;
                    break;
                }
            }
        }
        if( event.key === 'Enter' ) {
            event.preventDefault();
            prop.onChange( event );
            event.target.checked = false;
        }
    };

    if( property.typex === 'BOOLEANARRAY' ) {
        return (
            <div className='sw-radio-group' role='radiogroup' aria-label={property.name}>
                { _.map( valueList, ( val, idx ) =>
                    <label data-locator='radio-buttonLabel' className='sw-radio' htmlFor={property.name + val.propInternalValue + 'input'} key={idx}>
                        <input type='radio' className={inputClass} id={property.name + val.propInternalValue + 'input'} data-locator={property.label} name={property.name} defaultChecked={property.value === val.propInternalValue} value={val.propInternalValue}
                            aria-checked={property.value === val.propInternalValue} onKeyPress={( event ) => onKeyPress( event, property )} />
                        <span className='radio-label'>{val.propDisplayValue}</span>
                    </label>
                )
                }
            </div>
        );
    }

    // need access to "vertical" setting here (look at uwPropertyService / viewModelObjectService / modelPropertyService change?)
    return (
        <div className={`sw-radio-group ${property.fielddata.radioVertical ? 'sw-verticalVals' : ''}`} role='radiogroup' aria-label={property.name}>
            { _.map( valueList, ( val, idx ) =>
                <label data-locator='radio-buttonLabel' className='sw-radio' htmlFor={property.name + val.propInternalValue + 'input'} key={idx}>
                    <input {...sanitizedProps} className={inputClass} type='radio' id={property.name + val.propInternalValue + 'input'} name={property.name} checked={property.value === val.propInternalValue} value={val.propInternalValue}
                        aria-checked={property.value === val.propInternalValue} onChange={doAction} />
                    <span className='radio-label'>{val.propDisplayValue}</span>
                </label>
            )
            }
        </div>
    );
};

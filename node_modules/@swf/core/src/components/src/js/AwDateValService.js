import Flatpickr from 'js/flatpickerWrapper';
import dateTimeSvc from 'js/dateTimeService';
import AwIcon from 'viewmodel/AwIconViewModel';
import AwPropertyLovVal from 'viewmodel/AwPropertyLovValViewModel';
import _ from 'lodash';
import { getValClass } from 'js/componentUtils';

export const awDateValRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ctxDeprecated,
        gridContextDispatcher,
        gridContextPlaceholder,
        runActionWithViewModel,
        viewPath,
        __vmprop__,
        quickNav,
        parentSelected,
        setLovVal,
        ...prop
    } = props;

    const inputClass = getValClass( prop );
    const isDisabledClassDefined = prop && inputClass && /disabled/.test( inputClass );
    const isEnabled = !isDisabledClassDefined && prop.fielddata.isEnabled;
    const VALID_DATESTRING_LENGTH = 10;
    let dateVal = null;
    const dateContainerClass = 'sw-date-container';

    if( _.isArray( prop.value ) ) {
        prop.fielddata.displayValsModel.every( dateTimeEntry => {
            if( dateTimeEntry.isInEditMode ) {
                dateVal = dateTimeSvc.formatDate( dateTimeEntry.displayValue );
                return false;
            }
            return true;
        } );
        if( !dateVal ) {
            dateVal = dateTimeSvc.formatDate( prop.value[ prop.value.length - 1 ] );
        }
    } else {
        dateVal = dateTimeSvc.formatDate( prop.value );
    }

    const monthSelType = quickNav === 'false' ? 'static' : 'dropdown';
    const wrapElems = prop.fielddata.renderingHint === 'wrap';
    let placeholder = dateTimeSvc.getDateFormatPlaceholder();
    let otherProps = { ...prop, placeholder };
    if( prop.fielddata.hasLov ) {
        otherProps.setLovVal = setLovVal;
    }

    const handleClick = ( event ) => {
        if( event.currentTarget ) {
            const fp = event.currentTarget._flatpickr;
            if( fp ) {
                fp.toggle();
            }
        }
    };

    const handleCalendarClick = ( event ) => {
        const currentTarNode = event.currentTarget;
        if( currentTarNode ) {
            const fp = ( currentTarNode.previousSibling || currentTarNode )._flatpickr;
            _.defer( () => {
                fp.open();
            } );
        }
    };


    const handleKeyUp = ( event ) => {
        if( event.currentTarget ) {
            const dateInput = event.currentTarget.value;
            const fp = event.currentTarget._flatpickr;
            if( dateInput.length > VALID_DATESTRING_LENGTH ) {
                fp.setDate( fp.parseDate( dateInput ) );
            } else { fp.jumpToDate( fp.parseDate( dateInput ) ); }
        }
    };

    const handleKeyDown = ( event ) => {
        if( event.key && ( event.key !== 'Enter' && event.key !== ' ' ) ) { return; }
        handleClick( event );
    };

    const onChange = event => prop.onChange( { target: { value: event[ 0 ] } } );

    const onBlur = ( event ) => {
        if( event.currentTarget && !_.isUndefined( event.currentTarget.value ) && dateVal !== event.currentTarget.value ) {
            const fp = event.currentTarget._flatpickr;
            if( fp ) {
                fp.setDate( event.currentTarget.value, true );
            }
        }
    };

    const focusOnDateWidget = ( ...args ) => {
        _.defer( () => {
            args[ 2 ].input.focus();
        } );
    };

    const addQuickNavClass = function() {
        let yearContainer = this.calendarContainer;
        if( quickNav && quickNav === 'false' ) {
            yearContainer.classList.add( 'flatpickr-disable-quickNav' );
        }
    };

    const getConfig = () => {
        return {
            dateFormat: 'd-M-Y',
            defaultDate: dateVal,
            allowInput: isEnabled,
            monthSelectorType: monthSelType,
            clickOpens: false,
            onReady: addQuickNavClass,
            onOpen: focusOnDateWidget
        };
    };

    if( prop.fielddata.hasLov ) {
        return (
            <AwPropertyLovVal {...otherProps}></AwPropertyLovVal>
        );
    }

    if( !wrapElems ) {
        delete otherProps.checked;
        return (
            <div className={inputClass ? dateContainerClass + ' ' + inputClass : dateContainerClass}>
                <Flatpickr
                    {...otherProps}
                    autoComplete='off'
                    className={inputClass}
                    value={dateVal}
                    options={getConfig()}
                    onClick={handleClick}
                    onKeyDown={handleKeyDown}
                    onKeyUp={handleKeyUp}
                    onChange ={onChange}
                    onBlur={onBlur}
                    disabled = {!isEnabled}/>
                <div className='sw-widget-iconContainer' role='button' tabIndex={0} onClick={handleCalendarClick} onKeyDown={handleKeyDown}>
                    <AwIcon iconId='cmdCalendar' className='aw-widget-icon'> </AwIcon>
                </div>
            </div>
        );
    } else if( wrapElems ) {
        delete otherProps.checked;
        return (
            <div className={dateContainerClass}>
                <Flatpickr
                    {...otherProps}
                    autoComplete='off'
                    className={inputClass ? inputClass : ''}
                    options={{ dateFormat: 'd-M-Y', defaultDate: dateVal, allowInput: isEnabled, monthSelectorType: monthSelType, wrap: true, clickOpens: false }}
                    onChange ={onChange}
                    onClick={handleClick}
                    onBlur={onBlur}
                    onKeyDown={handleKeyDown}
                >
                    <input type='text' className={inputClass} placeholder={prop.placeholder} data-input/>
                    <button type='button' data-toggle>Toggle</button>
                    <button type='button' data-clear>Clear</button>
                </Flatpickr>
            </div>
        );
    }
};

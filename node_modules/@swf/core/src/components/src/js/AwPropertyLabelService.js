// Copyright (c) 2021 Siemens
import { getPropClass } from 'js/componentUtils';
import AwPattern from 'viewmodel/AwPatternViewModel';
import _ from 'lodash';

/**
 * render function for AwLPropertyLabel
 * this can be used for label-only or to wrap a child value
 * @param {*} param0 context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awPropertyLabelRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        ...prop
    } = props;

    var labelValue;

    const labelClass = prop.required && prop.fielddata && prop.fielddata.propertyDisplayName ? 'sw-required' : '';
    labelValue = prop.fielddata.propertyDisplayName;

    let displayErrorLabel = Boolean( _.isUndefined( prop.displayErrorLabel ) || prop.displayErrorLabel === true );

    if( prop.error ) {
        // apply aria role when there is an error
        if( prop.fielddata.uwAnchor ) {
            // if command bar will be present within label tag set dummy 'for' prop
            return (
                <label htmlFor='dummyProp' className={getPropClass( labelClass, prop ) }>
                    <div className='sw-property-nameWrapper'>
                        <span className='sw-property-name' {...( prop.error ? { role: 'alert', title: labelValue } : {} )}>{ labelValue }</span>
                        <span className='sw-errorSeparator'> - </span>
                        <span className='sw-errorHint'>{prop.error[0]}</span>
                        <AwPattern prop={prop}></AwPattern>
                    </div>
                    { prop.children }
                </label>
            );
        }

        return (
            <label className={getPropClass( labelClass, prop ) }>
                <div className='sw-property-nameWrapper'>
                    {displayErrorLabel && <span className='sw-property-name' {...( prop.error ? { role: 'alert', title: labelValue } : {} )}>{ labelValue }</span>}
                    &nbsp;
                    <span className='sw-errorHint'>{`(${prop.error[0]})`}</span>
                    <AwPattern prop={prop}></AwPattern>
                </div>
                { prop.children }
            </label>
        );
    }

    const renderAwPatternConditionally = ( prop ) => {
        if( prop && prop.fielddata && prop.fielddata.patterns || prop.fielddata.patternAutoAssignFlags ) {
            return <div className='propertyLabelTopContainer'>
                <span className='sw-property-name'>{ labelValue }</span>
                <AwPattern prop={prop}></AwPattern>
            </div>;
        }

        return <span className='sw-property-name'>{labelValue}</span>;
    };

    if( prop.fielddata.uwAnchor ) {
        // apply aria role when there is an error
        // if command bar will be present within label tag set dummy 'for' prop
        return (
            <label htmlFor='dummyProp' className = { getPropClass( labelClass, prop ) } >
                { renderAwPatternConditionally( prop ) }
                { prop.children }
            </label>
        );
    }

    // apply aria role when there is an error
    return (
        <label className = { getPropClass( labelClass, prop ) } >
            { renderAwPatternConditionally( prop ) }
            { prop.children }
        </label>
    );
};

import logger from 'js/logger';

const _types = {
    TOOLBAR: 'TOOLBAR',
    TASKBAR: 'TASKBAR',
    FOOTER: 'FOOTER'
};

const getClassName = ( type, orientation, negative ) => {
    const oriClass = orientation === 'HORIZONTAL' ? 'aw-advanced-bar-horizontal' : 'aw-advanced-toolbar-vertical';

    let typeClass = '';
    if( type === 'FOOTER' ) {
        typeClass = 'afx-accent-background';
    } else if( type === 'TASKBAR' ) {
        typeClass = 'afx-accent-background aw-advancedbar-container';
    } else if( type === 'TOOLBAR' && !negative ) {
        typeClass = 'afx-alt-content-background';
    }
    return `aw-advanced-bar ${oriClass} ${typeClass}`;
};

export const awAdvancedBarRenderFunction = ( props ) => {
    let { type, orientation, negative, children } = props;

    negative = negative ? Boolean( negative === 'true' ) : negative;

    if( !type ) {
        logger.error( 'Advanced bar type is undefined, failed to render aw-advanced-bar.' );
        return;
    }
    if( type in _types ) {
        if( type === _types.TOOLBAR ) {
            orientation = orientation === 'VERTICAL' ? 'VERTICAL' : 'HORIZONTAL';
        } else {
            orientation = 'HORIZONTAL';
            negative = null;
        }
    } else {
        logger.error( 'Advanced bar type should be from [TOOLBAR, TASKBAR, FOOTER], failed to render aw-advanced-bar.' );
        return;
    }

    const extendProp = { type, orientation, negative: String( negative ) };

    return <div {...extendProp} className={ getClassName( type, orientation, negative ) }> {children} </div>;
};

// Copyright (c) 2021 Siemens
import AwVisualIndicator from 'viewmodel/AwVisualIndicatorViewModel';
import AwClickableTitle from 'viewmodel/AwClickableTitleViewModel';
import _ from 'lodash';
import { AwHighlightPropertyHtml, DisplayVal } from 'js/hocCollection';

const LabelAwHighlightPropertyHtmlDisplayVal = DisplayVal( AwHighlightPropertyHtml( 'label' ) );

const renderCellProperty = ( cellProp, index ) => {
    return (
        <div key={index} className='sw-defaultCell-properties'>
            <label className='sw-property-name'>{`${cellProp.key}:`}</label>
            <LabelAwHighlightPropertyHtmlDisplayVal className='aw-widgets-propertyValue' title={cellProp.value} awHighlightPropertyHtml displayVal={cellProp.value}>{cellProp.value}</LabelAwHighlightPropertyHtmlDisplayVal>
        </div>
    );
};

const renderCellProperties = ( vmo ) => {
    if( vmo.cellProperties ) {
        return Object.entries( vmo.cellProperties ).map( ( [ key, value ], index ) => renderCellProperty( value, index ) );
    }
};

export const awDefaultCellContentRenderFunction = ( props ) => {
    const { vmo } = props; //Assume item is ViewModelObject (VMO)

    return (
        <div className='sw-column justify-center'>
            <div className='aw-widgets-cellListCellTitleBlock'>
                <AwClickableTitle title={vmo.cellHeader1} cellTitleId='CellTitle' source='list' vmo={vmo}></AwClickableTitle>
                <LabelAwHighlightPropertyHtmlDisplayVal title={vmo.cellHeader2} className='sw-cell-valName' awHighlightPropertyHtml displayVal={vmo.cellHeader2}>{vmo.cellHeader2}</LabelAwHighlightPropertyHtmlDisplayVal>
            </div>
            { renderCellProperties( vmo ) }
            {
                vmo.indicators && !_.isEmpty( vmo.indicators ) &&
                <AwVisualIndicator vmo={vmo}/>
            }
        </div>
    );
};

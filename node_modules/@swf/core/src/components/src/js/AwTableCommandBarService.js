import _ from 'lodash';
import AwCellCommandBar from 'viewmodel/AwCellCommandBarViewModel';

const getGridCellElementClasses = function( cellProperty, isInternal ) {
    const isHiddenClass = cellProperty && ( !cellProperty.isPropInEdit || cellProperty.isArray ) ? '' : 'hidden';
    const isInternalClass = isInternal ? 'aw-splm-tableGridCellCommands' : '';

    return `aw-jswidgets-gridCellCommands aw-widgets-cellInteraction ${isInternalClass} ${isHiddenClass}`;
};

export const AwTableCommandBarRenderFunction = ( props ) => {
    const { column, vmo, isInternal } = props;

    let cellProperty = {};
    if( vmo && !_.isNil( vmo.props ) ) {
        cellProperty = vmo.props[ column.field ];
    }

    const context = {
        anchor: column.commandsAnchor,
        vmo: vmo,
        prop: cellProperty
    };

    return (
        <div className={getGridCellElementClasses( cellProperty, isInternal )}>
            <div className='aw-splm-commandBarPresent aw-splm-tableFlexRow aw-cell-command-bar'>
                {
                    context.anchor && <AwCellCommandBar anchor={ context.anchor } className='aw-layout-flexRow' context={ context }></AwCellCommandBar>
                }
            </div>
        </div>
    );
};

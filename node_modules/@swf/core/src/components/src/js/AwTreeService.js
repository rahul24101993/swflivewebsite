import eventBus from 'js/eventBus';
import AwNode from 'viewmodel/AwNodeViewModel';
import _ from 'lodash';

let treeEventSubscribe = null;

let searchTreeOnEnteredValue = ( key, regex, node ) => {
    var keyStr = _.get( node, key );
    if( regex.test( keyStr ) ) {
        node.expanded = true;
        return node;
    } else if( node.children ) {
        for( var i = 0; i < node.children.length; i++ ) {
            var outNode = searchTreeOnEnteredValue( key, regex, node.children[ i ] );
            if( outNode ) {
                node.expanded = true;
                return outNode;
            }
        }
    }
    return null;
};

export const awTreeRenderFunction = ( props ) => {
    const { tree, viewModel, ...prop } = props;
    const { data, dispatch } = viewModel;

    let selectedNode = viewModel.data.selectedNode;
    let treeName = prop.name.replace( /'/gi, '' );

    const selectionHandler = ( event, node ) => {
        event.stopPropagation();
        if( node ) {
            if( treeName ) {
                eventBus.publish( treeName + '.treeNodeSelected', {
                    node: node
                } );
            }
            if( selectedNode ) {
                selectedNode.selected = false;
            }
            selectedNode = node;
            selectedNode.selected = true;
        }
        dispatch( { path: 'data.selectedNode', value: node } );
    };

    treeEventSubscribe = eventBus.subscribe( 'awtree.updateSelection', function( eventData ) {
        if( eventData.name === treeName ) {
            var key = tree[ 0 ].value ? 'value' : 'label';
            var val = '.*' + eventData.selectionValue + '.*';
            var regex = new RegExp( val, 'i' );
            var searchedNode;
            for( var i = 0; i < tree.length; i++ ) {
                searchedNode = searchTreeOnEnteredValue( key, regex, tree[ i ] );
                if( searchedNode ) {
                    break;
                }
            }
            if( searchedNode ) {
                if( selectedNode ) {
                    selectedNode.selected = false;
                }
                selectedNode = searchedNode;
                selectedNode.selected = true;
                dispatch( { path: 'data.selectedNode', value: searchedNode } );
            }
        }
    } );
    return (
        <AwNode level = {0}  tree={tree} toggleSelectionHandler={selectionHandler} displayname = {prop.displayname}>
            {prop.children}
        </AwNode>
    );
};

export const cleanupPage = () => {
    eventBus.unsubscribe( treeEventSubscribe );
};

/* eslint-disable jsx-a11y/no-static-element-interactions */
/* eslint-disable jsx-a11y/anchor-is-valid */
import AwIcon from 'viewmodel/AwIconViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import { registerDynImportEntry, includeComponent } from 'js/moduleLoader';
import { executeCommand } from 'js/command.service';
registerDynImportEntry( 'viewmodel/AwLinkPopupMenuViewModel', () => import( 'viewmodel/AwLinkPopupMenuViewModel' ) );


/**
 * 'both' show both icon and text
 * 'iconOnly' only show icon
 * 'textOnly' only show text
 */
const _defaultIconOptions = {
    enabled: true,
    title: 'textOnly',
    cell: 'textOnly',
    arrow: true
};

const processIconOptions = ( iconOptions ) => {
    let res = { showLinkText: true, showCellText: true, arrow: true };
    let result = { ..._defaultIconOptions };
    iconOptions && Object.assign( result, iconOptions );
    const { enabled, title, cell } = result;
    if( enabled ) {
        res.showLinkIcon = [ 'both', 'iconOnly' ].indexOf( title ) > -1;
        res.showLinkText = [ 'both', 'textOnly' ].indexOf( title ) > -1;
        res.showCellIcon = [ 'both', 'iconOnly' ].indexOf( cell ) > -1;
        res.showCellText = [ 'both', 'textOnly' ].indexOf( cell ) > -1;
        res.arrow = result.arrow;
    }
    return res;
};

const initializeDataProvider = ( dataProvider, data, dispatch, initialValue ) => {
    if( !dataProvider ) { return; }
    if( !data._dpInitialized ) {
        dataProvider.resetDataProvider();
        dispatch( { path: 'data._dpInitialized', value: true } );

        // Support pre-selection if defined and valid
        if( initialValue ) {
            dataProvider.selectionModel.setSelection( initialValue );
        }
    }
};

const updateCallback = dispatch => value => {
    dispatch( { path: 'data._title', value } );
};

export const awLinkRenderFunction = ( props ) => {
    const {
        viewModel,
        ctxMin,
        actions,
        i18n,
        fields,
        grids,
        formProp,
        messages,
        dataprovider: dataProvider,
        runActionWithViewModel,
        ...prop
    } = props;
    const { data, dispatch } = viewModel;

    const {
        id,
        ellipsis,
        fielddata,
        linkOptions,
        displayProperty,
        selectedprop,
        commandId
    } = prop;
    const {
        hasPopup,
        popupOptions,
        view,
        content,
        iconOptions
    } = linkOptions || {};
    let { linkPopup } = actions;
    let disabled = !props.fielddata.isEnabled;
    const hooks = { whenOpened: () => initializeDataProvider( dataProvider, data, dispatch, prop.value ) };
    const handleClick = ( event ) => {
        if( disabled || event.key && ( event.key !== 'Enter' && event.key !== ' ' ) ) { return; }
        event.preventDefault();
        if( hasPopup ) {
            // enable application to override popupOptions
            if( popupOptions && popupOptions.hooks && popupOptions.hooks.whenOpened ) {
                popupOptions.hooks.whenOpened.push( hooks.whenOpened );
            }
            let finalPopupOptions = { ...popupOptions };
            if( finalPopupOptions === undefined ) {
                finalPopupOptions = {};
            }
            if( finalPopupOptions.selectedElementCSS === undefined ) {
                finalPopupOptions.selectedElementCSS = '.aw-widgets-cellListItemSelected';
                finalPopupOptions.className = 'sw-lov-popup';
            }

            linkPopup.show( { hooks, ...finalPopupOptions } );
        } else if( commandId ) {
            executeCommand( commandId, null, props, prop, runActionWithViewModel );
        } else if( prop.action )  {
            prop.action();
        }
    };

    const propKey = fielddata.uiValue ? 'uiValue' : 'propertyDisplayName';
    const title = data._title || fielddata[ propKey ];
    // conditional tab navigable
    const tabIndex = disabled ? '-1' : '0';
    const clz = `${ellipsis ? 'ellipsis' : ''} ${disabled ? 'disabled' : ''}`;
    // if ellipsis defined, make sure link take the full width so the ellipsis will take effect
    const width = ellipsis ? 'w-12' : '';

    // simple link
    if( !hasPopup ) {
        //We really ought not to use <a></a> tag for button behavior
        return (
            <div style={prop.style} className={`aw-link ${width} ${clz}`}
                link-id={id}
                data-id={id}
                data-locator={id}
            >
                <a aria-label={title}
                    className={'sw-aria-border'}
                    onClick={handleClick}
                    onKeyDown={handleClick}
                    title={title}
                    tabIndex={tabIndex}
                >{title}</a>
            </div>
        );
    }

    // link with popup
    const options = processIconOptions( iconOptions );
    const IncludedView = view || 'AwLinkPopupMenu'; // AwLinkPopupMenu is the default view
    const childProps = {
        linkProp: prop,
        dataProvider,
        propKey,
        options,
        linkPopup,
        displayProperty,
        updateCallback: updateCallback( dispatch )
    };

    const getContent = () => {
        // use transclude content first
        let result = content;
        if( !content ) {
            result = includeComponent( IncludedView, childProps );
        }
        return result;
    };

    const finalPopupOptions = { ...linkPopup.options, ...popupOptions };

    // We really ought not to use <a></a> tag for button behavior
    return (
        <div className={width} style={prop.style}>
            <div
                data-locator={id || prop.linkPopupMenuId}
                ref={linkPopup.reference}
                role='button'
                tabIndex={tabIndex}
                className={`sw-aria-border aw-link aw-link-with-popup ${clz}`}
                onClick={handleClick}
                onKeyDown={handleClick}
            >
                {options.showLinkIcon && fielddata.iconName && <AwIcon iconId={fielddata.iconName}
                    className={`aw-base-icon aw-linkIcon ${!options.showLinkText ? 'aw-linkIconOnly' : ''}`}>
                </AwIcon>}

                {options.showLinkText && <a title={title}>{title}</a>}

                {options.arrow && <AwIcon className='aw-base-icon aw-link-arrow'
                    iconId='miscDownArrow_uxRefresh'></AwIcon>}
            </div>
            {linkPopup.open && <AwPopup {...finalPopupOptions}>
                { getContent() }
            </AwPopup>}
        </div>
    );
};

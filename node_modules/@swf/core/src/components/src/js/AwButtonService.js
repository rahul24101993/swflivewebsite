// Copyright (c) 2021 Siemens
import buttonStyles from 'js/buttonStyles';
import AwIcon from 'viewmodel/AwIconViewModel';
import analyticsSvc from 'js/analyticsService';
import _ from 'lodash';

const BASE_BUTTON_CLASS = 'sw-button';

/**
 * Method to publish analytics to server
 * @param {Object} props - props passed to the current component 
 */
const publishAnalytics = ( props ) => {
    let sanCommandData = {
        sanAnalyticsType: 'Button',
        sanCommandId: props.buttonType,
        sanPanelID: props.viewModel.getPanelId() && props.viewModel.getPanelId() !== 'undefined' ? props.viewModel.getPanelId() : ''
    };
    analyticsSvc.logCommands( sanCommandData );
};

const handleSelection = ( event, props ) => {
    event.persist();
    publishAnalytics( props );
    return props.action && props.action( event );
};

const handleBlur = ( event, props ) => {
    event.persist();
    return props.onBlur && props.onBlur( event );
};


/**
 * render function for AwWidget
 * @param {*} props context for render function interpolation
 * @returns {JSX.Element} react component
 */
export const awButtonRenderFunction = ( props ) => {
    let ariaProp = {};
    _.each( props, ( v, k ) => { k.startsWith( 'aria-' ) && ( ariaProp[ k ] = v ); } );

    if( props.iconId ) {
        return (
            <button
                data-id={props.id}
                type={props.type || 'button'}
                className='sw-button-iconContainer sw-aria-border'
                onClick={( e )=>handleSelection( e, props )}
                {...ariaProp}
                title={props.tooltip}>
                <AwIcon className='sw-button-icon' iconId={props.iconId} cmdIcon='true'></AwIcon>
            </button>
        );
    }

    let classes = [ BASE_BUTTON_CLASS ];
    classes.push( buttonStyles.getButtonStyle( props.buttonType ) );

    if( props.size === 'stretched' ) {
        classes.push( 'sw-stretch' );
    }

    return <button
        data-id={props.id}
        type={props.type || 'button'}
        className={ classes.join( ' ' ) }
        onClick={( e )=>handleSelection( e, props )}
        onBlur= { ( e ) => handleBlur( e, props )}
        title={props.tooltip}
        {...ariaProp}>
        {props.children}
    </button>;
};

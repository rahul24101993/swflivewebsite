import AwChip from 'viewmodel/AwChipViewModel';
import eventBus from 'js/eventBus';
import _ from 'lodash';

export const awChipListRenderFunction = ( props ) => {
    const { dataprovider, buttonType, action, uiIconAction, chipCondition, viewModel } = props;
    const { data } = viewModel;

    let vmCollectionObj = dataprovider.vmCollectionObj;
    let loadedVMO = vmCollectionObj && vmCollectionObj.vmCollection.loadedVMObjects || [];

    if( _.isEmpty( loadedVMO ) ) {
        return;
    }

    let subscriptions = data.subscriptions;
    let subscribedEventsStr = getEventSubscribtionsList( subscriptions );

    if( !subscribedEventsStr.includes( `${dataprovider.name}.reset` ) ) {
        data.subscriptions.push( eventBus.subscribe( `${dataprovider.name}.reset`, () => {
            initChipList( props );
        } ) );
    }

    return (
        <div className='aw-layout-flexbox aw-widgets-chipList'>
                { loadedVMO.map( ( chipModel, index ) => {
                    return (
                            <AwChip
                                chip={chipModel}
                                buttonType={buttonType}
                                action={action}
                                uiIconAction={uiIconAction}
                                key={index}
                                chipCondition={chipCondition}>
                            </AwChip>
                        );
                } )}
            </div>

    );
};

export const initChipList = ( props ) => {
    const { dataprovider } = props;
    if( dataprovider && dataprovider.resetDataProvider ) {
        dataprovider.resetDataProvider();
    }
};

export const updateDefaultSelection = ( dataProvider ) => {
    let selected = _.filter( dataProvider.vmCollectionObj.vmCollection.loadedVMObjects, { selected: true } );
    dataProvider.selectionModel.setSelection( selected );
};

const getEventSubscribtionsList = ( subscriptions ) => {
    let subscribedEventsStr = [];
    if( subscriptions.length !== 0 ) {
        subscriptions.map( ( eventSubscribed ) => {
            subscribedEventsStr.push( eventSubscribed.topic );
        } );
    }
    return subscribedEventsStr;
};

export const destroyIndicatorSubscription = ( subscriptions ) => {
    if( subscriptions && subscriptions.length > 0 ) {
        subscriptions.forEach( subscription => {
            eventBus.unsubscribe( subscription );
        } );
    }
};

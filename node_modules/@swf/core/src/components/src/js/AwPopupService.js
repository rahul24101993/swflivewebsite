// Copyright (c) 2021 Siemens
import AwPopupModal from 'viewmodel/AwPopupModalViewModel';
import AwInclude from 'viewmodel/AwIncludeViewModel';
import _ from 'lodash';

export const awPopupRenderFunction = ( options ) => {
    if( !options.open ) { return; }

    let {
        // conditions
        hasMask,
        hasArrow,
        resizable,
        // children
        children,
        // controls
        api,
        popupReference,
        // displayConstraints
        width,
        height,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        innerClassName = '',
        hasPadding,
        hasCloseButton,
        // view related
        view,
        subPanelContext
    } = options;

    // legacy props for awpopup2
    const {
        caption,
        commands,
        anchor,
        isModal,
        context
    } = options;

    // ensure value with unit
    width = ensureUnit( width );
    height = ensureUnit( height );

    // this determines which template to use
    const modal = Boolean( options.preset === 'modal' || isModal || caption );
    const generateContent = () => {
        let finalChild = children;
        // process view if user have a view defined
        if( view ) {
            // inject popupApi into subPanelContext, so that any sub view has full control on popup
            let subPanelContextFinal = Object.assign( {}, context?.subPanelContext || subPanelContext, { popupApi: api } );
            finalChild = <AwInclude name={view} {...context} subPanelContext={subPanelContextFinal}/>;
        }

        let result = finalChild;
        if( modal ) {
            let finalProps = { caption, commands, anchor, context, width, height };
            result = <AwPopupModal {...finalProps}>{finalChild}</AwPopupModal>;
        }
        return result;
    };

    const getClassName = () => {
        let result = 'sw-popup-contentContainer';
        if( hasPadding ) {
            result += ' hasPadding';
        }
        if( hasCloseButton ) {
            result += ' hasCloseButton';
        }
        if( resizable ) {
            result += ' aw-popup-enableResize';
        }
        return result;
    };

    const getResizeHandles = ()=>{
        return  <>
            <div className='resizer-right' onMouseDown={ initResizeElement } role='button' tabIndex={0}></div>
            <div className='resizer-rightBottomCorner' onMouseDown={ initResizeElement } role='button' tabIndex={0}></div>
            <div className='resizer-bottom' onMouseDown={ initResizeElement } role='button' tabIndex={0}></div>
            <div className='resizer-left' onMouseDown={ initResizeElement } role='button' tabIndex={0}></div>
            <div className='resizer-leftBottomCorner' onMouseDown={ initResizeElement } role='button' tabIndex={0}></div>
        </>;
    };

    const dataProps = generateDataAttribute( { maxHeight, maxWidth, minHeight, minWidth } );
    return <div data-locator='sw-popup' className='sw-popup' ref={popupReference}>
        { hasMask && <div data-locator='sw-popup-screenMask' className='sw-popup-screenMask'></div> }
        <div data-locator='aw-layout-popup' className={'sw-popup-layout aw-layout-popup ' + innerClassName} role='complementary'>
            <div className={getClassName()} style={{ width, height }} {...dataProps}>
                { hasCloseButton && <span role='button' tabIndex='0' data-locator='popup-close-button' onKeyDown={api.hide} onClick={api.hide} className='aw-popup-close'>&times;</span> }
                { generateContent() }
                { getClassName().includes( 'aw-popup-enableResize' ) && getResizeHandles() }
            </div>
            { hasArrow && <div data-locator='sw-popup-arrow' className='sw-popup-arrow'></div> }
        </div>
    </div>;
};

export const initResizeElement = ( onMouseDownEvent, minWidth = 5, minHeight = 5 ) => {
    let initialWidth = parseInt(
        window.getComputedStyle( onMouseDownEvent.target.parentElement ).width,
        10
    );
    let startHeight = parseInt(
        window.getComputedStyle( onMouseDownEvent.target.parentElement ).height,
        10
    );

    var dialog = onMouseDownEvent.target.parentElement.parentElement.getBoundingClientRect();
    var setDialogWidth = ( initialWidth, diffWidth, element )=>{
        let finalWidth = initialWidth + diffWidth;
        if ( finalWidth < minWidth ) {
            finalWidth = minWidth;
            diffWidth = finalWidth - initialWidth;
        }
        element.style.width = finalWidth + 'px';
        return diffWidth;
    };
    const doDrag = _.throttle( function( onDragEvent ) {
        let className = onMouseDownEvent.target.className;
        let element = onMouseDownEvent.target.parentElement;
        let parentElement = onMouseDownEvent.target.parentElement.parentElement;

        let startX = onMouseDownEvent.clientX;
        let startY = onMouseDownEvent.clientY;
        if( className === 'resizer-right' || className === 'resizer-rightBottomCorner' ) {
            let differenceWidth = onDragEvent.clientX - startX;
            setDialogWidth( initialWidth, differenceWidth, element );
        }
        if( className === 'resizer-left' || className === 'resizer-leftBottomCorner' ) {
            let differenceWidth = startX - onDragEvent.clientX;
            differenceWidth = setDialogWidth( initialWidth, differenceWidth, element );
            parentElement.style.left = dialog.left - differenceWidth + 'px';
        }
        if( className === 'resizer-bottom' || className === 'resizer-rightBottomCorner' || className === 'resizer-leftBottomCorner' ) {
            element.style.height = startHeight + onDragEvent.clientY - startY + 'px';
            if( startHeight + onDragEvent.clientY - startY < minHeight ) {
                element.style.height = minHeight + 'px';
            }
        }
    }, 50 );
    const stopDrag = () => {
        document.documentElement.removeEventListener( 'mousemove', doDrag, false );
        document.documentElement.removeEventListener( 'mouseup', stopDrag, false );
    };
    document.documentElement.addEventListener( 'mousemove', doDrag, false );
    document.documentElement.addEventListener( 'mouseup', stopDrag, false );
};

const generateDataAttribute = ( data ) => {
    let result = {};
    for( let key in data ) {
        let value = data[ key ];
        if( value ) {
            let key2 = `data-${key.replace( /([A-Z])/, ( $1 )=>'-' + $1.toLowerCase() )}`;
            result[ key2 ] = value;
        }
    }
    return result;
};

const ensureUnit = ( val ) => {
    if( !isNaN( Number( val ) ) ) {
        val += 'px';
    }
    return val;
};

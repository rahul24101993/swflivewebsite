/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */
import AwIcon from 'viewmodel/AwIconViewModel';
import AwPropertyCheckboxLovChild from 'viewmodel/AwPropertyCheckboxLovChildViewModel';
import { getListItemClasses } from 'js/componentUtils';
import { handleSelectionEvent } from 'js/selectionHelper';
import { noop } from 'js/declUtils';
import wcagSvc from 'js/wcagService';

export const awPropertyCheckboxLovChildRenderFunction = ( props ) => {
    const { viewModel, actions, ...prop } = props;
    let { field, lovEntry, dataProvider, setLovEntry } = prop;
    let { _state } = viewModel.data;
    const { toggleCheck } = actions;
    // _state is only maintained at this component level and is not passed in from the parent
    // field contains array which has all checked values but is only available at first layer (P1, P2, P3)
    const isChecked = _state.initialized ? _state.checked : lovEntry.isChecked || _state.checked;

    const isSelected = dataProvider.selectionModel.isSelected( lovEntry );
    const selectionEnabled = dataProvider.selectionModel.isSelectionEnabled();

    const isFocused = lovEntry.attn;

    const isGroupList = null;
    const fixedCellHeight = null;
    const mruFlag = lovEntry.lastMru === true ? ' sw-lov-lastMru' : '';

    const handleSelection2 = ( event, lovEntry, op ) => {
        if( dataProvider && dataProvider.selectionModel.isSelectionEnabled() ) {
            handleSelectionEvent( [ lovEntry ], dataProvider.selectionModel, event, dataProvider.vmCollectionObj.vmCollection );
            setLovEntry( lovEntry, event, op );

            toggleCheck( { checked: isChecked } );
        }
    };

    const handleSelection = ( event, lovEntry ) => {
        event && event.stopPropagation();
        if( lovEntry.hasChildren ) {
            if( !viewModel.data.indicator ) {
                viewModel.dispatch( { path: 'data', value: { indicator: true } } );
            } else {
                viewModel.dispatch( { path: 'data', value: { indicator: false } } );
            }
        } else {
            const parent = event.target.closest( 'li' );
            const input = parent.getElementsByTagName( 'input' )[ 0 ];
            input.checked = input.checked ? !input.checked : true;
            lovEntry.isChecked = input.checked;

            // handle setLovVal
            handleSelection2( event, lovEntry, input.checked ? 'checked' : 'unchecked' );
            if( field ) {
                field.action && field.action( event );
            }
        }
    };

    //Only displaying checkboxes for elements without children
    const renderCheckbox = ( lovEntry ) => {
        if( !lovEntry.hasChildren ) {
            return (
                <span className='sw-checkbox-val'>
                    <input type='checkbox' {...props.field} checked={getCheckedStatus()} aria-checked={getCheckedStatus()} onClick={noop}></input>
                    <span className='sw-checkbox-pseudo'></span>
                </span>
            );
        }
    };

    const handleKeyDown = ( event, vmo ) => {
        if( wcagSvc.isValidKeyPress( event ) ) {
            handleSelection( event, vmo );
        } else {
            wcagSvc.handleMoveUpOrDown( event, event.currentTarget.parentElement.parentElement );
        }
    };

    const expandClass = () => {
        let className = [ 'aw-jswidgets-lovchildren' ];
        if( viewModel.data.indicator ) {
            className.push( 'expanded' );
        }
        return className.join( ' ' );
    };

    const getCheckedStatus = () => {
        if( field && field.checked && field.checked.includes( lovEntry.propInternalValue ) ) {
            return true;
        }
        return false;
    };

    const getClassName = ( type ) => {
        if( !lovEntry.hasChildren && type === 'checkBox' ) {
            return getListItemClasses( isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused ) + mruFlag;
        }
        else if( lovEntry.hasChildren && type === 'drilldown' ) {
            return getListItemClasses( isSelected, selectionEnabled, isGroupList, fixedCellHeight, isFocused );
        }
        return '';
    };

    return (
        <li role='option'
            aria-selected={isSelected}
            onClick={( e )=>handleSelection( e, lovEntry )}
            onKeyDown={( e )=>handleKeyDown( e, lovEntry )}
            className={getClassName( 'checkBox' )}
        >
            <div className={getClassName( 'drilldown' )}>
                <div className='sw-checkbox-lov sw-row sw-component'>
                    { renderCheckbox( lovEntry )}
                    {
                        lovEntry.hasChildren && <div className='aw-jswidgets-lovIndicatorContainer'>
                            <div className={expandClass()}>
                                <AwIcon iconId='miscDownArrow_uxRefresh'></AwIcon  >
                            </div>
                        </div>
                    }

                    {/* <AwThumbnail icon-id='lovEntry.iconName' source='lovEntry.iconSource'/> */}
                    <div className='sw-cell-val'>
                        <div className='sw-cell-valName'
                            title={lovEntry.propDisplayValue}>{lovEntry.propDisplayValue}
                        </div>
                        <div className='sw-cell-valDesc'
                            title={lovEntry.propDisplayDescription}>{lovEntry.propDisplayDescription}
                        </div>
                    </div>
                </div>
            </div>
            {
                lovEntry.hasChildren && viewModel.data.indicator && lovEntry.getChildren().map( ( childLOVEntry, index ) =>
                    <ul className='aw-widgets-cellhierarchyItem' key= {index}>
                        <AwPropertyCheckboxLovChild field={field} lovEntry={childLOVEntry} dataProvider={dataProvider} setLovEntry={setLovEntry}></AwPropertyCheckboxLovChild>
                    </ul>
                )
            }
        </li>
    );
};

export const toggleCheck = ( state, checked ) => {
    return { ...state, initialized: true, checked: !checked };
};

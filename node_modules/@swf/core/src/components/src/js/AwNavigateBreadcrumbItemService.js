// Copyright (c) 2021 Siemens
import AwButton from 'viewmodel/AwButtonViewModel';
import AwPopup from 'viewmodel/AwPopupViewModel';
import analyticsSvc from 'js/analyticsService';
import AwInclude from 'viewmodel/AwIncludeViewModel';

/**
 * Method to publish analytics to server
 * @param {Object} crumb - crumb object for the selected/clicked crumb
 */
const publishAnalytics = ( crumb ) => {
    let sanEvent = {
        sanAnalyticsType: 'Breadcrumb',
        sanCommandId: 'navigateBreadcrumb',
        sanCommandTitle: crumb.displayName
    };
    analyticsSvc.logCommands( sanEvent );
};

export const awNavigateBreadcrumbItemRenderFn = ( props ) => {
    let { crumb, popuplist, actions, chevronClick, iconId, overflowedCrumbs } = props;
    let { chevronPopup } = actions;
    const setScopedCrumb = ( crumb, e ) => {
        e.preventDefault();
        if( crumb.onCrumbClick ) {
            crumb.onCrumbClick( crumb, e );
        }
        publishAnalytics( crumb );
    };

    const getClassNames = () => {
        const classNames = [ 'aw-widgets-breadCrumbOverflow' ];
        if( !crumb.selectedCrumb && !crumb.willOverflow ) {
            classNames.push( 'sw-aria-border aw-widgets-crumbLink' );
        } else if( crumb.selectedCrumb && !crumb.willOverflow ) {
            classNames.push( 'aw-widgets-selectedCrumb' );
        }
        if( crumb.primaryCrumb ) {
            classNames.push( 'aw-widgets-primaryCrumb' );
        }
        return classNames.join( ' ' );
    };

    const hooks = {
        whenClosed: () => {
            chevronClick( -1 );
        }
    };

    const handleChevronPopup = ( e ) => {
        e.preventDefault();
        if( popuplist ) {
            chevronPopup.show( { ...chevronPopup.options, hooks } );
            chevronClick( crumb.index );
        }
    };

    const getButtonClassNames = () => {
        const className = [ 'aw-jswidget-controlArrow' ];
        if( crumb.rotate ) {
            className.push( 'aw-jswidget-controlArrowRotateRight' );
        }
        return className.join( ' ' );
    };

    const createPopupContent = () => {
        if( overflowedCrumbs && overflowedCrumbs.length ) {
            return (
                <AwPopup {...chevronPopup.options}>
                    <ul className='aw-widgets-cellListWidget'>
                        { overflowedCrumbs.map( crumb => <li className='aw-widgets-cellListItem aw-widgets-cellTop' key={ crumb.displayName }>
                            <button type='button' onClick={ ( e )=>setScopedCrumb( crumb, e ) } className='sw-aria-border aw-widgets-crumbLink aw-widgets-breadCrumbOverflow'>{ crumb.displayName }</button>
                        </li> ) }
                    </ul>
                </AwPopup>
            );
        }
        return (
            <AwPopup {...chevronPopup.options}>
                <AwInclude
                    selectedCrumb= {crumb}
                    chevronPopup= {chevronPopup}
                    name={popuplist}
                ></AwInclude>
            </AwPopup>
        );
    };

    return (
        <div className='sw-row justify-space-around'>
            <button
                data-locator='aw-breadcrumb'
                className={getClassNames()}
                title={crumb.displayName}
                onClick={ ( e )=>setScopedCrumb( crumb, e ) }>
                {crumb.displayName}{crumb.objectsCountDisplay}
            </button>
            { iconId &&
                <AwButton
                    domRef={chevronPopup.reference}
                    data-locator='aw-controlArrow'
                    className={getButtonClassNames()}
                    aria-label='Breadcrumb'
                    iconId={iconId}
                    action={handleChevronPopup}>
                </AwButton>
            }
            {
                chevronPopup.open &&
                createPopupContent()
            }
        </div>
    );
};

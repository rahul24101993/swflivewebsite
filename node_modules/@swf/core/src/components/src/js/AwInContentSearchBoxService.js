import wcagSvc from 'js/wcagService';
import AwButton from 'viewmodel/AwButtonViewModel';
import AwStateService from 'js/awStateService';

export const awInContentSearchBoxRenderFunction = ( props ) => {
    const { viewModel, i18n, action, searchState } = props;
    let { data, dispatch } = viewModel;
    let focused = data.focused;
    let searchBoxContainerClass = focused ? [ 'aw-uiwidgets-searchBoxContainer aw-uiwidgets-searchBoxContainerFocus' ] : [ 'aw-uiwidgets-searchBoxContainer' ];
    let dbValue = props.value;

    const handleOnChange = ( event ) => {
        props.onChange( event );
    };

    const searchAction = () => {
        let searchValue = dbValue;
        let searchData = { ...searchState.value };
        let searchStringPrimary = searchData.searchStringPrimary;
        let searchStringSecondary = searchValue;
        let finalSearchString = null;
        if( !searchValue || searchValue === '' ) {
            finalSearchString = searchStringPrimary;
        } else if( searchValue && searchStringPrimary ) {
            finalSearchString = `${searchStringPrimary} AND ${searchStringSecondary}`;
        } else if( ( !searchStringPrimary || searchStringPrimary === '' ) && searchValue ) {
            finalSearchString = searchValue;
        }
        searchData.criteria.searchString = finalSearchString;
        searchData.searchStringSecondary = searchValue;
        AwStateService.instance.go( '.', {
            searchCriteria: finalSearchString
        } );
        searchData.criteriaJSONString = JSON.stringify( searchData.criteria );
        searchState.update( searchData );
    };

    const handleKeyDown = ( event ) => {
        if( event.keyCode === 13 ) {
            searchAction();
        }
    };

    const clearAction = () => {
        props.update( '' );
    };

    const setFocus = ( isFocused ) => {
        dispatch( { path: 'data.isFocused', value: isFocused } );
    };

    return (
        <div className='aw-in-content-search-box'>
            <div className={searchBoxContainerClass}>
                <input
                    type='text'
                    auto-focus={props.autofocus}
                    placeholder={i18n.inContentSearchPlaceHolder}
                    value={dbValue}
                    aria-label={i18n.inContentSearchPlaceHolder}
                    className='aw-uiwidgets-searchBox sw-noDirtyStyle'
                    disabled={props.isEnabled}
                    onKeyDown={( e )=>handleKeyDown( e )}
                    onChange={( e )=>handleOnChange( e )}
                    onFocus={()=>setFocus( true )}
                    onBlur={()=>setFocus( false )}>
                </input>
                <div className='sw-search-iconContainer'>
                    {
                        dbValue && dbValue.length > 0 &&
                        <AwButton
                            iconId='cmdClearText'
                            aria-label='cmdClearText'
                            className='aw-uiwidgets-searchResetIcon aw-aria-border'
                            action={clearAction}>
                        </AwButton>
                    }
                    <AwButton
                        iconId='cmdSearch'
                        aria-label='cmdSearch'
                        className='aw-uiwidgets-searchBoxIcon aw-aria-border'
                        action={searchAction}>
                    </AwButton>
                </div>
            </div>
        </div>
    );
};

export const syncupTextbox = ( searchState, props ) => {
    if( searchState && searchState.searchStringSecondary !== props.value ) {
        props.update( searchState.searchStringSecondary );
    }
};

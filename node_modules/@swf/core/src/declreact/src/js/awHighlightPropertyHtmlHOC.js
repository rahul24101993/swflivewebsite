// Copyright (c) 2021 Siemens
/* eslint-disable react/display-name */
/* eslint-disable react-hooks/rules-of-hooks */

/**
 * @module js/awHighlightPropertyHtmlHOC
 */
import React, { useEffect } from 'react';
import appCtxService from 'js/appCtxService';
import sanitizer from 'js/sanitizer';
import { convertToHtml } from 'js/reactHelper';
import _ from 'lodash';

const AwHighlightPropertyHtmlDisplayName = 'AwHighlightPropertyHtml';
const AwParseHtmlDisplayName = 'AwParseHtml';

const awHighlightPropertyHtmlHOC = ( Component ) => {
    // https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components
    return React.forwardRef( ( { children, ...props }, ref ) => {
        let { awHighlightPropertyHtml, displayVal, awParseHtml, ...finalProps } = props;
        !ref && ( ref = React.useRef( null ) );
        useEffect( () => {
            if( ref.current ) {
                var parsedHtml = displayVal;
                let highlighter = appCtxService.getCtx( 'highlighter' );

                if( parsedHtml ) {
                    parsedHtml = _.isNumber( parsedHtml ) ? String( parsedHtml ) : parsedHtml;
                    parsedHtml = sanitizer.htmlEscapeAllowEntities( parsedHtml, true, true );

                    if( highlighter ) {
                        parsedHtml = parsedHtml.replace( highlighter.regEx, highlighter.style );
                    }

                    parsedHtml = !parsedHtml ? '' : parsedHtml;
                    if( _.isEmpty( ref.current.innerHTML ) || displayVal !== parsedHtml ) {
                        let isRichText = props[ _.kebabCase( 'isRichText' ) ];
                        isRichText = isRichText && isRichText.match( /true/i );
                        ref.current.innerHTML = isRichText ? convertToHtml( parsedHtml ) : parsedHtml;
                    }
                }
            }
        }, [ displayVal ] );

        if( awHighlightPropertyHtml || awParseHtml ) {
            if( awHighlightPropertyHtml && typeof Component === 'object' ) {
                finalProps.awHighlightPropertyHtml = awHighlightPropertyHtml;
                Component.displayName = AwHighlightPropertyHtmlDisplayName;
            } else if( awParseHtml && typeof Component === 'object' ) {
                finalProps.awParseHtml = awParseHtml;
                Component.displayName = AwParseHtmlDisplayName;
            }
            if( typeof Component === 'object' ) {
                finalProps.displayval = displayVal;
            }
            return <Component {...finalProps} ref={ref}>{children}</Component>;
        }
        return null;
    } );
};

export default awHighlightPropertyHtmlHOC;


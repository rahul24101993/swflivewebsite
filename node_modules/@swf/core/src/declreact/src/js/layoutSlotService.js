// Copyright (c) 2020 Siemens
// eslint-disable-next-line valid-jsdoc

/**
 * This file contains the utility methods of aw-layout-slot.
 * @module js/layoutSlotService
 */
import conditionSvc from 'js/conditionService';
import commandConfigUtilsvc from 'js/commandConfigUtils.service';
import { parseCondition } from 'js/conditionParser.service';
import { concat, flatten, uniq, get, set, isString, isObject, forEach } from 'lodash';

var exports = {};

const regexContext = /context[.\w]*/;

/**
 * Find active slots  for the given application..
 *
 * @param {Object} allSlots - all slots for active application
 * @param {Object} conditionsObj - Scope to execute the command with context
 * @param {Object} context - Scope to execute the command with context
 *
 * @return {Object} most appropriate active slot.
 */
var findActiveSlotFromContext = function( allSlots, conditionsObj, context ) {
    var mostAppropriateActionHandler = null;
    var mostAppropriateConditionLength = -1;
    forEach( allSlots, function( slotConfig ) {
        var conditionExpression = slotConfig.activeWhen.expression;
        var isValidCondition = conditionSvc.evaluateCondition( context, conditionExpression );
        var expressionLength = conditionExpression.length;
        if( isObject( conditionExpression ) ) {
            expressionLength = JSON.stringify( conditionExpression ).length;
        }
        if( isValidCondition &&
            expressionLength > mostAppropriateConditionLength ) {
            mostAppropriateConditionLength = expressionLength;
            mostAppropriateActionHandler = slotConfig;
        }
    } );
    return mostAppropriateActionHandler;
};

/**
 * Find active slot  for the given slot contributions..
 *
 * @param {Object} allSlotConfigs - all slots for application
 * @param {Object} conditions - condition object
 *
 * @return {Object} most appropriate active slot.
 */

export let findActiveSlot = function( allSlotConfigs, conditions, context ) {
    return findActiveSlotFromContext( allSlotConfigs, conditions, context );
};

const DeclarativeCondition = function( condition, allSlotsJson ) {
    this.id = condition.split( '.' ).slice( -1 )[ 0 ];
    this.expression = commandConfigUtilsvc.getConditionExpression( allSlotsJson, condition );
};

export const getLayoutState = ( slots, allSlotsJson, context ) => {
    const localContextMin = {};
    const evaluateLocalContextMin = ( path ) => {
        set( localContextMin, path, get( context, path ) );
    };
    return ( slots || [] ).reduce( ( acc, slot ) => {
        if( slot.activeWhen && slot.activeWhen.condition ) {
            slot.activeWhen = new DeclarativeCondition( slot.activeWhen.condition, allSlotsJson );
        } else if( slot.activeWhen.expression && isString( slot.activeWhen.expression ) ) {
            const conditionSplits = slot.activeWhen.expression.split( ' ' );
            conditionSplits.forEach( split => {
                if( regexContext.test( split ) ) {
                    var fetchContextFromConditions = regexContext.exec( split )[ 0 ].replace( /context\./, '' );
                    evaluateLocalContextMin( fetchContextFromConditions );
                }
            } );
        }
        const conditionDeps = [
            parseCondition( slot.activeWhen )
        ];
        return {
            ctxParameters: uniq( concat( acc.ctxParameters, flatten( conditionDeps.map( x => x.ctxParameters ) ) ) ),
            additionalParameters: [ localContextMin ]
        };
    }, {
        ctxParameters: [],
        additionalParameters: []
    } );
};

exports = {
    findActiveSlot,
    getLayoutState
};
export default exports;

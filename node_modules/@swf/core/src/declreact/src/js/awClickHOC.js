// Copyright (c) 2021 Siemens
/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable react/display-name */

/**
 * @module js/awClickHOC
 */
import React from 'react';
import sanitizer from 'js/sanitizer';

const displayName = 'AwClick';

const awClickHOC = ( Component ) => {
    // https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components
    return React.forwardRef( ( { children, ...props }, ref ) => {
        !ref && ( ref = React.useRef( null ) );
        const handleClick = ( awClick, e, debounceDoubleClick ) => {
            awClick();
            if( debounceDoubleClick ) {
                e.stopPropagation();
            }
        };
        const assignClickType = ( node ) => {
            if( node ) {
                ref.current =  node;
                if( props.awClickOptions && props.awClickOptions.debounceDoubleClick ) {
                    ref.current.ondblclick = ( e ) => handleClick( props.awClick, e, props.awClickOptions.debounceDoubleClick );
                } else { ref.current.onclick = ( e ) => handleClick( props.awClick, e ); }
            }
        };
        const refCallback = React.useCallback( assignClickType, [ ref, props.awClick, props.awClickOptions ] );
        let finalProps = { ...props };
        finalProps.domRef = refCallback;
        if( typeof Component === 'object' ) {
            Component.displayName = displayName;
        }
        if( typeof Component === 'string' ) {
            return <Component {...( sanitizer.sanitizeHTMLTagProps( finalProps, Component ) )} ref={refCallback} >{children}</Component>;
        }
        return (
        // eslint-disable-next-line jsx-a11y/no-static-element-interactions
            <Component {...finalProps} ref={refCallback}>{children}</Component>
        );
    } );
};

export default awClickHOC;

// Session Discriminator.
const SESSION_DESCRIMINATOR = 'AW';

// The ID used for identification of this client
const CLIENT_ID = 'ActiveWorkspaceClient';

// Local Variables

/** The client version string */
let m_clientVersion = '10000.1.2';

/** current SOA session discriminator value */
let m_currentDiscriminator = '';

/**
 * Updates the session discriminator.
 */
exports.updateDiscriminator = function() {
    m_currentDiscriminator = SESSION_DESCRIMINATOR + Math.floor( Math.random() * 32767 );
};

/**
 * Returns the session discriminator.
 *
 * @return {String} The session discriminator.
 */
exports.getDiscriminator = function() {
    return m_currentDiscriminator;
};

/**
 * Returns the client version.
 *
 * @return {String} The client version.
 */
exports.getClientVersion = function() {
    return m_clientVersion;
};

/**
 * Builds the URL to contact the SOA proxy.
 *
 * @param {Object} request The incoming HTTP request.
 * @param {String} soaURI The SOA endpoint like "/tc/JsonRestServices/Core-2008-06-Session/loginSSO".
 * @return  {String} The URL for the SOA endpoint.
 */
exports.buildSOAUrl = function( request, soaURI ) {
    let url = '';
    url = process.env.AW_PROXY_SERVER;
    if( !url.startsWith( 'http://' ) && !url.startsWith( 'https://' ) ) {
        url = request.protocol + '://' + url;
    }
    // Add the soaURI.
    if( !soaURI.startsWith( '/' ) && !url.endsWith( '/' ) ) {
        url += '/' + soaURI;
    } else {
        url += soaURI;
    }
    return url;
};

/** Get The SOA Header state
 *
* @param {String} soaClientID The client id.
* @param {String} soaClientVersion The client version.
* @param {String} soaLogCorrelationID The log correlation ID.
* @param {Boolean} soaStateless The stateless flag.
* @return {Object} the soa header state
*/
exports.soaState = function( soaClientID, soaClientVersion, soaLogCorrelationID, soaStateless ) {
    let SOAStateObj = {};
    SOAStateObj.clientID = soaClientID;
    SOAStateObj.clientVersion = soaClientVersion;
    SOAStateObj.logCorrelationID = soaLogCorrelationID;
    SOAStateObj.stateless = soaStateless;
    return SOAStateObj;
};

/**
 * Get the SOAHeader Object
 *
 * @param {Object} soaState The State.
 * @param {Object} soaPolicy The policy.
 * @return {Object} SOAHeader
 */
exports.soaHeader = function( soaState, soaPolicy ) {
    let SOAHeaderObj = {};
    SOAHeaderObj.state = soaState;
    SOAHeaderObj.policy = soaPolicy;
    return SOAHeaderObj;
};

 /** Get The SOA Header policy
  *
  * return nothing
  * @return {Object} the soa header policy
 */
exports.soaPolicy = function() {
    let SOAPolicyObj = {};
    return SOAPolicyObj;
};

/** Get An SOA LoginSSO request.
 *
* @param {Object} soaHeader The SOA request header.
* @param {Object} soaBody The SOA request body.
* @return {Object} the soa header state
*/
exports.soaRequest = function( soaHeader, soaBody ) {
    let SOARequestObj = {};
    SOARequestObj.header = soaHeader;
    SOARequestObj.body = soaBody;
    return SOARequestObj;
};

/**
 *  Get A SOALoginSSOBody.
 *
 * @param {String} usernameParam The user name.
 * @param {String} passwordParam The ssoToken.
 * @param {String} ssoCredentialsParam The ssoToken.
 * @param {String} groupParam The group.
 * @param {String} roleParam The role.
 * @param {String} localeParam The locale.
 * @param {String} sessionDiscriminatorParam The session discriminator.
 * @return {Object} SOALoginSSOBody
 */
exports.soaLoginSSOBody = function( usernameParam, passwordParam, ssoCredentialsParam,
        groupParam, roleParam, localeParam, sessionDiscriminatorParam ) {
    let SOALoginSSOBodyObj = {};
    SOALoginSSOBodyObj.username = usernameParam;
    SOALoginSSOBodyObj.password = passwordParam;
    SOALoginSSOBodyObj.ssoCredentials = ssoCredentialsParam;
    SOALoginSSOBodyObj.group = groupParam;
    SOALoginSSOBodyObj.role = roleParam;
    SOALoginSSOBodyObj.locale = localeParam;
    SOALoginSSOBodyObj.sessionDiscriminator = sessionDiscriminatorParam;
    return SOALoginSSOBodyObj;
};

/**
 * get the CLIENT_ID.
 * @return {String} The CLIENT_ID.
 */
exports.getCLIENT_ID = function() {
    return CLIENT_ID;
};

/**
 * get the SSO Login / Logout form page.
 * @param {String} exMsg exception message
 * @return {String} The Page HTML.
 */
exports.getSSOFormPageHTML = function( exMsg ) {
    let html = '';
    html += '<html>' + '\n';
    html += '<head>' + '\n';
    html += '<title>redirectToSSO</title>' + '\n';
    html += '<script language="JavaScript" type="text/javascript">' + '\n';
    html += 'function updateURL() {' + '\n';
    html += '    {{encodedLocation}}' + '\n';
    html += '    var element = document.getElementById( \'initialLoginPage\' );' + '\n';
    html += '    element.value = location;' + '\n';
    // Auto submit if no exception to present to user.
    if( exMsg === null || exMsg === '' ) {
            html += '    document.getElementById( \'autoSubmit\' ).submit();' + '\n';
    }
    html += '}' + '\n';
    html += '</script>' + '\n';
    html += '<link rel="stylesheet" href="{{cssMain}}">' + '\n';
    // This cssTheme will override the back ground image?
    // html += '<link rel="stylesheet" href="{{cssTheme}}">' + '\n';

    html += '</head>' + '\n';

    html += '<body background="{{ssobackground}}" onLoad="updateURL()">' + '\n';
    html += '<div border=0 style="position: absolute; left: 50%; top: 52px; margin-left: -11em; color: red; font-family: sans-serif;">' + '\n';
    // Add error message, if required.
    if( exMsg !== null && exMsg !== '' ) {
        let errMsg = '<P><P><B>' + exMsg + '</B></P><BR><BR></P>' + '\n';
        html += errMsg;
    }


    html += '<form id="autoSubmit" method="{{ssoRedirectMethod}}" action="{{ssoLoginRedirectURL}}">' + '\n';
    html += '{{hiddenInputsFromParameters}}';
    // Add form TCSS fields here.
    html += '<input type=hidden name=TCSSOAPPID value="{{ssoAppId}}">' + '\n';
    html += '<input type=hidden name=TCSSORURI value="{{ssoURI}}">' + '\n';
    html += '<input type=hidden name=TCSSONOAPPLETS value="{{isSSONoApplets}}">' + '\n';
    html += '<input type=hidden name=initialLoginPage value="" id="initialLoginPage" />' + '\n';
    html += '</form>' + '\n';
    html += '</div>' + '\n';
    html += '</body>' + '\n';
    html += '</html>' + '\n';

    return html;
};


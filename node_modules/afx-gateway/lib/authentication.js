const jwt = require( 'jsonwebtoken' );
const fs = require( 'fs' );
const cookie = require( 'cookie' );

/**
 * apis object which contains all functions
 */
let apis = {};

/**
 * Reference to the jwt token map where key is JSessionID and value is jwt token
 * @private
 */
let jwtTokenMap = {};

module.exports = function( app, logger ) {
    /**
     * Traverses response object to find out whether the current user is a system admin or not
     *
     * @param {Object} responseJson - response json object
     *
     * @returns {Boolean} true if user is a System admin
     */
    apis.checkTCSystemAdmin = function( responseJson ) {
        let tcSystemAdmin = false;

        let userSessionObj = responseJson.ServiceData.modelObjects[ responseJson.userSession.uid ];
        if( userSessionObj && userSessionObj.props && userSessionObj.props.group ) {
            let groupUid = userSessionObj.props.group.dbValues[ 0 ];
            if( groupUid ) {
                let groupObj = responseJson.ServiceData.modelObjects[ userSessionObj.props.group.dbValues[ 0 ] ];
                if( groupObj.props && groupObj.props.privilege && groupObj.props.privilege.dbValues[ 0 ] !== '0' ) {
                    tcSystemAdmin = true;
                } else {
                    tcSystemAdmin = false;
                }
            }
        }

        return tcSystemAdmin;
    };

    /**
     * Generate jwt token
     *
     * @param {Boolean} tcSystemAdmin - System admin or not
     * @param {Object} response - express response object
     * @param {Object} request - request object
     * @param {Object} res - server response
     */
    apis.generateJWTToken = function( tcSystemAdmin, response, request, res ) {
        let payload = {
            tcSystemAdmin: tcSystemAdmin
        };

        let signOptions = {
            expiresIn: '12h',
            algorithm: 'RS256'
        };

        let privateKEY  = fs.readFileSync( __dirname + '\\privateKey.pem', 'utf8' );
        jwt.sign( payload, privateKEY, signOptions, function( err, token ) {
            if( !err ) {
                if( request.headers.cookie ) {
                    var cookies = cookie.parse( request.headers.cookie );
                    jwtTokenMap[ cookies.JSESSIONID ] = token;
                }
                response.send( res.text );
            } else {
                logger.error( 'Problem in signing JWT token' );
                response.send( res.text );
            }
        } );
    };

    /**
     * Reset jwt token map
     *
     * @param {Object} request - response object
     */
    apis.resetTokenMap = function( request ) {
        if( request.headers.cookie ) {
            var cookies = cookie.parse( request.headers.cookie );
            delete jwtTokenMap[ cookies.JSESSIONID ];
        }
    };

    /**
     * Set JWT token to request headers when passing to proxy server
     *
     * @param {Object} request - request object
     */
    apis.setJWTToken = function( request ) {
        if( request.headers.cookie ) {
            var cookies = cookie.parse( request.headers.cookie );
            var jwtToken = jwtTokenMap[ cookies.JSESSIONID ];
            if( jwtToken ) {
                request.headers.authToken = jwtToken;
            }
        }
    };

    return apis;
};

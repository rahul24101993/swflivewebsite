const express = require( 'express' );
const agent = require( 'superagent' );

const trace = require( 'debug' )( 'expressServer:routing' );

/**
 * @param {Object} app - express application
 * @param {Object} logger - logger
 * @param {Object} proxy - HTTP proxy
 * @param {Object} options - options
 */
module.exports = function( app, logger, proxy, options = {} ) {
    const auth = require( './authentication' )( app, logger, proxy );
    trace( options );

    app.route( '/tc/JsonRestServices/Core-2006-03-Session/logout' ).post( ( request, response, next ) => {
        response.cookie( 'JSESSIONID', 'LOGGED_OFF', { path: '/', httpOnly: true } );
        next();
    } );

    app.use( '/tc/JsonRestServices/Internal-AWS2-2017-12-DataManagement/getTCSessionAnalyticsInfo', function( req, res, next ) {
        var data = '';
        req.on( 'data', function( chunk ) {
            data += chunk;
        } );
        req.on( 'end', function() {
            req.body = data;
            next();
        } );
    } );

    app.route( '/tc/JsonRestServices/Internal-AWS2-2017-12-DataManagement/getTCSessionAnalyticsInfo' ).post( ( request, response ) => {
        agent.post( process.env.AW_PROXY_SERVER + request.originalUrl )
            .buffer( true ).send( request.body ).set( request.headers )
            .end( function( err, res ) {
                if( err ) {
                    logger.error( err );
                    response.send( err );
                } else {
                    var responseJson = JSON.parse( res.text );
                    if( responseJson.level !== 3 ) {
                        let tcSystemAdmin = auth.checkTCSystemAdmin( responseJson );
                        auth.generateJWTToken( tcSystemAdmin, response, request, res );
                    } else {
                        auth.resetTokenMap( request );
                        response.send( res.text );
                    }
                }
            } );
    } );

    for( const route of Object.values( options ) ) {
        if( route.target && route.path ) {
            logger.info( `+ ${route.target} to be used for ${route.path}` );
            if( route.clearPath ) {
                var router = express.Router();
                router.route( '*' ).all( function( request, response ) {
                    auth.setJWTToken( request );
                    proxy.web( request, response, { target: route.target } );
                } );
                app.use( route.path, router );
            } else {
                app.route( route.path ).all( ( request, response ) => {
                    auth.setJWTToken( request );
                    proxy.web( request, response, { target: route.target } );
                } );
            }
        }
    }
};

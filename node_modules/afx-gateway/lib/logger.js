const argv = require( 'yargs' ).argv;

const trace = require( 'debug' )( 'expressServer:logger' );

/**
 * @param {Object} app - express application
 * @param {Object} proxy - HTTP proxy
 * @param {Object} options - options
 * @return {Object} logger
 */
module.exports = function( app, proxy, {
    level = 'info'
} ) {
    trace( 'level', level );
    trace( 'process.env.LOG_LEVEL', process.env.LOG_LEVEL );
    trace( 'argv.log_level', argv.log_level );

    level = argv.log_level || process.env.LOG_LEVEL || level;

    const winston = require( 'winston' );
    const morgan = require( 'morgan' );

    // Configure logger & transports
    var wlogger = winston.createLogger( {
        transports: [
            new winston.transports.File( {
                level: level,
                filename: process.cwd() + '/out/log/server.log',
                // options: { flags: 'w' },
                format: winston.format.combine(
                    winston.format.timestamp(), // adds timestamp field to printf input
                    winston.format.printf( info => {
                        info.timestamp = info.timestamp.substring( 11, 19 );
                        return `[${info.timestamp}] ${info.level}/expressServer: ${info.message ? info.message.replace( /\n$/, '' ) : info.message}`;
                    } )
                )
            } ),
            new winston.transports.Console( {
                level: level,
                format: winston.format.combine(
                    winston.format.colorize(),
                    winston.format.printf( info => {
                        return `${info.level}/expressServer: ${info.message ? info.message.replace( /\n$/, '' ) : info.message}`;
                    } )
                )
            } )
        ],
        exitOnError: false // do not exit on handled exceptions
    } );

    // Configure HTTP logger

    // Debug logging of request
    app.use( morgan( 'short', {
        immediate: true,
        stream: {
            write: function( message ) { wlogger.debug( message ); }
        }
    } ) );

    // Verbose logging of response
    app.use( morgan( 'short', {
        skip: function( req, res ) { return res.statusCode >= 400; },
        stream: {
            write: function( message ) { wlogger.verbose( message ); }
        }
    } ) );

    // Warning logging of response w/ status code less than 400
    app.use( morgan( 'common', {
        skip: function( req, res ) { return res.statusCode < 400; },
        stream: {
            write: function( message ) { wlogger.warn( message ); }
        }
    } ) );

    if( proxy ) {
        // Error reporting for proxy when backend isn't responding
        proxy.on( 'error', ( error, req, res ) => {
            wlogger.error( error );
            if( !res.headersSent ) {
                res.writeHead( 500, { 'content-type': 'application/json' } );
            }
            const json = { error: 'proxy_error', reason: error.message };
            res.end( JSON.stringify( json ) );
        } );
    }

    return wlogger;
};

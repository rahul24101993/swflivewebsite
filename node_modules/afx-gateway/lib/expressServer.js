const express = require( 'express' );
const httpProxy = require( 'http-proxy' );
const argv = require( 'yargs' ).argv;

const trace = require( 'debug' )( 'expressServer' );

const hrstart = process.hrtime();

/**
 * Reference to the Express server to support close & avoid starting multiple.
 * @private
 */
let _server;

/**
 * Reference to the logger
 * @private
 */
let _logger;

/**
 * @param {Number} port - port to host express server (0=find randam available port)
 * @return {Promise} promise
 */
exports.launch = function( {
    port = 3000,
    siteDir = 'site',
    index = argv.index,
    routes = {
        tc: {
            path: '/tc/*',
            target: process.env.AW_PROXY_SERVER
        },
        fms: {
            path: '/fms/*',
            target: process.env.AW_FMS_PROXY_SERVER || `${process.env.AW_PROXY_SERVER}/aw`
        },
        vis: {
            path: '/VisProxyServlet/*',
            target: `${process.env.AW_VIS_PROXY_SERVER}/VisProxyServlet`
        },
        micro: {
            path: '/micro',
            target: process.env.AW_MICRO_SERVER,
            clearPath: true
        }
    },
    logger = {
        level: argv.log_level || 'info'
    },
    security = {},
    livereload = {},
    compression = {},
    sso = {
        tcSSOAppID:'',
        tcSSOURL:''
    }
} ) {
    trace( 'port', port );
    trace( 'siteDir', siteDir );
    trace( 'index', index );
    trace( 'routes', routes );
    trace( 'logger', logger );
    trace( 'security', security );
    trace( 'livereload', livereload );
    trace( 'compression', compression );
    trace( 'sso', sso );

    port = argv.port || process.env.EXPRESS_PORT || port;
    siteDir = argv.siteDir || siteDir;

    trace( 'RESOLVED port', port );
    trace( 'RESOLVED siteDir', siteDir );

    return new Promise( resolve => {
        if( _server ) {
            trace( 'server already started' );
            resolve( _server.address().port );
            return;
        }

        const app = express();
        const proxy = httpProxy.createProxyServer( { ws: true } );

        app.use( express.urlencoded( { extended: true } ) );

        _logger = require( './logger' )( app, proxy, logger );

        require( './compression' )( app, _logger, compression );

        require( './ssoAuth' ).init( app, sso, siteDir );

        require( './security' )( app, _logger, security );

        require( './sso' )( app, _logger, sso );

        require( './routing' )( app, _logger, proxy, routes );

        _logger.debug( `+ serving up from ${siteDir}/${index}` );
        app.use( '/', express.static( siteDir, { index: index } ) );

        require( './livereload' )( app, _logger, exports, siteDir, livereload );

        trace( 'starting server', port );
        _server = app.listen( port, '0.0.0.0', null, () => {
            port = _server.address().port;
            _logger.info( `Express web application server started @ http://localhost:${port} OR http://${process.env.COMPUTERNAME}:${port}` ); // FIXME COMPUTERNAME?

            if( argv.launch && process.platform === 'win32' ) {
                // the following will only work on windows to autolaunch the web page
                trace( 'launch in browser' );
                require( 'child_process' ).exec( `start http://localhost:${port}` );
            }

            resolve( port );
        } );
    } );
};

/**
 * Close (shutdown the Express server).
 */
exports.close = () => {
    if( _server ) {
        trace( 'closing server' );
        _server.close( () => {
            _server = null;
            const prettyTime = require( 'pretty-hrtime' );
            const hrend = process.hrtime( hrstart );
            _logger.info( `Express web application server stopped after ${prettyTime( hrend )}.` );
        } );
    }
};

{
  "version": 3,
  "file": "UISref.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/components/UISref.tsx"
  ],
  "names": [],
  "mappings": ";;AAAA,uCAA+D;AAE/D,wCAA0C;AAC1C,sCAAwC;AAExC,+BAA2D;AAC3D,4CAA2C;AAE3C,cAAc;AACd,IAAI,UAAU,GAAG,WAAW,CAAC;AAU7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AACU,QAAA,MAAM,GAA0B,UAAC,EAA4C;QAA1C,sBAAQ,EAAE,wBAAS,EAAE,oBAAO,EAAE,kBAAM,EAAE,UAAE;IAChF,IAAA,2CAAgD,EAA9C,oBAAO,EAAE,cAAqC,CAAC;IACvD,IAAM,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;IAErC,IAAM,WAAW,GAAG,mBAAW,CAC7B,UAAC,CAAC;QACA,IAAM,YAAY,GAAG,aAAa,CAAC,OAAO,CAAC;QAC3C,IAAI,iBAAU,CAAC,YAAY,CAAC,EAAE;YAC5B,YAAY,CAAC,CAAC,CAAC,CAAC;SACjB;QAED,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,EACD,CAAC,aAAa,EAAE,OAAO,CAAC,CACzB,CAAC;IAEF,IAAM,KAAK,GAAG,eAAO,CACnB;QACE,OAAA,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE;YAC/B,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,IAAI;YACV,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC;SAC1D,CAAC;IAJF,CAIE,EACJ,CAAC,aAAa,EAAE,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC,CAC9C,CAAC;IAEF,OAAO,eAAO,CAAC,cAAM,OAAA,oBAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,EAA7B,CAA6B,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC;AAEF,cAAM,CAAC,WAAW,GAAG,QAAQ,CAAC;AAE9B,cAAM,CAAC,SAAS,GAAG;IACjB,QAAQ,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU;IACtC,EAAE,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;IAC/B,MAAM,EAAE,SAAS,CAAC,MAAM;IACxB,OAAO,EAAE,SAAS,CAAC,MAAM;IACzB,SAAS,EAAE,SAAS,CAAC,MAAM;CAC5B,CAAC;AAEF,cAAM,CAAC,YAAY,GAAG;IACpB,MAAM,EAAE,EAAE;IACV,OAAO,EAAE,EAAE;IACX,SAAS,EAAE,IAAI;CAChB,CAAC",
  "sourcesContent": [
    "import { isFunction, TransitionOptions } from '@uirouter/core';\n\nimport * as _classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { cloneElement, useCallback, useMemo } from 'react';\nimport { useSref } from '../hooks/useSref';\n\n/** @hidden */\nlet classNames = _classNames;\n\nexport interface UISrefProps {\n  children?: any;\n  to: string;\n  params?: object;\n  options?: TransitionOptions;\n  className?: string;\n}\n\n/**\n * A component to links to router states\n *\n * If you are using functional components, consider using the [[useSref]] hook instead.\n *\n * This component creates links to router states, allowing the user to navigate through the application.\n * It works well together with `<a>` and `<button>` nodes.\n *\n * You can wrap your anchor/button and define the router state you want it to link to via props.\n * If the state has an associated URL, it will automatically generate and update the `href` attribute.\n * Cliking its children will trigger a state transition with the optional parameters.\n *\n * #### Example:\n * ```jsx\n * // state definition\n * const state = {\n *   name: 'catalog',\n *   url: '/shop/catalog?productId',\n *   component: Catalog\n * }\n *\n * // UISref component\n * <UISref to=\"catalog\" params={{productId:103}}>\n *   <a>Product 103</a>\n * </UISref>\n *\n * // rendered dom\n * <a href=\"#/shop/catalog?productId=103\">Product 103</a>\n * ```\n *\n * UISref falls back to native browser behavior (does not initiate a state transition) when:\n *\n * - the user Ctrl+Click / Alt+Click / Meta+Click / Shift+Click\n * - the underlying tag (e.g.: anchor tag) has a 'target' attribute, such as `<a target=\"_blank\">Open in new window</a>`\n * - preventDefault has been called on the event, e.g.: `<a onClick={e => e.preventDefault()}>no-op</a>`\n */\nexport const UISref: React.FC<UISrefProps> = ({ children, className, options, params, to }) => {\n  const { onClick, href } = useSref(to, params, options);\n  const childrenProps = children.props;\n\n  const handleClick = useCallback(\n    (e) => {\n      const childOnClick = childrenProps.onClick;\n      if (isFunction(childOnClick)) {\n        childOnClick(e);\n      }\n\n      onClick(e);\n    },\n    [childrenProps, onClick]\n  );\n\n  const props = useMemo(\n    () =>\n      Object.assign({}, childrenProps, {\n        onClick: handleClick,\n        href: href,\n        className: classNames(className, childrenProps.className),\n      }),\n    [childrenProps, handleClick, href, className]\n  );\n\n  return useMemo(() => cloneElement(children, props), [children, props]);\n};\n\nUISref.displayName = 'UISref';\n\nUISref.propTypes = {\n  children: PropTypes.element.isRequired,\n  to: PropTypes.string.isRequired,\n  params: PropTypes.object,\n  options: PropTypes.object,\n  className: PropTypes.string,\n};\n\nUISref.defaultProps = {\n  params: {},\n  options: {},\n  className: null,\n};\n"
  ]
}
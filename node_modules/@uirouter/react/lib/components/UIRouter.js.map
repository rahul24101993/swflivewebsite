{
  "version": 3,
  "file": "UIRouter.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/components/UIRouter.tsx"
  ],
  "names": [],
  "mappings": ";;AAAA,6BAA+B;AAC/B,+BAAoD;AAEpD,uCAAsG;AAEtG,gCAAwC;AAGxC;;;;;;;;;;;GAWG;AACU,QAAA,eAAe,GAAG,KAAK,CAAC,aAAa,CAAY,SAAS,CAAC,CAAC;AACzE,yEAAyE;AAC5D,QAAA,gBAAgB,GAAG,uBAAe,CAAC,QAAQ,CAAC;AAoBzD,cAAc;AACD,QAAA,6BAA6B,GAAG,mcAe3C,CAAC;AAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwEG;AACH,SAAgB,QAAQ,CAAC,KAAoB;IAC3C,IAAM,QAAQ,GAAG,cAAM,EAAiB,CAAC;IACnC,IAAA,4BAAgD,EAA/C,eAAO,EAAE,kBAAsC,CAAC;IAEvD,iBAAS,CAAC;QACR,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YACrB,+DAA+D;YACvD,IAAA,qBAAM,EAAE,qBAAM,EAAE,uBAAO,EAAE,qBAAM,CAAW;YAClD,IAAI,MAAM,EAAE;gBACV,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC;aAC3B;iBAAM,IAAI,OAAO,EAAE;gBAClB,yFAAyF;gBACzF,QAAQ,CAAC,OAAO,GAAG,IAAI,oBAAa,EAAE,CAAC;gBACvC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,qBAAc,CAAC,CAAC,CAAC,0DAA0D;gBACnG,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAA/B,CAA+B,CAAC,CAAC;gBAC7D,IAAI,MAAM;oBAAE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACrC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK,IAAK,OAAA,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAA9C,CAA8C,CAAC,CAAC;aACnF;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,qCAA6B,CAAC,CAAC;aAChD;YAED,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACzB,UAAU,CAAC,IAAI,CAAC,CAAC;SAClB;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CACxB,oBAAC,uBAAe,CAAC,QAAQ,IAAC,KAAK,EAAE,QAAQ,CAAC,OAAO,IAAG,KAAK,CAAC,QAAQ,CAA4B,CAC/F,CAAC,CAAC,CAAC,IAAI,CAAC;AACX,CAAC;AA7BD,4BA6BC",
  "sourcesContent": [
    "import * as React from 'react';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { UIRouter as _UIRouter, UIRouterPlugin, servicesPlugin, PluginFactory } from '@uirouter/core';\n\nimport { UIRouterReact } from '../core';\nimport { ReactStateDeclaration } from '../interface';\n\n/**\n * This React Context component lets you access the UIRouter instance anywhere in the component tree\n *\n * When using hooks, use [[useRouter]] instead.\n *\n * #### Example:\n * ```jsx\n * <UIRouterContext.Consumer>\n *  {router => <MyComponent router={router} />}\n * </UIRouterContext.Consumer>\n * ```\n */\nexport const UIRouterContext = React.createContext<_UIRouter>(undefined);\n/** @deprecated use [[useRouter]] or React.useContext(UIRouterContext) */\nexport const UIRouterConsumer = UIRouterContext.Consumer;\n\nexport interface UIRouterProps {\n  /**\n   * The root application content.\n   * Typically this will render a [[UIView]] viewport component */\n  children: any;\n  /** UIRouter Plugins (used with \"Component Setup\" bootstrapping, see [[UIRouter]]) */\n  plugins?: Array<PluginFactory<UIRouterPlugin>>;\n  /** The application states (used with \"Component Setup\" bootstrapping, see [[UIRouter]]) */\n  states?: Array<ReactStateDeclaration>;\n  /**\n   * A callback function to do imperative configuration after the [[UIRouterReact]] object is created\n   * (used with \"Component Setup\" bootstrapping, see [[UIRouter]])\n   */\n  config?: (router: UIRouterReact) => void;\n  /** The pre-configured UIRouterReact instance (used with \"Manual Setup\", see [[UIRouter]]) */\n  router?: UIRouterReact;\n}\n\n/** @hidden */\nexport const InstanceOrPluginsMissingError = `Router instance or plugins missing.\n You must either provide a location plugin via the plugins prop:\n \n <UIRouter plugins={[pushStateLocationPlugin]} states={[···]}>\n   <UIView />\n </UIRouter>\n \n or initialize the router yourself and pass the instance via props:\n \n const router = new UIRouterReact();\n router.plugin(pushStateLocationPlugin);\n ···\n <UIRouter router={router}>\n   <UIView />\n </UIRouter>\n `;\n\n/**\n * This is the root UIRouter component, needed for initialising the router and setting up configuration properly.\n * Every other component from this library needs to be a descendant of `<\u001dUIRouter>`, so ideally you want to use it as root of your app.\n *\n * ### Config\n *\n * There are two ways to set up the router: you can either bootstrap it manually and pass the instance to the component,\n * or pass the necessary information and let the component do it for you.\n *\n * #### Component Setup (suggested)\n *\n * Setting up the router via this component is pretty straightforward:\n *\n * ```jsx\n * const Home = () => <div>Home</div>;\n *\n * const states = [{\n *   name: 'home'\u001c,\n *   component: Home,\n *   url: '/home'\n * }];\n *\n * const plugins = [pushStateLocationPlugin];\n *\n * ReactDOM.render(\n *   <UIRouter plugins={plugins} states={states}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById('root'),\n * );\n * ```\n *\n * Optionally, you may want to access the router instance once to setup additional configuration, like registering [[TransitionHook]]s.\n * To do so, you may pass a `config` function that will be called with the newly created `router`\u001d instance as argument:\n *\n * ```jsx\n * const config = router => {\n *   // register home state as the intial one\n *   router.urlService.rules.initial({ state: 'home' });\n * }\n *\n * ReactDOM.render(\n *   <UIRouter plugins={plugins} states={states} config={config}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById('root'),\n * );\n * ```\n *\n * #### Manual Setup (advanced)\n * Alternatively you may setup the router manually (i.e. extracting the router configuration to another file).\n * You can do that by creating a new instance of the router and pass it to the component, this way the component will skip the previous props and just use the provided instance.\n *\n * > NB: since you are manually bootstrapping the router, you must register the servicesPlugin as well as the location plugin of your choice (in this example the [[pushStateLocationPlugin]]).\n *\n * ```jsx\n * const router = new UIRouterReact();\n * // activate plugins\n * router.plugin(servicesPlugin);\n * router.plugin(pushStateLocationPlugin);\n * // register states\n * router.stateRegistry.register(someState);\n * // start the router\n * router.start();\n *\n * ReactDOM.render(\n *   <UIRouter router={router}>\n *     <UIView />\n *   </UIRouter>,\n *   document.getElementById(\"root\")\n * );\n * ```\n */\nexport function UIRouter(props: UIRouterProps) {\n  const uiRouter = useRef<UIRouterReact>();\n  const [started, setStarted] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!uiRouter.current) {\n      // Router hasn't been initialised yet, this is the first render\n      const { config, states, plugins, router } = props;\n      if (router) {\n        uiRouter.current = router;\n      } else if (plugins) {\n        // We need to create a new instance of the Router and register plugins, config and states\n        uiRouter.current = new UIRouterReact();\n        uiRouter.current.plugin(servicesPlugin); // services plugins is necessary for the router to fuction\n        plugins.forEach((plugin) => uiRouter.current.plugin(plugin));\n        if (config) config(uiRouter.current);\n        (states || []).forEach((state) => uiRouter.current.stateRegistry.register(state));\n      } else {\n        throw new Error(InstanceOrPluginsMissingError);\n      }\n\n      uiRouter.current.start();\n      setStarted(true);\n    }\n  }, []);\n\n  return uiRouter.current ? (\n    <UIRouterContext.Provider value={uiRouter.current}>{props.children}</UIRouterContext.Provider>\n  ) : null;\n}\n"
  ]
}
{
  "version": 3,
  "file": "UISrefActive.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/components/UISrefActive.tsx"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+BAAiF;AACjF,wCAA0C;AAE1C,kCAA+D;AAE/D,cAAc;AACd,IAAI,UAAU,GAAG,WAAW,CAAC;AAU7B,gBAAgB;AAChB,IAAM,kBAAkB,GAAmB,cAAM,OAAA,cAAM,OAAA,SAAS,EAAT,CAAS,EAAf,CAAe,CAAC;AACpD,QAAA,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAiB,kBAAkB,CAAC,CAAC;AAsB3F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AACH,SAAgB,YAAY,CAAC,EAAsE;QAApE,sBAAQ,EAAE,wBAAS,EAAE,uBAAmB,EAAE,gBAAK;IACpE,IAAA,+CAAY,CAAiB;IACrC,IAAM,kBAAkB,GAAG,kBAAU,CAAC,2BAAmB,CAAC,CAAC;IAE3D,wDAAwD;IAClD,IAAA,yBAAyD,EAAxD,eAAO,EAAE,kBAA+C,CAAC;IAChE,IAAM,YAAY,GAAG,gCAAwB,EAAE,CAAC;IAEhD,IAAM,iBAAiB,GAAG,eAAO,CAAC;QAChC,OAAO,OAAO,CAAC,IAAI,CAAC,UAAC,EAAqB;gBAAnB,wBAAS,EAAE,kBAAM;YACtC,OAAO,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;IAEjD,IAAM,YAAY,GAAG,mBAAW,CAC9B,UAAC,SAAiB,EAAE,MAAc;QAChC,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC/D,IAAM,WAAW,GAAG,EAAE,SAAS,WAAA,EAAE,MAAM,QAAA,EAAE,CAAC;QAC1C,UAAU,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,EAA3B,CAA2B,CAAC,CAAC;QACrD,OAAO;YACL,gBAAgB,EAAE,CAAC;YACnB,UAAU,CAAC,UAAC,OAAO,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,WAAW,EAAjB,CAAiB,CAAC,EAAxC,CAAwC,CAAC,CAAC;QACpE,CAAC,CAAC;IACJ,CAAC,EACD,CAAC,kBAAkB,CAAC,CACrB,CAAC;IAEF,wDAAwD;IACxD,IAAM,yBAAyB,GAAG,iBAAiB;QACjD,CAAC,CAAC,oBAAY,CAAC,QAAQ,wBAChB,QAAQ,CAAC,KAAK,KACjB,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,YAAY,CAAC,IACxE;QACJ,CAAC,CAAC,QAAQ,CAAC;IAEb,OAAO,oBAAC,2BAAmB,CAAC,QAAQ,IAAC,KAAK,EAAE,YAAY,IAAG,yBAAyB,CAAgC,CAAC;AACvH,CAAC;AApCD,oCAoCC",
  "sourcesContent": [
    "import * as React from 'react';\nimport { useState, useCallback, useContext, useMemo, cloneElement } from 'react';\nimport * as _classNames from 'classnames';\n\nimport { useCurrentStateAndParams, useRouter } from '../hooks';\n\n/** @hidden */\nlet classNames = _classNames;\n\nexport interface UISrefActiveState {\n  stateName: string;\n  params: object;\n}\n\n/** @hidden */\nexport type AddStateInfoFn = (to: string, params: { [key: string]: any }) => () => void;\n\n/** @internal */\nconst rootAddStateInfoFn: AddStateInfoFn = () => () => undefined;\nexport const UISrefActiveContext = React.createContext<AddStateInfoFn>(rootAddStateInfoFn);\n\nexport interface UISrefActiveProps {\n  /**\n   * The class string to apply when the state is active (i.e. `\"menu-item-active\"`)\n   */\n  class?: string;\n  /**\n   * Whether the target state of the child [[UISref]] should match exactly the state or could also be a child state.\n   * When set to `true`, if state params are supplied then they will be tested for strict equality against the current active url params, so all params must match with none missing and no extras.\n   */\n  exact?: Boolean;\n  /**\n   * The component to apply the active class to. It should be a [[UISref]] or any node with [[UISref]] descendant\n   */\n  children?: any;\n  /**\n   * Any class will be passed down to its child component\n   */\n  className?: string;\n}\n\n/**\n * A component that applies an 'active' class when a [[UISref]] component's state is active.\n *\n * If you are using functional components, consider using the [[useSrefActive]] hook instead.\n *\n * This component works together with `[[UISref]]` child components.\n * It adds an active class to its child element when any of its children `[[UISref]]`'s state is active.\n *\n * This component can be used to highlight the active state in a navigation menu.\n *\n * ```jsx\n * <UISrefActive class=\"active-item\">\n *   <UISref to=\"homestate\"><a className=\"menu-item\">Home</a></UISref>\n * </UISrefActive>\n *\n * // rendered when state is inactive\n * <a href=\"/path/to/homestate\" class=\"menu-item\">Home</a>\n *\n * // rendered when state is active\n * <a href=\"/path/to/homestate\" class=\"menu-item active-item\">Home</a>\n * ```\n *\n * Note: A `UISrefActive` will add the class if any child `UISref` is active.\n * This can be used to highlight a parent nav item if any nested child nav items are active.\n *\n *\n * ```jsx\n * <UISrefActive class=\"active\">\n *   <div className=\"menu-item-dropdown\">\n *     <span>Admin<span>\n *     <ul>\n *       <li><UISref to=\"users\"><a className=\"menu-item\">Users</a></UISref></li>\n *       <li><UISref to=\"groups\"><a className=\"menu-item\">Groups</a></UISref></li>\n *     </ul>\n *   </div>\n * </UISrefActive>\n *\n * // rendered with either users or groups states are active\n * <div className=\"active menu-item-dropdown\">\n * ```\n */\nexport function UISrefActive({ children, className, class: classToApply, exact }: UISrefActiveProps) {\n  const { stateService } = useRouter();\n  const parentAddStateInfo = useContext(UISrefActiveContext);\n\n  // keep track of states to watch and their activeClasses\n  const [uiSrefs, setUiSrefs] = useState<UISrefActiveState[]>([]);\n  const currentState = useCurrentStateAndParams();\n\n  const isAnyUiSrefActive = useMemo(() => {\n    return uiSrefs.some(({ stateName, params }) => {\n      return exact ? stateService.is(stateName, params) : stateService.includes(stateName, params);\n    });\n  }, [uiSrefs, exact, stateService, currentState]);\n\n  const addStateInfo = useCallback(\n    (stateName: string, params: object) => {\n      const parentDeregister = parentAddStateInfo(stateName, params);\n      const addedUiSref = { stateName, params };\n      setUiSrefs((uiSrefs) => uiSrefs.concat(addedUiSref));\n      return () => {\n        parentDeregister();\n        setUiSrefs((uiSrefs) => uiSrefs.filter((x) => x !== addedUiSref));\n      };\n    },\n    [parentAddStateInfo]\n  );\n\n  // If any active class is defined, apply it the children\n  const childrenWithActiveClasses = isAnyUiSrefActive\n    ? cloneElement(children, {\n        ...children.props,\n        className: classNames(className, children.props.className, classToApply),\n      })\n    : children;\n\n  return <UISrefActiveContext.Provider value={addStateInfo}>{childrenWithActiveClasses}</UISrefActiveContext.Provider>;\n}\n"
  ]
}
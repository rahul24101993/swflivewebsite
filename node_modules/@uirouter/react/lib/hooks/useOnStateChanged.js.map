{
  "version": 3,
  "file": "useOnStateChanged.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useOnStateChanged.ts"
  ],
  "names": [],
  "mappings": ";;AACA,yDAAwD;AAExD;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,iBAAiB,CAAC,sBAA4E;IAC5G,qCAAiB,CAAC,WAAW,EAAE,EAAE,EAAE,UAAC,KAAK,IAAK,OAAA,sBAAsB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAtD,CAAsD,CAAC,CAAC;AACxG,CAAC;AAFD,8CAEC",
  "sourcesContent": [
    "import { RawParams, StateDeclaration } from '@uirouter/core';\nimport { useTransitionHook } from './useTransitionHook';\n\n/**\n * A hook that invokes the provided callback whenever the current state changes.\n *\n * The callback receives the [[StateDeclaration]] and parameter values of the new current state.\n *\n * Example:\n * ```jsx\n * function ShowCurrentState() {\n *   const [routerState, setRouterState] = useState('');\n *   useOnStateChanged((state) => setState(state.name);\n *   return <span>{routerState ? `state changed to ${routerState}` : null}</span>\n * }\n * ```\n *\n * @param onStateChangedCallback a callback that receives the new current state and parameter values\n */\nexport function useOnStateChanged(onStateChangedCallback: (state: StateDeclaration, params: RawParams) => void) {\n  useTransitionHook('onSuccess', {}, (trans) => onStateChangedCallback(trans.to(), trans.params('to')));\n}\n"
  ]
}
{
  "version": 3,
  "file": "useCurrentStateAndParams.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useCurrentStateAndParams.ts"
  ],
  "names": [],
  "mappings": ";;AAAA,+BAAiC;AAEjC,yDAAwD;AACxD,yCAAwC;AAExC;;;;;;;;;;;;GAYG;AACH,SAAgB,wBAAwB;IACtC,IAAM,OAAO,GAAG,qBAAS,EAAE,CAAC,OAAO,CAAC;IAC9B,IAAA,yEAAqG,EAApG,iBAAS,EAAE,oBAAyF,CAAC;IAC5G,qCAAiB,CAAC,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,YAAY,CAAC,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,CAAC,EAA/B,CAA+B,CAAC,CAAC;IAEtE,OAAO,SAAS,CAAC;AACnB,CAAC;AAND,4DAMC",
  "sourcesContent": [
    "import { useState } from 'react';\nimport { RawParams, StateDeclaration } from '@uirouter/core';\nimport { useOnStateChanged } from './useOnStateChanged';\nimport { useRouter } from './useRouter';\n\n/**\n * A hook that returns the current state and parameter values.\n *\n * Each time the current state or parameter values change, the component will re-render with the new values.\n *\n * Example:\n * ```jsx\n * function CurrentState() {\n *   const { state, params } = useCurrentStateAndParams();\n *   return <span>{state.name} ({JSON.stringify(params)})</span>;\n * }\n * ```\n */\nexport function useCurrentStateAndParams(): { state: StateDeclaration; params: RawParams } {\n  const globals = useRouter().globals;\n  const [stateData, setStateData] = useState({ state: globals.current, params: globals.params as RawParams });\n  useOnStateChanged((state, params) => setStateData({ state, params }));\n\n  return stateData;\n}\n"
  ]
}
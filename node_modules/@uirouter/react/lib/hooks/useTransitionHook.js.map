{
  "version": 3,
  "file": "useTransitionHook.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useTransitionHook.ts"
  ],
  "names": [],
  "mappings": ";AAAA,0DAA0D;;AAE1D,+BAAkC;AAElC,yDAAwD;AACxD,yCAAwC;AACxC,yDAAwD;AAkDxD,SAAgB,iBAAiB,CAC/B,sBAAgD,EAChD,QAA2B,EAC3B,QAAkD,EAClD,OAAwB;IAEhB,IAAA,6DAAiB,CAAiB;IAC1C,IAAM,cAAc,GAAG,qCAAiB,CAAC,QAAQ,CAAC,CAAC;IACnD,iBAAS,CAAC;QACR,IAAI,CAAC,CAAC,QAAQ,EAAE;YACd,IAAM,YAAU,GAAG,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,QAAQ,EAAE,cAAqB,EAAE,OAAO,CAAC,CAAC;YACvG,OAAO,cAAM,OAAA,YAAU,EAAE,EAAZ,CAAY,CAAC;SAC3B;aAAM;YACL,OAAO,cAAO,CAAC,CAAC;SACjB;IACH,CAAC,EAAE,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,qCAAiB,CAAC,QAAQ,CAAC,EAAE,qCAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3G,CAAC;AAhBD,8CAgBC",
  "sourcesContent": [
    "/** @packageDocumentation @reactapi @module react_hooks */\n\nimport { useEffect } from 'react';\nimport { TransitionStateHookFn, HookMatchCriteria, HookRegOptions, TransitionHookFn } from '@uirouter/core';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useRouter } from './useRouter';\nimport { useStableCallback } from './useStableCallback';\n\ntype HookName = 'onBefore' | 'onStart' | 'onSuccess' | 'onError' | 'onSuccess' | 'onFinish';\ntype StateHookName = 'onEnter' | 'onRetain' | 'onExit';\n\n/**\n * A React hook that registers a UI-Router Transition Hook and manages its lifecycle.\n *\n * This hook can be used to register a Transition Hook with UI-Router from a component.\n * The Transition Hook will be automatically de-registered when the component unmounts.\n * The Transition Hook will receive the current [[Transition]] object (like all Transition Hooks).\n *\n *\n * Example:\n * ```jsx\n * function DisallowExitUntilVerified() {\n *   const [allowExit, setAllowExit] = useState(false);\n *   useTransitionHook('onBefore', {}, transition => {\n *     return allowExit;\n *   });\n *\n *   if (canExit) {\n *     return <span>OK, the current state can be exited!</span>\n *   }\n *   return (\n *     <div>\n *       The current state can't be exited until you click this button:\n *       <button onClick={() => setAllowExit(true)}>Allow Exit</button>\n *      </div>\n *   )\n * }\n * ```\n *\n * @param hookName the name of the lifecycle event\n * @param criteria the transition criteria object\n * @param callback the callback to invoke\n * @param options transition hook options\n */\nexport function useTransitionHook(\n  hookName: HookName,\n  criteria: HookMatchCriteria,\n  callback: TransitionHookFn,\n  options?: HookRegOptions\n);\nexport function useTransitionHook(\n  hookName: StateHookName,\n  criteria: HookMatchCriteria,\n  callback: TransitionStateHookFn,\n  options?: HookRegOptions\n);\nexport function useTransitionHook(\n  hookRegistrationFnName: HookName | StateHookName,\n  criteria: HookMatchCriteria,\n  callback: TransitionHookFn | TransitionStateHookFn,\n  options?: HookRegOptions\n) {\n  const { transitionService } = useRouter();\n  const stableCallback = useStableCallback(callback);\n  useEffect(() => {\n    if (!!criteria) {\n      const deregister = transitionService[hookRegistrationFnName](criteria, stableCallback as any, options);\n      return () => deregister();\n    } else {\n      return () => {};\n    }\n  }, [transitionService, hookRegistrationFnName, useDeepObjectDiff(criteria), useDeepObjectDiff(options)]);\n}\n"
  ]
}
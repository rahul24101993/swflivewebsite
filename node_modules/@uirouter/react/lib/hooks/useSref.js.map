{
  "version": 3,
  "file": "useSref.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useSref.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "/** @packageDocumentation @reactapi @module react_hooks */\n\nimport * as React from 'react';\nimport { ReactHTMLElement, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { isString, StateDeclaration, TransitionOptions, UIRouter } from '@uirouter/core';\nimport { UISrefActiveContext } from '../components';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useParentView } from './useParentView';\nimport { useRouter } from './useRouter';\n\nexport interface LinkProps {\n  onClick: React.MouseEventHandler<any>;\n  href?: string;\n}\n\n/** @hidden */\nexport const IncorrectStateNameTypeError = `The state name passed to useSref must be a string.`;\n\n/** @hidden Gets all StateDeclarations that are registered in the StateRegistry. */\nfunction useListOfAllStates(router: UIRouter) {\n  const initial = useMemo(() => router.stateRegistry.get(), []);\n  const [states, setStates] = useState(initial);\n  useEffect(() => router.stateRegistry.onStatesChanged(() => setStates(router.stateRegistry.get())), []);\n  return states;\n}\n\n/** @hidden Gets the StateDeclaration that this sref targets */\nfunction useTargetState(router: UIRouter, stateName: string, relative: string): StateDeclaration {\n  // Whenever any states are added/removed from the registry, get the target state again\n  const allStates = useListOfAllStates(router);\n  return useMemo(() => {\n    return router.stateRegistry.get(stateName, relative);\n  }, [router, stateName, relative, allStates]);\n}\n\n/**\n * A hook to create a link to a state.\n *\n * This hook returns link (anchor tag) props for a given state reference.\n * The resulting props can be spread onto an anchor tag.\n *\n * The props returned from this hook are:\n *\n * - `href`: the browser URL of the referenced state\n * - `onClick`: a mouse event handler that will active the referenced state\n *\n * Example:\n * ```jsx\n * function HomeLink() {\n *   const sref = useSref('home');\n *   return <a {...sref}>Home</a>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function UserLink({ userId, username }) {\n *   const sref = useSref('users.user', { userId: userId });\n *   return <a {...sref}>{username}</a>\n * }\n * ```\n *\n * The `onClick` handler falls back to native browser behavior (does not initiate a state transition) when:\n *\n * - the user Ctrl+Click / Alt+Click / Meta+Click / Shift+Click\n * - the underlying tag (e.g.: anchor tag) has a 'target' attribute, such as `<a target=\"_blank\">Open in new window</a>`\n * - preventDefault has been called on the event, e.g.: `<a onClick={e => e.preventDefault()}>no-op</a>`\n *\n * @param stateName The name of the state to link to\n * @param params Any parameter values\n * @param options Transition options used when the onClick handler fires.\n */\nexport function useSref(stateName: string, params: object = {}, options: TransitionOptions = {}): LinkProps {\n  if (!isString(stateName)) {\n    throw new Error(IncorrectStateNameTypeError);\n  }\n\n  const router = useRouter();\n  // memoize the params object until the nested values actually change so they can be used as deps\n  const paramsMemo = useMemo(() => params, [useDeepObjectDiff(params)]);\n\n  const relative: string = useParentView().context.name;\n  const optionsMemo = useMemo(() => ({ relative, inherit: true, ...options }), [relative, options]);\n  const targetState = useTargetState(router, stateName, relative);\n  // Update href when the target StateDeclaration changes (in case the the state definition itself changes)\n  // This is necessary to handle things like future states\n  const href = useMemo(() => {\n    return router.stateService.href(stateName, paramsMemo, optionsMemo);\n  }, [router, stateName, paramsMemo, optionsMemo, targetState]);\n\n  const onClick = useCallback(\n    (e: React.MouseEvent) => {\n      const targetAttr = (e.target as any)?.attributes?.target;\n      const modifierKey = e.button >= 1 || e.ctrlKey || e.metaKey || e.shiftKey || e.altKey;\n      if (!e.defaultPrevented && targetAttr == null && !modifierKey) {\n        e.preventDefault();\n        router.stateService.go(stateName, paramsMemo, optionsMemo);\n      }\n    },\n    [router, stateName, paramsMemo, optionsMemo]\n  );\n\n  // Participate in any parent UISrefActive\n  const parentUISrefActiveAddStateInfo = useContext(UISrefActiveContext);\n  useEffect(() => {\n    return parentUISrefActiveAddStateInfo(targetState && targetState.name, paramsMemo);\n  }, [targetState, paramsMemo]);\n\n  return { onClick, href };\n}\n"
  ]
}
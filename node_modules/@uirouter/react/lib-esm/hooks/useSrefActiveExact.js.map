{
  "version": 3,
  "file": "useSrefActiveExact.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useSrefActiveExact.ts"
  ],
  "names": [],
  "mappings": "AAAA,0DAA0D;AAG1D,OAAO,EAAa,OAAO,EAAE,MAAM,WAAW,CAAC;AAC/C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAM5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCG;AACH,MAAM,UAAU,kBAAkB,CAChC,SAAiB,EACjB,MAAmB,EACnB,WAAmB,EACnB,OAA+B;IAF/B,uBAAA,EAAA,WAAmB;IAEnB,wBAAA,EAAA,YAA+B;IAEzB,IAAA,wCAAuD,EAArD,cAAI,EAAE,oBAA+C,CAAC;IAC9D,IAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IACtD,IAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;IAC9C,OAAO,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC;AACtC,CAAC",
  "sourcesContent": [
    "/** @packageDocumentation @reactapi @module react_hooks */\n\nimport { TransitionOptions } from '@uirouter/core';\nimport { LinkProps, useSref } from './useSref';\nimport { useIsActive } from './useIsActive';\n\ninterface ActiveLinkProps extends LinkProps {\n  className: string;\n}\n\n/**\n * A hook to create a link to a state and track its active status.\n *\n * This hook returns link (anchor tag) props for a given state reference.\n * The resulting props can be spread onto an anchor tag.\n * If the referenced state (and params) is active, then the activeClass is returned as the `className` prop.\n *\n * The props returned from this hook are:\n *\n * - `href`: the browser URL of the referenced state\n * - `onClick`: a mouse event handler that will active the referenced state\n * - `className`: the activeClass parameter when the state is active, otherwise an empty string\n *\n * Example:\n * ```jsx\n * function HomeLink() {\n *   const sref = useSref('home', null, 'active');\n *   return <a {...sref}>Home</a>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function UserLink({ userId, username }) {\n *   const sref = useSref('users.user', { userId: userId }, 'active');\n *   return <a {...sref}>{username}</a>\n * }\n * ```\n *\n * This hook is a variation of the [[useSrefActive]] hook.\n * This variation does not render the `activeClass` if a child state is active.\n *\n * @param stateName The name of the state to link to\n * @param params Any parameter values\n * @param activeClass A css class string to use when the state is active\n * @param options Transition options used when the onClick handler fires.\n */\nexport function useSrefActiveExact(\n  stateName: string,\n  params: object = {},\n  activeClass: string,\n  options: TransitionOptions = {}\n): ActiveLinkProps {\n  const { href, onClick } = useSref(stateName, params, options);\n  const isActive = useIsActive(stateName, params, true);\n  const className = isActive ? activeClass : '';\n  return { href, onClick, className };\n}\n"
  ]
}
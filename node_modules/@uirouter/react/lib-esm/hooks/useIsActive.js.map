{
  "version": 3,
  "file": "useIsActive.js",
  "sourceRoot": "",
  "sources": [
    "@uirouter/react/hooks/useIsActive.ts"
  ],
  "names": [],
  "mappings": "AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAErD,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAExC,cAAc;AACd,SAAS,aAAa,CAAC,MAAgB,EAAE,SAAiB,EAAE,MAAc,EAAE,QAAgB,EAAE,KAAc;IAC1G,OAAO,KAAK;QACV,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,QAAQ,UAAA,EAAE,CAAC;QACzD,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;AACpE,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,UAAU,WAAW,CAAC,SAAiB,EAAE,MAAa,EAAE,KAAa;IAA5B,uBAAA,EAAA,aAAa;IAAE,sBAAA,EAAA,aAAa;IACzE,IAAM,MAAM,GAAG,SAAS,EAAE,CAAC;IAC3B,IAAM,QAAQ,GAAG,aAAa,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;IAC9C,mDAAmD;IACnD,IAAM,eAAe,GAAG,OAAO,CAAC,cAAM,OAAA,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAzD,CAAyD,EAAE,EAAE,CAAC,CAAC;IAC/F,IAAA,8BAAmD,EAAlD,gBAAQ,EAAE,mBAAwC,CAAC;IAE1D,IAAM,oBAAoB,GAAG;QAC3B,IAAM,WAAW,GAAG,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC9E,IAAI,WAAW,KAAK,QAAQ,EAAE;YAC5B,WAAW,CAAC,WAAW,CAAC,CAAC;SAC1B;IACH,CAAC,CAAC;IAEF,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;IACxC,SAAS,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,iBAAiB,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IAEvF,OAAO,QAAQ,CAAC;AAClB,CAAC",
  "sourcesContent": [
    "import { useEffect, useMemo, useState } from 'react';\nimport { UIRouter } from '@uirouter/core';\nimport { useDeepObjectDiff } from './useDeepObjectDiff';\nimport { useOnStateChanged } from './useOnStateChanged';\nimport { useParentView } from './useParentView';\nimport { useRouter } from './useRouter';\n\n/** @hidden */\nfunction checkIfActive(router: UIRouter, stateName: string, params: object, relative: string, exact: boolean) {\n  return exact\n    ? router.stateService.is(stateName, params, { relative })\n    : router.stateService.includes(stateName, params, { relative });\n}\n\n/**\n * A hook that returns true if a given state is active.\n *\n * Example:\n * ```jsx\n * function ContactsLabel() {\n *  const isActive = useIsActive('contacts');\n *  return <span className={isActive ? 'active' : 'inactive'}>Contacts></span>\n * }\n * ```\n *\n * Example:\n * ```jsx\n * function JoeLabel() {\n *  const isActive = useIsActive('contacts.contact', { contactId: 'joe' });\n *  return <span className={isActive ? 'active' : 'inactive'}>Joe></span>\n * }\n * ```\n *\n * @param stateName the name of the state to check.\n *        Relative state names such as '.child' are supported.\n *        Relative states are resolved relative to the state that rendered the hook.\n * @param params if present, the hook will only return true if all the provided parameter values match.\n * @param exact when true, the hook returns true only when the state matches exactly.\n *        when false, returns true if the state matches, or any child state matches.\n */\nexport function useIsActive(stateName: string, params = null, exact = false) {\n  const router = useRouter();\n  const relative = useParentView().context.name;\n  // Don't re-compute initialIsActive on every render\n  const initialIsActive = useMemo(() => checkIfActive(router, stateName, params, relative, exact), []);\n  const [isActive, setIsActive] = useState(initialIsActive);\n\n  const checkIfActiveChanged = () => {\n    const newIsActive = checkIfActive(router, stateName, params, relative, exact);\n    if (newIsActive !== isActive) {\n      setIsActive(newIsActive);\n    }\n  };\n\n  useOnStateChanged(checkIfActiveChanged);\n  useEffect(checkIfActiveChanged, [router, stateName, useDeepObjectDiff(params), exact]);\n\n  return isActive;\n}\n"
  ]
}